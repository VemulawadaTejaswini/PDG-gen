Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_4 $$ server.enqueue(new MockResponse().setBody("AA").setResponseCode(HttpURLConnection.HTTP_PARTIAL).addHeader("Expires: " + formatDate(1, TimeUnit.HOURS)).addHeader("Content-Range: bytes 1000-1001/2000"))[ CD ]
Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_8 $$ server.enqueue(new MockResponse().setBody("BB"))[ CD ]
Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_9 $$ server.play()[ CD ]
Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_10 $$ URL url = server.getUrl("/")[ CD ]
Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_11 $$ URLConnection range = url.openConnection()[ CD ]
Line_10 $$ URL url = server.getUrl("/")-->Line_11 $$ url.openConnection()[ FD ]
Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_12 $$ range.addRequestProperty("Range", "bytes=1000-1001")[ CD ]
Line_11 $$ URLConnection range = url.openConnection()-->Line_12 $$ range.addRequestProperty("Range", "bytes=1000-1001")[ FD ]
Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_13 $$ assertEquals("AA", readAscii(range))[ CD ]
Line_11 $$ URLConnection range = url.openConnection()-->Line_13 $$ readAscii(range)[ FD ]
Line_3 $$ public void testPartialRangeResponsesDoNotCorruptCache() -->Line_14 $$ assertEquals("BB", readAscii(url.openConnection()))[ CD ]
Line_10 $$ URL url = server.getUrl("/")-->Line_14 $$ url.openConnection()[ FD ]
