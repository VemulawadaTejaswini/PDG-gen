Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ int n = sc.nextInt()[ CD ]
Line_4 $$ int n = sc.nextInt()-->Line_4 $$ int n = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int n = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ int t = sc.nextInt()[ CD ]
Line_5 $$ int t = sc.nextInt()-->Line_5 $$ int t = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ int t = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ int ans = Integer.MAX_VALUE[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ TreeMap<Integer, Integer> map = new TreeMap()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_4 $$ int n = sc.nextInt()-->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_9 $$ int key = sc.nextInt()[ CD ]
Line_9 $$ int key = sc.nextInt()-->Line_9 $$ int key = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_9 $$ int key = sc.nextInt()[ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_10 $$ int val = sc.nextInt()[ CD ]
Line_10 $$ int val = sc.nextInt()-->Line_10 $$ int val = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_10 $$ int val = sc.nextInt()[ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_11 $$ if (val <= t) [ CD ]
Line_10 $$ int val = sc.nextInt()-->Line_11 $$ if (val <= t) [ FD ]
Line_5 $$ int t = sc.nextInt()-->Line_11 $$ if (val <= t) [ FD ]
Line_11 $$ if (val <= t) -->Line_12 $$ map.put(key, val)[ CD ]
Line_7 $$ TreeMap<Integer, Integer> map = new TreeMap()-->Line_12 $$ map.put(key, val)[ FD ]
Line_9 $$ int key = sc.nextInt()-->Line_12 $$ map.put(key, val)[ FD ]
Line_10 $$ int val = sc.nextInt()-->Line_12 $$ map.put(key, val)[ FD ]
Line_11 $$ if (val <= t) -->Line_13 $$ ans = Math.min(ans, key)[ CD ]
Line_13 $$ ans = Math.min(ans, key)-->Line_13 $$ ans = Math.min(ans, key)[ FD ]
Line_6 $$ int ans = Integer.MAX_VALUE-->Line_13 $$ ans = Math.min(ans, key)[ FD ]
Line_13 $$ ans = Math.min(ans, key)-->Line_13 $$ ans = Math.min(ans, key)[ CD ]
Line_13 $$ ans = Math.min(ans, key)-->Line_13 $$ ans = Math.min(ans, key)[ FD ]
Line_6 $$ int ans = Integer.MAX_VALUE-->Line_13 $$ ans = Math.min(ans, key)[ FD ]
Line_9 $$ int key = sc.nextInt()-->Line_13 $$ ans = Math.min(ans, key)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_16 $$ if (map.size() == 0) [ CD ]
Line_7 $$ TreeMap<Integer, Integer> map = new TreeMap()-->Line_16 $$ if (map.size() == 0) [ FD ]
Line_16 $$ if (map.size() == 0) -->Line_17 $$ System.out.println("TLE")[ CD ]
Line_16 $$ if (map.size() == 0) -->Line_19 $$ System.out.println(ans)[ CD ]
Line_13 $$ ans = Math.min(ans, key)-->Line_19 $$ System.out.println(ans)[ FD ]
Line_6 $$ int ans = Integer.MAX_VALUE-->Line_19 $$ System.out.println(ans)[ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_10 $$ int val = sc.nextInt()-->Line_11 $$ if (val <= t) [ FD ]
Line_9 $$ int key = sc.nextInt()-->Line_12 $$ map.put(key, val)[ FD ]
Line_10 $$ int val = sc.nextInt()-->Line_12 $$ map.put(key, val)[ FD ]
Line_13 $$ ans = Math.min(ans, key)-->Line_13 $$ ans = Math.min(ans, key)[ FD ]
Line_9 $$ int key = sc.nextInt()-->Line_13 $$ ans = Math.min(ans, key)[ FD ]
