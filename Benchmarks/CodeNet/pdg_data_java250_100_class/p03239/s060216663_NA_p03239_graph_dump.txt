Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ int N = sc.nextInt()[ CD ]
Line_4 $$ int N = sc.nextInt()-->Line_4 $$ int N = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int N = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ int T = sc.nextInt()[ CD ]
Line_5 $$ int T = sc.nextInt()-->Line_5 $$ int T = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ int T = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ int InTime[][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ int wark_cost[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ int wark_time[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ int flag = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ int i = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ int count = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ for (i = 0; i < N; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_11 $$ int i = 0-->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_4 $$ int N = sc.nextInt()-->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_13 $$ for (i = 0; i < N; i++) [ CD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_11 $$ int i = 0-->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_13 $$ for (i = 0; i < N; i++) [ CD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_11 $$ int i = 0-->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_14 $$ wark_cost = sc.nextInt()[ CD ]
Line_14 $$ wark_cost = sc.nextInt()-->Line_14 $$ wark_cost = sc.nextInt()[ FD ]
Line_8 $$ int wark_cost-->Line_14 $$ wark_cost = sc.nextInt()[ FD ]
Line_14 $$ wark_cost = sc.nextInt()-->Line_14 $$ wark_cost = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_14 $$ wark_cost = sc.nextInt()[ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_15 $$ wark_time = sc.nextInt()[ CD ]
Line_15 $$ wark_time = sc.nextInt()-->Line_15 $$ wark_time = sc.nextInt()[ FD ]
Line_9 $$ int wark_time-->Line_15 $$ wark_time = sc.nextInt()[ FD ]
Line_15 $$ wark_time = sc.nextInt()-->Line_15 $$ wark_time = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_15 $$ wark_time = sc.nextInt()[ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_16 $$ if (wark_time <= T) [ CD ]
Line_15 $$ wark_time = sc.nextInt()-->Line_16 $$ if (wark_time <= T) [ FD ]
Line_9 $$ int wark_time-->Line_16 $$ if (wark_time <= T) [ FD ]
Line_5 $$ int T = sc.nextInt()-->Line_16 $$ if (wark_time <= T) [ FD ]
Line_16 $$ if (wark_time <= T) -->Line_17 $$ InTime[i] = wark_cost[ CD ]
Line_14 $$ wark_cost = sc.nextInt()-->Line_17 $$ InTime[i] = wark_cost[ FD ]
Line_8 $$ int wark_cost-->Line_17 $$ InTime[i] = wark_cost[ FD ]
Line_16 $$ if (wark_time <= T) -->Line_18 $$ flag = 1[ CD ]
Line_18 $$ flag = 1-->Line_18 $$ flag = 1[ FD ]
Line_10 $$ int flag = 0-->Line_18 $$ flag = 1[ FD ]
Line_16 $$ if (wark_time <= T) -->Line_20 $$ InTime[i] = 1000[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_23 $$ int min = 1000[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_24 $$ for (i = 0; i < N; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_11 $$ int i = 0-->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_4 $$ int N = sc.nextInt()-->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ CD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_11 $$ int i = 0-->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ CD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_11 $$ int i = 0-->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_25 $$ if (min > InTime[i]) [ CD ]
Line_23 $$ int min = 1000-->Line_25 $$ if (min > InTime[i]) [ FD ]
Line_25 $$ if (min > InTime[i]) -->Line_26 $$ min = InTime[i][ CD ]
Line_26 $$ min = InTime[i]-->Line_26 $$ min = InTime[i][ FD ]
Line_23 $$ int min = 1000-->Line_26 $$ min = InTime[i][ FD ]
Line_2 $$ public static void main(String[] args) -->Line_29 $$ if (flag == 0) [ CD ]
Line_18 $$ flag = 1-->Line_29 $$ if (flag == 0) [ FD ]
Line_10 $$ int flag = 0-->Line_29 $$ if (flag == 0) [ FD ]
Line_29 $$ if (flag == 0) -->Line_30 $$ System.out.println("TLE")[ CD ]
Line_29 $$ if (flag == 0) -->Line_33 $$ System.out.println(min)[ CD ]
Line_26 $$ min = InTime[i]-->Line_33 $$ System.out.println(min)[ FD ]
Line_23 $$ int min = 1000-->Line_33 $$ System.out.println(min)[ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_13 $$ for (i = 0; i < N; i++) -->Line_13 $$ for (i = 0; i < N; i++) [ FD ]
Line_15 $$ wark_time = sc.nextInt()-->Line_16 $$ if (wark_time <= T) [ FD ]
Line_14 $$ wark_cost = sc.nextInt()-->Line_17 $$ InTime[i] = wark_cost[ FD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_24 $$ for (i = 0; i < N; i++) -->Line_24 $$ for (i = 0; i < N; i++) [ FD ]
Line_26 $$ min = InTime[i]-->Line_25 $$ if (min > InTime[i]) [ FD ]
