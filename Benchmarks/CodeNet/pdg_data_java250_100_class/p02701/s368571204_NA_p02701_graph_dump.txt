Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ int N = Integer.parseInt(in.readLine())[ CD ]
Line_4 $$ int N = Integer.parseInt(in.readLine())-->Line_4 $$ int N = Integer.parseInt(in.readLine())[ CD ]
Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ int N = Integer.parseInt(in.readLine())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int count = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ HashMap<String, Integer> map = new HashMap<String, Integer>()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ for (int i = 0; i < N; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_4 $$ int N = Integer.parseInt(in.readLine())-->Line_7 $$ for (int i = 0; i < N; i++) [ FD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_7 $$ for (int i = 0; i < N; i++) [ CD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_7 $$ for (int i = 0; i < N; i++) [ CD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_7 $$ for (int i = 0; i < N; i++) [ FD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_8 $$ String str = in.readLine()[ CD ]
Line_8 $$ String str = in.readLine()-->Line_8 $$ String str = in.readLine()[ CD ]
Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))-->Line_8 $$ String str = in.readLine()[ FD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_9 $$ if (!map.containsKey(str)) [ CD ]
Line_9 $$ if (!map.containsKey(str)) -->Line_9 $$ if (!map.containsKey(str)) [ CD ]
Line_9 $$ if (!map.containsKey(str)) -->Line_9 $$ if (!map.containsKey(str)) [ CD ]
Line_6 $$ HashMap<String, Integer> map = new HashMap<String, Integer>()-->Line_9 $$ if (!map.containsKey(str)) [ FD ]
Line_8 $$ String str = in.readLine()-->Line_9 $$ if (!map.containsKey(str)) [ FD ]
Line_9 $$ if (!map.containsKey(str)) -->Line_10 $$ map.put(str, 1)[ CD ]
Line_6 $$ HashMap<String, Integer> map = new HashMap<String, Integer>()-->Line_10 $$ map.put(str, 1)[ FD ]
Line_8 $$ String str = in.readLine()-->Line_10 $$ map.put(str, 1)[ FD ]
Line_9 $$ if (!map.containsKey(str)) -->Line_11 $$ count++[ CD ]
Line_5 $$ int count = 0-->Line_11 $$ count++[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_14 $$ System.out.println(count)[ CD ]
Line_5 $$ int count = 0-->Line_14 $$ System.out.println(count)[ FD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_7 $$ for (int i = 0; i < N; i++) [ FD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_7 $$ for (int i = 0; i < N; i++) [ FD ]
Line_7 $$ for (int i = 0; i < N; i++) -->Line_7 $$ for (int i = 0; i < N; i++) [ FD ]
Line_8 $$ String str = in.readLine()-->Line_9 $$ if (!map.containsKey(str)) [ FD ]
Line_8 $$ String str = in.readLine()-->Line_10 $$ map.put(str, 1)[ FD ]
