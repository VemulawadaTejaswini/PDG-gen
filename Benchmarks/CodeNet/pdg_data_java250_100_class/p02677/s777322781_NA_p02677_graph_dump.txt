Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ int A = sc.nextInt()[ CD ]
Line_4 $$ int A = sc.nextInt()-->Line_4 $$ int A = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int A = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ int B = sc.nextInt()[ CD ]
Line_5 $$ int B = sc.nextInt()-->Line_5 $$ int B = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ int B = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ int hour = sc.nextInt()[ CD ]
Line_6 $$ int hour = sc.nextInt()-->Line_6 $$ int hour = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_6 $$ int hour = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ int minute = sc.nextInt()[ CD ]
Line_7 $$ int minute = sc.nextInt()-->Line_7 $$ int minute = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_7 $$ int minute = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ int time = hour * 60 + minute[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ double[] aPosition = new double[2][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ double[] bPosition = new double[2][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ double shortRad = 2.0 * Math.PI * (double) time / (60.0 * 12.0)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ double longRad = 2.0 * Math.PI * (double) time / 60.0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ aPosition[0] = A * Math.sin(shortRad)[ CD ]
Line_4 $$ int A = sc.nextInt()-->Line_13 $$ aPosition[0] = A * Math.sin(shortRad)[ FD ]
Line_11 $$ double shortRad = 2.0 * Math.PI * (double) time / (60.0 * 12.0)-->Line_13 $$ aPosition[0] = A * Math.sin(shortRad)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ aPosition[1] = A * Math.cos(shortRad)[ CD ]
Line_4 $$ int A = sc.nextInt()-->Line_14 $$ aPosition[1] = A * Math.cos(shortRad)[ FD ]
Line_11 $$ double shortRad = 2.0 * Math.PI * (double) time / (60.0 * 12.0)-->Line_14 $$ aPosition[1] = A * Math.cos(shortRad)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_15 $$ bPosition[0] = B * Math.sin(longRad)[ CD ]
Line_5 $$ int B = sc.nextInt()-->Line_15 $$ bPosition[0] = B * Math.sin(longRad)[ FD ]
Line_12 $$ double longRad = 2.0 * Math.PI * (double) time / 60.0-->Line_15 $$ bPosition[0] = B * Math.sin(longRad)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_16 $$ bPosition[1] = B * Math.cos(longRad)[ CD ]
Line_5 $$ int B = sc.nextInt()-->Line_16 $$ bPosition[1] = B * Math.cos(longRad)[ FD ]
Line_12 $$ double longRad = 2.0 * Math.PI * (double) time / 60.0-->Line_16 $$ bPosition[1] = B * Math.cos(longRad)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_17 $$ double distance[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_18 $$ distance = Math.sqrt((aPosition[0] - bPosition[0]) * (aPosition[0] - bPosition[0]) + (aPosition[1] - bPosition[1]) * (aPosition[1] - bPosition[1]))[ CD ]
Line_17 $$ double distance-->Line_18 $$ distance = Math.sqrt((aPosition[0] - bPosition[0]) * (aPosition[0] - bPosition[0]) + (aPosition[1] - bPosition[1]) * (aPosition[1] - bPosition[1]))[ FD ]
Line_18 $$ distance = Math.sqrt((aPosition[0] - bPosition[0]) * (aPosition[0] - bPosition[0]) + (aPosition[1] - bPosition[1]) * (aPosition[1] - bPosition[1]))-->Line_18 $$ distance = Math.sqrt((aPosition[0] - bPosition[0]) * (aPosition[0] - bPosition[0]) + (aPosition[1] - bPosition[1]) * (aPosition[1] - bPosition[1]))[ FD ]
Line_18 $$ distance = Math.sqrt((aPosition[0] - bPosition[0]) * (aPosition[0] - bPosition[0]) + (aPosition[1] - bPosition[1]) * (aPosition[1] - bPosition[1]))-->Line_18 $$ distance = Math.sqrt((aPosition[0] - bPosition[0]) * (aPosition[0] - bPosition[0]) + (aPosition[1] - bPosition[1]) * (aPosition[1] - bPosition[1]))[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_19 $$ System.out.println(distance)[ CD ]
Line_17 $$ double distance-->Line_19 $$ System.out.println(distance)[ FD ]
Line_18 $$ distance = Math.sqrt((aPosition[0] - bPosition[0]) * (aPosition[0] - bPosition[0]) + (aPosition[1] - bPosition[1]) * (aPosition[1] - bPosition[1]))-->Line_19 $$ System.out.println(distance)[ FD ]
