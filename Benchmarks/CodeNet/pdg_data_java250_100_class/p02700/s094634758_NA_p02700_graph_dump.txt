Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_3 $$ public static void main(String[] Arguments) throws IOException [ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())[ CD ]
Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))-->Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ CD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ FD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ FD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ FD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_7 $$ boolean takaTurn = true[ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_8 $$ while (A > 0 && C > 0) [ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_3 $$ public static void main(String[] Arguments) throws IOException [ CD ]
Line_8 $$ while (A > 0 && C > 0) -->Line_10 $$ if (takaTurn)[ CD ]
Line_10 $$ if (takaTurn)-->Line_10 $$ C -= B[ CD ]
Line_10 $$ C -= B-->Line_10 $$ C -= B[ FD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_10 $$ C -= B[ FD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_10 $$ C -= B[ FD ]
Line_10 $$ if (takaTurn)-->Line_11 $$ A -= D[ CD ]
Line_11 $$ A -= D-->Line_11 $$ A -= D[ FD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_11 $$ A -= D[ FD ]
Line_6 $$ int A = Integer.parseInt(ST.nextToken()), B = Integer.parseInt(ST.nextToken()), C = Integer.parseInt(ST.nextToken()), D = Integer.parseInt(ST.nextToken())-->Line_11 $$ A -= D[ FD ]
Line_8 $$ while (A > 0 && C > 0) -->Line_12 $$ takaTurn = !takaTurn[ CD ]
Line_12 $$ takaTurn = !takaTurn-->Line_12 $$ takaTurn = !takaTurn[ FD ]
Line_7 $$ boolean takaTurn = true-->Line_12 $$ takaTurn = !takaTurn[ FD ]
Line_12 $$ takaTurn = !takaTurn-->Line_12 $$ takaTurn = !takaTurn[ CD ]
Line_12 $$ takaTurn = !takaTurn-->Line_12 $$ takaTurn = !takaTurn[ FD ]
Line_7 $$ boolean takaTurn = true-->Line_12 $$ takaTurn = !takaTurn[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_14 $$ System.out.println((A > 0) ? "Yes" : "No")[ CD ]
Line_12 $$ takaTurn = !takaTurn-->Line_12 $$ takaTurn = !takaTurn[ FD ]
