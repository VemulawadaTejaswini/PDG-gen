Line_0 $$ Entry-->Line_1 $$ class Main [ CD ]
Line_1 $$ class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ int N = sc.nextInt()[ CD ]
Line_4 $$ int N = sc.nextInt()-->Line_4 $$ int N = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int N = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ int[] H[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ H = new int[N][ CD ]
Line_5 $$ int[] H-->Line_6 $$ H = new int[N][ FD ]
Line_6 $$ H = new int[N]-->Line_6 $$ H = new int[N][ FD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ int sum = 1[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ for (int n = 0; n < N; n++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_4 $$ int N = sc.nextInt()-->Line_8 $$ for (int n = 0; n < N; n++) [ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_8 $$ for (int n = 0; n < N; n++) [ CD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_8 $$ for (int n = 0; n < N; n++) [ CD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_8 $$ for (int n = 0; n < N; n++) [ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_9 $$ H[n] = sc.nextInt()[ CD ]
Line_9 $$ H[n] = sc.nextInt()-->Line_9 $$ H[n] = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_9 $$ H[n] = sc.nextInt()[ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_10 $$ int max = H[0][ CD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_11 $$ for (int index = 0; index < H.length; index++) [ CD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_8 $$ for (int n = 0; n < N; n++) [ CD ]
Line_11 $$ for (int index = 0; index < H.length; index++) -->Line_11 $$ for (int index = 0; index < H.length; index++) [ CD ]
Line_11 $$ for (int index = 0; index < H.length; index++) -->Line_11 $$ for (int index = 0; index < H.length; index++) [ CD ]
Line_11 $$ for (int index = 0; index < H.length; index++) -->Line_11 $$ for (int index = 0; index < H.length; index++) [ FD ]
Line_11 $$ for (int index = 0; index < H.length; index++) -->Line_12 $$ max = Math.max(max, H[index])[ CD ]
Line_12 $$ max = Math.max(max, H[index])-->Line_12 $$ max = Math.max(max, H[index])[ FD ]
Line_10 $$ int max = H[0]-->Line_12 $$ max = Math.max(max, H[index])[ FD ]
Line_12 $$ max = Math.max(max, H[index])-->Line_12 $$ max = Math.max(max, H[index])[ CD ]
Line_12 $$ max = Math.max(max, H[index])-->Line_12 $$ max = Math.max(max, H[index])[ FD ]
Line_10 $$ int max = H[0]-->Line_12 $$ max = Math.max(max, H[index])[ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_14 $$ if (n != 0) [ CD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_14 $$ if (n != 0) [ FD ]
Line_14 $$ if (n != 0) -->Line_15 $$ if (H[n] >= H[n - 1] && H[n] >= max) [ CD ]
Line_15 $$ if (H[n] >= H[n - 1] && H[n] >= max) -->Line_16 $$ sum++[ CD ]
Line_7 $$ int sum = 1-->Line_16 $$ sum++[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_20 $$ sc.close()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_20 $$ sc.close()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_21 $$ System.out.print(sum)[ CD ]
Line_7 $$ int sum = 1-->Line_21 $$ System.out.print(sum)[ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_8 $$ for (int n = 0; n < N; n++) [ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_8 $$ for (int n = 0; n < N; n++) [ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_8 $$ for (int n = 0; n < N; n++) [ FD ]
Line_8 $$ for (int n = 0; n < N; n++) -->Line_14 $$ if (n != 0) [ FD ]
Line_11 $$ for (int index = 0; index < H.length; index++) -->Line_11 $$ for (int index = 0; index < H.length; index++) [ FD ]
Line_11 $$ for (int index = 0; index < H.length; index++) -->Line_11 $$ for (int index = 0; index < H.length; index++) [ FD ]
Line_11 $$ for (int index = 0; index < H.length; index++) -->Line_11 $$ for (int index = 0; index < H.length; index++) [ FD ]
Line_12 $$ max = Math.max(max, H[index])-->Line_12 $$ max = Math.max(max, H[index])[ FD ]
