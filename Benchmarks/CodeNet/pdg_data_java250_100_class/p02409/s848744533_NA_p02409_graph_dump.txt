Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int[][][] residence = new int[4][3][10][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int n = Integer.parseInt(br.readLine())[ CD ]
Line_6 $$ int n = Integer.parseInt(br.readLine())-->Line_6 $$ int n = Integer.parseInt(br.readLine())[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_6 $$ int n = Integer.parseInt(br.readLine())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_6 $$ int n = Integer.parseInt(br.readLine())-->Line_7 $$ for (int i = 0; i < n; i++) [ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_7 $$ for (int i = 0; i < n; i++) [ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_7 $$ for (int i = 0; i < n; i++) [ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_7 $$ for (int i = 0; i < n; i++) [ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_8 $$ String[] str = br.readLine().split(" ")[ CD ]
Line_8 $$ String[] str = br.readLine().split(" ")-->Line_8 $$ String[] str = br.readLine().split(" ")[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_8 $$ String[] str = br.readLine().split(" ")[ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_9 $$ int b = Integer.parseInt(str[0])[ CD ]
Line_9 $$ int b = Integer.parseInt(str[0])-->Line_9 $$ int b = Integer.parseInt(str[0])[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_10 $$ int f = Integer.parseInt(str[1])[ CD ]
Line_10 $$ int f = Integer.parseInt(str[1])-->Line_10 $$ int f = Integer.parseInt(str[1])[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_11 $$ int r = Integer.parseInt(str[2])[ CD ]
Line_11 $$ int r = Integer.parseInt(str[2])-->Line_11 $$ int r = Integer.parseInt(str[2])[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_12 $$ int v = Integer.parseInt(str[3])[ CD ]
Line_12 $$ int v = Integer.parseInt(str[3])-->Line_12 $$ int v = Integer.parseInt(str[3])[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_13 $$ residence[b - 1][f - 1][r - 1] += v[ CD ]
Line_12 $$ int v = Integer.parseInt(str[3])-->Line_13 $$ residence[b - 1][f - 1][r - 1] += v[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_15 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ CD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ CD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ CD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ FD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_17 $$ for (int k = 0; k < 10; k++) [ CD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ CD ]
Line_17 $$ for (int k = 0; k < 10; k++) -->Line_17 $$ for (int k = 0; k < 10; k++) [ CD ]
Line_17 $$ for (int k = 0; k < 10; k++) -->Line_17 $$ for (int k = 0; k < 10; k++) [ CD ]
Line_17 $$ for (int k = 0; k < 10; k++) -->Line_17 $$ for (int k = 0; k < 10; k++) [ FD ]
Line_17 $$ for (int k = 0; k < 10; k++) -->Line_18 $$ System.out.print(" " + residence[i][j][k])[ CD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_20 $$ System.out.print("\n")[ CD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_22 $$ if (i != 3) [ CD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_22 $$ if (i != 3) [ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_22 $$ if (i != 3) [ FD ]
Line_22 $$ if (i != 3) -->Line_23 $$ System.out.println("####################")[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_7 $$ for (int i = 0; i < n; i++) [ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_7 $$ for (int i = 0; i < n; i++) [ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_7 $$ for (int i = 0; i < n; i++) [ FD ]
Line_12 $$ int v = Integer.parseInt(str[3])-->Line_13 $$ residence[b - 1][f - 1][r - 1] += v[ FD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_15 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_15 $$ for (int i = 0; i < 4; i++) -->Line_22 $$ if (i != 3) [ FD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ FD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ FD ]
Line_16 $$ for (int j = 0; j < 3; j++) -->Line_16 $$ for (int j = 0; j < 3; j++) [ FD ]
Line_17 $$ for (int k = 0; k < 10; k++) -->Line_17 $$ for (int k = 0; k < 10; k++) [ FD ]
Line_17 $$ for (int k = 0; k < 10; k++) -->Line_17 $$ for (int k = 0; k < 10; k++) [ FD ]
Line_17 $$ for (int k = 0; k < 10; k++) -->Line_17 $$ for (int k = 0; k < 10; k++) [ FD ]
