Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ int range = Integer.parseInt(in.readLine())[ CD ]
Line_4 $$ int range = Integer.parseInt(in.readLine())-->Line_4 $$ int range = Integer.parseInt(in.readLine())[ CD ]
Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ int range = Integer.parseInt(in.readLine())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ if (range < 0 || Math.pow(10, 4) < range)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ String[] nums = new String[range][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ nums = in.readLine().split(" ")[ CD ]
Line_7 $$ String[] nums = new String[range]-->Line_8 $$ nums = in.readLine().split(" ")[ FD ]
Line_8 $$ nums = in.readLine().split(" ")-->Line_8 $$ nums = in.readLine().split(" ")[ FD ]
Line_8 $$ nums = in.readLine().split(" ")-->Line_8 $$ nums = in.readLine().split(" ")[ CD ]
Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))-->Line_8 $$ nums = in.readLine().split(" ")[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])[ CD ]
Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])-->Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])[ CD ]
Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])-->Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_10 $$ long sum = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_11 $$ for (int i = 0; i < range; i += 1) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_4 $$ int range = Integer.parseInt(in.readLine())-->Line_11 $$ for (int i = 0; i < range; i += 1) [ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ CD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ CD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))[ CD ]
Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))-->Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))[ FD ]
Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])-->Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))[ FD ]
Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))-->Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))[ CD ]
Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))-->Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))[ FD ]
Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])-->Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))[ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))[ CD ]
Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))-->Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))[ FD ]
Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])-->Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))[ FD ]
Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))-->Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))[ CD ]
Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))-->Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))[ FD ]
Line_9 $$ int min = Integer.parseInt(nums[0]), max = Integer.parseInt(nums[0])-->Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))[ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_14 $$ if (Integer.parseInt(nums[i]) < -Math.pow(10, 6) || Math.pow(10, 6) < Integer.parseInt(nums[i]))[ CD ]
Line_14 $$ if (Integer.parseInt(nums[i]) < -Math.pow(10, 6) || Math.pow(10, 6) < Integer.parseInt(nums[i]))-->Line_14 $$ if (Integer.parseInt(nums[i]) < -Math.pow(10, 6) || Math.pow(10, 6) < Integer.parseInt(nums[i]))[ CD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_17 $$ sum = sum + Integer.parseInt(nums[i])[ CD ]
Line_17 $$ sum = sum + Integer.parseInt(nums[i])-->Line_17 $$ sum = sum + Integer.parseInt(nums[i])[ FD ]
Line_10 $$ long sum = 0-->Line_17 $$ sum = sum + Integer.parseInt(nums[i])[ FD ]
Line_17 $$ sum = sum + Integer.parseInt(nums[i])-->Line_17 $$ sum = sum + Integer.parseInt(nums[i])[ FD ]
Line_10 $$ long sum = 0-->Line_17 $$ sum = sum + Integer.parseInt(nums[i])[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_19 $$ System.out.println(min + " " + max + " " + sum)[ CD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ FD ]
Line_11 $$ for (int i = 0; i < range; i += 1) -->Line_11 $$ for (int i = 0; i < range; i += 1) [ FD ]
Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))-->Line_12 $$ max = Math.max(max, Integer.parseInt(nums[i]))[ FD ]
Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))-->Line_13 $$ min = Math.min(min, Integer.parseInt(nums[i]))[ FD ]
Line_17 $$ sum = sum + Integer.parseInt(nums[i])-->Line_17 $$ sum = sum + Integer.parseInt(nums[i])[ FD ]
