Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String args[]) [ CD ]
Line_2 $$ public static void main(String args[]) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_4 $$ int n = sc.nextInt()[ CD ]
Line_4 $$ int n = sc.nextInt()-->Line_4 $$ int n = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int n = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String args[]) -->Line_5 $$ int[] h = new int[n][ CD ]
Line_2 $$ public static void main(String args[]) -->Line_6 $$ int[] map = new int[n][ CD ]
Line_2 $$ public static void main(String args[]) -->Line_7 $$ int max = 0[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_8 $$ int x[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String args[]) -->Line_2 $$ public static void main(String args[]) [ CD ]
Line_4 $$ int n = sc.nextInt()-->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_10 $$ h[i] = sc.nextInt()[ CD ]
Line_10 $$ h[i] = sc.nextInt()-->Line_10 $$ h[i] = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_10 $$ h[i] = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String args[]) -->Line_12 $$ map[n - 1] = 0[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ CD ]
Line_2 $$ public static void main(String args[]) -->Line_2 $$ public static void main(String args[]) [ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ FD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ CD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ CD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ FD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_14 $$ x = h[n - i + 1][ CD ]
Line_14 $$ x = h[n - i + 1]-->Line_14 $$ x = h[n - i + 1][ FD ]
Line_8 $$ int x-->Line_14 $$ x = h[n - i + 1][ FD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_15 $$ if (x <= h[n - i]) [ CD ]
Line_14 $$ x = h[n - i + 1]-->Line_15 $$ if (x <= h[n - i]) [ FD ]
Line_8 $$ int x-->Line_15 $$ if (x <= h[n - i]) [ FD ]
Line_15 $$ if (x <= h[n - i]) -->Line_16 $$ map[n - i] = map[n - i + 1] + 1[ CD ]
Line_15 $$ if (x <= h[n - i]) -->Line_17 $$ max = Math.max(max, map[n - i])[ CD ]
Line_17 $$ max = Math.max(max, map[n - i])-->Line_17 $$ max = Math.max(max, map[n - i])[ FD ]
Line_7 $$ int max = 0-->Line_17 $$ max = Math.max(max, map[n - i])[ FD ]
Line_17 $$ max = Math.max(max, map[n - i])-->Line_17 $$ max = Math.max(max, map[n - i])[ CD ]
Line_17 $$ max = Math.max(max, map[n - i])-->Line_17 $$ max = Math.max(max, map[n - i])[ FD ]
Line_7 $$ int max = 0-->Line_17 $$ max = Math.max(max, map[n - i])[ FD ]
Line_15 $$ if (x <= h[n - i]) -->Line_19 $$ map[n - i] = 0[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_21 $$ System.out.println(max)[ CD ]
Line_17 $$ max = Math.max(max, map[n - i])-->Line_21 $$ System.out.println(max)[ FD ]
Line_7 $$ int max = 0-->Line_21 $$ System.out.println(max)[ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ FD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ FD ]
Line_13 $$ for (int i = 2; i < n + 1; i++) -->Line_13 $$ for (int i = 2; i < n + 1; i++) [ FD ]
Line_14 $$ x = h[n - i + 1]-->Line_15 $$ if (x <= h[n - i]) [ FD ]
Line_17 $$ max = Math.max(max, map[n - i])-->Line_17 $$ max = Math.max(max, map[n - i])[ FD ]
