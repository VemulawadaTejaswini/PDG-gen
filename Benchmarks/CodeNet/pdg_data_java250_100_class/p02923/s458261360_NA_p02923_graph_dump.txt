Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String args[]) [ CD ]
Line_2 $$ public static void main(String args[]) -->Line_3 $$ Scanner scan = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_4 $$ int boxes = scan.nextInt()[ CD ]
Line_4 $$ int boxes = scan.nextInt()-->Line_4 $$ int boxes = scan.nextInt()[ CD ]
Line_3 $$ Scanner scan = new Scanner(System.in)-->Line_4 $$ int boxes = scan.nextInt()[ FD ]
Line_2 $$ public static void main(String args[]) -->Line_5 $$ int[] squareBoxes = new int[boxes][ CD ]
Line_2 $$ public static void main(String args[]) -->Line_6 $$ int[] dp = new int[boxes][ CD ]
Line_2 $$ public static void main(String args[]) -->Line_7 $$ int max = 0[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_8 $$ dp[boxes - 1] = 0[ CD ]
Line_2 $$ public static void main(String args[]) -->Line_9 $$ for (int i = 0; i < boxes; i++) [ CD ]
Line_2 $$ public static void main(String args[]) -->Line_2 $$ public static void main(String args[]) [ CD ]
Line_4 $$ int boxes = scan.nextInt()-->Line_9 $$ for (int i = 0; i < boxes; i++) [ FD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_9 $$ for (int i = 0; i < boxes; i++) [ CD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_9 $$ for (int i = 0; i < boxes; i++) [ CD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_9 $$ for (int i = 0; i < boxes; i++) [ FD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_10 $$ squareBoxes[i] = scan.nextInt()[ CD ]
Line_10 $$ squareBoxes[i] = scan.nextInt()-->Line_10 $$ squareBoxes[i] = scan.nextInt()[ CD ]
Line_3 $$ Scanner scan = new Scanner(System.in)-->Line_10 $$ squareBoxes[i] = scan.nextInt()[ FD ]
Line_2 $$ public static void main(String args[]) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ CD ]
Line_2 $$ public static void main(String args[]) -->Line_2 $$ public static void main(String args[]) [ CD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ CD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ CD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ FD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_13 $$ if (squareBoxes[i] >= squareBoxes[i + 1]) [ CD ]
Line_13 $$ if (squareBoxes[i] >= squareBoxes[i + 1]) -->Line_14 $$ dp[i] = dp[i + 1] + 1[ CD ]
Line_13 $$ if (squareBoxes[i] >= squareBoxes[i + 1]) -->Line_16 $$ dp[i] = 0[ CD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_18 $$ max = Math.max(dp[i], max)[ CD ]
Line_18 $$ max = Math.max(dp[i], max)-->Line_18 $$ max = Math.max(dp[i], max)[ FD ]
Line_7 $$ int max = 0-->Line_18 $$ max = Math.max(dp[i], max)[ FD ]
Line_18 $$ max = Math.max(dp[i], max)-->Line_18 $$ max = Math.max(dp[i], max)[ CD ]
Line_18 $$ max = Math.max(dp[i], max)-->Line_18 $$ max = Math.max(dp[i], max)[ FD ]
Line_7 $$ int max = 0-->Line_18 $$ max = Math.max(dp[i], max)[ FD ]
Line_2 $$ public static void main(String args[]) -->Line_20 $$ System.out.println(max)[ CD ]
Line_18 $$ max = Math.max(dp[i], max)-->Line_20 $$ System.out.println(max)[ FD ]
Line_7 $$ int max = 0-->Line_20 $$ System.out.println(max)[ FD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_9 $$ for (int i = 0; i < boxes; i++) [ FD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_9 $$ for (int i = 0; i < boxes; i++) [ FD ]
Line_9 $$ for (int i = 0; i < boxes; i++) -->Line_9 $$ for (int i = 0; i < boxes; i++) [ FD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = boxes - 2; i >= 0; i--) -->Line_12 $$ for (int i = boxes - 2; i >= 0; i--) [ FD ]
Line_18 $$ max = Math.max(dp[i], max)-->Line_18 $$ max = Math.max(dp[i], max)[ FD ]
