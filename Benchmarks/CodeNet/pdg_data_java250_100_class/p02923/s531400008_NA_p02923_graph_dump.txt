Line_0 $$ Entry-->Line_1 $$ class Main [ CD ]
Line_1 $$ class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ int n = sc.nextInt()[ CD ]
Line_4 $$ int n = sc.nextInt()-->Line_4 $$ int n = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int n = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ int[] h = new int[n][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ int str = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ int max = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_4 $$ int n = sc.nextInt()-->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_9 $$ h[i] = sc.nextInt()[ CD ]
Line_9 $$ h[i] = sc.nextInt()-->Line_9 $$ h[i] = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_9 $$ h[i] = sc.nextInt()[ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_10 $$ if (i != 0 && h[i] <= h[i - 1]) [ CD ]
Line_10 $$ if (i != 0 && h[i] <= h[i - 1]) -->Line_11 $$ str++[ CD ]
Line_6 $$ int str = 0-->Line_11 $$ str++[ FD ]
Line_10 $$ if (i != 0 && h[i] <= h[i - 1]) -->Line_12 $$ if (i == n - 1) [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_12 $$ if (i == n - 1) [ FD ]
Line_12 $$ if (i == n - 1) -->Line_13 $$ max = Math.max(max, str)[ CD ]
Line_13 $$ max = Math.max(max, str)-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_7 $$ int max = 0-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_13 $$ max = Math.max(max, str)-->Line_13 $$ max = Math.max(max, str)[ CD ]
Line_13 $$ max = Math.max(max, str)-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_7 $$ int max = 0-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_6 $$ int str = 0-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_10 $$ if (i != 0 && h[i] <= h[i - 1]) -->Line_15 $$ if (i != 0 && h[i] > h[i - 1] && str != 0) [ CD ]
Line_15 $$ if (i != 0 && h[i] > h[i - 1] && str != 0) -->Line_16 $$ max = Math.max(max, str)[ CD ]
Line_13 $$ max = Math.max(max, str)-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_16 $$ max = Math.max(max, str)-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_7 $$ int max = 0-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_16 $$ max = Math.max(max, str)-->Line_16 $$ max = Math.max(max, str)[ CD ]
Line_13 $$ max = Math.max(max, str)-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_16 $$ max = Math.max(max, str)-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_7 $$ int max = 0-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_6 $$ int str = 0-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_15 $$ if (i != 0 && h[i] > h[i - 1] && str != 0) -->Line_17 $$ str = 0[ CD ]
Line_17 $$ str = 0-->Line_17 $$ str = 0[ FD ]
Line_6 $$ int str = 0-->Line_17 $$ str = 0[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_20 $$ System.out.println(max)[ CD ]
Line_13 $$ max = Math.max(max, str)-->Line_20 $$ System.out.println(max)[ FD ]
Line_16 $$ max = Math.max(max, str)-->Line_20 $$ System.out.println(max)[ FD ]
Line_7 $$ int max = 0-->Line_20 $$ System.out.println(max)[ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_17 $$ str = 0-->Line_11 $$ str++[ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_12 $$ if (i == n - 1) [ FD ]
Line_13 $$ max = Math.max(max, str)-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_16 $$ max = Math.max(max, str)-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_17 $$ str = 0-->Line_13 $$ max = Math.max(max, str)[ FD ]
Line_13 $$ max = Math.max(max, str)-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_16 $$ max = Math.max(max, str)-->Line_16 $$ max = Math.max(max, str)[ FD ]
Line_17 $$ str = 0-->Line_16 $$ max = Math.max(max, str)[ FD ]
