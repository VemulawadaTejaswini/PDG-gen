Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ int n = Integer.parseInt(in.readLine())[ CD ]
Line_4 $$ int n = Integer.parseInt(in.readLine())-->Line_4 $$ int n = Integer.parseInt(in.readLine())[ CD ]
Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ int n = Integer.parseInt(in.readLine())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ String[] str = in.readLine().split(" ")[ CD ]
Line_5 $$ String[] str = in.readLine().split(" ")-->Line_5 $$ String[] str = in.readLine().split(" ")[ CD ]
Line_3 $$ BufferedReader in = new BufferedReader(new InputStreamReader(System.in))-->Line_5 $$ String[] str = in.readLine().split(" ")[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int[] h = new int[n][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ int count = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ int ans = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_4 $$ int n = Integer.parseInt(in.readLine())-->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_10 $$ h[i] = Integer.parseInt(str[i])[ CD ]
Line_10 $$ h[i] = Integer.parseInt(str[i])-->Line_10 $$ h[i] = Integer.parseInt(str[i])[ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_11 $$ if (i == 0)[ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_11 $$ if (i == 0)[ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_13 $$ if (h[i - 1] >= h[i]) [ CD ]
Line_13 $$ if (h[i - 1] >= h[i]) -->Line_14 $$ count += 1[ CD ]
Line_14 $$ count += 1-->Line_14 $$ count += 1[ FD ]
Line_7 $$ int count = 0-->Line_14 $$ count += 1[ FD ]
Line_13 $$ if (h[i - 1] >= h[i]) -->Line_15 $$ ans = Math.max(ans, count)[ CD ]
Line_15 $$ ans = Math.max(ans, count)-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_8 $$ int ans = 0-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_15 $$ ans = Math.max(ans, count)-->Line_15 $$ ans = Math.max(ans, count)[ CD ]
Line_15 $$ ans = Math.max(ans, count)-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_8 $$ int ans = 0-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_14 $$ count += 1-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_7 $$ int count = 0-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_13 $$ if (h[i - 1] >= h[i]) -->Line_17 $$ count = 0[ CD ]
Line_14 $$ count += 1-->Line_17 $$ count = 0[ FD ]
Line_17 $$ count = 0-->Line_17 $$ count = 0[ FD ]
Line_7 $$ int count = 0-->Line_17 $$ count = 0[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_20 $$ System.out.println(ans)[ CD ]
Line_15 $$ ans = Math.max(ans, count)-->Line_20 $$ System.out.println(ans)[ FD ]
Line_8 $$ int ans = 0-->Line_20 $$ System.out.println(ans)[ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_11 $$ if (i == 0)[ FD ]
Line_15 $$ ans = Math.max(ans, count)-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_14 $$ count += 1-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
Line_17 $$ count = 0-->Line_15 $$ ans = Math.max(ans, count)[ FD ]
