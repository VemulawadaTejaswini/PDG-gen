Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_4 $$ public static void main(String[] args) [ CD ]
Line_4 $$ public static void main(String[] args) -->Line_5 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_4 $$ public static void main(String[] args) -->Line_6 $$ long answer, l, index, index2[ CD ]
Line_4 $$ public static void main(String[] args) -->Line_7 $$ long a, b, n[ CD ]
Line_4 $$ public static void main(String[] args) -->Line_8 $$ long h, h2[ CD ]
Line_4 $$ public static void main(String[] args) -->Line_9 $$ Map<Long, Long> mapH = new HashMap<Long, Long>()[ CD ]
Line_4 $$ public static void main(String[] args) -->Line_10 $$ Map<Long, Long> mapA = new TreeMap<Long, Long>(Collections.reverseOrder())[ CD ]
Line_4 $$ public static void main(String[] args) -->Line_11 $$ String s, t[ CD ]
Line_4 $$ public static void main(String[] args) -->Line_12 $$ n = sc.nextInt()[ CD ]
Line_7 $$ long a, b, n-->Line_12 $$ n = sc.nextInt()[ FD ]
Line_12 $$ n = sc.nextInt()-->Line_12 $$ n = sc.nextInt()[ FD ]
Line_12 $$ n = sc.nextInt()-->Line_12 $$ n = sc.nextInt()[ CD ]
Line_5 $$ Scanner sc = new Scanner(System.in)-->Line_12 $$ n = sc.nextInt()[ FD ]
Line_4 $$ public static void main(String[] args) -->Line_13 $$ for (index = 0; index < n; index++) [ CD ]
Line_4 $$ public static void main(String[] args) -->Line_4 $$ public static void main(String[] args) [ CD ]
Line_6 $$ long answer, l, index, index2-->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_7 $$ long a, b, n-->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_12 $$ n = sc.nextInt()-->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_13 $$ for (index = 0; index < n; index++) [ CD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_13 $$ for (index = 0; index < n; index++) [ CD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_14 $$ h = sc.nextLong()[ CD ]
Line_14 $$ h = sc.nextLong()-->Line_14 $$ h = sc.nextLong()[ FD ]
Line_8 $$ long h, h2-->Line_14 $$ h = sc.nextLong()[ FD ]
Line_14 $$ h = sc.nextLong()-->Line_14 $$ h = sc.nextLong()[ CD ]
Line_5 $$ Scanner sc = new Scanner(System.in)-->Line_14 $$ h = sc.nextLong()[ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_15 $$ mapH.put(index, h)[ CD ]
Line_9 $$ Map<Long, Long> mapH = new HashMap<Long, Long>()-->Line_15 $$ mapH.put(index, h)[ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_15 $$ mapH.put(index, h)[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_15 $$ mapH.put(index, h)[ FD ]
Line_14 $$ h = sc.nextLong()-->Line_15 $$ mapH.put(index, h)[ FD ]
Line_8 $$ long h, h2-->Line_15 $$ mapH.put(index, h)[ FD ]
Line_4 $$ public static void main(String[] args) -->Line_17 $$ sc.close()[ CD ]
Line_5 $$ Scanner sc = new Scanner(System.in)-->Line_17 $$ sc.close()[ FD ]
Line_4 $$ public static void main(String[] args) -->Line_18 $$ answer = 0[ CD ]
Line_6 $$ long answer, l, index, index2-->Line_18 $$ answer = 0[ FD ]
Line_18 $$ answer = 0-->Line_18 $$ answer = 0[ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_7 $$ long a, b, n-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_12 $$ n = sc.nextInt()-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ CD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ CD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_20 $$ l = 0[ CD ]
Line_20 $$ l = 0-->Line_20 $$ l = 0[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_20 $$ l = 0[ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_21 $$ if (index >= n) [ CD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_21 $$ if (index >= n) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_21 $$ if (index >= n) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_21 $$ if (index >= n) [ FD ]
Line_7 $$ long a, b, n-->Line_21 $$ if (index >= n) [ FD ]
Line_12 $$ n = sc.nextInt()-->Line_21 $$ if (index >= n) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_7 $$ long a, b, n-->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_12 $$ n = sc.nextInt()-->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ CD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ CD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_25 $$ h = mapH.get(index2 - 1)[ CD ]
Line_25 $$ h = mapH.get(index2 - 1)-->Line_25 $$ h = mapH.get(index2 - 1)[ FD ]
Line_14 $$ h = sc.nextLong()-->Line_25 $$ h = mapH.get(index2 - 1)[ FD ]
Line_8 $$ long h, h2-->Line_25 $$ h = mapH.get(index2 - 1)[ FD ]
Line_25 $$ h = mapH.get(index2 - 1)-->Line_25 $$ h = mapH.get(index2 - 1)[ CD ]
Line_9 $$ Map<Long, Long> mapH = new HashMap<Long, Long>()-->Line_25 $$ h = mapH.get(index2 - 1)[ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_26 $$ h2 = mapH.get(index2)[ CD ]
Line_26 $$ h2 = mapH.get(index2)-->Line_26 $$ h2 = mapH.get(index2)[ FD ]
Line_8 $$ long h, h2-->Line_26 $$ h2 = mapH.get(index2)[ FD ]
Line_26 $$ h2 = mapH.get(index2)-->Line_26 $$ h2 = mapH.get(index2)[ CD ]
Line_9 $$ Map<Long, Long> mapH = new HashMap<Long, Long>()-->Line_26 $$ h2 = mapH.get(index2)[ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_26 $$ h2 = mapH.get(index2)[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_26 $$ h2 = mapH.get(index2)[ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_27 $$ if (h >= h2) [ CD ]
Line_25 $$ h = mapH.get(index2 - 1)-->Line_27 $$ if (h >= h2) [ FD ]
Line_14 $$ h = sc.nextLong()-->Line_27 $$ if (h >= h2) [ FD ]
Line_8 $$ long h, h2-->Line_27 $$ if (h >= h2) [ FD ]
Line_26 $$ h2 = mapH.get(index2)-->Line_27 $$ if (h >= h2) [ FD ]
Line_8 $$ long h, h2-->Line_27 $$ if (h >= h2) [ FD ]
Line_27 $$ if (h >= h2) -->Line_30 $$ l = index2 - index - 1[ CD ]
Line_30 $$ l = index2 - index - 1-->Line_30 $$ l = index2 - index - 1[ FD ]
Line_20 $$ l = 0-->Line_30 $$ l = index2 - index - 1[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_30 $$ l = index2 - index - 1[ FD ]
Line_27 $$ if (h >= h2) -->Line_31 $$ if (l > 0) [ CD ]
Line_30 $$ l = index2 - index - 1-->Line_31 $$ if (l > 0) [ FD ]
Line_20 $$ l = 0-->Line_31 $$ if (l > 0) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_31 $$ if (l > 0) [ FD ]
Line_31 $$ if (l > 0) -->Line_32 $$ mapA.put(l, index)[ CD ]
Line_10 $$ Map<Long, Long> mapA = new TreeMap<Long, Long>(Collections.reverseOrder())-->Line_32 $$ mapA.put(l, index)[ FD ]
Line_30 $$ l = index2 - index - 1-->Line_32 $$ mapA.put(l, index)[ FD ]
Line_20 $$ l = 0-->Line_32 $$ mapA.put(l, index)[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_32 $$ mapA.put(l, index)[ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_32 $$ mapA.put(l, index)[ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_32 $$ mapA.put(l, index)[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_32 $$ mapA.put(l, index)[ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_37 $$ if (index2 == n) [ CD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_37 $$ if (index2 == n) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_37 $$ if (index2 == n) [ FD ]
Line_7 $$ long a, b, n-->Line_37 $$ if (index2 == n) [ FD ]
Line_12 $$ n = sc.nextInt()-->Line_37 $$ if (index2 == n) [ FD ]
Line_37 $$ if (index2 == n) -->Line_38 $$ l = n - index - 1[ CD ]
Line_30 $$ l = index2 - index - 1-->Line_38 $$ l = n - index - 1[ FD ]
Line_20 $$ l = 0-->Line_38 $$ l = n - index - 1[ FD ]
Line_38 $$ l = n - index - 1-->Line_38 $$ l = n - index - 1[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_38 $$ l = n - index - 1[ FD ]
Line_37 $$ if (index2 == n) -->Line_39 $$ if (l > 0) [ CD ]
Line_30 $$ l = index2 - index - 1-->Line_39 $$ if (l > 0) [ FD ]
Line_20 $$ l = 0-->Line_39 $$ if (l > 0) [ FD ]
Line_38 $$ l = n - index - 1-->Line_39 $$ if (l > 0) [ FD ]
Line_6 $$ long answer, l, index, index2-->Line_39 $$ if (l > 0) [ FD ]
Line_39 $$ if (l > 0) -->Line_40 $$ mapA.put(l, index)[ CD ]
Line_10 $$ Map<Long, Long> mapA = new TreeMap<Long, Long>(Collections.reverseOrder())-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_30 $$ l = index2 - index - 1-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_20 $$ l = 0-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_38 $$ l = n - index - 1-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_40 $$ mapA.put(l, index)[ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_40 $$ mapA.put(l, index)[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_44 $$ index = index2 - 1[ CD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_44 $$ index = index2 - 1[ FD ]
Line_44 $$ index = index2 - 1-->Line_44 $$ index = index2 - 1[ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_44 $$ index = index2 - 1[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_44 $$ index = index2 - 1[ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_44 $$ index = index2 - 1[ FD ]
Line_6 $$ long answer, l, index, index2-->Line_44 $$ index = index2 - 1[ FD ]
Line_4 $$ public static void main(String[] args) -->Line_46 $$ if (mapA.size() == 0) [ CD ]
Line_10 $$ Map<Long, Long> mapA = new TreeMap<Long, Long>(Collections.reverseOrder())-->Line_46 $$ if (mapA.size() == 0) [ FD ]
Line_46 $$ if (mapA.size() == 0) -->Line_47 $$ System.out.println("0")[ CD ]
Line_10 $$ Map<Long, Long> mapA = new TreeMap<Long, Long>(Collections.reverseOrder())-->Line_50 $$ for (Long lindex : mapA.keySet()) [ FD ]
Line_50 $$ for (Long lindex : mapA.keySet()) -->Line_51 $$ System.out.println(lindex)[ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_13 $$ for (index = 0; index < n; index++) [ FD ]
Line_13 $$ for (index = 0; index < n; index++) -->Line_15 $$ mapH.put(index, h)[ FD ]
Line_14 $$ h = sc.nextLong()-->Line_15 $$ mapH.put(index, h)[ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_44 $$ index = index2 - 1-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_44 $$ index = index2 - 1-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_44 $$ index = index2 - 1-->Line_19 $$ for (index = 0; index < n; index++) [ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_21 $$ if (index >= n) [ FD ]
Line_44 $$ index = index2 - 1-->Line_21 $$ if (index >= n) [ FD ]
Line_20 $$ l = 0-->Line_39 $$ if (l > 0) [ FD ]
Line_38 $$ l = n - index - 1-->Line_39 $$ if (l > 0) [ FD ]
Line_20 $$ l = 0-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_38 $$ l = n - index - 1-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_19 $$ for (index = 0; index < n; index++) -->Line_40 $$ mapA.put(l, index)[ FD ]
Line_44 $$ index = index2 - 1-->Line_40 $$ mapA.put(l, index)[ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_24 $$ for (index2 = index + 1; index2 < n; index2++) [ FD ]
Line_24 $$ for (index2 = index + 1; index2 < n; index2++) -->Line_26 $$ h2 = mapH.get(index2)[ FD ]
Line_25 $$ h = mapH.get(index2 - 1)-->Line_27 $$ if (h >= h2) [ FD ]
Line_26 $$ h2 = mapH.get(index2)-->Line_27 $$ if (h >= h2) [ FD ]
Line_30 $$ l = index2 - index - 1-->Line_31 $$ if (l > 0) [ FD ]
Line_30 $$ l = index2 - index - 1-->Line_32 $$ mapA.put(l, index)[ FD ]
