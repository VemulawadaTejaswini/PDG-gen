Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ Scanner scan = new Scanner(new BufferedReader(new InputStreamReader(System.in)))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ String s = ""[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ while ((s = br.readLine()) != null) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_6 $$ while ((s = br.readLine()) != null) -->Line_6 $$ while ((s = br.readLine()) != null) [ FD ]
Line_5 $$ String s = ""-->Line_6 $$ while ((s = br.readLine()) != null) [ FD ]
Line_6 $$ while ((s = br.readLine()) != null) -->Line_6 $$ while ((s = br.readLine()) != null) [ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_6 $$ while ((s = br.readLine()) != null) [ FD ]
Line_6 $$ while ((s = br.readLine()) != null) -->Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")[ CD ]
Line_6 $$ while ((s = br.readLine()) != null) -->Line_8 $$ int x = Integer.parseInt(st.nextToken())[ CD ]
Line_8 $$ int x = Integer.parseInt(st.nextToken())-->Line_8 $$ int x = Integer.parseInt(st.nextToken())[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_8 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_6 $$ while ((s = br.readLine()) != null) -->Line_9 $$ String ss = st.nextToken()[ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_9 $$ String ss = st.nextToken()[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_9 $$ String ss = st.nextToken()[ FD ]
Line_6 $$ while ((s = br.readLine()) != null) -->Line_10 $$ if (ss.equals("+")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_10 $$ if (ss.equals("+")) [ FD ]
Line_10 $$ if (ss.equals("+")) -->Line_10 $$ if (ss.equals("+")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_10 $$ if (ss.equals("+")) [ FD ]
Line_10 $$ if (ss.equals("+")) -->Line_11 $$ int y = Integer.parseInt(st.nextToken())[ CD ]
Line_11 $$ int y = Integer.parseInt(st.nextToken())-->Line_11 $$ int y = Integer.parseInt(st.nextToken())[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_11 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_10 $$ if (ss.equals("+")) -->Line_12 $$ System.out.println(x + y)[ CD ]
Line_10 $$ if (ss.equals("+")) -->Line_13 $$ if (ss.equals("-")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_13 $$ if (ss.equals("-")) [ FD ]
Line_13 $$ if (ss.equals("-")) -->Line_13 $$ if (ss.equals("-")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_13 $$ if (ss.equals("-")) [ FD ]
Line_13 $$ if (ss.equals("-")) -->Line_14 $$ int y = Integer.parseInt(st.nextToken())[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_14 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_13 $$ if (ss.equals("-")) -->Line_15 $$ System.out.println(x - y)[ CD ]
Line_13 $$ if (ss.equals("-")) -->Line_16 $$ if (ss.equals("*")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_16 $$ if (ss.equals("*")) [ FD ]
Line_16 $$ if (ss.equals("*")) -->Line_16 $$ if (ss.equals("*")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_16 $$ if (ss.equals("*")) [ FD ]
Line_16 $$ if (ss.equals("*")) -->Line_17 $$ int y = Integer.parseInt(st.nextToken())[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_17 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_16 $$ if (ss.equals("*")) -->Line_18 $$ System.out.println(x * y)[ CD ]
Line_16 $$ if (ss.equals("*")) -->Line_19 $$ if (ss.equals("/")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_19 $$ if (ss.equals("/")) [ FD ]
Line_19 $$ if (ss.equals("/")) -->Line_19 $$ if (ss.equals("/")) [ CD ]
Line_9 $$ String ss = st.nextToken()-->Line_19 $$ if (ss.equals("/")) [ FD ]
Line_19 $$ if (ss.equals("/")) -->Line_20 $$ int y = Integer.parseInt(st.nextToken())[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_20 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_19 $$ if (ss.equals("/")) -->Line_21 $$ System.out.println(x / y)[ CD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_8 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_9 $$ String ss = st.nextToken()[ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_10 $$ if (ss.equals("+")) [ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_10 $$ if (ss.equals("+")) [ FD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_11 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_13 $$ if (ss.equals("-")) [ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_13 $$ if (ss.equals("-")) [ FD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_14 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_16 $$ if (ss.equals("*")) [ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_16 $$ if (ss.equals("*")) [ FD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_17 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_19 $$ if (ss.equals("/")) [ FD ]
Line_9 $$ String ss = st.nextToken()-->Line_19 $$ if (ss.equals("/")) [ FD ]
Line_7 $$ StringTokenizer st = new StringTokenizer(s, " ")-->Line_20 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
