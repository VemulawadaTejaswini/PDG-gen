Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ char[] A = sc.next().toCharArray()[ CD ]
Line_4 $$ char[] A = sc.next().toCharArray()-->Line_4 $$ char[] A = sc.next().toCharArray()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ char[] A = sc.next().toCharArray()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()[ CD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_7 $$ if (maplst.containsKey(c)) [ FD ]
Line_6 $$ for (char c : A) -->Line_7 $$ if (maplst.containsKey(c)) [ FD ]
Line_7 $$ if (maplst.containsKey(c)) -->Line_7 $$ if (maplst.containsKey(c)) [ CD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_7 $$ if (maplst.containsKey(c)) [ FD ]
Line_6 $$ for (char c : A) -->Line_7 $$ if (maplst.containsKey(c)) [ FD ]
Line_7 $$ if (maplst.containsKey(c)) -->Line_8 $$ maplst.put(c, maplst.get(c) + 1)[ CD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_8 $$ maplst.put(c, maplst.get(c) + 1)[ FD ]
Line_6 $$ for (char c : A) -->Line_8 $$ maplst.put(c, maplst.get(c) + 1)[ FD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_8 $$ maplst.put(c, maplst.get(c) + 1)[ FD ]
Line_6 $$ for (char c : A) -->Line_8 $$ maplst.put(c, maplst.get(c) + 1)[ FD ]
Line_7 $$ if (maplst.containsKey(c)) -->Line_10 $$ maplst.put(c, 1)[ CD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_10 $$ maplst.put(c, 1)[ FD ]
Line_6 $$ for (char c : A) -->Line_10 $$ maplst.put(c, 1)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ boolean judge = true[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ if (maplst.keySet().size() == 2) [ CD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_14 $$ if (maplst.keySet().size() == 2) [ FD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_15 $$ for (char c : maplst.keySet()) [ FD ]
Line_5 $$ Map<Character, Integer> maplst = new TreeMap<Character, Integer>()-->Line_16 $$ if (maplst.get(c) != 2) [ FD ]
Line_6 $$ for (char c : A) -->Line_16 $$ if (maplst.get(c) != 2) [ FD ]
Line_16 $$ if (maplst.get(c) != 2) -->Line_17 $$ judge = !judge[ CD ]
Line_13 $$ boolean judge = true-->Line_17 $$ judge = !judge[ FD ]
Line_17 $$ judge = !judge-->Line_17 $$ judge = !judge[ FD ]
Line_17 $$ judge = !judge-->Line_17 $$ judge = !judge[ CD ]
Line_13 $$ boolean judge = true-->Line_17 $$ judge = !judge[ FD ]
Line_17 $$ judge = !judge-->Line_17 $$ judge = !judge[ FD ]
Line_14 $$ if (maplst.keySet().size() == 2) -->Line_22 $$ judge = !judge[ CD ]
Line_13 $$ boolean judge = true-->Line_22 $$ judge = !judge[ FD ]
Line_17 $$ judge = !judge-->Line_22 $$ judge = !judge[ FD ]
Line_22 $$ judge = !judge-->Line_22 $$ judge = !judge[ FD ]
Line_22 $$ judge = !judge-->Line_22 $$ judge = !judge[ CD ]
Line_13 $$ boolean judge = true-->Line_22 $$ judge = !judge[ FD ]
Line_17 $$ judge = !judge-->Line_22 $$ judge = !judge[ FD ]
Line_22 $$ judge = !judge-->Line_22 $$ judge = !judge[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_24 $$ if (judge) [ CD ]
Line_24 $$ if (judge) -->Line_25 $$ System.out.println("Yes")[ CD ]
Line_24 $$ if (judge) -->Line_27 $$ System.out.println("No")[ CD ]
