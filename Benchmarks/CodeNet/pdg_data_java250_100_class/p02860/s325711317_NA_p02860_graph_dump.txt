Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ int len = Integer.parseInt(sc.next())[ CD ]
Line_4 $$ int len = Integer.parseInt(sc.next())-->Line_4 $$ int len = Integer.parseInt(sc.next())[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int len = Integer.parseInt(sc.next())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ String str = sc.next()[ CD ]
Line_5 $$ String str = sc.next()-->Line_5 $$ String str = sc.next()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ String str = sc.next()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ Pattern dupPattern = Pattern.compile("([ \\w]+)\\1", Pattern.CASE_INSENSITIVE)[ CD ]
Line_6 $$ Pattern dupPattern = Pattern.compile("([ \\w]+)\\1", Pattern.CASE_INSENSITIVE)-->Line_6 $$ Pattern dupPattern = Pattern.compile("([ \\w]+)\\1", Pattern.CASE_INSENSITIVE)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ Matcher matcher = dupPattern.matcher(str)[ CD ]
Line_7 $$ Matcher matcher = dupPattern.matcher(str)-->Line_7 $$ Matcher matcher = dupPattern.matcher(str)[ CD ]
Line_6 $$ Pattern dupPattern = Pattern.compile("([ \\w]+)\\1", Pattern.CASE_INSENSITIVE)-->Line_7 $$ Matcher matcher = dupPattern.matcher(str)[ FD ]
Line_5 $$ String str = sc.next()-->Line_7 $$ Matcher matcher = dupPattern.matcher(str)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ while (matcher.find()) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_8 $$ while (matcher.find()) -->Line_8 $$ while (matcher.find()) [ CD ]
Line_7 $$ Matcher matcher = dupPattern.matcher(str)-->Line_8 $$ while (matcher.find()) [ FD ]
Line_8 $$ while (matcher.find()) -->Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")[ CD ]
Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")-->Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")[ FD ]
Line_5 $$ String str = sc.next()-->Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")[ FD ]
Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")-->Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")[ CD ]
Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")-->Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")[ FD ]
Line_5 $$ String str = sc.next()-->Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ if ((len != str.length()) && (len % str.length()) == 0) [ CD ]
Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")-->Line_11 $$ if ((len != str.length()) && (len % str.length()) == 0) [ FD ]
Line_5 $$ String str = sc.next()-->Line_11 $$ if ((len != str.length()) && (len % str.length()) == 0) [ FD ]
Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")-->Line_11 $$ if ((len != str.length()) && (len % str.length()) == 0) [ FD ]
Line_5 $$ String str = sc.next()-->Line_11 $$ if ((len != str.length()) && (len % str.length()) == 0) [ FD ]
Line_11 $$ if ((len != str.length()) && (len % str.length()) == 0) -->Line_12 $$ System.out.println("Yes")[ CD ]
Line_11 $$ if ((len != str.length()) && (len % str.length()) == 0) -->Line_14 $$ System.out.println("No")[ CD ]
Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")-->Line_9 $$ str = str.replaceAll("([ \\w]+)\\1", "$1")[ FD ]
