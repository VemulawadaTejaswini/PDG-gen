Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ int N = sc.nextInt()[ CD ]
Line_4 $$ int N = sc.nextInt()-->Line_4 $$ int N = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int N = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ int scoreCard[] = new int[N][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ for (int i = 0; i < N; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_4 $$ int N = sc.nextInt()-->Line_6 $$ for (int i = 0; i < N; i++) [ FD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_6 $$ for (int i = 0; i < N; i++) [ CD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_6 $$ for (int i = 0; i < N; i++) [ CD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_6 $$ for (int i = 0; i < N; i++) [ FD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_7 $$ scoreCard[i] = sc.nextInt()[ CD ]
Line_7 $$ scoreCard[i] = sc.nextInt()-->Line_7 $$ scoreCard[i] = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_7 $$ scoreCard[i] = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ sort(scoreCard)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ int Alice = 0, Bob = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ boolean flg = true[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ CD ]
Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ CD ]
Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ FD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) -->Line_13 $$ if (flg) [ CD ]
Line_13 $$ if (flg) -->Line_14 $$ Alice += scoreCard[i][ CD ]
Line_14 $$ Alice += scoreCard[i]-->Line_14 $$ Alice += scoreCard[i][ FD ]
Line_10 $$ int Alice = 0, Bob = 0-->Line_14 $$ Alice += scoreCard[i][ FD ]
Line_13 $$ if (flg) -->Line_15 $$ flg = false[ CD ]
Line_15 $$ flg = false-->Line_15 $$ flg = false[ FD ]
Line_11 $$ boolean flg = true-->Line_15 $$ flg = false[ FD ]
Line_13 $$ if (flg) -->Line_17 $$ Bob += scoreCard[i][ CD ]
Line_17 $$ Bob += scoreCard[i]-->Line_17 $$ Bob += scoreCard[i][ FD ]
Line_10 $$ int Alice = 0, Bob = 0-->Line_17 $$ Bob += scoreCard[i][ FD ]
Line_13 $$ if (flg) -->Line_18 $$ flg = true[ CD ]
Line_15 $$ flg = false-->Line_18 $$ flg = true[ FD ]
Line_18 $$ flg = true-->Line_18 $$ flg = true[ FD ]
Line_11 $$ boolean flg = true-->Line_18 $$ flg = true[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_21 $$ System.out.println(Alice - Bob)[ CD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_6 $$ for (int i = 0; i < N; i++) [ FD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_6 $$ for (int i = 0; i < N; i++) [ FD ]
Line_6 $$ for (int i = 0; i < N; i++) -->Line_6 $$ for (int i = 0; i < N; i++) [ FD ]
Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ FD ]
Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) -->Line_12 $$ for (int i = scoreCard.length - 1; i >= 0; i--) [ FD ]
