Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ int cards = Integer.parseInt(br.readLine())[ CD ]
Line_4 $$ int cards = Integer.parseInt(br.readLine())-->Line_4 $$ int cards = Integer.parseInt(br.readLine())[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ int cards = Integer.parseInt(br.readLine())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int[] card = new int[cards][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ String input = br.readLine()[ CD ]
Line_6 $$ String input = br.readLine()-->Line_6 $$ String input = br.readLine()[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_6 $$ String input = br.readLine()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ for (int i = 0; i < cards - 1; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_7 $$ for (int i = 0; i < cards - 1; i++) [ CD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_7 $$ for (int i = 0; i < cards - 1; i++) [ CD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_7 $$ for (int i = 0; i < cards - 1; i++) [ FD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_8 $$ card[i] = Integer.parseInt(input.substring(0, input.indexOf(" ")))[ CD ]
Line_8 $$ card[i] = Integer.parseInt(input.substring(0, input.indexOf(" ")))-->Line_8 $$ card[i] = Integer.parseInt(input.substring(0, input.indexOf(" ")))[ CD ]
Line_6 $$ String input = br.readLine()-->Line_8 $$ card[i] = Integer.parseInt(input.substring(0, input.indexOf(" ")))[ FD ]
Line_6 $$ String input = br.readLine()-->Line_8 $$ card[i] = Integer.parseInt(input.substring(0, input.indexOf(" ")))[ FD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ CD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
Line_6 $$ String input = br.readLine()-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ CD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
Line_6 $$ String input = br.readLine()-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
Line_6 $$ String input = br.readLine()-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_11 $$ card[cards - 1] = Integer.parseInt(input)[ CD ]
Line_11 $$ card[cards - 1] = Integer.parseInt(input)-->Line_11 $$ card[cards - 1] = Integer.parseInt(input)[ CD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_11 $$ card[cards - 1] = Integer.parseInt(input)[ FD ]
Line_6 $$ String input = br.readLine()-->Line_11 $$ card[cards - 1] = Integer.parseInt(input)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_12 $$ Arrays.sort(card)[ CD ]
Line_5 $$ int[] card = new int[cards]-->Line_12 $$ Arrays.sort(card)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_13 $$ int Bob = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_14 $$ int Alice = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_15 $$ boolean isAliceTurn = cards % 2 == 1[ CD ]
Line_17 $$ if (isAliceTurn) -->Line_18 $$ Alice += a_card[ CD ]
Line_14 $$ int Alice = 0-->Line_18 $$ Alice += a_card[ FD ]
Line_18 $$ Alice += a_card-->Line_18 $$ Alice += a_card[ FD ]
Line_16 $$ for (int a_card : card) -->Line_18 $$ Alice += a_card[ FD ]
Line_17 $$ if (isAliceTurn) -->Line_19 $$ isAliceTurn = false[ CD ]
Line_15 $$ boolean isAliceTurn = cards % 2 == 1-->Line_19 $$ isAliceTurn = false[ FD ]
Line_19 $$ isAliceTurn = false-->Line_19 $$ isAliceTurn = false[ FD ]
Line_17 $$ if (isAliceTurn) -->Line_22 $$ Bob += a_card[ CD ]
Line_13 $$ int Bob = 0-->Line_22 $$ Bob += a_card[ FD ]
Line_22 $$ Bob += a_card-->Line_22 $$ Bob += a_card[ FD ]
Line_16 $$ for (int a_card : card) -->Line_22 $$ Bob += a_card[ FD ]
Line_17 $$ if (isAliceTurn) -->Line_23 $$ isAliceTurn = true[ CD ]
Line_15 $$ boolean isAliceTurn = cards % 2 == 1-->Line_23 $$ isAliceTurn = true[ FD ]
Line_19 $$ isAliceTurn = false-->Line_23 $$ isAliceTurn = true[ FD ]
Line_23 $$ isAliceTurn = true-->Line_23 $$ isAliceTurn = true[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_26 $$ System.out.println(Alice - Bob)[ CD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_7 $$ for (int i = 0; i < cards - 1; i++) [ FD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_7 $$ for (int i = 0; i < cards - 1; i++) [ FD ]
Line_7 $$ for (int i = 0; i < cards - 1; i++) -->Line_7 $$ for (int i = 0; i < cards - 1; i++) [ FD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_8 $$ card[i] = Integer.parseInt(input.substring(0, input.indexOf(" ")))[ FD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_8 $$ card[i] = Integer.parseInt(input.substring(0, input.indexOf(" ")))[ FD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
Line_9 $$ input = input.substring(input.indexOf(" ") + 1)-->Line_9 $$ input = input.substring(input.indexOf(" ") + 1)[ FD ]
