Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] age) throws IOException [ CD ]
Line_2 $$ public static void main(String[] age) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] age) throws IOException -->Line_4 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_2 $$ public static void main(String[] age) throws IOException -->Line_5 $$ StringBuffer sb2 = new StringBuffer()[ CD ]
Line_2 $$ public static void main(String[] age) throws IOException -->Line_6 $$ while (true) [ CD ]
Line_2 $$ public static void main(String[] age) throws IOException -->Line_2 $$ public static void main(String[] age) throws IOException [ CD ]
Line_6 $$ while (true) -->Line_7 $$ String mountain = br.readLine()[ CD ]
Line_7 $$ String mountain = br.readLine()-->Line_7 $$ String mountain = br.readLine()[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_7 $$ String mountain = br.readLine()[ FD ]
Line_6 $$ while (true) -->Line_8 $$ if (mountain.equals("-"))[ CD ]
Line_7 $$ String mountain = br.readLine()-->Line_8 $$ if (mountain.equals("-"))[ FD ]
Line_8 $$ if (mountain.equals("-"))-->Line_8 $$ if (mountain.equals("-"))[ CD ]
Line_7 $$ String mountain = br.readLine()-->Line_8 $$ if (mountain.equals("-"))[ FD ]
Line_6 $$ while (true) -->Line_9 $$ int m = Integer.parseInt(br.readLine())[ CD ]
Line_9 $$ int m = Integer.parseInt(br.readLine())-->Line_9 $$ int m = Integer.parseInt(br.readLine())[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_9 $$ int m = Integer.parseInt(br.readLine())[ FD ]
Line_6 $$ while (true) -->Line_10 $$ int i = 0[ CD ]
Line_6 $$ while (true) -->Line_11 $$ for (i = 0; i < m; i++) [ CD ]
Line_6 $$ while (true) -->Line_6 $$ while (true) [ CD ]
Line_10 $$ int i = 0-->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_9 $$ int m = Integer.parseInt(br.readLine())-->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_11 $$ for (i = 0; i < m; i++) [ CD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_10 $$ int i = 0-->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_11 $$ for (i = 0; i < m; i++) [ CD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_10 $$ int i = 0-->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_12 $$ int h = Integer.parseInt(br.readLine())[ CD ]
Line_12 $$ int h = Integer.parseInt(br.readLine())-->Line_12 $$ int h = Integer.parseInt(br.readLine())[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_12 $$ int h = Integer.parseInt(br.readLine())[ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ CD ]
Line_5 $$ StringBuffer sb2 = new StringBuffer()-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_12 $$ int h = Integer.parseInt(br.readLine())-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_12 $$ int h = Integer.parseInt(br.readLine())-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_14 $$ mountain = sb2.toString()[ CD ]
Line_14 $$ mountain = sb2.toString()-->Line_14 $$ mountain = sb2.toString()[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_14 $$ mountain = sb2.toString()[ FD ]
Line_14 $$ mountain = sb2.toString()-->Line_14 $$ mountain = sb2.toString()[ CD ]
Line_5 $$ StringBuffer sb2 = new StringBuffer()-->Line_14 $$ mountain = sb2.toString()[ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_15 $$ sb2.setLength(0)[ CD ]
Line_5 $$ StringBuffer sb2 = new StringBuffer()-->Line_15 $$ sb2.setLength(0)[ FD ]
Line_6 $$ while (true) -->Line_17 $$ sb.append(mountain).append("\n")[ CD ]
Line_4 $$ StringBuffer sb = new StringBuffer()-->Line_17 $$ sb.append(mountain).append("\n")[ FD ]
Line_14 $$ mountain = sb2.toString()-->Line_17 $$ sb.append(mountain).append("\n")[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_17 $$ sb.append(mountain).append("\n")[ FD ]
Line_2 $$ public static void main(String[] age) throws IOException -->Line_19 $$ System.out.print(sb)[ CD ]
Line_4 $$ StringBuffer sb = new StringBuffer()-->Line_19 $$ System.out.print(sb)[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_8 $$ if (mountain.equals("-"))[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_8 $$ if (mountain.equals("-"))[ FD ]
Line_7 $$ String mountain = br.readLine()-->Line_17 $$ sb.append(mountain).append("\n")[ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_11 $$ for (i = 0; i < m; i++) -->Line_11 $$ for (i = 0; i < m; i++) [ FD ]
Line_14 $$ mountain = sb2.toString()-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_12 $$ int h = Integer.parseInt(br.readLine())-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_14 $$ mountain = sb2.toString()-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_14 $$ mountain = sb2.toString()-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
Line_12 $$ int h = Integer.parseInt(br.readLine())-->Line_13 $$ sb2.append(mountain.substring(h, mountain.length())).append(mountain.substring(0, h))[ FD ]
