Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String args[]) [ CD ]
Line_4 $$ int N = in.nextInt()-->Line_4 $$ int N = in.nextInt()[ CD ]
Line_3 $$ try (Scanner in = new Scanner(System.in)) -->Line_4 $$ int N = in.nextInt()[ FD ]
Line_5 $$ int T = in.nextInt()-->Line_5 $$ int T = in.nextInt()[ CD ]
Line_3 $$ try (Scanner in = new Scanner(System.in)) -->Line_5 $$ int T = in.nextInt()[ FD ]
Line_6 $$ int A = in.nextInt()-->Line_6 $$ int A = in.nextInt()[ CD ]
Line_3 $$ try (Scanner in = new Scanner(System.in)) -->Line_6 $$ int A = in.nextInt()[ FD ]
Line_4 $$ int N = in.nextInt()-->Line_8 $$ for (int i = 0; i < N; i++) [ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_8 $$ for (int i = 0; i < N; i++) [ CD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_8 $$ for (int i = 0; i < N; i++) [ CD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_8 $$ for (int i = 0; i < N; i++) [ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_9 $$ H[i] = in.nextInt()[ CD ]
Line_9 $$ H[i] = in.nextInt()-->Line_9 $$ H[i] = in.nextInt()[ CD ]
Line_3 $$ try (Scanner in = new Scanner(System.in)) -->Line_9 $$ H[i] = in.nextInt()[ FD ]
Line_11 $$ int bestI = -1-->Line_11 $$ int bestI = -1[ CD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_4 $$ int N = in.nextInt()-->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ CD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ CD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_14 $$ double t = T - H[i] * 0.006[ CD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_15 $$ if (Math.abs(t - A) < bestDistance) [ CD ]
Line_12 $$ double bestDistance = (int) 1e9-->Line_15 $$ if (Math.abs(t - A) < bestDistance) [ FD ]
Line_15 $$ if (Math.abs(t - A) < bestDistance) -->Line_16 $$ bestDistance = Math.abs(t - A)[ CD ]
Line_16 $$ bestDistance = Math.abs(t - A)-->Line_16 $$ bestDistance = Math.abs(t - A)[ FD ]
Line_12 $$ double bestDistance = (int) 1e9-->Line_16 $$ bestDistance = Math.abs(t - A)[ FD ]
Line_16 $$ bestDistance = Math.abs(t - A)-->Line_16 $$ bestDistance = Math.abs(t - A)[ CD ]
Line_15 $$ if (Math.abs(t - A) < bestDistance) -->Line_17 $$ bestI = i[ CD ]
Line_17 $$ bestI = i-->Line_17 $$ bestI = i[ FD ]
Line_11 $$ int bestI = -1-->Line_17 $$ bestI = i[ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_17 $$ bestI = i[ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_17 $$ bestI = i[ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_8 $$ for (int i = 0; i < N; i++) [ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_8 $$ for (int i = 0; i < N; i++) [ FD ]
Line_8 $$ for (int i = 0; i < N; i++) -->Line_8 $$ for (int i = 0; i < N; i++) [ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_16 $$ bestDistance = Math.abs(t - A)-->Line_15 $$ if (Math.abs(t - A) < bestDistance) [ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_17 $$ bestI = i[ FD ]
