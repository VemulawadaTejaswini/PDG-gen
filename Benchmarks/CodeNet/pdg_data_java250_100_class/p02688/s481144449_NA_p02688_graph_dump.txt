Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ String[] lineString = sc.nextLine().split(" ")[ CD ]
Line_4 $$ String[] lineString = sc.nextLine().split(" ")-->Line_4 $$ String[] lineString = sc.nextLine().split(" ")[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ String[] lineString = sc.nextLine().split(" ")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ int[] sunuke = new int[Integer.parseInt(lineString[0])][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ int numberOfCandy = Integer.parseInt(lineString[1])[ CD ]
Line_6 $$ int numberOfCandy = Integer.parseInt(lineString[1])-->Line_6 $$ int numberOfCandy = Integer.parseInt(lineString[1])[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ int noCandyCount = sunuke.length[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_6 $$ int numberOfCandy = Integer.parseInt(lineString[1])-->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ FD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ CD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ CD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ FD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_9 $$ int hasCandy = Integer.parseInt(sc.nextLine())[ CD ]
Line_9 $$ int hasCandy = Integer.parseInt(sc.nextLine())-->Line_9 $$ int hasCandy = Integer.parseInt(sc.nextLine())[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_9 $$ int hasCandy = Integer.parseInt(sc.nextLine())[ FD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_10 $$ lineString = sc.nextLine().split(" ")[ CD ]
Line_10 $$ lineString = sc.nextLine().split(" ")-->Line_10 $$ lineString = sc.nextLine().split(" ")[ FD ]
Line_4 $$ String[] lineString = sc.nextLine().split(" ")-->Line_10 $$ lineString = sc.nextLine().split(" ")[ FD ]
Line_10 $$ lineString = sc.nextLine().split(" ")-->Line_10 $$ lineString = sc.nextLine().split(" ")[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_10 $$ lineString = sc.nextLine().split(" ")[ FD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_11 $$ while (hasCandy-- > 0) [ CD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ CD ]
Line_9 $$ int hasCandy = Integer.parseInt(sc.nextLine())-->Line_11 $$ while (hasCandy-- > 0) [ FD ]
Line_11 $$ while (hasCandy-- > 0) -->Line_12 $$ if (sunuke[Integer.parseInt(lineString[hasCandy]) - 1] == 0) [ CD ]
Line_12 $$ if (sunuke[Integer.parseInt(lineString[hasCandy]) - 1] == 0) -->Line_13 $$ noCandyCount--[ CD ]
Line_7 $$ int noCandyCount = sunuke.length-->Line_13 $$ noCandyCount--[ FD ]
Line_11 $$ while (hasCandy-- > 0) -->Line_15 $$ sunuke[Integer.parseInt(lineString[hasCandy]) - 1]++[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_18 $$ System.out.println(noCandyCount)[ CD ]
Line_7 $$ int noCandyCount = sunuke.length-->Line_18 $$ System.out.println(noCandyCount)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_19 $$ sc.close()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_19 $$ sc.close()[ FD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ FD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ FD ]
Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) -->Line_8 $$ for (int candy = 0; candy < numberOfCandy; candy++) [ FD ]
