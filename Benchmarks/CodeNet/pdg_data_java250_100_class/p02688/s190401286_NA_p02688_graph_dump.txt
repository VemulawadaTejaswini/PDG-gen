Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner stdIn = new Scanner(System.in)[ CD ]
Line_5 $$ int childrenNum = stdIn.nextInt()-->Line_5 $$ int childrenNum = stdIn.nextInt()[ CD ]
Line_3 $$ Scanner stdIn = new Scanner(System.in)-->Line_5 $$ int childrenNum = stdIn.nextInt()[ FD ]
Line_6 $$ if (childrenNum < 1 || childrenNum > 100)-->Line_6 $$ return[ CD ]
Line_8 $$ int snackNum = stdIn.nextInt()-->Line_8 $$ int snackNum = stdIn.nextInt()[ CD ]
Line_3 $$ Scanner stdIn = new Scanner(System.in)-->Line_8 $$ int snackNum = stdIn.nextInt()[ FD ]
Line_9 $$ if (snackNum < 1 || snackNum > 100)-->Line_9 $$ return[ CD ]
Line_8 $$ int snackNum = stdIn.nextInt()-->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ FD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ CD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ CD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ FD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_11 $$ int havingSnackNum = stdIn.nextInt()[ CD ]
Line_11 $$ int havingSnackNum = stdIn.nextInt()-->Line_11 $$ int havingSnackNum = stdIn.nextInt()[ CD ]
Line_3 $$ Scanner stdIn = new Scanner(System.in)-->Line_11 $$ int havingSnackNum = stdIn.nextInt()[ FD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_12 $$ if (havingSnackNum < 1 || havingSnackNum > childrenNum)[ CD ]
Line_12 $$ if (havingSnackNum < 1 || havingSnackNum > childrenNum)-->Line_12 $$ return[ CD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ CD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ CD ]
Line_11 $$ int havingSnackNum = stdIn.nextInt()-->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ FD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ CD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ CD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ FD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_14 $$ int temphavingChild = stdIn.nextInt()[ CD ]
Line_14 $$ int temphavingChild = stdIn.nextInt()-->Line_14 $$ int temphavingChild = stdIn.nextInt()[ CD ]
Line_3 $$ Scanner stdIn = new Scanner(System.in)-->Line_14 $$ int temphavingChild = stdIn.nextInt()[ FD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_15 $$ childrenSnack[temphavingChild][0] = childrenSnack[temphavingChild][0] + 1[ CD ]
Line_5 $$ int childrenNum = stdIn.nextInt()-->Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) [ FD ]
Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) -->Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) [ CD ]
Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) -->Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) [ CD ]
Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) -->Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) [ FD ]
Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) -->Line_20 $$ if (childrenSnack[searchCnt][0] == 0)[ CD ]
Line_20 $$ if (childrenSnack[searchCnt][0] == 0)-->Line_20 $$ notHavingNum++[ CD ]
Line_18 $$ int notHavingNum = 0-->Line_20 $$ notHavingNum++[ FD ]
Line_18 $$ int notHavingNum = 0-->Line_22 $$ System.out.println(notHavingNum)[ FD ]
Line_3 $$ Scanner stdIn = new Scanner(System.in)-->Line_26 $$ stdIn.close()[ FD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ FD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ FD ]
Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) -->Line_10 $$ for (int snackCnt = 0; snackCnt < snackNum; snackCnt++) [ FD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ FD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ FD ]
Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) -->Line_13 $$ for (int cnt = 0; cnt < havingSnackNum; cnt++) [ FD ]
Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) -->Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) [ FD ]
Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) -->Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) [ FD ]
Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) -->Line_19 $$ for (int searchCnt = 1; searchCnt <= childrenNum; searchCnt++) [ FD ]
