Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(final String[] args) [ CD ]
Line_2 $$ public static void main(final String[] args) -->Line_3 $$ final Scanner s = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(final String[] args) -->Line_4 $$ final int N = Integer.parseInt(s.next())[ CD ]
Line_4 $$ final int N = Integer.parseInt(s.next())-->Line_4 $$ final int N = Integer.parseInt(s.next())[ CD ]
Line_3 $$ final Scanner s = new Scanner(System.in)-->Line_4 $$ final int N = Integer.parseInt(s.next())[ FD ]
Line_2 $$ public static void main(final String[] args) -->Line_5 $$ final int K = Integer.parseInt(s.next())[ CD ]
Line_5 $$ final int K = Integer.parseInt(s.next())-->Line_5 $$ final int K = Integer.parseInt(s.next())[ CD ]
Line_3 $$ final Scanner s = new Scanner(System.in)-->Line_5 $$ final int K = Integer.parseInt(s.next())[ FD ]
Line_2 $$ public static void main(final String[] args) -->Line_6 $$ HashSet<String> hashSet = new HashSet<String>()[ CD ]
Line_2 $$ public static void main(final String[] args) -->Line_7 $$ for (int i = 0; i < K; i++) [ CD ]
Line_2 $$ public static void main(final String[] args) -->Line_2 $$ public static void main(final String[] args) [ CD ]
Line_5 $$ final int K = Integer.parseInt(s.next())-->Line_7 $$ for (int i = 0; i < K; i++) [ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_7 $$ for (int i = 0; i < K; i++) [ CD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_7 $$ for (int i = 0; i < K; i++) [ CD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_7 $$ for (int i = 0; i < K; i++) [ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_8 $$ int di = Integer.parseInt(s.next())[ CD ]
Line_8 $$ int di = Integer.parseInt(s.next())-->Line_8 $$ int di = Integer.parseInt(s.next())[ CD ]
Line_3 $$ final Scanner s = new Scanner(System.in)-->Line_8 $$ int di = Integer.parseInt(s.next())[ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_9 $$ String blank = s.nextLine()[ CD ]
Line_9 $$ String blank = s.nextLine()-->Line_9 $$ String blank = s.nextLine()[ CD ]
Line_3 $$ final Scanner s = new Scanner(System.in)-->Line_9 $$ String blank = s.nextLine()[ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_10 $$ String huge = s.nextLine()[ CD ]
Line_10 $$ String huge = s.nextLine()-->Line_10 $$ String huge = s.nextLine()[ CD ]
Line_3 $$ final Scanner s = new Scanner(System.in)-->Line_10 $$ String huge = s.nextLine()[ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_11 $$ String[] hage = huge.split(" ", 0)[ CD ]
Line_11 $$ String[] hage = huge.split(" ", 0)-->Line_11 $$ String[] hage = huge.split(" ", 0)[ CD ]
Line_10 $$ String huge = s.nextLine()-->Line_11 $$ String[] hage = huge.split(" ", 0)[ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_12 $$ int hageN = hage.length[ CD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_13 $$ for (int num = 0; num < hageN; num++) [ CD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_7 $$ for (int i = 0; i < K; i++) [ CD ]
Line_12 $$ int hageN = hage.length-->Line_13 $$ for (int num = 0; num < hageN; num++) [ FD ]
Line_13 $$ for (int num = 0; num < hageN; num++) -->Line_13 $$ for (int num = 0; num < hageN; num++) [ CD ]
Line_13 $$ for (int num = 0; num < hageN; num++) -->Line_13 $$ for (int num = 0; num < hageN; num++) [ CD ]
Line_13 $$ for (int num = 0; num < hageN; num++) -->Line_13 $$ for (int num = 0; num < hageN; num++) [ FD ]
Line_13 $$ for (int num = 0; num < hageN; num++) -->Line_14 $$ if (!hashSet.contains(hage[num])) [ CD ]
Line_14 $$ if (!hashSet.contains(hage[num])) -->Line_14 $$ if (!hashSet.contains(hage[num])) [ CD ]
Line_14 $$ if (!hashSet.contains(hage[num])) -->Line_14 $$ if (!hashSet.contains(hage[num])) [ CD ]
Line_6 $$ HashSet<String> hashSet = new HashSet<String>()-->Line_14 $$ if (!hashSet.contains(hage[num])) [ FD ]
Line_14 $$ if (!hashSet.contains(hage[num])) -->Line_15 $$ hashSet.add(hage[num])[ CD ]
Line_6 $$ HashSet<String> hashSet = new HashSet<String>()-->Line_15 $$ hashSet.add(hage[num])[ FD ]
Line_2 $$ public static void main(final String[] args) -->Line_19 $$ s.close()[ CD ]
Line_3 $$ final Scanner s = new Scanner(System.in)-->Line_19 $$ s.close()[ FD ]
Line_2 $$ public static void main(final String[] args) -->Line_20 $$ System.out.println(N - hashSet.size())[ CD ]
Line_6 $$ HashSet<String> hashSet = new HashSet<String>()-->Line_20 $$ System.out.println(N - hashSet.size())[ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_7 $$ for (int i = 0; i < K; i++) [ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_7 $$ for (int i = 0; i < K; i++) [ FD ]
Line_7 $$ for (int i = 0; i < K; i++) -->Line_7 $$ for (int i = 0; i < K; i++) [ FD ]
Line_10 $$ String huge = s.nextLine()-->Line_11 $$ String[] hage = huge.split(" ", 0)[ FD ]
Line_13 $$ for (int num = 0; num < hageN; num++) -->Line_13 $$ for (int num = 0; num < hageN; num++) [ FD ]
Line_13 $$ for (int num = 0; num < hageN; num++) -->Line_13 $$ for (int num = 0; num < hageN; num++) [ FD ]
Line_13 $$ for (int num = 0; num < hageN; num++) -->Line_13 $$ for (int num = 0; num < hageN; num++) [ FD ]
