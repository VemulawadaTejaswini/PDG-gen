Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws java.lang.Exception [ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_4 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_5 $$ String[] nANDmStr = input.readLine().split(" ")[ CD ]
Line_5 $$ String[] nANDmStr = input.readLine().split(" ")-->Line_5 $$ String[] nANDmStr = input.readLine().split(" ")[ CD ]
Line_4 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_5 $$ String[] nANDmStr = input.readLine().split(" ")[ FD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_6 $$ int[] nANDm = new int[nANDmStr.length][ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) [ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_2 $$ public static void main(String[] args) throws java.lang.Exception [ CD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) [ CD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) [ CD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) [ FD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_9 $$ nANDm[insert] = Integer.parseInt(nANDmStr[insert])[ CD ]
Line_9 $$ nANDm[insert] = Integer.parseInt(nANDmStr[insert])-->Line_9 $$ nANDm[insert] = Integer.parseInt(nANDmStr[insert])[ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_11 $$ int[][] matrix = new int[nANDm[0]][nANDm[1]][ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_2 $$ public static void main(String[] args) throws java.lang.Exception [ CD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ CD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ CD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ FD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_14 $$ String[] matrixStr = input.readLine().split(" ")[ CD ]
Line_14 $$ String[] matrixStr = input.readLine().split(" ")-->Line_14 $$ String[] matrixStr = input.readLine().split(" ")[ CD ]
Line_4 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_14 $$ String[] matrixStr = input.readLine().split(" ")[ FD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_15 $$ for (int column = 0; column < matrixStr.length; column++) [ CD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ CD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_15 $$ for (int column = 0; column < matrixStr.length; column++) [ CD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_15 $$ for (int column = 0; column < matrixStr.length; column++) [ CD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_15 $$ for (int column = 0; column < matrixStr.length; column++) [ FD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_17 $$ matrix[row][column] = Integer.parseInt(matrixStr[column])[ CD ]
Line_17 $$ matrix[row][column] = Integer.parseInt(matrixStr[column])-->Line_17 $$ matrix[row][column] = Integer.parseInt(matrixStr[column])[ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_20 $$ String[] vectorStr = new String[nANDm[1]][ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_21 $$ int[] vector = new int[vectorStr.length][ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_2 $$ public static void main(String[] args) throws java.lang.Exception [ CD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ FD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ CD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ CD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ FD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ FD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_24 $$ vectorStr[insert] = input.readLine()[ CD ]
Line_24 $$ vectorStr[insert] = input.readLine()-->Line_24 $$ vectorStr[insert] = input.readLine()[ CD ]
Line_4 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_24 $$ vectorStr[insert] = input.readLine()[ FD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_25 $$ vector[insert] = Integer.parseInt(vectorStr[insert])[ CD ]
Line_25 $$ vector[insert] = Integer.parseInt(vectorStr[insert])-->Line_25 $$ vector[insert] = Integer.parseInt(vectorStr[insert])[ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ CD ]
Line_2 $$ public static void main(String[] args) throws java.lang.Exception -->Line_2 $$ public static void main(String[] args) throws java.lang.Exception [ CD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ FD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ CD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ CD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ FD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ FD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_29 $$ int solution = 0[ CD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ CD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ CD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ FD ]
Line_30 $$ for (int column = 0; column < nANDm[1]; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ CD ]
Line_30 $$ for (int column = 0; column < nANDm[1]; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ CD ]
Line_30 $$ for (int column = 0; column < nANDm[1]; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ FD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ FD ]
Line_30 $$ for (int column = 0; column < nANDm[1]; column++) -->Line_32 $$ solution = matrix[row][column] * vector[column] + solution[ CD ]
Line_32 $$ solution = matrix[row][column] * vector[column] + solution-->Line_32 $$ solution = matrix[row][column] * vector[column] + solution[ FD ]
Line_29 $$ int solution = 0-->Line_32 $$ solution = matrix[row][column] * vector[column] + solution[ FD ]
Line_32 $$ solution = matrix[row][column] * vector[column] + solution-->Line_32 $$ solution = matrix[row][column] * vector[column] + solution[ FD ]
Line_29 $$ int solution = 0-->Line_32 $$ solution = matrix[row][column] * vector[column] + solution[ FD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_34 $$ System.out.println(solution)[ CD ]
Line_32 $$ solution = matrix[row][column] * vector[column] + solution-->Line_34 $$ System.out.println(solution)[ FD ]
Line_29 $$ int solution = 0-->Line_34 $$ System.out.println(solution)[ FD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) [ FD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) [ FD ]
Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) -->Line_7 $$ for (int insert = 0; insert < nANDmStr.length; insert++) [ FD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ FD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ FD ]
Line_12 $$ for (int row = 0; row < matrix.length; row++) -->Line_12 $$ for (int row = 0; row < matrix.length; row++) [ FD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_15 $$ for (int column = 0; column < matrixStr.length; column++) [ FD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_15 $$ for (int column = 0; column < matrixStr.length; column++) [ FD ]
Line_15 $$ for (int column = 0; column < matrixStr.length; column++) -->Line_15 $$ for (int column = 0; column < matrixStr.length; column++) [ FD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ FD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ FD ]
Line_22 $$ for (int insert = 0; insert < vector.length; insert++) -->Line_22 $$ for (int insert = 0; insert < vector.length; insert++) [ FD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ FD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ FD ]
Line_27 $$ for (int row = 0; row < nANDm[0]; row++) -->Line_27 $$ for (int row = 0; row < nANDm[0]; row++) [ FD ]
Line_29 $$ int solution = 0-->Line_34 $$ System.out.println(solution)[ FD ]
Line_30 $$ for (int column = 0; column < nANDm[1]; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ FD ]
Line_30 $$ for (int column = 0; column < nANDm[1]; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ FD ]
Line_30 $$ for (int column = 0; column < nANDm[1]; column++) -->Line_30 $$ for (int column = 0; column < nANDm[1]; column++) [ FD ]
Line_32 $$ solution = matrix[row][column] * vector[column] + solution-->Line_32 $$ solution = matrix[row][column] * vector[column] + solution[ FD ]
