Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_6 $$ while ((line = stdReader.readLine()) != null) [ FD ]
Line_5 $$ String line-->Line_6 $$ while ((line = stdReader.readLine()) != null) [ FD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_6 $$ while ((line = stdReader.readLine()) != null) [ CD ]
Line_4 $$ BufferedReader stdReader = new BufferedReader(new InputStreamReader(System.in))-->Line_6 $$ while ((line = stdReader.readLine()) != null) [ FD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_7 $$ String[] input = line.split(" ", 0)[ CD ]
Line_7 $$ String[] input = line.split(" ", 0)-->Line_7 $$ String[] input = line.split(" ", 0)[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_7 $$ String[] input = line.split(" ", 0)[ FD ]
Line_5 $$ String line-->Line_7 $$ String[] input = line.split(" ", 0)[ FD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_8 $$ int midtermExam = Integer.parseInt(input[0])[ CD ]
Line_8 $$ int midtermExam = Integer.parseInt(input[0])-->Line_8 $$ int midtermExam = Integer.parseInt(input[0])[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_9 $$ int finalExam = Integer.parseInt(input[1])[ CD ]
Line_9 $$ int finalExam = Integer.parseInt(input[1])-->Line_9 $$ int finalExam = Integer.parseInt(input[1])[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_10 $$ int additional = Integer.parseInt(input[2])[ CD ]
Line_10 $$ int additional = Integer.parseInt(input[2])-->Line_10 $$ int additional = Integer.parseInt(input[2])[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_11 $$ if (midtermExam == -1 && finalExam == -1 && additional == -1) [ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_14 $$ if (midtermExam == -1 || finalExam == -1) [ CD ]
Line_14 $$ if (midtermExam == -1 || finalExam == -1) -->Line_15 $$ System.out.println("F")[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_18 $$ int addScore = midtermExam + finalExam[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_19 $$ if (addScore < 30) [ CD ]
Line_18 $$ int addScore = midtermExam + finalExam-->Line_19 $$ if (addScore < 30) [ FD ]
Line_19 $$ if (addScore < 30) -->Line_20 $$ System.out.println("F")[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_23 $$ if (addScore >= 30 && addScore < 50) [ CD ]
Line_23 $$ if (addScore >= 30 && addScore < 50) -->Line_24 $$ if (additional >= 50) [ CD ]
Line_10 $$ int additional = Integer.parseInt(input[2])-->Line_24 $$ if (additional >= 50) [ FD ]
Line_24 $$ if (additional >= 50) -->Line_25 $$ System.out.println("C")[ CD ]
Line_24 $$ if (additional >= 50) -->Line_27 $$ System.out.println("D")[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_31 $$ if (addScore >= 50 && addScore < 65) [ CD ]
Line_31 $$ if (addScore >= 50 && addScore < 65) -->Line_32 $$ System.out.println("C")[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_35 $$ if (addScore >= 65 && addScore < 80) [ CD ]
Line_35 $$ if (addScore >= 65 && addScore < 80) -->Line_36 $$ System.out.println("B")[ CD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_39 $$ if (addScore >= 80) [ CD ]
Line_18 $$ int addScore = midtermExam + finalExam-->Line_39 $$ if (addScore >= 80) [ FD ]
Line_39 $$ if (addScore >= 80) -->Line_40 $$ System.out.println("A")[ CD ]
Line_4 $$ BufferedReader stdReader = new BufferedReader(new InputStreamReader(System.in))-->Line_44 $$ stdReader.close()[ FD ]
Line_6 $$ while ((line = stdReader.readLine()) != null) -->Line_7 $$ String[] input = line.split(" ", 0)[ FD ]
Line_18 $$ int addScore = midtermExam + finalExam-->Line_19 $$ if (addScore < 30) [ FD ]
Line_10 $$ int additional = Integer.parseInt(input[2])-->Line_24 $$ if (additional >= 50) [ FD ]
Line_18 $$ int addScore = midtermExam + finalExam-->Line_39 $$ if (addScore >= 80) [ FD ]
