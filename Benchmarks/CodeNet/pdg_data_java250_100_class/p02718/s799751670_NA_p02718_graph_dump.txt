Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_3 $$ public static void main(String[] Arguments) throws IOException [ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())[ CD ]
Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))-->Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N][ CD ]
Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N]-->Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N][ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N][ FD ]
Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N]-->Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N][ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N][ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_7 $$ double Result = 0.00, Barrier = (double) 1 / (double) 100001[ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_8 $$ ST = new StringTokenizer(BR.readLine())[ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_8 $$ ST = new StringTokenizer(BR.readLine())[ FD ]
Line_8 $$ ST = new StringTokenizer(BR.readLine())-->Line_8 $$ ST = new StringTokenizer(BR.readLine())[ FD ]
Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))-->Line_8 $$ ST = new StringTokenizer(BR.readLine())[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_9 $$ for (int i = 0; i < N; i++) [ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_3 $$ public static void main(String[] Arguments) throws IOException [ CD ]
Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N]-->Line_9 $$ for (int i = 0; i < N; i++) [ FD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_9 $$ for (int i = 0; i < N; i++) [ CD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_9 $$ for (int i = 0; i < N; i++) [ CD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_9 $$ for (int i = 0; i < N; i++) [ FD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_11 $$ itemVotes[i] = Integer.parseInt(ST.nextToken())[ CD ]
Line_11 $$ itemVotes[i] = Integer.parseInt(ST.nextToken())-->Line_11 $$ itemVotes[i] = Integer.parseInt(ST.nextToken())[ CD ]
Line_5 $$ StringTokenizer ST = new StringTokenizer(BR.readLine())-->Line_11 $$ itemVotes[i] = Integer.parseInt(ST.nextToken())[ FD ]
Line_8 $$ ST = new StringTokenizer(BR.readLine())-->Line_11 $$ itemVotes[i] = Integer.parseInt(ST.nextToken())[ FD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_12 $$ cSum += itemVotes[i][ CD ]
Line_12 $$ cSum += itemVotes[i]-->Line_12 $$ cSum += itemVotes[i][ FD ]
Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N]-->Line_12 $$ cSum += itemVotes[i][ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_14 $$ Result = (double) 1 / (double) (4 * M)[ CD ]
Line_7 $$ double Result = 0.00, Barrier = (double) 1 / (double) 100001-->Line_14 $$ Result = (double) 1 / (double) (4 * M)[ FD ]
Line_14 $$ Result = (double) 1 / (double) (4 * M)-->Line_14 $$ Result = (double) 1 / (double) (4 * M)[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_15 $$ Result *= (double) cSum[ CD ]
Line_7 $$ double Result = 0.00, Barrier = (double) 1 / (double) 100001-->Line_15 $$ Result *= (double) cSum[ FD ]
Line_14 $$ Result = (double) 1 / (double) (4 * M)-->Line_15 $$ Result *= (double) cSum[ FD ]
Line_15 $$ Result *= (double) cSum-->Line_15 $$ Result *= (double) cSum[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_16 $$ for (int i = 0; i < N; i++) [ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_3 $$ public static void main(String[] Arguments) throws IOException [ CD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N]-->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ CD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ CD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_18 $$ if (itemVotes[i] - Result >= (double) 0.000000) [ CD ]
Line_18 $$ if (itemVotes[i] - Result >= (double) 0.000000) -->Line_20 $$ Count++[ CD ]
Line_6 $$ int cSum = 0, N = Integer.parseInt(ST.nextToken()), M = Integer.parseInt(ST.nextToken()), Count = 0, itemVotes[] = new int[N]-->Line_20 $$ Count++[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_23 $$ System.out.println((Count >= M) ? "Yes" : "No")[ CD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_9 $$ for (int i = 0; i < N; i++) [ FD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_9 $$ for (int i = 0; i < N; i++) [ FD ]
Line_9 $$ for (int i = 0; i < N; i++) -->Line_9 $$ for (int i = 0; i < N; i++) [ FD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
