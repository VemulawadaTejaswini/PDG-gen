Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ Scanner in = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ int n = in.nextInt()[ CD ]
Line_4 $$ int n = in.nextInt()-->Line_4 $$ int n = in.nextInt()[ CD ]
Line_3 $$ Scanner in = new Scanner(System.in)-->Line_4 $$ int n = in.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int m = in.nextInt()[ CD ]
Line_5 $$ int m = in.nextInt()-->Line_5 $$ int m = in.nextInt()[ CD ]
Line_3 $$ Scanner in = new Scanner(System.in)-->Line_5 $$ int m = in.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int[] arr = new int[n][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ int sum = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_4 $$ int n = in.nextInt()-->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_9 $$ arr[i] = in.nextInt()[ CD ]
Line_9 $$ arr[i] = in.nextInt()-->Line_9 $$ arr[i] = in.nextInt()[ CD ]
Line_3 $$ Scanner in = new Scanner(System.in)-->Line_9 $$ arr[i] = in.nextInt()[ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_10 $$ sum += arr[i][ CD ]
Line_10 $$ sum += arr[i]-->Line_10 $$ sum += arr[i][ FD ]
Line_7 $$ int sum = 0-->Line_10 $$ sum += arr[i][ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_12 $$ Arrays.sort(arr)[ CD ]
Line_6 $$ int[] arr = new int[n]-->Line_12 $$ Arrays.sort(arr)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_13 $$ boolean works = true[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ FD ]
Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ CD ]
Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ CD ]
Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ FD ]
Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) -->Line_15 $$ if (arr[i] < 1.0 * sum / 4 / m) [ CD ]
Line_15 $$ if (arr[i] < 1.0 * sum / 4 / m) -->Line_16 $$ works = false[ CD ]
Line_16 $$ works = false-->Line_16 $$ works = false[ FD ]
Line_13 $$ boolean works = true-->Line_16 $$ works = false[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_19 $$ System.out.println(works ? "Yes" : "No")[ CD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_8 $$ for (int i = 0; i < n; i++) -->Line_8 $$ for (int i = 0; i < n; i++) [ FD ]
Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ FD ]
Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ FD ]
Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) -->Line_14 $$ for (int i = n - 1; i > (n - 1) - m; i--) [ FD ]
