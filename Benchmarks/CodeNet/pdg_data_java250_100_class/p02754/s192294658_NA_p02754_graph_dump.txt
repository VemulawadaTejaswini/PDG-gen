Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ BigInteger N = BigInteger.valueOf(Long.parseLong(sc.next()))[ CD ]
Line_4 $$ BigInteger N = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_4 $$ BigInteger N = BigInteger.valueOf(Long.parseLong(sc.next()))[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ BigInteger N = BigInteger.valueOf(Long.parseLong(sc.next()))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))[ CD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ BigInteger B = BigInteger.valueOf(Long.parseLong(sc.next()))[ CD ]
Line_6 $$ BigInteger B = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_6 $$ BigInteger B = BigInteger.valueOf(Long.parseLong(sc.next()))[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_6 $$ BigInteger B = BigInteger.valueOf(Long.parseLong(sc.next()))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ BigInteger num = N.divide(A.add(B))[ CD ]
Line_7 $$ BigInteger num = N.divide(A.add(B))-->Line_7 $$ BigInteger num = N.divide(A.add(B))[ CD ]
Line_4 $$ BigInteger N = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_7 $$ BigInteger num = N.divide(A.add(B))[ FD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_7 $$ BigInteger num = N.divide(A.add(B))[ FD ]
Line_6 $$ BigInteger B = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_7 $$ BigInteger num = N.divide(A.add(B))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ BigInteger rem = N.mod(A.add(B))[ CD ]
Line_8 $$ BigInteger rem = N.mod(A.add(B))-->Line_8 $$ BigInteger rem = N.mod(A.add(B))[ CD ]
Line_4 $$ BigInteger N = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_8 $$ BigInteger rem = N.mod(A.add(B))[ FD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_8 $$ BigInteger rem = N.mod(A.add(B))[ FD ]
Line_6 $$ BigInteger B = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_8 $$ BigInteger rem = N.mod(A.add(B))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ if (A.compareTo(rem) == -1) [ CD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_9 $$ if (A.compareTo(rem) == -1) [ FD ]
Line_8 $$ BigInteger rem = N.mod(A.add(B))-->Line_9 $$ if (A.compareTo(rem) == -1) [ FD ]
Line_9 $$ if (A.compareTo(rem) == -1) -->Line_10 $$ System.out.println(num.multiply(A).add(A))[ CD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_10 $$ System.out.println(num.multiply(A).add(A))[ FD ]
Line_7 $$ BigInteger num = N.divide(A.add(B))-->Line_10 $$ System.out.println(num.multiply(A).add(A))[ FD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_10 $$ System.out.println(num.multiply(A).add(A))[ FD ]
Line_9 $$ if (A.compareTo(rem) == -1) -->Line_12 $$ System.out.println(num.multiply(A).add(rem))[ CD ]
Line_8 $$ BigInteger rem = N.mod(A.add(B))-->Line_12 $$ System.out.println(num.multiply(A).add(rem))[ FD ]
Line_7 $$ BigInteger num = N.divide(A.add(B))-->Line_12 $$ System.out.println(num.multiply(A).add(rem))[ FD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(Long.parseLong(sc.next()))-->Line_12 $$ System.out.println(num.multiply(A).add(rem))[ FD ]
