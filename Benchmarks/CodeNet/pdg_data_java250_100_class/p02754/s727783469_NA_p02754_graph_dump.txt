Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ BigInteger N = BigInteger.valueOf(sc.nextLong())[ CD ]
Line_4 $$ BigInteger N = BigInteger.valueOf(sc.nextLong())-->Line_4 $$ BigInteger N = BigInteger.valueOf(sc.nextLong())[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ BigInteger N = BigInteger.valueOf(sc.nextLong())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())[ CD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())-->Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ BigInteger B = BigInteger.valueOf(sc.nextLong())[ CD ]
Line_6 $$ BigInteger B = BigInteger.valueOf(sc.nextLong())-->Line_6 $$ BigInteger B = BigInteger.valueOf(sc.nextLong())[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_6 $$ BigInteger B = BigInteger.valueOf(sc.nextLong())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ BigInteger APlusB = A.add(B)[ CD ]
Line_7 $$ BigInteger APlusB = A.add(B)-->Line_7 $$ BigInteger APlusB = A.add(B)[ CD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())-->Line_7 $$ BigInteger APlusB = A.add(B)[ FD ]
Line_6 $$ BigInteger B = BigInteger.valueOf(sc.nextLong())-->Line_7 $$ BigInteger APlusB = A.add(B)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ BigInteger dev = N.divide(APlusB)[ CD ]
Line_8 $$ BigInteger dev = N.divide(APlusB)-->Line_8 $$ BigInteger dev = N.divide(APlusB)[ CD ]
Line_4 $$ BigInteger N = BigInteger.valueOf(sc.nextLong())-->Line_8 $$ BigInteger dev = N.divide(APlusB)[ FD ]
Line_7 $$ BigInteger APlusB = A.add(B)-->Line_8 $$ BigInteger dev = N.divide(APlusB)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ BigInteger mul = dev.multiply(A)[ CD ]
Line_9 $$ BigInteger mul = dev.multiply(A)-->Line_9 $$ BigInteger mul = dev.multiply(A)[ CD ]
Line_8 $$ BigInteger dev = N.divide(APlusB)-->Line_9 $$ BigInteger mul = dev.multiply(A)[ FD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())-->Line_9 $$ BigInteger mul = dev.multiply(A)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ BigInteger rem = N.remainder(APlusB)[ CD ]
Line_10 $$ BigInteger rem = N.remainder(APlusB)-->Line_10 $$ BigInteger rem = N.remainder(APlusB)[ CD ]
Line_4 $$ BigInteger N = BigInteger.valueOf(sc.nextLong())-->Line_10 $$ BigInteger rem = N.remainder(APlusB)[ FD ]
Line_7 $$ BigInteger APlusB = A.add(B)-->Line_10 $$ BigInteger rem = N.remainder(APlusB)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ BigInteger total = BigInteger.valueOf(0)[ CD ]
Line_11 $$ BigInteger total = BigInteger.valueOf(0)-->Line_11 $$ BigInteger total = BigInteger.valueOf(0)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ if (rem.equals(0)) [ CD ]
Line_10 $$ BigInteger rem = N.remainder(APlusB)-->Line_12 $$ if (rem.equals(0)) [ FD ]
Line_12 $$ if (rem.equals(0)) -->Line_12 $$ if (rem.equals(0)) [ CD ]
Line_10 $$ BigInteger rem = N.remainder(APlusB)-->Line_12 $$ if (rem.equals(0)) [ FD ]
Line_12 $$ if (rem.equals(0)) -->Line_13 $$ total = mul[ CD ]
Line_11 $$ BigInteger total = BigInteger.valueOf(0)-->Line_13 $$ total = mul[ FD ]
Line_13 $$ total = mul-->Line_13 $$ total = mul[ FD ]
Line_9 $$ BigInteger mul = dev.multiply(A)-->Line_13 $$ total = mul[ FD ]
Line_12 $$ if (rem.equals(0)) -->Line_14 $$ if (rem.compareTo(A) >= 1) [ CD ]
Line_10 $$ BigInteger rem = N.remainder(APlusB)-->Line_14 $$ if (rem.compareTo(A) >= 1) [ FD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())-->Line_14 $$ if (rem.compareTo(A) >= 1) [ FD ]
Line_14 $$ if (rem.compareTo(A) >= 1) -->Line_15 $$ total = mul.add(A)[ CD ]
Line_11 $$ BigInteger total = BigInteger.valueOf(0)-->Line_15 $$ total = mul.add(A)[ FD ]
Line_13 $$ total = mul-->Line_15 $$ total = mul.add(A)[ FD ]
Line_15 $$ total = mul.add(A)-->Line_15 $$ total = mul.add(A)[ FD ]
Line_15 $$ total = mul.add(A)-->Line_15 $$ total = mul.add(A)[ CD ]
Line_9 $$ BigInteger mul = dev.multiply(A)-->Line_15 $$ total = mul.add(A)[ FD ]
Line_5 $$ BigInteger A = BigInteger.valueOf(sc.nextLong())-->Line_15 $$ total = mul.add(A)[ FD ]
Line_14 $$ if (rem.compareTo(A) >= 1) -->Line_17 $$ total = mul.add(rem)[ CD ]
Line_11 $$ BigInteger total = BigInteger.valueOf(0)-->Line_17 $$ total = mul.add(rem)[ FD ]
Line_13 $$ total = mul-->Line_17 $$ total = mul.add(rem)[ FD ]
Line_15 $$ total = mul.add(A)-->Line_17 $$ total = mul.add(rem)[ FD ]
Line_17 $$ total = mul.add(rem)-->Line_17 $$ total = mul.add(rem)[ FD ]
Line_17 $$ total = mul.add(rem)-->Line_17 $$ total = mul.add(rem)[ CD ]
Line_9 $$ BigInteger mul = dev.multiply(A)-->Line_17 $$ total = mul.add(rem)[ FD ]
Line_10 $$ BigInteger rem = N.remainder(APlusB)-->Line_17 $$ total = mul.add(rem)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_19 $$ System.out.println(total)[ CD ]
Line_11 $$ BigInteger total = BigInteger.valueOf(0)-->Line_19 $$ System.out.println(total)[ FD ]
Line_13 $$ total = mul-->Line_19 $$ System.out.println(total)[ FD ]
Line_15 $$ total = mul.add(A)-->Line_19 $$ System.out.println(total)[ FD ]
Line_17 $$ total = mul.add(rem)-->Line_19 $$ System.out.println(total)[ FD ]
