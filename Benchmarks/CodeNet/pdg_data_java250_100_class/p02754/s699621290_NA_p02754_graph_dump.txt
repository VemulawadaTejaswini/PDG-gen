Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner scanner = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ String[] S = scanner.nextLine().split(" ")[ CD ]
Line_4 $$ String[] S = scanner.nextLine().split(" ")-->Line_4 $$ String[] S = scanner.nextLine().split(" ")[ CD ]
Line_3 $$ Scanner scanner = new Scanner(System.in)-->Line_4 $$ String[] S = scanner.nextLine().split(" ")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ scanner.close()[ CD ]
Line_3 $$ Scanner scanner = new Scanner(System.in)-->Line_5 $$ scanner.close()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ BigInteger N = new BigInteger(S[0])[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ BigInteger A = new BigInteger(S[1])[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ BigInteger B = new BigInteger(S[2])[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ BigInteger step = A.add(B)[ CD ]
Line_9 $$ BigInteger step = A.add(B)-->Line_9 $$ BigInteger step = A.add(B)[ CD ]
Line_7 $$ BigInteger A = new BigInteger(S[1])-->Line_9 $$ BigInteger step = A.add(B)[ FD ]
Line_8 $$ BigInteger B = new BigInteger(S[2])-->Line_9 $$ BigInteger step = A.add(B)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ BigInteger[] dr = N.divideAndRemainder(step)[ CD ]
Line_10 $$ BigInteger[] dr = N.divideAndRemainder(step)-->Line_10 $$ BigInteger[] dr = N.divideAndRemainder(step)[ CD ]
Line_6 $$ BigInteger N = new BigInteger(S[0])-->Line_10 $$ BigInteger[] dr = N.divideAndRemainder(step)[ FD ]
Line_9 $$ BigInteger step = A.add(B)-->Line_10 $$ BigInteger[] dr = N.divideAndRemainder(step)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ BigInteger remainder = dr[1].compareTo(A) >= 0 ? A : dr[1][ CD ]
Line_7 $$ BigInteger A = new BigInteger(S[1])-->Line_11 $$ BigInteger remainder = dr[1].compareTo(A) >= 0 ? A : dr[1][ FD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ BigInteger blueCount = A.multiply(dr[0]).add(remainder)[ CD ]
Line_12 $$ BigInteger blueCount = A.multiply(dr[0]).add(remainder)-->Line_12 $$ BigInteger blueCount = A.multiply(dr[0]).add(remainder)[ CD ]
Line_11 $$ BigInteger remainder = dr[1].compareTo(A) >= 0 ? A : dr[1]-->Line_12 $$ BigInteger blueCount = A.multiply(dr[0]).add(remainder)[ FD ]
Line_7 $$ BigInteger A = new BigInteger(S[1])-->Line_12 $$ BigInteger blueCount = A.multiply(dr[0]).add(remainder)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ System.out.println(blueCount.toString())[ CD ]
Line_12 $$ BigInteger blueCount = A.multiply(dr[0]).add(remainder)-->Line_13 $$ System.out.println(blueCount.toString())[ FD ]
