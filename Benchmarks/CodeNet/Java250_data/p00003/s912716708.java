import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Main {

	/** YES:??´?§?????§???¢??§?????? */
	private static final String RIGHT_TRIANGLE = "YES";

	/** NO:??´?§?????§???¢??§????????? */
	private static final String NOT_RIGHT_TRIANGLE = "NO";

	/**
	 * AOJ Is it a Right Triangle?
	 *
	 * @param args
	 * @throws IOException
	 *             ??\?????¨??????
	 */
	public static void main(String[] args) throws IOException {
		BufferedReader bufferedReader = new BufferedReader(
				new InputStreamReader(System.in));

		int numsOfDataSets = Integer.parseInt(bufferedReader.readLine());

		for (int i = 0; i < numsOfDataSets; i++) {
			String[] triangle = bufferedReader.readLine().split("\\s");

			int[] sides = getIntArray(triangle);
			if (isRightTriangle(sides)) {
				System.out.println(RIGHT_TRIANGLE);
			} else {
				System.out.println(NOT_RIGHT_TRIANGLE);
			}
		}

		bufferedReader.close();
	}

	/**
	 * 3???????????????????????´?§?????§???¢????????????????????????
	 *
	 * @param triangle
	 * @return
	 */
	private static boolean isRightTriangle(int[] sides) {

		Arrays.sort(sides);
		if (calcSumPower(sides[0], sides[1]) == calcPower(sides[2])) {
			return true;
		}
		return false;
	}

	/**
	 * String????????????int?????????????????????????????´??????
	 *
	 * @param strArray
	 *            String?????????
	 * @return int?????????
	 */
	private static int[] getIntArray(String[] strArray) {
		int[] intArray = new int[3];
		for (int i = 0; i < 3; i++) {
			intArray[i] = Integer.parseInt(strArray[i]);
		}
		return intArray;
	}

	/**
	 * ?????°???????????????????????´??????
	 *
	 * @param n
	 *            ???????????????
	 * @return ?????°??????????????????
	 */
	private static int calcPower(int n) {
		return n * n;
	}

	/**
	 * ????????°??????????????????????????´??????
	 *
	 * @param n
	 *            ??´??°1
	 * @param m
	 *            ??´??°2
	 * @return ????????°??????????????????
	 */
	private static int calcSumPower(int n, int m) {
		return calcPower(n) + calcPower(m);
	}

}