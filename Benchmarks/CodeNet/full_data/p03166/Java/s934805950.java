import java.io.*;
import java.util.*;

class Main {

    // Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
    static long rst = 0;
    public static void main(String[] args) throws Exception {
        final Scanner sc = new Scanner(System.in);
        long N;
        N = sc.nextLong();
        long M;
        M = sc.nextLong();
        long[] x = new long[(int)(M)];
        long[] y = new long[(int)(M)];
        for(int i = 0 ; i < M ; i++){
                x[i] = sc.nextLong();
                y[i] = sc.nextLong();
        }
        solve(N, M, x, y);
    }

    static void solve(long N, long M, long[] x, long[] y){
        boolean[][] G = new boolean[(int)(N+1)][(int)(N+1)];
        // System.out.print(G[0].length);
        for (int i = 0; i < M; i++){
            G[(int)x[i]][(int)y[i]] = true;
        }
        boolean[] visited = new boolean[(int)(N+1)];
        long[] dp = new long[(int)(N+1)];
        for (int i = 1; i <= (int)N; i++){
            dfs(G, i, visited, dp);
        }

        for (int i = 1; i <= (int)N; i++){
            rst = Math.max(rst, dp[i]);
        }

        
        System.out.print(rst);
    }

    static void dfs(boolean[][] G, int x, boolean[] visited, long[] dp){
        if (visited[x]){
            return;
        }
        visited[x] = true;
        for (int i = 1; i < G.length; i++){
            if (G[x][i]){
                if (!visited[i]){
                    dfs(G, i, visited, dp);
                }
                dp[x] = Math.max(dp[x], dp[i] + 1);
            }
        }
        visited[x] = false;
    }
}
