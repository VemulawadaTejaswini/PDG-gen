/*
......................................................................................................................................
.....................................  ________ ____ __________________________________________ .....................................
..................................... /  _____/|    |   \      \__    ___/\_   _____/\______   \.....................................
...................................../   \  ___|    |   /   |   \|    |    |    __)_  |       _/.....................................
.....................................\    \_\  \    |  /    |    \    |    |        \ |    |   \.....................................
..................................... \______  /______/\____|__  /____|   /_______  / |____|_  /.....................................
.....................................        \/                \/                 \/         \/ .....................................
......................................................................................................................................
.............................................................,;'';:...................................................................
........................................................+@@@@@@@@@@@@@@'..............................................................
.....................................................#@@@##############@@@:...........................................................
...................................................@@@####################@@,.........................................................
.................................................@@#########################@@........................................................
...............................................:@############################@@.......................................................
..............................................@@######@@@#';;'#@@@############@@:.....................................................
.............................................@#####@@,````````````,@@###########@:....................................................
............................................@####@;``````````````````+@##########@....................................................
...........................................@###@:``````````````````````#@########@@...................................................
..........................................@####``````````````````````````@########@@..................................................
.........................................###@.````````````````````````````@########@+.................................................
.........................................@#@```````````````````````````````#########@.................................................
........................................@#@`````````````````````````````````########@@................................................
.......................................,@@```````````````````````````````````@#######@:...............................................
.......................................@@`````````````````````````````````````@#######@...............................................
.......................................@:````````````````````#@@'``````````````@######@+..............................................
......................................#@```````````````````@@@@@@@#````````````########@..............................................
......................................@```````````````````@@@@@@@@@@````````````@######@+.............................................
......................................@``````````````````@@@@@@@+   +```````````+#######@.............................................
.....................................;:``````````````````@@@@@@@    @````````````@######@'............................................
.....................................@``````````````````:@@@@@@@    @````````````@#######@............................................
.....................................@```,@@@#``````````;@@@@@@@    @````````````:#######@:...........................................
.....................................@``@@@@@@@@````````.@@@@@@@#  ,#`````````````@#######@...........................................
.....................................@`@@@@@@@+'@````````@@@@@@@@@@@``````````````@#######@...........................................
.....................................@,@@@@@@   ,```:+:``:@@@@@@@@@.``````````````@########@..........................................
.....................................#@@@@@@@  ;@@#;,,,@``:@@@@@@@````````````````#########@..........................................
.....................................+@@@@@@@@',,,,,,,,;,```.'+;``````````````````'########@;.........................................
.....................................'@@@@',,,,,,,,,,,,,@`````````````````````````:#########@.........................................
....................................:@#,,,,,:;;;;;:,,,,,@`````````````````````````.#########@.........................................
.................................:@#@@@@#++';;;;;;;;;;;;@``````````````````````````##########+........................................
...............................#@#+;;;;;;;;;;;;;;;;;;;;':``````````````````````````##########@........................................
....................................,@#@@@@@#+'';;;;;+@#```````````````````````````##########@........................................
.....................................@``````````.,,,.``````````````````````````````############.......................................
.....................................@`````````````````````````````````````````````#######+'+#@.......................................
.....................................@`````````````````````````````````````````````##########'@.......................................
.....................................#`````````````````````````````````````````````############@#.....................................
.....................................:.````````````````````````````````````````````##############@,...................................
......................................+```````````````````````````````````````````.###############@#..................................
......................................@```````````````````````````````````````````.################@@.................................
......................................@```````````````````````````````````````````.###+##############@................................
......................................@```````````````````````````````````````````.###+###############@...............................
......................................',``````````````````````````````````````````.####'##############@@..............................
.......................................@```````````````````````````````````````````#####+##############@:.............................
.......................................@```````````````````````````````````````````#####'###############@.............................
.......................................@```````````````````````````````````````````######'################............................
.......................................#,``````````````````````````````````````````#######'##############@............................
........................................@``````````````````````````````````````````@######++##############+...........................
........................................@``````````````````````````````````````````@#######'##############@...........................
........................................@``````````````````````````````````````````@########'#############@...........................
.......................................@#'`````````````````````````````````````````@#########'##############..........................
.......................................@#@`````````````````````````````````````````+#########+'############@..........................
......................................@##@`````````````````````````````````````````.##########+'###########@..........................
......................................@##@:`````````````````````````````````````````###########+'###########..........................
.....................................:@###@`````````````````````````````````````````@###########+'+#########,.........................
.....................................@####@`````````````````````````````````````````@#############''########..........................
.....................................@####@.````````````````````````````````````````;##############+'######@..........................
.....................................@#####@`````````````````````````````````````````################@@@###+..........................
.....................................@#####@`````````````````````````````````````````@###############@..;;............................
....................................,@#####@.````````````````````````````````````````+################'...............................
....................................:#######@`````````````````````````````````````````################@...............................
....................................:#######@`````````````````````````````````````````@###############@...............................
....................................,@#######,````````````````````````````````````````:###############@...............................
.....................................@######@@`````````````````````````````````````````@##############@...............................
.....................................@######@@`````````````````````````````````````````+##############@...............................
.....................................@#####@,;;`````````````````````````````````````````@#############@...............................
.....................................@####@@..@`````````````````````````````````````````+#############@...............................
.....................................,####@...@``````````````````````````````````````````@############+...............................
......................................@##@.....@`````````````````````````````````````````:###########@,...............................
.......................................@+......@``````````````````````````````````````````@##########@................................
...............................................:#``````````````````````````````````````````##########@................................
................................................@``````````````````````````````````````````+########@,................................
................................................'+``````````````````````````````````````````@#######@.................................
.................................................@```````````````````````````````````````````@#####@:.................................
.................................................'#``````````````````````````````````````````.#####@..................................
..................................................@```````````````````````````````````````````;###@...................................
...................................................@```````````````````````````````````````````+#@'...................................
...................................................'#```````````````````````````````````````````@#....................................
....................................................##`````````````````````````````````````````@#.....................................
.....................................................#@```````````````````````````````````````@+......................................
......................................................:@;```````````````````````````````````;@,.......................................
.......................................................;@@'```````````````````````````````:@@+;.......................................
.......................................................@,,'@@'``````````````````````````@@@,,,@.......................................
......................................................@,,,,,,'@@@@;````````````````.+@@@;,,,,,@.......................................
......................................................#@+@,,,,,,,,+@@@@@@@@@@@@@@@@@;,,,,,'@@@........................................
.........................................................+,,,#',,@@..............@,,,,,,,,@...........................................
..........................................................@@@,#@@,...............:+,,,'@,,@...........................................
..................................................................................@,,,@.##............................................
...................................................................................@;@................................................
....................................................................................:.................................................
......................................................................................................................................
......................................................................................................................................
 */

import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static java.lang.Math.*;
import static java.lang.String.format;


public class Main {
    final static int INF = Integer.MAX_VALUE >> 1;
    final static int MOD = 1_000_000_007;
    final static int[] dx4 = {0, 1, 0, -1};
    final static int[] dy4 = {1, 0, -1, 0};
    final static int[] dx8 = {0, 1, 1, 1, 0, -1, -1, -1};
    final static int[] dy8 = {1, 1, 0, -1, -1, -1, 0, 1};

    public static void main(String[] args) {
        Scanner sc = new Scanner();
        int n = sc.nextInt();
        int[] a = new int[n + 1];
        for (int i = n; i >= 0; i--) {
            a[i] = sc.nextInt();
        }

        Set<Integer> set = new HashSet<>();
        set.addAll(PrimeFactor.primeFactor(abs(a[n])));
        set.addAll(Primes.primes(10000));

        TreeSet<Integer> ans = new TreeSet<>();
        main:
        for (int p : set) {
            if(p<2)throw new IllegalArgumentException();
            if(a[0]%p!=0)continue ;
            for (int i = 1; i < p; i++) {
                long sum = 0;
                for (int j = i; j <= n; j += p - 1) {
                    sum += a[j];
                    sum %= p;
                }
                if (sum % p != 0) continue main;
            }
            ans.add(p);
        }

        while (ans.size() > 0) {
            put(ans.pollFirst());
        }


    }

    final static private class ModPow {
        //(x^y)%MOD
        public static long modPow(long x, long y, long mod) {
            if (y == 0) return 1;
            if (y % 2 == 0) {
                long halfY = y / 2;
                long halfModPow = modPow(x, halfY, mod) % mod;
                return halfModPow * halfModPow % mod;
            } else {
                return x * modPow(x, y - 1, mod) % mod;
            }
        }

    }
    final private static class Eratosthenes{
        public static boolean[] eratosthenes(int x) {
            if(x<2) throw new IllegalArgumentException();
            boolean[] era = new boolean[x + 1];
            Arrays.fill(era, true);
            era[0]=false;
            era[1]=false;
            for (int i = 2; i < era.length; i++) {
                for (int j = i * 2; j < era.length; j+=i) {
                    era[j]=false;
                }
            }
            return era;

        }
    }
    final private static class Primes{
        public static List<Integer> primes(int x) {
            boolean[] era = Eratosthenes.eratosthenes(x);
            List<Integer> primes = new ArrayList<>();
            for (int i = 2; i < era.length; i++) {
                if(era[i])primes.add(i);
            }
            return primes;
        }
    }



    final static private class Divisor{
        private static void dfs(List<Integer> list, int[] xx, int index, int current) {
            if(index>=xx.length){
                if(current>1) {
                    list.add(current);
                }
            }else{
                for (int i = 0; i <= xx[index]; i++) {
                    dfs(list,xx,index+1,current*(int)Math.pow(index,i));
                }
            }
        }
        public static List<Integer> divisor(int x){
            int[] xx=new int[(int)Math.sqrt(x)+1];
            for (int i = 2; i < xx.length; i++) {
                while(x%i==0) {
                    xx[i]++;
                    x /= i;
                }
            }
            List<Integer> list=new ArrayList<>();
            dfs(list,xx,2,1);
            if(x>1){
                int size=list.size();
                list.add(x);
                for (int i = 0; i < size; i++) {
                    list.add(list.get(i)*x);
                }
            }
            Collections.sort(list);
            return list;
        }
    }
    final static private class PrimeFactor{
        public static List<Integer> primeFactor(int x){
            int[] xx=new int[(int)Math.sqrt(x)+1];
            for (int i = 2; i < xx.length; i++) {
                if(x%i!=0)continue;
                while(x%i==0) {
                    x /= i;
                }
                xx[i]++;
            }
            List<Integer> list=new ArrayList<>();
            for (int i = 0; i < xx.length; i++) {
                if(xx[i]>0)list.add(i);
            }
            if(x>1){
                list.add(x);
            }
            return list;
        }
    }
    public static void print(Object object) {
        System.out.print(object);
    }

    public static void put(Object object) {
        System.out.println(object);
    }

    public static void put() {
        System.out.println();
    }

    public static void printE(Object object) {
        System.err.print("DEBUG:" + object);
    }

    public static void putE(Object object) {
        System.err.println("DEBUG:" + object);
    }

    public static void putE() {
        System.err.println("DEBUG:");
    }

    public static void print(String format, Object... args) {
        System.out.print(String.format(format, args));
    }

    public static void put(String format, Object... args) {
        System.out.println(String.format(format, args));
    }

    public static void printE(String format, Object... args) {
        System.err.print("DEBUG:" + String.format(format, args));
    }

    public static void putE(String format, Object... args) {
        System.err.println("DEBUG:" + String.format(format, args));
    }

    final static private class Scanner {
        private final InputStream in = System.in;
        private final byte[] buffer = new byte[1024];
        private int ptr = 0;
        private int buflen = 0;

        private boolean hasNextByte() {
            if (ptr < buflen) {
                return true;
            } else {
                ptr = 0;
                try {
                    buflen = in.read(buffer);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (buflen <= 0) {
                    return false;
                }
            }
            return true;
        }

        private int readByte() {
            if (hasNextByte())
                return buffer[ptr++];
            else
                return -1;
        }

        private boolean isPrintableChar(int c) {
            return 33 <= c && c <= 126;
        }

        public boolean hasNext() {
            while (hasNextByte() && !isPrintableChar(buffer[ptr]))
                ptr++;
            return hasNextByte();
        }

        public String next() {
            if (!hasNext())
                throw new NoSuchElementException();
            StringBuilder sb = new StringBuilder();
            int b = readByte();
            while (isPrintableChar(b)) {
                sb.appendCodePoint(b);
                b = readByte();
            }
            return sb.toString();
        }

        public long nextLong() {
            if (!hasNext())
                throw new NoSuchElementException();
            long n = 0;
            boolean minus = false;
            int b = readByte();
            if (b == '-') {
                minus = true;
                b = readByte();
            }
            if (b < '0' || '9' < b) {
                throw new NumberFormatException();
            }
            while (true) {
                if ('0' <= b && b <= '9') {
                    n *= 10;
                    n += b - '0';
                } else if (b == -1 || !isPrintableChar(b)) {
                    return minus ? -n : n;
                } else {
                    throw new NumberFormatException();
                }
                b = readByte();
            }
        }

        public int nextInt() {
            long nl = nextLong();
            if (nl < Integer.MIN_VALUE || nl > Integer.MAX_VALUE)
                throw new NumberFormatException();
            return (int) nl;
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    final static private class FixedIntPair {
        final public int x, y;
        final static public FixedIntPair ZEROS = new FixedIntPair(0, 0);

        FixedIntPair(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public static double distance(FixedIntPair fip1, FixedIntPair fip2) {
            double x = (double) fip1.x - fip2.x;
            double y = (double) fip1.y - fip2.y;
            return Math.sqrt(x * x + y * y);
        }

        @Override
        public int hashCode() {
            return x + y;
        }

        @Override
        public boolean equals(Object obj) {
            boolean result = super.equals(obj);
            if (obj.getClass() != this.getClass()) {
                return false;
            }
            FixedIntPair pair = (FixedIntPair) obj;
            if (this.x == pair.x && this.y == pair.y) return true;
            return false;
        }

        @Override
        public String toString() {
            return String.format(FixedIntPair.class.getSimpleName() + ":(%d,%d)", x, y);
        }
    }

    final static private class FixedLongPair {
        final public long x, y;
        final static public FixedLongPair ZEROS = new FixedLongPair(0, 0);

        FixedLongPair(long x, long y) {
            this.x = x;
            this.y = y;
        }

        public static double distance(FixedLongPair flp1, FixedLongPair flp2) {
            double x = (double) flp1.x - flp2.x;
            double y = (double) flp1.y - flp2.y;
            return Math.sqrt(x * x + y * y);
        }

        @Override
        public int hashCode() {
            return (int) x + (int) y;
        }

        @Override
        public boolean equals(Object obj) {
            boolean result = super.equals(obj);
            if (obj.getClass() != this.getClass()) {
                return false;
            }
            FixedLongPair pair = (FixedLongPair) obj;
            if (this.x == pair.x && this.y == pair.y) return true;
            return false;
        }

        @Override
        public String toString() {
            return String.format(FixedLongPair.class.getSimpleName() + ":(%d,%d)", x, y);
        }
    }

    final static private class Binary {
        public static String toZeroPadding(int i) {
            return String.format("%" + Integer.toBinaryString(-1).length() + "s", Integer.toBinaryString(i)).replace(' ', '0');
        }

        public static String toZeroPadding(long i) {
            return String.format("%" + Long.toBinaryString(-1).length() + "s", Long.toBinaryString(i)).replace(' ', '0');
        }
    }

    final static private class Util {
        static long gcd(long a, long b) {
            if (a % b == 0) return b;
            return gcd(b, a % b);
        }

        static long lcm(long a, long b) {
            long gcd = gcd(a, b);
            long result = b / gcd;
            return a * result;
        }

        static <T extends Comparable<T>> Map<T, Integer> count(List<T> list) {
            Collections.sort(list);
            Map<T, Integer> result = new HashMap<>();
            int l = 0, r = 0;
            while (l < list.size()) {
                while (r < list.size() - 1 && list.get(r).equals(r + 1)) {
                    r++;
                }
                result.put(list.get(r), r - l + 1);
                r++;
                l = r;
            }
            return result;

        }

        static Map<Integer, Integer> count(int[] array) {
            Arrays.sort(array);
            Map<Integer, Integer> result = new HashMap<>();
            int l = 0, r = 0;
            while (l < array.length) {
                while (r < array.length - 1 && array[r] == array[r + 1]) {
                    r++;
                }
                result.put(array[l], r - l + 1);
                r++;
                l = r;
            }
            return result;
        }

        static <T> String toStringBWS(Iterable<T> iterable) {
            Iterator<T> ite = iterable.iterator();
            return toStringBWS(ite);
        }

        static <T> String toStringBWS(Iterator<T> ite) {
            StringBuilder sb = new StringBuilder();
            sb.append(ite.next());
            while (ite.hasNext()) {
                sb.append(" ");
                sb.append(ite.next());
            }
            return sb.toString();
        }

        static long factoringInPrimeNumbers(long n, int[] a) {
            for (int i = 2; n > 1 && i < a.length; i++) {
                while (n % i == 0) {
                    a[i]++;
                    n /= i;
                }
            }
            return n;

        }

        static boolean isValidCell(int i, int j, int h, int w) {
            return i >= 0 && i < h && j >= 0 && j < w;
        }
    }
}
