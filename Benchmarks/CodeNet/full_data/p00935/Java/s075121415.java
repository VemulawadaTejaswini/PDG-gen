import java.io.PrintWriter;
import java.math.BigDecimal;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;

public class ProblemA {

	private static Scanner scanner;
	private static PrintWriter writer;

	private static int nod;
	// private static int[] numbers;
	private static String numbers = new String();
	private static Set<BigDecimal> allNumbers = new TreeSet<>();

	public static void main(String[] args) {
		scanner = new Scanner(System.in);
		writer = new PrintWriter(System.out, true);
		writer.flush();

		// ????????°???????????????
		nod = scanner.nextInt();

		// ??°??????????????????
		for (int i = 0; i < nod; i++) {
			int number = scanner.nextInt();
			numbers += Integer.toString(number);
		}

		// ??°???????????¢?????§??????????????????????????????????????????????????????
		for (int start = 0; start <= nod - 1; start++) {
			for (int end = start + 1; end <= nod; end++) {
				// System.out.println(numbers.substring(start, end));
				allNumbers.add(new BigDecimal(numbers.substring(start, end)));
			}
		}

		// ??°???????°????????????????????????????
		// TreeSet??§?????????????????????

		// [????°????+1]=????°????+1?????????????????§??????
		// YES????????????????????¨?????????????????????????????°break??????return ????°????+1
		// Iterator<Integer> iterator = allNumbers.iterator();
		Object[] array = allNumbers.toArray();
		BigDecimal result = null;
		for (int i = 0; i < allNumbers.size(); i++) {
			if (!allNumbers.contains(BigDecimal.ZERO)) {
				result = BigDecimal.ZERO;
				break;
			}
			if (i == allNumbers.size()) {
				result = new BigDecimal(String.valueOf(array[i])).add(BigDecimal.ONE);
				break;
			}
			BigDecimal value = new BigDecimal(String.valueOf(array[i]));
			BigDecimal nextValue = new BigDecimal(String.valueOf(array[i + 1]));
			if (!value.add(BigDecimal.ONE).equals(nextValue)) {
				result = value.add(BigDecimal.ONE);
				break;
			}
		}
		writer.println(result);

		scanner.close();
		writer.close();
	}

}