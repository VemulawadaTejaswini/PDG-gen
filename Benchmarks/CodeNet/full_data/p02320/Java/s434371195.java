

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DPL_1_G

?????°??¶????????????????????¶????????????
????????? vi ????????? wi ??§??????????????? N ?¨???????????????¨???????????? W ??????????????¶????????????????????????

?¬?????????¶?????????????????????????????????????????§???????????¶???????????\????????????

???????????????????????????????¨??????§???????????????????????????
???????????????????????????????????? W ????¶?????????????
i ?????????????????? mi ????????§?????¶?????¨?????§?????????
?????????????¨?????????§???????±??????????????????????

??\???
N W
v1 w1 m1
v2 w2 m2
:
vN wN mN
???????????????????????´??°???N???W???????????????????????§???????????????????????????

?¶???? N ?????§ i ?????????????????????????????????????????°?????¶???????????????????????§??????????????????

??????
?????????????¨?????????§??????????????????????????????

??¶?´?
1 ??? N ??? 100
1 ??? vi ??? 1,000
1 ??? wi ??? 1,000
1 ??? mi ??? 10,000
1 ??? W ??? 10,000
??\?????? 1
4 8
4 3 2
2 1 1
1 2 4
3 2 2
????????? 1
12
??\?????? 2
2 100
1 1 100
2 1 50
????????? 2
150
*/

/**
 * Time: O(N * W * sum(nums[i]))
 * Space : O(W)
 */
public class Main {
    public long solve(int W, List<Integer> values, List<Integer> weights, List<Integer> nums)  {
        int N = values.size();
        long[] dp = new long[W + 1];
        for (int i = 1; i <= N; ++i) {
            for (int j = W; j >= 0; --j) {
                int v = values.get(i - 1);
                int w = weights.get(i - 1);
                int n = nums.get(i - 1);
                for (int k = 1; k <= n; ++k) {
                    if (j - k * w > 0) {
                        dp[j] = Math.max(dp[j], dp[j - w] + k * v);
                    }
                }
            }
        }
        return dp[W];
    }

    private static final Pattern SPLIT = Pattern.compile("\\s");
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Integer> weights = new ArrayList<>();
        List<Integer> values = new ArrayList<>();
        List<Integer> nums = new ArrayList<>();
        List<Integer> NW = Stream.of(SPLIT.split(scanner.nextLine())).map(Integer::valueOf)
                                 .collect(Collectors.toList());
        final int N = NW.get(0);
        final int W = NW.get(1);
        for (int i = 0; i < N; ++i) {
            List<Integer> collect = Stream.of(SPLIT.split(scanner.nextLine())).map(Integer::valueOf)
                                          .collect(Collectors.toList());
            values.add(collect.get(0));
            weights.add(collect.get(1));
            nums.add(collect.get(2));
        }
        System.out.println(new Main().solve(W, values, weights, nums));
    }
}