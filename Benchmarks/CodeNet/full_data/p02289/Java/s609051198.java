import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;

public class Main {

	public static void main(String[] args) throws Exception {
		// TODO ?????????????????????????????????????????????
		BufferedReader br =
				new BufferedReader(new InputStreamReader(System.in));

		MaxHeap pq = new MaxHeap();

		String command;
		int k;
		while(  ! ( command = br.readLine() ).equals("end")  ) {
			switch (command) {
			case "extract":
				System.out.println(pq.extract());
				break;
			default :
				k = Integer.parseInt(command.split(" ")[1]);
				pq.insert(k);
				break;
			}
		}
	}

	public static class MaxHeap {
		private ArrayList<Integer> array;

		public MaxHeap() {
			array = new ArrayList<Integer>();
		}

		private int left(int i) { // index of left chiid
			return 2*i + 1;
		}

		private int right(int i) { // index of right child
			return 2*i + 2;
		}

		private int parent(int i) { // index of parent
			return (i-1) / 2;
		}

		public void insert(int k) {
			array.add(k);
			int index = array.size() - 1; // index of k

			while (index != 0) {
				int parent = parent(index); // index of parent of k
				if ( array.get(parent) < k ) { // key of parent < key of child
					int temp = array.get(parent);
					array.set(parent, k);
					array.set(index, temp);
					index = parent;
				} else {
					break;
				}
			}
		}

		public int extract() {
			int lastkey = array.remove( array.size() - 1 ); // ?????????Node???key
			if (array.size() == 0) {
				return lastkey;
			}
			int MaxKey = array.set(0, lastkey); // ???????????????????????§??????key??????????????????lastkey?????£???????????\??????

			maxHeapify(array, 0);

			return MaxKey;
		}

		// index??????????????????Node??????????????´???????§?????????????
		private void maxHeapify(ArrayList<Integer> array, int index) {
			int l = left(index);
			int r = right(index);
			int largest = index; // ?????¨????????????????????§???key????????§?????????index

			if (l < array.size()) {
				if ( array.get(index) < array.get(l) ) {
					largest = l;
				}
			}
			if (r < array.size()) {
				if ( array.get(largest) < array.get(r) ) {
					largest = r;
				}
			}

			//??????key???????????????key????????§????????£?????´???
			if (largest != index) {
				int temp = array.get(index);
				array.set(index, array.get(largest));
				array.set(largest, temp);
				maxHeapify(array, largest);
			}
		}

	}
}