import java.io.*;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Mighty Man (http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=0303)
 * 
 * @author ikaruga
 */
class Main {
	
	static Comparator<MightyMan> compareMaxLiftWeight = Comparator.comparing(MightyMan::getMaxLiftWeight);
	static Comparator<MightyMan> compareBodyWeight = Comparator.comparing(MightyMan::getBodyWeight);
	
	public static void main(String[] args) {
		// long systemTime = System.currentTimeMillis();
		// System.out.println("- start -");

		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(
					System.in));
			List<MightyMan> manList = br.lines().skip(1)
					.map(l -> new MightyMan(l.split("\\s")))
					.collect(Collectors.toList());

			// ????°????????????°?????????
			int resultCnt = getMinimumNumberOfMan(manList);

			// ????????????
			System.out.println(resultCnt);

		} catch (Exception e) {
			e.printStackTrace();
		}
		// System.out.println("- end - "
		// + String.valueOf(System.currentTimeMillis() - systemTime)
		// + "ms");
	}

	/**
	 * ????????????????°????????????°????±???????
	 * 
	 * @param manList
	 * @return
	 */
	private static int getMinimumNumberOfMan(List<MightyMan> manList) {
		boolean canLift = false;
		do {
			// debug
//			System.out.println("### start output ###");
//			manList.stream().forEach(System.out::println);

			int size = manList.size();
			// 1???????????£????????????
			if (size == 1)
				break;

			// ??°??????????????????????????????????????????
			MightyMan minWeightMan = manList.stream()
					.filter(man -> man.isLift() && !man.isFixed)
					.findFirst().orElse(null);
			canLift = liftMan(manList, minWeightMan);
			if (canLift)
				continue;

			// ??°??????????????????????????????????????????
			minWeightMan = manList
					.stream()
					.filter(man -> !man.isLift())
					.sorted(compareMaxLiftWeight)
					.min(compareBodyWeight)
					.orElse(null);
			canLift = liftMan(manList, minWeightMan);

		} while (canLift);

		return manList.size();
	}

	/**
	 * ?????????????°????????????£??????????????????????????????????????????????????????????????????????????????</br> ??????????????????????????????????????´???????????????????????????
	 * 
	 * @param manList
	 * @param minWeightMan
	 * @return true : ???????????????????????´???</br> false : ??????????????????????????£?????´???
	 */
	public static boolean liftMan(List<MightyMan> manList,
			MightyMan minWeightMan) {

		if (minWeightMan != null) {
			int minWeightManIdx = manList.indexOf(minWeightMan);
			MightyMan targetMan;
			if (minWeightManIdx == 0) {
				targetMan = manList.get(minWeightManIdx + 1);
			} else if (minWeightManIdx == manList.size() - 1) {
				targetMan = manList.get(minWeightManIdx - 1);
			} else {
				targetMan = Stream
						.of(manList.get(minWeightManIdx - 1),
								manList.get(minWeightManIdx + 1))
						.filter(man -> !man.isLift() && man.canLift(minWeightMan))
						.sorted(compareBodyWeight)
						.min(compareMaxLiftWeight).orElse(null);
			}

			// ??????????????????fix??????
			minWeightMan.setFixed();
			if (targetMan == null)
				return false;
			if (targetMan.tryLift(minWeightMan)) {
				manList.remove(minWeightMan);
				return true;
			}
		}
		return false;
	}

	/**
	 * ?????????
	 * 
	 * @author ikaruga
	 *
	 */
	static class MightyMan {
		private int bodyWeight = 0;
		private int maxLiftWeight = 0;

		// ????????????????????????
		private MightyMan aboveMan = null;

		// ?¢??????¶???(??????????????????????????????????????£??????????????¶??? or ?????????????????????????????¶???)
		private boolean isFixed = false;

		public MightyMan(String[] manSpec) {
			this.maxLiftWeight = Integer.parseInt(manSpec[0]);
			this.bodyWeight = Integer.parseInt(manSpec[1]);
		}

		public boolean tryLift(MightyMan man) {
			if (!isLift() && canLift(man)) {
				this.aboveMan = man;
				return true;
			}
			return false;
		}

		public boolean isLift() {
			return aboveMan != null;
		}

		public boolean canLift(MightyMan man) {
			return maxLiftWeight >= man.getBodyWeight();
		}

		public int getBodyWeight() {
			return aboveMan == null ? bodyWeight : bodyWeight
					+ aboveMan.getBodyWeight();
		}

		public int getMaxLiftWeight() {
			return aboveMan == null ? maxLiftWeight : maxLiftWeight
					- aboveMan.getBodyWeight();
		}

		public boolean isFixed() {
			return isFixed;
		}

		public void setFixed() {
			this.isFixed = true;
		}

		@Override
		public String toString() {
			return "MightyMan [bodyWeight=" + bodyWeight + ", maxLiftWeight="
					+ maxLiftWeight + ", isFixed=" + isFixed
					+ ", getBodyWeight()=" + getBodyWeight()
					+ ", getMaxLiftWeight()=" + getMaxLiftWeight()
					+ ", aboveMan=" + aboveMan + "]";
		}

	}
}