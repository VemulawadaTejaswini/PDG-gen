package aoj.lesson.rummy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

/**
 * @author s-nag
 */
public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        List<Hand> list = input(scanner);
        scanner.close();

        for (Hand hand : list) {
            System.out.println(hand.judge());
        }
    }

    public static class Hand {
        public static final int hand_size = 9;
        public static final int number_size = 9;
        public static final String[] all_suits = { "R", "G", "B" };
        public List<Integer> numbers;
        public List<String> suits;

        /**
         * @param numbers
         * @param suits
         */
        public Hand() {
            super();
            this.numbers = new ArrayList<Integer>();
            for (int i = 0; i < hand_size; i++) {
                numbers.add(0);
            }
            this.suits = new ArrayList<String>();
            for (int i = 0; i < hand_size; i++) {
                suits.add("");
            }
        }

        /**
         * @param numbers
         * @param suits
         */
        public Hand(List<Integer> numbers, List<String> suits) {
            super();
            this.numbers = numbers;
            this.suits = suits;
        }

        /**
         * ??????????????????????????????????????????????????°????????????
         *
         * @return
         */
        public int judge() {
            Map<String, List<Integer>> map = makeTempList(numbers, suits);
            // ?????????????????????
            for (Map.Entry<String, List<Integer>> e : map.entrySet()) {
                if (!judgeSmall(e.getValue())) {
                    return 0;
                }
            }
            return 1;
        }

        /**
         * ????????????????????§????????°????¨????????????????????????????????????£?????????????????????????????????????????? ??¨??¨????????????????¶??????§????????°????????????
         *
         * @param list
         * @return
         */
        public static boolean judgeSmall(List<Integer> list) {
            final int small_size = 3;
            for (int i = 0; i < list.size(); i++) {
                // ????????°????????????????????????
                // ???????????????5?????\??????????????????????????¨??????????????§?????£?????¨?????£???????????°??????????????????2?????\?????°?????????????????????
                if (list.get(i) >= small_size) {
                    list.set(i, list.get(i) - small_size);
                }
                // ??£????????????
                if (i < list.size() - (small_size - 1)) {
                    // ????????£??????2?????\?????°???????????´????????????????????????????????????
                    while (true) {
                        if (list.get(i) > 0 && list.get(i + 1) > 0
                                && list.get(i + 2) > 0) {
                            list.set(i, list.get(i) - 1);
                            list.set(i + 1, list.get(i + 1) - 1);
                            list.set(i + 2, list.get(i + 2) - 1);
                        } else {
                            break;
                        }
                    }
                }
            }
            return isAllZero(list);
        }

        /**
         * ??????????????????????¶??????§????????????????????? ?¶??????§???????????????????????????
         *
         * @param list
         * @return
         */
        public static boolean isAllZero(List<Integer> list) {
            for (Integer integer : list) {
                if (integer != 0) {
                    return false;
                }
            }
            return true;
        }

        /**
         * ??£?????????????¨??????????????????????????????????????????????????????°?¨????????????? R1, R2, R3 -> R{1, 1, 1, 0, 0, 0, 0, 0, 0}
         * ??????????????????
         *
         * @param numbers
         * @param suits
         * @return
         */
        public static Map<String, List<Integer>> makeTempList(
                List<Integer> numbers, List<String> suits) {
            Map<String, List<Integer>> ret = new HashMap<String, List<Integer>>();
            // ???????????°???????????????????????°????????????
            for (String s : suits) {
                List<Integer> buf = new ArrayList<Integer>();
                for (int j = 0; j < number_size; j++) {
                    buf.add(0);
                }
                ret.put(s, buf);
            }
            for (int i = 0; i < hand_size; i++) {
                int number_index = numbers.get(i).intValue() - 1;
                String s = suits.get(i);
                Integer v = ret.get(s).get(number_index);
                ret.get(s).set(number_index, v + 1);
            }
            return ret;
        }

        @Override
        public String toString() {
            return "Hand [numbers=" + numbers + ", suits=" + suits + "]";
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result
                    + ((numbers == null) ? 0 : numbers.hashCode());
            result = prime * result + ((suits == null) ? 0 : suits.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            Hand other = (Hand) obj;
            if (numbers == null) {
                if (other.numbers != null)
                    return false;
            } else if (!numbers.equals(other.numbers))
                return false;
            if (suits == null) {
                if (other.suits != null)
                    return false;
            } else if (!suits.equals(other.suits))
                return false;
            return true;
        }

    }

    /**
     * ??\???????????????????????°????????????
     *
     * @param scanner
     * @return ??\??????????????°???????????????
     */
    public static List<Hand> input(Scanner scanner) {
        int n = scanner.nextInt();
        List<Hand> list = new ArrayList<Hand>();
        for (int i = 0; i < n; i += 1) {
            Hand hand = new Hand();
            for (int j = 0; j < Hand.hand_size; j++) {
                hand.numbers.set(j, scanner.nextInt());
            }
            for (int j = 0; j < Hand.hand_size; j++) {
                hand.suits.set(j, scanner.next());
            }
            list.add(hand);
        }
        return list;
    }
}