import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Comparator;

public class Main {
	public static final int value = 0;
	public static final int weight = 1;
	public static final int pointer = 2;

	public static void main(String[] args) throws NumberFormatException, IOException {
		// TODO ?????????????????????????????????????????????
		BufferedReader br =
				new BufferedReader(new InputStreamReader(System.in));
		for (int c = 1; ; c++) {
			int W = Integer.parseInt(br.readLine());
			if (W == 0) break;

			int N = Integer.parseInt(br.readLine());
			int[][] vw = new int[N][2];
			for (int i=0; i < N; i++) {
				String[] temp = br.readLine().split(",");
				vw[i][value] = Integer.parseInt(temp[0]);
				vw[i][weight] = Integer.parseInt(temp[1]);
			}
			Arrays.sort(vw, new Comparator<int[]>(){
				public int compare(int[] a, int[] b) {
					return a[weight] - b[weight];
				}
			});

			int[] ans = minimax(vw, W, N);
			System.out.println("Case " + c + ":");
			System.out.println(ans[0]);
			System.out.println(ans[1]);
		}
	}

	public static int[] minimax(int[][] vw, int W, int N) {
		ArrayDeque<int[]> queue = new ArrayDeque<>();
		int[] ret = new int[2]; //
		/*
		 * loot[value] : ?¢¨???????????\??????????????????????????????
		 * loot[weight] : ?¢¨???????????\??????????????????????????????
		 * loot[pointer] : ?????????????????????pointer?????????????????§???
		 * ?¢¨???????????\???????????\????????????????¨?????????¨??????????????¨???index
		 */
		int[] loot = new int[] {0, 0, 0}; // value=0, weight=0, pointer=0
		queue.push(loot);
		while ( ! queue.isEmpty() ) {
			loot = queue.poll();
			if (loot[pointer] == N) {
				if (loot[value] > ret[value]) {
					ret[value] = loot[value];
					ret[weight] = loot[weight];
				} else if (loot[value] == ret[value]) {
					ret[weight] = Math.min(ret[weight], loot[weight]);
				}
				continue;
			}

			if (vw[ loot[pointer] ][weight] + loot[weight] > W) {
				loot[pointer] = N;
				queue.push(loot);
				continue;
			}
			/*
			 * lootplus : loot[pointer]???????????????????¢¨???????????\????????´????????¶???
			 */
			int[] lootplus = new int[3];
			lootplus[value] = loot[value] + vw[ loot[pointer] ][value];
			lootplus[weight] = loot[weight] + vw[ loot[pointer] ][weight];
			lootplus[pointer] = loot[pointer] + 1;

			loot[pointer]++;

			queue.push(loot);
			queue.push(lootplus);
		}
		return ret;
	}
}