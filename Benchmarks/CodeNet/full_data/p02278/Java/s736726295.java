import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.stream.Stream;

class Main {

	final static int MAX = 1_000;
	final static int VMAX = 10_000;

	static int n, small;
	static int[] a;
	static int[] b = new int[MAX];
	static int[] truery = new int[VMAX];

	public static void main(String[] args) {

		try(BufferedReader br = new BufferedReader(new InputStreamReader(System.in))) {

			n = Integer.parseInt(br.readLine());
			a = Stream.of(br.readLine().split(" ")).mapToInt(Integer::parseInt).toArray();

		} catch (IOException e) {
			e.printStackTrace();
		}

		small = VMAX;
		for(int w : a) {
			small = Math.min(small, w);
		}

		int ans = solve();
		System.out.println(ans);

	}

	private static int solve() {
		int ans = 0;
		b = Arrays.copyOf(a, n);						// ??£?????????????????????b
		boolean[] valid = new boolean[MAX];			// ??£?????????????????§?????£???????????????????????£???????????????

		Arrays.sort(b);
		for (int i = 0; i < n; i++) truery[b[i]] = i;	// ????????????number?????¬??\?????????????????????????¨????

		for (int i = 0; i < n; i++) {
			if (valid[i]) continue;
			int cur = i;
			int sum = 0;		// ??????????????????????????????
			int min = VMAX;		// ??????????????§????°???????
			int an = 0;			// ?????????????´???°

			while(true) {
				valid[cur] = true;
				an++;
				int val = a[cur];
				min = Math.min(min, val);
				sum += val;
				cur = truery[val];
				if (valid[cur]) break;
			}

			ans += Math.min( sum + (an-2) * min, min + sum + (an+1) * small );

		}
		return ans;
	}
}