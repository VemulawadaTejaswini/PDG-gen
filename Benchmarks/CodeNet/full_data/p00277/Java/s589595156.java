import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    /** ??????????????° */
    public static int TEAM_AMOUNT;
    /** ??¬???????????° */
    public static long RECORD_AMOUNT;
    /** ???????????????????????? */
    public static long CONTEST_TIME;

    public static void main(String[] args) throws IOException {

        // ??\???????????????
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        // ???????????°?????¬???????????°??????????????????????????????????´?
        setPremise(br.readLine().split(" "));

        // ?????????????????????????????¨?????°???????´???????????????????????????????N???
        Team[] teams = new Team[TEAM_AMOUNT];
        fillArrays(teams);
        // ?????¨????????§?????°???????´????????????°
        long maxScore = 0;

        // ?????¨????????????????´????????????°
        long now = 0;

        // ?????¨?????????????????????
        int onAirTeam = 0;

        // ?????°??????????????????????????????
        String strs = null;
        while ((strs = br.readLine()) != null || "".equals(strs)) {
            // ???????????°??¨
            // if ("stop".equals(strs)) {
            // break;
            // }
            long[] record = convertToLongs(strs.split(" "));

            if (now <= record[1]) {
                // ??´??°????????´??? ???????????????????????????????????????????????????
                teams[onAirTeam].addShowTime(record[1] - now);
                // ?????¨???????????????????????°??§????????°???????????´??°??????
                now = record[1];
            }

            // ?????????????????????????????°????????????
            teams[(int) record[0]].addScore(record[2]);
            // ?????§???????????´????????´????????°????????\????????????
            maxScore = getMaxScore(teams);
            // ???????????????????????????????????????
            // ??????????????´?????????????°???????ID?????????????????????
            onAirTeam = getOnAirTeam(teams, maxScore);
        }

        // ?????¨?????????~????????????????????§?????????????????§??????????????????????????????
        teams[onAirTeam].addShowTime(CONTEST_TIME - now);

        // ??????????????????
        long maxShowTime = 0;
        // ????????????????????????-1???
        int winner = -1;

        for (int i = 0; i < teams.length; i++) {
            if (teams[i].getShowTime() > maxShowTime) {
                maxShowTime = teams[i].getShowTime();
                winner = i + 1;
            }
        }

        System.out.println(winner);
    }

    public static void setPremise(String[] strs) {

        TEAM_AMOUNT = Integer.parseInt(strs[0]);
        RECORD_AMOUNT = Long.parseLong(strs[1]);
        CONTEST_TIME = Long.parseLong(strs[2]);
    }

    public static long[] convertToLongs(String[] strs) {
        long[] record = new long[3];
        // ?????????ID
        record[0] = Long.parseLong(strs[0]) - 1;
        // ????????????
        record[1] = Long.parseLong(strs[1]);
        // ???????????°
        record[2] = Long.parseLong(strs[2]);

        return record;
    }

    public static void fillArrays(Team[] teams) {
        for (int i = 0; i < teams.length; i++) {
            teams[i] = new Team();
        }
    }

    private static int getOnAirTeam(Team[] teams, long max) {

        for (int i = 0; i < TEAM_AMOUNT; i++) {
            if (teams[i].getScore() == max) {
                return i;
            }
        }

        return 0;
    }

    private static long getMaxScore(Team[] teams) {
        long maxScore = 0;

        for (Team team : teams) {
            if (maxScore < team.getScore()) {
                maxScore = team.getScore();
            }
        }

        return maxScore;
    }
}

class Team {
    public long getScore() {
        return score;
    }

    public void addScore(long score) {
        this.score += score;
    }

    public long getShowTime() {
        return showTime;
    }

    public void addShowTime(long showTime) {
        this.showTime += showTime;
    }

    private long score = 0;
    private long showTime = 0;

}