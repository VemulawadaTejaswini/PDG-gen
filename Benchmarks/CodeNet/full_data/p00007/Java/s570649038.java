import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
 
/**
 * 0007:Debt Hell????§£???
 * 
 * @author MS14A
 * @version 2015/04/15
 */
public class Main {
 
    /** ??????????????????10?????? */
    private static final BigDecimal INITIAL_DEBT = BigDecimal.valueOf(100000L);
 
    /** ?????????5% */
    private static final BigDecimal INTEREST_RATE = new BigDecimal("0.05");
 
    /** \1000???????????°??????????¨??????¨ */
    private static final BigDecimal DIVISOR_FOR_ROUND_UP = BigDecimal.valueOf(1000L);
 
    /**
     * n ??±??????????????????????????????????????????<br>
     * ???n ??? 100 ??\?????¨?????????
     * 
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        // ?¨??????\???????????????
        int weeks = getWeeks();
 
        // n??±???????????????????¨????????????¨??????
        System.out.println(calcDebt(weeks));
    }
 
    /**
     * ?¨??????\?????????????????????"n"??????????????????
     * 
     * @return n?????\??????
     * @throws IOException
     *             ?¨??????\??????????????±??????
     */
    private static int getWeeks() throws IOException {
 
        InputStreamReader streamReader = new InputStreamReader(System.in);
        BufferedReader bufferedReader = new BufferedReader(streamReader);
 
        int weeks = Integer.parseInt(bufferedReader.readLine());
         
        bufferedReader.close();
        streamReader.close();
         
        return weeks;
    }
 
    /**
     * n??±??????????????????????¨?????????????
     * 
     * @param weeks
     * @return n??±??????????????????
     */
    private static BigDecimal calcDebt(int weeks) {
        BigDecimal finalDebt = INITIAL_DEBT;
 
        for (int i = 0; i < weeks; i++) {
            // ??????????¨???????1000??§?????£????°???°??¨?????°???????????????
            BigDecimal interestAmount = finalDebt.multiply(INTEREST_RATE)
                    .divide(DIVISOR_FOR_ROUND_UP, 0, BigDecimal.ROUND_UP);
 
            // ????????? = ?????±???????????? + ?????????
            finalDebt = finalDebt.add(interestAmount.multiply(DIVISOR_FOR_ROUND_UP));
        }
 
        return finalDebt;
    }
 
}