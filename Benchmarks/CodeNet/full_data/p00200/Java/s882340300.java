import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Scanner;

class Main {
	private static class Station {
		HashMap<Integer, Integer> length = new HashMap<Integer, Integer>();
		HashMap<Integer, Integer> cost = new HashMap<Integer, Integer>();
		int id;
		int minLength = Integer.MAX_VALUE;
		int minCost = Integer.MAX_VALUE;
		boolean isFixed = false;

		public static void setsCostsAndLength(int a, int b, int cost2,
				int length2, Station[] st) {
			st[a].setsCostsAndLength(b, cost2, length2);
			st[b].setsCostsAndLength(a, cost2, length2);
		}

		private void setsCostsAndLength(int destination, int cost2, int length2) {
			length.put(destination, length2);
			cost.put(destination, cost2);
		}

		public void computesMinLength(Station[] st, int goal) {
			for (Integer id : length.keySet()) {
				if (!st[id].isFixed) {
					int tmpMinLength = length.get(id) + minLength; // ???????§??????§??????????????¨??£????§????????§????????????????????¨???????
					if (tmpMinLength < st[id].minLength) { // ???????????????????????¨?¨???????????????????????????????????°????????????????
						st[id].minLength = tmpMinLength; // ??????????????´??°??????
					}
				}
			}
			int fixStationID = computeFixStationIdFromLength(st);
			st[fixStationID].isFixed = true; // ??????????????????????????§????????????????????¨?????£????§?????¢?????????????
			if (fixStationID == goal) {
				System.out.println(st[fixStationID].minLength);
				return;
			} else {
				st[fixStationID].computesMinLength(st, goal);
			}
		}

		private int computeFixStationIdFromLength(Station[] st) {
			int tmpMinLength = Integer.MAX_VALUE;
			int retID = 0;
			for (int id = 1; id < st.length; id++) {
				if (!st[id].isFixed) // ???????¢???????????????????
					if (st[id].minLength < tmpMinLength) {// ???????????????????°????????????????
						tmpMinLength = st[id].minLength;
						retID = id; // ???????§??????????????????????????????????
					}
			}
			return retID;
		}

		public void computesMinCost(Station[] st, int goal) {
			for (Integer id : cost.keySet()) {
				if (!st[id].isFixed) {
					int tmpMinCost = cost.get(id) + minCost; // ???????§??????§??????????????¨??£????§????????§????????????????????¨???????
					if (tmpMinCost < st[id].minCost) { // ???????????????????????¨?¨???????????????????????????????????°????????????????
						st[id].minCost = tmpMinCost; // ??????????????´??°??????
					}
				}
			}
			int fixStationID = computeFixStationIdFromCost(st);
			st[fixStationID].isFixed = true; // ??????????????????????????§????????????????????¨?????£????§?????¢?????????????
			// System.out.println(String.format("%d???????§??????§?????????????????????%d??§??????\n", fixStationID, st[fixStationID].minCost));
			if (fixStationID == goal) {
				System.out.println(st[fixStationID].minCost);
				return;
			} else {
				st[fixStationID].computesMinCost(st, goal);
			}
		}

		private int computeFixStationIdFromCost(Station[] st) {
			int tmpMinCost = Integer.MAX_VALUE;
			int retID = 0;
			for (int id = 1; id < st.length; id++) {
				if (!st[id].isFixed) // ???????¢???????????????????
					if (st[id].minCost < tmpMinCost) {// ???????????????????°????????????????
						tmpMinCost = st[id].minCost;
						retID = id; // ???????§??????????????????????????????????
					}
			}
			return retID;
		}
	}

	public static void main(String[] arg) throws NumberFormatException,
			IOException {
		// File file = new File("src/sample.txt");

		/**
		 * ??????????????????????±???????
		 */
		// BufferedReader br = new BufferedReader(new FileReader(file));
		// BufferedReader br = new BufferedReader(new
		// InputStreamReader(System.in));
		// Scanner sc = new Scanner(file);
		Scanner sc = new Scanner(System.in);

		/**
		 * ????????????????????????
		 */
		final int NORD_QUANTITY = sc.nextInt();
		final int STATION_QUANTITY = sc.nextInt();
		Station[] st = new Station[STATION_QUANTITY + 1];
		for (int i = 1; i < STATION_QUANTITY + 1; i++) {
			st[i] = new Station();
		}
		for (int i = 0; i < NORD_QUANTITY; i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			int cost = sc.nextInt();
			int length = sc.nextInt();
			Station.setsCostsAndLength(a, b, cost, length, st);
		}
		final int QUERY_QUANTITY = sc.nextInt();
		for (int i = 0; i < QUERY_QUANTITY; i++) {
			int start = sc.nextInt();
			int goal = sc.nextInt();
			int command = sc.nextInt();
			if (command == 0) {
				computesMinCost(start, goal, st);
			} else if (command == 1) {
				computesMinLength(1, 5, st);
			}
		}
		sc.close();
	}

	private static void computesMinCost(int start, int goal, Station[] st) {
		st[start].minCost = 0;
		st[start].isFixed = true;
		st[start].computesMinCost(st, goal);
		for (int i = 1; i < st.length; i++) {
			st[i].isFixed = false;
			st[i].minCost = Integer.MAX_VALUE;
		}
	}

	private static void computesMinLength(int start, int goal, Station[] st) {
		st[start].minLength = 0;
		st[start].isFixed = true;
		st[start].computesMinLength(st, goal);
		for (int i = 1; i < st.length; i++) {
			st[i].isFixed = false;
			st[i].minLength = Integer.MAX_VALUE;
		}
	}
}