Line_2 $$ public static void main(String[] args) throws Exception -->Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(input.readLine())[ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_13 $$ if (t1 <= t)[ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_12 $$ t1 = Integer.parseInt(tokenizer.nextToken())[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(input.readLine())-->Line_6 $$ int t = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_8 $$ int c1, t1[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(input.readLine())-->Line_11 $$ c1 = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(input.readLine())-->Line_5 $$ int n = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_13 $$ if (t1 <= t)-->Line_14 $$ minCost = Math.min(minCost, c1)[ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_11 $$ c1 = Integer.parseInt(tokenizer.nextToken())[ CD ]
Line_8 $$ int c1, t1-->Line_12 $$ t1 = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_3 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(input.readLine())[ FD ]
Line_8 $$ int c1, t1-->Line_13 $$ if (t1 <= t)[ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_10 $$ tokenizer = new StringTokenizer(input.readLine())[ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws Exception [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ int t = Integer.parseInt(tokenizer.nextToken())[ CD ]
Line_11 $$ c1 = Integer.parseInt(tokenizer.nextToken())-->Line_14 $$ minCost = Math.min(minCost, c1)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ int minCost = 1000011[ CD ]
Line_8 $$ int c1, t1-->Line_11 $$ c1 = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_7 $$ int minCost = 1000011-->Line_14 $$ minCost = Math.min(minCost, c1)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_5 $$ int n = Integer.parseInt(tokenizer.nextToken())[ CD ]
Line_6 $$ int t = Integer.parseInt(tokenizer.nextToken())-->Line_13 $$ if (t1 <= t)[ FD ]
Line_10 $$ tokenizer = new StringTokenizer(input.readLine())-->Line_11 $$ c1 = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_8 $$ int c1, t1-->Line_14 $$ minCost = Math.min(minCost, c1)[ FD ]
Line_5 $$ int n = Integer.parseInt(tokenizer.nextToken())-->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_3 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))-->Line_10 $$ tokenizer = new StringTokenizer(input.readLine())[ FD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(input.readLine())-->Line_10 $$ tokenizer = new StringTokenizer(input.readLine())[ FD ]
Line_10 $$ tokenizer = new StringTokenizer(input.readLine())-->Line_12 $$ t1 = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ BufferedReader input = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_4 $$ StringTokenizer tokenizer = new StringTokenizer(input.readLine())-->Line_12 $$ t1 = Integer.parseInt(tokenizer.nextToken())[ FD ]
Line_12 $$ t1 = Integer.parseInt(tokenizer.nextToken())-->Line_13 $$ if (t1 <= t)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_16 $$ System.out.println(minCost == 1000011 ? "TLE" : minCost)[ CD ]
