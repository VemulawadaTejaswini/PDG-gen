Line_12 $$ if (i == 0) -->Line_15 $$ String[] splits = lines.get(i).split(" ")[ CD ]
Line_12 $$ if (i == 0) -->Line_17 $$ for (int j = 0; j < splits.length; j++) [ CD ]
Line_11 $$ for (Integer i = 0; i < lines.size(); i++) -->Line_12 $$ if (i == 0) [ CD ]
Line_12 $$ if (i == 0) -->Line_21 $$ Long min = numbers.get(0)[ CD ]
Line_7 $$ for (String line = br.readLine(); line != null; line = br.readLine()) -->Line_8 $$ lines.add(line)[ CD ]
Line_12 $$ if (i == 0) -->Line_28 $$ System.out.println(String.format("%d %d %d", min, max, sum))[ CD ]
Line_5 $$ List<String> lines = new ArrayList<String>()-->Line_11 $$ for (Integer i = 0; i < lines.size(); i++) [ FD ]
Line_5 $$ List<String> lines = new ArrayList<String>()-->Line_15 $$ String[] splits = lines.get(i).split(" ")[ FD ]
Line_17 $$ for (int j = 0; j < splits.length; j++) -->Line_18 $$ numbers.add(j, Long.parseLong(splits[j]))[ FD ]
Line_11 $$ for (Integer i = 0; i < lines.size(); i++) -->Line_12 $$ if (i == 0) [ FD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_16 $$ List<Long> numbers = new ArrayList<Long>()-->Line_18 $$ numbers.add(j, Long.parseLong(splits[j]))[ FD ]
Line_12 $$ if (i == 0) -->Line_13 $$ n = Integer.parseInt(lines.get(i))[ CD ]
Line_16 $$ List<Long> numbers = new ArrayList<Long>()-->Line_20 $$ numbers.sort(Comparator.naturalOrder())[ FD ]
Line_12 $$ if (i == 0) -->Line_23 $$ Long max = numbers.get(0)[ CD ]
Line_12 $$ if (i == 0) -->Line_22 $$ numbers.sort(Comparator.reverseOrder())[ CD ]
Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_7 $$ for (String line = br.readLine(); line != null; line = br.readLine()) [ FD ]
Line_12 $$ if (i == 0) -->Line_16 $$ List<Long> numbers = new ArrayList<Long>()[ CD ]
Line_7 $$ for (String line = br.readLine(); line != null; line = br.readLine()) -->Line_8 $$ lines.add(line)[ FD ]
Line_11 $$ for (Integer i = 0; i < lines.size(); i++) -->Line_13 $$ n = Integer.parseInt(lines.get(i))[ FD ]
Line_5 $$ List<String> lines = new ArrayList<String>()-->Line_8 $$ lines.add(line)[ FD ]
Line_16 $$ List<Long> numbers = new ArrayList<Long>()-->Line_23 $$ Long max = numbers.get(0)[ FD ]
Line_16 $$ List<Long> numbers = new ArrayList<Long>()-->Line_22 $$ numbers.sort(Comparator.reverseOrder())[ FD ]
Line_5 $$ List<String> lines = new ArrayList<String>()-->Line_13 $$ n = Integer.parseInt(lines.get(i))[ FD ]
Line_6 $$ int n = 0-->Line_13 $$ n = Integer.parseInt(lines.get(i))[ FD ]
Line_11 $$ for (Integer i = 0; i < lines.size(); i++) -->Line_15 $$ String[] splits = lines.get(i).split(" ")[ FD ]
Line_12 $$ if (i == 0) -->Line_20 $$ numbers.sort(Comparator.naturalOrder())[ CD ]
Line_16 $$ List<Long> numbers = new ArrayList<Long>()-->Line_21 $$ Long min = numbers.get(0)[ FD ]
Line_4 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_10 $$ br.close()[ FD ]
Line_17 $$ for (int j = 0; j < splits.length; j++) -->Line_18 $$ numbers.add(j, Long.parseLong(splits[j]))[ CD ]
