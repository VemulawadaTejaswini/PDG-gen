Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int N = Integer.parseInt(st.nextToken())[ CD ]
Line_15 $$ int count = 0-->Line_18 $$ count++[ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_4 $$ StringTokenizer st = new StringTokenizer(br.readLine())[ FD ]
Line_16 $$ for (int i = 0; i < N; i++) -->Line_17 $$ if (arr[i] >= val) [ CD ]
Line_10 $$ for (int i = 0; i < N; i++) -->Line_11 $$ arr[i] = Integer.parseInt(st.nextToken())[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ st = new StringTokenizer(br.readLine())[ CD ]
Line_5 $$ int N = Integer.parseInt(st.nextToken())-->Line_10 $$ for (int i = 0; i < N; i++) [ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ StringTokenizer st = new StringTokenizer(br.readLine())[ CD ]
Line_10 $$ for (int i = 0; i < N; i++) -->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_4 $$ StringTokenizer st = new StringTokenizer(br.readLine())-->Line_8 $$ st = new StringTokenizer(br.readLine())[ FD ]
Line_9 $$ int sum = 0-->Line_12 $$ sum += arr[i][ FD ]
Line_17 $$ if (arr[i] >= val) -->Line_18 $$ count++[ CD ]
Line_5 $$ int N = Integer.parseInt(st.nextToken())-->Line_16 $$ for (int i = 0; i < N; i++) [ FD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_16 $$ for (int i = 0; i < N; i++) [ CD ]
Line_10 $$ for (int i = 0; i < N; i++) -->Line_12 $$ sum += arr[i][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_9 $$ int sum = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_21 $$ System.out.println(count < M ? "No" : "Yes")[ CD ]
Line_14 $$ double val = ((double) sum) / (4.0 * (double) M)-->Line_17 $$ if (arr[i] >= val) [ FD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_8 $$ st = new StringTokenizer(br.readLine())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_14 $$ double val = ((double) sum) / (4.0 * (double) M)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ int[] arr = new int[N][ CD ]
Line_4 $$ StringTokenizer st = new StringTokenizer(br.readLine())-->Line_6 $$ int M = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_15 $$ int count = 0[ CD ]
Line_4 $$ StringTokenizer st = new StringTokenizer(br.readLine())-->Line_11 $$ arr[i] = Integer.parseInt(st.nextToken())[ FD ]
Line_8 $$ st = new StringTokenizer(br.readLine())-->Line_11 $$ arr[i] = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_10 $$ for (int i = 0; i < N; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int M = Integer.parseInt(st.nextToken())[ CD ]
Line_4 $$ StringTokenizer st = new StringTokenizer(br.readLine())-->Line_5 $$ int N = Integer.parseInt(st.nextToken())[ FD ]
