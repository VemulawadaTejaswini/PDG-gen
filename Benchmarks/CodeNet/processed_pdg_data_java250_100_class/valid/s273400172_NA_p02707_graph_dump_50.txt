Line_8 $$ for (int i = 1; i < N; i++) -->Line_14 $$ System.out.println((Counts.containsKey(i)) ? Counts.get(i) : "0")[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_8 $$ for (int i = 1; i < N; i++) [ CD ]
Line_6 $$ HashMap<Integer, Integer> Counts = new HashMap()-->Line_11 $$ Counts.put(A, Counts.get(A) + 1)[ FD ]
Line_8 $$ for (int i = 1; i < N; i++) -->Line_14 $$ for (int i = 1; i <= N; i++) System.out.println((Counts.containsKey(i)) ? Counts.get(i) : "0")[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_11 $$ if (Counts.containsKey(A))-->Line_12 $$ Counts.put(A, 1)[ CD ]
Line_10 $$ A = Integer.parseInt(ST.nextToken())-->Line_11 $$ Counts.put(A, Counts.get(A) + 1)[ FD ]
Line_8 $$ for (int i = 1; i < N; i++) -->Line_11 $$ if (Counts.containsKey(A))[ CD ]
Line_6 $$ int N = Integer.parseInt(BR.readLine()), A-->Line_12 $$ Counts.put(A, 1)[ FD ]
Line_5 $$ StringTokenizer ST-->Line_7 $$ ST = new StringTokenizer(BR.readLine())[ FD ]
Line_1 $$ public class Main -->Line_3 $$ public static void main(String[] Arguments) throws IOException [ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_6 $$ HashMap<Integer, Integer> Counts = new HashMap()[ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_14 $$ for (int i = 1; i <= N; i++) System.out.println((Counts.containsKey(i)) ? Counts.get(i) : "0")[ CD ]
Line_6 $$ int N = Integer.parseInt(BR.readLine()), A-->Line_14 $$ for (int i = 1; i <= N; i++) System.out.println((Counts.containsKey(i)) ? Counts.get(i) : "0")[ FD ]
Line_5 $$ StringTokenizer ST-->Line_10 $$ A = Integer.parseInt(ST.nextToken())[ FD ]
Line_6 $$ int N = Integer.parseInt(BR.readLine()), A-->Line_11 $$ Counts.put(A, Counts.get(A) + 1)[ FD ]
Line_10 $$ A = Integer.parseInt(ST.nextToken())-->Line_11 $$ if (Counts.containsKey(A))[ FD ]
Line_6 $$ int N = Integer.parseInt(BR.readLine()), A-->Line_10 $$ A = Integer.parseInt(ST.nextToken())[ FD ]
Line_6 $$ int N = Integer.parseInt(BR.readLine()), A-->Line_8 $$ for (int i = 1; i < N; i++) [ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_6 $$ int N = Integer.parseInt(BR.readLine()), A[ CD ]
Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))-->Line_6 $$ int N = Integer.parseInt(BR.readLine()), A[ FD ]
Line_7 $$ ST = new StringTokenizer(BR.readLine())-->Line_10 $$ A = Integer.parseInt(ST.nextToken())[ FD ]
Line_5 $$ BufferedReader BR = new BufferedReader(new InputStreamReader(System.in))-->Line_7 $$ ST = new StringTokenizer(BR.readLine())[ FD ]
Line_6 $$ HashMap<Integer, Integer> Counts = new HashMap()-->Line_14 $$ System.out.println((Counts.containsKey(i)) ? Counts.get(i) : "0")[ FD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_7 $$ ST = new StringTokenizer(BR.readLine())[ CD ]
Line_3 $$ public static void main(String[] Arguments) throws IOException -->Line_5 $$ StringTokenizer ST[ CD ]
Line_10 $$ A = Integer.parseInt(ST.nextToken())-->Line_12 $$ Counts.put(A, 1)[ FD ]
Line_6 $$ int N = Integer.parseInt(BR.readLine()), A-->Line_11 $$ if (Counts.containsKey(A))[ FD ]
Line_6 $$ HashMap<Integer, Integer> Counts = new HashMap()-->Line_12 $$ Counts.put(A, 1)[ FD ]
Line_6 $$ HashMap<Integer, Integer> Counts = new HashMap()-->Line_11 $$ if (Counts.containsKey(A))[ FD ]
Line_8 $$ for (int i = 1; i < N; i++) -->Line_10 $$ A = Integer.parseInt(ST.nextToken())[ CD ]
