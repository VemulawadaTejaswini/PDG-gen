Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ int x = sc.nextInt()[ CD ]
Line_4 $$ int x = sc.nextInt()-->Line_4 $$ int x = sc.nextInt()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_4 $$ int x = sc.nextInt()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ int tp = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ int hp = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ for (int i = 0; i < x; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_4 $$ int x = sc.nextInt()-->Line_7 $$ for (int i = 0; i < x; i++) [ FD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_7 $$ for (int i = 0; i < x; i++) [ CD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_7 $$ for (int i = 0; i < x; i++) [ CD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_7 $$ for (int i = 0; i < x; i++) [ FD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_8 $$ String t = sc.next()[ CD ]
Line_8 $$ String t = sc.next()-->Line_8 $$ String t = sc.next()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_8 $$ String t = sc.next()[ FD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_9 $$ String h = sc.next()[ CD ]
Line_9 $$ String h = sc.next()-->Line_9 $$ String h = sc.next()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_9 $$ String h = sc.next()[ FD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_10 $$ if (t.equals(h)) [ CD ]
Line_8 $$ String t = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_9 $$ String h = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_10 $$ if (t.equals(h)) -->Line_10 $$ if (t.equals(h)) [ CD ]
Line_8 $$ String t = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_9 $$ String h = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_10 $$ if (t.equals(h)) -->Line_11 $$ tp += 1[ CD ]
Line_11 $$ tp += 1-->Line_11 $$ tp += 1[ FD ]
Line_5 $$ int tp = 0-->Line_11 $$ tp += 1[ FD ]
Line_10 $$ if (t.equals(h)) -->Line_12 $$ hp += 1[ CD ]
Line_12 $$ hp += 1-->Line_12 $$ hp += 1[ FD ]
Line_6 $$ int hp = 0-->Line_12 $$ hp += 1[ FD ]
Line_10 $$ if (t.equals(h)) -->Line_13 $$ if (t.compareTo(h) > 0) [ CD ]
Line_8 $$ String t = sc.next()-->Line_13 $$ if (t.compareTo(h) > 0) [ FD ]
Line_9 $$ String h = sc.next()-->Line_13 $$ if (t.compareTo(h) > 0) [ FD ]
Line_13 $$ if (t.compareTo(h) > 0) -->Line_14 $$ tp += 3[ CD ]
Line_11 $$ tp += 1-->Line_14 $$ tp += 3[ FD ]
Line_14 $$ tp += 3-->Line_14 $$ tp += 3[ FD ]
Line_5 $$ int tp = 0-->Line_14 $$ tp += 3[ FD ]
Line_13 $$ if (t.compareTo(h) > 0) -->Line_16 $$ hp += 3[ CD ]
Line_12 $$ hp += 1-->Line_16 $$ hp += 3[ FD ]
Line_16 $$ hp += 3-->Line_16 $$ hp += 3[ FD ]
Line_6 $$ int hp = 0-->Line_16 $$ hp += 3[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_19 $$ System.out.println(tp + " " + hp)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_20 $$ sc.close()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_20 $$ sc.close()[ FD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_7 $$ for (int i = 0; i < x; i++) [ FD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_7 $$ for (int i = 0; i < x; i++) [ FD ]
Line_7 $$ for (int i = 0; i < x; i++) -->Line_7 $$ for (int i = 0; i < x; i++) [ FD ]
Line_8 $$ String t = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_9 $$ String h = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_8 $$ String t = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_9 $$ String h = sc.next()-->Line_10 $$ if (t.equals(h)) [ FD ]
Line_8 $$ String t = sc.next()-->Line_13 $$ if (t.compareTo(h) > 0) [ FD ]
Line_9 $$ String h = sc.next()-->Line_13 $$ if (t.compareTo(h) > 0) [ FD ]
