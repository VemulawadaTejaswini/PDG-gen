Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ Pattern upperStr = Pattern.compile("[A-Z]")[ CD ]
Line_5 $$ Pattern upperStr = Pattern.compile("[A-Z]")-->Line_5 $$ Pattern upperStr = Pattern.compile("[A-Z]")[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ Pattern lowerStr = Pattern.compile("[a-z]")[ CD ]
Line_6 $$ Pattern lowerStr = Pattern.compile("[a-z]")-->Line_6 $$ Pattern lowerStr = Pattern.compile("[a-z]")[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ String str = br.readLine()[ CD ]
Line_7 $$ String str = br.readLine()-->Line_7 $$ String str = br.readLine()[ CD ]
Line_3 $$ BufferedReader br = new BufferedReader(new InputStreamReader(System.in))-->Line_7 $$ String str = br.readLine()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ CD ]
Line_7 $$ String str = br.readLine()-->Line_8 $$ for (int i = 0; i < str.length(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_9 $$ String checkStr = str.substring(i, i + 1)[ CD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_9 $$ String checkStr = str.substring(i, i + 1)[ CD ]
Line_7 $$ String str = br.readLine()-->Line_9 $$ String checkStr = str.substring(i, i + 1)[ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_9 $$ String checkStr = str.substring(i, i + 1)[ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_10 $$ if (upperStr.matcher(checkStr).find()) [ CD ]
Line_10 $$ if (upperStr.matcher(checkStr).find()) -->Line_10 $$ if (upperStr.matcher(checkStr).find()) [ CD ]
Line_5 $$ Pattern upperStr = Pattern.compile("[A-Z]")-->Line_10 $$ if (upperStr.matcher(checkStr).find()) [ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_10 $$ if (upperStr.matcher(checkStr).find()) [ FD ]
Line_10 $$ if (upperStr.matcher(checkStr).find()) -->Line_11 $$ builder.append(checkStr.toLowerCase())[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append(checkStr.toLowerCase())[ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_11 $$ builder.append(checkStr.toLowerCase())[ FD ]
Line_10 $$ if (upperStr.matcher(checkStr).find()) -->Line_12 $$ if (lowerStr.matcher(checkStr).find()) [ CD ]
Line_12 $$ if (lowerStr.matcher(checkStr).find()) -->Line_12 $$ if (lowerStr.matcher(checkStr).find()) [ CD ]
Line_6 $$ Pattern lowerStr = Pattern.compile("[a-z]")-->Line_12 $$ if (lowerStr.matcher(checkStr).find()) [ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_12 $$ if (lowerStr.matcher(checkStr).find()) [ FD ]
Line_12 $$ if (lowerStr.matcher(checkStr).find()) -->Line_13 $$ builder.append(checkStr.toUpperCase())[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(checkStr.toUpperCase())[ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_13 $$ builder.append(checkStr.toUpperCase())[ FD ]
Line_12 $$ if (lowerStr.matcher(checkStr).find()) -->Line_15 $$ builder.append(checkStr)[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ builder.append(checkStr)[ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_15 $$ builder.append(checkStr)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_18 $$ System.out.println(builder)[ CD ]
Line_4 $$ StringBuilder builder = new StringBuilder()-->Line_18 $$ System.out.println(builder)[ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_8 $$ for (int i = 0; i < str.length(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < str.length(); i++) -->Line_9 $$ String checkStr = str.substring(i, i + 1)[ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_10 $$ if (upperStr.matcher(checkStr).find()) [ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_11 $$ builder.append(checkStr.toLowerCase())[ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_12 $$ if (lowerStr.matcher(checkStr).find()) [ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_13 $$ builder.append(checkStr.toUpperCase())[ FD ]
Line_9 $$ String checkStr = str.substring(i, i + 1)-->Line_15 $$ builder.append(checkStr)[ FD ]
