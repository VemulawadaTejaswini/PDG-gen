Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ String UpperAlpha = "abcdefghijklmnopqrstuvwxyz"[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ String W[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ String line[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ String[] T[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ int count_Empty = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ boolean judge_W = true[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ boolean judge_T = true[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ int count_W = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ W = sc.nextLine()[ CD ]
Line_5 $$ String W-->Line_12 $$ W = sc.nextLine()[ FD ]
Line_12 $$ W = sc.nextLine()-->Line_12 $$ W = sc.nextLine()[ FD ]
Line_12 $$ W = sc.nextLine()-->Line_12 $$ W = sc.nextLine()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_12 $$ W = sc.nextLine()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ if (W.length() > 10) [ CD ]
Line_5 $$ String W-->Line_13 $$ if (W.length() > 10) [ FD ]
Line_12 $$ W = sc.nextLine()-->Line_13 $$ if (W.length() > 10) [ FD ]
Line_13 $$ if (W.length() > 10) -->Line_14 $$ judge_W = false[ CD ]
Line_9 $$ boolean judge_W = true-->Line_14 $$ judge_W = false[ FD ]
Line_14 $$ judge_W = false-->Line_14 $$ judge_W = false[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_16 $$ if (judge_W == true) [ CD ]
Line_9 $$ boolean judge_W = true-->Line_16 $$ if (judge_W == true) [ FD ]
Line_14 $$ judge_W = false-->Line_16 $$ if (judge_W == true) [ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_17 $$ for (int i = 0; i < W.length(); i++) [ CD ]
Line_5 $$ String W-->Line_17 $$ for (int i = 0; i < W.length(); i++) [ FD ]
Line_12 $$ W = sc.nextLine()-->Line_17 $$ for (int i = 0; i < W.length(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_17 $$ for (int i = 0; i < W.length(); i++) [ CD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_17 $$ for (int i = 0; i < W.length(); i++) [ CD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_17 $$ for (int i = 0; i < W.length(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_18 $$ if (UpperAlpha.indexOf("" + W.charAt(i)) == -1) [ CD ]
Line_4 $$ String UpperAlpha = "abcdefghijklmnopqrstuvwxyz"-->Line_18 $$ if (UpperAlpha.indexOf("" + W.charAt(i)) == -1) [ FD ]
Line_5 $$ String W-->Line_18 $$ if (UpperAlpha.indexOf("" + W.charAt(i)) == -1) [ FD ]
Line_12 $$ W = sc.nextLine()-->Line_18 $$ if (UpperAlpha.indexOf("" + W.charAt(i)) == -1) [ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_18 $$ if (UpperAlpha.indexOf("" + W.charAt(i)) == -1) [ FD ]
Line_18 $$ if (UpperAlpha.indexOf("" + W.charAt(i)) == -1) -->Line_19 $$ judge_W = false[ CD ]
Line_19 $$ judge_W = false-->Line_19 $$ judge_W = false[ FD ]
Line_9 $$ boolean judge_W = true-->Line_19 $$ judge_W = false[ FD ]
Line_14 $$ judge_W = false-->Line_19 $$ judge_W = false[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_24 $$ if (judge_W == true) [ CD ]
Line_19 $$ judge_W = false-->Line_24 $$ if (judge_W == true) [ FD ]
Line_9 $$ boolean judge_W = true-->Line_24 $$ if (judge_W == true) [ FD ]
Line_14 $$ judge_W = false-->Line_24 $$ if (judge_W == true) [ FD ]
Line_25 $$ while (true) -->Line_26 $$ line = sc.nextLine()[ CD ]
Line_26 $$ line = sc.nextLine()-->Line_26 $$ line = sc.nextLine()[ FD ]
Line_6 $$ String line-->Line_26 $$ line = sc.nextLine()[ FD ]
Line_26 $$ line = sc.nextLine()-->Line_26 $$ line = sc.nextLine()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_26 $$ line = sc.nextLine()[ FD ]
Line_25 $$ while (true) -->Line_27 $$ if (line.equals("END_OF_TEXT")) [ CD ]
Line_26 $$ line = sc.nextLine()-->Line_27 $$ if (line.equals("END_OF_TEXT")) [ FD ]
Line_6 $$ String line-->Line_27 $$ if (line.equals("END_OF_TEXT")) [ FD ]
Line_27 $$ if (line.equals("END_OF_TEXT")) -->Line_27 $$ if (line.equals("END_OF_TEXT")) [ CD ]
Line_26 $$ line = sc.nextLine()-->Line_27 $$ if (line.equals("END_OF_TEXT")) [ FD ]
Line_6 $$ String line-->Line_27 $$ if (line.equals("END_OF_TEXT")) [ FD ]
Line_25 $$ while (true) -->Line_30 $$ T = (line.toLowerCase()).split(" ")[ CD ]
Line_30 $$ T = (line.toLowerCase()).split(" ")-->Line_30 $$ T = (line.toLowerCase()).split(" ")[ FD ]
Line_7 $$ String[] T-->Line_30 $$ T = (line.toLowerCase()).split(" ")[ FD ]
Line_30 $$ T = (line.toLowerCase()).split(" ")-->Line_30 $$ T = (line.toLowerCase()).split(" ")[ CD ]
Line_26 $$ line = sc.nextLine()-->Line_30 $$ T = (line.toLowerCase()).split(" ")[ FD ]
Line_6 $$ String line-->Line_30 $$ T = (line.toLowerCase()).split(" ")[ FD ]
Line_25 $$ while (true) -->Line_31 $$ count_Empty += T.length - 1[ CD ]
Line_31 $$ count_Empty += T.length - 1-->Line_31 $$ count_Empty += T.length - 1[ FD ]
Line_8 $$ int count_Empty = 0-->Line_31 $$ count_Empty += T.length - 1[ FD ]
Line_25 $$ while (true) -->Line_32 $$ if (line.length() - count_Empty > 1000) [ CD ]
Line_26 $$ line = sc.nextLine()-->Line_32 $$ if (line.length() - count_Empty > 1000) [ FD ]
Line_6 $$ String line-->Line_32 $$ if (line.length() - count_Empty > 1000) [ FD ]
Line_32 $$ if (line.length() - count_Empty > 1000) -->Line_33 $$ judge_T = false[ CD ]
Line_33 $$ judge_T = false-->Line_33 $$ judge_T = false[ FD ]
Line_10 $$ boolean judge_T = true-->Line_33 $$ judge_T = false[ FD ]
Line_25 $$ while (true) -->Line_36 $$ for (int j = 0; j < T.length; j++) [ CD ]
Line_25 $$ while (true) -->Line_25 $$ while (true) [ CD ]
Line_36 $$ for (int j = 0; j < T.length; j++) -->Line_36 $$ for (int j = 0; j < T.length; j++) [ CD ]
Line_36 $$ for (int j = 0; j < T.length; j++) -->Line_36 $$ for (int j = 0; j < T.length; j++) [ CD ]
Line_36 $$ for (int j = 0; j < T.length; j++) -->Line_36 $$ for (int j = 0; j < T.length; j++) [ FD ]
Line_36 $$ for (int j = 0; j < T.length; j++) -->Line_37 $$ if (T[j].equals(W)) [ CD ]
Line_5 $$ String W-->Line_37 $$ if (T[j].equals(W)) [ FD ]
Line_12 $$ W = sc.nextLine()-->Line_37 $$ if (T[j].equals(W)) [ FD ]
Line_37 $$ if (T[j].equals(W)) -->Line_37 $$ if (T[j].equals(W)) [ CD ]
Line_5 $$ String W-->Line_37 $$ if (T[j].equals(W)) [ FD ]
Line_12 $$ W = sc.nextLine()-->Line_37 $$ if (T[j].equals(W)) [ FD ]
Line_37 $$ if (T[j].equals(W)) -->Line_38 $$ count_W++[ CD ]
Line_11 $$ int count_W = 0-->Line_38 $$ count_W++[ FD ]
Line_24 $$ if (judge_W == true) -->Line_42 $$ if (judge_T == true) [ CD ]
Line_33 $$ judge_T = false-->Line_42 $$ if (judge_T == true) [ FD ]
Line_10 $$ boolean judge_T = true-->Line_42 $$ if (judge_T == true) [ FD ]
Line_42 $$ if (judge_T == true) -->Line_43 $$ System.out.println(count_W)[ CD ]
Line_11 $$ int count_W = 0-->Line_43 $$ System.out.println(count_W)[ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_17 $$ for (int i = 0; i < W.length(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_17 $$ for (int i = 0; i < W.length(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_17 $$ for (int i = 0; i < W.length(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < W.length(); i++) -->Line_18 $$ if (UpperAlpha.indexOf("" + W.charAt(i)) == -1) [ FD ]
Line_26 $$ line = sc.nextLine()-->Line_27 $$ if (line.equals("END_OF_TEXT")) [ FD ]
Line_26 $$ line = sc.nextLine()-->Line_27 $$ if (line.equals("END_OF_TEXT")) [ FD ]
Line_26 $$ line = sc.nextLine()-->Line_30 $$ T = (line.toLowerCase()).split(" ")[ FD ]
Line_26 $$ line = sc.nextLine()-->Line_32 $$ if (line.length() - count_Empty > 1000) [ FD ]
Line_36 $$ for (int j = 0; j < T.length; j++) -->Line_36 $$ for (int j = 0; j < T.length; j++) [ FD ]
Line_36 $$ for (int j = 0; j < T.length; j++) -->Line_36 $$ for (int j = 0; j < T.length; j++) [ FD ]
Line_36 $$ for (int j = 0; j < T.length; j++) -->Line_36 $$ for (int j = 0; j < T.length; j++) [ FD ]
