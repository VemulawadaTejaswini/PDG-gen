Line_0 $$ Entry-->Line_1 $$ class Main [ CD ]
Line_1 $$ class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ String sentence = ""[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ while (sc.hasNext()) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_5 $$ while (sc.hasNext()) -->Line_5 $$ while (sc.hasNext()) [ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_5 $$ while (sc.hasNext()) [ FD ]
Line_5 $$ while (sc.hasNext()) -->Line_6 $$ sentence += sc.nextLine()[ CD ]
Line_6 $$ sentence += sc.nextLine()-->Line_6 $$ sentence += sc.nextLine()[ FD ]
Line_4 $$ String sentence = ""-->Line_6 $$ sentence += sc.nextLine()[ FD ]
Line_6 $$ sentence += sc.nextLine()-->Line_6 $$ sentence += sc.nextLine()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_6 $$ sentence += sc.nextLine()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ TreeMap<Character, Integer> countAlph = new TreeMap()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ char alphabet = 'a'[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ final int ALPHABET_SIZE = 'z' - 'a'[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_10 $$ final int ALPHABET_SIZE = 'z' - 'a'-->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ CD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ CD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_12 $$ countAlph.put(alphabet, 0)[ CD ]
Line_8 $$ TreeMap<Character, Integer> countAlph = new TreeMap()-->Line_12 $$ countAlph.put(alphabet, 0)[ FD ]
Line_9 $$ char alphabet = 'a'-->Line_12 $$ countAlph.put(alphabet, 0)[ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_13 $$ alphabet++[ CD ]
Line_9 $$ char alphabet = 'a'-->Line_13 $$ alphabet++[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_6 $$ sentence += sc.nextLine()-->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_4 $$ String sentence = ""-->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ CD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ CD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_16 $$ if (sentence.charAt(i) == ' ')[ CD ]
Line_6 $$ sentence += sc.nextLine()-->Line_16 $$ if (sentence.charAt(i) == ' ')[ FD ]
Line_4 $$ String sentence = ""-->Line_16 $$ if (sentence.charAt(i) == ' ')[ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_16 $$ if (sentence.charAt(i) == ' ')[ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_16 $$ if (sentence.charAt(i) == ' ')[ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))[ CD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))[ CD ]
Line_6 $$ sentence += sc.nextLine()-->Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))[ FD ]
Line_4 $$ String sentence = ""-->Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))[ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))[ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))[ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_18 $$ if (Character.isUpperCase(checkChar.charAt(0)))[ CD ]
Line_18 $$ if (Character.isUpperCase(checkChar.charAt(0)))-->Line_18 $$ if (Character.isUpperCase(checkChar.charAt(0)))[ CD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_18 $$ if (Character.isUpperCase(checkChar.charAt(0)))[ FD ]
Line_18 $$ if (Character.isUpperCase(checkChar.charAt(0)))-->Line_18 $$ checkChar = checkChar.toLowerCase()[ CD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_18 $$ checkChar = checkChar.toLowerCase()[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_18 $$ checkChar = checkChar.toLowerCase()[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_18 $$ checkChar = checkChar.toLowerCase()[ CD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_18 $$ checkChar = checkChar.toLowerCase()[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_18 $$ checkChar = checkChar.toLowerCase()[ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_19 $$ Pattern p = Pattern.compile("[a-z]")[ CD ]
Line_19 $$ Pattern p = Pattern.compile("[a-z]")-->Line_19 $$ Pattern p = Pattern.compile("[a-z]")[ CD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_20 $$ Matcher m = p.matcher(checkChar)[ CD ]
Line_20 $$ Matcher m = p.matcher(checkChar)-->Line_20 $$ Matcher m = p.matcher(checkChar)[ CD ]
Line_19 $$ Pattern p = Pattern.compile("[a-z]")-->Line_20 $$ Matcher m = p.matcher(checkChar)[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_20 $$ Matcher m = p.matcher(checkChar)[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_20 $$ Matcher m = p.matcher(checkChar)[ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_21 $$ if (m.find())[ CD ]
Line_20 $$ Matcher m = p.matcher(checkChar)-->Line_21 $$ if (m.find())[ FD ]
Line_21 $$ if (m.find())-->Line_21 $$ if (m.find())[ CD ]
Line_20 $$ Matcher m = p.matcher(checkChar)-->Line_21 $$ if (m.find())[ FD ]
Line_21 $$ if (m.find())-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ CD ]
Line_8 $$ TreeMap<Character, Integer> countAlph = new TreeMap()-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_8 $$ TreeMap<Character, Integer> countAlph = new TreeMap()-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_23 $$ alphabet = 'a'[ CD ]
Line_9 $$ char alphabet = 'a'-->Line_23 $$ alphabet = 'a'[ FD ]
Line_23 $$ alphabet = 'a'-->Line_23 $$ alphabet = 'a'[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_10 $$ final int ALPHABET_SIZE = 'z' - 'a'-->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ CD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ CD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_25 $$ System.out.println(String.valueOf(alphabet) + " : " + countAlph.get(alphabet))[ CD ]
Line_9 $$ char alphabet = 'a'-->Line_25 $$ System.out.println(String.valueOf(alphabet) + " : " + countAlph.get(alphabet))[ FD ]
Line_23 $$ alphabet = 'a'-->Line_25 $$ System.out.println(String.valueOf(alphabet) + " : " + countAlph.get(alphabet))[ FD ]
Line_8 $$ TreeMap<Character, Integer> countAlph = new TreeMap()-->Line_25 $$ System.out.println(String.valueOf(alphabet) + " : " + countAlph.get(alphabet))[ FD ]
Line_9 $$ char alphabet = 'a'-->Line_25 $$ System.out.println(String.valueOf(alphabet) + " : " + countAlph.get(alphabet))[ FD ]
Line_23 $$ alphabet = 'a'-->Line_25 $$ System.out.println(String.valueOf(alphabet) + " : " + countAlph.get(alphabet))[ FD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_26 $$ alphabet++[ CD ]
Line_9 $$ char alphabet = 'a'-->Line_26 $$ alphabet++[ FD ]
Line_23 $$ alphabet = 'a'-->Line_26 $$ alphabet++[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_28 $$ sc.close()[ CD ]
Line_3 $$ Scanner sc = new Scanner(System.in)-->Line_28 $$ sc.close()[ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_11 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_15 $$ for (int i = 0; i < sentence.length(); i++) [ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_16 $$ if (sentence.charAt(i) == ' ')[ FD ]
Line_15 $$ for (int i = 0; i < sentence.length(); i++) -->Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_18 $$ if (Character.isUpperCase(checkChar.charAt(0)))[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_18 $$ if (Character.isUpperCase(checkChar.charAt(0)))[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_18 $$ checkChar = checkChar.toLowerCase()[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_18 $$ checkChar = checkChar.toLowerCase()[ FD ]
Line_19 $$ Pattern p = Pattern.compile("[a-z]")-->Line_20 $$ Matcher m = p.matcher(checkChar)[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_20 $$ Matcher m = p.matcher(checkChar)[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_20 $$ Matcher m = p.matcher(checkChar)[ FD ]
Line_20 $$ Matcher m = p.matcher(checkChar)-->Line_21 $$ if (m.find())[ FD ]
Line_20 $$ Matcher m = p.matcher(checkChar)-->Line_21 $$ if (m.find())[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_17 $$ String checkChar = String.valueOf(sentence.charAt(i))-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_18 $$ checkChar = checkChar.toLowerCase()-->Line_21 $$ countAlph.put(checkChar.toCharArray()[0], countAlph.get(checkChar.toCharArray()[0]) + 1)[ FD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) -->Line_24 $$ for (int i = 0; i <= ALPHABET_SIZE; i++) [ FD ]
