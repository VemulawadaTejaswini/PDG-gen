Line_4 $$ while (true) -->Line_14 $$ for (int i = 0; i < n; i++) [ CD ]
Line_4 $$ while (true) -->Line_7 $$ if (n == 0)[ CD ]
Line_6 $$ int n = sc.nextInt()-->Line_9 $$ for (int i = 0; i < n; i++) [ FD ]
Line_6 $$ int n = sc.nextInt()-->Line_15 $$ var += Math.pow((scores[i] - ave), 2) / n[ FD ]
Line_3 $$ try (Scanner sc = new Scanner(System.in)) -->Line_10 $$ scores[i] = sc.nextInt()[ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_11 $$ sum += scores[i][ CD ]
Line_5 $$ double sum = 0, ave, var = 0-->Line_11 $$ sum += scores[i][ FD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_10 $$ scores[i] = sc.nextInt()[ CD ]
Line_4 $$ while (true) -->Line_17 $$ System.out.printf("%f\n", Math.sqrt(var))[ CD ]
Line_4 $$ while (true) -->Line_5 $$ double sum = 0, ave, var = 0[ CD ]
Line_1 $$ public class Main -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_4 $$ while (true) -->Line_8 $$ int[] scores = new int[n][ CD ]
Line_6 $$ int n = sc.nextInt()-->Line_7 $$ if (n == 0)[ FD ]
Line_5 $$ double sum = 0, ave, var = 0-->Line_15 $$ var += Math.pow((scores[i] - ave), 2) / n[ FD ]
Line_3 $$ try (Scanner sc = new Scanner(System.in)) -->Line_6 $$ int n = sc.nextInt()[ FD ]
Line_15 $$ var += Math.pow((scores[i] - ave), 2) / n-->Line_17 $$ System.out.printf("%f\n", Math.sqrt(var))[ FD ]
Line_4 $$ while (true) -->Line_6 $$ int n = sc.nextInt()[ CD ]
Line_5 $$ double sum = 0, ave, var = 0-->Line_13 $$ ave = sum / n[ FD ]
Line_6 $$ int n = sc.nextInt()-->Line_14 $$ for (int i = 0; i < n; i++) [ FD ]
Line_4 $$ while (true) -->Line_13 $$ ave = sum / n[ CD ]
Line_14 $$ for (int i = 0; i < n; i++) -->Line_15 $$ var += Math.pow((scores[i] - ave), 2) / n[ CD ]
Line_9 $$ for (int i = 0; i < n; i++) -->Line_14 $$ for (int i = 0; i < n; i++) [ FD ]
Line_5 $$ double sum = 0, ave, var = 0-->Line_17 $$ System.out.printf("%f\n", Math.sqrt(var))[ FD ]
Line_4 $$ while (true) -->Line_9 $$ for (int i = 0; i < n; i++) [ CD ]
Line_6 $$ int n = sc.nextInt()-->Line_13 $$ ave = sum / n[ FD ]
Line_11 $$ sum += scores[i]-->Line_13 $$ ave = sum / n[ FD ]
