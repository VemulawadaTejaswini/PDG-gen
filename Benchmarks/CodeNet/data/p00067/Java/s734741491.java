

import java.io.IOException;
import java.util.Scanner;

/**
 * <pre>
 * NumberOfIsland
 *
 * ??¶?????°???????????????
 * </pre>
 *
 * @author ?????????????????§???
 *
 */
public class Main{

	public static void main(String[] args) throws IOException {

		Scanner sc = new Scanner(System.in);

		while (sc.hasNext()) {
			//??°??¢???????´???´???
			boolean map[][] = new boolean[12][12];

			for (int cnt = 0; cnt < map.length; cnt++) {
				//????????????
				int tmp_addr=0;
				// ???????????????????????£?????¨???????´?
				char[] tmp_row =sc.next().toCharArray();
				for (char info:tmp_row ) {
					// ????????°??????(???)???true(1)??? ?????? ????????????(???)???false(0)???
					//??°??????????£?
					map[cnt][tmp_addr] = (info == '1')/*(info =='1'? true:false)*/;
					tmp_addr++;
				}
			}
			// ??¶?????°
			int ans = 0;
			for (int cnt1 = 0; cnt1 < map.length; cnt1++) {
				for (int cnt2 = 0; cnt2 < map[0].length; cnt2++) {
					// ?????°??????
					if (map[cnt1][cnt2]/* == true */) {
						// ??¬???
						recursive_landSurvey(cnt1, cnt2, map);
						// ??¬??????????????£????????¶?????°?????????
						ans++;
					}
				}
			}
			// ???????????????
			System.out.println(ans);
		} // ?????????????????????
			// ????????????????????????
		sc.close();
	}// ?????????????????????????????????

	/**
	 * <pre>
	 * ?????°??????????????????
	 * </pre>
	 *
	 * ?????°??¬???
	 *
	 * @param mh
	 *            ??????
	 * @param mw
	 *            ??????
	 * @param map
	 */
	private static void recursive_landSurvey(int mh, int mw, boolean[][] map) {
		// StackOverflowError
		map[mh][mw] = false;
		// ?§??????????????????????
		int move_list1[] = { 1, 0, -1, 0 };
		int move_list2[] = { 0, 1, 0, -1 };
		for (int cnt = 0; cnt < move_list1.length; cnt++) {
			// ??????????????????????§??????????
			int addr_h = mh + move_list1[cnt];
			// ??????????????????????§??????????
			int addr_w = mw + move_list2[cnt];

			// ??°???????????????????????°
			if (0 <= addr_h && 0 <= addr_w && addr_h < map.length && addr_w < map[0].length
					&& map[addr_h][addr_w]/* ==true */)
				// ?????°????¶?????????¬???
				recursive_landSurvey(addr_h, addr_w, map);
		}
	}// recursive_landSurvey????????????????????????

}// ??????????????????????????????