

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/**
 * 
 * @author DemonSong
 * 
 *         189.Convenient Location
 * 
 *         ????????????
 *         ??\??\????\???????A?????????????°±????????????????¶??????????????????¨???????????????????°±?????????????????????????????£????????????????????????????????£????????\????????£???????????????????????£?????????????????????????????§A?????????,?????????????????£??????
 *         ????????????????????????????????????????????¨??????????????????
 * 
 *         ????????§???????????????A??????????????????????????????????????????????????????????????¢????????¨?????????????????????
 * 
 * 
 * 
 *         ????????? 0
 *         ???????§??????????????????????????????????????????¨??????????????????????????????????????????????????????????????????????????????????±??????£???????????????A?????????????????????????????§????????´????????????????????????????????£????????§??????????????????
 *         0
 *         ??¨????????????????????¨????????¨??????????????§??????????????????????????????????????????????????°????????¨?????????????????????????????????????????£????????????A????????????1??????????????´???????????????????????????????????§??????????????????
 * 
 *         ??? 0 ?????§ 80 ??? 1 ?????§ 0 ??? 2 ?????§ 20 ??? 3 ?????§ 70 ??? 4 ?????§ 90
 * 
 *         ??¨?????????????????? 260 ??¨???????????????
 * 
 *         ????????°??¨?????¨?????????????????±?????\?????¨??????????????????????????????????????´???????????????????????????????¨???????????????????????°???¨????????????????????¨???????????¨??????????????????????????????????????????????????°????????????????????????????????????????????????????????????????????????????°???¨?????????????????°????????´????????????????°???????????????????????????????????????????????????????????????????????????????????????????????????°???
 *         10 ??\?????????????????°??? 45
 *         ??\?????¨????????¨?????????????????????????§??????§???????????????????????????????????£??????????????????????????¨??????????????????????????????????????§??????????????¨???????????????
 *         ???????????????????????¨????????????
 * 
 *         Input ?????°???????????????????????????????????\?????¨?????????????????????????????\?????????????????????????????¨???????????§??????????????????
 *         ??????????????????????????\????????¢?????§?????????????????????
 * 
 *         n a1 b1 c1 a2 b2 c2 : an bn cn ????????????????????° n (1 ??? n ??? 45) ?????????????????????????¶???? n ??????
 *         i ????????????????????±???????????????????????? ai, bi (0 ??? ai, bi ??? 9) ??? i ??????????????????????????§?????????????????????ci (0 ???
 *         ci ??? 100) ????????????????????????????????¨????????????
 * 
 *         Output ???????????????????????????????????????????????????????°?????????????????????????????????????????????????????????????????????????????????§???????????????????????????
 * 
 *         Sample Input 6 0 1 80 1 2 20 0 2 60 2 3 50 3 4 60 1 4 90 2 0 1 1 1 2
 *         1 0 Output for the Sample Input 2 240 1 2
 *
 */
public class Main{
	
	static final int INF = 1 << 29;
	static final int MAX = 11;
	
	public static void main(String[] args) throws IOException {
		Scanner in = new Scanner(System.in);
		while (true){
			int N = in.nextInt();
			if (N == 0) break;
			int[][] graph = new int[MAX][MAX];
			int n = 0;
			for (int i = 0; i < N; ++i){
				int u = in.nextInt();
				int v = in.nextInt();
				int d = in.nextInt();
				graph[u][v] = d;
				graph[v][u] = d;
				n = Math.max(n, Math.max(u,v) + 1);
			}
			solve(graph,n);
		}
	}
	
	private static void solve(int[][] graph, int n){
		int[][] distance = new int[n][n];
		
		for (int[] d : distance) Arrays.fill(d, INF);
		
		for (int i = 0; i < n; ++i){
			for (int j = 0; j < n; ++j){
				if (i == j) distance[i][i] = 0;
				if (graph[i][j] != 0){
					distance[i][j] = graph[i][j];
				}
			}
		}
		
		for (int i = 0; i < n; ++i){
			for (int j = 0; j < n; ++j){
				for (int k = 0; k < n; ++k){
					distance[j][k] = Math.min(distance[j][k], distance[j][i] + distance[i][k]);
				}
			}
		}
		
		int minSum = INF;
		int node = INF;
		for (int i = 0; i < n; ++i){
			int sum = 0;
			for (int j = 0; j < n; ++j){
				sum += distance[i][j];
			}
			if (sum < minSum){
				node = i;
				minSum = sum;
			}
		}
		
		System.out.println(node + " " + minSum);
	}

	static class Scanner {

		private BufferedReader br;
		private StringTokenizer tok;

		public Scanner(InputStream is) throws IOException {
			br = new BufferedReader(new InputStreamReader(is));
			getLine();
		}

		private void getLine() throws IOException {
			while (tok == null || !tok.hasMoreTokens()) {
				tok = new StringTokenizer(br.readLine());
			}
		}

		private boolean hasNext() {
			return tok.hasMoreTokens();
		}

		public String next() throws IOException {
			if (hasNext()) {
				return tok.nextToken();
			} else {
				getLine();
				return tok.nextToken();
			}
		}

		public int nextInt() throws IOException {
			if (hasNext()) {
				return Integer.parseInt(tok.nextToken());
			} else {
				getLine();
				return Integer.parseInt(tok.nextToken());
			}
		}

		public long nextLong() throws IOException {
			if (hasNext()) {
				return Long.parseLong(tok.nextToken());
			} else {
				getLine();
				return Long.parseLong(tok.nextToken());
			}
		}

		public double nextDouble() throws IOException {
			if (hasNext()) {
				return Double.parseDouble(tok.nextToken());
			} else {
				getLine();
				return Double.parseDouble(tok.nextToken());
			}
		}
	}
}