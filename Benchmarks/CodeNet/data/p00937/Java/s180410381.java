import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Main {
  Scanner sc;

  Main() {
    sc = new Scanner( System.in );
  }

  int ni() {
    return sc.nextInt();
  }

  void run() {
    int n = ni();
    int m = ni();
    int a = ni(), b = ni(), c = ni();
    int[] abc = { a, b, c };
    boolean[][] link = new boolean[n][n];
    for ( int i = 0; i < m; ++i ) {
      int u = ni() - 1;
      int v = ni() - 1;
      link[ u ][ v ] = true;
    }

    int[] goals = new int[n];
    int inf = 1 << 28;
    Arrays.fill( goals, inf );
    goals[ n - 1 ] = 0; // ??´???????????´??????
    // ????????§???n?????????????????´??????????¢?????????????
    for ( int g = 0; g < n; ++g ) {
      ArrayList<Integer> additional_goal = new ArrayList<>();
      for ( int i = 0; i < n; ++i ) {
        if ( goals[ i ] != inf ) {
          // ??´???????????£??????????????????
          continue;
        }
        boolean flag = true;
        for ( int j = 0; j < 3; ++j ) {
          int MAX_STEP = abc[ j ];
          Queue<Integer> queue = new LinkedList<>();
          Queue<Integer> qstep = new LinkedList<>();
          boolean[][] done = new boolean[MAX_STEP + 1][n];
          queue.add( i );
          qstep.add( 0 );
          done[ 0 ][ i ] = true;
          boolean subf = false;
          // ?????????goals????????????????????°??????????????????
          while (queue.size() > 0) {
            int e = queue.poll();
            int s = qstep.poll();
            if ( s == MAX_STEP ) {
              if ( goals[ e ] != inf ) {
                subf |= true;
              }
              continue;
            }
            for ( int next = 0; next < n; ++next ) {
              if ( !link[ e ][ next ] )
                continue;
              int ns = s + 1;
              if ( done[ ns ][ next ] )
                continue;
              queue.add( next );
              qstep.add( ns );
              done[ ns ][ next ] = true;
            }
          }
          // abc ??¨????????????????????°??????????????´?????????????????????????????????????????????????????????
          flag &= subf;
        }
        // ??´???????????????
        if ( flag ) {
          additional_goal.add( i );
          // debug( i + 1, g + 1 );
          // goals[ i ] = g + 1; // ???????????????????????????
        }
      }
      for ( int i : additional_goal ) {
        goals[ i ] = g + 1;
      }
    }

    System.out.println( goals[ 0 ] != inf ? goals[ 0 ] : "IMPOSSIBLE" );
  }

  public static void main(String[] args) {
    new Main().run();
  }

  void debug(Object... os) {
    System.err.println( Arrays.deepToString( os ) );
  }
}