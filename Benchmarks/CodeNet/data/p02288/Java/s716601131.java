import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {

	public static void main(String[] args) throws Exception {
		// TODO ?????????????????????????????????????????????
		BufferedReader br =
				new BufferedReader(new InputStreamReader(System.in));

		int H = Integer.parseInt(br.readLine());

		int[] A = new int[H+1]; //A[0...H]
		String[] data = br.readLine().split(" ");
		for (int i=0; i < H; i++) {
			A[i+1] = Integer.parseInt(data[i]);
		}

		buildMaxHeap(A);

		for (int i=1; i < H+1; i++) {
			System.out.print(" " + A[i]);
		}
		System.out.println();
	}

	// index of left child of Node of index i
	private static int left(int i) {
		return i*2;
	}

	// index of right child
	private static int right(int i) {
		return i*2 + 1;
	}

	// index i ???Node????????¨?????????????????????????????¨????????????
	// 3??????Node??????????????????????????§???????????????????????´??????
	public static void maxHeapify(int[] A, int i) {
		int H = A.length - 1; // A[0...H]
		int l = left(i);
		int r = right(i);
		int largest;

		//????????????????????????????????§???????????§????????????????????¶
		if (l <= H && A[l] > A[i]) largest = l;
		else largest = i;
		if (r <= H && A[r] > A[largest])
			largest = r;

		if (largest != i) { // i???????????????????????§????????´???
			int temp = A[i];
			A[i] = A[largest];
			A[largest] = temp;
			maxHeapify(A, largest);
		}
	}

	// H/2 = q -> H = 2q or H = 2q + 1
	// i = H/2 +1 -> 2i >= H+1 ?????£???i?????????????????¨?????????
	public static void buildMaxHeap(int[] A) {
		int H = A.length - 1;
		for (int i = H/2; 0 < i; i--) {
			maxHeapify(A, i);
		}
	}
}