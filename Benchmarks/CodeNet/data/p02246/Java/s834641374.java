
import java.util.*;

class field{
	int[] cell = new int[16];
	int evaluation;
	int[] route;
	int floor;

	field(int[] cell, int hash){
		floor = 1;
		route = new int[1];
		route[0] = hash; //route[0]????????¶?????????????????\??????
		for(int i=0;i<16;i++) this.cell[i] = cell[i];
		int eva = 0;
		for(int i=0;i<16;i++){
			if(cell[i] != 0){
				//?¨???????????????¢?????????
				//i:????????????????????????
				//cell[i]:????????????????????°???
				eva += Math.abs((cell[i]-1)%4 - i%4);
				//?????????????????¢?????????
				eva += Math.abs((cell[i]-1)/4 - i/4);
			}
		}
		evaluation = eva;
	}

	/**/
	field(int[] cell, int[] route, int hash){
		this.floor = route.length;
		this.route = new int[floor+1];
		System.arraycopy(route, 0, this.route, 0, floor);
		this.route[floor] = hash; //hash???????´???????
		for(int i=0;i<16;i++) this.cell[i] = cell[i];
		int eva = 0;
		for(int i=0;i<16;i++){
			if(cell[i] != 0){
				//?¨???????????????¢?????????
				//i:????????????????????????
				//cell[i]:????????????????????°???
				eva += Math.abs((cell[i]-1)%4 - i%4);
				//?????????????????¢?????????
				eva += Math.abs((cell[i]-1)/4 - i/4);
			}
		}
		evaluation = eva; //??¨????????????
	}

	public String toString(){
		return new String(cell[0] + " " + cell[1] + " " + cell[2] + " " + cell[3] + "\n" +
			 cell[4] + " " + cell[5] + " " + cell[6] + " " + cell[7] + "\n" +
			 cell[8] + " " + cell[9] + " " + cell[10] + " " + cell[11] + "\n" +
			 cell[12] + " " + cell[13] + " " + cell[14] + " " + cell[15] + "\n");
	}
}

/**/

class ev_list{
	field elem;
	ev_list next;

	ev_list(){
		next = null;
		this.elem = null;
	}

	ev_list(field elem){
		next = null;
		this.elem = elem;
	}

	public void insert(ev_list node){
		//?????\??????????????£????????¢??°??????????¬???????????????????????????§?????????
		//??????????¬???????????????????????????¨????????\
		if(this.next == null || this.next.elem.evaluation + this.next.elem.floor < node.elem.evaluation + node.elem.floor){
			//?¬????????????????????????\??????????????£????????¢??°??????????°??????????
			//this, this.next???node????????\??????this, node, node.next(this.next)?????????
			node.next = this.next;
			this.next = node;
		}else this.next.insert(node);
		//?¬????????????????????????????????????§?????????????¬????????????????node????????\??????
	}

	public field pop(){
		if(this.next == null) return null;
		if(this.next.next == null){ //?¬?????¬????null??????
			field temp = this.next.elem; //???????¬?????????£????????????temp???
			this.next = null; //???????¬????null?????????
			return temp; //???????¬??????£????????£????????????temp?????????
		}else return this.next.pop(); //?¬?????¬????null??§????????£??????????¬????pop??????
		//?????????????´????????????????
	}
}

/**/

public class Main{
	static final int LEFT = 0;
	static final int RIGHT = 1;
	static final int UP = 2;
	static final int DOWN = 3;
	static final int[] factor = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8172, 16344, 32688}; //1???????§????????????????????´????2?????????

	//???????????\??????????????¢??°
	static public int hashkey(int[] cell){
		int[] val = new int[16];
		System.arraycopy(cell, 0, val, 0, 16);
		for(int i=0;i<16;i++){
			for(int j=i+1;j<16;j++){
				if(val[j] > val[i]) val[j]--;
			}
		}
		//val??????0??????????????????????????????????????????????????????????????\?????¢????????°
		int hash = 0;
		for(int i=0;i<16;i++){
			hash += val[i] * factor[15-i]; //factor????????§????????°?????????????????????????????????????????????
		}
		return hash;
	}

	/**/

	static public field dehash(int key){
		int[] cell = new int[16];
		for(int i=0;i<16;i++){
			cell[i] = key/factor[15-i]; //factor????????§????????°??????????????£????????????cell???val??¨??????
			key %= factor[15-i]; //factor?????????????????????key???
		}
		for(int i=15;i>=0;i--){
			for(int j=i+1;j<16;j++){
				if(cell[i] <= cell[j]) cell[j]++;
			}
		}
		//hash??????key??????????????¨??????val???cell??????????????????????????§??????cell???????????????dehash??§??????
		return new field(cell, key);
	}

	/**/

	//4*4????????£????????????????§??????§????????????
	//move[i][LEFT]:??????????????????(0,1)
	//move[i][RIGHT]:??????????????????(0,1)
	//move[i][UP]:??????????????????(0,1)
	//move[i][DOWN]:??????????????????(0,1)
	static boolean[][] move = new boolean[16][4];

	public static void main(String[] args){

		//?§????????????????????¨??????¨???

		//?§??????§?????????????????????????????????????¨??????????
		//????????????????????????????????????
		move[0][RIGHT]=move[1][RIGHT]=move[2][RIGHT]=move[4][RIGHT]=move[5][RIGHT]=move[6][RIGHT]=move[8][RIGHT]=move[9][RIGHT]=move[10][RIGHT]=move[12][RIGHT]=move[13][RIGHT]=move[14][RIGHT]=true;
		move[3][RIGHT]=move[7][RIGHT]=move[11][RIGHT]=move[15][RIGHT]=false;

		/**/
		//????????????????????????????????????
		move[1][LEFT]=move[2][LEFT]=move[3][LEFT]=move[5][LEFT]=move[6][LEFT]=move[7][LEFT]=move[9][LEFT]=move[10][LEFT]=move[11][LEFT]=move[13][LEFT]=move[14][LEFT]=move[15][LEFT]=true;
		move[0][LEFT]=move[4][LEFT]=move[8][LEFT]=move[12][LEFT]=false;

		//????????????????????????????????????
		move[0][UP]=move[1][UP]=move[2][UP]=move[3][UP]=false;
		move[4][UP]=move[5][UP]=move[6][UP]=move[7][UP]=move[8][UP]=move[9][UP]=move[10][UP]=move[11][UP]=move[12][UP]=move[13][UP]=move[14][UP]=move[15][UP]=true;

		//????????????????????????????????????
		move[12][DOWN]=move[13][DOWN]=move[14][DOWN]=move[15][DOWN]=false;
		move[0][DOWN]=move[1][DOWN]=move[2][DOWN]=move[3][DOWN]=move[4][DOWN]=move[5][DOWN]=move[6][DOWN]=move[7][DOWN]=move[8][DOWN]=move[9][DOWN]=move[10][DOWN]=move[11][DOWN]=true;

		/**/
		//????????????????¨??????¨???
		//????????????
		field st;
		int[] cell = new int[16];

		Scanner scan = new Scanner(System.in).useDelimiter("[\\s]+");
		for(int i=0;i<4;i++)
			for(int j=0;j<4;j++)
				cell[4*i+j] = scan.nextInt();
		//for?????§??°???????????§cell??\???

		st = new field(cell, hashkey(cell)); //??¨????????¢?????¨?????????????????¨???????????\??????????????£????????????????????????

		//???????????\????????????
		boolean[] visited = new boolean[362880];
		for(int i=0;i<362880;i++)
			visited[i] = false;
		//visited[i]???????¨?????????????

		//??¢?´¢??¨???

		//??????????????????????¨????
		ev_list list = new ev_list();
		list.insert(new ev_list(st)); //?????????????????£?????????????????\??????
		visited[hashkey(cell)] = true; //???????????\????????????????????????true?????????

		field cur;
		int hash;
		int count=0;
		while( (cur=list.pop() )!= null){
			count++; //??¢?´¢?????°???1?¢???????

			/**/
			for(int i=0;i<16;i++){
				if(cur.cell[i]==0){ //cur????????¬???????????£????????????cell[i]???0??????
					if(move[i][LEFT]){ //?????????????????????????????¨??????
						cur.cell[i]=cur.cell[i-1];
						cur.cell[i-1]=0;
						hash=hashkey(cur.cell); //hashkey?????????
						if(!visited[hash]){ //hashkey????¨??????????????????????
							visited[hash]=true;
							list.insert(new ev_list(new field(cur.cell, cur.route, hash) ));
						}
						cur.cell[i-1]=cur.cell[i]; //????????????
						cur.cell[i]=0;
					}
					/**/
					if(move[i][RIGHT]){
						cur.cell[i]=cur.cell[i+1];
						cur.cell[i+1]=0;
						hash=hashkey(cur.cell);
						if(!visited[hash]){
							visited[hash]=true;
							list.insert(new ev_list(new field(cur.cell, cur.route, hash) ));
						}
						cur.cell[i+1]=cur.cell[i];
						cur.cell[i]=0;
					}
					/**/
					if(move[i][UP]){
						cur.cell[i]=cur.cell[i-4];
						cur.cell[i-4]=0;
						hash=hashkey(cur.cell);
						if(!visited[hash]){
							visited[hash]=true;
							list.insert(new ev_list(new field(cur.cell, cur.route, hash) ));
						}
						cur.cell[i-4]=cur.cell[i];
						cur.cell[i]=0;
					}
					/**/
					if(move[i][DOWN]){
						cur.cell[i]=cur.cell[i+4];
						cur.cell[i+4]=0;
						hash=hashkey(cur.cell);
						if(!visited[hash]){
							visited[hash]=true;
							list.insert(new ev_list(new field(cur.cell, cur.route, hash) ));
						}
						cur.cell[i+4]=cur.cell[i];
						cur.cell[i]=0;
					}
				}
			}
			/**/
			if(cur.evaluation==0){ //??¨???????????????0????????£??????
				System.out.println(cur.route.length-1); //cur.route?????????-1???????????????
				//System.out.println(count+"");
				//System.out.println("evaluation[ " +0+ " ]=" + dehash(cur.route[0]).evaluation + "\n" + dehash(cur.route[0]) );
				//evaluation??¨???????????????cur.route[0]?????????????????\?????????toString()
				//for(int i=1;i<cur.route.length;i++){
					//System.out.println("???");
					//System.out.println("evaluation[ " +i+ " ]=" + dehash(cur.route[i]).evaluation);
					//System.out.println("evaluation + floor[ " +i+ " ]=" + (dehash(cur.route[i]).evaluation + i) );
					//evaluation??¨???????????????floor?§?????????¢
					//System.out.println( dehash(cur.route[i]).toString() );
				//}
				break;
			}
		}
	}
}