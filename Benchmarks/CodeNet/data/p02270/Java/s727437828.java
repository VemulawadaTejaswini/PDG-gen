import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {
	public static void main(String[] args) throws Exception {
		// TODO ?????????????????????????????????????????????
		BufferedReader br =
				new BufferedReader( new InputStreamReader(System.in) );

		String[] data = br.readLine().split(" ");
		int n = Integer.parseInt(data[0]); // the number of w
		int k = Integer.parseInt(data[1]); // the number of tracks

		int[] w = new int[n];
		int max = 0; // max of w[i]
		for (int i=0; i < n; i++) {
			w[i] = Integer.parseInt( br.readLine() );
			if (max < w[i]) {
				max = w[i];
			}
		}

		int pmax = 0;
		if (n%k == 0) {
			pmax = n/k * max;
		} else{
			pmax = (n/k + 1) * max;
		}
//		int pmax = (int)Math.ceil((double)n/k) * max;
//		int[] pi = new int[pmax - max + 1]; // pi.length = pmax-max+1
//		for (int i=0; max + i <= pmax; i++) { // pi.length-1 = pmax-max
//			pi[i] = max + i; // pi = {max, max+1, max+2, ... , pmax}
//		}

		/**
		 * binarysearch
		 */
		int l = max; // left
		int r = pmax; // right
		while (l != r) {
			int mid = (l + r) / 2;
			if ( canload(mid, k , w) ) {
				r = mid;
			} else {
				l = mid+1;
			}
		}
		System.out.println(l);
	}

	/*
	 * max???????????????????????????k??°??§???????????????w??????????????????????????????
	 */
	static boolean canload(int max, int k, int[] w) {
		int count = 1; // ?????????????????°??°???k????¶????????????±???
		int p = 0; // ?????????????????????????????????????????????max????¶???????????????????????¬????????????????
		int n = w.length;
		int i = 0;

		while (true) {
			p += w[i];
			if (p > max) {
				count++;
				if (count > k) {
					return false;
				}
				p = 0;
			} else {
				i++;
				if (i == n) {
					return true;
				}
			}
		}

	}
}