
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

public class Main {
	public static void main(String[] args) throws Exception {
		// ???????????§?????????????????????0?????????,1???????????????2????????????????????????3??????????£??????????
		int[][] seats = new int[17][3];

		for (int count = 0; count < 17; count++) {
			for (int doneTime = 0; doneTime < 3; doneTime++) {
				seats[count][doneTime] = 0;
			}
		}
		// ?????????????????£???????????????????´????????????????
		List<String> waitingCustomersList = new ArrayList<String>();

		List<String> list = new ArrayList<String>();

		List<String> waitingStartTimeList = new ArrayList<String>();

		List<String> appointedGroupList = new ArrayList<String>();

		BufferedReader input = new BufferedReader(new InputStreamReader(
				System.in));

		int group = 0;
		int timeGoesBy = 0;
		int numberOfCustomer = 0;

		while (true) {
			String inputData = input.readLine();

			// ??\???????????????null???????????????????????????????????????????????????
			if (inputData == null || inputData.equals("")) {
				break;
			}

			appointedGroupList.add(inputData);

		}

		for (int countTimeGoesBy = 0; countTimeGoesBy < 3000; countTimeGoesBy++) {

			// ?£????????????£?????¢??????????????£??????????????????
			seats = getoutCustomer(seats, timeGoesBy);

			int countDelete = 0;

			// ?????£????????????????????§??£????????????
			for (int count = 0; count < waitingCustomersList.size(); count++) {
				numberOfCustomer = getNumberOfHuman(Integer
						.parseInt(waitingCustomersList.get(count)));

				if (isSeatsAvailable(seats, numberOfCustomer, timeGoesBy,
						Integer.parseInt(waitingCustomersList.get(count)))) {
					seats = getSeats(seats, numberOfCustomer, timeGoesBy,
							Integer.parseInt(waitingCustomersList.get(count)));

					countDelete++;

					for (String appointedGroup : appointedGroupList) {
						if (Integer.parseInt(waitingCustomersList.get(count)) == Integer
								.parseInt(appointedGroup)) {

							list.add(Integer.toString(timeGoesBy
									- Integer.parseInt(waitingStartTimeList
											.get(count))));

							break;

						}
					}
				} else {
					break;
				}

			}
			for (int countt = 0; countt < countDelete; countt++) {
				waitingCustomersList.remove(0);
				waitingStartTimeList.remove(0);
			}

			// ??¢?????????
			if (timeGoesBy % 5 == 0) {

				// ??¢????????°???????????????
				numberOfCustomer = getNumberOfHuman(group);

				if (waitingCustomersList.isEmpty()) {
					// ??????????????????????????????????????°?????????????????????????????°???????????????????????????
					if (isSeatsAvailable(seats, numberOfCustomer, timeGoesBy,
							group)) {
						seats = getSeats(seats, numberOfCustomer, timeGoesBy,
								group);

						// ???????????????????????????????????????????????????
						for (int countLoop = 0; countLoop < appointedGroupList
								.size(); countLoop++) {

							if (group == Integer.parseInt(appointedGroupList
									.get(countLoop))) {
								list.add(Integer.toString(0));
							}
						}
					} else {
						waitingCustomersList.add(Integer.toString(group));
						waitingStartTimeList.add(Integer.toString(timeGoesBy));

					}
				} else {
					waitingCustomersList.add(Integer.toString(group));
					waitingStartTimeList.add(Integer.toString(timeGoesBy));
				}

				group++;
			}
			timeGoesBy++;
		}
		for (String waitingTime : list) {
			System.out.println(waitingTime);
		}
	}

	// ??¢???????????§?????????????????????????????§????????°???????????????
	static int[][] getSeats(int[][] seats, int numberOfCustomer,
			int timeGoesBy, int group) {
		int countAvailableSeats = 0;
		int count = 0;
		for (int[] seat : seats) {
			if (seat[0] == 0) {
				countAvailableSeats++;
			} else {
				countAvailableSeats = 0;
			}
			count++;
			if (countAvailableSeats == numberOfCustomer) {
				for (int count1 = count - numberOfCustomer; count1 < count; count1++) {
					seats[count1][0] = 1;
					seats[count1][1] = timeGoesBy;
					seats[count1][2] = 17 * (group % 2) + 3 * (group % 3) + 19;
				}
				return seats;
			}
		}
		return seats;
	}

	static boolean isSeatsAvailable(int[][] seats, int numberOfCustomer,
			int timeGoesBy, int group) {
		int countAvailableSeats = 0;
		for (int[] seat : seats) {
			if (seat[0] == 0) {
				countAvailableSeats++;
			} else {
				countAvailableSeats = 0;
			}
			if (countAvailableSeats == numberOfCustomer) {

				return true;
			}
		}
		return false;
	}

	// ??¢????????°???????????????
	static int getNumberOfHuman(int group) {
		int judgeNumver = group % 5;
		if (judgeNumver == 1) {
			return 5;
		} else {
			return 2;
		}

	}

	// ?£????????????£?????¢??????????????????
	static int[][] getoutCustomer(int[][] seats, int timeGoesBy) {
		for (int count = 0; count < 17; count++) {
			if (seats[count][1] + seats[count][2] == timeGoesBy) {
				seats[count][0] = 0;
			}
		}
		return seats;

	}

}