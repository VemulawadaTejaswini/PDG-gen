import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class Main {

	/** ??°???????????° */
	static final int MAX_GROUP_NUKMBER = 100;

	/** ??§????????? */
	static int[] sheets = new int[17];

	/** ?????????????????? */
	static int[] waitTimes = new int[100];

	/** ???????????? */
	static Map<Integer, Integer> waitLine = new LinkedHashMap<Integer, Integer>();

	/** ??????????±? */
	static Set<Integer> deleteTarget = new HashSet<Integer>();

	/** ??????????????? */
	static List<Integer> inputs = new ArrayList<Integer>();

	/** ?????§??°??????????????? */
	static int maxGroupNumber;

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// ?????¨?????°???????????°
		int groupNumber = 0;

		// ??????????????????????????????
		int time = 0;

		Scanner scanner = new Scanner(System.in);

		while (scanner.hasNextInt()) {
			int inputNum = scanner.nextInt();
			if (maxGroupNumber < inputNum) {
				maxGroupNumber = inputNum;
			}
			inputs.add(inputNum);
		}

		while (groupNumber < MAX_GROUP_NUKMBER) {
			if (time % 5 == 0) {
				// ??°????????¢
				// i???????????°?????????????????°??? i%5 ??? 1 ?????¨???5??????????????\????????¨??????2???
				waitLine.put(groupNumber, (groupNumber % 5 == 1 ? 5 : 2));
				waitTimes[groupNumber] = time;

				groupNumber++;
				// ?????§??°???????????????????????°????????????????????§?????????????????????????????§??°????????????????????????????????°??????????????????
				if (maxGroupNumber < groupNumber
						&& !waitLine.containsKey(maxGroupNumber)) {
					break;
				}
			}

			// ??¢????????¢
			for (Map.Entry<Integer, Integer> entry : waitLine.entrySet()) {
				// ?????????->entry.getValue(); ->?????°
				int startPos = getOpendSheetsPosition(entry.getValue());
				if (startPos >= 0) {
					// ??§????????´???
					// ??§???????????????????¢???? -> ?£??????????????¨????->entry.getKey()
					secureSheets(startPos, calcMealtime(entry.getValue()),
							entry.getValue());

					// ????????????????????????
					deleteTarget.add(entry.getKey());
					waitTimes[entry.getKey()] = time - waitTimes[entry.getKey()];
				} else {
					// ??§???????????´???
					break;
				}

			}

			// ??????????????????????????????
			for (int target : deleteTarget) {
				waitLine.remove(target);
			}

			// ??§??????????????????????????????????????????
			for (int i = 0; i < sheets.length; i++) {
				if (sheets[i] > 0) {
					sheets[i] -= 1;
				}
			}

			time++;
		}

		for (int input : inputs) {
			System.out.println(waitTimes[input]);
		}
	}

	/**
	 * ????????????????????????????????????????????´????????? ??????????????????????????´??????-1????????´?????????
	 *
	 * @param peopleNum
	 *            ??°?????????????????°
	 * @return ????????????????????????????????????
	 */
	private static int getOpendSheetsPosition(int peopleNum) {
		int startPos = -1;
		int openedSheetNum = 0;
		for (int i = 0; i < sheets.length; i++) {
			if (sheets[i] == 0) {
				if (startPos == -1) {
					startPos = i;
				}
				openedSheetNum++;
			} else {
				startPos = -1;
				openedSheetNum = 0;
			}

			if (openedSheetNum == peopleNum) {
				return startPos;
			}
		}
		return -1;
	}

	/**
	 * ??°?????????????????????????£??????????????¨??????????
	 *
	 * @param targetGroup
	 *            ????±??????°???????????????
	 * @return ?£??????????
	 */
	private static int calcMealtime(int targetGroup) {
		return 17 * (targetGroup % 2) + 3 * (targetGroup % 3) + 19;
	}

	/**
	 * ???????¢?????????????
	 *
	 * @param startPos
	 *            ????¢?????????????????????????
	 * @param mealtime
	 *            ?£??????????
	 * @param peopleNum
	 *            ??°?????????????????°
	 */
	private static void secureSheets(int startPos, int mealtime, int peopleNum) {
		for (int i = 0; i < peopleNum; i++) {
			sheets[i + startPos] = mealtime;
		}
	}
}