import java.util.Scanner;

public class Main {

	private static int count = 0;

	public static class Card{
		public String sort;
		public int num;
		public Card(String sort, int num){
			this.sort = sort;
			this.num = num;
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		sc.useDelimiter(System.getProperty("line.separator"));
		int n = sc.nextInt();
		String[] A = new String[n];

		for (int i = 0; i < n; i++) {
			A[i] = sc.next();
		}

		Card[] cards = createCards(A, n);
		Card[] cardsM = createCards(A, n);
		quickSort(cards,0, n-1);
		mergeSort(cardsM,0,n);

		boolean stable = true;
		for (int i = 0; i < n; i++) {
			if(!(cards[i].sort).equals(cardsM[i].sort)){stable = false;}
		}

		if(stable){
			System.out.println("Stable");
		}else{
			System.out.println("Not stable");
		}

		for (int i = 0; i < n; i++) {
			System.out.println(cards[i].sort + " " + cards[i].num);
		}

	}

	private static void mergeSort(Card[] A, int left, int right) {
		if(left+1 < right){
			int mid = (left+right)/2;
			mergeSort(A,left,mid);
			mergeSort(A, mid, right);
			merge(A,left,mid,right);
		}

	}

	private static void merge(Card[] a, int left, int mid, int right) {
		final int MAX = 2147483647;
		int n1 = mid - left;
		int n2 = right -mid;
		Card[] l1 = new Card[n1+1];
		Card[] r1 = new Card[n2+1];
		for(int i=0; i<n1; i++){
			l1[i] = a[left+i];
		}
		for(int i=0; i<n2; i++){
			r1[i] = a[mid+i];
		}
		l1[n1] = new Card("X",MAX);
		r1[n2] = new Card("X",MAX);
		int i=0;
		int j=0;
		for(int k=left; k<right; k++){
			if(l1[i].num <= r1[j].num){
				a[k] = l1[i++];
			}else{
				a[k] = r1[j++];
			}
		}
	}


	private static void quickSort(Card[] cards, int p, int r) {
		if(p<r){
			//???????????????
			int q = partition(cards, p, r);
			//??????????????????????????????????????????????????????
			quickSort(cards, p, q-1);
			//??????????????????????????????????????????????????????
			quickSort(cards, q+1, r);
		}

	}


	private static Card[] createCards(String[] a, int n) {
		Card[] cards = new Card[n];
		for (int i = 0; i < n; i++) {
			String sort = a[i].split(" ")[0];
			int num = Integer.parseInt(a[i].split(" ")[1]);
			cards[i] = new Card(sort, num);

		}
		return cards;
	}


	private static int partition(Card[] a, int p, int r) {
		//??????????±??????????????????????????´???????????????????
		int x = a[r].num;
		//????????????????°????????????°???????????????????????????????????????????´?
		int i = p-1;

		//?????????2?????????????´????????????????????´?????????????????????§????????????
		for(int j=p; j<r; j++){
			//????????????????°?????????£??????????°?????????°?????????????§????
			if(a[j].num<=x){
				i++;
				Card tmp = a[i];
				a[i] = a[j];
				a[j] = tmp;
			}
		}
		//????????????????°?????????°?????????????????????????¬?????????¨?????????????????????
		Card tmp = a[i+1];
		a[i+1] = a[r];
		a[r] = tmp;

		return i+1;

	}


	private static int[] toIntAry(String str, int n) {
        String[] tmp = str.split(" ");
        int[] A = new int[n];
        for (int i = 0; i < n; i++) {
			A[i] = Integer.parseInt(tmp[i]);
		}
        return A;
	}


}