import java.util.Scanner;

public class Main {


//	static int[][] square;
	static int width;
	static int height;
	static int min;

	 public static void main(String[] args)throws Exception{

		 Scanner sc = new Scanner(System.in);

		 while(true)
		 {
			 min =  Integer.MAX_VALUE;

			 width = sc.nextInt();
			 height = sc.nextInt();

			 if( width ==0 && height ==0)
				 return;

			 int[][] square = new int[width][height];

			 int start_W=0,start_H=0;
			 int end_W,end_H;


			 for(int j=0;j<height;j++)
			 {
				 for(int i=0;i<width;i++)
					 {
					 square[i][j] = sc.nextInt();
					 if(square[i][j] == 2)
					 {
						 start_W=i;
						 start_H = j;
					 }

					 if(square[i][j] == 3)
					 {
						 end_W=i;
						 end_H = j;
					 }
				 }
			 }
			 

			 int[][] square2 = new int[width][height];
			 for(int j=0;j<height;j++)
			 {
				 for(int i=0;i<width;i++)
					 {
					 square2[i][j] = square[i][j];
					
				 }
			 }
			 int[][] square3 = new int[width][height];
			 for(int j=0;j<height;j++)
			 {
				 for(int i=0;i<width;i++)
					 {
					 square3[i][j] = square[i][j];
					
				 }
			 }

			 int[][] square4 = new int[width][height];
			 for(int j=0;j<height;j++)
			 {
				 for(int i=0;i<width;i++)
					 {
					 square4[i][j] = square[i][j];
					
				 }
			 }


			 search(start_W,start_H,0,1,square);
			 search(start_W,start_H,0,2,square2);
			 search(start_W,start_H,0,3,square3);
			 search(start_W,start_H,0,4,square4);


			 System.out.println(min <= 10 ? min : -1);

		 }//while??????
	 }


	 private static void search(int x,int y,int count,int direction,int[][] square)
	 {
		 count++;
		 if(count > 10)
			 return;

//		 System.out.println(""+count+":"+direction);


		 /*if(count == 2 && direction == 2 ){
			 System.out.println("??§??????"+direction);
		 for(int j=0;j<height;j++)
		 {
			 for(int i=0;i<width;i++)
			 {
				System.out.print(" "+square[i][j]);
			 }
			 System.out.println("");

		 }
		 }
		 */
		 
		 //?§????

		 int startX =x;
		 int startY = y;

		 switch(direction){
		 //???
		 case 1:
			 if(x + 1 < width && square[x+1][y] == 1)
				 return;

			 while(true)
			 {
				startX++;
				//????????????????????´???????????????
				if(startX >= width)
					return;

				//??´???????????°???????????´???????°?????????´??°??????????????????
				 if(square[startX][startY] == 3)
				 {
					if(count <min)
						min = count;
					 return;
				 }
				 //??????????????¶????????£?????´????????????????????????????¬???????????????\??? ???????????????????????£??\?????????1????????°????????????
				 if(square[startX][startY] == 1)
				 {
						 square[startX][startY] = 0;
						 x = startX-1;
						 break;
				 }

			 }
			 break;
		//???
		 case 2:
			 if(x - 1  >= 0 && square[x-1][y] == 1)
				 return;
			 while(true)
			 {
				startX--;
				//????????????????????´???????????????
				if(startX < 0)
					return;
				//??´???????????°???????????´???????°?????????´??°??????????????????
				 if(square[startX][startY] == 3)
				 {
					if(count <min)
						min = count;
					 return;
				 }

				 //??????????????¶????????£?????´????????????????????????????¬???????????????\??? ???????????????????????£??\?????????1????????°????????????
				 if(square[startX][startY] == 1)
				 {
					 square[startX][startY] = 0;
					 x = startX +1;
					 break;
				 }
			 }
			 break;
		//???
		 case 3:
			 if(y + 1 < height && square[x][y+1] == 1)
			 {

				 return;
			 }
			 while(true)
			 {

				startY++;
				//????????????????????´???????????????
				if(startY >=  height)
				{

					 return;
				}
				//??´???????????°???????????´???????°?????????´??°??????????????????
				 if(square[startX][startY] == 3)
				 {
					if(count <min)
						min = count;
					 return;
				 }

				 //??????????????¶????????£?????´????????????????????????????¬???????????????\??? ???????????????????????£??\?????????1????????°????????????
				 if(square[startX][startY] == 1)
				 {
					 square[startX][startY] = 0;
					 y = startY -1;
					 break;
				 }
			 }
			 break;
		 case 4:
			 if(y -1 >= 0 && square[x][y-1] == 1)
				 return;
			 while(true)
			 {
				startY--;
				//????????????????????´???????????????
				if(startY < 0)
					return;
				//??´???????????°???????????´???????°?????????´??°??????????????????
				 if(square[startX][startY] == 3)
				 {
					if(count <min)
						min = count;
					 return;
				 }
			 //??????????????¶????????£?????´????????????????????????????¬???????????????\??? ???????????????????????£??\?????????1????????°????????????
			 if(square[startX][startY] == 1)
			 {
				y = startY+1;
				 square[startX][startY] = 0;
				 break;

			 }
			 }
			 break;
		 }

		 int[][] square2 = new int[width][height];
		 for(int j=0;j<height;j++)
		 {
			 for(int i=0;i<width;i++)
				 {
				 square2[i][j] = square[i][j];
				
			 }
		 }
		 int[][] square3 = new int[width][height];
		 for(int j=0;j<height;j++)
		 {
			 for(int i=0;i<width;i++)
				 {
				 square3[i][j] = square[i][j];
				
			 }
		 }

		 int[][] square4 = new int[width][height];
		 for(int j=0;j<height;j++)
		 {
			 for(int i=0;i<width;i++)
				 {
				 square4[i][j] = square[i][j];
				
			 }
		 }
		 

		 search(x,y,count,1,square);
		 search(x,y,count,2,square2);
		 search(x,y,count,3,square3);
		 search(x,y,count,4,square4);


	 }




}