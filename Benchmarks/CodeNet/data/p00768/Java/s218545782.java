/*{
300 50 10 736
0 49 8 8
0 45 10 3
0 32 2 8
0 19 5 3
1 45 1 10
1 8 2 10
1 32 2 6
1 32 2 0
1 45 1 0
1 15 6 3
1 33 1 8
2 21 3 6
2 32 7 0
2 35 7 5
2 45 6 4
2 21 3 9
2 21 3 0
3 16 1 4
3 32 9 9
3 6 8 4
3 45 10 0
4 8 2 8
4 5 4 2
4 23 1 8
4 33 6 8
5 42 1 2
5 1 5 9
5 47 9 6
5 33 6 9
6 27 7 3
6 19 4 0
6 6 8 3
6 13 4 10
6 6 8 0
6 33 1 0
6 46 7 6
6 19 10 10
7 6 3 8
7 6 1 2
7 5 10 3
7 49 2 3
8 25 2 7
8 15 10 5
8 30 10 6
8 28 5 3
9 17 9 2
9 8 4 9
9 47 9 9
9 47 9 0
9 45 9 5
10 7 4 3
10 20 8 4
10 7 4 10
10 40 9 10
10 20 8 0
11 10 2 9
11 24 6 4
12 36 3 1
12 16 1 3
13 44 9 0
13 33 6 0
13 50 7 7
13 31 2 1
13 12 9 6
13 6 6 10
14 39 2 10
14 32 10 2
15 14 4 0
15 40 2 4
15 49 2 0
15 4 6 4
15 29 4 8
15 8 4 0
16 6 3 5
16 30 8 6
16 7 2 1
16 23 10 8
16 32 9 2
17 8 6 7
17 16 4 0
17 7 4 0
18 6 3 0
18 5 4 2
18 8 3 7
18 5 4 0
18 19 1 0
18 25 3 10
19 1 1 5
19 49 3 5
19 2 7 0
19 37 10 6
19 16 1 0
19 31 9 8
20 36 6 1
20 8 3 8
20 1 5 6
21 16 6 6
21 15 10 9
22 25 3 8
22 49 6 4
22 42 1 2
22 21 9 4
22 32 6 3
22 32 4 1
22 25 4 3
22 23 6 4
22 27 3 5
23 11 9 7
23 23 6 5
23 47 6 8
24 7 5 10
24 31 4 8
24 23 5 3
24 45 3 0
24 31 9 4
25 45 6 10
25 31 2 0
25 12 9 6
25 15 3 0
25 21 8 5
25 42 9 8
25 41 4 0
26 41 10 5
26 16 2 4
26 33 2 6
26 23 6 0
26 8 2 0
27 15 2 7
27 6 4 3
28 29 10 2
28 24 6 3
29 12 5 2
29 41 3 1
29 41 10 1
29 42 3 4
29 23 3 9
30 45 6 0
30 40 7 7
30 32 1 6
30 8 3 0
31 30 3 9
31 19 10 5
31 33 7 7
31 49 4 5
31 4 2 5
31 36 6 0
31 31 6 8
31 19 8 9
32 44 8 0
32 49 4 4
32 50 7 0
32 4 5 8
33 49 8 6
33 18 2 5
33 20 1 3
34 19 2 7
34 5 6 5
34 22 2 1
34 33 4 0
34 34 2 10
35 20 10 5
35 28 7 4
35 41 10 0
35 17 8 4
35 49 9 0
35 49 6 7
36 18 7 6
36 26 6 4
37 49 3 7
37 23 1 7
37 21 8 2
37 35 6 4
37 1 5 0
37 27 6 7
37 49 3 0
38 39 1 1
38 22 2 8
38 35 6 10
38 25 3 0
38 13 10 6
39 37 2 6
39 41 3 7
40 31 7 5
40 2 4 10
40 49 1 6
41 37 1 5
41 14 1 5
41 25 10 9
41 34 3 3
41 22 9 5
42 20 1 2
43 23 1 0
43 5 8 1
43 3 2 8
44 20 1 0
44 24 2 8
44 5 8 3
45 34 6 8
45 22 3 6
46 33 2 5
46 34 1 4
46 33 2 0
46 14 3 4
46 18 2 0
47 9 2 9
47 18 6 7
47 8 10 8
48 20 4 0
48 21 8 0
48 42 6 1
48 18 3 8
49 4 7 10
49 44 6 1
49 50 9 7
49 8 10 5
49 50 3 4
50 18 8 9
50 30 5 7
50 33 8 0
50 1 1 6
51 35 6 0
51 49 4 0
51 9 8 9
51 2 8 1
52 5 7 0
52 14 5 7
52 2 2 8
52 17 5 1
53 32 1 0
53 27 7 2
53 41 1 3
54 23 3 7
54 9 2 5
54 18 3 5
54 40 10 2
54 42 1 0
54 15 6 0
55 16 5 3
55 45 8 8
56 21 10 3
56 27 5 4
56 23 9 3
57 20 7 5
57 17 4 1
57 19 8 0
57 12 6 10
57 40 1 8
58 9 8 6
58 42 9 6
58 23 2 4
58 11 6 2
58 17 9 8
58 49 1 0
58 34 7 9
59 23 4 2
59 30 10 0
59 6 2 9
59 9 8 0
59 34 6 0
59 18 5 1
60 11 5 8
60 10 7 6
61 15 2 0
61 33 3 7
61 9 7 10
61 5 2 0
62 22 3 3
63 38 5 4
63 44 5 6
63 43 7 3
63 18 10 6
63 20 6 1
64 10 5 0
64 31 3 6
64 19 7 9
65 38 5 8
65 49 7 3
65 48 9 9
65 9 10 0
65 11 6 0
67 29 3 9
67 9 3 5
67 11 4 0
67 37 5 7
68 44 4 2
68 40 6 1
68 3 7 7
68 13 9 6
69 28 5 8
69 49 5 2
69 1 7 0
70 20 7 6
70 21 7 8
71 17 7 8
71 10 10 5
72 35 7 10
72 4 4 9
72 24 2 6
73 30 3 0
73 44 4 0
73 32 3 4
73 1 1 0
73 36 3 5
73 32 9 0
74 5 3 4
75 33 7 10
76 47 6 3
76 42 8 9
76 16 2 1
76 2 8 2
77 16 2 0
77 9 2 0
78 35 7 0
78 12 5 7
78 25 7 3
78 29 4 4
79 34 4 8
79 23 5 4
80 17 9 0
80 30 8 0
81 16 3 10
82 34 9 2
82 23 9 0
83 15 4 8
83 6 2 7
83 12 8 8
83 26 5 8
84 12 3 7
84 32 6 0
85 21 10 0
85 1 3 7
85 45 8 10
85 8 9 3
85 46 10 4
85 44 7 0
86 16 6 3
86 1 6 6
86 11 8 4
86 35 3 4
87 20 10 0
87 6 2 0
87 42 5 7
88 44 10 7
89 10 4 10
89 31 1 0
89 42 4 8
89 38 5 0
91 23 7 4
91 18 3 0
91 5 6 0
91 6 1 0
91 25 7 0
92 6 9 2
92 7 10 4
92 23 3 0
92 18 5 7
93 36 7 7
93 27 5 5
94 47 6 0
95 3 9 2
95 36 7 8
96 31 5 3
96 30 1 0
97 5 9 4
97 18 8 10
97 36 10 10
98 16 9 3
98 26 1 4
99 3 7 1
99 20 9 0
99 16 7 7
100 25 9 7
101 22 6 6
101 11 1 7
101 11 1 0
102 44 5 1
102 45 8 0
102 46 3 6
103 2 5 6
103 13 7 3
103 24 5 0
104 18 8 0
104 9 5 9
104 36 9 3
104 2 4 6
104 38 8 5
105 13 7 3
106 6 4 3
106 9 6 0
106 2 4 0
106 48 3 0
107 5 9 8
107 42 5 3
108 6 9 0
109 45 7 0
110 3 6 7
110 21 2 7
110 9 4 7
112 7 10 1
112 3 7 0
112 29 10 1
112 5 3 0
112 4 6 3
112 36 7 0
112 35 2 3
113 29 10 0
113 38 6 6
113 13 6 6
114 4 8 8
114 49 5 0
115 15 7 10
115 15 9 0
116 31 3 7
116 23 10 1
117 3 8 7
117 36 5 3
118 42 8 10
118 1 10 7
119 1 10 2
119 2 8 0
120 5 8 0
121 30 9 0
121 22 9 0
122 14 8 0
122 38 2 0
122 23 10 0
123 47 3 3
123 50 1 4
123 21 5 9
123 44 3 4
123 12 8 8
124 26 9 4
124 45 9 9
124 40 9 9
125 33 9 2
125 44 5 0
125 30 2 6
126 18 4 0
126 9 4 7
126 34 7 3
127 45 2 6
128 32 10 5
128 19 7 6
128 41 6 1
129 47 3 7
130 32 4 10
130 35 10 0
130 11 3 10
131 10 6 4
131 38 10 9
131 13 1 10
132 17 8 10
132 18 10 0
134 22 4 0
135 8 1 8
135 26 7 4
136 12 4 9
138 17 1 5
138 10 1 10
139 50 6 6
139 35 5 5
139 22 3 0
140 40 2 1
140 15 7 8
140 1 4 0
141 6 4 0
142 27 5 0
142 13 6 7
143 33 3 7
143 23 7 0
144 23 4 8
145 16 8 6
147 15 8 0
148 40 4 1
148 34 8 3
148 12 7 7
149 11 7 9
149 49 7 3
150 24 10 1
151 2 3 0
151 18 6 0
151 40 4 7
151 26 9 8
152 12 2 8
152 32 3 7
152 39 3 1
153 10 1 0
155 11 8 1
155 46 4 4
155 8 8 2
156 29 6 3
156 45 9 0
156 49 8 0
157 39 3 8
157 4 7 0
157 11 7 7
158 38 9 8
159 32 3 0
159 35 8 6
160 19 3 3
162 42 9 0
162 46 8 1
162 41 7 0
162 27 9 10
163 19 2 0
163 30 7 0
164 22 6 0
164 40 10 0
165 4 10 2
165 44 2 0
165 20 6 0
168 18 5 0
169 11 7 0
169 29 1 2
169 28 6 10
170 23 2 4
172 10 4 0
172 15 7 0
172 22 5 0
173 50 6 3
173 18 7 8
173 24 7 9
174 6 10 0
174 3 3 8
175 31 3 0
175 24 7 1
175 26 10 4
177 12 7 3
177 11 3 10
177 6 6 0
178 43 1 4
178 8 7 7
178 33 3 0
180 12 3 8
180 39 6 3
180 16 9 0
181 6 7 0
181 32 4 0
182 10 8 8
183 18 7 0
183 40 3 9
184 15 1 0
184 32 10 0
185 6 5 0
185 38 7 8
185 22 2 0
185 49 6 0
186 43 4 7
187 31 5 8
188 44 10 0
188 5 5 0
190 8 10 0
190 17 7 5
190 12 4 8
191 23 8 0
191 14 2 9
191 20 7 0
192 28 1 4
192 26 6 10
192 42 4 10
193 35 8 0
194 41 2 8
194 8 7 10
195 33 9 0
195 8 8 4
196 11 9 7
196 8 6 2
196 38 9 1
196 40 3 9
198 50 3 3
198 17 2 6
198 5 10 2
199 25 8 6
199 29 3 7
199 47 2 9
200 50 10 5
200 41 9 10
201 15 10 0
201 25 6 6
201 45 4 4
201 3 10 2
202 11 2 3
204 4 10 0
204 24 9 10
204 12 5 0
204 34 2 3
204 43 5 7
205 45 4 0
205 31 9 0
206 33 5 5
207 16 10 0
207 39 2 10
207 34 4 6
207 15 5 0
208 38 7 9
209 30 5 0
210 8 6 0
212 43 1 0
212 27 9 3
213 49 7 0
214 13 10 6
216 42 2 9
217 28 2 6
217 46 3 3
217 5 1 0
218 41 3 0
218 12 8 0
218 43 5 0
218 4 4 0
218 44 1 0
219 25 8 0
220 46 4 5
220 17 6 2
220 27 1 10
220 17 8 0
222 5 10 0
222 44 3 5
223 22 7 0
223 9 9 0
224 1 3 7
224 35 9 9
225 4 1 2
225 14 2 4
225 30 4 0
226 11 10 7
226 29 9 9
227 11 2 0
227 32 5 0
227 40 9 0
227 39 6 3
228 21 6 0
230 40 6 7
230 2 10 9
230 5 9 0
230 35 1 6
231 37 6 1
231 24 10 8
231 28 1 8
233 49 10 1
234 45 2 3
235 35 2 0
236 43 8 0
236 50 1 3
236 28 7 3
237 16 3 0
237 34 9 2
237 9 3 0
237 49 10 9
238 8 7 0
238 35 5 3
239 23 4 0
240 19 10 0
240 14 3 1
240 17 6 9
241 38 9 0
241 43 9 6
242 27 10 4
242 38 4 0
243 21 1 3
244 29 9 10
244 17 3 3
245 14 9 10
246 44 3 0
248 50 5 6
249 22 10 0
251 36 5 0
251 22 8 7
251 36 8 0
251 50 10 1
252 39 4 10
252 8 9 10
253 22 8 0
254 10 10 1
254 23 5 0
255 1 9 6
256 38 10 4
258 41 1 4
259 26 7 1
259 3 10 6
259 17 7 0
260 30 2 0
260 3 1 7
261 38 3 6
261 42 2 8
262 24 4 0
262 47 4 0
262 40 6 0
263 9 1 0
263 17 5 7
264 31 10 0
265 14 9 1
266 29 8 10
266 49 10 0
266 39 1 9
266 4 8 0
268 50 5 3
268 3 4 0
268 3 10 0
269 47 7 0
270 2 6 5
271 42 10 6
271 39 7 8
271 21 5 0
273 39 9 8
273 21 7 0
274 3 1 1
276 35 3 9
276 40 5 7
277 20 2 0
277 4 5 10
278 1 10 0
278 21 2 0
279 2 2 1
280 48 1 10
280 1 9 0
281 17 1 10
283 27 1 7
283 31 7 0
283 46 5 3
283 15 4 0
284 44 6 0
284 8 1 0
285 19 3 10
286 30 6 0
287 16 5 0
287 40 5 0
287 38 6 9
289 13 4 4
290 36 3 0
291 34 1 3
291 41 9 0
291 41 2 4
295 26 10 2
296 25 2 4
296 43 6 9
297 31 5 0
 }*/
package icpc.icpcranking;

import java.util.*;
import java.util.stream.Collectors;

/**
 * Created by ctare on 2017/05/08.
 */
public class Main {
    private static final int Tn = 50 + 1;
    private static final int Mn = 300 + 1;
    private static final int Pn = 10 + 1;
    private static ArrayList<String> buf;
    private static int[][] simple_rank(int[][] team, Set<Integer> exteam){
        int[][] winner = new int[Pn][Tn];
        for (int i = 0; i < team.length; i++) {
            int[] ints = team[i];
            if(exteam.contains(i)) winner[Arrays.stream(ints).sum()][i] = 1;
        }
        return winner;
    }

    private static void rank(int[] team, int[][][] team_sub){
        TreeMap<Integer, ArrayList<Integer>> rankresult = new TreeMap<>();
        for (int i = 0; i < team.length; i++) {
            if(team[i] == 1){
                int sum_time = 0;
                for (int[] ms : team_sub[i]) {
                    sum_time += calc_point(ms);
                }
                ArrayList<Integer> rr = rankresult.getOrDefault(sum_time, new ArrayList<>());
                rr.add(i);
                rankresult.put(sum_time, rr);
//                System.out.print("--- ");
//                System.out.print(sum_time);
//                System.out.println(" : " + i);
            }
        }
//        System.out.println(rankresult.values());
//        rankresult.values().forEach(e -> {
//            System.out.println(String.join("=", e.stream().sorted(Comparator.reverseOrder()).map(Object::toString).collect(Collectors.toList())));
//        });
        rankresult.values().forEach(e -> {
            buf.add(String.join("=", e.stream().sorted(Comparator.reverseOrder()).map(Object::toString).collect(Collectors.toList())));
        });
    }

    private static int calc_point(int[] times){
//        System.out.println("calcpoint");
//        System.out.println(Arrays.toString(times));
        int result = 0;
        forelse: {
            for (int i = 0; i < times.length; i++) {
                if(times[i] == -1) result += 20;
                else if(times[i] == 1) {
                    result += i;
                    break forelse;
                }
            }
            result = 0;
        }
//        System.out.println(result);
//        System.out.println("calcpoint end");
        return result;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("hoge");
        while(true){
            buf = new ArrayList<>();
            int M = sc.nextInt(), T = sc.nextInt(), P = sc.nextInt(), R = sc.nextInt();
            if(M == 0 && T == 0 && P == 0 && R == 0) break;
            int[][] team = new int[Tn][Pn];
            int[][][] team_sub = new int[Tn][Pn][Mn];
            Set<Integer> exteam = new HashSet<>();
            for (int i = 1; i <= T; i++) {
                exteam.add(i);
            }
            for (int i = 0; i < R; i++) {
                int m = sc.nextInt(), t = sc.nextInt(), p = sc.nextInt(), j = sc.nextInt();
                team[t][p] |= (j == 0 ? 1 : 0);
                team_sub[t][p][m] = (j == 0 ? 1 : 0)*2 - 1;
            }

            int[][] winner = simple_rank(team, exteam);
            for (int i = winner.length - 1; i >= 0; i--) {
                int sum = Arrays.stream(winner[i]).sum();
                if(sum > 1){
                    rank(winner[i], team_sub);
                } else if(sum > 0) {
                    buf.add(String.valueOf(Arrays.stream(winner[i]).boxed().collect(Collectors.toList()).indexOf(1)));
//                    System.out.println(String.valueOf(Arrays.stream(winner[i]).boxed().collect(Collectors.toList()).indexOf(1)));
                }
            }

            System.out.println(String.join(",", buf));
        }
    }
}