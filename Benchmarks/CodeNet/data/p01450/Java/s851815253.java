import java.util.Arrays;
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		new Main().solver();
	}

	final long MOD = 1_000_000_000 + 7;

	void solver() {
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();// the number of friends
		int W = sc.nextInt();// the capacity
		int[] w = new int[N];
		for (int i = 0; i < N; i++) {
			w[i] = sc.nextInt();
		}
		Arrays.sort(w);
		/*
		 * dp[k][i][j]????????????k?????????????????????????????§????£???°?????????????????????????°?????????????
		 * ?????????????????????i?????????????£???°???????????????????????°????????¨??????n?????§????????????????????????j??§????????¨????????´????????°???
		 */

		long[][][] dp = new long[2][210][10010];
		dp[0][N][W] = 0;
		for (int k = 0; k < N; k++) {
			int cur = k % 2, next = (k + 1) % 2;
			for (int i = 0; i <= N; i++) {
				for (int j = 0; j <= W; j++) {
					dp[next][i][j] = 0;
				}
			}
			for (int i = 0; i <= N; i++) {
				for (int j = 0; j <= W; j++) {
					if (dp[cur][i][j] == 0)
						continue;
					if (j - w[k] < 0)
						continue;
					dp[next][i][j - w[k]] += dp[cur][i][j] %= MOD;
					dp[next][Math.min(i, k)][j] += dp[cur][i][j] %= MOD;
				}
			}
		}
		long ret = 0;
		for (int i = 0; i <= N; i++) {
			for (int j = 0; j <= W; j++) {
				if (i == N || j < w[i]) {
					ret += dp[N % 2][i][j] %= MOD;
				}
			}
		}
		System.out.println(ret % MOD);
	}
}