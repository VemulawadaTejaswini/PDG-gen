Line_0 $$ Entry-->Line_1 $$ public class Main [ CD ]
Line_1 $$ public class Main -->Line_3 $$ public static void main(String[] args) [ CD ]
Line_3 $$ public static void main(String[] args) -->Line_5 $$ int[] num = new int[3][ CD ]
Line_3 $$ public static void main(String[] args) -->Line_6 $$ Scanner sc = new Scanner(System.in)[ CD ]
Line_3 $$ public static void main(String[] args) -->Line_7 $$ int i, temp, sorted, count = 0, minimum[ CD ]
Line_3 $$ public static void main(String[] args) -->Line_8 $$ for (i = 0; i < 3; i++) [ CD ]
Line_3 $$ public static void main(String[] args) -->Line_3 $$ public static void main(String[] args) [ CD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_8 $$ for (i = 0; i < 3; i++) [ CD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_8 $$ for (i = 0; i < 3; i++) [ CD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_10 $$ num[i] = sc.nextInt()[ CD ]
Line_10 $$ num[i] = sc.nextInt()-->Line_10 $$ num[i] = sc.nextInt()[ CD ]
Line_6 $$ Scanner sc = new Scanner(System.in)-->Line_10 $$ num[i] = sc.nextInt()[ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_11 $$ count++[ CD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_11 $$ count++[ FD ]
Line_3 $$ public static void main(String[] args) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ CD ]
Line_3 $$ public static void main(String[] args) -->Line_3 $$ public static void main(String[] args) [ CD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ CD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ CD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_15 $$ minimum = sorted[ CD ]
Line_15 $$ minimum = sorted-->Line_15 $$ minimum = sorted[ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_15 $$ minimum = sorted[ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_15 $$ minimum = sorted[ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_15 $$ minimum = sorted[ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ CD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ CD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ CD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ CD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_18 $$ if (num[i] < num[minimum]) [ CD ]
Line_18 $$ if (num[i] < num[minimum]) -->Line_20 $$ minimum = i[ CD ]
Line_20 $$ minimum = i-->Line_20 $$ minimum = i[ FD ]
Line_15 $$ minimum = sorted-->Line_20 $$ minimum = i[ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_20 $$ minimum = i[ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_20 $$ minimum = i[ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_20 $$ minimum = i[ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_20 $$ minimum = i[ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_23 $$ temp = num[minimum][ CD ]
Line_23 $$ temp = num[minimum]-->Line_23 $$ temp = num[minimum][ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_23 $$ temp = num[minimum][ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_24 $$ num[minimum] = num[sorted][ CD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_25 $$ num[sorted] = temp[ CD ]
Line_23 $$ temp = num[minimum]-->Line_25 $$ num[sorted] = temp[ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_25 $$ num[sorted] = temp[ FD ]
Line_3 $$ public static void main(String[] args) -->Line_27 $$ for (i = 0; i < count; i++) [ CD ]
Line_3 $$ public static void main(String[] args) -->Line_3 $$ public static void main(String[] args) [ CD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ CD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ CD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_29 $$ System.out.printf("%d", num[i])[ CD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_30 $$ if (i < count - 1)[ CD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_30 $$ if (i < count - 1)[ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_30 $$ if (i < count - 1)[ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_30 $$ if (i < count - 1)[ FD ]
Line_7 $$ int i, temp, sorted, count = 0, minimum-->Line_30 $$ if (i < count - 1)[ FD ]
Line_30 $$ if (i < count - 1)-->Line_30 $$ System.out.printf(" ")[ CD ]
Line_3 $$ public static void main(String[] args) -->Line_32 $$ System.out.printf("\n")[ CD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_8 $$ for (i = 0; i < 3; i++) -->Line_8 $$ for (i = 0; i < 3; i++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_13 $$ for (sorted = 0; sorted < count; sorted++) [ FD ]
Line_13 $$ for (sorted = 0; sorted < count; sorted++) -->Line_15 $$ minimum = sorted[ FD ]
Line_23 $$ temp = num[minimum]-->Line_25 $$ num[sorted] = temp[ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_16 $$ for (i = sorted + 1; i < count; i++) [ FD ]
Line_16 $$ for (i = sorted + 1; i < count; i++) -->Line_20 $$ minimum = i[ FD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_27 $$ for (i = 0; i < count; i++) [ FD ]
Line_27 $$ for (i = 0; i < count; i++) -->Line_30 $$ if (i < count - 1)[ FD ]
