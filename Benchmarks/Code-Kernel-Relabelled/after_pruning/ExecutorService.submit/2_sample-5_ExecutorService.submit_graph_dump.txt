Line_2 $$ public void runTest(final Class<?> clazz, final Method method, final int invocationCount, final int threadCount, final Class<?>[] expected) --> Line_3 $$ final ExecutorService executor = Executors.newFixedThreadPool(threadCount) [CD]
Line_2 $$ public void runTest(final Class<?> clazz, final Method method, final int invocationCount, final int threadCount, final Class<?>[] expected) --> Line_3 $$ final ExecutorService executor = Executors.newFixedThreadPool(threadCount) [FD]
Line_2 $$ public void runTest(final Class<?> clazz, final Method method, final int invocationCount, final int threadCount, final Class<?>[] expected) --> Line_4 $$ final List<Future<Class<?>[]>> futures = new ArrayList<Future<Class<?>[]>>(threadCount) [CD]
Line_2 $$ public void runTest(final Class<?> clazz, final Method method, final int invocationCount, final int threadCount, final Class<?>[] expected) --> Line_5 $$ for (int i = threadCount; i > 0; i--) [CD]
Line_5 $$ for (int i = threadCount; i > 0; i--) --> Line_6 $$ futures.add(executor.submit(new Worker(clazz, method, invocationCount))) [CD]
Line_4 $$ final List<Future<Class<?>[]>> futures = new ArrayList<Future<Class<?>[]>>(threadCount) --> Line_6 $$ futures.add(executor.submit(new Worker(clazz, method, invocationCount))) [FD]
Line_3 $$ final ExecutorService executor = Executors.newFixedThreadPool(threadCount) --> Line_6 $$ futures.add(executor.submit(new Worker(clazz, method, invocationCount))) [FD]
