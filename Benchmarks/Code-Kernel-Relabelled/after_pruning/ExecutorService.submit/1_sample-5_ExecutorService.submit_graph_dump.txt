Line_2 $$ public void runTest(Class<?> clazz, int invocationCount, int threadCount, Boolean expected) --> Line_3 $$ final ExecutorService executor = Executors.newFixedThreadPool(threadCount) [CD]
Line_2 $$ public void runTest(Class<?> clazz, int invocationCount, int threadCount, Boolean expected) --> Line_3 $$ final ExecutorService executor = Executors.newFixedThreadPool(threadCount) [FD]
Line_2 $$ public void runTest(Class<?> clazz, int invocationCount, int threadCount, Boolean expected) --> Line_4 $$ final List<Future<Boolean>> futures = new ArrayList<Future<Boolean>>(threadCount) [CD]
Line_2 $$ public void runTest(Class<?> clazz, int invocationCount, int threadCount, Boolean expected) --> Line_5 $$ for (int i = threadCount; i > 0; i--) [CD]
Line_5 $$ for (int i = threadCount; i > 0; i--) --> Line_6 $$ futures.add(executor.submit(new Worker(clazz, invocationCount))) [CD]
Line_4 $$ final List<Future<Boolean>> futures = new ArrayList<Future<Boolean>>(threadCount) --> Line_6 $$ futures.add(executor.submit(new Worker(clazz, invocationCount))) [FD]
Line_3 $$ final ExecutorService executor = Executors.newFixedThreadPool(threadCount) --> Line_6 $$ futures.add(executor.submit(new Worker(clazz, invocationCount))) [FD]
