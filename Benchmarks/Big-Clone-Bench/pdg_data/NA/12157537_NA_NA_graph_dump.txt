Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException [ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_3 $$ pm.beginTask("Creating temp project", 1)[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_3 $$ pm.beginTask("Creating temp project", 1)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_4 $$ final String pName = "translation_" + project.getName() + "_" + new Date().toString().replace(" ", "_").replace(":", "_")[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_4 $$ final String pName = "translation_" + project.getName() + "_" + new Date().toString().replace(" ", "_").replace(":", "_")[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_5 $$ final IProgressMonitor npm = new NullProgressMonitor()[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_6 $$ final IPath destination = new Path(pName)[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_7 $$ project.copy(destination, false, npm)[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_7 $$ project.copy(destination, false, npm)[ FD ]
Line_6 $$ final IPath destination = new Path(pName)-->Line_7 $$ project.copy(destination, false, npm)[ FD ]
Line_5 $$ final IProgressMonitor npm = new NullProgressMonitor()-->Line_7 $$ project.copy(destination, false, npm)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_8 $$ final IJavaProject oldJavaproj = JavaCore.create(project)[ CD ]
Line_8 $$ final IJavaProject oldJavaproj = JavaCore.create(project)-->Line_8 $$ final IJavaProject oldJavaproj = JavaCore.create(project)[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_8 $$ final IJavaProject oldJavaproj = JavaCore.create(project)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_9 $$ final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()[ CD ]
Line_9 $$ final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()-->Line_9 $$ final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()[ CD ]
Line_8 $$ final IJavaProject oldJavaproj = JavaCore.create(project)-->Line_9 $$ final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_10 $$ final IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject("NewProjectName")[ CD ]
Line_10 $$ final IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject("NewProjectName")-->Line_10 $$ final IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject("NewProjectName")[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_11 $$ final IProjectDescription desc = project.getDescription()[ CD ]
Line_11 $$ final IProjectDescription desc = project.getDescription()-->Line_11 $$ final IProjectDescription desc = project.getDescription()[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_11 $$ final IProjectDescription desc = project.getDescription()[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_12 $$ desc.setNatureIds(new String[] [ CD ]
Line_11 $$ final IProjectDescription desc = project.getDescription()-->Line_12 $$ desc.setNatureIds(new String[] [ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_13 $$ project.setDescription(desc, null)[ CD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_13 $$ project.setDescription(desc, null)[ FD ]
Line_11 $$ final IProjectDescription desc = project.getDescription()-->Line_13 $$ project.setDescription(desc, null)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_14 $$ final IJavaProject javaproj = JavaCore.create(newProject)[ CD ]
Line_14 $$ final IJavaProject javaproj = JavaCore.create(newProject)-->Line_14 $$ final IJavaProject javaproj = JavaCore.create(newProject)[ CD ]
Line_10 $$ final IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject("NewProjectName")-->Line_14 $$ final IJavaProject javaproj = JavaCore.create(newProject)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_15 $$ javaproj.setOutputLocation(project.getFullPath(), null)[ CD ]
Line_14 $$ final IJavaProject javaproj = JavaCore.create(newProject)-->Line_15 $$ javaproj.setOutputLocation(project.getFullPath(), null)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_15 $$ javaproj.setOutputLocation(project.getFullPath(), null)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_16 $$ final List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()[ CD ]
Line_17 $$ for (final IClasspathEntry cEntry : newClassPath) -->Line_18 $$ switch(cEntry.getContentKind()) [ FD ]
Line_17 $$ for (final IClasspathEntry cEntry : newClassPath) -->Line_20 $$ System.out.println("Source folder " + cEntry.getPath())[ FD ]
Line_16 $$ final List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_23 $$ newClassPath.add(cEntry)[ FD ]
Line_17 $$ for (final IClasspathEntry cEntry : newClassPath) -->Line_23 $$ newClassPath.add(cEntry)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_26 $$ javaproj.setRawClasspath(classPath, pm)[ CD ]
Line_14 $$ final IJavaProject javaproj = JavaCore.create(newProject)-->Line_26 $$ javaproj.setRawClasspath(classPath, pm)[ FD ]
Line_9 $$ final IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()-->Line_26 $$ javaproj.setRawClasspath(classPath, pm)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_26 $$ javaproj.setRawClasspath(classPath, pm)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_27 $$ final IProject newP = ws.getRoot().getProject(pName)[ CD ]
Line_27 $$ final IProject newP = ws.getRoot().getProject(pName)-->Line_27 $$ final IProject newP = ws.getRoot().getProject(pName)[ CD ]
Line_4 $$ final String pName = "translation_" + project.getName() + "_" + new Date().toString().replace(" ", "_").replace(":", "_")-->Line_27 $$ final IProject newP = ws.getRoot().getProject(pName)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_27 $$ final IProject newP = ws.getRoot().getProject(pName)[ FD ]
Line_2 $$ private IProject createCopyProject(IProject project, IWorkspace ws, IProgressMonitor pm) throws CoreException -->Line_28 $$ return newP[ CD ]
