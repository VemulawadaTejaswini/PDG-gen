Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void copy(File source, File destination) [ CD ]
Line_2 $$ private void copy(File source, File destination) -->Line_3 $$ if (!destination.exists()) [ CD ]
Line_3 $$ if (!destination.exists()) -->Line_3 $$ if (!destination.exists()) [ CD ]
Line_3 $$ if (!destination.exists()) -->Line_3 $$ if (!destination.exists()) [ CD ]
Line_2 $$ private void copy(File source, File destination) -->Line_3 $$ if (!destination.exists()) [ FD ]
Line_3 $$ if (!destination.exists()) -->Line_4 $$ destination.mkdir()[ CD ]
Line_2 $$ private void copy(File source, File destination) -->Line_4 $$ destination.mkdir()[ FD ]
Line_2 $$ private void copy(File source, File destination) -->Line_6 $$ File files[] = source.listFiles()[ CD ]
Line_6 $$ File files[] = source.listFiles()-->Line_6 $$ File files[] = source.listFiles()[ CD ]
Line_2 $$ private void copy(File source, File destination) -->Line_6 $$ File files[] = source.listFiles()[ FD ]
Line_2 $$ private void copy(File source, File destination) -->Line_7 $$ if (files != null) [ CD ]
Line_7 $$ if (files != null) -->Line_8 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_7 $$ if (files != null) -->Line_7 $$ if (files != null) [ CD ]
Line_8 $$ for (int i = 0; i < files.length; i++) -->Line_8 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < files.length; i++) -->Line_8 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < files.length; i++) -->Line_8 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < files.length; i++) -->Line_9 $$ if (files[i].isDirectory()) [ CD ]
Line_9 $$ if (files[i].isDirectory()) -->Line_9 $$ if (files[i].isDirectory()) [ CD ]
Line_9 $$ if (files[i].isDirectory()) -->Line_10 $$ copy(files[i], new File(destination, files[i].getName()))[ CD ]
Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()-->Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()[ CD ]
Line_14 $$ FileChannel dstChannel = new FileOutputStream(new File(destination, files[i].getName())).getChannel()-->Line_14 $$ FileChannel dstChannel = new FileOutputStream(new File(destination, files[i].getName())).getChannel()[ CD ]
Line_14 $$ FileChannel dstChannel = new FileOutputStream(new File(destination, files[i].getName())).getChannel()-->Line_15 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()-->Line_15 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()-->Line_15 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()-->Line_16 $$ srcChannel.close()[ FD ]
Line_14 $$ FileChannel dstChannel = new FileOutputStream(new File(destination, files[i].getName())).getChannel()-->Line_17 $$ dstChannel.close()[ FD ]
Line_2 $$ private void copy(File source, File destination) -->Line_19 $$ log.error("Could not write to " + destination.getAbsolutePath(), ioe)[ FD ]
Line_8 $$ for (int i = 0; i < files.length; i++) -->Line_8 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < files.length; i++) -->Line_8 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < files.length; i++) -->Line_8 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_14 $$ FileChannel dstChannel = new FileOutputStream(new File(destination, files[i].getName())).getChannel()-->Line_15 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()-->Line_15 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()-->Line_15 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_13 $$ FileChannel srcChannel = new FileInputStream(files[i]).getChannel()-->Line_16 $$ srcChannel.close()[ FD ]
Line_14 $$ FileChannel dstChannel = new FileOutputStream(new File(destination, files[i].getName())).getChannel()-->Line_17 $$ dstChannel.close()[ FD ]
