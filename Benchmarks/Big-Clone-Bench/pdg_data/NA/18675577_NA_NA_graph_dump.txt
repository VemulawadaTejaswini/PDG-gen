Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException [ CD ]
Line_2 $$ public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException -->Line_3 $$ final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(file.getCanonicalFile())))[ CD ]
Line_2 $$ public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException -->Line_3 $$ final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(file.getCanonicalFile())))[ FD ]
Line_2 $$ public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException -->Line_4 $$ ZipEntry ze[ CD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_6 $$ while (null != (ze = zis.getNextEntry())) [ FD ]
Line_4 $$ ZipEntry ze-->Line_6 $$ while (null != (ze = zis.getNextEntry())) [ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_6 $$ while (null != (ze = zis.getNextEntry())) [ CD ]
Line_3 $$ final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(file.getCanonicalFile())))-->Line_6 $$ while (null != (ze = zis.getNextEntry())) [ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())[ CD ]
Line_2 $$ public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException -->Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())[ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())[ FD ]
Line_4 $$ ZipEntry ze-->Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())[ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_8 $$ if (f.exists())[ CD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_8 $$ if (f.exists())[ FD ]
Line_8 $$ if (f.exists())-->Line_8 $$ if (f.exists())[ CD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_8 $$ if (f.exists())[ FD ]
Line_8 $$ if (f.exists())-->Line_8 $$ f.delete()[ CD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_8 $$ f.delete()[ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_9 $$ if (ze.isDirectory()) [ CD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_9 $$ if (ze.isDirectory()) [ FD ]
Line_4 $$ ZipEntry ze-->Line_9 $$ if (ze.isDirectory()) [ FD ]
Line_9 $$ if (ze.isDirectory()) -->Line_9 $$ if (ze.isDirectory()) [ CD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_9 $$ if (ze.isDirectory()) [ FD ]
Line_4 $$ ZipEntry ze-->Line_9 $$ if (ze.isDirectory()) [ FD ]
Line_9 $$ if (ze.isDirectory()) -->Line_10 $$ f.mkdirs()[ CD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_10 $$ f.mkdirs()[ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_13 $$ f.getParentFile().mkdirs()[ CD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_13 $$ f.getParentFile().mkdirs()[ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_14 $$ final OutputStream fos = new BufferedOutputStream(new FileOutputStream(f))[ CD ]
Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)-->Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)[ FD ]
Line_18 $$ int bytesRead-->Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)[ FD ]
Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)-->Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)[ CD ]
Line_3 $$ final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(file.getCanonicalFile())))-->Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)[ FD ]
Line_17 $$ final byte[] buf = new byte[8192]-->Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)[ FD ]
Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)-->Line_19 $$ fos.write(buf, 0, bytesRead)[ CD ]
Line_14 $$ final OutputStream fos = new BufferedOutputStream(new FileOutputStream(f))-->Line_19 $$ fos.write(buf, 0, bytesRead)[ FD ]
Line_17 $$ final byte[] buf = new byte[8192]-->Line_19 $$ fos.write(buf, 0, bytesRead)[ FD ]
Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)-->Line_19 $$ fos.write(buf, 0, bytesRead)[ FD ]
Line_18 $$ int bytesRead-->Line_19 $$ fos.write(buf, 0, bytesRead)[ FD ]
Line_14 $$ final OutputStream fos = new BufferedOutputStream(new FileOutputStream(f))-->Line_21 $$ fos.close()[ FD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_24 $$ f.delete()[ FD ]
Line_3 $$ final ZipInputStream zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(file.getCanonicalFile())))-->Line_29 $$ zis.close()[ FD ]
Line_2 $$ public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException -->Line_31 $$ if (deleteZipAfter)[ CD ]
Line_31 $$ if (deleteZipAfter)-->Line_31 $$ file.delete()[ CD ]
Line_2 $$ public static void decompress(final File file, final File folder, final boolean deleteZipAfter) throws IOException -->Line_31 $$ file.delete()[ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())[ FD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_8 $$ if (f.exists())[ FD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_8 $$ if (f.exists())[ FD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_8 $$ f.delete()[ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_9 $$ if (ze.isDirectory()) [ FD ]
Line_6 $$ while (null != (ze = zis.getNextEntry())) -->Line_9 $$ if (ze.isDirectory()) [ FD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_10 $$ f.mkdirs()[ FD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_13 $$ f.getParentFile().mkdirs()[ FD ]
Line_14 $$ final OutputStream fos = new BufferedOutputStream(new FileOutputStream(f))-->Line_21 $$ fos.close()[ FD ]
Line_7 $$ final File f = new File(folder.getCanonicalPath(), ze.getName())-->Line_24 $$ f.delete()[ FD ]
Line_19 $$ while (-1 != (bytesRead = zis.read(buf))) fos.write(buf, 0, bytesRead)-->Line_19 $$ fos.write(buf, 0, bytesRead)[ FD ]
