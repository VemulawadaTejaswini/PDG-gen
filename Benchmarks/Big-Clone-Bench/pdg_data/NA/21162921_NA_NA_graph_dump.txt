Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception [ CD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_3 $$ File source = new File(filePath + File.separator + docuBean.getFileName())[ CD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_3 $$ File source = new File(filePath + File.separator + docuBean.getFileName())[ FD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_4 $$ File dir = new File(filePath + File.separator + docuBean.getId())[ CD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_4 $$ File dir = new File(filePath + File.separator + docuBean.getId())[ FD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_5 $$ if (!dir.exists()) [ CD ]
Line_5 $$ if (!dir.exists()) -->Line_5 $$ if (!dir.exists()) [ CD ]
Line_5 $$ if (!dir.exists()) -->Line_5 $$ if (!dir.exists()) [ CD ]
Line_4 $$ File dir = new File(filePath + File.separator + docuBean.getId())-->Line_5 $$ if (!dir.exists()) [ FD ]
Line_5 $$ if (!dir.exists()) -->Line_6 $$ dir.mkdir()[ CD ]
Line_4 $$ File dir = new File(filePath + File.separator + docuBean.getId())-->Line_6 $$ dir.mkdir()[ FD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_8 $$ File in = source[ CD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_9 $$ boolean isSpace = false[ CD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_10 $$ if (source.getName().indexOf(" ") != -1) [ CD ]
Line_3 $$ File source = new File(filePath + File.separator + docuBean.getFileName())-->Line_10 $$ if (source.getName().indexOf(" ") != -1) [ FD ]
Line_10 $$ if (source.getName().indexOf(" ") != -1) -->Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))[ CD ]
Line_8 $$ File in = source-->Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))[ FD ]
Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))-->Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))[ FD ]
Line_3 $$ File source = new File(filePath + File.separator + docuBean.getFileName())-->Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))[ FD ]
Line_3 $$ File source = new File(filePath + File.separator + docuBean.getFileName())-->Line_13 $$ IOUtils.copyFile(source, in)[ FD ]
Line_8 $$ File in = source-->Line_13 $$ IOUtils.copyFile(source, in)[ FD ]
Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))-->Line_13 $$ IOUtils.copyFile(source, in)[ FD ]
Line_10 $$ if (source.getName().indexOf(" ") != -1) -->Line_17 $$ isSpace = true[ CD ]
Line_9 $$ boolean isSpace = false-->Line_17 $$ isSpace = true[ FD ]
Line_17 $$ isSpace = true-->Line_17 $$ isSpace = true[ FD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_19 $$ File finalPdf = null[ CD ]
Line_21 $$ String outPath = dir.getAbsolutePath()-->Line_21 $$ String outPath = dir.getAbsolutePath()[ CD ]
Line_4 $$ File dir = new File(filePath + File.separator + docuBean.getId())-->Line_21 $$ String outPath = dir.getAbsolutePath()[ FD ]
Line_22 $$ final File pdf = DocViewerConverter.toPDF(in, outPath)-->Line_22 $$ final File pdf = DocViewerConverter.toPDF(in, outPath)[ CD ]
Line_8 $$ File in = source-->Line_22 $$ final File pdf = DocViewerConverter.toPDF(in, outPath)[ FD ]
Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))-->Line_22 $$ final File pdf = DocViewerConverter.toPDF(in, outPath)[ FD ]
Line_21 $$ String outPath = dir.getAbsolutePath()-->Line_22 $$ final File pdf = DocViewerConverter.toPDF(in, outPath)[ FD ]
Line_22 $$ final File pdf = DocViewerConverter.toPDF(in, outPath)-->Line_23 $$ convertToSwf(pdf, outPath, docuBean)[ FD ]
Line_21 $$ String outPath = dir.getAbsolutePath()-->Line_23 $$ convertToSwf(pdf, outPath, docuBean)[ FD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_23 $$ convertToSwf(pdf, outPath, docuBean)[ FD ]
Line_19 $$ File finalPdf = null-->Line_24 $$ finalPdf = new File(outPath + File.separator + FileUtils.getFilePrefix(StringUtils.replace(source.getName(), " ", "")) + "_decrypted.pdf")[ FD ]
Line_24 $$ finalPdf = new File(outPath + File.separator + FileUtils.getFilePrefix(StringUtils.replace(source.getName(), " ", "")) + "_decrypted.pdf")-->Line_24 $$ finalPdf = new File(outPath + File.separator + FileUtils.getFilePrefix(StringUtils.replace(source.getName(), " ", "")) + "_decrypted.pdf")[ FD ]
Line_3 $$ File source = new File(filePath + File.separator + docuBean.getFileName())-->Line_24 $$ finalPdf = new File(outPath + File.separator + FileUtils.getFilePrefix(StringUtils.replace(source.getName(), " ", "")) + "_decrypted.pdf")[ FD ]
Line_25 $$ if (!finalPdf.exists()) -->Line_25 $$ if (!finalPdf.exists()) [ CD ]
Line_25 $$ if (!finalPdf.exists()) -->Line_25 $$ if (!finalPdf.exists()) [ CD ]
Line_19 $$ File finalPdf = null-->Line_25 $$ if (!finalPdf.exists()) [ FD ]
Line_24 $$ finalPdf = new File(outPath + File.separator + FileUtils.getFilePrefix(StringUtils.replace(source.getName(), " ", "")) + "_decrypted.pdf")-->Line_25 $$ if (!finalPdf.exists()) [ FD ]
Line_25 $$ if (!finalPdf.exists()) -->Line_26 $$ finalPdf = pdf[ CD ]
Line_19 $$ File finalPdf = null-->Line_26 $$ finalPdf = pdf[ FD ]
Line_24 $$ finalPdf = new File(outPath + File.separator + FileUtils.getFilePrefix(StringUtils.replace(source.getName(), " ", "")) + "_decrypted.pdf")-->Line_26 $$ finalPdf = pdf[ FD ]
Line_26 $$ finalPdf = pdf-->Line_26 $$ finalPdf = pdf[ FD ]
Line_22 $$ final File pdf = DocViewerConverter.toPDF(in, outPath)-->Line_26 $$ finalPdf = pdf[ FD ]
Line_19 $$ File finalPdf = null-->Line_28 $$ pdfByFirstPageToJpeg(finalPdf, outPath, docuBean)[ FD ]
Line_24 $$ finalPdf = new File(outPath + File.separator + FileUtils.getFilePrefix(StringUtils.replace(source.getName(), " ", "")) + "_decrypted.pdf")-->Line_28 $$ pdfByFirstPageToJpeg(finalPdf, outPath, docuBean)[ FD ]
Line_26 $$ finalPdf = pdf-->Line_28 $$ pdfByFirstPageToJpeg(finalPdf, outPath, docuBean)[ FD ]
Line_21 $$ String outPath = dir.getAbsolutePath()-->Line_28 $$ pdfByFirstPageToJpeg(finalPdf, outPath, docuBean)[ FD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_28 $$ pdfByFirstPageToJpeg(finalPdf, outPath, docuBean)[ FD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_29 $$ if (docuBean.getSuccess() == 2 && dir.listFiles().length < 2) [ FD ]
Line_4 $$ File dir = new File(filePath + File.separator + docuBean.getId())-->Line_29 $$ if (docuBean.getSuccess() == 2 && dir.listFiles().length < 2) [ FD ]
Line_29 $$ if (docuBean.getSuccess() == 2 && dir.listFiles().length < 2) -->Line_30 $$ docuBean.setSuccess(3)[ CD ]
Line_2 $$ private static void convertToOnline(final String filePath, final DocuBean docuBean) throws Exception -->Line_30 $$ docuBean.setSuccess(3)[ FD ]
Line_35 $$ if (isSpace) -->Line_36 $$ IOUtils.delete(in)[ CD ]
Line_8 $$ File in = source-->Line_36 $$ IOUtils.delete(in)[ FD ]
Line_11 $$ in = new File(StringUtils.replace(source.getName(), " ", ""))-->Line_36 $$ IOUtils.delete(in)[ FD ]
