Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String encrypt(String key) [ CD ]
Line_2 $$ public static String encrypt(String key) -->Line_3 $$ MessageDigest md5 = null[ CD ]
Line_3 $$ MessageDigest md5 = null-->Line_5 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_5 $$ md5 = MessageDigest.getInstance("MD5")-->Line_5 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_5 $$ md5 = MessageDigest.getInstance("MD5")-->Line_5 $$ md5 = MessageDigest.getInstance("MD5")[ CD ]
Line_2 $$ public static String encrypt(String key) -->Line_9 $$ md5.update(key.getBytes())[ CD ]
Line_3 $$ MessageDigest md5 = null-->Line_9 $$ md5.update(key.getBytes())[ FD ]
Line_5 $$ md5 = MessageDigest.getInstance("MD5")-->Line_9 $$ md5.update(key.getBytes())[ FD ]
Line_2 $$ public static String encrypt(String key) -->Line_9 $$ md5.update(key.getBytes())[ FD ]
Line_2 $$ public static String encrypt(String key) -->Line_10 $$ byte hash[] = md5.digest()[ CD ]
Line_10 $$ byte hash[] = md5.digest()-->Line_10 $$ byte hash[] = md5.digest()[ CD ]
Line_3 $$ MessageDigest md5 = null-->Line_10 $$ byte hash[] = md5.digest()[ FD ]
Line_5 $$ md5 = MessageDigest.getInstance("MD5")-->Line_10 $$ byte hash[] = md5.digest()[ FD ]
Line_2 $$ public static String encrypt(String key) -->Line_11 $$ StringBuffer buffer = new StringBuffer()[ CD ]
Line_2 $$ public static String encrypt(String key) -->Line_12 $$ for (int i = 0; i < hash.length; i++) [ CD ]
Line_2 $$ public static String encrypt(String key) -->Line_2 $$ public static String encrypt(String key) [ CD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_12 $$ for (int i = 0; i < hash.length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_12 $$ for (int i = 0; i < hash.length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_12 $$ for (int i = 0; i < hash.length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])[ CD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])[ CD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_14 $$ if (temp.length() == 1)[ CD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_14 $$ if (temp.length() == 1)[ FD ]
Line_14 $$ if (temp.length() == 1)-->Line_14 $$ temp = "0" + temp[ CD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_14 $$ temp = "0" + temp[ FD ]
Line_14 $$ temp = "0" + temp-->Line_14 $$ temp = "0" + temp[ FD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_14 $$ temp = "0" + temp[ FD ]
Line_14 $$ temp = "0" + temp-->Line_14 $$ temp = "0" + temp[ FD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_15 $$ buffer.append(temp)[ CD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_15 $$ buffer.append(temp)[ FD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_15 $$ buffer.append(temp)[ FD ]
Line_14 $$ temp = "0" + temp-->Line_15 $$ buffer.append(temp)[ FD ]
Line_2 $$ public static String encrypt(String key) -->Line_17 $$ return buffer.toString()[ CD ]
Line_17 $$ return buffer.toString()-->Line_17 $$ return buffer.toString()[ CD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_17 $$ return buffer.toString()[ FD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_12 $$ for (int i = 0; i < hash.length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_12 $$ for (int i = 0; i < hash.length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < hash.length; i++) -->Line_12 $$ for (int i = 0; i < hash.length; i++) [ FD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_14 $$ if (temp.length() == 1)[ FD ]
Line_14 $$ temp = "0" + temp-->Line_14 $$ if (temp.length() == 1)[ FD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_14 $$ temp = "0" + temp[ FD ]
Line_14 $$ temp = "0" + temp-->Line_14 $$ temp = "0" + temp[ FD ]
Line_13 $$ String temp = Integer.toHexString(0xFF & hash[i])-->Line_15 $$ buffer.append(temp)[ FD ]
Line_14 $$ temp = "0" + temp-->Line_15 $$ buffer.append(temp)[ FD ]
