Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void concatFiles() throws IOException [ CD ]
Line_2 $$ public void concatFiles() throws IOException -->Line_3 $$ Writer writer = null[ CD ]
Line_5 $$ final File targetFile = new File(getTargetDirectory(), getTargetFile())-->Line_6 $$ targetFile.getParentFile().mkdirs()[ FD ]
Line_7 $$ if (null != getEncoding()) -->Line_8 $$ getLog().info("Writing aggregated file with encoding '" + getEncoding() + "'")[ CD ]
Line_7 $$ if (null != getEncoding()) -->Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))[ CD ]
Line_3 $$ Writer writer = null-->Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))[ FD ]
Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))-->Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))[ FD ]
Line_7 $$ if (null != getEncoding()) -->Line_11 $$ getLog().info("WARNING: writing aggregated file with system encoding")[ CD ]
Line_7 $$ if (null != getEncoding()) -->Line_12 $$ writer = new FileWriter(targetFile)[ CD ]
Line_3 $$ Writer writer = null-->Line_12 $$ writer = new FileWriter(targetFile)[ FD ]
Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))-->Line_12 $$ writer = new FileWriter(targetFile)[ FD ]
Line_12 $$ writer = new FileWriter(targetFile)-->Line_12 $$ writer = new FileWriter(targetFile)[ FD ]
Line_17 $$ if (null != getEncoding()) -->Line_18 $$ getLog().info("Reading file " + file.getCanonicalPath() + " with encoding  '" + getEncoding() + "'")[ CD ]
Line_14 $$ for (File file : getFiles()) -->Line_18 $$ getLog().info("Reading file " + file.getCanonicalPath() + " with encoding  '" + getEncoding() + "'")[ FD ]
Line_17 $$ if (null != getEncoding()) -->Line_19 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()))[ CD ]
Line_15 $$ Reader reader = null-->Line_19 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()))[ FD ]
Line_19 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()))-->Line_19 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()))[ FD ]
Line_17 $$ if (null != getEncoding()) -->Line_21 $$ getLog().info("WARNING: Reading file " + file.getCanonicalPath() + " with system encoding")[ CD ]
Line_14 $$ for (File file : getFiles()) -->Line_21 $$ getLog().info("WARNING: Reading file " + file.getCanonicalPath() + " with system encoding")[ FD ]
Line_17 $$ if (null != getEncoding()) -->Line_22 $$ reader = new FileReader(file)[ CD ]
Line_15 $$ Reader reader = null-->Line_22 $$ reader = new FileReader(file)[ FD ]
Line_19 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()))-->Line_22 $$ reader = new FileReader(file)[ FD ]
Line_22 $$ reader = new FileReader(file)-->Line_22 $$ reader = new FileReader(file)[ FD ]
Line_15 $$ Reader reader = null-->Line_24 $$ IOUtils.copy(reader, writer)[ FD ]
Line_19 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()))-->Line_24 $$ IOUtils.copy(reader, writer)[ FD ]
Line_22 $$ reader = new FileReader(file)-->Line_24 $$ IOUtils.copy(reader, writer)[ FD ]
Line_3 $$ Writer writer = null-->Line_24 $$ IOUtils.copy(reader, writer)[ FD ]
Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))-->Line_24 $$ IOUtils.copy(reader, writer)[ FD ]
Line_12 $$ writer = new FileWriter(targetFile)-->Line_24 $$ IOUtils.copy(reader, writer)[ FD ]
Line_25 $$ final String delimiter = getDelimiter()-->Line_25 $$ final String delimiter = getDelimiter()[ CD ]
Line_25 $$ final String delimiter = getDelimiter()-->Line_26 $$ if (delimiter != null) [ FD ]
Line_26 $$ if (delimiter != null) -->Line_27 $$ writer.write(delimiter.toCharArray())[ CD ]
Line_3 $$ Writer writer = null-->Line_27 $$ writer.write(delimiter.toCharArray())[ FD ]
Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))-->Line_27 $$ writer.write(delimiter.toCharArray())[ FD ]
Line_12 $$ writer = new FileWriter(targetFile)-->Line_27 $$ writer.write(delimiter.toCharArray())[ FD ]
Line_25 $$ final String delimiter = getDelimiter()-->Line_27 $$ writer.write(delimiter.toCharArray())[ FD ]
Line_15 $$ Reader reader = null-->Line_30 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_19 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), getEncoding()))-->Line_30 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_22 $$ reader = new FileReader(file)-->Line_30 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_3 $$ Writer writer = null-->Line_34 $$ IOUtils.closeQuietly(writer)[ FD ]
Line_9 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(targetFile), getEncoding()))-->Line_34 $$ IOUtils.closeQuietly(writer)[ FD ]
Line_12 $$ writer = new FileWriter(targetFile)-->Line_34 $$ IOUtils.closeQuietly(writer)[ FD ]
