Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void signAndSend() throws Exception [ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_3 $$ SSLContext sslContext = null[ CD ]
Line_3 $$ SSLContext sslContext = null-->Line_5 $$ sslContext = SSLContext.getInstance("TLS")[ FD ]
Line_5 $$ sslContext = SSLContext.getInstance("TLS")-->Line_5 $$ sslContext = SSLContext.getInstance("TLS")[ FD ]
Line_5 $$ sslContext = SSLContext.getInstance("TLS")-->Line_5 $$ sslContext = SSLContext.getInstance("TLS")[ CD ]
Line_3 $$ SSLContext sslContext = null-->Line_7 $$ sslContext.init(null, xtmArray, new java.security.SecureRandom())[ FD ]
Line_5 $$ sslContext = SSLContext.getInstance("TLS")-->Line_7 $$ sslContext.init(null, xtmArray, new java.security.SecureRandom())[ FD ]
Line_6 $$ X509TrustManager[] xtmArray = new X509TrustManager[] -->Line_7 $$ sslContext.init(null, xtmArray, new java.security.SecureRandom())[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_11 $$ if (sslContext != null) [ CD ]
Line_3 $$ SSLContext sslContext = null-->Line_11 $$ if (sslContext != null) [ FD ]
Line_5 $$ sslContext = SSLContext.getInstance("TLS")-->Line_11 $$ if (sslContext != null) [ FD ]
Line_11 $$ if (sslContext != null) -->Line_12 $$ HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory())[ CD ]
Line_3 $$ SSLContext sslContext = null-->Line_12 $$ HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory())[ FD ]
Line_5 $$ sslContext = SSLContext.getInstance("TLS")-->Line_12 $$ HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory())[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_14 $$ HttpsURLConnection.setDefaultHostnameVerifier(hnv)[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_15 $$ String providerName = System.getProperty("jsr105Provider", "org.jcp.xml.dsig.internal.dom.XMLDSigRI")[ CD ]
Line_15 $$ String providerName = System.getProperty("jsr105Provider", "org.jcp.xml.dsig.internal.dom.XMLDSigRI")-->Line_15 $$ String providerName = System.getProperty("jsr105Provider", "org.jcp.xml.dsig.internal.dom.XMLDSigRI")[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())[ CD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())[ CD ]
Line_15 $$ String providerName = System.getProperty("jsr105Provider", "org.jcp.xml.dsig.internal.dom.XMLDSigRI")-->Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_17 $$ DigestMethod dm = fac.newDigestMethod(DigestMethod.SHA1, null)[ CD ]
Line_17 $$ DigestMethod dm = fac.newDigestMethod(DigestMethod.SHA1, null)-->Line_17 $$ DigestMethod dm = fac.newDigestMethod(DigestMethod.SHA1, null)[ CD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_17 $$ DigestMethod dm = fac.newDigestMethod(DigestMethod.SHA1, null)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_18 $$ List transforms = new Vector(2)[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_19 $$ transforms.add(fac.newTransform("http://www.w3.org/2000/09/xmldsig#enveloped-signature", (TransformParameterSpec) null))[ CD ]
Line_18 $$ List transforms = new Vector(2)-->Line_19 $$ transforms.add(fac.newTransform("http://www.w3.org/2000/09/xmldsig#enveloped-signature", (TransformParameterSpec) null))[ FD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_19 $$ transforms.add(fac.newTransform("http://www.w3.org/2000/09/xmldsig#enveloped-signature", (TransformParameterSpec) null))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_20 $$ List prefixlist = new Vector(1)[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_21 $$ prefixlist.add("xsd")[ CD ]
Line_20 $$ List prefixlist = new Vector(1)-->Line_21 $$ prefixlist.add("xsd")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_22 $$ transforms.add(fac.newTransform("http://www.w3.org/2001/10/xml-exc-c14n#", new ExcC14NParameterSpec(prefixlist)))[ CD ]
Line_18 $$ List transforms = new Vector(2)-->Line_22 $$ transforms.add(fac.newTransform("http://www.w3.org/2001/10/xml-exc-c14n#", new ExcC14NParameterSpec(prefixlist)))[ FD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_22 $$ transforms.add(fac.newTransform("http://www.w3.org/2001/10/xml-exc-c14n#", new ExcC14NParameterSpec(prefixlist)))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_23 $$ Random randgen = new Random()[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_24 $$ byte[] rand_bytes = new byte[20][ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_25 $$ randgen.nextBytes(rand_bytes)[ CD ]
Line_23 $$ Random randgen = new Random()-->Line_25 $$ randgen.nextBytes(rand_bytes)[ FD ]
Line_24 $$ byte[] rand_bytes = new byte[20]-->Line_25 $$ randgen.nextBytes(rand_bytes)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_26 $$ String assertion_id_str = "i" + new String(Hex.encodeHex(rand_bytes))[ CD ]
Line_24 $$ byte[] rand_bytes = new byte[20]-->Line_26 $$ String assertion_id_str = "i" + new String(Hex.encodeHex(rand_bytes))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_27 $$ Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null)[ CD ]
Line_27 $$ Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null)-->Line_27 $$ Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null)[ CD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_27 $$ Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null)[ FD ]
Line_17 $$ DigestMethod dm = fac.newDigestMethod(DigestMethod.SHA1, null)-->Line_27 $$ Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null)[ FD ]
Line_18 $$ List transforms = new Vector(2)-->Line_27 $$ Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_28 $$ CanonicalizationMethod cm = fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null)[ CD ]
Line_28 $$ CanonicalizationMethod cm = fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null)-->Line_28 $$ CanonicalizationMethod cm = fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null)[ CD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_28 $$ CanonicalizationMethod cm = fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_29 $$ SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null)[ CD ]
Line_29 $$ SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null)-->Line_29 $$ SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null)[ CD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_29 $$ SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))[ CD ]
Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))-->Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))[ CD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))[ FD ]
Line_28 $$ CanonicalizationMethod cm = fac.newCanonicalizationMethod(CanonicalizationMethod.EXCLUSIVE, (C14NMethodParameterSpec) null)-->Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))[ FD ]
Line_29 $$ SignatureMethod sm = fac.newSignatureMethod(SignatureMethod.RSA_SHA1, null)-->Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))[ FD ]
Line_27 $$ Reference ref = fac.newReference("#" + assertion_id_str, dm, transforms, null, null)-->Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")[ CD ]
Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")-->Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_32 $$ FileInputStream fis = null[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_33 $$ if (TEST_SIGNED_WITH_WRONG_CERT == testNumber) [ CD ]
Line_33 $$ if (TEST_SIGNED_WITH_WRONG_CERT == testNumber) -->Line_34 $$ fis = new FileInputStream(resourceFolder + "z-xtra-sign.jks")[ CD ]
Line_32 $$ FileInputStream fis = null-->Line_34 $$ fis = new FileInputStream(resourceFolder + "z-xtra-sign.jks")[ FD ]
Line_34 $$ fis = new FileInputStream(resourceFolder + "z-xtra-sign.jks")-->Line_34 $$ fis = new FileInputStream(resourceFolder + "z-xtra-sign.jks")[ FD ]
Line_33 $$ if (TEST_SIGNED_WITH_WRONG_CERT == testNumber) -->Line_36 $$ fis = new FileInputStream(resourceFolder + "z-idp-sign.jks")[ CD ]
Line_32 $$ FileInputStream fis = null-->Line_36 $$ fis = new FileInputStream(resourceFolder + "z-idp-sign.jks")[ FD ]
Line_34 $$ fis = new FileInputStream(resourceFolder + "z-xtra-sign.jks")-->Line_36 $$ fis = new FileInputStream(resourceFolder + "z-idp-sign.jks")[ FD ]
Line_36 $$ fis = new FileInputStream(resourceFolder + "z-idp-sign.jks")-->Line_36 $$ fis = new FileInputStream(resourceFolder + "z-idp-sign.jks")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_38 $$ ks.load(fis, "changeit".toCharArray())[ CD ]
Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")-->Line_38 $$ ks.load(fis, "changeit".toCharArray())[ FD ]
Line_32 $$ FileInputStream fis = null-->Line_38 $$ ks.load(fis, "changeit".toCharArray())[ FD ]
Line_34 $$ fis = new FileInputStream(resourceFolder + "z-xtra-sign.jks")-->Line_38 $$ ks.load(fis, "changeit".toCharArray())[ FD ]
Line_36 $$ fis = new FileInputStream(resourceFolder + "z-idp-sign.jks")-->Line_38 $$ ks.load(fis, "changeit".toCharArray())[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_40 $$ Enumeration aliases = ks.aliases()[ CD ]
Line_40 $$ Enumeration aliases = ks.aliases()-->Line_40 $$ Enumeration aliases = ks.aliases()[ CD ]
Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")-->Line_40 $$ Enumeration aliases = ks.aliases()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_41 $$ for (; aliases.hasMoreElements(); ) [ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_2 $$ public void signAndSend() throws Exception [ CD ]
Line_41 $$ for (; aliases.hasMoreElements(); ) -->Line_41 $$ for (; aliases.hasMoreElements(); ) [ CD ]
Line_40 $$ Enumeration aliases = ks.aliases()-->Line_41 $$ for (; aliases.hasMoreElements(); ) [ FD ]
Line_41 $$ for (; aliases.hasMoreElements(); ) -->Line_42 $$ String alias = (String) aliases.nextElement()[ CD ]
Line_40 $$ Enumeration aliases = ks.aliases()-->Line_42 $$ String alias = (String) aliases.nextElement()[ FD ]
Line_41 $$ for (; aliases.hasMoreElements(); ) -->Line_43 $$ boolean b = ks.isKeyEntry(alias)[ CD ]
Line_43 $$ boolean b = ks.isKeyEntry(alias)-->Line_43 $$ boolean b = ks.isKeyEntry(alias)[ CD ]
Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")-->Line_43 $$ boolean b = ks.isKeyEntry(alias)[ FD ]
Line_42 $$ String alias = (String) aliases.nextElement()-->Line_43 $$ boolean b = ks.isKeyEntry(alias)[ FD ]
Line_41 $$ for (; aliases.hasMoreElements(); ) -->Line_44 $$ b = ks.isCertificateEntry(alias)[ CD ]
Line_43 $$ boolean b = ks.isKeyEntry(alias)-->Line_44 $$ b = ks.isCertificateEntry(alias)[ FD ]
Line_44 $$ b = ks.isCertificateEntry(alias)-->Line_44 $$ b = ks.isCertificateEntry(alias)[ FD ]
Line_44 $$ b = ks.isCertificateEntry(alias)-->Line_44 $$ b = ks.isCertificateEntry(alias)[ CD ]
Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")-->Line_44 $$ b = ks.isCertificateEntry(alias)[ FD ]
Line_42 $$ String alias = (String) aliases.nextElement()-->Line_44 $$ b = ks.isCertificateEntry(alias)[ FD ]
Line_41 $$ for (; aliases.hasMoreElements(); ) -->Line_45 $$ System.out.println(b + " " + alias)[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_48 $$ PrivateKey privateKey = (PrivateKey) ks.getKey("tomcat", "changeit".toCharArray())[ CD ]
Line_31 $$ KeyStore ks = KeyStore.getInstance("JKS")-->Line_48 $$ PrivateKey privateKey = (PrivateKey) ks.getKey("tomcat", "changeit".toCharArray())[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_49 $$ XMLSignature signature = fac.newXMLSignature(si, null)[ CD ]
Line_49 $$ XMLSignature signature = fac.newXMLSignature(si, null)-->Line_49 $$ XMLSignature signature = fac.newXMLSignature(si, null)[ CD ]
Line_16 $$ XMLSignatureFactory fac = XMLSignatureFactory.getInstance("DOM", (Provider) Class.forName(providerName).newInstance())-->Line_49 $$ XMLSignature signature = fac.newXMLSignature(si, null)[ FD ]
Line_30 $$ SignedInfo si = fac.newSignedInfo(cm, sm, Collections.singletonList(ref))-->Line_49 $$ XMLSignature signature = fac.newXMLSignature(si, null)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_50 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()[ CD ]
Line_50 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()-->Line_50 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_51 $$ dbf.setNamespaceAware(true)[ CD ]
Line_50 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()-->Line_51 $$ dbf.setNamespaceAware(true)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_52 $$ DocumentBuilder db = dbf.newDocumentBuilder()[ CD ]
Line_52 $$ DocumentBuilder db = dbf.newDocumentBuilder()-->Line_52 $$ DocumentBuilder db = dbf.newDocumentBuilder()[ CD ]
Line_50 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()-->Line_52 $$ DocumentBuilder db = dbf.newDocumentBuilder()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_53 $$ File docFile = new File(resourceFolder + "BaseRequest.xml")[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_54 $$ Document doc = db.parse(docFile)[ CD ]
Line_54 $$ Document doc = db.parse(docFile)-->Line_54 $$ Document doc = db.parse(docFile)[ CD ]
Line_52 $$ DocumentBuilder db = dbf.newDocumentBuilder()-->Line_54 $$ Document doc = db.parse(docFile)[ FD ]
Line_53 $$ File docFile = new File(resourceFolder + "BaseRequest.xml")-->Line_54 $$ Document doc = db.parse(docFile)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_55 $$ Element root = doc.getDocumentElement()[ CD ]
Line_55 $$ Element root = doc.getDocumentElement()-->Line_55 $$ Element root = doc.getDocumentElement()[ CD ]
Line_54 $$ Document doc = db.parse(docFile)-->Line_55 $$ Element root = doc.getDocumentElement()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_56 $$ NamedNodeMap root_atts = root.getAttributes()[ CD ]
Line_56 $$ NamedNodeMap root_atts = root.getAttributes()-->Line_56 $$ NamedNodeMap root_atts = root.getAttributes()[ CD ]
Line_55 $$ Element root = doc.getDocumentElement()-->Line_56 $$ NamedNodeMap root_atts = root.getAttributes()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_58 $$ sdf.setTimeZone(TimeZone.getTimeZone("GMT"))[ CD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_58 $$ sdf.setTimeZone(TimeZone.getTimeZone("GMT"))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_60 $$ if (TEST_NOT_ON_OR_AFTER_EXPIRED == testNumber) [ CD ]
Line_60 $$ if (TEST_NOT_ON_OR_AFTER_EXPIRED == testNumber) -->Line_61 $$ right_now.add(Calendar.MINUTE, alterNowDateBy)[ CD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_61 $$ right_now.add(Calendar.MINUTE, alterNowDateBy)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_63 $$ Date issue_date = right_now.getTime()[ CD ]
Line_63 $$ Date issue_date = right_now.getTime()-->Line_63 $$ Date issue_date = right_now.getTime()[ CD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_63 $$ Date issue_date = right_now.getTime()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_64 $$ right_now.add(Calendar.MINUTE, -10)[ CD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_64 $$ right_now.add(Calendar.MINUTE, -10)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_65 $$ Date auth_instant_date = right_now.getTime()[ CD ]
Line_65 $$ Date auth_instant_date = right_now.getTime()-->Line_65 $$ Date auth_instant_date = right_now.getTime()[ CD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_65 $$ Date auth_instant_date = right_now.getTime()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_66 $$ right_now.add(Calendar.MINUTE, 20)[ CD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_66 $$ right_now.add(Calendar.MINUTE, 20)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_67 $$ Date not_on_or_after_date = right_now.getTime()[ CD ]
Line_67 $$ Date not_on_or_after_date = right_now.getTime()-->Line_67 $$ Date not_on_or_after_date = right_now.getTime()[ CD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_67 $$ Date not_on_or_after_date = right_now.getTime()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_68 $$ System.out.println("Not on or after 1: " + sdf.format(right_now.getTime()))[ CD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_68 $$ System.out.println("Not on or after 1: " + sdf.format(right_now.getTime()))[ FD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_68 $$ System.out.println("Not on or after 1: " + sdf.format(right_now.getTime()))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_69 $$ Node response_id = root_atts.getNamedItem("ID")[ CD ]
Line_69 $$ Node response_id = root_atts.getNamedItem("ID")-->Line_69 $$ Node response_id = root_atts.getNamedItem("ID")[ CD ]
Line_56 $$ NamedNodeMap root_atts = root.getAttributes()-->Line_69 $$ Node response_id = root_atts.getNamedItem("ID")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_70 $$ randgen.nextBytes(rand_bytes)[ CD ]
Line_23 $$ Random randgen = new Random()-->Line_70 $$ randgen.nextBytes(rand_bytes)[ FD ]
Line_24 $$ byte[] rand_bytes = new byte[20]-->Line_70 $$ randgen.nextBytes(rand_bytes)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_71 $$ response_id.setNodeValue("i" + new String(Hex.encodeHex(rand_bytes)))[ CD ]
Line_69 $$ Node response_id = root_atts.getNamedItem("ID")-->Line_71 $$ response_id.setNodeValue("i" + new String(Hex.encodeHex(rand_bytes)))[ FD ]
Line_24 $$ byte[] rand_bytes = new byte[20]-->Line_71 $$ response_id.setNodeValue("i" + new String(Hex.encodeHex(rand_bytes)))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_72 $$ Node response_issue_instant = root_atts.getNamedItem("IssueInstant")[ CD ]
Line_72 $$ Node response_issue_instant = root_atts.getNamedItem("IssueInstant")-->Line_72 $$ Node response_issue_instant = root_atts.getNamedItem("IssueInstant")[ CD ]
Line_56 $$ NamedNodeMap root_atts = root.getAttributes()-->Line_72 $$ Node response_issue_instant = root_atts.getNamedItem("IssueInstant")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_73 $$ response_issue_instant.setNodeValue(sdf.format(issue_date))[ CD ]
Line_72 $$ Node response_issue_instant = root_atts.getNamedItem("IssueInstant")-->Line_73 $$ response_issue_instant.setNodeValue(sdf.format(issue_date))[ FD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_73 $$ response_issue_instant.setNodeValue(sdf.format(issue_date))[ FD ]
Line_63 $$ Date issue_date = right_now.getTime()-->Line_73 $$ response_issue_instant.setNodeValue(sdf.format(issue_date))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")[ CD ]
Line_55 $$ Element root = doc.getDocumentElement()-->Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_75 $$ Element assertion_node = (Element) tmp_nlist.item(0)[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_75 $$ Element assertion_node = (Element) tmp_nlist.item(0)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_76 $$ NamedNodeMap ass_node_atts = assertion_node.getAttributes()[ CD ]
Line_76 $$ NamedNodeMap ass_node_atts = assertion_node.getAttributes()-->Line_76 $$ NamedNodeMap ass_node_atts = assertion_node.getAttributes()[ CD ]
Line_75 $$ Element assertion_node = (Element) tmp_nlist.item(0)-->Line_76 $$ NamedNodeMap ass_node_atts = assertion_node.getAttributes()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_77 $$ Node assertion_id = ass_node_atts.getNamedItem("ID")[ CD ]
Line_77 $$ Node assertion_id = ass_node_atts.getNamedItem("ID")-->Line_77 $$ Node assertion_id = ass_node_atts.getNamedItem("ID")[ CD ]
Line_76 $$ NamedNodeMap ass_node_atts = assertion_node.getAttributes()-->Line_77 $$ Node assertion_id = ass_node_atts.getNamedItem("ID")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_78 $$ assertion_id.setNodeValue(assertion_id_str)[ CD ]
Line_77 $$ Node assertion_id = ass_node_atts.getNamedItem("ID")-->Line_78 $$ assertion_id.setNodeValue(assertion_id_str)[ FD ]
Line_26 $$ String assertion_id_str = "i" + new String(Hex.encodeHex(rand_bytes))-->Line_78 $$ assertion_id.setNodeValue(assertion_id_str)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_79 $$ Node assertion_issue_instant = ass_node_atts.getNamedItem("IssueInstant")[ CD ]
Line_79 $$ Node assertion_issue_instant = ass_node_atts.getNamedItem("IssueInstant")-->Line_79 $$ Node assertion_issue_instant = ass_node_atts.getNamedItem("IssueInstant")[ CD ]
Line_76 $$ NamedNodeMap ass_node_atts = assertion_node.getAttributes()-->Line_79 $$ Node assertion_issue_instant = ass_node_atts.getNamedItem("IssueInstant")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_80 $$ assertion_issue_instant.setNodeValue(sdf.format(issue_date))[ CD ]
Line_79 $$ Node assertion_issue_instant = ass_node_atts.getNamedItem("IssueInstant")-->Line_80 $$ assertion_issue_instant.setNodeValue(sdf.format(issue_date))[ FD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_80 $$ assertion_issue_instant.setNodeValue(sdf.format(issue_date))[ FD ]
Line_63 $$ Date issue_date = right_now.getTime()-->Line_80 $$ assertion_issue_instant.setNodeValue(sdf.format(issue_date))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")[ CD ]
Line_75 $$ Element assertion_node = (Element) tmp_nlist.item(0)-->Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_82 $$ Element subject_node = (Element) tmp_nlist.item(0)[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_82 $$ Element subject_node = (Element) tmp_nlist.item(0)[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_82 $$ Element subject_node = (Element) tmp_nlist.item(0)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_83 $$ if (TEST_UNKNOWN_CONFIRMATION == testNumber) [ CD ]
Line_83 $$ if (TEST_UNKNOWN_CONFIRMATION == testNumber) -->Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")[ CD ]
Line_82 $$ Element subject_node = (Element) tmp_nlist.item(0)-->Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")[ FD ]
Line_83 $$ if (TEST_UNKNOWN_CONFIRMATION == testNumber) -->Line_85 $$ Element subj_conf_node = (Element) tmp_nlist.item(0)[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_85 $$ Element subj_conf_node = (Element) tmp_nlist.item(0)[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_85 $$ Element subj_conf_node = (Element) tmp_nlist.item(0)[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_85 $$ Element subj_conf_node = (Element) tmp_nlist.item(0)[ FD ]
Line_83 $$ if (TEST_UNKNOWN_CONFIRMATION == testNumber) -->Line_86 $$ NamedNodeMap subj_conf_node_atts = subj_conf_node.getAttributes()[ CD ]
Line_86 $$ NamedNodeMap subj_conf_node_atts = subj_conf_node.getAttributes()-->Line_86 $$ NamedNodeMap subj_conf_node_atts = subj_conf_node.getAttributes()[ CD ]
Line_85 $$ Element subj_conf_node = (Element) tmp_nlist.item(0)-->Line_86 $$ NamedNodeMap subj_conf_node_atts = subj_conf_node.getAttributes()[ FD ]
Line_83 $$ if (TEST_UNKNOWN_CONFIRMATION == testNumber) -->Line_87 $$ Node method_node = subj_conf_node_atts.getNamedItem("Method")[ CD ]
Line_87 $$ Node method_node = subj_conf_node_atts.getNamedItem("Method")-->Line_87 $$ Node method_node = subj_conf_node_atts.getNamedItem("Method")[ CD ]
Line_86 $$ NamedNodeMap subj_conf_node_atts = subj_conf_node.getAttributes()-->Line_87 $$ Node method_node = subj_conf_node_atts.getNamedItem("Method")[ FD ]
Line_83 $$ if (TEST_UNKNOWN_CONFIRMATION == testNumber) -->Line_88 $$ method_node.setNodeValue(badConfirmationMethod)[ CD ]
Line_87 $$ Node method_node = subj_conf_node_atts.getNamedItem("Method")-->Line_88 $$ method_node.setNodeValue(badConfirmationMethod)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")[ CD ]
Line_82 $$ Element subject_node = (Element) tmp_nlist.item(0)-->Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_91 $$ Element name_id_node = (Element) tmp_nlist.item(0)[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_91 $$ Element name_id_node = (Element) tmp_nlist.item(0)[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_91 $$ Element name_id_node = (Element) tmp_nlist.item(0)[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_91 $$ Element name_id_node = (Element) tmp_nlist.item(0)[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_91 $$ Element name_id_node = (Element) tmp_nlist.item(0)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_92 $$ NamedNodeMap name_id_node_atts = name_id_node.getAttributes()[ CD ]
Line_92 $$ NamedNodeMap name_id_node_atts = name_id_node.getAttributes()-->Line_92 $$ NamedNodeMap name_id_node_atts = name_id_node.getAttributes()[ CD ]
Line_91 $$ Element name_id_node = (Element) tmp_nlist.item(0)-->Line_92 $$ NamedNodeMap name_id_node_atts = name_id_node.getAttributes()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_93 $$ Node sp_name_qualifier = name_id_node_atts.getNamedItem("SPNameQualifier")[ CD ]
Line_93 $$ Node sp_name_qualifier = name_id_node_atts.getNamedItem("SPNameQualifier")-->Line_93 $$ Node sp_name_qualifier = name_id_node_atts.getNamedItem("SPNameQualifier")[ CD ]
Line_92 $$ NamedNodeMap name_id_node_atts = name_id_node.getAttributes()-->Line_93 $$ Node sp_name_qualifier = name_id_node_atts.getNamedItem("SPNameQualifier")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_94 $$ sp_name_qualifier.setNodeValue(sPEntityId)[ CD ]
Line_93 $$ Node sp_name_qualifier = name_id_node_atts.getNamedItem("SPNameQualifier")-->Line_94 $$ sp_name_qualifier.setNodeValue(sPEntityId)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_95 $$ Node name_id_value = name_id_node.getFirstChild()[ CD ]
Line_95 $$ Node name_id_value = name_id_node.getFirstChild()-->Line_95 $$ Node name_id_value = name_id_node.getFirstChild()[ CD ]
Line_91 $$ Element name_id_node = (Element) tmp_nlist.item(0)-->Line_95 $$ Node name_id_value = name_id_node.getFirstChild()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_96 $$ randgen.nextBytes(rand_bytes)[ CD ]
Line_23 $$ Random randgen = new Random()-->Line_96 $$ randgen.nextBytes(rand_bytes)[ FD ]
Line_24 $$ byte[] rand_bytes = new byte[20]-->Line_96 $$ randgen.nextBytes(rand_bytes)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_97 $$ name_id_value.setNodeValue(new String(Hex.encodeHex(rand_bytes)))[ CD ]
Line_95 $$ Node name_id_value = name_id_node.getFirstChild()-->Line_97 $$ name_id_value.setNodeValue(new String(Hex.encodeHex(rand_bytes)))[ FD ]
Line_24 $$ byte[] rand_bytes = new byte[20]-->Line_97 $$ name_id_value.setNodeValue(new String(Hex.encodeHex(rand_bytes)))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ FD ]
Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")-->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ FD ]
Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")-->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ CD ]
Line_82 $$ Element subject_node = (Element) tmp_nlist.item(0)-->Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_99 $$ Element subj_conf_data_node = (Element) tmp_nlist.item(0)[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_99 $$ Element subj_conf_data_node = (Element) tmp_nlist.item(0)[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_99 $$ Element subj_conf_data_node = (Element) tmp_nlist.item(0)[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_99 $$ Element subj_conf_data_node = (Element) tmp_nlist.item(0)[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_99 $$ Element subj_conf_data_node = (Element) tmp_nlist.item(0)[ FD ]
Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")-->Line_99 $$ Element subj_conf_data_node = (Element) tmp_nlist.item(0)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_100 $$ NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes()[ CD ]
Line_100 $$ NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes()-->Line_100 $$ NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes()[ CD ]
Line_99 $$ Element subj_conf_data_node = (Element) tmp_nlist.item(0)-->Line_100 $$ NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_101 $$ Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem("NotOnOrAfter")[ CD ]
Line_101 $$ Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem("NotOnOrAfter")-->Line_101 $$ Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem("NotOnOrAfter")[ CD ]
Line_100 $$ NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes()-->Line_101 $$ Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem("NotOnOrAfter")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_102 $$ not_on_or_after_node.setNodeValue(sdf.format(not_on_or_after_date))[ CD ]
Line_101 $$ Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem("NotOnOrAfter")-->Line_102 $$ not_on_or_after_node.setNodeValue(sdf.format(not_on_or_after_date))[ FD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_102 $$ not_on_or_after_node.setNodeValue(sdf.format(not_on_or_after_date))[ FD ]
Line_67 $$ Date not_on_or_after_date = right_now.getTime()-->Line_102 $$ not_on_or_after_node.setNodeValue(sdf.format(not_on_or_after_date))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_103 $$ Node recipient_node = subj_conf_data_node_atts.getNamedItem("Recipient")[ CD ]
Line_103 $$ Node recipient_node = subj_conf_data_node_atts.getNamedItem("Recipient")-->Line_103 $$ Node recipient_node = subj_conf_data_node_atts.getNamedItem("Recipient")[ CD ]
Line_100 $$ NamedNodeMap subj_conf_data_node_atts = subj_conf_data_node.getAttributes()-->Line_103 $$ Node recipient_node = subj_conf_data_node_atts.getNamedItem("Recipient")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_104 $$ if (TEST_WRONG_RECIPIENT == testNumber) [ CD ]
Line_104 $$ if (TEST_WRONG_RECIPIENT == testNumber) -->Line_105 $$ recipient_node.setNodeValue(badRecipientValue)[ CD ]
Line_103 $$ Node recipient_node = subj_conf_data_node_atts.getNamedItem("Recipient")-->Line_105 $$ recipient_node.setNodeValue(badRecipientValue)[ FD ]
Line_104 $$ if (TEST_WRONG_RECIPIENT == testNumber) -->Line_107 $$ recipient_node.setNodeValue(sPAssertionConsumerService)[ CD ]
Line_103 $$ Node recipient_node = subj_conf_data_node_atts.getNamedItem("Recipient")-->Line_107 $$ recipient_node.setNodeValue(sPAssertionConsumerService)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ FD ]
Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ FD ]
Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ FD ]
Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ CD ]
Line_75 $$ Element assertion_node = (Element) tmp_nlist.item(0)-->Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)[ FD ]
Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")-->Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)[ FD ]
Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")-->Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_111 $$ Node audience_value = audience_node.getFirstChild()[ CD ]
Line_111 $$ Node audience_value = audience_node.getFirstChild()-->Line_111 $$ Node audience_value = audience_node.getFirstChild()[ CD ]
Line_110 $$ Element audience_node = (Element) tmp_nlist.item(0)-->Line_111 $$ Node audience_value = audience_node.getFirstChild()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_112 $$ if (TEST_WRONG_AUDIENCE == testNumber) [ CD ]
Line_112 $$ if (TEST_WRONG_AUDIENCE == testNumber) -->Line_113 $$ audience_value.setNodeValue(badAudienceValue)[ CD ]
Line_111 $$ Node audience_value = audience_node.getFirstChild()-->Line_113 $$ audience_value.setNodeValue(badAudienceValue)[ FD ]
Line_112 $$ if (TEST_WRONG_AUDIENCE == testNumber) -->Line_115 $$ audience_value.setNodeValue(sPEntityId)[ CD ]
Line_111 $$ Node audience_value = audience_node.getFirstChild()-->Line_115 $$ audience_value.setNodeValue(sPEntityId)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ CD ]
Line_75 $$ Element assertion_node = (Element) tmp_nlist.item(0)-->Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ CD ]
Line_74 $$ NodeList tmp_nlist = root.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Assertion")-->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ FD ]
Line_81 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Subject")-->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ FD ]
Line_84 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmation")-->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ FD ]
Line_90 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "NameID")-->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ FD ]
Line_98 $$ tmp_nlist = subject_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "SubjectConfirmationData")-->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ FD ]
Line_109 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "Audience")-->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ FD ]
Line_117 $$ tmp_nlist = assertion_node.getElementsByTagNameNS("urn:oasis:names:tc:SAML:2.0:assertion", "AuthnStatement")-->Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_119 $$ NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes()[ CD ]
Line_119 $$ NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes()-->Line_119 $$ NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes()[ CD ]
Line_118 $$ Element authn_statement_node = (Element) tmp_nlist.item(0)-->Line_119 $$ NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_120 $$ Node authn_instant_node = authn_statement_node_atts.getNamedItem("AuthnInstant")[ CD ]
Line_120 $$ Node authn_instant_node = authn_statement_node_atts.getNamedItem("AuthnInstant")-->Line_120 $$ Node authn_instant_node = authn_statement_node_atts.getNamedItem("AuthnInstant")[ CD ]
Line_119 $$ NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes()-->Line_120 $$ Node authn_instant_node = authn_statement_node_atts.getNamedItem("AuthnInstant")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_121 $$ authn_instant_node.setNodeValue(sdf.format(auth_instant_date))[ CD ]
Line_120 $$ Node authn_instant_node = authn_statement_node_atts.getNamedItem("AuthnInstant")-->Line_121 $$ authn_instant_node.setNodeValue(sdf.format(auth_instant_date))[ FD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_121 $$ authn_instant_node.setNodeValue(sdf.format(auth_instant_date))[ FD ]
Line_65 $$ Date auth_instant_date = right_now.getTime()-->Line_121 $$ authn_instant_node.setNodeValue(sdf.format(auth_instant_date))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_122 $$ Node sess_idx_node = authn_statement_node_atts.getNamedItem("SessionIndex")[ CD ]
Line_122 $$ Node sess_idx_node = authn_statement_node_atts.getNamedItem("SessionIndex")-->Line_122 $$ Node sess_idx_node = authn_statement_node_atts.getNamedItem("SessionIndex")[ CD ]
Line_119 $$ NamedNodeMap authn_statement_node_atts = authn_statement_node.getAttributes()-->Line_122 $$ Node sess_idx_node = authn_statement_node_atts.getNamedItem("SessionIndex")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_123 $$ sess_idx_node.setNodeValue(assertion_id_str)[ CD ]
Line_122 $$ Node sess_idx_node = authn_statement_node_atts.getNamedItem("SessionIndex")-->Line_123 $$ sess_idx_node.setNodeValue(assertion_id_str)[ FD ]
Line_26 $$ String assertion_id_str = "i" + new String(Hex.encodeHex(rand_bytes))-->Line_123 $$ sess_idx_node.setNodeValue(assertion_id_str)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_124 $$ DOMSignContext signContext = new DOMSignContext(privateKey, assertion_node, subject_node)[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_125 $$ signContext.putNamespacePrefix("http://www.w3.org/2000/09/xmldsig#", "ds")[ CD ]
Line_124 $$ DOMSignContext signContext = new DOMSignContext(privateKey, assertion_node, subject_node)-->Line_125 $$ signContext.putNamespacePrefix("http://www.w3.org/2000/09/xmldsig#", "ds")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_126 $$ signContext.putNamespacePrefix("http://www.w3.org/2001/10/xml-exc-c14n#", "ec")[ CD ]
Line_124 $$ DOMSignContext signContext = new DOMSignContext(privateKey, assertion_node, subject_node)-->Line_126 $$ signContext.putNamespacePrefix("http://www.w3.org/2001/10/xml-exc-c14n#", "ec")[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_127 $$ signature.sign(signContext)[ CD ]
Line_49 $$ XMLSignature signature = fac.newXMLSignature(si, null)-->Line_127 $$ signature.sign(signContext)[ FD ]
Line_124 $$ DOMSignContext signContext = new DOMSignContext(privateKey, assertion_node, subject_node)-->Line_127 $$ signature.sign(signContext)[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_128 $$ TransformerFactory tf = TransformerFactory.newInstance()[ CD ]
Line_128 $$ TransformerFactory tf = TransformerFactory.newInstance()-->Line_128 $$ TransformerFactory tf = TransformerFactory.newInstance()[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_129 $$ Transformer trans[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_130 $$ if (TEST_DATA_ALTERED_AFTER_SIG == testNumber) [ CD ]
Line_130 $$ if (TEST_DATA_ALTERED_AFTER_SIG == testNumber) -->Line_131 $$ right_now.add(Calendar.MINUTE, 10)[ CD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_131 $$ right_now.add(Calendar.MINUTE, 10)[ FD ]
Line_130 $$ if (TEST_DATA_ALTERED_AFTER_SIG == testNumber) -->Line_132 $$ System.out.println("Not on or after: " + sdf.format(right_now.getTime()))[ CD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_132 $$ System.out.println("Not on or after: " + sdf.format(right_now.getTime()))[ FD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_132 $$ System.out.println("Not on or after: " + sdf.format(right_now.getTime()))[ FD ]
Line_130 $$ if (TEST_DATA_ALTERED_AFTER_SIG == testNumber) -->Line_133 $$ not_on_or_after_node.setNodeValue(sdf.format(right_now.getTime()))[ CD ]
Line_101 $$ Node not_on_or_after_node = subj_conf_data_node_atts.getNamedItem("NotOnOrAfter")-->Line_133 $$ not_on_or_after_node.setNodeValue(sdf.format(right_now.getTime()))[ FD ]
Line_57 $$ SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")-->Line_133 $$ not_on_or_after_node.setNodeValue(sdf.format(right_now.getTime()))[ FD ]
Line_59 $$ GregorianCalendar right_now = new GregorianCalendar()-->Line_133 $$ not_on_or_after_node.setNodeValue(sdf.format(right_now.getTime()))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_135 $$ trans = tf.newTransformer()[ CD ]
Line_129 $$ Transformer trans-->Line_135 $$ trans = tf.newTransformer()[ FD ]
Line_135 $$ trans = tf.newTransformer()-->Line_135 $$ trans = tf.newTransformer()[ FD ]
Line_135 $$ trans = tf.newTransformer()-->Line_135 $$ trans = tf.newTransformer()[ CD ]
Line_128 $$ TransformerFactory tf = TransformerFactory.newInstance()-->Line_135 $$ trans = tf.newTransformer()[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_136 $$ StringWriter sw = new StringWriter()[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_137 $$ PrintWriter pw = new PrintWriter(sw)[ CD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_138 $$ trans.transform(new DOMSource(doc), new StreamResult(pw))[ CD ]
Line_129 $$ Transformer trans-->Line_138 $$ trans.transform(new DOMSource(doc), new StreamResult(pw))[ FD ]
Line_135 $$ trans = tf.newTransformer()-->Line_138 $$ trans.transform(new DOMSource(doc), new StreamResult(pw))[ FD ]
Line_2 $$ public void signAndSend() throws Exception -->Line_139 $$ if (useJavaPOST) [ CD ]
Line_141 $$ URL url = new URL(sPAssertionConsumerService)-->Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_143 $$ conn.setDoOutput(true)[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_144 $$ conn.setDoInput(true)[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_145 $$ conn.setRequestMethod("POST")[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_146 $$ conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_147 $$ conn.setInstanceFollowRedirects(false)[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_148 $$ conn.setUseCaches(false)[ FD ]
Line_149 $$ String base64ofDoc = Base64.encode(sw.toString().getBytes())-->Line_149 $$ String base64ofDoc = Base64.encode(sw.toString().getBytes())[ CD ]
Line_136 $$ StringWriter sw = new StringWriter()-->Line_149 $$ String base64ofDoc = Base64.encode(sw.toString().getBytes())[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_150 $$ DataOutputStream printout = new DataOutputStream(conn.getOutputStream())[ FD ]
Line_149 $$ String base64ofDoc = Base64.encode(sw.toString().getBytes())-->Line_151 $$ String content = "SAMLResponse=" + URLEncoder.encode(base64ofDoc, "UTF-8")[ FD ]
Line_150 $$ DataOutputStream printout = new DataOutputStream(conn.getOutputStream())-->Line_152 $$ printout.writeBytes(content)[ FD ]
Line_151 $$ String content = "SAMLResponse=" + URLEncoder.encode(base64ofDoc, "UTF-8")-->Line_152 $$ printout.writeBytes(content)[ FD ]
Line_150 $$ DataOutputStream printout = new DataOutputStream(conn.getOutputStream())-->Line_153 $$ printout.flush()[ FD ]
Line_150 $$ DataOutputStream printout = new DataOutputStream(conn.getOutputStream())-->Line_154 $$ printout.close()[ FD ]
Line_155 $$ if (TEST_GOOD_REPLAY == testNumber) -->Line_156 $$ base64Assertion = Base64.encode(sw.toString().getBytes())[ CD ]
Line_136 $$ StringWriter sw = new StringWriter()-->Line_156 $$ base64Assertion = Base64.encode(sw.toString().getBytes())[ FD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_159 $$ BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream()))[ FD ]
Line_160 $$ String redirect = conn.getHeaderField("Location")-->Line_160 $$ String redirect = conn.getHeaderField("Location")[ CD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_160 $$ String redirect = conn.getHeaderField("Location")[ FD ]
Line_160 $$ String redirect = conn.getHeaderField("Location")-->Line_161 $$ if (redirect != null) [ FD ]
Line_161 $$ if (redirect != null) -->Line_162 $$ input.close()[ CD ]
Line_159 $$ BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_162 $$ input.close()[ FD ]
Line_161 $$ if (redirect != null) -->Line_163 $$ URL url2 = new URL(redirect)[ CD ]
Line_161 $$ if (redirect != null) -->Line_164 $$ URLConnection conn2 = url2.openConnection()[ CD ]
Line_164 $$ URLConnection conn2 = url2.openConnection()-->Line_164 $$ URLConnection conn2 = url2.openConnection()[ CD ]
Line_163 $$ URL url2 = new URL(redirect)-->Line_164 $$ URLConnection conn2 = url2.openConnection()[ FD ]
Line_161 $$ if (redirect != null) -->Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")[ CD ]
Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")-->Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")[ CD ]
Line_142 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")[ FD ]
Line_161 $$ if (redirect != null) -->Line_166 $$ if (cookie != null) [ CD ]
Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")-->Line_166 $$ if (cookie != null) [ FD ]
Line_166 $$ if (cookie != null) -->Line_167 $$ int index = cookie.indexOf(";")[ CD ]
Line_167 $$ int index = cookie.indexOf(";")-->Line_167 $$ int index = cookie.indexOf(";")[ CD ]
Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")-->Line_167 $$ int index = cookie.indexOf(";")[ FD ]
Line_166 $$ if (cookie != null) -->Line_168 $$ if (index >= 0)[ CD ]
Line_167 $$ int index = cookie.indexOf(";")-->Line_168 $$ if (index >= 0)[ FD ]
Line_168 $$ if (index >= 0)-->Line_168 $$ cookie = cookie.substring(0, index)[ CD ]
Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")-->Line_168 $$ cookie = cookie.substring(0, index)[ FD ]
Line_168 $$ cookie = cookie.substring(0, index)-->Line_168 $$ cookie = cookie.substring(0, index)[ FD ]
Line_168 $$ cookie = cookie.substring(0, index)-->Line_168 $$ cookie = cookie.substring(0, index)[ CD ]
Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")-->Line_168 $$ cookie = cookie.substring(0, index)[ FD ]
Line_168 $$ cookie = cookie.substring(0, index)-->Line_168 $$ cookie = cookie.substring(0, index)[ FD ]
Line_167 $$ int index = cookie.indexOf(";")-->Line_168 $$ cookie = cookie.substring(0, index)[ FD ]
Line_166 $$ if (cookie != null) -->Line_169 $$ conn2.setRequestProperty("Cookie", cookie)[ CD ]
Line_164 $$ URLConnection conn2 = url2.openConnection()-->Line_169 $$ conn2.setRequestProperty("Cookie", cookie)[ FD ]
Line_165 $$ String cookie = conn.getHeaderField("Set-Cookie")-->Line_169 $$ conn2.setRequestProperty("Cookie", cookie)[ FD ]
Line_168 $$ cookie = cookie.substring(0, index)-->Line_169 $$ conn2.setRequestProperty("Cookie", cookie)[ FD ]
Line_161 $$ if (redirect != null) -->Line_171 $$ input = new BufferedReader(new InputStreamReader(conn2.getInputStream()))[ CD ]
Line_159 $$ BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_171 $$ input = new BufferedReader(new InputStreamReader(conn2.getInputStream()))[ FD ]
Line_171 $$ input = new BufferedReader(new InputStreamReader(conn2.getInputStream()))-->Line_171 $$ input = new BufferedReader(new InputStreamReader(conn2.getInputStream()))[ FD ]
Line_164 $$ URLConnection conn2 = url2.openConnection()-->Line_171 $$ input = new BufferedReader(new InputStreamReader(conn2.getInputStream()))[ FD ]
Line_175 $$ while (null != ((str2 = input.readLine()))) -->Line_175 $$ while (null != ((str2 = input.readLine()))) [ FD ]
Line_174 $$ String str2-->Line_175 $$ while (null != ((str2 = input.readLine()))) [ FD ]
Line_175 $$ while (null != ((str2 = input.readLine()))) -->Line_175 $$ while (null != ((str2 = input.readLine()))) [ CD ]
Line_159 $$ BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_175 $$ while (null != ((str2 = input.readLine()))) [ FD ]
Line_171 $$ input = new BufferedReader(new InputStreamReader(conn2.getInputStream()))-->Line_175 $$ while (null != ((str2 = input.readLine()))) [ FD ]
Line_175 $$ while (null != ((str2 = input.readLine()))) -->Line_176 $$ buff.append(str2)[ CD ]
Line_173 $$ StringBuffer buff = new StringBuffer()-->Line_176 $$ buff.append(str2)[ FD ]
Line_175 $$ while (null != ((str2 = input.readLine()))) -->Line_176 $$ buff.append(str2)[ FD ]
Line_174 $$ String str2-->Line_176 $$ buff.append(str2)[ FD ]
Line_159 $$ BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_178 $$ input.close()[ FD ]
Line_171 $$ input = new BufferedReader(new InputStreamReader(conn2.getInputStream()))-->Line_178 $$ input.close()[ FD ]
Line_173 $$ StringBuffer buff = new StringBuffer()-->Line_179 $$ result = buff.toString()[ FD ]
Line_139 $$ if (useJavaPOST) -->Line_187 $$ base64Assertion = Base64.encode(sw.toString().getBytes())[ CD ]
Line_136 $$ StringWriter sw = new StringWriter()-->Line_187 $$ base64Assertion = Base64.encode(sw.toString().getBytes())[ FD ]
Line_139 $$ if (useJavaPOST) -->Line_188 $$ Transformer transPretty = tf.newTransformer(new StreamSource(resourceFolder + "PrettyPrint.xslt"))[ CD ]
Line_188 $$ Transformer transPretty = tf.newTransformer(new StreamSource(resourceFolder + "PrettyPrint.xslt"))-->Line_188 $$ Transformer transPretty = tf.newTransformer(new StreamSource(resourceFolder + "PrettyPrint.xslt"))[ CD ]
Line_128 $$ TransformerFactory tf = TransformerFactory.newInstance()-->Line_188 $$ Transformer transPretty = tf.newTransformer(new StreamSource(resourceFolder + "PrettyPrint.xslt"))[ FD ]
Line_139 $$ if (useJavaPOST) -->Line_189 $$ StringWriter swPretty = new StringWriter()[ CD ]
Line_139 $$ if (useJavaPOST) -->Line_190 $$ PrintWriter pwPretty = new PrintWriter(sw)[ CD ]
Line_139 $$ if (useJavaPOST) -->Line_191 $$ trans.transform(new DOMSource(doc), new StreamResult(pwPretty))[ CD ]
Line_129 $$ Transformer trans-->Line_191 $$ trans.transform(new DOMSource(doc), new StreamResult(pwPretty))[ FD ]
Line_135 $$ trans = tf.newTransformer()-->Line_191 $$ trans.transform(new DOMSource(doc), new StreamResult(pwPretty))[ FD ]
Line_139 $$ if (useJavaPOST) -->Line_192 $$ prettyAssertion = sw.toString()[ CD ]
Line_136 $$ StringWriter sw = new StringWriter()-->Line_192 $$ prettyAssertion = sw.toString()[ FD ]
Line_139 $$ if (useJavaPOST) -->Line_193 $$ System.out.println(XMLHelper.prettyPrintXML(doc.getFirstChild()))[ CD ]
Line_54 $$ Document doc = db.parse(docFile)-->Line_193 $$ System.out.println(XMLHelper.prettyPrintXML(doc.getFirstChild()))[ FD ]
Line_42 $$ String alias = (String) aliases.nextElement()-->Line_43 $$ boolean b = ks.isKeyEntry(alias)[ FD ]
Line_42 $$ String alias = (String) aliases.nextElement()-->Line_44 $$ b = ks.isCertificateEntry(alias)[ FD ]
Line_175 $$ while (null != ((str2 = input.readLine()))) -->Line_176 $$ buff.append(str2)[ FD ]
