Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException [ CD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_3 $$ logger.info("JAISaveTask:process")[ CD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_4 $$ final RenderedOp im = (RenderedOp) context.get("RenderedOp")[ CD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_4 $$ final RenderedOp im = (RenderedOp) context.get("RenderedOp")[ FD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_5 $$ final String path = "s3://s3.amazonaws.com/rssfetch/" + (new Guid())[ CD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_6 $$ final PNGEncodeParam.RGB encPar = new PNGEncodeParam.RGB()[ CD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_7 $$ encPar.setTransparentRGB(new int[] [ CD ]
Line_6 $$ final PNGEncodeParam.RGB encPar = new PNGEncodeParam.RGB()-->Line_7 $$ encPar.setTransparentRGB(new int[] [ FD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_8 $$ File tmpFile = null[ CD ]
Line_8 $$ File tmpFile = null-->Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")[ FD ]
Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")-->Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")[ FD ]
Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")-->Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")[ CD ]
Line_12 $$ final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add("png").add(encPar)-->Line_12 $$ final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add("png").add(encPar)[ CD ]
Line_6 $$ final PNGEncodeParam.RGB encPar = new PNGEncodeParam.RGB()-->Line_12 $$ final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add("png").add(encPar)[ FD ]
Line_11 $$ OutputStream out = new FileOutputStream(tmpFile)-->Line_12 $$ final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add("png").add(encPar)[ FD ]
Line_4 $$ final RenderedOp im = (RenderedOp) context.get("RenderedOp")-->Line_12 $$ final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add("png").add(encPar)[ FD ]
Line_12 $$ final ParameterBlock pb = (new ParameterBlock()).addSource(im).add(out).add("png").add(encPar)-->Line_13 $$ JAI.create("encode", pb, null)[ FD ]
Line_11 $$ OutputStream out = new FileOutputStream(tmpFile)-->Line_14 $$ out.flush()[ FD ]
Line_11 $$ OutputStream out = new FileOutputStream(tmpFile)-->Line_15 $$ out.close()[ FD ]
Line_17 $$ final XFile xfile = new XFile(path)-->Line_19 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfile.getExtensionAccessor())[ FD ]
Line_19 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfile.getExtensionAccessor())-->Line_20 $$ if (xfa != null) [ FD ]
Line_20 $$ if (xfa != null) -->Line_21 $$ xfa.setMimeType("image/png")[ CD ]
Line_19 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfile.getExtensionAccessor())-->Line_21 $$ xfa.setMimeType("image/png")[ FD ]
Line_20 $$ if (xfa != null) -->Line_22 $$ xfa.setContentLength(tmpFile.length())[ CD ]
Line_19 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfile.getExtensionAccessor())-->Line_22 $$ xfa.setContentLength(tmpFile.length())[ FD ]
Line_8 $$ File tmpFile = null-->Line_22 $$ xfa.setContentLength(tmpFile.length())[ FD ]
Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")-->Line_22 $$ xfa.setContentLength(tmpFile.length())[ FD ]
Line_16 $$ FileInputStream in = new FileInputStream(tmpFile)-->Line_24 $$ IOUtils.copy(in, xout)[ FD ]
Line_18 $$ final XFileOutputStream xout = new XFileOutputStream(xfile)-->Line_24 $$ IOUtils.copy(in, xout)[ FD ]
Line_18 $$ final XFileOutputStream xout = new XFileOutputStream(xfile)-->Line_25 $$ xout.flush()[ FD ]
Line_18 $$ final XFileOutputStream xout = new XFileOutputStream(xfile)-->Line_26 $$ xout.close()[ FD ]
Line_16 $$ FileInputStream in = new FileInputStream(tmpFile)-->Line_27 $$ in.close()[ FD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_28 $$ context.put("outputPath", path)[ FD ]
Line_5 $$ final String path = "s3://s3.amazonaws.com/rssfetch/" + (new Guid())-->Line_28 $$ context.put("outputPath", path)[ FD ]
Line_8 $$ File tmpFile = null-->Line_36 $$ if (tmpFile != null && tmpFile.exists()) [ FD ]
Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")-->Line_36 $$ if (tmpFile != null && tmpFile.exists()) [ FD ]
Line_36 $$ if (tmpFile != null && tmpFile.exists()) -->Line_37 $$ tmpFile.delete()[ CD ]
Line_8 $$ File tmpFile = null-->Line_37 $$ tmpFile.delete()[ FD ]
Line_10 $$ tmpFile = File.createTempFile("thmb", ".png")-->Line_37 $$ tmpFile.delete()[ FD ]
Line_2 $$ public int process(ProcessorContext context) throws InterruptedException, ProcessorException -->Line_40 $$ return TaskState.STATE_MO_START + TaskState.STATE_ENCODE[ CD ]
