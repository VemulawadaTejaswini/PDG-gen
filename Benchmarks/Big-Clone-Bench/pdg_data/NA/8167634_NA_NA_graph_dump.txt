Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testAuthorizedMirror() throws IOException [ CD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_3 $$ final URL url = new URL("http://127.0.0.1:" + testPort + "/mirror?version=5&direction=just+right")[ CD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ final URL url = new URL("http://127.0.0.1:" + testPort + "/mirror?version=5&direction=just+right")-->Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_5 $$ con.setRequestProperty("Authorization", "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==")[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_5 $$ con.setRequestProperty("Authorization", "Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==")[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_6 $$ con.setRequestProperty("WWW-Authenticate", "Basic realm=\"karatasi\"")[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_6 $$ con.setRequestProperty("WWW-Authenticate", "Basic realm=\"karatasi\"")[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_7 $$ con.setRequestProperty("testline1", "1234567890")[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_7 $$ con.setRequestProperty("testline1", "1234567890")[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_8 $$ assertEquals("Expecting resource to exist.", HttpURLConnection.HTTP_OK, con.getResponseCode())[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_8 $$ assertEquals("Expecting resource to exist.", HttpURLConnection.HTTP_OK, con.getResponseCode())[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_9 $$ assertEquals("mirror responds with Content-Type text/plain.", "text/plain", con.getContentType())[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_9 $$ assertEquals("mirror responds with Content-Type text/plain.", "text/plain", con.getContentType())[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_10 $$ assertNull("The server does not use any special encoding.", con.getContentEncoding())[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_10 $$ assertNull("The server does not use any special encoding.", con.getContentEncoding())[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_11 $$ int bytesRemaining = con.getContentLength()[ CD ]
Line_11 $$ int bytesRemaining = con.getContentLength()-->Line_11 $$ int bytesRemaining = con.getContentLength()[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_11 $$ int bytesRemaining = con.getContentLength()[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_12 $$ final InputStream err = con.getErrorStream()[ CD ]
Line_12 $$ final InputStream err = con.getErrorStream()-->Line_12 $$ final InputStream err = con.getErrorStream()[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_12 $$ final InputStream err = con.getErrorStream()[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_13 $$ assertNull("Expecting no error stream.", err)[ CD ]
Line_12 $$ final InputStream err = con.getErrorStream()-->Line_13 $$ assertNull("Expecting no error stream.", err)[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_14 $$ final InputStream in = con.getInputStream()[ CD ]
Line_14 $$ final InputStream in = con.getInputStream()-->Line_14 $$ final InputStream in = con.getInputStream()[ CD ]
Line_4 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection()-->Line_14 $$ final InputStream in = con.getInputStream()[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_15 $$ final byte[] buf = new byte[bytesRemaining][ CD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ CD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_2 $$ public void testAuthorizedMirror() throws IOException [ CD ]
Line_14 $$ final InputStream in = con.getInputStream()-->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
Line_15 $$ final byte[] buf = new byte[bytesRemaining]-->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
Line_11 $$ int bytesRemaining = con.getContentLength()-->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) -->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ CD ]
Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) -->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ CD ]
Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) -->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
Line_11 $$ int bytesRemaining = con.getContentLength()-->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) -->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_18 $$ assertEquals("Expecting server to send not fewer bytes as indicated.", 0, bytesRemaining)[ CD ]
Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) -->Line_18 $$ assertEquals("Expecting server to send not fewer bytes as indicated.", 0, bytesRemaining)[ FD ]
Line_11 $$ int bytesRemaining = con.getContentLength()-->Line_18 $$ assertEquals("Expecting server to send not fewer bytes as indicated.", 0, bytesRemaining)[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_19 $$ final String testResult = new String(buf, "ASCII")[ CD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_20 $$ assertContains("Response has to contain this line.", testResult, "url direction::just right\r\n")[ CD ]
Line_19 $$ final String testResult = new String(buf, "ASCII")-->Line_20 $$ assertContains("Response has to contain this line.", testResult, "url direction::just right\r\n")[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_21 $$ assertContains("Response has to contain this line.", testResult, "url version::5\r\n")[ CD ]
Line_19 $$ final String testResult = new String(buf, "ASCII")-->Line_21 $$ assertContains("Response has to contain this line.", testResult, "url version::5\r\n")[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_22 $$ assertContains("Response has to contain this line.", testResult, "body authorization::Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\r\n")[ CD ]
Line_19 $$ final String testResult = new String(buf, "ASCII")-->Line_22 $$ assertContains("Response has to contain this line.", testResult, "body authorization::Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\r\n")[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_23 $$ assertContains("Response has to contain this line.", testResult, "body www-authenticate::Basic realm=\"karatasi\"\r\n")[ CD ]
Line_19 $$ final String testResult = new String(buf, "ASCII")-->Line_23 $$ assertContains("Response has to contain this line.", testResult, "body www-authenticate::Basic realm=\"karatasi\"\r\n")[ FD ]
Line_2 $$ public void testAuthorizedMirror() throws IOException -->Line_24 $$ assertContains("Response has to contain this line.", testResult, "body testline1::1234567890\r\n")[ CD ]
Line_19 $$ final String testResult = new String(buf, "ASCII")-->Line_24 $$ assertContains("Response has to contain this line.", testResult, "body testline1::1234567890\r\n")[ FD ]
Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) -->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) -->Line_16 $$ for (int bytesRead; bytesRemaining > 0 && (bytesRead = in.read(buf, buf.length - bytesRemaining, bytesRemaining)) != -1; bytesRemaining -= bytesRead) [ FD ]
