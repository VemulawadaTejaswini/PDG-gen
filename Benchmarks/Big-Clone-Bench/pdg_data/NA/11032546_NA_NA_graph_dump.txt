Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testCopyUnknownSize() throws IOException [ CD ]
Line_2 $$ public void testCopyUnknownSize() throws IOException -->Line_3 $$ final InputStream in = new ByteArrayInputStream(TEST_DATA)[ CD ]
Line_2 $$ public void testCopyUnknownSize() throws IOException -->Line_4 $$ final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length)[ CD ]
Line_2 $$ public void testCopyUnknownSize() throws IOException -->Line_5 $$ final int cpySize = ExtraIOUtils.copy(in, out, (-1))[ CD ]
Line_5 $$ final int cpySize = ExtraIOUtils.copy(in, out, (-1))-->Line_5 $$ final int cpySize = ExtraIOUtils.copy(in, out, (-1))[ CD ]
Line_3 $$ final InputStream in = new ByteArrayInputStream(TEST_DATA)-->Line_5 $$ final int cpySize = ExtraIOUtils.copy(in, out, (-1))[ FD ]
Line_4 $$ final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length)-->Line_5 $$ final int cpySize = ExtraIOUtils.copy(in, out, (-1))[ FD ]
Line_2 $$ public void testCopyUnknownSize() throws IOException -->Line_6 $$ assertEquals("Mismatched copy size", TEST_DATA.length, cpySize)[ CD ]
Line_5 $$ final int cpySize = ExtraIOUtils.copy(in, out, (-1))-->Line_6 $$ assertEquals("Mismatched copy size", TEST_DATA.length, cpySize)[ FD ]
Line_2 $$ public void testCopyUnknownSize() throws IOException -->Line_7 $$ final byte[] outArray = out.toByteArray()[ CD ]
Line_7 $$ final byte[] outArray = out.toByteArray()-->Line_7 $$ final byte[] outArray = out.toByteArray()[ CD ]
Line_4 $$ final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length)-->Line_7 $$ final byte[] outArray = out.toByteArray()[ FD ]
Line_2 $$ public void testCopyUnknownSize() throws IOException -->Line_8 $$ assertArrayEquals("Mismatched data", TEST_DATA, outArray)[ CD ]
Line_7 $$ final byte[] outArray = out.toByteArray()-->Line_8 $$ assertArrayEquals("Mismatched data", TEST_DATA, outArray)[ FD ]
