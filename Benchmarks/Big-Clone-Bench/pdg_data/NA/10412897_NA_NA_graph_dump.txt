Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void test_ObjectInputStream2() throws IOException [ CD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_3 $$ class TestSecurityManager extends SecurityManager [ CD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_3 $$ class TestSecurityManager extends SecurityManager [ CD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_3 $$ class TestSecurityManager extends SecurityManager [ CD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_7 $$ called = false[ CD ]
Line_7 $$ called = false-->Line_7 $$ called = false[ FD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_3 $$ class TestSecurityManager extends SecurityManager [ CD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_11 $$ if (permission instanceof SerializablePermission) [ CD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_11 $$ if (permission instanceof SerializablePermission) [ FD ]
Line_11 $$ if (permission instanceof SerializablePermission) -->Line_12 $$ called = true[ CD ]
Line_12 $$ called = true-->Line_12 $$ called = true[ FD ]
Line_7 $$ called = false-->Line_12 $$ called = true[ FD ]
Line_11 $$ if (permission instanceof SerializablePermission) -->Line_13 $$ this.permission = permission[ CD ]
Line_3 $$ class TestSecurityManager extends SecurityManager -->Line_13 $$ this.permission = permission[ FD ]
Line_22 $$ class TestObjectInputStream_readFields extends ObjectInputStream -->Line_22 $$ class TestObjectInputStream_readFields extends ObjectInputStream [ CD ]
Line_22 $$ class TestObjectInputStream_readFields extends ObjectInputStream -->Line_27 $$ return super.readFields()[ CD ]
Line_27 $$ return super.readFields()-->Line_27 $$ return super.readFields()[ CD ]
Line_30 $$ class TestObjectInputStream_readUnshared extends ObjectInputStream -->Line_30 $$ class TestObjectInputStream_readUnshared extends ObjectInputStream [ CD ]
Line_30 $$ class TestObjectInputStream_readUnshared extends ObjectInputStream -->Line_35 $$ return super.readUnshared()[ CD ]
Line_35 $$ return super.readUnshared()-->Line_35 $$ return super.readUnshared()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_38 $$ long id = new java.util.Date().getTime()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_40 $$ File f = File.createTempFile(filename, null)[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_42 $$ oos.writeObject(new Node())[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_43 $$ oos.flush()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_44 $$ oos.close()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_45 $$ f.deleteOnExit()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_47 $$ System.setSecurityManager(s)[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_48 $$ s.reset()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_50 $$ assertTrue("ObjectInputStream(InputStream) ctor must not call checkPermission on security manager on a class which neither overwrites methods readFields nor readUnshared", !s.called)[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_51 $$ s.reset()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_53 $$ assertTrue("ObjectInputStream(InputStream) ctor must not call checkPermission on security manager on a class which neither overwrites methods readFields nor readUnshared", !s.called)[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_54 $$ s.reset()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_56 $$ assertTrue("ObjectInputStream(InputStream) ctor must call checkPermission on security manager on a class which overwrites method readFields", s.called)[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_57 $$ assertEquals("Name of SerializablePermission is not correct", "enableSubclassImplementation", s.permission.getName())[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_58 $$ s.reset()[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_60 $$ assertTrue("ObjectInputStream(InputStream) ctor must call checkPermission on security manager on a class which overwrites method readUnshared", s.called)[ CD ]
Line_2 $$ public void test_ObjectInputStream2() throws IOException -->Line_61 $$ assertEquals("Name of SerializablePermission is not correct", "enableSubclassImplementation", s.permission.getName())[ CD ]
