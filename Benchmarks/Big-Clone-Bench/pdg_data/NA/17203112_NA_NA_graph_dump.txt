Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void trySend(Primitive p) throws IOException [ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_3 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_5 $$ mSerializer.serialize(p, out)[ FD ]
Line_3 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_5 $$ mSerializer.serialize(p, out)[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_7 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), ImErrorInfo.SERIALIZER_ERROR, "Internal serializer error, primitive: " + p.getType())[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_7 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), ImErrorInfo.SERIALIZER_ERROR, "Internal serializer error, primitive: " + p.getType())[ FD ]
Line_3 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_8 $$ out.close()[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_11 $$ HttpPost req = new HttpPost(mPostUri)[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_12 $$ req.addHeader(mContentTypeHeader)[ CD ]
Line_11 $$ HttpPost req = new HttpPost(mPostUri)-->Line_12 $$ req.addHeader(mContentTypeHeader)[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_13 $$ if (mMsisdnHeader != null) [ CD ]
Line_13 $$ if (mMsisdnHeader != null) -->Line_14 $$ req.addHeader(mMsisdnHeader)[ CD ]
Line_11 $$ HttpPost req = new HttpPost(mPostUri)-->Line_14 $$ req.addHeader(mMsisdnHeader)[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_16 $$ ByteArrayEntity entity = new ByteArrayEntity(out.toByteArray())[ CD ]
Line_3 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_16 $$ ByteArrayEntity entity = new ByteArrayEntity(out.toByteArray())[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_17 $$ req.setEntity(entity)[ CD ]
Line_11 $$ HttpPost req = new HttpPost(mPostUri)-->Line_17 $$ req.setEntity(entity)[ FD ]
Line_16 $$ ByteArrayEntity entity = new ByteArrayEntity(out.toByteArray())-->Line_17 $$ req.setEntity(entity)[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_18 $$ mLastActive = SystemClock.elapsedRealtime()[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_19 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) [ CD ]
Line_19 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) -->Line_19 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) [ CD ]
Line_19 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) -->Line_20 $$ long sendBytes = entity.getContentLength() + 176[ CD ]
Line_16 $$ ByteArrayEntity entity = new ByteArrayEntity(out.toByteArray())-->Line_20 $$ long sendBytes = entity.getContentLength() + 176[ FD ]
Line_19 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) -->Line_21 $$ ImpsLog.log(mConnection.getLoginUserName() + " >> " + p.getType() + " HTTP payload approx. " + sendBytes + " bytes")[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_21 $$ ImpsLog.log(mConnection.getLoginUserName() + " >> " + p.getType() + " HTTP payload approx. " + sendBytes + " bytes")[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_23 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) [ CD ]
Line_23 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_23 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) [ CD ]
Line_23 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_24 $$ ImpsLog.dumpRawPacket(out.toByteArray())[ CD ]
Line_3 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_24 $$ ImpsLog.dumpRawPacket(out.toByteArray())[ FD ]
Line_23 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_25 $$ ImpsLog.dumpPrimitive(p)[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_25 $$ ImpsLog.dumpPrimitive(p)[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_27 $$ HttpResponse res = mHttpClient.execute(req)[ CD ]
Line_27 $$ HttpResponse res = mHttpClient.execute(req)-->Line_27 $$ HttpResponse res = mHttpClient.execute(req)[ CD ]
Line_11 $$ HttpPost req = new HttpPost(mPostUri)-->Line_27 $$ HttpResponse res = mHttpClient.execute(req)[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_28 $$ StatusLine statusLine = res.getStatusLine()[ CD ]
Line_28 $$ StatusLine statusLine = res.getStatusLine()-->Line_28 $$ StatusLine statusLine = res.getStatusLine()[ CD ]
Line_27 $$ HttpResponse res = mHttpClient.execute(req)-->Line_28 $$ StatusLine statusLine = res.getStatusLine()[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_29 $$ HttpEntity resEntity = res.getEntity()[ CD ]
Line_29 $$ HttpEntity resEntity = res.getEntity()-->Line_29 $$ HttpEntity resEntity = res.getEntity()[ CD ]
Line_27 $$ HttpResponse res = mHttpClient.execute(req)-->Line_29 $$ HttpEntity resEntity = res.getEntity()[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_30 $$ InputStream in = resEntity.getContent()[ CD ]
Line_30 $$ InputStream in = resEntity.getContent()-->Line_30 $$ InputStream in = resEntity.getContent()[ CD ]
Line_29 $$ HttpEntity resEntity = res.getEntity()-->Line_30 $$ InputStream in = resEntity.getContent()[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_31 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) [ CD ]
Line_31 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_31 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) [ CD ]
Line_31 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_32 $$ Log.d(ImpsLog.PACKET_TAG, statusLine.toString())[ CD ]
Line_28 $$ StatusLine statusLine = res.getStatusLine()-->Line_32 $$ Log.d(ImpsLog.PACKET_TAG, statusLine.toString())[ FD ]
Line_31 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_33 $$ Header[] headers = res.getAllHeaders()[ CD ]
Line_33 $$ Header[] headers = res.getAllHeaders()-->Line_33 $$ Header[] headers = res.getAllHeaders()[ CD ]
Line_27 $$ HttpResponse res = mHttpClient.execute(req)-->Line_33 $$ Header[] headers = res.getAllHeaders()[ FD ]
Line_34 $$ for (Header h : headers) -->Line_35 $$ Log.d(ImpsLog.PACKET_TAG, h.toString())[ FD ]
Line_31 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_37 $$ int len = (int) resEntity.getContentLength()[ CD ]
Line_29 $$ HttpEntity resEntity = res.getEntity()-->Line_37 $$ int len = (int) resEntity.getContentLength()[ FD ]
Line_31 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_38 $$ if (len > 0) [ CD ]
Line_37 $$ int len = (int) resEntity.getContentLength()-->Line_38 $$ if (len > 0) [ FD ]
Line_38 $$ if (len > 0) -->Line_39 $$ byte[] content = new byte[len][ CD ]
Line_38 $$ if (len > 0) -->Line_40 $$ int offset = 0[ CD ]
Line_38 $$ if (len > 0) -->Line_41 $$ int bytesRead = 0[ CD ]
Line_38 $$ if (len > 0) -->Line_42 $$ do [ CD ]
Line_38 $$ if (len > 0) -->Line_38 $$ if (len > 0) [ CD ]
Line_41 $$ int bytesRead = 0-->Line_42 $$ do [ FD ]
Line_42 $$ do -->Line_43 $$ bytesRead = in.read(content, offset, len)[ CD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_41 $$ int bytesRead = 0-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_43 $$ bytesRead = in.read(content, offset, len)[ CD ]
Line_30 $$ InputStream in = resEntity.getContent()-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_39 $$ byte[] content = new byte[len]-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_40 $$ int offset = 0-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_37 $$ int len = (int) resEntity.getContentLength()-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_42 $$ do -->Line_44 $$ offset += bytesRead[ CD ]
Line_44 $$ offset += bytesRead-->Line_44 $$ offset += bytesRead[ FD ]
Line_40 $$ int offset = 0-->Line_44 $$ offset += bytesRead[ FD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_44 $$ offset += bytesRead[ FD ]
Line_41 $$ int bytesRead = 0-->Line_44 $$ offset += bytesRead[ FD ]
Line_42 $$ do -->Line_45 $$ len -= bytesRead[ CD ]
Line_45 $$ len -= bytesRead-->Line_45 $$ len -= bytesRead[ FD ]
Line_37 $$ int len = (int) resEntity.getContentLength()-->Line_45 $$ len -= bytesRead[ FD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_45 $$ len -= bytesRead[ FD ]
Line_41 $$ int bytesRead = 0-->Line_45 $$ len -= bytesRead[ FD ]
Line_38 $$ if (len > 0) -->Line_47 $$ in.close()[ CD ]
Line_30 $$ InputStream in = resEntity.getContent()-->Line_47 $$ in.close()[ FD ]
Line_38 $$ if (len > 0) -->Line_48 $$ ImpsLog.dumpRawPacket(content)[ CD ]
Line_39 $$ byte[] content = new byte[len]-->Line_48 $$ ImpsLog.dumpRawPacket(content)[ FD ]
Line_38 $$ if (len > 0) -->Line_49 $$ in = new ByteArrayInputStream(content)[ CD ]
Line_30 $$ InputStream in = resEntity.getContent()-->Line_49 $$ in = new ByteArrayInputStream(content)[ FD ]
Line_49 $$ in = new ByteArrayInputStream(content)-->Line_49 $$ in = new ByteArrayInputStream(content)[ FD ]
Line_28 $$ StatusLine statusLine = res.getStatusLine()-->Line_53 $$ if (statusLine.getStatusCode() != HttpURLConnection.HTTP_OK) [ FD ]
Line_53 $$ if (statusLine.getStatusCode() != HttpURLConnection.HTTP_OK) -->Line_54 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), statusLine.getStatusCode(), statusLine.getReasonPhrase())[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_54 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), statusLine.getStatusCode(), statusLine.getReasonPhrase())[ FD ]
Line_28 $$ StatusLine statusLine = res.getStatusLine()-->Line_54 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), statusLine.getStatusCode(), statusLine.getReasonPhrase())[ FD ]
Line_28 $$ StatusLine statusLine = res.getStatusLine()-->Line_54 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), statusLine.getStatusCode(), statusLine.getReasonPhrase())[ FD ]
Line_53 $$ if (statusLine.getStatusCode() != HttpURLConnection.HTTP_OK) -->Line_55 $$ return[ CD ]
Line_29 $$ HttpEntity resEntity = res.getEntity()-->Line_57 $$ if (resEntity.getContentLength() == 0) [ FD ]
Line_57 $$ if (resEntity.getContentLength() == 0) -->Line_58 $$ if ((p.getTransactionMode() != TransactionMode.Response) && !p.getType().equals(ImpsTags.Polling_Request)) [ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_58 $$ if ((p.getTransactionMode() != TransactionMode.Response) && !p.getType().equals(ImpsTags.Polling_Request)) [ FD ]
Line_58 $$ if ((p.getTransactionMode() != TransactionMode.Response) && !p.getType().equals(ImpsTags.Polling_Request)) -->Line_58 $$ if ((p.getTransactionMode() != TransactionMode.Response) && !p.getType().equals(ImpsTags.Polling_Request)) [ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_58 $$ if ((p.getTransactionMode() != TransactionMode.Response) && !p.getType().equals(ImpsTags.Polling_Request)) [ FD ]
Line_58 $$ if ((p.getTransactionMode() != TransactionMode.Response) && !p.getType().equals(ImpsTags.Polling_Request)) -->Line_59 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), ImErrorInfo.ILLEGAL_SERVER_RESPONSE, "bad response from server")[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_59 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), ImErrorInfo.ILLEGAL_SERVER_RESPONSE, "bad response from server")[ FD ]
Line_57 $$ if (resEntity.getContentLength() == 0) -->Line_61 $$ return[ CD ]
Line_63 $$ Primitive response = mParser.parse(in)-->Line_63 $$ Primitive response = mParser.parse(in)[ CD ]
Line_30 $$ InputStream in = resEntity.getContent()-->Line_63 $$ Primitive response = mParser.parse(in)[ FD ]
Line_49 $$ in = new ByteArrayInputStream(content)-->Line_63 $$ Primitive response = mParser.parse(in)[ FD ]
Line_64 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_64 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) [ CD ]
Line_64 $$ if (Log.isLoggable(ImpsLog.PACKET_TAG, Log.DEBUG)) -->Line_65 $$ ImpsLog.dumpPrimitive(response)[ CD ]
Line_63 $$ Primitive response = mParser.parse(in)-->Line_65 $$ ImpsLog.dumpPrimitive(response)[ FD ]
Line_67 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) -->Line_67 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) [ CD ]
Line_29 $$ HttpEntity resEntity = res.getEntity()-->Line_68 $$ long len = 2 + resEntity.getContentLength() + statusLine.toString().length() + 2[ FD ]
Line_28 $$ StatusLine statusLine = res.getStatusLine()-->Line_68 $$ long len = 2 + resEntity.getContentLength() + statusLine.toString().length() + 2[ FD ]
Line_67 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) -->Line_69 $$ Header[] headers = res.getAllHeaders()[ CD ]
Line_27 $$ HttpResponse res = mHttpClient.execute(req)-->Line_69 $$ Header[] headers = res.getAllHeaders()[ FD ]
Line_45 $$ len -= bytesRead-->Line_71 $$ len += header.getName().length() + header.getValue().length() + 4[ FD ]
Line_37 $$ int len = (int) resEntity.getContentLength()-->Line_71 $$ len += header.getName().length() + header.getValue().length() + 4[ FD ]
Line_71 $$ len += header.getName().length() + header.getValue().length() + 4-->Line_71 $$ len += header.getName().length() + header.getValue().length() + 4[ FD ]
Line_70 $$ for (Header header : headers) -->Line_71 $$ len += header.getName().length() + header.getValue().length() + 4[ FD ]
Line_70 $$ for (Header header : headers) -->Line_71 $$ len += header.getName().length() + header.getValue().length() + 4[ FD ]
Line_67 $$ if (Log.isLoggable(ImpsLog.TAG, Log.DEBUG)) -->Line_73 $$ ImpsLog.log(mConnection.getLoginUserName() + " << " + response.getType() + " HTTP payload approx. " + len + "bytes")[ CD ]
Line_63 $$ Primitive response = mParser.parse(in)-->Line_73 $$ ImpsLog.log(mConnection.getLoginUserName() + " << " + response.getType() + " HTTP payload approx. " + len + "bytes")[ FD ]
Line_75 $$ if (!mReceiveQueue.offer(response)) -->Line_75 $$ if (!mReceiveQueue.offer(response)) [ CD ]
Line_75 $$ if (!mReceiveQueue.offer(response)) -->Line_75 $$ if (!mReceiveQueue.offer(response)) [ CD ]
Line_63 $$ Primitive response = mParser.parse(in)-->Line_75 $$ if (!mReceiveQueue.offer(response)) [ FD ]
Line_75 $$ if (!mReceiveQueue.offer(response)) -->Line_76 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), ImErrorInfo.UNKNOWN_ERROR, "receiving queue full")[ CD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_76 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), ImErrorInfo.UNKNOWN_ERROR, "receiving queue full")[ FD ]
Line_2 $$ private void trySend(Primitive p) throws IOException -->Line_80 $$ mTxManager.notifyErrorResponse(p.getTransactionID(), ImErrorInfo.PARSER_ERROR, "Parser error, received a bad response from server")[ FD ]
Line_29 $$ HttpEntity resEntity = res.getEntity()-->Line_82 $$ resEntity.consumeContent()[ FD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_42 $$ do [ FD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_42 $$ do [ FD ]
Line_44 $$ offset += bytesRead-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_45 $$ len -= bytesRead-->Line_43 $$ bytesRead = in.read(content, offset, len)[ FD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_44 $$ offset += bytesRead[ FD ]
Line_43 $$ bytesRead = in.read(content, offset, len)-->Line_45 $$ len -= bytesRead[ FD ]
