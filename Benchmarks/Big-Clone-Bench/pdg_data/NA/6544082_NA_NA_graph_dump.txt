Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String readScriptFromURL(URL context, String s) [ CD ]
Line_2 $$ private String readScriptFromURL(URL context, String s) -->Line_3 $$ Object content = null[ CD ]
Line_2 $$ private String readScriptFromURL(URL context, String s) -->Line_4 $$ URL url[ CD ]
Line_4 $$ URL url-->Line_6 $$ url = new URL(context, s)[ FD ]
Line_6 $$ url = new URL(context, s)-->Line_6 $$ url = new URL(context, s)[ FD ]
Line_3 $$ Object content = null-->Line_11 $$ content = url.getContent()[ FD ]
Line_11 $$ content = url.getContent()-->Line_11 $$ content = url.getContent()[ FD ]
Line_11 $$ content = url.getContent()-->Line_11 $$ content = url.getContent()[ CD ]
Line_4 $$ URL url-->Line_11 $$ content = url.getContent()[ FD ]
Line_6 $$ url = new URL(context, s)-->Line_11 $$ content = url.getContent()[ FD ]
Line_13 $$ Class jar_class-->Line_15 $$ jar_class = Class.forName("java.net.JarURLConnection")[ FD ]
Line_15 $$ jar_class = Class.forName("java.net.JarURLConnection")-->Line_15 $$ jar_class = Class.forName("java.net.JarURLConnection")[ FD ]
Line_15 $$ jar_class = Class.forName("java.net.JarURLConnection")-->Line_15 $$ jar_class = Class.forName("java.net.JarURLConnection")[ CD ]
Line_19 $$ Object jar-->Line_21 $$ jar = url.openConnection()[ FD ]
Line_21 $$ jar = url.openConnection()-->Line_21 $$ jar = url.openConnection()[ FD ]
Line_21 $$ jar = url.openConnection()-->Line_21 $$ jar = url.openConnection()[ CD ]
Line_4 $$ URL url-->Line_21 $$ jar = url.openConnection()[ FD ]
Line_6 $$ url = new URL(context, s)-->Line_21 $$ jar = url.openConnection()[ FD ]
Line_19 $$ Object jar-->Line_25 $$ if (jar == null) [ FD ]
Line_21 $$ jar = url.openConnection()-->Line_25 $$ if (jar == null) [ FD ]
Line_25 $$ if (jar == null) -->Line_26 $$ return null[ CD ]
Line_29 $$ Method m = jar_class.getMethod("openConnection", ((java.lang.Class[]) null))-->Line_29 $$ Method m = jar_class.getMethod("openConnection", ((java.lang.Class[]) null))[ CD ]
Line_13 $$ Class jar_class-->Line_29 $$ Method m = jar_class.getMethod("openConnection", ((java.lang.Class[]) null))[ FD ]
Line_15 $$ jar_class = Class.forName("java.net.JarURLConnection")-->Line_29 $$ Method m = jar_class.getMethod("openConnection", ((java.lang.Class[]) null))[ FD ]
Line_3 $$ Object content = null-->Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))[ FD ]
Line_11 $$ content = url.getContent()-->Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))[ FD ]
Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))-->Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))[ FD ]
Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))-->Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))[ CD ]
Line_29 $$ Method m = jar_class.getMethod("openConnection", ((java.lang.Class[]) null))-->Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))[ FD ]
Line_19 $$ Object jar-->Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))[ FD ]
Line_21 $$ jar = url.openConnection()-->Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))[ FD ]
Line_2 $$ private String readScriptFromURL(URL context, String s) -->Line_39 $$ if (content instanceof String) [ CD ]
Line_3 $$ Object content = null-->Line_39 $$ if (content instanceof String) [ FD ]
Line_11 $$ content = url.getContent()-->Line_39 $$ if (content instanceof String) [ FD ]
Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))-->Line_39 $$ if (content instanceof String) [ FD ]
Line_39 $$ if (content instanceof String) -->Line_40 $$ return (String) content[ CD ]
Line_39 $$ if (content instanceof String) -->Line_41 $$ if (content instanceof InputStream) [ CD ]
Line_3 $$ Object content = null-->Line_41 $$ if (content instanceof InputStream) [ FD ]
Line_11 $$ content = url.getContent()-->Line_41 $$ if (content instanceof InputStream) [ FD ]
Line_30 $$ content = m.invoke(jar, ((java.lang.Object[]) null))-->Line_41 $$ if (content instanceof InputStream) [ FD ]
Line_41 $$ if (content instanceof InputStream) -->Line_42 $$ InputStream fs = (InputStream) content[ CD ]
Line_42 $$ InputStream fs = (InputStream) content-->Line_44 $$ byte charArray[] = new byte[fs.available()][ FD ]
Line_42 $$ InputStream fs = (InputStream) content-->Line_45 $$ fs.read(charArray)[ FD ]
Line_42 $$ InputStream fs = (InputStream) content-->Line_50 $$ closeInputStream(fs)[ FD ]
Line_41 $$ if (content instanceof InputStream) -->Line_53 $$ return null[ CD ]
