Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public SequenceIterator call(SequenceIterator[] arguments, XPathContext context) throws XPathException [ CD ]
Line_4 $$ String encodedString = ((StringValue) arguments[0].next()).getStringValue()-->Line_4 $$ String encodedString = ((StringValue) arguments[0].next()).getStringValue()[ CD ]
Line_5 $$ byte[] decodedBytes = Base64.decode(encodedString)-->Line_5 $$ byte[] decodedBytes = Base64.decode(encodedString)[ CD ]
Line_4 $$ String encodedString = ((StringValue) arguments[0].next()).getStringValue()-->Line_5 $$ byte[] decodedBytes = Base64.decode(encodedString)[ FD ]
Line_6 $$ if (arguments.length > 1 && ((BooleanValue) arguments[1].next()).getBooleanValue()) -->Line_7 $$ ByteArrayInputStream bis = new ByteArrayInputStream(decodedBytes)[ CD ]
Line_6 $$ if (arguments.length > 1 && ((BooleanValue) arguments[1].next()).getBooleanValue()) -->Line_8 $$ GZIPInputStream zis = new GZIPInputStream(bis)[ CD ]
Line_6 $$ if (arguments.length > 1 && ((BooleanValue) arguments[1].next()).getBooleanValue()) -->Line_9 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_6 $$ if (arguments.length > 1 && ((BooleanValue) arguments[1].next()).getBooleanValue()) -->Line_10 $$ IOUtils.copy(zis, baos)[ CD ]
Line_8 $$ GZIPInputStream zis = new GZIPInputStream(bis)-->Line_10 $$ IOUtils.copy(zis, baos)[ FD ]
Line_9 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_10 $$ IOUtils.copy(zis, baos)[ FD ]
Line_6 $$ if (arguments.length > 1 && ((BooleanValue) arguments[1].next()).getBooleanValue()) -->Line_11 $$ decodedBytes = baos.toByteArray()[ CD ]
Line_5 $$ byte[] decodedBytes = Base64.decode(encodedString)-->Line_11 $$ decodedBytes = baos.toByteArray()[ FD ]
Line_11 $$ decodedBytes = baos.toByteArray()-->Line_11 $$ decodedBytes = baos.toByteArray()[ FD ]
Line_11 $$ decodedBytes = baos.toByteArray()-->Line_11 $$ decodedBytes = baos.toByteArray()[ CD ]
Line_9 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_11 $$ decodedBytes = baos.toByteArray()[ FD ]
Line_13 $$ Document doc = XmlUtils.stringToDocument(new String(decodedBytes, "UTF-8"))-->Line_13 $$ Document doc = XmlUtils.stringToDocument(new String(decodedBytes, "UTF-8"))[ CD ]
Line_13 $$ Document doc = XmlUtils.stringToDocument(new String(decodedBytes, "UTF-8"))-->Line_14 $$ Source source = new DOMSource(doc.getDocumentElement())[ FD ]
Line_2 $$ public SequenceIterator call(SequenceIterator[] arguments, XPathContext context) throws XPathException -->Line_15 $$ XPathEvaluator evaluator = new XPathEvaluator(context.getConfiguration())[ FD ]
Line_15 $$ XPathEvaluator evaluator = new XPathEvaluator(context.getConfiguration())-->Line_16 $$ NodeInfo[] infos = new NodeInfo[] [ FD ]
Line_14 $$ Source source = new DOMSource(doc.getDocumentElement())-->Line_16 $$ NodeInfo[] infos = new NodeInfo[] [ FD ]
