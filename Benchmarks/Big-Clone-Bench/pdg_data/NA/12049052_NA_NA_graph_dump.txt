Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException [ CD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_3 $$ Collection<Class<? extends Plugin>> pluginClasses = new HashSet<Class<? extends Plugin>>()[ CD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)[ CD ]
Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)-->Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)[ CD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)[ FD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)[ FD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_5 $$ if (!providerFiles.hasMoreElements()) [ CD ]
Line_5 $$ if (!providerFiles.hasMoreElements()) -->Line_5 $$ if (!providerFiles.hasMoreElements()) [ CD ]
Line_5 $$ if (!providerFiles.hasMoreElements()) -->Line_5 $$ if (!providerFiles.hasMoreElements()) [ CD ]
Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)-->Line_5 $$ if (!providerFiles.hasMoreElements()) [ FD ]
Line_5 $$ if (!providerFiles.hasMoreElements()) -->Line_6 $$ logger.warning("Can't find the resource: " + resource)[ CD ]
Line_5 $$ if (!providerFiles.hasMoreElements()) -->Line_7 $$ return pluginClasses[ CD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_9 $$ do [ CD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException [ CD ]
Line_9 $$ do -->Line_10 $$ URL url = (URL) providerFiles.nextElement()[ CD ]
Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)-->Line_10 $$ URL url = (URL) providerFiles.nextElement()[ FD ]
Line_9 $$ do -->Line_11 $$ InputStream stream = url.openStream()[ CD ]
Line_11 $$ InputStream stream = url.openStream()-->Line_11 $$ InputStream stream = url.openStream()[ CD ]
Line_10 $$ URL url = (URL) providerFiles.nextElement()-->Line_11 $$ InputStream stream = url.openStream()[ FD ]
Line_9 $$ do -->Line_12 $$ BufferedReader reader[ CD ]
Line_12 $$ BufferedReader reader-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))[ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))[ FD ]
Line_9 $$ do -->Line_18 $$ String line[ CD ]
Line_9 $$ do -->Line_19 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_9 $$ do -->Line_9 $$ do [ CD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_19 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_18 $$ String line-->Line_19 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_19 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_12 $$ BufferedReader reader-->Line_19 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_19 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_20 $$ int index = line.indexOf('#')[ CD ]
Line_20 $$ int index = line.indexOf('#')-->Line_20 $$ int index = line.indexOf('#')[ CD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_20 $$ int index = line.indexOf('#')[ FD ]
Line_18 $$ String line-->Line_20 $$ int index = line.indexOf('#')[ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_21 $$ if (index != -1) [ CD ]
Line_20 $$ int index = line.indexOf('#')-->Line_21 $$ if (index != -1) [ FD ]
Line_21 $$ if (index != -1) -->Line_22 $$ line = line.substring(0, index)[ CD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_18 $$ String line-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_22 $$ line = line.substring(0, index)[ CD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_18 $$ String line-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_20 $$ int index = line.indexOf('#')-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ line = line.trim()[ CD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ line = line.trim()[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_24 $$ line = line.trim()[ FD ]
Line_24 $$ line = line.trim()-->Line_24 $$ line = line.trim()[ FD ]
Line_18 $$ String line-->Line_24 $$ line = line.trim()[ FD ]
Line_24 $$ line = line.trim()-->Line_24 $$ line = line.trim()[ CD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ line = line.trim()[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_24 $$ line = line.trim()[ FD ]
Line_24 $$ line = line.trim()-->Line_24 $$ line = line.trim()[ FD ]
Line_18 $$ String line-->Line_24 $$ line = line.trim()[ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_25 $$ if (line.length() > 0) [ CD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_25 $$ if (line.length() > 0) [ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_25 $$ if (line.length() > 0) [ FD ]
Line_24 $$ line = line.trim()-->Line_25 $$ if (line.length() > 0) [ FD ]
Line_18 $$ String line-->Line_25 $$ if (line.length() > 0) [ FD ]
Line_25 $$ if (line.length() > 0) -->Line_26 $$ Class pluginClass[ CD ]
Line_26 $$ Class pluginClass-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_28 $$ pluginClass = classLoader.loadClass(line)-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_28 $$ pluginClass = classLoader.loadClass(line)-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ CD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_24 $$ line = line.trim()-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_18 $$ String line-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_25 $$ if (line.length() > 0) -->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ CD ]
Line_26 $$ Class pluginClass-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
Line_28 $$ pluginClass = classLoader.loadClass(line)-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) -->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ CD ]
Line_26 $$ Class pluginClass-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
Line_28 $$ pluginClass = classLoader.loadClass(line)-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) -->Line_34 $$ pluginClasses.add((Class<? extends Plugin>) pluginClass)[ CD ]
Line_3 $$ Collection<Class<? extends Plugin>> pluginClasses = new HashSet<Class<? extends Plugin>>()-->Line_34 $$ pluginClasses.add((Class<? extends Plugin>) pluginClass)[ FD ]
Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) -->Line_36 $$ logger.warning("The Pluginclass with the name " + line + " isn't a subclass of Plugin.")[ CD ]
Line_9 $$ do -->Line_40 $$ reader.close()[ CD ]
Line_12 $$ BufferedReader reader-->Line_40 $$ reader.close()[ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_40 $$ reader.close()[ FD ]
Line_9 $$ do -->Line_41 $$ stream.close()[ CD ]
Line_11 $$ InputStream stream = url.openStream()-->Line_41 $$ stream.close()[ FD ]
Line_9 $$ do -->Line_9 $$ do [ CD ]
Line_4 $$ Enumeration providerFiles = classLoader.getResources(resource)-->Line_9 $$ do [ FD ]
Line_2 $$ private Collection<Class<? extends Plugin>> loadFromResource(ClassLoader classLoader, String resource) throws IOException -->Line_43 $$ return pluginClasses[ CD ]
Line_10 $$ URL url = (URL) providerFiles.nextElement()-->Line_11 $$ InputStream stream = url.openStream()[ FD ]
Line_12 $$ BufferedReader reader-->Line_40 $$ reader.close()[ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_40 $$ reader.close()[ FD ]
Line_11 $$ InputStream stream = url.openStream()-->Line_41 $$ stream.close()[ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_20 $$ int index = line.indexOf('#')[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_20 $$ int index = line.indexOf('#')[ FD ]
Line_24 $$ line = line.trim()-->Line_20 $$ int index = line.indexOf('#')[ FD ]
Line_20 $$ int index = line.indexOf('#')-->Line_21 $$ if (index != -1) [ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_24 $$ line = line.trim()-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_20 $$ int index = line.indexOf('#')-->Line_22 $$ line = line.substring(0, index)[ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_24 $$ line = line.trim()[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_24 $$ line = line.trim()[ FD ]
Line_24 $$ line = line.trim()-->Line_24 $$ line = line.trim()[ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_25 $$ if (line.length() > 0) [ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_25 $$ if (line.length() > 0) [ FD ]
Line_24 $$ line = line.trim()-->Line_25 $$ if (line.length() > 0) [ FD ]
Line_19 $$ while ((line = reader.readLine()) != null) -->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_22 $$ line = line.substring(0, index)-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_24 $$ line = line.trim()-->Line_28 $$ pluginClass = classLoader.loadClass(line)[ FD ]
Line_26 $$ Class pluginClass-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
Line_28 $$ pluginClass = classLoader.loadClass(line)-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
Line_26 $$ Class pluginClass-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
Line_28 $$ pluginClass = classLoader.loadClass(line)-->Line_33 $$ if (Plugin.class.isAssignableFrom(pluginClass)) [ FD ]
