Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void refreshJOGL(final File installDir) [ CD ]
Line_4 $$ Class subAppletClass = Class.forName(subAppletClassName)-->Line_4 $$ Class subAppletClass = Class.forName(subAppletClassName)[ CD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_8 $$ if (!installDir.exists()) [ CD ]
Line_8 $$ if (!installDir.exists()) -->Line_8 $$ if (!installDir.exists()) [ CD ]
Line_8 $$ if (!installDir.exists()) -->Line_8 $$ if (!installDir.exists()) [ CD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_8 $$ if (!installDir.exists()) [ FD ]
Line_8 $$ if (!installDir.exists()) -->Line_9 $$ installDir.mkdirs()[ CD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_9 $$ installDir.mkdirs()[ FD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_11 $$ String libURLName = nativeLibsJarNames[osType][ CD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_12 $$ URL nativeLibURL[ CD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_13 $$ URLConnection urlConnection[ CD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_14 $$ String path = getCodeBase().toExternalForm() + libURLName[ CD ]
Line_12 $$ URL nativeLibURL-->Line_16 $$ nativeLibURL = new URL(path)[ FD ]
Line_16 $$ nativeLibURL = new URL(path)-->Line_16 $$ nativeLibURL = new URL(path)[ FD ]
Line_13 $$ URLConnection urlConnection-->Line_17 $$ urlConnection = nativeLibURL.openConnection()[ FD ]
Line_17 $$ urlConnection = nativeLibURL.openConnection()-->Line_17 $$ urlConnection = nativeLibURL.openConnection()[ FD ]
Line_17 $$ urlConnection = nativeLibURL.openConnection()-->Line_17 $$ urlConnection = nativeLibURL.openConnection()[ CD ]
Line_12 $$ URL nativeLibURL-->Line_17 $$ urlConnection = nativeLibURL.openConnection()[ FD ]
Line_16 $$ nativeLibURL = new URL(path)-->Line_17 $$ urlConnection = nativeLibURL.openConnection()[ FD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_23 $$ long lastModified = urlConnection.getLastModified()[ CD ]
Line_23 $$ long lastModified = urlConnection.getLastModified()-->Line_23 $$ long lastModified = urlConnection.getLastModified()[ CD ]
Line_13 $$ URLConnection urlConnection-->Line_23 $$ long lastModified = urlConnection.getLastModified()[ FD ]
Line_17 $$ urlConnection = nativeLibURL.openConnection()-->Line_23 $$ long lastModified = urlConnection.getLastModified()[ FD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_24 $$ File localNativeFile = new File(installDir, nativeLibsFileNames[osType])[ CD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_25 $$ boolean needsRefresh = (!localNativeFile.exists()) || localNativeFile.lastModified() != lastModified[ CD ]
Line_25 $$ boolean needsRefresh = (!localNativeFile.exists()) || localNativeFile.lastModified() != lastModified-->Line_25 $$ boolean needsRefresh = (!localNativeFile.exists()) || localNativeFile.lastModified() != lastModified[ CD ]
Line_24 $$ File localNativeFile = new File(installDir, nativeLibsFileNames[osType])-->Line_25 $$ boolean needsRefresh = (!localNativeFile.exists()) || localNativeFile.lastModified() != lastModified[ FD ]
Line_24 $$ File localNativeFile = new File(installDir, nativeLibsFileNames[osType])-->Line_25 $$ boolean needsRefresh = (!localNativeFile.exists()) || localNativeFile.lastModified() != lastModified[ FD ]
Line_2 $$ private void refreshJOGL(final File installDir) -->Line_26 $$ if (needsRefresh) [ CD ]
Line_26 $$ if (needsRefresh) -->Line_27 $$ displayMessage("Updating local version of the native libraries")[ CD ]
Line_26 $$ if (needsRefresh) -->Line_28 $$ File localJarFile = new File(installDir, nativeLibsJarNames[osType])[ CD ]
Line_28 $$ File localJarFile = new File(installDir, nativeLibsJarNames[osType])-->Line_30 $$ saveNativesJarLocally(localJarFile, urlConnection)[ FD ]
Line_13 $$ URLConnection urlConnection-->Line_30 $$ saveNativesJarLocally(localJarFile, urlConnection)[ FD ]
Line_17 $$ urlConnection = nativeLibURL.openConnection()-->Line_30 $$ saveNativesJarLocally(localJarFile, urlConnection)[ FD ]
Line_26 $$ if (needsRefresh) -->Line_36 $$ InputStream is = null[ CD ]
Line_26 $$ if (needsRefresh) -->Line_37 $$ BufferedOutputStream out = null[ CD ]
Line_40 $$ JarEntry nativeLibEntry = findNativeEntry(jf)-->Line_40 $$ JarEntry nativeLibEntry = findNativeEntry(jf)[ CD ]
Line_39 $$ JarFile jf = new JarFile(localJarFile)-->Line_40 $$ JarEntry nativeLibEntry = findNativeEntry(jf)[ FD ]
Line_40 $$ JarEntry nativeLibEntry = findNativeEntry(jf)-->Line_41 $$ if (nativeLibEntry == null) [ FD ]
Line_41 $$ if (nativeLibEntry == null) -->Line_42 $$ displayError("native library not found in jar file")[ CD ]
Line_41 $$ if (nativeLibEntry == null) -->Line_44 $$ is = jf.getInputStream(nativeLibEntry)[ CD ]
Line_36 $$ InputStream is = null-->Line_44 $$ is = jf.getInputStream(nativeLibEntry)[ FD ]
Line_44 $$ is = jf.getInputStream(nativeLibEntry)-->Line_44 $$ is = jf.getInputStream(nativeLibEntry)[ FD ]
Line_44 $$ is = jf.getInputStream(nativeLibEntry)-->Line_44 $$ is = jf.getInputStream(nativeLibEntry)[ CD ]
Line_39 $$ JarFile jf = new JarFile(localJarFile)-->Line_44 $$ is = jf.getInputStream(nativeLibEntry)[ FD ]
Line_40 $$ JarEntry nativeLibEntry = findNativeEntry(jf)-->Line_44 $$ is = jf.getInputStream(nativeLibEntry)[ FD ]
Line_41 $$ if (nativeLibEntry == null) -->Line_45 $$ int totalLength = (int) nativeLibEntry.getSize()[ CD ]
Line_40 $$ JarEntry nativeLibEntry = findNativeEntry(jf)-->Line_45 $$ int totalLength = (int) nativeLibEntry.getSize()[ FD ]
Line_37 $$ BufferedOutputStream out = null-->Line_47 $$ out = new BufferedOutputStream(new FileOutputStream(localNativeFile))[ FD ]
Line_47 $$ out = new BufferedOutputStream(new FileOutputStream(localNativeFile))-->Line_47 $$ out = new BufferedOutputStream(new FileOutputStream(localNativeFile))[ FD ]
Line_41 $$ if (nativeLibEntry == null) -->Line_52 $$ byte[] buffer = new byte[1024][ CD ]
Line_41 $$ if (nativeLibEntry == null) -->Line_53 $$ int sum = 0[ CD ]
Line_41 $$ if (nativeLibEntry == null) -->Line_54 $$ int len[ CD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_56 $$ while ((len = is.read(buffer)) > 0) [ FD ]
Line_54 $$ int len-->Line_56 $$ while ((len = is.read(buffer)) > 0) [ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_56 $$ while ((len = is.read(buffer)) > 0) [ CD ]
Line_36 $$ InputStream is = null-->Line_56 $$ while ((len = is.read(buffer)) > 0) [ FD ]
Line_44 $$ is = jf.getInputStream(nativeLibEntry)-->Line_56 $$ while ((len = is.read(buffer)) > 0) [ FD ]
Line_52 $$ byte[] buffer = new byte[1024]-->Line_56 $$ while ((len = is.read(buffer)) > 0) [ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_57 $$ out.write(buffer, 0, len)[ CD ]
Line_37 $$ BufferedOutputStream out = null-->Line_57 $$ out.write(buffer, 0, len)[ FD ]
Line_47 $$ out = new BufferedOutputStream(new FileOutputStream(localNativeFile))-->Line_57 $$ out.write(buffer, 0, len)[ FD ]
Line_52 $$ byte[] buffer = new byte[1024]-->Line_57 $$ out.write(buffer, 0, len)[ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_57 $$ out.write(buffer, 0, len)[ FD ]
Line_54 $$ int len-->Line_57 $$ out.write(buffer, 0, len)[ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_58 $$ sum += len[ CD ]
Line_58 $$ sum += len-->Line_58 $$ sum += len[ FD ]
Line_53 $$ int sum = 0-->Line_58 $$ sum += len[ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_58 $$ sum += len[ FD ]
Line_54 $$ int len-->Line_58 $$ sum += len[ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_59 $$ int percent = (100 * sum / totalLength)[ CD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_60 $$ displayMessage("Installing native files")[ CD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_61 $$ progressBar.setValue(percent)[ CD ]
Line_59 $$ int percent = (100 * sum / totalLength)-->Line_61 $$ progressBar.setValue(percent)[ FD ]
Line_37 $$ BufferedOutputStream out = null-->Line_69 $$ if (out != null) [ FD ]
Line_47 $$ out = new BufferedOutputStream(new FileOutputStream(localNativeFile))-->Line_69 $$ if (out != null) [ FD ]
Line_37 $$ BufferedOutputStream out = null-->Line_71 $$ out.close()[ FD ]
Line_47 $$ out = new BufferedOutputStream(new FileOutputStream(localNativeFile))-->Line_71 $$ out.close()[ FD ]
Line_41 $$ if (nativeLibEntry == null) -->Line_76 $$ if (checkNativeCertificates(nativeLibEntry.getCertificates())) [ CD ]
Line_76 $$ if (checkNativeCertificates(nativeLibEntry.getCertificates())) -->Line_76 $$ if (checkNativeCertificates(nativeLibEntry.getCertificates())) [ CD ]
Line_40 $$ JarEntry nativeLibEntry = findNativeEntry(jf)-->Line_76 $$ if (checkNativeCertificates(nativeLibEntry.getCertificates())) [ FD ]
Line_76 $$ if (checkNativeCertificates(nativeLibEntry.getCertificates())) -->Line_77 $$ localNativeFile.setLastModified(lastModified)[ CD ]
Line_24 $$ File localNativeFile = new File(installDir, nativeLibsFileNames[osType])-->Line_77 $$ localNativeFile.setLastModified(lastModified)[ FD ]
Line_23 $$ long lastModified = urlConnection.getLastModified()-->Line_77 $$ localNativeFile.setLastModified(lastModified)[ FD ]
Line_76 $$ if (checkNativeCertificates(nativeLibEntry.getCertificates())) -->Line_78 $$ loadNativesAndStart(localNativeFile)[ CD ]
Line_24 $$ File localNativeFile = new File(installDir, nativeLibsFileNames[osType])-->Line_78 $$ loadNativesAndStart(localNativeFile)[ FD ]
Line_76 $$ if (checkNativeCertificates(nativeLibEntry.getCertificates())) -->Line_80 $$ displayError("The native librairies aren't properly signed")[ CD ]
Line_36 $$ InputStream is = null-->Line_86 $$ if (is != null) [ FD ]
Line_44 $$ is = jf.getInputStream(nativeLibEntry)-->Line_86 $$ if (is != null) [ FD ]
Line_36 $$ InputStream is = null-->Line_88 $$ is.close()[ FD ]
Line_44 $$ is = jf.getInputStream(nativeLibEntry)-->Line_88 $$ is.close()[ FD ]
Line_26 $$ if (needsRefresh) -->Line_94 $$ loadNativesAndStart(localNativeFile)[ CD ]
Line_24 $$ File localNativeFile = new File(installDir, nativeLibsFileNames[osType])-->Line_94 $$ loadNativesAndStart(localNativeFile)[ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_57 $$ out.write(buffer, 0, len)[ FD ]
Line_56 $$ while ((len = is.read(buffer)) > 0) -->Line_58 $$ sum += len[ FD ]
Line_59 $$ int percent = (100 * sum / totalLength)-->Line_61 $$ progressBar.setValue(percent)[ FD ]
