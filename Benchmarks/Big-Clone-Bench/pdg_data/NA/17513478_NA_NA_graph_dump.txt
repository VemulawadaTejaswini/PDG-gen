Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void create(File target) [ CD ]
Line_2 $$ public void create(File target) -->Line_3 $$ if ("dir".equals(type)) [ CD ]
Line_3 $$ if ("dir".equals(type)) -->Line_3 $$ if ("dir".equals(type)) [ CD ]
Line_3 $$ if ("dir".equals(type)) -->Line_4 $$ File dir = new File(target, name)[ CD ]
Line_3 $$ if ("dir".equals(type)) -->Line_5 $$ dir.mkdirs()[ CD ]
Line_4 $$ File dir = new File(target, name)-->Line_5 $$ dir.mkdirs()[ FD ]
Line_6 $$ for (Resource c : children) -->Line_7 $$ c.create(dir)[ FD ]
Line_4 $$ File dir = new File(target, name)-->Line_7 $$ c.create(dir)[ FD ]
Line_3 $$ if ("dir".equals(type)) -->Line_9 $$ if ("package".equals(type)) [ CD ]
Line_9 $$ if ("package".equals(type)) -->Line_9 $$ if ("package".equals(type)) [ CD ]
Line_9 $$ if ("package".equals(type)) -->Line_10 $$ String[] dirs = name.split("\\.")[ CD ]
Line_10 $$ String[] dirs = name.split("\\.")-->Line_10 $$ String[] dirs = name.split("\\.")[ CD ]
Line_9 $$ if ("package".equals(type)) -->Line_11 $$ File parent = target[ CD ]
Line_11 $$ File parent = target-->Line_13 $$ parent = new File(parent, d)[ FD ]
Line_13 $$ parent = new File(parent, d)-->Line_13 $$ parent = new File(parent, d)[ FD ]
Line_9 $$ if ("package".equals(type)) -->Line_15 $$ parent.mkdirs()[ CD ]
Line_11 $$ File parent = target-->Line_15 $$ parent.mkdirs()[ FD ]
Line_13 $$ parent = new File(parent, d)-->Line_15 $$ parent.mkdirs()[ FD ]
Line_6 $$ for (Resource c : children) -->Line_17 $$ c.create(parent)[ FD ]
Line_11 $$ File parent = target-->Line_17 $$ c.create(parent)[ FD ]
Line_13 $$ parent = new File(parent, d)-->Line_17 $$ c.create(parent)[ FD ]
Line_9 $$ if ("package".equals(type)) -->Line_19 $$ if ("file".equals(type)) [ CD ]
Line_19 $$ if ("file".equals(type)) -->Line_19 $$ if ("file".equals(type)) [ CD ]
Line_19 $$ if ("file".equals(type)) -->Line_20 $$ InputStream is = getInputStream()[ CD ]
Line_20 $$ InputStream is = getInputStream()-->Line_20 $$ InputStream is = getInputStream()[ CD ]
Line_19 $$ if ("file".equals(type)) -->Line_21 $$ File file = new File(target, name)[ CD ]
Line_20 $$ InputStream is = getInputStream()-->Line_23 $$ if (is != null) [ FD ]
Line_23 $$ if (is != null) -->Line_24 $$ FileOutputStream fos = new FileOutputStream(file)[ CD ]
Line_23 $$ if (is != null) -->Line_25 $$ IOUtils.copy(is, fos)[ CD ]
Line_20 $$ InputStream is = getInputStream()-->Line_25 $$ IOUtils.copy(is, fos)[ FD ]
Line_24 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_25 $$ IOUtils.copy(is, fos)[ FD ]
Line_23 $$ if (is != null) -->Line_26 $$ fos.flush()[ CD ]
Line_24 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_26 $$ fos.flush()[ FD ]
Line_23 $$ if (is != null) -->Line_27 $$ fos.close()[ CD ]
Line_24 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_27 $$ fos.close()[ FD ]
Line_23 $$ if (is != null) -->Line_29 $$ PrintStream ps = new PrintStream(file)[ CD ]
Line_23 $$ if (is != null) -->Line_30 $$ ps.print(content)[ CD ]
Line_29 $$ PrintStream ps = new PrintStream(file)-->Line_30 $$ ps.print(content)[ FD ]
Line_23 $$ if (is != null) -->Line_31 $$ ps.flush()[ CD ]
Line_29 $$ PrintStream ps = new PrintStream(file)-->Line_31 $$ ps.flush()[ FD ]
Line_23 $$ if (is != null) -->Line_32 $$ ps.close()[ CD ]
Line_29 $$ PrintStream ps = new PrintStream(file)-->Line_32 $$ ps.close()[ FD ]
Line_19 $$ if ("file".equals(type)) -->Line_39 $$ if ("zip".equals(type)) [ CD ]
Line_39 $$ if ("zip".equals(type)) -->Line_39 $$ if ("zip".equals(type)) [ CD ]
Line_2 $$ public void create(File target) -->Line_41 $$ unzip(target)[ FD ]
