Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException [ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_3 $$ if (src == null || !src.exists())[ CD ]
Line_3 $$ if (src == null || !src.exists())-->Line_3 $$ if (src == null || !src.exists())[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_3 $$ if (src == null || !src.exists())[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_3 $$ throw new IOException(Debug.getDebug("missing src", src))[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_4 $$ if (!src.getName().toLowerCase().endsWith(".mp3"))[ CD ]
Line_4 $$ if (!src.getName().toLowerCase().endsWith(".mp3"))-->Line_4 $$ if (!src.getName().toLowerCase().endsWith(".mp3"))[ CD ]
Line_4 $$ if (!src.getName().toLowerCase().endsWith(".mp3"))-->Line_4 $$ if (!src.getName().toLowerCase().endsWith(".mp3"))[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_4 $$ if (!src.getName().toLowerCase().endsWith(".mp3"))[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_4 $$ throw new IOException(Debug.getDebug("src not mp3", src))[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_5 $$ if (dst == null)[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_5 $$ if (dst == null)[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_5 $$ throw new IOException(Debug.getDebug("missing dst", dst))[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_6 $$ if (dst.exists()) [ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_6 $$ if (dst.exists()) [ FD ]
Line_6 $$ if (dst.exists()) -->Line_6 $$ if (dst.exists()) [ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_6 $$ if (dst.exists()) [ FD ]
Line_6 $$ if (dst.exists()) -->Line_7 $$ dst.delete()[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_7 $$ dst.delete()[ FD ]
Line_6 $$ if (dst.exists()) -->Line_8 $$ if (dst.exists())[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_8 $$ if (dst.exists())[ FD ]
Line_8 $$ if (dst.exists())-->Line_8 $$ if (dst.exists())[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_8 $$ if (dst.exists())[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_8 $$ throw new IOException(Debug.getDebug("could not delete dst", dst))[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_10 $$ boolean hasId3v1 = new MyID3v1().hasID3v1(src)[ CD ]
Line_10 $$ boolean hasId3v1 = new MyID3v1().hasID3v1(src)-->Line_10 $$ boolean hasId3v1 = new MyID3v1().hasID3v1(src)[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_10 $$ boolean hasId3v1 = new MyID3v1().hasID3v1(src)[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_11 $$ long id3v1Length = hasId3v1 ? ID3_V1_TAG_LENGTH : 0[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_12 $$ long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src)[ CD ]
Line_12 $$ long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src)-->Line_12 $$ long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src)[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_12 $$ long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src)[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_13 $$ long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1)[ CD ]
Line_13 $$ long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1)-->Line_13 $$ long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1)[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_13 $$ long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1)[ FD ]
Line_10 $$ boolean hasId3v1 = new MyID3v1().hasID3v1(src)-->Line_13 $$ long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1)[ FD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_14 $$ OutputStream os = null[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_15 $$ InputStream is = null[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_17 $$ dst.getParentFile().mkdirs()[ FD ]
Line_14 $$ OutputStream os = null-->Line_18 $$ os = new FileOutputStream(dst)[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_18 $$ os = new FileOutputStream(dst)[ FD ]
Line_14 $$ OutputStream os = null-->Line_19 $$ os = new BufferedOutputStream(os)[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_19 $$ os = new BufferedOutputStream(os)[ FD ]
Line_19 $$ os = new BufferedOutputStream(os)-->Line_19 $$ os = new BufferedOutputStream(os)[ FD ]
Line_20 $$ if (!skipId3v2Head && !skipId3v2 && id3v2HeadTag != null)-->Line_20 $$ os.write(id3v2HeadTag)[ CD ]
Line_14 $$ OutputStream os = null-->Line_20 $$ os.write(id3v2HeadTag)[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_20 $$ os.write(id3v2HeadTag)[ FD ]
Line_19 $$ os = new BufferedOutputStream(os)-->Line_20 $$ os.write(id3v2HeadTag)[ FD ]
Line_15 $$ InputStream is = null-->Line_21 $$ is = new FileInputStream(src)[ FD ]
Line_21 $$ is = new FileInputStream(src)-->Line_21 $$ is = new FileInputStream(src)[ FD ]
Line_15 $$ InputStream is = null-->Line_22 $$ is = new BufferedInputStream(is)[ FD ]
Line_21 $$ is = new FileInputStream(src)-->Line_22 $$ is = new BufferedInputStream(is)[ FD ]
Line_22 $$ is = new BufferedInputStream(is)-->Line_22 $$ is = new BufferedInputStream(is)[ FD ]
Line_15 $$ InputStream is = null-->Line_23 $$ is.skip(id3v2HeadLength)[ FD ]
Line_21 $$ is = new FileInputStream(src)-->Line_23 $$ is.skip(id3v2HeadLength)[ FD ]
Line_22 $$ is = new BufferedInputStream(is)-->Line_23 $$ is.skip(id3v2HeadLength)[ FD ]
Line_12 $$ long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src)-->Line_23 $$ is.skip(id3v2HeadLength)[ FD ]
Line_24 $$ long total_to_read = src.length()-->Line_24 $$ long total_to_read = src.length()[ CD ]
Line_2 $$ private void write(File src, File dst, byte id3v1Tag[], byte id3v2HeadTag[], byte id3v2TailTag[]) throws IOException -->Line_24 $$ long total_to_read = src.length()[ FD ]
Line_24 $$ long total_to_read = src.length()-->Line_25 $$ total_to_read -= id3v1Length[ FD ]
Line_25 $$ total_to_read -= id3v1Length-->Line_25 $$ total_to_read -= id3v1Length[ FD ]
Line_11 $$ long id3v1Length = hasId3v1 ? ID3_V1_TAG_LENGTH : 0-->Line_25 $$ total_to_read -= id3v1Length[ FD ]
Line_24 $$ long total_to_read = src.length()-->Line_26 $$ total_to_read -= id3v2HeadLength[ FD ]
Line_25 $$ total_to_read -= id3v1Length-->Line_26 $$ total_to_read -= id3v2HeadLength[ FD ]
Line_26 $$ total_to_read -= id3v2HeadLength-->Line_26 $$ total_to_read -= id3v2HeadLength[ FD ]
Line_12 $$ long id3v2HeadLength = new MyID3v2().findID3v2HeadLength(src)-->Line_26 $$ total_to_read -= id3v2HeadLength[ FD ]
Line_24 $$ long total_to_read = src.length()-->Line_27 $$ total_to_read -= id3v2TailLength[ FD ]
Line_25 $$ total_to_read -= id3v1Length-->Line_27 $$ total_to_read -= id3v2TailLength[ FD ]
Line_26 $$ total_to_read -= id3v2HeadLength-->Line_27 $$ total_to_read -= id3v2TailLength[ FD ]
Line_27 $$ total_to_read -= id3v2TailLength-->Line_27 $$ total_to_read -= id3v2TailLength[ FD ]
Line_13 $$ long id3v2TailLength = new MyID3v2().findID3v2TailLength(src, hasId3v1)-->Line_27 $$ total_to_read -= id3v2TailLength[ FD ]
Line_29 $$ long total_read = 0-->Line_30 $$ while (total_read < total_to_read) [ FD ]
Line_24 $$ long total_to_read = src.length()-->Line_30 $$ while (total_read < total_to_read) [ FD ]
Line_25 $$ total_to_read -= id3v1Length-->Line_30 $$ while (total_read < total_to_read) [ FD ]
Line_26 $$ total_to_read -= id3v2HeadLength-->Line_30 $$ while (total_read < total_to_read) [ FD ]
Line_27 $$ total_to_read -= id3v2TailLength-->Line_30 $$ while (total_read < total_to_read) [ FD ]
Line_30 $$ while (total_read < total_to_read) -->Line_31 $$ int remainder = (int) (total_to_read - total_read)[ CD ]
Line_30 $$ while (total_read < total_to_read) -->Line_32 $$ int readSize = Math.min(buffer.length, remainder)[ CD ]
Line_32 $$ int readSize = Math.min(buffer.length, remainder)-->Line_32 $$ int readSize = Math.min(buffer.length, remainder)[ CD ]
Line_31 $$ int remainder = (int) (total_to_read - total_read)-->Line_32 $$ int readSize = Math.min(buffer.length, remainder)[ FD ]
Line_30 $$ while (total_read < total_to_read) -->Line_33 $$ int read = is.read(buffer, 0, readSize)[ CD ]
Line_33 $$ int read = is.read(buffer, 0, readSize)-->Line_33 $$ int read = is.read(buffer, 0, readSize)[ CD ]
Line_15 $$ InputStream is = null-->Line_33 $$ int read = is.read(buffer, 0, readSize)[ FD ]
Line_21 $$ is = new FileInputStream(src)-->Line_33 $$ int read = is.read(buffer, 0, readSize)[ FD ]
Line_22 $$ is = new BufferedInputStream(is)-->Line_33 $$ int read = is.read(buffer, 0, readSize)[ FD ]
Line_32 $$ int readSize = Math.min(buffer.length, remainder)-->Line_33 $$ int read = is.read(buffer, 0, readSize)[ FD ]
Line_30 $$ while (total_read < total_to_read) -->Line_34 $$ if (read <= 0)[ CD ]
Line_33 $$ int read = is.read(buffer, 0, readSize)-->Line_34 $$ if (read <= 0)[ FD ]
Line_30 $$ while (total_read < total_to_read) -->Line_35 $$ os.write(buffer, 0, read)[ CD ]
Line_14 $$ OutputStream os = null-->Line_35 $$ os.write(buffer, 0, read)[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_35 $$ os.write(buffer, 0, read)[ FD ]
Line_19 $$ os = new BufferedOutputStream(os)-->Line_35 $$ os.write(buffer, 0, read)[ FD ]
Line_33 $$ int read = is.read(buffer, 0, readSize)-->Line_35 $$ os.write(buffer, 0, read)[ FD ]
Line_30 $$ while (total_read < total_to_read) -->Line_36 $$ total_read += read[ CD ]
Line_36 $$ total_read += read-->Line_36 $$ total_read += read[ FD ]
Line_29 $$ long total_read = 0-->Line_36 $$ total_read += read[ FD ]
Line_33 $$ int read = is.read(buffer, 0, readSize)-->Line_36 $$ total_read += read[ FD ]
Line_38 $$ if (!skipId3v2Tail && !skipId3v2 && id3v2TailTag != null)-->Line_38 $$ os.write(id3v2TailTag)[ CD ]
Line_14 $$ OutputStream os = null-->Line_38 $$ os.write(id3v2TailTag)[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_38 $$ os.write(id3v2TailTag)[ FD ]
Line_19 $$ os = new BufferedOutputStream(os)-->Line_38 $$ os.write(id3v2TailTag)[ FD ]
Line_39 $$ if (!skipId3v1 && id3v1Tag != null)-->Line_39 $$ os.write(id3v1Tag)[ CD ]
Line_14 $$ OutputStream os = null-->Line_39 $$ os.write(id3v1Tag)[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_39 $$ os.write(id3v1Tag)[ FD ]
Line_19 $$ os = new BufferedOutputStream(os)-->Line_39 $$ os.write(id3v1Tag)[ FD ]
Line_15 $$ InputStream is = null-->Line_42 $$ if (is != null)[ FD ]
Line_21 $$ is = new FileInputStream(src)-->Line_42 $$ if (is != null)[ FD ]
Line_22 $$ is = new BufferedInputStream(is)-->Line_42 $$ if (is != null)[ FD ]
Line_42 $$ if (is != null)-->Line_42 $$ is.close()[ CD ]
Line_15 $$ InputStream is = null-->Line_42 $$ is.close()[ FD ]
Line_21 $$ is = new FileInputStream(src)-->Line_42 $$ is.close()[ FD ]
Line_22 $$ is = new BufferedInputStream(is)-->Line_42 $$ is.close()[ FD ]
Line_14 $$ OutputStream os = null-->Line_47 $$ if (os != null)[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_47 $$ if (os != null)[ FD ]
Line_19 $$ os = new BufferedOutputStream(os)-->Line_47 $$ if (os != null)[ FD ]
Line_47 $$ if (os != null)-->Line_47 $$ os.close()[ CD ]
Line_14 $$ OutputStream os = null-->Line_47 $$ os.close()[ FD ]
Line_18 $$ os = new FileOutputStream(dst)-->Line_47 $$ os.close()[ FD ]
Line_19 $$ os = new BufferedOutputStream(os)-->Line_47 $$ os.close()[ FD ]
Line_36 $$ total_read += read-->Line_30 $$ while (total_read < total_to_read) [ FD ]
Line_36 $$ total_read += read-->Line_30 $$ while (total_read < total_to_read) [ FD ]
Line_31 $$ int remainder = (int) (total_to_read - total_read)-->Line_32 $$ int readSize = Math.min(buffer.length, remainder)[ FD ]
Line_32 $$ int readSize = Math.min(buffer.length, remainder)-->Line_33 $$ int read = is.read(buffer, 0, readSize)[ FD ]
Line_33 $$ int read = is.read(buffer, 0, readSize)-->Line_34 $$ if (read <= 0)[ FD ]
Line_33 $$ int read = is.read(buffer, 0, readSize)-->Line_35 $$ os.write(buffer, 0, read)[ FD ]
Line_33 $$ int read = is.read(buffer, 0, readSize)-->Line_36 $$ total_read += read[ FD ]
