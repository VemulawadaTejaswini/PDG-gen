Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void process(String number) [ CD ]
Line_6 $$ List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>()-->Line_7 $$ nameValuePairs.add(new BasicNameValuePair(Constants.TRAIN_NUMBER_POST_PARAM_NAME.value(), number))[ FD ]
Line_5 $$ HttpPost httpPost = new HttpPost(Constants.TRAIN_INFO_URL.value())-->Line_8 $$ httpPost.setEntity(new UrlEncodedFormEntity(nameValuePairs))[ FD ]
Line_9 $$ HttpResponse response = httpclient.execute(httpPost)-->Line_9 $$ HttpResponse response = httpclient.execute(httpPost)[ CD ]
Line_4 $$ HttpClient httpclient = new DefaultHttpClient()-->Line_9 $$ HttpResponse response = httpclient.execute(httpPost)[ FD ]
Line_5 $$ HttpPost httpPost = new HttpPost(Constants.TRAIN_INFO_URL.value())-->Line_9 $$ HttpResponse response = httpclient.execute(httpPost)[ FD ]
Line_10 $$ InputStream is = response.getEntity().getContent()-->Line_10 $$ InputStream is = response.getEntity().getContent()[ CD ]
Line_9 $$ HttpResponse response = httpclient.execute(httpPost)-->Line_10 $$ InputStream is = response.getEntity().getContent()[ FD ]
Line_11 $$ Document doc = getDocument(is)-->Line_11 $$ Document doc = getDocument(is)[ CD ]
Line_10 $$ InputStream is = response.getEntity().getContent()-->Line_11 $$ Document doc = getDocument(is)[ FD ]
Line_12 $$ XPathFactory factory = XPathFactory.newInstance()-->Line_12 $$ XPathFactory factory = XPathFactory.newInstance()[ CD ]
Line_13 $$ XPath xpath = factory.newXPath()-->Line_13 $$ XPath xpath = factory.newXPath()[ CD ]
Line_12 $$ XPathFactory factory = XPathFactory.newInstance()-->Line_13 $$ XPath xpath = factory.newXPath()[ FD ]
Line_14 $$ XPathExpression expr = xpath.compile(Constants.XPATH_TRAIN_STOPS_INFO.value())-->Line_14 $$ XPathExpression expr = xpath.compile(Constants.XPATH_TRAIN_STOPS_INFO.value())[ CD ]
Line_13 $$ XPath xpath = factory.newXPath()-->Line_14 $$ XPathExpression expr = xpath.compile(Constants.XPATH_TRAIN_STOPS_INFO.value())[ FD ]
Line_15 $$ Object result = expr.evaluate(doc, XPathConstants.NODESET)-->Line_15 $$ Object result = expr.evaluate(doc, XPathConstants.NODESET)[ CD ]
Line_14 $$ XPathExpression expr = xpath.compile(Constants.XPATH_TRAIN_STOPS_INFO.value())-->Line_15 $$ Object result = expr.evaluate(doc, XPathConstants.NODESET)[ FD ]
Line_11 $$ Document doc = getDocument(is)-->Line_15 $$ Object result = expr.evaluate(doc, XPathConstants.NODESET)[ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ CD ]
Line_16 $$ NodeList nodes = (NodeList) result-->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ CD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ CD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_19 $$ list.add(nodes.item(i).getNodeValue())[ CD ]
Line_17 $$ List<String> list = new ArrayList<String>()-->Line_19 $$ list.add(nodes.item(i).getNodeValue())[ FD ]
Line_16 $$ NodeList nodes = (NodeList) result-->Line_19 $$ list.add(nodes.item(i).getNodeValue())[ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_19 $$ list.add(nodes.item(i).getNodeValue())[ FD ]
Line_17 $$ List<String> list = new ArrayList<String>()-->Line_21 $$ parse(list)[ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) [ FD ]
Line_18 $$ for (int i = 0; i < nodes.getLength(); i++) -->Line_19 $$ list.add(nodes.item(i).getNodeValue())[ FD ]
