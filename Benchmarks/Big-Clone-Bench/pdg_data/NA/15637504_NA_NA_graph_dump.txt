Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void setUp() throws Exception [ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_3 $$ this.logger = new ConsoleLogger(ConsoleLogger.LEVEL_WARN)[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_4 $$ File repoFolder = new File("target/repository")[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_5 $$ removeRepository(repoFolder)[ CD ]
Line_4 $$ File repoFolder = new File("target/repository")-->Line_5 $$ removeRepository(repoFolder)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_6 $$ InputStream repoConfigIn = getClass().getResourceAsStream(REPO_CONFIG_FILE)[ CD ]
Line_6 $$ InputStream repoConfigIn = getClass().getResourceAsStream(REPO_CONFIG_FILE)-->Line_6 $$ InputStream repoConfigIn = getClass().getResourceAsStream(REPO_CONFIG_FILE)[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_7 $$ File tempRepoConfigFile = File.createTempFile("repository", "xml")[ CD ]
Line_7 $$ File tempRepoConfigFile = File.createTempFile("repository", "xml")-->Line_7 $$ File tempRepoConfigFile = File.createTempFile("repository", "xml")[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_8 $$ tempRepoConfigFile.deleteOnExit()[ CD ]
Line_7 $$ File tempRepoConfigFile = File.createTempFile("repository", "xml")-->Line_8 $$ tempRepoConfigFile.deleteOnExit()[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_9 $$ OutputStream tempRepoConfigOut = new FileOutputStream(tempRepoConfigFile)[ CD ]
Line_6 $$ InputStream repoConfigIn = getClass().getResourceAsStream(REPO_CONFIG_FILE)-->Line_11 $$ IOUtils.copy(repoConfigIn, tempRepoConfigOut)[ FD ]
Line_9 $$ OutputStream tempRepoConfigOut = new FileOutputStream(tempRepoConfigFile)-->Line_11 $$ IOUtils.copy(repoConfigIn, tempRepoConfigOut)[ FD ]
Line_6 $$ InputStream repoConfigIn = getClass().getResourceAsStream(REPO_CONFIG_FILE)-->Line_13 $$ repoConfigIn.close()[ FD ]
Line_9 $$ OutputStream tempRepoConfigOut = new FileOutputStream(tempRepoConfigFile)-->Line_14 $$ tempRepoConfigOut.close()[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_16 $$ Repository repo = new TransientRepository(tempRepoConfigFile.getAbsolutePath(), "target/repository")[ CD ]
Line_7 $$ File tempRepoConfigFile = File.createTempFile("repository", "xml")-->Line_16 $$ Repository repo = new TransientRepository(tempRepoConfigFile.getAbsolutePath(), "target/repository")[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_17 $$ ServerAdapterFactory factory = new ServerAdapterFactory()[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_18 $$ RemoteRepository remoteRepo = factory.getRemoteRepository(repo)[ CD ]
Line_18 $$ RemoteRepository remoteRepo = factory.getRemoteRepository(repo)-->Line_18 $$ RemoteRepository remoteRepo = factory.getRemoteRepository(repo)[ CD ]
Line_17 $$ ServerAdapterFactory factory = new ServerAdapterFactory()-->Line_18 $$ RemoteRepository remoteRepo = factory.getRemoteRepository(repo)[ FD ]
Line_16 $$ Repository repo = new TransientRepository(tempRepoConfigFile.getAbsolutePath(), "target/repository")-->Line_18 $$ RemoteRepository remoteRepo = factory.getRemoteRepository(repo)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_19 $$ reg = LocateRegistry.createRegistry(Registry.REGISTRY_PORT)[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_20 $$ reg.rebind(REMOTE_REPO_NAME, remoteRepo)[ CD ]
Line_18 $$ RemoteRepository remoteRepo = factory.getRemoteRepository(repo)-->Line_20 $$ reg.rebind(REMOTE_REPO_NAME, remoteRepo)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_21 $$ session = repo.login(new SimpleCredentials(LOGIN, PWD.toCharArray()), WORKSPACE)[ CD ]
Line_16 $$ Repository repo = new TransientRepository(tempRepoConfigFile.getAbsolutePath(), "target/repository")-->Line_21 $$ session = repo.login(new SimpleCredentials(LOGIN, PWD.toCharArray()), WORKSPACE)[ FD ]
Line_2 $$ protected void setUp() throws Exception -->Line_22 $$ InputStream nodeTypeDefIn = getClass().getResourceAsStream(MQ_JCR_XML_NODETYPES_FILE)[ CD ]
Line_22 $$ InputStream nodeTypeDefIn = getClass().getResourceAsStream(MQ_JCR_XML_NODETYPES_FILE)-->Line_22 $$ InputStream nodeTypeDefIn = getClass().getResourceAsStream(MQ_JCR_XML_NODETYPES_FILE)[ CD ]
Line_2 $$ protected void setUp() throws Exception -->Line_23 $$ JackrabbitInitializerHelper.setupRepository(session, new InputStreamReader(nodeTypeDefIn), "")[ CD ]
