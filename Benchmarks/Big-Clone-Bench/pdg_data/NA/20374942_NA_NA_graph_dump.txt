Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public TestReport runImpl() throws Exception [ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_4 $$ ParsedURL purl[ CD ]
Line_4 $$ ParsedURL purl-->Line_6 $$ purl = new ParsedURL(base)[ FD ]
Line_6 $$ purl = new ParsedURL(base)-->Line_6 $$ purl = new ParsedURL(base)[ FD ]
Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_10 $$ report.setErrorCode(ERROR_CANNOT_PARSE_URL)[ FD ]
Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_11 $$ report.setDescription(new TestReport.Entry[] [ FD ]
Line_8 $$ StringWriter trace = new StringWriter()-->Line_11 $$ report.setDescription(new TestReport.Entry[] [ FD ]
Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_12 $$ report.setPassed(false)[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_15 $$ byte[] data = new byte[5][ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_16 $$ int num = 0[ CD ]
Line_18 $$ InputStream is = purl.openStream()-->Line_18 $$ InputStream is = purl.openStream()[ CD ]
Line_4 $$ ParsedURL purl-->Line_18 $$ InputStream is = purl.openStream()[ FD ]
Line_6 $$ purl = new ParsedURL(base)-->Line_18 $$ InputStream is = purl.openStream()[ FD ]
Line_16 $$ int num = 0-->Line_19 $$ num = is.read(data)[ FD ]
Line_19 $$ num = is.read(data)-->Line_19 $$ num = is.read(data)[ FD ]
Line_19 $$ num = is.read(data)-->Line_19 $$ num = is.read(data)[ CD ]
Line_18 $$ InputStream is = purl.openStream()-->Line_19 $$ num = is.read(data)[ FD ]
Line_15 $$ byte[] data = new byte[5]-->Line_19 $$ num = is.read(data)[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_23 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_24 $$ for (int i = 0; i < num; i++) [ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_2 $$ public TestReport runImpl() throws Exception [ CD ]
Line_16 $$ int num = 0-->Line_24 $$ for (int i = 0; i < num; i++) [ FD ]
Line_19 $$ num = is.read(data)-->Line_24 $$ for (int i = 0; i < num; i++) [ FD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_24 $$ for (int i = 0; i < num; i++) [ CD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_24 $$ for (int i = 0; i < num; i++) [ CD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_24 $$ for (int i = 0; i < num; i++) [ FD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_25 $$ int val = ((int) data[i]) & 0xFF[ CD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_26 $$ if (val < 16) [ CD ]
Line_25 $$ int val = ((int) data[i]) & 0xFF-->Line_26 $$ if (val < 16) [ FD ]
Line_26 $$ if (val < 16) -->Line_27 $$ sb.append("0")[ CD ]
Line_23 $$ StringBuffer sb = new StringBuffer()-->Line_27 $$ sb.append("0")[ FD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_29 $$ sb.append(Integer.toHexString(val) + " ")[ CD ]
Line_23 $$ StringBuffer sb = new StringBuffer()-->Line_29 $$ sb.append(Integer.toHexString(val) + " ")[ FD ]
Line_25 $$ int val = ((int) data[i]) & 0xFF-->Line_29 $$ sb.append(Integer.toHexString(val) + " ")[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_31 $$ String info = ("CT: " + purl.getContentType() + " CE: " + purl.getContentEncoding() + " DATA: " + sb + "URL: " + purl)[ CD ]
Line_4 $$ ParsedURL purl-->Line_31 $$ String info = ("CT: " + purl.getContentType() + " CE: " + purl.getContentEncoding() + " DATA: " + sb + "URL: " + purl)[ FD ]
Line_6 $$ purl = new ParsedURL(base)-->Line_31 $$ String info = ("CT: " + purl.getContentType() + " CE: " + purl.getContentEncoding() + " DATA: " + sb + "URL: " + purl)[ FD ]
Line_4 $$ ParsedURL purl-->Line_31 $$ String info = ("CT: " + purl.getContentType() + " CE: " + purl.getContentEncoding() + " DATA: " + sb + "URL: " + purl)[ FD ]
Line_6 $$ purl = new ParsedURL(base)-->Line_31 $$ String info = ("CT: " + purl.getContentType() + " CE: " + purl.getContentEncoding() + " DATA: " + sb + "URL: " + purl)[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_32 $$ if (ref.equals(info)) [ CD ]
Line_31 $$ String info = ("CT: " + purl.getContentType() + " CE: " + purl.getContentEncoding() + " DATA: " + sb + "URL: " + purl)-->Line_32 $$ if (ref.equals(info)) [ FD ]
Line_32 $$ if (ref.equals(info)) -->Line_32 $$ if (ref.equals(info)) [ CD ]
Line_31 $$ String info = ("CT: " + purl.getContentType() + " CE: " + purl.getContentEncoding() + " DATA: " + sb + "URL: " + purl)-->Line_32 $$ if (ref.equals(info)) [ FD ]
Line_32 $$ if (ref.equals(info)) -->Line_33 $$ report.setPassed(true)[ CD ]
Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_33 $$ report.setPassed(true)[ FD ]
Line_32 $$ if (ref.equals(info)) -->Line_34 $$ return report[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_36 $$ report.setErrorCode(ERROR_WRONG_RESULT)[ CD ]
Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_36 $$ report.setErrorCode(ERROR_WRONG_RESULT)[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_37 $$ report.setDescription(new TestReport.Entry[] [ CD ]
Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_37 $$ report.setDescription(new TestReport.Entry[] [ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_38 $$ report.setPassed(false)[ CD ]
Line_3 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_38 $$ report.setPassed(false)[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_39 $$ return report[ CD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_24 $$ for (int i = 0; i < num; i++) [ FD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_24 $$ for (int i = 0; i < num; i++) [ FD ]
Line_24 $$ for (int i = 0; i < num; i++) -->Line_24 $$ for (int i = 0; i < num; i++) [ FD ]
Line_25 $$ int val = ((int) data[i]) & 0xFF-->Line_26 $$ if (val < 16) [ FD ]
Line_25 $$ int val = ((int) data[i]) & 0xFF-->Line_29 $$ sb.append(Integer.toHexString(val) + " ")[ FD ]
