Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception [ CD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_3 $$ File f = new File(file, ALL_FILES_NAME)[ CD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_4 $$ if (f.exists()) [ CD ]
Line_3 $$ File f = new File(file, ALL_FILES_NAME)-->Line_4 $$ if (f.exists()) [ FD ]
Line_4 $$ if (f.exists()) -->Line_4 $$ if (f.exists()) [ CD ]
Line_3 $$ File f = new File(file, ALL_FILES_NAME)-->Line_4 $$ if (f.exists()) [ FD ]
Line_4 $$ if (f.exists()) -->Line_5 $$ f.delete()[ CD ]
Line_3 $$ File f = new File(file, ALL_FILES_NAME)-->Line_5 $$ f.delete()[ FD ]
Line_4 $$ if (f.exists()) -->Line_6 $$ f = new File(file, ALL_FILES_NAME)[ CD ]
Line_3 $$ File f = new File(file, ALL_FILES_NAME)-->Line_6 $$ f = new File(file, ALL_FILES_NAME)[ FD ]
Line_6 $$ f = new File(file, ALL_FILES_NAME)-->Line_6 $$ f = new File(file, ALL_FILES_NAME)[ FD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_8 $$ ZipOutputStream zoutstrm = new ZipOutputStream(new FileOutputStream(f))[ CD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ CD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception [ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ FD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_10 $$ ZipEntry zipEntry = new ZipEntry(fa[i].getName())[ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_11 $$ zoutstrm.putNextEntry(zipEntry)[ CD ]
Line_8 $$ ZipOutputStream zoutstrm = new ZipOutputStream(new FileOutputStream(f))-->Line_11 $$ zoutstrm.putNextEntry(zipEntry)[ FD ]
Line_10 $$ ZipEntry zipEntry = new ZipEntry(fa[i].getName())-->Line_11 $$ zoutstrm.putNextEntry(zipEntry)[ FD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_12 $$ FileInputStream fr = new FileInputStream(fa[i])[ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_13 $$ byte[] buffer = new byte[1024][ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_14 $$ int readCount = 0[ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_15 $$ while ((readCount = fr.read(buffer)) > 0) [ CD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ CD ]
Line_15 $$ while ((readCount = fr.read(buffer)) > 0) -->Line_15 $$ while ((readCount = fr.read(buffer)) > 0) [ FD ]
Line_14 $$ int readCount = 0-->Line_15 $$ while ((readCount = fr.read(buffer)) > 0) [ FD ]
Line_15 $$ while ((readCount = fr.read(buffer)) > 0) -->Line_15 $$ while ((readCount = fr.read(buffer)) > 0) [ CD ]
Line_12 $$ FileInputStream fr = new FileInputStream(fa[i])-->Line_15 $$ while ((readCount = fr.read(buffer)) > 0) [ FD ]
Line_13 $$ byte[] buffer = new byte[1024]-->Line_15 $$ while ((readCount = fr.read(buffer)) > 0) [ FD ]
Line_15 $$ while ((readCount = fr.read(buffer)) > 0) -->Line_16 $$ zoutstrm.write(buffer, 0, readCount)[ CD ]
Line_8 $$ ZipOutputStream zoutstrm = new ZipOutputStream(new FileOutputStream(f))-->Line_16 $$ zoutstrm.write(buffer, 0, readCount)[ FD ]
Line_13 $$ byte[] buffer = new byte[1024]-->Line_16 $$ zoutstrm.write(buffer, 0, readCount)[ FD ]
Line_15 $$ while ((readCount = fr.read(buffer)) > 0) -->Line_16 $$ zoutstrm.write(buffer, 0, readCount)[ FD ]
Line_14 $$ int readCount = 0-->Line_16 $$ zoutstrm.write(buffer, 0, readCount)[ FD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_18 $$ fr.close()[ CD ]
Line_12 $$ FileInputStream fr = new FileInputStream(fa[i])-->Line_18 $$ fr.close()[ FD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_19 $$ zoutstrm.closeEntry()[ CD ]
Line_8 $$ ZipOutputStream zoutstrm = new ZipOutputStream(new FileOutputStream(f))-->Line_19 $$ zoutstrm.closeEntry()[ FD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_21 $$ zoutstrm.close()[ CD ]
Line_8 $$ ZipOutputStream zoutstrm = new ZipOutputStream(new FileOutputStream(f))-->Line_21 $$ zoutstrm.close()[ FD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_22 $$ log("created zip file: " + file.getName() + "/" + ALL_FILES_NAME)[ CD ]
Line_2 $$ private void zipFiles(File file, File[] fa) throws Exception -->Line_22 $$ log("created zip file: " + file.getName() + "/" + ALL_FILES_NAME)[ FD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ FD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ FD ]
Line_9 $$ for (int i = 0; i < fa.length; i++) -->Line_9 $$ for (int i = 0; i < fa.length; i++) [ FD ]
Line_10 $$ ZipEntry zipEntry = new ZipEntry(fa[i].getName())-->Line_11 $$ zoutstrm.putNextEntry(zipEntry)[ FD ]
Line_12 $$ FileInputStream fr = new FileInputStream(fa[i])-->Line_18 $$ fr.close()[ FD ]
Line_15 $$ while ((readCount = fr.read(buffer)) > 0) -->Line_16 $$ zoutstrm.write(buffer, 0, readCount)[ FD ]
