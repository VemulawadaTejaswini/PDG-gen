Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException [ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_3 $$ FileInputStream fileInputStream = new FileInputStream(input)[ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_4 $$ InputStream inputStream[ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_5 $$ if (progressMessage != null) [ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_5 $$ if (progressMessage != null) [ FD ]
Line_5 $$ if (progressMessage != null) -->Line_6 $$ inputStream = new ProgressMonitorInputStream(null, progressMessage, fileInputStream)[ CD ]
Line_4 $$ InputStream inputStream-->Line_6 $$ inputStream = new ProgressMonitorInputStream(null, progressMessage, fileInputStream)[ FD ]
Line_6 $$ inputStream = new ProgressMonitorInputStream(null, progressMessage, fileInputStream)-->Line_6 $$ inputStream = new ProgressMonitorInputStream(null, progressMessage, fileInputStream)[ FD ]
Line_5 $$ if (progressMessage != null) -->Line_8 $$ inputStream = fileInputStream[ CD ]
Line_4 $$ InputStream inputStream-->Line_8 $$ inputStream = fileInputStream[ FD ]
Line_6 $$ inputStream = new ProgressMonitorInputStream(null, progressMessage, fileInputStream)-->Line_8 $$ inputStream = fileInputStream[ FD ]
Line_8 $$ inputStream = fileInputStream-->Line_8 $$ inputStream = fileInputStream[ FD ]
Line_3 $$ FileInputStream fileInputStream = new FileInputStream(input)-->Line_8 $$ inputStream = fileInputStream[ FD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_10 $$ FilterInputStream is = new BufferedInputStream(inputStream)[ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_11 $$ FilterOutputStream os = new BufferedOutputStream(new FileOutputStream(output))[ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_12 $$ FilterInputStream fis[ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_13 $$ FilterOutputStream fos[ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_14 $$ if (compress) [ CD ]
Line_14 $$ if (compress) -->Line_15 $$ fis = is[ CD ]
Line_12 $$ FilterInputStream fis-->Line_15 $$ fis = is[ FD ]
Line_15 $$ fis = is-->Line_15 $$ fis = is[ FD ]
Line_10 $$ FilterInputStream is = new BufferedInputStream(inputStream)-->Line_15 $$ fis = is[ FD ]
Line_14 $$ if (compress) -->Line_16 $$ fos = new GZIPOutputStream(new CipherOutputStream(os, cipher))[ CD ]
Line_13 $$ FilterOutputStream fos-->Line_16 $$ fos = new GZIPOutputStream(new CipherOutputStream(os, cipher))[ FD ]
Line_16 $$ fos = new GZIPOutputStream(new CipherOutputStream(os, cipher))-->Line_16 $$ fos = new GZIPOutputStream(new CipherOutputStream(os, cipher))[ FD ]
Line_14 $$ if (compress) -->Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))[ CD ]
Line_12 $$ FilterInputStream fis-->Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))[ FD ]
Line_15 $$ fis = is-->Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))[ FD ]
Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))-->Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))[ FD ]
Line_14 $$ if (compress) -->Line_19 $$ fos = os[ CD ]
Line_13 $$ FilterOutputStream fos-->Line_19 $$ fos = os[ FD ]
Line_16 $$ fos = new GZIPOutputStream(new CipherOutputStream(os, cipher))-->Line_19 $$ fos = os[ FD ]
Line_19 $$ fos = os-->Line_19 $$ fos = os[ FD ]
Line_11 $$ FilterOutputStream os = new BufferedOutputStream(new FileOutputStream(output))-->Line_19 $$ fos = os[ FD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_21 $$ byte[] buffer = new byte[cipher.getBlockSize() * blocksInBuffer][ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_21 $$ byte[] buffer = new byte[cipher.getBlockSize() * blocksInBuffer][ FD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_22 $$ int readLength = fis.read(buffer)[ CD ]
Line_22 $$ int readLength = fis.read(buffer)-->Line_22 $$ int readLength = fis.read(buffer)[ CD ]
Line_12 $$ FilterInputStream fis-->Line_22 $$ int readLength = fis.read(buffer)[ FD ]
Line_15 $$ fis = is-->Line_22 $$ int readLength = fis.read(buffer)[ FD ]
Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))-->Line_22 $$ int readLength = fis.read(buffer)[ FD ]
Line_21 $$ byte[] buffer = new byte[cipher.getBlockSize() * blocksInBuffer]-->Line_22 $$ int readLength = fis.read(buffer)[ FD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_23 $$ while (readLength != -1) [ CD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException [ CD ]
Line_22 $$ int readLength = fis.read(buffer)-->Line_23 $$ while (readLength != -1) [ FD ]
Line_23 $$ while (readLength != -1) -->Line_24 $$ fos.write(buffer, 0, readLength)[ CD ]
Line_13 $$ FilterOutputStream fos-->Line_24 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_16 $$ fos = new GZIPOutputStream(new CipherOutputStream(os, cipher))-->Line_24 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_19 $$ fos = os-->Line_24 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_21 $$ byte[] buffer = new byte[cipher.getBlockSize() * blocksInBuffer]-->Line_24 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_22 $$ int readLength = fis.read(buffer)-->Line_24 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_23 $$ while (readLength != -1) -->Line_25 $$ readLength = fis.read(buffer)[ CD ]
Line_25 $$ readLength = fis.read(buffer)-->Line_25 $$ readLength = fis.read(buffer)[ FD ]
Line_22 $$ int readLength = fis.read(buffer)-->Line_25 $$ readLength = fis.read(buffer)[ FD ]
Line_25 $$ readLength = fis.read(buffer)-->Line_25 $$ readLength = fis.read(buffer)[ CD ]
Line_12 $$ FilterInputStream fis-->Line_25 $$ readLength = fis.read(buffer)[ FD ]
Line_15 $$ fis = is-->Line_25 $$ readLength = fis.read(buffer)[ FD ]
Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))-->Line_25 $$ readLength = fis.read(buffer)[ FD ]
Line_21 $$ byte[] buffer = new byte[cipher.getBlockSize() * blocksInBuffer]-->Line_25 $$ readLength = fis.read(buffer)[ FD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_27 $$ if (compress) [ CD ]
Line_27 $$ if (compress) -->Line_28 $$ GZIPOutputStream gos = (GZIPOutputStream) fos[ CD ]
Line_27 $$ if (compress) -->Line_29 $$ gos.finish()[ CD ]
Line_28 $$ GZIPOutputStream gos = (GZIPOutputStream) fos-->Line_29 $$ gos.finish()[ FD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_31 $$ fos.close()[ CD ]
Line_13 $$ FilterOutputStream fos-->Line_31 $$ fos.close()[ FD ]
Line_16 $$ fos = new GZIPOutputStream(new CipherOutputStream(os, cipher))-->Line_31 $$ fos.close()[ FD ]
Line_19 $$ fos = os-->Line_31 $$ fos.close()[ FD ]
Line_2 $$ private void transformFile(File input, File output, Cipher cipher, boolean compress, String progressMessage) throws IOException -->Line_32 $$ fis.close()[ CD ]
Line_12 $$ FilterInputStream fis-->Line_32 $$ fis.close()[ FD ]
Line_15 $$ fis = is-->Line_32 $$ fis.close()[ FD ]
Line_18 $$ fis = new GZIPInputStream(new CipherInputStream(is, cipher))-->Line_32 $$ fis.close()[ FD ]
Line_25 $$ readLength = fis.read(buffer)-->Line_23 $$ while (readLength != -1) [ FD ]
Line_25 $$ readLength = fis.read(buffer)-->Line_23 $$ while (readLength != -1) [ FD ]
Line_25 $$ readLength = fis.read(buffer)-->Line_24 $$ fos.write(buffer, 0, readLength)[ FD ]
