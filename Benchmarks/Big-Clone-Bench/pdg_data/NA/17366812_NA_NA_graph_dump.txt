Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException [ CD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_3 $$ InputStream input = null[ CD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_4 $$ BufferedOutputStream bos = null[ CD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_5 $$ File tempUnit = null[ CD ]
Line_7 $$ URL url = null-->Line_10 $$ url = new URL(urlStr)[ FD ]
Line_10 $$ url = new URL(urlStr)-->Line_10 $$ url = new URL(urlStr)[ FD ]
Line_3 $$ InputStream input = null-->Line_11 $$ input = url.openStream()[ FD ]
Line_11 $$ input = url.openStream()-->Line_11 $$ input = url.openStream()[ FD ]
Line_11 $$ input = url.openStream()-->Line_11 $$ input = url.openStream()[ CD ]
Line_7 $$ URL url = null-->Line_11 $$ input = url.openStream()[ FD ]
Line_10 $$ url = new URL(urlStr)-->Line_11 $$ input = url.openStream()[ FD ]
Line_12 $$ URLConnection urlConnection-->Line_13 $$ urlConnection = url.openConnection()[ FD ]
Line_13 $$ urlConnection = url.openConnection()-->Line_13 $$ urlConnection = url.openConnection()[ FD ]
Line_13 $$ urlConnection = url.openConnection()-->Line_13 $$ urlConnection = url.openConnection()[ CD ]
Line_7 $$ URL url = null-->Line_13 $$ urlConnection = url.openConnection()[ FD ]
Line_10 $$ url = new URL(urlStr)-->Line_13 $$ urlConnection = url.openConnection()[ FD ]
Line_8 $$ int total = 0-->Line_14 $$ total = urlConnection.getContentLength()[ FD ]
Line_14 $$ total = urlConnection.getContentLength()-->Line_14 $$ total = urlConnection.getContentLength()[ FD ]
Line_14 $$ total = urlConnection.getContentLength()-->Line_14 $$ total = urlConnection.getContentLength()[ CD ]
Line_12 $$ URLConnection urlConnection-->Line_14 $$ total = urlConnection.getContentLength()[ FD ]
Line_13 $$ urlConnection = url.openConnection()-->Line_14 $$ total = urlConnection.getContentLength()[ FD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_16 $$ throw new UnitTransportException(String.format("Can't get remote file [%s].", urlStr), e)[ FD ]
Line_18 $$ String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1)-->Line_18 $$ String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1)[ CD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_18 $$ String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1)[ FD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_18 $$ String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1)[ FD ]
Line_5 $$ File tempUnit = null-->Line_19 $$ tempUnit = null[ FD ]
Line_19 $$ tempUnit = null-->Line_19 $$ tempUnit = null[ FD ]
Line_18 $$ String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1)-->Line_21 $$ if (StringUtils.isNotEmpty(unitName))[ FD ]
Line_21 $$ if (StringUtils.isNotEmpty(unitName))-->Line_21 $$ if (StringUtils.isNotEmpty(unitName))[ CD ]
Line_18 $$ String unitName = urlStr.substring(urlStr.lastIndexOf('/') + 1)-->Line_21 $$ if (StringUtils.isNotEmpty(unitName))[ FD ]
Line_21 $$ if (StringUtils.isNotEmpty(unitName))-->Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)[ CD ]
Line_5 $$ File tempUnit = null-->Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)[ FD ]
Line_19 $$ tempUnit = null-->Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)[ FD ]
Line_21 $$ if (StringUtils.isNotEmpty(unitName))-->Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")[ CD ]
Line_5 $$ File tempUnit = null-->Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")[ FD ]
Line_19 $$ tempUnit = null-->Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")[ CD ]
Line_22 $$ File parent = tempUnit.getParentFile()-->Line_22 $$ File parent = tempUnit.getParentFile()[ CD ]
Line_5 $$ File tempUnit = null-->Line_22 $$ File parent = tempUnit.getParentFile()[ FD ]
Line_19 $$ tempUnit = null-->Line_22 $$ File parent = tempUnit.getParentFile()[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_22 $$ File parent = tempUnit.getParentFile()[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_22 $$ File parent = tempUnit.getParentFile()[ FD ]
Line_22 $$ File parent = tempUnit.getParentFile()-->Line_23 $$ FileUtils.forceMkdir(parent)[ FD ]
Line_24 $$ if (!tempUnit.exists())-->Line_24 $$ if (!tempUnit.exists())[ CD ]
Line_24 $$ if (!tempUnit.exists())-->Line_24 $$ if (!tempUnit.exists())[ CD ]
Line_5 $$ File tempUnit = null-->Line_24 $$ if (!tempUnit.exists())[ FD ]
Line_19 $$ tempUnit = null-->Line_24 $$ if (!tempUnit.exists())[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_24 $$ if (!tempUnit.exists())[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_24 $$ if (!tempUnit.exists())[ FD ]
Line_24 $$ if (!tempUnit.exists())-->Line_24 $$ FileUtils.touch(tempUnit)[ CD ]
Line_5 $$ File tempUnit = null-->Line_24 $$ FileUtils.touch(tempUnit)[ FD ]
Line_19 $$ tempUnit = null-->Line_24 $$ FileUtils.touch(tempUnit)[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_24 $$ FileUtils.touch(tempUnit)[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_24 $$ FileUtils.touch(tempUnit)[ FD ]
Line_4 $$ BufferedOutputStream bos = null-->Line_25 $$ bos = new BufferedOutputStream(new FileOutputStream(tempUnit))[ FD ]
Line_25 $$ bos = new BufferedOutputStream(new FileOutputStream(tempUnit))-->Line_25 $$ bos = new BufferedOutputStream(new FileOutputStream(tempUnit))[ FD ]
Line_5 $$ File tempUnit = null-->Line_27 $$ throw new UnitTransportException(String.format("Can't find temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_19 $$ tempUnit = null-->Line_27 $$ throw new UnitTransportException(String.format("Can't find temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_27 $$ throw new UnitTransportException(String.format("Can't find temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_27 $$ throw new UnitTransportException(String.format("Can't find temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_5 $$ File tempUnit = null-->Line_29 $$ throw new UnitTransportException(String.format("Can't create temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_19 $$ tempUnit = null-->Line_29 $$ throw new UnitTransportException(String.format("Can't create temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_29 $$ throw new UnitTransportException(String.format("Can't create temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_29 $$ throw new UnitTransportException(String.format("Can't create temp file [%s].", tempUnit.getAbsolutePath()), e)[ FD ]
Line_5 $$ File tempUnit = null-->Line_31 $$ throw new UnitTransportException(String.format("Error when create temp file [%s].", tempUnit), e)[ FD ]
Line_19 $$ tempUnit = null-->Line_31 $$ throw new UnitTransportException(String.format("Error when create temp file [%s].", tempUnit), e)[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_31 $$ throw new UnitTransportException(String.format("Error when create temp file [%s].", tempUnit), e)[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_31 $$ throw new UnitTransportException(String.format("Error when create temp file [%s].", tempUnit), e)[ FD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_33 $$ logger.info(String.format("Use [%s] for http unit [%s].", tempUnit.getAbsoluteFile(), urlStr))[ FD ]
Line_5 $$ File tempUnit = null-->Line_33 $$ logger.info(String.format("Use [%s] for http unit [%s].", tempUnit.getAbsoluteFile(), urlStr))[ FD ]
Line_19 $$ tempUnit = null-->Line_33 $$ logger.info(String.format("Use [%s] for http unit [%s].", tempUnit.getAbsoluteFile(), urlStr))[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_33 $$ logger.info(String.format("Use [%s] for http unit [%s].", tempUnit.getAbsoluteFile(), urlStr))[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_33 $$ logger.info(String.format("Use [%s] for http unit [%s].", tempUnit.getAbsoluteFile(), urlStr))[ FD ]
Line_34 $$ int size = -1-->Line_34 $$ int size = -1[ CD ]
Line_34 $$ int size = -1-->Line_36 $$ size = IOUtils.copy(input, bos)[ FD ]
Line_36 $$ size = IOUtils.copy(input, bos)-->Line_36 $$ size = IOUtils.copy(input, bos)[ FD ]
Line_36 $$ size = IOUtils.copy(input, bos)-->Line_36 $$ size = IOUtils.copy(input, bos)[ CD ]
Line_3 $$ InputStream input = null-->Line_36 $$ size = IOUtils.copy(input, bos)[ FD ]
Line_11 $$ input = url.openStream()-->Line_36 $$ size = IOUtils.copy(input, bos)[ FD ]
Line_4 $$ BufferedOutputStream bos = null-->Line_36 $$ size = IOUtils.copy(input, bos)[ FD ]
Line_25 $$ bos = new BufferedOutputStream(new FileOutputStream(tempUnit))-->Line_36 $$ size = IOUtils.copy(input, bos)[ FD ]
Line_4 $$ BufferedOutputStream bos = null-->Line_37 $$ bos.flush()[ FD ]
Line_25 $$ bos = new BufferedOutputStream(new FileOutputStream(tempUnit))-->Line_37 $$ bos.flush()[ FD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_39 $$ logger.info(String.format("Error when download [%s] to [%s].", urlStr, tempUnit))[ FD ]
Line_5 $$ File tempUnit = null-->Line_39 $$ logger.info(String.format("Error when download [%s] to [%s].", urlStr, tempUnit))[ FD ]
Line_19 $$ tempUnit = null-->Line_39 $$ logger.info(String.format("Error when download [%s] to [%s].", urlStr, tempUnit))[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_39 $$ logger.info(String.format("Error when download [%s] to [%s].", urlStr, tempUnit))[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_39 $$ logger.info(String.format("Error when download [%s] to [%s].", urlStr, tempUnit))[ FD ]
Line_34 $$ int size = -1-->Line_41 $$ if (size != total)[ FD ]
Line_36 $$ size = IOUtils.copy(input, bos)-->Line_41 $$ if (size != total)[ FD ]
Line_8 $$ int total = 0-->Line_41 $$ if (size != total)[ FD ]
Line_14 $$ total = urlConnection.getContentLength()-->Line_41 $$ if (size != total)[ FD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_41 $$ throw new UnitTransportException(String.format("The file size is not right when download http unit [%s]", urlStr))[ FD ]
Line_3 $$ InputStream input = null-->Line_43 $$ if (input != null)[ FD ]
Line_11 $$ input = url.openStream()-->Line_43 $$ if (input != null)[ FD ]
Line_43 $$ if (input != null)-->Line_43 $$ IOUtils.closeQuietly(input)[ CD ]
Line_3 $$ InputStream input = null-->Line_43 $$ IOUtils.closeQuietly(input)[ FD ]
Line_11 $$ input = url.openStream()-->Line_43 $$ IOUtils.closeQuietly(input)[ FD ]
Line_4 $$ BufferedOutputStream bos = null-->Line_44 $$ if (bos != null)[ FD ]
Line_25 $$ bos = new BufferedOutputStream(new FileOutputStream(tempUnit))-->Line_44 $$ if (bos != null)[ FD ]
Line_44 $$ if (bos != null)-->Line_44 $$ IOUtils.closeQuietly(bos)[ CD ]
Line_4 $$ BufferedOutputStream bos = null-->Line_44 $$ IOUtils.closeQuietly(bos)[ FD ]
Line_25 $$ bos = new BufferedOutputStream(new FileOutputStream(tempUnit))-->Line_44 $$ IOUtils.closeQuietly(bos)[ FD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_46 $$ logger.info(String.format("Download unit to [%s].", tempUnit.getAbsolutePath()))[ CD ]
Line_5 $$ File tempUnit = null-->Line_46 $$ logger.info(String.format("Download unit to [%s].", tempUnit.getAbsolutePath()))[ FD ]
Line_19 $$ tempUnit = null-->Line_46 $$ logger.info(String.format("Download unit to [%s].", tempUnit.getAbsolutePath()))[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_46 $$ logger.info(String.format("Download unit to [%s].", tempUnit.getAbsolutePath()))[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_46 $$ logger.info(String.format("Download unit to [%s].", tempUnit.getAbsolutePath()))[ FD ]
Line_2 $$ public String tranportRemoteUnitToLocalTempFile(String urlStr) throws UnitTransportException -->Line_47 $$ return tempUnit.getAbsolutePath()[ CD ]
Line_47 $$ return tempUnit.getAbsolutePath()-->Line_47 $$ return tempUnit.getAbsolutePath()[ CD ]
Line_5 $$ File tempUnit = null-->Line_47 $$ return tempUnit.getAbsolutePath()[ FD ]
Line_19 $$ tempUnit = null-->Line_47 $$ return tempUnit.getAbsolutePath()[ FD ]
Line_21 $$ tempUnit = new File(CommonUtil.getTempDir(), unitName)-->Line_47 $$ return tempUnit.getAbsolutePath()[ FD ]
Line_21 $$ tempUnit = File.createTempFile(CommonUtil.getTempDir(), "tempUnit")-->Line_47 $$ return tempUnit.getAbsolutePath()[ FD ]
