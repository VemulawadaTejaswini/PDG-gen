Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void toZip(File zippedFile, File[] filesToZip, String zipComment, boolean savePath, int compressionLevel) throws IOException, FileNotFoundException, ZipException [ CD ]
Line_2 $$ public static void toZip(File zippedFile, File[] filesToZip, String zipComment, boolean savePath, int compressionLevel) throws IOException, FileNotFoundException, ZipException -->Line_3 $$ if (zippedFile != null && filesToZip != null) [ CD ]
Line_3 $$ if (zippedFile != null && filesToZip != null) -->Line_4 $$ new File(zippedFile.getParent()).mkdirs()[ CD ]
Line_2 $$ public static void toZip(File zippedFile, File[] filesToZip, String zipComment, boolean savePath, int compressionLevel) throws IOException, FileNotFoundException, ZipException -->Line_4 $$ new File(zippedFile.getParent()).mkdirs()[ FD ]
Line_3 $$ if (zippedFile != null && filesToZip != null) -->Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))[ CD ]
Line_3 $$ if (zippedFile != null && filesToZip != null) -->Line_6 $$ if (ZIP_NO_COMPRESSION <= compressionLevel && compressionLevel <= ZIP_MAX_COMPRESSION)[ CD ]
Line_6 $$ if (ZIP_NO_COMPRESSION <= compressionLevel && compressionLevel <= ZIP_MAX_COMPRESSION)-->Line_6 $$ out.setLevel(compressionLevel)[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))-->Line_6 $$ out.setLevel(compressionLevel)[ FD ]
Line_2 $$ public static void toZip(File zippedFile, File[] filesToZip, String zipComment, boolean savePath, int compressionLevel) throws IOException, FileNotFoundException, ZipException -->Line_6 $$ out.setLevel(compressionLevel)[ FD ]
Line_6 $$ if (ZIP_NO_COMPRESSION <= compressionLevel && compressionLevel <= ZIP_MAX_COMPRESSION)-->Line_6 $$ out.setLevel(ZIP_MAX_COMPRESSION)[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))-->Line_6 $$ out.setLevel(ZIP_MAX_COMPRESSION)[ FD ]
Line_3 $$ if (zippedFile != null && filesToZip != null) -->Line_7 $$ if (zipComment != null)[ CD ]
Line_2 $$ public static void toZip(File zippedFile, File[] filesToZip, String zipComment, boolean savePath, int compressionLevel) throws IOException, FileNotFoundException, ZipException -->Line_7 $$ if (zipComment != null)[ FD ]
Line_7 $$ if (zipComment != null)-->Line_7 $$ out.setComment(zipComment)[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))-->Line_7 $$ out.setComment(zipComment)[ FD ]
Line_2 $$ public static void toZip(File zippedFile, File[] filesToZip, String zipComment, boolean savePath, int compressionLevel) throws IOException, FileNotFoundException, ZipException -->Line_7 $$ out.setComment(zipComment)[ FD ]
Line_3 $$ if (zippedFile != null && filesToZip != null) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ CD ]
Line_3 $$ if (zippedFile != null && filesToZip != null) -->Line_3 $$ if (zippedFile != null && filesToZip != null) [ CD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_9 $$ BufferedInputStream in[ CD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_10 $$ if (savePath) [ CD ]
Line_10 $$ if (savePath) -->Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))[ CD ]
Line_9 $$ BufferedInputStream in-->Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))[ FD ]
Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))[ FD ]
Line_10 $$ if (savePath) -->Line_12 $$ out.putNextEntry(new ZipEntry(cleanPath(filesToZip[i].getAbsolutePath())))[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))-->Line_12 $$ out.putNextEntry(new ZipEntry(cleanPath(filesToZip[i].getAbsolutePath())))[ FD ]
Line_10 $$ if (savePath) -->Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))[ CD ]
Line_9 $$ BufferedInputStream in-->Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))[ FD ]
Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))[ FD ]
Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))[ FD ]
Line_10 $$ if (savePath) -->Line_15 $$ out.putNextEntry(new ZipEntry(filesToZip[i].getName()))[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))-->Line_15 $$ out.putNextEntry(new ZipEntry(filesToZip[i].getName()))[ FD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ CD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ CD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ CD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ CD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ CD ]
Line_9 $$ BufferedInputStream in-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ CD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ CD ]
Line_9 $$ BufferedInputStream in-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ out.write(c)[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))-->Line_17 $$ out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ out.write(c)[ FD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_18 $$ in.close()[ CD ]
Line_9 $$ BufferedInputStream in-->Line_18 $$ in.close()[ FD ]
Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_18 $$ in.close()[ FD ]
Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_18 $$ in.close()[ FD ]
Line_3 $$ if (zippedFile != null && filesToZip != null) -->Line_20 $$ out.close()[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new CheckedOutputStream(new FileOutputStream(zippedFile), new CRC32())))-->Line_20 $$ out.close()[ FD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < filesToZip.length; i++) -->Line_8 $$ for (int i = 0; i < filesToZip.length; i++) [ FD ]
Line_9 $$ BufferedInputStream in-->Line_18 $$ in.close()[ FD ]
Line_11 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_18 $$ in.close()[ FD ]
Line_14 $$ in = new BufferedInputStream(new FileInputStream(filesToZip[i]))-->Line_18 $$ in.close()[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ out.write(c)[ FD ]
Line_17 $$ for (int c = in.read(); c != -1; c = in.read()) out.write(c)-->Line_17 $$ out.write(c)[ FD ]
