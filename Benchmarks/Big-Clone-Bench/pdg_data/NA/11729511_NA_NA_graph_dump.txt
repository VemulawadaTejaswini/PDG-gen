Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean run() [ CD ]
Line_2 $$ public boolean run() -->Line_3 $$ String url[ CD ]
Line_3 $$ String url-->Line_5 $$ url = getFileName()[ FD ]
Line_5 $$ url = getFileName()-->Line_5 $$ url = getFileName()[ FD ]
Line_5 $$ url = getFileName()-->Line_5 $$ url = getFileName()[ CD ]
Line_2 $$ public boolean run() -->Line_9 $$ if (url == null) [ CD ]
Line_3 $$ String url-->Line_9 $$ if (url == null) [ FD ]
Line_5 $$ url = getFileName()-->Line_9 $$ if (url == null) [ FD ]
Line_9 $$ if (url == null) -->Line_10 $$ logger.error("URL not specified! Cannot continue.")[ CD ]
Line_9 $$ if (url == null) -->Line_11 $$ return false[ CD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())[ CD ]
Line_3 $$ String url-->Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())[ FD ]
Line_5 $$ url = getFileName()-->Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())[ FD ]
Line_3 $$ String url-->Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())[ FD ]
Line_5 $$ url = getFileName()-->Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())[ FD ]
Line_3 $$ String url-->Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())[ FD ]
Line_5 $$ url = getFileName()-->Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())[ FD ]
Line_16 $$ File temp = File.createTempFile("temp", "." + extension)-->Line_16 $$ File temp = File.createTempFile("temp", "." + extension)[ CD ]
Line_16 $$ File temp = File.createTempFile("temp", "." + extension)-->Line_17 $$ System.out.printf("Storing URL contents to a temp file : %s\n", temp)[ FD ]
Line_16 $$ File temp = File.createTempFile("temp", "." + extension)-->Line_18 $$ temp.deleteOnExit()[ FD ]
Line_14 $$ URL newURL = new URL(url)-->Line_19 $$ InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream())[ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ CD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ CD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ CD ]
Line_19 $$ InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream())-->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ CD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ CD ]
Line_19 $$ InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream())-->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_23 $$ out.write(singleByte)[ CD ]
Line_20 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp))-->Line_23 $$ out.write(singleByte)[ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_23 $$ out.write(singleByte)[ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_23 $$ out.write(singleByte)[ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_24 $$ len++[ CD ]
Line_21 $$ int len = 0-->Line_24 $$ len++[ FD ]
Line_21 $$ int len = 0-->Line_26 $$ System.out.printf("Stored %d bytes from URL contents\n", len)[ FD ]
Line_20 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp))-->Line_27 $$ out.flush()[ FD ]
Line_20 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp))-->Line_28 $$ out.close()[ FD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_29 $$ System.out.printf("URL/Temp extension : %s\n", extension)[ FD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_30 $$ if (extension.equalsIgnoreCase("gz")) [ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_30 $$ if (extension.equalsIgnoreCase("gz")) [ CD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_30 $$ if (extension.equalsIgnoreCase("gz")) [ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))[ CD ]
Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))-->Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))[ CD ]
Line_3 $$ String url-->Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))[ FD ]
Line_5 $$ url = getFileName()-->Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))[ FD ]
Line_3 $$ String url-->Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))[ FD ]
Line_5 $$ url = getFileName()-->Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))[ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_32 $$ String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length())[ CD ]
Line_32 $$ String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length())-->Line_32 $$ String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length())[ CD ]
Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))-->Line_32 $$ String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length())[ FD ]
Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))-->Line_32 $$ String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length())[ FD ]
Line_31 $$ String shorterName = url.substring(0, url.lastIndexOf("."))-->Line_32 $$ String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length())[ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_33 $$ File temp2 = File.createTempFile("temp", "." + extension2)[ CD ]
Line_33 $$ File temp2 = File.createTempFile("temp", "." + extension2)-->Line_33 $$ File temp2 = File.createTempFile("temp", "." + extension2)[ CD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_34 $$ temp2.deleteOnExit()[ CD ]
Line_33 $$ File temp2 = File.createTempFile("temp", "." + extension2)-->Line_34 $$ temp2.deleteOnExit()[ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_35 $$ System.out.printf("URL/Temp extension after decompressing gzip : %s\n", extension2)[ CD ]
Line_32 $$ String extension2 = shorterName.substring((shorterName.lastIndexOf(".")) + 1, shorterName.length())-->Line_35 $$ System.out.printf("URL/Temp extension after decompressing gzip : %s\n", extension2)[ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_36 $$ GZIPInputStream decompressor = new GZIPInputStream(new FileInputStream(temp))[ CD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_37 $$ OutputStream target = new FileOutputStream(temp2)[ CD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_38 $$ byte[] buffer = new byte[1024][ CD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_39 $$ int length[ CD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_40 $$ while ((length = decompressor.read(buffer)) > 0) [ CD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_30 $$ if (extension.equalsIgnoreCase("gz")) [ CD ]
Line_40 $$ while ((length = decompressor.read(buffer)) > 0) -->Line_40 $$ while ((length = decompressor.read(buffer)) > 0) [ FD ]
Line_39 $$ int length-->Line_40 $$ while ((length = decompressor.read(buffer)) > 0) [ FD ]
Line_40 $$ while ((length = decompressor.read(buffer)) > 0) -->Line_40 $$ while ((length = decompressor.read(buffer)) > 0) [ CD ]
Line_36 $$ GZIPInputStream decompressor = new GZIPInputStream(new FileInputStream(temp))-->Line_40 $$ while ((length = decompressor.read(buffer)) > 0) [ FD ]
Line_38 $$ byte[] buffer = new byte[1024]-->Line_40 $$ while ((length = decompressor.read(buffer)) > 0) [ FD ]
Line_40 $$ while ((length = decompressor.read(buffer)) > 0) -->Line_41 $$ target.write(buffer, 0, length)[ CD ]
Line_37 $$ OutputStream target = new FileOutputStream(temp2)-->Line_41 $$ target.write(buffer, 0, length)[ FD ]
Line_38 $$ byte[] buffer = new byte[1024]-->Line_41 $$ target.write(buffer, 0, length)[ FD ]
Line_40 $$ while ((length = decompressor.read(buffer)) > 0) -->Line_41 $$ target.write(buffer, 0, length)[ FD ]
Line_39 $$ int length-->Line_41 $$ target.write(buffer, 0, length)[ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_43 $$ target.flush()[ CD ]
Line_37 $$ OutputStream target = new FileOutputStream(temp2)-->Line_43 $$ target.flush()[ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_44 $$ target.close()[ CD ]
Line_37 $$ OutputStream target = new FileOutputStream(temp2)-->Line_44 $$ target.close()[ FD ]
Line_30 $$ if (extension.equalsIgnoreCase("gz")) -->Line_45 $$ temp = temp2[ CD ]
Line_16 $$ File temp = File.createTempFile("temp", "." + extension)-->Line_45 $$ temp = temp2[ FD ]
Line_45 $$ temp = temp2-->Line_45 $$ temp = temp2[ FD ]
Line_33 $$ File temp2 = File.createTempFile("temp", "." + extension2)-->Line_45 $$ temp = temp2[ FD ]
Line_47 $$ String tempName = temp.getName()-->Line_47 $$ String tempName = temp.getName()[ CD ]
Line_16 $$ File temp = File.createTempFile("temp", "." + extension)-->Line_47 $$ String tempName = temp.getName()[ FD ]
Line_45 $$ temp = temp2-->Line_47 $$ String tempName = temp.getName()[ FD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())[ FD ]
Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())-->Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())[ FD ]
Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())-->Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())[ CD ]
Line_47 $$ String tempName = temp.getName()-->Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())[ FD ]
Line_47 $$ String tempName = temp.getName()-->Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())[ FD ]
Line_47 $$ String tempName = temp.getName()-->Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())[ FD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_51 $$ if (MethodCallTable.containsKey(extension) == false) [ FD ]
Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())-->Line_51 $$ if (MethodCallTable.containsKey(extension) == false) [ FD ]
Line_51 $$ if (MethodCallTable.containsKey(extension) == false) -->Line_52 $$ fileLoader = MethodCallTable.get("default")[ CD ]
Line_49 $$ Preprocessor fileLoader = null-->Line_52 $$ fileLoader = MethodCallTable.get("default")[ FD ]
Line_52 $$ fileLoader = MethodCallTable.get("default")-->Line_52 $$ fileLoader = MethodCallTable.get("default")[ FD ]
Line_52 $$ fileLoader = MethodCallTable.get("default")-->Line_52 $$ fileLoader = MethodCallTable.get("default")[ CD ]
Line_51 $$ if (MethodCallTable.containsKey(extension) == false) -->Line_54 $$ fileLoader = MethodCallTable.get(extension)[ CD ]
Line_49 $$ Preprocessor fileLoader = null-->Line_54 $$ fileLoader = MethodCallTable.get(extension)[ FD ]
Line_52 $$ fileLoader = MethodCallTable.get("default")-->Line_54 $$ fileLoader = MethodCallTable.get(extension)[ FD ]
Line_54 $$ fileLoader = MethodCallTable.get(extension)-->Line_54 $$ fileLoader = MethodCallTable.get(extension)[ FD ]
Line_54 $$ fileLoader = MethodCallTable.get(extension)-->Line_54 $$ fileLoader = MethodCallTable.get(extension)[ CD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_54 $$ fileLoader = MethodCallTable.get(extension)[ FD ]
Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())-->Line_54 $$ fileLoader = MethodCallTable.get(extension)[ FD ]
Line_15 $$ String extension = url.substring((url.lastIndexOf(".")) + 1, url.length())-->Line_56 $$ System.out.printf("Calling filter '%s' for extension: %s\n", fileLoader.getPreprocessingMethodName(), extension)[ FD ]
Line_48 $$ extension = tempName.substring((tempName.lastIndexOf(".")) + 1, tempName.length())-->Line_56 $$ System.out.printf("Calling filter '%s' for extension: %s\n", fileLoader.getPreprocessingMethodName(), extension)[ FD ]
Line_49 $$ Preprocessor fileLoader = null-->Line_56 $$ System.out.printf("Calling filter '%s' for extension: %s\n", fileLoader.getPreprocessingMethodName(), extension)[ FD ]
Line_52 $$ fileLoader = MethodCallTable.get("default")-->Line_56 $$ System.out.printf("Calling filter '%s' for extension: %s\n", fileLoader.getPreprocessingMethodName(), extension)[ FD ]
Line_54 $$ fileLoader = MethodCallTable.get(extension)-->Line_56 $$ System.out.printf("Calling filter '%s' for extension: %s\n", fileLoader.getPreprocessingMethodName(), extension)[ FD ]
Line_50 $$ BasePreprocessorConfig configObject = null-->Line_57 $$ configObject = new LoadCSVPreprocessorConfig()[ FD ]
Line_57 $$ configObject = new LoadCSVPreprocessorConfig()-->Line_57 $$ configObject = new LoadCSVPreprocessorConfig()[ FD ]
Line_50 $$ BasePreprocessorConfig configObject = null-->Line_58 $$ configObject.setValueByName("FileName", temp.getAbsolutePath())[ FD ]
Line_57 $$ configObject = new LoadCSVPreprocessorConfig()-->Line_58 $$ configObject.setValueByName("FileName", temp.getAbsolutePath())[ FD ]
Line_16 $$ File temp = File.createTempFile("temp", "." + extension)-->Line_58 $$ configObject.setValueByName("FileName", temp.getAbsolutePath())[ FD ]
Line_45 $$ temp = temp2-->Line_58 $$ configObject.setValueByName("FileName", temp.getAbsolutePath())[ FD ]
Line_49 $$ Preprocessor fileLoader = null-->Line_59 $$ fileLoader.setConfigurationClass(configObject)[ FD ]
Line_52 $$ fileLoader = MethodCallTable.get("default")-->Line_59 $$ fileLoader.setConfigurationClass(configObject)[ FD ]
Line_54 $$ fileLoader = MethodCallTable.get(extension)-->Line_59 $$ fileLoader.setConfigurationClass(configObject)[ FD ]
Line_50 $$ BasePreprocessorConfig configObject = null-->Line_59 $$ fileLoader.setConfigurationClass(configObject)[ FD ]
Line_57 $$ configObject = new LoadCSVPreprocessorConfig()-->Line_59 $$ fileLoader.setConfigurationClass(configObject)[ FD ]
Line_60 $$ return fileLoader.run()-->Line_60 $$ return fileLoader.run()[ CD ]
Line_49 $$ Preprocessor fileLoader = null-->Line_60 $$ return fileLoader.run()[ FD ]
Line_52 $$ fileLoader = MethodCallTable.get("default")-->Line_60 $$ return fileLoader.run()[ FD ]
Line_54 $$ fileLoader = MethodCallTable.get(extension)-->Line_60 $$ return fileLoader.run()[ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) [ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_23 $$ out.write(singleByte)[ FD ]
Line_22 $$ for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) -->Line_23 $$ out.write(singleByte)[ FD ]
Line_40 $$ while ((length = decompressor.read(buffer)) > 0) -->Line_41 $$ target.write(buffer, 0, length)[ FD ]
