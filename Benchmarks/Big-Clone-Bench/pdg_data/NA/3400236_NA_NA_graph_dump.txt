Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean verifySignature() [ CD ]
Line_4 $$ byte[] data = readFile(name + ".tmp1.bin")-->Line_4 $$ byte[] data = readFile(name + ".tmp1.bin")[ CD ]
Line_4 $$ byte[] data = readFile(name + ".tmp1.bin")-->Line_5 $$ if (data == null)[ FD ]
Line_5 $$ if (data == null)-->Line_5 $$ return false[ CD ]
Line_6 $$ if (data[data.length - 0x104] != 'N' || data[data.length - 0x103] != 'G' || data[data.length - 0x102] != 'I' || data[data.length - 0x101] != 'S')-->Line_6 $$ return false[ CD ]
Line_4 $$ byte[] data = readFile(name + ".tmp1.bin")-->Line_9 $$ System.arraycopy(data, data.length - 0x100, signature, 0, 0x100)[ FD ]
Line_7 $$ byte[] signature = new byte[0x100]-->Line_9 $$ System.arraycopy(data, data.length - 0x100, signature, 0, 0x100)[ FD ]
Line_4 $$ byte[] data = readFile(name + ".tmp1.bin")-->Line_10 $$ System.arraycopy(data, 0, module, 0, data.length - 0x104)[ FD ]
Line_8 $$ byte[] module = new byte[data.length - 0x104]-->Line_10 $$ System.arraycopy(data, 0, module, 0, data.length - 0x104)[ FD ]
Line_13 $$ byte[] result = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, signature).modPow(power, mod).toByteArray()-->Line_13 $$ byte[] result = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, signature).modPow(power, mod).toByteArray()[ CD ]
Line_11 $$ BigIntegerEx power = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, new byte[] -->Line_13 $$ byte[] result = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, signature).modPow(power, mod).toByteArray()[ FD ]
Line_12 $$ BigIntegerEx mod = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, new byte[] -->Line_13 $$ byte[] result = new BigIntegerEx(BigIntegerEx.LITTLE_ENDIAN, signature).modPow(power, mod).toByteArray()[ FD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB[ CD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB[ CD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB[ FD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_16 $$ properResult[i] = (byte) 0xBB[ CD ]
Line_17 $$ MessageDigest md = MessageDigest.getInstance("SHA1")-->Line_17 $$ MessageDigest md = MessageDigest.getInstance("SHA1")[ CD ]
Line_17 $$ MessageDigest md = MessageDigest.getInstance("SHA1")-->Line_18 $$ md.update(module)[ FD ]
Line_8 $$ byte[] module = new byte[data.length - 0x104]-->Line_18 $$ md.update(module)[ FD ]
Line_17 $$ MessageDigest md = MessageDigest.getInstance("SHA1")-->Line_19 $$ md.update("MAIEV.MOD".getBytes())[ FD ]
Line_14 $$ byte[] digest-->Line_20 $$ digest = md.digest()[ FD ]
Line_20 $$ digest = md.digest()-->Line_20 $$ digest = md.digest()[ FD ]
Line_20 $$ digest = md.digest()-->Line_20 $$ digest = md.digest()[ CD ]
Line_17 $$ MessageDigest md = MessageDigest.getInstance("SHA1")-->Line_20 $$ digest = md.digest()[ FD ]
Line_14 $$ byte[] digest-->Line_21 $$ System.arraycopy(digest, 0, properResult, 0, digest.length)[ FD ]
Line_20 $$ digest = md.digest()-->Line_21 $$ System.arraycopy(digest, 0, properResult, 0, digest.length)[ FD ]
Line_15 $$ byte[] properResult = new byte[0x100]-->Line_21 $$ System.arraycopy(digest, 0, properResult, 0, digest.length)[ FD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ FD ]
Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ CD ]
Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ CD ]
Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ FD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ FD ]
Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])-->Line_22 $$ if (result[i] != properResult[i])[ CD ]
Line_22 $$ if (result[i] != properResult[i])-->Line_22 $$ return false[ CD ]
Line_2 $$ public boolean verifySignature() -->Line_27 $$ return false[ CD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB[ FD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB[ FD ]
Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB-->Line_16 $$ for (int i = 0; i < properResult.length; i++) properResult[i] = (byte) 0xBB[ FD ]
Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ FD ]
Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ FD ]
Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])-->Line_22 $$ for (int i = 0; i < result.length; i++) if (result[i] != properResult[i])[ FD ]
