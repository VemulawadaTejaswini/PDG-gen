Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void copyFile(File source, File destination) throws IOException [ CD ]
Line_2 $$ public static void copyFile(File source, File destination) throws IOException -->Line_3 $$ if (!source.isFile()) [ CD ]
Line_3 $$ if (!source.isFile()) -->Line_3 $$ if (!source.isFile()) [ CD ]
Line_3 $$ if (!source.isFile()) -->Line_3 $$ if (!source.isFile()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination) throws IOException -->Line_3 $$ if (!source.isFile()) [ FD ]
Line_2 $$ public static void copyFile(File source, File destination) throws IOException -->Line_6 $$ if (destination.exists()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination) throws IOException -->Line_6 $$ if (destination.exists()) [ FD ]
Line_6 $$ if (destination.exists()) -->Line_6 $$ if (destination.exists()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination) throws IOException -->Line_6 $$ if (destination.exists()) [ FD ]
Line_2 $$ public static void copyFile(File source, File destination) throws IOException -->Line_9 $$ FileChannel inChannel = new FileInputStream(source).getChannel()[ CD ]
Line_9 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_9 $$ FileChannel inChannel = new FileInputStream(source).getChannel()[ CD ]
Line_2 $$ public static void copyFile(File source, File destination) throws IOException -->Line_10 $$ FileChannel outChannel = new FileOutputStream(destination).getChannel()[ CD ]
Line_10 $$ FileChannel outChannel = new FileOutputStream(destination).getChannel()-->Line_10 $$ FileChannel outChannel = new FileOutputStream(destination).getChannel()[ CD ]
Line_9 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_12 $$ inChannel.transferTo(0, inChannel.size(), outChannel)[ FD ]
Line_10 $$ FileChannel outChannel = new FileOutputStream(destination).getChannel()-->Line_12 $$ inChannel.transferTo(0, inChannel.size(), outChannel)[ FD ]
Line_9 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_12 $$ inChannel.transferTo(0, inChannel.size(), outChannel)[ FD ]
Line_9 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_14 $$ inChannel.close()[ FD ]
Line_10 $$ FileChannel outChannel = new FileOutputStream(destination).getChannel()-->Line_15 $$ outChannel.close()[ FD ]
