Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception [ CD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_3 $$ JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "images/photo.png")[ CD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_4 $$ assertNotNull(source)[ CD ]
Line_3 $$ JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "images/photo.png")-->Line_4 $$ assertNotNull(source)[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_5 $$ assertEquals(false, source.exists())[ CD ]
Line_3 $$ JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "images/photo.png")-->Line_5 $$ assertEquals(false, source.exists())[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_6 $$ OutputStream os = source.getOutputStream()[ CD ]
Line_6 $$ OutputStream os = source.getOutputStream()-->Line_6 $$ OutputStream os = source.getOutputStream()[ CD ]
Line_3 $$ JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "images/photo.png")-->Line_6 $$ OutputStream os = source.getOutputStream()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_7 $$ assertNotNull(os)[ CD ]
Line_6 $$ OutputStream os = source.getOutputStream()-->Line_7 $$ assertNotNull(os)[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_8 $$ String content = "foo is a bar"[ CD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_9 $$ os.write(content.getBytes())[ CD ]
Line_6 $$ OutputStream os = source.getOutputStream()-->Line_9 $$ os.write(content.getBytes())[ FD ]
Line_8 $$ String content = "foo is a bar"-->Line_9 $$ os.write(content.getBytes())[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_10 $$ os.flush()[ CD ]
Line_6 $$ OutputStream os = source.getOutputStream()-->Line_10 $$ os.flush()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_11 $$ os.close()[ CD ]
Line_6 $$ OutputStream os = source.getOutputStream()-->Line_11 $$ os.close()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_12 $$ QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "images?/*[contains(local-name(), 'photo.png')]")[ CD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_13 $$ assertNotNull(qResult)[ CD ]
Line_12 $$ QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "images?/*[contains(local-name(), 'photo.png')]")-->Line_13 $$ assertNotNull(qResult)[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_14 $$ Collection results = qResult.getChildren()[ CD ]
Line_14 $$ Collection results = qResult.getChildren()-->Line_14 $$ Collection results = qResult.getChildren()[ CD ]
Line_12 $$ QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "images?/*[contains(local-name(), 'photo.png')]")-->Line_14 $$ Collection results = qResult.getChildren()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_15 $$ assertEquals(1, results.size())[ CD ]
Line_14 $$ Collection results = qResult.getChildren()-->Line_15 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_16 $$ Iterator it = results.iterator()[ CD ]
Line_16 $$ Iterator it = results.iterator()-->Line_16 $$ Iterator it = results.iterator()[ CD ]
Line_14 $$ Collection results = qResult.getChildren()-->Line_16 $$ Iterator it = results.iterator()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_17 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()[ CD ]
Line_16 $$ Iterator it = results.iterator()-->Line_17 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_18 $$ InputStream rSrcIn = rSrc.getInputStream()[ CD ]
Line_18 $$ InputStream rSrcIn = rSrc.getInputStream()-->Line_18 $$ InputStream rSrcIn = rSrc.getInputStream()[ CD ]
Line_17 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()-->Line_18 $$ InputStream rSrcIn = rSrc.getInputStream()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_19 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_20 $$ IOUtils.copy(rSrcIn, actualOut)[ CD ]
Line_18 $$ InputStream rSrcIn = rSrc.getInputStream()-->Line_20 $$ IOUtils.copy(rSrcIn, actualOut)[ FD ]
Line_19 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()-->Line_20 $$ IOUtils.copy(rSrcIn, actualOut)[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_21 $$ rSrcIn.close()[ CD ]
Line_18 $$ InputStream rSrcIn = rSrc.getInputStream()-->Line_21 $$ rSrcIn.close()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_22 $$ assertEquals(content, actualOut.toString())[ CD ]
Line_8 $$ String content = "foo is a bar"-->Line_22 $$ assertEquals(content, actualOut.toString())[ FD ]
Line_19 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()-->Line_22 $$ assertEquals(content, actualOut.toString())[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_23 $$ actualOut.close()[ CD ]
Line_19 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()-->Line_23 $$ actualOut.close()[ FD ]
Line_2 $$ public void testQueryForBinary() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_24 $$ rSrc.delete()[ CD ]
Line_17 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()-->Line_24 $$ rSrc.delete()[ FD ]
