Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException [ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_3 $$ File targetFile = new File(targetFileNm)[ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_4 $$ File srcFile = new File(backupOrginlDrctry)[ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_5 $$ if (!srcFile.exists()) [ CD ]
Line_5 $$ if (!srcFile.exists()) -->Line_5 $$ if (!srcFile.exists()) [ CD ]
Line_5 $$ if (!srcFile.exists()) -->Line_5 $$ if (!srcFile.exists()) [ CD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_5 $$ if (!srcFile.exists()) [ FD ]
Line_5 $$ if (!srcFile.exists()) -->Line_6 $$ log.error("백업원본디렉토리[" + srcFile.getAbsolutePath() + "]가 존재하지 않습니다.")[ CD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_6 $$ log.error("백업원본디렉토리[" + srcFile.getAbsolutePath() + "]가 존재하지 않습니다.")[ FD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_7 $$ throw new JobExecutionException("백업원본디렉토리[" + srcFile.getAbsolutePath() + "]가 존재하지 않습니다.")[ FD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_9 $$ if (srcFile.isFile()) [ CD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_9 $$ if (srcFile.isFile()) [ FD ]
Line_9 $$ if (srcFile.isFile()) -->Line_9 $$ if (srcFile.isFile()) [ CD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_9 $$ if (srcFile.isFile()) [ FD ]
Line_9 $$ if (srcFile.isFile()) -->Line_10 $$ log.error("백업원본디렉토리[" + srcFile.getAbsolutePath() + "]가 파일입니다. 디렉토리명을 지정해야 합니다. ")[ CD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_10 $$ log.error("백업원본디렉토리[" + srcFile.getAbsolutePath() + "]가 파일입니다. 디렉토리명을 지정해야 합니다. ")[ FD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_11 $$ throw new JobExecutionException("백업원본디렉토리[" + srcFile.getAbsolutePath() + "]가 파일입니다. 디렉토리명을 지정해야 합니다. ")[ FD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_13 $$ boolean result = false[ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_14 $$ FileInputStream finput = null[ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_15 $$ FileOutputStream fosOutput = null[ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_16 $$ ArchiveOutputStream aosOutput = null[ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_17 $$ ArchiveEntry entry = null[ CD ]
Line_15 $$ FileOutputStream fosOutput = null-->Line_20 $$ fosOutput = new FileOutputStream(targetFile)[ FD ]
Line_20 $$ fosOutput = new FileOutputStream(targetFile)-->Line_20 $$ fosOutput = new FileOutputStream(targetFile)[ FD ]
Line_16 $$ ArchiveOutputStream aosOutput = null-->Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)[ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)[ FD ]
Line_15 $$ FileOutputStream fosOutput = null-->Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)[ FD ]
Line_20 $$ fosOutput = new FileOutputStream(targetFile)-->Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)[ FD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_22 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) [ FD ]
Line_22 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) -->Line_22 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) [ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_22 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) [ FD ]
Line_22 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) -->Line_23 $$ ((TarArchiveOutputStream) aosOutput).setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU)[ CD ]
Line_25 $$ File[] fileArr = srcFile.listFiles()-->Line_25 $$ File[] fileArr = srcFile.listFiles()[ CD ]
Line_4 $$ File srcFile = new File(backupOrginlDrctry)-->Line_25 $$ File[] fileArr = srcFile.listFiles()[ FD ]
Line_26 $$ ArrayList list = EgovFileTool.getSubFilesByAll(fileArr)-->Line_26 $$ ArrayList list = EgovFileTool.getSubFilesByAll(fileArr)[ CD ]
Line_25 $$ File[] fileArr = srcFile.listFiles()-->Line_26 $$ ArrayList list = EgovFileTool.getSubFilesByAll(fileArr)[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_27 $$ for (int i = 0; i < list.size(); i++) [ CD ]
Line_26 $$ ArrayList list = EgovFileTool.getSubFilesByAll(fileArr)-->Line_27 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_27 $$ for (int i = 0; i < list.size(); i++) [ CD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_27 $$ for (int i = 0; i < list.size(); i++) [ CD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_27 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_28 $$ File sfile = new File((String) list.get(i))[ CD ]
Line_26 $$ ArrayList list = EgovFileTool.getSubFilesByAll(fileArr)-->Line_28 $$ File sfile = new File((String) list.get(i))[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_28 $$ File sfile = new File((String) list.get(i))[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_29 $$ finput = new FileInputStream(sfile)[ CD ]
Line_29 $$ finput = new FileInputStream(sfile)-->Line_29 $$ finput = new FileInputStream(sfile)[ FD ]
Line_14 $$ FileInputStream finput = null-->Line_29 $$ finput = new FileInputStream(sfile)[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) [ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) [ FD ]
Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) -->Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) [ CD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) [ FD ]
Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) -->Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))[ CD ]
Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))-->Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))[ FD ]
Line_17 $$ ArchiveEntry entry = null-->Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))[ FD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))[ FD ]
Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) -->Line_32 $$ ((TarArchiveEntry) entry).setSize(sfile.length())[ CD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_32 $$ ((TarArchiveEntry) entry).setSize(sfile.length())[ FD ]
Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) -->Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())[ CD ]
Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))-->Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())[ FD ]
Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())-->Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())[ FD ]
Line_17 $$ ArchiveEntry entry = null-->Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())[ FD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())[ FD ]
Line_30 $$ if (ArchiveStreamFactory.TAR.equals(archiveFormat)) -->Line_35 $$ ((ZipArchiveEntry) entry).setSize(sfile.length())[ CD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_35 $$ ((ZipArchiveEntry) entry).setSize(sfile.length())[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_37 $$ aosOutput.putArchiveEntry(entry)[ CD ]
Line_16 $$ ArchiveOutputStream aosOutput = null-->Line_37 $$ aosOutput.putArchiveEntry(entry)[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_37 $$ aosOutput.putArchiveEntry(entry)[ FD ]
Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))-->Line_37 $$ aosOutput.putArchiveEntry(entry)[ FD ]
Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())-->Line_37 $$ aosOutput.putArchiveEntry(entry)[ FD ]
Line_17 $$ ArchiveEntry entry = null-->Line_37 $$ aosOutput.putArchiveEntry(entry)[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_38 $$ IOUtils.copy(finput, aosOutput)[ CD ]
Line_29 $$ finput = new FileInputStream(sfile)-->Line_38 $$ IOUtils.copy(finput, aosOutput)[ FD ]
Line_14 $$ FileInputStream finput = null-->Line_38 $$ IOUtils.copy(finput, aosOutput)[ FD ]
Line_16 $$ ArchiveOutputStream aosOutput = null-->Line_38 $$ IOUtils.copy(finput, aosOutput)[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_38 $$ IOUtils.copy(finput, aosOutput)[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_39 $$ aosOutput.closeArchiveEntry()[ CD ]
Line_16 $$ ArchiveOutputStream aosOutput = null-->Line_39 $$ aosOutput.closeArchiveEntry()[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_39 $$ aosOutput.closeArchiveEntry()[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_40 $$ finput.close()[ CD ]
Line_29 $$ finput = new FileInputStream(sfile)-->Line_40 $$ finput.close()[ FD ]
Line_14 $$ FileInputStream finput = null-->Line_40 $$ finput.close()[ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_41 $$ result = true[ CD ]
Line_41 $$ result = true-->Line_41 $$ result = true[ FD ]
Line_13 $$ boolean result = false-->Line_41 $$ result = true[ FD ]
Line_16 $$ ArchiveOutputStream aosOutput = null-->Line_43 $$ aosOutput.close()[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_43 $$ aosOutput.close()[ FD ]
Line_41 $$ result = true-->Line_47 $$ result = false[ FD ]
Line_13 $$ boolean result = false-->Line_47 $$ result = false[ FD ]
Line_47 $$ result = false-->Line_47 $$ result = false[ FD ]
Line_29 $$ finput = new FileInputStream(sfile)-->Line_51 $$ if (finput != null)[ FD ]
Line_14 $$ FileInputStream finput = null-->Line_51 $$ if (finput != null)[ FD ]
Line_51 $$ if (finput != null)-->Line_51 $$ finput.close()[ CD ]
Line_29 $$ finput = new FileInputStream(sfile)-->Line_51 $$ finput.close()[ FD ]
Line_14 $$ FileInputStream finput = null-->Line_51 $$ finput.close()[ FD ]
Line_16 $$ ArchiveOutputStream aosOutput = null-->Line_56 $$ if (aosOutput != null)[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_56 $$ if (aosOutput != null)[ FD ]
Line_56 $$ if (aosOutput != null)-->Line_56 $$ aosOutput.close()[ CD ]
Line_16 $$ ArchiveOutputStream aosOutput = null-->Line_56 $$ aosOutput.close()[ FD ]
Line_21 $$ aosOutput = new ArchiveStreamFactory().createArchiveOutputStream(archiveFormat, fosOutput)-->Line_56 $$ aosOutput.close()[ FD ]
Line_15 $$ FileOutputStream fosOutput = null-->Line_61 $$ if (fosOutput != null)[ FD ]
Line_20 $$ fosOutput = new FileOutputStream(targetFile)-->Line_61 $$ if (fosOutput != null)[ FD ]
Line_61 $$ if (fosOutput != null)-->Line_61 $$ fosOutput.close()[ CD ]
Line_15 $$ FileOutputStream fosOutput = null-->Line_61 $$ fosOutput.close()[ FD ]
Line_20 $$ fosOutput = new FileOutputStream(targetFile)-->Line_61 $$ fosOutput.close()[ FD ]
Line_41 $$ result = true-->Line_66 $$ if (result == false)[ FD ]
Line_13 $$ boolean result = false-->Line_66 $$ if (result == false)[ FD ]
Line_47 $$ result = false-->Line_66 $$ if (result == false)[ FD ]
Line_66 $$ if (result == false)-->Line_66 $$ targetFile.delete()[ CD ]
Line_3 $$ File targetFile = new File(targetFileNm)-->Line_66 $$ targetFile.delete()[ FD ]
Line_2 $$ public boolean excuteBackup(String backupOrginlDrctry, String targetFileNm, String archiveFormat) throws JobExecutionException -->Line_71 $$ return result[ CD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_27 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_27 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_27 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_27 $$ for (int i = 0; i < list.size(); i++) -->Line_28 $$ File sfile = new File((String) list.get(i))[ FD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))[ FD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_32 $$ ((TarArchiveEntry) entry).setSize(sfile.length())[ FD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())[ FD ]
Line_28 $$ File sfile = new File((String) list.get(i))-->Line_35 $$ ((ZipArchiveEntry) entry).setSize(sfile.length())[ FD ]
Line_31 $$ entry = new TarArchiveEntry(sfile, new String(sfile.getAbsolutePath().getBytes(Charset.defaultCharset().name()), "8859_1"))-->Line_37 $$ aosOutput.putArchiveEntry(entry)[ FD ]
Line_34 $$ entry = new ZipArchiveEntry(sfile.getAbsolutePath())-->Line_37 $$ aosOutput.putArchiveEntry(entry)[ FD ]
Line_29 $$ finput = new FileInputStream(sfile)-->Line_38 $$ IOUtils.copy(finput, aosOutput)[ FD ]
Line_29 $$ finput = new FileInputStream(sfile)-->Line_40 $$ finput.close()[ FD ]
