Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException [ CD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_3 $$ if (systemId.endsWith(".xml")) [ CD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_3 $$ if (systemId.endsWith(".xml")) [ FD ]
Line_3 $$ if (systemId.endsWith(".xml")) -->Line_3 $$ if (systemId.endsWith(".xml")) [ CD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_3 $$ if (systemId.endsWith(".xml")) [ FD ]
Line_3 $$ if (systemId.endsWith(".xml")) -->Line_4 $$ return null[ CD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_6 $$ InputSource inputSource = null[ CD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_7 $$ final URL url = IOUtils.getResource(new File("system/dtd"), PATTERN_DIRECTORY_PART.matcher(systemId).replaceAll(""))[ CD ]
Line_7 $$ final URL url = IOUtils.getResource(new File("system/dtd"), PATTERN_DIRECTORY_PART.matcher(systemId).replaceAll(""))-->Line_7 $$ final URL url = IOUtils.getResource(new File("system/dtd"), PATTERN_DIRECTORY_PART.matcher(systemId).replaceAll(""))[ CD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_7 $$ final URL url = IOUtils.getResource(new File("system/dtd"), PATTERN_DIRECTORY_PART.matcher(systemId).replaceAll(""))[ FD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_8 $$ final InputStream inputStream = url.openStream()[ CD ]
Line_8 $$ final InputStream inputStream = url.openStream()-->Line_8 $$ final InputStream inputStream = url.openStream()[ CD ]
Line_7 $$ final URL url = IOUtils.getResource(new File("system/dtd"), PATTERN_DIRECTORY_PART.matcher(systemId).replaceAll(""))-->Line_8 $$ final InputStream inputStream = url.openStream()[ FD ]
Line_6 $$ InputSource inputSource = null-->Line_12 $$ inputSource = new InputSource(bufferedInputStream)[ FD ]
Line_12 $$ inputSource = new InputSource(bufferedInputStream)-->Line_12 $$ inputSource = new InputSource(bufferedInputStream)[ FD ]
Line_6 $$ InputSource inputSource = null-->Line_14 $$ if (inputSource == null) [ FD ]
Line_12 $$ inputSource = new InputSource(bufferedInputStream)-->Line_14 $$ if (inputSource == null) [ FD ]
Line_14 $$ if (inputSource == null) -->Line_15 $$ bufferedInputStream.close()[ CD ]
Line_10 $$ final BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream)-->Line_15 $$ bufferedInputStream.close()[ FD ]
Line_6 $$ InputSource inputSource = null-->Line_19 $$ if (inputSource == null) [ FD ]
Line_12 $$ inputSource = new InputSource(bufferedInputStream)-->Line_19 $$ if (inputSource == null) [ FD ]
Line_19 $$ if (inputSource == null) -->Line_20 $$ inputStream.close()[ CD ]
Line_8 $$ final InputStream inputStream = url.openStream()-->Line_20 $$ inputStream.close()[ FD ]
Line_2 $$ public InputSource resolveEntity(final String publicId, final String systemId) throws IOException -->Line_23 $$ return inputSource[ CD ]
