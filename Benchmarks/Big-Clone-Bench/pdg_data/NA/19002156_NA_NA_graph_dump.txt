Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException [ CD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_3 $$ File home = new File(System.getProperty("user.home"))[ CD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_4 $$ File jar_file = File.createTempFile("nuages-diagnostic.", ".jar", home)[ CD ]
Line_4 $$ File jar_file = File.createTempFile("nuages-diagnostic.", ".jar", home)-->Line_4 $$ File jar_file = File.createTempFile("nuages-diagnostic.", ".jar", home)[ CD ]
Line_3 $$ File home = new File(System.getProperty("user.home"))-->Line_4 $$ File jar_file = File.createTempFile("nuages-diagnostic.", ".jar", home)[ FD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_5 $$ FileOutputStream fos = new FileOutputStream(jar_file)[ CD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_6 $$ JarOutputStream jos = new JarOutputStream(fos)[ CD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_7 $$ ZipEntry ze = new ZipEntry("Exception")[ CD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_8 $$ jos.putNextEntry(ze)[ CD ]
Line_6 $$ JarOutputStream jos = new JarOutputStream(fos)-->Line_8 $$ jos.putNextEntry(ze)[ FD ]
Line_7 $$ ZipEntry ze = new ZipEntry("Exception")-->Line_8 $$ jos.putNextEntry(ze)[ FD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_9 $$ PrintStream ps = new PrintStream(jos)[ CD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_10 $$ throwable.printStackTrace(ps)[ CD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_10 $$ throwable.printStackTrace(ps)[ FD ]
Line_9 $$ PrintStream ps = new PrintStream(jos)-->Line_10 $$ throwable.printStackTrace(ps)[ FD ]
Line_11 $$ for (File file : files) if ((file != null) && file.exists()) -->Line_11 $$ if ((file != null) && file.exists()) [ FD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_12 $$ ze = new ZipEntry(file.getName())[ CD ]
Line_7 $$ ZipEntry ze = new ZipEntry("Exception")-->Line_12 $$ ze = new ZipEntry(file.getName())[ FD ]
Line_12 $$ ze = new ZipEntry(file.getName())-->Line_12 $$ ze = new ZipEntry(file.getName())[ FD ]
Line_11 $$ for (File file : files) if ((file != null) && file.exists()) -->Line_12 $$ ze = new ZipEntry(file.getName())[ FD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_13 $$ jos.putNextEntry(ze)[ CD ]
Line_6 $$ JarOutputStream jos = new JarOutputStream(fos)-->Line_13 $$ jos.putNextEntry(ze)[ FD ]
Line_7 $$ ZipEntry ze = new ZipEntry("Exception")-->Line_13 $$ jos.putNextEntry(ze)[ FD ]
Line_12 $$ ze = new ZipEntry(file.getName())-->Line_13 $$ jos.putNextEntry(ze)[ FD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_14 $$ byte[] buffer = new byte[65536][ CD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_15 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_16 $$ int len[ CD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)[ CD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_11 $$ if ((file != null) && file.exists()) [ CD ]
Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)-->Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)[ FD ]
Line_16 $$ int len-->Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)[ FD ]
Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)-->Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)[ CD ]
Line_15 $$ FileInputStream fis = new FileInputStream(file)-->Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)[ FD ]
Line_14 $$ byte[] buffer = new byte[65536]-->Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)[ FD ]
Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)-->Line_17 $$ jos.write(buffer, 0, len)[ CD ]
Line_6 $$ JarOutputStream jos = new JarOutputStream(fos)-->Line_17 $$ jos.write(buffer, 0, len)[ FD ]
Line_14 $$ byte[] buffer = new byte[65536]-->Line_17 $$ jos.write(buffer, 0, len)[ FD ]
Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)-->Line_17 $$ jos.write(buffer, 0, len)[ FD ]
Line_16 $$ int len-->Line_17 $$ jos.write(buffer, 0, len)[ FD ]
Line_11 $$ if ((file != null) && file.exists()) -->Line_18 $$ fis.close()[ CD ]
Line_15 $$ FileInputStream fis = new FileInputStream(file)-->Line_18 $$ fis.close()[ FD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_20 $$ jos.close()[ CD ]
Line_6 $$ JarOutputStream jos = new JarOutputStream(fos)-->Line_20 $$ jos.close()[ FD ]
Line_2 $$ private String jarDiagnostics(Throwable throwable, File[] files) throws IOException -->Line_21 $$ return jar_file.getPath()[ CD ]
Line_21 $$ return jar_file.getPath()-->Line_21 $$ return jar_file.getPath()[ CD ]
Line_4 $$ File jar_file = File.createTempFile("nuages-diagnostic.", ".jar", home)-->Line_21 $$ return jar_file.getPath()[ FD ]
Line_17 $$ while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len)-->Line_17 $$ jos.write(buffer, 0, len)[ FD ]
