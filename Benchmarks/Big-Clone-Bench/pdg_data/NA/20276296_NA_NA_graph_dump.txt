Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void enumeratePathArchive(final String archive) throws IOException [ CD ]
Line_2 $$ private void enumeratePathArchive(final String archive) throws IOException -->Line_3 $$ final boolean trace1 = m_trace1[ CD ]
Line_2 $$ private void enumeratePathArchive(final String archive) throws IOException -->Line_4 $$ final File fullArchive = new File(m_currentPathDir, archive)[ CD ]
Line_2 $$ private void enumeratePathArchive(final String archive) throws IOException -->Line_5 $$ JarInputStream in = null[ CD ]
Line_5 $$ JarInputStream in = null-->Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))[ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))[ FD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_9 $$ Manifest manifest = in.getManifest()[ CD ]
Line_5 $$ JarInputStream in = null-->Line_9 $$ Manifest manifest = in.getManifest()[ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_9 $$ Manifest manifest = in.getManifest()[ FD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_10 $$ if (manifest == null)[ FD ]
Line_10 $$ if (manifest == null)-->Line_10 $$ manifest = readManifestViaJarFile(fullArchive)[ CD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_10 $$ manifest = readManifestViaJarFile(fullArchive)[ FD ]
Line_10 $$ manifest = readManifestViaJarFile(fullArchive)-->Line_10 $$ manifest = readManifestViaJarFile(fullArchive)[ FD ]
Line_10 $$ manifest = readManifestViaJarFile(fullArchive)-->Line_10 $$ manifest = readManifestViaJarFile(fullArchive)[ CD ]
Line_4 $$ final File fullArchive = new File(m_currentPathDir, archive)-->Line_10 $$ manifest = readManifestViaJarFile(fullArchive)[ FD ]
Line_8 $$ final IPathHandler handler = m_handler-->Line_11 $$ handler.handleArchiveStart(m_currentPathDir, new File(archive), manifest)[ FD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_11 $$ handler.handleArchiveStart(m_currentPathDir, new File(archive), manifest)[ FD ]
Line_10 $$ manifest = readManifestViaJarFile(fullArchive)-->Line_11 $$ handler.handleArchiveStart(m_currentPathDir, new File(archive), manifest)[ FD ]
Line_5 $$ JarInputStream in = null-->Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) [ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) [ FD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) [ CD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_13 $$ if (trace1)[ CD ]
Line_13 $$ if (trace1)-->Line_13 $$ m_log.trace1("enumeratePathArchive", "processing archive entry [" + entry.getName() + "] ...")[ CD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_13 $$ m_log.trace1("enumeratePathArchive", "processing archive entry [" + entry.getName() + "] ...")[ FD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_14 $$ handler.handleArchiveEntry(in, entry)[ CD ]
Line_8 $$ final IPathHandler handler = m_handler-->Line_14 $$ handler.handleArchiveEntry(in, entry)[ FD ]
Line_5 $$ JarInputStream in = null-->Line_14 $$ handler.handleArchiveEntry(in, entry)[ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_14 $$ handler.handleArchiveEntry(in, entry)[ FD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_14 $$ handler.handleArchiveEntry(in, entry)[ FD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_15 $$ in.closeEntry()[ CD ]
Line_5 $$ JarInputStream in = null-->Line_15 $$ in.closeEntry()[ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_15 $$ in.closeEntry()[ FD ]
Line_17 $$ if (m_processManifest) -->Line_18 $$ if (manifest == null)[ CD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_18 $$ if (manifest == null)[ FD ]
Line_10 $$ manifest = readManifestViaJarFile(fullArchive)-->Line_18 $$ if (manifest == null)[ FD ]
Line_18 $$ if (manifest == null)-->Line_18 $$ manifest = in.getManifest()[ CD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_18 $$ manifest = in.getManifest()[ FD ]
Line_10 $$ manifest = readManifestViaJarFile(fullArchive)-->Line_18 $$ manifest = in.getManifest()[ FD ]
Line_18 $$ manifest = in.getManifest()-->Line_18 $$ manifest = in.getManifest()[ FD ]
Line_18 $$ manifest = in.getManifest()-->Line_18 $$ manifest = in.getManifest()[ CD ]
Line_5 $$ JarInputStream in = null-->Line_18 $$ manifest = in.getManifest()[ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_18 $$ manifest = in.getManifest()[ FD ]
Line_17 $$ if (m_processManifest) -->Line_19 $$ if (manifest != null) [ CD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_19 $$ if (manifest != null) [ FD ]
Line_10 $$ manifest = readManifestViaJarFile(fullArchive)-->Line_19 $$ if (manifest != null) [ FD ]
Line_18 $$ manifest = in.getManifest()-->Line_19 $$ if (manifest != null) [ FD ]
Line_19 $$ if (manifest != null) -->Line_20 $$ final Attributes attributes = manifest.getMainAttributes()[ CD ]
Line_20 $$ final Attributes attributes = manifest.getMainAttributes()-->Line_20 $$ final Attributes attributes = manifest.getMainAttributes()[ CD ]
Line_9 $$ Manifest manifest = in.getManifest()-->Line_20 $$ final Attributes attributes = manifest.getMainAttributes()[ FD ]
Line_10 $$ manifest = readManifestViaJarFile(fullArchive)-->Line_20 $$ final Attributes attributes = manifest.getMainAttributes()[ FD ]
Line_18 $$ manifest = in.getManifest()-->Line_20 $$ final Attributes attributes = manifest.getMainAttributes()[ FD ]
Line_19 $$ if (manifest != null) -->Line_21 $$ if (attributes != null) [ CD ]
Line_20 $$ final Attributes attributes = manifest.getMainAttributes()-->Line_21 $$ if (attributes != null) [ FD ]
Line_21 $$ if (attributes != null) -->Line_22 $$ final String jarClassPath = attributes.getValue(Attributes.Name.CLASS_PATH)[ CD ]
Line_22 $$ final String jarClassPath = attributes.getValue(Attributes.Name.CLASS_PATH)-->Line_22 $$ final String jarClassPath = attributes.getValue(Attributes.Name.CLASS_PATH)[ CD ]
Line_20 $$ final Attributes attributes = manifest.getMainAttributes()-->Line_22 $$ final String jarClassPath = attributes.getValue(Attributes.Name.CLASS_PATH)[ FD ]
Line_21 $$ if (attributes != null) -->Line_23 $$ if (jarClassPath != null) [ CD ]
Line_22 $$ final String jarClassPath = attributes.getValue(Attributes.Name.CLASS_PATH)-->Line_23 $$ if (jarClassPath != null) [ FD ]
Line_23 $$ if (jarClassPath != null) -->Line_24 $$ final StringTokenizer tokenizer = new StringTokenizer(jarClassPath)[ CD ]
Line_23 $$ if (jarClassPath != null) -->Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) [ CD ]
Line_23 $$ if (jarClassPath != null) -->Line_23 $$ if (jarClassPath != null) [ CD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) [ CD ]
Line_24 $$ final StringTokenizer tokenizer = new StringTokenizer(jarClassPath)-->Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) [ FD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) [ CD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_26 $$ final String relPath = tokenizer.nextToken()[ CD ]
Line_26 $$ final String relPath = tokenizer.nextToken()-->Line_26 $$ final String relPath = tokenizer.nextToken()[ CD ]
Line_24 $$ final StringTokenizer tokenizer = new StringTokenizer(jarClassPath)-->Line_26 $$ final String relPath = tokenizer.nextToken()[ FD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_27 $$ final File archiveParent = fullArchive.getParentFile()[ CD ]
Line_27 $$ final File archiveParent = fullArchive.getParentFile()-->Line_27 $$ final File archiveParent = fullArchive.getParentFile()[ CD ]
Line_4 $$ final File fullArchive = new File(m_currentPathDir, archive)-->Line_27 $$ final File archiveParent = fullArchive.getParentFile()[ FD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_28 $$ final File path = archiveParent != null ? new File(archiveParent, relPath) : new File(relPath)[ CD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()[ CD ]
Line_28 $$ final File path = archiveParent != null ? new File(archiveParent, relPath) : new File(relPath)-->Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()[ FD ]
Line_28 $$ final File path = archiveParent != null ? new File(archiveParent, relPath) : new File(relPath)-->Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()[ FD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_30 $$ if (m_pathSet.add(fullPath)) [ CD ]
Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()-->Line_30 $$ if (m_pathSet.add(fullPath)) [ FD ]
Line_30 $$ if (m_pathSet.add(fullPath)) -->Line_30 $$ if (m_pathSet.add(fullPath)) [ CD ]
Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()-->Line_30 $$ if (m_pathSet.add(fullPath)) [ FD ]
Line_30 $$ if (m_pathSet.add(fullPath)) -->Line_31 $$ if (m_verbose)[ CD ]
Line_31 $$ if (m_verbose)-->Line_31 $$ m_log.verbose("  added manifest Class-Path entry [" + path + "]")[ CD ]
Line_30 $$ if (m_pathSet.add(fullPath)) -->Line_32 $$ m_path.add(m_pathIndex + (p++), path)[ CD ]
Line_28 $$ final File path = archiveParent != null ? new File(archiveParent, relPath) : new File(relPath)-->Line_32 $$ m_path.add(m_pathIndex + (p++), path)[ FD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_32 $$ m_path.add(m_pathIndex + (p++), path)[ FD ]
Line_5 $$ JarInputStream in = null-->Line_42 $$ if (in != null)[ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_42 $$ if (in != null)[ FD ]
Line_5 $$ JarInputStream in = null-->Line_43 $$ in.close()[ FD ]
Line_7 $$ in = new JarInputStream(new BufferedInputStream(new FileInputStream(fullArchive), 32 * 1024))-->Line_43 $$ in.close()[ FD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_13 $$ m_log.trace1("enumeratePathArchive", "processing archive entry [" + entry.getName() + "] ...")[ FD ]
Line_12 $$ for (ZipEntry entry; (entry = in.getNextEntry()) != null; ) -->Line_14 $$ handler.handleArchiveEntry(in, entry)[ FD ]
Line_28 $$ final File path = archiveParent != null ? new File(archiveParent, relPath) : new File(relPath)-->Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()[ FD ]
Line_28 $$ final File path = archiveParent != null ? new File(archiveParent, relPath) : new File(relPath)-->Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()[ FD ]
Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()-->Line_30 $$ if (m_pathSet.add(fullPath)) [ FD ]
Line_29 $$ final String fullPath = m_canonical ? Files.canonicalizePathname(path.getPath()) : path.getPath()-->Line_30 $$ if (m_pathSet.add(fullPath)) [ FD ]
Line_28 $$ final File path = archiveParent != null ? new File(archiveParent, relPath) : new File(relPath)-->Line_32 $$ m_path.add(m_pathIndex + (p++), path)[ FD ]
Line_25 $$ for (int p = 1; tokenizer.hasMoreTokens(); ) -->Line_32 $$ m_path.add(m_pathIndex + (p++), path)[ FD ]
