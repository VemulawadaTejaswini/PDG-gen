Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_4 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")[ CD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) [ CD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) [ CD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) [ CD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_7 $$ cm.Add(picm.GetName(i))[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_7 $$ cm.Add(picm.GetName(i))[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_7 $$ cm.Add(picm.GetName(i))[ FD ]
Line_9 $$ String[] folder = picm.GetFolderList()-->Line_9 $$ String[] folder = picm.GetFolderList()[ CD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ CD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ CD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_11 $$ cm.AddFolder(folder[i])[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_11 $$ cm.AddFolder(folder[i])[ FD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_13 $$ sink.Request(cm, picm.GetRequestStart(), picm.GetRequestDuration(), picm.GetRequestReference())[ FD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_14 $$ cm = sink.Fetch(timeout)[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_14 $$ cm = sink.Fetch(timeout)[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_14 $$ cm = sink.Fetch(timeout)[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_15 $$ if (cm.GetIfFetchTimedOut()) [ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_15 $$ if (cm.GetIfFetchTimedOut()) [ FD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_15 $$ if (cm.GetIfFetchTimedOut()) [ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_15 $$ if (cm.GetIfFetchTimedOut()) [ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_15 $$ if (cm.GetIfFetchTimedOut()) [ FD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_16 $$ System.err.println("Signature Data Fetch Timed Out!")[ CD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_17 $$ picm.Clear()[ CD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_19 $$ md.reset()[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_19 $$ md.reset()[ FD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_20 $$ folder = cm.GetFolderList()[ CD ]
Line_9 $$ String[] folder = picm.GetFolderList()-->Line_20 $$ folder = cm.GetFolderList()[ FD ]
Line_20 $$ folder = cm.GetFolderList()-->Line_20 $$ folder = cm.GetFolderList()[ FD ]
Line_20 $$ folder = cm.GetFolderList()-->Line_20 $$ folder = cm.GetFolderList()[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_20 $$ folder = cm.GetFolderList()[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_20 $$ folder = cm.GetFolderList()[ FD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ CD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_15 $$ if (cm.GetIfFetchTimedOut()) [ CD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ CD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ CD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_21 $$ picm.AddFolder(folder[i])[ CD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_22 $$ int sigIdx = -1[ CD ]
Line_22 $$ int sigIdx = -1-->Line_22 $$ int sigIdx = -1[ CD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ CD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_15 $$ if (cm.GetIfFetchTimedOut()) [ CD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ CD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ CD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_24 $$ String chan = cm.GetName(i)[ CD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_24 $$ String chan = cm.GetName(i)[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_24 $$ String chan = cm.GetName(i)[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_24 $$ String chan = cm.GetName(i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_24 $$ String chan = cm.GetName(i)[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_24 $$ String chan = cm.GetName(i)[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_24 $$ String chan = cm.GetName(i)[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_24 $$ String chan = cm.GetName(i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_25 $$ if (chan.endsWith("/_signature")) [ CD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_25 $$ if (chan.endsWith("/_signature")) [ FD ]
Line_25 $$ if (chan.endsWith("/_signature")) -->Line_25 $$ if (chan.endsWith("/_signature")) [ CD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_25 $$ if (chan.endsWith("/_signature")) [ FD ]
Line_25 $$ if (chan.endsWith("/_signature")) -->Line_26 $$ sigIdx = i[ CD ]
Line_26 $$ sigIdx = i-->Line_26 $$ sigIdx = i[ FD ]
Line_22 $$ int sigIdx = -1-->Line_26 $$ sigIdx = i[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_26 $$ sigIdx = i[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_26 $$ sigIdx = i[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_26 $$ sigIdx = i[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_26 $$ sigIdx = i[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_29 $$ int idx = picm.GetIndex(chan)[ CD ]
Line_29 $$ int idx = picm.GetIndex(chan)-->Line_29 $$ int idx = picm.GetIndex(chan)[ CD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_29 $$ int idx = picm.GetIndex(chan)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_30 $$ if (idx == -1)[ CD ]
Line_29 $$ int idx = picm.GetIndex(chan)-->Line_30 $$ if (idx == -1)[ FD ]
Line_30 $$ if (idx == -1)-->Line_30 $$ idx = picm.Add(chan)[ CD ]
Line_29 $$ int idx = picm.GetIndex(chan)-->Line_30 $$ idx = picm.Add(chan)[ FD ]
Line_30 $$ idx = picm.Add(chan)-->Line_30 $$ idx = picm.Add(chan)[ FD ]
Line_30 $$ idx = picm.Add(chan)-->Line_30 $$ idx = picm.Add(chan)[ CD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_30 $$ idx = picm.Add(chan)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_31 $$ picm.PutTimeRef(cm, i)[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_31 $$ picm.PutTimeRef(cm, i)[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_31 $$ picm.PutTimeRef(cm, i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_31 $$ picm.PutTimeRef(cm, i)[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_31 $$ picm.PutTimeRef(cm, i)[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_31 $$ picm.PutTimeRef(cm, i)[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_31 $$ picm.PutTimeRef(cm, i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_32 $$ picm.PutDataRef(idx, cm, i)[ CD ]
Line_29 $$ int idx = picm.GetIndex(chan)-->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_30 $$ idx = picm.Add(chan)-->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_33 $$ md.update(cm.GetData(i))[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
Line_15 $$ if (cm.GetIfFetchTimedOut()) -->Line_36 $$ if (cm.NumberOfChannels() > 0) [ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_36 $$ if (cm.NumberOfChannels() > 0) [ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_36 $$ if (cm.NumberOfChannels() > 0) [ FD ]
Line_36 $$ if (cm.NumberOfChannels() > 0) -->Line_37 $$ byte[] amd = md.digest(signature.getBytes())[ CD ]
Line_37 $$ byte[] amd = md.digest(signature.getBytes())-->Line_37 $$ byte[] amd = md.digest(signature.getBytes())[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_37 $$ byte[] amd = md.digest(signature.getBytes())[ FD ]
Line_36 $$ if (cm.NumberOfChannels() > 0) -->Line_38 $$ if (sigIdx >= 0) [ CD ]
Line_26 $$ sigIdx = i-->Line_38 $$ if (sigIdx >= 0) [ FD ]
Line_22 $$ int sigIdx = -1-->Line_38 $$ if (sigIdx >= 0) [ FD ]
Line_38 $$ if (sigIdx >= 0) -->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ CD ]
Line_37 $$ byte[] amd = md.digest(signature.getBytes())-->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ FD ]
Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) -->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ CD ]
Line_37 $$ byte[] amd = md.digest(signature.getBytes())-->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ FD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ FD ]
Line_26 $$ sigIdx = i-->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ FD ]
Line_22 $$ int sigIdx = -1-->Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) [ FD ]
Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) -->Line_40 $$ System.err.println(pluginName + ": signature matched for: " + cm.GetName(0))[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_40 $$ System.err.println(pluginName + ": signature matched for: " + cm.GetName(0))[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_40 $$ System.err.println(pluginName + ": signature matched for: " + cm.GetName(0))[ FD ]
Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) -->Line_42 $$ System.err.println(pluginName + ": failed signature test, sending null response")[ CD ]
Line_39 $$ if (MessageDigest.isEqual(amd, cm.GetDataAsByteArray(sigIdx)[0])) -->Line_43 $$ picm.Clear()[ CD ]
Line_38 $$ if (sigIdx >= 0) -->Line_46 $$ System.err.println(pluginName + ": _signature attached for: " + cm.GetName(0))[ CD ]
Line_5 $$ ChannelMap cm = new ChannelMap()-->Line_46 $$ System.err.println(pluginName + ": _signature attached for: " + cm.GetName(0))[ FD ]
Line_14 $$ cm = sink.Fetch(timeout)-->Line_46 $$ System.err.println(pluginName + ": _signature attached for: " + cm.GetName(0))[ FD ]
Line_38 $$ if (sigIdx >= 0) -->Line_47 $$ int idx = picm.Add("_signature")[ CD ]
Line_47 $$ int idx = picm.Add("_signature")-->Line_47 $$ int idx = picm.Add("_signature")[ CD ]
Line_38 $$ if (sigIdx >= 0) -->Line_48 $$ picm.PutTime(0., 0.)[ CD ]
Line_38 $$ if (sigIdx >= 0) -->Line_49 $$ picm.PutDataAsByteArray(idx, amd)[ CD ]
Line_29 $$ int idx = picm.GetIndex(chan)-->Line_49 $$ picm.PutDataAsByteArray(idx, amd)[ FD ]
Line_30 $$ idx = picm.Add(chan)-->Line_49 $$ picm.PutDataAsByteArray(idx, amd)[ FD ]
Line_47 $$ int idx = picm.Add("_signature")-->Line_49 $$ picm.PutDataAsByteArray(idx, amd)[ FD ]
Line_37 $$ byte[] amd = md.digest(signature.getBytes())-->Line_49 $$ picm.PutDataAsByteArray(idx, amd)[ FD ]
Line_2 $$ public void run() -->Line_57 $$ if (threadStack.size() < 4)[ CD ]
Line_57 $$ if (threadStack.size() < 4)-->Line_57 $$ threadStack.push(this)[ CD ]
Line_57 $$ if (threadStack.size() < 4)-->Line_57 $$ sink.CloseRBNBConnection()[ CD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < picm.NumberOfChannels(); i++) -->Line_7 $$ cm.Add(picm.GetName(i))[ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < folder.length; i++) -->Line_10 $$ for (int i = 0; i < folder.length; i++) [ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])-->Line_21 $$ for (int i = 0; i < folder.length; i++) picm.AddFolder(folder[i])[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) [ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_24 $$ String chan = cm.GetName(i)[ FD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_25 $$ if (chan.endsWith("/_signature")) [ FD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_25 $$ if (chan.endsWith("/_signature")) [ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_26 $$ sigIdx = i[ FD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_29 $$ int idx = picm.GetIndex(chan)[ FD ]
Line_29 $$ int idx = picm.GetIndex(chan)-->Line_30 $$ if (idx == -1)[ FD ]
Line_30 $$ idx = picm.Add(chan)-->Line_30 $$ if (idx == -1)[ FD ]
Line_24 $$ String chan = cm.GetName(i)-->Line_30 $$ idx = picm.Add(chan)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_31 $$ picm.PutTimeRef(cm, i)[ FD ]
Line_29 $$ int idx = picm.GetIndex(chan)-->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_30 $$ idx = picm.Add(chan)-->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_32 $$ picm.PutDataRef(idx, cm, i)[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_33 $$ md.update(cm.GetData(i))[ FD ]
Line_23 $$ for (int i = 0; i < cm.NumberOfChannels(); i++) -->Line_34 $$ md.update((new Double(cm.GetTimeStart(i))).toString().getBytes())[ FD ]
