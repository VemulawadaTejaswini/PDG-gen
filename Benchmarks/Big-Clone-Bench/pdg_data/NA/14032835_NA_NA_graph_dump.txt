Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private byte[] szyfrujKlucz(byte[] kluczSesyjny) [ CD ]
Line_2 $$ private byte[] szyfrujKlucz(byte[] kluczSesyjny) -->Line_3 $$ byte[] zaszyfrowanyKlucz = null[ CD ]
Line_2 $$ private byte[] szyfrujKlucz(byte[] kluczSesyjny) -->Line_4 $$ byte[] klucz = null[ CD ]
Line_6 $$ MessageDigest skrot = MessageDigest.getInstance("SHA-1")-->Line_6 $$ MessageDigest skrot = MessageDigest.getInstance("SHA-1")[ CD ]
Line_6 $$ MessageDigest skrot = MessageDigest.getInstance("SHA-1")-->Line_7 $$ skrot.update(haslo.getBytes())[ FD ]
Line_8 $$ byte[] skrotHasla = skrot.digest()-->Line_8 $$ byte[] skrotHasla = skrot.digest()[ CD ]
Line_6 $$ MessageDigest skrot = MessageDigest.getInstance("SHA-1")-->Line_8 $$ byte[] skrotHasla = skrot.digest()[ FD ]
Line_9 $$ Object kluczDoKlucza = MARS_Algorithm.makeKey(skrotHasla)-->Line_9 $$ Object kluczDoKlucza = MARS_Algorithm.makeKey(skrotHasla)[ CD ]
Line_8 $$ byte[] skrotHasla = skrot.digest()-->Line_9 $$ Object kluczDoKlucza = MARS_Algorithm.makeKey(skrotHasla)[ FD ]
Line_10 $$ int resztaKlucza = this.dlugoscKlucza % ROZMIAR_BLOKU-->Line_11 $$ if (resztaKlucza == 0) [ FD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_12 $$ klucz = kluczSesyjny[ CD ]
Line_4 $$ byte[] klucz = null-->Line_12 $$ klucz = kluczSesyjny[ FD ]
Line_12 $$ klucz = kluczSesyjny-->Line_12 $$ klucz = kluczSesyjny[ FD ]
Line_2 $$ private byte[] szyfrujKlucz(byte[] kluczSesyjny) -->Line_12 $$ klucz = kluczSesyjny[ FD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_13 $$ zaszyfrowanyKlucz = new byte[this.dlugoscKlucza][ CD ]
Line_3 $$ byte[] zaszyfrowanyKlucz = null-->Line_13 $$ zaszyfrowanyKlucz = new byte[this.dlugoscKlucza][ FD ]
Line_13 $$ zaszyfrowanyKlucz = new byte[this.dlugoscKlucza]-->Line_13 $$ zaszyfrowanyKlucz = new byte[this.dlugoscKlucza][ FD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_15 $$ int liczbaBlokow = this.dlugoscKlucza / ROZMIAR_BLOKU + 1[ CD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_16 $$ int nowyRozmiar = liczbaBlokow * ROZMIAR_BLOKU[ CD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_17 $$ zaszyfrowanyKlucz = new byte[nowyRozmiar][ CD ]
Line_3 $$ byte[] zaszyfrowanyKlucz = null-->Line_17 $$ zaszyfrowanyKlucz = new byte[nowyRozmiar][ FD ]
Line_13 $$ zaszyfrowanyKlucz = new byte[this.dlugoscKlucza]-->Line_17 $$ zaszyfrowanyKlucz = new byte[nowyRozmiar][ FD ]
Line_17 $$ zaszyfrowanyKlucz = new byte[nowyRozmiar]-->Line_17 $$ zaszyfrowanyKlucz = new byte[nowyRozmiar][ FD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_18 $$ klucz = new byte[nowyRozmiar][ CD ]
Line_4 $$ byte[] klucz = null-->Line_18 $$ klucz = new byte[nowyRozmiar][ FD ]
Line_12 $$ klucz = kluczSesyjny-->Line_18 $$ klucz = new byte[nowyRozmiar][ FD ]
Line_18 $$ klucz = new byte[nowyRozmiar]-->Line_18 $$ klucz = new byte[nowyRozmiar][ FD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_19 $$ byte roznica = (byte) (ROZMIAR_BLOKU - resztaKlucza)[ CD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_20 $$ System.arraycopy(kluczSesyjny, 0, klucz, 0, kluczSesyjny.length)[ CD ]
Line_2 $$ private byte[] szyfrujKlucz(byte[] kluczSesyjny) -->Line_20 $$ System.arraycopy(kluczSesyjny, 0, klucz, 0, kluczSesyjny.length)[ FD ]
Line_4 $$ byte[] klucz = null-->Line_20 $$ System.arraycopy(kluczSesyjny, 0, klucz, 0, kluczSesyjny.length)[ FD ]
Line_12 $$ klucz = kluczSesyjny-->Line_20 $$ System.arraycopy(kluczSesyjny, 0, klucz, 0, kluczSesyjny.length)[ FD ]
Line_18 $$ klucz = new byte[nowyRozmiar]-->Line_20 $$ System.arraycopy(kluczSesyjny, 0, klucz, 0, kluczSesyjny.length)[ FD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ CD ]
Line_11 $$ if (resztaKlucza == 0) -->Line_11 $$ if (resztaKlucza == 0) [ CD ]
Line_16 $$ int nowyRozmiar = liczbaBlokow * ROZMIAR_BLOKU-->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ FD ]
Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica-->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ CD ]
Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica-->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ CD ]
Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica-->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ FD ]
Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica-->Line_21 $$ klucz[i] = (byte) roznica[ CD ]
Line_25 $$ int offset = 0-->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_15 $$ int liczbaBlokow = this.dlugoscKlucza / ROZMIAR_BLOKU + 1-->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ CD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_25 $$ int offset = 0-->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ CD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_25 $$ int offset = 0-->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ CD ]
Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)-->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ FD ]
Line_23 $$ byte[] szyfrogram = null-->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ FD ]
Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)-->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ CD ]
Line_4 $$ byte[] klucz = null-->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ FD ]
Line_12 $$ klucz = kluczSesyjny-->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ FD ]
Line_18 $$ klucz = new byte[nowyRozmiar]-->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ FD ]
Line_9 $$ Object kluczDoKlucza = MARS_Algorithm.makeKey(skrotHasla)-->Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)[ FD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_28 $$ System.arraycopy(szyfrogram, 0, zaszyfrowanyKlucz, offset * ROZMIAR_BLOKU, szyfrogram.length)[ CD ]
Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)-->Line_28 $$ System.arraycopy(szyfrogram, 0, zaszyfrowanyKlucz, offset * ROZMIAR_BLOKU, szyfrogram.length)[ FD ]
Line_23 $$ byte[] szyfrogram = null-->Line_28 $$ System.arraycopy(szyfrogram, 0, zaszyfrowanyKlucz, offset * ROZMIAR_BLOKU, szyfrogram.length)[ FD ]
Line_3 $$ byte[] zaszyfrowanyKlucz = null-->Line_28 $$ System.arraycopy(szyfrogram, 0, zaszyfrowanyKlucz, offset * ROZMIAR_BLOKU, szyfrogram.length)[ FD ]
Line_13 $$ zaszyfrowanyKlucz = new byte[this.dlugoscKlucza]-->Line_28 $$ System.arraycopy(szyfrogram, 0, zaszyfrowanyKlucz, offset * ROZMIAR_BLOKU, szyfrogram.length)[ FD ]
Line_17 $$ zaszyfrowanyKlucz = new byte[nowyRozmiar]-->Line_28 $$ System.arraycopy(szyfrogram, 0, zaszyfrowanyKlucz, offset * ROZMIAR_BLOKU, szyfrogram.length)[ FD ]
Line_2 $$ private byte[] szyfrujKlucz(byte[] kluczSesyjny) -->Line_35 $$ return zaszyfrowanyKlucz[ CD ]
Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica-->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ FD ]
Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica-->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ FD ]
Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica-->Line_21 $$ for (int i = kluczSesyjny.length; i < nowyRozmiar; i++) klucz[i] = (byte) roznica[ FD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) -->Line_26 $$ for (offset = 0; offset < liczbaBlokow; offset++) [ FD ]
Line_27 $$ szyfrogram = MARS_Algorithm.blockEncrypt(klucz, offset * ROZMIAR_BLOKU, kluczDoKlucza)-->Line_28 $$ System.arraycopy(szyfrogram, 0, zaszyfrowanyKlucz, offset * ROZMIAR_BLOKU, szyfrogram.length)[ FD ]
