Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) [ CD ]
Line_2 $$ private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) -->Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) [ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) [ CD ]
Line_2 $$ private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) -->Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) [ FD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_4 $$ File selectedFile = documentFileChooser.getSelectedFile()[ CD ]
Line_4 $$ File selectedFile = documentFileChooser.getSelectedFile()-->Line_4 $$ File selectedFile = documentFileChooser.getSelectedFile()[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_5 $$ File collectionCopyFile[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_6 $$ String newDocumentName = selectedFile.getName()[ CD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_6 $$ String newDocumentName = selectedFile.getName()[ CD ]
Line_4 $$ File selectedFile = documentFileChooser.getSelectedFile()-->Line_6 $$ String newDocumentName = selectedFile.getName()[ FD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_7 $$ Document newDocument = new Document(newDocumentName)[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_8 $$ if (activeCollection.containsDocument(newDocument)) [ CD ]
Line_7 $$ Document newDocument = new Document(newDocumentName)-->Line_8 $$ if (activeCollection.containsDocument(newDocument)) [ FD ]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) -->Line_8 $$ if (activeCollection.containsDocument(newDocument)) [ CD ]
Line_7 $$ Document newDocument = new Document(newDocumentName)-->Line_8 $$ if (activeCollection.containsDocument(newDocument)) [ FD ]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) -->Line_9 $$ int matchingFilenameDistinguisher = 1[ CD ]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) -->Line_10 $$ StringBuilder distinguisherReplacer = new StringBuilder()[ CD ]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) -->Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")[ CD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")[ CD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")[ FD ]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) -->Line_12 $$ newDocument.setDocumentName(newDocumentName)[ CD ]
Line_7 $$ Document newDocument = new Document(newDocumentName)-->Line_12 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_12 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_12 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) -->Line_13 $$ while (activeCollection.containsDocument(newDocument)) [ CD ]
Line_8 $$ if (activeCollection.containsDocument(newDocument)) -->Line_8 $$ if (activeCollection.containsDocument(newDocument)) [ CD ]
Line_13 $$ while (activeCollection.containsDocument(newDocument)) -->Line_13 $$ while (activeCollection.containsDocument(newDocument)) [ CD ]
Line_7 $$ Document newDocument = new Document(newDocumentName)-->Line_13 $$ while (activeCollection.containsDocument(newDocument)) [ FD ]
Line_13 $$ while (activeCollection.containsDocument(newDocument)) -->Line_14 $$ matchingFilenameDistinguisher++[ CD ]
Line_9 $$ int matchingFilenameDistinguisher = 1-->Line_14 $$ matchingFilenameDistinguisher++[ FD ]
Line_13 $$ while (activeCollection.containsDocument(newDocument)) -->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ CD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ CD ]
Line_10 $$ StringBuilder distinguisherReplacer = new StringBuilder()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_13 $$ while (activeCollection.containsDocument(newDocument)) -->Line_16 $$ newDocument.setDocumentName(newDocumentName)[ CD ]
Line_7 $$ Document newDocument = new Document(newDocumentName)-->Line_16 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_16 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_6 $$ String newDocumentName = selectedFile.getName()-->Line_16 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_11 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")")-->Line_16 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_19 $$ Scanner tokenizer = null[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_20 $$ FileChannel fileSource = null[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_21 $$ FileChannel collectionDestination = null[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_23 $$ Index collectionIndex = activeCollection.getIndex()[ CD ]
Line_23 $$ Index collectionIndex = activeCollection.getIndex()-->Line_23 $$ Index collectionIndex = activeCollection.getIndex()[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_24 $$ int documentTermMaxFrequency = 0[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_25 $$ int currentTermFrequency[ CD ]
Line_19 $$ Scanner tokenizer = null-->Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))[ FD ]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))-->Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))[ FD ]
Line_19 $$ Scanner tokenizer = null-->Line_28 $$ tokenizer.useDelimiter(Pattern.compile("\\p[ FD ]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))-->Line_28 $$ tokenizer.useDelimiter(Pattern.compile("\\p[ FD ]
Line_30 $$ while (tokenizer.hasNext()) -->Line_30 $$ while (tokenizer.hasNext()) [ CD ]
Line_19 $$ Scanner tokenizer = null-->Line_30 $$ while (tokenizer.hasNext()) [ FD ]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))-->Line_30 $$ while (tokenizer.hasNext()) [ FD ]
Line_30 $$ while (tokenizer.hasNext()) -->Line_31 $$ nextToken = tokenizer.next().toLowerCase()[ CD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_31 $$ nextToken = tokenizer.next().toLowerCase()[ FD ]
Line_29 $$ String nextToken-->Line_31 $$ nextToken = tokenizer.next().toLowerCase()[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_31 $$ nextToken = tokenizer.next().toLowerCase()[ CD ]
Line_19 $$ Scanner tokenizer = null-->Line_31 $$ nextToken = tokenizer.next().toLowerCase()[ FD ]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))-->Line_31 $$ nextToken = tokenizer.next().toLowerCase()[ FD ]
Line_30 $$ while (tokenizer.hasNext()) -->Line_32 $$ if (!nextToken.isEmpty())[ CD ]
Line_32 $$ if (!nextToken.isEmpty())-->Line_32 $$ if (!nextToken.isEmpty())[ CD ]
Line_32 $$ if (!nextToken.isEmpty())-->Line_32 $$ if (!nextToken.isEmpty())[ CD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ if (!nextToken.isEmpty())[ FD ]
Line_29 $$ String nextToken-->Line_32 $$ if (!nextToken.isEmpty())[ FD ]
Line_32 $$ if (!nextToken.isEmpty())-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ CD ]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_29 $$ String nextToken-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_32 $$ if (termHashMap.containsKey(nextToken))-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ CD ]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_29 $$ String nextToken-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_32 $$ if (termHashMap.containsKey(nextToken))-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ CD ]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_29 $$ String nextToken-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_29 $$ String nextToken-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_32 $$ if (termHashMap.containsKey(nextToken))-->Line_32 $$ termHashMap.put(nextToken, 1)[ CD ]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()-->Line_32 $$ termHashMap.put(nextToken, 1)[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ termHashMap.put(nextToken, 1)[ FD ]
Line_29 $$ String nextToken-->Line_32 $$ termHashMap.put(nextToken, 1)[ FD ]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()-->Line_35 $$ for (String term : termHashMap.keySet()) [ FD ]
Line_34 $$ Term newTerm-->Line_36 $$ newTerm = new Term(term)[ FD ]
Line_36 $$ newTerm = new Term(term)-->Line_36 $$ newTerm = new Term(term)[ FD ]
Line_37 $$ if (!collectionIndex.termExists(newTerm))-->Line_37 $$ if (!collectionIndex.termExists(newTerm))[ CD ]
Line_37 $$ if (!collectionIndex.termExists(newTerm))-->Line_37 $$ if (!collectionIndex.termExists(newTerm))[ CD ]
Line_23 $$ Index collectionIndex = activeCollection.getIndex()-->Line_37 $$ if (!collectionIndex.termExists(newTerm))[ FD ]
Line_34 $$ Term newTerm-->Line_37 $$ if (!collectionIndex.termExists(newTerm))[ FD ]
Line_36 $$ newTerm = new Term(term)-->Line_37 $$ if (!collectionIndex.termExists(newTerm))[ FD ]
Line_37 $$ if (!collectionIndex.termExists(newTerm))-->Line_37 $$ collectionIndex.addTerm(newTerm)[ CD ]
Line_23 $$ Index collectionIndex = activeCollection.getIndex()-->Line_37 $$ collectionIndex.addTerm(newTerm)[ FD ]
Line_34 $$ Term newTerm-->Line_37 $$ collectionIndex.addTerm(newTerm)[ FD ]
Line_36 $$ newTerm = new Term(term)-->Line_37 $$ collectionIndex.addTerm(newTerm)[ FD ]
Line_25 $$ int currentTermFrequency-->Line_38 $$ currentTermFrequency = termHashMap.get(term)[ FD ]
Line_38 $$ currentTermFrequency = termHashMap.get(term)-->Line_38 $$ currentTermFrequency = termHashMap.get(term)[ FD ]
Line_38 $$ currentTermFrequency = termHashMap.get(term)-->Line_38 $$ currentTermFrequency = termHashMap.get(term)[ CD ]
Line_22 $$ HashMap<String, Integer> termHashMap = new HashMap<String, Integer>()-->Line_38 $$ currentTermFrequency = termHashMap.get(term)[ FD ]
Line_35 $$ for (String term : termHashMap.keySet()) -->Line_38 $$ currentTermFrequency = termHashMap.get(term)[ FD ]
Line_25 $$ int currentTermFrequency-->Line_39 $$ if (currentTermFrequency > documentTermMaxFrequency)[ FD ]
Line_38 $$ currentTermFrequency = termHashMap.get(term)-->Line_39 $$ if (currentTermFrequency > documentTermMaxFrequency)[ FD ]
Line_24 $$ int documentTermMaxFrequency = 0-->Line_39 $$ if (currentTermFrequency > documentTermMaxFrequency)[ FD ]
Line_39 $$ if (currentTermFrequency > documentTermMaxFrequency)-->Line_39 $$ documentTermMaxFrequency = currentTermFrequency[ CD ]
Line_24 $$ int documentTermMaxFrequency = 0-->Line_39 $$ documentTermMaxFrequency = currentTermFrequency[ FD ]
Line_39 $$ documentTermMaxFrequency = currentTermFrequency-->Line_39 $$ documentTermMaxFrequency = currentTermFrequency[ FD ]
Line_25 $$ int currentTermFrequency-->Line_39 $$ documentTermMaxFrequency = currentTermFrequency[ FD ]
Line_38 $$ currentTermFrequency = termHashMap.get(term)-->Line_39 $$ documentTermMaxFrequency = currentTermFrequency[ FD ]
Line_23 $$ Index collectionIndex = activeCollection.getIndex()-->Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency)[ FD ]
Line_34 $$ Term newTerm-->Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency)[ FD ]
Line_36 $$ newTerm = new Term(term)-->Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency)[ FD ]
Line_7 $$ Document newDocument = new Document(newDocumentName)-->Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency)[ FD ]
Line_25 $$ int currentTermFrequency-->Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency)[ FD ]
Line_38 $$ currentTermFrequency = termHashMap.get(term)-->Line_40 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency)[ FD ]
Line_7 $$ Document newDocument = new Document(newDocumentName)-->Line_42 $$ activeCollection.addDocument(newDocument)[ FD ]
Line_43 $$ String userHome = System.getProperty("user.home")-->Line_43 $$ String userHome = System.getProperty("user.home")[ CD ]
Line_44 $$ String fileSeparator = System.getProperty("file.separator")-->Line_44 $$ String fileSeparator = System.getProperty("file.separator")[ CD ]
Line_5 $$ File collectionCopyFile-->Line_45 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName)[ FD ]
Line_45 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName)-->Line_45 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName)[ FD ]
Line_5 $$ File collectionCopyFile-->Line_46 $$ collectionCopyFile.createNewFile()[ FD ]
Line_45 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName)-->Line_46 $$ collectionCopyFile.createNewFile()[ FD ]
Line_20 $$ FileChannel fileSource = null-->Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()[ FD ]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()-->Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()[ FD ]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()-->Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()[ CD ]
Line_21 $$ FileChannel collectionDestination = null-->Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()[ FD ]
Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()-->Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()[ FD ]
Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()-->Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()[ CD ]
Line_21 $$ FileChannel collectionDestination = null-->Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size())[ FD ]
Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()-->Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size())[ FD ]
Line_20 $$ FileChannel fileSource = null-->Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size())[ FD ]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()-->Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size())[ FD ]
Line_20 $$ FileChannel fileSource = null-->Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size())[ FD ]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()-->Line_49 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size())[ FD ]
Line_19 $$ Scanner tokenizer = null-->Line_58 $$ if (tokenizer != null)[ FD ]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))-->Line_58 $$ if (tokenizer != null)[ FD ]
Line_58 $$ if (tokenizer != null)-->Line_58 $$ tokenizer.close()[ CD ]
Line_19 $$ Scanner tokenizer = null-->Line_58 $$ tokenizer.close()[ FD ]
Line_27 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile)))-->Line_58 $$ tokenizer.close()[ FD ]
Line_20 $$ FileChannel fileSource = null-->Line_59 $$ if (fileSource != null)[ FD ]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()-->Line_59 $$ if (fileSource != null)[ FD ]
Line_59 $$ if (fileSource != null)-->Line_59 $$ fileSource.close()[ CD ]
Line_20 $$ FileChannel fileSource = null-->Line_59 $$ fileSource.close()[ FD ]
Line_47 $$ fileSource = new FileInputStream(selectedFile).getChannel()-->Line_59 $$ fileSource.close()[ FD ]
Line_21 $$ FileChannel collectionDestination = null-->Line_60 $$ if (collectionDestination != null)[ FD ]
Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()-->Line_60 $$ if (collectionDestination != null)[ FD ]
Line_60 $$ if (collectionDestination != null)-->Line_60 $$ collectionDestination.close()[ CD ]
Line_21 $$ FileChannel collectionDestination = null-->Line_60 $$ collectionDestination.close()[ FD ]
Line_48 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel()-->Line_60 $$ collectionDestination.close()[ FD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_65 $$ processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING))[ CD ]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) -->Line_66 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION))[ CD ]
Line_66 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION))-->Line_66 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION))[ CD ]
Line_2 $$ private void documentFileChooserActionPerformed(java.awt.event.ActionEvent evt) -->Line_66 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION))[ FD ]
Line_66 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION))-->Line_66 $$ processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING))[ CD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()[ FD ]
Line_15 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString()-->Line_16 $$ newDocument.setDocumentName(newDocumentName)[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ if (!nextToken.isEmpty())[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ if (termHashMap.containsKey(nextToken))[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1)[ FD ]
Line_31 $$ nextToken = tokenizer.next().toLowerCase()-->Line_32 $$ termHashMap.put(nextToken, 1)[ FD ]
