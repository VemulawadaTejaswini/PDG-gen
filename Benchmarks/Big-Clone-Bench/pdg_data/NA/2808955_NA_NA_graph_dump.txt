Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public EntrySet read(EntrySet set) throws ReadFailedException [ CD ]
Line_2 $$ public EntrySet read(EntrySet set) throws ReadFailedException -->Line_3 $$ if (!SourceCache.contains(url)) [ CD ]
Line_3 $$ if (!SourceCache.contains(url)) -->Line_3 $$ if (!SourceCache.contains(url)) [ CD ]
Line_3 $$ if (!SourceCache.contains(url)) -->Line_3 $$ if (!SourceCache.contains(url)) [ CD ]
Line_3 $$ if (!SourceCache.contains(url)) -->Line_4 $$ SSL.certify(url)[ CD ]
Line_12 $$ OutputStream out = SourceCache.startCaching(url)-->Line_12 $$ OutputStream out = SourceCache.startCaching(url)[ CD ]
Line_13 $$ InputStream is = url.openStream()-->Line_13 $$ InputStream is = url.openStream()[ CD ]
Line_15 $$ while (true) -->Line_16 $$ int amountRead = is.read(buffer)[ CD ]
Line_16 $$ int amountRead = is.read(buffer)-->Line_16 $$ int amountRead = is.read(buffer)[ CD ]
Line_13 $$ InputStream is = url.openStream()-->Line_16 $$ int amountRead = is.read(buffer)[ FD ]
Line_14 $$ byte[] buffer = new byte[100000]-->Line_16 $$ int amountRead = is.read(buffer)[ FD ]
Line_15 $$ while (true) -->Line_17 $$ if (amountRead == -1) [ CD ]
Line_16 $$ int amountRead = is.read(buffer)-->Line_17 $$ if (amountRead == -1) [ FD ]
Line_15 $$ while (true) -->Line_20 $$ forParser.write(buffer, 0, amountRead)[ CD ]
Line_8 $$ final PipedOutputStream forParser = new PipedOutputStream(in)-->Line_20 $$ forParser.write(buffer, 0, amountRead)[ FD ]
Line_14 $$ byte[] buffer = new byte[100000]-->Line_20 $$ forParser.write(buffer, 0, amountRead)[ FD ]
Line_16 $$ int amountRead = is.read(buffer)-->Line_20 $$ forParser.write(buffer, 0, amountRead)[ FD ]
Line_15 $$ while (true) -->Line_21 $$ out.write(buffer, 0, amountRead)[ CD ]
Line_12 $$ OutputStream out = SourceCache.startCaching(url)-->Line_21 $$ out.write(buffer, 0, amountRead)[ FD ]
Line_14 $$ byte[] buffer = new byte[100000]-->Line_21 $$ out.write(buffer, 0, amountRead)[ FD ]
Line_16 $$ int amountRead = is.read(buffer)-->Line_21 $$ out.write(buffer, 0, amountRead)[ FD ]
Line_8 $$ final PipedOutputStream forParser = new PipedOutputStream(in)-->Line_23 $$ forParser.close()[ FD ]
Line_12 $$ OutputStream out = SourceCache.startCaching(url)-->Line_24 $$ out.close()[ FD ]
Line_7 $$ final PipedInputStream in = new PipedInputStream()-->Line_31 $$ super.setIos(in)[ FD ]
Line_3 $$ if (!SourceCache.contains(url)) -->Line_35 $$ return super.read(set)[ CD ]
Line_35 $$ return super.read(set)-->Line_35 $$ return super.read(set)[ CD ]
Line_2 $$ public EntrySet read(EntrySet set) throws ReadFailedException -->Line_35 $$ return super.read(set)[ FD ]
Line_38 $$ return SourceCache.get(url).read(set)-->Line_38 $$ return SourceCache.get(url).read(set)[ CD ]
Line_2 $$ public EntrySet read(EntrySet set) throws ReadFailedException -->Line_38 $$ return SourceCache.get(url).read(set)[ FD ]
Line_16 $$ int amountRead = is.read(buffer)-->Line_17 $$ if (amountRead == -1) [ FD ]
Line_16 $$ int amountRead = is.read(buffer)-->Line_20 $$ forParser.write(buffer, 0, amountRead)[ FD ]
Line_16 $$ int amountRead = is.read(buffer)-->Line_21 $$ out.write(buffer, 0, amountRead)[ FD ]
