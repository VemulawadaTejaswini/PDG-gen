Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException [ CD ]
Line_2 $$ private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException -->Line_3 $$ final int lastSlashInName = filename.lastIndexOf("/")[ CD ]
Line_3 $$ final int lastSlashInName = filename.lastIndexOf("/")-->Line_3 $$ final int lastSlashInName = filename.lastIndexOf("/")[ CD ]
Line_2 $$ private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException -->Line_4 $$ final String newFileName = filename.substring(lastSlashInName)[ CD ]
Line_4 $$ final String newFileName = filename.substring(lastSlashInName)-->Line_4 $$ final String newFileName = filename.substring(lastSlashInName)[ CD ]
Line_3 $$ final int lastSlashInName = filename.lastIndexOf("/")-->Line_4 $$ final String newFileName = filename.substring(lastSlashInName)[ FD ]
Line_2 $$ private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException -->Line_5 $$ File packageFile = new File((new StringBuilder()).append(archivePath).append(newFileName).toString())[ CD ]
Line_4 $$ final String newFileName = filename.substring(lastSlashInName)-->Line_5 $$ File packageFile = new File((new StringBuilder()).append(archivePath).append(newFileName).toString())[ FD ]
Line_2 $$ private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException -->Line_5 $$ File packageFile = new File((new StringBuilder()).append(archivePath).append(newFileName).toString())[ FD ]
Line_2 $$ private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException -->Line_6 $$ if (null != packageFile)[ CD ]
Line_5 $$ File packageFile = new File((new StringBuilder()).append(archivePath).append(newFileName).toString())-->Line_6 $$ if (null != packageFile)[ FD ]
Line_6 $$ if (null != packageFile)-->Line_6 $$ return new FileInputStream(packageFile)[ CD ]
Line_2 $$ private FileInputStream getPackageStream(String archivePath) throws IOException, PackageManagerException -->Line_7 $$ if (null != packageURL) [ CD ]
Line_7 $$ if (null != packageURL) -->Line_8 $$ final InputStream urlStream = new ConnectToServer(null).getInputStream(packageURL)[ CD ]
Line_8 $$ final InputStream urlStream = new ConnectToServer(null).getInputStream(packageURL)-->Line_8 $$ final InputStream urlStream = new ConnectToServer(null).getInputStream(packageURL)[ CD ]
Line_7 $$ if (null != packageURL) -->Line_9 $$ packageFile = new File((new StringBuilder()).append(getName()).append(".deb").toString())[ CD ]
Line_5 $$ File packageFile = new File((new StringBuilder()).append(archivePath).append(newFileName).toString())-->Line_9 $$ packageFile = new File((new StringBuilder()).append(getName()).append(".deb").toString())[ FD ]
Line_9 $$ packageFile = new File((new StringBuilder()).append(getName()).append(".deb").toString())-->Line_9 $$ packageFile = new File((new StringBuilder()).append(getName()).append(".deb").toString())[ FD ]
Line_7 $$ if (null != packageURL) -->Line_10 $$ final OutputStream fileStream = new FileOutputStream(packageFile)[ CD ]
Line_7 $$ if (null != packageURL) -->Line_11 $$ final byte buffer[] = new byte[10240][ CD ]
Line_7 $$ if (null != packageURL) -->Line_12 $$ for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read)[ CD ]
Line_7 $$ if (null != packageURL) -->Line_7 $$ if (null != packageURL) [ CD ]
Line_8 $$ final InputStream urlStream = new ConnectToServer(null).getInputStream(packageURL)-->Line_12 $$ for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read)[ FD ]
Line_12 $$ for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read)-->Line_12 $$ for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read)[ CD ]
Line_12 $$ for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read)-->Line_12 $$ fileStream.write(buffer, 0, read)[ CD ]
Line_10 $$ final OutputStream fileStream = new FileOutputStream(packageFile)-->Line_12 $$ fileStream.write(buffer, 0, read)[ FD ]
Line_12 $$ for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read)-->Line_12 $$ fileStream.write(buffer, 0, read)[ FD ]
Line_7 $$ if (null != packageURL) -->Line_13 $$ urlStream.close()[ CD ]
Line_8 $$ final InputStream urlStream = new ConnectToServer(null).getInputStream(packageURL)-->Line_13 $$ urlStream.close()[ FD ]
Line_7 $$ if (null != packageURL) -->Line_14 $$ fileStream.close()[ CD ]
Line_10 $$ final OutputStream fileStream = new FileOutputStream(packageFile)-->Line_14 $$ fileStream.close()[ FD ]
Line_7 $$ if (null != packageURL) -->Line_15 $$ return new FileInputStream(packageFile)[ CD ]
Line_7 $$ if (null != packageURL) -->Line_17 $$ final String errorMessage = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("package.getPackageStream.packageURLIsNull", "No entry found for package.getPackageStream.packageURLIsNull")[ CD ]
Line_17 $$ final String errorMessage = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("package.getPackageStream.packageURLIsNull", "No entry found for package.getPackageStream.packageURLIsNull")-->Line_17 $$ final String errorMessage = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("package.getPackageStream.packageURLIsNull", "No entry found for package.getPackageStream.packageURLIsNull")[ CD ]
Line_7 $$ if (null != packageURL) -->Line_18 $$ if (pm != null) [ CD ]
Line_18 $$ if (pm != null) -->Line_19 $$ pm.addWarning(errorMessage)[ CD ]
Line_17 $$ final String errorMessage = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("package.getPackageStream.packageURLIsNull", "No entry found for package.getPackageStream.packageURLIsNull")-->Line_19 $$ pm.addWarning(errorMessage)[ FD ]
Line_18 $$ if (pm != null) -->Line_20 $$ logger.error(errorMessage)[ CD ]
Line_17 $$ final String errorMessage = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("package.getPackageStream.packageURLIsNull", "No entry found for package.getPackageStream.packageURLIsNull")-->Line_20 $$ logger.error(errorMessage)[ FD ]
Line_18 $$ if (pm != null) -->Line_21 $$ logger.error(errorMessage)[ CD ]
Line_17 $$ final String errorMessage = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("package.getPackageStream.packageURLIsNull", "No entry found for package.getPackageStream.packageURLIsNull")-->Line_21 $$ logger.error(errorMessage)[ FD ]
Line_12 $$ for (int read = 0; (read = urlStream.read(buffer)) > 0; ) fileStream.write(buffer, 0, read)-->Line_12 $$ fileStream.write(buffer, 0, read)[ FD ]
