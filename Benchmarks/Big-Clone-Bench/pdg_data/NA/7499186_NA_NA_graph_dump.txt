Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void bootKernel(String conf) [ CD ]
Line_4 $$ AssetManager am = getResources().getAssets()-->Line_4 $$ AssetManager am = getResources().getAssets()[ CD ]
Line_5 $$ InputStream is = am.open(conf + ".conf")-->Line_5 $$ InputStream is = am.open(conf + ".conf")[ CD ]
Line_4 $$ AssetManager am = getResources().getAssets()-->Line_5 $$ InputStream is = am.open(conf + ".conf")[ FD ]
Line_6 $$ Properties props = new Properties()-->Line_7 $$ props.load(is)[ FD ]
Line_5 $$ InputStream is = am.open(conf + ".conf")-->Line_7 $$ props.load(is)[ FD ]
Line_5 $$ InputStream is = am.open(conf + ".conf")-->Line_8 $$ is.close()[ FD ]
Line_10 $$ String[] sdcardfiles = am.list("sdcard")-->Line_10 $$ String[] sdcardfiles = am.list("sdcard")[ CD ]
Line_4 $$ AssetManager am = getResources().getAssets()-->Line_10 $$ String[] sdcardfiles = am.list("sdcard")[ FD ]
Line_13 $$ AssetFileDescriptor afd = am.openFd("sdcard/" + file)-->Line_13 $$ AssetFileDescriptor afd = am.openFd("sdcard/" + file)[ CD ]
Line_4 $$ AssetManager am = getResources().getAssets()-->Line_13 $$ AssetFileDescriptor afd = am.openFd("sdcard/" + file)[ FD ]
Line_14 $$ FileInputStream fis = afd.createInputStream()-->Line_14 $$ FileInputStream fis = afd.createInputStream()[ CD ]
Line_13 $$ AssetFileDescriptor afd = am.openFd("sdcard/" + file)-->Line_14 $$ FileInputStream fis = afd.createInputStream()[ FD ]
Line_15 $$ FileChannel fic = fis.getChannel()-->Line_15 $$ FileChannel fic = fis.getChannel()[ CD ]
Line_14 $$ FileInputStream fis = afd.createInputStream()-->Line_15 $$ FileChannel fic = fis.getChannel()[ FD ]
Line_17 $$ FileChannel foc = fos.getChannel()-->Line_17 $$ FileChannel foc = fos.getChannel()[ CD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream("/sdcard/" + file)-->Line_17 $$ FileChannel foc = fos.getChannel()[ FD ]
Line_15 $$ FileChannel fic = fis.getChannel()-->Line_18 $$ fic.transferTo(0, fic.size(), foc)[ FD ]
Line_17 $$ FileChannel foc = fos.getChannel()-->Line_18 $$ fic.transferTo(0, fic.size(), foc)[ FD ]
Line_15 $$ FileChannel fic = fis.getChannel()-->Line_18 $$ fic.transferTo(0, fic.size(), foc)[ FD ]
Line_15 $$ FileChannel fic = fis.getChannel()-->Line_19 $$ fic.close()[ FD ]
Line_17 $$ FileChannel foc = fos.getChannel()-->Line_20 $$ foc.close()[ FD ]
Line_23 $$ Configuration bconf = gconf.subset("boot")-->Line_23 $$ Configuration bconf = gconf.subset("boot")[ CD ]
Line_22 $$ Configuration gconf = new JavaPropertiesConfiguration(props)-->Line_23 $$ Configuration bconf = gconf.subset("boot")[ FD ]
Line_24 $$ String kclass_name = bconf.getString("kernel")-->Line_24 $$ String kclass_name = bconf.getString("kernel")[ CD ]
Line_23 $$ Configuration bconf = gconf.subset("boot")-->Line_24 $$ String kclass_name = bconf.getString("kernel")[ FD ]
Line_26 $$ Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class)-->Line_26 $$ Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class)[ CD ]
Line_24 $$ String kclass_name = bconf.getString("kernel")-->Line_26 $$ Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class)[ FD ]
Line_27 $$ Kernel kernel = kclass.newInstance()-->Line_27 $$ Kernel kernel = kclass.newInstance()[ CD ]
Line_26 $$ Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class)-->Line_27 $$ Kernel kernel = kclass.newInstance()[ FD ]
Line_27 $$ Kernel kernel = kclass.newInstance()-->Line_30 $$ kernel.boot(bctx).get()[ FD ]
Line_29 $$ BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class)-->Line_30 $$ kernel.boot(bctx).get()[ FD ]
