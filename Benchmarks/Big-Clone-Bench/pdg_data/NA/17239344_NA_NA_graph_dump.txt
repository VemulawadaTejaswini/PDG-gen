Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void doMove(File from, File to) throws IOException [ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_3 $$ int res = showConfirmation("File will be moved in p4, are you sure to move ", from.getAbsolutePath())[ CD ]
Line_3 $$ int res = showConfirmation("File will be moved in p4, are you sure to move ", from.getAbsolutePath())-->Line_3 $$ int res = showConfirmation("File will be moved in p4, are you sure to move ", from.getAbsolutePath())[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_3 $$ int res = showConfirmation("File will be moved in p4, are you sure to move ", from.getAbsolutePath())[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_4 $$ if (res == JOptionPane.NO_OPTION) [ CD ]
Line_3 $$ int res = showConfirmation("File will be moved in p4, are you sure to move ", from.getAbsolutePath())-->Line_4 $$ if (res == JOptionPane.NO_OPTION) [ FD ]
Line_4 $$ if (res == JOptionPane.NO_OPTION) -->Line_5 $$ return[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)[ CD ]
Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)-->Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_8 $$ if (status == null) [ CD ]
Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)-->Line_8 $$ if (status == null) [ FD ]
Line_8 $$ if (status == null) -->Line_9 $$ return[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_11 $$ if (status.isLocal()) [ CD ]
Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)-->Line_11 $$ if (status.isLocal()) [ FD ]
Line_11 $$ if (status.isLocal()) -->Line_11 $$ if (status.isLocal()) [ CD ]
Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)-->Line_11 $$ if (status.isLocal()) [ FD ]
Line_11 $$ if (status.isLocal()) -->Line_12 $$ logWarning(this, from.getName() + " is not revisioned. Should not be deleted by p4nb")[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_12 $$ logWarning(this, from.getName() + " is not revisioned. Should not be deleted by p4nb")[ FD ]
Line_11 $$ if (status.isLocal()) -->Line_13 $$ return[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_15 $$ to.getParentFile().mkdirs()[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_15 $$ to.getParentFile().mkdirs()[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_16 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(from))[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_17 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(to))[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_18 $$ byte[] buffer = new byte[8192][ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_19 $$ int read = 0[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_20 $$ while ((read = in.read(buffer)) >= 0) [ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_2 $$ public void doMove(File from, File to) throws IOException [ CD ]
Line_20 $$ while ((read = in.read(buffer)) >= 0) -->Line_20 $$ while ((read = in.read(buffer)) >= 0) [ FD ]
Line_19 $$ int read = 0-->Line_20 $$ while ((read = in.read(buffer)) >= 0) [ FD ]
Line_20 $$ while ((read = in.read(buffer)) >= 0) -->Line_20 $$ while ((read = in.read(buffer)) >= 0) [ CD ]
Line_16 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(from))-->Line_20 $$ while ((read = in.read(buffer)) >= 0) [ FD ]
Line_18 $$ byte[] buffer = new byte[8192]-->Line_20 $$ while ((read = in.read(buffer)) >= 0) [ FD ]
Line_20 $$ while ((read = in.read(buffer)) >= 0) -->Line_21 $$ out.write(buffer, 0, read)[ CD ]
Line_17 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(to))-->Line_21 $$ out.write(buffer, 0, read)[ FD ]
Line_18 $$ byte[] buffer = new byte[8192]-->Line_21 $$ out.write(buffer, 0, read)[ FD ]
Line_20 $$ while ((read = in.read(buffer)) >= 0) -->Line_21 $$ out.write(buffer, 0, read)[ FD ]
Line_19 $$ int read = 0-->Line_21 $$ out.write(buffer, 0, read)[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_23 $$ in.close()[ CD ]
Line_16 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(from))-->Line_23 $$ in.close()[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_24 $$ out.flush()[ CD ]
Line_17 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(to))-->Line_24 $$ out.flush()[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_25 $$ out.close()[ CD ]
Line_17 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(to))-->Line_25 $$ out.close()[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_26 $$ if (status != Status.NONE) [ CD ]
Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)-->Line_26 $$ if (status != Status.NONE) [ FD ]
Line_26 $$ if (status != Status.NONE) -->Line_27 $$ revert(from)[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_27 $$ revert(from)[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_29 $$ if (status != Status.ADD) [ CD ]
Line_7 $$ Status status = fileStatusProvider.getFileStatusForce(from)-->Line_29 $$ if (status != Status.ADD) [ FD ]
Line_29 $$ if (status != Status.ADD) -->Line_30 $$ delete(from)[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_30 $$ delete(from)[ FD ]
Line_29 $$ if (status != Status.ADD) -->Line_32 $$ from.delete()[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_32 $$ from.delete()[ FD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_34 $$ add(to)[ CD ]
Line_2 $$ public void doMove(File from, File to) throws IOException -->Line_34 $$ add(to)[ FD ]
Line_20 $$ while ((read = in.read(buffer)) >= 0) -->Line_21 $$ out.write(buffer, 0, read)[ FD ]
