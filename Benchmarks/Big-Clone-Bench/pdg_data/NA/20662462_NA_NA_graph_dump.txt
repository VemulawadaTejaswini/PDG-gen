Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException [ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_3 $$ boolean firstIteration = true[ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()[ CD ]
Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()-->Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()[ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()[ FD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_5 $$ DownloadingItem prevItem = null[ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_6 $$ File[] previousDownloadedFiles = new File[0][ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_7 $$ while (entries.hasNext()) [ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException [ CD ]
Line_7 $$ while (entries.hasNext()) -->Line_7 $$ while (entries.hasNext()) [ CD ]
Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()-->Line_7 $$ while (entries.hasNext()) [ FD ]
Line_7 $$ while (entries.hasNext()) -->Line_8 $$ PlaylistEntry entry = entries.next()[ CD ]
Line_8 $$ PlaylistEntry entry = entries.next()-->Line_8 $$ PlaylistEntry entry = entries.next()[ CD ]
Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()-->Line_8 $$ PlaylistEntry entry = entries.next()[ FD ]
Line_7 $$ while (entries.hasNext()) -->Line_9 $$ DownloadingItem item = null[ CD ]
Line_7 $$ while (entries.hasNext()) -->Line_10 $$ LOGGER.info("Downloading from '" + entry.getTitle() + "'")[ CD ]
Line_8 $$ PlaylistEntry entry = entries.next()-->Line_10 $$ LOGGER.info("Downloading from '" + entry.getTitle() + "'")[ FD ]
Line_7 $$ while (entries.hasNext()) -->Line_11 $$ InputStream is = RESTHelper.inputStream(entry.getUrl())[ CD ]
Line_11 $$ InputStream is = RESTHelper.inputStream(entry.getUrl())-->Line_11 $$ InputStream is = RESTHelper.inputStream(entry.getUrl())[ CD ]
Line_8 $$ PlaylistEntry entry = entries.next()-->Line_11 $$ InputStream is = RESTHelper.inputStream(entry.getUrl())[ FD ]
Line_7 $$ while (entries.hasNext()) -->Line_12 $$ boolean stopped = false[ CD ]
Line_7 $$ while (entries.hasNext()) -->Line_13 $$ File nfile = null[ CD ]
Line_13 $$ File nfile = null-->Line_15 $$ nfile = createFileStream(folder, entry)[ FD ]
Line_15 $$ nfile = createFileStream(folder, entry)-->Line_15 $$ nfile = createFileStream(folder, entry)[ FD ]
Line_15 $$ nfile = createFileStream(folder, entry)-->Line_15 $$ nfile = createFileStream(folder, entry)[ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_15 $$ nfile = createFileStream(folder, entry)[ FD ]
Line_8 $$ PlaylistEntry entry = entries.next()-->Line_15 $$ nfile = createFileStream(folder, entry)[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)[ FD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)[ FD ]
Line_17 $$ if (previousDownloadedFiles.length > 0) -->Line_18 $$ item.setPreviousFiles(previousDownloadedFiles)[ CD ]
Line_9 $$ DownloadingItem item = null-->Line_18 $$ item.setPreviousFiles(previousDownloadedFiles)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_18 $$ item.setPreviousFiles(previousDownloadedFiles)[ FD ]
Line_6 $$ File[] previousDownloadedFiles = new File[0]-->Line_18 $$ item.setPreviousFiles(previousDownloadedFiles)[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_20 $$ addItem(item)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_20 $$ addItem(item)[ FD ]
Line_5 $$ DownloadingItem prevItem = null-->Line_21 $$ if (prevItem != null)[ FD ]
Line_21 $$ if (prevItem != null)-->Line_21 $$ deletePrevItem(prevItem)[ CD ]
Line_5 $$ DownloadingItem prevItem = null-->Line_21 $$ deletePrevItem(prevItem)[ FD ]
Line_22 $$ prevItem = item-->Line_22 $$ prevItem = item[ FD ]
Line_5 $$ DownloadingItem prevItem = null-->Line_22 $$ prevItem = item[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_22 $$ prevItem = item[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_22 $$ prevItem = item[ FD ]
Line_12 $$ boolean stopped = false-->Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)[ FD ]
Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)-->Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)[ FD ]
Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)-->Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)[ CD ]
Line_11 $$ InputStream is = RESTHelper.inputStream(entry.getUrl())-->Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)[ FD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)[ FD ]
Line_27 $$ if (!condition.isStopped()) -->Line_27 $$ if (!condition.isStopped()) [ CD ]
Line_27 $$ if (!condition.isStopped()) -->Line_27 $$ if (!condition.isStopped()) [ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_27 $$ if (!condition.isStopped()) [ FD ]
Line_27 $$ if (!condition.isStopped()) -->Line_28 $$ File[] nfiles = new File[previousDownloadedFiles.length + 1][ CD ]
Line_27 $$ if (!condition.isStopped()) -->Line_29 $$ System.arraycopy(previousDownloadedFiles, 0, nfiles, 0, previousDownloadedFiles.length)[ CD ]
Line_6 $$ File[] previousDownloadedFiles = new File[0]-->Line_29 $$ System.arraycopy(previousDownloadedFiles, 0, nfiles, 0, previousDownloadedFiles.length)[ FD ]
Line_28 $$ File[] nfiles = new File[previousDownloadedFiles.length + 1]-->Line_29 $$ System.arraycopy(previousDownloadedFiles, 0, nfiles, 0, previousDownloadedFiles.length)[ FD ]
Line_27 $$ if (!condition.isStopped()) -->Line_30 $$ nfiles[nfiles.length - 1] = item.getFile()[ CD ]
Line_30 $$ nfiles[nfiles.length - 1] = item.getFile()-->Line_30 $$ nfiles[nfiles.length - 1] = item.getFile()[ CD ]
Line_9 $$ DownloadingItem item = null-->Line_30 $$ nfiles[nfiles.length - 1] = item.getFile()[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_30 $$ nfiles[nfiles.length - 1] = item.getFile()[ FD ]
Line_27 $$ if (!condition.isStopped()) -->Line_31 $$ previousDownloadedFiles = nfiles[ CD ]
Line_31 $$ previousDownloadedFiles = nfiles-->Line_31 $$ previousDownloadedFiles = nfiles[ FD ]
Line_6 $$ File[] previousDownloadedFiles = new File[0]-->Line_31 $$ previousDownloadedFiles = nfiles[ FD ]
Line_28 $$ File[] nfiles = new File[previousDownloadedFiles.length + 1]-->Line_31 $$ previousDownloadedFiles = nfiles[ FD ]
Line_27 $$ if (!condition.isStopped()) -->Line_32 $$ if ((!entries.hasNext()) && (firstIteration)) [ CD ]
Line_32 $$ if ((!entries.hasNext()) && (firstIteration)) -->Line_32 $$ if ((!entries.hasNext()) && (firstIteration)) [ CD ]
Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()-->Line_32 $$ if ((!entries.hasNext()) && (firstIteration)) [ FD ]
Line_32 $$ if ((!entries.hasNext()) && (firstIteration)) -->Line_33 $$ firstIteration = false[ CD ]
Line_33 $$ firstIteration = false-->Line_33 $$ firstIteration = false[ FD ]
Line_3 $$ boolean firstIteration = true-->Line_33 $$ firstIteration = false[ FD ]
Line_32 $$ if ((!entries.hasNext()) && (firstIteration)) -->Line_34 $$ entries = playlist.getEntries().iterator()[ CD ]
Line_34 $$ entries = playlist.getEntries().iterator()-->Line_34 $$ entries = playlist.getEntries().iterator()[ FD ]
Line_4 $$ Iterator<PlaylistEntry> entries = playlist.getEntries().iterator()-->Line_34 $$ entries = playlist.getEntries().iterator()[ FD ]
Line_34 $$ entries = playlist.getEntries().iterator()-->Line_34 $$ entries = playlist.getEntries().iterator()[ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_34 $$ entries = playlist.getEntries().iterator()[ FD ]
Line_7 $$ while (entries.hasNext()) -->Line_39 $$ if (stopped) [ CD ]
Line_39 $$ if (stopped) -->Line_40 $$ item.setState(ProcessStates.STOPPED)[ CD ]
Line_9 $$ DownloadingItem item = null-->Line_40 $$ item.setState(ProcessStates.STOPPED)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_40 $$ item.setState(ProcessStates.STOPPED)[ FD ]
Line_39 $$ if (stopped) -->Line_41 $$ this.radioScheduler.fireStopDownloading(item)[ CD ]
Line_9 $$ DownloadingItem item = null-->Line_41 $$ this.radioScheduler.fireStopDownloading(item)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_41 $$ this.radioScheduler.fireStopDownloading(item)[ FD ]
Line_39 $$ if (stopped) -->Line_42 $$ return item[ CD ]
Line_2 $$ public DownloadingItem download(Playlist playlist, String title, File folder, StopDownloadCondition condition, String uuid) throws IOException, StoreStateException -->Line_45 $$ return null[ CD ]
Line_34 $$ entries = playlist.getEntries().iterator()-->Line_7 $$ while (entries.hasNext()) [ FD ]
Line_34 $$ entries = playlist.getEntries().iterator()-->Line_8 $$ PlaylistEntry entry = entries.next()[ FD ]
Line_8 $$ PlaylistEntry entry = entries.next()-->Line_10 $$ LOGGER.info("Downloading from '" + entry.getTitle() + "'")[ FD ]
Line_8 $$ PlaylistEntry entry = entries.next()-->Line_11 $$ InputStream is = RESTHelper.inputStream(entry.getUrl())[ FD ]
Line_8 $$ PlaylistEntry entry = entries.next()-->Line_15 $$ nfile = createFileStream(folder, entry)[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_18 $$ item.setPreviousFiles(previousDownloadedFiles)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_18 $$ item.setPreviousFiles(previousDownloadedFiles)[ FD ]
Line_31 $$ previousDownloadedFiles = nfiles-->Line_18 $$ item.setPreviousFiles(previousDownloadedFiles)[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_20 $$ addItem(item)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_20 $$ addItem(item)[ FD ]
Line_22 $$ prevItem = item-->Line_21 $$ if (prevItem != null)[ FD ]
Line_22 $$ prevItem = item-->Line_21 $$ deletePrevItem(prevItem)[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_22 $$ prevItem = item[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_22 $$ prevItem = item[ FD ]
Line_11 $$ InputStream is = RESTHelper.inputStream(entry.getUrl())-->Line_23 $$ stopped = IOUtils.copyStreams(is, new FileOutputStream(nfile), condition)[ FD ]
Line_31 $$ previousDownloadedFiles = nfiles-->Line_29 $$ System.arraycopy(previousDownloadedFiles, 0, nfiles, 0, previousDownloadedFiles.length)[ FD ]
Line_28 $$ File[] nfiles = new File[previousDownloadedFiles.length + 1]-->Line_29 $$ System.arraycopy(previousDownloadedFiles, 0, nfiles, 0, previousDownloadedFiles.length)[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_30 $$ nfiles[nfiles.length - 1] = item.getFile()[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_30 $$ nfiles[nfiles.length - 1] = item.getFile()[ FD ]
Line_28 $$ File[] nfiles = new File[previousDownloadedFiles.length + 1]-->Line_31 $$ previousDownloadedFiles = nfiles[ FD ]
Line_34 $$ entries = playlist.getEntries().iterator()-->Line_32 $$ if ((!entries.hasNext()) && (firstIteration)) [ FD ]
Line_9 $$ DownloadingItem item = null-->Line_40 $$ item.setState(ProcessStates.STOPPED)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_40 $$ item.setState(ProcessStates.STOPPED)[ FD ]
Line_9 $$ DownloadingItem item = null-->Line_41 $$ this.radioScheduler.fireStopDownloading(item)[ FD ]
Line_16 $$ item = new DownloadingItem(nfile, uuid.toString(), title, entry, new Date(), getPID(), condition)-->Line_41 $$ this.radioScheduler.fireStopDownloading(item)[ FD ]
