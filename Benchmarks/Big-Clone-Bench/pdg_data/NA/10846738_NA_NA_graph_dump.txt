Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) [ CD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_3 $$ final PipedOutputStream pipedOutputStream = new PipedOutputStream()[ CD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_4 $$ final List<Throwable> ungzipThreadThrowableList = new LinkedList<Throwable>()[ CD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_5 $$ Writer decoderWriter = null[ CD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_6 $$ Thread ungzipThread = null[ CD ]
Line_6 $$ Thread ungzipThread = null-->Line_9 $$ ungzipThread = new Thread(new Runnable() [ FD ]
Line_9 $$ ungzipThread = new Thread(new Runnable() -->Line_9 $$ ungzipThread = new Thread(new Runnable() [ FD ]
Line_9 $$ ungzipThread = new Thread(new Runnable() -->Line_11 $$ GZIPInputStream gzipInputStream = null[ CD ]
Line_11 $$ GZIPInputStream gzipInputStream = null-->Line_13 $$ gzipInputStream = new GZIPInputStream(pipedInputStream)[ FD ]
Line_13 $$ gzipInputStream = new GZIPInputStream(pipedInputStream)-->Line_13 $$ gzipInputStream = new GZIPInputStream(pipedInputStream)[ FD ]
Line_11 $$ GZIPInputStream gzipInputStream = null-->Line_14 $$ IOUtils.copy(gzipInputStream, outputStream)[ FD ]
Line_13 $$ gzipInputStream = new GZIPInputStream(pipedInputStream)-->Line_14 $$ IOUtils.copy(gzipInputStream, outputStream)[ FD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_14 $$ IOUtils.copy(gzipInputStream, outputStream)[ FD ]
Line_4 $$ final List<Throwable> ungzipThreadThrowableList = new LinkedList<Throwable>()-->Line_16 $$ ungzipThreadThrowableList.add(t)[ FD ]
Line_11 $$ GZIPInputStream gzipInputStream = null-->Line_18 $$ IOUtils.closeQuietly(gzipInputStream)[ FD ]
Line_13 $$ gzipInputStream = new GZIPInputStream(pipedInputStream)-->Line_18 $$ IOUtils.closeQuietly(gzipInputStream)[ FD ]
Line_8 $$ final PipedInputStream pipedInputStream = new PipedInputStream(pipedOutputStream)-->Line_19 $$ IOUtils.closeQuietly(pipedInputStream)[ FD ]
Line_3 $$ final PipedOutputStream pipedOutputStream = new PipedOutputStream()-->Line_23 $$ decoderWriter = Base64.newDecoder(pipedOutputStream)[ FD ]
Line_6 $$ Thread ungzipThread = null-->Line_24 $$ ungzipThread.start()[ FD ]
Line_9 $$ ungzipThread = new Thread(new Runnable() -->Line_24 $$ ungzipThread.start()[ FD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_25 $$ IOUtils.copy(inputStream, decoderWriter, DVK_MESSAGE_CHARSET)[ FD ]
Line_5 $$ Writer decoderWriter = null-->Line_25 $$ IOUtils.copy(inputStream, decoderWriter, DVK_MESSAGE_CHARSET)[ FD ]
Line_5 $$ Writer decoderWriter = null-->Line_26 $$ decoderWriter.flush()[ FD ]
Line_3 $$ final PipedOutputStream pipedOutputStream = new PipedOutputStream()-->Line_27 $$ pipedOutputStream.flush()[ FD ]
Line_5 $$ Writer decoderWriter = null-->Line_31 $$ IOUtils.closeQuietly(decoderWriter)[ FD ]
Line_3 $$ final PipedOutputStream pipedOutputStream = new PipedOutputStream()-->Line_32 $$ IOUtils.closeQuietly(pipedOutputStream)[ FD ]
Line_6 $$ Thread ungzipThread = null-->Line_33 $$ if (ungzipThread != null) [ FD ]
Line_9 $$ ungzipThread = new Thread(new Runnable() -->Line_33 $$ if (ungzipThread != null) [ FD ]
Line_6 $$ Thread ungzipThread = null-->Line_35 $$ ungzipThread.join()[ FD ]
Line_9 $$ ungzipThread = new Thread(new Runnable() -->Line_35 $$ ungzipThread.join()[ FD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_41 $$ if (!ungzipThreadThrowableList.isEmpty()) [ CD ]
Line_41 $$ if (!ungzipThreadThrowableList.isEmpty()) -->Line_41 $$ if (!ungzipThreadThrowableList.isEmpty()) [ CD ]
Line_41 $$ if (!ungzipThreadThrowableList.isEmpty()) -->Line_41 $$ if (!ungzipThreadThrowableList.isEmpty()) [ CD ]
Line_4 $$ final List<Throwable> ungzipThreadThrowableList = new LinkedList<Throwable>()-->Line_41 $$ if (!ungzipThreadThrowableList.isEmpty()) [ FD ]
Line_4 $$ final List<Throwable> ungzipThreadThrowableList = new LinkedList<Throwable>()-->Line_42 $$ throw new RuntimeException("ungzip failed", ungzipThreadThrowableList.get(0))[ FD ]
Line_2 $$ private static <OS extends OutputStream> OS getUnzipAndDecodeOutputStream(InputStream inputStream, final OS outputStream) -->Line_44 $$ return outputStream[ CD ]
