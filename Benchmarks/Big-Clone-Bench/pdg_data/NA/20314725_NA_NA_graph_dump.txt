Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) [ CD ]
Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) -->Line_3 $$ ArrayList<URL> libraryUrls = new ArrayList<URL>()[ CD ]
Line_3 $$ ArrayList<URL> libraryUrls = new ArrayList<URL>()-->Line_6 $$ libraryUrls.add(library.toURI().toURL())[ FD ]
Line_4 $$ for (File library : libraries) -->Line_6 $$ libraryUrls.add(library.toURI().toURL())[ FD ]
Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) -->Line_11 $$ URLClassLoader libraryClassLoader = new URLClassLoader(libraryUrls.toArray(new URL[] [ CD ]
Line_3 $$ ArrayList<URL> libraryUrls = new ArrayList<URL>()-->Line_11 $$ URLClassLoader libraryClassLoader = new URLClassLoader(libraryUrls.toArray(new URL[] [ FD ]
Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) -->Line_12 $$ final Splash splash = new Splash(Display.getDefault(), jars.length)[ CD ]
Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) -->Line_13 $$ for (int i = 0; i < jars.length; i++) [ CD ]
Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) -->Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) [ CD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_13 $$ for (int i = 0; i < jars.length; i++) [ CD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_13 $$ for (int i = 0; i < jars.length; i++) [ CD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_13 $$ for (int i = 0; i < jars.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_14 $$ splash.setProgress(i)[ CD ]
Line_12 $$ final Splash splash = new Splash(Display.getDefault(), jars.length)-->Line_14 $$ splash.setProgress(i)[ FD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_14 $$ splash.setProgress(i)[ FD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_15 $$ logger.info("Loading library " + jars[i].getAbsolutePath())[ CD ]
Line_17 $$ URL url = jars[i].toURI().toURL()-->Line_17 $$ URL url = jars[i].toURI().toURL()[ CD ]
Line_17 $$ URL url = jars[i].toURI().toURL()-->Line_19 $$ JarInputStream in = new JarInputStream(url.openStream())[ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_21 $$ while ((entry = in.getNextJarEntry()) != null) [ FD ]
Line_20 $$ JarEntry entry = null-->Line_21 $$ while ((entry = in.getNextJarEntry()) != null) [ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_21 $$ while ((entry = in.getNextJarEntry()) != null) [ CD ]
Line_19 $$ JarInputStream in = new JarInputStream(url.openStream())-->Line_21 $$ while ((entry = in.getNextJarEntry()) != null) [ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_22 $$ if (!entry.getName().matches(".*class$")) [ CD ]
Line_22 $$ if (!entry.getName().matches(".*class$")) -->Line_22 $$ if (!entry.getName().matches(".*class$")) [ CD ]
Line_22 $$ if (!entry.getName().matches(".*class$")) -->Line_22 $$ if (!entry.getName().matches(".*class$")) [ CD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_22 $$ if (!entry.getName().matches(".*class$")) [ FD ]
Line_20 $$ JarEntry entry = null-->Line_22 $$ if (!entry.getName().matches(".*class$")) [ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_25 $$ String className = entry.getName()[ CD ]
Line_25 $$ String className = entry.getName()-->Line_25 $$ String className = entry.getName()[ CD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_25 $$ String className = entry.getName()[ FD ]
Line_20 $$ JarEntry entry = null-->Line_25 $$ String className = entry.getName()[ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ CD ]
Line_25 $$ String className = entry.getName()-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ CD ]
Line_25 $$ String className = entry.getName()-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_25 $$ String className = entry.getName()-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_27 $$ className = className.replace("/", ".")[ CD ]
Line_25 $$ String className = entry.getName()-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_27 $$ className = className.replace("/", ".")[ CD ]
Line_25 $$ String className = entry.getName()-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ CD ]
Line_25 $$ String className = entry.getName()-->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_29 $$ URLClassLoader classLoader = new URLClassLoader(new URL[] -->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) [ FD ]
Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) -->Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) [ CD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) [ FD ]
Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) -->Line_32 $$ logger.info("Iniglet: " + className)[ CD ]
Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) -->Line_33 $$ Iniglet iniglet = null[ CD ]
Line_33 $$ Iniglet iniglet = null-->Line_35 $$ iniglet = (Iniglet) instance.newInstance()[ FD ]
Line_35 $$ iniglet = (Iniglet) instance.newInstance()-->Line_35 $$ iniglet = (Iniglet) instance.newInstance()[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_35 $$ iniglet = (Iniglet) instance.newInstance()[ FD ]
Line_33 $$ Iniglet iniglet = null-->Line_36 $$ inigletList.add(iniglet)[ FD ]
Line_35 $$ iniglet = (Iniglet) instance.newInstance()-->Line_36 $$ inigletList.add(iniglet)[ FD ]
Line_12 $$ final Splash splash = new Splash(Display.getDefault(), jars.length)-->Line_37 $$ splash.setProgress(i + 1)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_39 $$ logger.warn("Illegal constructor for " + instance.getCanonicalName(), e)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_41 $$ logger.warn("Unable to instantiate " + instance.getCanonicalName(), e)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_43 $$ logger.warn("Illegal constructor access to " + instance.getCanonicalName(), e)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_45 $$ logger.warn("Iniglet Failure " + instance.getCanonicalName(), t)[ FD ]
Line_17 $$ URL url = jars[i].toURI().toURL()-->Line_56 $$ logger.warn("Failed to scan " + url.getFile(), e)[ FD ]
Line_33 $$ Iniglet iniglet = null-->Line_63 $$ addMenuEntry(iniglet)[ FD ]
Line_35 $$ iniglet = (Iniglet) instance.newInstance()-->Line_63 $$ addMenuEntry(iniglet)[ FD ]
Line_62 $$ for (Iniglet iniglet : inigletList) -->Line_63 $$ addMenuEntry(iniglet)[ FD ]
Line_2 $$ private void loadPlugins(File[] jars, File[] libraries) -->Line_65 $$ display.asyncExec(new Runnable() [ CD ]
Line_12 $$ final Splash splash = new Splash(Display.getDefault(), jars.length)-->Line_72 $$ splash.close()[ FD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_13 $$ for (int i = 0; i < jars.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_13 $$ for (int i = 0; i < jars.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_13 $$ for (int i = 0; i < jars.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < jars.length; i++) -->Line_14 $$ splash.setProgress(i)[ FD ]
Line_17 $$ URL url = jars[i].toURI().toURL()-->Line_19 $$ JarInputStream in = new JarInputStream(url.openStream())[ FD ]
Line_17 $$ URL url = jars[i].toURI().toURL()-->Line_56 $$ logger.warn("Failed to scan " + url.getFile(), e)[ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_22 $$ if (!entry.getName().matches(".*class$")) [ FD ]
Line_21 $$ while ((entry = in.getNextJarEntry()) != null) -->Line_25 $$ String className = entry.getName()[ FD ]
Line_25 $$ String className = entry.getName()-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_25 $$ String className = entry.getName()-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_26 $$ className = className.substring(0, className.lastIndexOf("."))[ FD ]
Line_25 $$ String className = entry.getName()-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_27 $$ className = className.replace("/", ".")[ FD ]
Line_25 $$ String className = entry.getName()-->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_26 $$ className = className.substring(0, className.lastIndexOf("."))-->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_27 $$ className = className.replace("/", ".")-->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_29 $$ URLClassLoader classLoader = new URLClassLoader(new URL[] -->Line_30 $$ Class instance = Class.forName(className, true, classLoader)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) [ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_31 $$ if (Iniglet.class.isAssignableFrom(instance) && !Modifier.isAbstract(instance.getModifiers())) [ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_35 $$ iniglet = (Iniglet) instance.newInstance()[ FD ]
Line_33 $$ Iniglet iniglet = null-->Line_36 $$ inigletList.add(iniglet)[ FD ]
Line_35 $$ iniglet = (Iniglet) instance.newInstance()-->Line_36 $$ inigletList.add(iniglet)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_39 $$ logger.warn("Illegal constructor for " + instance.getCanonicalName(), e)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_41 $$ logger.warn("Unable to instantiate " + instance.getCanonicalName(), e)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_43 $$ logger.warn("Illegal constructor access to " + instance.getCanonicalName(), e)[ FD ]
Line_30 $$ Class instance = Class.forName(className, true, classLoader)-->Line_45 $$ logger.warn("Iniglet Failure " + instance.getCanonicalName(), t)[ FD ]
