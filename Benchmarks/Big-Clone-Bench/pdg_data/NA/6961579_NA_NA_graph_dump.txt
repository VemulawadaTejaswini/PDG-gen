Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception [ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_3 $$ boolean editor = false[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_4 $$ req.setAttribute(ViewReportsAction.REPORT_EDITOR_OR_ADMIN, false)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_4 $$ req.setAttribute(ViewReportsAction.REPORT_EDITOR_OR_ADMIN, false)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_5 $$ User user = _getUser(req)[ CD ]
Line_5 $$ User user = _getUser(req)-->Line_5 $$ User user = _getUser(req)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_5 $$ User user = _getUser(req)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_6 $$ List<Role> roles = RoleFactory.getAllRolesForUser(user.getUserId())[ CD ]
Line_6 $$ List<Role> roles = RoleFactory.getAllRolesForUser(user.getUserId())-->Line_6 $$ List<Role> roles = RoleFactory.getAllRolesForUser(user.getUserId())[ CD ]
Line_5 $$ User user = _getUser(req)-->Line_6 $$ List<Role> roles = RoleFactory.getAllRolesForUser(user.getUserId())[ FD ]
Line_7 $$ for (Role role : roles) -->Line_8 $$ if (role.getName().equals("Report Administrator") || role.getName().equals("Report Editor") || role.getName().equals("CMS Administrator")) [ FD ]
Line_7 $$ for (Role role : roles) -->Line_8 $$ if (role.getName().equals("Report Administrator") || role.getName().equals("Report Editor") || role.getName().equals("CMS Administrator")) [ FD ]
Line_7 $$ for (Role role : roles) -->Line_8 $$ if (role.getName().equals("Report Administrator") || role.getName().equals("Report Editor") || role.getName().equals("CMS Administrator")) [ FD ]
Line_8 $$ if (role.getName().equals("Report Administrator") || role.getName().equals("Report Editor") || role.getName().equals("CMS Administrator")) -->Line_9 $$ req.setAttribute(ViewReportsAction.REPORT_EDITOR_OR_ADMIN, true)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_9 $$ req.setAttribute(ViewReportsAction.REPORT_EDITOR_OR_ADMIN, true)[ FD ]
Line_8 $$ if (role.getName().equals("Report Administrator") || role.getName().equals("Report Editor") || role.getName().equals("CMS Administrator")) -->Line_10 $$ editor = true[ CD ]
Line_3 $$ boolean editor = false-->Line_10 $$ editor = true[ FD ]
Line_10 $$ editor = true-->Line_10 $$ editor = true[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_17 $$ ActionRequestImpl reqImpl = (ActionRequestImpl) req[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()[ CD ]
Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()[ CD ]
Line_17 $$ ActionRequestImpl reqImpl = (ActionRequestImpl) req-->Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_19 $$ String cmd = req.getParameter(Constants.CMD)[ CD ]
Line_19 $$ String cmd = req.getParameter(Constants.CMD)-->Line_19 $$ String cmd = req.getParameter(Constants.CMD)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_19 $$ String cmd = req.getParameter(Constants.CMD)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_20 $$ Logger.debug(this, "Inside EditReportAction cmd=" + cmd)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_21 $$ ReportForm rfm = (ReportForm) form[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_22 $$ ArrayList<String> ds = (DbConnectionFactory.getAllDataSources())[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_23 $$ ArrayList<DataSource> dsResults = new ArrayList<DataSource>()[ CD ]
Line_25 $$ DataSource d = rfm.getNewDataSource()-->Line_25 $$ DataSource d = rfm.getNewDataSource()[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_25 $$ DataSource d = rfm.getNewDataSource()[ FD ]
Line_24 $$ for (String dataSource : ds) -->Line_26 $$ if (dataSource.equals(com.dotmarketing.util.Constants.DATABASE_DEFAULT_DATASOURCE)) [ FD ]
Line_26 $$ if (dataSource.equals(com.dotmarketing.util.Constants.DATABASE_DEFAULT_DATASOURCE)) -->Line_26 $$ if (dataSource.equals(com.dotmarketing.util.Constants.DATABASE_DEFAULT_DATASOURCE)) [ CD ]
Line_24 $$ for (String dataSource : ds) -->Line_26 $$ if (dataSource.equals(com.dotmarketing.util.Constants.DATABASE_DEFAULT_DATASOURCE)) [ FD ]
Line_26 $$ if (dataSource.equals(com.dotmarketing.util.Constants.DATABASE_DEFAULT_DATASOURCE)) -->Line_27 $$ d.setDsName("DotCMS Datasource")[ CD ]
Line_25 $$ DataSource d = rfm.getNewDataSource()-->Line_27 $$ d.setDsName("DotCMS Datasource")[ FD ]
Line_26 $$ if (dataSource.equals(com.dotmarketing.util.Constants.DATABASE_DEFAULT_DATASOURCE)) -->Line_29 $$ d.setDsName(dataSource)[ CD ]
Line_25 $$ DataSource d = rfm.getNewDataSource()-->Line_29 $$ d.setDsName(dataSource)[ FD ]
Line_24 $$ for (String dataSource : ds) -->Line_29 $$ d.setDsName(dataSource)[ FD ]
Line_23 $$ ArrayList<DataSource> dsResults = new ArrayList<DataSource>()-->Line_31 $$ dsResults.add(d)[ FD ]
Line_25 $$ DataSource d = rfm.getNewDataSource()-->Line_31 $$ dsResults.add(d)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_33 $$ rfm.setDataSources(dsResults)[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_33 $$ rfm.setDataSources(dsResults)[ FD ]
Line_23 $$ ArrayList<DataSource> dsResults = new ArrayList<DataSource>()-->Line_33 $$ rfm.setDataSources(dsResults)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_34 $$ httpReq.setAttribute("dataSources", rfm.getDataSources())[ CD ]
Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_34 $$ httpReq.setAttribute("dataSources", rfm.getDataSources())[ FD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_34 $$ httpReq.setAttribute("dataSources", rfm.getDataSources())[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_35 $$ Long reportId = UtilMethods.parseLong(req.getParameter("reportId"), 0)[ CD ]
Line_35 $$ Long reportId = UtilMethods.parseLong(req.getParameter("reportId"), 0)-->Line_35 $$ Long reportId = UtilMethods.parseLong(req.getParameter("reportId"), 0)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_35 $$ Long reportId = UtilMethods.parseLong(req.getParameter("reportId"), 0)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_36 $$ String referrer = req.getParameter("referrer")[ CD ]
Line_36 $$ String referrer = req.getParameter("referrer")-->Line_36 $$ String referrer = req.getParameter("referrer")[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_36 $$ String referrer = req.getParameter("referrer")[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_37 $$ if (reportId > 0) [ CD ]
Line_35 $$ Long reportId = UtilMethods.parseLong(req.getParameter("reportId"), 0)-->Line_37 $$ if (reportId > 0) [ FD ]
Line_37 $$ if (reportId > 0) -->Line_38 $$ report = ReportFactory.getReport(reportId)[ CD ]
Line_35 $$ Long reportId = UtilMethods.parseLong(req.getParameter("reportId"), 0)-->Line_38 $$ report = ReportFactory.getReport(reportId)[ FD ]
Line_37 $$ if (reportId > 0) -->Line_39 $$ ArrayList<String> adminRoles = new ArrayList<String>()[ CD ]
Line_37 $$ if (reportId > 0) -->Line_40 $$ adminRoles.add(com.dotmarketing.util.Constants.ROLE_REPORT_ADMINISTRATOR)[ CD ]
Line_39 $$ ArrayList<String> adminRoles = new ArrayList<String>()-->Line_40 $$ adminRoles.add(com.dotmarketing.util.Constants.ROLE_REPORT_ADMINISTRATOR)[ FD ]
Line_37 $$ if (reportId > 0) -->Line_41 $$ if (user.getUserId().equals(report.getOwner())) [ CD ]
Line_41 $$ if (user.getUserId().equals(report.getOwner())) -->Line_41 $$ if (user.getUserId().equals(report.getOwner())) [ CD ]
Line_5 $$ User user = _getUser(req)-->Line_41 $$ if (user.getUserId().equals(report.getOwner())) [ FD ]
Line_41 $$ if (user.getUserId().equals(report.getOwner())) -->Line_42 $$ _checkWritePermissions(report, user, httpReq, adminRoles)[ CD ]
Line_5 $$ User user = _getUser(req)-->Line_42 $$ _checkWritePermissions(report, user, httpReq, adminRoles)[ FD ]
Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_42 $$ _checkWritePermissions(report, user, httpReq, adminRoles)[ FD ]
Line_39 $$ ArrayList<String> adminRoles = new ArrayList<String>()-->Line_42 $$ _checkWritePermissions(report, user, httpReq, adminRoles)[ FD ]
Line_37 $$ if (reportId > 0) -->Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) [ CD ]
Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) -->Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) [ CD ]
Line_19 $$ String cmd = req.getParameter(Constants.CMD)-->Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) [ FD ]
Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) -->Line_45 $$ rfm.setSelectedDataSource(report.getDs())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_45 $$ rfm.setSelectedDataSource(report.getDs())[ FD ]
Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) -->Line_46 $$ rfm.setReportName(report.getReportName())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_46 $$ rfm.setReportName(report.getReportName())[ FD ]
Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) -->Line_47 $$ rfm.setReportDescription(report.getReportDescription())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_47 $$ rfm.setReportDescription(report.getReportDescription())[ FD ]
Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) -->Line_48 $$ rfm.setReportId(report.getInode())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_48 $$ rfm.setReportId(report.getInode())[ FD ]
Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) -->Line_49 $$ rfm.setWebFormReport(report.isWebFormReport())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_49 $$ rfm.setWebFormReport(report.isWebFormReport())[ FD ]
Line_44 $$ if (cmd == null || !cmd.equals(Constants.EDIT)) -->Line_50 $$ httpReq.setAttribute("selectedDS", report.getDs())[ CD ]
Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_50 $$ httpReq.setAttribute("selectedDS", report.getDs())[ FD ]
Line_37 $$ if (reportId > 0) -->Line_53 $$ if (!editor) [ CD ]
Line_3 $$ boolean editor = false-->Line_53 $$ if (!editor) [ FD ]
Line_10 $$ editor = true-->Line_53 $$ if (!editor) [ FD ]
Line_53 $$ if (!editor) -->Line_53 $$ if (!editor) [ CD ]
Line_3 $$ boolean editor = false-->Line_53 $$ if (!editor) [ FD ]
Line_10 $$ editor = true-->Line_53 $$ if (!editor) [ FD ]
Line_37 $$ if (reportId > 0) -->Line_57 $$ report.setOwner(_getUser(req).getUserId())[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_57 $$ report.setOwner(_getUser(req).getUserId())[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_60 $$ req.setAttribute(WebKeys.PERMISSION_INODE_EDIT, report)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_60 $$ req.setAttribute(WebKeys.PERMISSION_INODE_EDIT, report)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_61 $$ if ((cmd != null) && cmd.equals(Constants.EDIT)) [ CD ]
Line_19 $$ String cmd = req.getParameter(Constants.CMD)-->Line_61 $$ if ((cmd != null) && cmd.equals(Constants.EDIT)) [ FD ]
Line_61 $$ if ((cmd != null) && cmd.equals(Constants.EDIT)) -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ FD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_62 $$ if (Validator.validate(req, form, mapping)) [ FD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_63 $$ report.setReportName(rfm.getReportName())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_63 $$ report.setReportName(rfm.getReportName())[ FD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_64 $$ report.setReportDescription(rfm.getReportDescription())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_64 $$ report.setReportDescription(rfm.getReportDescription())[ FD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_65 $$ report.setWebFormReport(rfm.isWebFormReport())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_65 $$ report.setWebFormReport(rfm.isWebFormReport())[ FD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_66 $$ if (rfm.isWebFormReport())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_66 $$ if (rfm.isWebFormReport())[ FD ]
Line_66 $$ if (rfm.isWebFormReport())-->Line_66 $$ if (rfm.isWebFormReport())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_66 $$ if (rfm.isWebFormReport())[ FD ]
Line_66 $$ if (rfm.isWebFormReport())-->Line_66 $$ report.setDs("None")[ CD ]
Line_66 $$ if (rfm.isWebFormReport())-->Line_66 $$ report.setDs(rfm.getSelectedDataSource())[ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_66 $$ report.setDs(rfm.getSelectedDataSource())[ FD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_67 $$ String jrxmlPath = ""[ CD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_68 $$ String jasperPath = ""[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_72 $$ _applyPermissions(req, report)[ FD ]
Line_73 $$ if (!rfm.isWebFormReport()) -->Line_73 $$ if (!rfm.isWebFormReport()) [ CD ]
Line_73 $$ if (!rfm.isWebFormReport()) -->Line_73 $$ if (!rfm.isWebFormReport()) [ CD ]
Line_21 $$ ReportForm rfm = (ReportForm) form-->Line_73 $$ if (!rfm.isWebFormReport()) [ FD ]
Line_73 $$ if (!rfm.isWebFormReport()) -->Line_74 $$ if (UtilMethods.isSet(Config.getStringProperty("ASSET_REAL_PATH"))) [ CD ]
Line_74 $$ if (UtilMethods.isSet(Config.getStringProperty("ASSET_REAL_PATH"))) -->Line_74 $$ if (UtilMethods.isSet(Config.getStringProperty("ASSET_REAL_PATH"))) [ CD ]
Line_74 $$ if (UtilMethods.isSet(Config.getStringProperty("ASSET_REAL_PATH"))) -->Line_75 $$ jrxmlPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml"[ CD ]
Line_67 $$ String jrxmlPath = ""-->Line_75 $$ jrxmlPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml"[ FD ]
Line_75 $$ jrxmlPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml"-->Line_75 $$ jrxmlPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml"[ FD ]
Line_74 $$ if (UtilMethods.isSet(Config.getStringProperty("ASSET_REAL_PATH"))) -->Line_76 $$ jasperPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper"[ CD ]
Line_68 $$ String jasperPath = ""-->Line_76 $$ jasperPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper"[ FD ]
Line_76 $$ jasperPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper"-->Line_76 $$ jasperPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper"[ FD ]
Line_74 $$ if (UtilMethods.isSet(Config.getStringProperty("ASSET_REAL_PATH"))) -->Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")[ CD ]
Line_67 $$ String jrxmlPath = ""-->Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")[ FD ]
Line_75 $$ jrxmlPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml"-->Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")[ FD ]
Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")-->Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")[ FD ]
Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")-->Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")[ CD ]
Line_74 $$ if (UtilMethods.isSet(Config.getStringProperty("ASSET_REAL_PATH"))) -->Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")[ CD ]
Line_68 $$ String jasperPath = ""-->Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")[ FD ]
Line_76 $$ jasperPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper"-->Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")[ FD ]
Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")-->Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")[ FD ]
Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")-->Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")[ CD ]
Line_73 $$ if (!rfm.isWebFormReport()) -->Line_81 $$ UploadPortletRequest upr = PortalUtil.getUploadPortletRequest(req)[ CD ]
Line_81 $$ UploadPortletRequest upr = PortalUtil.getUploadPortletRequest(req)-->Line_81 $$ UploadPortletRequest upr = PortalUtil.getUploadPortletRequest(req)[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_81 $$ UploadPortletRequest upr = PortalUtil.getUploadPortletRequest(req)[ FD ]
Line_73 $$ if (!rfm.isWebFormReport()) -->Line_82 $$ File importFile = upr.getFile("jrxmlFile")[ CD ]
Line_82 $$ File importFile = upr.getFile("jrxmlFile")-->Line_82 $$ File importFile = upr.getFile("jrxmlFile")[ CD ]
Line_81 $$ UploadPortletRequest upr = PortalUtil.getUploadPortletRequest(req)-->Line_82 $$ File importFile = upr.getFile("jrxmlFile")[ FD ]
Line_73 $$ if (!rfm.isWebFormReport()) -->Line_83 $$ if (importFile.exists()) [ CD ]
Line_82 $$ File importFile = upr.getFile("jrxmlFile")-->Line_83 $$ if (importFile.exists()) [ FD ]
Line_83 $$ if (importFile.exists()) -->Line_83 $$ if (importFile.exists()) [ CD ]
Line_82 $$ File importFile = upr.getFile("jrxmlFile")-->Line_83 $$ if (importFile.exists()) [ FD ]
Line_83 $$ if (importFile.exists()) -->Line_84 $$ byte[] currentData = new byte[0][ CD ]
Line_83 $$ if (importFile.exists()) -->Line_85 $$ FileInputStream is = new FileInputStream(importFile)[ CD ]
Line_83 $$ if (importFile.exists()) -->Line_86 $$ int size = is.available()[ CD ]
Line_86 $$ int size = is.available()-->Line_86 $$ int size = is.available()[ CD ]
Line_85 $$ FileInputStream is = new FileInputStream(importFile)-->Line_86 $$ int size = is.available()[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_87 $$ currentData = new byte[size][ CD ]
Line_84 $$ byte[] currentData = new byte[0]-->Line_87 $$ currentData = new byte[size][ FD ]
Line_87 $$ currentData = new byte[size]-->Line_87 $$ currentData = new byte[size][ FD ]
Line_83 $$ if (importFile.exists()) -->Line_88 $$ is.read(currentData)[ CD ]
Line_85 $$ FileInputStream is = new FileInputStream(importFile)-->Line_88 $$ is.read(currentData)[ FD ]
Line_84 $$ byte[] currentData = new byte[0]-->Line_88 $$ is.read(currentData)[ FD ]
Line_87 $$ currentData = new byte[size]-->Line_88 $$ is.read(currentData)[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_89 $$ File f = new File(jrxmlPath)[ CD ]
Line_83 $$ if (importFile.exists()) -->Line_90 $$ FileChannel channelTo = new FileOutputStream(f).getChannel()[ CD ]
Line_90 $$ FileChannel channelTo = new FileOutputStream(f).getChannel()-->Line_90 $$ FileChannel channelTo = new FileOutputStream(f).getChannel()[ CD ]
Line_83 $$ if (importFile.exists()) -->Line_91 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length)[ CD ]
Line_91 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length)-->Line_91 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length)[ CD ]
Line_83 $$ if (importFile.exists()) -->Line_92 $$ currentDataBuffer.put(currentData)[ CD ]
Line_91 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length)-->Line_92 $$ currentDataBuffer.put(currentData)[ FD ]
Line_84 $$ byte[] currentData = new byte[0]-->Line_92 $$ currentDataBuffer.put(currentData)[ FD ]
Line_87 $$ currentData = new byte[size]-->Line_92 $$ currentDataBuffer.put(currentData)[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_93 $$ currentDataBuffer.position(0)[ CD ]
Line_91 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length)-->Line_93 $$ currentDataBuffer.position(0)[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_94 $$ channelTo.write(currentDataBuffer)[ CD ]
Line_90 $$ FileChannel channelTo = new FileOutputStream(f).getChannel()-->Line_94 $$ channelTo.write(currentDataBuffer)[ FD ]
Line_91 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length)-->Line_94 $$ channelTo.write(currentDataBuffer)[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_95 $$ channelTo.force(false)[ CD ]
Line_90 $$ FileChannel channelTo = new FileOutputStream(f).getChannel()-->Line_95 $$ channelTo.force(false)[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_96 $$ channelTo.close()[ CD ]
Line_90 $$ FileChannel channelTo = new FileOutputStream(f).getChannel()-->Line_96 $$ channelTo.close()[ FD ]
Line_67 $$ String jrxmlPath = ""-->Line_98 $$ JasperCompileManager.compileReportToFile(jrxmlPath, jasperPath)[ FD ]
Line_75 $$ jrxmlPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml"-->Line_98 $$ JasperCompileManager.compileReportToFile(jrxmlPath, jasperPath)[ FD ]
Line_78 $$ jrxmlPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jrxml")-->Line_98 $$ JasperCompileManager.compileReportToFile(jrxmlPath, jasperPath)[ FD ]
Line_68 $$ String jasperPath = ""-->Line_98 $$ JasperCompileManager.compileReportToFile(jrxmlPath, jasperPath)[ FD ]
Line_76 $$ jasperPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper"-->Line_98 $$ JasperCompileManager.compileReportToFile(jrxmlPath, jasperPath)[ FD ]
Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")-->Line_98 $$ JasperCompileManager.compileReportToFile(jrxmlPath, jasperPath)[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_102 $$ f = new File(jrxmlPath)[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_102 $$ f = new File(jrxmlPath)[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_103 $$ f.delete()[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_103 $$ f.delete()[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_108 $$ f = new File(jasperPath)[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_108 $$ f = new File(jasperPath)[ FD ]
Line_108 $$ f = new File(jasperPath)-->Line_108 $$ f = new File(jasperPath)[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_109 $$ f.delete()[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_109 $$ f.delete()[ FD ]
Line_108 $$ f = new File(jasperPath)-->Line_109 $$ f.delete()[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_114 $$ SessionMessages.add(req, "error", UtilMethods.htmlLineBreak(e.getMessage()))[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_115 $$ setForward(req, "portlet.ext.report.edit_report")[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_118 $$ JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperPath)[ CD ]
Line_68 $$ String jasperPath = ""-->Line_118 $$ JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperPath)[ FD ]
Line_76 $$ jasperPath = Config.getStringProperty("ASSET_REAL_PATH") + File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper"-->Line_118 $$ JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperPath)[ FD ]
Line_79 $$ jasperPath = Config.CONTEXT.getRealPath(File.separator + Config.getStringProperty("REPORT_PATH") + File.separator + report.getInode() + ".jasper")-->Line_118 $$ JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperPath)[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_119 $$ ReportParameterFactory.deleteReportsParameters(report)[ CD ]
Line_83 $$ if (importFile.exists()) -->Line_120 $$ _loadReportParameters(jasperReport.getParameters())[ CD ]
Line_118 $$ JasperReport jasperReport = (JasperReport) JRLoader.loadObject(jasperPath)-->Line_120 $$ _loadReportParameters(jasperReport.getParameters())[ FD ]
Line_83 $$ if (importFile.exists()) -->Line_121 $$ report.setRequiresInput(requiresInput)[ CD ]
Line_83 $$ if (importFile.exists()) -->Line_122 $$ HibernateUtil.save(report)[ CD ]
Line_83 $$ if (importFile.exists()) -->Line_123 $$ if (newReport) [ CD ]
Line_123 $$ if (newReport) -->Line_124 $$ HibernateUtil.rollbackTransaction()[ CD ]
Line_123 $$ if (newReport) -->Line_125 $$ SessionMessages.add(req, "error", "message.report.compile.error")[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_125 $$ SessionMessages.add(req, "error", "message.report.compile.error")[ FD ]
Line_123 $$ if (newReport) -->Line_126 $$ setForward(req, "portlet.ext.report.edit_report")[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_126 $$ setForward(req, "portlet.ext.report.edit_report")[ FD ]
Line_123 $$ if (newReport) -->Line_127 $$ return[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_132 $$ SessionMessages.add(req, "message", "message.report.upload.success")[ FD ]
Line_131 $$ HashMap params = new HashMap()-->Line_133 $$ params.put("struts_action", new String[] [ FD ]
Line_36 $$ String referrer = req.getParameter("referrer")-->Line_134 $$ referrer = com.dotmarketing.util.PortletURLUtil.getRenderURL(((ActionRequestImpl) req).getHttpServletRequest(), javax.portlet.WindowState.MAXIMIZED.toString(), params)[ FD ]
Line_134 $$ referrer = com.dotmarketing.util.PortletURLUtil.getRenderURL(((ActionRequestImpl) req).getHttpServletRequest(), javax.portlet.WindowState.MAXIMIZED.toString(), params)-->Line_134 $$ referrer = com.dotmarketing.util.PortletURLUtil.getRenderURL(((ActionRequestImpl) req).getHttpServletRequest(), javax.portlet.WindowState.MAXIMIZED.toString(), params)[ FD ]
Line_134 $$ referrer = com.dotmarketing.util.PortletURLUtil.getRenderURL(((ActionRequestImpl) req).getHttpServletRequest(), javax.portlet.WindowState.MAXIMIZED.toString(), params)-->Line_134 $$ referrer = com.dotmarketing.util.PortletURLUtil.getRenderURL(((ActionRequestImpl) req).getHttpServletRequest(), javax.portlet.WindowState.MAXIMIZED.toString(), params)[ CD ]
Line_131 $$ HashMap params = new HashMap()-->Line_134 $$ referrer = com.dotmarketing.util.PortletURLUtil.getRenderURL(((ActionRequestImpl) req).getHttpServletRequest(), javax.portlet.WindowState.MAXIMIZED.toString(), params)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_135 $$ _sendToReferral(req, res, referrer)[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_135 $$ _sendToReferral(req, res, referrer)[ FD ]
Line_36 $$ String referrer = req.getParameter("referrer")-->Line_135 $$ _sendToReferral(req, res, referrer)[ FD ]
Line_134 $$ referrer = com.dotmarketing.util.PortletURLUtil.getRenderURL(((ActionRequestImpl) req).getHttpServletRequest(), javax.portlet.WindowState.MAXIMIZED.toString(), params)-->Line_135 $$ _sendToReferral(req, res, referrer)[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_143 $$ f = new File(jrxmlPath)[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_143 $$ f = new File(jrxmlPath)[ FD ]
Line_108 $$ f = new File(jasperPath)-->Line_143 $$ f = new File(jrxmlPath)[ FD ]
Line_143 $$ f = new File(jrxmlPath)-->Line_143 $$ f = new File(jrxmlPath)[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_144 $$ f.delete()[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_144 $$ f.delete()[ FD ]
Line_108 $$ f = new File(jasperPath)-->Line_144 $$ f.delete()[ FD ]
Line_143 $$ f = new File(jrxmlPath)-->Line_144 $$ f.delete()[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_149 $$ f = new File(jasperPath)[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_149 $$ f = new File(jasperPath)[ FD ]
Line_108 $$ f = new File(jasperPath)-->Line_149 $$ f = new File(jasperPath)[ FD ]
Line_143 $$ f = new File(jrxmlPath)-->Line_149 $$ f = new File(jasperPath)[ FD ]
Line_149 $$ f = new File(jasperPath)-->Line_149 $$ f = new File(jasperPath)[ FD ]
Line_89 $$ File f = new File(jrxmlPath)-->Line_150 $$ f.delete()[ FD ]
Line_102 $$ f = new File(jrxmlPath)-->Line_150 $$ f.delete()[ FD ]
Line_108 $$ f = new File(jasperPath)-->Line_150 $$ f.delete()[ FD ]
Line_143 $$ f = new File(jrxmlPath)-->Line_150 $$ f.delete()[ FD ]
Line_149 $$ f = new File(jasperPath)-->Line_150 $$ f.delete()[ FD ]
Line_154 $$ if (badParameters) -->Line_155 $$ SessionMessages.add(req, "error", ex.getMessage())[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_155 $$ SessionMessages.add(req, "error", ex.getMessage())[ FD ]
Line_154 $$ if (badParameters) -->Line_157 $$ SessionMessages.add(req, "error", "message.report.compile.error")[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_157 $$ SessionMessages.add(req, "error", "message.report.compile.error")[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_159 $$ setForward(req, "portlet.ext.report.edit_report")[ FD ]
Line_62 $$ if (Validator.validate(req, form, mapping)) -->Line_163 $$ setForward(req, "portlet.ext.report.edit_report")[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_163 $$ setForward(req, "portlet.ext.report.edit_report")[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_166 $$ if ((cmd != null) && cmd.equals("downloadReportSource")) [ CD ]
Line_19 $$ String cmd = req.getParameter(Constants.CMD)-->Line_166 $$ if ((cmd != null) && cmd.equals("downloadReportSource")) [ FD ]
Line_166 $$ if ((cmd != null) && cmd.equals("downloadReportSource")) -->Line_167 $$ ActionResponseImpl resImpl = (ActionResponseImpl) res[ CD ]
Line_166 $$ if ((cmd != null) && cmd.equals("downloadReportSource")) -->Line_168 $$ HttpServletResponse response = resImpl.getHttpServletResponse()[ CD ]
Line_168 $$ HttpServletResponse response = resImpl.getHttpServletResponse()-->Line_168 $$ HttpServletResponse response = resImpl.getHttpServletResponse()[ CD ]
Line_167 $$ ActionResponseImpl resImpl = (ActionResponseImpl) res-->Line_168 $$ HttpServletResponse response = resImpl.getHttpServletResponse()[ FD ]
Line_166 $$ if ((cmd != null) && cmd.equals("downloadReportSource")) -->Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) [ CD ]
Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) -->Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) [ CD ]
Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) -->Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) [ CD ]
Line_35 $$ Long reportId = UtilMethods.parseLong(req.getParameter("reportId"), 0)-->Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) [ FD ]
Line_18 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) [ FD ]
Line_168 $$ HttpServletResponse response = resImpl.getHttpServletResponse()-->Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) [ FD ]
Line_169 $$ if (!downloadSourceReport(reportId, httpReq, response)) -->Line_170 $$ SessionMessages.add(req, "error", "message.report.source.file.not.found")[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_170 $$ SessionMessages.add(req, "error", "message.report.source.file.not.found")[ FD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_173 $$ setForward(req, "portlet.ext.report.edit_report")[ CD ]
Line_2 $$ public void processAction(ActionMapping mapping, ActionForm form, PortletConfig config, ActionRequest req, ActionResponse res) throws Exception -->Line_173 $$ setForward(req, "portlet.ext.report.edit_report")[ FD ]
