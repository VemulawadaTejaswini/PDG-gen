Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException [ CD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_10 $$ for (int i = 0; i < 16; i++) [ CD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_10 $$ for (int i = 0; i < 16; i++) [ CD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_10 $$ for (int i = 0; i < 16; i++) [ FD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))[ CD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))[ CD ]
Line_9 $$ Random rand = new Random()-->Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))[ FD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_12 $$ if (hex.length() < 2)[ CD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_12 $$ if (hex.length() < 2)[ FD ]
Line_12 $$ if (hex.length() < 2)-->Line_12 $$ hex = "0" + hex[ CD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_12 $$ hex = "0" + hex[ FD ]
Line_12 $$ hex = "0" + hex-->Line_12 $$ hex = "0" + hex[ FD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_12 $$ hex = "0" + hex[ FD ]
Line_12 $$ hex = "0" + hex-->Line_12 $$ hex = "0" + hex[ FD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_13 $$ seed += hex.substring(hex.length() - 2)[ CD ]
Line_13 $$ seed += hex.substring(hex.length() - 2)-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_8 $$ String seed = ""-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_13 $$ seed += hex.substring(hex.length() - 2)-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ CD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_12 $$ hex = "0" + hex-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_12 $$ hex = "0" + hex-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")[ CD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_17 $$ md5.reset()[ FD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_18 $$ md5.update(pass.getBytes())[ FD ]
Line_15 $$ String pass = _mpsw + seed + _spsw-->Line_18 $$ md5.update(pass.getBytes())[ FD ]
Line_19 $$ String hash = hash2hex(md5.digest()).toLowerCase()-->Line_19 $$ String hash = hash2hex(md5.digest()).toLowerCase()[ CD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_19 $$ String hash = hash2hex(md5.digest()).toLowerCase()[ FD ]
Line_20 $$ String banner = "INIT " + "servername" + " " + hash + " " + seed-->Line_21 $$ sendLine(banner)[ FD ]
Line_22 $$ String txt = readLine(5)-->Line_22 $$ String txt = readLine(5)[ CD ]
Line_22 $$ String txt = readLine(5)-->Line_23 $$ if (txt == null) [ FD ]
Line_30 $$ String[] items = txt.split(" ")-->Line_30 $$ String[] items = txt.split(" ")[ CD ]
Line_22 $$ String txt = readLine(5)-->Line_30 $$ String[] items = txt.split(" ")[ FD ]
Line_26 $$ String sname = ""-->Line_31 $$ sname = items[1].trim()[ FD ]
Line_31 $$ sname = items[1].trim()-->Line_31 $$ sname = items[1].trim()[ FD ]
Line_31 $$ sname = items[1].trim()-->Line_31 $$ sname = items[1].trim()[ CD ]
Line_27 $$ String spass = ""-->Line_32 $$ spass = items[2].trim()[ FD ]
Line_32 $$ spass = items[2].trim()-->Line_32 $$ spass = items[2].trim()[ FD ]
Line_32 $$ spass = items[2].trim()-->Line_32 $$ spass = items[2].trim()[ CD ]
Line_28 $$ String sseed = ""-->Line_33 $$ sseed = items[3].trim()[ FD ]
Line_33 $$ sseed = items[3].trim()-->Line_33 $$ sseed = items[3].trim()[ FD ]
Line_33 $$ sseed = items[3].trim()-->Line_33 $$ sseed = items[3].trim()[ CD ]
Line_15 $$ String pass = _mpsw + seed + _spsw-->Line_37 $$ pass = _spsw + sseed + _mpsw[ FD ]
Line_37 $$ pass = _spsw + sseed + _mpsw-->Line_37 $$ pass = _spsw + sseed + _mpsw[ FD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_38 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_38 $$ md5 = MessageDigest.getInstance("MD5")-->Line_38 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_38 $$ md5 = MessageDigest.getInstance("MD5")-->Line_38 $$ md5 = MessageDigest.getInstance("MD5")[ CD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_39 $$ md5.reset()[ FD ]
Line_38 $$ md5 = MessageDigest.getInstance("MD5")-->Line_39 $$ md5.reset()[ FD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_40 $$ md5.update(pass.getBytes())[ FD ]
Line_38 $$ md5 = MessageDigest.getInstance("MD5")-->Line_40 $$ md5.update(pass.getBytes())[ FD ]
Line_15 $$ String pass = _mpsw + seed + _spsw-->Line_40 $$ md5.update(pass.getBytes())[ FD ]
Line_37 $$ pass = _spsw + sseed + _mpsw-->Line_40 $$ md5.update(pass.getBytes())[ FD ]
Line_19 $$ String hash = hash2hex(md5.digest()).toLowerCase()-->Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()[ FD ]
Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()-->Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()[ FD ]
Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()-->Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()[ CD ]
Line_16 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()[ FD ]
Line_38 $$ md5 = MessageDigest.getInstance("MD5")-->Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()[ FD ]
Line_42 $$ if (!sname.equals(_name)) -->Line_42 $$ if (!sname.equals(_name)) [ CD ]
Line_42 $$ if (!sname.equals(_name)) -->Line_42 $$ if (!sname.equals(_name)) [ CD ]
Line_26 $$ String sname = ""-->Line_42 $$ if (!sname.equals(_name)) [ FD ]
Line_31 $$ sname = items[1].trim()-->Line_42 $$ if (!sname.equals(_name)) [ FD ]
Line_42 $$ if (!sname.equals(_name)) -->Line_43 $$ SocketSlaveListener.invalidSlave("INITFAIL Unknown", _sock)[ CD ]
Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) -->Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [ CD ]
Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) -->Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [ CD ]
Line_27 $$ String spass = ""-->Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [ FD ]
Line_32 $$ spass = items[2].trim()-->Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [ FD ]
Line_19 $$ String hash = hash2hex(md5.digest()).toLowerCase()-->Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [ FD ]
Line_41 $$ hash = hash2hex(md5.digest()).toLowerCase()-->Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) [ FD ]
Line_45 $$ if (!spass.toLowerCase().equals(hash.toLowerCase())) -->Line_46 $$ SocketSlaveListener.invalidSlave("INITFAIL BadKey", _sock)[ CD ]
Line_51 $$ if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) -->Line_52 $$ logger.info("Check slaves.xml on the master that you are allowed to connect.")[ CD ]
Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException -->Line_56 $$ sock.close()[ FD ]
Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException -->Line_62 $$ sock.close()[ FD ]
Line_2 $$ public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException -->Line_66 $$ System.gc()[ CD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_10 $$ for (int i = 0; i < 16; i++) [ FD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_10 $$ for (int i = 0; i < 16; i++) [ FD ]
Line_10 $$ for (int i = 0; i < 16; i++) -->Line_10 $$ for (int i = 0; i < 16; i++) [ FD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_12 $$ if (hex.length() < 2)[ FD ]
Line_12 $$ hex = "0" + hex-->Line_12 $$ if (hex.length() < 2)[ FD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_12 $$ hex = "0" + hex[ FD ]
Line_12 $$ hex = "0" + hex-->Line_12 $$ hex = "0" + hex[ FD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_12 $$ hex = "0" + hex-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_11 $$ String hex = Integer.toHexString(rand.nextInt(256))-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
Line_12 $$ hex = "0" + hex-->Line_13 $$ seed += hex.substring(hex.length() - 2)[ FD ]
