Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean performFinish() [ CD ]
Line_4 $$ IJavaProject javaProject = JavaCore.create(getProject())-->Line_4 $$ IJavaProject javaProject = JavaCore.create(getProject())[ CD ]
Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())-->Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())[ CD ]
Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())-->Line_6 $$ projectDescription.setLocation(null)[ FD ]
Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())-->Line_7 $$ getProject().create(projectDescription, null)[ FD ]
Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())-->Line_9 $$ projectDescription.setNatureIds(getNatures())[ FD ]
Line_10 $$ List<String> builderIDs = new ArrayList<String>()-->Line_11 $$ addBuilders(builderIDs)[ FD ]
Line_10 $$ List<String> builderIDs = new ArrayList<String>()-->Line_12 $$ ICommand[] buildCMDS = new ICommand[builderIDs.size()][ FD ]
Line_15 $$ ICommand build = projectDescription.newCommand()-->Line_15 $$ ICommand build = projectDescription.newCommand()[ CD ]
Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())-->Line_15 $$ ICommand build = projectDescription.newCommand()[ FD ]
Line_15 $$ ICommand build = projectDescription.newCommand()-->Line_16 $$ build.setBuilderName(builderID)[ FD ]
Line_14 $$ for (String builderID : builderIDs) -->Line_16 $$ build.setBuilderName(builderID)[ FD ]
Line_15 $$ ICommand build = projectDescription.newCommand()-->Line_17 $$ buildCMDS[i++] = build[ FD ]
Line_13 $$ int i = 0-->Line_17 $$ buildCMDS[i++] = build[ FD ]
Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())-->Line_19 $$ projectDescription.setBuildSpec(buildCMDS)[ FD ]
Line_12 $$ ICommand[] buildCMDS = new ICommand[builderIDs.size()]-->Line_19 $$ projectDescription.setBuildSpec(buildCMDS)[ FD ]
Line_5 $$ final IProjectDescription projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectPage.getProjectName())-->Line_21 $$ getProject().setDescription(projectDescription, null)[ FD ]
Line_8 $$ List<IClasspathEntry> classpathEntries = new ArrayList<IClasspathEntry>()-->Line_22 $$ addClasspaths(classpathEntries, getProject())[ FD ]
Line_4 $$ IJavaProject javaProject = JavaCore.create(getProject())-->Line_23 $$ javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), null)[ FD ]
Line_8 $$ List<IClasspathEntry> classpathEntries = new ArrayList<IClasspathEntry>()-->Line_23 $$ javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), null)[ FD ]
Line_8 $$ List<IClasspathEntry> classpathEntries = new ArrayList<IClasspathEntry>()-->Line_23 $$ javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), null)[ FD ]
Line_4 $$ IJavaProject javaProject = JavaCore.create(getProject())-->Line_24 $$ javaProject.setOutputLocation(new Path("/" + projectPage.getProjectName() + "/bin"), null)[ FD ]
