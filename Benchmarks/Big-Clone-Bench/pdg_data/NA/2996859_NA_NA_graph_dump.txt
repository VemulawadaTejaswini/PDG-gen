Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ StringBuffer xml[ CD ]
Line_2 $$ public void run() -->Line_4 $$ String tabName[ CD ]
Line_2 $$ public void run() -->Line_5 $$ Element guiElement[ CD ]
Line_2 $$ public void run() -->Line_6 $$ setBold(monitor.getReading())[ CD ]
Line_2 $$ public void run() -->Line_7 $$ setBold(monitor.getReadingStatus())[ CD ]
Line_2 $$ public void run() -->Line_8 $$ monitor.getReadingStatus().setText("      Working")[ CD ]
Line_2 $$ public void run() -->Line_9 $$ HttpMethod method = null[ CD ]
Line_2 $$ public void run() -->Line_10 $$ xml = new StringBuffer()[ CD ]
Line_3 $$ StringBuffer xml-->Line_10 $$ xml = new StringBuffer()[ FD ]
Line_10 $$ xml = new StringBuffer()-->Line_10 $$ xml = new StringBuffer()[ FD ]
Line_2 $$ public void run() -->Line_11 $$ File tempfile = new File(url)[ CD ]
Line_2 $$ public void run() -->Line_12 $$ if (tempfile.exists()) [ CD ]
Line_11 $$ File tempfile = new File(url)-->Line_12 $$ if (tempfile.exists()) [ FD ]
Line_12 $$ if (tempfile.exists()) -->Line_12 $$ if (tempfile.exists()) [ CD ]
Line_11 $$ File tempfile = new File(url)-->Line_12 $$ if (tempfile.exists()) [ FD ]
Line_16 $$ while ((temp = in.read()) != -1) -->Line_16 $$ while ((temp = in.read()) != -1) [ FD ]
Line_15 $$ int temp-->Line_16 $$ while ((temp = in.read()) != -1) [ FD ]
Line_16 $$ while ((temp = in.read()) != -1) -->Line_16 $$ while ((temp = in.read()) != -1) [ CD ]
Line_14 $$ InputStream in = new FileInputStream(tempfile)-->Line_16 $$ while ((temp = in.read()) != -1) [ FD ]
Line_16 $$ while ((temp = in.read()) != -1) -->Line_17 $$ xml.append((char) temp)[ CD ]
Line_3 $$ StringBuffer xml-->Line_17 $$ xml.append((char) temp)[ FD ]
Line_10 $$ xml = new StringBuffer()-->Line_17 $$ xml.append((char) temp)[ FD ]
Line_14 $$ InputStream in = new FileInputStream(tempfile)-->Line_19 $$ in.close()[ FD ]
Line_9 $$ HttpMethod method = null-->Line_28 $$ method = new GetMethod(url)[ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_28 $$ method = new GetMethod(url)[ FD ]
Line_29 $$ int response = client.executeMethod(method)-->Line_29 $$ int response = client.executeMethod(method)[ CD ]
Line_27 $$ HttpClient client = new HttpClient()-->Line_29 $$ int response = client.executeMethod(method)[ FD ]
Line_9 $$ HttpMethod method = null-->Line_29 $$ int response = client.executeMethod(method)[ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_29 $$ int response = client.executeMethod(method)[ FD ]
Line_29 $$ int response = client.executeMethod(method)-->Line_30 $$ if (response == 200) [ FD ]
Line_30 $$ if (response == 200) -->Line_31 $$ InputStream in = method.getResponseBodyAsStream()[ CD ]
Line_9 $$ HttpMethod method = null-->Line_31 $$ InputStream in = method.getResponseBodyAsStream()[ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_31 $$ InputStream in = method.getResponseBodyAsStream()[ FD ]
Line_30 $$ if (response == 200) -->Line_33 $$ while ((temp = in.read()) != -1) [ CD ]
Line_30 $$ if (response == 200) -->Line_30 $$ if (response == 200) [ CD ]
Line_33 $$ while ((temp = in.read()) != -1) -->Line_33 $$ while ((temp = in.read()) != -1) [ FD ]
Line_16 $$ while ((temp = in.read()) != -1) -->Line_33 $$ while ((temp = in.read()) != -1) [ FD ]
Line_15 $$ int temp-->Line_33 $$ while ((temp = in.read()) != -1) [ FD ]
Line_33 $$ while ((temp = in.read()) != -1) -->Line_33 $$ while ((temp = in.read()) != -1) [ CD ]
Line_14 $$ InputStream in = new FileInputStream(tempfile)-->Line_33 $$ while ((temp = in.read()) != -1) [ FD ]
Line_33 $$ while ((temp = in.read()) != -1) -->Line_34 $$ xml.append((char) temp)[ CD ]
Line_3 $$ StringBuffer xml-->Line_34 $$ xml.append((char) temp)[ FD ]
Line_10 $$ xml = new StringBuffer()-->Line_34 $$ xml.append((char) temp)[ FD ]
Line_30 $$ if (response == 200) -->Line_36 $$ in.close()[ CD ]
Line_14 $$ InputStream in = new FileInputStream(tempfile)-->Line_36 $$ in.close()[ FD ]
Line_30 $$ if (response == 200) -->Line_38 $$ if (method != null) [ CD ]
Line_9 $$ HttpMethod method = null-->Line_38 $$ if (method != null) [ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_38 $$ if (method != null) [ FD ]
Line_38 $$ if (method != null) -->Line_39 $$ method.releaseConnection()[ CD ]
Line_9 $$ HttpMethod method = null-->Line_39 $$ method.releaseConnection()[ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_39 $$ method.releaseConnection()[ FD ]
Line_30 $$ if (response == 200) -->Line_41 $$ System.out.println("Loading Monitor Failed. Incorrect response from HTTP Server " + response)[ CD ]
Line_30 $$ if (response == 200) -->Line_42 $$ return[ CD ]
Line_9 $$ HttpMethod method = null-->Line_45 $$ if (method != null) [ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_45 $$ if (method != null) [ FD ]
Line_45 $$ if (method != null) -->Line_46 $$ method.releaseConnection()[ CD ]
Line_9 $$ HttpMethod method = null-->Line_46 $$ method.releaseConnection()[ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_46 $$ method.releaseConnection()[ FD ]
Line_2 $$ public void run() -->Line_53 $$ setPlain(monitor.getReading())[ CD ]
Line_2 $$ public void run() -->Line_54 $$ setPlain(monitor.getReadingStatus())[ CD ]
Line_2 $$ public void run() -->Line_55 $$ monitor.getReadingStatus().setText("      Done")[ CD ]
Line_2 $$ public void run() -->Line_56 $$ setBold(monitor.getValidating())[ CD ]
Line_2 $$ public void run() -->Line_57 $$ setBold(monitor.getValidatingStatus())[ CD ]
Line_2 $$ public void run() -->Line_58 $$ monitor.getValidatingStatus().setText("      Working")[ CD ]
Line_2 $$ public void run() -->Line_59 $$ DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl()[ CD ]
Line_61 $$ DocumentBuilder parser = factory.newDocumentBuilder()-->Line_61 $$ DocumentBuilder parser = factory.newDocumentBuilder()[ CD ]
Line_59 $$ DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl()-->Line_61 $$ DocumentBuilder parser = factory.newDocumentBuilder()[ FD ]
Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()))-->Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()))[ CD ]
Line_61 $$ DocumentBuilder parser = factory.newDocumentBuilder()-->Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()))[ FD ]
Line_3 $$ StringBuffer xml-->Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()))[ FD ]
Line_10 $$ xml = new StringBuffer()-->Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()))[ FD ]
Line_9 $$ HttpMethod method = null-->Line_63 $$ if (method != null) [ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_63 $$ if (method != null) [ FD ]
Line_63 $$ if (method != null) -->Line_64 $$ method.releaseConnection()[ CD ]
Line_9 $$ HttpMethod method = null-->Line_64 $$ method.releaseConnection()[ FD ]
Line_28 $$ method = new GetMethod(url)-->Line_64 $$ method.releaseConnection()[ FD ]
Line_66 $$ Element root = document.getDocumentElement()-->Line_66 $$ Element root = document.getDocumentElement()[ CD ]
Line_62 $$ Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()))-->Line_66 $$ Element root = document.getDocumentElement()[ FD ]
Line_66 $$ Element root = document.getDocumentElement()-->Line_67 $$ NodeList temp = root.getElementsByTagName("resource")[ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ CD ]
Line_33 $$ while ((temp = in.read()) != -1) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ FD ]
Line_16 $$ while ((temp = in.read()) != -1) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ FD ]
Line_15 $$ int temp-->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ CD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ CD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_69 $$ Element resource = (Element) temp.item(j)[ CD ]
Line_33 $$ while ((temp = in.read()) != -1) -->Line_69 $$ Element resource = (Element) temp.item(j)[ FD ]
Line_16 $$ while ((temp = in.read()) != -1) -->Line_69 $$ Element resource = (Element) temp.item(j)[ FD ]
Line_15 $$ int temp-->Line_69 $$ Element resource = (Element) temp.item(j)[ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_69 $$ Element resource = (Element) temp.item(j)[ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_70 $$ resources.add(new URL(resource.getAttribute("url")))[ CD ]
Line_69 $$ Element resource = (Element) temp.item(j)-->Line_70 $$ resources.add(new URL(resource.getAttribute("url")))[ FD ]
Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver")-->Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver")[ CD ]
Line_66 $$ Element root = document.getDocumentElement()-->Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver")[ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ FD ]
Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver")-->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ CD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ CD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_74 $$ Element connection = (Element) connections.item(j)[ CD ]
Line_72 $$ NodeList connections = root.getElementsByTagName("jmxserver")-->Line_74 $$ Element connection = (Element) connections.item(j)[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_74 $$ Element connection = (Element) connections.item(j)[ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_74 $$ Element connection = (Element) connections.item(j)[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_75 $$ String name = connection.getAttribute("name")[ CD ]
Line_75 $$ String name = connection.getAttribute("name")-->Line_75 $$ String name = connection.getAttribute("name")[ CD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_75 $$ String name = connection.getAttribute("name")[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_76 $$ String tempUrl = connection.getAttribute("url")[ CD ]
Line_76 $$ String tempUrl = connection.getAttribute("url")-->Line_76 $$ String tempUrl = connection.getAttribute("url")[ CD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_76 $$ String tempUrl = connection.getAttribute("url")[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_77 $$ String auth = connection.getAttribute("auth")[ CD ]
Line_77 $$ String auth = connection.getAttribute("auth")-->Line_77 $$ String auth = connection.getAttribute("auth")[ CD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_77 $$ String auth = connection.getAttribute("auth")[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_78 $$ if (tempUrl.indexOf("$[ CD ]
Line_76 $$ String tempUrl = connection.getAttribute("url")-->Line_78 $$ if (tempUrl.indexOf("$[ FD ]
Line_78 $$ if (tempUrl.indexOf("$-->Line_79 $$ HostDialog dialog = new HostDialog(Config.getHosts())[ CD ]
Line_78 $$ if (tempUrl.indexOf("$-->Line_80 $$ String host = dialog.showDialog()[ CD ]
Line_80 $$ String host = dialog.showDialog()-->Line_80 $$ String host = dialog.showDialog()[ CD ]
Line_79 $$ HostDialog dialog = new HostDialog(Config.getHosts())-->Line_80 $$ String host = dialog.showDialog()[ FD ]
Line_78 $$ if (tempUrl.indexOf("$-->Line_81 $$ if (host == null) [ CD ]
Line_80 $$ String host = dialog.showDialog()-->Line_81 $$ if (host == null) [ FD ]
Line_81 $$ if (host == null) -->Line_82 $$ System.out.println("Host can not be null, unable to create panel.")[ CD ]
Line_81 $$ if (host == null) -->Line_83 $$ return[ CD ]
Line_78 $$ if (tempUrl.indexOf("$-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ CD ]
Line_76 $$ String tempUrl = connection.getAttribute("url")-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ CD ]
Line_76 $$ String tempUrl = connection.getAttribute("url")-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_80 $$ String host = dialog.showDialog()-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_78 $$ if (tempUrl.indexOf("$-->Line_86 $$ Config.addHost(host)[ CD ]
Line_80 $$ String host = dialog.showDialog()-->Line_86 $$ Config.addHost(host)[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_88 $$ JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl)[ CD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))[ CD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) [ CD ]
Line_77 $$ String auth = connection.getAttribute("auth")-->Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) [ FD ]
Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) -->Line_91 $$ LoginTrueService loginService = new LoginTrueService()[ CD ]
Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) -->Line_92 $$ JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService)[ CD ]
Line_92 $$ JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService)-->Line_92 $$ JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService)[ CD ]
Line_91 $$ LoginTrueService loginService = new LoginTrueService()-->Line_92 $$ JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService)[ FD ]
Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) -->Line_93 $$ if (status != JXLoginPanel.Status.SUCCEEDED) [ CD ]
Line_92 $$ JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService)-->Line_93 $$ if (status != JXLoginPanel.Status.SUCCEEDED) [ FD ]
Line_93 $$ if (status != JXLoginPanel.Status.SUCCEEDED) -->Line_94 $$ return[ CD ]
Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) -->Line_96 $$ server.setUsername(loginService.getName())[ CD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_96 $$ server.setUsername(loginService.getName())[ FD ]
Line_91 $$ LoginTrueService loginService = new LoginTrueService()-->Line_96 $$ server.setUsername(loginService.getName())[ FD ]
Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) -->Line_97 $$ server.setPassword(loginService.getPassword())[ CD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_97 $$ server.setPassword(loginService.getPassword())[ FD ]
Line_91 $$ LoginTrueService loginService = new LoginTrueService()-->Line_97 $$ server.setPassword(loginService.getPassword())[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_99 $$ servers.put(name, server)[ CD ]
Line_75 $$ String name = connection.getAttribute("name")-->Line_99 $$ servers.put(name, server)[ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_99 $$ servers.put(name, server)[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_100 $$ NodeList listeners = connection.getElementsByTagName("listener")[ CD ]
Line_100 $$ NodeList listeners = connection.getElementsByTagName("listener")-->Line_100 $$ NodeList listeners = connection.getElementsByTagName("listener")[ CD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_100 $$ NodeList listeners = connection.getElementsByTagName("listener")[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ CD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ CD ]
Line_100 $$ NodeList listeners = connection.getElementsByTagName("listener")-->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_102 $$ Element attribute = (Element) listeners.item(i)[ CD ]
Line_100 $$ NodeList listeners = connection.getElementsByTagName("listener")-->Line_102 $$ Element attribute = (Element) listeners.item(i)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_102 $$ Element attribute = (Element) listeners.item(i)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_103 $$ String taskname = attribute.getAttribute("taskname")[ CD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_103 $$ String taskname = attribute.getAttribute("taskname")[ CD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_103 $$ String taskname = attribute.getAttribute("taskname")[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)[ CD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_105 $$ String filtertype = attribute.getAttribute("filterType")[ CD ]
Line_105 $$ String filtertype = attribute.getAttribute("filterType")-->Line_105 $$ String filtertype = attribute.getAttribute("filterType")[ CD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_105 $$ String filtertype = attribute.getAttribute("filterType")[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()[ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()[ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_108 $$ if (filtertype == null || "".equals(filtertype)) [ CD ]
Line_105 $$ String filtertype = attribute.getAttribute("filterType")-->Line_108 $$ if (filtertype == null || "".equals(filtertype)) [ FD ]
Line_108 $$ if (filtertype == null || "".equals(filtertype)) -->Line_109 $$ filter = null[ CD ]
Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()-->Line_109 $$ filter = null[ FD ]
Line_109 $$ filter = null-->Line_109 $$ filter = null[ FD ]
Line_108 $$ if (filtertype == null || "".equals(filtertype)) -->Line_111 $$ filter.enableType(filtertype)[ CD ]
Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()-->Line_111 $$ filter.enableType(filtertype)[ FD ]
Line_109 $$ filter = null-->Line_111 $$ filter.enableType(filtertype)[ FD ]
Line_105 $$ String filtertype = attribute.getAttribute("filterType")-->Line_111 $$ filter.enableType(filtertype)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)[ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_114 $$ task.setMbean(mbean)[ CD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_114 $$ task.setMbean(mbean)[ FD ]
Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_114 $$ task.setMbean(mbean)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_115 $$ task.setListener(listener)[ CD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_115 $$ task.setListener(listener)[ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_115 $$ task.setListener(listener)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_116 $$ task.setFilter(filter)[ CD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_116 $$ task.setFilter(filter)[ FD ]
Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()-->Line_116 $$ task.setFilter(filter)[ FD ]
Line_109 $$ filter = null-->Line_116 $$ task.setFilter(filter)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_117 $$ server.getWorker().addTask(task)[ CD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_117 $$ server.getWorker().addTask(task)[ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_117 $$ server.getWorker().addTask(task)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_118 $$ if (tasks.get(taskname) != null) [ CD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_118 $$ if (tasks.get(taskname) != null) [ FD ]
Line_118 $$ if (tasks.get(taskname) != null) -->Line_119 $$ System.out.println("Task " + taskname + " already exists.")[ CD ]
Line_118 $$ if (tasks.get(taskname) != null) -->Line_120 $$ return[ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()[ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_123 $$ hashTempList.add(task)[ CD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_123 $$ hashTempList.add(task)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_123 $$ hashTempList.add(task)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_124 $$ tasks.put(taskname, hashTempList)[ CD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_124 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_124 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_126 $$ NodeList attributes = connection.getElementsByTagName("attribute")[ CD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_126 $$ NodeList attributes = connection.getElementsByTagName("attribute")[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ CD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ CD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ CD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ CD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_128 $$ Element attribute = (Element) attributes.item(i)[ CD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_128 $$ Element attribute = (Element) attributes.item(i)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_128 $$ Element attribute = (Element) attributes.item(i)[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_129 $$ String taskname = attribute.getAttribute("taskname")[ CD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_129 $$ String taskname = attribute.getAttribute("taskname")[ CD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_129 $$ String taskname = attribute.getAttribute("taskname")[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_129 $$ String taskname = attribute.getAttribute("taskname")[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)[ CD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_131 $$ String attributename = attribute.getAttribute("attributename")[ CD ]
Line_131 $$ String attributename = attribute.getAttribute("attributename")-->Line_131 $$ String attributename = attribute.getAttribute("attributename")[ CD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_131 $$ String attributename = attribute.getAttribute("attributename")[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_131 $$ String attributename = attribute.getAttribute("attributename")[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_132 $$ String frequency = attribute.getAttribute("frequency")[ CD ]
Line_132 $$ String frequency = attribute.getAttribute("frequency")-->Line_132 $$ String frequency = attribute.getAttribute("frequency")[ CD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_132 $$ String frequency = attribute.getAttribute("frequency")[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_132 $$ String frequency = attribute.getAttribute("frequency")[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_133 $$ String onEvent = attribute.getAttribute("onEvent")[ CD ]
Line_133 $$ String onEvent = attribute.getAttribute("onEvent")-->Line_133 $$ String onEvent = attribute.getAttribute("onEvent")[ CD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_133 $$ String onEvent = attribute.getAttribute("onEvent")[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_133 $$ String onEvent = attribute.getAttribute("onEvent")[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) [ CD ]
Line_132 $$ String frequency = attribute.getAttribute("frequency")-->Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) [ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) [ CD ]
Line_132 $$ String frequency = attribute.getAttribute("frequency")-->Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) [ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_136 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter()[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_137 $$ filter.enableAttribute(attributename)[ CD ]
Line_136 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter()-->Line_137 $$ filter.enableAttribute(attributename)[ FD ]
Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()-->Line_137 $$ filter.enableAttribute(attributename)[ FD ]
Line_109 $$ filter = null-->Line_137 $$ filter.enableAttribute(attributename)[ FD ]
Line_131 $$ String attributename = attribute.getAttribute("attributename")-->Line_137 $$ filter.enableAttribute(attributename)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_139 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename)[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_140 $$ task.setAttribute(att)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_140 $$ task.setAttribute(att)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_140 $$ task.setAttribute(att)[ FD ]
Line_139 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename)-->Line_140 $$ task.setAttribute(att)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_141 $$ task.setMbean(mbean)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_141 $$ task.setMbean(mbean)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_141 $$ task.setMbean(mbean)[ FD ]
Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_141 $$ task.setMbean(mbean)[ FD ]
Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_141 $$ task.setMbean(mbean)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_142 $$ task.setListener(listener)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_142 $$ task.setListener(listener)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_142 $$ task.setListener(listener)[ FD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_142 $$ task.setListener(listener)[ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_142 $$ task.setListener(listener)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_143 $$ task.setFilter(filter)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_143 $$ task.setFilter(filter)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_143 $$ task.setFilter(filter)[ FD ]
Line_136 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter()-->Line_143 $$ task.setFilter(filter)[ FD ]
Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()-->Line_143 $$ task.setFilter(filter)[ FD ]
Line_109 $$ filter = null-->Line_143 $$ task.setFilter(filter)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_144 $$ server.getWorker().addTask(task)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_144 $$ server.getWorker().addTask(task)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_144 $$ server.getWorker().addTask(task)[ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_144 $$ server.getWorker().addTask(task)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_145 $$ if (tasks.get(taskname) != null) [ CD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_145 $$ if (tasks.get(taskname) != null) [ FD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_145 $$ if (tasks.get(taskname) != null) [ FD ]
Line_145 $$ if (tasks.get(taskname) != null) -->Line_146 $$ System.out.println("Task " + taskname + " already exists.")[ CD ]
Line_145 $$ if (tasks.get(taskname) != null) -->Line_147 $$ return[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_150 $$ task2.setAttribute(att)[ CD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_150 $$ task2.setAttribute(att)[ FD ]
Line_139 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename)-->Line_150 $$ task2.setAttribute(att)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_151 $$ task2.setMbean(mbean)[ CD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_151 $$ task2.setMbean(mbean)[ FD ]
Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_151 $$ task2.setMbean(mbean)[ FD ]
Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_151 $$ task2.setMbean(mbean)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_152 $$ server.getWorker().addTask(task2)[ CD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_152 $$ server.getWorker().addTask(task2)[ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_152 $$ server.getWorker().addTask(task2)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_154 $$ hashTempList.add(task)[ CD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_154 $$ hashTempList.add(task)[ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_154 $$ hashTempList.add(task)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_154 $$ hashTempList.add(task)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_154 $$ hashTempList.add(task)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_155 $$ hashTempList.add(task2)[ CD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_155 $$ hashTempList.add(task2)[ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_155 $$ hashTempList.add(task2)[ FD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_155 $$ hashTempList.add(task2)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_156 $$ tasks.put(taskname, hashTempList)[ CD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_156 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_156 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_156 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_156 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_158 $$ int frequency2 = Integer.parseInt(frequency)[ CD ]
Line_158 $$ int frequency2 = Integer.parseInt(frequency)-->Line_158 $$ int frequency2 = Integer.parseInt(frequency)[ CD ]
Line_132 $$ String frequency = attribute.getAttribute("frequency")-->Line_158 $$ int frequency2 = Integer.parseInt(frequency)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_161 $$ task.setAttribute(att)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_161 $$ task.setAttribute(att)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_161 $$ task.setAttribute(att)[ FD ]
Line_139 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename)-->Line_161 $$ task.setAttribute(att)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_162 $$ task.setMbean(mbean)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_162 $$ task.setMbean(mbean)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_162 $$ task.setMbean(mbean)[ FD ]
Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_162 $$ task.setMbean(mbean)[ FD ]
Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_162 $$ task.setMbean(mbean)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_163 $$ if (tasks.get(taskname) != null) [ CD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_163 $$ if (tasks.get(taskname) != null) [ FD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_163 $$ if (tasks.get(taskname) != null) [ FD ]
Line_163 $$ if (tasks.get(taskname) != null) -->Line_164 $$ System.out.println("Task " + taskname + " already exists.")[ CD ]
Line_163 $$ if (tasks.get(taskname) != null) -->Line_165 $$ return[ CD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_168 $$ hashTempList.add(task)[ CD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_168 $$ hashTempList.add(task)[ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_168 $$ hashTempList.add(task)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_168 $$ hashTempList.add(task)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_168 $$ hashTempList.add(task)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_169 $$ tasks.put(taskname, hashTempList)[ CD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_169 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_169 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_169 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_169 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_171 $$ if (onEvent != null && !"".equals(onEvent)) [ CD ]
Line_171 $$ if (onEvent != null && !"".equals(onEvent)) -->Line_171 $$ if (onEvent != null && !"".equals(onEvent)) [ CD ]
Line_133 $$ String onEvent = attribute.getAttribute("onEvent")-->Line_171 $$ if (onEvent != null && !"".equals(onEvent)) [ FD ]
Line_171 $$ if (onEvent != null && !"".equals(onEvent)) -->Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)[ CD ]
Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)-->Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)[ CD ]
Line_133 $$ String onEvent = attribute.getAttribute("onEvent")-->Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)[ FD ]
Line_171 $$ if (onEvent != null && !"".equals(onEvent)) -->Line_173 $$ if (tempTask == null) [ CD ]
Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)-->Line_173 $$ if (tempTask == null) [ FD ]
Line_173 $$ if (tempTask == null) -->Line_174 $$ System.out.println(onEvent + " was not found.")[ CD ]
Line_173 $$ if (tempTask == null) -->Line_175 $$ return[ CD ]
Line_173 $$ if (tempTask == null) -->Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()[ CD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()[ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()[ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()[ FD ]
Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)-->Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()[ FD ]
Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) -->Line_180 $$ if (listener == null) [ CD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_180 $$ if (listener == null) [ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_180 $$ if (listener == null) [ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_180 $$ if (listener == null) [ FD ]
Line_180 $$ if (listener == null) -->Line_181 $$ server.getWorker().addTask(task)[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_181 $$ server.getWorker().addTask(task)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_181 $$ server.getWorker().addTask(task)[ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_181 $$ server.getWorker().addTask(task)[ FD ]
Line_180 $$ if (listener == null) -->Line_183 $$ listener.addTask(task)[ CD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_183 $$ listener.addTask(task)[ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_183 $$ listener.addTask(task)[ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_183 $$ listener.addTask(task)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_183 $$ listener.addTask(task)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_183 $$ listener.addTask(task)[ FD ]
Line_188 $$ NodeList guiTemp = root.getElementsByTagName("gui")-->Line_188 $$ NodeList guiTemp = root.getElementsByTagName("gui")[ CD ]
Line_66 $$ Element root = document.getDocumentElement()-->Line_188 $$ NodeList guiTemp = root.getElementsByTagName("gui")[ FD ]
Line_5 $$ Element guiElement-->Line_189 $$ guiElement = (Element) guiTemp.item(0)[ FD ]
Line_189 $$ guiElement = (Element) guiTemp.item(0)-->Line_189 $$ guiElement = (Element) guiTemp.item(0)[ FD ]
Line_188 $$ NodeList guiTemp = root.getElementsByTagName("gui")-->Line_189 $$ guiElement = (Element) guiTemp.item(0)[ FD ]
Line_4 $$ String tabName-->Line_190 $$ tabName = guiElement.getAttribute("name")[ FD ]
Line_190 $$ tabName = guiElement.getAttribute("name")-->Line_190 $$ tabName = guiElement.getAttribute("name")[ FD ]
Line_190 $$ tabName = guiElement.getAttribute("name")-->Line_190 $$ tabName = guiElement.getAttribute("name")[ CD ]
Line_5 $$ Element guiElement-->Line_190 $$ tabName = guiElement.getAttribute("name")[ FD ]
Line_189 $$ guiElement = (Element) guiTemp.item(0)-->Line_190 $$ tabName = guiElement.getAttribute("name")[ FD ]
Line_4 $$ String tabName-->Line_191 $$ if (MonitorServer.contains(tabName)) [ FD ]
Line_190 $$ tabName = guiElement.getAttribute("name")-->Line_191 $$ if (MonitorServer.contains(tabName)) [ FD ]
Line_191 $$ if (MonitorServer.contains(tabName)) -->Line_191 $$ if (MonitorServer.contains(tabName)) [ CD ]
Line_4 $$ String tabName-->Line_191 $$ if (MonitorServer.contains(tabName)) [ FD ]
Line_190 $$ tabName = guiElement.getAttribute("name")-->Line_191 $$ if (MonitorServer.contains(tabName)) [ FD ]
Line_191 $$ if (MonitorServer.contains(tabName)) -->Line_192 $$ JOptionPane.showMessageDialog(null, "This panel is already open, stoping creating of panel.", "Panel already exists", JOptionPane.ERROR_MESSAGE)[ CD ]
Line_191 $$ if (MonitorServer.contains(tabName)) -->Line_193 $$ return[ CD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ CD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ CD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ CD ]
Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) -->Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ CD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) -->Line_197 $$ monitor.getTab().setTitleAt(i, tabName)[ CD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_197 $$ monitor.getTab().setTitleAt(i, tabName)[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_197 $$ monitor.getTab().setTitleAt(i, tabName)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_197 $$ monitor.getTab().setTitleAt(i, tabName)[ FD ]
Line_4 $$ String tabName-->Line_197 $$ monitor.getTab().setTitleAt(i, tabName)[ FD ]
Line_190 $$ tabName = guiElement.getAttribute("name")-->Line_197 $$ monitor.getTab().setTitleAt(i, tabName)[ FD ]
Line_201 $$ NodeList tempBindings = root.getElementsByTagName("binding")-->Line_201 $$ NodeList tempBindings = root.getElementsByTagName("binding")[ CD ]
Line_66 $$ Element root = document.getDocumentElement()-->Line_201 $$ NodeList tempBindings = root.getElementsByTagName("binding")[ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_201 $$ NodeList tempBindings = root.getElementsByTagName("binding")-->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ CD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ CD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_203 $$ Element binding = (Element) tempBindings.item(i)[ CD ]
Line_201 $$ NodeList tempBindings = root.getElementsByTagName("binding")-->Line_203 $$ Element binding = (Element) tempBindings.item(i)[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_203 $$ Element binding = (Element) tempBindings.item(i)[ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_203 $$ Element binding = (Element) tempBindings.item(i)[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_203 $$ Element binding = (Element) tempBindings.item(i)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_203 $$ Element binding = (Element) tempBindings.item(i)[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_204 $$ String guiname = binding.getAttribute("guiname")[ CD ]
Line_204 $$ String guiname = binding.getAttribute("guiname")-->Line_204 $$ String guiname = binding.getAttribute("guiname")[ CD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_204 $$ String guiname = binding.getAttribute("guiname")[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_205 $$ String tmethod = binding.getAttribute("method")[ CD ]
Line_205 $$ String tmethod = binding.getAttribute("method")-->Line_205 $$ String tmethod = binding.getAttribute("method")[ CD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_205 $$ String tmethod = binding.getAttribute("method")[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_206 $$ String taskname = binding.getAttribute("taskname")[ CD ]
Line_206 $$ String taskname = binding.getAttribute("taskname")-->Line_206 $$ String taskname = binding.getAttribute("taskname")[ CD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_206 $$ String taskname = binding.getAttribute("taskname")[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_207 $$ String formater = binding.getAttribute("formater")[ CD ]
Line_207 $$ String formater = binding.getAttribute("formater")-->Line_207 $$ String formater = binding.getAttribute("formater")[ CD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_207 $$ String formater = binding.getAttribute("formater")[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_208 $$ BindingContainer tempBinding[ CD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_209 $$ if (formater == null || (formater != null && formater.equals(""))) [ CD ]
Line_207 $$ String formater = binding.getAttribute("formater")-->Line_209 $$ if (formater == null || (formater != null && formater.equals(""))) [ FD ]
Line_209 $$ if (formater == null || (formater != null && formater.equals(""))) -->Line_210 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname)[ CD ]
Line_208 $$ BindingContainer tempBinding-->Line_210 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname)[ FD ]
Line_210 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname)-->Line_210 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname)[ FD ]
Line_209 $$ if (formater == null || (formater != null && formater.equals(""))) -->Line_212 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater)[ CD ]
Line_208 $$ BindingContainer tempBinding-->Line_212 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater)[ FD ]
Line_210 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname)-->Line_212 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater)[ FD ]
Line_212 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater)-->Line_212 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater)[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_214 $$ bindings.add(tempBinding)[ CD ]
Line_208 $$ BindingContainer tempBinding-->Line_214 $$ bindings.add(tempBinding)[ FD ]
Line_210 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname)-->Line_214 $$ bindings.add(tempBinding)[ FD ]
Line_212 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater)-->Line_214 $$ bindings.add(tempBinding)[ FD ]
Line_2 $$ public void run() -->Line_222 $$ setPlain(monitor.getValidating())[ CD ]
Line_2 $$ public void run() -->Line_223 $$ setPlain(monitor.getValidatingStatus())[ CD ]
Line_2 $$ public void run() -->Line_224 $$ monitor.getValidatingStatus().setText("      Done")[ CD ]
Line_2 $$ public void run() -->Line_225 $$ setBold(monitor.getDownload())[ CD ]
Line_2 $$ public void run() -->Line_226 $$ setBold(monitor.getDownloadStatus())[ CD ]
Line_2 $$ public void run() -->Line_227 $$ monitor.getDownloadStatus().setText("      Working")[ CD ]
Line_2 $$ public void run() -->Line_228 $$ List<File> jarFiles = new ArrayList<File>()[ CD ]
Line_2 $$ public void run() -->Line_229 $$ File cacheDir = new File(Config.getCacheDir())[ CD ]
Line_2 $$ public void run() -->Line_230 $$ if (!cacheDir.exists()) [ CD ]
Line_230 $$ if (!cacheDir.exists()) -->Line_230 $$ if (!cacheDir.exists()) [ CD ]
Line_230 $$ if (!cacheDir.exists()) -->Line_230 $$ if (!cacheDir.exists()) [ CD ]
Line_229 $$ File cacheDir = new File(Config.getCacheDir())-->Line_230 $$ if (!cacheDir.exists()) [ FD ]
Line_230 $$ if (!cacheDir.exists()) -->Line_231 $$ cacheDir.mkdir()[ CD ]
Line_229 $$ File cacheDir = new File(Config.getCacheDir())-->Line_231 $$ cacheDir.mkdir()[ FD ]
Line_233 $$ for (URL resUrl : resources) -->Line_236 $$ HttpMethod methodRes = new GetMethod(resUrl.toString())[ FD ]
Line_27 $$ HttpClient client = new HttpClient()-->Line_237 $$ int response = client.executeMethod(methodRes)[ FD ]
Line_236 $$ HttpMethod methodRes = new GetMethod(resUrl.toString())-->Line_237 $$ int response = client.executeMethod(methodRes)[ FD ]
Line_29 $$ int response = client.executeMethod(method)-->Line_238 $$ if (response == 200) [ FD ]
Line_238 $$ if (response == 200) -->Line_239 $$ int index = resUrl.toString().lastIndexOf("/") + 1[ CD ]
Line_233 $$ for (URL resUrl : resources) -->Line_239 $$ int index = resUrl.toString().lastIndexOf("/") + 1[ FD ]
Line_238 $$ if (response == 200) -->Line_240 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index))[ CD ]
Line_239 $$ int index = resUrl.toString().lastIndexOf("/") + 1-->Line_240 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index))[ FD ]
Line_233 $$ for (URL resUrl : resources) -->Line_240 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index))[ FD ]
Line_238 $$ if (response == 200) -->Line_241 $$ FileOutputStream out = new FileOutputStream(file)[ CD ]
Line_238 $$ if (response == 200) -->Line_242 $$ InputStream in = methodRes.getResponseBodyAsStream()[ CD ]
Line_236 $$ HttpMethod methodRes = new GetMethod(resUrl.toString())-->Line_242 $$ InputStream in = methodRes.getResponseBodyAsStream()[ FD ]
Line_238 $$ if (response == 200) -->Line_243 $$ int readTemp = 0[ CD ]
Line_238 $$ if (response == 200) -->Line_244 $$ while ((readTemp = in.read()) != -1) [ CD ]
Line_238 $$ if (response == 200) -->Line_238 $$ if (response == 200) [ CD ]
Line_244 $$ while ((readTemp = in.read()) != -1) -->Line_244 $$ while ((readTemp = in.read()) != -1) [ FD ]
Line_243 $$ int readTemp = 0-->Line_244 $$ while ((readTemp = in.read()) != -1) [ FD ]
Line_244 $$ while ((readTemp = in.read()) != -1) -->Line_244 $$ while ((readTemp = in.read()) != -1) [ CD ]
Line_14 $$ InputStream in = new FileInputStream(tempfile)-->Line_244 $$ while ((readTemp = in.read()) != -1) [ FD ]
Line_244 $$ while ((readTemp = in.read()) != -1) -->Line_245 $$ out.write(readTemp)[ CD ]
Line_241 $$ FileOutputStream out = new FileOutputStream(file)-->Line_245 $$ out.write(readTemp)[ FD ]
Line_244 $$ while ((readTemp = in.read()) != -1) -->Line_245 $$ out.write(readTemp)[ FD ]
Line_243 $$ int readTemp = 0-->Line_245 $$ out.write(readTemp)[ FD ]
Line_238 $$ if (response == 200) -->Line_247 $$ System.out.println(file.getName() + " downloaded.")[ CD ]
Line_240 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index))-->Line_247 $$ System.out.println(file.getName() + " downloaded.")[ FD ]
Line_238 $$ if (response == 200) -->Line_248 $$ methodRes.releaseConnection()[ CD ]
Line_236 $$ HttpMethod methodRes = new GetMethod(resUrl.toString())-->Line_248 $$ methodRes.releaseConnection()[ FD ]
Line_238 $$ if (response == 200) -->Line_249 $$ if (file.getName().endsWith(".jar")) [ CD ]
Line_249 $$ if (file.getName().endsWith(".jar")) -->Line_249 $$ if (file.getName().endsWith(".jar")) [ CD ]
Line_240 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index))-->Line_249 $$ if (file.getName().endsWith(".jar")) [ FD ]
Line_249 $$ if (file.getName().endsWith(".jar")) -->Line_250 $$ jarFiles.add(file)[ CD ]
Line_228 $$ List<File> jarFiles = new ArrayList<File>()-->Line_250 $$ jarFiles.add(file)[ FD ]
Line_240 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index))-->Line_250 $$ jarFiles.add(file)[ FD ]
Line_238 $$ if (response == 200) -->Line_253 $$ methodRes.releaseConnection()[ CD ]
Line_236 $$ HttpMethod methodRes = new GetMethod(resUrl.toString())-->Line_253 $$ methodRes.releaseConnection()[ FD ]
Line_238 $$ if (response == 200) -->Line_254 $$ System.out.println("Loading Monitor Failed. Unable to get resource " + url)[ CD ]
Line_238 $$ if (response == 200) -->Line_255 $$ return[ CD ]
Line_2 $$ public void run() -->Line_263 $$ URL[] urls = new URL[jarFiles.size()][ CD ]
Line_228 $$ List<File> jarFiles = new ArrayList<File>()-->Line_263 $$ URL[] urls = new URL[jarFiles.size()][ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_228 $$ List<File> jarFiles = new ArrayList<File>()-->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_266 $$ File file = jarFiles.get(i)[ CD ]
Line_266 $$ File file = jarFiles.get(i)-->Line_266 $$ File file = jarFiles.get(i)[ CD ]
Line_228 $$ List<File> jarFiles = new ArrayList<File>()-->Line_266 $$ File file = jarFiles.get(i)[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_266 $$ File file = jarFiles.get(i)[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_266 $$ File file = jarFiles.get(i)[ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_266 $$ File file = jarFiles.get(i)[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_266 $$ File file = jarFiles.get(i)[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_266 $$ File file = jarFiles.get(i)[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_267 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName())[ CD ]
Line_266 $$ File file = jarFiles.get(i)-->Line_267 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName())[ FD ]
Line_240 $$ File file = new File(Config.getCacheDir() + resUrl.toString().substring(index))-->Line_267 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName())[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_268 $$ FileInputStream in = new FileInputStream(file)[ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_269 $$ FileOutputStream out = new FileOutputStream(newFile)[ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_270 $$ int n = 0[ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_271 $$ byte[] buf = new byte[1024][ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) [ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ CD ]
Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) -->Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) [ FD ]
Line_270 $$ int n = 0-->Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) [ FD ]
Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) -->Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) [ CD ]
Line_268 $$ FileInputStream in = new FileInputStream(file)-->Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) [ FD ]
Line_14 $$ InputStream in = new FileInputStream(tempfile)-->Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) [ FD ]
Line_271 $$ byte[] buf = new byte[1024]-->Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) [ FD ]
Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) -->Line_273 $$ out.write(buf, 0, n)[ CD ]
Line_269 $$ FileOutputStream out = new FileOutputStream(newFile)-->Line_273 $$ out.write(buf, 0, n)[ FD ]
Line_241 $$ FileOutputStream out = new FileOutputStream(file)-->Line_273 $$ out.write(buf, 0, n)[ FD ]
Line_271 $$ byte[] buf = new byte[1024]-->Line_273 $$ out.write(buf, 0, n)[ FD ]
Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) -->Line_273 $$ out.write(buf, 0, n)[ FD ]
Line_270 $$ int n = 0-->Line_273 $$ out.write(buf, 0, n)[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_275 $$ out.close()[ CD ]
Line_269 $$ FileOutputStream out = new FileOutputStream(newFile)-->Line_275 $$ out.close()[ FD ]
Line_241 $$ FileOutputStream out = new FileOutputStream(file)-->Line_275 $$ out.close()[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_276 $$ out.close()[ CD ]
Line_269 $$ FileOutputStream out = new FileOutputStream(newFile)-->Line_276 $$ out.close()[ FD ]
Line_241 $$ FileOutputStream out = new FileOutputStream(file)-->Line_276 $$ out.close()[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_277 $$ in.close()[ CD ]
Line_268 $$ FileInputStream in = new FileInputStream(file)-->Line_277 $$ in.close()[ FD ]
Line_14 $$ InputStream in = new FileInputStream(tempfile)-->Line_277 $$ in.close()[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_278 $$ urls[i] = new URL("file:" + newFile.getAbsolutePath())[ CD ]
Line_267 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName())-->Line_278 $$ urls[i] = new URL("file:" + newFile.getAbsolutePath())[ FD ]
Line_2 $$ public void run() -->Line_284 $$ URLClassLoader loader = new URLClassLoader(urls)[ CD ]
Line_2 $$ public void run() -->Line_285 $$ engine.setClassLoader(loader)[ CD ]
Line_284 $$ URLClassLoader loader = new URLClassLoader(urls)-->Line_285 $$ engine.setClassLoader(loader)[ FD ]
Line_2 $$ public void run() -->Line_286 $$ setPlain(monitor.getDownload())[ CD ]
Line_2 $$ public void run() -->Line_287 $$ setPlain(monitor.getDownloadStatus())[ CD ]
Line_2 $$ public void run() -->Line_288 $$ monitor.getDownloadStatus().setText("      Done")[ CD ]
Line_2 $$ public void run() -->Line_289 $$ setBold(monitor.getGui())[ CD ]
Line_2 $$ public void run() -->Line_290 $$ setBold(monitor.getGuiStatus())[ CD ]
Line_2 $$ public void run() -->Line_291 $$ monitor.getGuiStatus().setText("      Working")[ CD ]
Line_2 $$ public void run() -->Line_292 $$ Container container[ CD ]
Line_294 $$ String tempXml = xml.toString()-->Line_294 $$ String tempXml = xml.toString()[ CD ]
Line_3 $$ StringBuffer xml-->Line_294 $$ String tempXml = xml.toString()[ FD ]
Line_10 $$ xml = new StringBuffer()-->Line_294 $$ String tempXml = xml.toString()[ FD ]
Line_295 $$ int start = tempXml.indexOf("<gui")-->Line_295 $$ int start = tempXml.indexOf("<gui")[ CD ]
Line_294 $$ String tempXml = xml.toString()-->Line_295 $$ int start = tempXml.indexOf("<gui")[ FD ]
Line_295 $$ int start = tempXml.indexOf("<gui")-->Line_296 $$ start = tempXml.indexOf('>', start) + 1[ FD ]
Line_296 $$ start = tempXml.indexOf('>', start) + 1-->Line_296 $$ start = tempXml.indexOf('>', start) + 1[ FD ]
Line_294 $$ String tempXml = xml.toString()-->Line_296 $$ start = tempXml.indexOf('>', start) + 1[ FD ]
Line_295 $$ int start = tempXml.indexOf("<gui")-->Line_296 $$ start = tempXml.indexOf('>', start) + 1[ FD ]
Line_296 $$ start = tempXml.indexOf('>', start) + 1-->Line_296 $$ start = tempXml.indexOf('>', start) + 1[ FD ]
Line_297 $$ int end = tempXml.indexOf("</gui>")-->Line_297 $$ int end = tempXml.indexOf("</gui>")[ CD ]
Line_294 $$ String tempXml = xml.toString()-->Line_297 $$ int end = tempXml.indexOf("</gui>")[ FD ]
Line_292 $$ Container container-->Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))[ FD ]
Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))-->Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))[ FD ]
Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))-->Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))[ CD ]
Line_294 $$ String tempXml = xml.toString()-->Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))[ FD ]
Line_295 $$ int start = tempXml.indexOf("<gui")-->Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))[ FD ]
Line_296 $$ start = tempXml.indexOf('>', start) + 1-->Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))[ FD ]
Line_297 $$ int end = tempXml.indexOf("</gui>")-->Line_298 $$ container = engine.render(new StringReader(tempXml.substring(start, end)))[ FD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_306 $$ List<Task> temp = tasks.get(bcon.getTask())[ FD ]
Line_33 $$ while ((temp = in.read()) != -1) -->Line_307 $$ if (temp == null) [ FD ]
Line_16 $$ while ((temp = in.read()) != -1) -->Line_307 $$ if (temp == null) [ FD ]
Line_15 $$ int temp-->Line_307 $$ if (temp == null) [ FD ]
Line_307 $$ if (temp == null) -->Line_308 $$ System.out.println("Task with name " + bcon.getTask() + " doesnt exist.")[ CD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_308 $$ System.out.println("Task with name " + bcon.getTask() + " doesnt exist.")[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_311 $$ if (task != null) [ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_311 $$ if (task != null) [ FD ]
Line_310 $$ for (Task task : temp) -->Line_311 $$ if (task != null) [ FD ]
Line_311 $$ if (task != null) -->Line_312 $$ Object comp = engine.find(bcon.getComponent())[ CD ]
Line_312 $$ Object comp = engine.find(bcon.getComponent())-->Line_312 $$ Object comp = engine.find(bcon.getComponent())[ CD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_312 $$ Object comp = engine.find(bcon.getComponent())[ FD ]
Line_311 $$ if (task != null) -->Line_313 $$ if (comp != null) [ CD ]
Line_312 $$ Object comp = engine.find(bcon.getComponent())-->Line_313 $$ if (comp != null) [ FD ]
Line_313 $$ if (comp != null) -->Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [ FD ]
Line_310 $$ for (Task task : temp) -->Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [ FD ]
Line_310 $$ for (Task task : temp) -->Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) [ FD ]
Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) -->Line_315 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener()[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_315 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener()[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_315 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener()[ FD ]
Line_310 $$ for (Task task : temp) -->Line_315 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener()[ FD ]
Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) -->Line_316 $$ if (bcon.getFormater() == null) [ CD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_316 $$ if (bcon.getFormater() == null) [ FD ]
Line_316 $$ if (bcon.getFormater() == null) -->Line_317 $$ listener.addResultListener(new Binding(comp, bcon.getMethod()))[ CD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_317 $$ listener.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_317 $$ listener.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_317 $$ listener.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_315 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener()-->Line_317 $$ listener.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_317 $$ listener.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_316 $$ if (bcon.getFormater() == null) -->Line_319 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ CD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_319 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_319 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_319 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_315 $$ TaskNotificationListener listener = (TaskNotificationListener) task.getListener()-->Line_319 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_319 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_319 $$ listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_314 $$ if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) -->Line_322 $$ if (bcon.getFormater() == null) [ CD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_322 $$ if (bcon.getFormater() == null) [ FD ]
Line_322 $$ if (bcon.getFormater() == null) -->Line_323 $$ task.addResultListener(new Binding(comp, bcon.getMethod()))[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_323 $$ task.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_323 $$ task.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_310 $$ for (Task task : temp) -->Line_323 $$ task.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_323 $$ task.addResultListener(new Binding(comp, bcon.getMethod()))[ FD ]
Line_322 $$ if (bcon.getFormater() == null) -->Line_325 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ CD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_325 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_325 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_310 $$ for (Task task : temp) -->Line_325 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_325 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_325 $$ task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader))[ FD ]
Line_313 $$ if (comp != null) -->Line_329 $$ System.out.println("Refering to gui name, " + bcon.getComponent() + ", that doesnt exist. Unable to create monitor.")[ CD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_329 $$ System.out.println("Refering to gui name, " + bcon.getComponent() + ", that doesnt exist. Unable to create monitor.")[ FD ]
Line_313 $$ if (comp != null) -->Line_330 $$ return[ CD ]
Line_311 $$ if (task != null) -->Line_333 $$ System.out.println("Refering to task name, " + bcon.getTask() + ", that doesnt exist. Unable to create monitor.")[ CD ]
Line_305 $$ for (BindingContainer bcon : bindings) -->Line_333 $$ System.out.println("Refering to task name, " + bcon.getTask() + ", that doesnt exist. Unable to create monitor.")[ FD ]
Line_311 $$ if (task != null) -->Line_334 $$ return[ CD ]
Line_2 $$ public void run() -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ CD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ CD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ CD ]
Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ CD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ CD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ FD ]
Line_2 $$ public void run() -->Line_345 $$ System.out.println("Connecting to server(s).")[ CD ]
Line_2 $$ public void run() -->Line_346 $$ Enumeration e = servers.keys()[ CD ]
Line_346 $$ Enumeration e = servers.keys()-->Line_346 $$ Enumeration e = servers.keys()[ CD ]
Line_2 $$ public void run() -->Line_347 $$ List<JmxWorker> list = new ArrayList<JmxWorker>()[ CD ]
Line_2 $$ public void run() -->Line_348 $$ while (e.hasMoreElements()) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_348 $$ while (e.hasMoreElements()) -->Line_348 $$ while (e.hasMoreElements()) [ CD ]
Line_346 $$ Enumeration e = servers.keys()-->Line_348 $$ while (e.hasMoreElements()) [ FD ]
Line_348 $$ while (e.hasMoreElements()) -->Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()[ CD ]
Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()-->Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()[ CD ]
Line_346 $$ Enumeration e = servers.keys()-->Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()[ FD ]
Line_348 $$ while (e.hasMoreElements()) -->Line_350 $$ worker.setRunning(true)[ CD ]
Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()-->Line_350 $$ worker.setRunning(true)[ FD ]
Line_348 $$ while (e.hasMoreElements()) -->Line_351 $$ worker.start()[ CD ]
Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()-->Line_351 $$ worker.start()[ FD ]
Line_348 $$ while (e.hasMoreElements()) -->Line_352 $$ list.add(worker)[ CD ]
Line_347 $$ List<JmxWorker> list = new ArrayList<JmxWorker>()-->Line_352 $$ list.add(worker)[ FD ]
Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()-->Line_352 $$ list.add(worker)[ FD ]
Line_2 $$ public void run() -->Line_354 $$ MonitorServer.add(tabName, list)[ CD ]
Line_4 $$ String tabName-->Line_354 $$ MonitorServer.add(tabName, list)[ FD ]
Line_190 $$ tabName = guiElement.getAttribute("name")-->Line_354 $$ MonitorServer.add(tabName, list)[ FD ]
Line_347 $$ List<JmxWorker> list = new ArrayList<JmxWorker>()-->Line_354 $$ MonitorServer.add(tabName, list)[ FD ]
Line_2 $$ public void run() -->Line_355 $$ Config.addUrl(url)[ CD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_68 $$ for (int j = 0; j < temp.getLength(); j++) [ FD ]
Line_68 $$ for (int j = 0; j < temp.getLength(); j++) -->Line_69 $$ Element resource = (Element) temp.item(j)[ FD ]
Line_69 $$ Element resource = (Element) temp.item(j)-->Line_70 $$ resources.add(new URL(resource.getAttribute("url")))[ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_73 $$ for (int j = 0; j < connections.getLength(); j++) [ FD ]
Line_73 $$ for (int j = 0; j < connections.getLength(); j++) -->Line_74 $$ Element connection = (Element) connections.item(j)[ FD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_75 $$ String name = connection.getAttribute("name")[ FD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_76 $$ String tempUrl = connection.getAttribute("url")[ FD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_77 $$ String auth = connection.getAttribute("auth")[ FD ]
Line_76 $$ String tempUrl = connection.getAttribute("url")-->Line_78 $$ if (tempUrl.indexOf("$[ FD ]
Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\-->Line_78 $$ if (tempUrl.indexOf("$[ FD ]
Line_79 $$ HostDialog dialog = new HostDialog(Config.getHosts())-->Line_80 $$ String host = dialog.showDialog()[ FD ]
Line_80 $$ String host = dialog.showDialog()-->Line_81 $$ if (host == null) [ FD ]
Line_76 $$ String tempUrl = connection.getAttribute("url")-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_80 $$ String host = dialog.showDialog()-->Line_85 $$ tempUrl = tempUrl.replaceAll("\\$\\[ FD ]
Line_80 $$ String host = dialog.showDialog()-->Line_86 $$ Config.addHost(host)[ FD ]
Line_77 $$ String auth = connection.getAttribute("auth")-->Line_90 $$ if (auth != null && auth.equalsIgnoreCase("true")) [ FD ]
Line_91 $$ LoginTrueService loginService = new LoginTrueService()-->Line_92 $$ JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService)[ FD ]
Line_92 $$ JXLoginPanel.Status status = JXLoginPanel.showLoginDialog(null, loginService)-->Line_93 $$ if (status != JXLoginPanel.Status.SUCCEEDED) [ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_96 $$ server.setUsername(loginService.getName())[ FD ]
Line_91 $$ LoginTrueService loginService = new LoginTrueService()-->Line_96 $$ server.setUsername(loginService.getName())[ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_97 $$ server.setPassword(loginService.getPassword())[ FD ]
Line_91 $$ LoginTrueService loginService = new LoginTrueService()-->Line_97 $$ server.setPassword(loginService.getPassword())[ FD ]
Line_75 $$ String name = connection.getAttribute("name")-->Line_99 $$ servers.put(name, server)[ FD ]
Line_89 $$ JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false))-->Line_99 $$ servers.put(name, server)[ FD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_100 $$ NodeList listeners = connection.getElementsByTagName("listener")[ FD ]
Line_74 $$ Element connection = (Element) connections.item(j)-->Line_126 $$ NodeList attributes = connection.getElementsByTagName("attribute")[ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) [ FD ]
Line_101 $$ for (int i = 0; i < listeners.getLength(); i++) -->Line_102 $$ Element attribute = (Element) listeners.item(i)[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_103 $$ String taskname = attribute.getAttribute("taskname")[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)[ FD ]
Line_102 $$ Element attribute = (Element) listeners.item(i)-->Line_105 $$ String filtertype = attribute.getAttribute("filterType")[ FD ]
Line_105 $$ String filtertype = attribute.getAttribute("filterType")-->Line_108 $$ if (filtertype == null || "".equals(filtertype)) [ FD ]
Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()-->Line_111 $$ filter.enableType(filtertype)[ FD ]
Line_109 $$ filter = null-->Line_111 $$ filter.enableType(filtertype)[ FD ]
Line_105 $$ String filtertype = attribute.getAttribute("filterType")-->Line_111 $$ filter.enableType(filtertype)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_114 $$ task.setMbean(mbean)[ FD ]
Line_104 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_114 $$ task.setMbean(mbean)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_115 $$ task.setListener(listener)[ FD ]
Line_106 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_115 $$ task.setListener(listener)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_116 $$ task.setFilter(filter)[ FD ]
Line_107 $$ NotificationFilterSupport filter = new NotificationFilterSupport()-->Line_116 $$ task.setFilter(filter)[ FD ]
Line_109 $$ filter = null-->Line_116 $$ task.setFilter(filter)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_117 $$ server.getWorker().addTask(task)[ FD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_118 $$ if (tasks.get(taskname) != null) [ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_123 $$ hashTempList.add(task)[ FD ]
Line_113 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_123 $$ hashTempList.add(task)[ FD ]
Line_103 $$ String taskname = attribute.getAttribute("taskname")-->Line_124 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_122 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_124 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) [ FD ]
Line_127 $$ for (int i = 0; i < attributes.getLength(); i++) -->Line_128 $$ Element attribute = (Element) attributes.item(i)[ FD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_129 $$ String taskname = attribute.getAttribute("taskname")[ FD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)[ FD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_131 $$ String attributename = attribute.getAttribute("attributename")[ FD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_132 $$ String frequency = attribute.getAttribute("frequency")[ FD ]
Line_128 $$ Element attribute = (Element) attributes.item(i)-->Line_133 $$ String onEvent = attribute.getAttribute("onEvent")[ FD ]
Line_132 $$ String frequency = attribute.getAttribute("frequency")-->Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) [ FD ]
Line_132 $$ String frequency = attribute.getAttribute("frequency")-->Line_134 $$ if (frequency.equalsIgnoreCase("onchange")) [ FD ]
Line_136 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter()-->Line_137 $$ filter.enableAttribute(attributename)[ FD ]
Line_131 $$ String attributename = attribute.getAttribute("attributename")-->Line_137 $$ filter.enableAttribute(attributename)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_140 $$ task.setAttribute(att)[ FD ]
Line_139 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename)-->Line_140 $$ task.setAttribute(att)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_141 $$ task.setMbean(mbean)[ FD ]
Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_141 $$ task.setMbean(mbean)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_142 $$ task.setListener(listener)[ FD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_142 $$ task.setListener(listener)[ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_142 $$ task.setListener(listener)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_143 $$ task.setFilter(filter)[ FD ]
Line_136 $$ AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter()-->Line_143 $$ task.setFilter(filter)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_144 $$ server.getWorker().addTask(task)[ FD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_145 $$ if (tasks.get(taskname) != null) [ FD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_150 $$ task2.setAttribute(att)[ FD ]
Line_139 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename)-->Line_150 $$ task2.setAttribute(att)[ FD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_151 $$ task2.setMbean(mbean)[ FD ]
Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_151 $$ task2.setMbean(mbean)[ FD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_152 $$ server.getWorker().addTask(task2)[ FD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_154 $$ hashTempList.add(task)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_154 $$ hashTempList.add(task)[ FD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_155 $$ hashTempList.add(task2)[ FD ]
Line_149 $$ Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server)-->Line_155 $$ hashTempList.add(task2)[ FD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_156 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_156 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_132 $$ String frequency = attribute.getAttribute("frequency")-->Line_158 $$ int frequency2 = Integer.parseInt(frequency)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_161 $$ task.setAttribute(att)[ FD ]
Line_139 $$ MBeanAttribute att = new MBeanAttribute(mbean, attributename)-->Line_161 $$ task.setAttribute(att)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_162 $$ task.setMbean(mbean)[ FD ]
Line_130 $$ MBean mbean = new MBean(attribute.getAttribute("mbean"), null)-->Line_162 $$ task.setMbean(mbean)[ FD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_163 $$ if (tasks.get(taskname) != null) [ FD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_168 $$ hashTempList.add(task)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_168 $$ hashTempList.add(task)[ FD ]
Line_129 $$ String taskname = attribute.getAttribute("taskname")-->Line_169 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_153 $$ List<Task> hashTempList = new ArrayList<Task>()-->Line_169 $$ tasks.put(taskname, hashTempList)[ FD ]
Line_133 $$ String onEvent = attribute.getAttribute("onEvent")-->Line_171 $$ if (onEvent != null && !"".equals(onEvent)) [ FD ]
Line_133 $$ String onEvent = attribute.getAttribute("onEvent")-->Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)[ FD ]
Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)-->Line_173 $$ if (tempTask == null) [ FD ]
Line_172 $$ Task tempTask = tasks.get(onEvent).get(0)-->Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()[ FD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_180 $$ if (listener == null) [ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_180 $$ if (listener == null) [ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_181 $$ server.getWorker().addTask(task)[ FD ]
Line_135 $$ TaskNotificationListener listener = new TaskNotificationListener()-->Line_183 $$ listener.addTask(task)[ FD ]
Line_177 $$ listener = (TaskNotificationListener) tempTask.getListener()-->Line_183 $$ listener.addTask(task)[ FD ]
Line_138 $$ Task task = new Task(-1, Task.LISTEN, server)-->Line_183 $$ listener.addTask(task)[ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_196 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_195 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_197 $$ monitor.getTab().setTitleAt(i, tabName)[ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) [ FD ]
Line_202 $$ for (int i = 0; i < tempBindings.getLength(); i++) -->Line_203 $$ Element binding = (Element) tempBindings.item(i)[ FD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_204 $$ String guiname = binding.getAttribute("guiname")[ FD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_205 $$ String tmethod = binding.getAttribute("method")[ FD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_206 $$ String taskname = binding.getAttribute("taskname")[ FD ]
Line_203 $$ Element binding = (Element) tempBindings.item(i)-->Line_207 $$ String formater = binding.getAttribute("formater")[ FD ]
Line_207 $$ String formater = binding.getAttribute("formater")-->Line_209 $$ if (formater == null || (formater != null && formater.equals(""))) [ FD ]
Line_208 $$ BindingContainer tempBinding-->Line_214 $$ bindings.add(tempBinding)[ FD ]
Line_210 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname)-->Line_214 $$ bindings.add(tempBinding)[ FD ]
Line_212 $$ tempBinding = new BindingContainer(guiname, tmethod, taskname, formater)-->Line_214 $$ bindings.add(tempBinding)[ FD ]
Line_244 $$ while ((readTemp = in.read()) != -1) -->Line_245 $$ out.write(readTemp)[ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) [ FD ]
Line_265 $$ for (int i = 0; i < jarFiles.size(); i++) -->Line_266 $$ File file = jarFiles.get(i)[ FD ]
Line_266 $$ File file = jarFiles.get(i)-->Line_267 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName())[ FD ]
Line_269 $$ FileOutputStream out = new FileOutputStream(newFile)-->Line_275 $$ out.close()[ FD ]
Line_269 $$ FileOutputStream out = new FileOutputStream(newFile)-->Line_276 $$ out.close()[ FD ]
Line_268 $$ FileInputStream in = new FileInputStream(file)-->Line_277 $$ in.close()[ FD ]
Line_267 $$ File newFile = new File(Config.getCacheDir() + "/" + System.currentTimeMillis() + file.getName())-->Line_278 $$ urls[i] = new URL("file:" + newFile.getAbsolutePath())[ FD ]
Line_272 $$ while ((n = in.read(buf, 0, 1024)) > -1) -->Line_273 $$ out.write(buf, 0, n)[ FD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) [ FD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_340 $$ if (monitor.getTab().getComponent(i).equals(monitor)) [ FD ]
Line_339 $$ for (int i = 0; i < monitor.getTab().getTabCount(); i++) -->Line_341 $$ monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this))[ FD ]
Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()-->Line_350 $$ worker.setRunning(true)[ FD ]
Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()-->Line_351 $$ worker.start()[ FD ]
Line_349 $$ JmxWorker worker = servers.get(e.nextElement()).getWorker()-->Line_352 $$ list.add(worker)[ FD ]
