Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException [ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_3 $$ String context = request.getContextPath()[ CD ]
Line_3 $$ String context = request.getContextPath()-->Line_3 $$ String context = request.getContextPath()[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_3 $$ String context = request.getContextPath()[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_4 $$ String resource = request.getRequestURI().replace(context, "")[ CD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_4 $$ String resource = request.getRequestURI().replace(context, "")[ CD ]
Line_3 $$ String context = request.getContextPath()-->Line_4 $$ String resource = request.getRequestURI().replace(context, "")[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_4 $$ String resource = request.getRequestURI().replace(context, "")[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")[ CD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")[ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")[ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")[ CD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")[ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_6 $$ if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) [ CD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_6 $$ if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) [ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_6 $$ if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) [ FD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_6 $$ if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) [ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_6 $$ if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) [ FD ]
Line_6 $$ if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) -->Line_7 $$ response.setStatus(HttpServletResponse.SC_BAD_REQUEST)[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_7 $$ response.setStatus(HttpServletResponse.SC_BAD_REQUEST)[ FD ]
Line_6 $$ if ((StringUtils.isEmpty(resource)) || (resource.endsWith("/"))) -->Line_8 $$ return[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)[ CD ]
Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)-->Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)[ CD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)[ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_11 $$ if (url == null) [ CD ]
Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)-->Line_11 $$ if (url == null) [ FD ]
Line_11 $$ if (url == null) -->Line_12 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_12 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ FD ]
Line_11 $$ if (url == null) -->Line_13 $$ return[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_15 $$ if ((this.deny != null) && (this.deny.length > 0)) [ CD ]
Line_16 $$ for (String s : this.deny) -->Line_17 $$ s = s.trim()[ FD ]
Line_17 $$ s = s.trim()-->Line_17 $$ s = s.trim()[ FD ]
Line_17 $$ s = s.trim()-->Line_17 $$ s = s.trim()[ CD ]
Line_16 $$ for (String s : this.deny) -->Line_17 $$ s = s.trim()[ FD ]
Line_17 $$ s = s.trim()-->Line_17 $$ s = s.trim()[ FD ]
Line_16 $$ for (String s : this.deny) -->Line_18 $$ if (s.indexOf('*') != -1) [ FD ]
Line_17 $$ s = s.trim()-->Line_18 $$ if (s.indexOf('*') != -1) [ FD ]
Line_18 $$ if (s.indexOf('*') != -1) -->Line_19 $$ s = s.replaceAll("\\*", ".*")[ CD ]
Line_16 $$ for (String s : this.deny) -->Line_19 $$ s = s.replaceAll("\\*", ".*")[ FD ]
Line_17 $$ s = s.trim()-->Line_19 $$ s = s.replaceAll("\\*", ".*")[ FD ]
Line_19 $$ s = s.replaceAll("\\*", ".*")-->Line_19 $$ s = s.replaceAll("\\*", ".*")[ FD ]
Line_19 $$ s = s.replaceAll("\\*", ".*")-->Line_19 $$ s = s.replaceAll("\\*", ".*")[ CD ]
Line_16 $$ for (String s : this.deny) -->Line_19 $$ s = s.replaceAll("\\*", ".*")[ FD ]
Line_17 $$ s = s.trim()-->Line_19 $$ s = s.replaceAll("\\*", ".*")[ FD ]
Line_19 $$ s = s.replaceAll("\\*", ".*")-->Line_19 $$ s = s.replaceAll("\\*", ".*")[ FD ]
Line_16 $$ for (String s : this.deny) -->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_17 $$ s = s.trim()-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_19 $$ s = s.replaceAll("\\*", ".*")-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_21 $$ if (Pattern.matches(s, resource)) -->Line_21 $$ if (Pattern.matches(s, resource)) [ CD ]
Line_16 $$ for (String s : this.deny) -->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_17 $$ s = s.trim()-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_19 $$ s = s.replaceAll("\\*", ".*")-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_4 $$ String resource = request.getRequestURI().replace(context, "")-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_5 $$ resource = resource.replaceAll("^/\\w*/", "")-->Line_21 $$ if (Pattern.matches(s, resource)) [ FD ]
Line_21 $$ if (Pattern.matches(s, resource)) -->Line_22 $$ response.setStatus(HttpServletResponse.SC_FORBIDDEN)[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_22 $$ response.setStatus(HttpServletResponse.SC_FORBIDDEN)[ FD ]
Line_21 $$ if (Pattern.matches(s, resource)) -->Line_23 $$ return[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_27 $$ InputStream input = url.openStream()[ CD ]
Line_27 $$ InputStream input = url.openStream()-->Line_27 $$ InputStream input = url.openStream()[ CD ]
Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)-->Line_27 $$ InputStream input = url.openStream()[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_28 $$ OutputStream output = response.getOutputStream()[ CD ]
Line_28 $$ OutputStream output = response.getOutputStream()-->Line_28 $$ OutputStream output = response.getOutputStream()[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_28 $$ OutputStream output = response.getOutputStream()[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_29 $$ URLConnection connection = url.openConnection()[ CD ]
Line_29 $$ URLConnection connection = url.openConnection()-->Line_29 $$ URLConnection connection = url.openConnection()[ CD ]
Line_10 $$ URL url = ClassLoaderUtils.getResource(resource)-->Line_29 $$ URLConnection connection = url.openConnection()[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_30 $$ String contentEncoding = connection.getContentEncoding()[ CD ]
Line_30 $$ String contentEncoding = connection.getContentEncoding()-->Line_30 $$ String contentEncoding = connection.getContentEncoding()[ CD ]
Line_29 $$ URLConnection connection = url.openConnection()-->Line_30 $$ String contentEncoding = connection.getContentEncoding()[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_31 $$ int contentLength = connection.getContentLength()[ CD ]
Line_31 $$ int contentLength = connection.getContentLength()-->Line_31 $$ int contentLength = connection.getContentLength()[ CD ]
Line_29 $$ URLConnection connection = url.openConnection()-->Line_31 $$ int contentLength = connection.getContentLength()[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_32 $$ String contentType = connection.getContentType()[ CD ]
Line_32 $$ String contentType = connection.getContentType()-->Line_32 $$ String contentType = connection.getContentType()[ CD ]
Line_29 $$ URLConnection connection = url.openConnection()-->Line_32 $$ String contentType = connection.getContentType()[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_33 $$ if (contentEncoding != null) [ CD ]
Line_30 $$ String contentEncoding = connection.getContentEncoding()-->Line_33 $$ if (contentEncoding != null) [ FD ]
Line_33 $$ if (contentEncoding != null) -->Line_34 $$ response.setCharacterEncoding(contentEncoding)[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_34 $$ response.setCharacterEncoding(contentEncoding)[ FD ]
Line_30 $$ String contentEncoding = connection.getContentEncoding()-->Line_34 $$ response.setCharacterEncoding(contentEncoding)[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_36 $$ response.setContentLength(contentLength)[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_36 $$ response.setContentLength(contentLength)[ FD ]
Line_31 $$ int contentLength = connection.getContentLength()-->Line_36 $$ response.setContentLength(contentLength)[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_37 $$ response.setContentType(contentType)[ CD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_37 $$ response.setContentType(contentType)[ FD ]
Line_32 $$ String contentType = connection.getContentType()-->Line_37 $$ response.setContentType(contentType)[ FD ]
Line_2 $$ public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException -->Line_38 $$ IOUtils.copy(input, output, true)[ CD ]
Line_27 $$ InputStream input = url.openStream()-->Line_38 $$ IOUtils.copy(input, output, true)[ FD ]
Line_28 $$ OutputStream output = response.getOutputStream()-->Line_38 $$ IOUtils.copy(input, output, true)[ FD ]
