Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ if (args.length <= 0) [ CD ]
Line_3 $$ if (args.length <= 0) -->Line_4 $$ System.out.println(" *** DML script generator and executor ***")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_5 $$ System.out.println(" You must specify name of the file with SQL script data")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_6 $$ System.out.println(" Fisrt rows of this file must be:")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_7 $$ System.out.println(" 1) JDBC driver class for your DBMS")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_8 $$ System.out.println(" 2) URL for your database instance")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_9 $$ System.out.println(" 3) user in that database (with sufficient priviliges)")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_10 $$ System.out.println(" 4) password of that user")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_11 $$ System.out.println(" Next rows can have:")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_12 $$ System.out.println("   '&' before table to insert into,")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_13 $$ System.out.println("   '^' before table delete from,")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_14 $$ System.out.println("   '*' before table update.")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_15 $$ System.out.println(" Other rows contain parameters of these actions:")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_16 $$ System.out.println("   for & action each parameter is a list of values,")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_17 $$ System.out.println("   for * action -//- pare of values with 1st PK (will be in where clause),")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_18 $$ System.out.println("   for ^ (not obligatory) -//- part of where clause or AND or OR")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_19 $$ System.out.println("    (by depault parts are united with OR)")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_20 $$ System.out.println(" Note: despite SQLScript, 1) list (pare) of values can be separated")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_21 $$ System.out.println("   by space or tab, not only comma and 2) string values can be not quoted,")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_22 $$ System.out.println("   but in this (2) case only 2 values allowed (even in insert)")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_23 $$ System.out.println(" '!' before row means that it is a comment.")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_24 $$ System.out.println(" If some exception is occured, all script is rolled back.")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_25 $$ System.out.println(" If you specify 2nd command line argument - file name too -")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_26 $$ System.out.println("   connection will be established but all statements will")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_27 $$ System.out.println("   be saved in that output file and not transmitted to DB")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_28 $$ System.out.println(" If you specify 3nd command line argument - connect_string -")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_29 $$ System.out.println("   connect information will be added to output file")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_30 $$ System.out.println("   in the form 'connect user/password@connect_string'")[ CD ]
Line_3 $$ if (args.length <= 0) -->Line_31 $$ System.exit(0)[ CD ]
Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()-->Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()[ CD ]
Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()-->Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()[ CD ]
Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()-->Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()[ FD ]
Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()-->Line_38 $$ info[i] = reader.readLine()[ CD ]
Line_38 $$ info[i] = reader.readLine()-->Line_38 $$ info[i] = reader.readLine()[ CD ]
Line_35 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])))-->Line_38 $$ info[i] = reader.readLine()[ FD ]
Line_41 $$ Connection connection = DriverManager.getConnection(info[1], info[2], info[3])-->Line_41 $$ Connection connection = DriverManager.getConnection(info[1], info[2], info[3])[ CD ]
Line_43 $$ if (args.length > 1) -->Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))[ CD ]
Line_36 $$ Writer writer = null-->Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))[ FD ]
Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))-->Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))[ FD ]
Line_43 $$ if (args.length > 1) -->Line_45 $$ if (args.length > 2)[ CD ]
Line_45 $$ if (args.length > 2)-->Line_45 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + args[2] + script.statementTerminator)[ CD ]
Line_36 $$ Writer writer = null-->Line_45 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + args[2] + script.statementTerminator)[ FD ]
Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))-->Line_45 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + args[2] + script.statementTerminator)[ FD ]
Line_42 $$ SQLScript script = new DMLScript(connection)-->Line_48 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution")[ FD ]
Line_35 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])))-->Line_48 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution")[ FD ]
Line_36 $$ Writer writer = null-->Line_48 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution")[ FD ]
Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))-->Line_48 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution")[ FD ]
Line_35 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])))-->Line_50 $$ reader.close()[ FD ]
Line_36 $$ Writer writer = null-->Line_51 $$ if (writer != null)[ FD ]
Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))-->Line_51 $$ if (writer != null)[ FD ]
Line_51 $$ if (writer != null)-->Line_51 $$ writer.close()[ CD ]
Line_36 $$ Writer writer = null-->Line_51 $$ writer.close()[ FD ]
Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))-->Line_51 $$ writer.close()[ FD ]
Line_41 $$ Connection connection = DriverManager.getConnection(info[1], info[2], info[3])-->Line_54 $$ connection.close()[ FD ]
Line_35 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0])))-->Line_56 $$ reader.close()[ FD ]
Line_36 $$ Writer writer = null-->Line_57 $$ if (writer != null)[ FD ]
Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))-->Line_57 $$ if (writer != null)[ FD ]
Line_57 $$ if (writer != null)-->Line_57 $$ writer.close()[ CD ]
Line_36 $$ Writer writer = null-->Line_57 $$ writer.close()[ FD ]
Line_44 $$ writer = new BufferedWriter(new FileWriter(args[1]))-->Line_57 $$ writer.close()[ FD ]
Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()-->Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()[ FD ]
Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()-->Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()[ FD ]
Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()-->Line_38 $$ for (int i = 0; i < info.length; i++) info[i] = reader.readLine()[ FD ]
