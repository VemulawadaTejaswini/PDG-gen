Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) [ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_3 $$ JXStatusBar statusBar = new JXStatusBar()[ CD ]
Line_5 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()-->Line_5 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()[ CD ]
Line_6 $$ Enumeration<URL> urls = cl.getResources("META-INF/MANIFEST.MF")-->Line_6 $$ Enumeration<URL> urls = cl.getResources("META-INF/MANIFEST.MF")[ CD ]
Line_5 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()-->Line_6 $$ Enumeration<URL> urls = cl.getResources("META-INF/MANIFEST.MF")[ FD ]
Line_9 $$ while (urls.hasMoreElements()) -->Line_9 $$ while (urls.hasMoreElements()) [ CD ]
Line_6 $$ Enumeration<URL> urls = cl.getResources("META-INF/MANIFEST.MF")-->Line_9 $$ while (urls.hasMoreElements()) [ FD ]
Line_9 $$ while (urls.hasMoreElements()) -->Line_10 $$ InputStream is = urls.nextElement().openStream()[ CD ]
Line_10 $$ InputStream is = urls.nextElement().openStream()-->Line_10 $$ InputStream is = urls.nextElement().openStream()[ CD ]
Line_6 $$ Enumeration<URL> urls = cl.getResources("META-INF/MANIFEST.MF")-->Line_10 $$ InputStream is = urls.nextElement().openStream()[ FD ]
Line_9 $$ while (urls.hasMoreElements()) -->Line_11 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_9 $$ while (urls.hasMoreElements()) -->Line_12 $$ while (true) [ CD ]
Line_9 $$ while (urls.hasMoreElements()) -->Line_9 $$ while (urls.hasMoreElements()) [ CD ]
Line_12 $$ while (true) -->Line_13 $$ String line = br.readLine()[ CD ]
Line_13 $$ String line = br.readLine()-->Line_13 $$ String line = br.readLine()[ CD ]
Line_11 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_13 $$ String line = br.readLine()[ FD ]
Line_12 $$ while (true) -->Line_14 $$ if (line == null)[ CD ]
Line_13 $$ String line = br.readLine()-->Line_14 $$ if (line == null)[ FD ]
Line_12 $$ while (true) -->Line_15 $$ int firstColonIndex = line.indexOf(":")[ CD ]
Line_15 $$ int firstColonIndex = line.indexOf(":")-->Line_15 $$ int firstColonIndex = line.indexOf(":")[ CD ]
Line_13 $$ String line = br.readLine()-->Line_15 $$ int firstColonIndex = line.indexOf(":")[ FD ]
Line_12 $$ while (true) -->Line_16 $$ if (firstColonIndex < 0)[ CD ]
Line_15 $$ int firstColonIndex = line.indexOf(":")-->Line_16 $$ if (firstColonIndex < 0)[ FD ]
Line_12 $$ while (true) -->Line_17 $$ String name = line.substring(0, firstColonIndex).trim()[ CD ]
Line_17 $$ String name = line.substring(0, firstColonIndex).trim()-->Line_17 $$ String name = line.substring(0, firstColonIndex).trim()[ CD ]
Line_13 $$ String line = br.readLine()-->Line_17 $$ String name = line.substring(0, firstColonIndex).trim()[ FD ]
Line_15 $$ int firstColonIndex = line.indexOf(":")-->Line_17 $$ String name = line.substring(0, firstColonIndex).trim()[ FD ]
Line_12 $$ while (true) -->Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()[ CD ]
Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()-->Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()[ CD ]
Line_13 $$ String line = br.readLine()-->Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()[ FD ]
Line_12 $$ while (true) -->Line_19 $$ if (name.compareTo("Substance-Version") == 0)[ CD ]
Line_17 $$ String name = line.substring(0, firstColonIndex).trim()-->Line_19 $$ if (name.compareTo("Substance-Version") == 0)[ FD ]
Line_19 $$ if (name.compareTo("Substance-Version") == 0)-->Line_19 $$ substanceVer = val[ CD ]
Line_19 $$ substanceVer = val-->Line_19 $$ substanceVer = val[ FD ]
Line_7 $$ String substanceVer = null-->Line_19 $$ substanceVer = val[ FD ]
Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()-->Line_19 $$ substanceVer = val[ FD ]
Line_12 $$ while (true) -->Line_20 $$ if (name.compareTo("Substance-BuildStamp") == 0)[ CD ]
Line_17 $$ String name = line.substring(0, firstColonIndex).trim()-->Line_20 $$ if (name.compareTo("Substance-BuildStamp") == 0)[ FD ]
Line_20 $$ if (name.compareTo("Substance-BuildStamp") == 0)-->Line_20 $$ substanceBuildStamp = val[ CD ]
Line_20 $$ substanceBuildStamp = val-->Line_20 $$ substanceBuildStamp = val[ FD ]
Line_8 $$ String substanceBuildStamp = null-->Line_20 $$ substanceBuildStamp = val[ FD ]
Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()-->Line_20 $$ substanceBuildStamp = val[ FD ]
Line_11 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_23 $$ br.close()[ FD ]
Line_19 $$ substanceVer = val-->Line_27 $$ if (substanceVer != null) [ FD ]
Line_7 $$ String substanceVer = null-->Line_27 $$ if (substanceVer != null) [ FD ]
Line_27 $$ if (substanceVer != null) -->Line_28 $$ JLabel statusLabel = new JLabel(substanceVer + " [built on " + substanceBuildStamp + "]")[ CD ]
Line_27 $$ if (substanceVer != null) -->Line_29 $$ JXStatusBar.Constraint cStatusLabel = new JXStatusBar.Constraint()[ CD ]
Line_27 $$ if (substanceVer != null) -->Line_30 $$ cStatusLabel.setFixedWidth(300)[ CD ]
Line_29 $$ JXStatusBar.Constraint cStatusLabel = new JXStatusBar.Constraint()-->Line_30 $$ cStatusLabel.setFixedWidth(300)[ FD ]
Line_27 $$ if (substanceVer != null) -->Line_31 $$ statusBar.add(statusLabel, cStatusLabel)[ CD ]
Line_3 $$ JXStatusBar statusBar = new JXStatusBar()-->Line_31 $$ statusBar.add(statusLabel, cStatusLabel)[ FD ]
Line_28 $$ JLabel statusLabel = new JLabel(substanceVer + " [built on " + substanceBuildStamp + "]")-->Line_31 $$ statusBar.add(statusLabel, cStatusLabel)[ FD ]
Line_29 $$ JXStatusBar.Constraint cStatusLabel = new JXStatusBar.Constraint()-->Line_31 $$ statusBar.add(statusLabel, cStatusLabel)[ FD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_35 $$ JXStatusBar.Constraint c2 = new JXStatusBar.Constraint(JXStatusBar.Constraint.ResizeBehavior.FILL)[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_36 $$ final JLabel tabLabel = new JLabel("")[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_37 $$ statusBar.add(tabLabel, c2)[ CD ]
Line_3 $$ JXStatusBar statusBar = new JXStatusBar()-->Line_37 $$ statusBar.add(tabLabel, c2)[ FD ]
Line_36 $$ final JLabel tabLabel = new JLabel("")-->Line_37 $$ statusBar.add(tabLabel, c2)[ FD ]
Line_35 $$ JXStatusBar.Constraint c2 = new JXStatusBar.Constraint(JXStatusBar.Constraint.ResizeBehavior.FILL)-->Line_37 $$ statusBar.add(tabLabel, c2)[ FD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_38 $$ mainTabbedPane.getModel().addChangeListener(new ChangeListener() [ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_38 $$ mainTabbedPane.getModel().addChangeListener(new ChangeListener() [ FD ]
Line_38 $$ mainTabbedPane.getModel().addChangeListener(new ChangeListener() -->Line_40 $$ int selectedIndex = mainTabbedPane.getSelectedIndex()[ CD ]
Line_40 $$ int selectedIndex = mainTabbedPane.getSelectedIndex()-->Line_40 $$ int selectedIndex = mainTabbedPane.getSelectedIndex()[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_40 $$ int selectedIndex = mainTabbedPane.getSelectedIndex()[ FD ]
Line_38 $$ mainTabbedPane.getModel().addChangeListener(new ChangeListener() -->Line_41 $$ if (selectedIndex < 0)[ CD ]
Line_40 $$ int selectedIndex = mainTabbedPane.getSelectedIndex()-->Line_41 $$ if (selectedIndex < 0)[ FD ]
Line_41 $$ if (selectedIndex < 0)-->Line_41 $$ tabLabel.setText("No selected tab")[ CD ]
Line_36 $$ final JLabel tabLabel = new JLabel("")-->Line_41 $$ tabLabel.setText("No selected tab")[ FD ]
Line_41 $$ if (selectedIndex < 0)-->Line_41 $$ tabLabel.setText("Tab " + mainTabbedPane.getTitleAt(selectedIndex) + " selected")[ CD ]
Line_36 $$ final JLabel tabLabel = new JLabel("")-->Line_41 $$ tabLabel.setText("Tab " + mainTabbedPane.getTitleAt(selectedIndex) + " selected")[ FD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_41 $$ tabLabel.setText("Tab " + mainTabbedPane.getTitleAt(selectedIndex) + " selected")[ FD ]
Line_40 $$ int selectedIndex = mainTabbedPane.getSelectedIndex()-->Line_41 $$ tabLabel.setText("Tab " + mainTabbedPane.getTitleAt(selectedIndex) + " selected")[ FD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_44 $$ JPanel fontSizePanel = FontSizePanel.getPanel()[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_46 $$ fontSizePanelConstraints.setFixedWidth(270)[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_47 $$ statusBar.add(fontSizePanel, fontSizePanelConstraints)[ CD ]
Line_3 $$ JXStatusBar statusBar = new JXStatusBar()-->Line_47 $$ statusBar.add(fontSizePanel, fontSizePanelConstraints)[ FD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_51 $$ alphaSlider.setFocusable(false)[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_52 $$ alphaSlider.addChangeListener(new ChangeListener() [ CD ]
Line_52 $$ alphaSlider.addChangeListener(new ChangeListener() -->Line_54 $$ int currValue = alphaSlider.getValue()[ CD ]
Line_54 $$ int currValue = alphaSlider.getValue()-->Line_54 $$ int currValue = alphaSlider.getValue()[ CD ]
Line_52 $$ alphaSlider.addChangeListener(new ChangeListener() -->Line_55 $$ alphaLabel.setText(currValue + "%")[ CD ]
Line_52 $$ alphaSlider.addChangeListener(new ChangeListener() -->Line_56 $$ jxPanel.setAlpha(currValue / 100.0f)[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_56 $$ jxPanel.setAlpha(currValue / 100.0f)[ FD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_59 $$ alphaSlider.setToolTipText("Changes the global opacity. Is not Substance-specific")[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_60 $$ alphaSlider.setPreferredSize(new Dimension(120, alphaSlider.getPreferredSize().height))[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_61 $$ alphaPanel.add(alphaLabel)[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_62 $$ alphaPanel.add(alphaSlider)[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_64 $$ alphaPanelConstraints.setFixedWidth(160)[ CD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_65 $$ statusBar.add(alphaPanel, alphaPanelConstraints)[ CD ]
Line_3 $$ JXStatusBar statusBar = new JXStatusBar()-->Line_65 $$ statusBar.add(alphaPanel, alphaPanelConstraints)[ FD ]
Line_2 $$ protected static JXStatusBar getStatusBar(final JXPanel jxPanel, final JTabbedPane mainTabbedPane) -->Line_66 $$ return statusBar[ CD ]
Line_11 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_23 $$ br.close()[ FD ]
Line_13 $$ String line = br.readLine()-->Line_14 $$ if (line == null)[ FD ]
Line_13 $$ String line = br.readLine()-->Line_15 $$ int firstColonIndex = line.indexOf(":")[ FD ]
Line_15 $$ int firstColonIndex = line.indexOf(":")-->Line_16 $$ if (firstColonIndex < 0)[ FD ]
Line_13 $$ String line = br.readLine()-->Line_17 $$ String name = line.substring(0, firstColonIndex).trim()[ FD ]
Line_15 $$ int firstColonIndex = line.indexOf(":")-->Line_17 $$ String name = line.substring(0, firstColonIndex).trim()[ FD ]
Line_13 $$ String line = br.readLine()-->Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()[ FD ]
Line_17 $$ String name = line.substring(0, firstColonIndex).trim()-->Line_19 $$ if (name.compareTo("Substance-Version") == 0)[ FD ]
Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()-->Line_19 $$ substanceVer = val[ FD ]
Line_17 $$ String name = line.substring(0, firstColonIndex).trim()-->Line_20 $$ if (name.compareTo("Substance-BuildStamp") == 0)[ FD ]
Line_18 $$ String val = line.substring(firstColonIndex + 1).trim()-->Line_20 $$ substanceBuildStamp = val[ FD ]
