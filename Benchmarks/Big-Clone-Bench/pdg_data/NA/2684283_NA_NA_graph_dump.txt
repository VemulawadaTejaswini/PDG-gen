Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException [ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_3 $$ connection = url.openConnection()[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_3 $$ connection = url.openConnection()[ FD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_4 $$ if (acceptDeflate)[ CD ]
Line_4 $$ if (acceptDeflate)-->Line_4 $$ connection.setRequestProperty("Accept-Encoding", "deflate")[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_5 $$ connection.connect()[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_6 $$ InputStream is = null[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_7 $$ int retry = 1[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_8 $$ long backoff = 100L[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_9 $$ while (true) [ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException [ CD ]
Line_11 $$ is = connection.getInputStream()-->Line_11 $$ is = connection.getInputStream()[ FD ]
Line_6 $$ InputStream is = null-->Line_11 $$ is = connection.getInputStream()[ FD ]
Line_11 $$ is = connection.getInputStream()-->Line_11 $$ is = connection.getInputStream()[ CD ]
Line_8 $$ long backoff = 100L-->Line_16 $$ Thread.currentThread().sleep(backoff)[ FD ]
Line_8 $$ long backoff = 100L-->Line_22 $$ Thread.currentThread().sleep(backoff)[ FD ]
Line_9 $$ while (true) -->Line_26 $$ if (retry == 3)[ CD ]
Line_7 $$ int retry = 1-->Line_26 $$ if (retry == 3)[ FD ]
Line_9 $$ while (true) -->Line_27 $$ retry++[ CD ]
Line_7 $$ int retry = 1-->Line_27 $$ retry++[ FD ]
Line_9 $$ while (true) -->Line_28 $$ backoff *= 2[ CD ]
Line_28 $$ backoff *= 2-->Line_28 $$ backoff *= 2[ FD ]
Line_8 $$ long backoff = 100L-->Line_28 $$ backoff *= 2[ FD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_30 $$ String type = connection.getHeaderField("content-description")[ CD ]
Line_30 $$ String type = connection.getHeaderField("content-description")-->Line_30 $$ String type = connection.getHeaderField("content-description")[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_31 $$ handleContentDesc(is, type)[ CD ]
Line_11 $$ is = connection.getInputStream()-->Line_31 $$ handleContentDesc(is, type)[ FD ]
Line_6 $$ InputStream is = null-->Line_31 $$ handleContentDesc(is, type)[ FD ]
Line_30 $$ String type = connection.getHeaderField("content-description")-->Line_31 $$ handleContentDesc(is, type)[ FD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_33 $$ String encoding = connection.getContentEncoding()[ CD ]
Line_33 $$ String encoding = connection.getContentEncoding()-->Line_33 $$ String encoding = connection.getContentEncoding()[ CD ]
Line_2 $$ private InputStream openConnection(URL url) throws IOException, DODSException -->Line_34 $$ return handleContentEncoding(is, encoding)[ CD ]
Line_34 $$ return handleContentEncoding(is, encoding)-->Line_34 $$ return handleContentEncoding(is, encoding)[ CD ]
Line_11 $$ is = connection.getInputStream()-->Line_34 $$ return handleContentEncoding(is, encoding)[ FD ]
Line_6 $$ InputStream is = null-->Line_34 $$ return handleContentEncoding(is, encoding)[ FD ]
Line_33 $$ String encoding = connection.getContentEncoding()-->Line_34 $$ return handleContentEncoding(is, encoding)[ FD ]
Line_28 $$ backoff *= 2-->Line_16 $$ Thread.currentThread().sleep(backoff)[ FD ]
Line_28 $$ backoff *= 2-->Line_22 $$ Thread.currentThread().sleep(backoff)[ FD ]
