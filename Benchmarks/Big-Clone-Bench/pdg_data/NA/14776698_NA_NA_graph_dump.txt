Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException [ CD ]
Line_2 $$ private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException -->Line_3 $$ Context c = ctx[ CD ]
Line_2 $$ private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException -->Line_4 $$ File file = null[ CD ]
Line_2 $$ private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException -->Line_5 $$ for (int i = 0; i < list.length; i++) [ CD ]
Line_2 $$ private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException -->Line_2 $$ private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException [ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_5 $$ for (int i = 0; i < list.length; i++) [ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_5 $$ for (int i = 0; i < list.length; i++) [ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_5 $$ for (int i = 0; i < list.length; i++) [ FD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_6 $$ boolean existed = false[ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_7 $$ FileChannel in = null[ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_8 $$ FileChannel out = null[ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_9 $$ File outFile = null[ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_10 $$ file = list[i][ CD ]
Line_10 $$ file = list[i]-->Line_10 $$ file = list[i][ FD ]
Line_4 $$ File file = null-->Line_10 $$ file = list[i][ FD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_11 $$ if (file == null) [ CD ]
Line_10 $$ file = list[i]-->Line_11 $$ if (file == null) [ FD ]
Line_4 $$ File file = null-->Line_11 $$ if (file == null) [ FD ]
Line_11 $$ if (file == null) -->Line_12 $$ error(c.getString(R.string.unkn_err))[ CD ]
Line_3 $$ Context c = ctx-->Line_12 $$ error(c.getString(R.string.unkn_err))[ FD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_15 $$ String uri = file.getAbsolutePath()[ CD ]
Line_15 $$ String uri = file.getAbsolutePath()-->Line_15 $$ String uri = file.getAbsolutePath()[ CD ]
Line_10 $$ file = list[i]-->Line_15 $$ String uri = file.getAbsolutePath()[ FD ]
Line_4 $$ File file = null-->Line_15 $$ String uri = file.getAbsolutePath()[ FD ]
Line_17 $$ if (isStopReq()) -->Line_17 $$ if (isStopReq()) [ CD ]
Line_17 $$ if (isStopReq()) -->Line_18 $$ error(c.getString(R.string.canceled))[ CD ]
Line_3 $$ Context c = ctx-->Line_18 $$ error(c.getString(R.string.canceled))[ FD ]
Line_21 $$ long last_modified = file.lastModified()-->Line_21 $$ long last_modified = file.lastModified()[ CD ]
Line_10 $$ file = list[i]-->Line_21 $$ long last_modified = file.lastModified()[ FD ]
Line_4 $$ File file = null-->Line_21 $$ long last_modified = file.lastModified()[ FD ]
Line_22 $$ String fn = file.getName()-->Line_22 $$ String fn = file.getName()[ CD ]
Line_10 $$ file = list[i]-->Line_22 $$ String fn = file.getName()[ FD ]
Line_4 $$ File file = null-->Line_22 $$ String fn = file.getName()[ FD ]
Line_9 $$ File outFile = null-->Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)[ FD ]
Line_10 $$ file = list[i]-->Line_24 $$ if (file.isDirectory()) [ FD ]
Line_4 $$ File file = null-->Line_24 $$ if (file.isDirectory()) [ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_24 $$ if (file.isDirectory()) [ CD ]
Line_10 $$ file = list[i]-->Line_24 $$ if (file.isDirectory()) [ FD ]
Line_4 $$ File file = null-->Line_24 $$ if (file.isDirectory()) [ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_25 $$ if (depth++ > 40) [ CD ]
Line_25 $$ if (depth++ > 40) -->Line_26 $$ error(ctx.getString(R.string.too_deep_hierarchy))[ CD ]
Line_25 $$ if (depth++ > 40) -->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ CD ]
Line_9 $$ File outFile = null-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_9 $$ File outFile = null-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_28 $$ if (outFile.exists() || outFile.mkdir()) -->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ CD ]
Line_10 $$ file = list[i]-->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ FD ]
Line_4 $$ File file = null-->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ FD ]
Line_9 $$ File outFile = null-->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ FD ]
Line_28 $$ if (outFile.exists() || outFile.mkdir()) -->Line_30 $$ if (errMsg != null)[ CD ]
Line_28 $$ if (outFile.exists() || outFile.mkdir()) -->Line_31 $$ error(c.getString(R.string.cant_md, outFile.getAbsolutePath()))[ CD ]
Line_3 $$ Context c = ctx-->Line_31 $$ error(c.getString(R.string.cant_md, outFile.getAbsolutePath()))[ FD ]
Line_9 $$ File outFile = null-->Line_31 $$ error(c.getString(R.string.cant_md, outFile.getAbsolutePath()))[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_31 $$ error(c.getString(R.string.cant_md, outFile.getAbsolutePath()))[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_34 $$ if (existed = outFile.exists()) [ CD ]
Line_6 $$ boolean existed = false-->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_34 $$ if (existed = outFile.exists()) [ CD ]
Line_6 $$ boolean existed = false-->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_34 $$ if (existed = outFile.exists()) [ CD ]
Line_9 $$ File outFile = null-->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)[ CD ]
Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)-->Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)[ CD ]
Line_3 $$ Context c = ctx-->Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)[ FD ]
Line_9 $$ File outFile = null-->Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)[ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_36 $$ if (res == Commander.SKIP)[ CD ]
Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)-->Line_36 $$ if (res == Commander.SKIP)[ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_37 $$ if (res == Commander.REPLACE) [ CD ]
Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)-->Line_37 $$ if (res == Commander.REPLACE) [ FD ]
Line_37 $$ if (res == Commander.REPLACE) -->Line_38 $$ if (outFile.equals(file))[ CD ]
Line_9 $$ File outFile = null-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_10 $$ file = list[i]-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_4 $$ File file = null-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_38 $$ if (outFile.equals(file))-->Line_38 $$ if (outFile.equals(file))[ CD ]
Line_9 $$ File outFile = null-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_10 $$ file = list[i]-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_4 $$ File file = null-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_38 $$ if (outFile.equals(file))-->Line_38 $$ outFile.delete()[ CD ]
Line_9 $$ File outFile = null-->Line_38 $$ outFile.delete()[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_38 $$ outFile.delete()[ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_40 $$ if (res == Commander.ABORT)[ CD ]
Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)-->Line_40 $$ if (res == Commander.ABORT)[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_42 $$ if (move) [ CD ]
Line_42 $$ if (move) -->Line_43 $$ long len = file.length()[ CD ]
Line_43 $$ long len = file.length()-->Line_43 $$ long len = file.length()[ CD ]
Line_10 $$ file = list[i]-->Line_43 $$ long len = file.length()[ FD ]
Line_4 $$ File file = null-->Line_43 $$ long len = file.length()[ FD ]
Line_42 $$ if (move) -->Line_44 $$ if (file.renameTo(outFile)) [ CD ]
Line_10 $$ file = list[i]-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_4 $$ File file = null-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_9 $$ File outFile = null-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_44 $$ if (file.renameTo(outFile)) -->Line_44 $$ if (file.renameTo(outFile)) [ CD ]
Line_10 $$ file = list[i]-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_4 $$ File file = null-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_9 $$ File outFile = null-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_44 $$ if (file.renameTo(outFile)) -->Line_47 $$ int so_far = (int) (totalBytes * conv)[ CD ]
Line_44 $$ if (file.renameTo(outFile)) -->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ CD ]
Line_47 $$ int so_far = (int) (totalBytes * conv)-->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ FD ]
Line_9 $$ File outFile = null-->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ FD ]
Line_3 $$ Context c = ctx-->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_52 $$ in = new FileInputStream(file).getChannel()[ CD ]
Line_7 $$ FileChannel in = null-->Line_52 $$ in = new FileInputStream(file).getChannel()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_52 $$ in = new FileInputStream(file).getChannel()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_52 $$ in = new FileInputStream(file).getChannel()[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_53 $$ out = new FileOutputStream(outFile).getChannel()[ CD ]
Line_8 $$ FileChannel out = null-->Line_53 $$ out = new FileOutputStream(outFile).getChannel()[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_53 $$ out = new FileOutputStream(outFile).getChannel()[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_53 $$ out = new FileOutputStream(outFile).getChannel()[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_54 $$ long size = in.size()[ CD ]
Line_54 $$ long size = in.size()-->Line_54 $$ long size = in.size()[ CD ]
Line_7 $$ FileChannel in = null-->Line_54 $$ long size = in.size()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_54 $$ long size = in.size()[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_55 $$ final long max_chunk = 524288[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_56 $$ long pos = 0[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_57 $$ long chunk = size > max_chunk ? max_chunk : size[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_58 $$ long t_chunk = 0[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_59 $$ long start_time = 0[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_60 $$ int speed = 0[ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_62 $$ String sz_s = Utils.getHumanSize(size)[ CD ]
Line_62 $$ String sz_s = Utils.getHumanSize(size)-->Line_62 $$ String sz_s = Utils.getHumanSize(size)[ CD ]
Line_54 $$ long size = in.size()-->Line_62 $$ String sz_s = Utils.getHumanSize(size)[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_63 $$ String rep_s = c.getString(R.string.copying, fn)[ CD ]
Line_63 $$ String rep_s = c.getString(R.string.copying, fn)-->Line_63 $$ String rep_s = c.getString(R.string.copying, fn)[ CD ]
Line_3 $$ Context c = ctx-->Line_63 $$ String rep_s = c.getString(R.string.copying, fn)[ FD ]
Line_22 $$ String fn = file.getName()-->Line_63 $$ String rep_s = c.getString(R.string.copying, fn)[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_64 $$ for (pos = 0; pos < size; ) [ CD ]
Line_24 $$ if (file.isDirectory()) -->Line_24 $$ if (file.isDirectory()) [ CD ]
Line_56 $$ long pos = 0-->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_54 $$ long size = in.size()-->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_64 $$ for (pos = 0; pos < size; ) [ CD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_56 $$ long pos = 0-->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_65 $$ if (t_chunk == 0)[ CD ]
Line_58 $$ long t_chunk = 0-->Line_65 $$ if (t_chunk == 0)[ FD ]
Line_65 $$ if (t_chunk == 0)-->Line_65 $$ start_time = System.currentTimeMillis()[ CD ]
Line_65 $$ start_time = System.currentTimeMillis()-->Line_65 $$ start_time = System.currentTimeMillis()[ FD ]
Line_59 $$ long start_time = 0-->Line_65 $$ start_time = System.currentTimeMillis()[ FD ]
Line_65 $$ start_time = System.currentTimeMillis()-->Line_65 $$ start_time = System.currentTimeMillis()[ CD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ CD ]
Line_47 $$ int so_far = (int) (totalBytes * conv)-->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_60 $$ int speed = 0-->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_56 $$ long pos = 0-->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_62 $$ String sz_s = Utils.getHumanSize(size)-->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ CD ]
Line_67 $$ long transferred = in.transferTo(pos, chunk, out)-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ CD ]
Line_7 $$ FileChannel in = null-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_56 $$ long pos = 0-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_57 $$ long chunk = size > max_chunk ? max_chunk : size-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_8 $$ FileChannel out = null-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_68 $$ pos += transferred[ CD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_68 $$ pos += transferred[ FD ]
Line_68 $$ pos += transferred-->Line_68 $$ pos += transferred[ FD ]
Line_56 $$ long pos = 0-->Line_68 $$ pos += transferred[ FD ]
Line_67 $$ long transferred = in.transferTo(pos, chunk, out)-->Line_68 $$ pos += transferred[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_69 $$ t_chunk += transferred[ CD ]
Line_69 $$ t_chunk += transferred-->Line_69 $$ t_chunk += transferred[ FD ]
Line_58 $$ long t_chunk = 0-->Line_69 $$ t_chunk += transferred[ FD ]
Line_67 $$ long transferred = in.transferTo(pos, chunk, out)-->Line_69 $$ t_chunk += transferred[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_71 $$ if (isStopReq()) [ CD ]
Line_71 $$ if (isStopReq()) -->Line_71 $$ if (isStopReq()) [ CD ]
Line_71 $$ if (isStopReq()) -->Line_72 $$ Log.d(TAG, "Interrupted!")[ CD ]
Line_71 $$ if (isStopReq()) -->Line_73 $$ error(c.getString(R.string.canceled))[ CD ]
Line_3 $$ Context c = ctx-->Line_73 $$ error(c.getString(R.string.canceled))[ FD ]
Line_71 $$ if (isStopReq()) -->Line_74 $$ return counter[ CD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_76 $$ long time_delta = System.currentTimeMillis() - start_time[ CD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_77 $$ if (time_delta > 0) [ CD ]
Line_76 $$ long time_delta = System.currentTimeMillis() - start_time-->Line_77 $$ if (time_delta > 0) [ FD ]
Line_77 $$ if (time_delta > 0) -->Line_78 $$ speed = (int) (1000 * t_chunk / time_delta)[ CD ]
Line_78 $$ speed = (int) (1000 * t_chunk / time_delta)-->Line_78 $$ speed = (int) (1000 * t_chunk / time_delta)[ FD ]
Line_60 $$ int speed = 0-->Line_78 $$ speed = (int) (1000 * t_chunk / time_delta)[ FD ]
Line_77 $$ if (time_delta > 0) -->Line_79 $$ t_chunk = 0[ CD ]
Line_69 $$ t_chunk += transferred-->Line_79 $$ t_chunk = 0[ FD ]
Line_79 $$ t_chunk = 0-->Line_79 $$ t_chunk = 0[ FD ]
Line_58 $$ long t_chunk = 0-->Line_79 $$ t_chunk = 0[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_82 $$ in.close()[ CD ]
Line_7 $$ FileChannel in = null-->Line_82 $$ in.close()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_82 $$ in.close()[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_83 $$ out.close()[ CD ]
Line_8 $$ FileChannel out = null-->Line_83 $$ out.close()[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_83 $$ out.close()[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_84 $$ in = null[ CD ]
Line_7 $$ FileChannel in = null-->Line_84 $$ in = null[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_84 $$ in = null[ FD ]
Line_84 $$ in = null-->Line_84 $$ in = null[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_85 $$ out = null[ CD ]
Line_8 $$ FileChannel out = null-->Line_85 $$ out = null[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_85 $$ out = null[ FD ]
Line_85 $$ out = null-->Line_85 $$ out = null[ FD ]
Line_24 $$ if (file.isDirectory()) -->Line_86 $$ if (i >= list.length - 1)[ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_86 $$ if (i >= list.length - 1)[ FD ]
Line_86 $$ if (i >= list.length - 1)-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ CD ]
Line_3 $$ Context c = ctx-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_22 $$ String fn = file.getName()-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_68 $$ pos += transferred-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_56 $$ long pos = 0-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_62 $$ String sz_s = Utils.getHumanSize(size)-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_89 $$ if (move)-->Line_89 $$ file.delete()[ CD ]
Line_10 $$ file = list[i]-->Line_89 $$ file.delete()[ FD ]
Line_4 $$ File file = null-->Line_89 $$ file.delete()[ FD ]
Line_9 $$ File outFile = null-->Line_90 $$ outFile.setLastModified(last_modified)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_90 $$ outFile.setLastModified(last_modified)[ FD ]
Line_21 $$ long last_modified = file.lastModified()-->Line_90 $$ outFile.setLastModified(last_modified)[ FD ]
Line_92 $$ if (android.os.Build.VERSION.SDK_INT >= GINGERBREAD)-->Line_92 $$ ForwardCompat.setFullPermissions(outFile)[ CD ]
Line_9 $$ File outFile = null-->Line_92 $$ ForwardCompat.setFullPermissions(outFile)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_92 $$ ForwardCompat.setFullPermissions(outFile)[ FD ]
Line_3 $$ Context c = ctx-->Line_94 $$ error(c.getString(R.string.sec_err, e.getMessage()))[ FD ]
Line_3 $$ Context c = ctx-->Line_96 $$ error(c.getString(R.string.not_accs, e.getMessage()))[ FD ]
Line_3 $$ Context c = ctx-->Line_98 $$ error(c.getString(R.string.canceled))[ FD ]
Line_3 $$ Context c = ctx-->Line_101 $$ error(c.getString(R.string.acc_err, uri, msg != null ? msg : ""))[ FD ]
Line_15 $$ String uri = file.getAbsolutePath()-->Line_101 $$ error(c.getString(R.string.acc_err, uri, msg != null ? msg : ""))[ FD ]
Line_3 $$ Context c = ctx-->Line_103 $$ error(c.getString(R.string.rtexcept, uri, e.getMessage()))[ FD ]
Line_15 $$ String uri = file.getAbsolutePath()-->Line_103 $$ error(c.getString(R.string.rtexcept, uri, e.getMessage()))[ FD ]
Line_7 $$ FileChannel in = null-->Line_106 $$ if (in != null)[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_106 $$ if (in != null)[ FD ]
Line_84 $$ in = null-->Line_106 $$ if (in != null)[ FD ]
Line_106 $$ if (in != null)-->Line_106 $$ in.close()[ CD ]
Line_7 $$ FileChannel in = null-->Line_106 $$ in.close()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_106 $$ in.close()[ FD ]
Line_84 $$ in = null-->Line_106 $$ in.close()[ FD ]
Line_8 $$ FileChannel out = null-->Line_107 $$ if (out != null)[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_107 $$ if (out != null)[ FD ]
Line_85 $$ out = null-->Line_107 $$ if (out != null)[ FD ]
Line_107 $$ if (out != null)-->Line_107 $$ out.close()[ CD ]
Line_8 $$ FileChannel out = null-->Line_107 $$ out.close()[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_107 $$ out.close()[ FD ]
Line_85 $$ out = null-->Line_107 $$ out.close()[ FD ]
Line_6 $$ boolean existed = false-->Line_108 $$ if (!move && errMsg != null && outFile != null && !existed) [ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_108 $$ if (!move && errMsg != null && outFile != null && !existed) [ FD ]
Line_108 $$ if (!move && errMsg != null && outFile != null && !existed) -->Line_109 $$ Log.i(TAG, "Deleting failed output file")[ CD ]
Line_108 $$ if (!move && errMsg != null && outFile != null && !existed) -->Line_110 $$ outFile.delete()[ CD ]
Line_9 $$ File outFile = null-->Line_110 $$ outFile.delete()[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_110 $$ outFile.delete()[ FD ]
Line_3 $$ Context c = ctx-->Line_113 $$ error(c.getString(R.string.acc_err, uri, e.getMessage()))[ FD ]
Line_15 $$ String uri = file.getAbsolutePath()-->Line_113 $$ error(c.getString(R.string.acc_err, uri, e.getMessage()))[ FD ]
Line_2 $$ private final int copyFiles(File[] list, String dest, boolean dest_is_full_name) throws InterruptedException -->Line_117 $$ return counter[ CD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_5 $$ for (int i = 0; i < list.length; i++) [ FD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_5 $$ for (int i = 0; i < list.length; i++) [ FD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_5 $$ for (int i = 0; i < list.length; i++) [ FD ]
Line_10 $$ file = list[i]-->Line_11 $$ if (file == null) [ FD ]
Line_10 $$ file = list[i]-->Line_15 $$ String uri = file.getAbsolutePath()[ FD ]
Line_10 $$ file = list[i]-->Line_21 $$ long last_modified = file.lastModified()[ FD ]
Line_10 $$ file = list[i]-->Line_22 $$ String fn = file.getName()[ FD ]
Line_10 $$ file = list[i]-->Line_24 $$ if (file.isDirectory()) [ FD ]
Line_10 $$ file = list[i]-->Line_24 $$ if (file.isDirectory()) [ FD ]
Line_9 $$ File outFile = null-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_9 $$ File outFile = null-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_28 $$ if (outFile.exists() || outFile.mkdir()) [ FD ]
Line_10 $$ file = list[i]-->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ FD ]
Line_9 $$ File outFile = null-->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_29 $$ copyFiles(file.listFiles(), outFile.getAbsolutePath(), false)[ FD ]
Line_9 $$ File outFile = null-->Line_31 $$ error(c.getString(R.string.cant_md, outFile.getAbsolutePath()))[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_31 $$ error(c.getString(R.string.cant_md, outFile.getAbsolutePath()))[ FD ]
Line_6 $$ boolean existed = false-->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_9 $$ File outFile = null-->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_34 $$ if (existed = outFile.exists()) [ FD ]
Line_9 $$ File outFile = null-->Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)[ FD ]
Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)-->Line_36 $$ if (res == Commander.SKIP)[ FD ]
Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)-->Line_37 $$ if (res == Commander.REPLACE) [ FD ]
Line_9 $$ File outFile = null-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_10 $$ file = list[i]-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_9 $$ File outFile = null-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_10 $$ file = list[i]-->Line_38 $$ if (outFile.equals(file))[ FD ]
Line_9 $$ File outFile = null-->Line_38 $$ outFile.delete()[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_38 $$ outFile.delete()[ FD ]
Line_35 $$ int res = askOnFileExist(c.getString(R.string.file_exist, outFile.getAbsolutePath()), commander)-->Line_40 $$ if (res == Commander.ABORT)[ FD ]
Line_10 $$ file = list[i]-->Line_43 $$ long len = file.length()[ FD ]
Line_10 $$ file = list[i]-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_9 $$ File outFile = null-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_10 $$ file = list[i]-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_9 $$ File outFile = null-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_44 $$ if (file.renameTo(outFile)) [ FD ]
Line_47 $$ int so_far = (int) (totalBytes * conv)-->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ FD ]
Line_9 $$ File outFile = null-->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_48 $$ sendProgress(outFile.getName() + " " + c.getString(R.string.moved), so_far, 0)[ FD ]
Line_7 $$ FileChannel in = null-->Line_54 $$ long size = in.size()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_54 $$ long size = in.size()[ FD ]
Line_84 $$ in = null-->Line_54 $$ long size = in.size()[ FD ]
Line_54 $$ long size = in.size()-->Line_62 $$ String sz_s = Utils.getHumanSize(size)[ FD ]
Line_22 $$ String fn = file.getName()-->Line_63 $$ String rep_s = c.getString(R.string.copying, fn)[ FD ]
Line_7 $$ FileChannel in = null-->Line_82 $$ in.close()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_82 $$ in.close()[ FD ]
Line_84 $$ in = null-->Line_82 $$ in.close()[ FD ]
Line_8 $$ FileChannel out = null-->Line_83 $$ out.close()[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_83 $$ out.close()[ FD ]
Line_85 $$ out = null-->Line_83 $$ out.close()[ FD ]
Line_5 $$ for (int i = 0; i < list.length; i++) -->Line_86 $$ if (i >= list.length - 1)[ FD ]
Line_22 $$ String fn = file.getName()-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_56 $$ long pos = 0-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_62 $$ String sz_s = Utils.getHumanSize(size)-->Line_86 $$ sendProgress(c.getString(R.string.copied_f, fn) + sizeOfsize(pos, sz_s), (int) (totalBytes * conv))[ FD ]
Line_10 $$ file = list[i]-->Line_89 $$ file.delete()[ FD ]
Line_9 $$ File outFile = null-->Line_90 $$ outFile.setLastModified(last_modified)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_90 $$ outFile.setLastModified(last_modified)[ FD ]
Line_21 $$ long last_modified = file.lastModified()-->Line_90 $$ outFile.setLastModified(last_modified)[ FD ]
Line_9 $$ File outFile = null-->Line_92 $$ ForwardCompat.setFullPermissions(outFile)[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_92 $$ ForwardCompat.setFullPermissions(outFile)[ FD ]
Line_15 $$ String uri = file.getAbsolutePath()-->Line_101 $$ error(c.getString(R.string.acc_err, uri, msg != null ? msg : ""))[ FD ]
Line_15 $$ String uri = file.getAbsolutePath()-->Line_103 $$ error(c.getString(R.string.rtexcept, uri, e.getMessage()))[ FD ]
Line_7 $$ FileChannel in = null-->Line_106 $$ if (in != null)[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_106 $$ if (in != null)[ FD ]
Line_84 $$ in = null-->Line_106 $$ if (in != null)[ FD ]
Line_7 $$ FileChannel in = null-->Line_106 $$ in.close()[ FD ]
Line_52 $$ in = new FileInputStream(file).getChannel()-->Line_106 $$ in.close()[ FD ]
Line_84 $$ in = null-->Line_106 $$ in.close()[ FD ]
Line_8 $$ FileChannel out = null-->Line_107 $$ if (out != null)[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_107 $$ if (out != null)[ FD ]
Line_85 $$ out = null-->Line_107 $$ if (out != null)[ FD ]
Line_8 $$ FileChannel out = null-->Line_107 $$ out.close()[ FD ]
Line_53 $$ out = new FileOutputStream(outFile).getChannel()-->Line_107 $$ out.close()[ FD ]
Line_85 $$ out = null-->Line_107 $$ out.close()[ FD ]
Line_6 $$ boolean existed = false-->Line_108 $$ if (!move && errMsg != null && outFile != null && !existed) [ FD ]
Line_34 $$ if (existed = outFile.exists()) -->Line_108 $$ if (!move && errMsg != null && outFile != null && !existed) [ FD ]
Line_9 $$ File outFile = null-->Line_110 $$ outFile.delete()[ FD ]
Line_23 $$ outFile = dest_is_full_name ? new File(dest) : new File(dest, fn)-->Line_110 $$ outFile.delete()[ FD ]
Line_15 $$ String uri = file.getAbsolutePath()-->Line_113 $$ error(c.getString(R.string.acc_err, uri, e.getMessage()))[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_68 $$ pos += transferred-->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_68 $$ pos += transferred-->Line_64 $$ for (pos = 0; pos < size; ) [ FD ]
Line_69 $$ t_chunk += transferred-->Line_65 $$ if (t_chunk == 0)[ FD ]
Line_79 $$ t_chunk = 0-->Line_65 $$ if (t_chunk == 0)[ FD ]
Line_78 $$ speed = (int) (1000 * t_chunk / time_delta)-->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_68 $$ pos += transferred-->Line_66 $$ sendProgress(rep_s + sizeOfsize(pos, sz_s), so_far, (int) (totalBytes * conv), speed)[ FD ]
Line_64 $$ for (pos = 0; pos < size; ) -->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_68 $$ pos += transferred-->Line_67 $$ long transferred = in.transferTo(pos, chunk, out)[ FD ]
Line_67 $$ long transferred = in.transferTo(pos, chunk, out)-->Line_68 $$ pos += transferred[ FD ]
Line_67 $$ long transferred = in.transferTo(pos, chunk, out)-->Line_69 $$ t_chunk += transferred[ FD ]
Line_76 $$ long time_delta = System.currentTimeMillis() - start_time-->Line_77 $$ if (time_delta > 0) [ FD ]
