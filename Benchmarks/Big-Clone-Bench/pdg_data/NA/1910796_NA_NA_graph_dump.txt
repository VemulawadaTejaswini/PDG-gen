Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void saveToPackage() [ CD ]
Line_2 $$ public void saveToPackage() -->Line_3 $$ boolean inPackage = false[ CD ]
Line_2 $$ public void saveToPackage() -->Line_4 $$ String className = IconEditor.className[ CD ]
Line_2 $$ public void saveToPackage() -->Line_5 $$ if (!checkPackage()) [ CD ]
Line_5 $$ if (!checkPackage()) -->Line_5 $$ if (!checkPackage()) [ CD ]
Line_5 $$ if (!checkPackage()) -->Line_5 $$ if (!checkPackage()) [ CD ]
Line_5 $$ if (!checkPackage()) -->Line_6 $$ JOptionPane.showMessageDialog(this, "No package selected. Aborting.", "Package not selected!", JOptionPane.WARNING_MESSAGE)[ CD ]
Line_5 $$ if (!checkPackage()) -->Line_7 $$ return[ CD ]
Line_2 $$ public void saveToPackage() -->Line_9 $$ File iconFile = new File(getPackageFile().getParent() + File.separator + classIcon)[ CD ]
Line_2 $$ public void saveToPackage() -->Line_10 $$ File prevIconFile = new File(prevPackagePath + File.separator + classIcon)[ CD ]
Line_2 $$ public void saveToPackage() -->Line_11 $$ if ((IconEditor.getClassIcon() == null) || !prevIconFile.exists()) [ CD ]
Line_11 $$ if ((IconEditor.getClassIcon() == null) || !prevIconFile.exists()) -->Line_11 $$ if ((IconEditor.getClassIcon() == null) || !prevIconFile.exists()) [ CD ]
Line_10 $$ File prevIconFile = new File(prevPackagePath + File.separator + classIcon)-->Line_11 $$ if ((IconEditor.getClassIcon() == null) || !prevIconFile.exists()) [ FD ]
Line_11 $$ if ((IconEditor.getClassIcon() == null) || !prevIconFile.exists()) -->Line_12 $$ IconEditor.setClassIcon("default.gif")[ CD ]
Line_11 $$ if ((IconEditor.getClassIcon() == null) || !prevIconFile.exists()) -->Line_13 $$ if (prevIconFile.exists() && (prevIconFile.compareTo(iconFile) != 0)) [ CD ]
Line_10 $$ File prevIconFile = new File(prevPackagePath + File.separator + classIcon)-->Line_13 $$ if (prevIconFile.exists() && (prevIconFile.compareTo(iconFile) != 0)) [ FD ]
Line_10 $$ File prevIconFile = new File(prevPackagePath + File.separator + classIcon)-->Line_13 $$ if (prevIconFile.exists() && (prevIconFile.compareTo(iconFile) != 0)) [ FD ]
Line_9 $$ File iconFile = new File(getPackageFile().getParent() + File.separator + classIcon)-->Line_13 $$ if (prevIconFile.exists() && (prevIconFile.compareTo(iconFile) != 0)) [ FD ]
Line_13 $$ if (prevIconFile.exists() && (prevIconFile.compareTo(iconFile) != 0)) -->Line_14 $$ FileFuncs.copyImageFile(prevIconFile, iconFile)[ CD ]
Line_10 $$ File prevIconFile = new File(prevPackagePath + File.separator + classIcon)-->Line_14 $$ FileFuncs.copyImageFile(prevIconFile, iconFile)[ FD ]
Line_9 $$ File iconFile = new File(getPackageFile().getParent() + File.separator + classIcon)-->Line_14 $$ FileFuncs.copyImageFile(prevIconFile, iconFile)[ FD ]
Line_2 $$ public void saveToPackage() -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ CD ]
Line_2 $$ public void saveToPackage() -->Line_2 $$ public void saveToPackage() [ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) [ CD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) [ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) [ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_19 $$ inPackage = true[ CD ]
Line_19 $$ inPackage = true-->Line_19 $$ inPackage = true[ FD ]
Line_3 $$ boolean inPackage = false-->Line_19 $$ inPackage = true[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_22 $$ shapeList.shift(classX, classY)[ CD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_23 $$ packageClassList.get(i).setBoundingbox(boundingbox)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_23 $$ packageClassList.get(i).setBoundingbox(boundingbox)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_24 $$ packageClassList.get(i).setDescription(IconEditor.classDescription)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_24 $$ packageClassList.get(i).setDescription(IconEditor.classDescription)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_25 $$ if (IconEditor.getClassIcon() == null) [ CD ]
Line_25 $$ if (IconEditor.getClassIcon() == null) -->Line_26 $$ packageClassList.get(i).setIconName("default.gif")[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_26 $$ packageClassList.get(i).setIconName("default.gif")[ FD ]
Line_25 $$ if (IconEditor.getClassIcon() == null) -->Line_28 $$ packageClassList.get(i).setIconName(IconEditor.getClassIcon())[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_28 $$ packageClassList.get(i).setIconName(IconEditor.getClassIcon())[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_30 $$ packageClassList.get(i).setIsRelation(IconEditor.classIsRelation)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_30 $$ packageClassList.get(i).setIsRelation(IconEditor.classIsRelation)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_31 $$ packageClassList.get(i).setName(IconEditor.className)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_31 $$ packageClassList.get(i).setName(IconEditor.className)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_32 $$ packageClassList.get(i).setPorts(ports)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_32 $$ packageClassList.get(i).setPorts(ports)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_33 $$ packageClassList.get(i).shiftPorts(classX, classY)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_33 $$ packageClassList.get(i).shiftPorts(classX, classY)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_34 $$ packageClassList.get(i).setShapeList(shapeList)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_34 $$ packageClassList.get(i).setShapeList(shapeList)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_35 $$ if (dbrClassFields != null && dbrClassFields.getRowCount() > 0) [ CD ]
Line_35 $$ if (dbrClassFields != null && dbrClassFields.getRowCount() > 0) -->Line_36 $$ fields.clear()[ CD ]
Line_35 $$ if (dbrClassFields != null && dbrClassFields.getRowCount() > 0) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ CD ]
Line_35 $$ if (dbrClassFields != null && dbrClassFields.getRowCount() > 0) -->Line_35 $$ if (dbrClassFields != null && dbrClassFields.getRowCount() > 0) [ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_38 $$ String fieldName = dbrClassFields.getValueAt(j, iNAME)[ CD ]
Line_38 $$ String fieldName = dbrClassFields.getValueAt(j, iNAME)-->Line_38 $$ String fieldName = dbrClassFields.getValueAt(j, iNAME)[ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_38 $$ String fieldName = dbrClassFields.getValueAt(j, iNAME)[ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_39 $$ String fieldType = dbrClassFields.getValueAt(j, iTYPE)[ CD ]
Line_39 $$ String fieldType = dbrClassFields.getValueAt(j, iTYPE)-->Line_39 $$ String fieldType = dbrClassFields.getValueAt(j, iTYPE)[ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_39 $$ String fieldType = dbrClassFields.getValueAt(j, iTYPE)[ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_40 $$ String fieldValue = dbrClassFields.getValueAt(j, iVALUE)[ CD ]
Line_40 $$ String fieldValue = dbrClassFields.getValueAt(j, iVALUE)-->Line_40 $$ String fieldValue = dbrClassFields.getValueAt(j, iVALUE)[ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_40 $$ String fieldValue = dbrClassFields.getValueAt(j, iVALUE)[ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_41 $$ ClassField field = new ClassField(fieldName, fieldType, fieldValue)[ CD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_42 $$ fields.add(field)[ CD ]
Line_41 $$ ClassField field = new ClassField(fieldName, fieldType, fieldValue)-->Line_42 $$ fields.add(field)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_45 $$ packageClassList.get(i).setFields(fields)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_45 $$ packageClassList.get(i).setFields(fields)[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_46 $$ packageClassList.add(packageClassList.get(i))[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_46 $$ packageClassList.add(packageClassList.get(i))[ FD ]
Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) -->Line_47 $$ packageClassList.remove(i)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_47 $$ packageClassList.remove(i)[ FD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_55 $$ while ((str = in.readLine()) != null) [ FD ]
Line_53 $$ String str-->Line_55 $$ while ((str = in.readLine()) != null) [ FD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_55 $$ while ((str = in.readLine()) != null) [ CD ]
Line_52 $$ BufferedReader in = new BufferedReader(new FileReader(getPackageFile()))-->Line_55 $$ while ((str = in.readLine()) != null) [ FD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_56 $$ if (inPackage && str.trim().startsWith("<class")) [ CD ]
Line_19 $$ inPackage = true-->Line_56 $$ if (inPackage && str.trim().startsWith("<class")) [ FD ]
Line_3 $$ boolean inPackage = false-->Line_56 $$ if (inPackage && str.trim().startsWith("<class")) [ FD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_56 $$ if (inPackage && str.trim().startsWith("<class")) [ FD ]
Line_53 $$ String str-->Line_56 $$ if (inPackage && str.trim().startsWith("<class")) [ FD ]
Line_56 $$ if (inPackage && str.trim().startsWith("<class")) -->Line_58 $$ if (!inPackage) [ CD ]
Line_19 $$ inPackage = true-->Line_58 $$ if (!inPackage) [ FD ]
Line_3 $$ boolean inPackage = false-->Line_58 $$ if (!inPackage) [ FD ]
Line_19 $$ inPackage = true-->Line_58 $$ if (!inPackage) [ FD ]
Line_3 $$ boolean inPackage = false-->Line_58 $$ if (!inPackage) [ FD ]
Line_58 $$ if (!inPackage) -->Line_58 $$ if (!inPackage) [ CD ]
Line_19 $$ inPackage = true-->Line_58 $$ if (!inPackage) [ FD ]
Line_3 $$ boolean inPackage = false-->Line_58 $$ if (!inPackage) [ FD ]
Line_58 $$ if (!inPackage) -->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ CD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ FD ]
Line_53 $$ String str-->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ FD ]
Line_59 $$ if (str.equalsIgnoreCase("</package>"))-->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ CD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ FD ]
Line_53 $$ String str-->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ FD ]
Line_58 $$ if (!inPackage) -->Line_60 $$ content.append(str + "\n")[ CD ]
Line_54 $$ StringBuffer content = new StringBuffer()-->Line_60 $$ content.append(str + "\n")[ FD ]
Line_58 $$ if (!inPackage) -->Line_61 $$ if (inPackage)[ CD ]
Line_61 $$ if (inPackage)-->Line_61 $$ content.append(str + "\n")[ CD ]
Line_54 $$ StringBuffer content = new StringBuffer()-->Line_61 $$ content.append(str + "\n")[ FD ]
Line_19 $$ inPackage = true-->Line_63 $$ if (!inPackage) [ FD ]
Line_3 $$ boolean inPackage = false-->Line_63 $$ if (!inPackage) [ FD ]
Line_63 $$ if (!inPackage) -->Line_63 $$ if (!inPackage) [ CD ]
Line_19 $$ inPackage = true-->Line_63 $$ if (!inPackage) [ FD ]
Line_3 $$ boolean inPackage = false-->Line_63 $$ if (!inPackage) [ FD ]
Line_63 $$ if (!inPackage) -->Line_64 $$ content.append(getShapesInXML(false))[ CD ]
Line_54 $$ StringBuffer content = new StringBuffer()-->Line_64 $$ content.append(getShapesInXML(false))[ FD ]
Line_63 $$ if (!inPackage) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ CD ]
Line_63 $$ if (!inPackage) -->Line_63 $$ if (!inPackage) [ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ CD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ CD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_69 $$ makeClass(packageClassList.get(i))[ CD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_69 $$ makeClass(packageClassList.get(i))[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_69 $$ makeClass(packageClassList.get(i))[ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_70 $$ content.append(getShapesInXML(false))[ CD ]
Line_54 $$ StringBuffer content = new StringBuffer()-->Line_70 $$ content.append(getShapesInXML(false))[ FD ]
Line_54 $$ StringBuffer content = new StringBuffer()-->Line_73 $$ content.append("</package>")[ FD ]
Line_52 $$ BufferedReader in = new BufferedReader(new FileReader(getPackageFile()))-->Line_74 $$ in.close()[ FD ]
Line_75 $$ File javaFile = new File(getPackageFile().getParent() + File.separator + className + ".java")-->Line_78 $$ if (javaFile.exists()) [ FD ]
Line_78 $$ if (javaFile.exists()) -->Line_78 $$ if (javaFile.exists()) [ CD ]
Line_75 $$ File javaFile = new File(getPackageFile().getParent() + File.separator + className + ".java")-->Line_78 $$ if (javaFile.exists()) [ FD ]
Line_78 $$ if (javaFile.exists()) -->Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")[ CD ]
Line_77 $$ int overwriteFile = JOptionPane.YES_OPTION-->Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")[ FD ]
Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")-->Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")[ FD ]
Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")-->Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")[ CD ]
Line_77 $$ int overwriteFile = JOptionPane.YES_OPTION-->Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) [ FD ]
Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")-->Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) [ FD ]
Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) -->Line_82 $$ FileOutputStream out = new FileOutputStream(new File(getPackageFile().getAbsolutePath()))[ CD ]
Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) -->Line_83 $$ out.write(content.toString().getBytes())[ CD ]
Line_82 $$ FileOutputStream out = new FileOutputStream(new File(getPackageFile().getAbsolutePath()))-->Line_83 $$ out.write(content.toString().getBytes())[ FD ]
Line_54 $$ StringBuffer content = new StringBuffer()-->Line_83 $$ out.write(content.toString().getBytes())[ FD ]
Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) -->Line_84 $$ out.flush()[ CD ]
Line_82 $$ FileOutputStream out = new FileOutputStream(new File(getPackageFile().getAbsolutePath()))-->Line_84 $$ out.flush()[ FD ]
Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) -->Line_85 $$ out.close()[ CD ]
Line_82 $$ FileOutputStream out = new FileOutputStream(new File(getPackageFile().getAbsolutePath()))-->Line_85 $$ out.close()[ FD ]
Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) -->Line_86 $$ if (overwriteFile == JOptionPane.YES_OPTION) [ CD ]
Line_77 $$ int overwriteFile = JOptionPane.YES_OPTION-->Line_86 $$ if (overwriteFile == JOptionPane.YES_OPTION) [ FD ]
Line_79 $$ overwriteFile = JOptionPane.showConfirmDialog(null, "Java class already exists. Overwrite?")-->Line_86 $$ if (overwriteFile == JOptionPane.YES_OPTION) [ FD ]
Line_86 $$ if (overwriteFile == JOptionPane.YES_OPTION) -->Line_87 $$ String fileText = null[ CD ]
Line_86 $$ if (overwriteFile == JOptionPane.YES_OPTION) -->Line_88 $$ if (prevJavaFile.exists()) [ CD ]
Line_76 $$ File prevJavaFile = new File(prevPackagePath + File.separator + className + ".java")-->Line_88 $$ if (prevJavaFile.exists()) [ FD ]
Line_88 $$ if (prevJavaFile.exists()) -->Line_88 $$ if (prevJavaFile.exists()) [ CD ]
Line_76 $$ File prevJavaFile = new File(prevPackagePath + File.separator + className + ".java")-->Line_88 $$ if (prevJavaFile.exists()) [ FD ]
Line_88 $$ if (prevJavaFile.exists()) -->Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)[ CD ]
Line_87 $$ String fileText = null-->Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)[ FD ]
Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)-->Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)[ FD ]
Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)-->Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)[ CD ]
Line_76 $$ File prevJavaFile = new File(prevPackagePath + File.separator + className + ".java")-->Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)[ FD ]
Line_88 $$ if (prevJavaFile.exists()) -->Line_91 $$ fileText = "class " + className + " [ CD ]
Line_87 $$ String fileText = null-->Line_91 $$ fileText = "class " + className + " [ FD ]
Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)-->Line_91 $$ fileText = "class " + className + " [ FD ]
Line_91 $$ fileText = "class " + className + " -->Line_91 $$ fileText = "class " + className + " [ FD ]
Line_88 $$ if (prevJavaFile.exists()) -->Line_92 $$ fileText += "\n    /*@ specification " + className + " [ CD ]
Line_87 $$ String fileText = null-->Line_92 $$ fileText += "\n    /*@ specification " + className + " [ FD ]
Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)-->Line_92 $$ fileText += "\n    /*@ specification " + className + " [ FD ]
Line_91 $$ fileText = "class " + className + " -->Line_92 $$ fileText += "\n    /*@ specification " + className + " [ FD ]
Line_92 $$ fileText += "\n    /*@ specification " + className + " -->Line_92 $$ fileText += "\n    /*@ specification " + className + " [ FD ]
Line_88 $$ if (prevJavaFile.exists()) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ CD ]
Line_88 $$ if (prevJavaFile.exists()) -->Line_88 $$ if (prevJavaFile.exists()) [ CD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ CD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ CD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_94 $$ String fieldName = dbrClassFields.getValueAt(i, iNAME)[ CD ]
Line_94 $$ String fieldName = dbrClassFields.getValueAt(i, iNAME)-->Line_94 $$ String fieldName = dbrClassFields.getValueAt(i, iNAME)[ CD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_94 $$ String fieldName = dbrClassFields.getValueAt(i, iNAME)[ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_94 $$ String fieldName = dbrClassFields.getValueAt(i, iNAME)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_94 $$ String fieldName = dbrClassFields.getValueAt(i, iNAME)[ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)[ CD ]
Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)-->Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)[ CD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)[ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)[ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_96 $$ if (fieldType != null) [ CD ]
Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)-->Line_96 $$ if (fieldType != null) [ FD ]
Line_39 $$ String fieldType = dbrClassFields.getValueAt(j, iTYPE)-->Line_96 $$ if (fieldType != null) [ FD ]
Line_96 $$ if (fieldType != null) -->Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"[ CD ]
Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"-->Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"[ FD ]
Line_87 $$ String fileText = null-->Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"[ FD ]
Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)-->Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"[ FD ]
Line_91 $$ fileText = "class " + className + " -->Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"[ FD ]
Line_92 $$ fileText += "\n    /*@ specification " + className + " -->Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"[ FD ]
Line_88 $$ if (prevJavaFile.exists()) -->Line_100 $$ fileText += "    }@*/\n \n}"[ CD ]
Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"-->Line_100 $$ fileText += "    }@*/\n \n}"[ FD ]
Line_87 $$ String fileText = null-->Line_100 $$ fileText += "    }@*/\n \n}"[ FD ]
Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)-->Line_100 $$ fileText += "    }@*/\n \n}"[ FD ]
Line_91 $$ fileText = "class " + className + " -->Line_100 $$ fileText += "    }@*/\n \n}"[ FD ]
Line_92 $$ fileText += "\n    /*@ specification " + className + " -->Line_100 $$ fileText += "    }@*/\n \n}"[ FD ]
Line_100 $$ fileText += "    }@*/\n \n}"-->Line_100 $$ fileText += "    }@*/\n \n}"[ FD ]
Line_86 $$ if (overwriteFile == JOptionPane.YES_OPTION) -->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ CD ]
Line_75 $$ File javaFile = new File(getPackageFile().getParent() + File.separator + className + ".java")-->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ FD ]
Line_97 $$ fileText += "    " + fieldType + " " + fieldName + ";\n"-->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ FD ]
Line_87 $$ String fileText = null-->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ FD ]
Line_89 $$ fileText = FileFuncs.getFileContents(prevJavaFile)-->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ FD ]
Line_91 $$ fileText = "class " + className + " -->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ FD ]
Line_92 $$ fileText += "\n    /*@ specification " + className + " -->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ FD ]
Line_100 $$ fileText += "    }@*/\n \n}"-->Line_102 $$ FileFuncs.writeFile(javaFile, fileText)[ FD ]
Line_81 $$ if (overwriteFile != JOptionPane.CANCEL_OPTION) -->Line_104 $$ JOptionPane.showMessageDialog(null, "Saved to package: " + getPackageFile().getName(), "Saved", JOptionPane.INFORMATION_MESSAGE)[ CD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_18 $$ if (IconEditor.className.equalsIgnoreCase(packageClassList.get(i).getName())) [ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_23 $$ packageClassList.get(i).setBoundingbox(boundingbox)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_24 $$ packageClassList.get(i).setDescription(IconEditor.classDescription)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_26 $$ packageClassList.get(i).setIconName("default.gif")[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_28 $$ packageClassList.get(i).setIconName(IconEditor.getClassIcon())[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_30 $$ packageClassList.get(i).setIsRelation(IconEditor.classIsRelation)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_31 $$ packageClassList.get(i).setName(IconEditor.className)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_32 $$ packageClassList.get(i).setPorts(ports)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_33 $$ packageClassList.get(i).shiftPorts(classX, classY)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_34 $$ packageClassList.get(i).setShapeList(shapeList)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_45 $$ packageClassList.get(i).setFields(fields)[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_46 $$ packageClassList.add(packageClassList.get(i))[ FD ]
Line_17 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_47 $$ packageClassList.remove(i)[ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) [ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_38 $$ String fieldName = dbrClassFields.getValueAt(j, iNAME)[ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_39 $$ String fieldType = dbrClassFields.getValueAt(j, iTYPE)[ FD ]
Line_37 $$ for (int j = 0; j < dbrClassFields.getRowCount(); j++) -->Line_40 $$ String fieldValue = dbrClassFields.getValueAt(j, iVALUE)[ FD ]
Line_41 $$ ClassField field = new ClassField(fieldName, fieldType, fieldValue)-->Line_42 $$ fields.add(field)[ FD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_56 $$ if (inPackage && str.trim().startsWith("<class")) [ FD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ FD ]
Line_55 $$ while ((str = in.readLine()) != null) -->Line_59 $$ if (str.equalsIgnoreCase("</package>"))[ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) [ FD ]
Line_66 $$ for (int i = 0; i < packageClassList.size(); i++) -->Line_69 $$ makeClass(packageClassList.get(i))[ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) [ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_94 $$ String fieldName = dbrClassFields.getValueAt(i, iNAME)[ FD ]
Line_93 $$ for (int i = 0; i < dbrClassFields.getRowCount(); i++) -->Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)[ FD ]
Line_95 $$ String fieldType = dbrClassFields.getValueAt(i, iTYPE)-->Line_96 $$ if (fieldType != null) [ FD ]
