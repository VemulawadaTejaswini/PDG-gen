Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException [ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_3 $$ if (getArchetypeArtifactId(model) != null) [ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_3 $$ if (getArchetypeArtifactId(model) != null) [ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_4 $$ final Properties properties = new Properties()[ CD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_5 $$ properties.put("archetypeArtifactId", getArchetypeArtifactId(model))[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_5 $$ properties.put("archetypeArtifactId", getArchetypeArtifactId(model))[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_5 $$ properties.put("archetypeArtifactId", getArchetypeArtifactId(model))[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_6 $$ properties.put("archetypeGroupId", getArchetypeGroupId(model))[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_6 $$ properties.put("archetypeGroupId", getArchetypeGroupId(model))[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_6 $$ properties.put("archetypeGroupId", getArchetypeGroupId(model))[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_7 $$ properties.put("archetypeVersion", getArchetypeVersion(model))[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_7 $$ properties.put("archetypeVersion", getArchetypeVersion(model))[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_7 $$ properties.put("archetypeVersion", getArchetypeVersion(model))[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_8 $$ String artifact = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_ARTIFACT_ID)[ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_8 $$ String artifact = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_ARTIFACT_ID)[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_9 $$ if (artifact == null || artifact.trim().length() == 0) [ CD ]
Line_8 $$ String artifact = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_ARTIFACT_ID)-->Line_9 $$ if (artifact == null || artifact.trim().length() == 0) [ FD ]
Line_9 $$ if (artifact == null || artifact.trim().length() == 0) -->Line_10 $$ artifact = project.getName()[ CD ]
Line_8 $$ String artifact = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_ARTIFACT_ID)-->Line_10 $$ artifact = project.getName()[ FD ]
Line_10 $$ artifact = project.getName()-->Line_10 $$ artifact = project.getName()[ FD ]
Line_10 $$ artifact = project.getName()-->Line_10 $$ artifact = project.getName()[ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_10 $$ artifact = project.getName()[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_12 $$ properties.put("artifactId", artifact)[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_12 $$ properties.put("artifactId", artifact)[ FD ]
Line_8 $$ String artifact = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_ARTIFACT_ID)-->Line_12 $$ properties.put("artifactId", artifact)[ FD ]
Line_10 $$ artifact = project.getName()-->Line_12 $$ properties.put("artifactId", artifact)[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_13 $$ String group = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_GROUP_ID)[ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_13 $$ String group = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_GROUP_ID)[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_14 $$ if (group == null || group.trim().length() == 0) [ CD ]
Line_13 $$ String group = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_GROUP_ID)-->Line_14 $$ if (group == null || group.trim().length() == 0) [ FD ]
Line_14 $$ if (group == null || group.trim().length() == 0) -->Line_15 $$ group = project.getName()[ CD ]
Line_13 $$ String group = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_GROUP_ID)-->Line_15 $$ group = project.getName()[ FD ]
Line_15 $$ group = project.getName()-->Line_15 $$ group = project.getName()[ FD ]
Line_15 $$ group = project.getName()-->Line_15 $$ group = project.getName()[ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_15 $$ group = project.getName()[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_17 $$ properties.put("groupId", group)[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_17 $$ properties.put("groupId", group)[ FD ]
Line_13 $$ String group = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_GROUP_ID)-->Line_17 $$ properties.put("groupId", group)[ FD ]
Line_15 $$ group = project.getName()-->Line_17 $$ properties.put("groupId", group)[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_18 $$ properties.put("version", model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_VERSION))[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_18 $$ properties.put("version", model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_VERSION))[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_18 $$ properties.put("version", model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_VERSION))[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_19 $$ final StringBuffer sb = new StringBuffer(System.getProperty("user.home")).append(File.separator)[ CD ]
Line_19 $$ final StringBuffer sb = new StringBuffer(System.getProperty("user.home")).append(File.separator)-->Line_19 $$ final StringBuffer sb = new StringBuffer(System.getProperty("user.home")).append(File.separator)[ CD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_20 $$ sb.append(".m2").append(File.separator).append("repository")[ CD ]
Line_19 $$ final StringBuffer sb = new StringBuffer(System.getProperty("user.home")).append(File.separator)-->Line_20 $$ sb.append(".m2").append(File.separator).append("repository")[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_21 $$ final String local = sb.toString()[ CD ]
Line_21 $$ final String local = sb.toString()-->Line_21 $$ final String local = sb.toString()[ CD ]
Line_19 $$ final StringBuffer sb = new StringBuffer(System.getProperty("user.home")).append(File.separator)-->Line_21 $$ final String local = sb.toString()[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_22 $$ Logger.getLog().debug("Local Maven2 repository :: " + local)[ CD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_23 $$ properties.put("localRepository", local)[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_23 $$ properties.put("localRepository", local)[ FD ]
Line_21 $$ final String local = sb.toString()-->Line_23 $$ properties.put("localRepository", local)[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_24 $$ if (!offline) [ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_24 $$ if (!offline) [ FD ]
Line_24 $$ if (!offline) -->Line_24 $$ if (!offline) [ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_24 $$ if (!offline) [ FD ]
Line_24 $$ if (!offline) -->Line_25 $$ final String sbRepos = getRepositories()[ CD ]
Line_25 $$ final String sbRepos = getRepositories()-->Line_25 $$ final String sbRepos = getRepositories()[ CD ]
Line_24 $$ if (!offline) -->Line_26 $$ properties.put("remoteRepositories", sbRepos)[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_26 $$ properties.put("remoteRepositories", sbRepos)[ FD ]
Line_25 $$ final String sbRepos = getRepositories()-->Line_26 $$ properties.put("remoteRepositories", sbRepos)[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_28 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()[ CD ]
Line_28 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()-->Line_28 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()[ CD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_29 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)[ CD ]
Line_29 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)-->Line_29 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)[ CD ]
Line_28 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()-->Line_29 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")[ CD ]
Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")-->Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")[ CD ]
Line_29 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)-->Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")[ FD ]
Line_3 $$ if (getArchetypeArtifactId(model) != null) -->Line_31 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()[ CD ]
Line_31 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()-->Line_31 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()[ CD ]
Line_33 $$ String dfPom = getPomFile(group, artifact)-->Line_33 $$ String dfPom = getPomFile(group, artifact)[ CD ]
Line_13 $$ String group = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_GROUP_ID)-->Line_33 $$ String dfPom = getPomFile(group, artifact)[ FD ]
Line_15 $$ group = project.getName()-->Line_33 $$ String dfPom = getPomFile(group, artifact)[ FD ]
Line_8 $$ String artifact = (String) model.getProperty(IMavenFacetInstallDataModelProperties.PROJECT_ARTIFACT_ID)-->Line_33 $$ String dfPom = getPomFile(group, artifact)[ FD ]
Line_10 $$ artifact = project.getName()-->Line_33 $$ String dfPom = getPomFile(group, artifact)[ FD ]
Line_33 $$ String dfPom = getPomFile(group, artifact)-->Line_34 $$ ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())[ FD ]
Line_36 $$ OutputStream fous = null-->Line_38 $$ fous = new FileOutputStream(f)[ FD ]
Line_38 $$ fous = new FileOutputStream(f)-->Line_38 $$ fous = new FileOutputStream(f)[ FD ]
Line_34 $$ ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())-->Line_39 $$ IOUtils.copy(bais, fous)[ FD ]
Line_36 $$ OutputStream fous = null-->Line_39 $$ IOUtils.copy(bais, fous)[ FD ]
Line_38 $$ fous = new FileOutputStream(f)-->Line_39 $$ IOUtils.copy(bais, fous)[ FD ]
Line_36 $$ OutputStream fous = null-->Line_42 $$ if (fous != null) [ FD ]
Line_38 $$ fous = new FileOutputStream(f)-->Line_42 $$ if (fous != null) [ FD ]
Line_42 $$ if (fous != null) -->Line_43 $$ fous.close()[ CD ]
Line_36 $$ OutputStream fous = null-->Line_43 $$ fous.close()[ FD ]
Line_38 $$ fous = new FileOutputStream(f)-->Line_43 $$ fous.close()[ FD ]
Line_34 $$ ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())-->Line_45 $$ if (bais != null) [ FD ]
Line_45 $$ if (bais != null) -->Line_46 $$ bais.close()[ CD ]
Line_34 $$ ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())-->Line_46 $$ bais.close()[ FD ]
Line_51 $$ if (SiteManager.isHttpProxyEnable()) -->Line_51 $$ if (SiteManager.isHttpProxyEnable()) [ CD ]
Line_51 $$ if (SiteManager.isHttpProxyEnable()) -->Line_52 $$ addProxySettings(properties)[ CD ]
Line_4 $$ final Properties properties = new Properties()-->Line_52 $$ addProxySettings(properties)[ FD ]
Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")-->Line_54 $$ workingCopy.setAttribute(ATTR_POM_DIR, archetypePomDirectory.getAbsolutePath())[ FD ]
Line_31 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()-->Line_54 $$ workingCopy.setAttribute(ATTR_POM_DIR, archetypePomDirectory.getAbsolutePath())[ FD ]
Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")-->Line_55 $$ workingCopy.setAttribute(ATTR_PROPERTIES, convertPropertiesToList(properties))[ FD ]
Line_4 $$ final Properties properties = new Properties()-->Line_55 $$ workingCopy.setAttribute(ATTR_PROPERTIES, convertPropertiesToList(properties))[ FD ]
Line_57 $$ if (offline) -->Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ CD ]
Line_56 $$ String goalName = "archetype:create"-->Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ FD ]
Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ FD ]
Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ CD ]
Line_56 $$ String goalName = "archetype:create"-->Line_60 $$ goalName = updateGoal(goalName)[ FD ]
Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_60 $$ goalName = updateGoal(goalName)[ FD ]
Line_60 $$ goalName = updateGoal(goalName)-->Line_60 $$ goalName = updateGoal(goalName)[ FD ]
Line_60 $$ goalName = updateGoal(goalName)-->Line_60 $$ goalName = updateGoal(goalName)[ CD ]
Line_56 $$ String goalName = "archetype:create"-->Line_60 $$ goalName = updateGoal(goalName)[ FD ]
Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_60 $$ goalName = updateGoal(goalName)[ FD ]
Line_60 $$ goalName = updateGoal(goalName)-->Line_60 $$ goalName = updateGoal(goalName)[ FD ]
Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")-->Line_61 $$ workingCopy.setAttribute(ATTR_GOALS, goalName)[ FD ]
Line_56 $$ String goalName = "archetype:create"-->Line_61 $$ workingCopy.setAttribute(ATTR_GOALS, goalName)[ FD ]
Line_58 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_61 $$ workingCopy.setAttribute(ATTR_GOALS, goalName)[ FD ]
Line_60 $$ goalName = updateGoal(goalName)-->Line_61 $$ workingCopy.setAttribute(ATTR_GOALS, goalName)[ FD ]
Line_62 $$ final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout()-->Line_62 $$ final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout()[ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_63 $$ TimeoutLaunchConfiguration.launchWithTimeout(monitor, workingCopy, project, timeout)[ FD ]
Line_30 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating project using Apache Maven archetype")-->Line_63 $$ TimeoutLaunchConfiguration.launchWithTimeout(monitor, workingCopy, project, timeout)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_63 $$ TimeoutLaunchConfiguration.launchWithTimeout(monitor, workingCopy, project, timeout)[ FD ]
Line_62 $$ final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout()-->Line_63 $$ TimeoutLaunchConfiguration.launchWithTimeout(monitor, workingCopy, project, timeout)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_64 $$ monitor.setTaskName("Moving to workspace")[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_65 $$ FileUtils.copyDirectoryStructure(new File(archetypePomDirectory, project.getName()), ArchetypePOMHelper.getProjectDirectory(project))[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_65 $$ FileUtils.copyDirectoryStructure(new File(archetypePomDirectory, project.getName()), ArchetypePOMHelper.getProjectDirectory(project))[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_66 $$ monitor.worked(1)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_67 $$ performMavenInstall(monitor, project, offline)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_67 $$ performMavenInstall(monitor, project, offline)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_67 $$ performMavenInstall(monitor, project, offline)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_68 $$ project.refreshLocal(2, monitor)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_68 $$ project.refreshLocal(2, monitor)[ FD ]
Line_31 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()-->Line_74 $$ FileUtils.deleteDirectory(archetypePomDirectory)[ FD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_78 $$ monitor.worked(1)[ CD ]
Line_2 $$ private void generateArchetype(final IProject project, final IDataModel model, final IProgressMonitor monitor, final boolean offline) throws CoreException, InterruptedException, IOException -->Line_78 $$ monitor.worked(1)[ FD ]
