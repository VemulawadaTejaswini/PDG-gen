Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private byte[] download(String URL) [ CD ]
Line_2 $$ private byte[] download(String URL) -->Line_3 $$ byte[] result = null[ CD ]
Line_2 $$ private byte[] download(String URL) -->Line_4 $$ HttpEntity httpEntity = null[ CD ]
Line_6 $$ HttpGet httpGet = new HttpGet(URL)-->Line_7 $$ httpGet.addHeader("Accept-Language", "zh-cn,zh,en")[ FD ]
Line_6 $$ HttpGet httpGet = new HttpGet(URL)-->Line_8 $$ httpGet.addHeader("Accept-Encoding", "gzip,deflate")[ FD ]
Line_9 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_9 $$ HttpResponse response = httpClient.execute(httpGet)[ CD ]
Line_6 $$ HttpGet httpGet = new HttpGet(URL)-->Line_9 $$ HttpResponse response = httpClient.execute(httpGet)[ FD ]
Line_9 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_10 $$ if (response.getStatusLine().getStatusCode() != 200) [ FD ]
Line_10 $$ if (response.getStatusLine().getStatusCode() != 200) -->Line_11 $$ return null[ CD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_13 $$ Header header = response.getFirstHeader("content-type")[ CD ]
Line_9 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_13 $$ Header header = response.getFirstHeader("content-type")[ FD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_14 $$ if (header == null || header.getValue().indexOf("text/html") < 0) [ FD ]
Line_14 $$ if (header == null || header.getValue().indexOf("text/html") < 0) -->Line_15 $$ return null[ CD ]
Line_17 $$ int pos = header.getValue().indexOf("charset=")-->Line_17 $$ int pos = header.getValue().indexOf("charset=")[ CD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_17 $$ int pos = header.getValue().indexOf("charset=")[ FD ]
Line_17 $$ int pos = header.getValue().indexOf("charset=")-->Line_18 $$ if (pos >= 0) [ FD ]
Line_18 $$ if (pos >= 0) -->Line_19 $$ detectedEncoding = header.getValue().substring(pos + 8)[ CD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_19 $$ detectedEncoding = header.getValue().substring(pos + 8)[ FD ]
Line_4 $$ HttpEntity httpEntity = null-->Line_21 $$ httpEntity = response.getEntity()[ FD ]
Line_21 $$ httpEntity = response.getEntity()-->Line_21 $$ httpEntity = response.getEntity()[ FD ]
Line_21 $$ httpEntity = response.getEntity()-->Line_21 $$ httpEntity = response.getEntity()[ CD ]
Line_9 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_21 $$ httpEntity = response.getEntity()[ FD ]
Line_22 $$ InputStream in = null-->Line_23 $$ in = httpEntity.getContent()[ FD ]
Line_23 $$ in = httpEntity.getContent()-->Line_23 $$ in = httpEntity.getContent()[ FD ]
Line_23 $$ in = httpEntity.getContent()-->Line_23 $$ in = httpEntity.getContent()[ CD ]
Line_4 $$ HttpEntity httpEntity = null-->Line_23 $$ in = httpEntity.getContent()[ FD ]
Line_21 $$ httpEntity = response.getEntity()-->Line_23 $$ in = httpEntity.getContent()[ FD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_24 $$ header = response.getFirstHeader("Content-Encoding")[ FD ]
Line_24 $$ header = response.getFirstHeader("Content-Encoding")-->Line_24 $$ header = response.getFirstHeader("Content-Encoding")[ FD ]
Line_24 $$ header = response.getFirstHeader("Content-Encoding")-->Line_24 $$ header = response.getFirstHeader("Content-Encoding")[ CD ]
Line_9 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_24 $$ header = response.getFirstHeader("Content-Encoding")[ FD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_25 $$ if (null != header) [ FD ]
Line_24 $$ header = response.getFirstHeader("Content-Encoding")-->Line_25 $$ if (null != header) [ FD ]
Line_25 $$ if (null != header) -->Line_26 $$ if (header.getValue().indexOf("gzip") >= 0) [ CD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_26 $$ if (header.getValue().indexOf("gzip") >= 0) [ FD ]
Line_24 $$ header = response.getFirstHeader("Content-Encoding")-->Line_26 $$ if (header.getValue().indexOf("gzip") >= 0) [ FD ]
Line_26 $$ if (header.getValue().indexOf("gzip") >= 0) -->Line_27 $$ in = new GZIPInputStream(in)[ CD ]
Line_22 $$ InputStream in = null-->Line_27 $$ in = new GZIPInputStream(in)[ FD ]
Line_23 $$ in = httpEntity.getContent()-->Line_27 $$ in = new GZIPInputStream(in)[ FD ]
Line_27 $$ in = new GZIPInputStream(in)-->Line_27 $$ in = new GZIPInputStream(in)[ FD ]
Line_26 $$ if (header.getValue().indexOf("gzip") >= 0) -->Line_28 $$ if (header.getValue().indexOf("deflate") >= 0) [ CD ]
Line_13 $$ Header header = response.getFirstHeader("content-type")-->Line_28 $$ if (header.getValue().indexOf("deflate") >= 0) [ FD ]
Line_24 $$ header = response.getFirstHeader("Content-Encoding")-->Line_28 $$ if (header.getValue().indexOf("deflate") >= 0) [ FD ]
Line_28 $$ if (header.getValue().indexOf("deflate") >= 0) -->Line_29 $$ in = new InflaterInputStream(in, new Inflater(true))[ CD ]
Line_22 $$ InputStream in = null-->Line_29 $$ in = new InflaterInputStream(in, new Inflater(true))[ FD ]
Line_23 $$ in = httpEntity.getContent()-->Line_29 $$ in = new InflaterInputStream(in, new Inflater(true))[ FD ]
Line_27 $$ in = new GZIPInputStream(in)-->Line_29 $$ in = new InflaterInputStream(in, new Inflater(true))[ FD ]
Line_29 $$ in = new InflaterInputStream(in, new Inflater(true))-->Line_29 $$ in = new InflaterInputStream(in, new Inflater(true))[ FD ]
Line_35 $$ while ((len = in.read(buffer)) != -1) -->Line_35 $$ while ((len = in.read(buffer)) != -1) [ FD ]
Line_34 $$ int len = 0-->Line_35 $$ while ((len = in.read(buffer)) != -1) [ FD ]
Line_35 $$ while ((len = in.read(buffer)) != -1) -->Line_35 $$ while ((len = in.read(buffer)) != -1) [ CD ]
Line_22 $$ InputStream in = null-->Line_35 $$ while ((len = in.read(buffer)) != -1) [ FD ]
Line_23 $$ in = httpEntity.getContent()-->Line_35 $$ while ((len = in.read(buffer)) != -1) [ FD ]
Line_27 $$ in = new GZIPInputStream(in)-->Line_35 $$ while ((len = in.read(buffer)) != -1) [ FD ]
Line_29 $$ in = new InflaterInputStream(in, new Inflater(true))-->Line_35 $$ while ((len = in.read(buffer)) != -1) [ FD ]
Line_33 $$ byte[] buffer = new byte[1024]-->Line_35 $$ while ((len = in.read(buffer)) != -1) [ FD ]
Line_35 $$ while ((len = in.read(buffer)) != -1) -->Line_36 $$ out.write(buffer, 0, len)[ CD ]
Line_32 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_36 $$ out.write(buffer, 0, len)[ FD ]
Line_33 $$ byte[] buffer = new byte[1024]-->Line_36 $$ out.write(buffer, 0, len)[ FD ]
Line_35 $$ while ((len = in.read(buffer)) != -1) -->Line_36 $$ out.write(buffer, 0, len)[ FD ]
Line_34 $$ int len = 0-->Line_36 $$ out.write(buffer, 0, len)[ FD ]
Line_3 $$ byte[] result = null-->Line_38 $$ result = out.toByteArray()[ FD ]
Line_38 $$ result = out.toByteArray()-->Line_38 $$ result = out.toByteArray()[ FD ]
Line_38 $$ result = out.toByteArray()-->Line_38 $$ result = out.toByteArray()[ CD ]
Line_32 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_38 $$ result = out.toByteArray()[ FD ]
Line_3 $$ byte[] result = null-->Line_41 $$ result = null[ FD ]
Line_38 $$ result = out.toByteArray()-->Line_41 $$ result = null[ FD ]
Line_41 $$ result = null-->Line_41 $$ result = null[ FD ]
Line_2 $$ private byte[] download(String URL) -->Line_43 $$ return result[ CD ]
Line_35 $$ while ((len = in.read(buffer)) != -1) -->Line_36 $$ out.write(buffer, 0, len)[ FD ]
