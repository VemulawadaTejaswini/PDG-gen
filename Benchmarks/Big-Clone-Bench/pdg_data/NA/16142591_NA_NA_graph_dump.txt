Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException [ CD ]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException -->Line_3 $$ IProgressMonitor progressMonitor = monitor[ CD ]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException -->Line_4 $$ progressMonitor.beginTask("", 10)[ CD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_4 $$ progressMonitor.beginTask("", 10)[ FD ]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException -->Line_5 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_GeneratingJETEmitterFor_message", new Object[] [ CD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_5 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_GeneratingJETEmitterFor_message", new Object[] [ FD ]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException -->Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace()[ CD ]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace()[ CD ]
Line_2 $$ public void initialize(IProgressMonitor monitor) throws JETException -->Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot())[ CD ]
Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot())-->Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot())[ CD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_10 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETParsing_message", new Object[] [ FD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_10 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETParsing_message", new Object[] [ FD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_11 $$ jetCompiler.parse()[ FD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_12 $$ progressMonitor.worked(1)[ FD ]
Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName()-->Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName()[ CD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName()[ FD ]
Line_14 $$ if (getTemplateURIPath() != null) -->Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])[ CD ]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])-->Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])[ CD ]
Line_14 $$ if (getTemplateURIPath() != null) -->Line_16 $$ URLClassLoader theClassLoader = null[ CD ]
Line_14 $$ if (getTemplateURIPath() != null) -->Line_17 $$ if (templateURI.isPlatformResource()) [ CD ]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])-->Line_17 $$ if (templateURI.isPlatformResource()) [ FD ]
Line_17 $$ if (templateURI.isPlatformResource()) -->Line_17 $$ if (templateURI.isPlatformResource()) [ CD ]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])-->Line_17 $$ if (templateURI.isPlatformResource()) [ FD ]
Line_17 $$ if (templateURI.isPlatformResource()) -->Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))[ CD ]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))[ FD ]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])-->Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))[ FD ]
Line_17 $$ if (templateURI.isPlatformResource()) -->Line_19 $$ if (JETNature.getRuntime(project) != null) [ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_19 $$ if (JETNature.getRuntime(project) != null) [ FD ]
Line_19 $$ if (JETNature.getRuntime(project) != null) -->Line_20 $$ List<URL> urls = new ArrayList<URL>()[ CD ]
Line_19 $$ if (JETNature.getRuntime(project) != null) -->Line_21 $$ IJavaProject javaProject = JavaCore.create(project)[ CD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_21 $$ IJavaProject javaProject = JavaCore.create(project)[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_21 $$ IJavaProject javaProject = JavaCore.create(project)[ FD ]
Line_19 $$ if (JETNature.getRuntime(project) != null) -->Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ CD ]
Line_20 $$ List<URL> urls = new ArrayList<URL>()-->Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_23 $$ for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) [ FD ]
Line_23 $$ for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) -->Line_24 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_24 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) -->Line_25 $$ IPath projectPath = classpathEntry.getPath()[ CD ]
Line_25 $$ IPath projectPath = classpathEntry.getPath()-->Line_25 $$ IPath projectPath = classpathEntry.getPath()[ CD ]
Line_23 $$ for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) -->Line_25 $$ IPath projectPath = classpathEntry.getPath()[ FD ]
Line_24 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) -->Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0))[ CD ]
Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0))-->Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0))[ CD ]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0))[ FD ]
Line_25 $$ IPath projectPath = classpathEntry.getPath()-->Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0))[ FD ]
Line_24 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) -->Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject)[ CD ]
Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject)-->Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject)[ CD ]
Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0))-->Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject)[ FD ]
Line_24 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) -->Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ CD ]
Line_20 $$ List<URL> urls = new ArrayList<URL>()-->Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0))-->Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject)-->Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_19 $$ if (JETNature.getRuntime(project) != null) -->Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) [ CD ]
Line_16 $$ URLClassLoader theClassLoader = null-->Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) [ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) [ FD ]
Line_20 $$ List<URL> urls = new ArrayList<URL>()-->Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) [ FD ]
Line_34 $$ return super.loadClass(className)-->Line_34 $$ return super.loadClass(className)[ CD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_34 $$ return super.loadClass(className)[ FD ]
Line_36 $$ return getClassLoader().loadClass(className)-->Line_36 $$ return getClassLoader().loadClass(className)[ CD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_36 $$ return getClassLoader().loadClass(className)[ FD ]
Line_17 $$ if (templateURI.isPlatformResource()) -->Line_41 $$ if (templateURI.isPlatformPlugin()) [ CD ]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])-->Line_41 $$ if (templateURI.isPlatformPlugin()) [ FD ]
Line_41 $$ if (templateURI.isPlatformPlugin()) -->Line_41 $$ if (templateURI.isPlatformPlugin()) [ CD ]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])-->Line_41 $$ if (templateURI.isPlatformPlugin()) [ FD ]
Line_41 $$ if (templateURI.isPlatformPlugin()) -->Line_42 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1))[ CD ]
Line_15 $$ URI templateURI = URI.createURI(getTemplateURIPath()[0])-->Line_42 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1))[ FD ]
Line_41 $$ if (templateURI.isPlatformPlugin()) -->Line_43 $$ if (bundle != null) [ CD ]
Line_47 $$ return bundle.loadClass(className)-->Line_47 $$ return bundle.loadClass(className)[ CD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_47 $$ return bundle.loadClass(className)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_47 $$ return bundle.loadClass(className)[ FD ]
Line_49 $$ return super.loadClass(className)-->Line_49 $$ return super.loadClass(className)[ CD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_49 $$ return super.loadClass(className)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_49 $$ return super.loadClass(className)[ FD ]
Line_14 $$ if (getTemplateURIPath() != null) -->Line_55 $$ if (theClassLoader != null) [ CD ]
Line_16 $$ URLClassLoader theClassLoader = null-->Line_55 $$ if (theClassLoader != null) [ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_55 $$ if (theClassLoader != null) [ FD ]
Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName()-->Line_56 $$ String className = (packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()[ FD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_56 $$ String className = (packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()[ FD ]
Line_55 $$ if (theClassLoader != null) -->Line_57 $$ if (className.endsWith("_")) [ CD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_57 $$ if (className.endsWith("_")) [ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_57 $$ if (className.endsWith("_")) [ FD ]
Line_57 $$ if (className.endsWith("_")) -->Line_57 $$ if (className.endsWith("_")) [ CD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_57 $$ if (className.endsWith("_")) [ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_57 $$ if (className.endsWith("_")) [ FD ]
Line_57 $$ if (className.endsWith("_")) -->Line_58 $$ className = className.substring(0, className.length() - 1)[ CD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_58 $$ className = className.substring(0, className.length() - 1)[ CD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_58 $$ className = className.substring(0, className.length() - 1)[ FD ]
Line_16 $$ URLClassLoader theClassLoader = null-->Line_61 $$ Class<?> theClass = theClassLoader.loadClass(className)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_61 $$ Class<?> theClass = theClassLoader.loadClass(className)[ FD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_61 $$ Class<?> theClass = theClassLoader.loadClass(className)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_61 $$ Class<?> theClass = theClassLoader.loadClass(className)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_61 $$ Class<?> theClass = theClassLoader.loadClass(className)[ FD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_64 $$ theOtherClass = getClassLoader().loadClass(className)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_64 $$ theOtherClass = getClassLoader().loadClass(className)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_64 $$ theOtherClass = getClassLoader().loadClass(className)[ FD ]
Line_67 $$ if (theClass != theOtherClass) -->Line_68 $$ String methodName = jetCompiler.getSkeleton().getMethodName()[ CD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_68 $$ String methodName = jetCompiler.getSkeleton().getMethodName()[ FD ]
Line_67 $$ if (theClass != theOtherClass) -->Line_69 $$ Method[] methods = theClass.getDeclaredMethods()[ CD ]
Line_67 $$ if (theClass != theOtherClass) -->Line_70 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_67 $$ if (theClass != theOtherClass) -->Line_67 $$ if (theClass != theOtherClass) [ CD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_70 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_70 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_70 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_71 $$ if (methods[i].getName().equals(methodName)) [ CD ]
Line_71 $$ if (methods[i].getName().equals(methodName)) -->Line_71 $$ if (methods[i].getName().equals(methodName)) [ CD ]
Line_71 $$ if (methods[i].getName().equals(methodName)) -->Line_72 $$ jetEmitter.setMethod(methods[i])[ CD ]
Line_67 $$ if (theClass != theOtherClass) -->Line_76 $$ return[ CD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_83 $$ jetCompiler.generate(outputStream)[ FD ]
Line_85 $$ if (!javaModel.isOpen()) -->Line_85 $$ if (!javaModel.isOpen()) [ CD ]
Line_85 $$ if (!javaModel.isOpen()) -->Line_85 $$ if (!javaModel.isOpen()) [ CD ]
Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot())-->Line_85 $$ if (!javaModel.isOpen()) [ FD ]
Line_85 $$ if (!javaModel.isOpen()) -->Line_86 $$ javaModel.open(new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot())-->Line_86 $$ javaModel.open(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_85 $$ if (!javaModel.isOpen()) -->Line_88 $$ progressMonitor.worked(1)[ CD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_88 $$ progressMonitor.worked(1)[ FD ]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_90 $$ final IProject project = workspace.getRoot().getProject(jetEmitter.getProjectName())[ FD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_91 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETPreparingProject_message", new Object[] [ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_91 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETPreparingProject_message", new Object[] [ FD ]
Line_93 $$ if (!project.exists()) -->Line_93 $$ if (!project.exists()) [ CD ]
Line_93 $$ if (!project.exists()) -->Line_93 $$ if (!project.exists()) [ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_93 $$ if (!project.exists()) [ FD ]
Line_93 $$ if (!project.exists()) -->Line_94 $$ progressMonitor.subTask("JET creating project " + project.getName())[ CD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_94 $$ progressMonitor.subTask("JET creating project " + project.getName())[ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_94 $$ progressMonitor.subTask("JET creating project " + project.getName())[ FD ]
Line_93 $$ if (!project.exists()) -->Line_95 $$ project.create(new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_95 $$ project.create(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_93 $$ if (!project.exists()) -->Line_96 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [ CD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_96 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_96 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [ FD ]
Line_93 $$ if (!project.exists()) -->Line_97 $$ IProjectDescription description = workspace.newProjectDescription(project.getName())[ CD ]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_97 $$ IProjectDescription description = workspace.newProjectDescription(project.getName())[ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_97 $$ IProjectDescription description = workspace.newProjectDescription(project.getName())[ FD ]
Line_93 $$ if (!project.exists()) -->Line_98 $$ description.setNatureIds(new String[] [ CD ]
Line_93 $$ if (!project.exists()) -->Line_99 $$ description.setLocation(null)[ CD ]
Line_93 $$ if (!project.exists()) -->Line_100 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_100 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_93 $$ if (!project.exists()) -->Line_101 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_101 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_93 $$ if (!project.exists()) -->Line_103 $$ project.open(new SubProgressMonitor(progressMonitor, 5))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_103 $$ project.open(new SubProgressMonitor(progressMonitor, 5))[ FD ]
Line_93 $$ if (!project.exists()) -->Line_104 $$ IProjectDescription description = project.getDescription()[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_104 $$ IProjectDescription description = project.getDescription()[ FD ]
Line_93 $$ if (!project.exists()) -->Line_105 $$ description.setNatureIds(new String[] [ CD ]
Line_93 $$ if (!project.exists()) -->Line_106 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_106 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_108 $$ javaProject = JavaCore.create(project)[ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_109 $$ List<IClasspathEntry> classpath = new UniqueEList<IClasspathEntry>(Arrays.asList(javaProject.getRawClasspath()))[ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ CD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ CD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ CD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_111 $$ IClasspathEntry entry = classpath.get(i)[ CD ]
Line_111 $$ IClasspathEntry entry = classpath.get(i)-->Line_111 $$ IClasspathEntry entry = classpath.get(i)[ CD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_111 $$ IClasspathEntry entry = classpath.get(i)[ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_111 $$ IClasspathEntry entry = classpath.get(i)[ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_112 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [ CD ]
Line_111 $$ IClasspathEntry entry = classpath.get(i)-->Line_112 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_112 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [ FD ]
Line_111 $$ IClasspathEntry entry = classpath.get(i)-->Line_112 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [ FD ]
Line_112 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) -->Line_113 $$ classpath.remove(i)[ CD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_113 $$ classpath.remove(i)[ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_113 $$ classpath.remove(i)[ FD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_116 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETInitializingProject_message", new Object[] [ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_116 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETInitializingProject_message", new Object[] [ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_117 $$ IClasspathEntry classpathEntry = JavaCore.newSourceEntry(new Path("/" + project.getName() + "/src"))[ FD ]
Line_23 $$ for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) -->Line_119 $$ classpath.add(classpathEntry)[ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_122 $$ IFolder sourceFolder = project.getFolder(new Path("src"))[ FD ]
Line_123 $$ if (!sourceFolder.exists()) -->Line_123 $$ if (!sourceFolder.exists()) [ CD ]
Line_123 $$ if (!sourceFolder.exists()) -->Line_123 $$ if (!sourceFolder.exists()) [ CD ]
Line_123 $$ if (!sourceFolder.exists()) -->Line_124 $$ sourceFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_126 $$ IFolder runtimeFolder = project.getFolder(new Path("bin"))[ FD ]
Line_127 $$ if (!runtimeFolder.exists()) -->Line_127 $$ if (!runtimeFolder.exists()) [ CD ]
Line_127 $$ if (!runtimeFolder.exists()) -->Line_127 $$ if (!runtimeFolder.exists()) [ CD ]
Line_127 $$ if (!runtimeFolder.exists()) -->Line_128 $$ runtimeFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_130 $$ javaProject.setRawClasspath(classpath.toArray(new IClasspathEntry[classpath.size()]), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_131 $$ javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_131 $$ javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_132 $$ javaProject.close()[ FD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_133 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETOpeningJavaProject_message", new Object[] [ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_133 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETOpeningJavaProject_message", new Object[] [ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_134 $$ javaProject.open(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_135 $$ IPackageFragmentRoot[] packageFragmentRoots = javaProject.getPackageFragmentRoots()[ FD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) [ CD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) [ CD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) [ FD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_138 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j][ CD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_139 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) [ CD ]
Line_138 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j]-->Line_139 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) [ FD ]
Line_149 $$ while (stringTokenizer.hasMoreElements()) -->Line_149 $$ while (stringTokenizer.hasMoreElements()) [ CD ]
Line_149 $$ while (stringTokenizer.hasMoreElements()) -->Line_150 $$ String folderName = stringTokenizer.nextToken()[ CD ]
Line_150 $$ String folderName = stringTokenizer.nextToken()-->Line_150 $$ String folderName = stringTokenizer.nextToken()[ CD ]
Line_149 $$ while (stringTokenizer.hasMoreElements()) -->Line_151 $$ sourceContainer = sourceContainer.getFolder(new Path(folderName))[ CD ]
Line_149 $$ while (stringTokenizer.hasMoreElements()) -->Line_152 $$ if (!sourceContainer.exists()) [ CD ]
Line_152 $$ if (!sourceContainer.exists()) -->Line_152 $$ if (!sourceContainer.exists()) [ CD ]
Line_152 $$ if (!sourceContainer.exists()) -->Line_152 $$ if (!sourceContainer.exists()) [ CD ]
Line_152 $$ if (!sourceContainer.exists()) -->Line_153 $$ ((IFolder) sourceContainer).create(false, true, new SubProgressMonitor(subProgressMonitor, 1))[ CD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_156 $$ IFile targetFile = sourceContainer.getFile(new Path(jetCompiler.getSkeleton().getClassName() + ".java"))[ FD ]
Line_157 $$ if (!targetFile.exists()) -->Line_157 $$ if (!targetFile.exists()) [ CD ]
Line_157 $$ if (!targetFile.exists()) -->Line_157 $$ if (!targetFile.exists()) [ CD ]
Line_157 $$ if (!targetFile.exists()) -->Line_158 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreating_message", new Object[] [ CD ]
Line_157 $$ if (!targetFile.exists()) -->Line_159 $$ targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1))[ CD ]
Line_157 $$ if (!targetFile.exists()) -->Line_161 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETUpdating_message", new Object[] [ CD ]
Line_157 $$ if (!targetFile.exists()) -->Line_162 $$ targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1))[ CD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_164 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETBuilding_message", new Object[] [ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_165 $$ project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, new SubProgressMonitor(subProgressMonitor, 1))[ FD ]
Line_167 $$ if (!errors) -->Line_168 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETLoadingClass_message", new Object[] [ CD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_168 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETLoadingClass_message", new Object[] [ FD ]
Line_167 $$ if (!errors) -->Line_170 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ CD ]
Line_20 $$ List<URL> urls = new ArrayList<URL>()-->Line_170 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1))-->Line_170 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_170 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURI().toURL())[ FD ]
Line_176 $$ if (classpathAttribute.getName().equals(CodeGenUtil.EclipseUtil.PLUGIN_ID_CLASSPATH_ATTRIBUTE_NAME)) -->Line_176 $$ if (classpathAttribute.getName().equals(CodeGenUtil.EclipseUtil.PLUGIN_ID_CLASSPATH_ATTRIBUTE_NAME)) [ CD ]
Line_176 $$ if (classpathAttribute.getName().equals(CodeGenUtil.EclipseUtil.PLUGIN_ID_CLASSPATH_ATTRIBUTE_NAME)) -->Line_177 $$ Bundle bundle = Platform.getBundle(classpathAttribute.getValue())[ CD ]
Line_176 $$ if (classpathAttribute.getName().equals(CodeGenUtil.EclipseUtil.PLUGIN_ID_CLASSPATH_ATTRIBUTE_NAME)) -->Line_178 $$ if (bundle != null) [ CD ]
Line_178 $$ if (bundle != null) -->Line_179 $$ bundles.add(bundle)[ CD ]
Line_20 $$ List<URL> urls = new ArrayList<URL>()-->Line_185 $$ urls.add(new URL("platform:/resource" + jetEmitterClasspathEntry.getPath() + "/"))[ FD ]
Line_20 $$ List<URL> urls = new ArrayList<URL>()-->Line_187 $$ URLClassLoader theClassLoader = new URLClassLoader(urls.toArray(new URL[0]), getClassLoader()) [ FD ]
Line_190 $$ return super.loadClass(className)-->Line_190 $$ return super.loadClass(className)[ CD ]
Line_187 $$ URLClassLoader theClassLoader = new URLClassLoader(urls.toArray(new URL[0]), getClassLoader()) -->Line_190 $$ return super.loadClass(className)[ FD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_190 $$ return super.loadClass(className)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_190 $$ return super.loadClass(className)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_190 $$ return super.loadClass(className)[ FD ]
Line_194 $$ return bundle.loadClass(className)-->Line_194 $$ return bundle.loadClass(className)[ CD ]
Line_192 $$ for (Bundle bundle : bundles) -->Line_194 $$ return bundle.loadClass(className)[ FD ]
Line_187 $$ URLClassLoader theClassLoader = new URLClassLoader(urls.toArray(new URL[0]), getClassLoader()) -->Line_194 $$ return bundle.loadClass(className)[ FD ]
Line_44 $$ theClassLoader = new URLClassLoader(new URL[0], getClassLoader()) -->Line_194 $$ return bundle.loadClass(className)[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_194 $$ return bundle.loadClass(className)[ FD ]
Line_58 $$ className = className.substring(0, className.length() - 1)-->Line_194 $$ return bundle.loadClass(className)[ FD ]
Line_167 $$ if (!errors) -->Line_202 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName())[ CD ]
Line_16 $$ URLClassLoader theClassLoader = null-->Line_202 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName())[ FD ]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) -->Line_202 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName())[ FD ]
Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName()-->Line_202 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName())[ FD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_202 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName())[ FD ]
Line_167 $$ if (!errors) -->Line_203 $$ String methodName = jetCompiler.getSkeleton().getMethodName()[ CD ]
Line_9 $$ final JETCompiler jetCompiler = getTemplateURIPath() == null ? new MyBaseJETCompiler(getTemplateURI(), getEncoding(), getClassLoader()) : new MyBaseJETCompiler(getTemplateURIPath(), getTemplateURI(), getEncoding(), getClassLoader())-->Line_203 $$ String methodName = jetCompiler.getSkeleton().getMethodName()[ FD ]
Line_167 $$ if (!errors) -->Line_204 $$ Method[] methods = theClass.getDeclaredMethods()[ CD ]
Line_167 $$ if (!errors) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_167 $$ if (!errors) -->Line_167 $$ if (!errors) [ CD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_205 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_205 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ CD ]
Line_205 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_205 $$ for (int i = 0; i < methods.length; ++i) -->Line_206 $$ if (methods[i].getName().equals(methodName)) [ CD ]
Line_206 $$ if (methods[i].getName().equals(methodName)) -->Line_206 $$ if (methods[i].getName().equals(methodName)) [ CD ]
Line_206 $$ if (methods[i].getName().equals(methodName)) -->Line_207 $$ jetEmitter.setMethod(methods[i])[ CD ]
Line_3 $$ IProgressMonitor progressMonitor = monitor-->Line_218 $$ progressMonitor.done()[ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_70 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_70 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_70 $$ for (int i = 0; i < methods.length; ++i) -->Line_70 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_111 $$ IClasspathEntry entry = classpath.get(i)[ FD ]
Line_111 $$ IClasspathEntry entry = classpath.get(i)-->Line_112 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [ FD ]
Line_111 $$ IClasspathEntry entry = classpath.get(i)-->Line_112 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [ FD ]
Line_110 $$ for (int i = 0, len = classpath.size(); i < len; i++) -->Line_113 $$ classpath.remove(i)[ FD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) [ FD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) [ FD ]
Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) -->Line_137 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) [ FD ]
Line_138 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j]-->Line_139 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) [ FD ]
Line_205 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_205 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
Line_205 $$ for (int i = 0; i < methods.length; ++i) -->Line_205 $$ for (int i = 0; i < methods.length; ++i) [ FD ]
