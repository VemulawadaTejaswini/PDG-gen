Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException [ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_3 $$ LOG.debug("output signed open document")[ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_4 $$ OutputStream signedOdfOutputStream = getSignedOpenDocumentOutputStream()[ CD ]
Line_4 $$ OutputStream signedOdfOutputStream = getSignedOpenDocumentOutputStream()-->Line_4 $$ OutputStream signedOdfOutputStream = getSignedOpenDocumentOutputStream()[ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_5 $$ if (null == signedOdfOutputStream) [ CD ]
Line_4 $$ OutputStream signedOdfOutputStream = getSignedOpenDocumentOutputStream()-->Line_5 $$ if (null == signedOdfOutputStream) [ FD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream)[ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream())[ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_10 $$ ZipEntry zipEntry[ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException [ CD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ FD ]
Line_10 $$ ZipEntry zipEntry-->Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ FD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ CD ]
Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream())-->Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ FD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) [ CD ]
Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) -->Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) [ CD ]
Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) -->Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) [ CD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) [ FD ]
Line_10 $$ ZipEntry zipEntry-->Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) [ FD ]
Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) -->Line_13 $$ zipOutputStream.putNextEntry(zipEntry)[ CD ]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream)-->Line_13 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_13 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_10 $$ ZipEntry zipEntry-->Line_13 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) -->Line_14 $$ IOUtils.copy(zipInputStream, zipOutputStream)[ CD ]
Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream())-->Line_14 $$ IOUtils.copy(zipInputStream, zipOutputStream)[ FD ]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream)-->Line_14 $$ IOUtils.copy(zipInputStream, zipOutputStream)[ FD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_17 $$ zipInputStream.close()[ CD ]
Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream())-->Line_17 $$ zipInputStream.close()[ FD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_18 $$ zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE)[ CD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_18 $$ zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE)[ FD ]
Line_10 $$ ZipEntry zipEntry-->Line_18 $$ zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE)[ FD ]
Line_18 $$ zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE)-->Line_18 $$ zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE)[ FD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ CD ]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream)-->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_10 $$ ZipEntry zipEntry-->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_18 $$ zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE)-->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_20 $$ IOUtils.write(signatureData, zipOutputStream)[ CD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_20 $$ IOUtils.write(signatureData, zipOutputStream)[ FD ]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream)-->Line_20 $$ IOUtils.write(signatureData, zipOutputStream)[ FD ]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException -->Line_21 $$ zipOutputStream.close()[ CD ]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream)-->Line_21 $$ zipOutputStream.close()[ FD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_12 $$ if (!zipEntry.getName().equals(ODFUtil.SIGNATURE_FILE)) [ FD ]
Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_13 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
