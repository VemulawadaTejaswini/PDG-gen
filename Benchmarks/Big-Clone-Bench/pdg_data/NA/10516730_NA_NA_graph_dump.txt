Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public final boolean login(String user, String pass) [ CD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_3 $$ if (user == null || pass == null)[ CD ]
Line_3 $$ if (user == null || pass == null)-->Line_3 $$ return false[ CD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_4 $$ connectionInfo.setData("com.tensegrity.palojava.pass#" + user, pass)[ CD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_4 $$ connectionInfo.setData("com.tensegrity.palojava.pass#" + user, pass)[ FD ]
Line_6 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_6 $$ MessageDigest md = MessageDigest.getInstance("MD5")[ CD ]
Line_6 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_7 $$ md.update(pass.getBytes())[ FD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_7 $$ md.update(pass.getBytes())[ FD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_8 $$ pass = asHexString(md.digest())[ FD ]
Line_8 $$ pass = asHexString(md.digest())-->Line_8 $$ pass = asHexString(md.digest())[ FD ]
Line_8 $$ pass = asHexString(md.digest())-->Line_8 $$ pass = asHexString(md.digest())[ CD ]
Line_6 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_8 $$ pass = asHexString(md.digest())[ FD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_12 $$ connectionInfo.setUser(user)[ CD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_12 $$ connectionInfo.setUser(user)[ FD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_13 $$ connectionInfo.setPassword(pass)[ CD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_13 $$ connectionInfo.setPassword(pass)[ FD ]
Line_8 $$ pass = asHexString(md.digest())-->Line_13 $$ connectionInfo.setPassword(pass)[ FD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_14 $$ return loginInternal(user, pass)[ CD ]
Line_14 $$ return loginInternal(user, pass)-->Line_14 $$ return loginInternal(user, pass)[ CD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_14 $$ return loginInternal(user, pass)[ FD ]
Line_2 $$ public final boolean login(String user, String pass) -->Line_14 $$ return loginInternal(user, pass)[ FD ]
Line_8 $$ pass = asHexString(md.digest())-->Line_14 $$ return loginInternal(user, pass)[ FD ]
