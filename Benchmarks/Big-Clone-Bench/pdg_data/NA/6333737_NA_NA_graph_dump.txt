Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) [ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor)[ CD ]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor)-->Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor)[ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor)[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_4 $$ String projectName = javaSource.segment(0)[ CD ]
Line_4 $$ String projectName = javaSource.segment(0)-->Line_4 $$ String projectName = javaSource.segment(0)[ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_4 $$ String projectName = javaSource.segment(0)[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_5 $$ IProject project = null[ CD ]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor)-->Line_8 $$ progressMonitor.beginTask("", 10)[ FD ]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor)-->Line_9 $$ progressMonitor.subTask(CodeGenEcorePlugin.INSTANCE.getString("_UI_CreatingEMFProject_message", new Object[] [ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_9 $$ progressMonitor.subTask(CodeGenEcorePlugin.INSTANCE.getString("_UI_CreatingEMFProject_message", new Object[] [ FD ]
Line_10 $$ IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_10 $$ IWorkspace workspace = ResourcesPlugin.getWorkspace()[ CD ]
Line_5 $$ IProject project = null-->Line_11 $$ project = workspace.getRoot().getProject(projectName)[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_11 $$ project = workspace.getRoot().getProject(projectName)[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_11 $$ project = workspace.getRoot().getProject(projectName)[ CD ]
Line_4 $$ String projectName = javaSource.segment(0)-->Line_11 $$ project = workspace.getRoot().getProject(projectName)[ FD ]
Line_10 $$ IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_11 $$ project = workspace.getRoot().getProject(projectName)[ FD ]
Line_12 $$ if (!project.exists()) -->Line_12 $$ if (!project.exists()) [ CD ]
Line_12 $$ if (!project.exists()) -->Line_12 $$ if (!project.exists()) [ CD ]
Line_5 $$ IProject project = null-->Line_12 $$ if (!project.exists()) [ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_12 $$ if (!project.exists()) [ FD ]
Line_12 $$ if (!project.exists()) -->Line_13 $$ URI location = projectLocationURI[ CD ]
Line_12 $$ if (!project.exists()) -->Line_14 $$ if (location == null) [ CD ]
Line_13 $$ URI location = projectLocationURI-->Line_14 $$ if (location == null) [ FD ]
Line_14 $$ if (location == null) -->Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())[ CD ]
Line_13 $$ URI location = projectLocationURI-->Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())[ FD ]
Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())-->Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())[ FD ]
Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())-->Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())[ CD ]
Line_4 $$ String projectName = javaSource.segment(0)-->Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())[ FD ]
Line_10 $$ IWorkspace workspace = ResourcesPlugin.getWorkspace()-->Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())[ FD ]
Line_12 $$ if (!project.exists()) -->Line_17 $$ location = location.appendSegment(".project")[ CD ]
Line_13 $$ URI location = projectLocationURI-->Line_17 $$ location = location.appendSegment(".project")[ FD ]
Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())-->Line_17 $$ location = location.appendSegment(".project")[ FD ]
Line_17 $$ location = location.appendSegment(".project")-->Line_17 $$ location = location.appendSegment(".project")[ FD ]
Line_17 $$ location = location.appendSegment(".project")-->Line_17 $$ location = location.appendSegment(".project")[ CD ]
Line_13 $$ URI location = projectLocationURI-->Line_17 $$ location = location.appendSegment(".project")[ FD ]
Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())-->Line_17 $$ location = location.appendSegment(".project")[ FD ]
Line_17 $$ location = location.appendSegment(".project")-->Line_17 $$ location = location.appendSegment(".project")[ FD ]
Line_12 $$ if (!project.exists()) -->Line_18 $$ File projectFile = new File(location.toString())[ CD ]
Line_13 $$ URI location = projectLocationURI-->Line_18 $$ File projectFile = new File(location.toString())[ FD ]
Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())-->Line_18 $$ File projectFile = new File(location.toString())[ FD ]
Line_17 $$ location = location.appendSegment(".project")-->Line_18 $$ File projectFile = new File(location.toString())[ FD ]
Line_12 $$ if (!project.exists()) -->Line_19 $$ if (projectFile.exists()) [ CD ]
Line_18 $$ File projectFile = new File(location.toString())-->Line_19 $$ if (projectFile.exists()) [ FD ]
Line_19 $$ if (projectFile.exists()) -->Line_19 $$ if (projectFile.exists()) [ CD ]
Line_18 $$ File projectFile = new File(location.toString())-->Line_19 $$ if (projectFile.exists()) [ FD ]
Line_19 $$ if (projectFile.exists()) -->Line_20 $$ projectFile.renameTo(new File(location.toString() + ".old"))[ CD ]
Line_18 $$ File projectFile = new File(location.toString())-->Line_20 $$ projectFile.renameTo(new File(location.toString() + ".old"))[ FD ]
Line_13 $$ URI location = projectLocationURI-->Line_20 $$ projectFile.renameTo(new File(location.toString() + ".old"))[ FD ]
Line_15 $$ location = URI.createFileURI(workspace.getRoot().getLocation().append(projectName).toOSString())-->Line_20 $$ projectFile.renameTo(new File(location.toString() + ".old"))[ FD ]
Line_17 $$ location = location.appendSegment(".project")-->Line_20 $$ projectFile.renameTo(new File(location.toString() + ".old"))[ FD ]
Line_23 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_23 $$ IJavaProject javaProject = JavaCore.create(project)[ CD ]
Line_5 $$ IProject project = null-->Line_23 $$ IJavaProject javaProject = JavaCore.create(project)[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_23 $$ IJavaProject javaProject = JavaCore.create(project)[ FD ]
Line_25 $$ if (!project.exists()) -->Line_25 $$ if (!project.exists()) [ CD ]
Line_25 $$ if (!project.exists()) -->Line_25 $$ if (!project.exists()) [ CD ]
Line_5 $$ IProject project = null-->Line_25 $$ if (!project.exists()) [ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_25 $$ if (!project.exists()) [ FD ]
Line_25 $$ if (!project.exists()) -->Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)[ CD ]
Line_4 $$ String projectName = javaSource.segment(0)-->Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)[ FD ]
Line_25 $$ if (!project.exists()) -->Line_27 $$ if (projectLocationURI != null) [ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_27 $$ if (projectLocationURI != null) [ FD ]
Line_27 $$ if (projectLocationURI != null) -->Line_28 $$ projectDescription.setLocationURI(new java.net.URI(projectLocationURI.toString()))[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_28 $$ projectDescription.setLocationURI(new java.net.URI(projectLocationURI.toString()))[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_28 $$ projectDescription.setLocationURI(new java.net.URI(projectLocationURI.toString()))[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_28 $$ projectDescription.setLocationURI(new java.net.URI(projectLocationURI.toString()))[ FD ]
Line_25 $$ if (!project.exists()) -->Line_30 $$ project.create(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_5 $$ IProject project = null-->Line_30 $$ project.create(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_30 $$ project.create(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_30 $$ project.create(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_30 $$ project.create(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_25 $$ if (!project.exists()) -->Line_31 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_5 $$ IProject project = null-->Line_31 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_31 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_25 $$ if (!project.exists()) -->Line_33 $$ projectDescription = project.getDescription()[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_33 $$ projectDescription = project.getDescription()[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_33 $$ projectDescription = project.getDescription()[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_33 $$ projectDescription = project.getDescription()[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_33 $$ projectDescription = project.getDescription()[ CD ]
Line_5 $$ IProject project = null-->Line_33 $$ projectDescription = project.getDescription()[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_33 $$ projectDescription = project.getDescription()[ FD ]
Line_25 $$ if (!project.exists()) -->Line_34 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_5 $$ IProject project = null-->Line_34 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_34 $$ project.open(new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_25 $$ if (!project.exists()) -->Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) [ CD ]
Line_5 $$ IProject project = null-->Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) [ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) [ FD ]
Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) -->Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) [ CD ]
Line_5 $$ IProject project = null-->Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) [ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) [ FD ]
Line_35 $$ if (project.hasNature(JavaCore.NATURE_ID)) -->Line_36 $$ classpathEntries.addAll(Arrays.asList(javaProject.getRawClasspath()))[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_36 $$ classpathEntries.addAll(Arrays.asList(javaProject.getRawClasspath()))[ FD ]
Line_23 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_36 $$ classpathEntries.addAll(Arrays.asList(javaProject.getRawClasspath()))[ FD ]
Line_39 $$ boolean isInitiallyEmpty = classpathEntries.isEmpty()-->Line_39 $$ boolean isInitiallyEmpty = classpathEntries.isEmpty()[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_39 $$ boolean isInitiallyEmpty = classpathEntries.isEmpty()[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_41 $$ if (referencedProjects.size() != 0 && (style & (EMF_PLUGIN_PROJECT_STYLE | EMF_EMPTY_PROJECT_STYLE)) == 0) [ FD ]
Line_41 $$ if (referencedProjects.size() != 0 && (style & (EMF_PLUGIN_PROJECT_STYLE | EMF_EMPTY_PROJECT_STYLE)) == 0) -->Line_42 $$ projectDescription.setReferencedProjects(referencedProjects.toArray(new IProject[referencedProjects.size()]))[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_42 $$ projectDescription.setReferencedProjects(referencedProjects.toArray(new IProject[referencedProjects.size()]))[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_42 $$ projectDescription.setReferencedProjects(referencedProjects.toArray(new IProject[referencedProjects.size()]))[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_42 $$ projectDescription.setReferencedProjects(referencedProjects.toArray(new IProject[referencedProjects.size()]))[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_42 $$ projectDescription.setReferencedProjects(referencedProjects.toArray(new IProject[referencedProjects.size()]))[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_42 $$ projectDescription.setReferencedProjects(referencedProjects.toArray(new IProject[referencedProjects.size()]))[ FD ]
Line_44 $$ IClasspathEntry referencedProjectClasspathEntry = JavaCore.newProjectEntry(referencedProject.getFullPath())-->Line_44 $$ IClasspathEntry referencedProjectClasspathEntry = JavaCore.newProjectEntry(referencedProject.getFullPath())[ CD ]
Line_43 $$ for (IProject referencedProject : referencedProjects) -->Line_44 $$ IClasspathEntry referencedProjectClasspathEntry = JavaCore.newProjectEntry(referencedProject.getFullPath())[ FD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_45 $$ classpathEntries.add(referencedProjectClasspathEntry)[ FD ]
Line_44 $$ IClasspathEntry referencedProjectClasspathEntry = JavaCore.newProjectEntry(referencedProject.getFullPath())-->Line_45 $$ classpathEntries.add(referencedProjectClasspathEntry)[ FD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_48 $$ String[] natureIds = projectDescription.getNatureIds()[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_48 $$ String[] natureIds = projectDescription.getNatureIds()[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_48 $$ String[] natureIds = projectDescription.getNatureIds()[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_48 $$ String[] natureIds = projectDescription.getNatureIds()[ FD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_49 $$ if (natureIds == null) [ FD ]
Line_49 $$ if (natureIds == null) -->Line_50 $$ natureIds = new String[] [ CD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_50 $$ natureIds = new String[] [ FD ]
Line_50 $$ natureIds = new String[] -->Line_50 $$ natureIds = new String[] [ FD ]
Line_49 $$ if (natureIds == null) -->Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) [ CD ]
Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) -->Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) [ CD ]
Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) -->Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) [ CD ]
Line_5 $$ IProject project = null-->Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) [ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) [ FD ]
Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) -->Line_53 $$ String[] oldNatureIds = natureIds[ CD ]
Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) -->Line_54 $$ natureIds = new String[oldNatureIds.length + 1][ CD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_54 $$ natureIds = new String[oldNatureIds.length + 1][ FD ]
Line_50 $$ natureIds = new String[] -->Line_54 $$ natureIds = new String[oldNatureIds.length + 1][ FD ]
Line_54 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_54 $$ natureIds = new String[oldNatureIds.length + 1][ FD ]
Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) -->Line_55 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ CD ]
Line_53 $$ String[] oldNatureIds = natureIds-->Line_55 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_55 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_50 $$ natureIds = new String[] -->Line_55 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_54 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_55 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_52 $$ if (!project.hasNature(JavaCore.NATURE_ID)) -->Line_56 $$ natureIds[oldNatureIds.length] = JavaCore.NATURE_ID[ CD ]
Line_49 $$ if (natureIds == null) -->Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) [ CD ]
Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) -->Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) [ CD ]
Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) -->Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) [ CD ]
Line_5 $$ IProject project = null-->Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) [ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) [ FD ]
Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) -->Line_60 $$ natureIds = new String[oldNatureIds.length + 1][ CD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_60 $$ natureIds = new String[oldNatureIds.length + 1][ FD ]
Line_50 $$ natureIds = new String[] -->Line_60 $$ natureIds = new String[oldNatureIds.length + 1][ FD ]
Line_54 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_60 $$ natureIds = new String[oldNatureIds.length + 1][ FD ]
Line_60 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_60 $$ natureIds = new String[oldNatureIds.length + 1][ FD ]
Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) -->Line_61 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ CD ]
Line_53 $$ String[] oldNatureIds = natureIds-->Line_61 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_61 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_50 $$ natureIds = new String[] -->Line_61 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_54 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_61 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_60 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_61 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length)[ FD ]
Line_58 $$ if (!project.hasNature("org.eclipse.pde.PluginNature")) -->Line_62 $$ natureIds[oldNatureIds.length] = "org.eclipse.pde.PluginNature"[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_65 $$ projectDescription.setNatureIds(natureIds)[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_65 $$ projectDescription.setNatureIds(natureIds)[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_65 $$ projectDescription.setNatureIds(natureIds)[ FD ]
Line_48 $$ String[] natureIds = projectDescription.getNatureIds()-->Line_65 $$ projectDescription.setNatureIds(natureIds)[ FD ]
Line_50 $$ natureIds = new String[] -->Line_65 $$ projectDescription.setNatureIds(natureIds)[ FD ]
Line_54 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_65 $$ projectDescription.setNatureIds(natureIds)[ FD ]
Line_60 $$ natureIds = new String[oldNatureIds.length + 1]-->Line_65 $$ projectDescription.setNatureIds(natureIds)[ FD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()[ FD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_67 $$ if (builders == null) [ FD ]
Line_67 $$ if (builders == null) -->Line_68 $$ builders = new ICommand[0][ CD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_68 $$ builders = new ICommand[0][ FD ]
Line_68 $$ builders = new ICommand[0]-->Line_68 $$ builders = new ICommand[0][ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_72 $$ for (int i = 0; i < builders.length; ++i) [ CD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_72 $$ for (int i = 0; i < builders.length; ++i) [ CD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_72 $$ for (int i = 0; i < builders.length; ++i) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_73 $$ if ("org.eclipse.pde.ManifestBuilder".equals(builders[i].getBuilderName())) [ CD ]
Line_73 $$ if ("org.eclipse.pde.ManifestBuilder".equals(builders[i].getBuilderName())) -->Line_73 $$ if ("org.eclipse.pde.ManifestBuilder".equals(builders[i].getBuilderName())) [ CD ]
Line_73 $$ if ("org.eclipse.pde.ManifestBuilder".equals(builders[i].getBuilderName())) -->Line_74 $$ hasManifestBuilder = true[ CD ]
Line_74 $$ hasManifestBuilder = true-->Line_74 $$ hasManifestBuilder = true[ FD ]
Line_70 $$ boolean hasManifestBuilder = false-->Line_74 $$ hasManifestBuilder = true[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_76 $$ if ("org.eclipse.pde.SchemaBuilder".equals(builders[i].getBuilderName())) [ CD ]
Line_76 $$ if ("org.eclipse.pde.SchemaBuilder".equals(builders[i].getBuilderName())) -->Line_76 $$ if ("org.eclipse.pde.SchemaBuilder".equals(builders[i].getBuilderName())) [ CD ]
Line_76 $$ if ("org.eclipse.pde.SchemaBuilder".equals(builders[i].getBuilderName())) -->Line_77 $$ hasSchemaBuilder = true[ CD ]
Line_77 $$ hasSchemaBuilder = true-->Line_77 $$ hasSchemaBuilder = true[ FD ]
Line_71 $$ boolean hasSchemaBuilder = false-->Line_77 $$ hasSchemaBuilder = true[ FD ]
Line_74 $$ hasManifestBuilder = true-->Line_80 $$ if (!hasManifestBuilder) [ FD ]
Line_70 $$ boolean hasManifestBuilder = false-->Line_80 $$ if (!hasManifestBuilder) [ FD ]
Line_80 $$ if (!hasManifestBuilder) -->Line_80 $$ if (!hasManifestBuilder) [ CD ]
Line_74 $$ hasManifestBuilder = true-->Line_80 $$ if (!hasManifestBuilder) [ FD ]
Line_70 $$ boolean hasManifestBuilder = false-->Line_80 $$ if (!hasManifestBuilder) [ FD ]
Line_80 $$ if (!hasManifestBuilder) -->Line_81 $$ ICommand[] oldBuilders = builders[ CD ]
Line_80 $$ if (!hasManifestBuilder) -->Line_82 $$ builders = new ICommand[oldBuilders.length + 1][ CD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_82 $$ builders = new ICommand[oldBuilders.length + 1][ FD ]
Line_68 $$ builders = new ICommand[0]-->Line_82 $$ builders = new ICommand[oldBuilders.length + 1][ FD ]
Line_82 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_82 $$ builders = new ICommand[oldBuilders.length + 1][ FD ]
Line_80 $$ if (!hasManifestBuilder) -->Line_83 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ CD ]
Line_81 $$ ICommand[] oldBuilders = builders-->Line_83 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_83 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_68 $$ builders = new ICommand[0]-->Line_83 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_82 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_83 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_80 $$ if (!hasManifestBuilder) -->Line_84 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ CD ]
Line_84 $$ builders[oldBuilders.length] = projectDescription.newCommand()-->Line_84 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_84 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_84 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_84 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ FD ]
Line_80 $$ if (!hasManifestBuilder) -->Line_85 $$ builders[oldBuilders.length].setBuilderName("org.eclipse.pde.ManifestBuilder")[ CD ]
Line_77 $$ hasSchemaBuilder = true-->Line_87 $$ if (!hasSchemaBuilder) [ FD ]
Line_71 $$ boolean hasSchemaBuilder = false-->Line_87 $$ if (!hasSchemaBuilder) [ FD ]
Line_87 $$ if (!hasSchemaBuilder) -->Line_87 $$ if (!hasSchemaBuilder) [ CD ]
Line_77 $$ hasSchemaBuilder = true-->Line_87 $$ if (!hasSchemaBuilder) [ FD ]
Line_71 $$ boolean hasSchemaBuilder = false-->Line_87 $$ if (!hasSchemaBuilder) [ FD ]
Line_87 $$ if (!hasSchemaBuilder) -->Line_89 $$ builders = new ICommand[oldBuilders.length + 1][ CD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_89 $$ builders = new ICommand[oldBuilders.length + 1][ FD ]
Line_68 $$ builders = new ICommand[0]-->Line_89 $$ builders = new ICommand[oldBuilders.length + 1][ FD ]
Line_82 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_89 $$ builders = new ICommand[oldBuilders.length + 1][ FD ]
Line_89 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_89 $$ builders = new ICommand[oldBuilders.length + 1][ FD ]
Line_87 $$ if (!hasSchemaBuilder) -->Line_90 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ CD ]
Line_81 $$ ICommand[] oldBuilders = builders-->Line_90 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_90 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_68 $$ builders = new ICommand[0]-->Line_90 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_82 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_90 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_89 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_90 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length)[ FD ]
Line_87 $$ if (!hasSchemaBuilder) -->Line_91 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ CD ]
Line_91 $$ builders[oldBuilders.length] = projectDescription.newCommand()-->Line_91 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_91 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_91 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_91 $$ builders[oldBuilders.length] = projectDescription.newCommand()[ FD ]
Line_87 $$ if (!hasSchemaBuilder) -->Line_92 $$ builders[oldBuilders.length].setBuilderName("org.eclipse.pde.SchemaBuilder")[ CD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_94 $$ projectDescription.setBuildSpec(builders)[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_94 $$ projectDescription.setBuildSpec(builders)[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_94 $$ projectDescription.setBuildSpec(builders)[ FD ]
Line_66 $$ ICommand[] builders = projectDescription.getBuildSpec()-->Line_94 $$ projectDescription.setBuildSpec(builders)[ FD ]
Line_68 $$ builders = new ICommand[0]-->Line_94 $$ projectDescription.setBuildSpec(builders)[ FD ]
Line_82 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_94 $$ projectDescription.setBuildSpec(builders)[ FD ]
Line_89 $$ builders = new ICommand[oldBuilders.length + 1]-->Line_94 $$ projectDescription.setBuildSpec(builders)[ FD ]
Line_5 $$ IProject project = null-->Line_95 $$ project.setDescription(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_95 $$ project.setDescription(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_24 $$ IProjectDescription projectDescription = null-->Line_95 $$ project.setDescription(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_26 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName)-->Line_95 $$ project.setDescription(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_33 $$ projectDescription = project.getDescription()-->Line_95 $$ project.setDescription(projectDescription, new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_97 $$ if (javaSource.segmentCount() > 1) [ FD ]
Line_97 $$ if (javaSource.segmentCount() > 1) -->Line_98 $$ IPath sourceContainerPath = javaSource.removeFirstSegments(1).makeAbsolute()[ CD ]
Line_98 $$ IPath sourceContainerPath = javaSource.removeFirstSegments(1).makeAbsolute()-->Line_98 $$ IPath sourceContainerPath = javaSource.removeFirstSegments(1).makeAbsolute()[ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_98 $$ IPath sourceContainerPath = javaSource.removeFirstSegments(1).makeAbsolute()[ FD ]
Line_97 $$ if (javaSource.segmentCount() > 1) -->Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)[ CD ]
Line_96 $$ IContainer sourceContainer = project-->Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)[ FD ]
Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)-->Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)[ FD ]
Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)-->Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)[ CD ]
Line_5 $$ IProject project = null-->Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)[ FD ]
Line_98 $$ IPath sourceContainerPath = javaSource.removeFirstSegments(1).makeAbsolute()-->Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)[ FD ]
Line_97 $$ if (javaSource.segmentCount() > 1) -->Line_100 $$ if (!sourceContainer.exists()) [ CD ]
Line_100 $$ if (!sourceContainer.exists()) -->Line_100 $$ if (!sourceContainer.exists()) [ CD ]
Line_100 $$ if (!sourceContainer.exists()) -->Line_100 $$ if (!sourceContainer.exists()) [ CD ]
Line_96 $$ IContainer sourceContainer = project-->Line_100 $$ if (!sourceContainer.exists()) [ FD ]
Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)-->Line_100 $$ if (!sourceContainer.exists()) [ FD ]
Line_100 $$ if (!sourceContainer.exists()) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ CD ]
Line_100 $$ if (!sourceContainer.exists()) -->Line_100 $$ if (!sourceContainer.exists()) [ CD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ CD ]
Line_98 $$ IPath sourceContainerPath = javaSource.removeFirstSegments(1).makeAbsolute()-->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ CD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ CD ]
Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))-->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_96 $$ IContainer sourceContainer = project-->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)-->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))-->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ CD ]
Line_5 $$ IProject project = null-->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_98 $$ IPath sourceContainerPath = javaSource.removeFirstSegments(1).makeAbsolute()-->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_103 $$ if (!sourceContainer.exists()) [ CD ]
Line_103 $$ if (!sourceContainer.exists()) -->Line_103 $$ if (!sourceContainer.exists()) [ CD ]
Line_103 $$ if (!sourceContainer.exists()) -->Line_103 $$ if (!sourceContainer.exists()) [ CD ]
Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))-->Line_103 $$ if (!sourceContainer.exists()) [ FD ]
Line_96 $$ IContainer sourceContainer = project-->Line_103 $$ if (!sourceContainer.exists()) [ FD ]
Line_99 $$ sourceContainer = project.getFolder(sourceContainerPath)-->Line_103 $$ if (!sourceContainer.exists()) [ FD ]
Line_103 $$ if (!sourceContainer.exists()) -->Line_104 $$ ((IFolder) sourceContainer).create(false, true, new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_97 $$ if (javaSource.segmentCount() > 1) -->Line_108 $$ IClasspathEntry sourceClasspathEntry = JavaCore.newSourceEntry(javaSource)[ CD ]
Line_108 $$ IClasspathEntry sourceClasspathEntry = JavaCore.newSourceEntry(javaSource)-->Line_108 $$ IClasspathEntry sourceClasspathEntry = JavaCore.newSourceEntry(javaSource)[ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_108 $$ IClasspathEntry sourceClasspathEntry = JavaCore.newSourceEntry(javaSource)[ FD ]
Line_97 $$ if (javaSource.segmentCount() > 1) -->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_97 $$ if (javaSource.segmentCount() > 1) -->Line_97 $$ if (javaSource.segmentCount() > 1) [ CD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_110 $$ IClasspathEntry classpathEntry = i.next()[ CD ]
Line_110 $$ IClasspathEntry classpathEntry = i.next()-->Line_110 $$ IClasspathEntry classpathEntry = i.next()[ CD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_110 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_110 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_110 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) [ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) [ FD ]
Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) -->Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) [ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) [ FD ]
Line_110 $$ IClasspathEntry classpathEntry = i.next()-->Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) [ FD ]
Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) -->Line_112 $$ i.remove()[ CD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_112 $$ i.remove()[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_112 $$ i.remove()[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_112 $$ i.remove()[ FD ]
Line_97 $$ if (javaSource.segmentCount() > 1) -->Line_115 $$ classpathEntries.add(0, sourceClasspathEntry)[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_115 $$ classpathEntries.add(0, sourceClasspathEntry)[ FD ]
Line_108 $$ IClasspathEntry sourceClasspathEntry = JavaCore.newSourceEntry(javaSource)-->Line_115 $$ classpathEntries.add(0, sourceClasspathEntry)[ FD ]
Line_117 $$ if (isInitiallyEmpty) -->Line_118 $$ IClasspathEntry jreClasspathEntry = JavaCore.newVariableEntry(new Path(JavaRuntime.JRELIB_VARIABLE), new Path(JavaRuntime.JRESRC_VARIABLE), new Path(JavaRuntime.JRESRCROOT_VARIABLE))[ CD ]
Line_118 $$ IClasspathEntry jreClasspathEntry = JavaCore.newVariableEntry(new Path(JavaRuntime.JRELIB_VARIABLE), new Path(JavaRuntime.JRESRC_VARIABLE), new Path(JavaRuntime.JRESRCROOT_VARIABLE))-->Line_118 $$ IClasspathEntry jreClasspathEntry = JavaCore.newVariableEntry(new Path(JavaRuntime.JRELIB_VARIABLE), new Path(JavaRuntime.JRESRC_VARIABLE), new Path(JavaRuntime.JRESRCROOT_VARIABLE))[ CD ]
Line_117 $$ if (isInitiallyEmpty) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_117 $$ if (isInitiallyEmpty) -->Line_117 $$ if (isInitiallyEmpty) [ CD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_120 $$ IClasspathEntry classpathEntry = i.next()[ CD ]
Line_120 $$ IClasspathEntry classpathEntry = i.next()-->Line_120 $$ IClasspathEntry classpathEntry = i.next()[ CD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_120 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_120 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_120 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_120 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) [ CD ]
Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) -->Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) [ CD ]
Line_120 $$ IClasspathEntry classpathEntry = i.next()-->Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) [ FD ]
Line_110 $$ IClasspathEntry classpathEntry = i.next()-->Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) [ FD ]
Line_118 $$ IClasspathEntry jreClasspathEntry = JavaCore.newVariableEntry(new Path(JavaRuntime.JRELIB_VARIABLE), new Path(JavaRuntime.JRESRC_VARIABLE), new Path(JavaRuntime.JRESRCROOT_VARIABLE))-->Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) [ FD ]
Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) -->Line_122 $$ i.remove()[ CD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_122 $$ i.remove()[ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_122 $$ i.remove()[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_122 $$ i.remove()[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_122 $$ i.remove()[ FD ]
Line_117 $$ if (isInitiallyEmpty) -->Line_125 $$ String jreContainer = JavaRuntime.JRE_CONTAINER[ CD ]
Line_117 $$ if (isInitiallyEmpty) -->Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)[ CD ]
Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)-->Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)[ CD ]
Line_5 $$ IProject project = null-->Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)[ FD ]
Line_11 $$ project = workspace.getRoot().getProject(projectName)-->Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)[ FD ]
Line_117 $$ if (isInitiallyEmpty) -->Line_127 $$ if ("1.5".equals(complianceLevel)) [ CD ]
Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)-->Line_127 $$ if ("1.5".equals(complianceLevel)) [ FD ]
Line_127 $$ if ("1.5".equals(complianceLevel)) -->Line_127 $$ if ("1.5".equals(complianceLevel)) [ CD ]
Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)-->Line_127 $$ if ("1.5".equals(complianceLevel)) [ FD ]
Line_127 $$ if ("1.5".equals(complianceLevel)) -->Line_128 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"[ CD ]
Line_125 $$ String jreContainer = JavaRuntime.JRE_CONTAINER-->Line_128 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"[ FD ]
Line_128 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"-->Line_128 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"[ FD ]
Line_127 $$ if ("1.5".equals(complianceLevel)) -->Line_129 $$ if ("1.6".equals(complianceLevel)) [ CD ]
Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)-->Line_129 $$ if ("1.6".equals(complianceLevel)) [ FD ]
Line_129 $$ if ("1.6".equals(complianceLevel)) -->Line_129 $$ if ("1.6".equals(complianceLevel)) [ CD ]
Line_126 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project)-->Line_129 $$ if ("1.6".equals(complianceLevel)) [ FD ]
Line_129 $$ if ("1.6".equals(complianceLevel)) -->Line_130 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"[ CD ]
Line_125 $$ String jreContainer = JavaRuntime.JRE_CONTAINER-->Line_130 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"[ FD ]
Line_128 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"-->Line_130 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"[ FD ]
Line_130 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"-->Line_130 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"[ FD ]
Line_117 $$ if (isInitiallyEmpty) -->Line_132 $$ classpathEntries.add(JavaCore.newContainerEntry(new Path(jreContainer)))[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_132 $$ classpathEntries.add(JavaCore.newContainerEntry(new Path(jreContainer)))[ FD ]
Line_134 $$ if ((style & EMF_EMPTY_PROJECT_STYLE) == 0) -->Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) [ CD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_136 $$ classpathEntries.add(JavaCore.newContainerEntry(new Path("org.eclipse.pde.core.requiredPlugins")))[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_136 $$ classpathEntries.add(JavaCore.newContainerEntry(new Path("org.eclipse.pde.core.requiredPlugins")))[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) [ CD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ CD ]
Line_138 $$ IClasspathEntry classpathEntry = i.next()-->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ CD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ CD ]
Line_138 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_120 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_110 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) -->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ CD ]
Line_138 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_120 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_110 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_138 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_120 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_110 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) -->Line_140 $$ i.remove()[ CD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_140 $$ i.remove()[ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_140 $$ i.remove()[ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_140 $$ i.remove()[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_140 $$ i.remove()[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_140 $$ i.remove()[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_144 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_CORE_RUNTIME", "org.eclipse.core.runtime")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_144 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_CORE_RUNTIME", "org.eclipse.core.runtime")[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_145 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_CORE_RESOURCES", "org.eclipse.core.resources")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_145 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_CORE_RESOURCES", "org.eclipse.core.resources")[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_146 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_COMMON", "org.eclipse.emf.common")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_146 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_COMMON", "org.eclipse.emf.common")[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_147 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_ECORE", "org.eclipse.emf.ecore")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_147 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_ECORE", "org.eclipse.emf.ecore")[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_148 $$ if ((style & EMF_XML_PROJECT_STYLE) != 0) [ CD ]
Line_148 $$ if ((style & EMF_XML_PROJECT_STYLE) != 0) -->Line_149 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_ECORE_XMI", "org.eclipse.emf.ecore.xmi")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_149 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_ECORE_XMI", "org.eclipse.emf.ecore.xmi")[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_151 $$ if ((style & EMF_MODEL_PROJECT_STYLE) == 0) [ CD ]
Line_151 $$ if ((style & EMF_MODEL_PROJECT_STYLE) == 0) -->Line_152 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_EDIT", "org.eclipse.emf.edit")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_152 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_EDIT", "org.eclipse.emf.edit")[ FD ]
Line_151 $$ if ((style & EMF_MODEL_PROJECT_STYLE) == 0) -->Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) [ CD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_154 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_SWT", "org.eclipse.swt")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_154 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_SWT", "org.eclipse.swt")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_155 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_JFACE", "org.eclipse.jface")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_155 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_JFACE", "org.eclipse.jface")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_156 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_VIEWS", "org.eclipse.ui.views")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_156 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_VIEWS", "org.eclipse.ui.views")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_157 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_EDITORS", "org.eclipse.ui.editors")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_157 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_EDITORS", "org.eclipse.ui.editors")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_158 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_IDE", "org.eclipse.ui.ide")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_158 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_IDE", "org.eclipse.ui.ide")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_159 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_WORKBENCH", "org.eclipse.ui.workbench")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_159 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "ECLIPSE_UI_WORKBENCH", "org.eclipse.ui.workbench")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_160 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_COMMON_UI", "org.eclipse.emf.common.ui")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_160 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_COMMON_UI", "org.eclipse.emf.common.ui")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_161 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_EDIT_UI", "org.eclipse.emf.edit.ui")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_161 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_EDIT_UI", "org.eclipse.emf.edit.ui")[ FD ]
Line_153 $$ if ((style & EMF_EDIT_PROJECT_STYLE) == 0) -->Line_162 $$ if ((style & EMF_XML_PROJECT_STYLE) == 0) [ CD ]
Line_162 $$ if ((style & EMF_XML_PROJECT_STYLE) == 0) -->Line_163 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_ECORE_XMI", "org.eclipse.emf.ecore.xmi")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_163 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "EMF_ECORE_XMI", "org.eclipse.emf.ecore.xmi")[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_167 $$ if ((style & EMF_TESTS_PROJECT_STYLE) != 0) [ CD ]
Line_167 $$ if ((style & EMF_TESTS_PROJECT_STYLE) != 0) -->Line_168 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "JUNIT", "org.junit")[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_168 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, "JUNIT", "org.junit")[ FD ]
Line_135 $$ if ((style & EMF_PLUGIN_PROJECT_STYLE) != 0) -->Line_170 $$ if (pluginVariables != null) [ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_170 $$ if (pluginVariables != null) [ FD ]
Line_170 $$ if (pluginVariables != null) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ CD ]
Line_170 $$ if (pluginVariables != null) -->Line_170 $$ if (pluginVariables != null) [ CD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ CD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ FD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ CD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ CD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ FD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_172 $$ Object variable = i.next()[ CD ]
Line_172 $$ Object variable = i.next()-->Line_172 $$ Object variable = i.next()[ CD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_172 $$ Object variable = i.next()[ FD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_172 $$ Object variable = i.next()[ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_172 $$ Object variable = i.next()[ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_172 $$ Object variable = i.next()[ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_172 $$ Object variable = i.next()[ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_172 $$ Object variable = i.next()[ FD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_173 $$ if (variable instanceof IClasspathEntry) [ CD ]
Line_172 $$ Object variable = i.next()-->Line_173 $$ if (variable instanceof IClasspathEntry) [ FD ]
Line_173 $$ if (variable instanceof IClasspathEntry) -->Line_174 $$ classpathEntries.add((IClasspathEntry) variable)[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_174 $$ classpathEntries.add((IClasspathEntry) variable)[ FD ]
Line_173 $$ if (variable instanceof IClasspathEntry) -->Line_175 $$ if (variable instanceof String) [ CD ]
Line_172 $$ Object variable = i.next()-->Line_175 $$ if (variable instanceof String) [ FD ]
Line_175 $$ if (variable instanceof String) -->Line_176 $$ String pluginVariable = (String) variable[ CD ]
Line_175 $$ if (variable instanceof String) -->Line_177 $$ String name[ CD ]
Line_175 $$ if (variable instanceof String) -->Line_178 $$ String id[ CD ]
Line_175 $$ if (variable instanceof String) -->Line_179 $$ int index = pluginVariable.indexOf("=")[ CD ]
Line_179 $$ int index = pluginVariable.indexOf("=")-->Line_179 $$ int index = pluginVariable.indexOf("=")[ CD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_179 $$ int index = pluginVariable.indexOf("=")[ FD ]
Line_175 $$ if (variable instanceof String) -->Line_180 $$ if (index == -1) [ CD ]
Line_179 $$ int index = pluginVariable.indexOf("=")-->Line_180 $$ if (index == -1) [ FD ]
Line_180 $$ if (index == -1) -->Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()[ CD ]
Line_177 $$ String name-->Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()[ FD ]
Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()-->Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()[ FD ]
Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()-->Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()[ CD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()[ FD ]
Line_180 $$ if (index == -1) -->Line_182 $$ id = pluginVariable[ CD ]
Line_178 $$ String id-->Line_182 $$ id = pluginVariable[ FD ]
Line_182 $$ id = pluginVariable-->Line_182 $$ id = pluginVariable[ FD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_182 $$ id = pluginVariable[ FD ]
Line_180 $$ if (index == -1) -->Line_184 $$ name = pluginVariable.substring(0, index)[ CD ]
Line_177 $$ String name-->Line_184 $$ name = pluginVariable.substring(0, index)[ FD ]
Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()-->Line_184 $$ name = pluginVariable.substring(0, index)[ FD ]
Line_184 $$ name = pluginVariable.substring(0, index)-->Line_184 $$ name = pluginVariable.substring(0, index)[ FD ]
Line_184 $$ name = pluginVariable.substring(0, index)-->Line_184 $$ name = pluginVariable.substring(0, index)[ CD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_184 $$ name = pluginVariable.substring(0, index)[ FD ]
Line_179 $$ int index = pluginVariable.indexOf("=")-->Line_184 $$ name = pluginVariable.substring(0, index)[ FD ]
Line_180 $$ if (index == -1) -->Line_185 $$ id = pluginVariable.substring(index + 1)[ CD ]
Line_178 $$ String id-->Line_185 $$ id = pluginVariable.substring(index + 1)[ FD ]
Line_182 $$ id = pluginVariable-->Line_185 $$ id = pluginVariable.substring(index + 1)[ FD ]
Line_185 $$ id = pluginVariable.substring(index + 1)-->Line_185 $$ id = pluginVariable.substring(index + 1)[ FD ]
Line_185 $$ id = pluginVariable.substring(index + 1)-->Line_185 $$ id = pluginVariable.substring(index + 1)[ CD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_185 $$ id = pluginVariable.substring(index + 1)[ FD ]
Line_175 $$ if (variable instanceof String) -->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ CD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_177 $$ String name-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_184 $$ name = pluginVariable.substring(0, index)-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_178 $$ String id-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_182 $$ id = pluginVariable-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_185 $$ id = pluginVariable.substring(index + 1)-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_23 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_193 $$ javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_193 $$ javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_7 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>()-->Line_193 $$ javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_195 $$ if (isInitiallyEmpty) -->Line_196 $$ javaProject.setOutputLocation(new Path("/" + javaSource.segment(0) + "/bin"), new SubProgressMonitor(progressMonitor, 1))[ CD ]
Line_23 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_196 $$ javaProject.setOutputLocation(new Path("/" + javaSource.segment(0) + "/bin"), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_196 $$ javaProject.setOutputLocation(new Path("/" + javaSource.segment(0) + "/bin"), new SubProgressMonitor(progressMonitor, 1))[ FD ]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor)-->Line_202 $$ progressMonitor.done()[ FD ]
Line_2 $$ public static IProject createEMFProject(IPath javaSource, URI projectLocationURI, List<IProject> referencedProjects, Monitor monitor, int style, List<?> pluginVariables) -->Line_204 $$ return project[ CD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_72 $$ for (int i = 0; i < builders.length; ++i) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_72 $$ for (int i = 0; i < builders.length; ++i) [ FD ]
Line_72 $$ for (int i = 0; i < builders.length; ++i) -->Line_72 $$ for (int i = 0; i < builders.length; ++i) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) [ FD ]
Line_101 $$ for (int i = sourceContainerPath.segmentCount() - 1; i >= 0; i--) -->Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))[ FD ]
Line_102 $$ sourceContainer = project.getFolder(sourceContainerPath.removeLastSegments(i))-->Line_103 $$ if (!sourceContainer.exists()) [ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_110 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_110 $$ IClasspathEntry classpathEntry = i.next()-->Line_111 $$ if (classpathEntry.getPath().isPrefixOf(javaSource)) [ FD ]
Line_109 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_112 $$ i.remove()[ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_120 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_120 $$ IClasspathEntry classpathEntry = i.next()-->Line_121 $$ if (classpathEntry.getPath().isPrefixOf(jreClasspathEntry.getPath())) [ FD ]
Line_119 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_122 $$ i.remove()[ FD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) [ FD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_138 $$ IClasspathEntry classpathEntry = i.next()[ FD ]
Line_138 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_138 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_138 $$ IClasspathEntry classpathEntry = i.next()-->Line_139 $$ if (classpathEntry.getEntryKind() == IClasspathEntry.CPE_VARIABLE && !JavaRuntime.JRELIB_VARIABLE.equals(classpathEntry.getPath().toString()) || classpathEntry.getEntryKind() == IClasspathEntry.CPE_PROJECT) [ FD ]
Line_137 $$ for (Iterator<IClasspathEntry> i = classpathEntries.iterator(); i.hasNext(); ) -->Line_140 $$ i.remove()[ FD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) [ FD ]
Line_171 $$ for (Iterator<?> i = pluginVariables.iterator(); i.hasNext(); ) -->Line_172 $$ Object variable = i.next()[ FD ]
Line_172 $$ Object variable = i.next()-->Line_173 $$ if (variable instanceof IClasspathEntry) [ FD ]
Line_172 $$ Object variable = i.next()-->Line_175 $$ if (variable instanceof String) [ FD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_179 $$ int index = pluginVariable.indexOf("=")[ FD ]
Line_179 $$ int index = pluginVariable.indexOf("=")-->Line_180 $$ if (index == -1) [ FD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()[ FD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_182 $$ id = pluginVariable[ FD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_184 $$ name = pluginVariable.substring(0, index)[ FD ]
Line_179 $$ int index = pluginVariable.indexOf("=")-->Line_184 $$ name = pluginVariable.substring(0, index)[ FD ]
Line_176 $$ String pluginVariable = (String) variable-->Line_185 $$ id = pluginVariable.substring(index + 1)[ FD ]
Line_177 $$ String name-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_181 $$ name = pluginVariable.replace('.', '_').toUpperCase()-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_184 $$ name = pluginVariable.substring(0, index)-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_178 $$ String id-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_182 $$ id = pluginVariable-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
Line_185 $$ id = pluginVariable.substring(index + 1)-->Line_187 $$ CodeGenUtil.EclipseUtil.addClasspathEntries(classpathEntries, name, id)[ FD ]
