Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void loadExistingAntlibs(ClassLoader classLoader) [ CD ]
Line_2 $$ public void loadExistingAntlibs(ClassLoader classLoader) -->Line_3 $$ URL antlibUrl[ CD ]
Line_2 $$ public void loadExistingAntlibs(ClassLoader classLoader) -->Line_4 $$ URI antlibUri[ CD ]
Line_2 $$ public void loadExistingAntlibs(ClassLoader classLoader) -->Line_6 $$ Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource)[ FD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_7 $$ while (resources.hasMoreElements()) [ CD ]
Line_6 $$ Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource)-->Line_7 $$ while (resources.hasMoreElements()) [ FD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_8 $$ URL url = resources.nextElement()[ CD ]
Line_8 $$ URL url = resources.nextElement()-->Line_8 $$ URL url = resources.nextElement()[ CD ]
Line_6 $$ Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource)-->Line_8 $$ URL url = resources.nextElement()[ FD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_9 $$ InputStream stream = url.openStream()[ CD ]
Line_9 $$ InputStream stream = url.openStream()-->Line_9 $$ InputStream stream = url.openStream()[ CD ]
Line_8 $$ URL url = resources.nextElement()-->Line_9 $$ InputStream stream = url.openStream()[ FD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))[ CD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ CD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_7 $$ while (resources.hasMoreElements()) [ CD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ CD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ CD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ CD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ CD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_12 $$ String pkg = line.trim()[ CD ]
Line_12 $$ String pkg = line.trim()-->Line_12 $$ String pkg = line.trim()[ CD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_12 $$ String pkg = line.trim()[ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_12 $$ String pkg = line.trim()[ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_13 $$ URI uri = URI.create("antlib:" + pkg)[ CD ]
Line_13 $$ URI uri = URI.create("antlib:" + pkg)-->Line_13 $$ URI uri = URI.create("antlib:" + pkg)[ CD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")[ CD ]
Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")-->Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")[ CD ]
Line_12 $$ String pkg = line.trim()-->Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")[ FD ]
Line_12 $$ String pkg = line.trim()-->Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")[ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)[ CD ]
Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)-->Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)[ FD ]
Line_4 $$ URI antlibUri-->Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)[ FD ]
Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)-->Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)[ CD ]
Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")-->Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)[ FD ]
Line_8 $$ URL url = resources.nextElement()-->Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)[ FD ]
Line_17 $$ antlibUrl = antlibUri.toURL()-->Line_17 $$ antlibUrl = antlibUri.toURL()[ FD ]
Line_3 $$ URL antlibUrl-->Line_17 $$ antlibUrl = antlibUri.toURL()[ FD ]
Line_17 $$ antlibUrl = antlibUri.toURL()-->Line_17 $$ antlibUrl = antlibUri.toURL()[ CD ]
Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)-->Line_17 $$ antlibUrl = antlibUri.toURL()[ FD ]
Line_4 $$ URI antlibUri-->Line_17 $$ antlibUrl = antlibUri.toURL()[ FD ]
Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)-->Line_22 $$ throw new RuntimeException(antlibUri.toString(), e)[ FD ]
Line_4 $$ URI antlibUri-->Line_22 $$ throw new RuntimeException(antlibUri.toString(), e)[ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_24 $$ loadAntLib(antlibUrl, uri)[ CD ]
Line_17 $$ antlibUrl = antlibUri.toURL()-->Line_24 $$ loadAntLib(antlibUrl, uri)[ FD ]
Line_3 $$ URL antlibUrl-->Line_24 $$ loadAntLib(antlibUrl, uri)[ FD ]
Line_13 $$ URI uri = URI.create("antlib:" + pkg)-->Line_24 $$ loadAntLib(antlibUrl, uri)[ FD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_26 $$ reader.close()[ CD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_26 $$ reader.close()[ FD ]
Line_7 $$ while (resources.hasMoreElements()) -->Line_27 $$ stream.close()[ CD ]
Line_9 $$ InputStream stream = url.openStream()-->Line_27 $$ stream.close()[ FD ]
Line_8 $$ URL url = resources.nextElement()-->Line_9 $$ InputStream stream = url.openStream()[ FD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(stream, "UTF-8"))-->Line_26 $$ reader.close()[ FD ]
Line_9 $$ InputStream stream = url.openStream()-->Line_27 $$ stream.close()[ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) [ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_12 $$ String pkg = line.trim()[ FD ]
Line_11 $$ for (String line = reader.readLine(); line != null; line = reader.readLine()) -->Line_12 $$ String pkg = line.trim()[ FD ]
Line_12 $$ String pkg = line.trim()-->Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")[ FD ]
Line_12 $$ String pkg = line.trim()-->Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")[ FD ]
Line_14 $$ URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? "" : "/") + "antlib.xml")-->Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)[ FD ]
Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)-->Line_17 $$ antlibUrl = antlibUri.toURL()[ FD ]
Line_15 $$ antlibUri = NetUtils.resolve(url.toURI(), resource2antlib)-->Line_22 $$ throw new RuntimeException(antlibUri.toString(), e)[ FD ]
Line_17 $$ antlibUrl = antlibUri.toURL()-->Line_24 $$ loadAntLib(antlibUrl, uri)[ FD ]
Line_13 $$ URI uri = URI.create("antlib:" + pkg)-->Line_24 $$ loadAntLib(antlibUrl, uri)[ FD ]
