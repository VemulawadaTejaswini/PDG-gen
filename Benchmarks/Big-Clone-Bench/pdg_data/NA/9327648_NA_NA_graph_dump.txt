Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException [ CD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_3 $$ File preprocessedTextFile = File.createTempFile("cvs", null)[ CD ]
Line_3 $$ File preprocessedTextFile = File.createTempFile("cvs", null)-->Line_3 $$ File preprocessedTextFile = File.createTempFile("cvs", null)[ CD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_4 $$ String separatorSeq = getSeparatorSequence()[ CD ]
Line_4 $$ String separatorSeq = getSeparatorSequence()-->Line_4 $$ String separatorSeq = getSeparatorSequence()[ CD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_5 $$ byte[] newLine = separatorSeq.getBytes()[ CD ]
Line_5 $$ byte[] newLine = separatorSeq.getBytes()-->Line_5 $$ byte[] newLine = separatorSeq.getBytes()[ CD ]
Line_4 $$ String separatorSeq = getSeparatorSequence()-->Line_5 $$ byte[] newLine = separatorSeq.getBytes()[ FD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_6 $$ Constants.CVS_LOG.debug("Preprocessing " + originalTextFile.getAbsolutePath() + " to " + preprocessedTextFile.getAbsolutePath() + " using " + debugSequence(separatorSeq))[ CD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_6 $$ Constants.CVS_LOG.debug("Preprocessing " + originalTextFile.getAbsolutePath() + " to " + preprocessedTextFile.getAbsolutePath() + " using " + debugSequence(separatorSeq))[ FD ]
Line_3 $$ File preprocessedTextFile = File.createTempFile("cvs", null)-->Line_6 $$ Constants.CVS_LOG.debug("Preprocessing " + originalTextFile.getAbsolutePath() + " to " + preprocessedTextFile.getAbsolutePath() + " using " + debugSequence(separatorSeq))[ FD ]
Line_4 $$ String separatorSeq = getSeparatorSequence()-->Line_6 $$ Constants.CVS_LOG.debug("Preprocessing " + originalTextFile.getAbsolutePath() + " to " + preprocessedTextFile.getAbsolutePath() + " using " + debugSequence(separatorSeq))[ FD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_7 $$ byte[] crlf = "\r\n".getBytes()[ CD ]
Line_7 $$ byte[] crlf = "\r\n".getBytes()-->Line_7 $$ byte[] crlf = "\r\n".getBytes()[ CD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_8 $$ byte[] lf = "\n".getBytes()[ CD ]
Line_8 $$ byte[] lf = "\n".getBytes()-->Line_8 $$ byte[] lf = "\n".getBytes()[ CD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_9 $$ OutputStream out = null[ CD ]
Line_2 $$ public File getPreprocessedTextFile(File originalTextFile) throws IOException -->Line_10 $$ InputStream in = null[ CD ]
Line_10 $$ InputStream in = null-->Line_12 $$ in = new BufferedInputStream(new FileInputStream(originalTextFile))[ FD ]
Line_12 $$ in = new BufferedInputStream(new FileInputStream(originalTextFile))-->Line_12 $$ in = new BufferedInputStream(new FileInputStream(originalTextFile))[ FD ]
Line_9 $$ OutputStream out = null-->Line_13 $$ out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile))[ FD ]
Line_13 $$ out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile))-->Line_13 $$ out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile))[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ CD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ CD ]
Line_10 $$ InputStream in = null-->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_12 $$ in = new BufferedInputStream(new FileInputStream(originalTextFile))-->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_14 $$ byte[] fileChunk = new byte[CHUNK_SIZE]-->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ CD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ CD ]
Line_10 $$ InputStream in = null-->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_12 $$ in = new BufferedInputStream(new FileInputStream(originalTextFile))-->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_14 $$ byte[] fileChunk = new byte[CHUNK_SIZE]-->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_17 $$ if (newLine.length == 0) [ CD ]
Line_17 $$ if (newLine.length == 0) -->Line_18 $$ out.write(fileChunk, 0, readLength)[ CD ]
Line_9 $$ OutputStream out = null-->Line_18 $$ out.write(fileChunk, 0, readLength)[ FD ]
Line_13 $$ out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile))-->Line_18 $$ out.write(fileChunk, 0, readLength)[ FD ]
Line_14 $$ byte[] fileChunk = new byte[CHUNK_SIZE]-->Line_18 $$ out.write(fileChunk, 0, readLength)[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_18 $$ out.write(fileChunk, 0, readLength)[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_18 $$ out.write(fileChunk, 0, readLength)[ FD ]
Line_17 $$ if (newLine.length == 0) -->Line_20 $$ int writeLength = 0[ CD ]
Line_17 $$ if (newLine.length == 0) -->Line_21 $$ for (int i = 0; i < readLength; ) [ CD ]
Line_17 $$ if (newLine.length == 0) -->Line_17 $$ if (newLine.length == 0) [ CD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_21 $$ for (int i = 0; i < readLength; ) [ CD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ CD ]
Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)-->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ CD ]
Line_14 $$ byte[] fileChunk = new byte[CHUNK_SIZE]-->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ FD ]
Line_7 $$ byte[] crlf = "\r\n".getBytes()-->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_23 $$ int lineSepLength = crlf.length[ CD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_24 $$ if (pos < i || pos >= readLength) [ CD ]
Line_24 $$ if (pos < i || pos >= readLength) -->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ CD ]
Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)-->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_25 $$ pos = findIndexOf(fileChunk, lf, i)-->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_25 $$ pos = findIndexOf(fileChunk, lf, i)-->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ CD ]
Line_14 $$ byte[] fileChunk = new byte[CHUNK_SIZE]-->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_8 $$ byte[] lf = "\n".getBytes()-->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_24 $$ if (pos < i || pos >= readLength) -->Line_26 $$ lineSepLength = lf.length[ CD ]
Line_23 $$ int lineSepLength = crlf.length-->Line_26 $$ lineSepLength = lf.length[ FD ]
Line_26 $$ lineSepLength = lf.length-->Line_26 $$ lineSepLength = lf.length[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_28 $$ if (pos >= i && pos < readLength) [ CD ]
Line_14 $$ byte[] fileChunk = new byte[CHUNK_SIZE]-->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_15 $$ byte[] fileWriteChunk = new byte[CHUNK_SIZE]-->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_20 $$ int writeLength = 0-->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_28 $$ if (pos >= i && pos < readLength) -->Line_35 $$ writeLength += pos - i[ CD ]
Line_35 $$ writeLength += pos - i-->Line_35 $$ writeLength += pos - i[ FD ]
Line_20 $$ int writeLength = 0-->Line_35 $$ writeLength += pos - i[ FD ]
Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)-->Line_35 $$ writeLength += pos - i[ FD ]
Line_25 $$ pos = findIndexOf(fileChunk, lf, i)-->Line_35 $$ writeLength += pos - i[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_35 $$ writeLength += pos - i[ FD ]
Line_28 $$ if (pos >= i && pos < readLength) -->Line_36 $$ i = pos + lineSepLength[ CD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_25 $$ pos = findIndexOf(fileChunk, lf, i)-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_23 $$ int lineSepLength = crlf.length-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_26 $$ lineSepLength = lf.length-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_28 $$ if (pos >= i && pos < readLength) -->Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j][ CD ]
Line_28 $$ if (pos >= i && pos < readLength) -->Line_28 $$ if (pos >= i && pos < readLength) [ CD ]
Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j]-->Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j][ CD ]
Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j]-->Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j][ CD ]
Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j]-->Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j][ FD ]
Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j]-->Line_37 $$ fileWriteChunk[writeLength++] = newLine[j][ CD ]
Line_35 $$ writeLength += pos - i-->Line_37 $$ fileWriteChunk[writeLength++] = newLine[j][ FD ]
Line_20 $$ int writeLength = 0-->Line_37 $$ fileWriteChunk[writeLength++] = newLine[j][ FD ]
Line_28 $$ if (pos >= i && pos < readLength) -->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ CD ]
Line_14 $$ byte[] fileChunk = new byte[CHUNK_SIZE]-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_15 $$ byte[] fileWriteChunk = new byte[CHUNK_SIZE]-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_35 $$ writeLength += pos - i-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_20 $$ int writeLength = 0-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_28 $$ if (pos >= i && pos < readLength) -->Line_40 $$ writeLength += readLength - i[ CD ]
Line_35 $$ writeLength += pos - i-->Line_40 $$ writeLength += readLength - i[ FD ]
Line_40 $$ writeLength += readLength - i-->Line_40 $$ writeLength += readLength - i[ FD ]
Line_20 $$ int writeLength = 0-->Line_40 $$ writeLength += readLength - i[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_40 $$ writeLength += readLength - i[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_40 $$ writeLength += readLength - i[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_40 $$ writeLength += readLength - i[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_40 $$ writeLength += readLength - i[ FD ]
Line_28 $$ if (pos >= i && pos < readLength) -->Line_41 $$ i = readLength[ CD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_41 $$ i = readLength[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_41 $$ i = readLength[ FD ]
Line_41 $$ i = readLength-->Line_41 $$ i = readLength[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_41 $$ i = readLength[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_41 $$ i = readLength[ FD ]
Line_17 $$ if (newLine.length == 0) -->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ CD ]
Line_9 $$ OutputStream out = null-->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ FD ]
Line_13 $$ out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile))-->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ FD ]
Line_15 $$ byte[] fileWriteChunk = new byte[CHUNK_SIZE]-->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ FD ]
Line_35 $$ writeLength += pos - i-->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ FD ]
Line_40 $$ writeLength += readLength - i-->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ FD ]
Line_20 $$ int writeLength = 0-->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ FD ]
Line_3 $$ File preprocessedTextFile = File.createTempFile("cvs", null)-->Line_49 $$ if (preprocessedTextFile != null) [ FD ]
Line_49 $$ if (preprocessedTextFile != null) -->Line_50 $$ cleanup(preprocessedTextFile)[ CD ]
Line_3 $$ File preprocessedTextFile = File.createTempFile("cvs", null)-->Line_50 $$ cleanup(preprocessedTextFile)[ FD ]
Line_10 $$ InputStream in = null-->Line_54 $$ if (in != null) [ FD ]
Line_12 $$ in = new BufferedInputStream(new FileInputStream(originalTextFile))-->Line_54 $$ if (in != null) [ FD ]
Line_10 $$ InputStream in = null-->Line_56 $$ in.close()[ FD ]
Line_12 $$ in = new BufferedInputStream(new FileInputStream(originalTextFile))-->Line_56 $$ in.close()[ FD ]
Line_9 $$ OutputStream out = null-->Line_60 $$ if (out != null) [ FD ]
Line_13 $$ out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile))-->Line_60 $$ if (out != null) [ FD ]
Line_9 $$ OutputStream out = null-->Line_62 $$ out.close()[ FD ]
Line_13 $$ out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile))-->Line_62 $$ out.close()[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) [ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_18 $$ out.write(fileChunk, 0, readLength)[ FD ]
Line_16 $$ for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) -->Line_18 $$ out.write(fileChunk, 0, readLength)[ FD ]
Line_20 $$ int writeLength = 0-->Line_44 $$ out.write(fileWriteChunk, 0, writeLength)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_41 $$ i = readLength-->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_41 $$ i = readLength-->Line_21 $$ for (int i = 0; i < readLength; ) [ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ FD ]
Line_41 $$ i = readLength-->Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_41 $$ i = readLength-->Line_25 $$ pos = findIndexOf(fileChunk, lf, i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_41 $$ i = readLength-->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_35 $$ writeLength += pos - i-->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_40 $$ writeLength += readLength - i-->Line_30 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i)[ FD ]
Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)-->Line_35 $$ writeLength += pos - i[ FD ]
Line_25 $$ pos = findIndexOf(fileChunk, lf, i)-->Line_35 $$ writeLength += pos - i[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_35 $$ writeLength += pos - i[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_35 $$ writeLength += pos - i[ FD ]
Line_41 $$ i = readLength-->Line_35 $$ writeLength += pos - i[ FD ]
Line_22 $$ int pos = findIndexOf(fileChunk, crlf, i)-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_25 $$ pos = findIndexOf(fileChunk, lf, i)-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_23 $$ int lineSepLength = crlf.length-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_26 $$ lineSepLength = lf.length-->Line_36 $$ i = pos + lineSepLength[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_41 $$ i = readLength-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_35 $$ writeLength += pos - i-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_40 $$ writeLength += readLength - i-->Line_39 $$ System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i)[ FD ]
Line_21 $$ for (int i = 0; i < readLength; ) -->Line_40 $$ writeLength += readLength - i[ FD ]
Line_36 $$ i = pos + lineSepLength-->Line_40 $$ writeLength += readLength - i[ FD ]
Line_41 $$ i = readLength-->Line_40 $$ writeLength += readLength - i[ FD ]
Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j]-->Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j][ FD ]
Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j]-->Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j][ FD ]
Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j]-->Line_37 $$ for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j][ FD ]
