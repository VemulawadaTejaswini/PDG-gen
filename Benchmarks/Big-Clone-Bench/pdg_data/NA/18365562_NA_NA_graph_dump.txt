Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void load(Runestone stone) throws RunesExceptionRuneExecution, RunesExceptionNoSuchContent [ CD ]
Line_2 $$ private void load(Runestone stone) throws RunesExceptionRuneExecution, RunesExceptionNoSuchContent -->Line_3 $$ final Tokeniser tokeniser = stone.<Tokeniser>getContent("tokeniser").iterator().next()[ CD ]
Line_3 $$ final Tokeniser tokeniser = stone.<Tokeniser>getContent("tokeniser").iterator().next()-->Line_3 $$ final Tokeniser tokeniser = stone.<Tokeniser>getContent("tokeniser").iterator().next()[ CD ]
Line_2 $$ private void load(Runestone stone) throws RunesExceptionRuneExecution, RunesExceptionNoSuchContent -->Line_3 $$ final Tokeniser tokeniser = stone.<Tokeniser>getContent("tokeniser").iterator().next()[ FD ]
Line_2 $$ private void load(Runestone stone) throws RunesExceptionRuneExecution, RunesExceptionNoSuchContent -->Line_5 $$ System.out.println("Loading Gaz from: " + _url)[ CD ]
Line_2 $$ private void load(Runestone stone) throws RunesExceptionRuneExecution, RunesExceptionNoSuchContent -->Line_6 $$ if (_url == null)[ CD ]
Line_6 $$ if (_url == null)-->Line_6 $$ return[ CD ]
Line_2 $$ private void load(Runestone stone) throws RunesExceptionRuneExecution, RunesExceptionNoSuchContent -->Line_7 $$ BufferedReader typesIn = null, entryIn = null[ CD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_9 $$ typesIn = new BufferedReader(new InputStreamReader(_url.openStream()))[ FD ]
Line_9 $$ typesIn = new BufferedReader(new InputStreamReader(_url.openStream()))-->Line_9 $$ typesIn = new BufferedReader(new InputStreamReader(_url.openStream()))[ FD ]
Line_10 $$ String tData = typesIn.readLine()-->Line_10 $$ String tData = typesIn.readLine()[ CD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_10 $$ String tData = typesIn.readLine()[ FD ]
Line_9 $$ typesIn = new BufferedReader(new InputStreamReader(_url.openStream()))-->Line_10 $$ String tData = typesIn.readLine()[ FD ]
Line_10 $$ String tData = typesIn.readLine()-->Line_11 $$ while (tData != null) [ FD ]
Line_11 $$ while (tData != null) -->Line_12 $$ Map<String, Map> gaz = new HashMap<String, Map>()[ CD ]
Line_11 $$ while (tData != null) -->Line_13 $$ String[] data = tData.split(":")[ CD ]
Line_13 $$ String[] data = tData.split(":")-->Line_13 $$ String[] data = tData.split(":")[ CD ]
Line_10 $$ String tData = typesIn.readLine()-->Line_13 $$ String[] data = tData.split(":")[ FD ]
Line_11 $$ while (tData != null) -->Line_14 $$ URL listURL = new URL(_url, data[0])[ CD ]
Line_11 $$ while (tData != null) -->Line_15 $$ System.err.println("Loading from " + listURL)[ CD ]
Line_11 $$ while (tData != null) -->Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))[ CD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))[ FD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))[ FD ]
Line_14 $$ URL listURL = new URL(_url, data[0])-->Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))[ FD ]
Line_11 $$ while (tData != null) -->Line_17 $$ String entry = entryIn.readLine()[ CD ]
Line_17 $$ String entry = entryIn.readLine()-->Line_17 $$ String entry = entryIn.readLine()[ CD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_17 $$ String entry = entryIn.readLine()[ FD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_17 $$ String entry = entryIn.readLine()[ FD ]
Line_11 $$ while (tData != null) -->Line_18 $$ while (entry != null) [ CD ]
Line_11 $$ while (tData != null) -->Line_11 $$ while (tData != null) [ CD ]
Line_17 $$ String entry = entryIn.readLine()-->Line_18 $$ while (entry != null) [ FD ]
Line_18 $$ while (entry != null) -->Line_19 $$ entry = entry.trim()[ CD ]
Line_19 $$ entry = entry.trim()-->Line_19 $$ entry = entry.trim()[ FD ]
Line_17 $$ String entry = entryIn.readLine()-->Line_19 $$ entry = entry.trim()[ FD ]
Line_19 $$ entry = entry.trim()-->Line_19 $$ entry = entry.trim()[ CD ]
Line_19 $$ entry = entry.trim()-->Line_19 $$ entry = entry.trim()[ FD ]
Line_17 $$ String entry = entryIn.readLine()-->Line_19 $$ entry = entry.trim()[ FD ]
Line_18 $$ while (entry != null) -->Line_20 $$ if (!entry.equals("")) [ CD ]
Line_20 $$ if (!entry.equals("")) -->Line_20 $$ if (!entry.equals("")) [ CD ]
Line_20 $$ if (!entry.equals("")) -->Line_20 $$ if (!entry.equals("")) [ CD ]
Line_19 $$ entry = entry.trim()-->Line_20 $$ if (!entry.equals("")) [ FD ]
Line_17 $$ String entry = entryIn.readLine()-->Line_20 $$ if (!entry.equals("")) [ FD ]
Line_20 $$ if (!entry.equals("")) -->Line_21 $$ final List<Token> tokens[ CD ]
Line_21 $$ final List<Token> tokens-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ FD ]
Line_23 $$ tokens = tokeniser.tokenise(entry)-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ FD ]
Line_23 $$ tokens = tokeniser.tokenise(entry)-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ CD ]
Line_3 $$ final Tokeniser tokeniser = stone.<Tokeniser>getContent("tokeniser").iterator().next()-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ FD ]
Line_19 $$ entry = entry.trim()-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ FD ]
Line_17 $$ String entry = entryIn.readLine()-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ FD ]
Line_20 $$ if (!entry.equals("")) -->Line_27 $$ Map<String, Map> m = gaz[ CD ]
Line_29 $$ String token = t.getString()-->Line_29 $$ String token = t.getString()[ CD ]
Line_28 $$ for (Token t : tokens) -->Line_29 $$ String token = t.getString()[ FD ]
Line_30 $$ if (_case_insensitive_gazetteer)-->Line_30 $$ token = token.toLowerCase()[ CD ]
Line_29 $$ String token = t.getString()-->Line_30 $$ token = token.toLowerCase()[ FD ]
Line_30 $$ token = token.toLowerCase()-->Line_30 $$ token = token.toLowerCase()[ FD ]
Line_30 $$ token = token.toLowerCase()-->Line_30 $$ token = token.toLowerCase()[ CD ]
Line_29 $$ String token = t.getString()-->Line_30 $$ token = token.toLowerCase()[ FD ]
Line_30 $$ token = token.toLowerCase()-->Line_30 $$ token = token.toLowerCase()[ FD ]
Line_27 $$ Map<String, Map> m = gaz-->Line_32 $$ m.put(token, next)[ FD ]
Line_29 $$ String token = t.getString()-->Line_32 $$ m.put(token, next)[ FD ]
Line_30 $$ token = token.toLowerCase()-->Line_32 $$ m.put(token, next)[ FD ]
Line_27 $$ Map<String, Map> m = gaz-->Line_33 $$ m = next[ FD ]
Line_33 $$ m = next-->Line_33 $$ m = next[ FD ]
Line_20 $$ if (!entry.equals("")) -->Line_35 $$ m.put(STOP, null)[ CD ]
Line_27 $$ Map<String, Map> m = gaz-->Line_35 $$ m.put(STOP, null)[ FD ]
Line_33 $$ m = next-->Line_35 $$ m.put(STOP, null)[ FD ]
Line_18 $$ while (entry != null) -->Line_37 $$ entry = entryIn.readLine()[ CD ]
Line_19 $$ entry = entry.trim()-->Line_37 $$ entry = entryIn.readLine()[ FD ]
Line_37 $$ entry = entryIn.readLine()-->Line_37 $$ entry = entryIn.readLine()[ FD ]
Line_17 $$ String entry = entryIn.readLine()-->Line_37 $$ entry = entryIn.readLine()[ FD ]
Line_37 $$ entry = entryIn.readLine()-->Line_37 $$ entry = entryIn.readLine()[ CD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_37 $$ entry = entryIn.readLine()[ FD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_37 $$ entry = entryIn.readLine()[ FD ]
Line_12 $$ Map<String, Map> gaz = new HashMap<String, Map>()-->Line_39 $$ for (Map.Entry<String, Map> er : gaz.entrySet()) [ FD ]
Line_41 $$ if (_case_insensitive_gazetteer) -->Line_42 $$ start.addFeature(TOKEN_HAS_STRING, new NodeRegExpImpl(TOKEN_STRING, "(?i:" + er.getKey().toLowerCase() + ")"))[ CD ]
Line_41 $$ if (_case_insensitive_gazetteer) -->Line_44 $$ start.addFeature(TOKEN_HAS_STRING, new NodeStringImpl(TOKEN_STRING, er.getKey()))[ CD ]
Line_11 $$ while (tData != null) -->Line_54 $$ entryIn.close()[ CD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_54 $$ entryIn.close()[ FD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_54 $$ entryIn.close()[ FD ]
Line_11 $$ while (tData != null) -->Line_55 $$ System.err.println(rules.size())[ CD ]
Line_11 $$ while (tData != null) -->Line_56 $$ tData = typesIn.readLine()[ CD ]
Line_56 $$ tData = typesIn.readLine()-->Line_56 $$ tData = typesIn.readLine()[ FD ]
Line_10 $$ String tData = typesIn.readLine()-->Line_56 $$ tData = typesIn.readLine()[ FD ]
Line_56 $$ tData = typesIn.readLine()-->Line_56 $$ tData = typesIn.readLine()[ CD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_56 $$ tData = typesIn.readLine()[ FD ]
Line_9 $$ typesIn = new BufferedReader(new InputStreamReader(_url.openStream()))-->Line_56 $$ tData = typesIn.readLine()[ FD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_62 $$ if (typesIn != null)[ FD ]
Line_9 $$ typesIn = new BufferedReader(new InputStreamReader(_url.openStream()))-->Line_62 $$ if (typesIn != null)[ FD ]
Line_62 $$ if (typesIn != null)-->Line_62 $$ typesIn.close()[ CD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_62 $$ typesIn.close()[ FD ]
Line_9 $$ typesIn = new BufferedReader(new InputStreamReader(_url.openStream()))-->Line_62 $$ typesIn.close()[ FD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_66 $$ if (entryIn != null)[ FD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_66 $$ if (entryIn != null)[ FD ]
Line_66 $$ if (entryIn != null)-->Line_66 $$ entryIn.close()[ CD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_66 $$ entryIn.close()[ FD ]
Line_7 $$ BufferedReader typesIn = null, entryIn = null-->Line_66 $$ entryIn.close()[ FD ]
Line_56 $$ tData = typesIn.readLine()-->Line_11 $$ while (tData != null) [ FD ]
Line_56 $$ tData = typesIn.readLine()-->Line_11 $$ while (tData != null) [ FD ]
Line_56 $$ tData = typesIn.readLine()-->Line_13 $$ String[] data = tData.split(":")[ FD ]
Line_14 $$ URL listURL = new URL(_url, data[0])-->Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))[ FD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_17 $$ String entry = entryIn.readLine()[ FD ]
Line_12 $$ Map<String, Map> gaz = new HashMap<String, Map>()-->Line_39 $$ for (Map.Entry<String, Map> er : gaz.entrySet()) [ FD ]
Line_16 $$ entryIn = new BufferedReader(new InputStreamReader(listURL.openStream()))-->Line_54 $$ entryIn.close()[ FD ]
Line_19 $$ entry = entry.trim()-->Line_18 $$ while (entry != null) [ FD ]
Line_37 $$ entry = entryIn.readLine()-->Line_18 $$ while (entry != null) [ FD ]
Line_19 $$ entry = entry.trim()-->Line_18 $$ while (entry != null) [ FD ]
Line_37 $$ entry = entryIn.readLine()-->Line_18 $$ while (entry != null) [ FD ]
Line_19 $$ entry = entry.trim()-->Line_19 $$ entry = entry.trim()[ FD ]
Line_37 $$ entry = entryIn.readLine()-->Line_19 $$ entry = entry.trim()[ FD ]
Line_19 $$ entry = entry.trim()-->Line_20 $$ if (!entry.equals("")) [ FD ]
Line_37 $$ entry = entryIn.readLine()-->Line_20 $$ if (!entry.equals("")) [ FD ]
Line_19 $$ entry = entry.trim()-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ FD ]
Line_37 $$ entry = entryIn.readLine()-->Line_23 $$ tokens = tokeniser.tokenise(entry)[ FD ]
Line_28 $$ for (Token t : tokens) -->Line_29 $$ String token = t.getString()[ FD ]
Line_29 $$ String token = t.getString()-->Line_30 $$ token = token.toLowerCase()[ FD ]
Line_30 $$ token = token.toLowerCase()-->Line_30 $$ token = token.toLowerCase()[ FD ]
Line_27 $$ Map<String, Map> m = gaz-->Line_32 $$ m.put(token, next)[ FD ]
Line_33 $$ m = next-->Line_32 $$ m.put(token, next)[ FD ]
Line_29 $$ String token = t.getString()-->Line_32 $$ m.put(token, next)[ FD ]
Line_30 $$ token = token.toLowerCase()-->Line_32 $$ m.put(token, next)[ FD ]
Line_27 $$ Map<String, Map> m = gaz-->Line_35 $$ m.put(STOP, null)[ FD ]
Line_33 $$ m = next-->Line_35 $$ m.put(STOP, null)[ FD ]
