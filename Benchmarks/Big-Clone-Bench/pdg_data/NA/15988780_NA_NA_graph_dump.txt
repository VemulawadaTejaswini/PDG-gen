Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException [ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_3 $$ parseHTTPHeaders()[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_4 $$ OutputStream cgiOut = null[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_5 $$ File tempFile = null[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_7 $$ if (script == null)[ FD ]
Line_7 $$ if (script == null)-->Line_7 $$ sendError(500, "Internal Error", "Couldn't load script.")[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_8 $$ if (script instanceof TinyCGIHighVolume) [ FD ]
Line_8 $$ if (script instanceof TinyCGIHighVolume) -->Line_9 $$ tempFile = File.createTempFile("cgi", null)[ CD ]
Line_5 $$ File tempFile = null-->Line_9 $$ tempFile = File.createTempFile("cgi", null)[ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_9 $$ tempFile = File.createTempFile("cgi", null)[ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_9 $$ tempFile = File.createTempFile("cgi", null)[ CD ]
Line_8 $$ if (script instanceof TinyCGIHighVolume) -->Line_10 $$ cgiOut = new FileOutputStream(tempFile)[ CD ]
Line_4 $$ OutputStream cgiOut = null-->Line_10 $$ cgiOut = new FileOutputStream(tempFile)[ FD ]
Line_10 $$ cgiOut = new FileOutputStream(tempFile)-->Line_10 $$ cgiOut = new FileOutputStream(tempFile)[ FD ]
Line_8 $$ if (script instanceof TinyCGIHighVolume) -->Line_12 $$ cgiOut = new ByteArrayOutputStream()[ CD ]
Line_4 $$ OutputStream cgiOut = null-->Line_12 $$ cgiOut = new ByteArrayOutputStream()[ FD ]
Line_10 $$ cgiOut = new FileOutputStream(tempFile)-->Line_12 $$ cgiOut = new ByteArrayOutputStream()[ FD ]
Line_12 $$ cgiOut = new ByteArrayOutputStream()-->Line_12 $$ cgiOut = new ByteArrayOutputStream()[ FD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_14 $$ script.service(inputStream, cgiOut, env)[ FD ]
Line_4 $$ OutputStream cgiOut = null-->Line_14 $$ script.service(inputStream, cgiOut, env)[ FD ]
Line_10 $$ cgiOut = new FileOutputStream(tempFile)-->Line_14 $$ script.service(inputStream, cgiOut, env)[ FD ]
Line_12 $$ cgiOut = new ByteArrayOutputStream()-->Line_14 $$ script.service(inputStream, cgiOut, env)[ FD ]
Line_5 $$ File tempFile = null-->Line_17 $$ if (tempFile != null)[ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_17 $$ if (tempFile != null)[ FD ]
Line_17 $$ if (tempFile != null)-->Line_17 $$ tempFile.delete()[ CD ]
Line_5 $$ File tempFile = null-->Line_17 $$ tempFile.delete()[ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_17 $$ tempFile.delete()[ FD ]
Line_18 $$ if (clientSocket == null) -->Line_19 $$ return[ CD ]
Line_18 $$ if (clientSocket == null) -->Line_20 $$ if (cgie instanceof TinyCGIException) [ CD ]
Line_20 $$ if (cgie instanceof TinyCGIException) -->Line_21 $$ TinyCGIException tce = (TinyCGIException) cgie[ CD ]
Line_20 $$ if (cgie instanceof TinyCGIException) -->Line_22 $$ sendError(tce.getStatus(), tce.getTitle(), tce.getText(), tce.getOtherHeaders())[ CD ]
Line_21 $$ TinyCGIException tce = (TinyCGIException) cgie-->Line_22 $$ sendError(tce.getStatus(), tce.getTitle(), tce.getText(), tce.getOtherHeaders())[ FD ]
Line_21 $$ TinyCGIException tce = (TinyCGIException) cgie-->Line_22 $$ sendError(tce.getStatus(), tce.getTitle(), tce.getText(), tce.getOtherHeaders())[ FD ]
Line_21 $$ TinyCGIException tce = (TinyCGIException) cgie-->Line_22 $$ sendError(tce.getStatus(), tce.getTitle(), tce.getText(), tce.getOtherHeaders())[ FD ]
Line_21 $$ TinyCGIException tce = (TinyCGIException) cgie-->Line_22 $$ sendError(tce.getStatus(), tce.getTitle(), tce.getText(), tce.getOtherHeaders())[ FD ]
Line_20 $$ if (cgie instanceof TinyCGIException) -->Line_24 $$ StringWriter w = new StringWriter()[ CD ]
Line_20 $$ if (cgie instanceof TinyCGIException) -->Line_25 $$ cgie.printStackTrace(new PrintWriter(w))[ CD ]
Line_20 $$ if (cgie instanceof TinyCGIException) -->Line_26 $$ sendError(500, "CGI Error", "Error running script: " + "<PRE>" + w.toString() + "</PRE>")[ CD ]
Line_24 $$ StringWriter w = new StringWriter()-->Line_26 $$ sendError(500, "CGI Error", "Error running script: " + "<PRE>" + w.toString() + "</PRE>")[ FD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_29 $$ if (script != null)[ FD ]
Line_29 $$ if (script != null)-->Line_29 $$ doneWithScript(script)[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_29 $$ doneWithScript(script)[ FD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_31 $$ InputStream cgiResults = null[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_32 $$ long totalSize = 0[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_33 $$ if (tempFile == null) [ CD ]
Line_5 $$ File tempFile = null-->Line_33 $$ if (tempFile == null) [ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_33 $$ if (tempFile == null) [ FD ]
Line_33 $$ if (tempFile == null) -->Line_34 $$ byte[] results = ((ByteArrayOutputStream) cgiOut).toByteArray()[ CD ]
Line_34 $$ byte[] results = ((ByteArrayOutputStream) cgiOut).toByteArray()-->Line_34 $$ byte[] results = ((ByteArrayOutputStream) cgiOut).toByteArray()[ CD ]
Line_33 $$ if (tempFile == null) -->Line_35 $$ totalSize = results.length[ CD ]
Line_32 $$ long totalSize = 0-->Line_35 $$ totalSize = results.length[ FD ]
Line_35 $$ totalSize = results.length-->Line_35 $$ totalSize = results.length[ FD ]
Line_33 $$ if (tempFile == null) -->Line_36 $$ cgiResults = new ByteArrayInputStream(results)[ CD ]
Line_31 $$ InputStream cgiResults = null-->Line_36 $$ cgiResults = new ByteArrayInputStream(results)[ FD ]
Line_36 $$ cgiResults = new ByteArrayInputStream(results)-->Line_36 $$ cgiResults = new ByteArrayInputStream(results)[ FD ]
Line_33 $$ if (tempFile == null) -->Line_38 $$ cgiOut.close()[ CD ]
Line_4 $$ OutputStream cgiOut = null-->Line_38 $$ cgiOut.close()[ FD ]
Line_10 $$ cgiOut = new FileOutputStream(tempFile)-->Line_38 $$ cgiOut.close()[ FD ]
Line_12 $$ cgiOut = new ByteArrayOutputStream()-->Line_38 $$ cgiOut.close()[ FD ]
Line_33 $$ if (tempFile == null) -->Line_39 $$ totalSize = tempFile.length()[ CD ]
Line_32 $$ long totalSize = 0-->Line_39 $$ totalSize = tempFile.length()[ FD ]
Line_35 $$ totalSize = results.length-->Line_39 $$ totalSize = tempFile.length()[ FD ]
Line_39 $$ totalSize = tempFile.length()-->Line_39 $$ totalSize = tempFile.length()[ FD ]
Line_39 $$ totalSize = tempFile.length()-->Line_39 $$ totalSize = tempFile.length()[ CD ]
Line_5 $$ File tempFile = null-->Line_39 $$ totalSize = tempFile.length()[ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_39 $$ totalSize = tempFile.length()[ FD ]
Line_33 $$ if (tempFile == null) -->Line_40 $$ cgiResults = new FileInputStream(tempFile)[ CD ]
Line_31 $$ InputStream cgiResults = null-->Line_40 $$ cgiResults = new FileInputStream(tempFile)[ FD ]
Line_36 $$ cgiResults = new ByteArrayInputStream(results)-->Line_40 $$ cgiResults = new FileInputStream(tempFile)[ FD ]
Line_40 $$ cgiResults = new FileInputStream(tempFile)-->Line_40 $$ cgiResults = new FileInputStream(tempFile)[ FD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_42 $$ String contentType = null, statusString = "OK", line, header[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_43 $$ StringBuffer otherHeaders = new StringBuffer()[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_44 $$ StringBuffer text = new StringBuffer()[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_45 $$ int status = 200[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_46 $$ int headerLength = 0[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_47 $$ while (true) [ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException [ CD ]
Line_47 $$ while (true) -->Line_48 $$ line = readLine(cgiResults, true)[ CD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_48 $$ line = readLine(cgiResults, true)[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_48 $$ line = readLine(cgiResults, true)[ FD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_48 $$ line = readLine(cgiResults, true)[ CD ]
Line_31 $$ InputStream cgiResults = null-->Line_48 $$ line = readLine(cgiResults, true)[ FD ]
Line_36 $$ cgiResults = new ByteArrayInputStream(results)-->Line_48 $$ line = readLine(cgiResults, true)[ FD ]
Line_40 $$ cgiResults = new FileInputStream(tempFile)-->Line_48 $$ line = readLine(cgiResults, true)[ FD ]
Line_47 $$ while (true) -->Line_49 $$ headerLength += line.length()[ CD ]
Line_49 $$ headerLength += line.length()-->Line_49 $$ headerLength += line.length()[ FD ]
Line_46 $$ int headerLength = 0-->Line_49 $$ headerLength += line.length()[ FD ]
Line_49 $$ headerLength += line.length()-->Line_49 $$ headerLength += line.length()[ CD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_49 $$ headerLength += line.length()[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_49 $$ headerLength += line.length()[ FD ]
Line_47 $$ while (true) -->Line_50 $$ if (line.charAt(0) == '\r' || line.charAt(0) == '\n')[ CD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_50 $$ if (line.charAt(0) == '\r' || line.charAt(0) == '\n')[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_50 $$ if (line.charAt(0) == '\r' || line.charAt(0) == '\n')[ FD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_50 $$ if (line.charAt(0) == '\r' || line.charAt(0) == '\n')[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_50 $$ if (line.charAt(0) == '\r' || line.charAt(0) == '\n')[ FD ]
Line_47 $$ while (true) -->Line_51 $$ header = parseHeader(line, text)[ CD ]
Line_51 $$ header = parseHeader(line, text)-->Line_51 $$ header = parseHeader(line, text)[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_51 $$ header = parseHeader(line, text)[ FD ]
Line_51 $$ header = parseHeader(line, text)-->Line_51 $$ header = parseHeader(line, text)[ CD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_51 $$ header = parseHeader(line, text)[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_51 $$ header = parseHeader(line, text)[ FD ]
Line_44 $$ StringBuffer text = new StringBuffer()-->Line_51 $$ header = parseHeader(line, text)[ FD ]
Line_47 $$ while (true) -->Line_52 $$ if (header.toUpperCase().equals("STATUS")) [ CD ]
Line_52 $$ if (header.toUpperCase().equals("STATUS")) -->Line_52 $$ if (header.toUpperCase().equals("STATUS")) [ CD ]
Line_51 $$ header = parseHeader(line, text)-->Line_52 $$ if (header.toUpperCase().equals("STATUS")) [ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_52 $$ if (header.toUpperCase().equals("STATUS")) [ FD ]
Line_52 $$ if (header.toUpperCase().equals("STATUS")) -->Line_53 $$ statusString = text.toString()[ CD ]
Line_53 $$ statusString = text.toString()-->Line_53 $$ statusString = text.toString()[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_53 $$ statusString = text.toString()[ FD ]
Line_53 $$ statusString = text.toString()-->Line_53 $$ statusString = text.toString()[ CD ]
Line_44 $$ StringBuffer text = new StringBuffer()-->Line_53 $$ statusString = text.toString()[ FD ]
Line_52 $$ if (header.toUpperCase().equals("STATUS")) -->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ CD ]
Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))-->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ FD ]
Line_45 $$ int status = 200-->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ FD ]
Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))-->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ CD ]
Line_53 $$ statusString = text.toString()-->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ FD ]
Line_52 $$ if (header.toUpperCase().equals("STATUS")) -->Line_55 $$ statusString = statusString.substring(4)[ CD ]
Line_53 $$ statusString = text.toString()-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_55 $$ statusString = statusString.substring(4)-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_55 $$ statusString = statusString.substring(4)-->Line_55 $$ statusString = statusString.substring(4)[ CD ]
Line_53 $$ statusString = text.toString()-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_55 $$ statusString = statusString.substring(4)-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_52 $$ if (header.toUpperCase().equals("STATUS")) -->Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))[ CD ]
Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))-->Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))[ CD ]
Line_51 $$ header = parseHeader(line, text)-->Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))[ FD ]
Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))-->Line_56 $$ contentType = text.toString()[ CD ]
Line_56 $$ contentType = text.toString()-->Line_56 $$ contentType = text.toString()[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_56 $$ contentType = text.toString()[ FD ]
Line_56 $$ contentType = text.toString()-->Line_56 $$ contentType = text.toString()[ CD ]
Line_44 $$ StringBuffer text = new StringBuffer()-->Line_56 $$ contentType = text.toString()[ FD ]
Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))-->Line_57 $$ if (header.toUpperCase().equals("LOCATION"))[ CD ]
Line_57 $$ if (header.toUpperCase().equals("LOCATION"))-->Line_57 $$ if (header.toUpperCase().equals("LOCATION"))[ CD ]
Line_51 $$ header = parseHeader(line, text)-->Line_57 $$ if (header.toUpperCase().equals("LOCATION"))[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_57 $$ if (header.toUpperCase().equals("LOCATION"))[ FD ]
Line_57 $$ if (header.toUpperCase().equals("LOCATION"))-->Line_57 $$ status = 302[ CD ]
Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))-->Line_57 $$ status = 302[ FD ]
Line_57 $$ status = 302-->Line_57 $$ status = 302[ FD ]
Line_45 $$ int status = 200-->Line_57 $$ status = 302[ FD ]
Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))-->Line_58 $$ otherHeaders.append(header).append(": ").append(text.toString()).append(CRLF)[ CD ]
Line_43 $$ StringBuffer otherHeaders = new StringBuffer()-->Line_58 $$ otherHeaders.append(header).append(": ").append(text.toString()).append(CRLF)[ FD ]
Line_51 $$ header = parseHeader(line, text)-->Line_58 $$ otherHeaders.append(header).append(": ").append(text.toString()).append(CRLF)[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_58 $$ otherHeaders.append(header).append(": ").append(text.toString()).append(CRLF)[ FD ]
Line_44 $$ StringBuffer text = new StringBuffer()-->Line_58 $$ otherHeaders.append(header).append(": ").append(text.toString()).append(CRLF)[ FD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ CD ]
Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_57 $$ status = 302-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_45 $$ int status = 200-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_53 $$ statusString = text.toString()-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_55 $$ statusString = statusString.substring(4)-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_56 $$ contentType = text.toString()-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_42 $$ String contentType = null, statusString = "OK", line, header-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_43 $$ StringBuffer otherHeaders = new StringBuffer()-->Line_61 $$ sendHeaders(status, statusString, contentType, totalSize - headerLength, -1, otherHeaders.toString())[ FD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_62 $$ byte[] buf = new byte[2048][ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_63 $$ int bytesRead[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ CD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException [ CD ]
Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)-->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ FD ]
Line_63 $$ int bytesRead-->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ FD ]
Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)-->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ CD ]
Line_31 $$ InputStream cgiResults = null-->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ FD ]
Line_36 $$ cgiResults = new ByteArrayInputStream(results)-->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ FD ]
Line_40 $$ cgiResults = new FileInputStream(tempFile)-->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ FD ]
Line_62 $$ byte[] buf = new byte[2048]-->Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)[ FD ]
Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)-->Line_64 $$ outputStream.write(buf, 0, bytesRead)[ CD ]
Line_62 $$ byte[] buf = new byte[2048]-->Line_64 $$ outputStream.write(buf, 0, bytesRead)[ FD ]
Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)-->Line_64 $$ outputStream.write(buf, 0, bytesRead)[ FD ]
Line_63 $$ int bytesRead-->Line_64 $$ outputStream.write(buf, 0, bytesRead)[ FD ]
Line_2 $$ private void serveCGI(TinyCGI script) throws IOException, TinyWebThreadException -->Line_65 $$ outputStream.flush()[ CD ]
Line_31 $$ InputStream cgiResults = null-->Line_67 $$ cgiResults.close()[ FD ]
Line_36 $$ cgiResults = new ByteArrayInputStream(results)-->Line_67 $$ cgiResults.close()[ FD ]
Line_40 $$ cgiResults = new FileInputStream(tempFile)-->Line_67 $$ cgiResults.close()[ FD ]
Line_5 $$ File tempFile = null-->Line_68 $$ if (tempFile != null)[ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_68 $$ if (tempFile != null)[ FD ]
Line_68 $$ if (tempFile != null)-->Line_68 $$ tempFile.delete()[ CD ]
Line_5 $$ File tempFile = null-->Line_68 $$ tempFile.delete()[ FD ]
Line_9 $$ tempFile = File.createTempFile("cgi", null)-->Line_68 $$ tempFile.delete()[ FD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_49 $$ headerLength += line.length()[ FD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_50 $$ if (line.charAt(0) == '\r' || line.charAt(0) == '\n')[ FD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_50 $$ if (line.charAt(0) == '\r' || line.charAt(0) == '\n')[ FD ]
Line_48 $$ line = readLine(cgiResults, true)-->Line_51 $$ header = parseHeader(line, text)[ FD ]
Line_51 $$ header = parseHeader(line, text)-->Line_52 $$ if (header.toUpperCase().equals("STATUS")) [ FD ]
Line_53 $$ statusString = text.toString()-->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ FD ]
Line_55 $$ statusString = statusString.substring(4)-->Line_54 $$ status = Integer.parseInt(statusString.substring(0, 3))[ FD ]
Line_53 $$ statusString = text.toString()-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_55 $$ statusString = statusString.substring(4)-->Line_55 $$ statusString = statusString.substring(4)[ FD ]
Line_51 $$ header = parseHeader(line, text)-->Line_56 $$ if (header.toUpperCase().equals("CONTENT-TYPE"))[ FD ]
Line_51 $$ header = parseHeader(line, text)-->Line_57 $$ if (header.toUpperCase().equals("LOCATION"))[ FD ]
Line_51 $$ header = parseHeader(line, text)-->Line_58 $$ otherHeaders.append(header).append(": ").append(text.toString()).append(CRLF)[ FD ]
Line_64 $$ while ((bytesRead = cgiResults.read(buf)) != -1) outputStream.write(buf, 0, bytesRead)-->Line_64 $$ outputStream.write(buf, 0, bytesRead)[ FD ]
