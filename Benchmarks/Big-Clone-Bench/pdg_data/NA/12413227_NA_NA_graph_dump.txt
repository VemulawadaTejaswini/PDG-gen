Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testClickToCallOutDirection() throws Exception [ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_3 $$ init()[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_4 $$ SipCall[] receiverCalls = new SipCall[receiversCount][ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_5 $$ receiverCalls[0] = sipPhoneReceivers[0].createSipCall()[ CD ]
Line_5 $$ receiverCalls[0] = sipPhoneReceivers[0].createSipCall()-->Line_5 $$ receiverCalls[0] = sipPhoneReceivers[0].createSipCall()[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_6 $$ receiverCalls[1] = sipPhoneReceivers[1].createSipCall()[ CD ]
Line_6 $$ receiverCalls[1] = sipPhoneReceivers[1].createSipCall()-->Line_6 $$ receiverCalls[1] = sipPhoneReceivers[1].createSipCall()[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_7 $$ receiverCalls[0].listenForIncomingCall()[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_8 $$ receiverCalls[1].listenForIncomingCall()[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_9 $$ logger.info("Trying to reach url : " + CLICK2DIAL_URL + CLICK2DIAL_PARAMS)[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_10 $$ URL url = new URL(CLICK2DIAL_URL + CLICK2DIAL_PARAMS)[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_11 $$ InputStream in = url.openConnection().getInputStream()[ CD ]
Line_11 $$ InputStream in = url.openConnection().getInputStream()-->Line_11 $$ InputStream in = url.openConnection().getInputStream()[ CD ]
Line_10 $$ URL url = new URL(CLICK2DIAL_URL + CLICK2DIAL_PARAMS)-->Line_11 $$ InputStream in = url.openConnection().getInputStream()[ FD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_12 $$ byte[] buffer = new byte[10000][ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_13 $$ int len = in.read(buffer)[ CD ]
Line_13 $$ int len = in.read(buffer)-->Line_13 $$ int len = in.read(buffer)[ CD ]
Line_11 $$ InputStream in = url.openConnection().getInputStream()-->Line_13 $$ int len = in.read(buffer)[ FD ]
Line_12 $$ byte[] buffer = new byte[10000]-->Line_13 $$ int len = in.read(buffer)[ FD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_14 $$ String httpResponse = ""[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_2 $$ public void testClickToCallOutDirection() throws Exception [ CD ]
Line_13 $$ int len = in.read(buffer)-->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ FD ]
Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q]-->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ CD ]
Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q]-->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ CD ]
Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q]-->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ FD ]
Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q]-->Line_15 $$ httpResponse += (char) buffer[q][ CD ]
Line_15 $$ httpResponse += (char) buffer[q]-->Line_15 $$ httpResponse += (char) buffer[q][ FD ]
Line_14 $$ String httpResponse = ""-->Line_15 $$ httpResponse += (char) buffer[q][ FD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_16 $$ logger.info("Received the follwing HTTP response: " + httpResponse)[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_17 $$ receiverCalls[0].waitForIncomingCall(timeout)[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_18 $$ assertTrue(receiverCalls[0].sendIncomingCallResponse(Response.RINGING, "Ringing", 0))[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_19 $$ assertTrue(receiverCalls[0].sendIncomingCallResponse(Response.OK, "OK", 0))[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_20 $$ receiverCalls[1].waitForIncomingCall(timeout)[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_21 $$ assertTrue(receiverCalls[1].sendIncomingCallResponse(Response.RINGING, "Ringing", 0))[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_22 $$ assertTrue(receiverCalls[1].sendIncomingCallResponse(Response.OK, "OK", 0))[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_23 $$ assertTrue(receiverCalls[1].waitForAck(timeout))[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_24 $$ assertTrue(receiverCalls[0].waitForAck(timeout))[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_25 $$ assertTrue(receiverCalls[0].disconnect())[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_26 $$ assertTrue(receiverCalls[1].waitForDisconnect(timeout))[ CD ]
Line_2 $$ public void testClickToCallOutDirection() throws Exception -->Line_27 $$ assertTrue(receiverCalls[1].respondToDisconnect())[ CD ]
Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q]-->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ FD ]
Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q]-->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ FD ]
Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q]-->Line_15 $$ for (int q = 0; q < len; q++) httpResponse += (char) buffer[q][ FD ]
