Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException [ CD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_3 $$ ClassWriter writer = new ClassWriter()[ CD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_4 $$ writer.emptyClass(ClassWriter.ACC_PUBLIC, "TestClass", "java/lang/Object")[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_4 $$ writer.emptyClass(ClassWriter.ACC_PUBLIC, "TestClass", "java/lang/Object")[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_5 $$ MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V")[ CD ]
Line_5 $$ MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V")-->Line_5 $$ MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V")[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_5 $$ MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V")[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute()[ CD ]
Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute()-->Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute()[ CD ]
Line_5 $$ MethodInfo newMethod = writer.addMethod(ClassWriter.ACC_PUBLIC | ClassWriter.ACC_STATIC, "main", "([Ljava/lang/String;)V")-->Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute()[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_7 $$ int constantIndex = writer.getStringConstantIndex("It's alive! It's alive!!")[ CD ]
Line_7 $$ int constantIndex = writer.getStringConstantIndex("It's alive! It's alive!!")-->Line_7 $$ int constantIndex = writer.getStringConstantIndex("It's alive! It's alive!!")[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_7 $$ int constantIndex = writer.getStringConstantIndex("It's alive! It's alive!!")[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_8 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;")[ CD ]
Line_8 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;")-->Line_8 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;")[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_8 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;")[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_9 $$ int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V")[ CD ]
Line_9 $$ int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V")-->Line_9 $$ int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V")[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_9 $$ int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V")[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_10 $$ ArrayList instructions = new ArrayList()[ CD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_11 $$ byte[] operands[ CD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_12 $$ operands = new byte[2][ CD ]
Line_11 $$ byte[] operands-->Line_12 $$ operands = new byte[2][ FD ]
Line_12 $$ operands = new byte[2]-->Line_12 $$ operands = new byte[2][ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_13 $$ NetByte.intToPair(fieldRefIndex, operands, 0)[ CD ]
Line_8 $$ int fieldRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Fieldref, "java/lang/System", "out", "Ljava/io/PrintStream;")-->Line_13 $$ NetByte.intToPair(fieldRefIndex, operands, 0)[ FD ]
Line_11 $$ byte[] operands-->Line_13 $$ NetByte.intToPair(fieldRefIndex, operands, 0)[ FD ]
Line_12 $$ operands = new byte[2]-->Line_13 $$ NetByte.intToPair(fieldRefIndex, operands, 0)[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_14 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("getstatic"), 0, operands, false))[ CD ]
Line_10 $$ ArrayList instructions = new ArrayList()-->Line_14 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("getstatic"), 0, operands, false))[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_15 $$ operands = new byte[1][ CD ]
Line_11 $$ byte[] operands-->Line_15 $$ operands = new byte[1][ FD ]
Line_12 $$ operands = new byte[2]-->Line_15 $$ operands = new byte[1][ FD ]
Line_15 $$ operands = new byte[1]-->Line_15 $$ operands = new byte[1][ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_16 $$ operands[0] = (byte) constantIndex[ CD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_17 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("ldc"), 0, operands, false))[ CD ]
Line_10 $$ ArrayList instructions = new ArrayList()-->Line_17 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("ldc"), 0, operands, false))[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_18 $$ operands = new byte[2][ CD ]
Line_11 $$ byte[] operands-->Line_18 $$ operands = new byte[2][ FD ]
Line_12 $$ operands = new byte[2]-->Line_18 $$ operands = new byte[2][ FD ]
Line_15 $$ operands = new byte[1]-->Line_18 $$ operands = new byte[2][ FD ]
Line_18 $$ operands = new byte[2]-->Line_18 $$ operands = new byte[2][ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0)[ CD ]
Line_9 $$ int methodRefIndex = writer.getReferenceIndex(ClassWriter.CONSTANT_Methodref, "java/io/PrintStream", "println", "(Ljava/lang/String;)V")-->Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0)[ FD ]
Line_11 $$ byte[] operands-->Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0)[ FD ]
Line_12 $$ operands = new byte[2]-->Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0)[ FD ]
Line_15 $$ operands = new byte[1]-->Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0)[ FD ]
Line_18 $$ operands = new byte[2]-->Line_19 $$ NetByte.intToPair(methodRefIndex, operands, 0)[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_20 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false))[ CD ]
Line_10 $$ ArrayList instructions = new ArrayList()-->Line_20 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("invokevirtual"), 0, operands, false))[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_21 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("return"), 0, null, false))[ CD ]
Line_10 $$ ArrayList instructions = new ArrayList()-->Line_21 $$ instructions.add(new Instruction(OpCode.getOpCodeByMnemonic("return"), 0, null, false))[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_22 $$ attribute.insertInstructions(0, 0, instructions)[ CD ]
Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute()-->Line_22 $$ attribute.insertInstructions(0, 0, instructions)[ FD ]
Line_10 $$ ArrayList instructions = new ArrayList()-->Line_22 $$ attribute.insertInstructions(0, 0, instructions)[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_23 $$ attribute.setMaxLocals(1)[ CD ]
Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute()-->Line_23 $$ attribute.setMaxLocals(1)[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_24 $$ attribute.codeCheck()[ CD ]
Line_6 $$ CodeAttribute attribute = newMethod.getCodeAttribute()-->Line_24 $$ attribute.codeCheck()[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_25 $$ System.out.println("constantIndex=" + constantIndex + " fieldRef=" + fieldRefIndex + " methodRef=" + methodRefIndex)[ CD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_26 $$ writer.writeClass(new FileOutputStream("c:/cygnus/home/javaodb/classes/TestClass.class"))[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_26 $$ writer.writeClass(new FileOutputStream("c:/cygnus/home/javaodb/classes/TestClass.class"))[ FD ]
Line_2 $$ public static void testclass(String[] args) throws IOException, CodeCheckException -->Line_27 $$ writer.readClass(new FileInputStream("c:/cygnus/home/javaodb/classes/TestClass.class"))[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_27 $$ writer.readClass(new FileInputStream("c:/cygnus/home/javaodb/classes/TestClass.class"))[ FD ]
