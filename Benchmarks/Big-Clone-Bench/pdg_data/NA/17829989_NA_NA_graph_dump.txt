Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ File dir = new File(loggingDir)[ CD ]
Line_2 $$ public void run() -->Line_4 $$ if (!dir.isDirectory()) [ CD ]
Line_4 $$ if (!dir.isDirectory()) -->Line_4 $$ if (!dir.isDirectory()) [ CD ]
Line_4 $$ if (!dir.isDirectory()) -->Line_4 $$ if (!dir.isDirectory()) [ CD ]
Line_3 $$ File dir = new File(loggingDir)-->Line_4 $$ if (!dir.isDirectory()) [ FD ]
Line_4 $$ if (!dir.isDirectory()) -->Line_5 $$ logger.error("Logging directory \"" + dir.getAbsolutePath() + "\" does not exist.")[ CD ]
Line_3 $$ File dir = new File(loggingDir)-->Line_5 $$ logger.error("Logging directory \"" + dir.getAbsolutePath() + "\" does not exist.")[ FD ]
Line_4 $$ if (!dir.isDirectory()) -->Line_6 $$ return[ CD ]
Line_2 $$ public void run() -->Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")[ CD ]
Line_2 $$ public void run() -->Line_9 $$ FileWriter writer[ CD ]
Line_9 $$ FileWriter writer-->Line_11 $$ writer = new FileWriter(file)[ FD ]
Line_11 $$ writer = new FileWriter(file)-->Line_11 $$ writer = new FileWriter(file)[ FD ]
Line_2 $$ public void run() -->Line_16 $$ int counter = 0[ CD ]
Line_2 $$ public void run() -->Line_17 $$ while (!isInterrupted() && counter < numProbes) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_17 $$ while (!isInterrupted() && counter < numProbes) -->Line_17 $$ while (!isInterrupted() && counter < numProbes) [ CD ]
Line_9 $$ FileWriter writer-->Line_19 $$ writer.write(System.currentTimeMillis() + "," + currentPending + "," + currentThreads + "," + droppedTasks + "," + executionExceptions + "," + currentWeight + "," + averageWaitTime + "," + averageExecutionTime + "#")[ FD ]
Line_11 $$ writer = new FileWriter(file)-->Line_19 $$ writer.write(System.currentTimeMillis() + "," + currentPending + "," + currentThreads + "," + droppedTasks + "," + executionExceptions + "," + currentWeight + "," + averageWaitTime + "," + averageExecutionTime + "#")[ FD ]
Line_9 $$ FileWriter writer-->Line_20 $$ writer.flush()[ FD ]
Line_11 $$ writer = new FileWriter(file)-->Line_20 $$ writer.flush()[ FD ]
Line_17 $$ while (!isInterrupted() && counter < numProbes) -->Line_25 $$ counter++[ CD ]
Line_16 $$ int counter = 0-->Line_25 $$ counter++[ FD ]
Line_9 $$ FileWriter writer-->Line_34 $$ writer.close()[ FD ]
Line_11 $$ writer = new FileWriter(file)-->Line_34 $$ writer.close()[ FD ]
Line_2 $$ public void run() -->Line_39 $$ FileReader reader[ CD ]
Line_39 $$ FileReader reader-->Line_41 $$ reader = new FileReader(file)[ FD ]
Line_41 $$ reader = new FileReader(file)-->Line_41 $$ reader = new FileReader(file)[ FD ]
Line_2 $$ public void run() -->Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()[ CD ]
Line_2 $$ public void run() -->Line_47 $$ int c[ CD ]
Line_47 $$ int c-->Line_49 $$ c = reader.read()[ FD ]
Line_49 $$ c = reader.read()-->Line_49 $$ c = reader.read()[ FD ]
Line_49 $$ c = reader.read()-->Line_49 $$ c = reader.read()[ CD ]
Line_39 $$ FileReader reader-->Line_49 $$ c = reader.read()[ FD ]
Line_41 $$ reader = new FileReader(file)-->Line_49 $$ c = reader.read()[ FD ]
Line_47 $$ int c-->Line_52 $$ c = -1[ FD ]
Line_49 $$ c = reader.read()-->Line_52 $$ c = -1[ FD ]
Line_52 $$ c = -1-->Line_52 $$ c = -1[ FD ]
Line_52 $$ c = -1-->Line_52 $$ c = -1[ CD ]
Line_2 $$ public void run() -->Line_54 $$ String entry = ""[ CD ]
Line_2 $$ public void run() -->Line_55 $$ Date startTime = null[ CD ]
Line_2 $$ public void run() -->Line_56 $$ Date stopTime = null[ CD ]
Line_2 $$ public void run() -->Line_57 $$ while (c != -1) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_47 $$ int c-->Line_57 $$ while (c != -1) [ FD ]
Line_49 $$ c = reader.read()-->Line_57 $$ while (c != -1) [ FD ]
Line_52 $$ c = -1-->Line_57 $$ while (c != -1) [ FD ]
Line_57 $$ while (c != -1) -->Line_58 $$ if (c == 35) [ CD ]
Line_47 $$ int c-->Line_58 $$ if (c == 35) [ FD ]
Line_49 $$ c = reader.read()-->Line_58 $$ if (c == 35) [ FD ]
Line_52 $$ c = -1-->Line_58 $$ if (c == 35) [ FD ]
Line_58 $$ if (c == 35) -->Line_59 $$ String parts[] = entry.split(",")[ CD ]
Line_59 $$ String parts[] = entry.split(",")-->Line_59 $$ String parts[] = entry.split(",")[ CD ]
Line_54 $$ String entry = ""-->Line_59 $$ String parts[] = entry.split(",")[ FD ]
Line_58 $$ if (c == 35) -->Line_60 $$ if (startTime == null)[ CD ]
Line_55 $$ Date startTime = null-->Line_60 $$ if (startTime == null)[ FD ]
Line_60 $$ if (startTime == null)-->Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))[ CD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))[ FD ]
Line_55 $$ Date startTime = null-->Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))[ FD ]
Line_58 $$ if (c == 35) -->Line_61 $$ if (parts.length > 0)[ CD ]
Line_61 $$ if (parts.length > 0)-->Line_61 $$ dataV.add(parse(parts))[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_61 $$ dataV.add(parse(parts))[ FD ]
Line_58 $$ if (c == 35) -->Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))[ CD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))[ FD ]
Line_56 $$ Date stopTime = null-->Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))[ FD ]
Line_58 $$ if (c == 35) -->Line_63 $$ entry = ""[ CD ]
Line_63 $$ entry = ""-->Line_63 $$ entry = ""[ FD ]
Line_54 $$ String entry = ""-->Line_63 $$ entry = ""[ FD ]
Line_58 $$ if (c == 35) -->Line_65 $$ entry += (char) c[ CD ]
Line_63 $$ entry = ""-->Line_65 $$ entry += (char) c[ FD ]
Line_65 $$ entry += (char) c-->Line_65 $$ entry += (char) c[ FD ]
Line_54 $$ String entry = ""-->Line_65 $$ entry += (char) c[ FD ]
Line_68 $$ c = reader.read()-->Line_68 $$ c = reader.read()[ FD ]
Line_47 $$ int c-->Line_68 $$ c = reader.read()[ FD ]
Line_49 $$ c = reader.read()-->Line_68 $$ c = reader.read()[ FD ]
Line_52 $$ c = -1-->Line_68 $$ c = reader.read()[ FD ]
Line_68 $$ c = reader.read()-->Line_68 $$ c = reader.read()[ CD ]
Line_39 $$ FileReader reader-->Line_68 $$ c = reader.read()[ FD ]
Line_41 $$ reader = new FileReader(file)-->Line_68 $$ c = reader.read()[ FD ]
Line_39 $$ FileReader reader-->Line_74 $$ reader.close()[ FD ]
Line_41 $$ reader = new FileReader(file)-->Line_74 $$ reader.close()[ FD ]
Line_2 $$ public void run() -->Line_78 $$ if (dataV.size() > 0) [ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_78 $$ if (dataV.size() > 0) [ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_79 $$ int[] dataPending = new int[dataV.size()][ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_79 $$ int[] dataPending = new int[dataV.size()][ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_80 $$ int[] dataOccupied = new int[dataV.size()][ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_80 $$ int[] dataOccupied = new int[dataV.size()][ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_81 $$ long[] dataDropped = new long[dataV.size()][ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_81 $$ long[] dataDropped = new long[dataV.size()][ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_82 $$ long[] dataException = new long[dataV.size()][ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_82 $$ long[] dataException = new long[dataV.size()][ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_83 $$ int[] dataWeight = new int[dataV.size()][ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_83 $$ int[] dataWeight = new int[dataV.size()][ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_84 $$ long[] dataExecution = new long[dataV.size()][ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_84 $$ long[] dataExecution = new long[dataV.size()][ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_85 $$ long[] dataWait = new long[dataV.size()][ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_85 $$ long[] dataWait = new long[dataV.size()][ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ CD ]
Line_78 $$ if (dataV.size() > 0) -->Line_78 $$ if (dataV.size() > 0) [ CD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ CD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ CD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_87 $$ dataPending[i] = dataV.get(i).pending[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_87 $$ dataPending[i] = dataV.get(i).pending[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_87 $$ dataPending[i] = dataV.get(i).pending[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_88 $$ dataOccupied[i] = dataV.get(i).occupied[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_88 $$ dataOccupied[i] = dataV.get(i).occupied[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_88 $$ dataOccupied[i] = dataV.get(i).occupied[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_89 $$ dataDropped[i] = dataV.get(i).dropped[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_89 $$ dataDropped[i] = dataV.get(i).dropped[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_89 $$ dataDropped[i] = dataV.get(i).dropped[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_90 $$ dataException[i] = dataV.get(i).exceptions[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_90 $$ dataException[i] = dataV.get(i).exceptions[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_90 $$ dataException[i] = dataV.get(i).exceptions[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_91 $$ dataWeight[i] = dataV.get(i).currentWeight[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_91 $$ dataWeight[i] = dataV.get(i).currentWeight[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_91 $$ dataWeight[i] = dataV.get(i).currentWeight[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_92 $$ dataExecution[i] = (long) dataV.get(i).executionTime[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_92 $$ dataExecution[i] = (long) dataV.get(i).executionTime[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_92 $$ dataExecution[i] = (long) dataV.get(i).executionTime[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_93 $$ dataWait[i] = (long) dataV.get(i).waitTime[ CD ]
Line_46 $$ Vector<StatStorage> dataV = new Vector<StatStorage>()-->Line_93 $$ dataWait[i] = (long) dataV.get(i).waitTime[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_93 $$ dataWait[i] = (long) dataV.get(i).waitTime[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_95 $$ String startName = startTime.toString()[ CD ]
Line_95 $$ String startName = startTime.toString()-->Line_95 $$ String startName = startTime.toString()[ CD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_95 $$ String startName = startTime.toString()[ FD ]
Line_55 $$ Date startTime = null-->Line_95 $$ String startName = startTime.toString()[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_96 $$ startName = startName.replaceAll("[ ,:]", "")[ CD ]
Line_95 $$ String startName = startTime.toString()-->Line_96 $$ startName = startName.replaceAll("[ ,:]", "")[ FD ]
Line_96 $$ startName = startName.replaceAll("[ ,:]", "")-->Line_96 $$ startName = startName.replaceAll("[ ,:]", "")[ FD ]
Line_96 $$ startName = startName.replaceAll("[ ,:]", "")-->Line_96 $$ startName = startName.replaceAll("[ ,:]", "")[ CD ]
Line_95 $$ String startName = startTime.toString()-->Line_96 $$ startName = startName.replaceAll("[ ,:]", "")[ FD ]
Line_96 $$ startName = startName.replaceAll("[ ,:]", "")-->Line_96 $$ startName = startName.replaceAll("[ ,:]", "")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_97 $$ file = new File(dir, startName + "pending.gif")[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_97 $$ file = new File(dir, startName + "pending.gif")[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_97 $$ file = new File(dir, startName + "pending.gif")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_79 $$ int[] dataPending = new int[dataV.size()]-->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_55 $$ Date startTime = null-->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_56 $$ Date stopTime = null-->Line_98 $$ SimpleChart.drawChart(file, 640, 480, dataPending, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_99 $$ file = new File(dir, startName + "occupied.gif")[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_99 $$ file = new File(dir, startName + "occupied.gif")[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_99 $$ file = new File(dir, startName + "occupied.gif")[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_99 $$ file = new File(dir, startName + "occupied.gif")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_80 $$ int[] dataOccupied = new int[dataV.size()]-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_55 $$ Date startTime = null-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_56 $$ Date stopTime = null-->Line_100 $$ SimpleChart.drawChart(file, 640, 480, dataOccupied, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_101 $$ file = new File(dir, startName + "dropped.gif")[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_101 $$ file = new File(dir, startName + "dropped.gif")[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_101 $$ file = new File(dir, startName + "dropped.gif")[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_101 $$ file = new File(dir, startName + "dropped.gif")[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_101 $$ file = new File(dir, startName + "dropped.gif")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_81 $$ long[] dataDropped = new long[dataV.size()]-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_55 $$ Date startTime = null-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_56 $$ Date stopTime = null-->Line_102 $$ SimpleChart.drawChart(file, 640, 480, dataDropped, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_103 $$ file = new File(dir, startName + "exceptions.gif")[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_103 $$ file = new File(dir, startName + "exceptions.gif")[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_103 $$ file = new File(dir, startName + "exceptions.gif")[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_103 $$ file = new File(dir, startName + "exceptions.gif")[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_103 $$ file = new File(dir, startName + "exceptions.gif")[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_103 $$ file = new File(dir, startName + "exceptions.gif")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_82 $$ long[] dataException = new long[dataV.size()]-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_55 $$ Date startTime = null-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_56 $$ Date stopTime = null-->Line_104 $$ SimpleChart.drawChart(file, 640, 480, dataException, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_105 $$ file = new File(dir, startName + "weight.gif")[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_105 $$ file = new File(dir, startName + "weight.gif")[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_105 $$ file = new File(dir, startName + "weight.gif")[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_105 $$ file = new File(dir, startName + "weight.gif")[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_105 $$ file = new File(dir, startName + "weight.gif")[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_105 $$ file = new File(dir, startName + "weight.gif")[ FD ]
Line_105 $$ file = new File(dir, startName + "weight.gif")-->Line_105 $$ file = new File(dir, startName + "weight.gif")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_105 $$ file = new File(dir, startName + "weight.gif")-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_83 $$ int[] dataWeight = new int[dataV.size()]-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_55 $$ Date startTime = null-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_56 $$ Date stopTime = null-->Line_106 $$ SimpleChart.drawChart(file, 640, 480, dataWeight, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_107 $$ file = new File(dir, startName + "execution.gif")[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_107 $$ file = new File(dir, startName + "execution.gif")[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_107 $$ file = new File(dir, startName + "execution.gif")[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_107 $$ file = new File(dir, startName + "execution.gif")[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_107 $$ file = new File(dir, startName + "execution.gif")[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_107 $$ file = new File(dir, startName + "execution.gif")[ FD ]
Line_105 $$ file = new File(dir, startName + "weight.gif")-->Line_107 $$ file = new File(dir, startName + "execution.gif")[ FD ]
Line_107 $$ file = new File(dir, startName + "execution.gif")-->Line_107 $$ file = new File(dir, startName + "execution.gif")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_105 $$ file = new File(dir, startName + "weight.gif")-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_107 $$ file = new File(dir, startName + "execution.gif")-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_84 $$ long[] dataExecution = new long[dataV.size()]-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_55 $$ Date startTime = null-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_56 $$ Date stopTime = null-->Line_108 $$ SimpleChart.drawChart(file, 640, 480, dataExecution, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_109 $$ file = new File(dir, startName + "wait.gif")[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_105 $$ file = new File(dir, startName + "weight.gif")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_107 $$ file = new File(dir, startName + "execution.gif")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_109 $$ file = new File(dir, startName + "wait.gif")-->Line_109 $$ file = new File(dir, startName + "wait.gif")[ FD ]
Line_78 $$ if (dataV.size() > 0) -->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ CD ]
Line_8 $$ File file = new File(dir, new Date().toString().replaceAll("[ ,:]", "") + "LoadBalancerLog.txt")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_97 $$ file = new File(dir, startName + "pending.gif")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_99 $$ file = new File(dir, startName + "occupied.gif")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_101 $$ file = new File(dir, startName + "dropped.gif")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_103 $$ file = new File(dir, startName + "exceptions.gif")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_105 $$ file = new File(dir, startName + "weight.gif")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_107 $$ file = new File(dir, startName + "execution.gif")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_109 $$ file = new File(dir, startName + "wait.gif")-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_85 $$ long[] dataWait = new long[dataV.size()]-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_55 $$ Date startTime = null-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_62 $$ stopTime = new Date(Long.parseLong(parts[0]))-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_56 $$ Date stopTime = null-->Line_110 $$ SimpleChart.drawChart(file, 640, 480, dataWait, startTime, stopTime, new Color(0, 0, 0))[ FD ]
Line_2 $$ public void run() -->Line_116 $$ if (!isLocked) [ CD ]
Line_116 $$ if (!isLocked) -->Line_118 $$ debugThread.start()[ CD ]
Line_68 $$ c = reader.read()-->Line_57 $$ while (c != -1) [ FD ]
Line_68 $$ c = reader.read()-->Line_57 $$ while (c != -1) [ FD ]
Line_68 $$ c = reader.read()-->Line_58 $$ if (c == 35) [ FD ]
Line_63 $$ entry = ""-->Line_59 $$ String parts[] = entry.split(",")[ FD ]
Line_65 $$ entry += (char) c-->Line_59 $$ String parts[] = entry.split(",")[ FD ]
Line_60 $$ startTime = new Date(Long.parseLong(parts[0]))-->Line_60 $$ if (startTime == null)[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_86 $$ for (int i = 0; i < dataV.size(); i++) [ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_87 $$ dataPending[i] = dataV.get(i).pending[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_88 $$ dataOccupied[i] = dataV.get(i).occupied[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_89 $$ dataDropped[i] = dataV.get(i).dropped[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_90 $$ dataException[i] = dataV.get(i).exceptions[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_91 $$ dataWeight[i] = dataV.get(i).currentWeight[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_92 $$ dataExecution[i] = (long) dataV.get(i).executionTime[ FD ]
Line_86 $$ for (int i = 0; i < dataV.size(); i++) -->Line_93 $$ dataWait[i] = (long) dataV.get(i).waitTime[ FD ]
