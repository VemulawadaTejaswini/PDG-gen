Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) [ CD ]
Line_6 $$ String fqcn = searchClass.getName()-->Line_6 $$ String fqcn = searchClass.getName()[ CD ]
Line_7 $$ List<URL> knownLocations = new ArrayList<URL>()-->Line_8 $$ knownLocations.add(location)[ FD ]
Line_2 $$ private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) -->Line_8 $$ knownLocations.add(location)[ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ CD ]
Line_7 $$ List<URL> knownLocations = new ArrayList<URL>()-->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ CD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ CD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_10 $$ URL url = knownLocations.get(loc)[ CD ]
Line_10 $$ URL url = knownLocations.get(loc)-->Line_10 $$ URL url = knownLocations.get(loc)[ CD ]
Line_7 $$ List<URL> knownLocations = new ArrayList<URL>()-->Line_10 $$ URL url = knownLocations.get(loc)[ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_10 $$ URL url = knownLocations.get(loc)[ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_11 $$ File directory = new File(url.getFile())[ CD ]
Line_10 $$ URL url = knownLocations.get(loc)-->Line_11 $$ File directory = new File(url.getFile())[ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_12 $$ if (directory.exists()) [ CD ]
Line_11 $$ File directory = new File(url.getFile())-->Line_12 $$ if (directory.exists()) [ FD ]
Line_12 $$ if (directory.exists()) -->Line_12 $$ if (directory.exists()) [ CD ]
Line_11 $$ File directory = new File(url.getFile())-->Line_12 $$ if (directory.exists()) [ FD ]
Line_12 $$ if (directory.exists()) -->Line_13 $$ String[] files = directory.list()[ CD ]
Line_13 $$ String[] files = directory.list()-->Line_13 $$ String[] files = directory.list()[ CD ]
Line_11 $$ File directory = new File(url.getFile())-->Line_13 $$ String[] files = directory.list()[ FD ]
Line_12 $$ if (directory.exists()) -->Line_14 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_12 $$ if (directory.exists()) -->Line_12 $$ if (directory.exists()) [ CD ]
Line_14 $$ for (int i = 0; i < files.length; i++) -->Line_14 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < files.length; i++) -->Line_14 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < files.length; i++) -->Line_14 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < files.length; i++) -->Line_15 $$ if (files[i].endsWith(".class")) [ CD ]
Line_15 $$ if (files[i].endsWith(".class")) -->Line_15 $$ if (files[i].endsWith(".class")) [ CD ]
Line_15 $$ if (files[i].endsWith(".class")) -->Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)[ CD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)[ CD ]
Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)-->Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)[ CD ]
Line_2 $$ private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) -->Line_19 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) [ FD ]
Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)-->Line_19 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) [ FD ]
Line_19 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) -->Line_19 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) [ CD ]
Line_6 $$ String fqcn = searchClass.getName()-->Line_19 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) [ FD ]
Line_19 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) -->Line_20 $$ thisResult.put(c, url)[ CD ]
Line_4 $$ Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR)-->Line_20 $$ thisResult.put(c, url)[ FD ]
Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)-->Line_20 $$ thisResult.put(c, url)[ FD ]
Line_10 $$ URL url = knownLocations.get(loc)-->Line_20 $$ thisResult.put(c, url)[ FD ]
Line_10 $$ URL url = knownLocations.get(loc)-->Line_31 $$ JarURLConnection conn = (JarURLConnection) url.openConnection()[ FD ]
Line_34 $$ while (e.hasMoreElements()) -->Line_34 $$ while (e.hasMoreElements()) [ CD ]
Line_34 $$ while (e.hasMoreElements()) -->Line_35 $$ JarEntry entry = e.nextElement()[ CD ]
Line_35 $$ JarEntry entry = e.nextElement()-->Line_35 $$ JarEntry entry = e.nextElement()[ CD ]
Line_34 $$ while (e.hasMoreElements()) -->Line_36 $$ String entryname = entry.getName()[ CD ]
Line_36 $$ String entryname = entry.getName()-->Line_36 $$ String entryname = entry.getName()[ CD ]
Line_35 $$ JarEntry entry = e.nextElement()-->Line_36 $$ String entryname = entry.getName()[ FD ]
Line_34 $$ while (e.hasMoreElements()) -->Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) [ CD ]
Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) -->Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) [ CD ]
Line_35 $$ JarEntry entry = e.nextElement()-->Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) [ FD ]
Line_36 $$ String entryname = entry.getName()-->Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) [ FD ]
Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) -->Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)[ CD ]
Line_36 $$ String entryname = entry.getName()-->Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)[ FD ]
Line_36 $$ String entryname = entry.getName()-->Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)[ FD ]
Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) -->Line_39 $$ if (classname.startsWith("/"))[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_39 $$ if (classname.startsWith("/"))-->Line_39 $$ if (classname.startsWith("/"))[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_39 $$ if (classname.startsWith("/"))-->Line_39 $$ classname = classname.substring(1)[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_39 $$ classname = classname.substring(1)[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) -->Line_40 $$ classname = classname.replace('/', '.')[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_40 $$ classname = classname.replace('/', '.')[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_42 $$ Class c = Class.forName(classname)-->Line_42 $$ Class c = Class.forName(classname)[ CD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_42 $$ Class c = Class.forName(classname)[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_42 $$ Class c = Class.forName(classname)[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_42 $$ Class c = Class.forName(classname)[ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_42 $$ Class c = Class.forName(classname)[ FD ]
Line_2 $$ private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) -->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_42 $$ Class c = Class.forName(classname)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) -->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ CD ]
Line_6 $$ String fqcn = searchClass.getName()-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_16 $$ String classname = files[i].substring(0, files[i].length() - 6)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) -->Line_44 $$ thisResult.put(c, url)[ CD ]
Line_4 $$ Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR)-->Line_44 $$ thisResult.put(c, url)[ FD ]
Line_42 $$ Class c = Class.forName(classname)-->Line_44 $$ thisResult.put(c, url)[ FD ]
Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)-->Line_44 $$ thisResult.put(c, url)[ FD ]
Line_10 $$ URL url = knownLocations.get(loc)-->Line_44 $$ thisResult.put(c, url)[ FD ]
Line_4 $$ Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR)-->Line_64 $$ results.putAll(thisResult)[ FD ]
Line_65 $$ Iterator<Class<?>> it = thisResult.keySet().iterator()-->Line_65 $$ Iterator<Class<?>> it = thisResult.keySet().iterator()[ CD ]
Line_4 $$ Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR)-->Line_65 $$ Iterator<Class<?>> it = thisResult.keySet().iterator()[ FD ]
Line_66 $$ while (it.hasNext()) -->Line_66 $$ while (it.hasNext()) [ CD ]
Line_65 $$ Iterator<Class<?>> it = thisResult.keySet().iterator()-->Line_66 $$ while (it.hasNext()) [ FD ]
Line_66 $$ while (it.hasNext()) -->Line_67 $$ v.add(it.next())[ CD ]
Line_5 $$ Vector<Class<?>> v = new Vector<Class<?>>()-->Line_67 $$ v.add(it.next())[ FD ]
Line_65 $$ Iterator<Class<?>> it = thisResult.keySet().iterator()-->Line_67 $$ v.add(it.next())[ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) [ FD ]
Line_9 $$ for (int loc = 0; loc < knownLocations.size(); loc++) -->Line_10 $$ URL url = knownLocations.get(loc)[ FD ]
Line_10 $$ URL url = knownLocations.get(loc)-->Line_11 $$ File directory = new File(url.getFile())[ FD ]
Line_11 $$ File directory = new File(url.getFile())-->Line_12 $$ if (directory.exists()) [ FD ]
Line_11 $$ File directory = new File(url.getFile())-->Line_12 $$ if (directory.exists()) [ FD ]
Line_11 $$ File directory = new File(url.getFile())-->Line_13 $$ String[] files = directory.list()[ FD ]
Line_10 $$ URL url = knownLocations.get(loc)-->Line_31 $$ JarURLConnection conn = (JarURLConnection) url.openConnection()[ FD ]
Line_14 $$ for (int i = 0; i < files.length; i++) -->Line_14 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < files.length; i++) -->Line_14 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < files.length; i++) -->Line_14 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)-->Line_19 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + "." + classname)) [ FD ]
Line_18 $$ Class<?> c = Class.forName(packageName + "." + classname)-->Line_20 $$ thisResult.put(c, url)[ FD ]
Line_35 $$ JarEntry entry = e.nextElement()-->Line_36 $$ String entryname = entry.getName()[ FD ]
Line_35 $$ JarEntry entry = e.nextElement()-->Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) [ FD ]
Line_36 $$ String entryname = entry.getName()-->Line_37 $$ if (!entry.isDirectory() && entryname.endsWith(".class")) [ FD ]
Line_36 $$ String entryname = entry.getName()-->Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)[ FD ]
Line_36 $$ String entryname = entry.getName()-->Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)[ FD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_39 $$ if (classname.startsWith("/"))[ FD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_39 $$ classname = classname.substring(1)[ FD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_40 $$ classname = classname.replace('/', '.')[ FD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_42 $$ Class c = Class.forName(classname)[ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_42 $$ Class c = Class.forName(classname)[ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_42 $$ Class c = Class.forName(classname)[ FD ]
Line_42 $$ Class c = Class.forName(classname)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_38 $$ String classname = entryname.substring(0, entryname.length() - 6)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_39 $$ classname = classname.substring(1)-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_40 $$ classname = classname.replace('/', '.')-->Line_43 $$ if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) [ FD ]
Line_42 $$ Class c = Class.forName(classname)-->Line_44 $$ thisResult.put(c, url)[ FD ]
