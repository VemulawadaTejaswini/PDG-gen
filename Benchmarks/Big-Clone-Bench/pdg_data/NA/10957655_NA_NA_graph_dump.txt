Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String SHA1(String string) throws XLWrapException [ CD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_3 $$ MessageDigest md[ CD ]
Line_3 $$ MessageDigest md-->Line_5 $$ md = MessageDigest.getInstance("SHA-1")[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-1")-->Line_5 $$ md = MessageDigest.getInstance("SHA-1")[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-1")-->Line_5 $$ md = MessageDigest.getInstance("SHA-1")[ CD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_9 $$ byte[] data = new byte[40][ CD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_10 $$ md.update(string.getBytes())[ CD ]
Line_3 $$ MessageDigest md-->Line_10 $$ md.update(string.getBytes())[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-1")-->Line_10 $$ md.update(string.getBytes())[ FD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_10 $$ md.update(string.getBytes())[ FD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_11 $$ data = md.digest()[ CD ]
Line_9 $$ byte[] data = new byte[40]-->Line_11 $$ data = md.digest()[ FD ]
Line_11 $$ data = md.digest()-->Line_11 $$ data = md.digest()[ FD ]
Line_11 $$ data = md.digest()-->Line_11 $$ data = md.digest()[ CD ]
Line_3 $$ MessageDigest md-->Line_11 $$ data = md.digest()[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-1")-->Line_11 $$ data = md.digest()[ FD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_12 $$ StringBuffer buf = new StringBuffer()[ CD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_13 $$ for (int i = 0; i < data.length; i++) [ CD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_2 $$ public static String SHA1(String string) throws XLWrapException [ CD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_13 $$ for (int i = 0; i < data.length; i++) [ CD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_13 $$ for (int i = 0; i < data.length; i++) [ CD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_13 $$ for (int i = 0; i < data.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_14 $$ int halfbyte = (data[i] >>> 4) & 0x0F[ CD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_15 $$ int two_halfs = 0[ CD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_16 $$ do [ CD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_13 $$ for (int i = 0; i < data.length; i++) [ CD ]
Line_16 $$ do -->Line_17 $$ if ((0 <= halfbyte) && (halfbyte <= 9))[ CD ]
Line_17 $$ if ((0 <= halfbyte) && (halfbyte <= 9))-->Line_17 $$ buf.append((char) ('0' + halfbyte))[ CD ]
Line_12 $$ StringBuffer buf = new StringBuffer()-->Line_17 $$ buf.append((char) ('0' + halfbyte))[ FD ]
Line_17 $$ if ((0 <= halfbyte) && (halfbyte <= 9))-->Line_17 $$ buf.append((char) ('a' + (halfbyte - 10)))[ CD ]
Line_12 $$ StringBuffer buf = new StringBuffer()-->Line_17 $$ buf.append((char) ('a' + (halfbyte - 10)))[ FD ]
Line_16 $$ do -->Line_18 $$ halfbyte = data[i] & 0x0F[ CD ]
Line_18 $$ halfbyte = data[i] & 0x0F-->Line_18 $$ halfbyte = data[i] & 0x0F[ FD ]
Line_14 $$ int halfbyte = (data[i] >>> 4) & 0x0F-->Line_18 $$ halfbyte = data[i] & 0x0F[ FD ]
Line_15 $$ int two_halfs = 0-->Line_16 $$ do [ FD ]
Line_2 $$ public static String SHA1(String string) throws XLWrapException -->Line_21 $$ return buf.toString()[ CD ]
Line_21 $$ return buf.toString()-->Line_21 $$ return buf.toString()[ CD ]
Line_12 $$ StringBuffer buf = new StringBuffer()-->Line_21 $$ return buf.toString()[ FD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_13 $$ for (int i = 0; i < data.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_13 $$ for (int i = 0; i < data.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < data.length; i++) -->Line_13 $$ for (int i = 0; i < data.length; i++) [ FD ]
