Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static BufferedInputStream getHTTPConnection(String sUrl) [ CD ]
Line_2 $$ private static BufferedInputStream getHTTPConnection(String sUrl) -->Line_3 $$ URL url = null[ CD ]
Line_2 $$ private static BufferedInputStream getHTTPConnection(String sUrl) -->Line_4 $$ BufferedInputStream bis = null[ CD ]
Line_3 $$ URL url = null-->Line_6 $$ url = new URL(sUrl)[ FD ]
Line_6 $$ url = new URL(sUrl)-->Line_6 $$ url = new URL(sUrl)[ FD ]
Line_3 $$ URL url = null-->Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_6 $$ url = new URL(sUrl)-->Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ connection.setRequestMethod("GET")[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_9 $$ connection.setDoOutput(true)[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ connection.setConnectTimeout(30000)[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_11 $$ connection.setReadTimeout(60000)[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_12 $$ connection.setRequestProperty("Accept-Encoding", "gzip, deflate")[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_13 $$ connection.connect()[ FD ]
Line_14 $$ String encoding = connection.getContentEncoding()-->Line_14 $$ String encoding = connection.getContentEncoding()[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_14 $$ String encoding = connection.getContentEncoding()[ FD ]
Line_15 $$ if (!Utilities.isEmpty(encoding) && "gzip".equalsIgnoreCase(encoding)) -->Line_15 $$ if (!Utilities.isEmpty(encoding) && "gzip".equalsIgnoreCase(encoding)) [ CD ]
Line_14 $$ String encoding = connection.getContentEncoding()-->Line_15 $$ if (!Utilities.isEmpty(encoding) && "gzip".equalsIgnoreCase(encoding)) [ FD ]
Line_14 $$ String encoding = connection.getContentEncoding()-->Line_15 $$ if (!Utilities.isEmpty(encoding) && "gzip".equalsIgnoreCase(encoding)) [ FD ]
Line_15 $$ if (!Utilities.isEmpty(encoding) && "gzip".equalsIgnoreCase(encoding)) -->Line_16 $$ bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE)[ CD ]
Line_4 $$ BufferedInputStream bis = null-->Line_16 $$ bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE)[ FD ]
Line_16 $$ bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE)-->Line_16 $$ bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE)[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_16 $$ bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE)[ FD ]
Line_15 $$ if (!Utilities.isEmpty(encoding) && "gzip".equalsIgnoreCase(encoding)) -->Line_17 $$ if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) [ CD ]
Line_17 $$ if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) -->Line_17 $$ if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) [ CD ]
Line_14 $$ String encoding = connection.getContentEncoding()-->Line_17 $$ if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) [ FD ]
Line_14 $$ String encoding = connection.getContentEncoding()-->Line_17 $$ if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) [ FD ]
Line_17 $$ if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) -->Line_18 $$ bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE)[ CD ]
Line_4 $$ BufferedInputStream bis = null-->Line_18 $$ bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE)[ FD ]
Line_16 $$ bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE)-->Line_18 $$ bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE)[ FD ]
Line_18 $$ bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE)-->Line_18 $$ bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE)[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_18 $$ bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE)[ FD ]
Line_17 $$ if (!Utilities.isEmpty(encoding) && "deflate".equalsIgnoreCase(encoding)) -->Line_20 $$ bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE)[ CD ]
Line_4 $$ BufferedInputStream bis = null-->Line_20 $$ bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE)[ FD ]
Line_16 $$ bis = new BufferedInputStream(new GZIPInputStream(connection.getInputStream()), IO_BUFFER_SIZE)-->Line_20 $$ bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE)[ FD ]
Line_18 $$ bis = new BufferedInputStream(new InflaterInputStream(connection.getInputStream(), new Inflater(true)), IO_BUFFER_SIZE)-->Line_20 $$ bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE)[ FD ]
Line_20 $$ bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE)-->Line_20 $$ bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE)[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_20 $$ bis = new BufferedInputStream(connection.getInputStream(), IO_BUFFER_SIZE)[ FD ]
Line_2 $$ private static BufferedInputStream getHTTPConnection(String sUrl) -->Line_25 $$ return bis[ CD ]
