Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected byte[] mdDecode(String s, int type, byte[] salt) [ CD ]
Line_6 $$ if ((type == 5) && (salt != null)) -->Line_7 $$ md = MessageDigest.getInstance(SHA)[ CD ]
Line_4 $$ MessageDigest md-->Line_7 $$ md = MessageDigest.getInstance(SHA)[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_7 $$ md = MessageDigest.getInstance(SHA)[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_7 $$ md = MessageDigest.getInstance(SHA)[ CD ]
Line_6 $$ if ((type == 5) && (salt != null)) -->Line_8 $$ hexString.append("[ CD ]
Line_5 $$ StringBuffer hexString = new StringBuffer()-->Line_8 $$ hexString.append("[ FD ]
Line_6 $$ if ((type == 5) && (salt != null)) -->Line_9 $$ if (type == 4) [ CD ]
Line_2 $$ protected byte[] mdDecode(String s, int type, byte[] salt) -->Line_9 $$ if (type == 4) [ FD ]
Line_9 $$ if (type == 4) -->Line_10 $$ md = MessageDigest.getInstance(SHA)[ CD ]
Line_4 $$ MessageDigest md-->Line_10 $$ md = MessageDigest.getInstance(SHA)[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_10 $$ md = MessageDigest.getInstance(SHA)[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_10 $$ md = MessageDigest.getInstance(SHA)[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_10 $$ md = MessageDigest.getInstance(SHA)[ CD ]
Line_9 $$ if (type == 4) -->Line_11 $$ hexString.append("[ CD ]
Line_5 $$ StringBuffer hexString = new StringBuffer()-->Line_11 $$ hexString.append("[ FD ]
Line_9 $$ if (type == 4) -->Line_12 $$ if ((type == 3) && (salt != null)) [ CD ]
Line_12 $$ if ((type == 3) && (salt != null)) -->Line_13 $$ md = MessageDigest.getInstance(MD5)[ CD ]
Line_4 $$ MessageDigest md-->Line_13 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_13 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_13 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_13 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_13 $$ md = MessageDigest.getInstance(MD5)[ CD ]
Line_12 $$ if ((type == 3) && (salt != null)) -->Line_14 $$ hexString.append("[ CD ]
Line_5 $$ StringBuffer hexString = new StringBuffer()-->Line_14 $$ hexString.append("[ FD ]
Line_12 $$ if ((type == 3) && (salt != null)) -->Line_15 $$ if (type == 2) [ CD ]
Line_2 $$ protected byte[] mdDecode(String s, int type, byte[] salt) -->Line_15 $$ if (type == 2) [ FD ]
Line_15 $$ if (type == 2) -->Line_16 $$ md = MessageDigest.getInstance(MD5)[ CD ]
Line_4 $$ MessageDigest md-->Line_16 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_16 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_16 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_16 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_16 $$ md = MessageDigest.getInstance(MD5)-->Line_16 $$ md = MessageDigest.getInstance(MD5)[ FD ]
Line_16 $$ md = MessageDigest.getInstance(MD5)-->Line_16 $$ md = MessageDigest.getInstance(MD5)[ CD ]
Line_15 $$ if (type == 2) -->Line_17 $$ hexString.append("[ CD ]
Line_5 $$ StringBuffer hexString = new StringBuffer()-->Line_17 $$ hexString.append("[ FD ]
Line_15 $$ if (type == 2) -->Line_19 $$ return (null)[ CD ]
Line_4 $$ MessageDigest md-->Line_21 $$ md.reset()[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_21 $$ md.reset()[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_21 $$ md.reset()[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_21 $$ md.reset()[ FD ]
Line_16 $$ md = MessageDigest.getInstance(MD5)-->Line_21 $$ md.reset()[ FD ]
Line_4 $$ MessageDigest md-->Line_22 $$ md.update(s.getBytes("UTF-8"))[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_22 $$ md.update(s.getBytes("UTF-8"))[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_22 $$ md.update(s.getBytes("UTF-8"))[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_22 $$ md.update(s.getBytes("UTF-8"))[ FD ]
Line_16 $$ md = MessageDigest.getInstance(MD5)-->Line_22 $$ md.update(s.getBytes("UTF-8"))[ FD ]
Line_2 $$ protected byte[] mdDecode(String s, int type, byte[] salt) -->Line_22 $$ md.update(s.getBytes("UTF-8"))[ FD ]
Line_2 $$ protected byte[] mdDecode(String s, int type, byte[] salt) -->Line_23 $$ if (salt != null) [ FD ]
Line_23 $$ if (salt != null) -->Line_24 $$ md.update(salt)[ CD ]
Line_4 $$ MessageDigest md-->Line_24 $$ md.update(salt)[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_24 $$ md.update(salt)[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_24 $$ md.update(salt)[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_24 $$ md.update(salt)[ FD ]
Line_16 $$ md = MessageDigest.getInstance(MD5)-->Line_24 $$ md.update(salt)[ FD ]
Line_2 $$ protected byte[] mdDecode(String s, int type, byte[] salt) -->Line_24 $$ md.update(salt)[ FD ]
Line_23 $$ if (salt != null) -->Line_25 $$ byte[] buff = md.digest()[ CD ]
Line_25 $$ byte[] buff = md.digest()-->Line_25 $$ byte[] buff = md.digest()[ CD ]
Line_4 $$ MessageDigest md-->Line_25 $$ byte[] buff = md.digest()[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_25 $$ byte[] buff = md.digest()[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_25 $$ byte[] buff = md.digest()[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_25 $$ byte[] buff = md.digest()[ FD ]
Line_16 $$ md = MessageDigest.getInstance(MD5)-->Line_25 $$ byte[] buff = md.digest()[ FD ]
Line_23 $$ if (salt != null) -->Line_26 $$ byte[] new_buf = new byte[buff.length + salt.length][ CD ]
Line_23 $$ if (salt != null) -->Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x][ CD ]
Line_23 $$ if (salt != null) -->Line_23 $$ if (salt != null) [ CD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x][ CD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x][ CD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x][ FD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_27 $$ new_buf[x] = buff[x][ CD ]
Line_23 $$ if (salt != null) -->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ CD ]
Line_23 $$ if (salt != null) -->Line_23 $$ if (salt != null) [ CD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ FD ]
Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ CD ]
Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ CD ]
Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ FD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ FD ]
Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length]-->Line_28 $$ new_buf[x] = salt[x - buff.length][ CD ]
Line_23 $$ if (salt != null) -->Line_29 $$ hexString.append(CBBase64.binaryToString(new_buf))[ CD ]
Line_5 $$ StringBuffer hexString = new StringBuffer()-->Line_29 $$ hexString.append(CBBase64.binaryToString(new_buf))[ FD ]
Line_26 $$ byte[] new_buf = new byte[buff.length + salt.length]-->Line_29 $$ hexString.append(CBBase64.binaryToString(new_buf))[ FD ]
Line_23 $$ if (salt != null) -->Line_31 $$ byte[] buff = md.digest()[ CD ]
Line_4 $$ MessageDigest md-->Line_31 $$ byte[] buff = md.digest()[ FD ]
Line_7 $$ md = MessageDigest.getInstance(SHA)-->Line_31 $$ byte[] buff = md.digest()[ FD ]
Line_10 $$ md = MessageDigest.getInstance(SHA)-->Line_31 $$ byte[] buff = md.digest()[ FD ]
Line_13 $$ md = MessageDigest.getInstance(MD5)-->Line_31 $$ byte[] buff = md.digest()[ FD ]
Line_16 $$ md = MessageDigest.getInstance(MD5)-->Line_31 $$ byte[] buff = md.digest()[ FD ]
Line_23 $$ if (salt != null) -->Line_32 $$ hexString.append(CBBase64.binaryToString(buff))[ CD ]
Line_5 $$ StringBuffer hexString = new StringBuffer()-->Line_32 $$ hexString.append(CBBase64.binaryToString(buff))[ FD ]
Line_25 $$ byte[] buff = md.digest()-->Line_32 $$ hexString.append(CBBase64.binaryToString(buff))[ FD ]
Line_34 $$ return hexString.toString().getBytes("UTF-8")-->Line_34 $$ return hexString.toString().getBytes("UTF-8")[ CD ]
Line_5 $$ StringBuffer hexString = new StringBuffer()-->Line_34 $$ return hexString.toString().getBytes("UTF-8")[ FD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x][ FD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x][ FD ]
Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x]-->Line_27 $$ for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x][ FD ]
Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ FD ]
Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ FD ]
Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length]-->Line_28 $$ for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length][ FD ]
