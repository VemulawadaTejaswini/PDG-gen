Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) [ CD ]
Line_6 $$ Collection boxes = diagramModel.getBoxes()-->Line_6 $$ Collection boxes = diagramModel.getBoxes()[ CD ]
Line_2 $$ public void genDropSchema(DiagramModel diagramModel, boolean foreignKeys) -->Line_6 $$ Collection boxes = diagramModel.getBoxes()[ FD ]
Line_9 $$ if (foreignKeys) -->Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ CD ]
Line_9 $$ if (foreignKeys) -->Line_9 $$ if (foreignKeys) [ CD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ CD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ CD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ CD ]
Line_6 $$ Collection boxes = diagramModel.getBoxes()-->Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ FD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_11 $$ box = (BoxModel) x.next()[ CD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_11 $$ box = (BoxModel) x.next()[ FD ]
Line_7 $$ BoxModel box-->Line_11 $$ box = (BoxModel) x.next()[ FD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_11 $$ box = (BoxModel) x.next()[ FD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_12 $$ if (!box.isAbstractDef()) [ CD ]
Line_12 $$ if (!box.isAbstractDef()) -->Line_12 $$ if (!box.isAbstractDef()) [ CD ]
Line_12 $$ if (!box.isAbstractDef()) -->Line_12 $$ if (!box.isAbstractDef()) [ CD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_12 $$ if (!box.isAbstractDef()) [ FD ]
Line_7 $$ BoxModel box-->Line_12 $$ if (!box.isAbstractDef()) [ FD ]
Line_12 $$ if (!box.isAbstractDef()) -->Line_13 $$ dropForeignKeys(box)[ CD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_13 $$ dropForeignKeys(box)[ FD ]
Line_7 $$ BoxModel box-->Line_13 $$ dropForeignKeys(box)[ FD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ CD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ FD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ CD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ CD ]
Line_6 $$ Collection boxes = diagramModel.getBoxes()-->Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ FD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_19 $$ box = (BoxModel) x.next()[ CD ]
Line_19 $$ box = (BoxModel) x.next()-->Line_19 $$ box = (BoxModel) x.next()[ FD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_19 $$ box = (BoxModel) x.next()[ FD ]
Line_7 $$ BoxModel box-->Line_19 $$ box = (BoxModel) x.next()[ FD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_19 $$ box = (BoxModel) x.next()[ FD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_19 $$ box = (BoxModel) x.next()[ FD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_20 $$ if (!box.isAbstractDef()) [ CD ]
Line_20 $$ if (!box.isAbstractDef()) -->Line_20 $$ if (!box.isAbstractDef()) [ CD ]
Line_20 $$ if (!box.isAbstractDef()) -->Line_20 $$ if (!box.isAbstractDef()) [ CD ]
Line_19 $$ box = (BoxModel) x.next()-->Line_20 $$ if (!box.isAbstractDef()) [ FD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_20 $$ if (!box.isAbstractDef()) [ FD ]
Line_7 $$ BoxModel box-->Line_20 $$ if (!box.isAbstractDef()) [ FD ]
Line_20 $$ if (!box.isAbstractDef()) -->Line_21 $$ sqlQuery = sqlDropTable(box)[ CD ]
Line_21 $$ sqlQuery = sqlDropTable(box)-->Line_21 $$ sqlQuery = sqlDropTable(box)[ FD ]
Line_8 $$ String sqlQuery-->Line_21 $$ sqlQuery = sqlDropTable(box)[ FD ]
Line_21 $$ sqlQuery = sqlDropTable(box)-->Line_21 $$ sqlQuery = sqlDropTable(box)[ CD ]
Line_19 $$ box = (BoxModel) x.next()-->Line_21 $$ sqlQuery = sqlDropTable(box)[ FD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_21 $$ sqlQuery = sqlDropTable(box)[ FD ]
Line_7 $$ BoxModel box-->Line_21 $$ sqlQuery = sqlDropTable(box)[ FD ]
Line_20 $$ if (!box.isAbstractDef()) -->Line_22 $$ System.out.println(sqlQuery)[ CD ]
Line_21 $$ sqlQuery = sqlDropTable(box)-->Line_22 $$ System.out.println(sqlQuery)[ FD ]
Line_8 $$ String sqlQuery-->Line_22 $$ System.out.println(sqlQuery)[ FD ]
Line_21 $$ sqlQuery = sqlDropTable(box)-->Line_24 $$ stmt.executeUpdate(sqlQuery)[ FD ]
Line_8 $$ String sqlQuery-->Line_24 $$ stmt.executeUpdate(sqlQuery)[ FD ]
Line_17 $$ int counter = 0-->Line_25 $$ counter++[ FD ]
Line_27 $$ String tableName = box.getName()-->Line_27 $$ String tableName = box.getName()[ CD ]
Line_19 $$ box = (BoxModel) x.next()-->Line_27 $$ String tableName = box.getName()[ FD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_27 $$ String tableName = box.getName()[ FD ]
Line_7 $$ BoxModel box-->Line_27 $$ String tableName = box.getName()[ FD ]
Line_29 $$ String msg = Para.getPara().getText("tableNotDropped") + " -- " + tableName-->Line_30 $$ this.informUser(msg)[ FD ]
Line_17 $$ int counter = 0-->Line_35 $$ if (counter > 0) [ FD ]
Line_35 $$ if (counter > 0) -->Line_36 $$ String msg = Para.getPara().getText("schemaDropped") + " -- " + counter + " " + Para.getPara().getText("tables")[ CD ]
Line_35 $$ if (counter > 0) -->Line_37 $$ this.informUser(msg)[ CD ]
Line_29 $$ String msg = Para.getPara().getText("tableNotDropped") + " -- " + tableName-->Line_37 $$ this.informUser(msg)[ FD ]
Line_36 $$ String msg = Para.getPara().getText("schemaDropped") + " -- " + counter + " " + Para.getPara().getText("tables")-->Line_37 $$ this.informUser(msg)[ FD ]
Line_35 $$ if (counter > 0) -->Line_39 $$ this.informUser(Para.getPara().getText("schemaNotDropped"))[ CD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ FD ]
Line_10 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_11 $$ box = (BoxModel) x.next()[ FD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_12 $$ if (!box.isAbstractDef()) [ FD ]
Line_11 $$ box = (BoxModel) x.next()-->Line_13 $$ dropForeignKeys(box)[ FD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [ FD ]
Line_18 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) -->Line_19 $$ box = (BoxModel) x.next()[ FD ]
Line_19 $$ box = (BoxModel) x.next()-->Line_20 $$ if (!box.isAbstractDef()) [ FD ]
Line_19 $$ box = (BoxModel) x.next()-->Line_21 $$ sqlQuery = sqlDropTable(box)[ FD ]
Line_21 $$ sqlQuery = sqlDropTable(box)-->Line_22 $$ System.out.println(sqlQuery)[ FD ]
Line_21 $$ sqlQuery = sqlDropTable(box)-->Line_24 $$ stmt.executeUpdate(sqlQuery)[ FD ]
Line_19 $$ box = (BoxModel) x.next()-->Line_27 $$ String tableName = box.getName()[ FD ]
Line_29 $$ String msg = Para.getPara().getText("tableNotDropped") + " -- " + tableName-->Line_30 $$ this.informUser(msg)[ FD ]
