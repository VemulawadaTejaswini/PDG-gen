Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) [ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_3 $$ if ((args.length < 3) || (args.length > 4))[ CD ]
Line_3 $$ if ((args.length < 3) || (args.length > 4))-->Line_3 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, "Invalid number of arguments: " + args.length)[ CD ]
Line_3 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, "Invalid number of arguments: " + args.length)-->Line_3 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, "Invalid number of arguments: " + args.length)[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_4 $$ if ((args.length == 3) && (!args[1].equals("show")))[ CD ]
Line_4 $$ if ((args.length == 3) && (!args[1].equals("show")))-->Line_4 $$ if ((args.length == 3) && (!args[1].equals("show")))[ CD ]
Line_4 $$ if ((args.length == 3) && (!args[1].equals("show")))-->Line_4 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, "Invalid number of arguments: " + args.length)[ CD ]
Line_4 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, "Invalid number of arguments: " + args.length)-->Line_4 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_INVALID_NUM_ARGS, "Invalid number of arguments: " + args.length)[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_5 $$ if ((args.length == 4) && (!(args[2].equals("training") || args[2].equals("log") || args[2].equals("configuration"))))[ CD ]
Line_5 $$ if ((args.length == 4) && (!(args[2].equals("training") || args[2].equals("log") || args[2].equals("configuration"))))-->Line_5 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, "Access denied to directory: " + args[2])[ CD ]
Line_5 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, "Access denied to directory: " + args[2])-->Line_5 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, "Access denied to directory: " + args[2])[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_6 $$ if (args[1].equals("open")) [ CD ]
Line_6 $$ if (args[1].equals("open")) -->Line_6 $$ if (args[1].equals("open")) [ CD ]
Line_6 $$ if (args[1].equals("open")) -->Line_7 $$ final String fileName = args[2] + "/" + args[3][ CD ]
Line_6 $$ if (args[1].equals("open")) -->Line_8 $$ final File file = new File(fileName)[ CD ]
Line_6 $$ if (args[1].equals("open")) -->Line_9 $$ FileInputStream fis = null[ CD ]
Line_6 $$ if (args[1].equals("open")) -->Line_10 $$ BufferedInputStream bis = null[ CD ]
Line_6 $$ if (args[1].equals("open")) -->Line_11 $$ DataInputStream dis = null[ CD ]
Line_9 $$ FileInputStream fis = null-->Line_13 $$ fis = new FileInputStream(file)[ FD ]
Line_13 $$ fis = new FileInputStream(file)-->Line_13 $$ fis = new FileInputStream(file)[ FD ]
Line_10 $$ BufferedInputStream bis = null-->Line_14 $$ bis = new BufferedInputStream(fis)[ FD ]
Line_14 $$ bis = new BufferedInputStream(fis)-->Line_14 $$ bis = new BufferedInputStream(fis)[ FD ]
Line_11 $$ DataInputStream dis = null-->Line_15 $$ dis = new DataInputStream(bis)[ FD ]
Line_15 $$ dis = new DataInputStream(bis)-->Line_15 $$ dis = new DataInputStream(bis)[ FD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_16 $$ io.println(fileName)[ FD ]
Line_7 $$ final String fileName = args[2] + "/" + args[3]-->Line_16 $$ io.println(fileName)[ FD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_17 $$ io.println(file.length() + " bytes")[ FD ]
Line_8 $$ final File file = new File(fileName)-->Line_17 $$ io.println(file.length() + " bytes")[ FD ]
Line_11 $$ DataInputStream dis = null-->Line_18 $$ while (dis.available() != 0) [ FD ]
Line_15 $$ dis = new DataInputStream(bis)-->Line_18 $$ while (dis.available() != 0) [ FD ]
Line_18 $$ while (dis.available() != 0) -->Line_19 $$ io.println(dis.readLine())[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_19 $$ io.println(dis.readLine())[ FD ]
Line_11 $$ DataInputStream dis = null-->Line_19 $$ io.println(dis.readLine())[ FD ]
Line_15 $$ dis = new DataInputStream(bis)-->Line_19 $$ io.println(dis.readLine())[ FD ]
Line_9 $$ FileInputStream fis = null-->Line_21 $$ fis.close()[ FD ]
Line_13 $$ fis = new FileInputStream(file)-->Line_21 $$ fis.close()[ FD ]
Line_10 $$ BufferedInputStream bis = null-->Line_22 $$ bis.close()[ FD ]
Line_14 $$ bis = new BufferedInputStream(fis)-->Line_22 $$ bis.close()[ FD ]
Line_11 $$ DataInputStream dis = null-->Line_23 $$ dis.close()[ FD ]
Line_15 $$ dis = new DataInputStream(bis)-->Line_23 $$ dis.close()[ FD ]
Line_26 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_NOT_FOUND, "File " + fileName + " doesn't exist")-->Line_26 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_NOT_FOUND, "File " + fileName + " doesn't exist")[ CD ]
Line_29 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Error reading File " + fileName)-->Line_29 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Error reading File " + fileName)[ CD ]
Line_6 $$ if (args[1].equals("open")) -->Line_31 $$ if (args[1].equals("save")) [ CD ]
Line_31 $$ if (args[1].equals("save")) -->Line_31 $$ if (args[1].equals("save")) [ CD ]
Line_31 $$ if (args[1].equals("save")) -->Line_33 $$ String line[ CD ]
Line_33 $$ String line-->Line_36 $$ line = io.readLine()[ FD ]
Line_36 $$ line = io.readLine()-->Line_36 $$ line = io.readLine()[ FD ]
Line_36 $$ line = io.readLine()-->Line_36 $$ line = io.readLine()[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_36 $$ line = io.readLine()[ FD ]
Line_37 $$ int count = Integer.parseInt(line.trim())-->Line_37 $$ int count = Integer.parseInt(line.trim())[ CD ]
Line_33 $$ String line-->Line_37 $$ int count = Integer.parseInt(line.trim())[ FD ]
Line_36 $$ line = io.readLine()-->Line_37 $$ int count = Integer.parseInt(line.trim())[ FD ]
Line_37 $$ int count = Integer.parseInt(line.trim())-->Line_38 $$ while (count > 0) [ FD ]
Line_38 $$ while (count > 0) -->Line_39 $$ out.write(io.read())[ CD ]
Line_35 $$ BufferedWriter out = new BufferedWriter(new FileWriter(fileName))-->Line_39 $$ out.write(io.read())[ FD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_39 $$ out.write(io.read())[ FD ]
Line_38 $$ while (count > 0) -->Line_40 $$ count = count - 1[ CD ]
Line_40 $$ count = count - 1-->Line_40 $$ count = count - 1[ FD ]
Line_37 $$ int count = Integer.parseInt(line.trim())-->Line_40 $$ count = count - 1[ FD ]
Line_40 $$ count = count - 1-->Line_40 $$ count = count - 1[ FD ]
Line_37 $$ int count = Integer.parseInt(line.trim())-->Line_40 $$ count = count - 1[ FD ]
Line_35 $$ BufferedWriter out = new BufferedWriter(new FileWriter(fileName))-->Line_42 $$ out.flush()[ FD ]
Line_35 $$ BufferedWriter out = new BufferedWriter(new FileWriter(fileName))-->Line_43 $$ out.close()[ FD ]
Line_46 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Error writing File " + fileName)-->Line_46 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Error writing File " + fileName)[ CD ]
Line_31 $$ if (args[1].equals("save")) -->Line_48 $$ if (args[1].equals("delete")) [ CD ]
Line_48 $$ if (args[1].equals("delete")) -->Line_48 $$ if (args[1].equals("delete")) [ CD ]
Line_48 $$ if (args[1].equals("delete")) -->Line_51 $$ if (!file.exists())[ CD ]
Line_51 $$ if (!file.exists())-->Line_51 $$ if (!file.exists())[ CD ]
Line_51 $$ if (!file.exists())-->Line_51 $$ if (!file.exists())[ CD ]
Line_8 $$ final File file = new File(fileName)-->Line_51 $$ if (!file.exists())[ FD ]
Line_51 $$ if (!file.exists())-->Line_51 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "No such file or directory: " + fileName)[ CD ]
Line_51 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "No such file or directory: " + fileName)-->Line_51 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "No such file or directory: " + fileName)[ CD ]
Line_48 $$ if (args[1].equals("delete")) -->Line_52 $$ if (!file.canWrite())[ CD ]
Line_52 $$ if (!file.canWrite())-->Line_52 $$ if (!file.canWrite())[ CD ]
Line_52 $$ if (!file.canWrite())-->Line_52 $$ if (!file.canWrite())[ CD ]
Line_8 $$ final File file = new File(fileName)-->Line_52 $$ if (!file.canWrite())[ FD ]
Line_52 $$ if (!file.canWrite())-->Line_52 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "File is write-protected: " + fileName)[ CD ]
Line_52 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "File is write-protected: " + fileName)-->Line_52 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "File is write-protected: " + fileName)[ CD ]
Line_48 $$ if (args[1].equals("delete")) -->Line_53 $$ if (file.isDirectory()) [ CD ]
Line_8 $$ final File file = new File(fileName)-->Line_53 $$ if (file.isDirectory()) [ FD ]
Line_53 $$ if (file.isDirectory()) -->Line_53 $$ if (file.isDirectory()) [ CD ]
Line_8 $$ final File file = new File(fileName)-->Line_53 $$ if (file.isDirectory()) [ FD ]
Line_53 $$ if (file.isDirectory()) -->Line_54 $$ String[] files = file.list()[ CD ]
Line_54 $$ String[] files = file.list()-->Line_54 $$ String[] files = file.list()[ CD ]
Line_8 $$ final File file = new File(fileName)-->Line_54 $$ String[] files = file.list()[ FD ]
Line_53 $$ if (file.isDirectory()) -->Line_55 $$ if (files.length > 0)[ CD ]
Line_55 $$ if (files.length > 0)-->Line_55 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Directory is not empty: " + fileName)[ CD ]
Line_55 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Directory is not empty: " + fileName)-->Line_55 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Directory is not empty: " + fileName)[ CD ]
Line_48 $$ if (args[1].equals("delete")) -->Line_57 $$ if (!file.delete())[ CD ]
Line_57 $$ if (!file.delete())-->Line_57 $$ if (!file.delete())[ CD ]
Line_57 $$ if (!file.delete())-->Line_57 $$ if (!file.delete())[ CD ]
Line_8 $$ final File file = new File(fileName)-->Line_57 $$ if (!file.delete())[ FD ]
Line_57 $$ if (!file.delete())-->Line_57 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Deletion failed: " + fileName)[ CD ]
Line_57 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Deletion failed: " + fileName)-->Line_57 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "Deletion failed: " + fileName)[ CD ]
Line_48 $$ if (args[1].equals("delete")) -->Line_58 $$ if (args[1].equals("show")) [ CD ]
Line_58 $$ if (args[1].equals("show")) -->Line_58 $$ if (args[1].equals("show")) [ CD ]
Line_58 $$ if (args[1].equals("show")) -->Line_59 $$ File directory = new File(args[2])[ CD ]
Line_58 $$ if (args[1].equals("show")) -->Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) [ CD ]
Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) -->Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) [ CD ]
Line_59 $$ File directory = new File(args[2])-->Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) [ FD ]
Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) -->Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) [ CD ]
Line_59 $$ File directory = new File(args[2])-->Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) [ FD ]
Line_61 $$ if ((!directory.isDirectory()) || (!directory.exists())) -->Line_62 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "No such directory: " + directory)[ CD ]
Line_62 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "No such directory: " + directory)-->Line_62 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_IO_ERROR, "No such directory: " + directory)[ CD ]
Line_58 $$ if (args[1].equals("show")) -->Line_65 $$ files = directory.list()[ CD ]
Line_54 $$ String[] files = file.list()-->Line_65 $$ files = directory.list()[ FD ]
Line_65 $$ files = directory.list()-->Line_65 $$ files = directory.list()[ FD ]
Line_65 $$ files = directory.list()-->Line_65 $$ files = directory.list()[ CD ]
Line_59 $$ File directory = new File(args[2])-->Line_65 $$ files = directory.list()[ FD ]
Line_58 $$ if (args[1].equals("show")) -->Line_66 $$ io.println("Files in directory \"" + directory + "\":")[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_66 $$ io.println("Files in directory \"" + directory + "\":")[ FD ]
Line_58 $$ if (args[1].equals("show")) -->Line_67 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_58 $$ if (args[1].equals("show")) -->Line_58 $$ if (args[1].equals("show")) [ CD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_67 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_67 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_67 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_68 $$ directory = new File(files[i])[ CD ]
Line_68 $$ directory = new File(files[i])-->Line_68 $$ directory = new File(files[i])[ FD ]
Line_59 $$ File directory = new File(args[2])-->Line_68 $$ directory = new File(files[i])[ FD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_69 $$ if (!directory.isDirectory()) [ CD ]
Line_69 $$ if (!directory.isDirectory()) -->Line_69 $$ if (!directory.isDirectory()) [ CD ]
Line_69 $$ if (!directory.isDirectory()) -->Line_69 $$ if (!directory.isDirectory()) [ CD ]
Line_68 $$ directory = new File(files[i])-->Line_69 $$ if (!directory.isDirectory()) [ FD ]
Line_59 $$ File directory = new File(args[2])-->Line_69 $$ if (!directory.isDirectory()) [ FD ]
Line_69 $$ if (!directory.isDirectory()) -->Line_70 $$ count++[ CD ]
Line_40 $$ count = count - 1-->Line_70 $$ count++[ FD ]
Line_37 $$ int count = Integer.parseInt(line.trim())-->Line_70 $$ count++[ FD ]
Line_69 $$ if (!directory.isDirectory()) -->Line_71 $$ io.println(" " + files[i])[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_71 $$ io.println(" " + files[i])[ FD ]
Line_58 $$ if (args[1].equals("show")) -->Line_74 $$ io.println("Total " + count + " files")[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_74 $$ io.println("Total " + count + " files")[ FD ]
Line_58 $$ if (args[1].equals("show")) -->Line_75 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, "Unrecognized command")[ CD ]
Line_75 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, "Unrecognized command")-->Line_75 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_BAD_REQUEST, "Unrecognized command")[ CD ]
Line_2 $$ public static final ReturnCode runCommand(IOBundle io, String[] args) -->Line_76 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_OK)[ CD ]
Line_76 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_OK)-->Line_76 $$ return ReturnCode.makeReturnCode(ReturnCode.RET_OK)[ CD ]
Line_40 $$ count = count - 1-->Line_38 $$ while (count > 0) [ FD ]
Line_40 $$ count = count - 1-->Line_38 $$ while (count > 0) [ FD ]
Line_40 $$ count = count - 1-->Line_40 $$ count = count - 1[ FD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_67 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_67 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_67 $$ for (int i = 0; i < files.length; i++) -->Line_67 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_68 $$ directory = new File(files[i])-->Line_69 $$ if (!directory.isDirectory()) [ FD ]
