Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static synchronized String getURLContent(URL url) [ CD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_3 $$ Log log = LogUtil.getLog(FileManager.class, "getURLContent")[ CD ]
Line_3 $$ Log log = LogUtil.getLog(FileManager.class, "getURLContent")-->Line_3 $$ Log log = LogUtil.getLog(FileManager.class, "getURLContent")[ CD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_4 $$ if (url == null) [ CD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_4 $$ if (url == null) [ FD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_7 $$ String content = (String) urlCache.get(url)[ CD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_7 $$ String content = (String) urlCache.get(url)[ FD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_8 $$ if (content != null) [ CD ]
Line_7 $$ String content = (String) urlCache.get(url)-->Line_8 $$ if (content != null) [ FD ]
Line_8 $$ if (content != null) -->Line_9 $$ return content[ CD ]
Line_13 $$ if ("file".equals(url.getProtocol())) -->Line_13 $$ if ("file".equals(url.getProtocol())) [ CD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_13 $$ if ("file".equals(url.getProtocol())) [ FD ]
Line_13 $$ if ("file".equals(url.getProtocol())) -->Line_14 $$ is = new java.io.FileInputStream(url.getFile())[ CD ]
Line_12 $$ InputStream is = null-->Line_14 $$ is = new java.io.FileInputStream(url.getFile())[ FD ]
Line_14 $$ is = new java.io.FileInputStream(url.getFile())-->Line_14 $$ is = new java.io.FileInputStream(url.getFile())[ FD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_14 $$ is = new java.io.FileInputStream(url.getFile())[ FD ]
Line_13 $$ if ("file".equals(url.getProtocol())) -->Line_16 $$ is = url.openStream()[ CD ]
Line_12 $$ InputStream is = null-->Line_16 $$ is = url.openStream()[ FD ]
Line_14 $$ is = new java.io.FileInputStream(url.getFile())-->Line_16 $$ is = url.openStream()[ FD ]
Line_16 $$ is = url.openStream()-->Line_16 $$ is = url.openStream()[ FD ]
Line_16 $$ is = url.openStream()-->Line_16 $$ is = url.openStream()[ CD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_16 $$ is = url.openStream()[ FD ]
Line_12 $$ InputStream is = null-->Line_18 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(is.available())[ FD ]
Line_14 $$ is = new java.io.FileInputStream(url.getFile())-->Line_18 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(is.available())[ FD ]
Line_16 $$ is = url.openStream()-->Line_18 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(is.available())[ FD ]
Line_12 $$ InputStream is = null-->Line_19 $$ pump(is, baos)[ FD ]
Line_14 $$ is = new java.io.FileInputStream(url.getFile())-->Line_19 $$ pump(is, baos)[ FD ]
Line_16 $$ is = url.openStream()-->Line_19 $$ pump(is, baos)[ FD ]
Line_18 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(is.available())-->Line_19 $$ pump(is, baos)[ FD ]
Line_7 $$ String content = (String) urlCache.get(url)-->Line_20 $$ content = new String(baos.toByteArray())[ FD ]
Line_20 $$ content = new String(baos.toByteArray())-->Line_20 $$ content = new String(baos.toByteArray())[ FD ]
Line_18 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(is.available())-->Line_20 $$ content = new String(baos.toByteArray())[ FD ]
Line_2 $$ public static synchronized String getURLContent(URL url) -->Line_21 $$ urlCache.put(url, content)[ FD ]
Line_7 $$ String content = (String) urlCache.get(url)-->Line_21 $$ urlCache.put(url, content)[ FD ]
Line_20 $$ content = new String(baos.toByteArray())-->Line_21 $$ urlCache.put(url, content)[ FD ]
Line_3 $$ Log log = LogUtil.getLog(FileManager.class, "getURLContent")-->Line_27 $$ log.error(Translator.getString(XDocletMessages.class, XDocletUtilMessages.EXCEPTION_READING_MERGE_FILE, new String[] [ FD ]
