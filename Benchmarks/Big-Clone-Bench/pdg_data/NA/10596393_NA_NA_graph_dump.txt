Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String BaiKe(String unknown) [ CD ]
Line_2 $$ public static String BaiKe(String unknown) -->Line_3 $$ String encodeurl = ""[ CD ]
Line_2 $$ public static String BaiKe(String unknown) -->Line_4 $$ long sTime = System.currentTimeMillis()[ CD ]
Line_4 $$ long sTime = System.currentTimeMillis()-->Line_4 $$ long sTime = System.currentTimeMillis()[ CD ]
Line_2 $$ public static String BaiKe(String unknown) -->Line_5 $$ long eTime[ CD ]
Line_9 $$ Pattern p = Pattern.compile(regEx)-->Line_9 $$ Pattern p = Pattern.compile(regEx)[ CD ]
Line_7 $$ String regEx = "\\#(.+)\\#"-->Line_9 $$ Pattern p = Pattern.compile(regEx)[ FD ]
Line_10 $$ Matcher m = p.matcher(unknown)-->Line_10 $$ Matcher m = p.matcher(unknown)[ CD ]
Line_9 $$ Pattern p = Pattern.compile(regEx)-->Line_10 $$ Matcher m = p.matcher(unknown)[ FD ]
Line_2 $$ public static String BaiKe(String unknown) -->Line_10 $$ Matcher m = p.matcher(unknown)[ FD ]
Line_10 $$ Matcher m = p.matcher(unknown)-->Line_11 $$ if (m.find()) [ FD ]
Line_11 $$ if (m.find()) -->Line_11 $$ if (m.find()) [ CD ]
Line_10 $$ Matcher m = p.matcher(unknown)-->Line_11 $$ if (m.find()) [ FD ]
Line_11 $$ if (m.find()) -->Line_12 $$ searchText = m.group(1)[ CD ]
Line_8 $$ String searchText = ""-->Line_12 $$ searchText = m.group(1)[ FD ]
Line_12 $$ searchText = m.group(1)-->Line_12 $$ searchText = m.group(1)[ FD ]
Line_12 $$ searchText = m.group(1)-->Line_12 $$ searchText = m.group(1)[ CD ]
Line_10 $$ Matcher m = p.matcher(unknown)-->Line_12 $$ searchText = m.group(1)[ FD ]
Line_3 $$ String encodeurl = ""-->Line_15 $$ encodeurl = URLEncoder.encode(searchText, "UTF-8")[ FD ]
Line_15 $$ encodeurl = URLEncoder.encode(searchText, "UTF-8")-->Line_15 $$ encodeurl = URLEncoder.encode(searchText, "UTF-8")[ FD ]
Line_15 $$ encodeurl = URLEncoder.encode(searchText, "UTF-8")-->Line_15 $$ encodeurl = URLEncoder.encode(searchText, "UTF-8")[ CD ]
Line_8 $$ String searchText = ""-->Line_15 $$ encodeurl = URLEncoder.encode(searchText, "UTF-8")[ FD ]
Line_12 $$ searchText = m.group(1)-->Line_15 $$ encodeurl = URLEncoder.encode(searchText, "UTF-8")[ FD ]
Line_17 $$ HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection()-->Line_18 $$ conn.setConnectTimeout(10000)[ FD ]
Line_19 $$ Parser parser = new Parser(conn)-->Line_20 $$ parser.setEncoding(parser.getEncoding())[ FD ]
Line_19 $$ Parser parser = new Parser(conn)-->Line_20 $$ parser.setEncoding(parser.getEncoding())[ FD ]
Line_22 $$ NodeList nodes = parser.extractAllNodesThatMatch(filtera)-->Line_22 $$ NodeList nodes = parser.extractAllNodesThatMatch(filtera)[ CD ]
Line_19 $$ Parser parser = new Parser(conn)-->Line_22 $$ NodeList nodes = parser.extractAllNodesThatMatch(filtera)[ FD ]
Line_21 $$ NodeFilter filtera = new TagNameFilter("DIV")-->Line_22 $$ NodeList nodes = parser.extractAllNodesThatMatch(filtera)[ FD ]
Line_22 $$ NodeList nodes = parser.extractAllNodesThatMatch(filtera)-->Line_24 $$ if (nodes != null) [ FD ]
Line_24 $$ if (nodes != null) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ CD ]
Line_24 $$ if (nodes != null) -->Line_24 $$ if (nodes != null) [ CD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ CD ]
Line_22 $$ NodeList nodes = parser.extractAllNodesThatMatch(filtera)-->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ CD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ CD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_26 $$ Node textnode = (Node) nodes.elementAt(i)[ CD ]
Line_22 $$ NodeList nodes = parser.extractAllNodesThatMatch(filtera)-->Line_26 $$ Node textnode = (Node) nodes.elementAt(i)[ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_26 $$ Node textnode = (Node) nodes.elementAt(i)[ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_27 $$ if ("div class=\"summary\"".equals(textnode.getText())) [ CD ]
Line_27 $$ if ("div class=\"summary\"".equals(textnode.getText())) -->Line_27 $$ if ("div class=\"summary\"".equals(textnode.getText())) [ CD ]
Line_26 $$ Node textnode = (Node) nodes.elementAt(i)-->Line_27 $$ if ("div class=\"summary\"".equals(textnode.getText())) [ FD ]
Line_27 $$ if ("div class=\"summary\"".equals(textnode.getText())) -->Line_28 $$ String temp = textnode.toPlainTextString()[ CD ]
Line_28 $$ String temp = textnode.toPlainTextString()-->Line_28 $$ String temp = textnode.toPlainTextString()[ CD ]
Line_26 $$ Node textnode = (Node) nodes.elementAt(i)-->Line_28 $$ String temp = textnode.toPlainTextString()[ FD ]
Line_27 $$ if ("div class=\"summary\"".equals(textnode.getText())) -->Line_29 $$ textInPage += temp + "\n"[ CD ]
Line_29 $$ textInPage += temp + "\n"-->Line_29 $$ textInPage += temp + "\n"[ FD ]
Line_23 $$ String textInPage = ""-->Line_29 $$ textInPage += temp + "\n"[ FD ]
Line_28 $$ String temp = textnode.toPlainTextString()-->Line_29 $$ textInPage += temp + "\n"[ FD ]
Line_33 $$ String s = Replace(textInPage, searchText)-->Line_33 $$ String s = Replace(textInPage, searchText)[ CD ]
Line_29 $$ textInPage += temp + "\n"-->Line_33 $$ String s = Replace(textInPage, searchText)[ FD ]
Line_23 $$ String textInPage = ""-->Line_33 $$ String s = Replace(textInPage, searchText)[ FD ]
Line_8 $$ String searchText = ""-->Line_33 $$ String s = Replace(textInPage, searchText)[ FD ]
Line_12 $$ searchText = m.group(1)-->Line_33 $$ String s = Replace(textInPage, searchText)[ FD ]
Line_5 $$ long eTime-->Line_34 $$ eTime = System.currentTimeMillis()[ FD ]
Line_34 $$ eTime = System.currentTimeMillis()-->Line_34 $$ eTime = System.currentTimeMillis()[ FD ]
Line_34 $$ eTime = System.currentTimeMillis()-->Line_34 $$ eTime = System.currentTimeMillis()[ CD ]
Line_33 $$ String s = Replace(textInPage, searchText)-->Line_36 $$ System.out.println(s)[ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_25 $$ for (int i = 0; i < nodes.size(); i++) [ FD ]
Line_25 $$ for (int i = 0; i < nodes.size(); i++) -->Line_26 $$ Node textnode = (Node) nodes.elementAt(i)[ FD ]
Line_26 $$ Node textnode = (Node) nodes.elementAt(i)-->Line_27 $$ if ("div class=\"summary\"".equals(textnode.getText())) [ FD ]
Line_26 $$ Node textnode = (Node) nodes.elementAt(i)-->Line_28 $$ String temp = textnode.toPlainTextString()[ FD ]
Line_28 $$ String temp = textnode.toPlainTextString()-->Line_29 $$ textInPage += temp + "\n"[ FD ]
