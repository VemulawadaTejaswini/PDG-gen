Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testReleaseOnAbort() throws Exception [ CD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_3 $$ HttpParams params = defaultParams.copy()[ CD ]
Line_3 $$ HttpParams params = defaultParams.copy()-->Line_3 $$ HttpParams params = defaultParams.copy()[ CD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_4 $$ ConnManagerParams.setMaxTotalConnections(params, 1)[ CD ]
Line_3 $$ HttpParams params = defaultParams.copy()-->Line_4 $$ ConnManagerParams.setMaxTotalConnections(params, 1)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_5 $$ ConnManagerParams.setMaxConnectionsPerRoute(params, new ConnPerRouteBean(1))[ CD ]
Line_3 $$ HttpParams params = defaultParams.copy()-->Line_5 $$ ConnManagerParams.setMaxConnectionsPerRoute(params, new ConnPerRouteBean(1))[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)[ CD ]
Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)-->Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)[ CD ]
Line_3 $$ HttpParams params = defaultParams.copy()-->Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_7 $$ assertEquals(0, mgr.getConnectionsInPool())[ CD ]
Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)-->Line_7 $$ assertEquals(0, mgr.getConnectionsInPool())[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_8 $$ DefaultHttpClient client = new DefaultHttpClient(mgr, params)[ CD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_9 $$ HttpGet httpget = new HttpGet("/random/20000")[ CD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_10 $$ HttpHost target = getServerHttp()[ CD ]
Line_10 $$ HttpHost target = getServerHttp()-->Line_10 $$ HttpHost target = getServerHttp()[ CD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_11 $$ HttpResponse response = client.execute(target, httpget)[ CD ]
Line_11 $$ HttpResponse response = client.execute(target, httpget)-->Line_11 $$ HttpResponse response = client.execute(target, httpget)[ CD ]
Line_8 $$ DefaultHttpClient client = new DefaultHttpClient(mgr, params)-->Line_11 $$ HttpResponse response = client.execute(target, httpget)[ FD ]
Line_10 $$ HttpHost target = getServerHttp()-->Line_11 $$ HttpResponse response = client.execute(target, httpget)[ FD ]
Line_9 $$ HttpGet httpget = new HttpGet("/random/20000")-->Line_11 $$ HttpResponse response = client.execute(target, httpget)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_12 $$ ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null)[ CD ]
Line_12 $$ ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null)-->Line_12 $$ ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null)[ CD ]
Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)-->Line_12 $$ ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null)[ FD ]
Line_12 $$ ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null)-->Line_14 $$ connreq.getConnection(250, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_18 $$ HttpEntity e = response.getEntity()[ CD ]
Line_18 $$ HttpEntity e = response.getEntity()-->Line_18 $$ HttpEntity e = response.getEntity()[ CD ]
Line_11 $$ HttpResponse response = client.execute(target, httpget)-->Line_18 $$ HttpEntity e = response.getEntity()[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_19 $$ assertNotNull(e)[ CD ]
Line_18 $$ HttpEntity e = response.getEntity()-->Line_19 $$ assertNotNull(e)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_20 $$ httpget.abort()[ CD ]
Line_9 $$ HttpGet httpget = new HttpGet("/random/20000")-->Line_20 $$ httpget.abort()[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_21 $$ assertEquals(0, mgr.getConnectionsInPool())[ CD ]
Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)-->Line_21 $$ assertEquals(0, mgr.getConnectionsInPool())[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)[ CD ]
Line_12 $$ ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null)-->Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)[ FD ]
Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)-->Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)[ FD ]
Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)-->Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)[ CD ]
Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)-->Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_23 $$ ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS)[ CD ]
Line_23 $$ ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS)-->Line_23 $$ ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS)[ CD ]
Line_12 $$ ClientConnectionRequest connreq = mgr.requestConnection(new HttpRoute(target), null)-->Line_23 $$ ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS)[ FD ]
Line_22 $$ connreq = mgr.requestConnection(new HttpRoute(target), null)-->Line_23 $$ ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_24 $$ mgr.releaseConnection(conn, -1, null)[ CD ]
Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)-->Line_24 $$ mgr.releaseConnection(conn, -1, null)[ FD ]
Line_23 $$ ManagedClientConnection conn = connreq.getConnection(250, TimeUnit.MILLISECONDS)-->Line_24 $$ mgr.releaseConnection(conn, -1, null)[ FD ]
Line_2 $$ public void testReleaseOnAbort() throws Exception -->Line_25 $$ mgr.shutdown()[ CD ]
Line_6 $$ ThreadSafeClientConnManager mgr = createTSCCM(params, null)-->Line_25 $$ mgr.shutdown()[ FD ]
