Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String getHighlightBaseLib() throws Exception [ CD ]
Line_2 $$ public static String getHighlightBaseLib() throws Exception -->Line_3 $$ StringBuffer highlightKey = new StringBuffer()[ CD ]
Line_2 $$ public static String getHighlightBaseLib() throws Exception -->Line_4 $$ highlightKey.append("<c color=\"" + COLOR_BASELIB + "\">\n\t")[ CD ]
Line_3 $$ StringBuffer highlightKey = new StringBuffer()-->Line_4 $$ highlightKey.append("<c color=\"" + COLOR_BASELIB + "\">\n\t")[ FD ]
Line_2 $$ public static String getHighlightBaseLib() throws Exception -->Line_5 $$ URL url = AbstractRunner.class.getResource("baselib.js")[ CD ]
Line_5 $$ URL url = AbstractRunner.class.getResource("baselib.js")-->Line_5 $$ URL url = AbstractRunner.class.getResource("baselib.js")[ CD ]
Line_2 $$ public static String getHighlightBaseLib() throws Exception -->Line_6 $$ if (url != null) [ CD ]
Line_5 $$ URL url = AbstractRunner.class.getResource("baselib.js")-->Line_6 $$ if (url != null) [ FD ]
Line_6 $$ if (url != null) -->Line_7 $$ InputStream is = url.openStream()[ CD ]
Line_7 $$ InputStream is = url.openStream()-->Line_7 $$ InputStream is = url.openStream()[ CD ]
Line_5 $$ URL url = AbstractRunner.class.getResource("baselib.js")-->Line_7 $$ InputStream is = url.openStream()[ FD ]
Line_6 $$ if (url != null) -->Line_8 $$ InputStreamReader reader = new InputStreamReader(is, "UTF-8")[ CD ]
Line_6 $$ if (url != null) -->Line_9 $$ BufferedReader bfReader = new BufferedReader(reader)[ CD ]
Line_6 $$ if (url != null) -->Line_10 $$ String tmp = null[ CD ]
Line_6 $$ if (url != null) -->Line_11 $$ do [ CD ]
Line_6 $$ if (url != null) -->Line_6 $$ if (url != null) [ CD ]
Line_10 $$ String tmp = null-->Line_11 $$ do [ FD ]
Line_11 $$ do -->Line_12 $$ tmp = bfReader.readLine()[ CD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_12 $$ tmp = bfReader.readLine()[ FD ]
Line_10 $$ String tmp = null-->Line_12 $$ tmp = bfReader.readLine()[ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_12 $$ tmp = bfReader.readLine()[ CD ]
Line_9 $$ BufferedReader bfReader = new BufferedReader(reader)-->Line_12 $$ tmp = bfReader.readLine()[ FD ]
Line_11 $$ do -->Line_13 $$ if (tmp != null) [ CD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_13 $$ if (tmp != null) [ FD ]
Line_10 $$ String tmp = null-->Line_13 $$ if (tmp != null) [ FD ]
Line_13 $$ if (tmp != null) -->Line_14 $$ if (tmp.indexOf("function") > -1) [ CD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_14 $$ if (tmp.indexOf("function") > -1) [ FD ]
Line_10 $$ String tmp = null-->Line_14 $$ if (tmp.indexOf("function") > -1) [ FD ]
Line_14 $$ if (tmp.indexOf("function") > -1) -->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ CD ]
Line_3 $$ StringBuffer highlightKey = new StringBuffer()-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_10 $$ String tmp = null-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_10 $$ String tmp = null-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_10 $$ String tmp = null-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_6 $$ if (url != null) -->Line_19 $$ bfReader.close()[ CD ]
Line_9 $$ BufferedReader bfReader = new BufferedReader(reader)-->Line_19 $$ bfReader.close()[ FD ]
Line_6 $$ if (url != null) -->Line_20 $$ reader.close()[ CD ]
Line_8 $$ InputStreamReader reader = new InputStreamReader(is, "UTF-8")-->Line_20 $$ reader.close()[ FD ]
Line_6 $$ if (url != null) -->Line_21 $$ is.close()[ CD ]
Line_7 $$ InputStream is = url.openStream()-->Line_21 $$ is.close()[ FD ]
Line_2 $$ public static String getHighlightBaseLib() throws Exception -->Line_23 $$ highlightKey.append("</c>")[ CD ]
Line_3 $$ StringBuffer highlightKey = new StringBuffer()-->Line_23 $$ highlightKey.append("</c>")[ FD ]
Line_2 $$ public static String getHighlightBaseLib() throws Exception -->Line_24 $$ return highlightKey.toString()[ CD ]
Line_24 $$ return highlightKey.toString()-->Line_24 $$ return highlightKey.toString()[ CD ]
Line_3 $$ StringBuffer highlightKey = new StringBuffer()-->Line_24 $$ return highlightKey.toString()[ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_11 $$ do [ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_11 $$ do [ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_13 $$ if (tmp != null) [ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_14 $$ if (tmp.indexOf("function") > -1) [ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
Line_12 $$ tmp = bfReader.readLine()-->Line_15 $$ highlightKey.append("<w>" + (tmp.substring(tmp.indexOf("function") + 8, tmp.indexOf("(")).trim()) + "</w>\n\t")[ FD ]
