Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException [ CD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_3 $$ RestartInputStream restartInput = new RestartInputStream(input)[ CD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)[ CD ]
Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)-->Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)[ CD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)[ FD ]
Line_3 $$ RestartInputStream restartInput = new RestartInputStream(input)-->Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)[ FD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_5 $$ restartInput.restart()[ CD ]
Line_3 $$ RestartInputStream restartInput = new RestartInputStream(input)-->Line_5 $$ restartInput.restart()[ FD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_6 $$ if (match != null) [ CD ]
Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)-->Line_6 $$ if (match != null) [ FD ]
Line_6 $$ if (match != null) -->Line_7 $$ reporter.reportNotification(notificationFactory.createLocalizedNotification(NotificationType.INFO, "migration-resource-migrating", new Object[] [ CD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_7 $$ reporter.reportNotification(notificationFactory.createLocalizedNotification(NotificationType.INFO, "migration-resource-migrating", new Object[] [ FD ]
Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)-->Line_7 $$ reporter.reportNotification(notificationFactory.createLocalizedNotification(NotificationType.INFO, "migration-resource-migrating", new Object[] [ FD ]
Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)-->Line_7 $$ reporter.reportNotification(notificationFactory.createLocalizedNotification(NotificationType.INFO, "migration-resource-migrating", new Object[] [ FD ]
Line_6 $$ if (match != null) -->Line_8 $$ processMigrationSteps(match, restartInput, outputCreator)[ CD ]
Line_4 $$ Match match = resourceIdentifier.identifyResource(meta, restartInput)-->Line_8 $$ processMigrationSteps(match, restartInput, outputCreator)[ FD ]
Line_3 $$ RestartInputStream restartInput = new RestartInputStream(input)-->Line_8 $$ processMigrationSteps(match, restartInput, outputCreator)[ FD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_8 $$ processMigrationSteps(match, restartInput, outputCreator)[ FD ]
Line_6 $$ if (match != null) -->Line_10 $$ reporter.reportNotification(notificationFactory.createLocalizedNotification(NotificationType.INFO, "migration-resource-copying", new Object[] [ CD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_10 $$ reporter.reportNotification(notificationFactory.createLocalizedNotification(NotificationType.INFO, "migration-resource-copying", new Object[] [ FD ]
Line_6 $$ if (match != null) -->Line_11 $$ IOUtils.copyAndClose(restartInput, outputCreator.createOutputStream())[ CD ]
Line_3 $$ RestartInputStream restartInput = new RestartInputStream(input)-->Line_11 $$ IOUtils.copyAndClose(restartInput, outputCreator.createOutputStream())[ FD ]
Line_2 $$ public void migrate(InputMetadata meta, InputStream input, OutputCreator outputCreator) throws IOException, ResourceMigrationException -->Line_11 $$ IOUtils.copyAndClose(restartInput, outputCreator.createOutputStream())[ FD ]
