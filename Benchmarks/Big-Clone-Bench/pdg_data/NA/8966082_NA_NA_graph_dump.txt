Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testOptionalSections() throws Exception [ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_3 $$ final File implementationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_3 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_3 $$ final File implementationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_4 $$ final File specificationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_4 $$ final File specificationDirectory = this.getTestSourcesDirectory()-->Line_4 $$ final File specificationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_5 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutConstructorsSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_6 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ CD ]
Line_3 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_6 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_7 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutDefaultConstructorSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_8 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ CD ]
Line_3 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_8 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_9 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutDocumentationSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_10 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ CD ]
Line_3 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_10 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_11 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutLicenseSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_12 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ CD ]
Line_3 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_12 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_13 $$ IOUtils.copy(this.getClass().getResourceAsStream("SpecificationWithoutDocumentationSection.java.txt"), new FileOutputStream(new File(specificationDirectory, "Specification.java")))[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_14 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification("Specification"), specificationDirectory)[ CD ]
Line_4 $$ final File specificationDirectory = this.getTestSourcesDirectory()-->Line_14 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification("Specification"), specificationDirectory)[ FD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_15 $$ IOUtils.copy(this.getClass().getResourceAsStream("SpecificationWithoutLicenseSection.java.txt"), new FileOutputStream(new File(specificationDirectory, "Specification.java")))[ CD ]
Line_2 $$ public void testOptionalSections() throws Exception -->Line_16 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification("Specification"), specificationDirectory)[ CD ]
Line_4 $$ final File specificationDirectory = this.getTestSourcesDirectory()-->Line_16 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification("Specification"), specificationDirectory)[ FD ]
