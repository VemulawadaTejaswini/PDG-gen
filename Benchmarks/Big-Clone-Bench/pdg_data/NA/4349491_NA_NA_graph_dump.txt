Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void migrateTo(String newExt) throws IOException [ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_3 $$ DigitalObject input = new DigitalObject.Builder(Content.byReference(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION + "PlanetsLogo.png").toURI().toURL())).build()[ CD ]
Line_3 $$ DigitalObject input = new DigitalObject.Builder(Content.byReference(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION + "PlanetsLogo.png").toURI().toURL())).build()-->Line_3 $$ DigitalObject input = new DigitalObject.Builder(Content.byReference(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION + "PlanetsLogo.png").toURI().toURL())).build()[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_4 $$ System.out.println("Input: " + input)[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_5 $$ FormatRegistry format = FormatRegistryFactory.getFormatRegistry()[ CD ]
Line_5 $$ FormatRegistry format = FormatRegistryFactory.getFormatRegistry()-->Line_5 $$ FormatRegistry format = FormatRegistryFactory.getFormatRegistry()[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)[ CD ]
Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)-->Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)[ CD ]
Line_3 $$ DigitalObject input = new DigitalObject.Builder(Content.byReference(new File(AllJavaSEServiceTestsuite.TEST_FILE_LOCATION + "PlanetsLogo.png").toURI().toURL())).build()-->Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)[ FD ]
Line_5 $$ FormatRegistry format = FormatRegistryFactory.getFormatRegistry()-->Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)[ FD ]
Line_5 $$ FormatRegistry format = FormatRegistryFactory.getFormatRegistry()-->Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_7 $$ ServiceReport sr = mr.getReport()[ CD ]
Line_7 $$ ServiceReport sr = mr.getReport()-->Line_7 $$ ServiceReport sr = mr.getReport()[ CD ]
Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)-->Line_7 $$ ServiceReport sr = mr.getReport()[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_8 $$ System.out.println("Got Report: " + sr)[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_9 $$ DigitalObject doOut = mr.getDigitalObject()[ CD ]
Line_9 $$ DigitalObject doOut = mr.getDigitalObject()-->Line_9 $$ DigitalObject doOut = mr.getDigitalObject()[ CD ]
Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)-->Line_9 $$ DigitalObject doOut = mr.getDigitalObject()[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_10 $$ assertTrue("Resulting digital object is null.", doOut != null)[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_11 $$ System.out.println("Output: " + doOut)[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_12 $$ System.out.println("Output.content: " + doOut.getContent())[ CD ]
Line_9 $$ DigitalObject doOut = mr.getDigitalObject()-->Line_12 $$ System.out.println("Output.content: " + doOut.getContent())[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_13 $$ File out = new File("services/java-se/test/results/test." + newExt)[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_14 $$ FileOutputStream fo = new FileOutputStream(out)[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_15 $$ IOUtils.copyLarge(doOut.getContent().getInputStream(), fo)[ CD ]
Line_14 $$ FileOutputStream fo = new FileOutputStream(out)-->Line_15 $$ IOUtils.copyLarge(doOut.getContent().getInputStream(), fo)[ FD ]
Line_9 $$ DigitalObject doOut = mr.getDigitalObject()-->Line_15 $$ IOUtils.copyLarge(doOut.getContent().getInputStream(), fo)[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_16 $$ fo.close()[ CD ]
Line_14 $$ FileOutputStream fo = new FileOutputStream(out)-->Line_16 $$ fo.close()[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_17 $$ System.out.println("Recieved service report: " + mr.getReport())[ CD ]
Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)-->Line_17 $$ System.out.println("Recieved service report: " + mr.getReport())[ FD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_18 $$ System.out.println("Recieved service properties: ")[ CD ]
Line_2 $$ public void migrateTo(String newExt) throws IOException -->Line_19 $$ ServiceProperties.printProperties(System.out, mr.getReport().getProperties())[ CD ]
Line_6 $$ MigrateResult mr = dom.migrate(input, format.createExtensionUri("png"), format.createExtensionUri(newExt), null)-->Line_19 $$ ServiceProperties.printProperties(System.out, mr.getReport().getProperties())[ FD ]
