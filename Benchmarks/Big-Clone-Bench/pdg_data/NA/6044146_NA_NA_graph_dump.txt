Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void unacceptableMimeTypeTest() throws IOException [ CD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_3 $$ HttpClient httpclient = new DefaultHttpClient()[ CD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_4 $$ HttpPost httppost = new HttpPost("http://localhost:8080/alfresco/sword/deposit/company_home")[ CD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_5 $$ File file = new File("/Library/Application Support/Apple/iChat Icons/Planets/Mars.gif")[ CD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_6 $$ FileEntity entity = new FileEntity(file, "text/xml")[ CD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_7 $$ entity.setChunked(true)[ CD ]
Line_6 $$ FileEntity entity = new FileEntity(file, "text/xml")-->Line_7 $$ entity.setChunked(true)[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_8 $$ httppost.setEntity(entity)[ CD ]
Line_4 $$ HttpPost httppost = new HttpPost("http://localhost:8080/alfresco/sword/deposit/company_home")-->Line_8 $$ httppost.setEntity(entity)[ FD ]
Line_6 $$ FileEntity entity = new FileEntity(file, "text/xml")-->Line_8 $$ httppost.setEntity(entity)[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_9 $$ Date date = new Date()[ CD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_10 $$ Long time = date.getTime()[ CD ]
Line_10 $$ Long time = date.getTime()-->Line_10 $$ Long time = date.getTime()[ CD ]
Line_9 $$ Date date = new Date()-->Line_10 $$ Long time = date.getTime()[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_11 $$ httppost.addHeader("content-disposition", "filename=x" + time + "x.gif")[ CD ]
Line_4 $$ HttpPost httppost = new HttpPost("http://localhost:8080/alfresco/sword/deposit/company_home")-->Line_11 $$ httppost.addHeader("content-disposition", "filename=x" + time + "x.gif")[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_12 $$ System.out.println("Executing request...." + httppost.getRequestLine())[ CD ]
Line_4 $$ HttpPost httppost = new HttpPost("http://localhost:8080/alfresco/sword/deposit/company_home")-->Line_12 $$ System.out.println("Executing request...." + httppost.getRequestLine())[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_13 $$ HttpResponse response = httpclient.execute(httppost)[ CD ]
Line_13 $$ HttpResponse response = httpclient.execute(httppost)-->Line_13 $$ HttpResponse response = httpclient.execute(httppost)[ CD ]
Line_3 $$ HttpClient httpclient = new DefaultHttpClient()-->Line_13 $$ HttpResponse response = httpclient.execute(httppost)[ FD ]
Line_4 $$ HttpPost httppost = new HttpPost("http://localhost:8080/alfresco/sword/deposit/company_home")-->Line_13 $$ HttpResponse response = httpclient.execute(httppost)[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_14 $$ HttpEntity resEntity = response.getEntity()[ CD ]
Line_14 $$ HttpEntity resEntity = response.getEntity()-->Line_14 $$ HttpEntity resEntity = response.getEntity()[ CD ]
Line_13 $$ HttpResponse response = httpclient.execute(httppost)-->Line_14 $$ HttpEntity resEntity = response.getEntity()[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_15 $$ if (resEntity != null) [ CD ]
Line_14 $$ HttpEntity resEntity = response.getEntity()-->Line_15 $$ if (resEntity != null) [ FD ]
Line_15 $$ if (resEntity != null) -->Line_16 $$ InputStream is = resEntity.getContent()[ CD ]
Line_16 $$ InputStream is = resEntity.getContent()-->Line_16 $$ InputStream is = resEntity.getContent()[ CD ]
Line_14 $$ HttpEntity resEntity = response.getEntity()-->Line_16 $$ InputStream is = resEntity.getContent()[ FD ]
Line_15 $$ if (resEntity != null) -->Line_17 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_15 $$ if (resEntity != null) -->Line_18 $$ String line = ""[ CD ]
Line_15 $$ if (resEntity != null) -->Line_19 $$ while ((line = br.readLine()) != null) [ CD ]
Line_15 $$ if (resEntity != null) -->Line_15 $$ if (resEntity != null) [ CD ]
Line_19 $$ while ((line = br.readLine()) != null) -->Line_19 $$ while ((line = br.readLine()) != null) [ FD ]
Line_18 $$ String line = ""-->Line_19 $$ while ((line = br.readLine()) != null) [ FD ]
Line_19 $$ while ((line = br.readLine()) != null) -->Line_19 $$ while ((line = br.readLine()) != null) [ CD ]
Line_17 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_19 $$ while ((line = br.readLine()) != null) [ FD ]
Line_19 $$ while ((line = br.readLine()) != null) -->Line_20 $$ if (!line.isEmpty())[ CD ]
Line_20 $$ if (!line.isEmpty())-->Line_20 $$ if (!line.isEmpty())[ CD ]
Line_20 $$ if (!line.isEmpty())-->Line_20 $$ if (!line.isEmpty())[ CD ]
Line_19 $$ while ((line = br.readLine()) != null) -->Line_20 $$ if (!line.isEmpty())[ FD ]
Line_18 $$ String line = ""-->Line_20 $$ if (!line.isEmpty())[ FD ]
Line_20 $$ if (!line.isEmpty())-->Line_20 $$ System.out.println(line)[ CD ]
Line_19 $$ while ((line = br.readLine()) != null) -->Line_20 $$ System.out.println(line)[ FD ]
Line_18 $$ String line = ""-->Line_20 $$ System.out.println(line)[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_23 $$ if (resEntity != null) [ CD ]
Line_14 $$ HttpEntity resEntity = response.getEntity()-->Line_23 $$ if (resEntity != null) [ FD ]
Line_23 $$ if (resEntity != null) -->Line_24 $$ resEntity.consumeContent()[ CD ]
Line_14 $$ HttpEntity resEntity = response.getEntity()-->Line_24 $$ resEntity.consumeContent()[ FD ]
Line_2 $$ public void unacceptableMimeTypeTest() throws IOException -->Line_26 $$ httpclient.getConnectionManager().shutdown()[ CD ]
Line_3 $$ HttpClient httpclient = new DefaultHttpClient()-->Line_26 $$ httpclient.getConnectionManager().shutdown()[ FD ]
Line_19 $$ while ((line = br.readLine()) != null) -->Line_20 $$ if (!line.isEmpty())[ FD ]
Line_19 $$ while ((line = br.readLine()) != null) -->Line_20 $$ System.out.println(line)[ FD ]
