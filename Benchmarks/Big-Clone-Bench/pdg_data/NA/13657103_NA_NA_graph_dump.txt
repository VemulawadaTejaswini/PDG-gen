Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void forBundle(BundleManipulator manip) [ CD ]
Line_2 $$ private void forBundle(BundleManipulator manip) -->Line_3 $$ ByteArrayOutputStream bout = null[ CD ]
Line_3 $$ ByteArrayOutputStream bout = null-->Line_5 $$ bout = new ByteArrayOutputStream()[ FD ]
Line_5 $$ bout = new ByteArrayOutputStream()-->Line_5 $$ bout = new ByteArrayOutputStream()[ FD ]
Line_7 $$ Bundle bundle = getBundle()-->Line_7 $$ Bundle bundle = getBundle()[ CD ]
Line_8 $$ Enumeration<URL> files = bundle.findEntries("/", "*.vm", false)-->Line_8 $$ Enumeration<URL> files = bundle.findEntries("/", "*.vm", false)[ CD ]
Line_7 $$ Bundle bundle = getBundle()-->Line_8 $$ Enumeration<URL> files = bundle.findEntries("/", "*.vm", false)[ FD ]
Line_8 $$ Enumeration<URL> files = bundle.findEntries("/", "*.vm", false)-->Line_9 $$ if (files != null) [ FD ]
Line_9 $$ if (files != null) -->Line_10 $$ while (files.hasMoreElements()) [ CD ]
Line_9 $$ if (files != null) -->Line_9 $$ if (files != null) [ CD ]
Line_10 $$ while (files.hasMoreElements()) -->Line_10 $$ while (files.hasMoreElements()) [ CD ]
Line_8 $$ Enumeration<URL> files = bundle.findEntries("/", "*.vm", false)-->Line_10 $$ while (files.hasMoreElements()) [ FD ]
Line_10 $$ while (files.hasMoreElements()) -->Line_11 $$ URL url = files.nextElement()[ CD ]
Line_11 $$ URL url = files.nextElement()-->Line_11 $$ URL url = files.nextElement()[ CD ]
Line_8 $$ Enumeration<URL> files = bundle.findEntries("/", "*.vm", false)-->Line_11 $$ URL url = files.nextElement()[ FD ]
Line_10 $$ while (files.hasMoreElements()) -->Line_12 $$ String name = url.getFile()[ CD ]
Line_12 $$ String name = url.getFile()-->Line_12 $$ String name = url.getFile()[ CD ]
Line_11 $$ URL url = files.nextElement()-->Line_12 $$ String name = url.getFile()[ FD ]
Line_10 $$ while (files.hasMoreElements()) -->Line_13 $$ if (name.startsWith("/")) [ CD ]
Line_12 $$ String name = url.getFile()-->Line_13 $$ if (name.startsWith("/")) [ FD ]
Line_13 $$ if (name.startsWith("/")) -->Line_13 $$ if (name.startsWith("/")) [ CD ]
Line_12 $$ String name = url.getFile()-->Line_13 $$ if (name.startsWith("/")) [ FD ]
Line_13 $$ if (name.startsWith("/")) -->Line_14 $$ name = name.substring(1)[ CD ]
Line_12 $$ String name = url.getFile()-->Line_14 $$ name = name.substring(1)[ FD ]
Line_14 $$ name = name.substring(1)-->Line_14 $$ name = name.substring(1)[ FD ]
Line_14 $$ name = name.substring(1)-->Line_14 $$ name = name.substring(1)[ CD ]
Line_12 $$ String name = url.getFile()-->Line_14 $$ name = name.substring(1)[ FD ]
Line_14 $$ name = name.substring(1)-->Line_14 $$ name = name.substring(1)[ FD ]
Line_10 $$ while (files.hasMoreElements()) -->Line_16 $$ if (manip.includeEntry(name)) [ CD ]
Line_2 $$ private void forBundle(BundleManipulator manip) -->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_12 $$ String name = url.getFile()-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_14 $$ name = name.substring(1)-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_16 $$ if (manip.includeEntry(name)) -->Line_16 $$ if (manip.includeEntry(name)) [ CD ]
Line_2 $$ private void forBundle(BundleManipulator manip) -->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_12 $$ String name = url.getFile()-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_14 $$ name = name.substring(1)-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_16 $$ if (manip.includeEntry(name)) -->Line_17 $$ zout.putNextEntry(new ZipEntry(name))[ CD ]
Line_6 $$ ZipOutputStream zout = new ZipOutputStream(bout)-->Line_17 $$ zout.putNextEntry(new ZipEntry(name))[ FD ]
Line_16 $$ if (manip.includeEntry(name)) -->Line_18 $$ IOUtils.copy(url.openStream(), zout)[ CD ]
Line_6 $$ ZipOutputStream zout = new ZipOutputStream(bout)-->Line_18 $$ IOUtils.copy(url.openStream(), zout)[ FD ]
Line_11 $$ URL url = files.nextElement()-->Line_18 $$ IOUtils.copy(url.openStream(), zout)[ FD ]
Line_2 $$ private void forBundle(BundleManipulator manip) -->Line_22 $$ manip.finish(bundle, zout)[ FD ]
Line_7 $$ Bundle bundle = getBundle()-->Line_22 $$ manip.finish(bundle, zout)[ FD ]
Line_6 $$ ZipOutputStream zout = new ZipOutputStream(bout)-->Line_22 $$ manip.finish(bundle, zout)[ FD ]
Line_7 $$ Bundle bundle = getBundle()-->Line_23 $$ Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream())[ FD ]
Line_6 $$ ZipOutputStream zout = new ZipOutputStream(bout)-->Line_24 $$ zout.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF"))[ FD ]
Line_23 $$ Manifest mf = new Manifest(bundle.getEntry("META-INF/MANIFEST.MF").openStream())-->Line_25 $$ mf.write(zout)[ FD ]
Line_6 $$ ZipOutputStream zout = new ZipOutputStream(bout)-->Line_25 $$ mf.write(zout)[ FD ]
Line_6 $$ ZipOutputStream zout = new ZipOutputStream(bout)-->Line_26 $$ zout.close()[ FD ]
Line_27 $$ File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar")-->Line_27 $$ File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar")[ CD ]
Line_27 $$ File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar")-->Line_28 $$ FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray())[ FD ]
Line_3 $$ ByteArrayOutputStream bout = null-->Line_28 $$ FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray())[ FD ]
Line_5 $$ bout = new ByteArrayOutputStream()-->Line_28 $$ FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray())[ FD ]
Line_29 $$ if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) -->Line_30 $$ pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME))[ CD ]
Line_29 $$ if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) -->Line_31 $$ if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) [ CD ]
Line_31 $$ if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) -->Line_32 $$ pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY))[ CD ]
Line_35 $$ ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName())-->Line_35 $$ ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName())[ CD ]
Line_35 $$ ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName())-->Line_36 $$ ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null)[ FD ]
Line_27 $$ File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, ".jar")-->Line_37 $$ tmpFile.delete()[ FD ]
Line_3 $$ ByteArrayOutputStream bout = null-->Line_41 $$ IOUtils.closeQuietly(bout)[ FD ]
Line_5 $$ bout = new ByteArrayOutputStream()-->Line_41 $$ IOUtils.closeQuietly(bout)[ FD ]
Line_11 $$ URL url = files.nextElement()-->Line_12 $$ String name = url.getFile()[ FD ]
Line_12 $$ String name = url.getFile()-->Line_13 $$ if (name.startsWith("/")) [ FD ]
Line_14 $$ name = name.substring(1)-->Line_13 $$ if (name.startsWith("/")) [ FD ]
Line_12 $$ String name = url.getFile()-->Line_13 $$ if (name.startsWith("/")) [ FD ]
Line_14 $$ name = name.substring(1)-->Line_13 $$ if (name.startsWith("/")) [ FD ]
Line_12 $$ String name = url.getFile()-->Line_14 $$ name = name.substring(1)[ FD ]
Line_14 $$ name = name.substring(1)-->Line_14 $$ name = name.substring(1)[ FD ]
Line_12 $$ String name = url.getFile()-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_14 $$ name = name.substring(1)-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_12 $$ String name = url.getFile()-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_14 $$ name = name.substring(1)-->Line_16 $$ if (manip.includeEntry(name)) [ FD ]
Line_11 $$ URL url = files.nextElement()-->Line_18 $$ IOUtils.copy(url.openStream(), zout)[ FD ]
