Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void createPartControl(Composite parent) [ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_5 $$ viewer.createControl(splitter)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_6 $$ editDomain.addViewer(viewer)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_7 $$ viewer.getControl().setBackground(ColorConstants.listBackground)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_8 $$ viewer.setProperty(SnapToGrid.PROPERTY_GRID_SPACING, new Dimension(45, 45))[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_9 $$ ScalableFreeformRootEditPart root = new CustomRootEditPart()[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_10 $$ viewer.setRootEditPart(root)[ CD ]
Line_9 $$ ScalableFreeformRootEditPart root = new CustomRootEditPart()-->Line_10 $$ viewer.setRootEditPart(root)[ FD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_11 $$ viewer.setEditPartFactory(new CustomEditPartFactory())[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_12 $$ getSelectionSynchronizer().addViewer(viewer)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_13 $$ getSite().setSelectionProvider(viewer)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_14 $$ splitter.hookDropTargetListener(viewer)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_15 $$ splitter.setGraphicalControl(viewer.getControl())[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_16 $$ configureViewerActions(root)[ CD ]
Line_9 $$ ScalableFreeformRootEditPart root = new CustomRootEditPart()-->Line_16 $$ configureViewerActions(root)[ FD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_17 $$ configureKeyHandler()[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_18 $$ ContextMenuProvider comtextMenuProvider = new DiagramContextMenuProvider(viewer, actionRegistry, undoRedoGroup)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_19 $$ viewer.setContextMenu(comtextMenuProvider)[ CD ]
Line_18 $$ ContextMenuProvider comtextMenuProvider = new DiagramContextMenuProvider(viewer, actionRegistry, undoRedoGroup)-->Line_19 $$ viewer.setContextMenu(comtextMenuProvider)[ FD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_20 $$ viewer.addDropTargetListener(DiagramDropTargetListener.forImport(viewer))[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_21 $$ viewer.addDropTargetListener(DiagramDropTargetListener.forModel(viewer))[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_22 $$ viewer.addSelectionChangedListener(new ISelectionChangedListener() [ CD ]
Line_22 $$ viewer.addSelectionChangedListener(new ISelectionChangedListener() -->Line_24 $$ IStructuredSelection selection = (IStructuredSelection) event.getSelection()[ CD ]
Line_22 $$ viewer.addSelectionChangedListener(new ISelectionChangedListener() -->Line_24 $$ IStructuredSelection selection = (IStructuredSelection) event.getSelection()[ FD ]
Line_22 $$ viewer.addSelectionChangedListener(new ISelectionChangedListener() -->Line_25 $$ if (selection.size() == 1) [ CD ]
Line_24 $$ IStructuredSelection selection = (IStructuredSelection) event.getSelection()-->Line_25 $$ if (selection.size() == 1) [ FD ]
Line_25 $$ if (selection.size() == 1) -->Line_26 $$ EditPart selectedPart = (EditPart) selection.getFirstElement()[ CD ]
Line_24 $$ IStructuredSelection selection = (IStructuredSelection) event.getSelection()-->Line_26 $$ EditPart selectedPart = (EditPart) selection.getFirstElement()[ FD ]
Line_25 $$ if (selection.size() == 1) -->Line_27 $$ if (selectedPart instanceof TableEditPart) [ CD ]
Line_26 $$ EditPart selectedPart = (EditPart) selection.getFirstElement()-->Line_27 $$ if (selectedPart instanceof TableEditPart) [ FD ]
Line_27 $$ if (selectedPart instanceof TableEditPart) -->Line_28 $$ Table table = ((TableEditPart) selectedPart).getTable()[ CD ]
Line_28 $$ Table table = ((TableEditPart) selectedPart).getTable()-->Line_28 $$ Table table = ((TableEditPart) selectedPart).getTable()[ CD ]
Line_27 $$ if (selectedPart instanceof TableEditPart) -->Line_29 $$ RMBenchPlugin.getEventManager().fireTableSelected(DiagramEditor.this, table)[ CD ]
Line_28 $$ Table table = ((TableEditPart) selectedPart).getTable()-->Line_29 $$ RMBenchPlugin.getEventManager().fireTableSelected(DiagramEditor.this, table)[ FD ]
Line_27 $$ if (selectedPart instanceof TableEditPart) -->Line_30 $$ if (selectedPart instanceof ColumnEditPart) [ CD ]
Line_26 $$ EditPart selectedPart = (EditPart) selection.getFirstElement()-->Line_30 $$ if (selectedPart instanceof ColumnEditPart) [ FD ]
Line_30 $$ if (selectedPart instanceof ColumnEditPart) -->Line_31 $$ Column column = ((ColumnEditPart) selectedPart).getColumn()[ CD ]
Line_31 $$ Column column = ((ColumnEditPart) selectedPart).getColumn()-->Line_31 $$ Column column = ((ColumnEditPart) selectedPart).getColumn()[ CD ]
Line_30 $$ if (selectedPart instanceof ColumnEditPart) -->Line_32 $$ RMBenchPlugin.getEventManager().fireColumnSelected(DiagramEditor.this, column)[ CD ]
Line_31 $$ Column column = ((ColumnEditPart) selectedPart).getColumn()-->Line_32 $$ RMBenchPlugin.getEventManager().fireColumnSelected(DiagramEditor.this, column)[ FD ]
Line_30 $$ if (selectedPart instanceof ColumnEditPart) -->Line_33 $$ if (selectedPart instanceof ForeignKeyEditPart) [ CD ]
Line_26 $$ EditPart selectedPart = (EditPart) selection.getFirstElement()-->Line_33 $$ if (selectedPart instanceof ForeignKeyEditPart) [ FD ]
Line_33 $$ if (selectedPart instanceof ForeignKeyEditPart) -->Line_34 $$ ForeignKey key = ((ForeignKeyEditPart) selectedPart).getForeignKey()[ CD ]
Line_34 $$ ForeignKey key = ((ForeignKeyEditPart) selectedPart).getForeignKey()-->Line_34 $$ ForeignKey key = ((ForeignKeyEditPart) selectedPart).getForeignKey()[ CD ]
Line_33 $$ if (selectedPart instanceof ForeignKeyEditPart) -->Line_35 $$ RMBenchPlugin.getEventManager().fireForeignKeySelected(DiagramEditor.this, key)[ CD ]
Line_34 $$ ForeignKey key = ((ForeignKeyEditPart) selectedPart).getForeignKey()-->Line_35 $$ RMBenchPlugin.getEventManager().fireForeignKeySelected(DiagramEditor.this, key)[ FD ]
Line_33 $$ if (selectedPart instanceof ForeignKeyEditPart) -->Line_37 $$ RMBenchPlugin.getEventManager().fireTableSelected(DiagramEditor.this, null)[ CD ]
Line_22 $$ viewer.addSelectionChangedListener(new ISelectionChangedListener() -->Line_40 $$ updateActions(selectionActionIDs)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_43 $$ viewer.setContents(getDiagram())[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_44 $$ if (RMBenchPlugin.getModelManager().isDirty())[ CD ]
Line_44 $$ if (RMBenchPlugin.getModelManager().isDirty())-->Line_44 $$ if (RMBenchPlugin.getModelManager().isDirty())[ CD ]
Line_44 $$ if (RMBenchPlugin.getModelManager().isDirty())-->Line_44 $$ firePropertyChange(IWorkbenchPartConstants.PROP_DIRTY)[ CD ]
Line_2 $$ public void createPartControl(Composite parent) -->Line_45 $$ pasteTablesAction.hookEvents()[ CD ]
