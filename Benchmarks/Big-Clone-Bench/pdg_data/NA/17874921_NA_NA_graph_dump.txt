Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean buildCFItem2ItemStats(String outFileName, String movieAvgFileName, String custAvgFileName) [ CD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()[ CD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_6 $$ int size = (int) inC.size()[ FD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ CD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_6 $$ int size = (int) inC.size()-->Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_9 $$ inC.close()[ FD ]
Line_10 $$ while (map.hasRemaining()) -->Line_10 $$ while (map.hasRemaining()) [ CD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_10 $$ while (map.hasRemaining()) [ FD ]
Line_10 $$ while (map.hasRemaining()) -->Line_11 $$ movieAverages.put(map.getShort(), map.getFloat())[ CD ]
Line_8 $$ TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1)-->Line_11 $$ movieAverages.put(map.getShort(), map.getFloat())[ FD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_11 $$ movieAverages.put(map.getShort(), map.getFloat())[ FD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_11 $$ movieAverages.put(map.getShort(), map.getFloat())[ FD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_13 $$ map = null[ FD ]
Line_13 $$ map = null-->Line_13 $$ map = null[ FD ]
Line_4 $$ File infile = new File(completePath + fSep + "SmartGRAPE" + fSep + movieAvgFileName)-->Line_14 $$ infile = new File(completePath + fSep + "SmartGRAPE" + fSep + custAvgFileName)[ FD ]
Line_14 $$ infile = new File(completePath + fSep + "SmartGRAPE" + fSep + custAvgFileName)-->Line_14 $$ infile = new File(completePath + fSep + "SmartGRAPE" + fSep + custAvgFileName)[ FD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_15 $$ inC = new FileInputStream(infile).getChannel()[ FD ]
Line_15 $$ inC = new FileInputStream(infile).getChannel()-->Line_15 $$ inC = new FileInputStream(infile).getChannel()[ FD ]
Line_15 $$ inC = new FileInputStream(infile).getChannel()-->Line_15 $$ inC = new FileInputStream(infile).getChannel()[ CD ]
Line_6 $$ int size = (int) inC.size()-->Line_16 $$ size = (int) inC.size()[ FD ]
Line_16 $$ size = (int) inC.size()-->Line_16 $$ size = (int) inC.size()[ FD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_16 $$ size = (int) inC.size()[ FD ]
Line_15 $$ inC = new FileInputStream(infile).getChannel()-->Line_16 $$ size = (int) inC.size()[ FD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_13 $$ map = null-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ CD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_15 $$ inC = new FileInputStream(infile).getChannel()-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_6 $$ int size = (int) inC.size()-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_16 $$ size = (int) inC.size()-->Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_5 $$ FileChannel inC = new FileInputStream(infile).getChannel()-->Line_19 $$ inC.close()[ FD ]
Line_15 $$ inC = new FileInputStream(infile).getChannel()-->Line_19 $$ inC.close()[ FD ]
Line_20 $$ while (map.hasRemaining()) -->Line_20 $$ while (map.hasRemaining()) [ CD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_20 $$ while (map.hasRemaining()) [ FD ]
Line_13 $$ map = null-->Line_20 $$ while (map.hasRemaining()) [ FD ]
Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_20 $$ while (map.hasRemaining()) [ FD ]
Line_20 $$ while (map.hasRemaining()) -->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ CD ]
Line_18 $$ TIntFloatHashMap custAverages = new TIntFloatHashMap(480189, 1)-->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ FD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ FD ]
Line_13 $$ map = null-->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ FD ]
Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ FD ]
Line_7 $$ ByteBuffer map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ FD ]
Line_13 $$ map = null-->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ FD ]
Line_17 $$ map = inC.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_21 $$ custAverages.put(map.getInt(), map.getFloat())[ FD ]
Line_24 $$ FileChannel outC = new FileOutputStream(outfile, true).getChannel()-->Line_24 $$ FileChannel outC = new FileOutputStream(outfile, true).getChannel()[ CD ]
Line_25 $$ short[] movies = CustomersAndRatingsPerMovie.keys()-->Line_25 $$ short[] movies = CustomersAndRatingsPerMovie.keys()[ CD ]
Line_25 $$ short[] movies = CustomersAndRatingsPerMovie.keys()-->Line_26 $$ Arrays.sort(movies)[ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_28 $$ for (int i = 0; i < noMovies - 1; i++) [ CD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_28 $$ for (int i = 0; i < noMovies - 1; i++) [ CD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_28 $$ for (int i = 0; i < noMovies - 1; i++) [ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_29 $$ short movie1 = movies[i][ CD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_30 $$ TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1)[ CD ]
Line_29 $$ short movie1 = movies[i]-->Line_30 $$ TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1)[ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()[ CD ]
Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()-->Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()[ CD ]
Line_30 $$ TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1)-->Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()[ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_32 $$ Arrays.sort(customers1)[ CD ]
Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()-->Line_32 $$ Arrays.sort(customers1)[ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_33 $$ System.out.println("Processing movie: " + movie1)[ CD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ CD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_28 $$ for (int i = 0; i < noMovies - 1; i++) [ CD ]
Line_27 $$ int noMovies = movies.length-->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_35 $$ short movie2 = movies[j][ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_36 $$ TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2)[ CD ]
Line_35 $$ short movie2 = movies[j]-->Line_36 $$ TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_37 $$ int[] customers2 = otherMovieCustAndRatingsMap.keys()[ CD ]
Line_37 $$ int[] customers2 = otherMovieCustAndRatingsMap.keys()-->Line_37 $$ int[] customers2 = otherMovieCustAndRatingsMap.keys()[ CD ]
Line_36 $$ TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2)-->Line_37 $$ int[] customers2 = otherMovieCustAndRatingsMap.keys()[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)[ CD ]
Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)-->Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)[ CD ]
Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()-->Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)[ FD ]
Line_37 $$ int[] customers2 = otherMovieCustAndRatingsMap.keys()-->Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_39 $$ int count = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_40 $$ float diffRating = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_41 $$ float pearsonCorr = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_42 $$ float cosineCorr = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_43 $$ float adjustedCosineCorr = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_44 $$ float sumX = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_45 $$ float sumY = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_46 $$ float sumXY = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_47 $$ float sumX2 = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_48 $$ float sumY2 = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_49 $$ float sumXYPearson = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_50 $$ float sumX2Pearson = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_51 $$ float sumY2Pearson = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_52 $$ float sumXYACos = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_53 $$ float sumX2ACos = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_54 $$ float sumY2ACos = 0[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) [ CD ]
Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)-->Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) [ FD ]
Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) -->Line_56 $$ count = 0[ CD ]
Line_39 $$ int count = 0-->Line_56 $$ count = 0[ FD ]
Line_56 $$ count = 0-->Line_56 $$ count = 0[ FD ]
Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) -->Line_57 $$ diffRating = 0[ CD ]
Line_40 $$ float diffRating = 0-->Line_57 $$ diffRating = 0[ FD ]
Line_57 $$ diffRating = 0-->Line_57 $$ diffRating = 0[ FD ]
Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) -->Line_59 $$ count = intersectSet.size()[ CD ]
Line_39 $$ int count = 0-->Line_59 $$ count = intersectSet.size()[ FD ]
Line_56 $$ count = 0-->Line_59 $$ count = intersectSet.size()[ FD ]
Line_59 $$ count = intersectSet.size()-->Line_59 $$ count = intersectSet.size()[ FD ]
Line_59 $$ count = intersectSet.size()-->Line_59 $$ count = intersectSet.size()[ CD ]
Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)-->Line_59 $$ count = intersectSet.size()[ FD ]
Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) -->Line_60 $$ for (int l = 0; l < count; l++) [ CD ]
Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) -->Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) [ CD ]
Line_39 $$ int count = 0-->Line_60 $$ for (int l = 0; l < count; l++) [ FD ]
Line_56 $$ count = 0-->Line_60 $$ for (int l = 0; l < count; l++) [ FD ]
Line_59 $$ count = intersectSet.size()-->Line_60 $$ for (int l = 0; l < count; l++) [ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_60 $$ for (int l = 0; l < count; l++) [ CD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_60 $$ for (int l = 0; l < count; l++) [ CD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_60 $$ for (int l = 0; l < count; l++) [ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_61 $$ int commonCust = intersectSet.getQuick(l)[ CD ]
Line_61 $$ int commonCust = intersectSet.getQuick(l)-->Line_61 $$ int commonCust = intersectSet.getQuick(l)[ CD ]
Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)-->Line_61 $$ int commonCust = intersectSet.getQuick(l)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_61 $$ int commonCust = intersectSet.getQuick(l)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)[ CD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)[ CD ]
Line_30 $$ TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1)-->Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)[ FD ]
Line_61 $$ int commonCust = intersectSet.getQuick(l)-->Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_63 $$ sumX += ratingX[ CD ]
Line_63 $$ sumX += ratingX-->Line_63 $$ sumX += ratingX[ FD ]
Line_44 $$ float sumX = 0-->Line_63 $$ sumX += ratingX[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_63 $$ sumX += ratingX[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)[ CD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)[ CD ]
Line_36 $$ TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2)-->Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)[ FD ]
Line_61 $$ int commonCust = intersectSet.getQuick(l)-->Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_65 $$ sumY += ratingY[ CD ]
Line_65 $$ sumY += ratingY-->Line_65 $$ sumY += ratingY[ FD ]
Line_45 $$ float sumY = 0-->Line_65 $$ sumY += ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_65 $$ sumY += ratingY[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_66 $$ sumX2 += ratingX * ratingX[ CD ]
Line_66 $$ sumX2 += ratingX * ratingX-->Line_66 $$ sumX2 += ratingX * ratingX[ FD ]
Line_47 $$ float sumX2 = 0-->Line_66 $$ sumX2 += ratingX * ratingX[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_66 $$ sumX2 += ratingX * ratingX[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_66 $$ sumX2 += ratingX * ratingX[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_67 $$ sumY2 += ratingY * ratingY[ CD ]
Line_67 $$ sumY2 += ratingY * ratingY-->Line_67 $$ sumY2 += ratingY * ratingY[ FD ]
Line_48 $$ float sumY2 = 0-->Line_67 $$ sumY2 += ratingY * ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_67 $$ sumY2 += ratingY * ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_67 $$ sumY2 += ratingY * ratingY[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_68 $$ sumXY += ratingX * ratingY[ CD ]
Line_68 $$ sumXY += ratingX * ratingY-->Line_68 $$ sumXY += ratingX * ratingY[ FD ]
Line_46 $$ float sumXY = 0-->Line_68 $$ sumXY += ratingX * ratingY[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_68 $$ sumXY += ratingX * ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_68 $$ sumXY += ratingX * ratingY[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_69 $$ diffRating += ratingX - ratingY[ CD ]
Line_69 $$ diffRating += ratingX - ratingY-->Line_69 $$ diffRating += ratingX - ratingY[ FD ]
Line_40 $$ float diffRating = 0-->Line_69 $$ diffRating += ratingX - ratingY[ FD ]
Line_57 $$ diffRating = 0-->Line_69 $$ diffRating += ratingX - ratingY[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_69 $$ diffRating += ratingX - ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_69 $$ diffRating += ratingX - ratingY[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))[ CD ]
Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))-->Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))[ FD ]
Line_49 $$ float sumXYPearson = 0-->Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))[ FD ]
Line_8 $$ TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1)-->Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))[ FD ]
Line_29 $$ short movie1 = movies[i]-->Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))[ FD ]
Line_8 $$ TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1)-->Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))[ FD ]
Line_35 $$ short movie2 = movies[j]-->Line_70 $$ sumXYPearson += (ratingX - movieAverages.get(movie1)) * (ratingY - movieAverages.get(movie2))[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)[ CD ]
Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)-->Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)[ FD ]
Line_50 $$ float sumX2Pearson = 0-->Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)[ FD ]
Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)-->Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)[ CD ]
Line_8 $$ TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1)-->Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)[ FD ]
Line_29 $$ short movie1 = movies[i]-->Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)[ CD ]
Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)-->Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)[ FD ]
Line_51 $$ float sumY2Pearson = 0-->Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)[ FD ]
Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)-->Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)[ CD ]
Line_8 $$ TShortFloatHashMap movieAverages = new TShortFloatHashMap(17770, 1)-->Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)[ FD ]
Line_35 $$ short movie2 = movies[j]-->Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_73 $$ float custAverage = custAverages.get(commonCust)[ CD ]
Line_73 $$ float custAverage = custAverages.get(commonCust)-->Line_73 $$ float custAverage = custAverages.get(commonCust)[ CD ]
Line_18 $$ TIntFloatHashMap custAverages = new TIntFloatHashMap(480189, 1)-->Line_73 $$ float custAverage = custAverages.get(commonCust)[ FD ]
Line_61 $$ int commonCust = intersectSet.getQuick(l)-->Line_73 $$ float custAverage = custAverages.get(commonCust)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_74 $$ sumXYACos += (ratingX - custAverage) * (ratingY - custAverage)[ CD ]
Line_74 $$ sumXYACos += (ratingX - custAverage) * (ratingY - custAverage)-->Line_74 $$ sumXYACos += (ratingX - custAverage) * (ratingY - custAverage)[ FD ]
Line_52 $$ float sumXYACos = 0-->Line_74 $$ sumXYACos += (ratingX - custAverage) * (ratingY - custAverage)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_75 $$ sumX2ACos += Math.pow((ratingX - custAverage), 2)[ CD ]
Line_75 $$ sumX2ACos += Math.pow((ratingX - custAverage), 2)-->Line_75 $$ sumX2ACos += Math.pow((ratingX - custAverage), 2)[ FD ]
Line_53 $$ float sumX2ACos = 0-->Line_75 $$ sumX2ACos += Math.pow((ratingX - custAverage), 2)[ FD ]
Line_75 $$ sumX2ACos += Math.pow((ratingX - custAverage), 2)-->Line_75 $$ sumX2ACos += Math.pow((ratingX - custAverage), 2)[ CD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_76 $$ sumY2ACos += Math.pow((ratingY - custAverage), 2)[ CD ]
Line_76 $$ sumY2ACos += Math.pow((ratingY - custAverage), 2)-->Line_76 $$ sumY2ACos += Math.pow((ratingY - custAverage), 2)[ FD ]
Line_54 $$ float sumY2ACos = 0-->Line_76 $$ sumY2ACos += Math.pow((ratingY - custAverage), 2)[ FD ]
Line_76 $$ sumY2ACos += Math.pow((ratingY - custAverage), 2)-->Line_76 $$ sumY2ACos += Math.pow((ratingY - custAverage), 2)[ CD ]
Line_71 $$ sumX2Pearson += Math.pow((ratingX - movieAverages.get(movie1)), 2)-->Line_79 $$ double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson)[ FD ]
Line_50 $$ float sumX2Pearson = 0-->Line_79 $$ double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson)[ FD ]
Line_72 $$ sumY2Pearson += Math.pow((ratingY - movieAverages.get(movie2)), 2)-->Line_79 $$ double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson)[ FD ]
Line_51 $$ float sumY2Pearson = 0-->Line_79 $$ double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_80 $$ if (pearsonDenominator == 0.0) [ CD ]
Line_80 $$ if (pearsonDenominator == 0.0) -->Line_81 $$ pearsonCorr = 0[ CD ]
Line_41 $$ float pearsonCorr = 0-->Line_81 $$ pearsonCorr = 0[ FD ]
Line_81 $$ pearsonCorr = 0-->Line_81 $$ pearsonCorr = 0[ FD ]
Line_80 $$ if (pearsonDenominator == 0.0) -->Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()[ CD ]
Line_41 $$ float pearsonCorr = 0-->Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()[ FD ]
Line_81 $$ pearsonCorr = 0-->Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()[ FD ]
Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()-->Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()[ FD ]
Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()-->Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()[ CD ]
Line_75 $$ sumX2ACos += Math.pow((ratingX - custAverage), 2)-->Line_85 $$ double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos)[ FD ]
Line_53 $$ float sumX2ACos = 0-->Line_85 $$ double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos)[ FD ]
Line_76 $$ sumY2ACos += Math.pow((ratingY - custAverage), 2)-->Line_85 $$ double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos)[ FD ]
Line_54 $$ float sumY2ACos = 0-->Line_85 $$ double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_86 $$ if (adjCosineDenominator == 0.0) [ CD ]
Line_86 $$ if (adjCosineDenominator == 0.0) -->Line_87 $$ adjustedCosineCorr = 0[ CD ]
Line_43 $$ float adjustedCosineCorr = 0-->Line_87 $$ adjustedCosineCorr = 0[ FD ]
Line_87 $$ adjustedCosineCorr = 0-->Line_87 $$ adjustedCosineCorr = 0[ FD ]
Line_86 $$ if (adjCosineDenominator == 0.0) -->Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()[ CD ]
Line_43 $$ float adjustedCosineCorr = 0-->Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()[ FD ]
Line_87 $$ adjustedCosineCorr = 0-->Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()[ FD ]
Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()-->Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()[ FD ]
Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()-->Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()[ CD ]
Line_66 $$ sumX2 += ratingX * ratingX-->Line_91 $$ double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2)[ FD ]
Line_47 $$ float sumX2 = 0-->Line_91 $$ double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2)[ FD ]
Line_67 $$ sumY2 += ratingY * ratingY-->Line_91 $$ double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2)[ FD ]
Line_48 $$ float sumY2 = 0-->Line_91 $$ double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_92 $$ if (cosineDenominator == 0.0) [ CD ]
Line_92 $$ if (cosineDenominator == 0.0) -->Line_93 $$ cosineCorr = 0[ CD ]
Line_42 $$ float cosineCorr = 0-->Line_93 $$ cosineCorr = 0[ FD ]
Line_93 $$ cosineCorr = 0-->Line_93 $$ cosineCorr = 0[ FD ]
Line_92 $$ if (cosineDenominator == 0.0) -->Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()[ CD ]
Line_42 $$ float cosineCorr = 0-->Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()[ FD ]
Line_93 $$ cosineCorr = 0-->Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()[ FD ]
Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()-->Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()[ FD ]
Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()-->Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_97 $$ ByteBuffer buf = ByteBuffer.allocate(44)[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_98 $$ buf.putShort(movie1)[ CD ]
Line_29 $$ short movie1 = movies[i]-->Line_98 $$ buf.putShort(movie1)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_99 $$ buf.putShort(movie2)[ CD ]
Line_35 $$ short movie2 = movies[j]-->Line_99 $$ buf.putShort(movie2)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_100 $$ buf.putInt(count)[ CD ]
Line_39 $$ int count = 0-->Line_100 $$ buf.putInt(count)[ FD ]
Line_56 $$ count = 0-->Line_100 $$ buf.putInt(count)[ FD ]
Line_59 $$ count = intersectSet.size()-->Line_100 $$ buf.putInt(count)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_101 $$ buf.putFloat(diffRating)[ CD ]
Line_69 $$ diffRating += ratingX - ratingY-->Line_101 $$ buf.putFloat(diffRating)[ FD ]
Line_40 $$ float diffRating = 0-->Line_101 $$ buf.putFloat(diffRating)[ FD ]
Line_57 $$ diffRating = 0-->Line_101 $$ buf.putFloat(diffRating)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_102 $$ buf.putFloat(sumXY)[ CD ]
Line_68 $$ sumXY += ratingX * ratingY-->Line_102 $$ buf.putFloat(sumXY)[ FD ]
Line_46 $$ float sumXY = 0-->Line_102 $$ buf.putFloat(sumXY)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_103 $$ buf.putFloat(sumX)[ CD ]
Line_63 $$ sumX += ratingX-->Line_103 $$ buf.putFloat(sumX)[ FD ]
Line_44 $$ float sumX = 0-->Line_103 $$ buf.putFloat(sumX)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_104 $$ buf.putFloat(sumY)[ CD ]
Line_65 $$ sumY += ratingY-->Line_104 $$ buf.putFloat(sumY)[ FD ]
Line_45 $$ float sumY = 0-->Line_104 $$ buf.putFloat(sumY)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_105 $$ buf.putFloat(sumX2)[ CD ]
Line_66 $$ sumX2 += ratingX * ratingX-->Line_105 $$ buf.putFloat(sumX2)[ FD ]
Line_47 $$ float sumX2 = 0-->Line_105 $$ buf.putFloat(sumX2)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_106 $$ buf.putFloat(sumY2)[ CD ]
Line_67 $$ sumY2 += ratingY * ratingY-->Line_106 $$ buf.putFloat(sumY2)[ FD ]
Line_48 $$ float sumY2 = 0-->Line_106 $$ buf.putFloat(sumY2)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_107 $$ buf.putFloat(pearsonCorr)[ CD ]
Line_41 $$ float pearsonCorr = 0-->Line_107 $$ buf.putFloat(pearsonCorr)[ FD ]
Line_81 $$ pearsonCorr = 0-->Line_107 $$ buf.putFloat(pearsonCorr)[ FD ]
Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()-->Line_107 $$ buf.putFloat(pearsonCorr)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_108 $$ buf.putFloat(adjustedCosineCorr)[ CD ]
Line_43 $$ float adjustedCosineCorr = 0-->Line_108 $$ buf.putFloat(adjustedCosineCorr)[ FD ]
Line_87 $$ adjustedCosineCorr = 0-->Line_108 $$ buf.putFloat(adjustedCosineCorr)[ FD ]
Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()-->Line_108 $$ buf.putFloat(adjustedCosineCorr)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_109 $$ buf.putFloat(cosineCorr)[ CD ]
Line_42 $$ float cosineCorr = 0-->Line_109 $$ buf.putFloat(cosineCorr)[ FD ]
Line_93 $$ cosineCorr = 0-->Line_109 $$ buf.putFloat(cosineCorr)[ FD ]
Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()-->Line_109 $$ buf.putFloat(cosineCorr)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_110 $$ buf.flip()[ CD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_111 $$ outC.write(buf)[ CD ]
Line_24 $$ FileChannel outC = new FileOutputStream(outfile, true).getChannel()-->Line_111 $$ outC.write(buf)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_112 $$ buf.clear()[ CD ]
Line_24 $$ FileChannel outC = new FileOutputStream(outfile, true).getChannel()-->Line_115 $$ outC.close()[ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_28 $$ for (int i = 0; i < noMovies - 1; i++) [ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_28 $$ for (int i = 0; i < noMovies - 1; i++) [ FD ]
Line_28 $$ for (int i = 0; i < noMovies - 1; i++) -->Line_28 $$ for (int i = 0; i < noMovies - 1; i++) [ FD ]
Line_29 $$ short movie1 = movies[i]-->Line_30 $$ TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1)[ FD ]
Line_30 $$ TIntByteHashMap testMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie1)-->Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()[ FD ]
Line_31 $$ int[] customers1 = testMovieCustAndRatingsMap.keys()-->Line_32 $$ Arrays.sort(customers1)[ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ FD ]
Line_34 $$ for (int j = i + 1; j < noMovies; j++) -->Line_34 $$ for (int j = i + 1; j < noMovies; j++) [ FD ]
Line_35 $$ short movie2 = movies[j]-->Line_36 $$ TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2)[ FD ]
Line_36 $$ TIntByteHashMap otherMovieCustAndRatingsMap = (TIntByteHashMap) CustomersAndRatingsPerMovie.get(movie2)-->Line_37 $$ int[] customers2 = otherMovieCustAndRatingsMap.keys()[ FD ]
Line_37 $$ int[] customers2 = otherMovieCustAndRatingsMap.keys()-->Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)[ FD ]
Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)-->Line_55 $$ if ((intersectSet.size() == 0) || (intersectSet == null)) [ FD ]
Line_38 $$ TIntArrayList intersectSet = CustOverLapForTwoMoviesCustom(customers1, customers2)-->Line_59 $$ count = intersectSet.size()[ FD ]
Line_50 $$ float sumX2Pearson = 0-->Line_79 $$ double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson)[ FD ]
Line_51 $$ float sumY2Pearson = 0-->Line_79 $$ double pearsonDenominator = Math.sqrt(sumX2Pearson) * Math.sqrt(sumY2Pearson)[ FD ]
Line_53 $$ float sumX2ACos = 0-->Line_85 $$ double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos)[ FD ]
Line_54 $$ float sumY2ACos = 0-->Line_85 $$ double adjCosineDenominator = Math.sqrt(sumX2ACos) * Math.sqrt(sumY2ACos)[ FD ]
Line_47 $$ float sumX2 = 0-->Line_91 $$ double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2)[ FD ]
Line_48 $$ float sumY2 = 0-->Line_91 $$ double cosineDenominator = Math.sqrt(sumX2) * Math.sqrt(sumY2)[ FD ]
Line_35 $$ short movie2 = movies[j]-->Line_99 $$ buf.putShort(movie2)[ FD ]
Line_39 $$ int count = 0-->Line_100 $$ buf.putInt(count)[ FD ]
Line_56 $$ count = 0-->Line_100 $$ buf.putInt(count)[ FD ]
Line_59 $$ count = intersectSet.size()-->Line_100 $$ buf.putInt(count)[ FD ]
Line_40 $$ float diffRating = 0-->Line_101 $$ buf.putFloat(diffRating)[ FD ]
Line_57 $$ diffRating = 0-->Line_101 $$ buf.putFloat(diffRating)[ FD ]
Line_46 $$ float sumXY = 0-->Line_102 $$ buf.putFloat(sumXY)[ FD ]
Line_44 $$ float sumX = 0-->Line_103 $$ buf.putFloat(sumX)[ FD ]
Line_45 $$ float sumY = 0-->Line_104 $$ buf.putFloat(sumY)[ FD ]
Line_47 $$ float sumX2 = 0-->Line_105 $$ buf.putFloat(sumX2)[ FD ]
Line_48 $$ float sumY2 = 0-->Line_106 $$ buf.putFloat(sumY2)[ FD ]
Line_41 $$ float pearsonCorr = 0-->Line_107 $$ buf.putFloat(pearsonCorr)[ FD ]
Line_81 $$ pearsonCorr = 0-->Line_107 $$ buf.putFloat(pearsonCorr)[ FD ]
Line_83 $$ pearsonCorr = new Double(sumXYPearson / pearsonDenominator).floatValue()-->Line_107 $$ buf.putFloat(pearsonCorr)[ FD ]
Line_43 $$ float adjustedCosineCorr = 0-->Line_108 $$ buf.putFloat(adjustedCosineCorr)[ FD ]
Line_87 $$ adjustedCosineCorr = 0-->Line_108 $$ buf.putFloat(adjustedCosineCorr)[ FD ]
Line_89 $$ adjustedCosineCorr = new Double(sumXYACos / adjCosineDenominator).floatValue()-->Line_108 $$ buf.putFloat(adjustedCosineCorr)[ FD ]
Line_42 $$ float cosineCorr = 0-->Line_109 $$ buf.putFloat(cosineCorr)[ FD ]
Line_93 $$ cosineCorr = 0-->Line_109 $$ buf.putFloat(cosineCorr)[ FD ]
Line_95 $$ cosineCorr = new Double(sumXY / cosineDenominator).floatValue()-->Line_109 $$ buf.putFloat(cosineCorr)[ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_60 $$ for (int l = 0; l < count; l++) [ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_60 $$ for (int l = 0; l < count; l++) [ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_60 $$ for (int l = 0; l < count; l++) [ FD ]
Line_60 $$ for (int l = 0; l < count; l++) -->Line_61 $$ int commonCust = intersectSet.getQuick(l)[ FD ]
Line_61 $$ int commonCust = intersectSet.getQuick(l)-->Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_63 $$ sumX += ratingX[ FD ]
Line_61 $$ int commonCust = intersectSet.getQuick(l)-->Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_65 $$ sumY += ratingY[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_66 $$ sumX2 += ratingX * ratingX[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_66 $$ sumX2 += ratingX * ratingX[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_67 $$ sumY2 += ratingY * ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_67 $$ sumY2 += ratingY * ratingY[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_68 $$ sumXY += ratingX * ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_68 $$ sumXY += ratingX * ratingY[ FD ]
Line_62 $$ byte ratingX = testMovieCustAndRatingsMap.get(commonCust)-->Line_69 $$ diffRating += ratingX - ratingY[ FD ]
Line_64 $$ byte ratingY = otherMovieCustAndRatingsMap.get(commonCust)-->Line_69 $$ diffRating += ratingX - ratingY[ FD ]
Line_61 $$ int commonCust = intersectSet.getQuick(l)-->Line_73 $$ float custAverage = custAverages.get(commonCust)[ FD ]
