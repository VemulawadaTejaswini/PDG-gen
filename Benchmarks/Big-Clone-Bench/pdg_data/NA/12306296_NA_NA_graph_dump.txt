Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_3 $$ if (!source.exists()) [ CD ]
Line_3 $$ if (!source.exists()) -->Line_3 $$ if (!source.exists()) [ CD ]
Line_3 $$ if (!source.exists()) -->Line_3 $$ if (!source.exists()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_3 $$ if (!source.exists()) [ FD ]
Line_3 $$ if (!source.exists()) -->Line_4 $$ String message = "File " + source + " does not exist"[ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_7 $$ if (destination.getParentFile() != null && !destination.getParentFile().exists()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_7 $$ if (destination.getParentFile() != null && !destination.getParentFile().exists()) [ FD ]
Line_7 $$ if (destination.getParentFile() != null && !destination.getParentFile().exists()) -->Line_7 $$ if (destination.getParentFile() != null && !destination.getParentFile().exists()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_7 $$ if (destination.getParentFile() != null && !destination.getParentFile().exists()) [ FD ]
Line_7 $$ if (destination.getParentFile() != null && !destination.getParentFile().exists()) -->Line_8 $$ forceMkdir(destination.getParentFile())[ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_8 $$ forceMkdir(destination.getParentFile())[ FD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_10 $$ if (destination.exists() && !destination.canWrite()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_10 $$ if (destination.exists() && !destination.canWrite()) [ FD ]
Line_10 $$ if (destination.exists() && !destination.canWrite()) -->Line_10 $$ if (destination.exists() && !destination.canWrite()) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_10 $$ if (destination.exists() && !destination.canWrite()) [ FD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_14 $$ if (source.getCanonicalPath().equals(destination.getCanonicalPath())) [ CD ]
Line_14 $$ if (source.getCanonicalPath().equals(destination.getCanonicalPath())) -->Line_14 $$ if (source.getCanonicalPath().equals(destination.getCanonicalPath())) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_14 $$ if (source.getCanonicalPath().equals(destination.getCanonicalPath())) [ FD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_14 $$ if (source.getCanonicalPath().equals(destination.getCanonicalPath())) [ FD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_18 $$ if (copyLength == 0) [ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_18 $$ if (copyLength == 0) [ FD ]
Line_18 $$ if (copyLength == 0) -->Line_19 $$ truncateFile(destination, 0)[ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_19 $$ truncateFile(destination, 0)[ FD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_21 $$ FileInputStream input = null[ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_22 $$ FileOutputStream output = null[ CD ]
Line_21 $$ FileInputStream input = null-->Line_24 $$ input = new FileInputStream(source)[ FD ]
Line_24 $$ input = new FileInputStream(source)-->Line_24 $$ input = new FileInputStream(source)[ FD ]
Line_22 $$ FileOutputStream output = null-->Line_25 $$ output = new FileOutputStream(destination)[ FD ]
Line_25 $$ output = new FileOutputStream(destination)-->Line_25 $$ output = new FileOutputStream(destination)[ FD ]
Line_26 $$ long lengthLeft = copyLength-->Line_29 $$ while (lengthLeft > 0) [ FD ]
Line_29 $$ while (lengthLeft > 0) -->Line_30 $$ read = input.read(buffer)[ CD ]
Line_30 $$ read = input.read(buffer)-->Line_30 $$ read = input.read(buffer)[ FD ]
Line_28 $$ int read-->Line_30 $$ read = input.read(buffer)[ FD ]
Line_30 $$ read = input.read(buffer)-->Line_30 $$ read = input.read(buffer)[ CD ]
Line_21 $$ FileInputStream input = null-->Line_30 $$ read = input.read(buffer)[ FD ]
Line_24 $$ input = new FileInputStream(source)-->Line_30 $$ read = input.read(buffer)[ FD ]
Line_27 $$ byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)]-->Line_30 $$ read = input.read(buffer)[ FD ]
Line_29 $$ while (lengthLeft > 0) -->Line_31 $$ if (read == -1) [ CD ]
Line_30 $$ read = input.read(buffer)-->Line_31 $$ if (read == -1) [ FD ]
Line_28 $$ int read-->Line_31 $$ if (read == -1) [ FD ]
Line_29 $$ while (lengthLeft > 0) -->Line_34 $$ lengthLeft -= read[ CD ]
Line_34 $$ lengthLeft -= read-->Line_34 $$ lengthLeft -= read[ FD ]
Line_26 $$ long lengthLeft = copyLength-->Line_34 $$ lengthLeft -= read[ FD ]
Line_30 $$ read = input.read(buffer)-->Line_34 $$ lengthLeft -= read[ FD ]
Line_28 $$ int read-->Line_34 $$ lengthLeft -= read[ FD ]
Line_29 $$ while (lengthLeft > 0) -->Line_35 $$ output.write(buffer, 0, read)[ CD ]
Line_22 $$ FileOutputStream output = null-->Line_35 $$ output.write(buffer, 0, read)[ FD ]
Line_25 $$ output = new FileOutputStream(destination)-->Line_35 $$ output.write(buffer, 0, read)[ FD ]
Line_27 $$ byte[] buffer = new byte[(int) Math.min(BUFFER_LENGTH, lengthLeft + 1)]-->Line_35 $$ output.write(buffer, 0, read)[ FD ]
Line_30 $$ read = input.read(buffer)-->Line_35 $$ output.write(buffer, 0, read)[ FD ]
Line_28 $$ int read-->Line_35 $$ output.write(buffer, 0, read)[ FD ]
Line_22 $$ FileOutputStream output = null-->Line_37 $$ output.flush()[ FD ]
Line_25 $$ output = new FileOutputStream(destination)-->Line_37 $$ output.flush()[ FD ]
Line_22 $$ FileOutputStream output = null-->Line_38 $$ output.getFD().sync()[ FD ]
Line_25 $$ output = new FileOutputStream(destination)-->Line_38 $$ output.getFD().sync()[ FD ]
Line_21 $$ FileInputStream input = null-->Line_40 $$ IOUtil.closeQuietly(input)[ FD ]
Line_24 $$ input = new FileInputStream(source)-->Line_40 $$ IOUtil.closeQuietly(input)[ FD ]
Line_22 $$ FileOutputStream output = null-->Line_41 $$ IOUtil.closeQuietly(output)[ FD ]
Line_25 $$ output = new FileOutputStream(destination)-->Line_41 $$ IOUtil.closeQuietly(output)[ FD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_43 $$ destination.setLastModified(source.lastModified())[ CD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_43 $$ destination.setLastModified(source.lastModified())[ FD ]
Line_2 $$ public static void copyFile(File source, File destination, long copyLength) throws IOException -->Line_43 $$ destination.setLastModified(source.lastModified())[ FD ]
Line_34 $$ lengthLeft -= read-->Line_29 $$ while (lengthLeft > 0) [ FD ]
Line_34 $$ lengthLeft -= read-->Line_29 $$ while (lengthLeft > 0) [ FD ]
Line_30 $$ read = input.read(buffer)-->Line_31 $$ if (read == -1) [ FD ]
Line_30 $$ read = input.read(buffer)-->Line_34 $$ lengthLeft -= read[ FD ]
Line_30 $$ read = input.read(buffer)-->Line_35 $$ output.write(buffer, 0, read)[ FD ]
