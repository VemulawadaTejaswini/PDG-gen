Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public VocabularyLocation next() [ CD ]
Line_4 $$ if (!urls.isEmpty()) -->Line_4 $$ if (!urls.isEmpty()) [ CD ]
Line_4 $$ if (!urls.isEmpty()) -->Line_4 $$ if (!urls.isEmpty()) [ CD ]
Line_4 $$ if (!urls.isEmpty()) -->Line_5 $$ final URL url = urls.poll()[ CD ]
Line_5 $$ final URL url = urls.poll()-->Line_5 $$ final URL url = urls.poll()[ CD ]
Line_4 $$ if (!urls.isEmpty()) -->Line_6 $$ return new VocabularyLocation(url.toExternalForm(), VocabularyFormat.RDFXML, 0, url.openStream())[ CD ]
Line_5 $$ final URL url = urls.poll()-->Line_6 $$ return new VocabularyLocation(url.toExternalForm(), VocabularyFormat.RDFXML, 0, url.openStream())[ FD ]
Line_5 $$ final URL url = urls.poll()-->Line_6 $$ return new VocabularyLocation(url.toExternalForm(), VocabularyFormat.RDFXML, 0, url.openStream())[ FD ]
Line_8 $$ if (!files.isEmpty()) -->Line_8 $$ if (!files.isEmpty()) [ CD ]
Line_8 $$ if (!files.isEmpty()) -->Line_8 $$ if (!files.isEmpty()) [ CD ]
Line_8 $$ if (!files.isEmpty()) -->Line_9 $$ File file = files.poll()[ CD ]
Line_9 $$ File file = files.poll()-->Line_9 $$ File file = files.poll()[ CD ]
Line_8 $$ if (!files.isEmpty()) -->Line_10 $$ return new VocabularyLocation(file.getCanonicalPath(), file.getName().endsWith(".ntriples") ? VocabularyFormat.NTRIPLES : VocabularyFormat.RDFXML, file.lastModified(), new FileInputStream(file))[ CD ]
Line_9 $$ File file = files.poll()-->Line_10 $$ return new VocabularyLocation(file.getCanonicalPath(), file.getName().endsWith(".ntriples") ? VocabularyFormat.NTRIPLES : VocabularyFormat.RDFXML, file.lastModified(), new FileInputStream(file))[ FD ]
Line_9 $$ File file = files.poll()-->Line_10 $$ return new VocabularyLocation(file.getCanonicalPath(), file.getName().endsWith(".ntriples") ? VocabularyFormat.NTRIPLES : VocabularyFormat.RDFXML, file.lastModified(), new FileInputStream(file))[ FD ]
Line_9 $$ File file = files.poll()-->Line_10 $$ return new VocabularyLocation(file.getCanonicalPath(), file.getName().endsWith(".ntriples") ? VocabularyFormat.NTRIPLES : VocabularyFormat.RDFXML, file.lastModified(), new FileInputStream(file))[ FD ]
Line_12 $$ if (nextZipEntry != null) -->Line_13 $$ String zipEntryAsString = IOUtils.toString(new CloseShieldInputStream(in), "UTF-8")[ CD ]
Line_13 $$ String zipEntryAsString = IOUtils.toString(new CloseShieldInputStream(in), "UTF-8")-->Line_13 $$ String zipEntryAsString = IOUtils.toString(new CloseShieldInputStream(in), "UTF-8")[ CD ]
Line_12 $$ if (nextZipEntry != null) -->Line_14 $$ VocabularyLocation location = new VocabularyLocation(nextZipEntry.getName(), nextZipEntry.getName().endsWith(".rdf") ? VocabularyFormat.RDFXML : null, nextZipEntry.getTime(), IOUtils.toInputStream(zipEntryAsString, "UTF-8"))[ CD ]
Line_13 $$ String zipEntryAsString = IOUtils.toString(new CloseShieldInputStream(in), "UTF-8")-->Line_14 $$ VocabularyLocation location = new VocabularyLocation(nextZipEntry.getName(), nextZipEntry.getName().endsWith(".rdf") ? VocabularyFormat.RDFXML : null, nextZipEntry.getTime(), IOUtils.toInputStream(zipEntryAsString, "UTF-8"))[ FD ]
Line_12 $$ if (nextZipEntry != null) -->Line_15 $$ findNextZipEntry()[ CD ]
Line_12 $$ if (nextZipEntry != null) -->Line_16 $$ return location[ CD ]
