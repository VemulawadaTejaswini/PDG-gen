Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ Option optHelp = new Option("h", "help", false, "print this message")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ Option optCerts = new Option("c", "cert", true, "use external semicolon separated X.509 certificate files")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ optCerts.setArgName("certificates")[ CD ]
Line_4 $$ Option optCerts = new Option("c", "cert", true, "use external semicolon separated X.509 certificate files")-->Line_5 $$ optCerts.setArgName("certificates")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ Option optPasswd = new Option("p", "password", true, "set password for opening PDF")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ optPasswd.setArgName("password")[ CD ]
Line_6 $$ Option optPasswd = new Option("p", "password", true, "set password for opening PDF")-->Line_7 $$ optPasswd.setArgName("password")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ Option optExtract = new Option("e", "extract", true, "extract signed PDF revisions to given folder")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ optExtract.setArgName("folder")[ CD ]
Line_8 $$ Option optExtract = new Option("e", "extract", true, "extract signed PDF revisions to given folder")-->Line_9 $$ optExtract.setArgName("folder")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ Option optListKs = new Option("lk", "list-keystore-types", false, "list keystore types provided by java")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ Option optListCert = new Option("lc", "list-certificates", false, "list certificate aliases in a KeyStore")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ Option optKsType = new Option("kt", "keystore-type", true, "use keystore type with given name")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ optKsType.setArgName("keystore_type")[ CD ]
Line_12 $$ Option optKsType = new Option("kt", "keystore-type", true, "use keystore type with given name")-->Line_13 $$ optKsType.setArgName("keystore_type")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ Option optKsFile = new Option("kf", "keystore-file", true, "use given keystore file")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_15 $$ optKsFile.setArgName("file")[ CD ]
Line_14 $$ Option optKsFile = new Option("kf", "keystore-file", true, "use given keystore file")-->Line_15 $$ optKsFile.setArgName("file")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_16 $$ Option optKsPass = new Option("kp", "keystore-password", true, "password for keystore file (look on -kf option)")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_17 $$ optKsPass.setArgName("password")[ CD ]
Line_16 $$ Option optKsPass = new Option("kp", "keystore-password", true, "password for keystore file (look on -kf option)")-->Line_17 $$ optKsPass.setArgName("password")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_18 $$ Option optFailFast = new Option("ff", "fail-fast", true, "flag which sets the Verifier to exit with error code on the first validation failure")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_19 $$ final Options options = new Options()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_20 $$ options.addOption(optHelp)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_20 $$ options.addOption(optHelp)[ FD ]
Line_3 $$ Option optHelp = new Option("h", "help", false, "print this message")-->Line_20 $$ options.addOption(optHelp)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_21 $$ options.addOption(optCerts)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_21 $$ options.addOption(optCerts)[ FD ]
Line_4 $$ Option optCerts = new Option("c", "cert", true, "use external semicolon separated X.509 certificate files")-->Line_21 $$ options.addOption(optCerts)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_22 $$ options.addOption(optPasswd)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_22 $$ options.addOption(optPasswd)[ FD ]
Line_6 $$ Option optPasswd = new Option("p", "password", true, "set password for opening PDF")-->Line_22 $$ options.addOption(optPasswd)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_23 $$ options.addOption(optExtract)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_23 $$ options.addOption(optExtract)[ FD ]
Line_8 $$ Option optExtract = new Option("e", "extract", true, "extract signed PDF revisions to given folder")-->Line_23 $$ options.addOption(optExtract)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_24 $$ options.addOption(optListKs)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_24 $$ options.addOption(optListKs)[ FD ]
Line_10 $$ Option optListKs = new Option("lk", "list-keystore-types", false, "list keystore types provided by java")-->Line_24 $$ options.addOption(optListKs)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_25 $$ options.addOption(optListCert)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_25 $$ options.addOption(optListCert)[ FD ]
Line_11 $$ Option optListCert = new Option("lc", "list-certificates", false, "list certificate aliases in a KeyStore")-->Line_25 $$ options.addOption(optListCert)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_26 $$ options.addOption(optKsType)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_26 $$ options.addOption(optKsType)[ FD ]
Line_12 $$ Option optKsType = new Option("kt", "keystore-type", true, "use keystore type with given name")-->Line_26 $$ options.addOption(optKsType)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_27 $$ options.addOption(optKsFile)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_27 $$ options.addOption(optKsFile)[ FD ]
Line_14 $$ Option optKsFile = new Option("kf", "keystore-file", true, "use given keystore file")-->Line_27 $$ options.addOption(optKsFile)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_28 $$ options.addOption(optKsPass)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_28 $$ options.addOption(optKsPass)[ FD ]
Line_16 $$ Option optKsPass = new Option("kp", "keystore-password", true, "password for keystore file (look on -kf option)")-->Line_28 $$ options.addOption(optKsPass)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_29 $$ options.addOption(optFailFast)[ CD ]
Line_19 $$ final Options options = new Options()-->Line_29 $$ options.addOption(optFailFast)[ FD ]
Line_18 $$ Option optFailFast = new Option("ff", "fail-fast", true, "flag which sets the Verifier to exit with error code on the first validation failure")-->Line_29 $$ options.addOption(optFailFast)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_30 $$ CommandLine line = null[ CD ]
Line_30 $$ CommandLine line = null-->Line_33 $$ line = parser.parse(options, args)[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_33 $$ line = parser.parse(options, args)[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_33 $$ line = parser.parse(options, args)[ CD ]
Line_32 $$ CommandLineParser parser = new PosixParser()-->Line_33 $$ line = parser.parse(options, args)[ FD ]
Line_19 $$ final Options options = new Options()-->Line_33 $$ line = parser.parse(options, args)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_33 $$ line = parser.parse(options, args)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_38 $$ final boolean failFast = line.hasOption("ff")[ CD ]
Line_38 $$ final boolean failFast = line.hasOption("ff")-->Line_38 $$ final boolean failFast = line.hasOption("ff")[ CD ]
Line_30 $$ CommandLine line = null-->Line_38 $$ final boolean failFast = line.hasOption("ff")[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_38 $$ final boolean failFast = line.hasOption("ff")[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_39 $$ final String[] tmpArgs = line.getArgs()[ CD ]
Line_39 $$ final String[] tmpArgs = line.getArgs()-->Line_39 $$ final String[] tmpArgs = line.getArgs()[ CD ]
Line_30 $$ CommandLine line = null-->Line_39 $$ final String[] tmpArgs = line.getArgs()[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_39 $$ final String[] tmpArgs = line.getArgs()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_40 $$ if (line.hasOption("h") || args == null || args.length == 0) [ CD ]
Line_30 $$ CommandLine line = null-->Line_40 $$ if (line.hasOption("h") || args == null || args.length == 0) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_40 $$ if (line.hasOption("h") || args == null || args.length == 0) [ FD ]
Line_40 $$ if (line.hasOption("h") || args == null || args.length == 0) -->Line_41 $$ HelpFormatter formatter = new HelpFormatter()[ CD ]
Line_40 $$ if (line.hasOption("h") || args == null || args.length == 0) -->Line_42 $$ formatter.printHelp(70, "java -jar Verifier.jar [file1.pdf [file2.pdf ...]]", "JSignPdf Verifier is a command line tool for verifying signed PDF documents.", options, null, true)[ CD ]
Line_41 $$ HelpFormatter formatter = new HelpFormatter()-->Line_42 $$ formatter.printHelp(70, "java -jar Verifier.jar [file1.pdf [file2.pdf ...]]", "JSignPdf Verifier is a command line tool for verifying signed PDF documents.", options, null, true)[ FD ]
Line_19 $$ final Options options = new Options()-->Line_42 $$ formatter.printHelp(70, "java -jar Verifier.jar [file1.pdf [file2.pdf ...]]", "JSignPdf Verifier is a command line tool for verifying signed PDF documents.", options, null, true)[ FD ]
Line_40 $$ if (line.hasOption("h") || args == null || args.length == 0) -->Line_43 $$ if (line.hasOption("lk")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_43 $$ if (line.hasOption("lk")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_43 $$ if (line.hasOption("lk")) [ FD ]
Line_43 $$ if (line.hasOption("lk")) -->Line_43 $$ if (line.hasOption("lk")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_43 $$ if (line.hasOption("lk")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_43 $$ if (line.hasOption("lk")) [ FD ]
Line_44 $$ for (String tmpKsType : KeyStoreUtils.getKeyStores()) -->Line_45 $$ System.out.println(tmpKsType)[ FD ]
Line_43 $$ if (line.hasOption("lk")) -->Line_47 $$ if (line.hasOption("lc")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_47 $$ if (line.hasOption("lc")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_47 $$ if (line.hasOption("lc")) [ FD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_47 $$ if (line.hasOption("lc")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_47 $$ if (line.hasOption("lc")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_47 $$ if (line.hasOption("lc")) [ FD ]
Line_30 $$ CommandLine line = null-->Line_48 $$ for (String tmpCert : KeyStoreUtils.getCertAliases(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_48 $$ for (String tmpCert : KeyStoreUtils.getCertAliases(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))) [ FD ]
Line_30 $$ CommandLine line = null-->Line_48 $$ for (String tmpCert : KeyStoreUtils.getCertAliases(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_48 $$ for (String tmpCert : KeyStoreUtils.getCertAliases(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))) [ FD ]
Line_30 $$ CommandLine line = null-->Line_48 $$ for (String tmpCert : KeyStoreUtils.getCertAliases(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_48 $$ for (String tmpCert : KeyStoreUtils.getCertAliases(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))) [ FD ]
Line_48 $$ for (String tmpCert : KeyStoreUtils.getCertAliases(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))) -->Line_49 $$ System.out.println(tmpCert)[ FD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))[ CD ]
Line_30 $$ CommandLine line = null-->Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))[ FD ]
Line_30 $$ CommandLine line = null-->Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))[ FD ]
Line_30 $$ CommandLine line = null-->Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))[ FD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_53 $$ tmpLogic.setFailFast(failFast)[ CD ]
Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))-->Line_53 $$ tmpLogic.setFailFast(failFast)[ FD ]
Line_38 $$ final boolean failFast = line.hasOption("ff")-->Line_53 $$ tmpLogic.setFailFast(failFast)[ FD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_54 $$ if (line.hasOption("c")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_54 $$ if (line.hasOption("c")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_54 $$ if (line.hasOption("c")) [ FD ]
Line_54 $$ if (line.hasOption("c")) -->Line_54 $$ if (line.hasOption("c")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_54 $$ if (line.hasOption("c")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_54 $$ if (line.hasOption("c")) [ FD ]
Line_54 $$ if (line.hasOption("c")) -->Line_55 $$ String tmpCertFiles = line.getOptionValue("c")[ CD ]
Line_55 $$ String tmpCertFiles = line.getOptionValue("c")-->Line_55 $$ String tmpCertFiles = line.getOptionValue("c")[ CD ]
Line_30 $$ CommandLine line = null-->Line_55 $$ String tmpCertFiles = line.getOptionValue("c")[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_55 $$ String tmpCertFiles = line.getOptionValue("c")[ FD ]
Line_55 $$ String tmpCertFiles = line.getOptionValue("c")-->Line_56 $$ for (String tmpCFile : tmpCertFiles.split(";")) [ FD ]
Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))-->Line_57 $$ tmpLogic.addX509CertFile(tmpCFile)[ FD ]
Line_56 $$ for (String tmpCFile : tmpCertFiles.split(";")) -->Line_57 $$ tmpLogic.addX509CertFile(tmpCFile)[ FD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_60 $$ byte[] tmpPasswd = null[ CD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_61 $$ if (line.hasOption("p")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_61 $$ if (line.hasOption("p")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_61 $$ if (line.hasOption("p")) [ FD ]
Line_61 $$ if (line.hasOption("p")) -->Line_61 $$ if (line.hasOption("p")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_61 $$ if (line.hasOption("p")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_61 $$ if (line.hasOption("p")) [ FD ]
Line_61 $$ if (line.hasOption("p")) -->Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()[ CD ]
Line_60 $$ byte[] tmpPasswd = null-->Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()[ FD ]
Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()-->Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()[ FD ]
Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()-->Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()[ CD ]
Line_30 $$ CommandLine line = null-->Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()[ FD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_64 $$ String tmpExtractDir = null[ CD ]
Line_47 $$ if (line.hasOption("lc")) -->Line_65 $$ if (line.hasOption("e")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_65 $$ if (line.hasOption("e")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_65 $$ if (line.hasOption("e")) [ FD ]
Line_65 $$ if (line.hasOption("e")) -->Line_65 $$ if (line.hasOption("e")) [ CD ]
Line_30 $$ CommandLine line = null-->Line_65 $$ if (line.hasOption("e")) [ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_65 $$ if (line.hasOption("e")) [ FD ]
Line_65 $$ if (line.hasOption("e")) -->Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()[ CD ]
Line_64 $$ String tmpExtractDir = null-->Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()[ FD ]
Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()-->Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()[ FD ]
Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()-->Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()[ CD ]
Line_30 $$ CommandLine line = null-->Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()[ FD ]
Line_33 $$ line = parser.parse(options, args)-->Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()[ FD ]
Line_71 $$ if (!tmpFile.canRead()) -->Line_71 $$ if (!tmpFile.canRead()) [ CD ]
Line_71 $$ if (!tmpFile.canRead()) -->Line_71 $$ if (!tmpFile.canRead()) [ CD ]
Line_70 $$ final File tmpFile = new File(tmpFilePath)-->Line_71 $$ if (!tmpFile.canRead()) [ FD ]
Line_71 $$ if (!tmpFile.canRead()) -->Line_72 $$ System.err.println("Couln't read the file. Check the path and permissions.")[ CD ]
Line_71 $$ if (!tmpFile.canRead()) -->Line_73 $$ if (failFast) [ CD ]
Line_73 $$ if (failFast) -->Line_74 $$ System.exit(-1)[ CD ]
Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)-->Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)[ CD ]
Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))-->Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)[ FD ]
Line_68 $$ for (String tmpFilePath : tmpArgs) -->Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)[ FD ]
Line_60 $$ byte[] tmpPasswd = null-->Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)[ FD ]
Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()-->Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)[ FD ]
Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)-->Line_79 $$ if (tmpResult.getException() != null) [ FD ]
Line_79 $$ if (tmpResult.getException() != null) -->Line_80 $$ tmpResult.getException().printStackTrace()[ CD ]
Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)-->Line_80 $$ tmpResult.getException().printStackTrace()[ FD ]
Line_79 $$ if (tmpResult.getException() != null) -->Line_81 $$ System.exit(-1)[ CD ]
Line_79 $$ if (tmpResult.getException() != null) -->Line_83 $$ System.out.println("Total revisions: " + tmpResult.getTotalRevisions())[ CD ]
Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)-->Line_83 $$ System.out.println("Total revisions: " + tmpResult.getTotalRevisions())[ FD ]
Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)-->Line_84 $$ for (SignatureVerification tmpSigVer : tmpResult.getVerifications()) [ FD ]
Line_84 $$ for (SignatureVerification tmpSigVer : tmpResult.getVerifications()) -->Line_85 $$ System.out.println(tmpSigVer.toString())[ FD ]
Line_64 $$ String tmpExtractDir = null-->Line_86 $$ if (tmpExtractDir != null) [ FD ]
Line_66 $$ tmpExtractDir = new File(line.getOptionValue("e")).getPath()-->Line_86 $$ if (tmpExtractDir != null) [ FD ]
Line_70 $$ final File tmpFile = new File(tmpFilePath)-->Line_88 $$ File tmpExFile = new File(tmpExtractDir + "/" + tmpFile.getName() + "_" + tmpSigVer.getRevision() + ".pdf")[ FD ]
Line_84 $$ for (SignatureVerification tmpSigVer : tmpResult.getVerifications()) -->Line_88 $$ File tmpExFile = new File(tmpExtractDir + "/" + tmpFile.getName() + "_" + tmpSigVer.getRevision() + ".pdf")[ FD ]
Line_88 $$ File tmpExFile = new File(tmpExtractDir + "/" + tmpFile.getName() + "_" + tmpSigVer.getRevision() + ".pdf")-->Line_89 $$ System.out.println("Extracting to " + tmpExFile.getCanonicalPath())[ FD ]
Line_88 $$ File tmpExFile = new File(tmpExtractDir + "/" + tmpFile.getName() + "_" + tmpSigVer.getRevision() + ".pdf")-->Line_90 $$ FileOutputStream tmpFOS = new FileOutputStream(tmpExFile.getCanonicalPath())[ FD ]
Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())-->Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())[ CD ]
Line_52 $$ final VerifierLogic tmpLogic = new VerifierLogic(line.getOptionValue("kt"), line.getOptionValue("kf"), line.getOptionValue("kp"))-->Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())[ FD ]
Line_68 $$ for (String tmpFilePath : tmpArgs) -->Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())[ FD ]
Line_60 $$ byte[] tmpPasswd = null-->Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())[ FD ]
Line_62 $$ tmpPasswd = line.getOptionValue("p").getBytes()-->Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())[ FD ]
Line_84 $$ for (SignatureVerification tmpSigVer : tmpResult.getVerifications()) -->Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())[ FD ]
Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())-->Line_92 $$ IOUtils.copy(tmpIS, tmpFOS)[ FD ]
Line_90 $$ FileOutputStream tmpFOS = new FileOutputStream(tmpExFile.getCanonicalPath())-->Line_92 $$ IOUtils.copy(tmpIS, tmpFOS)[ FD ]
Line_91 $$ InputStream tmpIS = tmpLogic.extractRevision(tmpFilePath, tmpPasswd, tmpSigVer.getName())-->Line_93 $$ tmpIS.close()[ FD ]
Line_90 $$ FileOutputStream tmpFOS = new FileOutputStream(tmpExFile.getCanonicalPath())-->Line_94 $$ tmpFOS.close()[ FD ]
Line_79 $$ if (tmpResult.getException() != null) -->Line_100 $$ if (failFast && SignatureVerification.isError(tmpResult.getVerificationResultCode())) [ CD ]
Line_38 $$ final boolean failFast = line.hasOption("ff")-->Line_100 $$ if (failFast && SignatureVerification.isError(tmpResult.getVerificationResultCode())) [ FD ]
Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)-->Line_100 $$ if (failFast && SignatureVerification.isError(tmpResult.getVerificationResultCode())) [ FD ]
Line_100 $$ if (failFast && SignatureVerification.isError(tmpResult.getVerificationResultCode())) -->Line_101 $$ System.exit(tmpResult.getVerificationResultCode())[ CD ]
Line_78 $$ final VerificationResult tmpResult = tmpLogic.verify(tmpFilePath, tmpPasswd)-->Line_101 $$ System.exit(tmpResult.getVerificationResultCode())[ FD ]
