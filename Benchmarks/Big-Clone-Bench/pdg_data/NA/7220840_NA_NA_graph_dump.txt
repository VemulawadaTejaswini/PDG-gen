Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testSecondary() throws Exception [ CD ]
Line_2 $$ public void testSecondary() throws Exception -->Line_3 $$ ConnectionFactoryIF cf = new DefaultConnectionFactory(PropertyUtils.loadProperties(StreamUtils.getInputStream(propfile)), false)[ CD ]
Line_2 $$ public void testSecondary() throws Exception -->Line_4 $$ Connection conn = cf.requestConnection()[ CD ]
Line_4 $$ Connection conn = cf.requestConnection()-->Line_4 $$ Connection conn = cf.requestConnection()[ CD ]
Line_3 $$ ConnectionFactoryIF cf = new DefaultConnectionFactory(PropertyUtils.loadProperties(StreamUtils.getInputStream(propfile)), false)-->Line_4 $$ Connection conn = cf.requestConnection()[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_6 $$ Statement stm = conn.createStatement()[ CD ]
Line_4 $$ Connection conn = cf.requestConnection()-->Line_6 $$ Statement stm = conn.createStatement()[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_7 $$ stm.executeUpdate("drop table if exists first")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_8 $$ stm.executeUpdate("drop table if exists first_changes")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_9 $$ stm.executeUpdate("drop table if exists second")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_10 $$ stm.executeUpdate("drop table if exists second_changes")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_11 $$ stm.executeUpdate("create table first (a integer, b varchar, c integer, d date)")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_12 $$ stm.executeUpdate("create table first_changes (a integer, b varchar, c integer, d date, ct varchar, cd integer)")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_13 $$ stm.executeUpdate("create table second (a integer, b varchar, c integer, d date)")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_14 $$ stm.executeUpdate("create table second_changes (a integer, b varchar, c integer, d date, ct varchar, cd integer)")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_15 $$ stm.executeUpdate("insert into first (a,b,c,d) values (1,'a',10, date '2007-01-01')")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_16 $$ stm.executeUpdate("insert into first (a,b,c,d) values (2,'b',20, date '2007-01-02')")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_17 $$ stm.executeUpdate("insert into first (a,b,c,d) values (3,'c',30, date '2007-01-03')")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_18 $$ stm.executeUpdate("insert into first (a,b,c,d) values (4,'d',40, date '2007-01-04')")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_19 $$ stm.executeUpdate("insert into second (a,b,c,d) values (1,'e',50, date '2007-02-01')")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_20 $$ stm.executeUpdate("insert into second (a,b,c,d) values (2,'f',60, date '2007-02-02')")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_21 $$ stm.executeUpdate("insert into second (a,b,c,d) values (3,'g',70, date '2007-02-03')")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_22 $$ stm.executeUpdate("insert into second (a,b,c,d) values (4,'h',80, date '2007-02-04')")[ FD ]
Line_4 $$ Connection conn = cf.requestConnection()-->Line_23 $$ conn.commit()[ FD ]
Line_24 $$ RelationMapping mapping = RelationMapping.readFromClasspath("net/ontopia/topicmaps/db2tm/JDBCDataSourceTest-secondary.xml")-->Line_24 $$ RelationMapping mapping = RelationMapping.readFromClasspath("net/ontopia/topicmaps/db2tm/JDBCDataSourceTest-secondary.xml")[ CD ]
Line_26 $$ LocatorIF baseloc = URIUtils.getURILocator("base:foo")-->Line_26 $$ LocatorIF baseloc = URIUtils.getURILocator("base:foo")[ CD ]
Line_25 $$ TopicMapStoreIF store = new InMemoryTopicMapStore()-->Line_27 $$ store.setBaseAddress(baseloc)[ FD ]
Line_26 $$ LocatorIF baseloc = URIUtils.getURILocator("base:foo")-->Line_27 $$ store.setBaseAddress(baseloc)[ FD ]
Line_28 $$ TopicMapIF topicmap = store.getTopicMap()-->Line_28 $$ TopicMapIF topicmap = store.getTopicMap()[ CD ]
Line_25 $$ TopicMapStoreIF store = new InMemoryTopicMapStore()-->Line_28 $$ TopicMapIF topicmap = store.getTopicMap()[ FD ]
Line_24 $$ RelationMapping mapping = RelationMapping.readFromClasspath("net/ontopia/topicmaps/db2tm/JDBCDataSourceTest-secondary.xml")-->Line_29 $$ Processor.addRelations(mapping, null, topicmap, baseloc)[ FD ]
Line_28 $$ TopicMapIF topicmap = store.getTopicMap()-->Line_29 $$ Processor.addRelations(mapping, null, topicmap, baseloc)[ FD ]
Line_26 $$ LocatorIF baseloc = URIUtils.getURILocator("base:foo")-->Line_29 $$ Processor.addRelations(mapping, null, topicmap, baseloc)[ FD ]
Line_28 $$ TopicMapIF topicmap = store.getTopicMap()-->Line_30 $$ exportTopicMap(topicmap, "after-first-sync")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_31 $$ stm.executeUpdate("insert into second_changes (a,b,c,d,ct,cd) values (2,'f',60,date '2007-02-02', 'r', 2)")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_32 $$ stm.executeUpdate("delete from second where a = 2")[ FD ]
Line_4 $$ Connection conn = cf.requestConnection()-->Line_33 $$ conn.commit()[ FD ]
Line_24 $$ RelationMapping mapping = RelationMapping.readFromClasspath("net/ontopia/topicmaps/db2tm/JDBCDataSourceTest-secondary.xml")-->Line_34 $$ Processor.synchronizeRelations(mapping, null, topicmap, baseloc)[ FD ]
Line_28 $$ TopicMapIF topicmap = store.getTopicMap()-->Line_34 $$ Processor.synchronizeRelations(mapping, null, topicmap, baseloc)[ FD ]
Line_26 $$ LocatorIF baseloc = URIUtils.getURILocator("base:foo")-->Line_34 $$ Processor.synchronizeRelations(mapping, null, topicmap, baseloc)[ FD ]
Line_28 $$ TopicMapIF topicmap = store.getTopicMap()-->Line_35 $$ exportTopicMap(topicmap, "after-second-sync")[ FD ]
Line_24 $$ RelationMapping mapping = RelationMapping.readFromClasspath("net/ontopia/topicmaps/db2tm/JDBCDataSourceTest-secondary.xml")-->Line_36 $$ mapping.close()[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_37 $$ stm.executeUpdate("drop table first")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_38 $$ stm.executeUpdate("drop table first_changes")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_39 $$ stm.executeUpdate("drop table second")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_40 $$ stm.executeUpdate("drop table second_changes")[ FD ]
Line_6 $$ Statement stm = conn.createStatement()-->Line_41 $$ stm.close()[ FD ]
Line_25 $$ TopicMapStoreIF store = new InMemoryTopicMapStore()-->Line_42 $$ store.close()[ FD ]
Line_4 $$ Connection conn = cf.requestConnection()-->Line_43 $$ conn.commit()[ FD ]
Line_4 $$ Connection conn = cf.requestConnection()-->Line_45 $$ conn.rollback()[ FD ]
Line_4 $$ Connection conn = cf.requestConnection()-->Line_48 $$ conn.close()[ FD ]
