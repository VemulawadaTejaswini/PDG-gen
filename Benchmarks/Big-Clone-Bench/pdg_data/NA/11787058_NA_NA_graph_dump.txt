Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_3 $$ login = login.trim().toLowerCase()[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_3 $$ login = login.trim().toLowerCase()[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_3 $$ login = login.trim().toLowerCase()[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_3 $$ login = login.trim().toLowerCase()[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_3 $$ login = login.trim().toLowerCase()[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_3 $$ login = login.trim().toLowerCase()[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_4 $$ long userId = GetterUtil.getLong(login)[ CD ]
Line_4 $$ long userId = GetterUtil.getLong(login)-->Line_4 $$ long userId = GetterUtil.getLong(login)[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_4 $$ long userId = GetterUtil.getLong(login)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_4 $$ long userId = GetterUtil.getLong(login)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_5 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_5 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_5 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_5 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_5 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_5 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_6 $$ if (!Validator.isEmailAddress(login)) [ CD ]
Line_6 $$ if (!Validator.isEmailAddress(login)) -->Line_6 $$ if (!Validator.isEmailAddress(login)) [ CD ]
Line_6 $$ if (!Validator.isEmailAddress(login)) -->Line_6 $$ if (!Validator.isEmailAddress(login)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_6 $$ if (!Validator.isEmailAddress(login)) [ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_6 $$ if (!Validator.isEmailAddress(login)) [ FD ]
Line_5 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_9 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_9 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_9 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_9 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_9 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_9 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_10 $$ if (Validator.isNull(login)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_10 $$ if (Validator.isNull(login)) [ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_10 $$ if (Validator.isNull(login)) [ FD ]
Line_10 $$ if (Validator.isNull(login)) -->Line_10 $$ if (Validator.isNull(login)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_10 $$ if (Validator.isNull(login)) [ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_10 $$ if (Validator.isNull(login)) [ FD ]
Line_9 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_13 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_13 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_13 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_13 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_13 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_13 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_14 $$ if (Validator.isNull(login)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_14 $$ if (Validator.isNull(login)) [ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_14 $$ if (Validator.isNull(login)) [ FD ]
Line_14 $$ if (Validator.isNull(login)) -->Line_14 $$ if (Validator.isNull(login)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_14 $$ if (Validator.isNull(login)) [ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_14 $$ if (Validator.isNull(login)) [ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_18 $$ if (Validator.isNull(password)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_18 $$ if (Validator.isNull(password)) [ FD ]
Line_18 $$ if (Validator.isNull(password)) -->Line_18 $$ if (Validator.isNull(password)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_18 $$ if (Validator.isNull(password)) [ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_21 $$ int authResult = Authenticator.FAILURE[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_22 $$ String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE)[ CD ]
Line_22 $$ String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE)-->Line_22 $$ String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE)[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_23 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_23 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_23 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_23 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_23 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_23 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_22 $$ String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE)-->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_23 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_25 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_25 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_25 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_25 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_25 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_25 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_22 $$ String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE)-->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_25 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_27 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_27 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_27 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_27 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_27 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_27 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ CD ]
Line_22 $$ String[] authPipelinePre = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_PRE)-->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_4 $$ long userId = GetterUtil.getLong(login)-->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_30 $$ User user = null[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_32 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_32 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_32 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_32 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_32 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_33 $$ user = UserUtil.findByC_EA(companyId, login)[ CD ]
Line_30 $$ User user = null-->Line_33 $$ user = UserUtil.findByC_EA(companyId, login)[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_33 $$ user = UserUtil.findByC_EA(companyId, login)[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_33 $$ user = UserUtil.findByC_EA(companyId, login)[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_33 $$ user = UserUtil.findByC_EA(companyId, login)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_33 $$ user = UserUtil.findByC_EA(companyId, login)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_33 $$ user = UserUtil.findByC_EA(companyId, login)[ FD ]
Line_32 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_34 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_34 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_34 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_34 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_34 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_34 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ CD ]
Line_30 $$ User user = null-->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_35 $$ user = UserUtil.findByC_SN(companyId, login)[ FD ]
Line_34 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_36 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_36 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_36 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_36 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_36 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_36 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ CD ]
Line_30 $$ User user = null-->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_42 $$ if (user.isDefaultUser()) [ CD ]
Line_30 $$ User user = null-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_42 $$ if (user.isDefaultUser()) -->Line_42 $$ if (user.isDefaultUser()) [ CD ]
Line_30 $$ User user = null-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_42 $$ if (user.isDefaultUser()) [ FD ]
Line_42 $$ if (user.isDefaultUser()) -->Line_43 $$ _log.error("The default user should never be allowed to authenticate")[ CD ]
Line_42 $$ if (user.isDefaultUser()) -->Line_44 $$ return Authenticator.DNE[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_46 $$ if (!user.isPasswordEncrypted()) [ CD ]
Line_46 $$ if (!user.isPasswordEncrypted()) -->Line_46 $$ if (!user.isPasswordEncrypted()) [ CD ]
Line_46 $$ if (!user.isPasswordEncrypted()) -->Line_46 $$ if (!user.isPasswordEncrypted()) [ CD ]
Line_30 $$ User user = null-->Line_46 $$ if (!user.isPasswordEncrypted()) [ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_46 $$ if (!user.isPasswordEncrypted()) [ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_46 $$ if (!user.isPasswordEncrypted()) [ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_46 $$ if (!user.isPasswordEncrypted()) [ FD ]
Line_46 $$ if (!user.isPasswordEncrypted()) -->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ CD ]
Line_30 $$ User user = null-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_30 $$ User user = null-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_47 $$ user.setPassword(PwdEncryptor.encrypt(user.getPassword()))[ FD ]
Line_46 $$ if (!user.isPasswordEncrypted()) -->Line_48 $$ user.setPasswordEncrypted(true)[ CD ]
Line_30 $$ User user = null-->Line_48 $$ user.setPasswordEncrypted(true)[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_48 $$ user.setPasswordEncrypted(true)[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_48 $$ user.setPasswordEncrypted(true)[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_48 $$ user.setPasswordEncrypted(true)[ FD ]
Line_46 $$ if (!user.isPasswordEncrypted()) -->Line_49 $$ UserUtil.update(user)[ CD ]
Line_30 $$ User user = null-->Line_49 $$ UserUtil.update(user)[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_49 $$ UserUtil.update(user)[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_49 $$ UserUtil.update(user)[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_49 $$ UserUtil.update(user)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_51 $$ checkLockout(user)[ CD ]
Line_30 $$ User user = null-->Line_51 $$ checkLockout(user)[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_51 $$ checkLockout(user)[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_51 $$ checkLockout(user)[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_51 $$ checkLockout(user)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_52 $$ checkPasswordExpired(user)[ CD ]
Line_30 $$ User user = null-->Line_52 $$ checkPasswordExpired(user)[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_52 $$ checkPasswordExpired(user)[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_52 $$ checkPasswordExpired(user)[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_52 $$ checkPasswordExpired(user)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_53 $$ if (authResult == Authenticator.SUCCESS) [ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_53 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_53 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_53 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_53 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_53 $$ if (authResult == Authenticator.SUCCESS) -->Line_54 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) [ CD ]
Line_54 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) -->Line_54 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) [ CD ]
Line_54 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) -->Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())[ CD ]
Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())-->Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())[ FD ]
Line_30 $$ User user = null-->Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())[ FD ]
Line_54 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_PIPELINE_ENABLE_LIFERAY_CHECK))) -->Line_56 $$ if (user.getPassword().equals(encPwd)) [ CD ]
Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())-->Line_56 $$ if (user.getPassword().equals(encPwd)) [ FD ]
Line_56 $$ if (user.getPassword().equals(encPwd)) -->Line_56 $$ if (user.getPassword().equals(encPwd)) [ CD ]
Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())-->Line_56 $$ if (user.getPassword().equals(encPwd)) [ FD ]
Line_30 $$ User user = null-->Line_56 $$ if (user.getPassword().equals(encPwd)) [ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_56 $$ if (user.getPassword().equals(encPwd)) [ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_56 $$ if (user.getPassword().equals(encPwd)) [ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_56 $$ if (user.getPassword().equals(encPwd)) [ FD ]
Line_56 $$ if (user.getPassword().equals(encPwd)) -->Line_57 $$ authResult = Authenticator.SUCCESS[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_57 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_57 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_57 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_57 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_57 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_56 $$ if (user.getPassword().equals(encPwd)) -->Line_58 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_MAC_ALLOW))) [ CD ]
Line_58 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_MAC_ALLOW))) -->Line_58 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_MAC_ALLOW))) [ CD ]
Line_60 $$ MessageDigest digester = MessageDigest.getInstance(PropsUtil.get(PropsUtil.AUTH_MAC_ALGORITHM))-->Line_60 $$ MessageDigest digester = MessageDigest.getInstance(PropsUtil.get(PropsUtil.AUTH_MAC_ALGORITHM))[ CD ]
Line_60 $$ MessageDigest digester = MessageDigest.getInstance(PropsUtil.get(PropsUtil.AUTH_MAC_ALGORITHM))-->Line_61 $$ digester.update(login.getBytes("UTF8"))[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_61 $$ digester.update(login.getBytes("UTF8"))[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_61 $$ digester.update(login.getBytes("UTF8"))[ FD ]
Line_62 $$ String shardKey = PropsUtil.get(PropsUtil.AUTH_MAC_SHARED_KEY)-->Line_62 $$ String shardKey = PropsUtil.get(PropsUtil.AUTH_MAC_SHARED_KEY)[ CD ]
Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())-->Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))[ FD ]
Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))-->Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))[ FD ]
Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))-->Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))[ CD ]
Line_60 $$ MessageDigest digester = MessageDigest.getInstance(PropsUtil.get(PropsUtil.AUTH_MAC_ALGORITHM))-->Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))[ FD ]
Line_62 $$ String shardKey = PropsUtil.get(PropsUtil.AUTH_MAC_SHARED_KEY)-->Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_64 $$ if (password.equals(encPwd)) [ FD ]
Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())-->Line_64 $$ if (password.equals(encPwd)) [ FD ]
Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))-->Line_64 $$ if (password.equals(encPwd)) [ FD ]
Line_64 $$ if (password.equals(encPwd)) -->Line_64 $$ if (password.equals(encPwd)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_64 $$ if (password.equals(encPwd)) [ FD ]
Line_55 $$ String encPwd = PwdEncryptor.encrypt(password, user.getPassword())-->Line_64 $$ if (password.equals(encPwd)) [ FD ]
Line_63 $$ encPwd = Base64.encode(digester.digest(shardKey.getBytes("UTF8")))-->Line_64 $$ if (password.equals(encPwd)) [ FD ]
Line_64 $$ if (password.equals(encPwd)) -->Line_65 $$ authResult = Authenticator.SUCCESS[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_65 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_65 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_65 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_65 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_65 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_65 $$ authResult = Authenticator.SUCCESS[ FD ]
Line_64 $$ if (password.equals(encPwd)) -->Line_67 $$ authResult = Authenticator.FAILURE[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_67 $$ authResult = Authenticator.FAILURE[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_67 $$ authResult = Authenticator.FAILURE[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_67 $$ authResult = Authenticator.FAILURE[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_67 $$ authResult = Authenticator.FAILURE[ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_67 $$ authResult = Authenticator.FAILURE[ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_67 $$ authResult = Authenticator.FAILURE[ FD ]
Line_67 $$ authResult = Authenticator.FAILURE-->Line_67 $$ authResult = Authenticator.FAILURE[ FD ]
Line_58 $$ if (GetterUtil.getBoolean(PropsUtil.get(PropsUtil.AUTH_MAC_ALLOW))) -->Line_75 $$ authResult = Authenticator.FAILURE[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_67 $$ authResult = Authenticator.FAILURE-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_75 $$ authResult = Authenticator.FAILURE-->Line_75 $$ authResult = Authenticator.FAILURE[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_67 $$ authResult = Authenticator.FAILURE-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_75 $$ authResult = Authenticator.FAILURE-->Line_79 $$ if (authResult == Authenticator.SUCCESS) [ FD ]
Line_79 $$ if (authResult == Authenticator.SUCCESS) -->Line_80 $$ String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST)[ CD ]
Line_80 $$ String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST)-->Line_80 $$ String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST)[ CD ]
Line_79 $$ if (authResult == Authenticator.SUCCESS) -->Line_81 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_81 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_81 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_81 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_81 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_81 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_67 $$ authResult = Authenticator.FAILURE-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_75 $$ authResult = Authenticator.FAILURE-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_80 $$ String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST)-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_81 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_83 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_83 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_83 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_83 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_83 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_83 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_67 $$ authResult = Authenticator.FAILURE-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_75 $$ authResult = Authenticator.FAILURE-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ CD ]
Line_80 $$ String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST)-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)[ FD ]
Line_83 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_85 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_85 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_85 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_85 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_85 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_85 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_67 $$ authResult = Authenticator.FAILURE-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_75 $$ authResult = Authenticator.FAILURE-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ CD ]
Line_80 $$ String[] authPipelinePost = PropsUtil.getArray(PropsUtil.AUTH_PIPELINE_POST)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_4 $$ long userId = GetterUtil.getLong(login)-->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_89 $$ if (authResult == Authenticator.FAILURE) [ CD ]
Line_21 $$ int authResult = Authenticator.FAILURE-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_24 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_26 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePre, companyId, login, password, headerMap, parameterMap)-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_28 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePre, companyId, userId, password, headerMap, parameterMap)-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_57 $$ authResult = Authenticator.SUCCESS-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_65 $$ authResult = Authenticator.SUCCESS-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_67 $$ authResult = Authenticator.FAILURE-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_75 $$ authResult = Authenticator.FAILURE-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_82 $$ authResult = AuthPipeline.authenticateByEmailAddress(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_84 $$ authResult = AuthPipeline.authenticateByScreenName(authPipelinePost, companyId, login, password, headerMap, parameterMap)-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_86 $$ authResult = AuthPipeline.authenticateByUserId(authPipelinePost, companyId, userId, password, headerMap, parameterMap)-->Line_89 $$ if (authResult == Authenticator.FAILURE) [ FD ]
Line_91 $$ String[] authFailure = PropsUtil.getArray(PropsUtil.AUTH_FAILURE)-->Line_91 $$ String[] authFailure = PropsUtil.getArray(PropsUtil.AUTH_FAILURE)[ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_92 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_92 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_92 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_92 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_92 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_93 $$ AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap)[ CD ]
Line_91 $$ String[] authFailure = PropsUtil.getArray(PropsUtil.AUTH_FAILURE)-->Line_93 $$ AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_93 $$ AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_93 $$ AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_93 $$ AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_93 $$ AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_93 $$ AuthPipeline.onFailureByEmailAddress(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_92 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_94 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_94 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_94 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_94 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_94 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_94 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_95 $$ AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap)[ CD ]
Line_91 $$ String[] authFailure = PropsUtil.getArray(PropsUtil.AUTH_FAILURE)-->Line_95 $$ AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_95 $$ AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_95 $$ AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_95 $$ AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_95 $$ AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_95 $$ AuthPipeline.onFailureByScreenName(authFailure, companyId, login, headerMap, parameterMap)[ FD ]
Line_94 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_96 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_96 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_96 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_96 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_96 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_96 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_97 $$ AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap)[ CD ]
Line_91 $$ String[] authFailure = PropsUtil.getArray(PropsUtil.AUTH_FAILURE)-->Line_97 $$ AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_97 $$ AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap)[ FD ]
Line_4 $$ long userId = GetterUtil.getLong(login)-->Line_97 $$ AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_97 $$ AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_97 $$ AuthPipeline.onFailureByUserId(authFailure, companyId, userId, headerMap, parameterMap)[ FD ]
Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) -->Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) [ CD ]
Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) -->Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) [ CD ]
Line_30 $$ User user = null-->Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) [ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) [ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) [ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) [ FD ]
Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) -->Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()[ CD ]
Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()-->Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()[ CD ]
Line_30 $$ User user = null-->Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()[ FD ]
Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) -->Line_101 $$ int failedLoginAttempts = user.getFailedLoginAttempts()[ CD ]
Line_101 $$ int failedLoginAttempts = user.getFailedLoginAttempts()-->Line_101 $$ int failedLoginAttempts = user.getFailedLoginAttempts()[ CD ]
Line_30 $$ User user = null-->Line_101 $$ int failedLoginAttempts = user.getFailedLoginAttempts()[ FD ]
Line_33 $$ user = UserUtil.findByC_EA(companyId, login)-->Line_101 $$ int failedLoginAttempts = user.getFailedLoginAttempts()[ FD ]
Line_35 $$ user = UserUtil.findByC_SN(companyId, login)-->Line_101 $$ int failedLoginAttempts = user.getFailedLoginAttempts()[ FD ]
Line_37 $$ user = UserUtil.findByC_U(companyId, GetterUtil.getLong(login))-->Line_101 $$ int failedLoginAttempts = user.getFailedLoginAttempts()[ FD ]
Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) -->Line_102 $$ int maxFailures = passwordPolicy.getMaxFailure()[ CD ]
Line_102 $$ int maxFailures = passwordPolicy.getMaxFailure()-->Line_102 $$ int maxFailures = passwordPolicy.getMaxFailure()[ CD ]
Line_100 $$ PasswordPolicy passwordPolicy = user.getPasswordPolicy()-->Line_102 $$ int maxFailures = passwordPolicy.getMaxFailure()[ FD ]
Line_99 $$ if (!PortalLDAPUtil.isPasswordPolicyEnabled(user.getCompanyId())) -->Line_103 $$ if ((failedLoginAttempts >= maxFailures) && (maxFailures != 0)) [ CD ]
Line_103 $$ if ((failedLoginAttempts >= maxFailures) && (maxFailures != 0)) -->Line_104 $$ String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES)[ CD ]
Line_104 $$ String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES)-->Line_104 $$ String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES)[ CD ]
Line_103 $$ if ((failedLoginAttempts >= maxFailures) && (maxFailures != 0)) -->Line_105 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_105 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_105 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_105 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_105 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) [ FD ]
Line_105 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_106 $$ AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap)[ CD ]
Line_104 $$ String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES)-->Line_106 $$ AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_106 $$ AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_106 $$ AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_106 $$ AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_106 $$ AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_106 $$ AuthPipeline.onMaxFailuresByEmailAddress(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_105 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_EA)) -->Line_107 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_107 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_107 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_107 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_107 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) [ FD ]
Line_107 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_108 $$ AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap)[ CD ]
Line_104 $$ String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES)-->Line_108 $$ AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_108 $$ AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_108 $$ AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_3 $$ login = login.trim().toLowerCase()-->Line_108 $$ AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_108 $$ AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_108 $$ AuthPipeline.onMaxFailuresByScreenName(authMaxFailures, companyId, login, headerMap, parameterMap)[ FD ]
Line_107 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_SN)) -->Line_109 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_109 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_109 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_109 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ CD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_109 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) [ FD ]
Line_109 $$ if (authType.equals(CompanyImpl.AUTH_TYPE_ID)) -->Line_110 $$ AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap)[ CD ]
Line_104 $$ String[] authMaxFailures = PropsUtil.getArray(PropsUtil.AUTH_MAX_FAILURES)-->Line_110 $$ AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_110 $$ AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap)[ FD ]
Line_4 $$ long userId = GetterUtil.getLong(login)-->Line_110 $$ AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_110 $$ AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_110 $$ AuthPipeline.onMaxFailuresByUserId(authMaxFailures, companyId, userId, headerMap, parameterMap)[ FD ]
Line_2 $$ protected int authenticate(long companyId, String login, String password, String authType, Map headerMap, Map parameterMap) throws PortalException, SystemException -->Line_118 $$ return authResult[ CD ]
