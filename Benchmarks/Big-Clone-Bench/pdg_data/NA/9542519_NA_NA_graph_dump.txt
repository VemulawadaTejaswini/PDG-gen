Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void init() [ CD ]
Line_2 $$ public void init() -->Line_7 $$ thisThread.start()[ CD ]
Line_2 $$ public void init() -->Line_13 $$ String userpng = "images/" + username + ".png"[ CD ]
Line_2 $$ public void init() -->Line_14 $$ String userdat = "data/" + username + "_l.cod"[ CD ]
Line_2 $$ public void init() -->Line_15 $$ URL url = null[ CD ]
Line_15 $$ URL url = null-->Line_17 $$ url = new URL(base, userdat)[ FD ]
Line_17 $$ url = new URL(base, userdat)-->Line_17 $$ url = new URL(base, userdat)[ FD ]
Line_2 $$ public void init() -->Line_20 $$ InputStream in = null[ CD ]
Line_20 $$ InputStream in = null-->Line_22 $$ in = url.openStream()[ FD ]
Line_22 $$ in = url.openStream()-->Line_22 $$ in = url.openStream()[ FD ]
Line_22 $$ in = url.openStream()-->Line_22 $$ in = url.openStream()[ CD ]
Line_15 $$ URL url = null-->Line_22 $$ in = url.openStream()[ FD ]
Line_17 $$ url = new URL(base, userdat)-->Line_22 $$ in = url.openStream()[ FD ]
Line_2 $$ public void init() -->Line_25 $$ BufferedReader reader = null[ CD ]
Line_25 $$ BufferedReader reader = null-->Line_27 $$ reader = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_27 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_27 $$ reader = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_31 $$ String line = reader.readLine()-->Line_31 $$ String line = reader.readLine()[ CD ]
Line_25 $$ BufferedReader reader = null-->Line_31 $$ String line = reader.readLine()[ FD ]
Line_27 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_31 $$ String line = reader.readLine()[ FD ]
Line_33 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())-->Line_33 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ CD ]
Line_32 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_33 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_34 $$ this.topol = tokenizer.nextToken().trim().toLowerCase()-->Line_34 $$ this.topol = tokenizer.nextToken().trim().toLowerCase()[ CD ]
Line_32 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_34 $$ this.topol = tokenizer.nextToken().trim().toLowerCase()[ FD ]
Line_32 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_35 $$ xunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_32 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_36 $$ yunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_39 $$ for (int e = 0; e < yunit; e++) [ CD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_39 $$ for (int e = 0; e < yunit; e++) [ CD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_39 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_39 $$ for (int e = 0; e < yunit; e++) [ CD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_41 $$ line = reader.readLine()[ CD ]
Line_41 $$ line = reader.readLine()-->Line_41 $$ line = reader.readLine()[ FD ]
Line_31 $$ String line = reader.readLine()-->Line_41 $$ line = reader.readLine()[ FD ]
Line_41 $$ line = reader.readLine()-->Line_41 $$ line = reader.readLine()[ CD ]
Line_25 $$ BufferedReader reader = null-->Line_41 $$ line = reader.readLine()[ FD ]
Line_27 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_41 $$ line = reader.readLine()[ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_42 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")[ CD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int w = 0; w < dim; w++) [ CD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_33 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())-->Line_43 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_43 $$ for (int w = 0; w < dim; w++) -->Line_43 $$ for (int w = 0; w < dim; w++) [ CD ]
Line_43 $$ for (int w = 0; w < dim; w++) -->Line_43 $$ for (int w = 0; w < dim; w++) [ CD ]
Line_43 $$ for (int w = 0; w < dim; w++) -->Line_43 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_43 $$ for (int w = 0; w < dim; w++) -->Line_44 $$ if (tokenizer2.countTokens() > 0)[ CD ]
Line_42 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_44 $$ if (tokenizer2.countTokens() > 0)[ FD ]
Line_44 $$ if (tokenizer2.countTokens() > 0)-->Line_44 $$ tokenizer2.nextToken()[ CD ]
Line_42 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_44 $$ tokenizer2.nextToken()[ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_46 $$ while (tokenizer2.countTokens() > 0) [ CD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_42 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_46 $$ while (tokenizer2.countTokens() > 0) [ FD ]
Line_46 $$ while (tokenizer2.countTokens() > 0) -->Line_47 $$ label = tokenizer2.nextToken() + " "[ CD ]
Line_47 $$ label = tokenizer2.nextToken() + " "-->Line_47 $$ label = tokenizer2.nextToken() + " "[ FD ]
Line_37 $$ String label = null-->Line_47 $$ label = tokenizer2.nextToken() + " "[ FD ]
Line_42 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_47 $$ label = tokenizer2.nextToken() + " "[ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_49 $$ if (label == null) [ CD ]
Line_47 $$ label = tokenizer2.nextToken() + " "-->Line_49 $$ if (label == null) [ FD ]
Line_37 $$ String label = null-->Line_49 $$ if (label == null) [ FD ]
Line_49 $$ if (label == null) -->Line_50 $$ labels[r][e] = "none"[ CD ]
Line_49 $$ if (label == null) -->Line_52 $$ labels[r][e] = label[ CD ]
Line_47 $$ label = tokenizer2.nextToken() + " "-->Line_52 $$ labels[r][e] = label[ FD ]
Line_37 $$ String label = null-->Line_52 $$ labels[r][e] = label[ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_54 $$ label = null[ CD ]
Line_47 $$ label = tokenizer2.nextToken() + " "-->Line_54 $$ label = null[ FD ]
Line_54 $$ label = null-->Line_54 $$ label = null[ FD ]
Line_37 $$ String label = null-->Line_54 $$ label = null[ FD ]
Line_25 $$ BufferedReader reader = null-->Line_57 $$ reader.close()[ FD ]
Line_27 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_57 $$ reader.close()[ FD ]
Line_58 $$ if (topol.equals("hexa")) -->Line_58 $$ if (topol.equals("hexa")) [ CD ]
Line_58 $$ if (topol.equals("hexa")) -->Line_61 $$ double divisor1 = xunit[ CD ]
Line_58 $$ if (topol.equals("hexa")) -->Line_62 $$ double divisor2 = yunit[ CD ]
Line_58 $$ if (topol.equals("hexa")) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_58 $$ if (topol.equals("hexa")) -->Line_58 $$ if (topol.equals("hexa")) [ CD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_64 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_64 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_64 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_64 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_65 $$ if (q % 2 == 0) [ CD ]
Line_65 $$ if (q % 2 == 0) -->Line_66 $$ double nenner = (p * width)[ CD ]
Line_65 $$ if (q % 2 == 0) -->Line_67 $$ xposit[p][q] = (int) Math.round(nenner / divisor1)[ CD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_69 $$ if (q % 2 != 0) [ CD ]
Line_69 $$ if (q % 2 != 0) -->Line_71 $$ xposit[p][q] = (int) Math.round(nenner / divisor1)[ CD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_73 $$ yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2)[ CD ]
Line_77 $$ if (topol.equals("rect")) -->Line_77 $$ if (topol.equals("rect")) [ CD ]
Line_77 $$ if (topol.equals("rect")) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_77 $$ if (topol.equals("rect")) -->Line_77 $$ if (topol.equals("rect")) [ CD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_84 $$ double nenner = (width * 0.5) + (p * width)[ CD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_85 $$ xposit[p][q] = (int) Math.round((nenner / divisor1))[ CD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2)[ CD ]
Line_2 $$ public void init() -->Line_92 $$ umat = getImage(base, userpng)[ CD ]
Line_13 $$ String userpng = "images/" + username + ".png"-->Line_92 $$ umat = getImage(base, userpng)[ FD ]
Line_2 $$ public void init() -->Line_93 $$ mt.addImage(umat, 1)[ CD ]
Line_2 $$ public void init() -->Line_98 $$ addMouseListener(new CircleInfo())[ CD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_39 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_39 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_39 $$ for (int e = 0; e < yunit; e++) -->Line_39 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_40 $$ for (int r = 0; r < xunit; r++) -->Line_40 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_54 $$ label = null-->Line_49 $$ if (label == null) [ FD ]
Line_54 $$ label = null-->Line_52 $$ labels[r][e] = label[ FD ]
Line_43 $$ for (int w = 0; w < dim; w++) -->Line_43 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_43 $$ for (int w = 0; w < dim; w++) -->Line_43 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_43 $$ for (int w = 0; w < dim; w++) -->Line_43 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_63 $$ for (int p = 0; p < xunit; p++) -->Line_63 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_64 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_64 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_64 $$ for (int q = 0; q < yunit; q++) -->Line_64 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_82 $$ for (int p = 0; p < xunit; p++) -->Line_82 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_83 $$ for (int q = 0; q < yunit; q++) -->Line_83 $$ for (int q = 0; q < yunit; q++) [ FD ]
