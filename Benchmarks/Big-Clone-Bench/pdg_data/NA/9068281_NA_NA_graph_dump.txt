Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected Class<?> findClass(String name) throws ClassNotFoundException [ CD ]
Line_2 $$ protected Class<?> findClass(String name) throws ClassNotFoundException -->Line_3 $$ String classFile = name.replace('.', '/') + ".class"[ CD ]
Line_2 $$ protected Class<?> findClass(String name) throws ClassNotFoundException -->Line_3 $$ String classFile = name.replace('.', '/') + ".class"[ FD ]
Line_2 $$ protected Class<?> findClass(String name) throws ClassNotFoundException -->Line_4 $$ InputStream classInputStream = null[ CD ]
Line_6 $$ JarEntry jarEntry = java3DJar.getJarEntry(classFile)-->Line_6 $$ JarEntry jarEntry = java3DJar.getJarEntry(classFile)[ CD ]
Line_5 $$ for (JarFile java3DJar : this.java3DJars) -->Line_6 $$ JarEntry jarEntry = java3DJar.getJarEntry(classFile)[ FD ]
Line_3 $$ String classFile = name.replace('.', '/') + ".class"-->Line_6 $$ JarEntry jarEntry = java3DJar.getJarEntry(classFile)[ FD ]
Line_6 $$ JarEntry jarEntry = java3DJar.getJarEntry(classFile)-->Line_7 $$ if (jarEntry != null) [ FD ]
Line_4 $$ InputStream classInputStream = null-->Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)[ FD ]
Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)-->Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)[ FD ]
Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)-->Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)[ CD ]
Line_5 $$ for (JarFile java3DJar : this.java3DJars) -->Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)[ FD ]
Line_6 $$ JarEntry jarEntry = java3DJar.getJarEntry(classFile)-->Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)[ FD ]
Line_2 $$ protected Class<?> findClass(String name) throws ClassNotFoundException -->Line_15 $$ if (classInputStream == null) [ CD ]
Line_4 $$ InputStream classInputStream = null-->Line_15 $$ if (classInputStream == null) [ FD ]
Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)-->Line_15 $$ if (classInputStream == null) [ FD ]
Line_15 $$ if (classInputStream == null) -->Line_16 $$ URL url = getResource(classFile)[ CD ]
Line_16 $$ URL url = getResource(classFile)-->Line_16 $$ URL url = getResource(classFile)[ CD ]
Line_3 $$ String classFile = name.replace('.', '/') + ".class"-->Line_16 $$ URL url = getResource(classFile)[ FD ]
Line_15 $$ if (classInputStream == null) -->Line_17 $$ if (url == null) [ CD ]
Line_16 $$ URL url = getResource(classFile)-->Line_17 $$ if (url == null) [ FD ]
Line_4 $$ InputStream classInputStream = null-->Line_21 $$ classInputStream = url.openStream()[ FD ]
Line_9 $$ classInputStream = java3DJar.getInputStream(jarEntry)-->Line_21 $$ classInputStream = url.openStream()[ FD ]
Line_21 $$ classInputStream = url.openStream()-->Line_21 $$ classInputStream = url.openStream()[ FD ]
Line_21 $$ classInputStream = url.openStream()-->Line_21 $$ classInputStream = url.openStream()[ CD ]
Line_16 $$ URL url = getResource(classFile)-->Line_21 $$ classInputStream = url.openStream()[ FD ]
Line_31 $$ while ((size = in.read(buffer)) != -1) -->Line_31 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_30 $$ int size-->Line_31 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_31 $$ while ((size = in.read(buffer)) != -1) -->Line_31 $$ while ((size = in.read(buffer)) != -1) [ CD ]
Line_28 $$ BufferedInputStream in = new BufferedInputStream(classInputStream)-->Line_31 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_29 $$ byte[] buffer = new byte[8096]-->Line_31 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_31 $$ while ((size = in.read(buffer)) != -1) -->Line_32 $$ out.write(buffer, 0, size)[ CD ]
Line_27 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_32 $$ out.write(buffer, 0, size)[ FD ]
Line_29 $$ byte[] buffer = new byte[8096]-->Line_32 $$ out.write(buffer, 0, size)[ FD ]
Line_31 $$ while ((size = in.read(buffer)) != -1) -->Line_32 $$ out.write(buffer, 0, size)[ FD ]
Line_30 $$ int size-->Line_32 $$ out.write(buffer, 0, size)[ FD ]
Line_28 $$ BufferedInputStream in = new BufferedInputStream(classInputStream)-->Line_34 $$ in.close()[ FD ]
Line_35 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)-->Line_35 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ CD ]
Line_2 $$ protected Class<?> findClass(String name) throws ClassNotFoundException -->Line_35 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ FD ]
Line_27 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_35 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ FD ]
Line_27 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_35 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ FD ]
Line_31 $$ while ((size = in.read(buffer)) != -1) -->Line_32 $$ out.write(buffer, 0, size)[ FD ]
