Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ static void xmlRpcCall(String method, String[] params) throws LastFMError [ CD ]
Line_4 $$ XmlPullParserFactory fac = XmlPullParserFactory.newInstance()-->Line_4 $$ XmlPullParserFactory fac = XmlPullParserFactory.newInstance()[ CD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_5 $$ XmlSerializer serializer = fac.newSerializer()[ CD ]
Line_4 $$ XmlPullParserFactory fac = XmlPullParserFactory.newInstance()-->Line_5 $$ XmlSerializer serializer = fac.newSerializer()[ FD ]
Line_6 $$ URL url-->Line_7 $$ url = new URL(XMLRPC_URL)[ FD ]
Line_7 $$ url = new URL(XMLRPC_URL)-->Line_7 $$ url = new URL(XMLRPC_URL)[ FD ]
Line_8 $$ URLConnection conn-->Line_9 $$ conn = url.openConnection()[ FD ]
Line_9 $$ conn = url.openConnection()-->Line_9 $$ conn = url.openConnection()[ FD ]
Line_9 $$ conn = url.openConnection()-->Line_9 $$ conn = url.openConnection()[ CD ]
Line_6 $$ URL url-->Line_9 $$ conn = url.openConnection()[ FD ]
Line_7 $$ url = new URL(XMLRPC_URL)-->Line_9 $$ conn = url.openConnection()[ FD ]
Line_8 $$ URLConnection conn-->Line_10 $$ conn.setRequestProperty("Content-Type", "text/xml")[ FD ]
Line_9 $$ conn = url.openConnection()-->Line_10 $$ conn.setRequestProperty("Content-Type", "text/xml")[ FD ]
Line_8 $$ URLConnection conn-->Line_11 $$ conn.setDoOutput(true)[ FD ]
Line_9 $$ conn = url.openConnection()-->Line_11 $$ conn.setDoOutput(true)[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_12 $$ serializer.setOutput(conn.getOutputStream(), "UTF-8")[ FD ]
Line_8 $$ URLConnection conn-->Line_12 $$ serializer.setOutput(conn.getOutputStream(), "UTF-8")[ FD ]
Line_9 $$ conn = url.openConnection()-->Line_12 $$ serializer.setOutput(conn.getOutputStream(), "UTF-8")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_13 $$ serializer.startDocument("UTF-8", true)[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_14 $$ serializer.startTag(null, "methodCall")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_15 $$ serializer.startTag(null, "methodName")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_16 $$ serializer.text(method)[ FD ]
Line_2 $$ static void xmlRpcCall(String method, String[] params) throws LastFMError -->Line_16 $$ serializer.text(method)[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_17 $$ serializer.endTag(null, "methodName")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_18 $$ serializer.startTag(null, "params")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_20 $$ serializer.startTag(null, "param")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_21 $$ serializer.startTag(null, "value")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_22 $$ serializer.startTag(null, "string")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_23 $$ serializer.text(s)[ FD ]
Line_19 $$ for (String s : params) -->Line_23 $$ serializer.text(s)[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_24 $$ serializer.endTag(null, "string")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_25 $$ serializer.endTag(null, "value")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_26 $$ serializer.endTag(null, "param")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_28 $$ serializer.endTag(null, "params")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_29 $$ serializer.endTag(null, "methodCall")[ FD ]
Line_5 $$ XmlSerializer serializer = fac.newSerializer()-->Line_30 $$ serializer.flush()[ FD ]
Line_31 $$ InputStream is = conn.getInputStream()-->Line_31 $$ InputStream is = conn.getInputStream()[ CD ]
Line_8 $$ URLConnection conn-->Line_31 $$ InputStream is = conn.getInputStream()[ FD ]
Line_9 $$ conn = url.openConnection()-->Line_31 $$ InputStream is = conn.getInputStream()[ FD ]
Line_32 $$ DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance()-->Line_32 $$ DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance()[ CD ]
Line_33 $$ DocumentBuilder db = dbFac.newDocumentBuilder()-->Line_33 $$ DocumentBuilder db = dbFac.newDocumentBuilder()[ CD ]
Line_32 $$ DocumentBuilderFactory dbFac = DocumentBuilderFactory.newInstance()-->Line_33 $$ DocumentBuilder db = dbFac.newDocumentBuilder()[ FD ]
Line_34 $$ Document doc = db.parse(is)-->Line_34 $$ Document doc = db.parse(is)[ CD ]
Line_33 $$ DocumentBuilder db = dbFac.newDocumentBuilder()-->Line_34 $$ Document doc = db.parse(is)[ FD ]
Line_31 $$ InputStream is = conn.getInputStream()-->Line_34 $$ Document doc = db.parse(is)[ FD ]
Line_36 $$ String res = Utils.getChildElement(doc.getDocumentElement(), new String[] -->Line_36 $$ String res = Utils.getChildElement(doc.getDocumentElement(), new String[] [ CD ]
Line_34 $$ Document doc = db.parse(is)-->Line_36 $$ String res = Utils.getChildElement(doc.getDocumentElement(), new String[] [ FD ]
Line_37 $$ if (!res.equals("OK")) -->Line_37 $$ if (!res.equals("OK")) [ CD ]
Line_37 $$ if (!res.equals("OK")) -->Line_37 $$ if (!res.equals("OK")) [ CD ]
Line_36 $$ String res = Utils.getChildElement(doc.getDocumentElement(), new String[] -->Line_37 $$ if (!res.equals("OK")) [ FD ]
Line_37 $$ if (!res.equals("OK")) -->Line_38 $$ Log.e(TAG, "while xmlrpc got " + res)[ CD ]
Line_42 $$ String faultString = Utils.getChildElement(doc.getDocumentElement(), new String[] -->Line_42 $$ String faultString = Utils.getChildElement(doc.getDocumentElement(), new String[] [ CD ]
Line_34 $$ Document doc = db.parse(is)-->Line_42 $$ String faultString = Utils.getChildElement(doc.getDocumentElement(), new String[] [ FD ]
