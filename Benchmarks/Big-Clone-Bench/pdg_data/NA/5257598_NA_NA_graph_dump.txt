Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException [ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_3 $$ final HostConfiguration hostConfig = new HostConfiguration()[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_4 $$ hostConfig.setHost(uri.getHost())[ CD ]
Line_3 $$ final HostConfiguration hostConfig = new HostConfiguration()-->Line_4 $$ hostConfig.setHost(uri.getHost())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_4 $$ hostConfig.setHost(uri.getHost())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_5 $$ HttpMethodBase httpMethod = null[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_6 $$ if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) [ CD ]
Line_6 $$ if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) -->Line_6 $$ if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) [ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_6 $$ if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) [ FD ]
Line_6 $$ if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) -->Line_7 $$ httpMethod = new GetMethod(uri.toString())[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_7 $$ httpMethod = new GetMethod(uri.toString())[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_7 $$ httpMethod = new GetMethod(uri.toString())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_7 $$ httpMethod = new GetMethod(uri.toString())[ FD ]
Line_6 $$ if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) -->Line_8 $$ httpMethod.setFollowRedirects(true)[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_8 $$ httpMethod.setFollowRedirects(true)[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_8 $$ httpMethod.setFollowRedirects(true)[ FD ]
Line_6 $$ if (HttpRpcServer.METHOD_GET.equalsIgnoreCase(req.getMethod())) -->Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) [ CD ]
Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) -->Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) [ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) [ FD ]
Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) -->Line_10 $$ httpMethod = new PostMethod(uri.toString())[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_10 $$ httpMethod = new PostMethod(uri.toString())[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_10 $$ httpMethod = new PostMethod(uri.toString())[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_10 $$ httpMethod = new PostMethod(uri.toString())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_10 $$ httpMethod = new PostMethod(uri.toString())[ FD ]
Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) -->Line_11 $$ final Enumeration parameterNames = req.getParameterNames()[ CD ]
Line_11 $$ final Enumeration parameterNames = req.getParameterNames()-->Line_11 $$ final Enumeration parameterNames = req.getParameterNames()[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_11 $$ final Enumeration parameterNames = req.getParameterNames()[ FD ]
Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) -->Line_12 $$ if (parameterNames != null)[ CD ]
Line_11 $$ final Enumeration parameterNames = req.getParameterNames()-->Line_12 $$ if (parameterNames != null)[ FD ]
Line_12 $$ if (parameterNames != null)-->Line_12 $$ while (parameterNames.hasMoreElements()) [ CD ]
Line_12 $$ if (parameterNames != null)-->Line_12 $$ if (parameterNames != null)[ CD ]
Line_12 $$ while (parameterNames.hasMoreElements()) -->Line_12 $$ while (parameterNames.hasMoreElements()) [ CD ]
Line_11 $$ final Enumeration parameterNames = req.getParameterNames()-->Line_12 $$ while (parameterNames.hasMoreElements()) [ FD ]
Line_12 $$ while (parameterNames.hasMoreElements()) -->Line_13 $$ final String parameterName = (String) parameterNames.nextElement()[ CD ]
Line_11 $$ final Enumeration parameterNames = req.getParameterNames()-->Line_13 $$ final String parameterName = (String) parameterNames.nextElement()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_14 $$ for (String parameterValue : req.getParameterValues(parameterName)) ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)[ FD ]
Line_13 $$ final String parameterName = (String) parameterNames.nextElement()-->Line_14 $$ for (String parameterValue : req.getParameterValues(parameterName)) ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)[ FD ]
Line_13 $$ final String parameterName = (String) parameterNames.nextElement()-->Line_14 $$ ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)[ FD ]
Line_14 $$ for (String parameterValue : req.getParameterValues(parameterName)) ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)-->Line_14 $$ ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)[ FD ]
Line_9 $$ if (HttpRpcServer.METHOD_POST.equalsIgnoreCase(req.getMethod())) -->Line_16 $$ ((PostMethod) httpMethod).setRequestEntity(new InputStreamRequestEntity(req.getInputStream()))[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_16 $$ ((PostMethod) httpMethod).setRequestEntity(new InputStreamRequestEntity(req.getInputStream()))[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_18 $$ if (httpMethod == null)[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_18 $$ if (httpMethod == null)[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_18 $$ if (httpMethod == null)[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_18 $$ if (httpMethod == null)[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_19 $$ final int responseCode[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_20 $$ final Enumeration headers = req.getHeaderNames()[ CD ]
Line_20 $$ final Enumeration headers = req.getHeaderNames()-->Line_20 $$ final Enumeration headers = req.getHeaderNames()[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_20 $$ final Enumeration headers = req.getHeaderNames()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_21 $$ if (headers != null)[ CD ]
Line_20 $$ final Enumeration headers = req.getHeaderNames()-->Line_21 $$ if (headers != null)[ FD ]
Line_21 $$ if (headers != null)-->Line_21 $$ while (headers.hasMoreElements()) [ CD ]
Line_21 $$ if (headers != null)-->Line_21 $$ if (headers != null)[ CD ]
Line_21 $$ while (headers.hasMoreElements()) -->Line_21 $$ while (headers.hasMoreElements()) [ CD ]
Line_20 $$ final Enumeration headers = req.getHeaderNames()-->Line_21 $$ while (headers.hasMoreElements()) [ FD ]
Line_21 $$ while (headers.hasMoreElements()) -->Line_22 $$ final String headerName = (String) headers.nextElement()[ CD ]
Line_20 $$ final Enumeration headers = req.getHeaderNames()-->Line_22 $$ final String headerName = (String) headers.nextElement()[ FD ]
Line_21 $$ while (headers.hasMoreElements()) -->Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)[ CD ]
Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)-->Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)[ FD ]
Line_22 $$ final String headerName = (String) headers.nextElement()-->Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)[ FD ]
Line_21 $$ while (headers.hasMoreElements()) -->Line_24 $$ while (headerValues.hasMoreElements()) [ CD ]
Line_21 $$ while (headers.hasMoreElements()) -->Line_21 $$ while (headers.hasMoreElements()) [ CD ]
Line_24 $$ while (headerValues.hasMoreElements()) -->Line_24 $$ while (headerValues.hasMoreElements()) [ CD ]
Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)-->Line_24 $$ while (headerValues.hasMoreElements()) [ FD ]
Line_24 $$ while (headerValues.hasMoreElements()) -->Line_25 $$ httpMethod.setRequestHeader(headerName, (String) headerValues.nextElement())[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_25 $$ httpMethod.setRequestHeader(headerName, (String) headerValues.nextElement())[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_25 $$ httpMethod.setRequestHeader(headerName, (String) headerValues.nextElement())[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_25 $$ httpMethod.setRequestHeader(headerName, (String) headerValues.nextElement())[ FD ]
Line_22 $$ final String headerName = (String) headers.nextElement()-->Line_25 $$ httpMethod.setRequestHeader(headerName, (String) headerValues.nextElement())[ FD ]
Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)-->Line_25 $$ httpMethod.setRequestHeader(headerName, (String) headerValues.nextElement())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_28 $$ final HttpState httpState = new HttpState()[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_29 $$ if (req.getCookies() != null)[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_29 $$ if (req.getCookies() != null)[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_29 $$ for (Cookie cookie : req.getCookies()) [ FD ]
Line_30 $$ String host = req.getHeader("Host")-->Line_30 $$ String host = req.getHeader("Host")[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_30 $$ String host = req.getHeader("Host")[ FD ]
Line_31 $$ if (StringUtils.isEmpty(cookie.getDomain()))-->Line_31 $$ if (StringUtils.isEmpty(cookie.getDomain()))[ CD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_31 $$ if (StringUtils.isEmpty(cookie.getDomain()))[ FD ]
Line_31 $$ if (StringUtils.isEmpty(cookie.getDomain()))-->Line_31 $$ cookie.setDomain(StringUtils.isEmpty(host) ? req.getServerName() + ":" + req.getServerPort() : host)[ CD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_31 $$ cookie.setDomain(StringUtils.isEmpty(host) ? req.getServerName() + ":" + req.getServerPort() : host)[ FD ]
Line_30 $$ String host = req.getHeader("Host")-->Line_31 $$ cookie.setDomain(StringUtils.isEmpty(host) ? req.getServerName() + ":" + req.getServerPort() : host)[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_31 $$ cookie.setDomain(StringUtils.isEmpty(host) ? req.getServerName() + ":" + req.getServerPort() : host)[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_31 $$ cookie.setDomain(StringUtils.isEmpty(host) ? req.getServerName() + ":" + req.getServerPort() : host)[ FD ]
Line_32 $$ if (StringUtils.isEmpty(cookie.getPath()))-->Line_32 $$ if (StringUtils.isEmpty(cookie.getPath()))[ CD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_32 $$ if (StringUtils.isEmpty(cookie.getPath()))[ FD ]
Line_32 $$ if (StringUtils.isEmpty(cookie.getPath()))-->Line_32 $$ cookie.setPath("/")[ CD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_32 $$ cookie.setPath("/")[ FD ]
Line_28 $$ final HttpState httpState = new HttpState()-->Line_33 $$ httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()))[ FD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_33 $$ httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()))[ FD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_33 $$ httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()))[ FD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_33 $$ httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()))[ FD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_33 $$ httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()))[ FD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_33 $$ httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()))[ FD ]
Line_29 $$ for (Cookie cookie : req.getCookies()) -->Line_33 $$ httpState.addCookie(new org.apache.commons.httpclient.Cookie(cookie.getDomain(), cookie.getName(), cookie.getValue(), cookie.getPath(), cookie.getMaxAge(), cookie.getSecure()))[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_35 $$ httpMethod.setQueryString(req.getQueryString())[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_35 $$ httpMethod.setQueryString(req.getQueryString())[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_35 $$ httpMethod.setQueryString(req.getQueryString())[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_35 $$ httpMethod.setQueryString(req.getQueryString())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_35 $$ httpMethod.setQueryString(req.getQueryString())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ CD ]
Line_19 $$ final int responseCode-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ FD ]
Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ FD ]
Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ CD ]
Line_3 $$ final HostConfiguration hostConfig = new HostConfiguration()-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ FD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ FD ]
Line_28 $$ final HttpState httpState = new HttpState()-->Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_37 $$ if (responseCode < 0) [ CD ]
Line_19 $$ final int responseCode-->Line_37 $$ if (responseCode < 0) [ FD ]
Line_36 $$ responseCode = (new HttpClient()).executeMethod(hostConfig, httpMethod, httpState)-->Line_37 $$ if (responseCode < 0) [ FD ]
Line_37 $$ if (responseCode < 0) -->Line_38 $$ httpMethod.releaseConnection()[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_38 $$ httpMethod.releaseConnection()[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_38 $$ httpMethod.releaseConnection()[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_38 $$ httpMethod.releaseConnection()[ FD ]
Line_37 $$ if (responseCode < 0) -->Line_39 $$ return responseCode[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_41 $$ if (httpMethod.getResponseHeaders() != null)[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_41 $$ if (httpMethod.getResponseHeaders() != null)[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_41 $$ if (httpMethod.getResponseHeaders() != null)[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_41 $$ if (httpMethod.getResponseHeaders() != null)[ FD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_41 $$ for (Header header : httpMethod.getResponseHeaders()) res.setHeader(header.getName(), header.getValue())[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_41 $$ for (Header header : httpMethod.getResponseHeaders()) res.setHeader(header.getName(), header.getValue())[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_41 $$ for (Header header : httpMethod.getResponseHeaders()) res.setHeader(header.getName(), header.getValue())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_41 $$ res.setHeader(header.getName(), header.getValue())[ FD ]
Line_41 $$ for (Header header : httpMethod.getResponseHeaders()) res.setHeader(header.getName(), header.getValue())-->Line_41 $$ res.setHeader(header.getName(), header.getValue())[ FD ]
Line_41 $$ for (Header header : httpMethod.getResponseHeaders()) res.setHeader(header.getName(), header.getValue())-->Line_41 $$ res.setHeader(header.getName(), header.getValue())[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()[ CD ]
Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()-->Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_43 $$ final OutputStream out = res.getOutputStream()[ CD ]
Line_43 $$ final OutputStream out = res.getOutputStream()-->Line_43 $$ final OutputStream out = res.getOutputStream()[ CD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_43 $$ final OutputStream out = res.getOutputStream()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_44 $$ IOUtils.copy(in, out)[ CD ]
Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()-->Line_44 $$ IOUtils.copy(in, out)[ FD ]
Line_43 $$ final OutputStream out = res.getOutputStream()-->Line_44 $$ IOUtils.copy(in, out)[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_45 $$ out.flush()[ CD ]
Line_43 $$ final OutputStream out = res.getOutputStream()-->Line_45 $$ out.flush()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_46 $$ out.close()[ CD ]
Line_43 $$ final OutputStream out = res.getOutputStream()-->Line_46 $$ out.close()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_47 $$ in.close()[ CD ]
Line_42 $$ final InputStream in = httpMethod.getResponseBodyAsStream()-->Line_47 $$ in.close()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_48 $$ httpMethod.releaseConnection()[ CD ]
Line_5 $$ HttpMethodBase httpMethod = null-->Line_48 $$ httpMethod.releaseConnection()[ FD ]
Line_7 $$ httpMethod = new GetMethod(uri.toString())-->Line_48 $$ httpMethod.releaseConnection()[ FD ]
Line_10 $$ httpMethod = new PostMethod(uri.toString())-->Line_48 $$ httpMethod.releaseConnection()[ FD ]
Line_2 $$ public static int proxy(java.net.URI uri, HttpServletRequest req, HttpServletResponse res) throws IOException -->Line_49 $$ return responseCode[ CD ]
Line_13 $$ final String parameterName = (String) parameterNames.nextElement()-->Line_14 $$ for (String parameterValue : req.getParameterValues(parameterName)) ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)[ FD ]
Line_13 $$ final String parameterName = (String) parameterNames.nextElement()-->Line_14 $$ ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)[ FD ]
Line_14 $$ for (String parameterValue : req.getParameterValues(parameterName)) ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)-->Line_14 $$ ((PostMethod) httpMethod).addParameter(parameterName, parameterValue)[ FD ]
Line_22 $$ final String headerName = (String) headers.nextElement()-->Line_23 $$ final Enumeration headerValues = req.getHeaders(headerName)[ FD ]
