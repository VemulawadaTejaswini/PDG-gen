Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException [ CD ]
Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException -->Line_3 $$ String finalName = artifactId + "-" + version[ CD ]
Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException -->Line_4 $$ File file = new File(deployables, groupId + "/" + artifactId + "/" + version + "/" + finalName + "." + type)[ CD ]
Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException -->Line_5 $$ if (file.exists()) [ CD ]
Line_4 $$ File file = new File(deployables, groupId + "/" + artifactId + "/" + version + "/" + finalName + "." + type)-->Line_5 $$ if (file.exists()) [ FD ]
Line_5 $$ if (file.exists()) -->Line_5 $$ if (file.exists()) [ CD ]
Line_4 $$ File file = new File(deployables, groupId + "/" + artifactId + "/" + version + "/" + finalName + "." + type)-->Line_5 $$ if (file.exists()) [ FD ]
Line_5 $$ if (file.exists()) -->Line_6 $$ log.warn("Won't download [ CD ]
Line_3 $$ String finalName = artifactId + "-" + version-->Line_6 $$ log.warn("Won't download [ FD ]
Line_4 $$ File file = new File(deployables, groupId + "/" + artifactId + "/" + version + "/" + finalName + "." + type)-->Line_6 $$ log.warn("Won't download [ FD ]
Line_5 $$ if (file.exists()) -->Line_7 $$ return[ CD ]
Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException -->Line_9 $$ String url = repository + groupId + "/" + artifactId + "/" + version + "/" + finalName + "." + type[ CD ]
Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException -->Line_10 $$ HttpGet get = new HttpGet(url)[ CD ]
Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException -->Line_11 $$ HttpResponse response = httpclient.execute(get)[ CD ]
Line_11 $$ HttpResponse response = httpclient.execute(get)-->Line_11 $$ HttpResponse response = httpclient.execute(get)[ CD ]
Line_10 $$ HttpGet get = new HttpGet(url)-->Line_11 $$ HttpResponse response = httpclient.execute(get)[ FD ]
Line_2 $$ private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException -->Line_12 $$ if (response.getStatusLine().getStatusCode() == 200)[ CD ]
Line_11 $$ HttpResponse response = httpclient.execute(get)-->Line_12 $$ if (response.getStatusLine().getStatusCode() == 200)[ FD ]
Line_12 $$ if (response.getStatusLine().getStatusCode() == 200)-->Line_12 $$ writeContent(get, response.getEntity(), file)[ CD ]
Line_10 $$ HttpGet get = new HttpGet(url)-->Line_12 $$ writeContent(get, response.getEntity(), file)[ FD ]
Line_4 $$ File file = new File(deployables, groupId + "/" + artifactId + "/" + version + "/" + finalName + "." + type)-->Line_12 $$ writeContent(get, response.getEntity(), file)[ FD ]
Line_11 $$ HttpResponse response = httpclient.execute(get)-->Line_12 $$ writeContent(get, response.getEntity(), file)[ FD ]
Line_11 $$ HttpResponse response = httpclient.execute(get)-->Line_12 $$ throw new RuntimeException("Failed to download " + url + " due to error " + response.getStatusLine())[ FD ]
