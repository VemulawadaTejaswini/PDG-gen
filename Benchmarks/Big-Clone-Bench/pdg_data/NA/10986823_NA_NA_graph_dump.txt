Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException [ CD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)[ CD ]
Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)-->Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)[ CD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_4 $$ URI uri = url.toURI()[ CD ]
Line_4 $$ URI uri = url.toURI()-->Line_4 $$ URI uri = url.toURI()[ CD ]
Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)-->Line_4 $$ URI uri = url.toURI()[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_5 $$ String query = IOUtils.toString(url.openStream())[ CD ]
Line_5 $$ String query = IOUtils.toString(url.openStream())-->Line_5 $$ String query = IOUtils.toString(url.openStream())[ CD ]
Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)-->Line_5 $$ String query = IOUtils.toString(url.openStream())[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_6 $$ XQueryProcessor processor = new XQueryProcessor()[ CD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)[ CD ]
Line_5 $$ String query = IOUtils.toString(url.openStream())-->Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)[ FD ]
Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)-->Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)[ FD ]
Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)-->Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)[ CD ]
Line_5 $$ String query = IOUtils.toString(url.openStream())-->Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)[ FD ]
Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)-->Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_8 $$ if (DEBUG_LIGHT) [ CD ]
Line_8 $$ if (DEBUG_LIGHT) -->Line_9 $$ System.err.println(query)[ CD ]
Line_5 $$ String query = IOUtils.toString(url.openStream())-->Line_9 $$ System.err.println(query)[ FD ]
Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)-->Line_9 $$ System.err.println(query)[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_11 $$ XQueryModule mod = processor.parse(query, uri)[ CD ]
Line_11 $$ XQueryModule mod = processor.parse(query, uri)-->Line_11 $$ XQueryModule mod = processor.parse(query, uri)[ CD ]
Line_6 $$ XQueryProcessor processor = new XQueryProcessor()-->Line_11 $$ XQueryModule mod = processor.parse(query, uri)[ FD ]
Line_5 $$ String query = IOUtils.toString(url.openStream())-->Line_11 $$ XQueryModule mod = processor.parse(query, uri)[ FD ]
Line_7 $$ query = query.replace("fn:doc(\"auction.xml\")", replace)-->Line_11 $$ XQueryModule mod = processor.parse(query, uri)[ FD ]
Line_4 $$ URI uri = url.toURI()-->Line_11 $$ XQueryModule mod = processor.parse(query, uri)[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_12 $$ StringWriter res_sw = new StringWriter()[ CD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_13 $$ Serializer ser = new SAXSerializer(new SAXWriter(res_sw), res_sw)[ CD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_14 $$ processor.execute(mod, ser)[ CD ]
Line_6 $$ XQueryProcessor processor = new XQueryProcessor()-->Line_14 $$ processor.execute(mod, ser)[ FD ]
Line_11 $$ XQueryModule mod = processor.parse(query, uri)-->Line_14 $$ processor.execute(mod, ser)[ FD ]
Line_13 $$ Serializer ser = new SAXSerializer(new SAXWriter(res_sw), res_sw)-->Line_14 $$ processor.execute(mod, ser)[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_15 $$ String result = res_sw.toString()[ CD ]
Line_15 $$ String result = res_sw.toString()-->Line_15 $$ String result = res_sw.toString()[ CD ]
Line_12 $$ StringWriter res_sw = new StringWriter()-->Line_15 $$ String result = res_sw.toString()[ FD ]
Line_2 $$ private static String executeQueryWithXbird(String queryFile, String replace) throws XQueryException, IOException, URISyntaxException -->Line_16 $$ return result[ CD ]
