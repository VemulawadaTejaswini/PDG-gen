Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) [ CD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_3 $$ logger.debug("compress(%s, %s, %s)", sSourceDir, aFiles, sDestinationFilename)[ CD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_3 $$ logger.debug("compress(%s, %s, %s)", sSourceDir, aFiles, sDestinationFilename)[ FD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_3 $$ logger.debug("compress(%s, %s, %s)", sSourceDir, aFiles, sDestinationFilename)[ FD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_3 $$ logger.debug("compress(%s, %s, %s)", sSourceDir, aFiles, sDestinationFilename)[ FD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_4 $$ BufferedInputStream oOrigin = null[ CD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_5 $$ FileOutputStream oDestination[ CD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_6 $$ ZipOutputStream oOutput = null[ CD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_7 $$ Iterator<String> oIterator[ CD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_8 $$ byte[] aData[ CD ]
Line_5 $$ FileOutputStream oDestination-->Line_10 $$ oDestination = new FileOutputStream(sDestinationFilename)[ FD ]
Line_10 $$ oDestination = new FileOutputStream(sDestinationFilename)-->Line_10 $$ oDestination = new FileOutputStream(sDestinationFilename)[ FD ]
Line_6 $$ ZipOutputStream oOutput = null-->Line_11 $$ oOutput = new ZipOutputStream(new BufferedOutputStream(oDestination))[ FD ]
Line_11 $$ oOutput = new ZipOutputStream(new BufferedOutputStream(oDestination))-->Line_11 $$ oOutput = new ZipOutputStream(new BufferedOutputStream(oDestination))[ FD ]
Line_8 $$ byte[] aData-->Line_12 $$ aData = new byte[BUFFER_SIZE][ FD ]
Line_12 $$ aData = new byte[BUFFER_SIZE]-->Line_12 $$ aData = new byte[BUFFER_SIZE][ FD ]
Line_7 $$ Iterator<String> oIterator-->Line_13 $$ oIterator = aFiles.iterator()[ FD ]
Line_13 $$ oIterator = aFiles.iterator()-->Line_13 $$ oIterator = aFiles.iterator()[ FD ]
Line_13 $$ oIterator = aFiles.iterator()-->Line_13 $$ oIterator = aFiles.iterator()[ CD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_13 $$ oIterator = aFiles.iterator()[ FD ]
Line_14 $$ while (oIterator.hasNext()) -->Line_14 $$ while (oIterator.hasNext()) [ CD ]
Line_7 $$ Iterator<String> oIterator-->Line_14 $$ while (oIterator.hasNext()) [ FD ]
Line_13 $$ oIterator = aFiles.iterator()-->Line_14 $$ while (oIterator.hasNext()) [ FD ]
Line_7 $$ Iterator<String> oIterator-->Line_16 $$ String sFilename = (String) oIterator.next()[ FD ]
Line_13 $$ oIterator = aFiles.iterator()-->Line_16 $$ String sFilename = (String) oIterator.next()[ FD ]
Line_18 $$ oOrigin = new BufferedInputStream(fisInput, BUFFER_SIZE)-->Line_18 $$ oOrigin = new BufferedInputStream(fisInput, BUFFER_SIZE)[ FD ]
Line_4 $$ BufferedInputStream oOrigin = null-->Line_18 $$ oOrigin = new BufferedInputStream(fisInput, BUFFER_SIZE)[ FD ]
Line_16 $$ String sFilename = (String) oIterator.next()-->Line_19 $$ ZipEntry oEntry = new ZipEntry(sFilename.replace('\\', '/'))[ FD ]
Line_6 $$ ZipOutputStream oOutput = null-->Line_20 $$ oOutput.putNextEntry(oEntry)[ FD ]
Line_11 $$ oOutput = new ZipOutputStream(new BufferedOutputStream(oDestination))-->Line_20 $$ oOutput.putNextEntry(oEntry)[ FD ]
Line_19 $$ ZipEntry oEntry = new ZipEntry(sFilename.replace('\\', '/'))-->Line_20 $$ oOutput.putNextEntry(oEntry)[ FD ]
Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)-->Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)[ FD ]
Line_21 $$ int iCount-->Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)[ FD ]
Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)-->Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)[ CD ]
Line_18 $$ oOrigin = new BufferedInputStream(fisInput, BUFFER_SIZE)-->Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)[ FD ]
Line_4 $$ BufferedInputStream oOrigin = null-->Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)[ FD ]
Line_8 $$ byte[] aData-->Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)[ FD ]
Line_12 $$ aData = new byte[BUFFER_SIZE]-->Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)[ FD ]
Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)-->Line_22 $$ oOutput.write(aData, 0, iCount)[ CD ]
Line_6 $$ ZipOutputStream oOutput = null-->Line_22 $$ oOutput.write(aData, 0, iCount)[ FD ]
Line_11 $$ oOutput = new ZipOutputStream(new BufferedOutputStream(oDestination))-->Line_22 $$ oOutput.write(aData, 0, iCount)[ FD ]
Line_8 $$ byte[] aData-->Line_22 $$ oOutput.write(aData, 0, iCount)[ FD ]
Line_12 $$ aData = new byte[BUFFER_SIZE]-->Line_22 $$ oOutput.write(aData, 0, iCount)[ FD ]
Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)-->Line_22 $$ oOutput.write(aData, 0, iCount)[ FD ]
Line_21 $$ int iCount-->Line_22 $$ oOutput.write(aData, 0, iCount)[ FD ]
Line_18 $$ oOrigin = new BufferedInputStream(fisInput, BUFFER_SIZE)-->Line_24 $$ StreamHelper.close(oOrigin)[ FD ]
Line_4 $$ BufferedInputStream oOrigin = null-->Line_24 $$ StreamHelper.close(oOrigin)[ FD ]
Line_6 $$ ZipOutputStream oOutput = null-->Line_31 $$ StreamHelper.close(oOutput)[ FD ]
Line_11 $$ oOutput = new ZipOutputStream(new BufferedOutputStream(oDestination))-->Line_31 $$ StreamHelper.close(oOutput)[ FD ]
Line_2 $$ public Boolean compress(String sSourceDir, ArrayList<String> aFiles, String sDestinationFilename) -->Line_33 $$ return true[ CD ]
Line_16 $$ String sFilename = (String) oIterator.next()-->Line_19 $$ ZipEntry oEntry = new ZipEntry(sFilename.replace('\\', '/'))[ FD ]
Line_19 $$ ZipEntry oEntry = new ZipEntry(sFilename.replace('\\', '/'))-->Line_20 $$ oOutput.putNextEntry(oEntry)[ FD ]
Line_18 $$ oOrigin = new BufferedInputStream(fisInput, BUFFER_SIZE)-->Line_24 $$ StreamHelper.close(oOrigin)[ FD ]
Line_22 $$ while ((iCount = oOrigin.read(aData, 0, BUFFER_SIZE)) != -1) oOutput.write(aData, 0, iCount)-->Line_22 $$ oOutput.write(aData, 0, iCount)[ FD ]
