Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Void doInBackground() [ CD ]
Line_2 $$ public Void doInBackground() -->Line_3 $$ java.io.FileOutputStream fos = null[ CD ]
Line_8 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection()-->Line_9 $$ contentLength = httpConn.getContentLength()[ FD ]
Line_10 $$ if (contentLength == -1) -->Line_10 $$ if (contentLength == -1) [ CD ]
Line_10 $$ if (contentLength == -1) -->Line_11 $$ System.out.println("unknown content length")[ CD ]
Line_10 $$ if (contentLength == -1) -->Line_13 $$ System.out.println("content length: " + contentLength + " bytes")[ CD ]
Line_6 $$ java.io.BufferedInputStream in = null-->Line_15 $$ in = new java.io.BufferedInputStream(httpConn.getInputStream())[ FD ]
Line_15 $$ in = new java.io.BufferedInputStream(httpConn.getInputStream())-->Line_15 $$ in = new java.io.BufferedInputStream(httpConn.getInputStream())[ FD ]
Line_8 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection()-->Line_15 $$ in = new java.io.BufferedInputStream(httpConn.getInputStream())[ FD ]
Line_3 $$ java.io.FileOutputStream fos = null-->Line_19 $$ fos = new java.io.FileOutputStream(localFile)[ FD ]
Line_19 $$ fos = new java.io.FileOutputStream(localFile)-->Line_19 $$ fos = new java.io.FileOutputStream(localFile)[ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) [ FD ]
Line_22 $$ int x = 0-->Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) [ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) [ CD ]
Line_6 $$ java.io.BufferedInputStream in = null-->Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) [ FD ]
Line_15 $$ in = new java.io.BufferedInputStream(httpConn.getInputStream())-->Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) [ FD ]
Line_21 $$ byte[] data = new byte[1024]-->Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) [ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_25 $$ bout.write(data, 0, x)[ CD ]
Line_20 $$ java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)-->Line_25 $$ bout.write(data, 0, x)[ FD ]
Line_21 $$ byte[] data = new byte[1024]-->Line_25 $$ bout.write(data, 0, x)[ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_25 $$ bout.write(data, 0, x)[ FD ]
Line_22 $$ int x = 0-->Line_25 $$ bout.write(data, 0, x)[ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_26 $$ bytes += x[ CD ]
Line_26 $$ bytes += x-->Line_26 $$ bytes += x[ FD ]
Line_23 $$ int bytes = 0-->Line_26 $$ bytes += x[ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_26 $$ bytes += x[ FD ]
Line_22 $$ int x = 0-->Line_26 $$ bytes += x[ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_27 $$ setProgress((int) ((Math.min(bytes * 100 / contentLength, 100)) + .5))[ CD ]
Line_20 $$ java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024)-->Line_29 $$ bout.close()[ FD ]
Line_6 $$ java.io.BufferedInputStream in = null-->Line_30 $$ in.close()[ FD ]
Line_15 $$ in = new java.io.BufferedInputStream(httpConn.getInputStream())-->Line_30 $$ in.close()[ FD ]
Line_31 $$ File jarFile = mainFrame.presentationFile-->Line_32 $$ if (jarFile.exists()) [ FD ]
Line_32 $$ if (jarFile.exists()) -->Line_32 $$ if (jarFile.exists()) [ CD ]
Line_31 $$ File jarFile = mainFrame.presentationFile-->Line_32 $$ if (jarFile.exists()) [ FD ]
Line_32 $$ if (jarFile.exists()) -->Line_33 $$ final File temporaryJarFile = Utilities.createTemporaryFile("presentation", ".jar", false, null)[ CD ]
Line_33 $$ final File temporaryJarFile = Utilities.createTemporaryFile("presentation", ".jar", false, null)-->Line_33 $$ final File temporaryJarFile = Utilities.createTemporaryFile("presentation", ".jar", false, null)[ CD ]
Line_32 $$ if (jarFile.exists()) -->Line_34 $$ final JarFile updatedJarFile = new JarFile(localFile)[ CD ]
Line_32 $$ if (jarFile.exists()) -->Line_35 $$ final JarOutputStream output = new JarOutputStream(new FileOutputStream(temporaryJarFile))[ CD ]
Line_34 $$ final JarFile updatedJarFile = new JarFile(localFile)-->Line_36 $$ for (final JarEntry entry : Utilities.toList(updatedJarFile.entries())) [ FD ]
Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) -->Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) [ CD ]
Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) -->Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) [ CD ]
Line_36 $$ for (final JarEntry entry : Utilities.toList(updatedJarFile.entries())) -->Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) [ FD ]
Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) -->Line_38 $$ final InputStream entryStream = updatedJarFile.getInputStream(entry)[ CD ]
Line_38 $$ final InputStream entryStream = updatedJarFile.getInputStream(entry)-->Line_38 $$ final InputStream entryStream = updatedJarFile.getInputStream(entry)[ CD ]
Line_34 $$ final JarFile updatedJarFile = new JarFile(localFile)-->Line_38 $$ final InputStream entryStream = updatedJarFile.getInputStream(entry)[ FD ]
Line_36 $$ for (final JarEntry entry : Utilities.toList(updatedJarFile.entries())) -->Line_38 $$ final InputStream entryStream = updatedJarFile.getInputStream(entry)[ FD ]
Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) -->Line_39 $$ output.putNextEntry(entry)[ CD ]
Line_35 $$ final JarOutputStream output = new JarOutputStream(new FileOutputStream(temporaryJarFile))-->Line_39 $$ output.putNextEntry(entry)[ FD ]
Line_36 $$ for (final JarEntry entry : Utilities.toList(updatedJarFile.entries())) -->Line_39 $$ output.putNextEntry(entry)[ FD ]
Line_37 $$ if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) -->Line_40 $$ Utilities.write(entryStream, output)[ CD ]
Line_38 $$ final InputStream entryStream = updatedJarFile.getInputStream(entry)-->Line_40 $$ Utilities.write(entryStream, output)[ FD ]
Line_35 $$ final JarOutputStream output = new JarOutputStream(new FileOutputStream(temporaryJarFile))-->Line_40 $$ Utilities.write(entryStream, output)[ FD ]
Line_32 $$ if (jarFile.exists()) -->Line_43 $$ new SlidesWriter().write(mainFrame.getSlides(), output)[ CD ]
Line_35 $$ final JarOutputStream output = new JarOutputStream(new FileOutputStream(temporaryJarFile))-->Line_43 $$ new SlidesWriter().write(mainFrame.getSlides(), output)[ FD ]
Line_32 $$ if (jarFile.exists()) -->Line_44 $$ jarFile.delete()[ CD ]
Line_31 $$ File jarFile = mainFrame.presentationFile-->Line_44 $$ jarFile.delete()[ FD ]
Line_32 $$ if (jarFile.exists()) -->Line_45 $$ new File(localFile).delete()[ CD ]
Line_32 $$ if (jarFile.exists()) -->Line_46 $$ if (!temporaryJarFile.renameTo(jarFile)) [ CD ]
Line_46 $$ if (!temporaryJarFile.renameTo(jarFile)) -->Line_46 $$ if (!temporaryJarFile.renameTo(jarFile)) [ CD ]
Line_46 $$ if (!temporaryJarFile.renameTo(jarFile)) -->Line_46 $$ if (!temporaryJarFile.renameTo(jarFile)) [ CD ]
Line_33 $$ final File temporaryJarFile = Utilities.createTemporaryFile("presentation", ".jar", false, null)-->Line_46 $$ if (!temporaryJarFile.renameTo(jarFile)) [ FD ]
Line_31 $$ File jarFile = mainFrame.presentationFile-->Line_46 $$ if (!temporaryJarFile.renameTo(jarFile)) [ FD ]
Line_32 $$ if (jarFile.exists()) -->Line_50 $$ new SlidesWriter().write(mainFrame.getSlides(), new JarOutputStream(new FileOutputStream(jarFile)))[ CD ]
Line_3 $$ java.io.FileOutputStream fos = null-->Line_56 $$ fos.close()[ FD ]
Line_19 $$ fos = new java.io.FileOutputStream(localFile)-->Line_56 $$ fos.close()[ FD ]
Line_2 $$ public Void doInBackground() -->Line_61 $$ return null[ CD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_25 $$ bout.write(data, 0, x)[ FD ]
Line_24 $$ while ((x = in.read(data, 0, 1024)) >= 0) -->Line_26 $$ bytes += x[ FD ]
