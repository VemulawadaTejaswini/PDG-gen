Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException [ CD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_3 $$ if (url == null) [ CD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_3 $$ if (url == null) [ FD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_6 $$ if (LOCAL_LOGV) [ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_7 $$ Log.v(TAG, "httpConnection: params list")[ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_8 $$ Log.v(TAG, "\ttoken\t\t= " + token)[ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_9 $$ Log.v(TAG, "\turl\t\t= " + url)[ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_10 $$ Log.v(TAG, "\tUser-Agent\t\t=" + mUserAgent)[ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_11 $$ Log.v(TAG, "\tmethod\t\t= " + ((method == HTTP_POST_METHOD) ? "POST" : ((method == HTTP_GET_METHOD) ? "GET" : "UNKNOWN")))[ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_12 $$ Log.v(TAG, "\tisProxySet\t= " + isProxySet)[ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_13 $$ Log.v(TAG, "\tproxyHost\t= " + proxyHost)[ CD ]
Line_6 $$ if (LOCAL_LOGV) -->Line_14 $$ Log.v(TAG, "\tproxyPort\t= " + proxyPort)[ CD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_16 $$ AndroidHttpClient client = null[ CD ]
Line_18 $$ URI hostUrl = new URI(url)-->Line_19 $$ HttpHost target = new HttpHost(hostUrl.getHost(), hostUrl.getPort(), HttpHost.DEFAULT_SCHEME_NAME)[ FD ]
Line_18 $$ URI hostUrl = new URI(url)-->Line_19 $$ HttpHost target = new HttpHost(hostUrl.getHost(), hostUrl.getPort(), HttpHost.DEFAULT_SCHEME_NAME)[ FD ]
Line_16 $$ AndroidHttpClient client = null-->Line_20 $$ client = createHttpClient(context)[ FD ]
Line_20 $$ client = createHttpClient(context)-->Line_20 $$ client = createHttpClient(context)[ FD ]
Line_20 $$ client = createHttpClient(context)-->Line_20 $$ client = createHttpClient(context)[ CD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_20 $$ client = createHttpClient(context)[ FD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_25 $$ entity.setContentType("application/vnd.wap.mms-message")[ FD ]
Line_26 $$ HttpPost post = new HttpPost(url)-->Line_27 $$ post.setEntity(entity)[ FD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_27 $$ post.setEntity(entity)[ FD ]
Line_21 $$ HttpRequest req = null-->Line_28 $$ req = post[ FD ]
Line_28 $$ req = post-->Line_28 $$ req = post[ FD ]
Line_26 $$ HttpPost post = new HttpPost(url)-->Line_28 $$ req = post[ FD ]
Line_21 $$ HttpRequest req = null-->Line_31 $$ req = new HttpGet(url)[ FD ]
Line_28 $$ req = post-->Line_31 $$ req = new HttpGet(url)[ FD ]
Line_31 $$ req = new HttpGet(url)-->Line_31 $$ req = new HttpGet(url)[ FD ]
Line_37 $$ HttpParams params = client.getParams()-->Line_37 $$ HttpParams params = client.getParams()[ CD ]
Line_16 $$ AndroidHttpClient client = null-->Line_37 $$ HttpParams params = client.getParams()[ FD ]
Line_20 $$ client = createHttpClient(context)-->Line_37 $$ HttpParams params = client.getParams()[ FD ]
Line_38 $$ if (isProxySet) -->Line_39 $$ ConnRouteParams.setDefaultProxy(params, new HttpHost(proxyHost, proxyPort))[ CD ]
Line_37 $$ HttpParams params = client.getParams()-->Line_39 $$ ConnRouteParams.setDefaultProxy(params, new HttpHost(proxyHost, proxyPort))[ FD ]
Line_21 $$ HttpRequest req = null-->Line_41 $$ req.setParams(params)[ FD ]
Line_28 $$ req = post-->Line_41 $$ req.setParams(params)[ FD ]
Line_31 $$ req = new HttpGet(url)-->Line_41 $$ req.setParams(params)[ FD ]
Line_37 $$ HttpParams params = client.getParams()-->Line_41 $$ req.setParams(params)[ FD ]
Line_21 $$ HttpRequest req = null-->Line_42 $$ req.addHeader(HDR_KEY_ACCEPT, HDR_VALUE_ACCEPT)[ FD ]
Line_28 $$ req = post-->Line_42 $$ req.addHeader(HDR_KEY_ACCEPT, HDR_VALUE_ACCEPT)[ FD ]
Line_31 $$ req = new HttpGet(url)-->Line_42 $$ req.addHeader(HDR_KEY_ACCEPT, HDR_VALUE_ACCEPT)[ FD ]
Line_44 $$ String xWapProfileTagName = MmsConfig.getUaProfTagName()-->Line_44 $$ String xWapProfileTagName = MmsConfig.getUaProfTagName()[ CD ]
Line_45 $$ String xWapProfileUrl = MmsConfig.getUaProfUrl()-->Line_45 $$ String xWapProfileUrl = MmsConfig.getUaProfUrl()[ CD ]
Line_45 $$ String xWapProfileUrl = MmsConfig.getUaProfUrl()-->Line_46 $$ if (xWapProfileUrl != null) [ FD ]
Line_46 $$ if (xWapProfileUrl != null) -->Line_47 $$ if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) [ CD ]
Line_47 $$ if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) -->Line_47 $$ if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) [ CD ]
Line_47 $$ if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) -->Line_48 $$ Log.d(LogTag.TRANSACTION, "[HttpUtils] httpConn: xWapProfUrl=" + xWapProfileUrl)[ CD ]
Line_46 $$ if (xWapProfileUrl != null) -->Line_50 $$ req.addHeader(xWapProfileTagName, xWapProfileUrl)[ CD ]
Line_21 $$ HttpRequest req = null-->Line_50 $$ req.addHeader(xWapProfileTagName, xWapProfileUrl)[ FD ]
Line_28 $$ req = post-->Line_50 $$ req.addHeader(xWapProfileTagName, xWapProfileUrl)[ FD ]
Line_31 $$ req = new HttpGet(url)-->Line_50 $$ req.addHeader(xWapProfileTagName, xWapProfileUrl)[ FD ]
Line_44 $$ String xWapProfileTagName = MmsConfig.getUaProfTagName()-->Line_50 $$ req.addHeader(xWapProfileTagName, xWapProfileUrl)[ FD ]
Line_45 $$ String xWapProfileUrl = MmsConfig.getUaProfUrl()-->Line_50 $$ req.addHeader(xWapProfileTagName, xWapProfileUrl)[ FD ]
Line_53 $$ String extraHttpParams = MmsConfig.getHttpParams()-->Line_53 $$ String extraHttpParams = MmsConfig.getHttpParams()[ CD ]
Line_53 $$ String extraHttpParams = MmsConfig.getHttpParams()-->Line_54 $$ if (extraHttpParams != null) [ FD ]
Line_54 $$ if (extraHttpParams != null) -->Line_55 $$ String line1Number = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number()[ CD ]
Line_55 $$ String line1Number = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number()-->Line_55 $$ String line1Number = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number()[ CD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_55 $$ String line1Number = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number()[ FD ]
Line_54 $$ if (extraHttpParams != null) -->Line_56 $$ String line1Key = MmsConfig.getHttpParamsLine1Key()[ CD ]
Line_56 $$ String line1Key = MmsConfig.getHttpParamsLine1Key()-->Line_56 $$ String line1Key = MmsConfig.getHttpParamsLine1Key()[ CD ]
Line_54 $$ if (extraHttpParams != null) -->Line_57 $$ String paramList[] = extraHttpParams.split("\\|")[ CD ]
Line_57 $$ String paramList[] = extraHttpParams.split("\\|")-->Line_57 $$ String paramList[] = extraHttpParams.split("\\|")[ CD ]
Line_53 $$ String extraHttpParams = MmsConfig.getHttpParams()-->Line_57 $$ String paramList[] = extraHttpParams.split("\\|")[ FD ]
Line_59 $$ String splitPair[] = paramPair.split(":", 2)-->Line_59 $$ String splitPair[] = paramPair.split(":", 2)[ CD ]
Line_58 $$ for (String paramPair : paramList) -->Line_59 $$ String splitPair[] = paramPair.split(":", 2)[ FD ]
Line_60 $$ if (splitPair.length == 2) -->Line_61 $$ String name = splitPair[0].trim()[ CD ]
Line_61 $$ String name = splitPair[0].trim()-->Line_61 $$ String name = splitPair[0].trim()[ CD ]
Line_60 $$ if (splitPair.length == 2) -->Line_62 $$ String value = splitPair[1].trim()[ CD ]
Line_62 $$ String value = splitPair[1].trim()-->Line_62 $$ String value = splitPair[1].trim()[ CD ]
Line_60 $$ if (splitPair.length == 2) -->Line_63 $$ if (line1Key != null) [ CD ]
Line_56 $$ String line1Key = MmsConfig.getHttpParamsLine1Key()-->Line_63 $$ if (line1Key != null) [ FD ]
Line_63 $$ if (line1Key != null) -->Line_64 $$ value = value.replace(line1Key, line1Number)[ CD ]
Line_62 $$ String value = splitPair[1].trim()-->Line_64 $$ value = value.replace(line1Key, line1Number)[ FD ]
Line_64 $$ value = value.replace(line1Key, line1Number)-->Line_64 $$ value = value.replace(line1Key, line1Number)[ FD ]
Line_64 $$ value = value.replace(line1Key, line1Number)-->Line_64 $$ value = value.replace(line1Key, line1Number)[ CD ]
Line_62 $$ String value = splitPair[1].trim()-->Line_64 $$ value = value.replace(line1Key, line1Number)[ FD ]
Line_64 $$ value = value.replace(line1Key, line1Number)-->Line_64 $$ value = value.replace(line1Key, line1Number)[ FD ]
Line_56 $$ String line1Key = MmsConfig.getHttpParamsLine1Key()-->Line_64 $$ value = value.replace(line1Key, line1Number)[ FD ]
Line_55 $$ String line1Number = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getLine1Number()-->Line_64 $$ value = value.replace(line1Key, line1Number)[ FD ]
Line_60 $$ if (splitPair.length == 2) -->Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) [ CD ]
Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) -->Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) [ CD ]
Line_61 $$ String name = splitPair[0].trim()-->Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) [ FD ]
Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) -->Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) [ CD ]
Line_62 $$ String value = splitPair[1].trim()-->Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) [ FD ]
Line_64 $$ value = value.replace(line1Key, line1Number)-->Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) [ FD ]
Line_66 $$ if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) -->Line_67 $$ req.addHeader(name, value)[ CD ]
Line_21 $$ HttpRequest req = null-->Line_67 $$ req.addHeader(name, value)[ FD ]
Line_28 $$ req = post-->Line_67 $$ req.addHeader(name, value)[ FD ]
Line_31 $$ req = new HttpGet(url)-->Line_67 $$ req.addHeader(name, value)[ FD ]
Line_61 $$ String name = splitPair[0].trim()-->Line_67 $$ req.addHeader(name, value)[ FD ]
Line_62 $$ String value = splitPair[1].trim()-->Line_67 $$ req.addHeader(name, value)[ FD ]
Line_64 $$ value = value.replace(line1Key, line1Number)-->Line_67 $$ req.addHeader(name, value)[ FD ]
Line_21 $$ HttpRequest req = null-->Line_72 $$ req.addHeader(HDR_KEY_ACCEPT_LANGUAGE, HDR_VALUE_ACCEPT_LANGUAGE)[ FD ]
Line_28 $$ req = post-->Line_72 $$ req.addHeader(HDR_KEY_ACCEPT_LANGUAGE, HDR_VALUE_ACCEPT_LANGUAGE)[ FD ]
Line_31 $$ req = new HttpGet(url)-->Line_72 $$ req.addHeader(HDR_KEY_ACCEPT_LANGUAGE, HDR_VALUE_ACCEPT_LANGUAGE)[ FD ]
Line_73 $$ HttpResponse response = client.execute(target, req)-->Line_73 $$ HttpResponse response = client.execute(target, req)[ CD ]
Line_16 $$ AndroidHttpClient client = null-->Line_73 $$ HttpResponse response = client.execute(target, req)[ FD ]
Line_20 $$ client = createHttpClient(context)-->Line_73 $$ HttpResponse response = client.execute(target, req)[ FD ]
Line_19 $$ HttpHost target = new HttpHost(hostUrl.getHost(), hostUrl.getPort(), HttpHost.DEFAULT_SCHEME_NAME)-->Line_73 $$ HttpResponse response = client.execute(target, req)[ FD ]
Line_21 $$ HttpRequest req = null-->Line_73 $$ HttpResponse response = client.execute(target, req)[ FD ]
Line_28 $$ req = post-->Line_73 $$ HttpResponse response = client.execute(target, req)[ FD ]
Line_31 $$ req = new HttpGet(url)-->Line_73 $$ HttpResponse response = client.execute(target, req)[ FD ]
Line_74 $$ StatusLine status = response.getStatusLine()-->Line_74 $$ StatusLine status = response.getStatusLine()[ CD ]
Line_73 $$ HttpResponse response = client.execute(target, req)-->Line_74 $$ StatusLine status = response.getStatusLine()[ FD ]
Line_74 $$ StatusLine status = response.getStatusLine()-->Line_75 $$ if (status.getStatusCode() != 200) [ FD ]
Line_74 $$ StatusLine status = response.getStatusLine()-->Line_76 $$ throw new IOException("HTTP error: " + status.getReasonPhrase())[ FD ]
Line_73 $$ HttpResponse response = client.execute(target, req)-->Line_78 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_80 $$ if (entity != null) [ FD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_82 $$ if (entity.getContentLength() > 0) [ FD ]
Line_82 $$ if (entity.getContentLength() > 0) -->Line_83 $$ body = new byte[(int) entity.getContentLength()][ CD ]
Line_79 $$ byte[] body = null-->Line_83 $$ body = new byte[(int) entity.getContentLength()][ FD ]
Line_83 $$ body = new byte[(int) entity.getContentLength()]-->Line_83 $$ body = new byte[(int) entity.getContentLength()][ FD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_83 $$ body = new byte[(int) entity.getContentLength()][ FD ]
Line_82 $$ if (entity.getContentLength() > 0) -->Line_84 $$ DataInputStream dis = new DataInputStream(entity.getContent())[ CD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_84 $$ DataInputStream dis = new DataInputStream(entity.getContent())[ FD ]
Line_84 $$ DataInputStream dis = new DataInputStream(entity.getContent())-->Line_86 $$ dis.readFully(body)[ FD ]
Line_79 $$ byte[] body = null-->Line_86 $$ dis.readFully(body)[ FD ]
Line_83 $$ body = new byte[(int) entity.getContentLength()]-->Line_86 $$ dis.readFully(body)[ FD ]
Line_84 $$ DataInputStream dis = new DataInputStream(entity.getContent())-->Line_89 $$ dis.close()[ FD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_96 $$ if (entity != null) [ FD ]
Line_96 $$ if (entity != null) -->Line_97 $$ entity.consumeContent()[ CD ]
Line_24 $$ ProgressCallbackEntity entity = new ProgressCallbackEntity(context, token, pdu)-->Line_97 $$ entity.consumeContent()[ FD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_103 $$ handleHttpConnectionException(e, url)[ FD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_105 $$ handleHttpConnectionException(e, url)[ FD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_107 $$ handleHttpConnectionException(e, url)[ FD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_109 $$ handleHttpConnectionException(e, url)[ FD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_111 $$ handleHttpConnectionException(e, url)[ FD ]
Line_16 $$ AndroidHttpClient client = null-->Line_113 $$ if (client != null) [ FD ]
Line_20 $$ client = createHttpClient(context)-->Line_113 $$ if (client != null) [ FD ]
Line_113 $$ if (client != null) -->Line_114 $$ client.close()[ CD ]
Line_16 $$ AndroidHttpClient client = null-->Line_114 $$ client.close()[ FD ]
Line_20 $$ client = createHttpClient(context)-->Line_114 $$ client.close()[ FD ]
Line_2 $$ protected static byte[] httpConnection(Context context, long token, String url, byte[] pdu, int method, boolean isProxySet, String proxyHost, int proxyPort) throws IOException -->Line_117 $$ return null[ CD ]
