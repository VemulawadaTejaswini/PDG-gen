Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void loadClassFilesFromJar() [ CD ]
Line_2 $$ private void loadClassFilesFromJar() -->Line_3 $$ IPackageFragmentRoot packageFragmentRoot = (IPackageFragmentRoot) getJavaElement()[ CD ]
Line_2 $$ private void loadClassFilesFromJar() -->Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile()[ CD ]
Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile()-->Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile()[ CD ]
Line_3 $$ IPackageFragmentRoot packageFragmentRoot = (IPackageFragmentRoot) getJavaElement()-->Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile()[ FD ]
Line_6 $$ URL url = jarFile.toURL()-->Line_6 $$ URL url = jarFile.toURL()[ CD ]
Line_4 $$ File jarFile = packageFragmentRoot.getResource().getLocation().toFile()-->Line_6 $$ URL url = jarFile.toURL()[ FD ]
Line_7 $$ URLConnection u = url.openConnection()-->Line_7 $$ URLConnection u = url.openConnection()[ CD ]
Line_6 $$ URL url = jarFile.toURL()-->Line_7 $$ URLConnection u = url.openConnection()[ FD ]
Line_7 $$ URLConnection u = url.openConnection()-->Line_8 $$ ZipInputStream inputStream = new ZipInputStream(u.getInputStream())[ FD ]
Line_9 $$ ZipEntry entry = inputStream.getNextEntry()-->Line_9 $$ ZipEntry entry = inputStream.getNextEntry()[ CD ]
Line_8 $$ ZipInputStream inputStream = new ZipInputStream(u.getInputStream())-->Line_9 $$ ZipEntry entry = inputStream.getNextEntry()[ FD ]
Line_9 $$ ZipEntry entry = inputStream.getNextEntry()-->Line_10 $$ while (null != entry) [ FD ]
Line_10 $$ while (null != entry) -->Line_11 $$ if (entry.getName().endsWith(".class")) [ CD ]
Line_11 $$ if (entry.getName().endsWith(".class")) -->Line_11 $$ if (entry.getName().endsWith(".class")) [ CD ]
Line_9 $$ ZipEntry entry = inputStream.getNextEntry()-->Line_11 $$ if (entry.getName().endsWith(".class")) [ FD ]
Line_11 $$ if (entry.getName().endsWith(".class")) -->Line_12 $$ ClassParser parser = new ClassParser(inputStream, entry.getName())[ CD ]
Line_9 $$ ZipEntry entry = inputStream.getNextEntry()-->Line_12 $$ ClassParser parser = new ClassParser(inputStream, entry.getName())[ FD ]
Line_11 $$ if (entry.getName().endsWith(".class")) -->Line_13 $$ Repository.addClass(parser.parse())[ CD ]
Line_12 $$ ClassParser parser = new ClassParser(inputStream, entry.getName())-->Line_13 $$ Repository.addClass(parser.parse())[ FD ]
Line_10 $$ while (null != entry) -->Line_15 $$ entry = inputStream.getNextEntry()[ CD ]
Line_15 $$ entry = inputStream.getNextEntry()-->Line_15 $$ entry = inputStream.getNextEntry()[ FD ]
Line_9 $$ ZipEntry entry = inputStream.getNextEntry()-->Line_15 $$ entry = inputStream.getNextEntry()[ FD ]
Line_15 $$ entry = inputStream.getNextEntry()-->Line_15 $$ entry = inputStream.getNextEntry()[ CD ]
Line_8 $$ ZipInputStream inputStream = new ZipInputStream(u.getInputStream())-->Line_15 $$ entry = inputStream.getNextEntry()[ FD ]
Line_15 $$ entry = inputStream.getNextEntry()-->Line_10 $$ while (null != entry) [ FD ]
Line_15 $$ entry = inputStream.getNextEntry()-->Line_10 $$ while (null != entry) [ FD ]
Line_15 $$ entry = inputStream.getNextEntry()-->Line_11 $$ if (entry.getName().endsWith(".class")) [ FD ]
Line_15 $$ entry = inputStream.getNextEntry()-->Line_12 $$ ClassParser parser = new ClassParser(inputStream, entry.getName())[ FD ]
Line_12 $$ ClassParser parser = new ClassParser(inputStream, entry.getName())-->Line_13 $$ Repository.addClass(parser.parse())[ FD ]
