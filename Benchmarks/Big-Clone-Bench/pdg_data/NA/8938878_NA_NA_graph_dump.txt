Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void setInitialValues(String Tag, Vector subfields) [ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_3 $$ this.tftag.setText(Tag)[ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_3 $$ this.tftag.setText(Tag)[ FD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_5 $$ this.glosf = subfields[ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_5 $$ this.glosf = subfields[ FD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_2 $$ public void setInitialValues(String Tag, Vector subfields) [ CD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ CD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ CD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_7 $$ this.dlm2.addElement(subfields.elementAt(i).toString().trim())[ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_7 $$ this.dlm2.addElement(subfields.elementAt(i).toString().trim())[ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_7 $$ this.dlm2.addElement(subfields.elementAt(i).toString().trim())[ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_8 $$ presentineditor.add(subfields.elementAt(i).toString().trim())[ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_8 $$ presentineditor.add(subfields.elementAt(i).toString().trim())[ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_8 $$ presentineditor.add(subfields.elementAt(i).toString().trim())[ FD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_10 $$ String xmlreq = CataloguingXMLGenerator.getInstance().getSubFieldsRepeat("5", Tag)[ CD ]
Line_10 $$ String xmlreq = CataloguingXMLGenerator.getInstance().getSubFieldsRepeat("5", Tag)-->Line_10 $$ String xmlreq = CataloguingXMLGenerator.getInstance().getSubFieldsRepeat("5", Tag)[ CD ]
Line_2 $$ public void setInitialValues(String Tag, Vector subfields) -->Line_10 $$ String xmlreq = CataloguingXMLGenerator.getInstance().getSubFieldsRepeat("5", Tag)[ FD ]
Line_12 $$ java.net.URL url = new java.net.URL(ResourceBundle.getBundle("Administration").getString("ServerURL") + ResourceBundle.getBundle("Administration").getString("ServletSubPath") + "MarcDictionaryServlet")-->Line_13 $$ java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection()[ FD ]
Line_13 $$ java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection()-->Line_14 $$ urlconn.setDoOutput(true)[ FD ]
Line_15 $$ java.io.OutputStream dos = urlconn.getOutputStream()-->Line_15 $$ java.io.OutputStream dos = urlconn.getOutputStream()[ CD ]
Line_13 $$ java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection()-->Line_15 $$ java.io.OutputStream dos = urlconn.getOutputStream()[ FD ]
Line_15 $$ java.io.OutputStream dos = urlconn.getOutputStream()-->Line_16 $$ dos.write(xmlreq.getBytes())[ FD ]
Line_10 $$ String xmlreq = CataloguingXMLGenerator.getInstance().getSubFieldsRepeat("5", Tag)-->Line_16 $$ dos.write(xmlreq.getBytes())[ FD ]
Line_17 $$ java.io.InputStream ios = urlconn.getInputStream()-->Line_17 $$ java.io.InputStream ios = urlconn.getInputStream()[ CD ]
Line_13 $$ java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection()-->Line_17 $$ java.io.InputStream ios = urlconn.getInputStream()[ FD ]
Line_19 $$ Document retdoc = saxb.build(ios)-->Line_19 $$ Document retdoc = saxb.build(ios)[ CD ]
Line_18 $$ SAXBuilder saxb = new SAXBuilder()-->Line_19 $$ Document retdoc = saxb.build(ios)[ FD ]
Line_17 $$ java.io.InputStream ios = urlconn.getInputStream()-->Line_19 $$ Document retdoc = saxb.build(ios)[ FD ]
Line_20 $$ Element retroot = retdoc.getRootElement()-->Line_20 $$ Element retroot = retdoc.getRootElement()[ CD ]
Line_19 $$ Document retdoc = saxb.build(ios)-->Line_20 $$ Element retroot = retdoc.getRootElement()[ FD ]
Line_22 $$ List list = retroot.getChildren()-->Line_22 $$ List list = retroot.getChildren()[ CD ]
Line_20 $$ Element retroot = retdoc.getRootElement()-->Line_22 $$ List list = retroot.getChildren()[ FD ]
Line_22 $$ List list = retroot.getChildren()-->Line_23 $$ System.out.println("Point of execution came here " + list.size())[ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_22 $$ List list = retroot.getChildren()-->Line_24 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ CD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ CD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()[ CD ]
Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()-->Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()[ CD ]
Line_22 $$ List list = retroot.getChildren()-->Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()[ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()[ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()[ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_26 $$ hashtable.put(((Element) chilist.get(0)).getText().trim(), ((Element) chilist.get(1)).getText().trim())[ CD ]
Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()-->Line_26 $$ hashtable.put(((Element) chilist.get(0)).getText().trim(), ((Element) chilist.get(1)).getText().trim())[ FD ]
Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()-->Line_26 $$ hashtable.put(((Element) chilist.get(0)).getText().trim(), ((Element) chilist.get(1)).getText().trim())[ FD ]
Line_29 $$ Enumeration keys = hashtable.keys()-->Line_29 $$ Enumeration keys = hashtable.keys()[ CD ]
Line_30 $$ while (keys.hasMoreElements()) this.dlm1.addElement(keys.nextElement())-->Line_30 $$ while (keys.hasMoreElements()) this.dlm1.addElement(keys.nextElement())[ CD ]
Line_29 $$ Enumeration keys = hashtable.keys()-->Line_30 $$ while (keys.hasMoreElements()) this.dlm1.addElement(keys.nextElement())[ FD ]
Line_30 $$ while (keys.hasMoreElements()) this.dlm1.addElement(keys.nextElement())-->Line_30 $$ this.dlm1.addElement(keys.nextElement())[ CD ]
Line_29 $$ Enumeration keys = hashtable.keys()-->Line_30 $$ this.dlm1.addElement(keys.nextElement())[ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_6 $$ for (int i = 0; i < subfields.size(); i++) [ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_7 $$ this.dlm2.addElement(subfields.elementAt(i).toString().trim())[ FD ]
Line_6 $$ for (int i = 0; i < subfields.size(); i++) -->Line_8 $$ presentineditor.add(subfields.elementAt(i).toString().trim())[ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_24 $$ for (int i = 0; i < list.size(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < list.size(); i++) -->Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()[ FD ]
Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()-->Line_26 $$ hashtable.put(((Element) chilist.get(0)).getText().trim(), ((Element) chilist.get(1)).getText().trim())[ FD ]
Line_25 $$ List chilist = ((Element) list.get(i)).getChildren()-->Line_26 $$ hashtable.put(((Element) chilist.get(0)).getText().trim(), ((Element) chilist.get(1)).getText().trim())[ FD ]
