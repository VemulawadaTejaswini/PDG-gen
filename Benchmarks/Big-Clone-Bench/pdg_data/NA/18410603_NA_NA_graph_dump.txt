Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void performUpdateCheck() [ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_3 $$ URL url[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_4 $$ DPhex dPhex[ CD ]
Line_6 $$ byte[] data = buildXMLUpdateRequest()-->Line_6 $$ byte[] data = buildXMLUpdateRequest()[ CD ]
Line_6 $$ byte[] data = buildXMLUpdateRequest()-->Line_7 $$ if (data == null) [ FD ]
Line_10 $$ if (logger.isDebugEnabled()) -->Line_10 $$ if (logger.isDebugEnabled()) [ CD ]
Line_10 $$ if (logger.isDebugEnabled()) -->Line_11 $$ logger.debug(new String(data))[ CD ]
Line_3 $$ URL url-->Line_13 $$ url = new URL(UPDATE_CHECK_URL)[ FD ]
Line_13 $$ url = new URL(UPDATE_CHECK_URL)-->Line_13 $$ url = new URL(UPDATE_CHECK_URL)[ FD ]
Line_3 $$ URL url-->Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_13 $$ url = new URL(UPDATE_CHECK_URL)-->Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_15 $$ connection.setUseCaches(false)[ FD ]
Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_16 $$ connection.setRequestProperty("User-Agent", Phex.getFullPhexVendor())[ FD ]
Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_17 $$ connection.setRequestMethod("POST")[ FD ]
Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_18 $$ connection.setDoOutput(true)[ FD ]
Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_19 $$ connection.setRequestProperty("Content-Type", "text/xml; charset=UTF-8")[ FD ]
Line_20 $$ OutputStream outStream = connection.getOutputStream()-->Line_20 $$ OutputStream outStream = connection.getOutputStream()[ CD ]
Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_20 $$ OutputStream outStream = connection.getOutputStream()[ FD ]
Line_20 $$ OutputStream outStream = connection.getOutputStream()-->Line_21 $$ outStream.write(data)[ FD ]
Line_6 $$ byte[] data = buildXMLUpdateRequest()-->Line_21 $$ outStream.write(data)[ FD ]
Line_23 $$ InputStream inStream = connection.getInputStream()-->Line_23 $$ InputStream inStream = connection.getInputStream()[ CD ]
Line_14 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_23 $$ InputStream inStream = connection.getInputStream()[ FD ]
Line_24 $$ UpdateResponseParts parts = createResponseParts(inStream)-->Line_24 $$ UpdateResponseParts parts = createResponseParts(inStream)[ CD ]
Line_23 $$ InputStream inStream = connection.getInputStream()-->Line_24 $$ UpdateResponseParts parts = createResponseParts(inStream)[ FD ]
Line_24 $$ UpdateResponseParts parts = createResponseParts(inStream)-->Line_25 $$ verifySignature(parts)[ FD ]
Line_4 $$ DPhex dPhex-->Line_26 $$ dPhex = XMLBuilder.readDPhexFromStream(new ByteArrayInputStream(parts.xml.getBytes("UTF-8")))[ FD ]
Line_26 $$ dPhex = XMLBuilder.readDPhexFromStream(new ByteArrayInputStream(parts.xml.getBytes("UTF-8")))-->Line_26 $$ dPhex = XMLBuilder.readDPhexFromStream(new ByteArrayInputStream(parts.xml.getBytes("UTF-8")))[ FD ]
Line_26 $$ dPhex = XMLBuilder.readDPhexFromStream(new ByteArrayInputStream(parts.xml.getBytes("UTF-8")))-->Line_26 $$ dPhex = XMLBuilder.readDPhexFromStream(new ByteArrayInputStream(parts.xml.getBytes("UTF-8")))[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_47 $$ DUpdateResponse response = dPhex.getUpdateResponse()[ CD ]
Line_47 $$ DUpdateResponse response = dPhex.getUpdateResponse()-->Line_47 $$ DUpdateResponse response = dPhex.getUpdateResponse()[ CD ]
Line_4 $$ DPhex dPhex-->Line_47 $$ DUpdateResponse response = dPhex.getUpdateResponse()[ FD ]
Line_26 $$ dPhex = XMLBuilder.readDPhexFromStream(new ByteArrayInputStream(parts.xml.getBytes("UTF-8")))-->Line_47 $$ DUpdateResponse response = dPhex.getUpdateResponse()[ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_48 $$ List<VersionType> versionList = response.getVersionList()[ CD ]
Line_48 $$ List<VersionType> versionList = response.getVersionList()-->Line_48 $$ List<VersionType> versionList = response.getVersionList()[ CD ]
Line_47 $$ DUpdateResponse response = dPhex.getUpdateResponse()-->Line_48 $$ List<VersionType> versionList = response.getVersionList()[ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_49 $$ VersionType latestReleaseVersion = null[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_50 $$ VersionType latestBetaVersion = null[ CD ]
Line_51 $$ for (VersionType currentVersion : versionList) -->Line_52 $$ if (currentVersion.isBeta()) [ FD ]
Line_52 $$ if (currentVersion.isBeta()) -->Line_52 $$ if (currentVersion.isBeta()) [ CD ]
Line_51 $$ for (VersionType currentVersion : versionList) -->Line_52 $$ if (currentVersion.isBeta()) [ FD ]
Line_52 $$ if (currentVersion.isBeta()) -->Line_53 $$ if (latestBetaVersion == null || VersionUtils.compare(currentVersion.getId(), latestBetaVersion.getId()) > 0) [ CD ]
Line_51 $$ for (VersionType currentVersion : versionList) -->Line_53 $$ if (latestBetaVersion == null || VersionUtils.compare(currentVersion.getId(), latestBetaVersion.getId()) > 0) [ FD ]
Line_50 $$ VersionType latestBetaVersion = null-->Line_53 $$ if (latestBetaVersion == null || VersionUtils.compare(currentVersion.getId(), latestBetaVersion.getId()) > 0) [ FD ]
Line_53 $$ if (latestBetaVersion == null || VersionUtils.compare(currentVersion.getId(), latestBetaVersion.getId()) > 0) -->Line_54 $$ latestBetaVersion = currentVersion[ CD ]
Line_50 $$ VersionType latestBetaVersion = null-->Line_54 $$ latestBetaVersion = currentVersion[ FD ]
Line_54 $$ latestBetaVersion = currentVersion-->Line_54 $$ latestBetaVersion = currentVersion[ FD ]
Line_51 $$ for (VersionType currentVersion : versionList) -->Line_54 $$ latestBetaVersion = currentVersion[ FD ]
Line_52 $$ if (currentVersion.isBeta()) -->Line_57 $$ if (latestReleaseVersion == null || VersionUtils.compare(currentVersion.getId(), latestReleaseVersion.getId()) > 0) [ CD ]
Line_51 $$ for (VersionType currentVersion : versionList) -->Line_57 $$ if (latestReleaseVersion == null || VersionUtils.compare(currentVersion.getId(), latestReleaseVersion.getId()) > 0) [ FD ]
Line_49 $$ VersionType latestReleaseVersion = null-->Line_57 $$ if (latestReleaseVersion == null || VersionUtils.compare(currentVersion.getId(), latestReleaseVersion.getId()) > 0) [ FD ]
Line_57 $$ if (latestReleaseVersion == null || VersionUtils.compare(currentVersion.getId(), latestReleaseVersion.getId()) > 0) -->Line_58 $$ latestReleaseVersion = currentVersion[ CD ]
Line_49 $$ VersionType latestReleaseVersion = null-->Line_58 $$ latestReleaseVersion = currentVersion[ FD ]
Line_58 $$ latestReleaseVersion = currentVersion-->Line_58 $$ latestReleaseVersion = currentVersion[ FD ]
Line_51 $$ for (VersionType currentVersion : versionList) -->Line_58 $$ latestReleaseVersion = currentVersion[ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_64 $$ if (latestBetaVersion != null) [ CD ]
Line_50 $$ VersionType latestBetaVersion = null-->Line_64 $$ if (latestBetaVersion != null) [ FD ]
Line_54 $$ latestBetaVersion = currentVersion-->Line_64 $$ if (latestBetaVersion != null) [ FD ]
Line_64 $$ if (latestBetaVersion != null) -->Line_65 $$ betaVersion = latestBetaVersion.getId()[ CD ]
Line_50 $$ VersionType latestBetaVersion = null-->Line_65 $$ betaVersion = latestBetaVersion.getId()[ FD ]
Line_54 $$ latestBetaVersion = currentVersion-->Line_65 $$ betaVersion = latestBetaVersion.getId()[ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_67 $$ if (latestReleaseVersion != null) [ CD ]
Line_49 $$ VersionType latestReleaseVersion = null-->Line_67 $$ if (latestReleaseVersion != null) [ FD ]
Line_58 $$ latestReleaseVersion = currentVersion-->Line_67 $$ if (latestReleaseVersion != null) [ FD ]
Line_67 $$ if (latestReleaseVersion != null) -->Line_68 $$ releaseVersion = latestReleaseVersion.getId()[ CD ]
Line_49 $$ VersionType latestReleaseVersion = null-->Line_68 $$ releaseVersion = latestReleaseVersion.getId()[ FD ]
Line_58 $$ latestReleaseVersion = currentVersion-->Line_68 $$ releaseVersion = latestReleaseVersion.getId()[ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_70 $$ int releaseCompare = 0[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_71 $$ int betaCompare = 0[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())[ CD ]
Line_71 $$ int betaCompare = 0-->Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())[ FD ]
Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())-->Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())[ FD ]
Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())-->Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())[ CD ]
Line_70 $$ int releaseCompare = 0-->Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())[ FD ]
Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())-->Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())[ FD ]
Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())-->Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_74 $$ if (releaseCompare <= 0 && betaCompare <= 0) [ CD ]
Line_74 $$ if (releaseCompare <= 0 && betaCompare <= 0) -->Line_75 $$ return[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())[ CD ]
Line_71 $$ int betaCompare = 0-->Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())[ FD ]
Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())-->Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())[ FD ]
Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())-->Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())[ FD ]
Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())-->Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())[ CD ]
Line_70 $$ int releaseCompare = 0-->Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())[ FD ]
Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())-->Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())[ FD ]
Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())-->Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())[ FD ]
Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())-->Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_79 $$ int verDiff = VersionUtils.compare(betaVersion, releaseVersion)[ CD ]
Line_79 $$ int verDiff = VersionUtils.compare(betaVersion, releaseVersion)-->Line_79 $$ int verDiff = VersionUtils.compare(betaVersion, releaseVersion)[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_80 $$ boolean triggerUpdateNotification = false[ CD ]
Line_2 $$ private void performUpdateCheck() -->Line_81 $$ if (releaseCompare > 0) [ CD ]
Line_70 $$ int releaseCompare = 0-->Line_81 $$ if (releaseCompare > 0) [ FD ]
Line_73 $$ releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion())-->Line_81 $$ if (releaseCompare > 0) [ FD ]
Line_78 $$ releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get())-->Line_81 $$ if (releaseCompare > 0) [ FD ]
Line_81 $$ if (releaseCompare > 0) -->Line_82 $$ UpdatePrefs.LastUpdateCheckVersion.set(releaseVersion)[ CD ]
Line_81 $$ if (releaseCompare > 0) -->Line_83 $$ triggerUpdateNotification = true[ CD ]
Line_80 $$ boolean triggerUpdateNotification = false-->Line_83 $$ triggerUpdateNotification = true[ FD ]
Line_83 $$ triggerUpdateNotification = true-->Line_83 $$ triggerUpdateNotification = true[ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_85 $$ if (betaCompare > 0) [ CD ]
Line_71 $$ int betaCompare = 0-->Line_85 $$ if (betaCompare > 0) [ FD ]
Line_72 $$ betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion())-->Line_85 $$ if (betaCompare > 0) [ FD ]
Line_77 $$ betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get())-->Line_85 $$ if (betaCompare > 0) [ FD ]
Line_85 $$ if (betaCompare > 0) -->Line_86 $$ UpdatePrefs.LastBetaUpdateCheckVersion.set(betaVersion)[ CD ]
Line_85 $$ if (betaCompare > 0) -->Line_87 $$ triggerUpdateNotification = true[ CD ]
Line_80 $$ boolean triggerUpdateNotification = false-->Line_87 $$ triggerUpdateNotification = true[ FD ]
Line_83 $$ triggerUpdateNotification = true-->Line_87 $$ triggerUpdateNotification = true[ FD ]
Line_87 $$ triggerUpdateNotification = true-->Line_87 $$ triggerUpdateNotification = true[ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_89 $$ if (verDiff > 0) [ CD ]
Line_79 $$ int verDiff = VersionUtils.compare(betaVersion, releaseVersion)-->Line_89 $$ if (verDiff > 0) [ FD ]
Line_2 $$ private void performUpdateCheck() -->Line_94 $$ if (triggerUpdateNotification) [ CD ]
Line_94 $$ if (triggerUpdateNotification) -->Line_95 $$ PhexCorePrefs.save(false)[ CD ]
Line_94 $$ if (triggerUpdateNotification) -->Line_96 $$ fireUpdateNotification()[ CD ]
