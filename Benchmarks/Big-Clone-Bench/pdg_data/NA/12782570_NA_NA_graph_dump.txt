Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void logging() throws Fault [ CD ]
Line_2 $$ public void logging() throws Fault -->Line_3 $$ final InterceptorWrapper wrap = new InterceptorWrapper(message)[ CD ]
Line_2 $$ public void logging() throws Fault -->Line_4 $$ final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------")[ CD ]
Line_2 $$ public void logging() throws Fault -->Line_5 $$ String encoding = (String) wrap.getEncoding()[ CD ]
Line_3 $$ final InterceptorWrapper wrap = new InterceptorWrapper(message)-->Line_5 $$ String encoding = (String) wrap.getEncoding()[ FD ]
Line_2 $$ public void logging() throws Fault -->Line_6 $$ if (encoding != null) [ CD ]
Line_5 $$ String encoding = (String) wrap.getEncoding()-->Line_6 $$ if (encoding != null) [ FD ]
Line_6 $$ if (encoding != null) -->Line_7 $$ buffer.getEncoding().append(encoding)[ CD ]
Line_5 $$ String encoding = (String) wrap.getEncoding()-->Line_7 $$ buffer.getEncoding().append(encoding)[ FD ]
Line_4 $$ final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------")-->Line_7 $$ buffer.getEncoding().append(encoding)[ FD ]
Line_2 $$ public void logging() throws Fault -->Line_9 $$ Object headers = wrap.getProtocolHeaders()[ CD ]
Line_9 $$ Object headers = wrap.getProtocolHeaders()-->Line_9 $$ Object headers = wrap.getProtocolHeaders()[ CD ]
Line_3 $$ final InterceptorWrapper wrap = new InterceptorWrapper(message)-->Line_9 $$ Object headers = wrap.getProtocolHeaders()[ FD ]
Line_2 $$ public void logging() throws Fault -->Line_10 $$ if (headers != null) [ CD ]
Line_9 $$ Object headers = wrap.getProtocolHeaders()-->Line_10 $$ if (headers != null) [ FD ]
Line_10 $$ if (headers != null) -->Line_11 $$ buffer.getHeader().append(headers)[ CD ]
Line_9 $$ Object headers = wrap.getProtocolHeaders()-->Line_11 $$ buffer.getHeader().append(headers)[ FD ]
Line_4 $$ final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------")-->Line_11 $$ buffer.getHeader().append(headers)[ FD ]
Line_2 $$ public void logging() throws Fault -->Line_13 $$ InputStream is = (InputStream) wrap.getContent(InputStream.class)[ CD ]
Line_3 $$ final InterceptorWrapper wrap = new InterceptorWrapper(message)-->Line_13 $$ InputStream is = (InputStream) wrap.getContent(InputStream.class)[ FD ]
Line_2 $$ public void logging() throws Fault -->Line_14 $$ if (is != null) [ CD ]
Line_13 $$ InputStream is = (InputStream) wrap.getContent(InputStream.class)-->Line_14 $$ if (is != null) [ FD ]
Line_14 $$ if (is != null) -->Line_15 $$ CachedOutputStream bos = new CachedOutputStream()[ CD ]
Line_13 $$ InputStream is = (InputStream) wrap.getContent(InputStream.class)-->Line_17 $$ IOUtils.copy(is, bos)[ FD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_17 $$ IOUtils.copy(is, bos)[ FD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_18 $$ bos.flush()[ FD ]
Line_13 $$ InputStream is = (InputStream) wrap.getContent(InputStream.class)-->Line_19 $$ is.close()[ FD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_20 $$ this.message.setContent(InputStream.class, bos.getInputStream())[ FD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_21 $$ if (bos.getTempFile() != null) [ FD ]
Line_21 $$ if (bos.getTempFile() != null) -->Line_22 $$ logger.error("\nMessage (saved to tmp file):\n")[ CD ]
Line_21 $$ if (bos.getTempFile() != null) -->Line_23 $$ logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n")[ CD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_23 $$ logger.error("Filename: " + bos.getTempFile().getAbsolutePath() + "\n")[ FD ]
Line_25 $$ if (bos.size() > limit) -->Line_25 $$ if (bos.size() > limit) [ CD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_25 $$ if (bos.size() > limit) [ FD ]
Line_25 $$ if (bos.size() > limit) -->Line_26 $$ logger.error("(message truncated to " + limit + " bytes)\n")[ CD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_28 $$ bos.writeCacheTo(buffer.getPayload(), limit)[ FD ]
Line_4 $$ final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------")-->Line_28 $$ bos.writeCacheTo(buffer.getPayload(), limit)[ FD ]
Line_15 $$ CachedOutputStream bos = new CachedOutputStream()-->Line_29 $$ bos.close()[ FD ]
Line_2 $$ public void logging() throws Fault -->Line_34 $$ logger.debug("Message received :\n" + buffer.getPayload().toString())[ CD ]
Line_4 $$ final LoggingMessage buffer = new LoggingMessage("Inbound Message\n----------------------------")-->Line_34 $$ logger.debug("Message received :\n" + buffer.getPayload().toString())[ FD ]
