Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void initForEncryption() throws CryptographyException, IOException [ CD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_3 $$ String ownerPassword = pdDocument.getOwnerPasswordForEncryption()[ CD ]
Line_3 $$ String ownerPassword = pdDocument.getOwnerPasswordForEncryption()-->Line_3 $$ String ownerPassword = pdDocument.getOwnerPasswordForEncryption()[ CD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()[ CD ]
Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()-->Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()[ CD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_5 $$ if (ownerPassword == null) [ CD ]
Line_3 $$ String ownerPassword = pdDocument.getOwnerPasswordForEncryption()-->Line_5 $$ if (ownerPassword == null) [ FD ]
Line_5 $$ if (ownerPassword == null) -->Line_6 $$ ownerPassword = ""[ CD ]
Line_3 $$ String ownerPassword = pdDocument.getOwnerPasswordForEncryption()-->Line_6 $$ ownerPassword = ""[ FD ]
Line_6 $$ ownerPassword = ""-->Line_6 $$ ownerPassword = ""[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_8 $$ if (userPassword == null) [ CD ]
Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()-->Line_8 $$ if (userPassword == null) [ FD ]
Line_8 $$ if (userPassword == null) -->Line_9 $$ userPassword = ""[ CD ]
Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()-->Line_9 $$ userPassword = ""[ FD ]
Line_9 $$ userPassword = ""-->Line_9 $$ userPassword = ""[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_11 $$ PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary()[ CD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_12 $$ int permissionInt = encParameters.getPermissions()[ CD ]
Line_12 $$ int permissionInt = encParameters.getPermissions()-->Line_12 $$ int permissionInt = encParameters.getPermissions()[ CD ]
Line_11 $$ PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary()-->Line_12 $$ int permissionInt = encParameters.getPermissions()[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_13 $$ int revision = encParameters.getRevision()[ CD ]
Line_13 $$ int revision = encParameters.getRevision()-->Line_13 $$ int revision = encParameters.getRevision()[ CD ]
Line_11 $$ PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary()-->Line_13 $$ int revision = encParameters.getRevision()[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_14 $$ int length = encParameters.getLength() / 8[ CD ]
Line_11 $$ PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary()-->Line_14 $$ int length = encParameters.getLength() / 8[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_15 $$ COSArray idArray = document.getDocumentID()[ CD ]
Line_15 $$ COSArray idArray = document.getDocumentID()-->Line_15 $$ COSArray idArray = document.getDocumentID()[ CD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_16 $$ if (idArray == null || idArray.size() < 2) [ CD ]
Line_15 $$ COSArray idArray = document.getDocumentID()-->Line_16 $$ if (idArray == null || idArray.size() < 2) [ FD ]
Line_16 $$ if (idArray == null || idArray.size() < 2) -->Line_17 $$ idArray = new COSArray()[ CD ]
Line_15 $$ COSArray idArray = document.getDocumentID()-->Line_17 $$ idArray = new COSArray()[ FD ]
Line_17 $$ idArray = new COSArray()-->Line_17 $$ idArray = new COSArray()[ FD ]
Line_19 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_19 $$ MessageDigest md = MessageDigest.getInstance("MD5")[ CD ]
Line_20 $$ BigInteger time = BigInteger.valueOf(System.currentTimeMillis())-->Line_20 $$ BigInteger time = BigInteger.valueOf(System.currentTimeMillis())[ CD ]
Line_19 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_21 $$ md.update(time.toByteArray())[ FD ]
Line_20 $$ BigInteger time = BigInteger.valueOf(System.currentTimeMillis())-->Line_21 $$ md.update(time.toByteArray())[ FD ]
Line_19 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_22 $$ md.update(ownerPassword.getBytes())[ FD ]
Line_3 $$ String ownerPassword = pdDocument.getOwnerPasswordForEncryption()-->Line_22 $$ md.update(ownerPassword.getBytes())[ FD ]
Line_6 $$ ownerPassword = ""-->Line_22 $$ md.update(ownerPassword.getBytes())[ FD ]
Line_19 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_23 $$ md.update(userPassword.getBytes())[ FD ]
Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()-->Line_23 $$ md.update(userPassword.getBytes())[ FD ]
Line_9 $$ userPassword = ""-->Line_23 $$ md.update(userPassword.getBytes())[ FD ]
Line_19 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_24 $$ md.update(document.toString().getBytes())[ FD ]
Line_25 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_25 $$ byte[] id = md.digest(this.toString().getBytes())[ CD ]
Line_19 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_25 $$ byte[] id = md.digest(this.toString().getBytes())[ FD ]
Line_26 $$ COSString idString = new COSString()-->Line_27 $$ idString.append(id)[ FD ]
Line_25 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_27 $$ idString.append(id)[ FD ]
Line_15 $$ COSArray idArray = document.getDocumentID()-->Line_28 $$ idArray.add(idString)[ FD ]
Line_17 $$ idArray = new COSArray()-->Line_28 $$ idArray.add(idString)[ FD ]
Line_26 $$ COSString idString = new COSString()-->Line_28 $$ idArray.add(idString)[ FD ]
Line_15 $$ COSArray idArray = document.getDocumentID()-->Line_29 $$ idArray.add(idString)[ FD ]
Line_17 $$ idArray = new COSArray()-->Line_29 $$ idArray.add(idString)[ FD ]
Line_26 $$ COSString idString = new COSString()-->Line_29 $$ idArray.add(idString)[ FD ]
Line_15 $$ COSArray idArray = document.getDocumentID()-->Line_30 $$ document.setDocumentID(idArray)[ FD ]
Line_17 $$ idArray = new COSArray()-->Line_30 $$ document.setDocumentID(idArray)[ FD ]
Line_15 $$ COSArray idArray = document.getDocumentID()-->Line_35 $$ COSString id = (COSString) idArray.getObject(0)[ FD ]
Line_17 $$ idArray = new COSArray()-->Line_35 $$ COSString id = (COSString) idArray.getObject(0)[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ CD ]
Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ CD ]
Line_13 $$ int revision = encParameters.getRevision()-->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_14 $$ int length = encParameters.getLength() / 8-->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_3 $$ String ownerPassword = pdDocument.getOwnerPasswordForEncryption()-->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_6 $$ ownerPassword = ""-->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()-->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_9 $$ userPassword = ""-->Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ CD ]
Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ CD ]
Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_12 $$ int permissionInt = encParameters.getPermissions()-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_13 $$ int revision = encParameters.getRevision()-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_14 $$ int length = encParameters.getLength() / 8-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_9 $$ userPassword = ""-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_25 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ CD ]
Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_12 $$ int permissionInt = encParameters.getPermissions()-->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_13 $$ int revision = encParameters.getRevision()-->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_14 $$ int length = encParameters.getLength() / 8-->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_4 $$ String userPassword = pdDocument.getUserPasswordForEncryption()-->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_9 $$ userPassword = ""-->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_25 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_39 $$ encryptionKey = encryption.computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_40 $$ encParameters.setOwnerKey(o)[ CD ]
Line_11 $$ PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary()-->Line_40 $$ encParameters.setOwnerKey(o)[ FD ]
Line_37 $$ byte[] o = encryption.computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_40 $$ encParameters.setOwnerKey(o)[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_41 $$ encParameters.setUserKey(u)[ CD ]
Line_11 $$ PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary()-->Line_41 $$ encParameters.setUserKey(u)[ FD ]
Line_38 $$ byte[] u = encryption.computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)-->Line_41 $$ encParameters.setUserKey(u)[ FD ]
Line_2 $$ public void initForEncryption() throws CryptographyException, IOException -->Line_42 $$ document.setEncryptionDictionary(encParameters.getCOSDictionary())[ CD ]
Line_11 $$ PDStandardEncryption encParameters = (PDStandardEncryption) pdDocument.getEncryptionDictionary()-->Line_42 $$ document.setEncryptionDictionary(encParameters.getCOSDictionary())[ FD ]
