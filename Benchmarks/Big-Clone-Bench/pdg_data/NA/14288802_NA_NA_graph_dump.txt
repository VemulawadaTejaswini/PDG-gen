Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException [ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_3 $$ InputStream in[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_4 $$ if (path.startsWith("classpath:")) [ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_4 $$ if (path.startsWith("classpath:")) [ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_4 $$ if (path.startsWith("classpath:")) [ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_4 $$ if (path.startsWith("classpath:")) [ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_5 $$ path = path.substring("classpath:".length())[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_5 $$ path = path.substring("classpath:".length())[ FD ]
Line_5 $$ path = path.substring("classpath:".length())-->Line_5 $$ path = path.substring("classpath:".length())[ FD ]
Line_5 $$ path = path.substring("classpath:".length())-->Line_5 $$ path = path.substring("classpath:".length())[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_5 $$ path = path.substring("classpath:".length())[ FD ]
Line_5 $$ path = path.substring("classpath:".length())-->Line_5 $$ path = path.substring("classpath:".length())[ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)[ CD ]
Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)-->Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)[ FD ]
Line_5 $$ path = path.substring("classpath:".length())-->Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)[ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_7 $$ if (url == null) [ CD ]
Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)-->Line_7 $$ if (url == null) [ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_10 $$ System.out.println("read content from:" + url.getFile())[ CD ]
Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)-->Line_10 $$ System.out.println("read content from:" + url.getFile())[ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_11 $$ in = url.openStream()[ CD ]
Line_3 $$ InputStream in-->Line_11 $$ in = url.openStream()[ FD ]
Line_11 $$ in = url.openStream()-->Line_11 $$ in = url.openStream()[ FD ]
Line_11 $$ in = url.openStream()-->Line_11 $$ in = url.openStream()[ CD ]
Line_6 $$ URL url = Estimate.class.getClassLoader().getResource(path)-->Line_11 $$ in = url.openStream()[ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_13 $$ File f = new File(path)[ CD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_14 $$ if (!f.exists()) [ CD ]
Line_14 $$ if (!f.exists()) -->Line_14 $$ if (!f.exists()) [ CD ]
Line_14 $$ if (!f.exists()) -->Line_14 $$ if (!f.exists()) [ CD ]
Line_13 $$ File f = new File(path)-->Line_14 $$ if (!f.exists()) [ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_17 $$ System.out.println("read content from:" + f.getAbsolutePath())[ CD ]
Line_13 $$ File f = new File(path)-->Line_17 $$ System.out.println("read content from:" + f.getAbsolutePath())[ FD ]
Line_4 $$ if (path.startsWith("classpath:")) -->Line_18 $$ in = new FileInputStream(f)[ CD ]
Line_3 $$ InputStream in-->Line_18 $$ in = new FileInputStream(f)[ FD ]
Line_11 $$ in = url.openStream()-->Line_18 $$ in = new FileInputStream(f)[ FD ]
Line_18 $$ in = new FileInputStream(f)-->Line_18 $$ in = new FileInputStream(f)[ FD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_20 $$ Reader re[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_21 $$ if (encoding != null) [ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_21 $$ if (encoding != null) [ FD ]
Line_21 $$ if (encoding != null) -->Line_22 $$ re = new InputStreamReader(in, encoding)[ CD ]
Line_20 $$ Reader re-->Line_22 $$ re = new InputStreamReader(in, encoding)[ FD ]
Line_22 $$ re = new InputStreamReader(in, encoding)-->Line_22 $$ re = new InputStreamReader(in, encoding)[ FD ]
Line_21 $$ if (encoding != null) -->Line_24 $$ re = new InputStreamReader(in)[ CD ]
Line_20 $$ Reader re-->Line_24 $$ re = new InputStreamReader(in)[ FD ]
Line_22 $$ re = new InputStreamReader(in, encoding)-->Line_24 $$ re = new InputStreamReader(in)[ FD ]
Line_24 $$ re = new InputStreamReader(in)-->Line_24 $$ re = new InputStreamReader(in)[ FD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_26 $$ if (!return_string) [ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_26 $$ if (!return_string) [ FD ]
Line_26 $$ if (!return_string) -->Line_26 $$ if (!return_string) [ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_26 $$ if (!return_string) [ FD ]
Line_26 $$ if (!return_string) -->Line_27 $$ return re[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_29 $$ char[] chs = new char[1024][ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_30 $$ int count[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_31 $$ StringBuffer content = new StringBuffer()[ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_32 $$ while ((count = re.read(chs)) != -1) [ CD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException [ CD ]
Line_32 $$ while ((count = re.read(chs)) != -1) -->Line_32 $$ while ((count = re.read(chs)) != -1) [ FD ]
Line_30 $$ int count-->Line_32 $$ while ((count = re.read(chs)) != -1) [ FD ]
Line_32 $$ while ((count = re.read(chs)) != -1) -->Line_32 $$ while ((count = re.read(chs)) != -1) [ CD ]
Line_20 $$ Reader re-->Line_32 $$ while ((count = re.read(chs)) != -1) [ FD ]
Line_22 $$ re = new InputStreamReader(in, encoding)-->Line_32 $$ while ((count = re.read(chs)) != -1) [ FD ]
Line_24 $$ re = new InputStreamReader(in)-->Line_32 $$ while ((count = re.read(chs)) != -1) [ FD ]
Line_29 $$ char[] chs = new char[1024]-->Line_32 $$ while ((count = re.read(chs)) != -1) [ FD ]
Line_32 $$ while ((count = re.read(chs)) != -1) -->Line_33 $$ content.append(chs, 0, count)[ CD ]
Line_31 $$ StringBuffer content = new StringBuffer()-->Line_33 $$ content.append(chs, 0, count)[ FD ]
Line_29 $$ char[] chs = new char[1024]-->Line_33 $$ content.append(chs, 0, count)[ FD ]
Line_32 $$ while ((count = re.read(chs)) != -1) -->Line_33 $$ content.append(chs, 0, count)[ FD ]
Line_30 $$ int count-->Line_33 $$ content.append(chs, 0, count)[ FD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_35 $$ re.close()[ CD ]
Line_20 $$ Reader re-->Line_35 $$ re.close()[ FD ]
Line_22 $$ re = new InputStreamReader(in, encoding)-->Line_35 $$ re.close()[ FD ]
Line_24 $$ re = new InputStreamReader(in)-->Line_35 $$ re.close()[ FD ]
Line_2 $$ static Object read(String path, String encoding, boolean return_string) throws IOException -->Line_36 $$ return content.toString()[ CD ]
Line_36 $$ return content.toString()-->Line_36 $$ return content.toString()[ CD ]
Line_31 $$ StringBuffer content = new StringBuffer()-->Line_36 $$ return content.toString()[ FD ]
Line_32 $$ while ((count = re.read(chs)) != -1) -->Line_33 $$ content.append(chs, 0, count)[ FD ]
