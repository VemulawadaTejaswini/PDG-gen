Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String hashJopl(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) [ CD ]
Line_4 $$ MessageDigest digest = MessageDigest.getInstance(algorithm)-->Line_4 $$ MessageDigest digest = MessageDigest.getInstance(algorithm)[ CD ]
Line_2 $$ public static String hashJopl(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) -->Line_4 $$ MessageDigest digest = MessageDigest.getInstance(algorithm)[ FD ]
Line_5 $$ if (useDefaultEncoding) -->Line_6 $$ digest.update(password.getBytes())[ CD ]
Line_4 $$ MessageDigest digest = MessageDigest.getInstance(algorithm)-->Line_6 $$ digest.update(password.getBytes())[ FD ]
Line_2 $$ public static String hashJopl(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) -->Line_6 $$ digest.update(password.getBytes())[ FD ]
Line_2 $$ public static String hashJopl(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) -->Line_8 $$ for (char c : password.toCharArray()) [ FD ]
Line_4 $$ MessageDigest digest = MessageDigest.getInstance(algorithm)-->Line_9 $$ digest.update((byte) (c >> 8))[ FD ]
Line_4 $$ MessageDigest digest = MessageDigest.getInstance(algorithm)-->Line_10 $$ digest.update((byte) c)[ FD ]
Line_13 $$ byte[] digestedPassword = digest.digest()-->Line_13 $$ byte[] digestedPassword = digest.digest()[ CD ]
Line_4 $$ MessageDigest digest = MessageDigest.getInstance(algorithm)-->Line_13 $$ byte[] digestedPassword = digest.digest()[ FD ]
Line_15 $$ String encodedDigestedStr = encoder.encode(digestedPassword)-->Line_15 $$ String encodedDigestedStr = encoder.encode(digestedPassword)[ CD ]
Line_14 $$ BASE64Encoder encoder = new BASE64Encoder()-->Line_15 $$ String encodedDigestedStr = encoder.encode(digestedPassword)[ FD ]
Line_13 $$ byte[] digestedPassword = digest.digest()-->Line_15 $$ String encodedDigestedStr = encoder.encode(digestedPassword)[ FD ]
