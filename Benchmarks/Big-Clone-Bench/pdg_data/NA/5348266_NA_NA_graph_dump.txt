Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception [ CD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_3 $$ File sourceFile = new File(source)[ CD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_4 $$ File destinationFile = new File(destination)[ CD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_5 $$ if (!sourceFile.exists()) [ CD ]
Line_5 $$ if (!sourceFile.exists()) -->Line_5 $$ if (!sourceFile.exists()) [ CD ]
Line_5 $$ if (!sourceFile.exists()) -->Line_5 $$ if (!sourceFile.exists()) [ CD ]
Line_3 $$ File sourceFile = new File(source)-->Line_5 $$ if (!sourceFile.exists()) [ FD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_8 $$ if (!sourceFile.isFile()) [ CD ]
Line_8 $$ if (!sourceFile.isFile()) -->Line_8 $$ if (!sourceFile.isFile()) [ CD ]
Line_8 $$ if (!sourceFile.isFile()) -->Line_8 $$ if (!sourceFile.isFile()) [ CD ]
Line_3 $$ File sourceFile = new File(source)-->Line_8 $$ if (!sourceFile.isFile()) [ FD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_11 $$ if (!sourceFile.canRead()) [ CD ]
Line_11 $$ if (!sourceFile.canRead()) -->Line_11 $$ if (!sourceFile.canRead()) [ CD ]
Line_11 $$ if (!sourceFile.canRead()) -->Line_11 $$ if (!sourceFile.canRead()) [ CD ]
Line_3 $$ File sourceFile = new File(source)-->Line_11 $$ if (!sourceFile.canRead()) [ FD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_14 $$ if (destinationFile.exists()) [ CD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_14 $$ if (destinationFile.exists()) [ FD ]
Line_14 $$ if (destinationFile.exists()) -->Line_14 $$ if (destinationFile.exists()) [ CD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_14 $$ if (destinationFile.exists()) [ FD ]
Line_14 $$ if (destinationFile.exists()) -->Line_15 $$ m_out.print("  - " + destination + " exists, removing... ")[ CD ]
Line_14 $$ if (destinationFile.exists()) -->Line_16 $$ if (destinationFile.delete()) [ CD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_16 $$ if (destinationFile.delete()) [ FD ]
Line_16 $$ if (destinationFile.delete()) -->Line_16 $$ if (destinationFile.delete()) [ CD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_16 $$ if (destinationFile.delete()) [ FD ]
Line_16 $$ if (destinationFile.delete()) -->Line_17 $$ m_out.println("REMOVED")[ CD ]
Line_16 $$ if (destinationFile.delete()) -->Line_19 $$ m_out.println("FAILED")[ CD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_23 $$ m_out.print("  - copying " + source + " to " + destination + "... ")[ CD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_24 $$ if (!destinationFile.getParentFile().exists()) [ CD ]
Line_24 $$ if (!destinationFile.getParentFile().exists()) -->Line_24 $$ if (!destinationFile.getParentFile().exists()) [ CD ]
Line_24 $$ if (!destinationFile.getParentFile().exists()) -->Line_24 $$ if (!destinationFile.getParentFile().exists()) [ CD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_24 $$ if (!destinationFile.getParentFile().exists()) [ FD ]
Line_24 $$ if (!destinationFile.getParentFile().exists()) -->Line_25 $$ if (!destinationFile.getParentFile().mkdirs()) [ CD ]
Line_25 $$ if (!destinationFile.getParentFile().mkdirs()) -->Line_25 $$ if (!destinationFile.getParentFile().mkdirs()) [ CD ]
Line_25 $$ if (!destinationFile.getParentFile().mkdirs()) -->Line_25 $$ if (!destinationFile.getParentFile().mkdirs()) [ CD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_25 $$ if (!destinationFile.getParentFile().mkdirs()) [ FD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_26 $$ throw new Exception("unable to create directory: " + destinationFile.getParent())[ FD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_29 $$ if (!destinationFile.createNewFile()) [ CD ]
Line_29 $$ if (!destinationFile.createNewFile()) -->Line_29 $$ if (!destinationFile.createNewFile()) [ CD ]
Line_29 $$ if (!destinationFile.createNewFile()) -->Line_29 $$ if (!destinationFile.createNewFile()) [ CD ]
Line_4 $$ File destinationFile = new File(destination)-->Line_29 $$ if (!destinationFile.createNewFile()) [ FD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_32 $$ FileChannel from = null[ CD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_33 $$ FileChannel to = null[ CD ]
Line_32 $$ FileChannel from = null-->Line_35 $$ from = new FileInputStream(sourceFile).getChannel()[ FD ]
Line_35 $$ from = new FileInputStream(sourceFile).getChannel()-->Line_35 $$ from = new FileInputStream(sourceFile).getChannel()[ FD ]
Line_35 $$ from = new FileInputStream(sourceFile).getChannel()-->Line_35 $$ from = new FileInputStream(sourceFile).getChannel()[ CD ]
Line_33 $$ FileChannel to = null-->Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()[ FD ]
Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()-->Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()[ FD ]
Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()-->Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()[ CD ]
Line_33 $$ FileChannel to = null-->Line_37 $$ to.transferFrom(from, 0, from.size())[ FD ]
Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()-->Line_37 $$ to.transferFrom(from, 0, from.size())[ FD ]
Line_32 $$ FileChannel from = null-->Line_37 $$ to.transferFrom(from, 0, from.size())[ FD ]
Line_35 $$ from = new FileInputStream(sourceFile).getChannel()-->Line_37 $$ to.transferFrom(from, 0, from.size())[ FD ]
Line_32 $$ FileChannel from = null-->Line_37 $$ to.transferFrom(from, 0, from.size())[ FD ]
Line_35 $$ from = new FileInputStream(sourceFile).getChannel()-->Line_37 $$ to.transferFrom(from, 0, from.size())[ FD ]
Line_32 $$ FileChannel from = null-->Line_41 $$ if (from != null) [ FD ]
Line_35 $$ from = new FileInputStream(sourceFile).getChannel()-->Line_41 $$ if (from != null) [ FD ]
Line_41 $$ if (from != null) -->Line_42 $$ from.close()[ CD ]
Line_32 $$ FileChannel from = null-->Line_42 $$ from.close()[ FD ]
Line_35 $$ from = new FileInputStream(sourceFile).getChannel()-->Line_42 $$ from.close()[ FD ]
Line_33 $$ FileChannel to = null-->Line_44 $$ if (to != null) [ FD ]
Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()-->Line_44 $$ if (to != null) [ FD ]
Line_44 $$ if (to != null) -->Line_45 $$ to.close()[ CD ]
Line_33 $$ FileChannel to = null-->Line_45 $$ to.close()[ FD ]
Line_36 $$ to = new FileOutputStream(destinationFile).getChannel()-->Line_45 $$ to.close()[ FD ]
Line_2 $$ public void copyFile(String source, String destination, String description, boolean recursive) throws Exception -->Line_48 $$ m_out.println("DONE")[ CD ]
