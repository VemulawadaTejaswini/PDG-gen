Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException [ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_3 $$ if (params == null)[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_3 $$ if (params == null)[ FD ]
Line_3 $$ if (params == null)-->Line_3 $$ params = new DjatokaEncodeParam()[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_3 $$ params = new DjatokaEncodeParam()[ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_3 $$ params = new DjatokaEncodeParam()[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_4 $$ File inputFile = null[ CD ]
Line_4 $$ File inputFile = null-->Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")[ FD ]
Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")-->Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")[ FD ]
Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")-->Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_7 $$ IOUtils.copyStream(input, new FileOutputStream(inputFile))[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_8 $$ if (params.getLevels() == 0) [ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_8 $$ if (params.getLevels() == 0) [ FD ]
Line_8 $$ if (params.getLevels() == 0) -->Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())[ CD ]
Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())-->Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())[ CD ]
Line_4 $$ File inputFile = null-->Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())[ FD ]
Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")-->Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())[ FD ]
Line_8 $$ if (params.getLevels() == 0) -->Line_10 $$ params.setLevels(ImageProcessingUtils.getLevelCount(dim.getWidth(), dim.getHeight()))[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_10 $$ params.setLevels(ImageProcessingUtils.getLevelCount(dim.getWidth(), dim.getHeight()))[ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_10 $$ params.setLevels(ImageProcessingUtils.getLevelCount(dim.getWidth(), dim.getHeight()))[ FD ]
Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())-->Line_10 $$ params.setLevels(ImageProcessingUtils.getLevelCount(dim.getWidth(), dim.getHeight()))[ FD ]
Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())-->Line_10 $$ params.setLevels(ImageProcessingUtils.getLevelCount(dim.getWidth(), dim.getHeight()))[ FD ]
Line_8 $$ if (params.getLevels() == 0) -->Line_11 $$ dim = null[ CD ]
Line_9 $$ ImageRecord dim = ImageRecordUtils.getImageDimensions(inputFile.getAbsolutePath())-->Line_11 $$ dim = null[ FD ]
Line_11 $$ dim = null-->Line_11 $$ dim = null[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_17 $$ String out = STDOUT[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_18 $$ File winOut = null[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_19 $$ if (isWindows) [ CD ]
Line_18 $$ File winOut = null-->Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")[ FD ]
Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")-->Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")[ FD ]
Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")-->Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")[ CD ]
Line_19 $$ if (isWindows) -->Line_26 $$ out = winOut.getAbsolutePath()[ CD ]
Line_17 $$ String out = STDOUT-->Line_26 $$ out = winOut.getAbsolutePath()[ FD ]
Line_26 $$ out = winOut.getAbsolutePath()-->Line_26 $$ out = winOut.getAbsolutePath()[ FD ]
Line_26 $$ out = winOut.getAbsolutePath()-->Line_26 $$ out = winOut.getAbsolutePath()[ CD ]
Line_18 $$ File winOut = null-->Line_26 $$ out = winOut.getAbsolutePath()[ FD ]
Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")-->Line_26 $$ out = winOut.getAbsolutePath()[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ CD ]
Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)-->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ CD ]
Line_17 $$ String out = STDOUT-->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ FD ]
Line_26 $$ out = winOut.getAbsolutePath()-->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ FD ]
Line_4 $$ File inputFile = null-->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ FD ]
Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")-->Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_29 $$ logger.debug("compressCommand: " + command)[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_30 $$ Runtime rt = Runtime.getRuntime()[ CD ]
Line_30 $$ Runtime rt = Runtime.getRuntime()-->Line_30 $$ Runtime rt = Runtime.getRuntime()[ CD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))[ CD ]
Line_30 $$ Runtime rt = Runtime.getRuntime()-->Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))[ FD ]
Line_28 $$ String command = getKduCompressCommand(inputFile.getAbsolutePath(), out, params)-->Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))[ FD ]
Line_17 $$ String out = STDOUT-->Line_33 $$ if (out.equals(STDOUT)) [ FD ]
Line_26 $$ out = winOut.getAbsolutePath()-->Line_33 $$ if (out.equals(STDOUT)) [ FD ]
Line_33 $$ if (out.equals(STDOUT)) -->Line_33 $$ if (out.equals(STDOUT)) [ CD ]
Line_17 $$ String out = STDOUT-->Line_33 $$ if (out.equals(STDOUT)) [ FD ]
Line_26 $$ out = winOut.getAbsolutePath()-->Line_33 $$ if (out.equals(STDOUT)) [ FD ]
Line_33 $$ if (out.equals(STDOUT)) -->Line_34 $$ IOUtils.copyStream(process.getInputStream(), output)[ CD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_34 $$ IOUtils.copyStream(process.getInputStream(), output)[ FD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_34 $$ IOUtils.copyStream(process.getInputStream(), output)[ FD ]
Line_33 $$ if (out.equals(STDOUT)) -->Line_35 $$ if (isWindows) [ CD ]
Line_35 $$ if (isWindows) -->Line_36 $$ FileInputStream fis = new FileInputStream(out)[ CD ]
Line_35 $$ if (isWindows) -->Line_37 $$ IOUtils.copyStream(fis, output)[ CD ]
Line_36 $$ FileInputStream fis = new FileInputStream(out)-->Line_37 $$ IOUtils.copyStream(fis, output)[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_37 $$ IOUtils.copyStream(fis, output)[ FD ]
Line_35 $$ if (isWindows) -->Line_38 $$ fis.close()[ CD ]
Line_36 $$ FileInputStream fis = new FileInputStream(out)-->Line_38 $$ fis.close()[ FD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_40 $$ process.waitFor()[ FD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_41 $$ if (process != null) [ FD ]
Line_41 $$ if (process != null) -->Line_42 $$ String errorCheck = null[ CD ]
Line_42 $$ String errorCheck = null-->Line_44 $$ errorCheck = new String(IOUtils.getByteArray(process.getErrorStream()))[ FD ]
Line_44 $$ errorCheck = new String(IOUtils.getByteArray(process.getErrorStream()))-->Line_44 $$ errorCheck = new String(IOUtils.getByteArray(process.getErrorStream()))[ FD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_44 $$ errorCheck = new String(IOUtils.getByteArray(process.getErrorStream()))[ FD ]
Line_41 $$ if (process != null) -->Line_48 $$ process.getInputStream().close()[ CD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_48 $$ process.getInputStream().close()[ FD ]
Line_41 $$ if (process != null) -->Line_49 $$ process.getOutputStream().close()[ CD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_49 $$ process.getOutputStream().close()[ FD ]
Line_41 $$ if (process != null) -->Line_50 $$ process.getErrorStream().close()[ CD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_50 $$ process.getErrorStream().close()[ FD ]
Line_41 $$ if (process != null) -->Line_51 $$ process.destroy()[ CD ]
Line_32 $$ final Process process = rt.exec(command, envParams, new File(env))-->Line_51 $$ process.destroy()[ FD ]
Line_41 $$ if (process != null) -->Line_52 $$ if (errorCheck != null)[ CD ]
Line_42 $$ String errorCheck = null-->Line_52 $$ if (errorCheck != null)[ FD ]
Line_44 $$ errorCheck = new String(IOUtils.getByteArray(process.getErrorStream()))-->Line_52 $$ if (errorCheck != null)[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_61 $$ if (inputFile != null)[ CD ]
Line_4 $$ File inputFile = null-->Line_61 $$ if (inputFile != null)[ FD ]
Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")-->Line_61 $$ if (inputFile != null)[ FD ]
Line_61 $$ if (inputFile != null)-->Line_61 $$ inputFile.delete()[ CD ]
Line_4 $$ File inputFile = null-->Line_61 $$ inputFile.delete()[ FD ]
Line_6 $$ inputFile = File.createTempFile("tmp", ".tif")-->Line_61 $$ inputFile.delete()[ FD ]
Line_2 $$ public void compressImage(InputStream input, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_62 $$ if (winOut != null)[ CD ]
Line_18 $$ File winOut = null-->Line_62 $$ if (winOut != null)[ FD ]
Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")-->Line_62 $$ if (winOut != null)[ FD ]
Line_62 $$ if (winOut != null)-->Line_62 $$ winOut.delete()[ CD ]
Line_18 $$ File winOut = null-->Line_62 $$ winOut.delete()[ FD ]
Line_21 $$ winOut = File.createTempFile("pipe_", ".jp2")-->Line_62 $$ winOut.delete()[ FD ]
