Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException [ CD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_3 $$ URI datasourceURI[ CD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_4 $$ OWLOntology datasourceOntology = null[ CD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_5 $$ URL baseURL = new URL(url.toString().replace("META-INF/artifact.properties", ""))[ CD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_5 $$ URL baseURL = new URL(url.toString().replace("META-INF/artifact.properties", ""))[ FD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_6 $$ Properties properties = new Properties()[ CD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_7 $$ properties.load(url.openStream())[ CD ]
Line_6 $$ Properties properties = new Properties()-->Line_7 $$ properties.load(url.openStream())[ FD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_7 $$ properties.load(url.openStream())[ FD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_8 $$ String fileName = properties.get("db").toString() + ".owl"[ CD ]
Line_6 $$ Properties properties = new Properties()-->Line_8 $$ String fileName = properties.get("db").toString() + ".owl"[ FD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_9 $$ String pkg = properties.get("package").toString()[ CD ]
Line_9 $$ String pkg = properties.get("package").toString()-->Line_9 $$ String pkg = properties.get("package").toString()[ CD ]
Line_6 $$ Properties properties = new Properties()-->Line_9 $$ String pkg = properties.get("package").toString()[ FD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_10 $$ datasourceURI = URI.create("http://" + properties.get("host").toString() + "/" + fileName)[ CD ]
Line_3 $$ URI datasourceURI-->Line_10 $$ datasourceURI = URI.create("http://" + properties.get("host").toString() + "/" + fileName)[ FD ]
Line_10 $$ datasourceURI = URI.create("http://" + properties.get("host").toString() + "/" + fileName)-->Line_10 $$ datasourceURI = URI.create("http://" + properties.get("host").toString() + "/" + fileName)[ FD ]
Line_10 $$ datasourceURI = URI.create("http://" + properties.get("host").toString() + "/" + fileName)-->Line_10 $$ datasourceURI = URI.create("http://" + properties.get("host").toString() + "/" + fileName)[ CD ]
Line_6 $$ Properties properties = new Properties()-->Line_10 $$ datasourceURI = URI.create("http://" + properties.get("host").toString() + "/" + fileName)[ FD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_11 $$ Set<Class> beans = new HashSet<Class>()[ CD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) [ CD ]
Line_5 $$ URL baseURL = new URL(url.toString().replace("META-INF/artifact.properties", ""))-->Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) [ FD ]
Line_5 $$ URL baseURL = new URL(url.toString().replace("META-INF/artifact.properties", ""))-->Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) [ FD ]
Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) -->Line_13 $$ JarURLConnection jarConn = (JarURLConnection) baseURL.openConnection()[ CD ]
Line_5 $$ URL baseURL = new URL(url.toString().replace("META-INF/artifact.properties", ""))-->Line_13 $$ JarURLConnection jarConn = (JarURLConnection) baseURL.openConnection()[ FD ]
Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) -->Line_14 $$ Enumeration<JarEntry> entries = jarConn.getJarFile().entries()[ CD ]
Line_14 $$ Enumeration<JarEntry> entries = jarConn.getJarFile().entries()-->Line_14 $$ Enumeration<JarEntry> entries = jarConn.getJarFile().entries()[ CD ]
Line_13 $$ JarURLConnection jarConn = (JarURLConnection) baseURL.openConnection()-->Line_14 $$ Enumeration<JarEntry> entries = jarConn.getJarFile().entries()[ FD ]
Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) -->Line_15 $$ while (entries.hasMoreElements()) [ CD ]
Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) -->Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) [ CD ]
Line_15 $$ while (entries.hasMoreElements()) -->Line_15 $$ while (entries.hasMoreElements()) [ CD ]
Line_14 $$ Enumeration<JarEntry> entries = jarConn.getJarFile().entries()-->Line_15 $$ while (entries.hasMoreElements()) [ FD ]
Line_15 $$ while (entries.hasMoreElements()) -->Line_16 $$ JarEntry next = entries.nextElement()[ CD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_16 $$ JarEntry next = entries.nextElement()[ CD ]
Line_14 $$ Enumeration<JarEntry> entries = jarConn.getJarFile().entries()-->Line_16 $$ JarEntry next = entries.nextElement()[ FD ]
Line_15 $$ while (entries.hasMoreElements()) -->Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) [ CD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) [ FD ]
Line_9 $$ String pkg = properties.get("package").toString()-->Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) [ FD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) [ FD ]
Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) -->Line_18 $$ String fullClassName = next.getName().replace('/', '.').replace(".class", "")[ CD ]
Line_18 $$ String fullClassName = next.getName().replace('/', '.').replace(".class", "")-->Line_18 $$ String fullClassName = next.getName().replace('/', '.').replace(".class", "")[ CD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_18 $$ String fullClassName = next.getName().replace('/', '.').replace(".class", "")[ FD ]
Line_11 $$ Set<Class> beans = new HashSet<Class>()-->Line_20 $$ beans.add(contextLoader.loadClass(fullClassName))[ FD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_20 $$ beans.add(contextLoader.loadClass(fullClassName))[ FD ]
Line_18 $$ String fullClassName = next.getName().replace('/', '.').replace(".class", "")-->Line_20 $$ beans.add(contextLoader.loadClass(fullClassName))[ FD ]
Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) -->Line_24 $$ if (next.getName().equals(fileName)) [ CD ]
Line_8 $$ String fileName = properties.get("db").toString() + ".owl"-->Line_24 $$ if (next.getName().equals(fileName)) [ FD ]
Line_24 $$ if (next.getName().equals(fileName)) -->Line_24 $$ if (next.getName().equals(fileName)) [ CD ]
Line_8 $$ String fileName = properties.get("db").toString() + ".owl"-->Line_24 $$ if (next.getName().equals(fileName)) [ FD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_24 $$ if (next.getName().equals(fileName)) [ FD ]
Line_24 $$ if (next.getName().equals(fileName)) -->Line_25 $$ String resName = next.getName()[ CD ]
Line_25 $$ String resName = next.getName()-->Line_25 $$ String resName = next.getName()[ CD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_25 $$ String resName = next.getName()[ FD ]
Line_24 $$ if (next.getName().equals(fileName)) -->Line_26 $$ URL owl = contextLoader.getResource(resName)[ CD ]
Line_26 $$ URL owl = contextLoader.getResource(resName)-->Line_26 $$ URL owl = contextLoader.getResource(resName)[ CD ]
Line_2 $$ private DataSource loadSingleDataSource(ClassLoader contextLoader, URL url) throws IOException, DataSourceException -->Line_26 $$ URL owl = contextLoader.getResource(resName)[ FD ]
Line_25 $$ String resName = next.getName()-->Line_26 $$ URL owl = contextLoader.getResource(resName)[ FD ]
Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())-->Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())[ FD ]
Line_4 $$ OWLOntology datasourceOntology = null-->Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())[ FD ]
Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())-->Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())[ CD ]
Line_26 $$ URL owl = contextLoader.getResource(resName)-->Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())[ FD ]
Line_26 $$ URL owl = contextLoader.getResource(resName)-->Line_30 $$ throw new DataSourceException("Bad syntax converting url -> uri: " + owl.toString(), e)[ FD ]
Line_26 $$ URL owl = contextLoader.getResource(resName)-->Line_32 $$ throw new DataSourceException("Couldn't create ontology from " + owl.toString(), e)[ FD ]
Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) -->Line_36 $$ if (beans.size() == 0) [ CD ]
Line_11 $$ Set<Class> beans = new HashSet<Class>()-->Line_36 $$ if (beans.size() == 0) [ FD ]
Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) -->Line_39 $$ if (datasourceOntology == null) [ CD ]
Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())-->Line_39 $$ if (datasourceOntology == null) [ FD ]
Line_4 $$ OWLOntology datasourceOntology = null-->Line_39 $$ if (datasourceOntology == null) [ FD ]
Line_12 $$ if (baseURL.toString().startsWith("jar") && baseURL.toString().endsWith("!/")) -->Line_42 $$ return new BeanModelDataSource(datasourceURI, datasourceOntology)[ CD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) [ FD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_17 $$ if (next.getName().startsWith(pkg.replace('.', '/')) && next.getName().endsWith(".class")) [ FD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_18 $$ String fullClassName = next.getName().replace('/', '.').replace(".class", "")[ FD ]
Line_18 $$ String fullClassName = next.getName().replace('/', '.').replace(".class", "")-->Line_20 $$ beans.add(contextLoader.loadClass(fullClassName))[ FD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_24 $$ if (next.getName().equals(fileName)) [ FD ]
Line_16 $$ JarEntry next = entries.nextElement()-->Line_25 $$ String resName = next.getName()[ FD ]
Line_25 $$ String resName = next.getName()-->Line_26 $$ URL owl = contextLoader.getResource(resName)[ FD ]
Line_26 $$ URL owl = contextLoader.getResource(resName)-->Line_28 $$ datasourceOntology = OWLManager.createOWLOntologyManager().loadOntologyFromPhysicalURI(owl.toURI())[ FD ]
Line_26 $$ URL owl = contextLoader.getResource(resName)-->Line_30 $$ throw new DataSourceException("Bad syntax converting url -> uri: " + owl.toString(), e)[ FD ]
Line_26 $$ URL owl = contextLoader.getResource(resName)-->Line_32 $$ throw new DataSourceException("Couldn't create ontology from " + owl.toString(), e)[ FD ]
