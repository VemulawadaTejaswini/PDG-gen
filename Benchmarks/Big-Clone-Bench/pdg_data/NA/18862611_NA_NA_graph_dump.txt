Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public TestReport runImpl() throws Exception [ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_3 $$ DocumentFactory df = new SAXDocumentFactory(GenericDOMImplementation.getDOMImplementation(), parserClassName)[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_4 $$ File f = (new File(testFileName))[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_5 $$ URL url = f.toURL()[ CD ]
Line_5 $$ URL url = f.toURL()-->Line_5 $$ URL url = f.toURL()[ CD ]
Line_4 $$ File f = (new File(testFileName))-->Line_5 $$ URL url = f.toURL()[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())[ CD ]
Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())-->Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())[ CD ]
Line_3 $$ DocumentFactory df = new SAXDocumentFactory(GenericDOMImplementation.getDOMImplementation(), parserClassName)-->Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())[ FD ]
Line_5 $$ URL url = f.toURL()-->Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())[ FD ]
Line_5 $$ URL url = f.toURL()-->Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_7 $$ File ser1 = File.createTempFile("doc1", "ser")[ CD ]
Line_7 $$ File ser1 = File.createTempFile("doc1", "ser")-->Line_7 $$ File ser1 = File.createTempFile("doc1", "ser")[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_8 $$ File ser2 = File.createTempFile("doc2", "ser")[ CD ]
Line_8 $$ File ser2 = File.createTempFile("doc2", "ser")-->Line_8 $$ File ser2 = File.createTempFile("doc2", "ser")[ CD ]
Line_10 $$ ObjectOutputStream oos-->Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))[ FD ]
Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))-->Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))[ FD ]
Line_10 $$ ObjectOutputStream oos-->Line_12 $$ oos.writeObject(doc)[ FD ]
Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))-->Line_12 $$ oos.writeObject(doc)[ FD ]
Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())-->Line_12 $$ oos.writeObject(doc)[ FD ]
Line_10 $$ ObjectOutputStream oos-->Line_13 $$ oos.close()[ FD ]
Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))-->Line_13 $$ oos.close()[ FD ]
Line_14 $$ ObjectInputStream ois-->Line_15 $$ ois = new ObjectInputStream(new FileInputStream(ser1))[ FD ]
Line_15 $$ ois = new ObjectInputStream(new FileInputStream(ser1))-->Line_15 $$ ois = new ObjectInputStream(new FileInputStream(ser1))[ FD ]
Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())-->Line_16 $$ doc = (Document) ois.readObject()[ FD ]
Line_16 $$ doc = (Document) ois.readObject()-->Line_16 $$ doc = (Document) ois.readObject()[ FD ]
Line_14 $$ ObjectInputStream ois-->Line_16 $$ doc = (Document) ois.readObject()[ FD ]
Line_15 $$ ois = new ObjectInputStream(new FileInputStream(ser1))-->Line_16 $$ doc = (Document) ois.readObject()[ FD ]
Line_14 $$ ObjectInputStream ois-->Line_17 $$ ois.close()[ FD ]
Line_15 $$ ois = new ObjectInputStream(new FileInputStream(ser1))-->Line_17 $$ ois.close()[ FD ]
Line_10 $$ ObjectOutputStream oos-->Line_18 $$ oos = new ObjectOutputStream(new FileOutputStream(ser2))[ FD ]
Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))-->Line_18 $$ oos = new ObjectOutputStream(new FileOutputStream(ser2))[ FD ]
Line_18 $$ oos = new ObjectOutputStream(new FileOutputStream(ser2))-->Line_18 $$ oos = new ObjectOutputStream(new FileOutputStream(ser2))[ FD ]
Line_10 $$ ObjectOutputStream oos-->Line_19 $$ oos.writeObject(doc)[ FD ]
Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))-->Line_19 $$ oos.writeObject(doc)[ FD ]
Line_18 $$ oos = new ObjectOutputStream(new FileOutputStream(ser2))-->Line_19 $$ oos.writeObject(doc)[ FD ]
Line_6 $$ Document doc = df.createDocument(null, rootTag, url.toString(), url.openStream())-->Line_19 $$ oos.writeObject(doc)[ FD ]
Line_16 $$ doc = (Document) ois.readObject()-->Line_19 $$ oos.writeObject(doc)[ FD ]
Line_10 $$ ObjectOutputStream oos-->Line_20 $$ oos.close()[ FD ]
Line_11 $$ oos = new ObjectOutputStream(new FileOutputStream(ser1))-->Line_20 $$ oos.close()[ FD ]
Line_18 $$ oos = new ObjectOutputStream(new FileOutputStream(ser2))-->Line_20 $$ oos.close()[ FD ]
Line_22 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_23 $$ report.setErrorCode("io.error")[ FD ]
Line_22 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_24 $$ report.addDescriptionEntry("message", e.getClass().getName() + ": " + e.getMessage())[ FD ]
Line_22 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_25 $$ report.addDescriptionEntry("file.name", testFileName)[ FD ]
Line_22 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_26 $$ report.setPassed(false)[ FD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_29 $$ InputStream is1 = new FileInputStream(ser1)[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_30 $$ InputStream is2 = new FileInputStream(ser2)[ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_31 $$ for (; ; ) [ CD ]
Line_2 $$ public TestReport runImpl() throws Exception -->Line_2 $$ public TestReport runImpl() throws Exception [ CD ]
Line_31 $$ for (; ; ) -->Line_32 $$ int i1 = is1.read()[ CD ]
Line_32 $$ int i1 = is1.read()-->Line_32 $$ int i1 = is1.read()[ CD ]
Line_29 $$ InputStream is1 = new FileInputStream(ser1)-->Line_32 $$ int i1 = is1.read()[ FD ]
Line_31 $$ for (; ; ) -->Line_33 $$ int i2 = is2.read()[ CD ]
Line_33 $$ int i2 = is2.read()-->Line_33 $$ int i2 = is2.read()[ CD ]
Line_30 $$ InputStream is2 = new FileInputStream(ser2)-->Line_33 $$ int i2 = is2.read()[ FD ]
Line_31 $$ for (; ; ) -->Line_34 $$ if (i1 == -1 && i2 == -1) [ CD ]
Line_34 $$ if (i1 == -1 && i2 == -1) -->Line_35 $$ return reportSuccess()[ CD ]
Line_35 $$ return reportSuccess()-->Line_35 $$ return reportSuccess()[ CD ]
Line_31 $$ for (; ; ) -->Line_37 $$ if (i1 != i2) [ CD ]
Line_32 $$ int i1 = is1.read()-->Line_37 $$ if (i1 != i2) [ FD ]
Line_33 $$ int i2 = is2.read()-->Line_37 $$ if (i1 != i2) [ FD ]
Line_37 $$ if (i1 != i2) -->Line_38 $$ DefaultTestReport report = new DefaultTestReport(this)[ CD ]
Line_37 $$ if (i1 != i2) -->Line_39 $$ report.setErrorCode("difference.found")[ CD ]
Line_38 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_39 $$ report.setErrorCode("difference.found")[ FD ]
Line_22 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_39 $$ report.setErrorCode("difference.found")[ FD ]
Line_37 $$ if (i1 != i2) -->Line_40 $$ report.addDescriptionEntry("file.name", testFileName)[ CD ]
Line_38 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_40 $$ report.addDescriptionEntry("file.name", testFileName)[ FD ]
Line_22 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_40 $$ report.addDescriptionEntry("file.name", testFileName)[ FD ]
Line_37 $$ if (i1 != i2) -->Line_41 $$ report.setPassed(false)[ CD ]
Line_38 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_41 $$ report.setPassed(false)[ FD ]
Line_22 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_41 $$ report.setPassed(false)[ FD ]
Line_37 $$ if (i1 != i2) -->Line_42 $$ return report[ CD ]
Line_32 $$ int i1 = is1.read()-->Line_37 $$ if (i1 != i2) [ FD ]
Line_33 $$ int i2 = is2.read()-->Line_37 $$ if (i1 != i2) [ FD ]
Line_38 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_39 $$ report.setErrorCode("difference.found")[ FD ]
Line_38 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_40 $$ report.addDescriptionEntry("file.name", testFileName)[ FD ]
Line_38 $$ DefaultTestReport report = new DefaultTestReport(this)-->Line_41 $$ report.setPassed(false)[ FD ]
