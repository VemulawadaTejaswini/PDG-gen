Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException [ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_3 $$ File in = null[ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_4 $$ if (input.equals(STDIN)) [ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_4 $$ if (input.equals(STDIN)) [ FD ]
Line_4 $$ if (input.equals(STDIN)) -->Line_4 $$ if (input.equals(STDIN)) [ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_4 $$ if (input.equals(STDIN)) [ FD ]
Line_3 $$ File in = null-->Line_6 $$ in = File.createTempFile("tmp", ".jp2")[ FD ]
Line_6 $$ in = File.createTempFile("tmp", ".jp2")-->Line_6 $$ in = File.createTempFile("tmp", ".jp2")[ FD ]
Line_6 $$ in = File.createTempFile("tmp", ".jp2")-->Line_6 $$ in = File.createTempFile("tmp", ".jp2")[ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_7 $$ input = in.getAbsolutePath()[ FD ]
Line_7 $$ input = in.getAbsolutePath()-->Line_7 $$ input = in.getAbsolutePath()[ FD ]
Line_7 $$ input = in.getAbsolutePath()-->Line_7 $$ input = in.getAbsolutePath()[ CD ]
Line_3 $$ File in = null-->Line_7 $$ input = in.getAbsolutePath()[ FD ]
Line_6 $$ in = File.createTempFile("tmp", ".jp2")-->Line_7 $$ input = in.getAbsolutePath()[ FD ]
Line_3 $$ File in = null-->Line_8 $$ in.deleteOnExit()[ FD ]
Line_6 $$ in = File.createTempFile("tmp", ".jp2")-->Line_8 $$ in.deleteOnExit()[ FD ]
Line_3 $$ File in = null-->Line_9 $$ IOUtils.copyFile(new File(STDIN), in)[ FD ]
Line_6 $$ in = File.createTempFile("tmp", ".jp2")-->Line_9 $$ IOUtils.copyFile(new File(STDIN), in)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_15 $$ BufferedImage bi = extractImpl.process(input, params)[ CD ]
Line_15 $$ BufferedImage bi = extractImpl.process(input, params)-->Line_15 $$ BufferedImage bi = extractImpl.process(input, params)[ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_15 $$ BufferedImage bi = extractImpl.process(input, params)[ FD ]
Line_7 $$ input = in.getAbsolutePath()-->Line_15 $$ BufferedImage bi = extractImpl.process(input, params)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_15 $$ BufferedImage bi = extractImpl.process(input, params)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_16 $$ if (bi != null) [ CD ]
Line_15 $$ BufferedImage bi = extractImpl.process(input, params)-->Line_16 $$ if (bi != null) [ FD ]
Line_16 $$ if (bi != null) -->Line_17 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null)[ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_17 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_17 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null)[ FD ]
Line_17 $$ if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null)-->Line_17 $$ bi = applyScaling(bi, params)[ CD ]
Line_15 $$ BufferedImage bi = extractImpl.process(input, params)-->Line_17 $$ bi = applyScaling(bi, params)[ FD ]
Line_17 $$ bi = applyScaling(bi, params)-->Line_17 $$ bi = applyScaling(bi, params)[ FD ]
Line_17 $$ bi = applyScaling(bi, params)-->Line_17 $$ bi = applyScaling(bi, params)[ CD ]
Line_15 $$ BufferedImage bi = extractImpl.process(input, params)-->Line_17 $$ bi = applyScaling(bi, params)[ FD ]
Line_17 $$ bi = applyScaling(bi, params)-->Line_17 $$ bi = applyScaling(bi, params)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_17 $$ bi = applyScaling(bi, params)[ FD ]
Line_16 $$ if (bi != null) -->Line_18 $$ if (params.getTransform() != null)[ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_18 $$ if (params.getTransform() != null)[ FD ]
Line_18 $$ if (params.getTransform() != null)-->Line_18 $$ bi = params.getTransform().run(bi)[ CD ]
Line_15 $$ BufferedImage bi = extractImpl.process(input, params)-->Line_18 $$ bi = params.getTransform().run(bi)[ FD ]
Line_17 $$ bi = applyScaling(bi, params)-->Line_18 $$ bi = params.getTransform().run(bi)[ FD ]
Line_18 $$ bi = params.getTransform().run(bi)-->Line_18 $$ bi = params.getTransform().run(bi)[ FD ]
Line_18 $$ bi = params.getTransform().run(bi)-->Line_18 $$ bi = params.getTransform().run(bi)[ CD ]
Line_15 $$ BufferedImage bi = extractImpl.process(input, params)-->Line_18 $$ bi = params.getTransform().run(bi)[ FD ]
Line_17 $$ bi = applyScaling(bi, params)-->Line_18 $$ bi = params.getTransform().run(bi)[ FD ]
Line_18 $$ bi = params.getTransform().run(bi)-->Line_18 $$ bi = params.getTransform().run(bi)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_18 $$ bi = params.getTransform().run(bi)[ FD ]
Line_16 $$ if (bi != null) -->Line_19 $$ w.write(bi, os)[ CD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_19 $$ w.write(bi, os)[ FD ]
Line_15 $$ BufferedImage bi = extractImpl.process(input, params)-->Line_19 $$ w.write(bi, os)[ FD ]
Line_17 $$ bi = applyScaling(bi, params)-->Line_19 $$ w.write(bi, os)[ FD ]
Line_18 $$ bi = params.getTransform().run(bi)-->Line_19 $$ w.write(bi, os)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_19 $$ w.write(bi, os)[ FD ]
Line_2 $$ public void extractImage(String input, OutputStream os, DjatokaDecodeParam params, IWriter w) throws DjatokaException -->Line_21 $$ if (in != null)[ CD ]
Line_3 $$ File in = null-->Line_21 $$ if (in != null)[ FD ]
Line_6 $$ in = File.createTempFile("tmp", ".jp2")-->Line_21 $$ if (in != null)[ FD ]
Line_21 $$ if (in != null)-->Line_21 $$ in.delete()[ CD ]
Line_3 $$ File in = null-->Line_21 $$ in.delete()[ FD ]
Line_6 $$ in = File.createTempFile("tmp", ".jp2")-->Line_21 $$ in.delete()[ FD ]
