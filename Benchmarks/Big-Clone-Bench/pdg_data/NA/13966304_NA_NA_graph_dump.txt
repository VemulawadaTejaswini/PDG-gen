Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void work(String[] args) throws Exception [ CD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_3 $$ String dictLocation = CONTENT_URL[ CD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_4 $$ String cpeContentDirName = CONTENT_DIR[ CD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_5 $$ String fn = dictLocation.substring(dictLocation.lastIndexOf("/") + 1)[ CD ]
Line_5 $$ String fn = dictLocation.substring(dictLocation.lastIndexOf("/") + 1)-->Line_5 $$ String fn = dictLocation.substring(dictLocation.lastIndexOf("/") + 1)[ CD ]
Line_3 $$ String dictLocation = CONTENT_URL-->Line_5 $$ String fn = dictLocation.substring(dictLocation.lastIndexOf("/") + 1)[ FD ]
Line_3 $$ String dictLocation = CONTENT_URL-->Line_5 $$ String fn = dictLocation.substring(dictLocation.lastIndexOf("/") + 1)[ FD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_6 $$ File destFile = new File(cpeContentDirName + File.separator + fn)[ CD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_7 $$ URL url = new URL(dictLocation)[ CD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_8 $$ URLConnection conn = url.openConnection()[ CD ]
Line_8 $$ URLConnection conn = url.openConnection()-->Line_8 $$ URLConnection conn = url.openConnection()[ CD ]
Line_7 $$ URL url = new URL(dictLocation)-->Line_8 $$ URLConnection conn = url.openConnection()[ FD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_9 $$ conn.connect()[ CD ]
Line_8 $$ URLConnection conn = url.openConnection()-->Line_9 $$ conn.connect()[ FD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_10 $$ long lmodifiedRemote = conn.getLastModified()[ CD ]
Line_10 $$ long lmodifiedRemote = conn.getLastModified()-->Line_10 $$ long lmodifiedRemote = conn.getLastModified()[ CD ]
Line_8 $$ URLConnection conn = url.openConnection()-->Line_10 $$ long lmodifiedRemote = conn.getLastModified()[ FD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_11 $$ boolean needToDownload = false[ CD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_12 $$ if (destFile.exists()) [ CD ]
Line_6 $$ File destFile = new File(cpeContentDirName + File.separator + fn)-->Line_12 $$ if (destFile.exists()) [ FD ]
Line_12 $$ if (destFile.exists()) -->Line_12 $$ if (destFile.exists()) [ CD ]
Line_6 $$ File destFile = new File(cpeContentDirName + File.separator + fn)-->Line_12 $$ if (destFile.exists()) [ FD ]
Line_12 $$ if (destFile.exists()) -->Line_13 $$ System.out.println(destFile.getAbsolutePath() + " exists, check modification time")[ CD ]
Line_6 $$ File destFile = new File(cpeContentDirName + File.separator + fn)-->Line_13 $$ System.out.println(destFile.getAbsolutePath() + " exists, check modification time")[ FD ]
Line_12 $$ if (destFile.exists()) -->Line_14 $$ long lmodifiedLocal = destFile.lastModified()[ CD ]
Line_14 $$ long lmodifiedLocal = destFile.lastModified()-->Line_14 $$ long lmodifiedLocal = destFile.lastModified()[ CD ]
Line_6 $$ File destFile = new File(cpeContentDirName + File.separator + fn)-->Line_14 $$ long lmodifiedLocal = destFile.lastModified()[ FD ]
Line_12 $$ if (destFile.exists()) -->Line_15 $$ if (lmodifiedRemote > lmodifiedLocal) [ CD ]
Line_10 $$ long lmodifiedRemote = conn.getLastModified()-->Line_15 $$ if (lmodifiedRemote > lmodifiedLocal) [ FD ]
Line_14 $$ long lmodifiedLocal = destFile.lastModified()-->Line_15 $$ if (lmodifiedRemote > lmodifiedLocal) [ FD ]
Line_15 $$ if (lmodifiedRemote > lmodifiedLocal) -->Line_16 $$ System.out.println("Server file is newer, need to download")[ CD ]
Line_15 $$ if (lmodifiedRemote > lmodifiedLocal) -->Line_17 $$ needToDownload = true[ CD ]
Line_11 $$ boolean needToDownload = false-->Line_17 $$ needToDownload = true[ FD ]
Line_17 $$ needToDownload = true-->Line_17 $$ needToDownload = true[ FD ]
Line_15 $$ if (lmodifiedRemote > lmodifiedLocal) -->Line_19 $$ System.out.println("Local version is newer, no need to download")[ CD ]
Line_12 $$ if (destFile.exists()) -->Line_22 $$ System.out.println("Local version doesn't exist, need to download")[ CD ]
Line_12 $$ if (destFile.exists()) -->Line_23 $$ needToDownload = true[ CD ]
Line_11 $$ boolean needToDownload = false-->Line_23 $$ needToDownload = true[ FD ]
Line_17 $$ needToDownload = true-->Line_23 $$ needToDownload = true[ FD ]
Line_23 $$ needToDownload = true-->Line_23 $$ needToDownload = true[ FD ]
Line_2 $$ private void work(String[] args) throws Exception -->Line_25 $$ if (needToDownload) [ CD ]
Line_25 $$ if (needToDownload) -->Line_26 $$ InputStream is = conn.getInputStream()[ CD ]
Line_26 $$ InputStream is = conn.getInputStream()-->Line_26 $$ InputStream is = conn.getInputStream()[ CD ]
Line_8 $$ URLConnection conn = url.openConnection()-->Line_26 $$ InputStream is = conn.getInputStream()[ FD ]
Line_25 $$ if (needToDownload) -->Line_27 $$ FileOutputStream fos = new FileOutputStream(destFile)[ CD ]
Line_25 $$ if (needToDownload) -->Line_28 $$ byte[] buff = new byte[8192][ CD ]
Line_25 $$ if (needToDownload) -->Line_29 $$ int read = 0[ CD ]
Line_25 $$ if (needToDownload) -->Line_30 $$ while ((read = is.read(buff)) > 0) [ CD ]
Line_25 $$ if (needToDownload) -->Line_25 $$ if (needToDownload) [ CD ]
Line_30 $$ while ((read = is.read(buff)) > 0) -->Line_30 $$ while ((read = is.read(buff)) > 0) [ FD ]
Line_29 $$ int read = 0-->Line_30 $$ while ((read = is.read(buff)) > 0) [ FD ]
Line_30 $$ while ((read = is.read(buff)) > 0) -->Line_30 $$ while ((read = is.read(buff)) > 0) [ CD ]
Line_26 $$ InputStream is = conn.getInputStream()-->Line_30 $$ while ((read = is.read(buff)) > 0) [ FD ]
Line_28 $$ byte[] buff = new byte[8192]-->Line_30 $$ while ((read = is.read(buff)) > 0) [ FD ]
Line_30 $$ while ((read = is.read(buff)) > 0) -->Line_31 $$ fos.write(buff, 0, read)[ CD ]
Line_27 $$ FileOutputStream fos = new FileOutputStream(destFile)-->Line_31 $$ fos.write(buff, 0, read)[ FD ]
Line_28 $$ byte[] buff = new byte[8192]-->Line_31 $$ fos.write(buff, 0, read)[ FD ]
Line_30 $$ while ((read = is.read(buff)) > 0) -->Line_31 $$ fos.write(buff, 0, read)[ FD ]
Line_29 $$ int read = 0-->Line_31 $$ fos.write(buff, 0, read)[ FD ]
Line_25 $$ if (needToDownload) -->Line_33 $$ fos.flush()[ CD ]
Line_27 $$ FileOutputStream fos = new FileOutputStream(destFile)-->Line_33 $$ fos.flush()[ FD ]
Line_25 $$ if (needToDownload) -->Line_34 $$ fos.close()[ CD ]
Line_27 $$ FileOutputStream fos = new FileOutputStream(destFile)-->Line_34 $$ fos.close()[ FD ]
Line_25 $$ if (needToDownload) -->Line_35 $$ is.close()[ CD ]
Line_26 $$ InputStream is = conn.getInputStream()-->Line_35 $$ is.close()[ FD ]
Line_30 $$ while ((read = is.read(buff)) > 0) -->Line_31 $$ fos.write(buff, 0, read)[ FD ]
