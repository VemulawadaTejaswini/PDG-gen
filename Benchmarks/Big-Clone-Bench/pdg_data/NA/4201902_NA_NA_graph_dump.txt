Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception [ CD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_3 $$ GadgetSpec spec = new GadgetSpec(GADGET_URL, xml)[ CD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_4 $$ RecordingRequestPipeline pipeline = new RecordingRequestPipeline(response)[ CD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_5 $$ PipelinedDataPreloader preloader = new PipelinedDataPreloader(pipeline, containerConfig)[ CD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_7 $$ Gadget gadget = new Gadget().setContext(context).setSpec(spec).setCurrentView(spec.getView("profile"))[ CD ]
Line_7 $$ Gadget gadget = new Gadget().setContext(context).setSpec(spec).setCurrentView(spec.getView("profile"))-->Line_7 $$ Gadget gadget = new Gadget().setContext(context).setSpec(spec).setCurrentView(spec.getView("profile"))[ CD ]
Line_3 $$ GadgetSpec spec = new GadgetSpec(GADGET_URL, xml)-->Line_7 $$ Gadget gadget = new Gadget().setContext(context).setSpec(spec).setCurrentView(spec.getView("profile"))[ FD ]
Line_3 $$ GadgetSpec spec = new GadgetSpec(GADGET_URL, xml)-->Line_7 $$ Gadget gadget = new Gadget().setContext(context).setSpec(spec).setCurrentView(spec.getView("profile"))[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_8 $$ PipelinedData.Batch batch = getBatch(gadget)[ CD ]
Line_8 $$ PipelinedData.Batch batch = getBatch(gadget)-->Line_8 $$ PipelinedData.Batch batch = getBatch(gadget)[ CD ]
Line_7 $$ Gadget gadget = new Gadget().setContext(context).setSpec(spec).setCurrentView(spec.getView("profile"))-->Line_8 $$ PipelinedData.Batch batch = getBatch(gadget)[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_9 $$ Collection<Callable<PreloadedData>> tasks = preloader.createPreloadTasks(context, batch)[ CD ]
Line_9 $$ Collection<Callable<PreloadedData>> tasks = preloader.createPreloadTasks(context, batch)-->Line_9 $$ Collection<Callable<PreloadedData>> tasks = preloader.createPreloadTasks(context, batch)[ CD ]
Line_5 $$ PipelinedDataPreloader preloader = new PipelinedDataPreloader(pipeline, containerConfig)-->Line_9 $$ Collection<Callable<PreloadedData>> tasks = preloader.createPreloadTasks(context, batch)[ FD ]
Line_8 $$ PipelinedData.Batch batch = getBatch(gadget)-->Line_9 $$ Collection<Callable<PreloadedData>> tasks = preloader.createPreloadTasks(context, batch)[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_10 $$ assertEquals(1, tasks.size())[ CD ]
Line_9 $$ Collection<Callable<PreloadedData>> tasks = preloader.createPreloadTasks(context, batch)-->Line_10 $$ assertEquals(1, tasks.size())[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_11 $$ assertEquals(0, pipeline.requests.size())[ CD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_12 $$ Collection<Object> result = tasks.iterator().next().call().toJson()[ CD ]
Line_12 $$ Collection<Object> result = tasks.iterator().next().call().toJson()-->Line_12 $$ Collection<Object> result = tasks.iterator().next().call().toJson()[ CD ]
Line_9 $$ Collection<Callable<PreloadedData>> tasks = preloader.createPreloadTasks(context, batch)-->Line_12 $$ Collection<Object> result = tasks.iterator().next().call().toJson()[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_13 $$ assertEquals(1, result.size())[ CD ]
Line_12 $$ Collection<Object> result = tasks.iterator().next().call().toJson()-->Line_13 $$ assertEquals(1, result.size())[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_14 $$ assertEquals(1, pipeline.requests.size())[ CD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_15 $$ HttpRequest request = pipeline.requests.get(0)[ CD ]
Line_15 $$ HttpRequest request = pipeline.requests.get(0)-->Line_15 $$ HttpRequest request = pipeline.requests.get(0)[ CD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_16 $$ assertEquals(HTTP_REQUEST_URL, request.getUri().toString())[ CD ]
Line_15 $$ HttpRequest request = pipeline.requests.get(0)-->Line_16 $$ assertEquals(HTTP_REQUEST_URL, request.getUri().toString())[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_17 $$ assertEquals("POST", request.getMethod())[ CD ]
Line_15 $$ HttpRequest request = pipeline.requests.get(0)-->Line_17 $$ assertEquals("POST", request.getMethod())[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_18 $$ assertEquals(60, request.getCacheTtl())[ CD ]
Line_15 $$ HttpRequest request = pipeline.requests.get(0)-->Line_18 $$ assertEquals(60, request.getCacheTtl())[ FD ]
Line_2 $$ private String executeHttpPreload(HttpResponse response, String xml) throws Exception -->Line_19 $$ return result.iterator().next().toString()[ CD ]
Line_19 $$ return result.iterator().next().toString()-->Line_19 $$ return result.iterator().next().toString()[ CD ]
Line_12 $$ Collection<Object> result = tasks.iterator().next().call().toJson()-->Line_19 $$ return result.iterator().next().toString()[ FD ]
