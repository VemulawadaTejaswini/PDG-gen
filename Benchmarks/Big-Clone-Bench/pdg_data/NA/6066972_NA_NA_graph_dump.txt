Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ Shell currentShell = Display.getCurrent().getActiveShell()[ CD ]
Line_3 $$ Shell currentShell = Display.getCurrent().getActiveShell()-->Line_3 $$ Shell currentShell = Display.getCurrent().getActiveShell()[ CD ]
Line_2 $$ public void run() -->Line_4 $$ if (DMManager.getInstance().getOntology() == null)[ CD ]
Line_4 $$ if (DMManager.getInstance().getOntology() == null)-->Line_4 $$ return[ CD ]
Line_2 $$ public void run() -->Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()[ CD ]
Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()-->Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()[ CD ]
Line_2 $$ public void run() -->Line_6 $$ InputDialog input = new InputDialog(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.tablename"), data.getRelationName(), null)[ CD ]
Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()-->Line_6 $$ InputDialog input = new InputDialog(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.tablename"), data.getRelationName(), null)[ FD ]
Line_2 $$ public void run() -->Line_7 $$ input.open()[ CD ]
Line_6 $$ InputDialog input = new InputDialog(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.tablename"), data.getRelationName(), null)-->Line_7 $$ input.open()[ FD ]
Line_2 $$ public void run() -->Line_8 $$ String tablename = input.getValue()[ CD ]
Line_8 $$ String tablename = input.getValue()-->Line_8 $$ String tablename = input.getValue()[ CD ]
Line_6 $$ InputDialog input = new InputDialog(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.tablename"), data.getRelationName(), null)-->Line_8 $$ String tablename = input.getValue()[ FD ]
Line_2 $$ public void run() -->Line_9 $$ if (tablename == null)[ CD ]
Line_8 $$ String tablename = input.getValue()-->Line_9 $$ if (tablename == null)[ FD ]
Line_9 $$ if (tablename == null)-->Line_9 $$ return[ CD ]
Line_2 $$ public void run() -->Line_10 $$ super.getProfile().connect()[ CD ]
Line_2 $$ public void run() -->Line_11 $$ IManagedConnection mc = super.getProfile().getManagedConnection("java.sql.Connection")[ CD ]
Line_11 $$ IManagedConnection mc = super.getProfile().getManagedConnection("java.sql.Connection")-->Line_11 $$ IManagedConnection mc = super.getProfile().getManagedConnection("java.sql.Connection")[ CD ]
Line_2 $$ public void run() -->Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()[ CD ]
Line_11 $$ IManagedConnection mc = super.getProfile().getManagedConnection("java.sql.Connection")-->Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()[ FD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_14 $$ sql.setAutoCommit(false)[ FD ]
Line_15 $$ DatabaseMetaData dbmd = sql.getMetaData()-->Line_15 $$ DatabaseMetaData dbmd = sql.getMetaData()[ CD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_15 $$ DatabaseMetaData dbmd = sql.getMetaData()[ FD ]
Line_16 $$ ResultSet tables = dbmd.getTables(null, null, tablename, new String[] -->Line_16 $$ ResultSet tables = dbmd.getTables(null, null, tablename, new String[] [ CD ]
Line_15 $$ DatabaseMetaData dbmd = sql.getMetaData()-->Line_16 $$ ResultSet tables = dbmd.getTables(null, null, tablename, new String[] [ FD ]
Line_8 $$ String tablename = input.getValue()-->Line_16 $$ ResultSet tables = dbmd.getTables(null, null, tablename, new String[] [ FD ]
Line_16 $$ ResultSet tables = dbmd.getTables(null, null, tablename, new String[] -->Line_17 $$ if (tables.next()) [ FD ]
Line_17 $$ if (tables.next()) -->Line_17 $$ if (tables.next()) [ CD ]
Line_16 $$ ResultSet tables = dbmd.getTables(null, null, tablename, new String[] -->Line_17 $$ if (tables.next()) [ FD ]
Line_17 $$ if (tables.next()) -->Line_18 $$ if (!MessageDialog.openConfirm(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.overwriteTable")))[ CD ]
Line_18 $$ if (!MessageDialog.openConfirm(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.overwriteTable")))-->Line_18 $$ if (!MessageDialog.openConfirm(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.overwriteTable")))[ CD ]
Line_18 $$ if (!MessageDialog.openConfirm(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.overwriteTable")))-->Line_18 $$ if (!MessageDialog.openConfirm(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.overwriteTable")))[ CD ]
Line_3 $$ Shell currentShell = Display.getCurrent().getActiveShell()-->Line_18 $$ if (!MessageDialog.openConfirm(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.overwriteTable")))[ FD ]
Line_18 $$ if (!MessageDialog.openConfirm(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.overwriteTable")))-->Line_18 $$ return[ CD ]
Line_17 $$ if (tables.next()) -->Line_19 $$ Statement statement = sql.createStatement()[ CD ]
Line_19 $$ Statement statement = sql.createStatement()-->Line_19 $$ Statement statement = sql.createStatement()[ CD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_19 $$ Statement statement = sql.createStatement()[ FD ]
Line_17 $$ if (tables.next()) -->Line_20 $$ statement.executeUpdate("DROP TABLE " + tablename)[ CD ]
Line_19 $$ Statement statement = sql.createStatement()-->Line_20 $$ statement.executeUpdate("DROP TABLE " + tablename)[ FD ]
Line_17 $$ if (tables.next()) -->Line_21 $$ statement.close()[ CD ]
Line_19 $$ Statement statement = sql.createStatement()-->Line_21 $$ statement.close()[ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ CD ]
Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()-->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ CD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ CD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_25 $$ if (DMManager.getInstance().getOntology().isIDAttribute(data.getAttribute(i)))[ CD ]
Line_25 $$ if (DMManager.getInstance().getOntology().isIDAttribute(data.getAttribute(i)))-->Line_25 $$ if (DMManager.getInstance().getOntology().isIDAttribute(data.getAttribute(i)))[ CD ]
Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()-->Line_25 $$ if (DMManager.getInstance().getOntology().isIDAttribute(data.getAttribute(i)))[ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_25 $$ if (DMManager.getInstance().getOntology().isIDAttribute(data.getAttribute(i)))[ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_26 $$ if (createTableQuery == null)[ CD ]
Line_23 $$ String createTableQuery = null-->Line_26 $$ if (createTableQuery == null)[ FD ]
Line_26 $$ if (createTableQuery == null)-->Line_26 $$ createTableQuery = ""[ CD ]
Line_26 $$ createTableQuery = ""-->Line_26 $$ createTableQuery = ""[ FD ]
Line_23 $$ String createTableQuery = null-->Line_26 $$ createTableQuery = ""[ FD ]
Line_26 $$ if (createTableQuery == null)-->Line_26 $$ createTableQuery += ","[ CD ]
Line_26 $$ createTableQuery = ""-->Line_26 $$ createTableQuery += ","[ FD ]
Line_26 $$ createTableQuery += ","-->Line_26 $$ createTableQuery += ","[ FD ]
Line_23 $$ String createTableQuery = null-->Line_26 $$ createTableQuery += ","[ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ CD ]
Line_26 $$ createTableQuery = ""-->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ FD ]
Line_26 $$ createTableQuery += ","-->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ FD ]
Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))-->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ FD ]
Line_23 $$ String createTableQuery = null-->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ FD ]
Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))-->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ CD ]
Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()-->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ FD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_29 $$ Statement statement = sql.createStatement()[ FD ]
Line_19 $$ Statement statement = sql.createStatement()-->Line_30 $$ statement.executeUpdate("CREATE TABLE " + tablename + "(" + createTableQuery + ")")[ FD ]
Line_19 $$ Statement statement = sql.createStatement()-->Line_31 $$ statement.close()[ FD ]
Line_5 $$ DataRecordSet data = DMManager.getInstance().getOntology().getDataView().dataset()-->Line_32 $$ exportRecordSet(data, sql, tablename)[ FD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_32 $$ exportRecordSet(data, sql, tablename)[ FD ]
Line_8 $$ String tablename = input.getValue()-->Line_32 $$ exportRecordSet(data, sql, tablename)[ FD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_33 $$ sql.commit()[ FD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_34 $$ sql.setAutoCommit(true)[ FD ]
Line_3 $$ Shell currentShell = Display.getCurrent().getActiveShell()-->Line_35 $$ MessageDialog.openInformation(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.successful"))[ FD ]
Line_12 $$ java.sql.Connection sql = (java.sql.Connection) mc.getConnection().getRawConnection()-->Line_38 $$ sql.rollback()[ FD ]
Line_3 $$ Shell currentShell = Display.getCurrent().getActiveShell()-->Line_42 $$ MessageDialog.openError(currentShell, Resources.I18N.getString("vikamine.dtp.title"), Resources.I18N.getString("vikamine.dtp.export.failed"))[ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) [ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_25 $$ if (DMManager.getInstance().getOntology().isIDAttribute(data.getAttribute(i)))[ FD ]
Line_26 $$ createTableQuery = ""-->Line_26 $$ if (createTableQuery == null)[ FD ]
Line_26 $$ createTableQuery += ","-->Line_26 $$ if (createTableQuery == null)[ FD ]
Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))-->Line_26 $$ if (createTableQuery == null)[ FD ]
Line_24 $$ for (int i = 0; i < data.getNumAttributes(); i++) -->Line_27 $$ createTableQuery += getColumnDefinition(data.getAttribute(i))[ FD ]
