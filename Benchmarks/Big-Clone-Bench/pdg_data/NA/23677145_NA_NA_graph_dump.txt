Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) [ CD ]
Line_2 $$ public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) -->Line_3 $$ int j[ CD ]
Line_2 $$ public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) -->Line_4 $$ // set flag to true to begin first pass[ CD ]
Line_2 $$ public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) -->Line_5 $$ // holding variable[ CD ]
Line_2 $$ public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) -->Line_6 $$ while (flag) [ CD ]
Line_2 $$ public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) -->Line_2 $$ public static <T extends Comparable<T>> void BubbleSortComparable1(T[] num) [ CD ]
Line_6 $$ while (flag) -->Line_7 $$ // set flag to false awaiting a possible swap[ CD ]
Line_7 $$ // set flag to false awaiting a possible swap-->Line_7 $$ // set flag to false awaiting a possible swap[ FD ]
Line_4 $$ // set flag to true to begin first pass-->Line_7 $$ // set flag to false awaiting a possible swap[ FD ]
Line_6 $$ while (flag) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ CD ]
Line_6 $$ while (flag) -->Line_6 $$ while (flag) [ CD ]
Line_3 $$ int j-->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ CD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_3 $$ int j-->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ CD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_3 $$ int j-->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_9 $$ if (// change to > for ascending sort[ CD ]
Line_9 $$ if (// change to > for ascending sort-->Line_11 $$ // swap elements[ CD ]
Line_11 $$ // swap elements-->Line_11 $$ // swap elements[ FD ]
Line_5 $$ // holding variable-->Line_11 $$ // swap elements[ FD ]
Line_9 $$ if (// change to > for ascending sort-->Line_12 $$ num[j] = num[j + 1][ CD ]
Line_9 $$ if (// change to > for ascending sort-->Line_13 $$ num[j + 1] = temp[ CD ]
Line_11 $$ // swap elements-->Line_13 $$ num[j + 1] = temp[ FD ]
Line_5 $$ // holding variable-->Line_13 $$ num[j + 1] = temp[ FD ]
Line_9 $$ if (// change to > for ascending sort-->Line_14 $$ // shows a swap occurred[ CD ]
Line_14 $$ // shows a swap occurred-->Line_14 $$ // shows a swap occurred[ FD ]
Line_7 $$ // set flag to false awaiting a possible swap-->Line_14 $$ // shows a swap occurred[ FD ]
Line_4 $$ // set flag to true to begin first pass-->Line_14 $$ // shows a swap occurred[ FD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_8 $$ for (j = 0; j < num.length - 1; j++) -->Line_8 $$ for (j = 0; j < num.length - 1; j++) [ FD ]
Line_11 $$ // swap elements-->Line_13 $$ num[j + 1] = temp[ FD ]
