Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) [ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_3 $$ HttpClient httpClient = new DefaultHttpClient()[ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_4 $$ httpClient.getParams().setParameter("http.useragent", "sla@soi OCCI Client v0.2")[ CD ]
Line_3 $$ HttpClient httpClient = new DefaultHttpClient()-->Line_4 $$ httpClient.getParams().setParameter("http.useragent", "sla@soi OCCI Client v0.2")[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_5 $$ HttpPut httpPut = new HttpPut(resourceID)[ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap)[ CD ]
Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap)-->Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap)[ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap)[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) [ CD ]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) -->Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [ CD ]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) -->Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [ CD ]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) -->Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [ CD ]
Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap)-->Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [ FD ]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) -->Line_8 $$ httpPut.addHeader(iterator.next())[ CD ]
Line_5 $$ HttpPut httpPut = new HttpPut(resourceID)-->Line_8 $$ httpPut.addHeader(iterator.next())[ FD ]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) -->Line_8 $$ httpPut.addHeader(iterator.next())[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_10 $$ logger.info(httpPut.getRequestLine())[ CD ]
Line_5 $$ HttpPut httpPut = new HttpPut(resourceID)-->Line_10 $$ logger.info(httpPut.getRequestLine())[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_11 $$ logger.info(httpPut.getAllHeaders())[ CD ]
Line_5 $$ HttpPut httpPut = new HttpPut(resourceID)-->Line_11 $$ logger.info(httpPut.getAllHeaders())[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_12 $$ Header[] headersArray = httpPut.getAllHeaders()[ CD ]
Line_12 $$ Header[] headersArray = httpPut.getAllHeaders()-->Line_12 $$ Header[] headersArray = httpPut.getAllHeaders()[ CD ]
Line_5 $$ HttpPut httpPut = new HttpPut(resourceID)-->Line_12 $$ Header[] headersArray = httpPut.getAllHeaders()[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_13 $$ String[] fields = [ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_14 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>()[ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_15 $$ for (int H = 0; H < headersArray.length; H++) [ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) [ CD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_15 $$ for (int H = 0; H < headersArray.length; H++) [ CD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_15 $$ for (int H = 0; H < headersArray.length; H++) [ CD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_15 $$ for (int H = 0; H < headersArray.length; H++) [ FD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_16 $$ Header header = headersArray[H][ CD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_17 $$ logger.info("header - request  -" + header.toString())[ CD ]
Line_16 $$ Header header = headersArray[H]-->Line_17 $$ logger.info("header - request  -" + header.toString())[ FD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_18 $$ logger.info("	headerName - " + header.getName())[ CD ]
Line_16 $$ Header header = headersArray[H]-->Line_18 $$ logger.info("	headerName - " + header.getName())[ FD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_19 $$ logger.info("	headerValue - " + header.getValue())[ CD ]
Line_16 $$ Header header = headersArray[H]-->Line_19 $$ logger.info("	headerValue - " + header.getValue())[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_21 $$ String statusLine = null[ CD ]
Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)-->Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)[ CD ]
Line_3 $$ HttpClient httpClient = new DefaultHttpClient()-->Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)[ FD ]
Line_5 $$ HttpPut httpPut = new HttpPut(resourceID)-->Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)[ FD ]
Line_21 $$ String statusLine = null-->Line_24 $$ statusLine = httpResponse.getStatusLine().toString()[ FD ]
Line_24 $$ statusLine = httpResponse.getStatusLine().toString()-->Line_24 $$ statusLine = httpResponse.getStatusLine().toString()[ FD ]
Line_24 $$ statusLine = httpResponse.getStatusLine().toString()-->Line_24 $$ statusLine = httpResponse.getStatusLine().toString()[ CD ]
Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)-->Line_24 $$ statusLine = httpResponse.getStatusLine().toString()[ FD ]
Line_25 $$ int statusCode = httpResponse.getStatusLine().getStatusCode()-->Line_25 $$ int statusCode = httpResponse.getStatusLine().getStatusCode()[ CD ]
Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)-->Line_25 $$ int statusCode = httpResponse.getStatusLine().getStatusCode()[ FD ]
Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)-->Line_27 $$ logger.info("StatusLine - (full) - " + httpResponse.getStatusLine())[ FD ]
Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)-->Line_29 $$ logger.info("	Reason - " + httpResponse.getStatusLine().getReasonPhrase())[ FD ]
Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)-->Line_30 $$ logger.info("	Protocol - " + httpResponse.getStatusLine().getProtocolVersion().toString())[ FD ]
Line_25 $$ int statusCode = httpResponse.getStatusLine().getStatusCode()-->Line_32 $$ if (StatusCode.validate(statusCode)) [ FD ]
Line_32 $$ if (StatusCode.validate(statusCode)) -->Line_32 $$ if (StatusCode.validate(statusCode)) [ CD ]
Line_25 $$ int statusCode = httpResponse.getStatusLine().getStatusCode()-->Line_32 $$ if (StatusCode.validate(statusCode)) [ FD ]
Line_32 $$ if (StatusCode.validate(statusCode)) -->Line_33 $$ logger.info("Response Validated")[ CD ]
Line_32 $$ if (StatusCode.validate(statusCode)) -->Line_35 $$ logger.error("Response NOT Validated")[ CD ]
Line_32 $$ if (StatusCode.validate(statusCode)) -->Line_36 $$ return null[ CD ]
Line_38 $$ Header[] headers = httpResponse.getAllHeaders()-->Line_38 $$ Header[] headers = httpResponse.getAllHeaders()[ CD ]
Line_23 $$ HttpResponse httpResponse = httpClient.execute(httpPut)-->Line_38 $$ Header[] headers = httpResponse.getAllHeaders()[ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_39 $$ for (int i = 0; i < headers.length; i++) [ CD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_39 $$ for (int i = 0; i < headers.length; i++) [ CD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_39 $$ for (int i = 0; i < headers.length; i++) [ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_40 $$ Header header = headers[i][ CD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_41 $$ logger.info("header - response - " + header.toString())[ CD ]
Line_40 $$ Header header = headers[i]-->Line_41 $$ logger.info("header - response - " + header.toString())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_41 $$ logger.info("header - response - " + header.toString())[ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_42 $$ logger.info("	headerName - " + header.getName())[ CD ]
Line_40 $$ Header header = headers[i]-->Line_42 $$ logger.info("	headerName - " + header.getName())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_42 $$ logger.info("	headerName - " + header.getName())[ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_43 $$ logger.info("	headerValue - " + header.getValue())[ CD ]
Line_40 $$ Header header = headers[i]-->Line_43 $$ logger.info("	headerValue - " + header.getValue())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_43 $$ logger.info("	headerValue - " + header.getValue())[ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_44 $$ for (int h = 0; h < fields.length; h++) [ CD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_39 $$ for (int i = 0; i < headers.length; i++) [ CD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_44 $$ for (int h = 0; h < fields.length; h++) [ CD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_44 $$ for (int h = 0; h < fields.length; h++) [ CD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_44 $$ for (int h = 0; h < fields.length; h++) [ FD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_45 $$ logger.info("	Looking for  - " + fields[h])[ CD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_46 $$ if (fields[h].equals(header.getName().toString())) [ CD ]
Line_46 $$ if (fields[h].equals(header.getName().toString())) -->Line_46 $$ if (fields[h].equals(header.getName().toString())) [ CD ]
Line_40 $$ Header header = headers[i]-->Line_46 $$ if (fields[h].equals(header.getName().toString())) [ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_46 $$ if (fields[h].equals(header.getName().toString())) [ FD ]
Line_46 $$ if (fields[h].equals(header.getName().toString())) -->Line_47 $$ logger.info("	Found an OCCI Header - " + header.getName())[ CD ]
Line_40 $$ Header header = headers[i]-->Line_47 $$ logger.info("	Found an OCCI Header - " + header.getName())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_47 $$ logger.info("	Found an OCCI Header - " + header.getName())[ FD ]
Line_46 $$ if (fields[h].equals(header.getName().toString())) -->Line_48 $$ occiHeaders.put(header.getName(), header.getValue())[ CD ]
Line_14 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>()-->Line_48 $$ occiHeaders.put(header.getName(), header.getValue())[ FD ]
Line_40 $$ Header header = headers[i]-->Line_48 $$ occiHeaders.put(header.getName(), header.getValue())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_48 $$ occiHeaders.put(header.getName(), header.getValue())[ FD ]
Line_40 $$ Header header = headers[i]-->Line_48 $$ occiHeaders.put(header.getName(), header.getValue())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_48 $$ occiHeaders.put(header.getName(), header.getValue())[ FD ]
Line_3 $$ HttpClient httpClient = new DefaultHttpClient()-->Line_65 $$ httpClient.getConnectionManager().shutdown()[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_67 $$ logger.info("occiHeaders - " + occiHeaders)[ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_68 $$ if (occiHeaders.containsKey(Response.Location)) [ CD ]
Line_14 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>()-->Line_68 $$ if (occiHeaders.containsKey(Response.Location)) [ FD ]
Line_68 $$ if (occiHeaders.containsKey(Response.Location)) -->Line_68 $$ if (occiHeaders.containsKey(Response.Location)) [ CD ]
Line_14 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>()-->Line_68 $$ if (occiHeaders.containsKey(Response.Location)) [ FD ]
Line_68 $$ if (occiHeaders.containsKey(Response.Location)) -->Line_69 $$ logger.info("Valid Provision" + statusLine)[ CD ]
Line_68 $$ if (occiHeaders.containsKey(Response.Location)) -->Line_70 $$ return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, "")[ CD ]
Line_70 $$ return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, "")-->Line_70 $$ return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, "")[ CD ]
Line_14 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>()-->Line_70 $$ return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, "")[ FD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_72 $$ logger.info("NOT a Valid Provision - " + statusLine)[ CD ]
Line_2 $$ public String put(String resourceID, Map<String, String> headersMap) -->Line_73 $$ return statusLine[ CD ]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) -->Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [ FD ]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) -->Line_8 $$ httpPut.addHeader(iterator.next())[ FD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_15 $$ for (int H = 0; H < headersArray.length; H++) [ FD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_15 $$ for (int H = 0; H < headersArray.length; H++) [ FD ]
Line_15 $$ for (int H = 0; H < headersArray.length; H++) -->Line_15 $$ for (int H = 0; H < headersArray.length; H++) [ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_17 $$ logger.info("header - request  -" + header.toString())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_18 $$ logger.info("	headerName - " + header.getName())[ FD ]
Line_16 $$ Header header = headersArray[H]-->Line_19 $$ logger.info("	headerValue - " + header.getValue())[ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_39 $$ for (int i = 0; i < headers.length; i++) [ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_39 $$ for (int i = 0; i < headers.length; i++) [ FD ]
Line_39 $$ for (int i = 0; i < headers.length; i++) -->Line_39 $$ for (int i = 0; i < headers.length; i++) [ FD ]
Line_40 $$ Header header = headers[i]-->Line_41 $$ logger.info("header - response - " + header.toString())[ FD ]
Line_40 $$ Header header = headers[i]-->Line_42 $$ logger.info("	headerName - " + header.getName())[ FD ]
Line_40 $$ Header header = headers[i]-->Line_43 $$ logger.info("	headerValue - " + header.getValue())[ FD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_44 $$ for (int h = 0; h < fields.length; h++) [ FD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_44 $$ for (int h = 0; h < fields.length; h++) [ FD ]
Line_44 $$ for (int h = 0; h < fields.length; h++) -->Line_44 $$ for (int h = 0; h < fields.length; h++) [ FD ]
