Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException [ CD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_3 $$ final Timer timer = Metric.newTimer("RestClientImpl.execute")[ CD ]
Line_3 $$ final Timer timer = Metric.newTimer("RestClientImpl.execute")-->Line_3 $$ final Timer timer = Metric.newTimer("RestClientImpl.execute")[ CD ]
Line_5 $$ final int sc = httpClient.executeMethod(method)-->Line_5 $$ final int sc = httpClient.executeMethod(method)[ CD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_5 $$ final int sc = httpClient.executeMethod(method)[ FD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_7 $$ throw new RestException("Unexpected status code: " + sc + ": " + method.getStatusText() + " -- " + method, sc)[ FD ]
Line_9 $$ final InputStream in = method.getResponseBodyAsStream()-->Line_9 $$ final InputStream in = method.getResponseBodyAsStream()[ CD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_9 $$ final InputStream in = method.getResponseBodyAsStream()[ FD ]
Line_9 $$ final InputStream in = method.getResponseBodyAsStream()-->Line_12 $$ IOUtils.copy(in, writer, method.getResponseCharSet())[ FD ]
Line_11 $$ final StringWriter writer = new StringWriter(2048)-->Line_12 $$ IOUtils.copy(in, writer, method.getResponseCharSet())[ FD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_12 $$ IOUtils.copy(in, writer, method.getResponseCharSet())[ FD ]
Line_11 $$ final StringWriter writer = new StringWriter(2048)-->Line_13 $$ return new Tuple(sc, writer.toString())[ FD ]
Line_9 $$ final InputStream in = method.getResponseBodyAsStream()-->Line_15 $$ in.close()[ FD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_18 $$ if (numTries < 3) [ FD ]
Line_18 $$ if (numTries < 3) -->Line_24 $$ return execute(method, numTries + 1)[ CD ]
Line_24 $$ return execute(method, numTries + 1)-->Line_24 $$ return execute(method, numTries + 1)[ CD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_24 $$ return execute(method, numTries + 1)[ FD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_28 $$ if (numTries < 3) [ FD ]
Line_28 $$ if (numTries < 3) -->Line_34 $$ return execute(method, numTries + 1)[ CD ]
Line_34 $$ return execute(method, numTries + 1)-->Line_34 $$ return execute(method, numTries + 1)[ CD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_34 $$ return execute(method, numTries + 1)[ FD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_38 $$ if (numTries < 3) [ FD ]
Line_38 $$ if (numTries < 3) -->Line_44 $$ return execute(method, numTries + 1)[ CD ]
Line_44 $$ return execute(method, numTries + 1)-->Line_44 $$ return execute(method, numTries + 1)[ CD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_44 $$ return execute(method, numTries + 1)[ FD ]
Line_2 $$ private Tuple execute(final HttpMethodBase method, int numTries) throws IOException -->Line_48 $$ method.releaseConnection()[ FD ]
Line_3 $$ final Timer timer = Metric.newTimer("RestClientImpl.execute")-->Line_49 $$ timer.stop()[ FD ]
