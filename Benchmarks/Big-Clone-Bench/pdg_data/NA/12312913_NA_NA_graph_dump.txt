Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException [ CD ]
Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException -->Line_3 $$ ClassWriter writer = new ClassWriter()[ CD ]
Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException -->Line_4 $$ writer.readClass(new FileInputStream(args[0]))[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_4 $$ writer.readClass(new FileInputStream(args[0]))[ FD ]
Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException -->Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [ CD ]
Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException -->Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException [ CD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [ CD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [ CD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_6 $$ MethodInfo method = (MethodInfo) i.next()[ CD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_6 $$ MethodInfo method = (MethodInfo) i.next()[ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()[ CD ]
Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()-->Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()[ CD ]
Line_6 $$ MethodInfo method = (MethodInfo) i.next()-->Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()[ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_8 $$ int origStack = attribute.getMaxStack()[ CD ]
Line_8 $$ int origStack = attribute.getMaxStack()-->Line_8 $$ int origStack = attribute.getMaxStack()[ CD ]
Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()-->Line_8 $$ int origStack = attribute.getMaxStack()[ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_9 $$ System.out.print(method.getName())[ CD ]
Line_6 $$ MethodInfo method = (MethodInfo) i.next()-->Line_9 $$ System.out.print(method.getName())[ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_10 $$ attribute.codeCheck()[ CD ]
Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()-->Line_10 $$ attribute.codeCheck()[ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_11 $$ System.out.println(" " + origStack + " " + attribute.getMaxStack())[ CD ]
Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()-->Line_11 $$ System.out.println(" " + origStack + " " + attribute.getMaxStack())[ FD ]
Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException -->Line_13 $$ BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]))[ CD ]
Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException -->Line_14 $$ writer.writeClass(outStream)[ CD ]
Line_3 $$ ClassWriter writer = new ClassWriter()-->Line_14 $$ writer.writeClass(outStream)[ FD ]
Line_13 $$ BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]))-->Line_14 $$ writer.writeClass(outStream)[ FD ]
Line_2 $$ public static void rewrite(String[] args) throws IOException, CodeCheckException -->Line_15 $$ outStream.close()[ CD ]
Line_13 $$ BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(args[1]))-->Line_15 $$ outStream.close()[ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) [ FD ]
Line_5 $$ for (Iterator i = writer.getMethods().iterator(); i.hasNext(); ) -->Line_6 $$ MethodInfo method = (MethodInfo) i.next()[ FD ]
Line_6 $$ MethodInfo method = (MethodInfo) i.next()-->Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()[ FD ]
Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()-->Line_8 $$ int origStack = attribute.getMaxStack()[ FD ]
Line_6 $$ MethodInfo method = (MethodInfo) i.next()-->Line_9 $$ System.out.print(method.getName())[ FD ]
Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()-->Line_10 $$ attribute.codeCheck()[ FD ]
Line_7 $$ CodeAttribute attribute = method.getCodeAttribute()-->Line_11 $$ System.out.println(" " + origStack + " " + attribute.getMaxStack())[ FD ]
