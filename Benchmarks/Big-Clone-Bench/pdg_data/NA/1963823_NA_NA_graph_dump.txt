Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void loadRegistry(URL url) throws PacketAnalyzerRegistryException [ CD ]
Line_2 $$ public void loadRegistry(URL url) throws PacketAnalyzerRegistryException -->Line_3 $$ if (analyzers != null) [ CD ]
Line_3 $$ if (analyzers != null) -->Line_4 $$ return[ CD ]
Line_9 $$ InputStream in = url.openStream()-->Line_9 $$ InputStream in = url.openStream()[ CD ]
Line_2 $$ public void loadRegistry(URL url) throws PacketAnalyzerRegistryException -->Line_9 $$ InputStream in = url.openStream()[ FD ]
Line_10 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()-->Line_10 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()[ CD ]
Line_11 $$ DocumentBuilder docBuilder = factory.newDocumentBuilder()-->Line_11 $$ DocumentBuilder docBuilder = factory.newDocumentBuilder()[ CD ]
Line_10 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()-->Line_11 $$ DocumentBuilder docBuilder = factory.newDocumentBuilder()[ FD ]
Line_12 $$ Document doc = docBuilder.parse(in)-->Line_12 $$ Document doc = docBuilder.parse(in)[ CD ]
Line_11 $$ DocumentBuilder docBuilder = factory.newDocumentBuilder()-->Line_12 $$ Document doc = docBuilder.parse(in)[ FD ]
Line_9 $$ InputStream in = url.openStream()-->Line_12 $$ Document doc = docBuilder.parse(in)[ FD ]
Line_13 $$ NodeList list = doc.getElementsByTagName(PACKET_ANALYZER)-->Line_13 $$ NodeList list = doc.getElementsByTagName(PACKET_ANALYZER)[ CD ]
Line_12 $$ Document doc = docBuilder.parse(in)-->Line_13 $$ NodeList list = doc.getElementsByTagName(PACKET_ANALYZER)[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ CD ]
Line_13 $$ NodeList list = doc.getElementsByTagName(PACKET_ANALYZER)-->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ CD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ CD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_15 $$ Node node = list.item(i)[ CD ]
Line_15 $$ Node node = list.item(i)-->Line_15 $$ Node node = list.item(i)[ CD ]
Line_13 $$ NodeList list = doc.getElementsByTagName(PACKET_ANALYZER)-->Line_15 $$ Node node = list.item(i)[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_15 $$ Node node = list.item(i)[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_16 $$ NamedNodeMap map = node.getAttributes()[ CD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_16 $$ NamedNodeMap map = node.getAttributes()[ CD ]
Line_15 $$ Node node = list.item(i)-->Line_16 $$ NamedNodeMap map = node.getAttributes()[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_17 $$ String id = map.getNamedItem(ID).getNodeValue()[ CD ]
Line_17 $$ String id = map.getNamedItem(ID).getNodeValue()-->Line_17 $$ String id = map.getNamedItem(ID).getNodeValue()[ CD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_17 $$ String id = map.getNamedItem(ID).getNodeValue()[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_18 $$ String name = map.getNamedItem(NAME).getNodeValue()[ CD ]
Line_18 $$ String name = map.getNamedItem(NAME).getNodeValue()-->Line_18 $$ String name = map.getNamedItem(NAME).getNodeValue()[ CD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_18 $$ String name = map.getNamedItem(NAME).getNodeValue()[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_19 $$ String clazz = map.getNamedItem(CLASS).getNodeValue()[ CD ]
Line_19 $$ String clazz = map.getNamedItem(CLASS).getNodeValue()-->Line_19 $$ String clazz = map.getNamedItem(CLASS).getNodeValue()[ CD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_19 $$ String clazz = map.getNamedItem(CLASS).getNodeValue()[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_20 $$ Node n = map.getNamedItem(EXTENDS)[ CD ]
Line_20 $$ Node n = map.getNamedItem(EXTENDS)-->Line_20 $$ Node n = map.getNamedItem(EXTENDS)[ CD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_20 $$ Node n = map.getNamedItem(EXTENDS)[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_21 $$ String[] split = null[ CD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_22 $$ if (n != null) [ CD ]
Line_20 $$ Node n = map.getNamedItem(EXTENDS)-->Line_22 $$ if (n != null) [ FD ]
Line_22 $$ if (n != null) -->Line_23 $$ String extendedAnalyzers = n.getNodeValue()[ CD ]
Line_23 $$ String extendedAnalyzers = n.getNodeValue()-->Line_23 $$ String extendedAnalyzers = n.getNodeValue()[ CD ]
Line_20 $$ Node n = map.getNamedItem(EXTENDS)-->Line_23 $$ String extendedAnalyzers = n.getNodeValue()[ FD ]
Line_22 $$ if (n != null) -->Line_24 $$ if (extendedAnalyzers.trim().length() != 0) [ CD ]
Line_23 $$ String extendedAnalyzers = n.getNodeValue()-->Line_24 $$ if (extendedAnalyzers.trim().length() != 0) [ FD ]
Line_24 $$ if (extendedAnalyzers.trim().length() != 0) -->Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")[ CD ]
Line_21 $$ String[] split = null-->Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")[ FD ]
Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")-->Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")[ FD ]
Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")-->Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")[ CD ]
Line_23 $$ String extendedAnalyzers = n.getNodeValue()-->Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_28 $$ PacketAnalyzerDescriptor descriptor = new PacketAnalyzerDescriptor(id, name, clazz, split)[ CD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_29 $$ addDescriptor(descriptor)[ CD ]
Line_28 $$ PacketAnalyzerDescriptor descriptor = new PacketAnalyzerDescriptor(id, name, clazz, split)-->Line_29 $$ addDescriptor(descriptor)[ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_14 $$ for (int i = 0; i < list.getLength(); i++) [ FD ]
Line_14 $$ for (int i = 0; i < list.getLength(); i++) -->Line_15 $$ Node node = list.item(i)[ FD ]
Line_15 $$ Node node = list.item(i)-->Line_16 $$ NamedNodeMap map = node.getAttributes()[ FD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_17 $$ String id = map.getNamedItem(ID).getNodeValue()[ FD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_18 $$ String name = map.getNamedItem(NAME).getNodeValue()[ FD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_19 $$ String clazz = map.getNamedItem(CLASS).getNodeValue()[ FD ]
Line_16 $$ NamedNodeMap map = node.getAttributes()-->Line_20 $$ Node n = map.getNamedItem(EXTENDS)[ FD ]
Line_20 $$ Node n = map.getNamedItem(EXTENDS)-->Line_22 $$ if (n != null) [ FD ]
Line_20 $$ Node n = map.getNamedItem(EXTENDS)-->Line_23 $$ String extendedAnalyzers = n.getNodeValue()[ FD ]
Line_23 $$ String extendedAnalyzers = n.getNodeValue()-->Line_24 $$ if (extendedAnalyzers.trim().length() != 0) [ FD ]
Line_23 $$ String extendedAnalyzers = n.getNodeValue()-->Line_25 $$ split = extendedAnalyzers.split("\\s*\\,+\\s*")[ FD ]
Line_28 $$ PacketAnalyzerDescriptor descriptor = new PacketAnalyzerDescriptor(id, name, clazz, split)-->Line_29 $$ addDescriptor(descriptor)[ FD ]
