Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testReadPerMemberAllFour() throws IOException [ CD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))[ CD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_4 $$ gzin.setEofEachMember(true)[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_4 $$ gzin.setEofEachMember(true)[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_5 $$ int count0 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_5 $$ int count0 = IOUtils.copy(gzin, new NullOutputStream())-->Line_5 $$ int count0 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_5 $$ int count0 = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_6 $$ assertEquals("wrong 1k member count", 1024, count0)[ CD ]
Line_5 $$ int count0 = IOUtils.copy(gzin, new NullOutputStream())-->Line_6 $$ assertEquals("wrong 1k member count", 1024, count0)[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_7 $$ assertEquals("wrong member number", 0, gzin.getMemberNumber())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_7 $$ assertEquals("wrong member number", 0, gzin.getMemberNumber())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_8 $$ assertEquals("wrong member0 start", 0, gzin.getCurrentMemberStart())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_8 $$ assertEquals("wrong member0 start", 0, gzin.getCurrentMemberStart())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_9 $$ assertEquals("wrong member0 end", noise1k_gz.length, gzin.getCurrentMemberEnd())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_9 $$ assertEquals("wrong member0 end", noise1k_gz.length, gzin.getCurrentMemberEnd())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_10 $$ gzin.nextMember()[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_10 $$ gzin.nextMember()[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_11 $$ int count1 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_11 $$ int count1 = IOUtils.copy(gzin, new NullOutputStream())-->Line_11 $$ int count1 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_11 $$ int count1 = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_12 $$ assertEquals("wrong 32k member count", (32 * 1024), count1)[ CD ]
Line_11 $$ int count1 = IOUtils.copy(gzin, new NullOutputStream())-->Line_12 $$ assertEquals("wrong 32k member count", (32 * 1024), count1)[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_13 $$ assertEquals("wrong member number", 1, gzin.getMemberNumber())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_13 $$ assertEquals("wrong member number", 1, gzin.getMemberNumber())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_14 $$ assertEquals("wrong member1 start", noise1k_gz.length, gzin.getCurrentMemberStart())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_14 $$ assertEquals("wrong member1 start", noise1k_gz.length, gzin.getCurrentMemberStart())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_15 $$ assertEquals("wrong member1 end", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_15 $$ assertEquals("wrong member1 end", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_16 $$ gzin.nextMember()[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_16 $$ gzin.nextMember()[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_17 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_17 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())-->Line_17 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_17 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_18 $$ assertEquals("wrong 1-byte member count", 1, count2)[ CD ]
Line_17 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())-->Line_18 $$ assertEquals("wrong 1-byte member count", 1, count2)[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_19 $$ assertEquals("wrong member number", 2, gzin.getMemberNumber())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_19 $$ assertEquals("wrong member number", 2, gzin.getMemberNumber())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_20 $$ assertEquals("wrong member2 start", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_20 $$ assertEquals("wrong member2 start", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_21 $$ assertEquals("wrong member2 end", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_21 $$ assertEquals("wrong member2 end", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_22 $$ gzin.nextMember()[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_22 $$ gzin.nextMember()[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_23 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_23 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())-->Line_23 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_23 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_24 $$ assertEquals("wrong 5-byte member count", 5, count3)[ CD ]
Line_23 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())-->Line_24 $$ assertEquals("wrong 5-byte member count", 5, count3)[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_25 $$ assertEquals("wrong member number", 3, gzin.getMemberNumber())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_25 $$ assertEquals("wrong member number", 3, gzin.getMemberNumber())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_26 $$ assertEquals("wrong member3 start", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_26 $$ assertEquals("wrong member3 start", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_27 $$ assertEquals("wrong member3 end", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_27 $$ assertEquals("wrong member3 end", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_28 $$ gzin.nextMember()[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_28 $$ gzin.nextMember()[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_29 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_29 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())-->Line_29 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz))-->Line_29 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_2 $$ public void testReadPerMemberAllFour() throws IOException -->Line_30 $$ assertEquals("wrong eof count", 0, countEnd)[ CD ]
Line_29 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())-->Line_30 $$ assertEquals("wrong eof count", 0, countEnd)[ FD ]
