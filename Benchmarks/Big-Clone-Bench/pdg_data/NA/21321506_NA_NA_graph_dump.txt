Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException [ CD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_3 $$ if (logger.isInfoEnabled()) [ CD ]
Line_3 $$ if (logger.isInfoEnabled()) -->Line_3 $$ if (logger.isInfoEnabled()) [ CD ]
Line_3 $$ if (logger.isInfoEnabled()) -->Line_4 $$ logger.info(command)[ CD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_4 $$ logger.info(command)[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_6 $$ Process p = Runtime.getRuntime().exec(command)[ CD ]
Line_6 $$ Process p = Runtime.getRuntime().exec(command)-->Line_6 $$ Process p = Runtime.getRuntime().exec(command)[ CD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_6 $$ Process p = Runtime.getRuntime().exec(command)[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_7 $$ ByteArrayOutputStream errOut = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_8 $$ StreamGobbler errGobbler = new StreamGobbler(p.getErrorStream(), errOut, "Convert Thread (err gobbler): " + command)[ CD ]
Line_6 $$ Process p = Runtime.getRuntime().exec(command)-->Line_8 $$ StreamGobbler errGobbler = new StreamGobbler(p.getErrorStream(), errOut, "Convert Thread (err gobbler): " + command)[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_9 $$ errGobbler.start()[ CD ]
Line_8 $$ StreamGobbler errGobbler = new StreamGobbler(p.getErrorStream(), errOut, "Convert Thread (err gobbler): " + command)-->Line_9 $$ errGobbler.start()[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_10 $$ StreamGobbler outGobbler = new StreamGobbler(new BufferedInputStream(is), p.getOutputStream(), "Convert Thread (out gobbler): " + command)[ CD ]
Line_6 $$ Process p = Runtime.getRuntime().exec(command)-->Line_10 $$ StreamGobbler outGobbler = new StreamGobbler(new BufferedInputStream(is), p.getOutputStream(), "Convert Thread (out gobbler): " + command)[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_11 $$ outGobbler.start()[ CD ]
Line_10 $$ StreamGobbler outGobbler = new StreamGobbler(new BufferedInputStream(is), p.getOutputStream(), "Convert Thread (out gobbler): " + command)-->Line_11 $$ outGobbler.start()[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_13 $$ IOUtils.copy(p.getInputStream(), os)[ FD ]
Line_6 $$ Process p = Runtime.getRuntime().exec(command)-->Line_13 $$ IOUtils.copy(p.getInputStream(), os)[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_14 $$ os.flush()[ FD ]
Line_6 $$ Process p = Runtime.getRuntime().exec(command)-->Line_15 $$ if (p.waitFor() != 0) [ FD ]
Line_15 $$ if (p.waitFor() != 0) -->Line_16 $$ logger.error("Unable to convert, stderr: " + new String(errOut.toByteArray(), "UTF-8"))[ CD ]
Line_7 $$ ByteArrayOutputStream errOut = new ByteArrayOutputStream()-->Line_16 $$ logger.error("Unable to convert, stderr: " + new String(errOut.toByteArray(), "UTF-8"))[ FD ]
Line_18 $$ return p.exitValue()-->Line_18 $$ return p.exitValue()[ CD ]
Line_6 $$ Process p = Runtime.getRuntime().exec(command)-->Line_18 $$ return p.exitValue()[ FD ]
Line_2 $$ public static int convertImage(InputStream is, OutputStream os, String command) throws IOException, InterruptedException -->Line_20 $$ IOUtils.closeQuietly(os)[ FD ]
