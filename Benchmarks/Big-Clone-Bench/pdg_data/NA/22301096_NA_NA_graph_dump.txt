Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void copyFile(File sourceFile, File destFile) throws IOException [ CD ]
Line_2 $$ public static void copyFile(File sourceFile, File destFile) throws IOException -->Line_3 $$ if (!destFile.exists()) [ CD ]
Line_3 $$ if (!destFile.exists()) -->Line_3 $$ if (!destFile.exists()) [ CD ]
Line_3 $$ if (!destFile.exists()) -->Line_3 $$ if (!destFile.exists()) [ CD ]
Line_2 $$ public static void copyFile(File sourceFile, File destFile) throws IOException -->Line_3 $$ if (!destFile.exists()) [ FD ]
Line_3 $$ if (!destFile.exists()) -->Line_4 $$ destFile.createNewFile()[ CD ]
Line_2 $$ public static void copyFile(File sourceFile, File destFile) throws IOException -->Line_4 $$ destFile.createNewFile()[ FD ]
Line_2 $$ public static void copyFile(File sourceFile, File destFile) throws IOException -->Line_6 $$ FileChannel source = null[ CD ]
Line_2 $$ public static void copyFile(File sourceFile, File destFile) throws IOException -->Line_7 $$ FileChannel destination = null[ CD ]
Line_6 $$ FileChannel source = null-->Line_9 $$ source = new FileInputStream(sourceFile).getChannel()[ FD ]
Line_9 $$ source = new FileInputStream(sourceFile).getChannel()-->Line_9 $$ source = new FileInputStream(sourceFile).getChannel()[ FD ]
Line_9 $$ source = new FileInputStream(sourceFile).getChannel()-->Line_9 $$ source = new FileInputStream(sourceFile).getChannel()[ CD ]
Line_7 $$ FileChannel destination = null-->Line_10 $$ destination = new FileOutputStream(destFile).getChannel()[ FD ]
Line_10 $$ destination = new FileOutputStream(destFile).getChannel()-->Line_10 $$ destination = new FileOutputStream(destFile).getChannel()[ FD ]
Line_10 $$ destination = new FileOutputStream(destFile).getChannel()-->Line_10 $$ destination = new FileOutputStream(destFile).getChannel()[ CD ]
Line_12 $$ long size = source.size()-->Line_12 $$ long size = source.size()[ CD ]
Line_6 $$ FileChannel source = null-->Line_12 $$ long size = source.size()[ FD ]
Line_9 $$ source = new FileInputStream(sourceFile).getChannel()-->Line_12 $$ long size = source.size()[ FD ]
Line_12 $$ long size = source.size()-->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ FD ]
Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) -->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ FD ]
Line_11 $$ long count = 0-->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ FD ]
Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) -->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ CD ]
Line_7 $$ FileChannel destination = null-->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ FD ]
Line_10 $$ destination = new FileOutputStream(destFile).getChannel()-->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ FD ]
Line_6 $$ FileChannel source = null-->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ FD ]
Line_9 $$ source = new FileInputStream(sourceFile).getChannel()-->Line_13 $$ while ((count += destination.transferFrom(source, 0, size - count)) < size) [ FD ]
Line_6 $$ FileChannel source = null-->Line_15 $$ if (source != null) [ FD ]
Line_9 $$ source = new FileInputStream(sourceFile).getChannel()-->Line_15 $$ if (source != null) [ FD ]
Line_15 $$ if (source != null) -->Line_16 $$ source.close()[ CD ]
Line_6 $$ FileChannel source = null-->Line_16 $$ source.close()[ FD ]
Line_9 $$ source = new FileInputStream(sourceFile).getChannel()-->Line_16 $$ source.close()[ FD ]
Line_7 $$ FileChannel destination = null-->Line_18 $$ if (destination != null) [ FD ]
Line_10 $$ destination = new FileOutputStream(destFile).getChannel()-->Line_18 $$ if (destination != null) [ FD ]
Line_18 $$ if (destination != null) -->Line_19 $$ destination.close()[ CD ]
Line_7 $$ FileChannel destination = null-->Line_19 $$ destination.close()[ FD ]
Line_10 $$ destination = new FileOutputStream(destFile).getChannel()-->Line_19 $$ destination.close()[ FD ]
