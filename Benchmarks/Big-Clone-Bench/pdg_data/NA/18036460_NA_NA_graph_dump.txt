Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public File getFile() throws IOException [ CD ]
Line_2 $$ public File getFile() throws IOException -->Line_3 $$ if (file == null) [ CD ]
Line_3 $$ if (file == null) -->Line_4 $$ if (position > 0) [ CD ]
Line_4 $$ if (position > 0) -->Line_7 $$ file = tmp.createTemporaryFile()[ CD ]
Line_4 $$ if (position > 0) -->Line_8 $$ OutputStream out = new FileOutputStream(file)[ CD ]
Line_8 $$ OutputStream out = new FileOutputStream(file)-->Line_10 $$ IOUtils.copy(in, out)[ FD ]
Line_8 $$ OutputStream out = new FileOutputStream(file)-->Line_12 $$ out.close()[ FD ]
Line_4 $$ if (position > 0) -->Line_14 $$ FileInputStream newStream = new FileInputStream(file)[ CD ]
Line_4 $$ if (position > 0) -->Line_15 $$ tmp.addResource(newStream)[ CD ]
Line_14 $$ FileInputStream newStream = new FileInputStream(file)-->Line_15 $$ tmp.addResource(newStream)[ FD ]
Line_4 $$ if (position > 0) -->Line_16 $$ final InputStream oldStream = in[ CD ]
Line_17 $$ in = new BufferedInputStream(newStream) -->Line_19 $$ oldStream.close()[ CD ]
Line_16 $$ final InputStream oldStream = in-->Line_19 $$ oldStream.close()[ FD ]
Line_4 $$ if (position > 0) -->Line_22 $$ length = file.length()[ CD ]
Line_2 $$ public File getFile() throws IOException -->Line_25 $$ return file[ CD ]
