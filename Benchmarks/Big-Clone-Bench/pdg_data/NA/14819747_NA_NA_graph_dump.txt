Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(final String args[]) [ CD ]
Line_2 $$ public static void main(final String args[]) -->Line_3 $$ if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) [ CD ]
Line_3 $$ if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) -->Line_3 $$ if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) [ CD ]
Line_3 $$ if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) -->Line_4 $$ System.out.println("Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>")[ CD ]
Line_3 $$ if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) -->Line_5 $$ System.out.println("       where the framework is the first element in the class path")[ CD ]
Line_3 $$ if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) -->Line_6 $$ System.out.println("Options: -d Enables the generation of debug output")[ CD ]
Line_3 $$ if (args.length < 2 || (args.length == 3 && !"-d".equals(args[0]))) -->Line_7 $$ return[ CD ]
Line_2 $$ public static void main(final String args[]) -->Line_9 $$ boolean debug = args.length == 3[ CD ]
Line_2 $$ public static void main(final String args[]) -->Line_10 $$ File prologFile = new File(debug ? args[1] : args[0])[ CD ]
Line_2 $$ public static void main(final String args[]) -->Line_11 $$ if (!prologFile.isFile()) [ CD ]
Line_11 $$ if (!prologFile.isFile()) -->Line_11 $$ if (!prologFile.isFile()) [ CD ]
Line_11 $$ if (!prologFile.isFile()) -->Line_11 $$ if (!prologFile.isFile()) [ CD ]
Line_10 $$ File prologFile = new File(debug ? args[1] : args[0])-->Line_11 $$ if (!prologFile.isFile()) [ FD ]
Line_11 $$ if (!prologFile.isFile()) -->Line_12 $$ System.out.println("The given file does not exist.")[ CD ]
Line_11 $$ if (!prologFile.isFile()) -->Line_13 $$ return[ CD ]
Line_2 $$ public static void main(final String args[]) -->Line_15 $$ File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(".")) + ".jar")[ CD ]
Line_10 $$ File prologFile = new File(debug ? args[1] : args[0])-->Line_15 $$ File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(".")) + ".jar")[ FD ]
Line_10 $$ File prologFile = new File(debug ? args[1] : args[0])-->Line_15 $$ File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(".")) + ".jar")[ FD ]
Line_10 $$ File prologFile = new File(debug ? args[1] : args[0])-->Line_15 $$ File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(".")) + ".jar")[ FD ]
Line_2 $$ public static void main(final String args[]) -->Line_16 $$ String source[ CD ]
Line_16 $$ String source-->Line_18 $$ source = FileUtils.readFileToString(prologFile)[ FD ]
Line_18 $$ source = FileUtils.readFileToString(prologFile)-->Line_18 $$ source = FileUtils.readFileToString(prologFile)[ FD ]
Line_18 $$ source = FileUtils.readFileToString(prologFile)-->Line_18 $$ source = FileUtils.readFileToString(prologFile)[ CD ]
Line_10 $$ File prologFile = new File(debug ? args[1] : args[0])-->Line_18 $$ source = FileUtils.readFileToString(prologFile)[ FD ]
Line_2 $$ public static void main(final String args[]) -->Line_23 $$ Parser myParser = new PrologParserImpl()[ CD ]
Line_2 $$ public static void main(final String args[]) -->Line_24 $$ PrologProgram myProgram[ CD ]
Line_24 $$ PrologProgram myProgram-->Line_26 $$ myProgram = (PrologProgram) myParser.parse(source)[ FD ]
Line_26 $$ myProgram = (PrologProgram) myParser.parse(source)-->Line_26 $$ myProgram = (PrologProgram) myParser.parse(source)[ FD ]
Line_23 $$ Parser myParser = new PrologParserImpl()-->Line_26 $$ myProgram = (PrologProgram) myParser.parse(source)[ FD ]
Line_16 $$ String source-->Line_26 $$ myProgram = (PrologProgram) myParser.parse(source)[ FD ]
Line_18 $$ source = FileUtils.readFileToString(prologFile)-->Line_26 $$ myProgram = (PrologProgram) myParser.parse(source)[ FD ]
Line_32 $$ FactVisitor myVisitor = new FactVisitor()-->Line_33 $$ myVisitor.visit(myProgram)[ FD ]
Line_24 $$ PrologProgram myProgram-->Line_33 $$ myVisitor.visit(myProgram)[ FD ]
Line_26 $$ myProgram = (PrologProgram) myParser.parse(source)-->Line_33 $$ myVisitor.visit(myProgram)[ FD ]
Line_34 $$ Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer()-->Line_34 $$ Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer()[ CD ]
Line_32 $$ FactVisitor myVisitor = new FactVisitor()-->Line_34 $$ Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer()[ FD ]
Line_34 $$ Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer()-->Line_35 $$ if (adapterLayer.size() == 0) [ FD ]
Line_35 $$ if (adapterLayer.size() == 0) -->Line_36 $$ System.out.println("No adapters to generate, " + "did you forget to run the comeback rules?")[ CD ]
Line_35 $$ if (adapterLayer.size() == 0) -->Line_37 $$ return[ CD ]
Line_39 $$ URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1])-->Line_39 $$ URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1])[ CD ]
Line_42 $$ Type annotationType = Type.getObjectType("net/sourceforge/comeback/Adapter")-->Line_42 $$ Type annotationType = Type.getObjectType("net/sourceforge/comeback/Adapter")[ CD ]
Line_40 $$ ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile))-->Line_43 $$ adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType))[ FD ]
Line_42 $$ Type annotationType = Type.getObjectType("net/sourceforge/comeback/Adapter")-->Line_43 $$ adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType))[ FD ]
Line_41 $$ AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator()-->Line_43 $$ adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType))[ FD ]
Line_42 $$ Type annotationType = Type.getObjectType("net/sourceforge/comeback/Adapter")-->Line_43 $$ adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType))[ FD ]
Line_45 $$ GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter)-->Line_46 $$ context.setGenerateDebugOutput(debug)[ FD ]
Line_9 $$ boolean debug = args.length == 3-->Line_46 $$ context.setGenerateDebugOutput(debug)[ FD ]
Line_47 $$ Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator()-->Line_47 $$ Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator()[ CD ]
Line_34 $$ Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer()-->Line_47 $$ Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator()[ FD ]
Line_48 $$ while (iterator.hasNext()) -->Line_48 $$ while (iterator.hasNext()) [ CD ]
Line_47 $$ Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator()-->Line_48 $$ while (iterator.hasNext()) [ FD ]
Line_48 $$ while (iterator.hasNext()) -->Line_49 $$ TypeGenerationInfo info = iterator.next()[ CD ]
Line_49 $$ TypeGenerationInfo info = iterator.next()-->Line_49 $$ TypeGenerationInfo info = iterator.next()[ CD ]
Line_47 $$ Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator()-->Line_49 $$ TypeGenerationInfo info = iterator.next()[ FD ]
Line_48 $$ while (iterator.hasNext()) -->Line_50 $$ context.generateAdapter(info)[ CD ]
Line_45 $$ GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter)-->Line_50 $$ context.generateAdapter(info)[ FD ]
Line_49 $$ TypeGenerationInfo info = iterator.next()-->Line_50 $$ context.generateAdapter(info)[ FD ]
Line_53 $$ ObjectOutputStream out = new ObjectOutputStream(serialized)-->Line_54 $$ out.writeObject(adapterLayer)[ FD ]
Line_34 $$ Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer()-->Line_54 $$ out.writeObject(adapterLayer)[ FD ]
Line_53 $$ ObjectOutputStream out = new ObjectOutputStream(serialized)-->Line_55 $$ out.close()[ FD ]
Line_40 $$ ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile))-->Line_56 $$ adapterWriter.writeResource("net/sourceforge/comeback/adapterlayer.ser", serialized.toByteArray())[ FD ]
Line_52 $$ ByteArrayOutputStream serialized = new ByteArrayOutputStream()-->Line_56 $$ adapterWriter.writeResource("net/sourceforge/comeback/adapterlayer.ser", serialized.toByteArray())[ FD ]
Line_60 $$ URL url = Main.class.getResource("/" + Main.class.getName().replace('.', '/') + ".class")-->Line_60 $$ URL url = Main.class.getResource("/" + Main.class.getName().replace('.', '/') + ".class")[ CD ]
Line_60 $$ URL url = Main.class.getResource("/" + Main.class.getName().replace('.', '/') + ".class")-->Line_61 $$ JarURLConnection connection = (JarURLConnection) url.openConnection()[ FD ]
Line_62 $$ sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter)-->Line_62 $$ sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter)[ CD ]
Line_58 $$ Assembler assembler = new Assembler(adapterWriter)-->Line_62 $$ sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_59 $$ PatternClassFilter filter = new PatternClassFilter()-->Line_62 $$ sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_61 $$ JarURLConnection connection = (JarURLConnection) url.openConnection()-->Line_62 $$ sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_59 $$ PatternClassFilter filter = new PatternClassFilter()-->Line_63 $$ filter = new PatternClassFilter()[ FD ]
Line_63 $$ filter = new PatternClassFilter()-->Line_63 $$ filter = new PatternClassFilter()[ FD ]
Line_60 $$ URL url = Main.class.getResource("/" + Main.class.getName().replace('.', '/') + ".class")-->Line_64 $$ url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class")[ FD ]
Line_64 $$ url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class")-->Line_64 $$ url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class")[ FD ]
Line_64 $$ url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class")-->Line_64 $$ url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class")[ CD ]
Line_61 $$ JarURLConnection connection = (JarURLConnection) url.openConnection()-->Line_65 $$ connection = (JarURLConnection) url.openConnection()[ FD ]
Line_65 $$ connection = (JarURLConnection) url.openConnection()-->Line_65 $$ connection = (JarURLConnection) url.openConnection()[ FD ]
Line_60 $$ URL url = Main.class.getResource("/" + Main.class.getName().replace('.', '/') + ".class")-->Line_65 $$ connection = (JarURLConnection) url.openConnection()[ FD ]
Line_64 $$ url = Type.class.getResource("/" + Type.class.getName().replace('.', '/') + ".class")-->Line_65 $$ connection = (JarURLConnection) url.openConnection()[ FD ]
Line_66 $$ sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter)-->Line_66 $$ sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter)[ CD ]
Line_58 $$ Assembler assembler = new Assembler(adapterWriter)-->Line_66 $$ sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_59 $$ PatternClassFilter filter = new PatternClassFilter()-->Line_66 $$ sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_63 $$ filter = new PatternClassFilter()-->Line_66 $$ sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_61 $$ JarURLConnection connection = (JarURLConnection) url.openConnection()-->Line_66 $$ sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_65 $$ connection = (JarURLConnection) url.openConnection()-->Line_66 $$ sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter)[ FD ]
Line_40 $$ ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile))-->Line_68 $$ adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes))[ FD ]
Line_44 $$ AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType("net/sourceforge/comeback/Adapters"), annotationType)-->Line_68 $$ adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes))[ FD ]
Line_44 $$ AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType("net/sourceforge/comeback/Adapters"), annotationType)-->Line_68 $$ adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes))[ FD ]
Line_57 $$ String[] sharedClassesPrefixes = new String[2]-->Line_68 $$ adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes))[ FD ]
Line_34 $$ Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer()-->Line_68 $$ adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes))[ FD ]
Line_67 $$ String tmp = debug ? args[2] : args[1]-->Line_68 $$ adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes))[ FD ]
Line_67 $$ String tmp = debug ? args[2] : args[1]-->Line_68 $$ adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes))[ FD ]
Line_40 $$ ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile))-->Line_69 $$ adapterWriter.close()[ FD ]
Line_49 $$ TypeGenerationInfo info = iterator.next()-->Line_50 $$ context.generateAdapter(info)[ FD ]
