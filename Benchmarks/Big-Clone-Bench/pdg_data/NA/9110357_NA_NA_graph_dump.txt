Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception [ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_3 $$ URL url = initURL(type, params)[ CD ]
Line_3 $$ URL url = initURL(type, params)-->Line_3 $$ URL url = initURL(type, params)[ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_3 $$ URL url = initURL(type, params)[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_3 $$ URL url = initURL(type, params)[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_4 $$ XMLParser parser = initParser(type)[ CD ]
Line_4 $$ XMLParser parser = initParser(type)-->Line_4 $$ XMLParser parser = initParser(type)[ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_4 $$ XMLParser parser = initParser(type)[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_5 $$ InputStream in = url.openStream()[ CD ]
Line_5 $$ InputStream in = url.openStream()-->Line_5 $$ InputStream in = url.openStream()[ CD ]
Line_3 $$ URL url = initURL(type, params)-->Line_5 $$ InputStream in = url.openStream()[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_6 $$ ArrayList<Jane16Results> results = new ArrayList<Jane16Results>()[ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_7 $$ byte[] buf = new byte[1024][ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_8 $$ ArrayList<Byte> arrByte = new ArrayList<Byte>()[ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_9 $$ int len[ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_10 $$ while ((len = in.read(buf)) > 0) [ CD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception [ CD ]
Line_10 $$ while ((len = in.read(buf)) > 0) -->Line_10 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_9 $$ int len-->Line_10 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_10 $$ while ((len = in.read(buf)) > 0) -->Line_10 $$ while ((len = in.read(buf)) > 0) [ CD ]
Line_5 $$ InputStream in = url.openStream()-->Line_10 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_7 $$ byte[] buf = new byte[1024]-->Line_10 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_10 $$ while ((len = in.read(buf)) > 0) -->Line_11 $$ for (int i = 0; i < len; i++) [ CD ]
Line_10 $$ while ((len = in.read(buf)) > 0) -->Line_10 $$ while ((len = in.read(buf)) > 0) [ CD ]
Line_10 $$ while ((len = in.read(buf)) > 0) -->Line_11 $$ for (int i = 0; i < len; i++) [ FD ]
Line_9 $$ int len-->Line_11 $$ for (int i = 0; i < len; i++) [ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_11 $$ for (int i = 0; i < len; i++) [ CD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_11 $$ for (int i = 0; i < len; i++) [ CD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_11 $$ for (int i = 0; i < len; i++) [ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_12 $$ arrByte.add(buf[i])[ CD ]
Line_8 $$ ArrayList<Byte> arrByte = new ArrayList<Byte>()-->Line_12 $$ arrByte.add(buf[i])[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_15 $$ in.close()[ CD ]
Line_5 $$ InputStream in = url.openStream()-->Line_15 $$ in.close()[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_16 $$ byte[] data = new byte[arrByte.size()][ CD ]
Line_8 $$ ArrayList<Byte> arrByte = new ArrayList<Byte>()-->Line_16 $$ byte[] data = new byte[arrByte.size()][ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_17 $$ int i = 0[ CD ]
Line_18 $$ for (Byte b : arrByte) -->Line_19 $$ data[i++] = b[ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_19 $$ data[i++] = b[ FD ]
Line_17 $$ int i = 0-->Line_19 $$ data[i++] = b[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_21 $$ results = parser.parse(data)[ CD ]
Line_6 $$ ArrayList<Jane16Results> results = new ArrayList<Jane16Results>()-->Line_21 $$ results = parser.parse(data)[ FD ]
Line_21 $$ results = parser.parse(data)-->Line_21 $$ results = parser.parse(data)[ FD ]
Line_21 $$ results = parser.parse(data)-->Line_21 $$ results = parser.parse(data)[ CD ]
Line_4 $$ XMLParser parser = initParser(type)-->Line_21 $$ results = parser.parse(data)[ FD ]
Line_16 $$ byte[] data = new byte[arrByte.size()]-->Line_21 $$ results = parser.parse(data)[ FD ]
Line_2 $$ public ArrayList<Jane16Results> callExternalService(ServiceType type, HashMap<String, String> params) throws Exception -->Line_22 $$ return results[ CD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_11 $$ for (int i = 0; i < len; i++) [ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_11 $$ for (int i = 0; i < len; i++) [ FD ]
Line_11 $$ for (int i = 0; i < len; i++) -->Line_11 $$ for (int i = 0; i < len; i++) [ FD ]
