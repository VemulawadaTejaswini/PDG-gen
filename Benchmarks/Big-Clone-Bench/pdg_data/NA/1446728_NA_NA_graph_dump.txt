Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException [ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_3 $$ String f = FileUtils.getAbsolutePath(fn)[ CD ]
Line_3 $$ String f = FileUtils.getAbsolutePath(fn)-->Line_3 $$ String f = FileUtils.getAbsolutePath(fn)[ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_3 $$ String f = FileUtils.getAbsolutePath(fn)[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_4 $$ base = FileUtils.getAbsolutePath(base)[ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_4 $$ base = FileUtils.getAbsolutePath(base)[ FD ]
Line_4 $$ base = FileUtils.getAbsolutePath(base)-->Line_4 $$ base = FileUtils.getAbsolutePath(base)[ FD ]
Line_4 $$ base = FileUtils.getAbsolutePath(base)-->Line_4 $$ base = FileUtils.getAbsolutePath(base)[ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_4 $$ base = FileUtils.getAbsolutePath(base)[ FD ]
Line_4 $$ base = FileUtils.getAbsolutePath(base)-->Line_4 $$ base = FileUtils.getAbsolutePath(base)[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_5 $$ if (!f.startsWith(base)) [ CD ]
Line_5 $$ if (!f.startsWith(base)) -->Line_5 $$ if (!f.startsWith(base)) [ CD ]
Line_5 $$ if (!f.startsWith(base)) -->Line_5 $$ if (!f.startsWith(base)) [ CD ]
Line_3 $$ String f = FileUtils.getAbsolutePath(fn)-->Line_5 $$ if (!f.startsWith(base)) [ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_5 $$ if (!f.startsWith(base)) [ FD ]
Line_4 $$ base = FileUtils.getAbsolutePath(base)-->Line_5 $$ if (!f.startsWith(base)) [ FD ]
Line_5 $$ if (!f.startsWith(base)) -->Line_6 $$ Message.throwInternalError(f + " does not start with " + base)[ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_8 $$ f = f.substring(base.length())[ CD ]
Line_3 $$ String f = FileUtils.getAbsolutePath(fn)-->Line_8 $$ f = f.substring(base.length())[ FD ]
Line_8 $$ f = f.substring(base.length())-->Line_8 $$ f = f.substring(base.length())[ FD ]
Line_8 $$ f = f.substring(base.length())-->Line_8 $$ f = f.substring(base.length())[ CD ]
Line_3 $$ String f = FileUtils.getAbsolutePath(fn)-->Line_8 $$ f = f.substring(base.length())[ FD ]
Line_8 $$ f = f.substring(base.length())-->Line_8 $$ f = f.substring(base.length())[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_8 $$ f = f.substring(base.length())[ FD ]
Line_4 $$ base = FileUtils.getAbsolutePath(base)-->Line_8 $$ f = f.substring(base.length())[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_9 $$ f = correctFileName(f)[ CD ]
Line_3 $$ String f = FileUtils.getAbsolutePath(fn)-->Line_9 $$ f = correctFileName(f)[ FD ]
Line_8 $$ f = f.substring(base.length())-->Line_9 $$ f = correctFileName(f)[ FD ]
Line_9 $$ f = correctFileName(f)-->Line_9 $$ f = correctFileName(f)[ FD ]
Line_9 $$ f = correctFileName(f)-->Line_9 $$ f = correctFileName(f)[ CD ]
Line_3 $$ String f = FileUtils.getAbsolutePath(fn)-->Line_9 $$ f = correctFileName(f)[ FD ]
Line_8 $$ f = f.substring(base.length())-->Line_9 $$ f = correctFileName(f)[ FD ]
Line_9 $$ f = correctFileName(f)-->Line_9 $$ f = correctFileName(f)[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_10 $$ out.putNextEntry(new ZipEntry(f))[ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_10 $$ out.putNextEntry(new ZipEntry(f))[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_11 $$ InputStream in = FileUtils.openFileInputStream(fn)[ CD ]
Line_11 $$ InputStream in = FileUtils.openFileInputStream(fn)-->Line_11 $$ InputStream in = FileUtils.openFileInputStream(fn)[ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_11 $$ InputStream in = FileUtils.openFileInputStream(fn)[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_12 $$ IOUtils.copyAndCloseInput(in, out)[ CD ]
Line_11 $$ InputStream in = FileUtils.openFileInputStream(fn)-->Line_12 $$ IOUtils.copyAndCloseInput(in, out)[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_12 $$ IOUtils.copyAndCloseInput(in, out)[ FD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_13 $$ out.closeEntry()[ CD ]
Line_2 $$ private void backupFile(ZipOutputStream out, String base, String fn) throws IOException -->Line_13 $$ out.closeEntry()[ FD ]
