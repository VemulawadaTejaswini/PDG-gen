Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException [ CD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_3 $$ String[] tokens = dsd.getDataSetID().split("\\?|\\&")[ CD ]
Line_3 $$ String[] tokens = dsd.getDataSetID().split("\\?|\\&")-->Line_3 $$ String[] tokens = dsd.getDataSetID().split("\\?|\\&")[ CD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_3 $$ String[] tokens = dsd.getDataSetID().split("\\?|\\&")[ FD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_4 $$ String dataSetID = tokens[1][ CD ]
Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)-->Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)[ CD ]
Line_4 $$ String dataSetID = tokens[1]-->Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)[ FD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)[ FD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)[ FD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)[ FD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_7 $$ if (dsd.isRestrictedAccess()) [ FD ]
Line_7 $$ if (dsd.isRestrictedAccess()) -->Line_7 $$ if (dsd.isRestrictedAccess()) [ CD ]
Line_2 $$ protected synchronized InputStream openURLConnection(StreamDataSetDescriptor dsd, Datum start, Datum end, StringBuffer additionalFormData) throws DasException -->Line_7 $$ if (dsd.isRestrictedAccess()) [ FD ]
Line_7 $$ if (dsd.isRestrictedAccess()) -->Line_8 $$ key = server.getKey("")[ CD ]
Line_7 $$ if (dsd.isRestrictedAccess()) -->Line_9 $$ if (key != null) [ CD ]
Line_9 $$ if (key != null) -->Line_10 $$ formData += "&key=" + URLEncoder.encode(key.toString(), "UTF-8")[ CD ]
Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)-->Line_10 $$ formData += "&key=" + URLEncoder.encode(key.toString(), "UTF-8")[ FD ]
Line_10 $$ formData += "&key=" + URLEncoder.encode(key.toString(), "UTF-8")-->Line_10 $$ formData += "&key=" + URLEncoder.encode(key.toString(), "UTF-8")[ FD ]
Line_13 $$ if (redirect) -->Line_14 $$ formData += "&redirect=1"[ CD ]
Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)-->Line_14 $$ formData += "&redirect=1"[ FD ]
Line_10 $$ formData += "&key=" + URLEncoder.encode(key.toString(), "UTF-8")-->Line_14 $$ formData += "&redirect=1"[ FD ]
Line_14 $$ formData += "&redirect=1"-->Line_14 $$ formData += "&redirect=1"[ FD ]
Line_16 $$ URL serverURL = this.server.getURL(formData)-->Line_16 $$ URL serverURL = this.server.getURL(formData)[ CD ]
Line_6 $$ String formData = createFormDataString(dataSetID, start, end, additionalFormData)-->Line_16 $$ URL serverURL = this.server.getURL(formData)[ FD ]
Line_10 $$ formData += "&key=" + URLEncoder.encode(key.toString(), "UTF-8")-->Line_16 $$ URL serverURL = this.server.getURL(formData)[ FD ]
Line_14 $$ formData += "&redirect=1"-->Line_16 $$ URL serverURL = this.server.getURL(formData)[ FD ]
Line_17 $$ this.lastRequestURL = String.valueOf(serverURL)-->Line_17 $$ this.lastRequestURL = String.valueOf(serverURL)[ CD ]
Line_16 $$ URL serverURL = this.server.getURL(formData)-->Line_17 $$ this.lastRequestURL = String.valueOf(serverURL)[ FD ]
Line_16 $$ URL serverURL = this.server.getURL(formData)-->Line_18 $$ DasLogger.getLogger(DasLogger.DATA_TRANSFER_LOG).info("opening " + serverURL.toString())[ FD ]
Line_19 $$ URLConnection urlConnection = serverURL.openConnection()-->Line_19 $$ URLConnection urlConnection = serverURL.openConnection()[ CD ]
Line_16 $$ URL serverURL = this.server.getURL(formData)-->Line_19 $$ URLConnection urlConnection = serverURL.openConnection()[ FD ]
Line_19 $$ URLConnection urlConnection = serverURL.openConnection()-->Line_20 $$ urlConnection.connect()[ FD ]
Line_21 $$ String contentType = urlConnection.getContentType()-->Line_21 $$ String contentType = urlConnection.getContentType()[ CD ]
Line_19 $$ URLConnection urlConnection = serverURL.openConnection()-->Line_21 $$ String contentType = urlConnection.getContentType()[ FD ]
Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) -->Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) [ CD ]
Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) -->Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) [ CD ]
Line_21 $$ String contentType = urlConnection.getContentType()-->Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) [ FD ]
Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) -->Line_23 $$ BufferedReader bin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))[ CD ]
Line_19 $$ URLConnection urlConnection = serverURL.openConnection()-->Line_23 $$ BufferedReader bin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))[ FD ]
Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) -->Line_24 $$ String line = bin.readLine()[ CD ]
Line_24 $$ String line = bin.readLine()-->Line_24 $$ String line = bin.readLine()[ CD ]
Line_23 $$ BufferedReader bin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))-->Line_24 $$ String line = bin.readLine()[ FD ]
Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) -->Line_25 $$ String message = ""[ CD ]
Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) -->Line_26 $$ while (line != null) [ CD ]
Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) -->Line_22 $$ if (!contentType.equalsIgnoreCase("application/octet-stream")) [ CD ]
Line_24 $$ String line = bin.readLine()-->Line_26 $$ while (line != null) [ FD ]
Line_26 $$ while (line != null) -->Line_27 $$ message = message.concat(line)[ CD ]
Line_27 $$ message = message.concat(line)-->Line_27 $$ message = message.concat(line)[ FD ]
Line_25 $$ String message = ""-->Line_27 $$ message = message.concat(line)[ FD ]
Line_27 $$ message = message.concat(line)-->Line_27 $$ message = message.concat(line)[ CD ]
Line_27 $$ message = message.concat(line)-->Line_27 $$ message = message.concat(line)[ FD ]
Line_25 $$ String message = ""-->Line_27 $$ message = message.concat(line)[ FD ]
Line_24 $$ String line = bin.readLine()-->Line_27 $$ message = message.concat(line)[ FD ]
Line_26 $$ while (line != null) -->Line_28 $$ line = bin.readLine()[ CD ]
Line_28 $$ line = bin.readLine()-->Line_28 $$ line = bin.readLine()[ FD ]
Line_24 $$ String line = bin.readLine()-->Line_28 $$ line = bin.readLine()[ FD ]
Line_28 $$ line = bin.readLine()-->Line_28 $$ line = bin.readLine()[ CD ]
Line_23 $$ BufferedReader bin = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))-->Line_28 $$ line = bin.readLine()[ FD ]
Line_32 $$ InputStream in = urlConnection.getInputStream()-->Line_32 $$ InputStream in = urlConnection.getInputStream()[ CD ]
Line_19 $$ URLConnection urlConnection = serverURL.openConnection()-->Line_32 $$ InputStream in = urlConnection.getInputStream()[ FD ]
Line_33 $$ if (isLegacyStream()) -->Line_33 $$ if (isLegacyStream()) [ CD ]
Line_33 $$ if (isLegacyStream()) -->Line_34 $$ return processLegacyStream(in)[ CD ]
Line_34 $$ return processLegacyStream(in)-->Line_34 $$ return processLegacyStream(in)[ CD ]
Line_32 $$ InputStream in = urlConnection.getInputStream()-->Line_34 $$ return processLegacyStream(in)[ FD ]
Line_28 $$ line = bin.readLine()-->Line_26 $$ while (line != null) [ FD ]
Line_28 $$ line = bin.readLine()-->Line_26 $$ while (line != null) [ FD ]
Line_27 $$ message = message.concat(line)-->Line_27 $$ message = message.concat(line)[ FD ]
Line_28 $$ line = bin.readLine()-->Line_27 $$ message = message.concat(line)[ FD ]
