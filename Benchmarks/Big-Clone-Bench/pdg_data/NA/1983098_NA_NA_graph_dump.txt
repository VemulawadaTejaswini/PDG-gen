Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception [ CD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_3 $$ JCRNodeSource emptySource = loadTestSource()[ CD ]
Line_3 $$ JCRNodeSource emptySource = loadTestSource()-->Line_3 $$ JCRNodeSource emptySource = loadTestSource()[ CD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_4 $$ assertEquals(false, emptySource.exists())[ CD ]
Line_3 $$ JCRNodeSource emptySource = loadTestSource()-->Line_4 $$ assertEquals(false, emptySource.exists())[ FD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()[ CD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()[ CD ]
Line_3 $$ JCRNodeSource emptySource = loadTestSource()-->Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()[ FD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_6 $$ assertNotNull(sourceOut)[ CD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_6 $$ assertNotNull(sourceOut)[ FD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)[ CD ]
Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)[ CD ]
Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_9 $$ IOUtils.copy(contentIn, sourceOut)[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_9 $$ IOUtils.copy(contentIn, sourceOut)[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_10 $$ sourceOut.flush()[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_12 $$ sourceOut.close()[ FD ]
Line_7 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_13 $$ contentIn.close()[ FD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_15 $$ InputStream expected = getClass().getResourceAsStream(CONTENT_FILE)[ CD ]
Line_15 $$ InputStream expected = getClass().getResourceAsStream(CONTENT_FILE)-->Line_15 $$ InputStream expected = getClass().getResourceAsStream(CONTENT_FILE)[ CD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_16 $$ JCRNodeSource persistentSource = loadTestSource()[ CD ]
Line_16 $$ JCRNodeSource persistentSource = loadTestSource()-->Line_16 $$ JCRNodeSource persistentSource = loadTestSource()[ CD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_17 $$ assertEquals(true, persistentSource.exists())[ CD ]
Line_16 $$ JCRNodeSource persistentSource = loadTestSource()-->Line_17 $$ assertEquals(true, persistentSource.exists())[ FD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_18 $$ InputStream actual = persistentSource.getInputStream()[ CD ]
Line_18 $$ InputStream actual = persistentSource.getInputStream()-->Line_18 $$ InputStream actual = persistentSource.getInputStream()[ CD ]
Line_16 $$ JCRNodeSource persistentSource = loadTestSource()-->Line_18 $$ InputStream actual = persistentSource.getInputStream()[ FD ]
Line_15 $$ InputStream expected = getClass().getResourceAsStream(CONTENT_FILE)-->Line_20 $$ assertTrue(isXmlEqual(expected, actual))[ FD ]
Line_18 $$ InputStream actual = persistentSource.getInputStream()-->Line_20 $$ assertTrue(isXmlEqual(expected, actual))[ FD ]
Line_15 $$ InputStream expected = getClass().getResourceAsStream(CONTENT_FILE)-->Line_22 $$ expected.close()[ FD ]
Line_18 $$ InputStream actual = persistentSource.getInputStream()-->Line_23 $$ actual.close()[ FD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_25 $$ JCRNodeSource tmpSrc = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.saar")[ CD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_26 $$ persistentSource.delete()[ CD ]
Line_16 $$ JCRNodeSource persistentSource = loadTestSource()-->Line_26 $$ persistentSource.delete()[ FD ]
Line_2 $$ public void testCreateNewXMLFile() throws InvalidNodeTypeDefException, ParseException, Exception -->Line_27 $$ tmpSrc.delete()[ CD ]
Line_25 $$ JCRNodeSource tmpSrc = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.saar")-->Line_27 $$ tmpSrc.delete()[ FD ]
