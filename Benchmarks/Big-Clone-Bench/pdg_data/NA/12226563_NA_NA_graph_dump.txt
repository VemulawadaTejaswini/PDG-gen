Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ Vector<Update> updates = new Vector<Update>()[ CD ]
Line_2 $$ public void run() -->Line_4 $$ if (dic != null)[ CD ]
Line_4 $$ if (dic != null)-->Line_4 $$ updates.add(dic)[ CD ]
Line_3 $$ Vector<Update> updates = new Vector<Update>()-->Line_4 $$ updates.add(dic)[ FD ]
Line_2 $$ public void run() -->Line_5 $$ if (gen != null)[ CD ]
Line_5 $$ if (gen != null)-->Line_5 $$ updates.add(gen)[ CD ]
Line_3 $$ Vector<Update> updates = new Vector<Update>()-->Line_5 $$ updates.add(gen)[ FD ]
Line_2 $$ public void run() -->Line_6 $$ if (res != null)[ CD ]
Line_6 $$ if (res != null)-->Line_6 $$ updates.add(res)[ CD ]
Line_3 $$ Vector<Update> updates = new Vector<Update>()-->Line_6 $$ updates.add(res)[ FD ]
Line_2 $$ public void run() -->Line_7 $$ if (help != null)[ CD ]
Line_7 $$ if (help != null)-->Line_7 $$ updates.add(help)[ CD ]
Line_3 $$ Vector<Update> updates = new Vector<Update>()-->Line_7 $$ updates.add(help)[ FD ]
Line_2 $$ public void run() -->Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) -->Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) [ CD ]
Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) -->Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) [ CD ]
Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) -->Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) [ CD ]
Line_3 $$ Vector<Update> updates = new Vector<Update>()-->Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) [ FD ]
Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) -->Line_9 $$ Update update = (Update) iterator.next()[ CD ]
Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) -->Line_9 $$ Update update = (Update) iterator.next()[ FD ]
Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")-->Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")[ CD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")[ FD ]
Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")-->Line_12 $$ temp.deleteOnExit()[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_14 $$ URL url = new URL(update.getAction())[ FD ]
Line_15 $$ URLConnection conn = url.openConnection()-->Line_15 $$ URLConnection conn = url.openConnection()[ CD ]
Line_14 $$ URL url = new URL(update.getAction())-->Line_15 $$ URLConnection conn = url.openConnection()[ FD ]
Line_15 $$ URLConnection conn = url.openConnection()-->Line_16 $$ com.diccionarioderimas.Utils.setupProxy(conn)[ FD ]
Line_17 $$ InputStream in = conn.getInputStream()-->Line_17 $$ InputStream in = conn.getInputStream()[ CD ]
Line_15 $$ URLConnection conn = url.openConnection()-->Line_17 $$ InputStream in = conn.getInputStream()[ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_21 $$ while ((read = in.read(buffer)) != -1) [ FD ]
Line_19 $$ int read = 0-->Line_21 $$ while ((read = in.read(buffer)) != -1) [ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_21 $$ while ((read = in.read(buffer)) != -1) [ CD ]
Line_17 $$ InputStream in = conn.getInputStream()-->Line_21 $$ while ((read = in.read(buffer)) != -1) [ FD ]
Line_18 $$ byte[] buffer = new byte[1024]-->Line_21 $$ while ((read = in.read(buffer)) != -1) [ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_22 $$ out.write(buffer, 0, read)[ CD ]
Line_13 $$ FileOutputStream out = new FileOutputStream(temp)-->Line_22 $$ out.write(buffer, 0, read)[ FD ]
Line_18 $$ byte[] buffer = new byte[1024]-->Line_22 $$ out.write(buffer, 0, read)[ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_22 $$ out.write(buffer, 0, read)[ FD ]
Line_19 $$ int read = 0-->Line_22 $$ out.write(buffer, 0, read)[ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_23 $$ total += read[ CD ]
Line_23 $$ total += read-->Line_23 $$ total += read[ FD ]
Line_20 $$ int total = 0-->Line_23 $$ total += read[ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_23 $$ total += read[ FD ]
Line_19 $$ int read = 0-->Line_23 $$ total += read[ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_24 $$ if (total > 10000) [ CD ]
Line_23 $$ total += read-->Line_24 $$ if (total > 10000) [ FD ]
Line_20 $$ int total = 0-->Line_24 $$ if (total > 10000) [ FD ]
Line_24 $$ if (total > 10000) -->Line_25 $$ progressBar.setValue(progressBar.getValue() + total)[ CD ]
Line_24 $$ if (total > 10000) -->Line_26 $$ total = 0[ CD ]
Line_23 $$ total += read-->Line_26 $$ total = 0[ FD ]
Line_26 $$ total = 0-->Line_26 $$ total = 0[ FD ]
Line_20 $$ int total = 0-->Line_26 $$ total = 0[ FD ]
Line_13 $$ FileOutputStream out = new FileOutputStream(temp)-->Line_29 $$ out.close()[ FD ]
Line_17 $$ InputStream in = conn.getInputStream()-->Line_30 $$ in.close()[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_32 $$ if (update.getType() == Update.GENERATOR)[ FD ]
Line_32 $$ if (update.getType() == Update.GENERATOR)-->Line_32 $$ if (update.getType() == Update.RESBC)[ CD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_32 $$ if (update.getType() == Update.RESBC)[ FD ]
Line_32 $$ if (update.getType() == Update.RESBC)-->Line_32 $$ if (update.getType() == Update.HELP)[ CD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_32 $$ if (update.getType() == Update.HELP)[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_33 $$ if (update.getType() == Update.RESBC) [ FD ]
Line_33 $$ if (update.getType() == Update.RESBC) -->Line_34 $$ Utils.unzip(temp, new File(fileTo))[ CD ]
Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")-->Line_34 $$ Utils.unzip(temp, new File(fileTo))[ FD ]
Line_33 $$ if (update.getType() == Update.RESBC) -->Line_36 $$ Utils.copyFile(new FileInputStream(temp), new File(fileTo))[ CD ]
Line_2 $$ public void run() -->Line_42 $$ setVisible(false)[ CD ]
Line_2 $$ public void run() -->Line_43 $$ if (gen != null || res != null) [ CD ]
Line_2 $$ public void run() -->Line_50 $$ String restart = ""[ CD ]
Line_2 $$ public void run() -->Line_51 $$ if (dic != null)[ CD ]
Line_51 $$ if (dic != null)-->Line_51 $$ restart += "\nAlgunas de ellas s�lo estar�n disponibles despu�s de reiniciar el diccionario."[ CD ]
Line_50 $$ String restart = ""-->Line_51 $$ restart += "\nAlgunas de ellas s�lo estar�n disponibles despu�s de reiniciar el diccionario."[ FD ]
Line_51 $$ restart += "\nAlgunas de ellas s�lo estar�n disponibles despu�s de reiniciar el diccionario."-->Line_51 $$ restart += "\nAlgunas de ellas s�lo estar�n disponibles despu�s de reiniciar el diccionario."[ FD ]
Line_2 $$ public void run() -->Line_52 $$ JOptionPane.showMessageDialog(frame, "Se han terminado de realizar las actualizaciones." + restart, "Actualizaciones", JOptionPane.INFORMATION_MESSAGE)[ CD ]
Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) -->Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) [ FD ]
Line_8 $$ for (Iterator iterator = updates.iterator(); iterator.hasNext(); ) -->Line_9 $$ Update update = (Update) iterator.next()[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")[ FD ]
Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")-->Line_12 $$ temp.deleteOnExit()[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_14 $$ URL url = new URL(update.getAction())[ FD ]
Line_14 $$ URL url = new URL(update.getAction())-->Line_15 $$ URLConnection conn = url.openConnection()[ FD ]
Line_15 $$ URLConnection conn = url.openConnection()-->Line_16 $$ com.diccionarioderimas.Utils.setupProxy(conn)[ FD ]
Line_15 $$ URLConnection conn = url.openConnection()-->Line_17 $$ InputStream in = conn.getInputStream()[ FD ]
Line_13 $$ FileOutputStream out = new FileOutputStream(temp)-->Line_29 $$ out.close()[ FD ]
Line_17 $$ InputStream in = conn.getInputStream()-->Line_30 $$ in.close()[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_32 $$ if (update.getType() == Update.GENERATOR)[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_32 $$ if (update.getType() == Update.RESBC)[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_32 $$ if (update.getType() == Update.HELP)[ FD ]
Line_9 $$ Update update = (Update) iterator.next()-->Line_33 $$ if (update.getType() == Update.RESBC) [ FD ]
Line_11 $$ File temp = File.createTempFile("fm_" + update.getType(), ".jar")-->Line_34 $$ Utils.unzip(temp, new File(fileTo))[ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_22 $$ out.write(buffer, 0, read)[ FD ]
Line_21 $$ while ((read = in.read(buffer)) != -1) -->Line_23 $$ total += read[ FD ]
Line_23 $$ total += read-->Line_24 $$ if (total > 10000) [ FD ]
Line_26 $$ total = 0-->Line_24 $$ if (total > 10000) [ FD ]
