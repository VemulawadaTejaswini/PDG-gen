Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException [ CD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_3 $$ if (LOGGER.isDebugEnabled()) [ CD ]
Line_3 $$ if (LOGGER.isDebugEnabled()) -->Line_3 $$ if (LOGGER.isDebugEnabled()) [ CD ]
Line_3 $$ if (LOGGER.isDebugEnabled()) -->Line_4 $$ LOGGER.debug("start executeUpdates")[ CD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_6 $$ PreparedStatement stmt = null[ CD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_7 $$ Connection conn = null[ CD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_8 $$ int rowsAffected = 0[ CD ]
Line_7 $$ Connection conn = null-->Line_10 $$ conn = ds.getConnection()[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_10 $$ conn = ds.getConnection()[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_10 $$ conn = ds.getConnection()[ CD ]
Line_7 $$ Connection conn = null-->Line_11 $$ conn.setAutoCommit(false)[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_11 $$ conn.setAutoCommit(false)[ FD ]
Line_7 $$ Connection conn = null-->Line_12 $$ conn.rollback()[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_12 $$ conn.rollback()[ FD ]
Line_7 $$ Connection conn = null-->Line_13 $$ conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED)[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_13 $$ conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED)[ FD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_14 $$ if (olVersionCheck != null) [ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())[ CD ]
Line_7 $$ Connection conn = null-->Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())[ FD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())[ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_16 $$ stmt.setObject(1, olVersionCheck.getId())[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_16 $$ stmt.setObject(1, olVersionCheck.getId())[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_16 $$ stmt.setObject(1, olVersionCheck.getId())[ FD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_16 $$ stmt.setObject(1, olVersionCheck.getId())[ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_17 $$ ResultSet rs = stmt.executeQuery()[ CD ]
Line_17 $$ ResultSet rs = stmt.executeQuery()-->Line_17 $$ ResultSet rs = stmt.executeQuery()[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_17 $$ ResultSet rs = stmt.executeQuery()[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_17 $$ ResultSet rs = stmt.executeQuery()[ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_18 $$ rs.next()[ CD ]
Line_17 $$ ResultSet rs = stmt.executeQuery()-->Line_18 $$ rs.next()[ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_19 $$ Number olVersion = (Number) rs.getObject("olVersion")[ CD ]
Line_17 $$ ResultSet rs = stmt.executeQuery()-->Line_19 $$ Number olVersion = (Number) rs.getObject("olVersion")[ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_20 $$ stmt.close()[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_20 $$ stmt.close()[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_20 $$ stmt.close()[ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_21 $$ stmt = null[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_21 $$ stmt = null[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_21 $$ stmt = null[ FD ]
Line_21 $$ stmt = null-->Line_21 $$ stmt = null[ FD ]
Line_14 $$ if (olVersionCheck != null) -->Line_22 $$ if (olVersion.intValue() != olVersionCheck.getOlVersionToCheck().intValue()) [ CD ]
Line_19 $$ Number olVersion = (Number) rs.getObject("olVersion")-->Line_22 $$ if (olVersion.intValue() != olVersionCheck.getOlVersionToCheck().intValue()) [ FD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_22 $$ if (olVersion.intValue() != olVersionCheck.getOlVersionToCheck().intValue()) [ FD ]
Line_22 $$ if (olVersion.intValue() != olVersionCheck.getOlVersionToCheck().intValue()) -->Line_23 $$ rowsAffected = -1[ CD ]
Line_8 $$ int rowsAffected = 0-->Line_23 $$ rowsAffected = -1[ FD ]
Line_23 $$ rowsAffected = -1-->Line_23 $$ rowsAffected = -1[ FD ]
Line_23 $$ rowsAffected = -1-->Line_23 $$ rowsAffected = -1[ CD ]
Line_8 $$ int rowsAffected = 0-->Line_26 $$ if (rowsAffected >= 0) [ FD ]
Line_23 $$ rowsAffected = -1-->Line_26 $$ if (rowsAffected >= 0) [ FD ]
Line_6 $$ PreparedStatement stmt = null-->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ FD ]
Line_21 $$ stmt = null-->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ CD ]
Line_7 $$ Connection conn = null-->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ FD ]
Line_27 $$ for (UpdateStatement query : statements) -->Line_28 $$ stmt = conn.prepareStatement(query.getQuery())[ FD ]
Line_27 $$ for (UpdateStatement query : statements) -->Line_29 $$ if (query.getParams() != null) [ FD ]
Line_29 $$ if (query.getParams() != null) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ CD ]
Line_29 $$ if (query.getParams() != null) -->Line_29 $$ if (query.getParams() != null) [ CD ]
Line_27 $$ for (UpdateStatement query : statements) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ FD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ CD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ CD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ FD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_31 $$ Object object = query.getParams()[parameterIndex - 1][ CD ]
Line_27 $$ for (UpdateStatement query : statements) -->Line_31 $$ Object object = query.getParams()[parameterIndex - 1][ FD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_32 $$ stmt.setObject(parameterIndex, object)[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
Line_21 $$ stmt = null-->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
Line_31 $$ Object object = query.getParams()[parameterIndex - 1]-->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
Line_35 $$ if (LOGGER.isDebugEnabled()) -->Line_35 $$ if (LOGGER.isDebugEnabled()) [ CD ]
Line_35 $$ if (LOGGER.isDebugEnabled()) -->Line_36 $$ LOGGER.debug(" **** Sending statement:\n" + query.getQuery())[ CD ]
Line_27 $$ for (UpdateStatement query : statements) -->Line_36 $$ LOGGER.debug(" **** Sending statement:\n" + query.getQuery())[ FD ]
Line_8 $$ int rowsAffected = 0-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ FD ]
Line_23 $$ rowsAffected = -1-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ FD ]
Line_38 $$ rowsAffected += stmt.executeUpdate()-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ FD ]
Line_38 $$ rowsAffected += stmt.executeUpdate()-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ FD ]
Line_21 $$ stmt = null-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_38 $$ rowsAffected += stmt.executeUpdate()[ FD ]
Line_6 $$ PreparedStatement stmt = null-->Line_39 $$ stmt.close()[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_39 $$ stmt.close()[ FD ]
Line_21 $$ stmt = null-->Line_39 $$ stmt.close()[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_39 $$ stmt.close()[ FD ]
Line_6 $$ PreparedStatement stmt = null-->Line_40 $$ stmt = null[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_40 $$ stmt = null[ FD ]
Line_21 $$ stmt = null-->Line_40 $$ stmt = null[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_40 $$ stmt = null[ FD ]
Line_40 $$ stmt = null-->Line_40 $$ stmt = null[ FD ]
Line_7 $$ Connection conn = null-->Line_43 $$ conn.commit()[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_43 $$ conn.commit()[ FD ]
Line_7 $$ Connection conn = null-->Line_44 $$ conn.close()[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_44 $$ conn.close()[ FD ]
Line_7 $$ Connection conn = null-->Line_45 $$ conn = null[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_45 $$ conn = null[ FD ]
Line_45 $$ conn = null-->Line_45 $$ conn = null[ FD ]
Line_47 $$ if ("23000".equals(e.getSQLState())) -->Line_47 $$ if ("23000".equals(e.getSQLState())) [ CD ]
Line_47 $$ if ("23000".equals(e.getSQLState())) -->Line_48 $$ LOGGER.info("Integrity constraint violation", e)[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_54 $$ if (stmt != null) [ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_54 $$ if (stmt != null) [ FD ]
Line_21 $$ stmt = null-->Line_54 $$ if (stmt != null) [ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_54 $$ if (stmt != null) [ FD ]
Line_40 $$ stmt = null-->Line_54 $$ if (stmt != null) [ FD ]
Line_54 $$ if (stmt != null) -->Line_55 $$ LOGGER.debug("closing open statement!")[ CD ]
Line_54 $$ if (stmt != null) -->Line_56 $$ stmt.close()[ CD ]
Line_6 $$ PreparedStatement stmt = null-->Line_56 $$ stmt.close()[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_56 $$ stmt.close()[ FD ]
Line_21 $$ stmt = null-->Line_56 $$ stmt.close()[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_56 $$ stmt.close()[ FD ]
Line_40 $$ stmt = null-->Line_56 $$ stmt.close()[ FD ]
Line_6 $$ PreparedStatement stmt = null-->Line_61 $$ stmt = null[ FD ]
Line_15 $$ stmt = conn.prepareStatement(olVersionCheck.getQuery())-->Line_61 $$ stmt = null[ FD ]
Line_21 $$ stmt = null-->Line_61 $$ stmt = null[ FD ]
Line_28 $$ stmt = conn.prepareStatement(query.getQuery())-->Line_61 $$ stmt = null[ FD ]
Line_40 $$ stmt = null-->Line_61 $$ stmt = null[ FD ]
Line_61 $$ stmt = null-->Line_61 $$ stmt = null[ FD ]
Line_7 $$ Connection conn = null-->Line_64 $$ if (conn != null) [ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_64 $$ if (conn != null) [ FD ]
Line_45 $$ conn = null-->Line_64 $$ if (conn != null) [ FD ]
Line_64 $$ if (conn != null) -->Line_65 $$ LOGGER.debug("rolling back open connection!")[ CD ]
Line_64 $$ if (conn != null) -->Line_66 $$ conn.rollback()[ CD ]
Line_7 $$ Connection conn = null-->Line_66 $$ conn.rollback()[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_66 $$ conn.rollback()[ FD ]
Line_45 $$ conn = null-->Line_66 $$ conn.rollback()[ FD ]
Line_64 $$ if (conn != null) -->Line_67 $$ conn.setAutoCommit(true)[ CD ]
Line_7 $$ Connection conn = null-->Line_67 $$ conn.setAutoCommit(true)[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_67 $$ conn.setAutoCommit(true)[ FD ]
Line_45 $$ conn = null-->Line_67 $$ conn.setAutoCommit(true)[ FD ]
Line_64 $$ if (conn != null) -->Line_68 $$ conn.close()[ CD ]
Line_7 $$ Connection conn = null-->Line_68 $$ conn.close()[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_68 $$ conn.close()[ FD ]
Line_45 $$ conn = null-->Line_68 $$ conn.close()[ FD ]
Line_7 $$ Connection conn = null-->Line_73 $$ conn = null[ FD ]
Line_10 $$ conn = ds.getConnection()-->Line_73 $$ conn = null[ FD ]
Line_45 $$ conn = null-->Line_73 $$ conn = null[ FD ]
Line_73 $$ conn = null-->Line_73 $$ conn = null[ FD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_76 $$ if (LOGGER.isDebugEnabled()) [ CD ]
Line_76 $$ if (LOGGER.isDebugEnabled()) -->Line_76 $$ if (LOGGER.isDebugEnabled()) [ CD ]
Line_76 $$ if (LOGGER.isDebugEnabled()) -->Line_77 $$ LOGGER.debug("finish executeUpdates")[ CD ]
Line_2 $$ protected int executeUpdates(List<UpdateStatement> statements, OlVersionCheck olVersionCheck) throws DaoException -->Line_79 $$ return rowsAffected[ CD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ FD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ FD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) [ FD ]
Line_30 $$ for (int parameterIndex = 1; parameterIndex <= query.getParams().length; parameterIndex++) -->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
Line_31 $$ Object object = query.getParams()[parameterIndex - 1]-->Line_32 $$ stmt.setObject(parameterIndex, object)[ FD ]
