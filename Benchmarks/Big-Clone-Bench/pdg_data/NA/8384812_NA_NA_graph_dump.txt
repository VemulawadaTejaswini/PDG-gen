Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testGetRequestWithRefresh() throws Exception [ CD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_3 $$ expect(request.getParameter(ProxyBase.REFRESH_PARAM)).andReturn("120").anyTimes()[ CD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_4 $$ Capture<HttpRequest> requestCapture = new Capture<HttpRequest>()[ CD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_5 $$ expect(pipeline.execute(capture(requestCapture))).andReturn(new HttpResponse(RESPONSE_BODY))[ CD ]
Line_4 $$ Capture<HttpRequest> requestCapture = new Capture<HttpRequest>()-->Line_5 $$ expect(pipeline.execute(capture(requestCapture))).andReturn(new HttpResponse(RESPONSE_BODY))[ FD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_6 $$ replay()[ CD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_7 $$ handler.fetch(request, recorder)[ CD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_8 $$ HttpRequest httpRequest = requestCapture.getValue()[ CD ]
Line_8 $$ HttpRequest httpRequest = requestCapture.getValue()-->Line_8 $$ HttpRequest httpRequest = requestCapture.getValue()[ CD ]
Line_4 $$ Capture<HttpRequest> requestCapture = new Capture<HttpRequest>()-->Line_8 $$ HttpRequest httpRequest = requestCapture.getValue()[ FD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_9 $$ assertEquals("public,max-age=120", recorder.getHeader("Cache-Control"))[ CD ]
Line_2 $$ public void testGetRequestWithRefresh() throws Exception -->Line_10 $$ assertEquals(120, httpRequest.getCacheTtl())[ CD ]
Line_8 $$ HttpRequest httpRequest = requestCapture.getValue()-->Line_10 $$ assertEquals(120, httpRequest.getCacheTtl())[ FD ]
