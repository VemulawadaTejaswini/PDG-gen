Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Set<Plugin<?>> loadPluginMetaData() throws PluginRegistryException [ CD ]
Line_4 $$ final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginMetaInfPath)-->Line_4 $$ final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginMetaInfPath)[ CD ]
Line_4 $$ final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginMetaInfPath)-->Line_6 $$ if (urls != null) [ FD ]
Line_6 $$ if (urls != null) -->Line_7 $$ while (urls.hasMoreElements()) [ CD ]
Line_6 $$ if (urls != null) -->Line_6 $$ if (urls != null) [ CD ]
Line_7 $$ while (urls.hasMoreElements()) -->Line_7 $$ while (urls.hasMoreElements()) [ CD ]
Line_4 $$ final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginMetaInfPath)-->Line_7 $$ while (urls.hasMoreElements()) [ FD ]
Line_7 $$ while (urls.hasMoreElements()) -->Line_8 $$ final URL url = urls.nextElement()[ CD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_8 $$ final URL url = urls.nextElement()[ CD ]
Line_4 $$ final Enumeration<URL> urls = JavaSystemHelper.getResources(pluginMetaInfPath)-->Line_8 $$ final URL url = urls.nextElement()[ FD ]
Line_7 $$ while (urls.hasMoreElements()) -->Line_9 $$ echoMessages.add(PluginMessageBundle.getMessage("plugin.info.visitor.resource.found", "interfaces", url.getPath()))[ CD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_9 $$ echoMessages.add(PluginMessageBundle.getMessage("plugin.info.visitor.resource.found", "interfaces", url.getPath()))[ FD ]
Line_7 $$ while (urls.hasMoreElements()) -->Line_10 $$ InputStream resourceInput = null[ CD ]
Line_7 $$ while (urls.hasMoreElements()) -->Line_11 $$ Reader reader = null[ CD ]
Line_7 $$ while (urls.hasMoreElements()) -->Line_12 $$ BufferedReader buffReader = null[ CD ]
Line_7 $$ while (urls.hasMoreElements()) -->Line_13 $$ String line[ CD ]
Line_10 $$ InputStream resourceInput = null-->Line_15 $$ resourceInput = url.openStream()[ FD ]
Line_15 $$ resourceInput = url.openStream()-->Line_15 $$ resourceInput = url.openStream()[ FD ]
Line_15 $$ resourceInput = url.openStream()-->Line_15 $$ resourceInput = url.openStream()[ CD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_15 $$ resourceInput = url.openStream()[ FD ]
Line_11 $$ Reader reader = null-->Line_16 $$ reader = new InputStreamReader(resourceInput)[ FD ]
Line_16 $$ reader = new InputStreamReader(resourceInput)-->Line_16 $$ reader = new InputStreamReader(resourceInput)[ FD ]
Line_12 $$ BufferedReader buffReader = null-->Line_17 $$ buffReader = new BufferedReader(reader)[ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_17 $$ buffReader = new BufferedReader(reader)[ FD ]
Line_13 $$ String line-->Line_18 $$ line = buffReader.readLine()[ FD ]
Line_18 $$ line = buffReader.readLine()-->Line_18 $$ line = buffReader.readLine()[ FD ]
Line_18 $$ line = buffReader.readLine()-->Line_18 $$ line = buffReader.readLine()[ CD ]
Line_12 $$ BufferedReader buffReader = null-->Line_18 $$ line = buffReader.readLine()[ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_18 $$ line = buffReader.readLine()[ FD ]
Line_13 $$ String line-->Line_19 $$ while (line != null) [ FD ]
Line_18 $$ line = buffReader.readLine()-->Line_19 $$ while (line != null) [ FD ]
Line_21 $$ if (!StringHelper.isEmpty(line)) -->Line_21 $$ if (!StringHelper.isEmpty(line)) [ CD ]
Line_21 $$ if (!StringHelper.isEmpty(line)) -->Line_21 $$ if (!StringHelper.isEmpty(line)) [ CD ]
Line_13 $$ String line-->Line_21 $$ if (!StringHelper.isEmpty(line)) [ FD ]
Line_18 $$ line = buffReader.readLine()-->Line_21 $$ if (!StringHelper.isEmpty(line)) [ FD ]
Line_21 $$ if (!StringHelper.isEmpty(line)) -->Line_22 $$ echoMessages.add(PluginMessageBundle.getMessage("plugin.info.visitor.resource.processing", "interface", line))[ CD ]
Line_13 $$ String line-->Line_22 $$ echoMessages.add(PluginMessageBundle.getMessage("plugin.info.visitor.resource.processing", "interface", line))[ FD ]
Line_18 $$ line = buffReader.readLine()-->Line_22 $$ echoMessages.add(PluginMessageBundle.getMessage("plugin.info.visitor.resource.processing", "interface", line))[ FD ]
Line_21 $$ if (!StringHelper.isEmpty(line)) -->Line_23 $$ pluginsSet.add(inspectPlugin(Class.forName(line.trim())))[ CD ]
Line_13 $$ String line-->Line_23 $$ pluginsSet.add(inspectPlugin(Class.forName(line.trim())))[ FD ]
Line_18 $$ line = buffReader.readLine()-->Line_23 $$ pluginsSet.add(inspectPlugin(Class.forName(line.trim())))[ FD ]
Line_25 $$ line = buffReader.readLine()-->Line_25 $$ line = buffReader.readLine()[ FD ]
Line_13 $$ String line-->Line_25 $$ line = buffReader.readLine()[ FD ]
Line_18 $$ line = buffReader.readLine()-->Line_25 $$ line = buffReader.readLine()[ FD ]
Line_25 $$ line = buffReader.readLine()-->Line_25 $$ line = buffReader.readLine()[ CD ]
Line_12 $$ BufferedReader buffReader = null-->Line_25 $$ line = buffReader.readLine()[ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_25 $$ line = buffReader.readLine()[ FD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_31 $$ throw new PluginRegistryException("plugin.error.load.ioe", ioe, url.getFile() + "\n" + url.toString(), ioe.getMessage())[ FD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_31 $$ throw new PluginRegistryException("plugin.error.load.ioe", ioe, url.getFile() + "\n" + url.toString(), ioe.getMessage())[ FD ]
Line_12 $$ BufferedReader buffReader = null-->Line_33 $$ if (buffReader != null) [ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_33 $$ if (buffReader != null) [ FD ]
Line_33 $$ if (buffReader != null) -->Line_34 $$ buffReader.close()[ CD ]
Line_12 $$ BufferedReader buffReader = null-->Line_34 $$ buffReader.close()[ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_34 $$ buffReader.close()[ FD ]
Line_11 $$ Reader reader = null-->Line_36 $$ if (reader != null) [ FD ]
Line_16 $$ reader = new InputStreamReader(resourceInput)-->Line_36 $$ if (reader != null) [ FD ]
Line_36 $$ if (reader != null) -->Line_37 $$ reader.close()[ CD ]
Line_11 $$ Reader reader = null-->Line_37 $$ reader.close()[ FD ]
Line_16 $$ reader = new InputStreamReader(resourceInput)-->Line_37 $$ reader.close()[ FD ]
Line_10 $$ InputStream resourceInput = null-->Line_39 $$ if (resourceInput != null) [ FD ]
Line_15 $$ resourceInput = url.openStream()-->Line_39 $$ if (resourceInput != null) [ FD ]
Line_39 $$ if (resourceInput != null) -->Line_40 $$ resourceInput.close()[ CD ]
Line_10 $$ InputStream resourceInput = null-->Line_40 $$ resourceInput.close()[ FD ]
Line_15 $$ resourceInput = url.openStream()-->Line_40 $$ resourceInput.close()[ FD ]
Line_45 $$ return Collections.unmodifiableSet(pluginsSet)-->Line_45 $$ return Collections.unmodifiableSet(pluginsSet)[ CD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_9 $$ echoMessages.add(PluginMessageBundle.getMessage("plugin.info.visitor.resource.found", "interfaces", url.getPath()))[ FD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_15 $$ resourceInput = url.openStream()[ FD ]
Line_12 $$ BufferedReader buffReader = null-->Line_18 $$ line = buffReader.readLine()[ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_18 $$ line = buffReader.readLine()[ FD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_31 $$ throw new PluginRegistryException("plugin.error.load.ioe", ioe, url.getFile() + "\n" + url.toString(), ioe.getMessage())[ FD ]
Line_8 $$ final URL url = urls.nextElement()-->Line_31 $$ throw new PluginRegistryException("plugin.error.load.ioe", ioe, url.getFile() + "\n" + url.toString(), ioe.getMessage())[ FD ]
Line_12 $$ BufferedReader buffReader = null-->Line_33 $$ if (buffReader != null) [ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_33 $$ if (buffReader != null) [ FD ]
Line_12 $$ BufferedReader buffReader = null-->Line_34 $$ buffReader.close()[ FD ]
Line_17 $$ buffReader = new BufferedReader(reader)-->Line_34 $$ buffReader.close()[ FD ]
Line_11 $$ Reader reader = null-->Line_36 $$ if (reader != null) [ FD ]
Line_16 $$ reader = new InputStreamReader(resourceInput)-->Line_36 $$ if (reader != null) [ FD ]
Line_11 $$ Reader reader = null-->Line_37 $$ reader.close()[ FD ]
Line_16 $$ reader = new InputStreamReader(resourceInput)-->Line_37 $$ reader.close()[ FD ]
Line_10 $$ InputStream resourceInput = null-->Line_39 $$ if (resourceInput != null) [ FD ]
Line_15 $$ resourceInput = url.openStream()-->Line_39 $$ if (resourceInput != null) [ FD ]
Line_10 $$ InputStream resourceInput = null-->Line_40 $$ resourceInput.close()[ FD ]
Line_15 $$ resourceInput = url.openStream()-->Line_40 $$ resourceInput.close()[ FD ]
Line_25 $$ line = buffReader.readLine()-->Line_19 $$ while (line != null) [ FD ]
Line_25 $$ line = buffReader.readLine()-->Line_19 $$ while (line != null) [ FD ]
Line_25 $$ line = buffReader.readLine()-->Line_21 $$ if (!StringHelper.isEmpty(line)) [ FD ]
Line_25 $$ line = buffReader.readLine()-->Line_22 $$ echoMessages.add(PluginMessageBundle.getMessage("plugin.info.visitor.resource.processing", "interface", line))[ FD ]
Line_25 $$ line = buffReader.readLine()-->Line_23 $$ pluginsSet.add(inspectPlugin(Class.forName(line.trim())))[ FD ]
