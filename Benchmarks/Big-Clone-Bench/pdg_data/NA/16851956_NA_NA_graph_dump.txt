Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testCascadeTraining() throws IOException [ CD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")[ CD ]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")-->Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")[ CD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_4 $$ temp.deleteOnExit()[ CD ]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")-->Line_4 $$ temp.deleteOnExit()[ FD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_5 $$ IOUtils.copy(this.getClass().getResourceAsStream("parity8.train"), new FileOutputStream(temp))[ CD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_6 $$ Fann fann = new FannShortcut(8, 1)[ CD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_7 $$ Trainer trainer = new Trainer(fann)[ CD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_8 $$ float desiredError = .00f[ CD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_9 $$ float mse = trainer.cascadeTrain(temp.getPath(), 30, 1, desiredError)[ CD ]
Line_9 $$ float mse = trainer.cascadeTrain(temp.getPath(), 30, 1, desiredError)-->Line_9 $$ float mse = trainer.cascadeTrain(temp.getPath(), 30, 1, desiredError)[ CD ]
Line_7 $$ Trainer trainer = new Trainer(fann)-->Line_9 $$ float mse = trainer.cascadeTrain(temp.getPath(), 30, 1, desiredError)[ FD ]
Line_8 $$ float desiredError = .00f-->Line_9 $$ float mse = trainer.cascadeTrain(temp.getPath(), 30, 1, desiredError)[ FD ]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")-->Line_9 $$ float mse = trainer.cascadeTrain(temp.getPath(), 30, 1, desiredError)[ FD ]
Line_2 $$ public void testCascadeTraining() throws IOException -->Line_10 $$ assertTrue("" + mse, mse <= desiredError)[ CD ]
