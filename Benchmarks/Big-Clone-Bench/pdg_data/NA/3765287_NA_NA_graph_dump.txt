Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void initializeSecretKey() [ CD ]
Line_2 $$ private void initializeSecretKey() -->Line_3 $$ String baseKey = "" + SystemClock.currentThreadTimeMillis() + new Random().nextInt()[ CD ]
Line_2 $$ private void initializeSecretKey() -->Line_4 $$ MessageDigest digest[ CD ]
Line_2 $$ private void initializeSecretKey() -->Line_5 $$ String secretKey[ CD ]
Line_4 $$ MessageDigest digest-->Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")[ FD ]
Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")-->Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")[ FD ]
Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")-->Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")[ CD ]
Line_4 $$ MessageDigest digest-->Line_8 $$ digest.reset()[ FD ]
Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")-->Line_8 $$ digest.reset()[ FD ]
Line_4 $$ MessageDigest digest-->Line_9 $$ digest.update(baseKey.getBytes())[ FD ]
Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")-->Line_9 $$ digest.update(baseKey.getBytes())[ FD ]
Line_3 $$ String baseKey = "" + SystemClock.currentThreadTimeMillis() + new Random().nextInt()-->Line_9 $$ digest.update(baseKey.getBytes())[ FD ]
Line_10 $$ byte messageDigest[] = digest.digest()-->Line_10 $$ byte messageDigest[] = digest.digest()[ CD ]
Line_4 $$ MessageDigest digest-->Line_10 $$ byte messageDigest[] = digest.digest()[ FD ]
Line_7 $$ digest = java.security.MessageDigest.getInstance("MD5")-->Line_10 $$ byte messageDigest[] = digest.digest()[ FD ]
Line_11 $$ int len = messageDigest.length-->Line_13 $$ for (int i = 0; i < len; i++) [ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_13 $$ for (int i = 0; i < len; i++) [ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_13 $$ for (int i = 0; i < len; i++) [ CD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_13 $$ for (int i = 0; i < len; i++) [ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_14 $$ sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16))[ CD ]
Line_12 $$ StringBuilder sb = new StringBuilder(len << 1)-->Line_14 $$ sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16))[ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_15 $$ sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16))[ CD ]
Line_12 $$ StringBuilder sb = new StringBuilder(len << 1)-->Line_15 $$ sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16))[ FD ]
Line_5 $$ String secretKey-->Line_17 $$ secretKey = sb.substring(0, 32)[ FD ]
Line_17 $$ secretKey = sb.substring(0, 32)-->Line_17 $$ secretKey = sb.substring(0, 32)[ FD ]
Line_17 $$ secretKey = sb.substring(0, 32)-->Line_17 $$ secretKey = sb.substring(0, 32)[ CD ]
Line_12 $$ StringBuilder sb = new StringBuilder(len << 1)-->Line_17 $$ secretKey = sb.substring(0, 32)[ FD ]
Line_2 $$ private void initializeSecretKey() -->Line_21 $$ this.setSecretKey(secretKey)[ CD ]
Line_5 $$ String secretKey-->Line_21 $$ this.setSecretKey(secretKey)[ FD ]
Line_17 $$ secretKey = sb.substring(0, 32)-->Line_21 $$ this.setSecretKey(secretKey)[ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_13 $$ for (int i = 0; i < len; i++) [ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_13 $$ for (int i = 0; i < len; i++) [ FD ]
Line_13 $$ for (int i = 0; i < len; i++) -->Line_13 $$ for (int i = 0; i < len; i++) [ FD ]
