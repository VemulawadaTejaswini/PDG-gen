Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static JuneClass loadClass(Map<String, Entity> globals, String packageName, String baseClassName) [ CD ]
Line_2 $$ public static JuneClass loadClass(Map<String, Entity> globals, String packageName, String baseClassName) -->Line_5 $$ String resourceName = (packageName.length() > 0 ? packageName.replace('.', '/') + "/" : "") + baseClassName.replace('.', '$') + ".class"[ FD ]
Line_2 $$ public static JuneClass loadClass(Map<String, Entity> globals, String packageName, String baseClassName) -->Line_5 $$ String resourceName = (packageName.length() > 0 ? packageName.replace('.', '/') + "/" : "") + baseClassName.replace('.', '$') + ".class"[ FD ]
Line_2 $$ public static JuneClass loadClass(Map<String, Entity> globals, String packageName, String baseClassName) -->Line_5 $$ String resourceName = (packageName.length() > 0 ? packageName.replace('.', '/') + "/" : "") + baseClassName.replace('.', '$') + ".class"[ FD ]
Line_6 $$ URL url = Resolver.class.getClassLoader().getResource(resourceName)-->Line_6 $$ URL url = Resolver.class.getClassLoader().getResource(resourceName)[ CD ]
Line_5 $$ String resourceName = (packageName.length() > 0 ? packageName.replace('.', '/') + "/" : "") + baseClassName.replace('.', '$') + ".class"-->Line_6 $$ URL url = Resolver.class.getClassLoader().getResource(resourceName)[ FD ]
Line_6 $$ URL url = Resolver.class.getClassLoader().getResource(resourceName)-->Line_7 $$ if (url != null) [ FD ]
Line_7 $$ if (url != null) -->Line_8 $$ ClassBuilder builder = new ClassBuilder(globals)[ CD ]
Line_7 $$ if (url != null) -->Line_9 $$ InputStream stream = url.openStream()[ CD ]
Line_9 $$ InputStream stream = url.openStream()-->Line_9 $$ InputStream stream = url.openStream()[ CD ]
Line_6 $$ URL url = Resolver.class.getClassLoader().getResource(resourceName)-->Line_9 $$ InputStream stream = url.openStream()[ FD ]
Line_8 $$ ClassBuilder builder = new ClassBuilder(globals)-->Line_11 $$ new ClassReader(new BufferedInputStream(stream)).accept(builder, ClassReader.SKIP_CODE)[ FD ]
Line_9 $$ InputStream stream = url.openStream()-->Line_13 $$ stream.close()[ FD ]
Line_7 $$ if (url != null) -->Line_15 $$ $class = builder.$class[ CD ]
Line_4 $$ JuneClass $class = null-->Line_15 $$ $class = builder.$class[ FD ]
Line_15 $$ $class = builder.$class-->Line_15 $$ $class = builder.$class[ FD ]
Line_7 $$ if (url != null) -->Line_16 $$ $class.loaded = true[ CD ]
