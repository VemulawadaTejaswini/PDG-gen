Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void copyFile(File src, File dest, boolean notifyUserOnError) [ CD ]
Line_2 $$ public static void copyFile(File src, File dest, boolean notifyUserOnError) -->Line_3 $$ if (src.exists()) [ CD ]
Line_2 $$ public static void copyFile(File src, File dest, boolean notifyUserOnError) -->Line_3 $$ if (src.exists()) [ FD ]
Line_3 $$ if (src.exists()) -->Line_3 $$ if (src.exists()) [ CD ]
Line_2 $$ public static void copyFile(File src, File dest, boolean notifyUserOnError) -->Line_3 $$ if (src.exists()) [ FD ]
Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)-->Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)[ FD ]
Line_8 $$ int len = 128-->Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)[ FD ]
Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)-->Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)[ CD ]
Line_6 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(src))-->Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)[ FD ]
Line_7 $$ byte[] read = new byte[128]-->Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)[ FD ]
Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)-->Line_9 $$ out.write(read, 0, len)[ CD ]
Line_5 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest))-->Line_9 $$ out.write(read, 0, len)[ FD ]
Line_7 $$ byte[] read = new byte[128]-->Line_9 $$ out.write(read, 0, len)[ FD ]
Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)-->Line_9 $$ out.write(read, 0, len)[ FD ]
Line_8 $$ int len = 128-->Line_9 $$ out.write(read, 0, len)[ FD ]
Line_5 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest))-->Line_10 $$ out.flush()[ FD ]
Line_5 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest))-->Line_11 $$ out.close()[ FD ]
Line_6 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(src))-->Line_12 $$ in.close()[ FD ]
Line_2 $$ public static void copyFile(File src, File dest, boolean notifyUserOnError) -->Line_14 $$ String message = "Error while copying " + src.getAbsolutePath() + " to " + dest.getAbsolutePath() + " : " + e.getMessage()[ FD ]
Line_2 $$ public static void copyFile(File src, File dest, boolean notifyUserOnError) -->Line_14 $$ String message = "Error while copying " + src.getAbsolutePath() + " to " + dest.getAbsolutePath() + " : " + e.getMessage()[ FD ]
Line_15 $$ if (notifyUserOnError) -->Line_16 $$ Log.getInstance(SystemUtils.class).warnWithUserNotification(message)[ CD ]
Line_14 $$ String message = "Error while copying " + src.getAbsolutePath() + " to " + dest.getAbsolutePath() + " : " + e.getMessage()-->Line_16 $$ Log.getInstance(SystemUtils.class).warnWithUserNotification(message)[ FD ]
Line_15 $$ if (notifyUserOnError) -->Line_18 $$ Log.getInstance(SystemUtils.class).warn(message)[ CD ]
Line_14 $$ String message = "Error while copying " + src.getAbsolutePath() + " to " + dest.getAbsolutePath() + " : " + e.getMessage()-->Line_18 $$ Log.getInstance(SystemUtils.class).warn(message)[ FD ]
Line_2 $$ public static void copyFile(File src, File dest, boolean notifyUserOnError) -->Line_22 $$ String message = "Unable to copy file: source does not exists: " + src.getAbsolutePath()[ FD ]
Line_3 $$ if (src.exists()) -->Line_23 $$ if (notifyUserOnError) [ CD ]
Line_23 $$ if (notifyUserOnError) -->Line_24 $$ Log.getInstance(SystemUtils.class).warnWithUserNotification(message)[ CD ]
Line_14 $$ String message = "Error while copying " + src.getAbsolutePath() + " to " + dest.getAbsolutePath() + " : " + e.getMessage()-->Line_24 $$ Log.getInstance(SystemUtils.class).warnWithUserNotification(message)[ FD ]
Line_23 $$ if (notifyUserOnError) -->Line_26 $$ Log.getInstance(SystemUtils.class).warn(message)[ CD ]
Line_14 $$ String message = "Error while copying " + src.getAbsolutePath() + " to " + dest.getAbsolutePath() + " : " + e.getMessage()-->Line_26 $$ Log.getInstance(SystemUtils.class).warn(message)[ FD ]
Line_9 $$ while ((len = in.read(read)) > 0) out.write(read, 0, len)-->Line_9 $$ out.write(read, 0, len)[ FD ]
