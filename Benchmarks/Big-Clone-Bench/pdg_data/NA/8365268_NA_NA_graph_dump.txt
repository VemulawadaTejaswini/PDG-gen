Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String[] readStats() throws Exception [ CD ]
Line_2 $$ public static String[] readStats() throws Exception -->Line_3 $$ URL url = null[ CD ]
Line_2 $$ public static String[] readStats() throws Exception -->Line_4 $$ BufferedReader reader = null[ CD ]
Line_2 $$ public static String[] readStats() throws Exception -->Line_5 $$ StringBuilder stringBuilder[ CD ]
Line_3 $$ URL url = null-->Line_7 $$ url = new URL("http://localhost:" + port + webctx + "/shared/js/libOO/health_check.sjs")[ FD ]
Line_7 $$ url = new URL("http://localhost:" + port + webctx + "/shared/js/libOO/health_check.sjs")-->Line_7 $$ url = new URL("http://localhost:" + port + webctx + "/shared/js/libOO/health_check.sjs")[ FD ]
Line_3 $$ URL url = null-->Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_7 $$ url = new URL("http://localhost:" + port + webctx + "/shared/js/libOO/health_check.sjs")-->Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_9 $$ connection.setRequestMethod("GET")[ FD ]
Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ connection.setReadTimeout(10 * 1000)[ FD ]
Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_11 $$ connection.connect()[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_12 $$ reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_12 $$ reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_12 $$ reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_12 $$ reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_5 $$ StringBuilder stringBuilder-->Line_13 $$ stringBuilder = new StringBuilder()[ FD ]
Line_13 $$ stringBuilder = new StringBuilder()-->Line_13 $$ stringBuilder = new StringBuilder()[ FD ]
Line_15 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_14 $$ String line = null-->Line_15 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_15 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_4 $$ BufferedReader reader = null-->Line_15 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_12 $$ reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_15 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_15 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ stringBuilder.append(line)[ CD ]
Line_5 $$ StringBuilder stringBuilder-->Line_16 $$ stringBuilder.append(line)[ FD ]
Line_13 $$ stringBuilder = new StringBuilder()-->Line_16 $$ stringBuilder.append(line)[ FD ]
Line_15 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ stringBuilder.append(line)[ FD ]
Line_14 $$ String line = null-->Line_16 $$ stringBuilder.append(line)[ FD ]
Line_18 $$ return stringBuilder.toString().split(",")-->Line_18 $$ return stringBuilder.toString().split(",")[ CD ]
Line_5 $$ StringBuilder stringBuilder-->Line_18 $$ return stringBuilder.toString().split(",")[ FD ]
Line_13 $$ stringBuilder = new StringBuilder()-->Line_18 $$ return stringBuilder.toString().split(",")[ FD ]
Line_4 $$ BufferedReader reader = null-->Line_23 $$ if (reader != null) [ FD ]
Line_12 $$ reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_23 $$ if (reader != null) [ FD ]
Line_4 $$ BufferedReader reader = null-->Line_25 $$ reader.close()[ FD ]
Line_12 $$ reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_25 $$ reader.close()[ FD ]
Line_15 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ stringBuilder.append(line)[ FD ]
