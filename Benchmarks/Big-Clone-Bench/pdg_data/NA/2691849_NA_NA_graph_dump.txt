Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException [ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_3 $$ if (zip == null || entries == null || CollectionUtils.isEmpty(entries.keySet()))[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_3 $$ if (zip == null || entries == null || CollectionUtils.isEmpty(entries.keySet()))[ FD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_4 $$ if (zip.exists())[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_4 $$ if (zip.exists())[ FD ]
Line_4 $$ if (zip.exists())-->Line_4 $$ if (zip.exists())[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_4 $$ if (zip.exists())[ FD ]
Line_4 $$ if (zip.exists())-->Line_4 $$ zip.delete()[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_4 $$ zip.delete()[ FD ]
Line_4 $$ if (zip.exists())-->Line_4 $$ if (!zip.getParentFile().exists())[ CD ]
Line_4 $$ if (!zip.getParentFile().exists())-->Line_4 $$ if (!zip.getParentFile().exists())[ CD ]
Line_4 $$ if (!zip.getParentFile().exists())-->Line_4 $$ if (!zip.getParentFile().exists())[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_4 $$ if (!zip.getParentFile().exists())[ FD ]
Line_4 $$ if (!zip.getParentFile().exists())-->Line_4 $$ zip.getParentFile().mkdirs()[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_4 $$ zip.getParentFile().mkdirs()[ FD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)))[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_6 $$ out.setLevel(Deflater.BEST_COMPRESSION)[ CD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)))-->Line_6 $$ out.setLevel(Deflater.BEST_COMPRESSION)[ FD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_8 $$ for (InputStream inputStream : entries.keySet()) [ FD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_9 $$ ZipEntry zipEntry = new ZipEntry(skipBeginningSlash(entries.get(inputStream)))[ FD ]
Line_8 $$ for (InputStream inputStream : entries.keySet()) -->Line_9 $$ ZipEntry zipEntry = new ZipEntry(skipBeginningSlash(entries.get(inputStream)))[ FD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)))-->Line_10 $$ out.putNextEntry(zipEntry)[ FD ]
Line_9 $$ ZipEntry zipEntry = new ZipEntry(skipBeginningSlash(entries.get(inputStream)))-->Line_10 $$ out.putNextEntry(zipEntry)[ FD ]
Line_8 $$ for (InputStream inputStream : entries.keySet()) -->Line_11 $$ IOUtils.copy(inputStream, out)[ FD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)))-->Line_11 $$ IOUtils.copy(inputStream, out)[ FD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)))-->Line_12 $$ out.closeEntry()[ FD ]
Line_8 $$ for (InputStream inputStream : entries.keySet()) -->Line_13 $$ inputStream.close()[ FD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_14 $$ if (monitor != null)[ FD ]
Line_14 $$ if (monitor != null)-->Line_14 $$ monitor.worked(1)[ CD ]
Line_2 $$ public static void compress(final File zip, final Map<InputStream, String> entries, final IProgressMonitor monitor) throws IOException -->Line_14 $$ monitor.worked(1)[ FD ]
Line_5 $$ ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zip)))-->Line_17 $$ IOUtils.closeQuietly(out)[ FD ]
