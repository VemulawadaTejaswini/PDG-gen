Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException [ CD ]
Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException -->Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() [ CD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() [ CD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_5 $$ List correctUsers = (List) JsonPath.query("select * from ? where name=?", usersTable(), username)[ CD ]
Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException -->Line_5 $$ List correctUsers = (List) JsonPath.query("select * from ? where name=?", usersTable(), username)[ FD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_6 $$ if (correctUsers.size() == 0) [ CD ]
Line_5 $$ List correctUsers = (List) JsonPath.query("select * from ? where name=?", usersTable(), username)-->Line_6 $$ if (correctUsers.size() == 0) [ FD ]
Line_6 $$ if (correctUsers.size() == 0) -->Line_7 $$ return new LoginException("user " + username + " not found")[ CD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_9 $$ Persistable userObject = (Persistable) correctUsers.get(0)[ CD ]
Line_5 $$ List correctUsers = (List) JsonPath.query("select * from ? where name=?", usersTable(), username)-->Line_9 $$ Persistable userObject = (Persistable) correctUsers.get(0)[ FD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_10 $$ boolean alreadyHashed = false[ CD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))[ CD ]
Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))-->Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))[ CD ]
Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException -->Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))[ FD ]
Line_9 $$ Persistable userObject = (Persistable) correctUsers.get(0)-->Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))[ FD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_12 $$ if (!passwordMatch) [ CD ]
Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))-->Line_12 $$ if (!passwordMatch) [ FD ]
Line_12 $$ if (!passwordMatch) -->Line_12 $$ if (!passwordMatch) [ CD ]
Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))-->Line_12 $$ if (!passwordMatch) [ FD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance("SHA")-->Line_14 $$ MessageDigest md = MessageDigest.getInstance("SHA")[ CD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance("SHA")-->Line_15 $$ md.update(((String) userObject.get(PASSWORD_FIELD)).getBytes())[ FD ]
Line_9 $$ Persistable userObject = (Persistable) correctUsers.get(0)-->Line_15 $$ md.update(((String) userObject.get(PASSWORD_FIELD)).getBytes())[ FD ]
Line_11 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD))-->Line_16 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest())))[ FD ]
Line_16 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest())))-->Line_16 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest())))[ FD ]
Line_16 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest())))-->Line_16 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest())))[ CD ]
Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException -->Line_16 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest())))[ FD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance("SHA")-->Line_16 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest())))[ FD ]
Line_12 $$ if (!passwordMatch) -->Line_20 $$ alreadyHashed = true[ CD ]
Line_10 $$ boolean alreadyHashed = false-->Line_20 $$ alreadyHashed = true[ FD ]
Line_20 $$ alreadyHashed = true-->Line_20 $$ alreadyHashed = true[ FD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_22 $$ if (passwordMatch) [ CD ]
Line_22 $$ if (passwordMatch) -->Line_23 $$ Logger.getLogger(User.class.toString()).info("User " + username + " has been authenticated")[ CD ]
Line_22 $$ if (passwordMatch) -->Line_24 $$ User user = (User) userObject[ CD ]
Line_26 $$ if (alreadyHashed)-->Line_27 $$ MessageDigest md = MessageDigest.getInstance("SHA")[ CD ]
Line_26 $$ if (alreadyHashed)-->Line_28 $$ md.update(password.getBytes())[ CD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance("SHA")-->Line_28 $$ md.update(password.getBytes())[ FD ]
Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException -->Line_28 $$ md.update(password.getBytes())[ FD ]
Line_26 $$ if (alreadyHashed)-->Line_29 $$ user.currentTicket = new String(new Base64().encode(md.digest()))[ CD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance("SHA")-->Line_29 $$ user.currentTicket = new String(new Base64().encode(md.digest()))[ FD ]
Line_22 $$ if (passwordMatch) -->Line_34 $$ return user[ CD ]
Line_22 $$ if (passwordMatch) -->Line_36 $$ Logger.getLogger(User.class.toString()).info("The password was incorrect for " + username)[ CD ]
Line_22 $$ if (passwordMatch) -->Line_37 $$ return new LoginException("The password was incorrect for user " + username + ". ")[ CD ]
Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException -->Line_41 $$ if (result instanceof LoginException)[ CD ]
Line_3 $$ Object result = doPriviledgedAction(new PrivilegedAction() -->Line_41 $$ if (result instanceof LoginException)[ FD ]
Line_2 $$ public static User authenticate(final String username, final String password) throws LoginException -->Line_42 $$ return (User) result[ CD ]
