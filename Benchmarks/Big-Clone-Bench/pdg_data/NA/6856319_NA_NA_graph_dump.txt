Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception [ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_3 $$ HttpParams mgrpar = defaultParams.copy()[ CD ]
Line_3 $$ HttpParams mgrpar = defaultParams.copy()-->Line_3 $$ HttpParams mgrpar = defaultParams.copy()[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_4 $$ ConnManagerParams.setMaxTotalConnections(mgrpar, 1)[ CD ]
Line_3 $$ HttpParams mgrpar = defaultParams.copy()-->Line_4 $$ ConnManagerParams.setMaxTotalConnections(mgrpar, 1)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)[ CD ]
Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)-->Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)[ CD ]
Line_3 $$ HttpParams mgrpar = defaultParams.copy()-->Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_6 $$ final HttpHost target = getServerHttp()[ CD ]
Line_6 $$ final HttpHost target = getServerHttp()-->Line_6 $$ final HttpHost target = getServerHttp()[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_7 $$ final HttpRoute route = new HttpRoute(target, null, false)[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_8 $$ final int rsplen = 8[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_9 $$ final String uri = "/random/" + rsplen[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_10 $$ HttpRequest request = new BasicHttpRequest("GET", uri, HttpVersion.HTTP_1_1)[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)[ CD ]
Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)-->Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)[ CD ]
Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)-->Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)[ FD ]
Line_7 $$ final HttpRoute route = new HttpRoute(target, null, false)-->Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_12 $$ conn.open(route, httpContext, defaultParams)[ CD ]
Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)-->Line_12 $$ conn.open(route, httpContext, defaultParams)[ FD ]
Line_7 $$ final HttpRoute route = new HttpRoute(target, null, false)-->Line_12 $$ conn.open(route, httpContext, defaultParams)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_13 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext)[ CD ]
Line_13 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext)-->Line_13 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext)[ CD ]
Line_10 $$ HttpRequest request = new BasicHttpRequest("GET", uri, HttpVersion.HTTP_1_1)-->Line_13 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext)[ FD ]
Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)-->Line_13 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext)[ FD ]
Line_6 $$ final HttpHost target = getServerHttp()-->Line_13 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_14 $$ assertEquals("wrong status in first response", HttpStatus.SC_OK, response.getStatusLine().getStatusCode())[ CD ]
Line_13 $$ HttpResponse response = Helper.execute(request, conn, target, httpExecutor, httpProcessor, defaultParams, httpContext)-->Line_14 $$ assertEquals("wrong status in first response", HttpStatus.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)-->Line_16 $$ getConnection(mgr, route, 100L, TimeUnit.MILLISECONDS)[ FD ]
Line_7 $$ final HttpRoute route = new HttpRoute(target, null, false)-->Line_16 $$ getConnection(mgr, route, 100L, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_20 $$ assertTrue(conn instanceof AbstractClientConnAdapter)[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_21 $$ ((AbstractClientConnAdapter) conn).abortConnection()[ CD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)[ CD ]
Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)-->Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)[ FD ]
Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)-->Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)[ FD ]
Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)-->Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)[ CD ]
Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)-->Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)[ FD ]
Line_7 $$ final HttpRoute route = new HttpRoute(target, null, false)-->Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_23 $$ assertFalse("connection should have been closed", conn.isOpen())[ CD ]
Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)-->Line_23 $$ assertFalse("connection should have been closed", conn.isOpen())[ FD ]
Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)-->Line_23 $$ assertFalse("connection should have been closed", conn.isOpen())[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_24 $$ mgr.releaseConnection(conn, -1, null)[ CD ]
Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)-->Line_24 $$ mgr.releaseConnection(conn, -1, null)[ FD ]
Line_11 $$ ManagedClientConnection conn = getConnection(mgr, route)-->Line_24 $$ mgr.releaseConnection(conn, -1, null)[ FD ]
Line_22 $$ conn = getConnection(mgr, route, 5L, TimeUnit.SECONDS)-->Line_24 $$ mgr.releaseConnection(conn, -1, null)[ FD ]
Line_2 $$ public void testReleaseConnectionOnAbort() throws Exception -->Line_25 $$ mgr.shutdown()[ CD ]
Line_5 $$ ThreadSafeClientConnManager mgr = createTSCCM(mgrpar, null)-->Line_25 $$ mgr.shutdown()[ FD ]
