Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private boolean keysMatch(String keyNMinusOne, String keyN) [ CD ]
Line_2 $$ private boolean keysMatch(String keyNMinusOne, String keyN) -->Line_3 $$ boolean match = false[ CD ]
Line_5 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1")-->Line_5 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1")[ CD ]
Line_5 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1")-->Line_6 $$ digest.reset()[ FD ]
Line_5 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1")-->Line_7 $$ digest.update(keyNMinusOne.getBytes())[ FD ]
Line_2 $$ private boolean keysMatch(String keyNMinusOne, String keyN) -->Line_7 $$ digest.update(keyNMinusOne.getBytes())[ FD ]
Line_8 $$ byte[] hashedBytes = digest.digest()-->Line_8 $$ byte[] hashedBytes = digest.digest()[ CD ]
Line_5 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1")-->Line_8 $$ byte[] hashedBytes = digest.digest()[ FD ]
Line_8 $$ byte[] hashedBytes = digest.digest()-->Line_9 $$ String encodedHashedKey = new String(com.Ostermiller.util.Base64.encode(hashedBytes))[ FD ]
Line_3 $$ boolean match = false-->Line_10 $$ match = encodedHashedKey.equals(keyN)[ FD ]
Line_10 $$ match = encodedHashedKey.equals(keyN)-->Line_10 $$ match = encodedHashedKey.equals(keyN)[ FD ]
Line_10 $$ match = encodedHashedKey.equals(keyN)-->Line_10 $$ match = encodedHashedKey.equals(keyN)[ CD ]
Line_9 $$ String encodedHashedKey = new String(com.Ostermiller.util.Base64.encode(hashedBytes))-->Line_10 $$ match = encodedHashedKey.equals(keyN)[ FD ]
Line_2 $$ private boolean keysMatch(String keyNMinusOne, String keyN) -->Line_10 $$ match = encodedHashedKey.equals(keyN)[ FD ]
Line_2 $$ private boolean keysMatch(String keyNMinusOne, String keyN) -->Line_13 $$ return match[ CD ]
