Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void parseString(String str, String name) [ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_3 $$ BufferedReader reader[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_4 $$ String zeile = null[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_5 $$ boolean firstL = true[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_6 $$ int lambda[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_7 $$ float intens[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_8 $$ int l_b = 0[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_9 $$ int l_e = 0[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_10 $$ HashMap<Integer, Float> curve = new HashMap<Integer, Float>()[ CD ]
Line_2 $$ public static void parseString(String str, String name) -->Line_11 $$ String[] temp[ CD ]
Line_13 $$ File f = File.createTempFile("tempFile", null)-->Line_13 $$ File f = File.createTempFile("tempFile", null)[ CD ]
Line_15 $$ InputStream is = url.openStream()-->Line_15 $$ InputStream is = url.openStream()[ CD ]
Line_14 $$ URL url = new URL(str)-->Line_15 $$ InputStream is = url.openStream()[ FD ]
Line_15 $$ InputStream is = url.openStream()-->Line_18 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len)[ FD ]
Line_17 $$ byte[] buffer = new byte[0xFFFF]-->Line_18 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len)[ FD ]
Line_18 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len)-->Line_18 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len)[ CD ]
Line_18 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len)-->Line_18 $$ os.write(buffer, 0, len)[ CD ]
Line_16 $$ FileOutputStream os = new FileOutputStream(f)-->Line_18 $$ os.write(buffer, 0, len)[ FD ]
Line_17 $$ byte[] buffer = new byte[0xFFFF]-->Line_18 $$ os.write(buffer, 0, len)[ FD ]
Line_18 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len)-->Line_18 $$ os.write(buffer, 0, len)[ FD ]
Line_15 $$ InputStream is = url.openStream()-->Line_19 $$ is.close()[ FD ]
Line_16 $$ FileOutputStream os = new FileOutputStream(f)-->Line_20 $$ os.close()[ FD ]
Line_3 $$ BufferedReader reader-->Line_21 $$ reader = new BufferedReader(new FileReader(f))[ FD ]
Line_21 $$ reader = new BufferedReader(new FileReader(f))-->Line_21 $$ reader = new BufferedReader(new FileReader(f))[ FD ]
Line_4 $$ String zeile = null-->Line_22 $$ zeile = reader.readLine()[ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_22 $$ zeile = reader.readLine()[ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_22 $$ zeile = reader.readLine()[ CD ]
Line_3 $$ BufferedReader reader-->Line_22 $$ zeile = reader.readLine()[ FD ]
Line_21 $$ reader = new BufferedReader(new FileReader(f))-->Line_22 $$ zeile = reader.readLine()[ FD ]
Line_6 $$ int lambda-->Line_23 $$ lambda = 0[ FD ]
Line_23 $$ lambda = 0-->Line_23 $$ lambda = 0[ FD ]
Line_4 $$ String zeile = null-->Line_24 $$ while (zeile != null) [ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_24 $$ while (zeile != null) [ FD ]
Line_24 $$ while (zeile != null) -->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ CD ]
Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) -->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ CD ]
Line_4 $$ String zeile = null-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_4 $$ String zeile = null-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) -->Line_26 $$ zeile = reader.readLine()[ CD ]
Line_26 $$ zeile = reader.readLine()-->Line_26 $$ zeile = reader.readLine()[ FD ]
Line_4 $$ String zeile = null-->Line_26 $$ zeile = reader.readLine()[ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_26 $$ zeile = reader.readLine()[ FD ]
Line_26 $$ zeile = reader.readLine()-->Line_26 $$ zeile = reader.readLine()[ CD ]
Line_3 $$ BufferedReader reader-->Line_26 $$ zeile = reader.readLine()[ FD ]
Line_21 $$ reader = new BufferedReader(new FileReader(f))-->Line_26 $$ zeile = reader.readLine()[ FD ]
Line_24 $$ while (zeile != null) -->Line_29 $$ zeile = reader.readLine()[ CD ]
Line_26 $$ zeile = reader.readLine()-->Line_29 $$ zeile = reader.readLine()[ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_29 $$ zeile = reader.readLine()[ FD ]
Line_4 $$ String zeile = null-->Line_29 $$ zeile = reader.readLine()[ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_29 $$ zeile = reader.readLine()[ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_29 $$ zeile = reader.readLine()[ CD ]
Line_3 $$ BufferedReader reader-->Line_29 $$ zeile = reader.readLine()[ FD ]
Line_21 $$ reader = new BufferedReader(new FileReader(f))-->Line_29 $$ zeile = reader.readLine()[ FD ]
Line_26 $$ zeile = reader.readLine()-->Line_31 $$ while (zeile != null) [ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_31 $$ while (zeile != null) [ FD ]
Line_4 $$ String zeile = null-->Line_31 $$ while (zeile != null) [ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_31 $$ while (zeile != null) [ FD ]
Line_31 $$ while (zeile != null) -->Line_32 $$ if (zeile.length() > 0) [ CD ]
Line_26 $$ zeile = reader.readLine()-->Line_32 $$ if (zeile.length() > 0) [ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_32 $$ if (zeile.length() > 0) [ FD ]
Line_4 $$ String zeile = null-->Line_32 $$ if (zeile.length() > 0) [ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_32 $$ if (zeile.length() > 0) [ FD ]
Line_32 $$ if (zeile.length() > 0) -->Line_33 $$ temp = zeile.split(" ")[ CD ]
Line_33 $$ temp = zeile.split(" ")-->Line_33 $$ temp = zeile.split(" ")[ FD ]
Line_11 $$ String[] temp-->Line_33 $$ temp = zeile.split(" ")[ FD ]
Line_33 $$ temp = zeile.split(" ")-->Line_33 $$ temp = zeile.split(" ")[ CD ]
Line_26 $$ zeile = reader.readLine()-->Line_33 $$ temp = zeile.split(" ")[ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_33 $$ temp = zeile.split(" ")[ FD ]
Line_4 $$ String zeile = null-->Line_33 $$ temp = zeile.split(" ")[ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_33 $$ temp = zeile.split(" ")[ FD ]
Line_32 $$ if (zeile.length() > 0) -->Line_34 $$ lambda = Integer.parseInt(temp[0])[ CD ]
Line_34 $$ lambda = Integer.parseInt(temp[0])-->Line_34 $$ lambda = Integer.parseInt(temp[0])[ FD ]
Line_6 $$ int lambda-->Line_34 $$ lambda = Integer.parseInt(temp[0])[ FD ]
Line_23 $$ lambda = 0-->Line_34 $$ lambda = Integer.parseInt(temp[0])[ FD ]
Line_34 $$ lambda = Integer.parseInt(temp[0])-->Line_34 $$ lambda = Integer.parseInt(temp[0])[ CD ]
Line_32 $$ if (zeile.length() > 0) -->Line_35 $$ intens = Float.parseFloat(temp[1])[ CD ]
Line_35 $$ intens = Float.parseFloat(temp[1])-->Line_35 $$ intens = Float.parseFloat(temp[1])[ FD ]
Line_7 $$ float intens-->Line_35 $$ intens = Float.parseFloat(temp[1])[ FD ]
Line_35 $$ intens = Float.parseFloat(temp[1])-->Line_35 $$ intens = Float.parseFloat(temp[1])[ CD ]
Line_32 $$ if (zeile.length() > 0) -->Line_36 $$ if (firstL) [ CD ]
Line_36 $$ if (firstL) -->Line_37 $$ firstL = false[ CD ]
Line_37 $$ firstL = false-->Line_37 $$ firstL = false[ FD ]
Line_5 $$ boolean firstL = true-->Line_37 $$ firstL = false[ FD ]
Line_36 $$ if (firstL) -->Line_38 $$ l_b = lambda[ CD ]
Line_38 $$ l_b = lambda-->Line_38 $$ l_b = lambda[ FD ]
Line_8 $$ int l_b = 0-->Line_38 $$ l_b = lambda[ FD ]
Line_34 $$ lambda = Integer.parseInt(temp[0])-->Line_38 $$ l_b = lambda[ FD ]
Line_6 $$ int lambda-->Line_38 $$ l_b = lambda[ FD ]
Line_23 $$ lambda = 0-->Line_38 $$ l_b = lambda[ FD ]
Line_32 $$ if (zeile.length() > 0) -->Line_40 $$ curve.put(lambda, intens)[ CD ]
Line_10 $$ HashMap<Integer, Float> curve = new HashMap<Integer, Float>()-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_34 $$ lambda = Integer.parseInt(temp[0])-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_6 $$ int lambda-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_23 $$ lambda = 0-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_35 $$ intens = Float.parseFloat(temp[1])-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_7 $$ float intens-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_31 $$ while (zeile != null) -->Line_42 $$ zeile = reader.readLine()[ CD ]
Line_42 $$ zeile = reader.readLine()-->Line_42 $$ zeile = reader.readLine()[ FD ]
Line_26 $$ zeile = reader.readLine()-->Line_42 $$ zeile = reader.readLine()[ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_42 $$ zeile = reader.readLine()[ FD ]
Line_4 $$ String zeile = null-->Line_42 $$ zeile = reader.readLine()[ FD ]
Line_22 $$ zeile = reader.readLine()-->Line_42 $$ zeile = reader.readLine()[ FD ]
Line_42 $$ zeile = reader.readLine()-->Line_42 $$ zeile = reader.readLine()[ CD ]
Line_3 $$ BufferedReader reader-->Line_42 $$ zeile = reader.readLine()[ FD ]
Line_21 $$ reader = new BufferedReader(new FileReader(f))-->Line_42 $$ zeile = reader.readLine()[ FD ]
Line_9 $$ int l_e = 0-->Line_44 $$ l_e = lambda[ FD ]
Line_44 $$ l_e = lambda-->Line_44 $$ l_e = lambda[ FD ]
Line_34 $$ lambda = Integer.parseInt(temp[0])-->Line_44 $$ l_e = lambda[ FD ]
Line_6 $$ int lambda-->Line_44 $$ l_e = lambda[ FD ]
Line_23 $$ lambda = 0-->Line_44 $$ l_e = lambda[ FD ]
Line_52 $$ BufferedWriter bw = new BufferedWriter(fw)-->Line_53 $$ bw.write("# COLOR: " + name + " Auto generated File: 02/09/2009; From " + l_b + " to " + l_e)[ FD ]
Line_52 $$ BufferedWriter bw = new BufferedWriter(fw)-->Line_54 $$ bw.newLine()[ FD ]
Line_52 $$ BufferedWriter bw = new BufferedWriter(fw)-->Line_55 $$ bw.write(l_b + "")[ FD ]
Line_52 $$ BufferedWriter bw = new BufferedWriter(fw)-->Line_56 $$ bw.newLine()[ FD ]
Line_9 $$ int l_e = 0-->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ FD ]
Line_44 $$ l_e = lambda-->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ CD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ CD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_58 $$ if (curve.containsKey(i)) [ CD ]
Line_10 $$ HashMap<Integer, Float> curve = new HashMap<Integer, Float>()-->Line_58 $$ if (curve.containsKey(i)) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_58 $$ if (curve.containsKey(i)) [ FD ]
Line_58 $$ if (curve.containsKey(i)) -->Line_58 $$ if (curve.containsKey(i)) [ CD ]
Line_10 $$ HashMap<Integer, Float> curve = new HashMap<Integer, Float>()-->Line_58 $$ if (curve.containsKey(i)) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_58 $$ if (curve.containsKey(i)) [ FD ]
Line_58 $$ if (curve.containsKey(i)) -->Line_59 $$ tempV = i + " " + curve.get(i)[ CD ]
Line_59 $$ tempV = i + " " + curve.get(i)-->Line_59 $$ tempV = i + " " + curve.get(i)[ FD ]
Line_49 $$ String tempV-->Line_59 $$ tempV = i + " " + curve.get(i)[ FD ]
Line_10 $$ HashMap<Integer, Float> curve = new HashMap<Integer, Float>()-->Line_59 $$ tempV = i + " " + curve.get(i)[ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_59 $$ tempV = i + " " + curve.get(i)[ FD ]
Line_58 $$ if (curve.containsKey(i)) -->Line_60 $$ bw.write(tempV)[ CD ]
Line_52 $$ BufferedWriter bw = new BufferedWriter(fw)-->Line_60 $$ bw.write(tempV)[ FD ]
Line_59 $$ tempV = i + " " + curve.get(i)-->Line_60 $$ bw.write(tempV)[ FD ]
Line_49 $$ String tempV-->Line_60 $$ bw.write(tempV)[ FD ]
Line_58 $$ if (curve.containsKey(i)) -->Line_61 $$ bw.newLine()[ CD ]
Line_52 $$ BufferedWriter bw = new BufferedWriter(fw)-->Line_61 $$ bw.newLine()[ FD ]
Line_52 $$ BufferedWriter bw = new BufferedWriter(fw)-->Line_64 $$ bw.close()[ FD ]
Line_18 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len)-->Line_18 $$ os.write(buffer, 0, len)[ FD ]
Line_26 $$ zeile = reader.readLine()-->Line_24 $$ while (zeile != null) [ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_24 $$ while (zeile != null) [ FD ]
Line_26 $$ zeile = reader.readLine()-->Line_24 $$ while (zeile != null) [ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_24 $$ while (zeile != null) [ FD ]
Line_26 $$ zeile = reader.readLine()-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_26 $$ zeile = reader.readLine()-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_29 $$ zeile = reader.readLine()-->Line_25 $$ if (!(zeile.length() > 0 && zeile.charAt(0) == '#')) [ FD ]
Line_42 $$ zeile = reader.readLine()-->Line_31 $$ while (zeile != null) [ FD ]
Line_42 $$ zeile = reader.readLine()-->Line_31 $$ while (zeile != null) [ FD ]
Line_42 $$ zeile = reader.readLine()-->Line_32 $$ if (zeile.length() > 0) [ FD ]
Line_42 $$ zeile = reader.readLine()-->Line_33 $$ temp = zeile.split(" ")[ FD ]
Line_34 $$ lambda = Integer.parseInt(temp[0])-->Line_38 $$ l_b = lambda[ FD ]
Line_34 $$ lambda = Integer.parseInt(temp[0])-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_35 $$ intens = Float.parseFloat(temp[1])-->Line_40 $$ curve.put(lambda, intens)[ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_57 $$ for (int i = l_b; i <= l_e; i++) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_58 $$ if (curve.containsKey(i)) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_58 $$ if (curve.containsKey(i)) [ FD ]
Line_57 $$ for (int i = l_b; i <= l_e; i++) -->Line_59 $$ tempV = i + " " + curve.get(i)[ FD ]
Line_59 $$ tempV = i + " " + curve.get(i)-->Line_60 $$ bw.write(tempV)[ FD ]
