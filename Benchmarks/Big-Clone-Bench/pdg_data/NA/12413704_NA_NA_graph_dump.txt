Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException [ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_3 $$ int chunkLength[ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_4 $$ InputStream is = null[ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_6 $$ if (!urlIsFile) [ FD ]
Line_6 $$ if (!urlIsFile) -->Line_6 $$ if (!urlIsFile) [ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_6 $$ if (!urlIsFile) [ FD ]
Line_6 $$ if (!urlIsFile) -->Line_7 $$ URL urlObj = new URL(filePath)[ CD ]
Line_6 $$ if (!urlIsFile) -->Line_8 $$ URLConnection uc = urlObj.openConnection()[ CD ]
Line_8 $$ URLConnection uc = urlObj.openConnection()-->Line_8 $$ URLConnection uc = urlObj.openConnection()[ CD ]
Line_7 $$ URL urlObj = new URL(filePath)-->Line_8 $$ URLConnection uc = urlObj.openConnection()[ FD ]
Line_6 $$ if (!urlIsFile) -->Line_9 $$ is = uc.getInputStream()[ CD ]
Line_4 $$ InputStream is = null-->Line_9 $$ is = uc.getInputStream()[ FD ]
Line_9 $$ is = uc.getInputStream()-->Line_9 $$ is = uc.getInputStream()[ FD ]
Line_9 $$ is = uc.getInputStream()-->Line_9 $$ is = uc.getInputStream()[ CD ]
Line_8 $$ URLConnection uc = urlObj.openConnection()-->Line_9 $$ is = uc.getInputStream()[ FD ]
Line_6 $$ if (!urlIsFile) -->Line_10 $$ chunkLength = uc.getContentLength()[ CD ]
Line_3 $$ int chunkLength-->Line_10 $$ chunkLength = uc.getContentLength()[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_10 $$ chunkLength = uc.getContentLength()[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_10 $$ chunkLength = uc.getContentLength()[ CD ]
Line_8 $$ URLConnection uc = urlObj.openConnection()-->Line_10 $$ chunkLength = uc.getContentLength()[ FD ]
Line_6 $$ if (!urlIsFile) -->Line_11 $$ if (chunkLength <= 0)[ CD ]
Line_3 $$ int chunkLength-->Line_11 $$ if (chunkLength <= 0)[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_11 $$ if (chunkLength <= 0)[ FD ]
Line_11 $$ if (chunkLength <= 0)-->Line_11 $$ chunkLength = 1024[ CD ]
Line_3 $$ int chunkLength-->Line_11 $$ chunkLength = 1024[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_11 $$ chunkLength = 1024[ FD ]
Line_11 $$ chunkLength = 1024-->Line_11 $$ chunkLength = 1024[ FD ]
Line_6 $$ if (!urlIsFile) -->Line_12 $$ if (charCoding == null) [ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_12 $$ if (charCoding == null) [ FD ]
Line_12 $$ if (charCoding == null) -->Line_13 $$ String type = uc.getContentType()[ CD ]
Line_13 $$ String type = uc.getContentType()-->Line_13 $$ String type = uc.getContentType()[ CD ]
Line_8 $$ URLConnection uc = urlObj.openConnection()-->Line_13 $$ String type = uc.getContentType()[ FD ]
Line_12 $$ if (charCoding == null) -->Line_14 $$ if (type != null) [ CD ]
Line_13 $$ String type = uc.getContentType()-->Line_14 $$ if (type != null) [ FD ]
Line_14 $$ if (type != null) -->Line_15 $$ charCoding = getCharCodingFromType(type)[ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_15 $$ charCoding = getCharCodingFromType(type)[ FD ]
Line_15 $$ charCoding = getCharCodingFromType(type)-->Line_15 $$ charCoding = getCharCodingFromType(type)[ FD ]
Line_15 $$ charCoding = getCharCodingFromType(type)-->Line_15 $$ charCoding = getCharCodingFromType(type)[ CD ]
Line_13 $$ String type = uc.getContentType()-->Line_15 $$ charCoding = getCharCodingFromType(type)[ FD ]
Line_6 $$ if (!urlIsFile) -->Line_19 $$ if (registeredStreams.containsKey(filePath)) [ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_19 $$ if (registeredStreams.containsKey(filePath)) [ FD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_19 $$ if (registeredStreams.containsKey(filePath)) [ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_19 $$ if (registeredStreams.containsKey(filePath)) [ FD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_20 $$ is = registeredStreams.get(filePath)[ CD ]
Line_4 $$ InputStream is = null-->Line_20 $$ is = registeredStreams.get(filePath)[ FD ]
Line_9 $$ is = uc.getInputStream()-->Line_20 $$ is = registeredStreams.get(filePath)[ FD ]
Line_20 $$ is = registeredStreams.get(filePath)-->Line_20 $$ is = registeredStreams.get(filePath)[ FD ]
Line_20 $$ is = registeredStreams.get(filePath)-->Line_20 $$ is = registeredStreams.get(filePath)[ CD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_20 $$ is = registeredStreams.get(filePath)[ FD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_21 $$ chunkLength = 4096[ CD ]
Line_3 $$ int chunkLength-->Line_21 $$ chunkLength = 4096[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_21 $$ chunkLength = 4096[ FD ]
Line_11 $$ chunkLength = 1024-->Line_21 $$ chunkLength = 4096[ FD ]
Line_21 $$ chunkLength = 4096-->Line_21 $$ chunkLength = 4096[ FD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_23 $$ File f = new File(filePath)[ CD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_24 $$ long length = f.length()[ CD ]
Line_24 $$ long length = f.length()-->Line_24 $$ long length = f.length()[ CD ]
Line_23 $$ File f = new File(filePath)-->Line_24 $$ long length = f.length()[ FD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_25 $$ chunkLength = (int) length[ CD ]
Line_3 $$ int chunkLength-->Line_25 $$ chunkLength = (int) length[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_25 $$ chunkLength = (int) length[ FD ]
Line_11 $$ chunkLength = 1024-->Line_25 $$ chunkLength = (int) length[ FD ]
Line_21 $$ chunkLength = 4096-->Line_25 $$ chunkLength = (int) length[ FD ]
Line_25 $$ chunkLength = (int) length-->Line_25 $$ chunkLength = (int) length[ FD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_26 $$ if (chunkLength != length)[ CD ]
Line_3 $$ int chunkLength-->Line_26 $$ if (chunkLength != length)[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_26 $$ if (chunkLength != length)[ FD ]
Line_11 $$ chunkLength = 1024-->Line_26 $$ if (chunkLength != length)[ FD ]
Line_21 $$ chunkLength = 4096-->Line_26 $$ if (chunkLength != length)[ FD ]
Line_25 $$ chunkLength = (int) length-->Line_26 $$ if (chunkLength != length)[ FD ]
Line_24 $$ long length = f.length()-->Line_26 $$ if (chunkLength != length)[ FD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_27 $$ if (chunkLength == 0) [ CD ]
Line_3 $$ int chunkLength-->Line_27 $$ if (chunkLength == 0) [ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_27 $$ if (chunkLength == 0) [ FD ]
Line_11 $$ chunkLength = 1024-->Line_27 $$ if (chunkLength == 0) [ FD ]
Line_21 $$ chunkLength = 4096-->Line_27 $$ if (chunkLength == 0) [ FD ]
Line_25 $$ chunkLength = (int) length-->Line_27 $$ if (chunkLength == 0) [ FD ]
Line_27 $$ if (chunkLength == 0) -->Line_28 $$ return ""[ CD ]
Line_19 $$ if (registeredStreams.containsKey(filePath)) -->Line_30 $$ is = new FileInputStream(f)[ CD ]
Line_4 $$ InputStream is = null-->Line_30 $$ is = new FileInputStream(f)[ FD ]
Line_9 $$ is = uc.getInputStream()-->Line_30 $$ is = new FileInputStream(f)[ FD ]
Line_20 $$ is = registeredStreams.get(filePath)-->Line_30 $$ is = new FileInputStream(f)[ FD ]
Line_30 $$ is = new FileInputStream(f)-->Line_30 $$ is = new FileInputStream(f)[ FD ]
Line_2 $$ private static String readUrl(String filePath, String charCoding, boolean urlIsFile) throws IOException -->Line_34 $$ if (charCoding == null) [ FD ]
Line_15 $$ charCoding = getCharCodingFromType(type)-->Line_34 $$ if (charCoding == null) [ FD ]
Line_34 $$ if (charCoding == null) -->Line_35 $$ r = new InputStreamReader(is)[ CD ]
Line_33 $$ Reader r-->Line_35 $$ r = new InputStreamReader(is)[ FD ]
Line_35 $$ r = new InputStreamReader(is)-->Line_35 $$ r = new InputStreamReader(is)[ FD ]
Line_34 $$ if (charCoding == null) -->Line_37 $$ r = new InputStreamReader(is, charCoding)[ CD ]
Line_33 $$ Reader r-->Line_37 $$ r = new InputStreamReader(is, charCoding)[ FD ]
Line_35 $$ r = new InputStreamReader(is)-->Line_37 $$ r = new InputStreamReader(is, charCoding)[ FD ]
Line_37 $$ r = new InputStreamReader(is, charCoding)-->Line_37 $$ r = new InputStreamReader(is, charCoding)[ FD ]
Line_39 $$ return readReader(r, chunkLength)-->Line_39 $$ return readReader(r, chunkLength)[ CD ]
Line_33 $$ Reader r-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_35 $$ r = new InputStreamReader(is)-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_37 $$ r = new InputStreamReader(is, charCoding)-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_3 $$ int chunkLength-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_10 $$ chunkLength = uc.getContentLength()-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_11 $$ chunkLength = 1024-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_21 $$ chunkLength = 4096-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_25 $$ chunkLength = (int) length-->Line_39 $$ return readReader(r, chunkLength)[ FD ]
Line_4 $$ InputStream is = null-->Line_41 $$ if (is != null)[ FD ]
Line_9 $$ is = uc.getInputStream()-->Line_41 $$ if (is != null)[ FD ]
Line_20 $$ is = registeredStreams.get(filePath)-->Line_41 $$ if (is != null)[ FD ]
Line_30 $$ is = new FileInputStream(f)-->Line_41 $$ if (is != null)[ FD ]
Line_41 $$ if (is != null)-->Line_41 $$ is.close()[ CD ]
Line_4 $$ InputStream is = null-->Line_41 $$ is.close()[ FD ]
Line_9 $$ is = uc.getInputStream()-->Line_41 $$ is.close()[ FD ]
Line_20 $$ is = registeredStreams.get(filePath)-->Line_41 $$ is.close()[ FD ]
Line_30 $$ is = new FileInputStream(f)-->Line_41 $$ is.close()[ FD ]
