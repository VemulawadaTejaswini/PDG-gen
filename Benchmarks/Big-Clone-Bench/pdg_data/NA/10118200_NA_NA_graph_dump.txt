Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static final boolean zipExtract(String zipfile, String name, String dest) [ CD ]
Line_2 $$ public static final boolean zipExtract(String zipfile, String name, String dest) -->Line_3 $$ boolean f = false[ CD ]
Line_8 $$ while ((e = zin.getNextEntry()) != null) -->Line_8 $$ while ((e = zin.getNextEntry()) != null) [ FD ]
Line_7 $$ ZipEntry e-->Line_8 $$ while ((e = zin.getNextEntry()) != null) [ FD ]
Line_8 $$ while ((e = zin.getNextEntry()) != null) -->Line_8 $$ while ((e = zin.getNextEntry()) != null) [ CD ]
Line_6 $$ ZipInputStream zin = new ZipInputStream(in)-->Line_8 $$ while ((e = zin.getNextEntry()) != null) [ FD ]
Line_8 $$ while ((e = zin.getNextEntry()) != null) -->Line_9 $$ if (e.getName().equals(name)) [ CD ]
Line_2 $$ public static final boolean zipExtract(String zipfile, String name, String dest) -->Line_9 $$ if (e.getName().equals(name)) [ FD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_9 $$ if (e.getName().equals(name)) [ CD ]
Line_2 $$ public static final boolean zipExtract(String zipfile, String name, String dest) -->Line_9 $$ if (e.getName().equals(name)) [ FD ]
Line_8 $$ while ((e = zin.getNextEntry()) != null) -->Line_9 $$ if (e.getName().equals(name)) [ FD ]
Line_7 $$ ZipEntry e-->Line_9 $$ if (e.getName().equals(name)) [ FD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_10 $$ FileOutputStream out = new FileOutputStream(dest)[ CD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_11 $$ byte b[] = new byte[TEMP_FILE_BUFFER_SIZE][ CD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_12 $$ int len = 0[ CD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)[ CD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_9 $$ if (e.getName().equals(name)) [ CD ]
Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)-->Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)[ FD ]
Line_12 $$ int len = 0-->Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)[ FD ]
Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)-->Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)[ CD ]
Line_6 $$ ZipInputStream zin = new ZipInputStream(in)-->Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)[ FD ]
Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)-->Line_13 $$ out.write(b, 0, len)[ CD ]
Line_10 $$ FileOutputStream out = new FileOutputStream(dest)-->Line_13 $$ out.write(b, 0, len)[ FD ]
Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)-->Line_13 $$ out.write(b, 0, len)[ FD ]
Line_12 $$ int len = 0-->Line_13 $$ out.write(b, 0, len)[ FD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_14 $$ out.close()[ CD ]
Line_10 $$ FileOutputStream out = new FileOutputStream(dest)-->Line_14 $$ out.close()[ FD ]
Line_9 $$ if (e.getName().equals(name)) -->Line_15 $$ f = true[ CD ]
Line_15 $$ f = true-->Line_15 $$ f = true[ FD ]
Line_3 $$ boolean f = false-->Line_15 $$ f = true[ FD ]
Line_6 $$ ZipInputStream zin = new ZipInputStream(in)-->Line_19 $$ zin.close()[ FD ]
Line_8 $$ while ((e = zin.getNextEntry()) != null) -->Line_21 $$ MLUtil.runtimeError(e, "extractZip " + zipfile + " " + name)[ FD ]
Line_7 $$ ZipEntry e-->Line_21 $$ MLUtil.runtimeError(e, "extractZip " + zipfile + " " + name)[ FD ]
Line_8 $$ while ((e = zin.getNextEntry()) != null) -->Line_23 $$ MLUtil.runtimeError(e, "extractZip " + zipfile + " " + name)[ FD ]
Line_7 $$ ZipEntry e-->Line_23 $$ MLUtil.runtimeError(e, "extractZip " + zipfile + " " + name)[ FD ]
Line_2 $$ public static final boolean zipExtract(String zipfile, String name, String dest) -->Line_25 $$ return (f)[ CD ]
Line_8 $$ while ((e = zin.getNextEntry()) != null) -->Line_9 $$ if (e.getName().equals(name)) [ FD ]
Line_10 $$ FileOutputStream out = new FileOutputStream(dest)-->Line_14 $$ out.close()[ FD ]
Line_13 $$ while ((len = zin.read(b)) != -1) out.write(b, 0, len)-->Line_13 $$ out.write(b, 0, len)[ FD ]
