Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) [ CD ]
Line_2 $$ private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) -->Line_3 $$ File oldlog = null[ CD ]
Line_7 $$ if (upgrade) -->Line_8 $$ File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer)[ CD ]
Line_7 $$ if (upgrade) -->Line_9 $$ if (destPath.equals(lastVerPath)) [ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_9 $$ if (destPath.equals(lastVerPath)) [ FD ]
Line_8 $$ File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer)-->Line_9 $$ if (destPath.equals(lastVerPath)) [ FD ]
Line_9 $$ if (destPath.equals(lastVerPath)) -->Line_9 $$ if (destPath.equals(lastVerPath)) [ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_9 $$ if (destPath.equals(lastVerPath)) [ FD ]
Line_8 $$ File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer)-->Line_9 $$ if (destPath.equals(lastVerPath)) [ FD ]
Line_9 $$ if (destPath.equals(lastVerPath)) -->Line_10 $$ File bkdir = new File(destPath.getAbsolutePath() + ".bak")[ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_10 $$ File bkdir = new File(destPath.getAbsolutePath() + ".bak")[ FD ]
Line_9 $$ if (destPath.equals(lastVerPath)) -->Line_11 $$ if (!destPath.renameTo(bkdir)) [ CD ]
Line_11 $$ if (!destPath.renameTo(bkdir)) -->Line_11 $$ if (!destPath.renameTo(bkdir)) [ CD ]
Line_11 $$ if (!destPath.renameTo(bkdir)) -->Line_11 $$ if (!destPath.renameTo(bkdir)) [ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_11 $$ if (!destPath.renameTo(bkdir)) [ FD ]
Line_10 $$ File bkdir = new File(destPath.getAbsolutePath() + ".bak")-->Line_11 $$ if (!destPath.renameTo(bkdir)) [ FD ]
Line_9 $$ if (destPath.equals(lastVerPath)) -->Line_14 $$ oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ CD ]
Line_3 $$ File oldlog = null-->Line_14 $$ oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_14 $$ oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")-->Line_14 $$ oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_10 $$ File bkdir = new File(destPath.getAbsolutePath() + ".bak")-->Line_14 $$ oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_9 $$ if (destPath.equals(lastVerPath)) -->Line_15 $$ lastVerPath = bkdir[ CD ]
Line_8 $$ File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer)-->Line_15 $$ lastVerPath = bkdir[ FD ]
Line_15 $$ lastVerPath = bkdir-->Line_15 $$ lastVerPath = bkdir[ FD ]
Line_10 $$ File bkdir = new File(destPath.getAbsolutePath() + ".bak")-->Line_15 $$ lastVerPath = bkdir[ FD ]
Line_9 $$ if (destPath.equals(lastVerPath)) -->Line_17 $$ oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ CD ]
Line_3 $$ File oldlog = null-->Line_17 $$ oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_14 $$ oldlog = new File(bkdir.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")-->Line_17 $$ oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_17 $$ oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")-->Line_17 $$ oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_8 $$ File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer)-->Line_17 $$ oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_15 $$ lastVerPath = bkdir-->Line_17 $$ oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty("file.separator") + "uninstall.vai")[ FD ]
Line_7 $$ if (upgrade) -->Line_19 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ CD ]
Line_19 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) -->Line_19 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_19 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ FD ]
Line_19 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) -->Line_19 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_19 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ FD ]
Line_7 $$ if (upgrade) -->Line_22 $$ if (uInfo_.module)[ CD ]
Line_22 $$ if (uInfo_.module)-->Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)[ CD ]
Line_5 $$ boolean oldClassCopied = false-->Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)[ FD ]
Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)-->Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)[ FD ]
Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)-->Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)[ CD ]
Line_8 $$ File lastVerPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + lastVer)-->Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)[ FD ]
Line_15 $$ lastVerPath = bkdir-->Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)[ FD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)[ FD ]
Line_7 $$ if (upgrade) -->Line_24 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ CD ]
Line_24 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) -->Line_24 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_24 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ FD ]
Line_24 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) -->Line_24 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_24 $$ if ((!destPath.exists()) && (!destPath.mkdirs())) [ FD ]
Line_29 $$ File[] ls = destPath.listFiles()-->Line_29 $$ File[] ls = destPath.listFiles()[ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_29 $$ File[] ls = destPath.listFiles()[ FD ]
Line_30 $$ for (int i = 0; i < ls.length; i++) -->Line_30 $$ for (int i = 0; i < ls.length; i++) [ CD ]
Line_30 $$ for (int i = 0; i < ls.length; i++) -->Line_30 $$ for (int i = 0; i < ls.length; i++) [ CD ]
Line_30 $$ for (int i = 0; i < ls.length; i++) -->Line_30 $$ for (int i = 0; i < ls.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < ls.length; i++) -->Line_31 $$ if (!oldClassCopied)[ CD ]
Line_5 $$ boolean oldClassCopied = false-->Line_31 $$ if (!oldClassCopied)[ FD ]
Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)-->Line_31 $$ if (!oldClassCopied)[ FD ]
Line_31 $$ if (!oldClassCopied)-->Line_31 $$ if (!oldClassCopied)[ CD ]
Line_5 $$ boolean oldClassCopied = false-->Line_31 $$ if (!oldClassCopied)[ FD ]
Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)-->Line_31 $$ if (!oldClassCopied)[ FD ]
Line_31 $$ if (!oldClassCopied)-->Line_31 $$ ls[i].delete()[ CD ]
Line_31 $$ if (!oldClassCopied)-->Line_31 $$ if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class"))[ CD ]
Line_31 $$ if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class"))-->Line_31 $$ if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class"))[ CD ]
Line_31 $$ if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class"))-->Line_31 $$ if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class"))[ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_31 $$ if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class"))[ FD ]
Line_31 $$ if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class"))-->Line_31 $$ ls[i].delete()[ CD ]
Line_5 $$ boolean oldClassCopied = false-->Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) [ FD ]
Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)-->Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) [ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_36 $$ final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")[ CD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_36 $$ final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")[ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_37 $$ if (outClassFile.exists() && !outClassFile.delete()) [ CD ]
Line_36 $$ final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_37 $$ if (outClassFile.exists() && !outClassFile.delete()) [ FD ]
Line_37 $$ if (outClassFile.exists() && !outClassFile.delete()) -->Line_37 $$ if (outClassFile.exists() && !outClassFile.delete()) [ CD ]
Line_36 $$ final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_37 $$ if (outClassFile.exists() && !outClassFile.delete()) [ FD ]
Line_37 $$ if (outClassFile.exists() && !outClassFile.delete()) -->Line_38 $$ ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()))[ CD ]
Line_36 $$ final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_38 $$ ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outClassFile.getName()))[ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_40 $$ final FileOutputStream out = new FileOutputStream(outClassFile)[ CD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_41 $$ final FileInputStream in = new FileInputStream(fileWithArchive_)[ CD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_42 $$ if (installClassOffset_ > 0) [ CD ]
Line_42 $$ if (installClassOffset_ > 0) -->Line_43 $$ in.skip(installClassOffset_)[ CD ]
Line_41 $$ final FileInputStream in = new FileInputStream(fileWithArchive_)-->Line_43 $$ in.skip(installClassOffset_)[ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_45 $$ buf = new byte[0][ CD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_45 $$ buf = new byte[0][ FD ]
Line_45 $$ buf = new byte[0]-->Line_45 $$ buf = new byte[0][ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_46 $$ if (installClassSize_ < 0)[ CD ]
Line_46 $$ if (installClassSize_ < 0)-->Line_46 $$ buf = new byte[(int) jarOffset_][ CD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_46 $$ buf = new byte[(int) jarOffset_][ FD ]
Line_45 $$ buf = new byte[0]-->Line_46 $$ buf = new byte[(int) jarOffset_][ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_46 $$ buf = new byte[(int) jarOffset_][ FD ]
Line_46 $$ if (installClassSize_ < 0)-->Line_46 $$ buf = new byte[(int) installClassSize_][ CD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_46 $$ buf = new byte[(int) installClassSize_][ FD ]
Line_45 $$ buf = new byte[0]-->Line_46 $$ buf = new byte[(int) installClassSize_][ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_46 $$ buf = new byte[(int) installClassSize_][ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_46 $$ buf = new byte[(int) installClassSize_][ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_47 $$ read = in.read(buf, 0, buf.length)[ CD ]
Line_34 $$ int read = 0-->Line_47 $$ read = in.read(buf, 0, buf.length)[ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_47 $$ read = in.read(buf, 0, buf.length)[ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_47 $$ read = in.read(buf, 0, buf.length)[ CD ]
Line_41 $$ final FileInputStream in = new FileInputStream(fileWithArchive_)-->Line_47 $$ read = in.read(buf, 0, buf.length)[ FD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_47 $$ read = in.read(buf, 0, buf.length)[ FD ]
Line_45 $$ buf = new byte[0]-->Line_47 $$ read = in.read(buf, 0, buf.length)[ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_47 $$ read = in.read(buf, 0, buf.length)[ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_47 $$ read = in.read(buf, 0, buf.length)[ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_48 $$ out.write(buf, 0, read)[ CD ]
Line_40 $$ final FileOutputStream out = new FileOutputStream(outClassFile)-->Line_48 $$ out.write(buf, 0, read)[ FD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_48 $$ out.write(buf, 0, read)[ FD ]
Line_45 $$ buf = new byte[0]-->Line_48 $$ out.write(buf, 0, read)[ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_48 $$ out.write(buf, 0, read)[ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_48 $$ out.write(buf, 0, read)[ FD ]
Line_34 $$ int read = 0-->Line_48 $$ out.write(buf, 0, read)[ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_48 $$ out.write(buf, 0, read)[ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_49 $$ out.close()[ CD ]
Line_40 $$ final FileOutputStream out = new FileOutputStream(outClassFile)-->Line_49 $$ out.close()[ FD ]
Line_35 $$ if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) -->Line_50 $$ in.close()[ CD ]
Line_41 $$ final FileInputStream in = new FileInputStream(fileWithArchive_)-->Line_50 $$ in.close()[ FD ]
Line_53 $$ if (jarOffset_ > 0) -->Line_54 $$ in.skip(jarOffset_)[ CD ]
Line_41 $$ final FileInputStream in = new FileInputStream(fileWithArchive_)-->Line_54 $$ in.skip(jarOffset_)[ FD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_57 $$ final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar")[ FD ]
Line_57 $$ final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar")-->Line_58 $$ if (outJarFile.exists() && !outJarFile.delete()) [ FD ]
Line_58 $$ if (outJarFile.exists() && !outJarFile.delete()) -->Line_58 $$ if (outJarFile.exists() && !outJarFile.delete()) [ CD ]
Line_57 $$ final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar")-->Line_58 $$ if (outJarFile.exists() && !outJarFile.delete()) [ FD ]
Line_58 $$ if (outJarFile.exists() && !outJarFile.delete()) -->Line_59 $$ ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()))[ CD ]
Line_57 $$ final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + "install.jar")-->Line_59 $$ ui_.showError(new Exception(VAGlobals.i18n("Setup_FileNotCreated") + ":\n" + outJarFile.getName()))[ FD ]
Line_62 $$ ZipEntry entry = jar.getNextEntry()-->Line_62 $$ ZipEntry entry = jar.getNextEntry()[ CD ]
Line_56 $$ JarInputStream jar = new JarInputStream(in)-->Line_62 $$ ZipEntry entry = jar.getNextEntry()[ FD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_64 $$ buf = new byte[bufSize][ FD ]
Line_45 $$ buf = new byte[0]-->Line_64 $$ buf = new byte[bufSize][ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_64 $$ buf = new byte[bufSize][ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_64 $$ buf = new byte[bufSize][ FD ]
Line_64 $$ buf = new byte[bufSize]-->Line_64 $$ buf = new byte[bufSize][ FD ]
Line_62 $$ ZipEntry entry = jar.getNextEntry()-->Line_65 $$ while (entry != null) [ FD ]
Line_65 $$ while (entry != null) -->Line_66 $$ String entryName = entry.getName()[ CD ]
Line_66 $$ String entryName = entry.getName()-->Line_66 $$ String entryName = entry.getName()[ CD ]
Line_62 $$ ZipEntry entry = jar.getNextEntry()-->Line_66 $$ String entryName = entry.getName()[ FD ]
Line_65 $$ while (entry != null) -->Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) [ CD ]
Line_66 $$ String entryName = entry.getName()-->Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) [ FD ]
Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) -->Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) [ CD ]
Line_66 $$ String entryName = entry.getName()-->Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) [ FD ]
Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) -->Line_68 $$ if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) [ CD ]
Line_66 $$ String entryName = entry.getName()-->Line_68 $$ if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) [ FD ]
Line_5 $$ boolean oldClassCopied = false-->Line_68 $$ if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) [ FD ]
Line_22 $$ oldClassCopied = copyOldSetupClass(lastVerPath, destPath)-->Line_68 $$ if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) [ FD ]
Line_68 $$ if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) -->Line_69 $$ FileOutputStream out = null[ CD ]
Line_69 $$ FileOutputStream out = null-->Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")[ FD ]
Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")[ FD ]
Line_40 $$ final FileOutputStream out = new FileOutputStream(outClassFile)-->Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")[ FD ]
Line_6 $$ File destPath = new File(_destPath, "vai_" + VAGlobals.APP_NAME + "_" + VAGlobals.APP_VERSION)-->Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")[ FD ]
Line_56 $$ JarInputStream jar = new JarInputStream(in)-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_69 $$ FileOutputStream out = null-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_40 $$ final FileOutputStream out = new FileOutputStream(outClassFile)-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_45 $$ buf = new byte[0]-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_64 $$ buf = new byte[bufSize]-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_69 $$ FileOutputStream out = null-->Line_76 $$ if (out != null)[ FD ]
Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_76 $$ if (out != null)[ FD ]
Line_40 $$ final FileOutputStream out = new FileOutputStream(outClassFile)-->Line_76 $$ if (out != null)[ FD ]
Line_76 $$ if (out != null)-->Line_76 $$ out.close()[ CD ]
Line_69 $$ FileOutputStream out = null-->Line_76 $$ out.close()[ FD ]
Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_76 $$ out.close()[ FD ]
Line_40 $$ final FileOutputStream out = new FileOutputStream(outClassFile)-->Line_76 $$ out.close()[ FD ]
Line_68 $$ if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) -->Line_78 $$ if (!entryName.endsWith(".zip")) [ CD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_78 $$ if (!entryName.endsWith(".zip")) [ CD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_78 $$ if (!entryName.endsWith(".zip")) [ CD ]
Line_66 $$ String entryName = entry.getName()-->Line_78 $$ if (!entryName.endsWith(".zip")) [ FD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_79 $$ if (VAGlobals.DEBUG)[ CD ]
Line_79 $$ if (VAGlobals.DEBUG)-->Line_79 $$ VAGlobals.printDebug("jar entry name " + entryName)[ CD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)[ CD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_81 $$ CRC32 crc = new CRC32()[ CD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_82 $$ outJar.putNextEntry(outEntry)[ CD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_82 $$ outJar.putNextEntry(outEntry)[ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_82 $$ outJar.putNextEntry(outEntry)[ FD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_83 $$ int size = 0[ CD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ CD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_78 $$ if (!entryName.endsWith(".zip")) [ CD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_34 $$ int read = 0-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ CD ]
Line_56 $$ JarInputStream jar = new JarInputStream(in)-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_45 $$ buf = new byte[0]-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_64 $$ buf = new byte[bufSize]-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_63 $$ final int bufSize = 32768-->Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) [ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_85 $$ size += read[ CD ]
Line_85 $$ size += read-->Line_85 $$ size += read[ FD ]
Line_83 $$ int size = 0-->Line_85 $$ size += read[ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_85 $$ size += read[ FD ]
Line_34 $$ int read = 0-->Line_85 $$ size += read[ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_85 $$ size += read[ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_86 $$ if (read == 0) [ CD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_86 $$ if (read == 0) [ FD ]
Line_34 $$ int read = 0-->Line_86 $$ if (read == 0) [ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_86 $$ if (read == 0) [ FD ]
Line_86 $$ if (read == 0) -->Line_87 $$ Thread.yield()[ CD ]
Line_86 $$ if (read == 0) -->Line_89 $$ outJar.write(buf, 0, read)[ CD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_45 $$ buf = new byte[0]-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_64 $$ buf = new byte[bufSize]-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_34 $$ int read = 0-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_86 $$ if (read == 0) -->Line_90 $$ crc.update(buf, 0, read)[ CD ]
Line_81 $$ CRC32 crc = new CRC32()-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_33 $$ byte[] buf = new byte[0]-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_45 $$ buf = new byte[0]-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_46 $$ buf = new byte[(int) jarOffset_]-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_46 $$ buf = new byte[(int) installClassSize_]-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_64 $$ buf = new byte[bufSize]-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_34 $$ int read = 0-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_47 $$ read = in.read(buf, 0, buf.length)-->Line_90 $$ crc.update(buf, 0, read)[ FD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_93 $$ outEntry.setSize(size)[ CD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_93 $$ outEntry.setSize(size)[ FD ]
Line_85 $$ size += read-->Line_93 $$ outEntry.setSize(size)[ FD ]
Line_83 $$ int size = 0-->Line_93 $$ outEntry.setSize(size)[ FD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_94 $$ outEntry.setCrc(crc.getValue())[ CD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_94 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_81 $$ CRC32 crc = new CRC32()-->Line_94 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_95 $$ outJar.flush()[ CD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_95 $$ outJar.flush()[ FD ]
Line_78 $$ if (!entryName.endsWith(".zip")) -->Line_96 $$ outJar.closeEntry()[ CD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_96 $$ outJar.closeEntry()[ FD ]
Line_65 $$ while (entry != null) -->Line_98 $$ jar.closeEntry()[ CD ]
Line_56 $$ JarInputStream jar = new JarInputStream(in)-->Line_98 $$ jar.closeEntry()[ FD ]
Line_65 $$ while (entry != null) -->Line_99 $$ entry = jar.getNextEntry()[ CD ]
Line_99 $$ entry = jar.getNextEntry()-->Line_99 $$ entry = jar.getNextEntry()[ FD ]
Line_62 $$ ZipEntry entry = jar.getNextEntry()-->Line_99 $$ entry = jar.getNextEntry()[ FD ]
Line_99 $$ entry = jar.getNextEntry()-->Line_99 $$ entry = jar.getNextEntry()[ CD ]
Line_56 $$ JarInputStream jar = new JarInputStream(in)-->Line_99 $$ entry = jar.getNextEntry()[ FD ]
Line_101 $$ InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties")-->Line_101 $$ InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties")[ CD ]
Line_102 $$ Properties prop = new Properties()-->Line_104 $$ prop.load(pin)[ FD ]
Line_101 $$ InputStream pin = getClass().getResourceAsStream("resources/vainstall.properties")-->Line_104 $$ prop.load(pin)[ FD ]
Line_102 $$ Properties prop = new Properties()-->Line_108 $$ prop.setProperty("vainstall.destination.language", language)[ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_111 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_109 $$ ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties")-->Line_111 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_81 $$ CRC32 crc = new CRC32()-->Line_111 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_110 $$ CRC32 crc = new CRC32()-->Line_111 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_112 $$ outEntry.setSize(prop.size())[ FD ]
Line_109 $$ ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties")-->Line_112 $$ outEntry.setSize(prop.size())[ FD ]
Line_102 $$ Properties prop = new Properties()-->Line_112 $$ outEntry.setSize(prop.size())[ FD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_113 $$ outJar.putNextEntry(outEntry)[ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_113 $$ outJar.putNextEntry(outEntry)[ FD ]
Line_109 $$ ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties")-->Line_113 $$ outJar.putNextEntry(outEntry)[ FD ]
Line_102 $$ Properties prop = new Properties()-->Line_114 $$ prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION)[ FD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_114 $$ prop.store(outJar, VAGlobals.NAME + " " + VAGlobals.VERSION)[ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_115 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_109 $$ ZipEntry outEntry = new ZipEntry("com/memoire/vainstall/resources/vainstall.properties")-->Line_115 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_81 $$ CRC32 crc = new CRC32()-->Line_115 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_110 $$ CRC32 crc = new CRC32()-->Line_115 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_116 $$ outJar.closeEntry()[ FD ]
Line_56 $$ JarInputStream jar = new JarInputStream(in)-->Line_117 $$ jar.close()[ FD ]
Line_61 $$ JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile))-->Line_118 $$ outJar.close()[ FD ]
Line_41 $$ final FileInputStream in = new FileInputStream(fileWithArchive_)-->Line_119 $$ in.close()[ FD ]
Line_121 $$ String message = e.getLocalizedMessage()-->Line_121 $$ String message = e.getLocalizedMessage()[ CD ]
Line_121 $$ String message = e.getLocalizedMessage()-->Line_122 $$ message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts")[ FD ]
Line_122 $$ message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts")-->Line_122 $$ message += "\n" + VAGlobals.i18n("Setup_ErrorUninstallScripts")[ FD ]
Line_2 $$ private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) -->Line_126 $$ return oldlog[ CD ]
Line_30 $$ for (int i = 0; i < ls.length; i++) -->Line_30 $$ for (int i = 0; i < ls.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < ls.length; i++) -->Line_30 $$ for (int i = 0; i < ls.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < ls.length; i++) -->Line_30 $$ for (int i = 0; i < ls.length; i++) [ FD ]
Line_99 $$ entry = jar.getNextEntry()-->Line_65 $$ while (entry != null) [ FD ]
Line_99 $$ entry = jar.getNextEntry()-->Line_65 $$ while (entry != null) [ FD ]
Line_99 $$ entry = jar.getNextEntry()-->Line_66 $$ String entryName = entry.getName()[ FD ]
Line_66 $$ String entryName = entry.getName()-->Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) [ FD ]
Line_66 $$ String entryName = entry.getName()-->Line_67 $$ if (entryName.equals("com/memoire/vainstall/resources/vainstall.properties")) [ FD ]
Line_66 $$ String entryName = entry.getName()-->Line_68 $$ if (entryName.equals(installClassName_ + ".class") && !oldClassCopied) [ FD ]
Line_69 $$ FileOutputStream out = null-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_72 $$ VAGlobals.copyStream(jar, out, buf)[ FD ]
Line_69 $$ FileOutputStream out = null-->Line_76 $$ if (out != null)[ FD ]
Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_76 $$ if (out != null)[ FD ]
Line_69 $$ FileOutputStream out = null-->Line_76 $$ out.close()[ FD ]
Line_71 $$ out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + ".class")-->Line_76 $$ out.close()[ FD ]
Line_66 $$ String entryName = entry.getName()-->Line_78 $$ if (!entryName.endsWith(".zip")) [ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_82 $$ outJar.putNextEntry(outEntry)[ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_93 $$ outEntry.setSize(size)[ FD ]
Line_83 $$ int size = 0-->Line_93 $$ outEntry.setSize(size)[ FD ]
Line_80 $$ ZipEntry outEntry = new ZipEntry(entryName)-->Line_94 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_81 $$ CRC32 crc = new CRC32()-->Line_94 $$ outEntry.setCrc(crc.getValue())[ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_85 $$ size += read[ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_86 $$ if (read == 0) [ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_89 $$ outJar.write(buf, 0, read)[ FD ]
Line_84 $$ while ((read = jar.read(buf, 0, bufSize)) >= 0) -->Line_90 $$ crc.update(buf, 0, read)[ FD ]
