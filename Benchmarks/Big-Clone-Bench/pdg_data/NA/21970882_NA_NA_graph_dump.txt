Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException [ CD ]
Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException -->Line_3 $$ InfoUnitXMLData iur = new InfoUnitXMLData(STRUCTURE_RDF)[ CD ]
Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException -->Line_4 $$ rdf = iur.load("rdf")[ CD ]
Line_3 $$ InfoUnitXMLData iur = new InfoUnitXMLData(STRUCTURE_RDF)-->Line_4 $$ rdf = iur.load("rdf")[ FD ]
Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException -->Line_5 $$ rdfResource = rdf.ft("resource")[ CD ]
Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException -->Line_6 $$ rdfParseType = rdf.ft("parse type")[ CD ]
Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException -->Line_8 $$ PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"))[ FD ]
Line_9 $$ URL urlModel = new URL(model)-->Line_10 $$ BufferedReader inr = new BufferedReader(new InputStreamReader(urlModel.openStream()))[ FD ]
Line_12 $$ String line = inr.readLine()-->Line_12 $$ String line = inr.readLine()[ CD ]
Line_10 $$ BufferedReader inr = new BufferedReader(new InputStreamReader(urlModel.openStream()))-->Line_12 $$ String line = inr.readLine()[ FD ]
Line_13 $$ while (line != null && !line.equalsIgnoreCase(finalTag)) -->Line_13 $$ while (line != null && !line.equalsIgnoreCase(finalTag)) [ CD ]
Line_12 $$ String line = inr.readLine()-->Line_13 $$ while (line != null && !line.equalsIgnoreCase(finalTag)) [ FD ]
Line_11 $$ String finalTag = "</" + rdf.ft("main") + ">"-->Line_13 $$ while (line != null && !line.equalsIgnoreCase(finalTag)) [ FD ]
Line_13 $$ while (line != null && !line.equalsIgnoreCase(finalTag)) -->Line_14 $$ outw.println(line)[ CD ]
Line_8 $$ PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"))-->Line_14 $$ outw.println(line)[ FD ]
Line_12 $$ String line = inr.readLine()-->Line_14 $$ outw.println(line)[ FD ]
Line_13 $$ while (line != null && !line.equalsIgnoreCase(finalTag)) -->Line_15 $$ line = inr.readLine()[ CD ]
Line_15 $$ line = inr.readLine()-->Line_15 $$ line = inr.readLine()[ FD ]
Line_12 $$ String line = inr.readLine()-->Line_15 $$ line = inr.readLine()[ FD ]
Line_15 $$ line = inr.readLine()-->Line_15 $$ line = inr.readLine()[ CD ]
Line_10 $$ BufferedReader inr = new BufferedReader(new InputStreamReader(urlModel.openStream()))-->Line_15 $$ line = inr.readLine()[ FD ]
Line_10 $$ BufferedReader inr = new BufferedReader(new InputStreamReader(urlModel.openStream()))-->Line_17 $$ inr.close()[ FD ]
Line_18 $$ InfoNode nodeType = infoRoot.path(rdf.ft("constraint"))-->Line_18 $$ InfoNode nodeType = infoRoot.path(rdf.ft("constraint"))[ CD ]
Line_18 $$ InfoNode nodeType = infoRoot.path(rdf.ft("constraint"))-->Line_20 $$ if (nodeType != null) [ FD ]
Line_20 $$ if (nodeType != null) -->Line_21 $$ type = nodeType.getValue().toString()[ CD ]
Line_19 $$ String type = null-->Line_21 $$ type = nodeType.getValue().toString()[ FD ]
Line_21 $$ type = nodeType.getValue().toString()-->Line_21 $$ type = nodeType.getValue().toString()[ FD ]
Line_21 $$ type = nodeType.getValue().toString()-->Line_21 $$ type = nodeType.getValue().toString()[ CD ]
Line_18 $$ InfoNode nodeType = infoRoot.path(rdf.ft("constraint"))-->Line_21 $$ type = nodeType.getValue().toString()[ FD ]
Line_18 $$ InfoNode nodeType = infoRoot.path(rdf.ft("constraint"))-->Line_23 $$ infoRoot.removeChildNode(nodeType)[ FD ]
Line_20 $$ if (nodeType != null) -->Line_26 $$ if (mainResourceClass != null)[ CD ]
Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException -->Line_26 $$ if (mainResourceClass != null)[ FD ]
Line_26 $$ if (mainResourceClass != null)-->Line_26 $$ type = mainResourceClass[ CD ]
Line_19 $$ String type = null-->Line_26 $$ type = mainResourceClass[ FD ]
Line_21 $$ type = nodeType.getValue().toString()-->Line_26 $$ type = mainResourceClass[ FD ]
Line_26 $$ type = mainResourceClass-->Line_26 $$ type = mainResourceClass[ FD ]
Line_2 $$ public void write(URL output, String model, String mainResourceClass) throws InfoUnitIOException -->Line_26 $$ type = mainResourceClass[ FD ]
Line_26 $$ if (mainResourceClass != null)-->Line_26 $$ type = rdf.ft("description")[ CD ]
Line_19 $$ String type = null-->Line_26 $$ type = rdf.ft("description")[ FD ]
Line_21 $$ type = nodeType.getValue().toString()-->Line_26 $$ type = rdf.ft("description")[ FD ]
Line_26 $$ type = mainResourceClass-->Line_26 $$ type = rdf.ft("description")[ FD ]
Line_26 $$ type = rdf.ft("description")-->Line_26 $$ type = rdf.ft("description")[ FD ]
Line_26 $$ type = rdf.ft("description")-->Line_26 $$ type = rdf.ft("description")[ CD ]
Line_8 $$ PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"))-->Line_27 $$ outw.println("   <" + type + " " + rdf.ft("about") + "=\"" + ((infoNamespaces == null) ? infoRoot.getLabel() : infoNamespaces.convertEntity(infoRoot.getLabel().toString())) + "\">")[ FD ]
Line_28 $$ Set<InfoNode> nl = infoRoot.getChildren()-->Line_28 $$ Set<InfoNode> nl = infoRoot.getChildren()[ CD ]
Line_28 $$ Set<InfoNode> nl = infoRoot.getChildren()-->Line_29 $$ writeNodeList(nl, outw, 5)[ FD ]
Line_8 $$ PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"))-->Line_29 $$ writeNodeList(nl, outw, 5)[ FD ]
Line_8 $$ PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"))-->Line_30 $$ outw.println("   </" + type + ">")[ FD ]
Line_15 $$ line = inr.readLine()-->Line_31 $$ if (line != null)[ FD ]
Line_12 $$ String line = inr.readLine()-->Line_31 $$ if (line != null)[ FD ]
Line_31 $$ if (line != null)-->Line_31 $$ outw.println(finalTag)[ CD ]
Line_8 $$ PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"))-->Line_31 $$ outw.println(finalTag)[ FD ]
Line_11 $$ String finalTag = "</" + rdf.ft("main") + ">"-->Line_31 $$ outw.println(finalTag)[ FD ]
Line_8 $$ PrintWriter outw = new PrintWriter(new OutputStreamWriter(new FileOutputStream(output.getFile()), "UTF-8"))-->Line_32 $$ outw.close()[ FD ]
Line_15 $$ line = inr.readLine()-->Line_13 $$ while (line != null && !line.equalsIgnoreCase(finalTag)) [ FD ]
Line_15 $$ line = inr.readLine()-->Line_14 $$ outw.println(line)[ FD ]
