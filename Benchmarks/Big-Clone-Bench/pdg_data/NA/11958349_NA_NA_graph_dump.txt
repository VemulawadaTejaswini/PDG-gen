Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) [ CD ]
Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) -->Line_3 $$ FileOutputStream os = null[ CD ]
Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) -->Line_4 $$ DataOutputStream dos = null[ CD ]
Line_7 $$ long fileOffset = outputOffset(header)-->Line_7 $$ long fileOffset = outputOffset(header)[ CD ]
Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) -->Line_7 $$ long fileOffset = outputOffset(header)[ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_9 $$ String sourceFileName = FileUtils.getFileName(srcFilePath[i])[ CD ]
Line_9 $$ String sourceFileName = FileUtils.getFileName(srcFilePath[i])-->Line_9 $$ String sourceFileName = FileUtils.getFileName(srcFilePath[i])[ CD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_10 $$ long sourceFileSize = FileUtils.getFileSize(srcFilePath[i])[ CD ]
Line_10 $$ long sourceFileSize = FileUtils.getFileSize(srcFilePath[i])-->Line_10 $$ long sourceFileSize = FileUtils.getFileSize(srcFilePath[i])[ CD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ CD ]
Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)-->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ CD ]
Line_9 $$ String sourceFileName = FileUtils.getFileName(srcFilePath[i])-->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ FD ]
Line_10 $$ long sourceFileSize = FileUtils.getFileSize(srcFilePath[i])-->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ FD ]
Line_7 $$ long fileOffset = outputOffset(header)-->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ CD ]
Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ FD ]
Line_7 $$ long fileOffset = outputOffset(header)-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ FD ]
Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ CD ]
Line_10 $$ long sourceFileSize = FileUtils.getFileSize(srcFilePath[i])-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ FD ]
Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ FD ]
Line_7 $$ long fileOffset = outputOffset(header)-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_13 $$ fileTable[i] = ft[ CD ]
Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)-->Line_13 $$ fileTable[i] = ft[ FD ]
Line_16 $$ if (!file.exists()) -->Line_16 $$ if (!file.exists()) [ CD ]
Line_16 $$ if (!file.exists()) -->Line_16 $$ if (!file.exists()) [ CD ]
Line_15 $$ File file = new File(makeFilePath)-->Line_16 $$ if (!file.exists()) [ FD ]
Line_16 $$ if (!file.exists()) -->Line_17 $$ FileUtils.makedirs(file)[ CD ]
Line_15 $$ File file = new File(makeFilePath)-->Line_17 $$ FileUtils.makedirs(file)[ FD ]
Line_3 $$ FileOutputStream os = null-->Line_19 $$ os = new FileOutputStream(file)[ FD ]
Line_19 $$ os = new FileOutputStream(file)-->Line_19 $$ os = new FileOutputStream(file)[ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_20 $$ dos = new DataOutputStream(os)[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_20 $$ dos = new DataOutputStream(os)[ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_21 $$ dos.writeInt(header.getPAKIdentity())[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_21 $$ dos.writeInt(header.getPAKIdentity())[ FD ]
Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) -->Line_21 $$ dos.writeInt(header.getPAKIdentity())[ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_22 $$ writeByteArray(header.getPassword(), dos)[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_22 $$ writeByteArray(header.getPassword(), dos)[ FD ]
Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) -->Line_22 $$ writeByteArray(header.getPassword(), dos)[ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_23 $$ dos.writeFloat(header.getVersion())[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_23 $$ dos.writeFloat(header.getVersion())[ FD ]
Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) -->Line_23 $$ dos.writeFloat(header.getVersion())[ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_24 $$ dos.writeLong(header.getTables())[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_24 $$ dos.writeLong(header.getTables())[ FD ]
Line_2 $$ public static void makeLPKFile(String[] srcFilePath, String makeFilePath, LPKHeader header) -->Line_24 $$ dos.writeLong(header.getTables())[ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ CD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ CD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_26 $$ writeByteArray(fileTable[i].getFileName(), dos)[ CD ]
Line_4 $$ DataOutputStream dos = null-->Line_26 $$ writeByteArray(fileTable[i].getFileName(), dos)[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_26 $$ writeByteArray(fileTable[i].getFileName(), dos)[ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_27 $$ dos.writeLong(fileTable[i].getFileSize())[ CD ]
Line_4 $$ DataOutputStream dos = null-->Line_27 $$ dos.writeLong(fileTable[i].getFileSize())[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_27 $$ dos.writeLong(fileTable[i].getFileSize())[ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_28 $$ dos.writeLong(fileTable[i].getOffSet())[ CD ]
Line_4 $$ DataOutputStream dos = null-->Line_28 $$ dos.writeLong(fileTable[i].getOffSet())[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_28 $$ dos.writeLong(fileTable[i].getOffSet())[ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_31 $$ File ftFile = new File(srcFilePath[i])[ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_32 $$ FileInputStream ftFis = new FileInputStream(ftFile)[ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_33 $$ DataInputStream ftDis = new DataInputStream(ftFis)[ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_34 $$ byte[] buff = new byte[256][ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_35 $$ int readLength = 0[ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) [ CD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ CD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) [ FD ]
Line_35 $$ int readLength = 0-->Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) [ FD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) [ CD ]
Line_33 $$ DataInputStream ftDis = new DataInputStream(ftFis)-->Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) [ FD ]
Line_34 $$ byte[] buff = new byte[256]-->Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) [ FD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_37 $$ makeBuffer(buff, readLength)[ CD ]
Line_34 $$ byte[] buff = new byte[256]-->Line_37 $$ makeBuffer(buff, readLength)[ FD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_37 $$ makeBuffer(buff, readLength)[ FD ]
Line_35 $$ int readLength = 0-->Line_37 $$ makeBuffer(buff, readLength)[ FD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_38 $$ dos.write(buff, 0, readLength)[ CD ]
Line_4 $$ DataOutputStream dos = null-->Line_38 $$ dos.write(buff, 0, readLength)[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_38 $$ dos.write(buff, 0, readLength)[ FD ]
Line_34 $$ byte[] buff = new byte[256]-->Line_38 $$ dos.write(buff, 0, readLength)[ FD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_38 $$ dos.write(buff, 0, readLength)[ FD ]
Line_35 $$ int readLength = 0-->Line_38 $$ dos.write(buff, 0, readLength)[ FD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_40 $$ ftDis.close()[ CD ]
Line_33 $$ DataInputStream ftDis = new DataInputStream(ftFis)-->Line_40 $$ ftDis.close()[ FD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_41 $$ ftFis.close()[ CD ]
Line_32 $$ FileInputStream ftFis = new FileInputStream(ftFile)-->Line_41 $$ ftFis.close()[ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_46 $$ if (dos != null) [ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_46 $$ if (dos != null) [ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_48 $$ dos.close()[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_48 $$ dos.close()[ FD ]
Line_4 $$ DataOutputStream dos = null-->Line_49 $$ dos = null[ FD ]
Line_20 $$ dos = new DataOutputStream(os)-->Line_49 $$ dos = null[ FD ]
Line_49 $$ dos = null-->Line_49 $$ dos = null[ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) -->Line_8 $$ for (int i = 0; i < srcFilePath.length; i++) [ FD ]
Line_9 $$ String sourceFileName = FileUtils.getFileName(srcFilePath[i])-->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ FD ]
Line_10 $$ long sourceFileSize = FileUtils.getFileSize(srcFilePath[i])-->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ FD ]
Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)-->Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)[ FD ]
Line_10 $$ long sourceFileSize = FileUtils.getFileSize(srcFilePath[i])-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ FD ]
Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)-->Line_12 $$ fileOffset = outputNextOffset(sourceFileSize, fileOffset)[ FD ]
Line_11 $$ LPKTable ft = makeLPKTable(sourceFileName, sourceFileSize, fileOffset)-->Line_13 $$ fileTable[i] = ft[ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < fileTable.length; i++) -->Line_25 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < fileTable.length; i++) -->Line_30 $$ for (int i = 0; i < fileTable.length; i++) [ FD ]
Line_33 $$ DataInputStream ftDis = new DataInputStream(ftFis)-->Line_40 $$ ftDis.close()[ FD ]
Line_32 $$ FileInputStream ftFis = new FileInputStream(ftFile)-->Line_41 $$ ftFis.close()[ FD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_37 $$ makeBuffer(buff, readLength)[ FD ]
Line_36 $$ while ((readLength = ftDis.read(buff)) != -1) -->Line_38 $$ dos.write(buff, 0, readLength)[ FD ]
