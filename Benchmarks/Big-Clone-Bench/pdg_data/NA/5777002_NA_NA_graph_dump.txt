Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testJTLM_publish100() throws Exception [ CD ]
Line_2 $$ public void testJTLM_publish100() throws Exception -->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)[ CD ]
Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)-->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)[ CD ]
Line_2 $$ public void testJTLM_publish100() throws Exception -->Line_4 $$ Assert.assertEquals(0, m_compilerErrors.getTotalCount())[ CD ]
Line_2 $$ public void testJTLM_publish100() throws Exception -->Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS)[ CD ]
Line_2 $$ public void testJTLM_publish100() throws Exception -->Line_6 $$ AlignmentType[] alignments = new AlignmentType[] [ CD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_12 $$ encoder.setAlignmentType(alignment)[ FD ]
Line_7 $$ for (AlignmentType alignment : alignments) -->Line_12 $$ encoder.setAlignmentType(alignment)[ FD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_13 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_7 $$ for (AlignmentType alignment : alignments) -->Line_13 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_14 $$ encoder.setEXISchema(grammarCache)[ FD ]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS)-->Line_14 $$ encoder.setEXISchema(grammarCache)[ FD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_16 $$ encoder.setOutputStream(baos)[ FD ]
Line_15 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_16 $$ encoder.setOutputStream(baos)[ FD ]
Line_17 $$ URL url = resolveSystemIdAsURL("/JTLM/publish100.xml")-->Line_17 $$ URL url = resolveSystemIdAsURL("/JTLM/publish100.xml")[ CD ]
Line_11 $$ InputSource inputSource-->Line_18 $$ inputSource = new InputSource(url.toString())[ FD ]
Line_18 $$ inputSource = new InputSource(url.toString())-->Line_18 $$ inputSource = new InputSource(url.toString())[ FD ]
Line_17 $$ URL url = resolveSystemIdAsURL("/JTLM/publish100.xml")-->Line_18 $$ inputSource = new InputSource(url.toString())[ FD ]
Line_11 $$ InputSource inputSource-->Line_19 $$ inputSource.setByteStream(url.openStream())[ FD ]
Line_18 $$ inputSource = new InputSource(url.toString())-->Line_19 $$ inputSource.setByteStream(url.openStream())[ FD ]
Line_17 $$ URL url = resolveSystemIdAsURL("/JTLM/publish100.xml")-->Line_19 $$ inputSource.setByteStream(url.openStream())[ FD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_22 $$ encoder.encode(inputSource)[ FD ]
Line_11 $$ InputSource inputSource-->Line_22 $$ encoder.encode(inputSource)[ FD ]
Line_18 $$ inputSource = new InputSource(url.toString())-->Line_22 $$ encoder.encode(inputSource)[ FD ]
Line_20 $$ byte[] bts-->Line_23 $$ bts = baos.toByteArray()[ FD ]
Line_23 $$ bts = baos.toByteArray()-->Line_23 $$ bts = baos.toByteArray()[ FD ]
Line_23 $$ bts = baos.toByteArray()-->Line_23 $$ bts = baos.toByteArray()[ CD ]
Line_15 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_23 $$ bts = baos.toByteArray()[ FD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_24 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS)-->Line_24 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_25 $$ decoder.setInputStream(new ByteArrayInputStream(bts))[ FD ]
Line_10 $$ Scanner scanner-->Line_26 $$ scanner = decoder.processHeader()[ FD ]
Line_26 $$ scanner = decoder.processHeader()-->Line_26 $$ scanner = decoder.processHeader()[ FD ]
Line_26 $$ scanner = decoder.processHeader()-->Line_26 $$ scanner = decoder.processHeader()[ CD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_26 $$ scanner = decoder.processHeader()[ FD ]
Line_21 $$ int n_events, n_texts-->Line_29 $$ n_events = 0[ FD ]
Line_29 $$ n_events = 0-->Line_29 $$ n_events = 0[ FD ]
Line_21 $$ int n_events, n_texts-->Line_30 $$ n_texts = 0[ FD ]
Line_30 $$ n_texts = 0-->Line_30 $$ n_texts = 0[ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_28 $$ EXIEvent exiEvent-->Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) [ CD ]
Line_10 $$ Scanner scanner-->Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_26 $$ scanner = decoder.processHeader()-->Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_32 $$ ++n_events[ CD ]
Line_21 $$ int n_events, n_texts-->Line_32 $$ ++n_events[ FD ]
Line_29 $$ n_events = 0-->Line_32 $$ ++n_events[ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_33 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ CD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_33 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_28 $$ EXIEvent exiEvent-->Line_33 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_33 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_34 $$ if (n_texts % 100 == 0) [ CD ]
Line_34 $$ if (n_texts % 100 == 0) -->Line_35 $$ final int n = n_texts / 100[ CD ]
Line_34 $$ if (n_texts % 100 == 0) -->Line_36 $$ Assert.assertEquals(publish100_centennials[n], exiEvent.getCharacters().makeString())[ CD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_36 $$ Assert.assertEquals(publish100_centennials[n], exiEvent.getCharacters().makeString())[ FD ]
Line_28 $$ EXIEvent exiEvent-->Line_36 $$ Assert.assertEquals(publish100_centennials[n], exiEvent.getCharacters().makeString())[ FD ]
Line_33 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_38 $$ ++n_texts[ CD ]
Line_21 $$ int n_events, n_texts-->Line_38 $$ ++n_texts[ FD ]
Line_30 $$ n_texts = 0-->Line_38 $$ ++n_texts[ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_40 $$ exiEventList.add(exiEvent)[ CD ]
Line_27 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>()-->Line_40 $$ exiEventList.add(exiEvent)[ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_40 $$ exiEventList.add(exiEvent)[ FD ]
Line_28 $$ EXIEvent exiEvent-->Line_40 $$ exiEventList.add(exiEvent)[ FD ]
Line_21 $$ int n_events, n_texts-->Line_42 $$ Assert.assertEquals(10610, n_events)[ FD ]
Line_29 $$ n_events = 0-->Line_42 $$ Assert.assertEquals(10610, n_events)[ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_33 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_36 $$ Assert.assertEquals(publish100_centennials[n], exiEvent.getCharacters().makeString())[ FD ]
Line_31 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_40 $$ exiEventList.add(exiEvent)[ FD ]
