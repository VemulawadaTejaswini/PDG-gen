Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected InputStream transform(URL url) throws IOException [ CD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_3 $$ TransformerFactory tf = TransformerFactory.newInstance()[ CD ]
Line_3 $$ TransformerFactory tf = TransformerFactory.newInstance()-->Line_3 $$ TransformerFactory tf = TransformerFactory.newInstance()[ CD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_4 $$ InputStream xsl_is = null[ CD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_5 $$ InputStream url_is = null[ CD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_6 $$ ByteArrayOutputStream os = null[ CD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_7 $$ byte[] output[ CD ]
Line_4 $$ InputStream xsl_is = null-->Line_9 $$ xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet())[ FD ]
Line_9 $$ xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet())-->Line_9 $$ xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet())[ FD ]
Line_9 $$ xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet())-->Line_9 $$ xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet())[ CD ]
Line_5 $$ InputStream url_is = null-->Line_10 $$ url_is = new BufferedInputStream(url.openStream())[ FD ]
Line_10 $$ url_is = new BufferedInputStream(url.openStream())-->Line_10 $$ url_is = new BufferedInputStream(url.openStream())[ FD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_10 $$ url_is = new BufferedInputStream(url.openStream())[ FD ]
Line_6 $$ ByteArrayOutputStream os = null-->Line_11 $$ os = new ByteArrayOutputStream()[ FD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_11 $$ os = new ByteArrayOutputStream()[ FD ]
Line_12 $$ Transformer tr = tf.newTransformer(new StreamSource(xsl_is))-->Line_12 $$ Transformer tr = tf.newTransformer(new StreamSource(xsl_is))[ CD ]
Line_3 $$ TransformerFactory tf = TransformerFactory.newInstance()-->Line_12 $$ Transformer tr = tf.newTransformer(new StreamSource(xsl_is))[ FD ]
Line_12 $$ Transformer tr = tf.newTransformer(new StreamSource(xsl_is))-->Line_13 $$ tr.transform(new StreamSource(url_is), new StreamResult(os))[ FD ]
Line_7 $$ byte[] output-->Line_14 $$ output = os.toByteArray()[ FD ]
Line_14 $$ output = os.toByteArray()-->Line_14 $$ output = os.toByteArray()[ FD ]
Line_14 $$ output = os.toByteArray()-->Line_14 $$ output = os.toByteArray()[ CD ]
Line_6 $$ ByteArrayOutputStream os = null-->Line_14 $$ output = os.toByteArray()[ FD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_14 $$ output = os.toByteArray()[ FD ]
Line_6 $$ ByteArrayOutputStream os = null-->Line_21 $$ if (os != null)[ FD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_21 $$ if (os != null)[ FD ]
Line_21 $$ if (os != null)-->Line_21 $$ os.close()[ CD ]
Line_6 $$ ByteArrayOutputStream os = null-->Line_21 $$ os.close()[ FD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_21 $$ os.close()[ FD ]
Line_5 $$ InputStream url_is = null-->Line_25 $$ if (url_is != null)[ FD ]
Line_10 $$ url_is = new BufferedInputStream(url.openStream())-->Line_25 $$ if (url_is != null)[ FD ]
Line_25 $$ if (url_is != null)-->Line_25 $$ url_is.close()[ CD ]
Line_5 $$ InputStream url_is = null-->Line_25 $$ url_is.close()[ FD ]
Line_10 $$ url_is = new BufferedInputStream(url.openStream())-->Line_25 $$ url_is.close()[ FD ]
Line_4 $$ InputStream xsl_is = null-->Line_29 $$ if (xsl_is != null)[ FD ]
Line_9 $$ xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet())-->Line_29 $$ if (xsl_is != null)[ FD ]
Line_29 $$ if (xsl_is != null)-->Line_29 $$ xsl_is.close()[ CD ]
Line_4 $$ InputStream xsl_is = null-->Line_29 $$ xsl_is.close()[ FD ]
Line_9 $$ xsl_is = Classes.getThreadClassLoader().getResourceAsStream(getStylesheet())-->Line_29 $$ xsl_is.close()[ FD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_33 $$ if (logService.isEnabledFor(LogLevel.TRACE))[ CD ]
Line_33 $$ if (logService.isEnabledFor(LogLevel.TRACE))-->Line_33 $$ if (logService.isEnabledFor(LogLevel.TRACE))[ CD ]
Line_33 $$ if (logService.isEnabledFor(LogLevel.TRACE))-->Line_33 $$ logService.log(LogLevel.TRACE, new String(output))[ CD ]
Line_2 $$ protected InputStream transform(URL url) throws IOException -->Line_34 $$ return new ByteArrayInputStream(output)[ CD ]
