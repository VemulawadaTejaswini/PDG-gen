Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException [ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_3 $$ String[] entries = d.list()[ CD ]
Line_3 $$ String[] entries = d.list()-->Line_3 $$ String[] entries = d.list()[ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_3 $$ String[] entries = d.list()[ FD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_4 $$ byte[] buffer = new byte[4096][ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_5 $$ int bytesRead[ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_6 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(new File(d.getParent() + File.separator + "dist.zip")))[ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_6 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(new File(d.getParent() + File.separator + "dist.zip")))[ FD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException [ CD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ File f = new File(d, entries[i])[ CD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ if (f.isDirectory())[ CD ]
Line_8 $$ File f = new File(d, entries[i])-->Line_9 $$ if (f.isDirectory())[ FD ]
Line_9 $$ if (f.isDirectory())-->Line_9 $$ if (f.isDirectory())[ CD ]
Line_8 $$ File f = new File(d, entries[i])-->Line_9 $$ if (f.isDirectory())[ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_10 $$ FileInputStream in = new FileInputStream(f)[ CD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_11 $$ int skipl = d.getCanonicalPath().length()[ CD ]
Line_11 $$ int skipl = d.getCanonicalPath().length()-->Line_11 $$ int skipl = d.getCanonicalPath().length()[ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_11 $$ int skipl = d.getCanonicalPath().length()[ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath().substring(skipl))[ CD ]
Line_11 $$ int skipl = d.getCanonicalPath().length()-->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath().substring(skipl))[ FD ]
Line_8 $$ File f = new File(d, entries[i])-->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath().substring(skipl))[ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_13 $$ out.putNextEntry(entry)[ CD ]
Line_6 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(new File(d.getParent() + File.separator + "dist.zip")))-->Line_13 $$ out.putNextEntry(entry)[ FD ]
Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath().substring(skipl))-->Line_13 $$ out.putNextEntry(entry)[ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ CD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_5 $$ int bytesRead-->Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ CD ]
Line_10 $$ FileInputStream in = new FileInputStream(f)-->Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_4 $$ byte[] buffer = new byte[4096]-->Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_14 $$ out.write(buffer, 0, bytesRead)[ CD ]
Line_6 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(new File(d.getParent() + File.separator + "dist.zip")))-->Line_14 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_4 $$ byte[] buffer = new byte[4096]-->Line_14 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_14 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_5 $$ int bytesRead-->Line_14 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_15 $$ in.close()[ CD ]
Line_10 $$ FileInputStream in = new FileInputStream(f)-->Line_15 $$ in.close()[ FD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_17 $$ out.close()[ CD ]
Line_6 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(new File(d.getParent() + File.separator + "dist.zip")))-->Line_17 $$ out.close()[ FD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_18 $$ FileUtils.moveFile(new File(d.getParent() + File.separator + "dist.zip"), new File(d + File.separator + "dist.zip"))[ CD ]
Line_2 $$ private static void zip(File d) throws FileNotFoundException, IOException -->Line_18 $$ FileUtils.moveFile(new File(d.getParent() + File.separator + "dist.zip"), new File(d + File.separator + "dist.zip"))[ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_7 $$ for (int i = 0; i < entries.length; i++) -->Line_7 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_8 $$ File f = new File(d, entries[i])-->Line_9 $$ if (f.isDirectory())[ FD ]
Line_8 $$ File f = new File(d, entries[i])-->Line_9 $$ if (f.isDirectory())[ FD ]
Line_11 $$ int skipl = d.getCanonicalPath().length()-->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath().substring(skipl))[ FD ]
Line_8 $$ File f = new File(d, entries[i])-->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath().substring(skipl))[ FD ]
Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath().substring(skipl))-->Line_13 $$ out.putNextEntry(entry)[ FD ]
Line_10 $$ FileInputStream in = new FileInputStream(f)-->Line_15 $$ in.close()[ FD ]
Line_14 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_14 $$ out.write(buffer, 0, bytesRead)[ FD ]
