Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException [ CD ]
Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException -->Line_3 $$ ByteArrayOutputStream stream = new ByteArrayOutputStream()[ CD ]
Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException -->Line_4 $$ IOUtils.copy(in, stream)[ CD ]
Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException -->Line_4 $$ IOUtils.copy(in, stream)[ FD ]
Line_3 $$ ByteArrayOutputStream stream = new ByteArrayOutputStream()-->Line_4 $$ IOUtils.copy(in, stream)[ FD ]
Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException -->Line_5 $$ byte[] out = stream.toByteArray()[ CD ]
Line_5 $$ byte[] out = stream.toByteArray()-->Line_5 $$ byte[] out = stream.toByteArray()[ CD ]
Line_3 $$ ByteArrayOutputStream stream = new ByteArrayOutputStream()-->Line_5 $$ byte[] out = stream.toByteArray()[ FD ]
Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException -->Line_6 $$ if (all)[ CD ]
Line_6 $$ if (all)-->Line_6 $$ assertEquals(cmp.length, out.length)[ CD ]
Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException -->Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])[ CD ]
Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException -->Line_2 $$ private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException [ CD ]
Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])-->Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])[ CD ]
Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])-->Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])[ CD ]
Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])-->Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])[ FD ]
Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])-->Line_7 $$ assertEquals(cmp[i], out[i])[ CD ]
Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])-->Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])[ FD ]
Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])-->Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])[ FD ]
Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])-->Line_7 $$ for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i])[ FD ]
