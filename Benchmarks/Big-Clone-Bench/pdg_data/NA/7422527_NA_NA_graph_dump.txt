Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException [ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_3 $$ final String method = request.method[ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_4 $$ final String url = request.url.toExternalForm()[ CD ]
Line_4 $$ final String url = request.url.toExternalForm()-->Line_4 $$ final String url = request.url.toExternalForm()[ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_5 $$ final InputStream body = request.getBody()[ CD ]
Line_5 $$ final InputStream body = request.getBody()-->Line_5 $$ final InputStream body = request.getBody()[ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_5 $$ final InputStream body = request.getBody()[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_6 $$ final boolean isDelete = DELETE.equalsIgnoreCase(method)[ CD ]
Line_6 $$ final boolean isDelete = DELETE.equalsIgnoreCase(method)-->Line_6 $$ final boolean isDelete = DELETE.equalsIgnoreCase(method)[ CD ]
Line_3 $$ final String method = request.method-->Line_6 $$ final boolean isDelete = DELETE.equalsIgnoreCase(method)[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_7 $$ final boolean isPost = POST.equalsIgnoreCase(method)[ CD ]
Line_7 $$ final boolean isPost = POST.equalsIgnoreCase(method)-->Line_7 $$ final boolean isPost = POST.equalsIgnoreCase(method)[ CD ]
Line_3 $$ final String method = request.method-->Line_7 $$ final boolean isPost = POST.equalsIgnoreCase(method)[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_8 $$ final boolean isPut = PUT.equalsIgnoreCase(method)[ CD ]
Line_8 $$ final boolean isPut = PUT.equalsIgnoreCase(method)-->Line_8 $$ final boolean isPut = PUT.equalsIgnoreCase(method)[ CD ]
Line_3 $$ final String method = request.method-->Line_8 $$ final boolean isPut = PUT.equalsIgnoreCase(method)[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_9 $$ byte[] excerpt = null[ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_10 $$ HttpMethod httpMethod[ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_11 $$ if (isPost || isPut) [ CD ]
Line_7 $$ final boolean isPost = POST.equalsIgnoreCase(method)-->Line_11 $$ if (isPost || isPut) [ FD ]
Line_8 $$ final boolean isPut = PUT.equalsIgnoreCase(method)-->Line_11 $$ if (isPost || isPut) [ FD ]
Line_6 $$ final boolean isDelete = DELETE.equalsIgnoreCase(method)-->Line_11 $$ if (isPost || isPut) [ FD ]
Line_11 $$ if (isPost || isPut) -->Line_12 $$ EntityEnclosingMethod entityEnclosingMethod = isPost ? new PostMethod(url) : new PutMethod(url)[ CD ]
Line_11 $$ if (isPost || isPut) -->Line_13 $$ if (body != null) [ CD ]
Line_5 $$ final InputStream body = request.getBody()-->Line_13 $$ if (body != null) [ FD ]
Line_13 $$ if (body != null) -->Line_14 $$ ExcerptInputStream e = new ExcerptInputStream(body)[ CD ]
Line_13 $$ if (body != null) -->Line_15 $$ String length = request.removeHeaders(HttpMessage.CONTENT_LENGTH)[ CD ]
Line_15 $$ String length = request.removeHeaders(HttpMessage.CONTENT_LENGTH)-->Line_15 $$ String length = request.removeHeaders(HttpMessage.CONTENT_LENGTH)[ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_15 $$ String length = request.removeHeaders(HttpMessage.CONTENT_LENGTH)[ FD ]
Line_13 $$ if (body != null) -->Line_16 $$ entityEnclosingMethod.setRequestEntity((length == null) ? new InputStreamRequestEntity(e) : new InputStreamRequestEntity(e, Long.parseLong(length)))[ CD ]
Line_12 $$ EntityEnclosingMethod entityEnclosingMethod = isPost ? new PostMethod(url) : new PutMethod(url)-->Line_16 $$ entityEnclosingMethod.setRequestEntity((length == null) ? new InputStreamRequestEntity(e) : new InputStreamRequestEntity(e, Long.parseLong(length)))[ FD ]
Line_15 $$ String length = request.removeHeaders(HttpMessage.CONTENT_LENGTH)-->Line_16 $$ entityEnclosingMethod.setRequestEntity((length == null) ? new InputStreamRequestEntity(e) : new InputStreamRequestEntity(e, Long.parseLong(length)))[ FD ]
Line_13 $$ if (body != null) -->Line_17 $$ excerpt = e.getExcerpt()[ CD ]
Line_9 $$ byte[] excerpt = null-->Line_17 $$ excerpt = e.getExcerpt()[ FD ]
Line_17 $$ excerpt = e.getExcerpt()-->Line_17 $$ excerpt = e.getExcerpt()[ FD ]
Line_17 $$ excerpt = e.getExcerpt()-->Line_17 $$ excerpt = e.getExcerpt()[ CD ]
Line_14 $$ ExcerptInputStream e = new ExcerptInputStream(body)-->Line_17 $$ excerpt = e.getExcerpt()[ FD ]
Line_11 $$ if (isPost || isPut) -->Line_19 $$ httpMethod = entityEnclosingMethod[ CD ]
Line_10 $$ HttpMethod httpMethod-->Line_19 $$ httpMethod = entityEnclosingMethod[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_19 $$ httpMethod = entityEnclosingMethod[ FD ]
Line_12 $$ EntityEnclosingMethod entityEnclosingMethod = isPost ? new PostMethod(url) : new PutMethod(url)-->Line_19 $$ httpMethod = entityEnclosingMethod[ FD ]
Line_11 $$ if (isPost || isPut) -->Line_20 $$ if (isDelete) [ CD ]
Line_20 $$ if (isDelete) -->Line_21 $$ httpMethod = new DeleteMethod(url)[ CD ]
Line_10 $$ HttpMethod httpMethod-->Line_21 $$ httpMethod = new DeleteMethod(url)[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_21 $$ httpMethod = new DeleteMethod(url)[ FD ]
Line_21 $$ httpMethod = new DeleteMethod(url)-->Line_21 $$ httpMethod = new DeleteMethod(url)[ FD ]
Line_20 $$ if (isDelete) -->Line_23 $$ httpMethod = new GetMethod(url)[ CD ]
Line_10 $$ HttpMethod httpMethod-->Line_23 $$ httpMethod = new GetMethod(url)[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_23 $$ httpMethod = new GetMethod(url)[ FD ]
Line_21 $$ httpMethod = new DeleteMethod(url)-->Line_23 $$ httpMethod = new GetMethod(url)[ FD ]
Line_23 $$ httpMethod = new GetMethod(url)-->Line_23 $$ httpMethod = new GetMethod(url)[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_25 $$ for (Map.Entry<String, Object> p : parameters.entrySet()) [ FD ]
Line_26 $$ String name = p.getKey()-->Line_26 $$ String name = p.getKey()[ CD ]
Line_25 $$ for (Map.Entry<String, Object> p : parameters.entrySet()) -->Line_26 $$ String name = p.getKey()[ FD ]
Line_27 $$ String value = p.getValue().toString()-->Line_27 $$ String value = p.getValue().toString()[ CD ]
Line_25 $$ for (Map.Entry<String, Object> p : parameters.entrySet()) -->Line_27 $$ String value = p.getValue().toString()[ FD ]
Line_26 $$ String name = p.getKey()-->Line_28 $$ if (FOLLOW_REDIRECTS.equals(name)) [ FD ]
Line_28 $$ if (FOLLOW_REDIRECTS.equals(name)) -->Line_28 $$ if (FOLLOW_REDIRECTS.equals(name)) [ CD ]
Line_26 $$ String name = p.getKey()-->Line_28 $$ if (FOLLOW_REDIRECTS.equals(name)) [ FD ]
Line_28 $$ if (FOLLOW_REDIRECTS.equals(name)) -->Line_29 $$ httpMethod.setFollowRedirects(Boolean.parseBoolean(value))[ CD ]
Line_10 $$ HttpMethod httpMethod-->Line_29 $$ httpMethod.setFollowRedirects(Boolean.parseBoolean(value))[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_29 $$ httpMethod.setFollowRedirects(Boolean.parseBoolean(value))[ FD ]
Line_21 $$ httpMethod = new DeleteMethod(url)-->Line_29 $$ httpMethod.setFollowRedirects(Boolean.parseBoolean(value))[ FD ]
Line_23 $$ httpMethod = new GetMethod(url)-->Line_29 $$ httpMethod.setFollowRedirects(Boolean.parseBoolean(value))[ FD ]
Line_27 $$ String value = p.getValue().toString()-->Line_29 $$ httpMethod.setFollowRedirects(Boolean.parseBoolean(value))[ FD ]
Line_28 $$ if (FOLLOW_REDIRECTS.equals(name)) -->Line_30 $$ if (READ_TIMEOUT.equals(name)) [ CD ]
Line_26 $$ String name = p.getKey()-->Line_30 $$ if (READ_TIMEOUT.equals(name)) [ FD ]
Line_30 $$ if (READ_TIMEOUT.equals(name)) -->Line_30 $$ if (READ_TIMEOUT.equals(name)) [ CD ]
Line_26 $$ String name = p.getKey()-->Line_30 $$ if (READ_TIMEOUT.equals(name)) [ FD ]
Line_30 $$ if (READ_TIMEOUT.equals(name)) -->Line_31 $$ httpMethod.getParams().setIntParameter(HttpMethodParams.SO_TIMEOUT, Integer.parseInt(value))[ CD ]
Line_10 $$ HttpMethod httpMethod-->Line_31 $$ httpMethod.getParams().setIntParameter(HttpMethodParams.SO_TIMEOUT, Integer.parseInt(value))[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_31 $$ httpMethod.getParams().setIntParameter(HttpMethodParams.SO_TIMEOUT, Integer.parseInt(value))[ FD ]
Line_21 $$ httpMethod = new DeleteMethod(url)-->Line_31 $$ httpMethod.getParams().setIntParameter(HttpMethodParams.SO_TIMEOUT, Integer.parseInt(value))[ FD ]
Line_23 $$ httpMethod = new GetMethod(url)-->Line_31 $$ httpMethod.getParams().setIntParameter(HttpMethodParams.SO_TIMEOUT, Integer.parseInt(value))[ FD ]
Line_27 $$ String value = p.getValue().toString()-->Line_31 $$ httpMethod.getParams().setIntParameter(HttpMethodParams.SO_TIMEOUT, Integer.parseInt(value))[ FD ]
Line_10 $$ HttpMethod httpMethod-->Line_35 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_35 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_21 $$ httpMethod = new DeleteMethod(url)-->Line_35 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_23 $$ httpMethod = new GetMethod(url)-->Line_35 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_34 $$ for (Map.Entry<String, String> header : request.headers) -->Line_35 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_34 $$ for (Map.Entry<String, String> header : request.headers) -->Line_35 $$ httpMethod.addRequestHeader(header.getKey(), header.getValue())[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))[ CD ]
Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))-->Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))[ CD ]
Line_10 $$ HttpMethod httpMethod-->Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))[ FD ]
Line_21 $$ httpMethod = new DeleteMethod(url)-->Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))[ FD ]
Line_23 $$ httpMethod = new GetMethod(url)-->Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_38 $$ client.executeMethod(httpMethod)[ CD ]
Line_37 $$ HttpClient client = clientPool.getHttpClient(new URL(httpMethod.getURI().toString()))-->Line_38 $$ client.executeMethod(httpMethod)[ FD ]
Line_10 $$ HttpMethod httpMethod-->Line_38 $$ client.executeMethod(httpMethod)[ FD ]
Line_19 $$ httpMethod = entityEnclosingMethod-->Line_38 $$ client.executeMethod(httpMethod)[ FD ]
Line_21 $$ httpMethod = new DeleteMethod(url)-->Line_38 $$ client.executeMethod(httpMethod)[ FD ]
Line_23 $$ httpMethod = new GetMethod(url)-->Line_38 $$ client.executeMethod(httpMethod)[ FD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_39 $$ return new HttpMethodResponse(httpMethod, excerpt, request.getContentCharset())[ CD ]
Line_2 $$ public HttpResponseMessage execute(HttpMessage request, Map<String, Object> parameters) throws IOException -->Line_39 $$ return new HttpMethodResponse(httpMethod, excerpt, request.getContentCharset())[ FD ]
