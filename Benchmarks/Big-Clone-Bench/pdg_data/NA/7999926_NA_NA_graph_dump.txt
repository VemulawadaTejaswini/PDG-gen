Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception [ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_3 $$ Object msg = e.getMessage()[ CD ]
Line_3 $$ Object msg = e.getMessage()-->Line_3 $$ Object msg = e.getMessage()[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_3 $$ Object msg = e.getMessage()[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_4 $$ if (!(msg instanceof HttpMessage) && !(msg instanceof HttpChunk)) [ CD ]
Line_4 $$ if (!(msg instanceof HttpMessage) && !(msg instanceof HttpChunk)) -->Line_5 $$ ctx.sendUpstream(e)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_5 $$ ctx.sendUpstream(e)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_5 $$ ctx.sendUpstream(e)[ FD ]
Line_4 $$ if (!(msg instanceof HttpMessage) && !(msg instanceof HttpChunk)) -->Line_6 $$ return[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_8 $$ HttpMessage currentMessage = this.currentMessage[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_9 $$ File localFile = this.file[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_10 $$ if (currentMessage == null) [ CD ]
Line_8 $$ HttpMessage currentMessage = this.currentMessage-->Line_10 $$ if (currentMessage == null) [ FD ]
Line_10 $$ if (currentMessage == null) -->Line_11 $$ HttpMessage m = (HttpMessage) msg[ CD ]
Line_10 $$ if (currentMessage == null) -->Line_12 $$ if (m.isChunked()) [ CD ]
Line_11 $$ HttpMessage m = (HttpMessage) msg-->Line_12 $$ if (m.isChunked()) [ FD ]
Line_12 $$ if (m.isChunked()) -->Line_12 $$ if (m.isChunked()) [ CD ]
Line_11 $$ HttpMessage m = (HttpMessage) msg-->Line_12 $$ if (m.isChunked()) [ FD ]
Line_12 $$ if (m.isChunked()) -->Line_13 $$ final String localName = UUID.randomUUID().toString()[ CD ]
Line_13 $$ final String localName = UUID.randomUUID().toString()-->Line_13 $$ final String localName = UUID.randomUUID().toString()[ CD ]
Line_12 $$ if (m.isChunked()) -->Line_14 $$ List<String> encodings = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING)[ CD ]
Line_14 $$ List<String> encodings = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING)-->Line_14 $$ List<String> encodings = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING)[ CD ]
Line_11 $$ HttpMessage m = (HttpMessage) msg-->Line_14 $$ List<String> encodings = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING)[ FD ]
Line_12 $$ if (m.isChunked()) -->Line_15 $$ encodings.remove(HttpHeaders.Values.CHUNKED)[ CD ]
Line_14 $$ List<String> encodings = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING)-->Line_15 $$ encodings.remove(HttpHeaders.Values.CHUNKED)[ FD ]
Line_12 $$ if (m.isChunked()) -->Line_16 $$ if (encodings.isEmpty()) [ CD ]
Line_14 $$ List<String> encodings = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING)-->Line_16 $$ if (encodings.isEmpty()) [ FD ]
Line_16 $$ if (encodings.isEmpty()) -->Line_16 $$ if (encodings.isEmpty()) [ CD ]
Line_14 $$ List<String> encodings = m.getHeaders(HttpHeaders.Names.TRANSFER_ENCODING)-->Line_16 $$ if (encodings.isEmpty()) [ FD ]
Line_16 $$ if (encodings.isEmpty()) -->Line_17 $$ m.removeHeader(HttpHeaders.Names.TRANSFER_ENCODING)[ CD ]
Line_11 $$ HttpMessage m = (HttpMessage) msg-->Line_17 $$ m.removeHeader(HttpHeaders.Names.TRANSFER_ENCODING)[ FD ]
Line_12 $$ if (m.isChunked()) -->Line_19 $$ this.currentMessage = m[ CD ]
Line_11 $$ HttpMessage m = (HttpMessage) msg-->Line_19 $$ this.currentMessage = m[ FD ]
Line_12 $$ if (m.isChunked()) -->Line_20 $$ this.file = new File(Play.tmpDir, localName)[ CD ]
Line_12 $$ if (m.isChunked()) -->Line_21 $$ this.out = new FileOutputStream(file, true)[ CD ]
Line_12 $$ if (m.isChunked()) -->Line_23 $$ ctx.sendUpstream(e)[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_23 $$ ctx.sendUpstream(e)[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_23 $$ ctx.sendUpstream(e)[ FD ]
Line_10 $$ if (currentMessage == null) -->Line_26 $$ final HttpChunk chunk = (HttpChunk) msg[ CD ]
Line_10 $$ if (currentMessage == null) -->Line_27 $$ if (maxContentLength != -1 && (localFile.length() > (maxContentLength - chunk.getContent().readableBytes()))) [ CD ]
Line_9 $$ File localFile = this.file-->Line_27 $$ if (maxContentLength != -1 && (localFile.length() > (maxContentLength - chunk.getContent().readableBytes()))) [ FD ]
Line_26 $$ final HttpChunk chunk = (HttpChunk) msg-->Line_27 $$ if (maxContentLength != -1 && (localFile.length() > (maxContentLength - chunk.getContent().readableBytes()))) [ FD ]
Line_27 $$ if (maxContentLength != -1 && (localFile.length() > (maxContentLength - chunk.getContent().readableBytes()))) -->Line_28 $$ currentMessage.setHeader(HttpHeaders.Names.WARNING, "play.netty.content.length.exceeded")[ CD ]
Line_8 $$ HttpMessage currentMessage = this.currentMessage-->Line_28 $$ currentMessage.setHeader(HttpHeaders.Names.WARNING, "play.netty.content.length.exceeded")[ FD ]
Line_27 $$ if (maxContentLength != -1 && (localFile.length() > (maxContentLength - chunk.getContent().readableBytes()))) -->Line_30 $$ IOUtils.copyLarge(new ChannelBufferInputStream(chunk.getContent()), this.out)[ CD ]
Line_26 $$ final HttpChunk chunk = (HttpChunk) msg-->Line_30 $$ IOUtils.copyLarge(new ChannelBufferInputStream(chunk.getContent()), this.out)[ FD ]
Line_27 $$ if (maxContentLength != -1 && (localFile.length() > (maxContentLength - chunk.getContent().readableBytes()))) -->Line_31 $$ if (chunk.isLast()) [ CD ]
Line_26 $$ final HttpChunk chunk = (HttpChunk) msg-->Line_31 $$ if (chunk.isLast()) [ FD ]
Line_31 $$ if (chunk.isLast()) -->Line_31 $$ if (chunk.isLast()) [ CD ]
Line_26 $$ final HttpChunk chunk = (HttpChunk) msg-->Line_31 $$ if (chunk.isLast()) [ FD ]
Line_31 $$ if (chunk.isLast()) -->Line_32 $$ this.out.flush()[ CD ]
Line_31 $$ if (chunk.isLast()) -->Line_33 $$ this.out.close()[ CD ]
Line_31 $$ if (chunk.isLast()) -->Line_34 $$ currentMessage.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(localFile.length()))[ CD ]
Line_8 $$ HttpMessage currentMessage = this.currentMessage-->Line_34 $$ currentMessage.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(localFile.length()))[ FD ]
Line_9 $$ File localFile = this.file-->Line_34 $$ currentMessage.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(localFile.length()))[ FD ]
Line_31 $$ if (chunk.isLast()) -->Line_35 $$ currentMessage.setContent(new FileChannelBuffer(localFile))[ CD ]
Line_8 $$ HttpMessage currentMessage = this.currentMessage-->Line_35 $$ currentMessage.setContent(new FileChannelBuffer(localFile))[ FD ]
Line_31 $$ if (chunk.isLast()) -->Line_36 $$ this.out = null[ CD ]
Line_31 $$ if (chunk.isLast()) -->Line_37 $$ this.currentMessage = null[ CD ]
Line_31 $$ if (chunk.isLast()) -->Line_38 $$ this.file = null[ CD ]
Line_31 $$ if (chunk.isLast()) -->Line_39 $$ Channels.fireMessageReceived(ctx, currentMessage, e.getRemoteAddress())[ CD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_39 $$ Channels.fireMessageReceived(ctx, currentMessage, e.getRemoteAddress())[ FD ]
Line_8 $$ HttpMessage currentMessage = this.currentMessage-->Line_39 $$ Channels.fireMessageReceived(ctx, currentMessage, e.getRemoteAddress())[ FD ]
Line_2 $$ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception -->Line_39 $$ Channels.fireMessageReceived(ctx, currentMessage, e.getRemoteAddress())[ FD ]
