Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void fillProductResult() [ CD ]
Line_2 $$ private void fillProductResult() -->Line_3 $$ this.ProductResult = new int[this.linearDim + 1][this.linearDim + 1][ CD ]
Line_2 $$ private void fillProductResult() -->Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) [ CD ]
Line_2 $$ private void fillProductResult() -->Line_2 $$ private void fillProductResult() [ CD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) [ CD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) [ CD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) [ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_5 $$ this.ProductResult[1][j] = j[ CD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_5 $$ this.ProductResult[1][j] = j[ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_6 $$ this.ProductResult[j][1] = j[ CD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_6 $$ this.ProductResult[j][1] = j[ FD ]
Line_2 $$ private void fillProductResult() -->Line_8 $$ int[] doubleSort = new int[2 * this.GradeCount - 1][ CD ]
Line_2 $$ private void fillProductResult() -->Line_9 $$ int permuteCounter = 0[ CD ]
Line_2 $$ private void fillProductResult() -->Line_10 $$ int doubleKey = 0[ CD ]
Line_2 $$ private void fillProductResult() -->Line_11 $$ int j = 2[ CD ]
Line_2 $$ private void fillProductResult() -->Line_12 $$ int k = 2[ CD ]
Line_2 $$ private void fillProductResult() -->Line_13 $$ int m = 1[ CD ]
Line_2 $$ private void fillProductResult() -->Line_14 $$ int n = 1[ CD ]
Line_2 $$ private void fillProductResult() -->Line_15 $$ int tempSort = 0[ CD ]
Line_2 $$ private void fillProductResult() -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ CD ]
Line_2 $$ private void fillProductResult() -->Line_2 $$ private void fillProductResult() [ CD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_11 $$ int j = 2-->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ CD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_11 $$ int j = 2-->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ CD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_11 $$ int j = 2-->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ CD ]
Line_12 $$ int k = 2-->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_12 $$ int k = 2-->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_12 $$ int k = 2-->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_18 $$ permuteCounter = 0[ CD ]
Line_18 $$ permuteCounter = 0-->Line_18 $$ permuteCounter = 0[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_18 $$ permuteCounter = 0[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_19 $$ doubleKey = 0[ CD ]
Line_19 $$ doubleKey = 0-->Line_19 $$ doubleKey = 0[ FD ]
Line_10 $$ int doubleKey = 0-->Line_19 $$ doubleKey = 0[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_13 $$ int m = 1-->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ CD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_13 $$ int m = 1-->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ CD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_13 $$ int m = 1-->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ CD ]
Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)-->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ CD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ FD ]
Line_11 $$ int j = 2-->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ FD ]
Line_13 $$ int m = 1-->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)[ CD ]
Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)-->Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)[ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)[ FD ]
Line_12 $$ int k = 2-->Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)[ FD ]
Line_13 $$ int m = 1-->Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_24 $$ m = 1[ CD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_24 $$ m = 1[ FD ]
Line_24 $$ m = 1-->Line_24 $$ m = 1[ FD ]
Line_13 $$ int m = 1-->Line_24 $$ m = 1[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ CD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_14 $$ int n = 1-->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ CD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_14 $$ int n = 1-->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ CD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_14 $$ int n = 1-->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_27 $$ if (doubleSort[n] > doubleSort[n + 1]) [ CD ]
Line_27 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_28 $$ tempSort = doubleSort[n][ CD ]
Line_28 $$ tempSort = doubleSort[n]-->Line_28 $$ tempSort = doubleSort[n][ FD ]
Line_15 $$ int tempSort = 0-->Line_28 $$ tempSort = doubleSort[n][ FD ]
Line_27 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_29 $$ doubleSort[n] = doubleSort[n + 1][ CD ]
Line_27 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_30 $$ doubleSort[n + 1] = tempSort[ CD ]
Line_28 $$ tempSort = doubleSort[n]-->Line_30 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_15 $$ int tempSort = 0-->Line_30 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_27 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_31 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) [ CD ]
Line_31 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) -->Line_31 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) [ CD ]
Line_31 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) -->Line_32 $$ permuteCounter += 1[ CD ]
Line_32 $$ permuteCounter += 1-->Line_32 $$ permuteCounter += 1[ FD ]
Line_18 $$ permuteCounter = 0-->Line_32 $$ permuteCounter += 1[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_32 $$ permuteCounter += 1[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_36 $$ n = 1[ CD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_36 $$ n = 1[ FD ]
Line_36 $$ n = 1-->Line_36 $$ n = 1[ FD ]
Line_14 $$ int n = 1-->Line_36 $$ n = 1[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_38 $$ m = 1[ CD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_38 $$ m = 1[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_38 $$ m = 1[ FD ]
Line_24 $$ m = 1-->Line_38 $$ m = 1[ FD ]
Line_38 $$ m = 1-->Line_38 $$ m = 1[ FD ]
Line_13 $$ int m = 1-->Line_38 $$ m = 1[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_39 $$ permuteCounter = permuteCounter % 2[ CD ]
Line_32 $$ permuteCounter += 1-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_32 $$ permuteCounter += 1-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_24 $$ m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_38 $$ m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_13 $$ int m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ CD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_24 $$ m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_38 $$ m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_13 $$ int m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ CD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_24 $$ m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_38 $$ m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_13 $$ int m = 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_41 $$ if (doubleSort[m] == 0)[ CD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_42 $$ if (doubleSort[m] == doubleSort[m + 1]) [ CD ]
Line_42 $$ if (doubleSort[m] == doubleSort[m + 1]) -->Line_43 $$ tempSort = doubleSort[m][ CD ]
Line_43 $$ tempSort = doubleSort[m]-->Line_43 $$ tempSort = doubleSort[m][ FD ]
Line_28 $$ tempSort = doubleSort[n]-->Line_43 $$ tempSort = doubleSort[m][ FD ]
Line_15 $$ int tempSort = 0-->Line_43 $$ tempSort = doubleSort[m][ FD ]
Line_42 $$ if (doubleSort[m] == doubleSort[m + 1]) -->Line_44 $$ doubleSort[m] = 0[ CD ]
Line_42 $$ if (doubleSort[m] == doubleSort[m + 1]) -->Line_45 $$ doubleSort[m + 1] = 0[ CD ]
Line_42 $$ if (doubleSort[m] == doubleSort[m + 1]) -->Line_46 $$ m += 1[ CD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_46 $$ m += 1[ FD ]
Line_46 $$ m += 1-->Line_46 $$ m += 1[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_46 $$ m += 1[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_46 $$ m += 1[ FD ]
Line_24 $$ m = 1-->Line_46 $$ m += 1[ FD ]
Line_38 $$ m = 1-->Line_46 $$ m += 1[ FD ]
Line_13 $$ int m = 1-->Line_46 $$ m += 1[ FD ]
Line_42 $$ if (doubleSort[m] == doubleSort[m + 1]) -->Line_47 $$ permuteCounter += intSignature[tempSort - 1][ CD ]
Line_47 $$ permuteCounter += intSignature[tempSort - 1]-->Line_47 $$ permuteCounter += intSignature[tempSort - 1][ FD ]
Line_32 $$ permuteCounter += 1-->Line_47 $$ permuteCounter += intSignature[tempSort - 1][ FD ]
Line_18 $$ permuteCounter = 0-->Line_47 $$ permuteCounter += intSignature[tempSort - 1][ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_47 $$ permuteCounter += intSignature[tempSort - 1][ FD ]
Line_9 $$ int permuteCounter = 0-->Line_47 $$ permuteCounter += intSignature[tempSort - 1][ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_50 $$ m = 1[ CD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_50 $$ m = 1[ FD ]
Line_46 $$ m += 1-->Line_50 $$ m = 1[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_50 $$ m = 1[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_50 $$ m = 1[ FD ]
Line_24 $$ m = 1-->Line_50 $$ m = 1[ FD ]
Line_38 $$ m = 1-->Line_50 $$ m = 1[ FD ]
Line_50 $$ m = 1-->Line_50 $$ m = 1[ FD ]
Line_13 $$ int m = 1-->Line_50 $$ m = 1[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_51 $$ permuteCounter = permuteCounter % 2[ CD ]
Line_47 $$ permuteCounter += intSignature[tempSort - 1]-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_32 $$ permuteCounter += 1-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_47 $$ permuteCounter += intSignature[tempSort - 1]-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_32 $$ permuteCounter += 1-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ CD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_36 $$ n = 1-->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_14 $$ int n = 1-->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ CD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_36 $$ n = 1-->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_14 $$ int n = 1-->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ CD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_36 $$ n = 1-->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_14 $$ int n = 1-->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_54 $$ if (doubleSort[n] > doubleSort[n + 1]) [ CD ]
Line_54 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_55 $$ tempSort = doubleSort[n][ CD ]
Line_55 $$ tempSort = doubleSort[n]-->Line_55 $$ tempSort = doubleSort[n][ FD ]
Line_43 $$ tempSort = doubleSort[m]-->Line_55 $$ tempSort = doubleSort[n][ FD ]
Line_28 $$ tempSort = doubleSort[n]-->Line_55 $$ tempSort = doubleSort[n][ FD ]
Line_15 $$ int tempSort = 0-->Line_55 $$ tempSort = doubleSort[n][ FD ]
Line_54 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_56 $$ doubleSort[n] = doubleSort[n + 1][ CD ]
Line_54 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_57 $$ doubleSort[n + 1] = tempSort[ CD ]
Line_55 $$ tempSort = doubleSort[n]-->Line_57 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_43 $$ tempSort = doubleSort[m]-->Line_57 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_28 $$ tempSort = doubleSort[n]-->Line_57 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_15 $$ int tempSort = 0-->Line_57 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_54 $$ if (doubleSort[n] > doubleSort[n + 1]) -->Line_58 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) [ CD ]
Line_58 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) -->Line_58 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) [ CD ]
Line_58 $$ if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) -->Line_59 $$ permuteCounter += 1[ CD ]
Line_59 $$ permuteCounter += 1-->Line_59 $$ permuteCounter += 1[ FD ]
Line_47 $$ permuteCounter += intSignature[tempSort - 1]-->Line_59 $$ permuteCounter += 1[ FD ]
Line_32 $$ permuteCounter += 1-->Line_59 $$ permuteCounter += 1[ FD ]
Line_18 $$ permuteCounter = 0-->Line_59 $$ permuteCounter += 1[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_59 $$ permuteCounter += 1[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_59 $$ permuteCounter += 1[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_59 $$ permuteCounter += 1[ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_63 $$ n = 1[ CD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_63 $$ n = 1[ FD ]
Line_63 $$ n = 1-->Line_63 $$ n = 1[ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_63 $$ n = 1[ FD ]
Line_36 $$ n = 1-->Line_63 $$ n = 1[ FD ]
Line_14 $$ int n = 1-->Line_63 $$ n = 1[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_65 $$ m = 1[ CD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_65 $$ m = 1[ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_65 $$ m = 1[ FD ]
Line_46 $$ m += 1-->Line_65 $$ m = 1[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_65 $$ m = 1[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_65 $$ m = 1[ FD ]
Line_24 $$ m = 1-->Line_65 $$ m = 1[ FD ]
Line_38 $$ m = 1-->Line_65 $$ m = 1[ FD ]
Line_50 $$ m = 1-->Line_65 $$ m = 1[ FD ]
Line_65 $$ m = 1-->Line_65 $$ m = 1[ FD ]
Line_13 $$ int m = 1-->Line_65 $$ m = 1[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_66 $$ permuteCounter = permuteCounter % 2[ CD ]
Line_59 $$ permuteCounter += 1-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_47 $$ permuteCounter += intSignature[tempSort - 1]-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_32 $$ permuteCounter += 1-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_66 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_59 $$ permuteCounter += 1-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_47 $$ permuteCounter += intSignature[tempSort - 1]-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_32 $$ permuteCounter += 1-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_66 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_65 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_65 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ CD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_65 $$ m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_68 $$ doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m)[ CD ]
Line_68 $$ doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m)-->Line_68 $$ doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m)[ FD ]
Line_19 $$ doubleKey = 0-->Line_68 $$ doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m)[ FD ]
Line_10 $$ int doubleKey = 0-->Line_68 $$ doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m)[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_70 $$ m = 1[ CD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_70 $$ m = 1[ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_70 $$ m = 1[ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_70 $$ m = 1[ FD ]
Line_46 $$ m += 1-->Line_70 $$ m = 1[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_70 $$ m = 1[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_70 $$ m = 1[ FD ]
Line_24 $$ m = 1-->Line_70 $$ m = 1[ FD ]
Line_38 $$ m = 1-->Line_70 $$ m = 1[ FD ]
Line_50 $$ m = 1-->Line_70 $$ m = 1[ FD ]
Line_65 $$ m = 1-->Line_70 $$ m = 1[ FD ]
Line_70 $$ m = 1-->Line_70 $$ m = 1[ FD ]
Line_13 $$ int m = 1-->Line_70 $$ m = 1[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_71 $$ this.ProductResult[j][k] = 0[ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ CD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_65 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_70 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ CD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_65 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_70 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ CD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_46 $$ m += 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_24 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_38 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_50 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_65 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_70 $$ m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_13 $$ int m = 1-->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ CD ]
Line_68 $$ doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m)-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_19 $$ doubleKey = 0-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_10 $$ int doubleKey = 0-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_46 $$ m += 1-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_24 $$ m = 1-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_38 $$ m = 1-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_50 $$ m = 1-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_65 $$ m = 1-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_70 $$ m = 1-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_13 $$ int m = 1-->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ CD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_46 $$ m += 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_24 $$ m = 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_38 $$ m = 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_50 $$ m = 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_65 $$ m = 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_70 $$ m = 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_13 $$ int m = 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_59 $$ permuteCounter += 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_47 $$ permuteCounter += intSignature[tempSort - 1]-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_32 $$ permuteCounter += 1-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_18 $$ permuteCounter = 0-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_66 $$ permuteCounter = permuteCounter % 2-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_9 $$ int permuteCounter = 0-->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_78 $$ m = 1[ CD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_78 $$ m = 1[ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_78 $$ m = 1[ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_78 $$ m = 1[ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_78 $$ m = 1[ FD ]
Line_46 $$ m += 1-->Line_78 $$ m = 1[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_78 $$ m = 1[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_78 $$ m = 1[ FD ]
Line_24 $$ m = 1-->Line_78 $$ m = 1[ FD ]
Line_38 $$ m = 1-->Line_78 $$ m = 1[ FD ]
Line_50 $$ m = 1-->Line_78 $$ m = 1[ FD ]
Line_65 $$ m = 1-->Line_78 $$ m = 1[ FD ]
Line_70 $$ m = 1-->Line_78 $$ m = 1[ FD ]
Line_78 $$ m = 1-->Line_78 $$ m = 1[ FD ]
Line_13 $$ int m = 1-->Line_78 $$ m = 1[ FD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_80 $$ k = 2[ CD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_80 $$ k = 2[ FD ]
Line_80 $$ k = 2-->Line_80 $$ k = 2[ FD ]
Line_12 $$ int k = 2-->Line_80 $$ k = 2[ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) [ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) [ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) [ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_5 $$ this.ProductResult[1][j] = j[ FD ]
Line_4 $$ for (int j = 1; j < this.linearDim + 1; j++) -->Line_6 $$ this.ProductResult[j][1] = j[ FD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) -->Line_16 $$ for (j = 2; j < this.linearDim + 1; j++) [ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) -->Line_17 $$ for (k = 2; k < this.linearDim + 1; k++) [ FD ]
Line_18 $$ permuteCounter = 0-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_66 $$ permuteCounter = permuteCounter % 2-->Line_39 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_66 $$ permuteCounter = permuteCounter % 2-->Line_51 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_18 $$ permuteCounter = 0-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_39 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_51 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_66 $$ permuteCounter = permuteCounter % 2-->Line_66 $$ permuteCounter = permuteCounter % 2[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_20 $$ for (m = 1; m < this.GradeCount; m++) [ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_21 $$ doubleSort[m] = this.ABasis.getBasis(j, m)[ FD ]
Line_20 $$ for (m = 1; m < this.GradeCount; m++) -->Line_22 $$ doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m)[ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_25 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_26 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_28 $$ tempSort = doubleSort[n]-->Line_30 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_46 $$ m += 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_46 $$ m += 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) -->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_46 $$ m += 1-->Line_40 $$ for (m = 1; m < 2 * this.GradeCount - 2; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_52 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) -->Line_53 $$ for (n = 1; n < 2 * this.GradeCount - 2; n++) [ FD ]
Line_55 $$ tempSort = doubleSort[n]-->Line_57 $$ doubleSort[n + 1] = tempSort[ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) -->Line_67 $$ for (m = 1; m < 2 * this.GradeCount - 1; m++) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_73 $$ if (doubleKey == this.ABasis.getBasisKey(m)) [ FD ]
Line_72 $$ for (m = 1; m < this.linearDim + 1; m++) -->Line_74 $$ this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter)[ FD ]
