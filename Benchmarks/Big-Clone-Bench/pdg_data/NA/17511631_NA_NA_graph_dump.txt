Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException [ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_3 $$ File desf = new File(desDir)[ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_4 $$ if (!desf.exists()) [ CD ]
Line_4 $$ if (!desf.exists()) -->Line_4 $$ if (!desf.exists()) [ CD ]
Line_4 $$ if (!desf.exists()) -->Line_4 $$ if (!desf.exists()) [ CD ]
Line_3 $$ File desf = new File(desDir)-->Line_4 $$ if (!desf.exists()) [ FD ]
Line_4 $$ if (!desf.exists()) -->Line_5 $$ desf.mkdirs()[ CD ]
Line_3 $$ File desf = new File(desDir)-->Line_5 $$ desf.mkdirs()[ FD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_7 $$ int start = 1[ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_8 $$ if (null != startDirLevel && startDirLevel.length > 0) [ CD ]
Line_8 $$ if (null != startDirLevel && startDirLevel.length > 0) -->Line_9 $$ start = startDirLevel[0][ CD ]
Line_7 $$ int start = 1-->Line_9 $$ start = startDirLevel[0][ FD ]
Line_9 $$ start = startDirLevel[0]-->Line_9 $$ start = startDirLevel[0][ FD ]
Line_8 $$ if (null != startDirLevel && startDirLevel.length > 0) -->Line_10 $$ if (start < 1) [ CD ]
Line_7 $$ int start = 1-->Line_10 $$ if (start < 1) [ FD ]
Line_9 $$ start = startDirLevel[0]-->Line_10 $$ if (start < 1) [ FD ]
Line_10 $$ if (start < 1) -->Line_11 $$ start = 1[ CD ]
Line_7 $$ int start = 1-->Line_11 $$ start = 1[ FD ]
Line_9 $$ start = startDirLevel[0]-->Line_11 $$ start = 1[ FD ]
Line_11 $$ start = 1-->Line_11 $$ start = 1[ FD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_14 $$ String startDir = ""[ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_15 $$ String zeName = zipEntry.getName()[ CD ]
Line_15 $$ String zeName = zipEntry.getName()-->Line_15 $$ String zeName = zipEntry.getName()[ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_15 $$ String zeName = zipEntry.getName()[ FD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_16 $$ String folder = zeName[ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_17 $$ boolean isDir = zipEntry.isDirectory()[ CD ]
Line_17 $$ boolean isDir = zipEntry.isDirectory()-->Line_17 $$ boolean isDir = zipEntry.isDirectory()[ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_17 $$ boolean isDir = zipEntry.isDirectory()[ FD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_18 $$ if (null != folder) [ CD ]
Line_16 $$ String folder = zeName-->Line_18 $$ if (null != folder) [ FD ]
Line_18 $$ if (null != folder) -->Line_19 $$ String[] folders = folder.split("\\/")[ CD ]
Line_19 $$ String[] folders = folder.split("\\/")-->Line_19 $$ String[] folders = folder.split("\\/")[ CD ]
Line_16 $$ String folder = zeName-->Line_19 $$ String[] folders = folder.split("\\/")[ FD ]
Line_18 $$ if (null != folder) -->Line_20 $$ if (null != folders && folders.length > 0) [ CD ]
Line_20 $$ if (null != folders && folders.length > 0) -->Line_21 $$ int len = folders.length[ CD ]
Line_20 $$ if (null != folders && folders.length > 0) -->Line_22 $$ if (start == 1) [ CD ]
Line_7 $$ int start = 1-->Line_22 $$ if (start == 1) [ FD ]
Line_9 $$ start = startDirLevel[0]-->Line_22 $$ if (start == 1) [ FD ]
Line_11 $$ start = 1-->Line_22 $$ if (start == 1) [ FD ]
Line_22 $$ if (start == 1) -->Line_23 $$ startDir = zeName[ CD ]
Line_14 $$ String startDir = ""-->Line_23 $$ startDir = zeName[ FD ]
Line_23 $$ startDir = zeName-->Line_23 $$ startDir = zeName[ FD ]
Line_15 $$ String zeName = zipEntry.getName()-->Line_23 $$ startDir = zeName[ FD ]
Line_22 $$ if (start == 1) -->Line_25 $$ if (start > len) [ CD ]
Line_7 $$ int start = 1-->Line_25 $$ if (start > len) [ FD ]
Line_9 $$ start = startDirLevel[0]-->Line_25 $$ if (start > len) [ FD ]
Line_11 $$ start = 1-->Line_25 $$ if (start > len) [ FD ]
Line_21 $$ int len = folders.length-->Line_25 $$ if (start > len) [ FD ]
Line_25 $$ if (start > len) -->Line_27 $$ for (int i = start - 1; i < len; i++) [ CD ]
Line_25 $$ if (start > len) -->Line_25 $$ if (start > len) [ CD ]
Line_21 $$ int len = folders.length-->Line_27 $$ for (int i = start - 1; i < len; i++) [ FD ]
Line_27 $$ for (int i = start - 1; i < len; i++) -->Line_27 $$ for (int i = start - 1; i < len; i++) [ CD ]
Line_27 $$ for (int i = start - 1; i < len; i++) -->Line_27 $$ for (int i = start - 1; i < len; i++) [ CD ]
Line_27 $$ for (int i = start - 1; i < len; i++) -->Line_27 $$ for (int i = start - 1; i < len; i++) [ FD ]
Line_27 $$ for (int i = start - 1; i < len; i++) -->Line_28 $$ startDir += "/" + folders[i][ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_28 $$ startDir += "/" + folders[i][ FD ]
Line_14 $$ String startDir = ""-->Line_28 $$ startDir += "/" + folders[i][ FD ]
Line_23 $$ startDir = zeName-->Line_28 $$ startDir += "/" + folders[i][ FD ]
Line_25 $$ if (start > len) -->Line_30 $$ if (null != startDir) [ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_30 $$ if (null != startDir) [ FD ]
Line_14 $$ String startDir = ""-->Line_30 $$ if (null != startDir) [ FD ]
Line_23 $$ startDir = zeName-->Line_30 $$ if (null != startDir) [ FD ]
Line_30 $$ if (null != startDir) -->Line_31 $$ startDir = startDir.substring(1)[ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_14 $$ String startDir = ""-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_23 $$ startDir = zeName-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_31 $$ startDir = startDir.substring(1)[ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_14 $$ String startDir = ""-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_23 $$ startDir = zeName-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_31 $$ startDir = startDir.substring(1)[ FD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_37 $$ startDir = StringUtils.trim(startDir)[ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_14 $$ String startDir = ""-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_23 $$ startDir = zeName-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_37 $$ startDir = StringUtils.trim(startDir)-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_37 $$ startDir = StringUtils.trim(startDir)-->Line_37 $$ startDir = StringUtils.trim(startDir)[ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_14 $$ String startDir = ""-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_23 $$ startDir = zeName-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_37 $$ startDir = StringUtils.trim(startDir)-->Line_37 $$ startDir = StringUtils.trim(startDir)[ FD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_14 $$ String startDir = ""-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_23 $$ startDir = zeName-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_37 $$ startDir = StringUtils.trim(startDir)-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_38 $$ if (StringUtils.isNotEmpty(startDir)) -->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_14 $$ String startDir = ""-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_23 $$ startDir = zeName-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_37 $$ startDir = StringUtils.trim(startDir)-->Line_38 $$ if (StringUtils.isNotEmpty(startDir)) [ FD ]
Line_38 $$ if (StringUtils.isNotEmpty(startDir)) -->Line_39 $$ StringBuilder desFileName = new StringBuilder(desDir)[ CD ]
Line_38 $$ if (StringUtils.isNotEmpty(startDir)) -->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ CD ]
Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) -->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ FD ]
Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) -->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ CD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ FD ]
Line_14 $$ String startDir = ""-->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ FD ]
Line_23 $$ startDir = zeName-->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ FD ]
Line_37 $$ startDir = StringUtils.trim(startDir)-->Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) [ FD ]
Line_40 $$ if (!desDir.endsWith("/") && !startDir.startsWith("/")) -->Line_41 $$ desFileName.append("/")[ CD ]
Line_39 $$ StringBuilder desFileName = new StringBuilder(desDir)-->Line_41 $$ desFileName.append("/")[ FD ]
Line_38 $$ if (StringUtils.isNotEmpty(startDir)) -->Line_43 $$ desFileName.append(startDir)[ CD ]
Line_39 $$ StringBuilder desFileName = new StringBuilder(desDir)-->Line_43 $$ desFileName.append(startDir)[ FD ]
Line_28 $$ startDir += "/" + folders[i]-->Line_43 $$ desFileName.append(startDir)[ FD ]
Line_14 $$ String startDir = ""-->Line_43 $$ desFileName.append(startDir)[ FD ]
Line_23 $$ startDir = zeName-->Line_43 $$ desFileName.append(startDir)[ FD ]
Line_31 $$ startDir = startDir.substring(1)-->Line_43 $$ desFileName.append(startDir)[ FD ]
Line_37 $$ startDir = StringUtils.trim(startDir)-->Line_43 $$ desFileName.append(startDir)[ FD ]
Line_38 $$ if (StringUtils.isNotEmpty(startDir)) -->Line_44 $$ File destFile = new File(desFileName.toString())[ CD ]
Line_39 $$ StringBuilder desFileName = new StringBuilder(desDir)-->Line_44 $$ File destFile = new File(desFileName.toString())[ FD ]
Line_38 $$ if (StringUtils.isNotEmpty(startDir)) -->Line_45 $$ if (isDir) [ CD ]
Line_45 $$ if (isDir) -->Line_46 $$ if (!destFile.exists()) [ CD ]
Line_46 $$ if (!destFile.exists()) -->Line_46 $$ if (!destFile.exists()) [ CD ]
Line_46 $$ if (!destFile.exists()) -->Line_46 $$ if (!destFile.exists()) [ CD ]
Line_44 $$ File destFile = new File(desFileName.toString())-->Line_46 $$ if (!destFile.exists()) [ FD ]
Line_46 $$ if (!destFile.exists()) -->Line_47 $$ destFile.mkdirs()[ CD ]
Line_44 $$ File destFile = new File(desFileName.toString())-->Line_47 $$ destFile.mkdirs()[ FD ]
Line_45 $$ if (isDir) -->Line_50 $$ File parentDir = new File(destFile.getParentFile().getPath())[ CD ]
Line_44 $$ File destFile = new File(desFileName.toString())-->Line_50 $$ File parentDir = new File(destFile.getParentFile().getPath())[ FD ]
Line_45 $$ if (isDir) -->Line_51 $$ if (!parentDir.exists()) [ CD ]
Line_51 $$ if (!parentDir.exists()) -->Line_51 $$ if (!parentDir.exists()) [ CD ]
Line_51 $$ if (!parentDir.exists()) -->Line_51 $$ if (!parentDir.exists()) [ CD ]
Line_50 $$ File parentDir = new File(destFile.getParentFile().getPath())-->Line_51 $$ if (!parentDir.exists()) [ FD ]
Line_51 $$ if (!parentDir.exists()) -->Line_52 $$ parentDir.mkdirs()[ CD ]
Line_50 $$ File parentDir = new File(destFile.getParentFile().getPath())-->Line_52 $$ parentDir.mkdirs()[ FD ]
Line_45 $$ if (isDir) -->Line_54 $$ InputStream is = zf.getInputStream(zipEntry)[ CD ]
Line_54 $$ InputStream is = zf.getInputStream(zipEntry)-->Line_54 $$ InputStream is = zf.getInputStream(zipEntry)[ CD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_54 $$ InputStream is = zf.getInputStream(zipEntry)[ FD ]
Line_2 $$ private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException -->Line_54 $$ InputStream is = zf.getInputStream(zipEntry)[ FD ]
Line_45 $$ if (isDir) -->Line_55 $$ OutputStream os = new FileOutputStream(destFile)[ CD ]
Line_45 $$ if (isDir) -->Line_56 $$ IOUtils.copy(is, os)[ CD ]
Line_54 $$ InputStream is = zf.getInputStream(zipEntry)-->Line_56 $$ IOUtils.copy(is, os)[ FD ]
Line_55 $$ OutputStream os = new FileOutputStream(destFile)-->Line_56 $$ IOUtils.copy(is, os)[ FD ]
Line_45 $$ if (isDir) -->Line_57 $$ if (null != is) [ CD ]
Line_54 $$ InputStream is = zf.getInputStream(zipEntry)-->Line_57 $$ if (null != is) [ FD ]
Line_57 $$ if (null != is) -->Line_58 $$ is.close()[ CD ]
Line_54 $$ InputStream is = zf.getInputStream(zipEntry)-->Line_58 $$ is.close()[ FD ]
Line_45 $$ if (isDir) -->Line_60 $$ if (null != os) [ CD ]
Line_55 $$ OutputStream os = new FileOutputStream(destFile)-->Line_60 $$ if (null != os) [ FD ]
Line_60 $$ if (null != os) -->Line_61 $$ os.close()[ CD ]
Line_55 $$ OutputStream os = new FileOutputStream(destFile)-->Line_61 $$ os.close()[ FD ]
Line_27 $$ for (int i = start - 1; i < len; i++) -->Line_27 $$ for (int i = start - 1; i < len; i++) [ FD ]
Line_27 $$ for (int i = start - 1; i < len; i++) -->Line_27 $$ for (int i = start - 1; i < len; i++) [ FD ]
Line_27 $$ for (int i = start - 1; i < len; i++) -->Line_27 $$ for (int i = start - 1; i < len; i++) [ FD ]
