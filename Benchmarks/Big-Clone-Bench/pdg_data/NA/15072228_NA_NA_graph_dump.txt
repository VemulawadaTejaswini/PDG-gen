Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException [ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_3 $$ File currentSrcDir = sourceActionDirectory[ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_4 $$ File currentDestDir = destinationActionDirectory[ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_5 $$ String segment = ""[ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException [ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ CD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ CD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_7 $$ segment = segments.get(i)[ CD ]
Line_7 $$ segment = segments.get(i)-->Line_7 $$ segment = segments.get(i)[ FD ]
Line_5 $$ String segment = ""-->Line_7 $$ segment = segments.get(i)[ FD ]
Line_7 $$ segment = segments.get(i)-->Line_7 $$ segment = segments.get(i)[ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_7 $$ segment = segments.get(i)[ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_7 $$ segment = segments.get(i)[ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_8 $$ currentSrcDir = new File(currentSrcDir, segment)[ CD ]
Line_8 $$ currentSrcDir = new File(currentSrcDir, segment)-->Line_8 $$ currentSrcDir = new File(currentSrcDir, segment)[ FD ]
Line_3 $$ File currentSrcDir = sourceActionDirectory-->Line_8 $$ currentSrcDir = new File(currentSrcDir, segment)[ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_9 $$ currentDestDir = new File(currentDestDir, segment)[ CD ]
Line_9 $$ currentDestDir = new File(currentDestDir, segment)-->Line_9 $$ currentDestDir = new File(currentDestDir, segment)[ FD ]
Line_4 $$ File currentDestDir = destinationActionDirectory-->Line_9 $$ currentDestDir = new File(currentDestDir, segment)[ FD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_11 $$ if (currentSrcDir != null && currentDestDir != null) [ CD ]
Line_11 $$ if (currentSrcDir != null && currentDestDir != null) -->Line_12 $$ File srcFile = new File(currentSrcDir, segments.getLast())[ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_12 $$ File srcFile = new File(currentSrcDir, segments.getLast())[ FD ]
Line_11 $$ if (currentSrcDir != null && currentDestDir != null) -->Line_13 $$ if (srcFile.exists()) [ CD ]
Line_12 $$ File srcFile = new File(currentSrcDir, segments.getLast())-->Line_13 $$ if (srcFile.exists()) [ FD ]
Line_13 $$ if (srcFile.exists()) -->Line_13 $$ if (srcFile.exists()) [ CD ]
Line_12 $$ File srcFile = new File(currentSrcDir, segments.getLast())-->Line_13 $$ if (srcFile.exists()) [ FD ]
Line_13 $$ if (srcFile.exists()) -->Line_14 $$ File destFile = new File(currentDestDir, segments.getLast())[ CD ]
Line_2 $$ protected void createFile(File sourceActionDirectory, File destinationActionDirectory, LinkedList<String> segments) throws DuplicateActionFileException -->Line_14 $$ File destFile = new File(currentDestDir, segments.getLast())[ FD ]
Line_13 $$ if (srcFile.exists()) -->Line_15 $$ if (destFile.exists()) [ CD ]
Line_14 $$ File destFile = new File(currentDestDir, segments.getLast())-->Line_15 $$ if (destFile.exists()) [ FD ]
Line_15 $$ if (destFile.exists()) -->Line_15 $$ if (destFile.exists()) [ CD ]
Line_14 $$ File destFile = new File(currentDestDir, segments.getLast())-->Line_15 $$ if (destFile.exists()) [ FD ]
Line_12 $$ File srcFile = new File(currentSrcDir, segments.getLast())-->Line_16 $$ throw new DuplicateActionFileException(srcFile.toURI().toASCIIString())[ FD ]
Line_19 $$ FileChannel srcChannel = new FileInputStream(srcFile).getChannel()-->Line_19 $$ FileChannel srcChannel = new FileInputStream(srcFile).getChannel()[ CD ]
Line_20 $$ FileChannel destChannel = new FileOutputStream(destFile).getChannel()-->Line_20 $$ FileChannel destChannel = new FileOutputStream(destFile).getChannel()[ CD ]
Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size())-->Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size())[ CD ]
Line_19 $$ FileChannel srcChannel = new FileInputStream(srcFile).getChannel()-->Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size())[ FD ]
Line_19 $$ FileChannel srcChannel = new FileInputStream(srcFile).getChannel()-->Line_22 $$ while (srcChannel.position() < srcChannel.size()) [ FD ]
Line_19 $$ FileChannel srcChannel = new FileInputStream(srcFile).getChannel()-->Line_22 $$ while (srcChannel.position() < srcChannel.size()) [ FD ]
Line_22 $$ while (srcChannel.position() < srcChannel.size()) -->Line_23 $$ srcChannel.read(buffer)[ CD ]
Line_19 $$ FileChannel srcChannel = new FileInputStream(srcFile).getChannel()-->Line_23 $$ srcChannel.read(buffer)[ FD ]
Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size())-->Line_23 $$ srcChannel.read(buffer)[ FD ]
Line_19 $$ FileChannel srcChannel = new FileInputStream(srcFile).getChannel()-->Line_25 $$ srcChannel.close()[ FD ]
Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size())-->Line_26 $$ buffer.rewind()[ FD ]
Line_20 $$ FileChannel destChannel = new FileOutputStream(destFile).getChannel()-->Line_27 $$ destChannel.write(buffer)[ FD ]
Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) srcChannel.size())-->Line_27 $$ destChannel.write(buffer)[ FD ]
Line_20 $$ FileChannel destChannel = new FileOutputStream(destFile).getChannel()-->Line_28 $$ destChannel.close()[ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) [ FD ]
Line_6 $$ for (int i = 0; i < segments.size() - 1; i++) -->Line_7 $$ segment = segments.get(i)[ FD ]
