Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException [ CD ]
Line_2 $$ public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException -->Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)[ CD ]
Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)-->Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)[ CD ]
Line_2 $$ public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException -->Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)[ FD ]
Line_2 $$ public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException -->Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)[ FD ]
Line_2 $$ public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException -->Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)[ FD ]
Line_2 $$ public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException -->Line_4 $$ if (assessor.isFailure(resp)) [ CD ]
Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)-->Line_4 $$ if (assessor.isFailure(resp)) [ FD ]
Line_4 $$ if (assessor.isFailure(resp)) -->Line_4 $$ if (assessor.isFailure(resp)) [ CD ]
Line_3 $$ HttpResponse resp = backend.execute(host, req, ctx)-->Line_4 $$ if (assessor.isFailure(resp)) [ FD ]
Line_2 $$ public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException -->Line_7 $$ return resp[ CD ]
