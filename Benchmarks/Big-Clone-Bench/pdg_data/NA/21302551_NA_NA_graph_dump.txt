Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) [ CD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_3 $$ Parser p = new Parser()[ CD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_4 $$ javax.xml.parsers.DocumentBuilder db[ CD ]
Line_4 $$ javax.xml.parsers.DocumentBuilder db-->Line_6 $$ db = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder()[ FD ]
Line_6 $$ db = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder()-->Line_6 $$ db = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder()[ FD ]
Line_6 $$ db = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder()-->Line_6 $$ db = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder()[ CD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_11 $$ Document document = db.newDocument()[ CD ]
Line_11 $$ Document document = db.newDocument()-->Line_11 $$ Document document = db.newDocument()[ CD ]
Line_4 $$ javax.xml.parsers.DocumentBuilder db-->Line_11 $$ Document document = db.newDocument()[ FD ]
Line_6 $$ db = javax.xml.parsers.DocumentBuilderFactory.newInstance().newDocumentBuilder()-->Line_11 $$ Document document = db.newDocument()[ FD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_12 $$ InputStream is = htmlInputStream[ CD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_13 $$ if (log.isDebugEnabled()) [ CD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_13 $$ if (log.isDebugEnabled()) [ CD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_14 $$ ByteArrayOutputStream baos[ CD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_15 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_14 $$ ByteArrayOutputStream baos-->Line_15 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_15 $$ baos = new ByteArrayOutputStream()-->Line_15 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_12 $$ InputStream is = htmlInputStream-->Line_17 $$ IOUtils.copy(is, baos)[ FD ]
Line_14 $$ ByteArrayOutputStream baos-->Line_17 $$ IOUtils.copy(is, baos)[ FD ]
Line_15 $$ baos = new ByteArrayOutputStream()-->Line_17 $$ IOUtils.copy(is, baos)[ FD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_21 $$ IOUtils.closeQuietly(is)[ CD ]
Line_12 $$ InputStream is = htmlInputStream-->Line_21 $$ IOUtils.closeQuietly(is)[ FD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_22 $$ ByteArrayInputStream byteArrayInputStream[ CD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_23 $$ byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray())[ CD ]
Line_22 $$ ByteArrayInputStream byteArrayInputStream-->Line_23 $$ byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_23 $$ byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray())-->Line_23 $$ byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_14 $$ ByteArrayOutputStream baos-->Line_23 $$ byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_15 $$ baos = new ByteArrayOutputStream()-->Line_23 $$ byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_14 $$ ByteArrayOutputStream baos-->Line_25 $$ IOUtils.toString(new ByteArrayInputStream(baos.toByteArray()), "UTF-8")[ FD ]
Line_15 $$ baos = new ByteArrayOutputStream()-->Line_25 $$ IOUtils.toString(new ByteArrayInputStream(baos.toByteArray()), "UTF-8")[ FD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_29 $$ IOUtils.closeQuietly(byteArrayInputStream)[ CD ]
Line_22 $$ ByteArrayInputStream byteArrayInputStream-->Line_29 $$ IOUtils.closeQuietly(byteArrayInputStream)[ FD ]
Line_23 $$ byteArrayInputStream = new ByteArrayInputStream(baos.toByteArray())-->Line_29 $$ IOUtils.closeQuietly(byteArrayInputStream)[ FD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_30 $$ is = new ByteArrayInputStream(baos.toByteArray())[ CD ]
Line_12 $$ InputStream is = htmlInputStream-->Line_30 $$ is = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_30 $$ is = new ByteArrayInputStream(baos.toByteArray())-->Line_30 $$ is = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_14 $$ ByteArrayOutputStream baos-->Line_30 $$ is = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_15 $$ baos = new ByteArrayOutputStream()-->Line_30 $$ is = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_33 $$ InputSource iSource = new InputSource(is)-->Line_34 $$ iSource.setEncoding(encoding)[ FD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_34 $$ iSource.setEncoding(encoding)[ FD ]
Line_37 $$ Transformer xslTransformer = getTransformerByName(classpathXsltResource, false)-->Line_37 $$ Transformer xslTransformer = getTransformerByName(classpathXsltResource, false)[ CD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_37 $$ Transformer xslTransformer = getTransformerByName(classpathXsltResource, false)[ FD ]
Line_37 $$ Transformer xslTransformer = getTransformerByName(classpathXsltResource, false)-->Line_39 $$ xslTransformer.transform(transformerSource, result)[ FD ]
Line_35 $$ Source transformerSource = new SAXSource(p, iSource)-->Line_39 $$ xslTransformer.transform(transformerSource, result)[ FD ]
Line_36 $$ Result result = new DOMResult(document)-->Line_39 $$ xslTransformer.transform(transformerSource, result)[ FD ]
Line_12 $$ InputStream is = htmlInputStream-->Line_45 $$ is.close()[ FD ]
Line_30 $$ is = new ByteArrayInputStream(baos.toByteArray())-->Line_45 $$ is.close()[ FD ]
Line_2 $$ public static Document convertHtmlToXml(final InputStream htmlInputStream, final String classpathXsltResource, final String encoding) -->Line_50 $$ return document[ CD ]
