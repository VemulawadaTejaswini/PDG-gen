Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception [ CD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_3 $$ InputStream in = new ByteArrayInputStream(inData)[ CD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_4 $$ in = new YellOnCloseInputStreamTest(in)[ CD ]
Line_3 $$ InputStream in = new ByteArrayInputStream(inData)-->Line_4 $$ in = new YellOnCloseInputStreamTest(in)[ FD ]
Line_4 $$ in = new YellOnCloseInputStreamTest(in)-->Line_4 $$ in = new YellOnCloseInputStreamTest(in)[ FD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_5 $$ ByteArrayOutputStream baout = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_6 $$ OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true)[ CD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_7 $$ int count = IOUtils.copy(in, out)[ CD ]
Line_7 $$ int count = IOUtils.copy(in, out)-->Line_7 $$ int count = IOUtils.copy(in, out)[ CD ]
Line_3 $$ InputStream in = new ByteArrayInputStream(inData)-->Line_7 $$ int count = IOUtils.copy(in, out)[ FD ]
Line_4 $$ in = new YellOnCloseInputStreamTest(in)-->Line_7 $$ int count = IOUtils.copy(in, out)[ FD ]
Line_6 $$ OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true)-->Line_7 $$ int count = IOUtils.copy(in, out)[ FD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_8 $$ assertTrue("Not all bytes were read", in.available() == 0)[ CD ]
Line_3 $$ InputStream in = new ByteArrayInputStream(inData)-->Line_8 $$ assertTrue("Not all bytes were read", in.available() == 0)[ FD ]
Line_4 $$ in = new YellOnCloseInputStreamTest(in)-->Line_8 $$ assertTrue("Not all bytes were read", in.available() == 0)[ FD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_9 $$ assertEquals("Sizes differ", inData.length, baout.size())[ CD ]
Line_5 $$ ByteArrayOutputStream baout = new ByteArrayOutputStream()-->Line_9 $$ assertEquals("Sizes differ", inData.length, baout.size())[ FD ]
Line_2 $$ public void testCopy_inputStreamToOutputStream() throws Exception -->Line_10 $$ assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()))[ CD ]
Line_5 $$ ByteArrayOutputStream baout = new ByteArrayOutputStream()-->Line_10 $$ assertTrue("Content differs", Arrays.equals(inData, baout.toByteArray()))[ FD ]
