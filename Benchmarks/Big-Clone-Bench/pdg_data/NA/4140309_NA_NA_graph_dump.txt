Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) [ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_3 $$ final StringBuffer buffer = new StringBuffer()[ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_4 $$ MessageDigest digest = null[ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_5 $$ int size = 0[ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_6 $$ if ("SHA".equalsIgnoreCase(algorithm) || "SSHA".equalsIgnoreCase(algorithm)) [ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_6 $$ if ("SHA".equalsIgnoreCase(algorithm) || "SSHA".equalsIgnoreCase(algorithm)) [ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_6 $$ if ("SHA".equalsIgnoreCase(algorithm) || "SSHA".equalsIgnoreCase(algorithm)) [ FD ]
Line_6 $$ if ("SHA".equalsIgnoreCase(algorithm) || "SSHA".equalsIgnoreCase(algorithm)) -->Line_7 $$ size = 20[ CD ]
Line_5 $$ int size = 0-->Line_7 $$ size = 20[ FD ]
Line_7 $$ size = 20-->Line_7 $$ size = 20[ FD ]
Line_6 $$ if ("SHA".equalsIgnoreCase(algorithm) || "SSHA".equalsIgnoreCase(algorithm)) -->Line_8 $$ if ((salt != null) && (salt.length > 0)) [ CD ]
Line_8 $$ if ((salt != null) && (salt.length > 0)) -->Line_9 $$ buffer.append("[ CD ]
Line_3 $$ final StringBuffer buffer = new StringBuffer()-->Line_9 $$ buffer.append("[ FD ]
Line_8 $$ if ((salt != null) && (salt.length > 0)) -->Line_11 $$ buffer.append("[ CD ]
Line_3 $$ final StringBuffer buffer = new StringBuffer()-->Line_11 $$ buffer.append("[ FD ]
Line_4 $$ MessageDigest digest = null-->Line_14 $$ digest = MessageDigest.getInstance("SHA-1")[ FD ]
Line_14 $$ digest = MessageDigest.getInstance("SHA-1")-->Line_14 $$ digest = MessageDigest.getInstance("SHA-1")[ FD ]
Line_14 $$ digest = MessageDigest.getInstance("SHA-1")-->Line_14 $$ digest = MessageDigest.getInstance("SHA-1")[ CD ]
Line_6 $$ if ("SHA".equalsIgnoreCase(algorithm) || "SSHA".equalsIgnoreCase(algorithm)) -->Line_18 $$ if ("MD5".equalsIgnoreCase(algorithm) || "SMD5".equalsIgnoreCase(algorithm)) [ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_18 $$ if ("MD5".equalsIgnoreCase(algorithm) || "SMD5".equalsIgnoreCase(algorithm)) [ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_18 $$ if ("MD5".equalsIgnoreCase(algorithm) || "SMD5".equalsIgnoreCase(algorithm)) [ FD ]
Line_18 $$ if ("MD5".equalsIgnoreCase(algorithm) || "SMD5".equalsIgnoreCase(algorithm)) -->Line_19 $$ size = 16[ CD ]
Line_5 $$ int size = 0-->Line_19 $$ size = 16[ FD ]
Line_7 $$ size = 20-->Line_19 $$ size = 16[ FD ]
Line_19 $$ size = 16-->Line_19 $$ size = 16[ FD ]
Line_18 $$ if ("MD5".equalsIgnoreCase(algorithm) || "SMD5".equalsIgnoreCase(algorithm)) -->Line_20 $$ if ((salt != null) && (salt.length > 0)) [ CD ]
Line_20 $$ if ((salt != null) && (salt.length > 0)) -->Line_21 $$ buffer.append("[ CD ]
Line_3 $$ final StringBuffer buffer = new StringBuffer()-->Line_21 $$ buffer.append("[ FD ]
Line_20 $$ if ((salt != null) && (salt.length > 0)) -->Line_23 $$ buffer.append("[ CD ]
Line_3 $$ final StringBuffer buffer = new StringBuffer()-->Line_23 $$ buffer.append("[ FD ]
Line_4 $$ MessageDigest digest = null-->Line_26 $$ digest = MessageDigest.getInstance("MD5")[ FD ]
Line_14 $$ digest = MessageDigest.getInstance("SHA-1")-->Line_26 $$ digest = MessageDigest.getInstance("MD5")[ FD ]
Line_26 $$ digest = MessageDigest.getInstance("MD5")-->Line_26 $$ digest = MessageDigest.getInstance("MD5")[ FD ]
Line_26 $$ digest = MessageDigest.getInstance("MD5")-->Line_26 $$ digest = MessageDigest.getInstance("MD5")[ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_33 $$ int outSize = size[ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_34 $$ digest.reset()[ CD ]
Line_4 $$ MessageDigest digest = null-->Line_34 $$ digest.reset()[ FD ]
Line_14 $$ digest = MessageDigest.getInstance("SHA-1")-->Line_34 $$ digest.reset()[ FD ]
Line_26 $$ digest = MessageDigest.getInstance("MD5")-->Line_34 $$ digest.reset()[ FD ]
Line_4 $$ MessageDigest digest = null-->Line_36 $$ digest.update(new String(password).getBytes("UTF-8"))[ FD ]
Line_14 $$ digest = MessageDigest.getInstance("SHA-1")-->Line_36 $$ digest.update(new String(password).getBytes("UTF-8"))[ FD ]
Line_26 $$ digest = MessageDigest.getInstance("MD5")-->Line_36 $$ digest.update(new String(password).getBytes("UTF-8"))[ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_40 $$ if ((salt != null) && (salt.length > 0)) [ CD ]
Line_40 $$ if ((salt != null) && (salt.length > 0)) -->Line_41 $$ digest.update(salt)[ CD ]
Line_4 $$ MessageDigest digest = null-->Line_41 $$ digest.update(salt)[ FD ]
Line_14 $$ digest = MessageDigest.getInstance("SHA-1")-->Line_41 $$ digest.update(salt)[ FD ]
Line_26 $$ digest = MessageDigest.getInstance("MD5")-->Line_41 $$ digest.update(salt)[ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_41 $$ digest.update(salt)[ FD ]
Line_40 $$ if ((salt != null) && (salt.length > 0)) -->Line_42 $$ outSize += salt.length[ CD ]
Line_33 $$ int outSize = size-->Line_42 $$ outSize += salt.length[ FD ]
Line_42 $$ outSize += salt.length-->Line_42 $$ outSize += salt.length[ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_44 $$ final byte[] out = new byte[outSize][ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ CD ]
Line_44 $$ final byte[] out = new byte[outSize]-->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ FD ]
Line_5 $$ int size = 0-->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ FD ]
Line_7 $$ size = 20-->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ FD ]
Line_19 $$ size = 16-->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ FD ]
Line_4 $$ MessageDigest digest = null-->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ FD ]
Line_14 $$ digest = MessageDigest.getInstance("SHA-1")-->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ FD ]
Line_26 $$ digest = MessageDigest.getInstance("MD5")-->Line_45 $$ System.arraycopy(digest.digest(), 0, out, 0, size)[ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_46 $$ if ((salt != null) && (salt.length > 0)) [ CD ]
Line_46 $$ if ((salt != null) && (salt.length > 0)) -->Line_47 $$ System.arraycopy(salt, 0, out, size, salt.length)[ CD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_47 $$ System.arraycopy(salt, 0, out, size, salt.length)[ FD ]
Line_44 $$ final byte[] out = new byte[outSize]-->Line_47 $$ System.arraycopy(salt, 0, out, size, salt.length)[ FD ]
Line_5 $$ int size = 0-->Line_47 $$ System.arraycopy(salt, 0, out, size, salt.length)[ FD ]
Line_7 $$ size = 20-->Line_47 $$ System.arraycopy(salt, 0, out, size, salt.length)[ FD ]
Line_19 $$ size = 16-->Line_47 $$ System.arraycopy(salt, 0, out, size, salt.length)[ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_49 $$ buffer.append(new String(Base64.encodeBase64(out)))[ CD ]
Line_3 $$ final StringBuffer buffer = new StringBuffer()-->Line_49 $$ buffer.append(new String(Base64.encodeBase64(out)))[ FD ]
Line_44 $$ final byte[] out = new byte[outSize]-->Line_49 $$ buffer.append(new String(Base64.encodeBase64(out)))[ FD ]
Line_2 $$ public String encrypt(final char[] password, final String algorithm, final byte[] salt) -->Line_50 $$ return buffer.toString()[ CD ]
Line_50 $$ return buffer.toString()-->Line_50 $$ return buffer.toString()[ CD ]
Line_3 $$ final StringBuffer buffer = new StringBuffer()-->Line_50 $$ return buffer.toString()[ FD ]
