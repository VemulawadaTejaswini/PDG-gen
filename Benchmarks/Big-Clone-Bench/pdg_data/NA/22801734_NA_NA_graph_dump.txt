Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void setup() throws Exception [ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_3 $$ String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile()[ CD ]
Line_3 $$ String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile()-->Line_3 $$ String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile()[ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_4 $$ File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar")[ CD ]
Line_3 $$ String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile()-->Line_4 $$ File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar")[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_5 $$ if (!jarFile.exists())[ CD ]
Line_5 $$ if (!jarFile.exists())-->Line_5 $$ if (!jarFile.exists())[ CD ]
Line_5 $$ if (!jarFile.exists())-->Line_5 $$ if (!jarFile.exists())[ CD ]
Line_4 $$ File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar")-->Line_5 $$ if (!jarFile.exists())[ FD ]
Line_5 $$ if (!jarFile.exists())-->Line_5 $$ jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar")[ CD ]
Line_4 $$ File jarFile = new File(URLDecoder.decode(path, "UTF-8") + "/Hanasu.jar")-->Line_5 $$ jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar")[ FD ]
Line_5 $$ jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar")-->Line_5 $$ jarFile = new File("/home/marc/Virtual Machine/Hanasu.jar")[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_6 $$ File f = File.createTempFile("tempabca", "bdfafad")[ CD ]
Line_6 $$ File f = File.createTempFile("tempabca", "bdfafad")-->Line_6 $$ File f = File.createTempFile("tempabca", "bdfafad")[ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_7 $$ f.delete()[ CD ]
Line_6 $$ File f = File.createTempFile("tempabca", "bdfafad")-->Line_7 $$ f.delete()[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_8 $$ f.mkdir()[ CD ]
Line_6 $$ File f = File.createTempFile("tempabca", "bdfafad")-->Line_8 $$ f.mkdir()[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_9 $$ String parent = f.getAbsolutePath() + "/"[ CD ]
Line_6 $$ File f = File.createTempFile("tempabca", "bdfafad")-->Line_9 $$ String parent = f.getAbsolutePath() + "/"[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_10 $$ byte[] buf = new byte[1024][ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_11 $$ ZipInputStream zipinputstream = null[ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_12 $$ ZipEntry zipentry[ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))[ CD ]
Line_11 $$ ZipInputStream zipinputstream = null-->Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))[ FD ]
Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))-->Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_14 $$ zipentry = zipinputstream.getNextEntry()[ CD ]
Line_12 $$ ZipEntry zipentry-->Line_14 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_14 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_14 $$ zipentry = zipinputstream.getNextEntry()[ CD ]
Line_11 $$ ZipInputStream zipinputstream = null-->Line_14 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))-->Line_14 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_15 $$ while (zipentry != null) [ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_2 $$ private static void setup() throws Exception [ CD ]
Line_12 $$ ZipEntry zipentry-->Line_15 $$ while (zipentry != null) [ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_15 $$ while (zipentry != null) [ FD ]
Line_15 $$ while (zipentry != null) -->Line_16 $$ String entryName = zipentry.getName()[ CD ]
Line_16 $$ String entryName = zipentry.getName()-->Line_16 $$ String entryName = zipentry.getName()[ CD ]
Line_12 $$ ZipEntry zipentry-->Line_16 $$ String entryName = zipentry.getName()[ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_16 $$ String entryName = zipentry.getName()[ FD ]
Line_15 $$ while (zipentry != null) -->Line_17 $$ if (entryName.startsWith("native")) [ CD ]
Line_16 $$ String entryName = zipentry.getName()-->Line_17 $$ if (entryName.startsWith("native")) [ FD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_17 $$ if (entryName.startsWith("native")) [ CD ]
Line_16 $$ String entryName = zipentry.getName()-->Line_17 $$ if (entryName.startsWith("native")) [ FD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_18 $$ int n[ CD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_19 $$ FileOutputStream fileoutputstream[ CD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_20 $$ File newFile = new File(parent + entryName)[ CD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_21 $$ if (zipentry.isDirectory()) [ CD ]
Line_12 $$ ZipEntry zipentry-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_21 $$ if (zipentry.isDirectory()) -->Line_21 $$ if (zipentry.isDirectory()) [ CD ]
Line_12 $$ ZipEntry zipentry-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_21 $$ if (zipentry.isDirectory()) -->Line_22 $$ newFile.mkdirs()[ CD ]
Line_20 $$ File newFile = new File(parent + entryName)-->Line_22 $$ newFile.mkdirs()[ FD ]
Line_21 $$ if (zipentry.isDirectory()) -->Line_23 $$ zipentry = zipinputstream.getNextEntry()[ CD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_23 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_12 $$ ZipEntry zipentry-->Line_23 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_23 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_23 $$ zipentry = zipinputstream.getNextEntry()[ CD ]
Line_11 $$ ZipInputStream zipinputstream = null-->Line_23 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))-->Line_23 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_26 $$ fileoutputstream = new FileOutputStream(newFile)[ CD ]
Line_19 $$ FileOutputStream fileoutputstream-->Line_26 $$ fileoutputstream = new FileOutputStream(newFile)[ FD ]
Line_26 $$ fileoutputstream = new FileOutputStream(newFile)-->Line_26 $$ fileoutputstream = new FileOutputStream(newFile)[ FD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)[ CD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_17 $$ if (entryName.startsWith("native")) [ CD ]
Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)-->Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)[ FD ]
Line_18 $$ int n-->Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)[ FD ]
Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)-->Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)[ CD ]
Line_11 $$ ZipInputStream zipinputstream = null-->Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)[ FD ]
Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))-->Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)[ FD ]
Line_10 $$ byte[] buf = new byte[1024]-->Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)[ FD ]
Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)-->Line_27 $$ fileoutputstream.write(buf, 0, n)[ CD ]
Line_19 $$ FileOutputStream fileoutputstream-->Line_27 $$ fileoutputstream.write(buf, 0, n)[ FD ]
Line_26 $$ fileoutputstream = new FileOutputStream(newFile)-->Line_27 $$ fileoutputstream.write(buf, 0, n)[ FD ]
Line_10 $$ byte[] buf = new byte[1024]-->Line_27 $$ fileoutputstream.write(buf, 0, n)[ FD ]
Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)-->Line_27 $$ fileoutputstream.write(buf, 0, n)[ FD ]
Line_18 $$ int n-->Line_27 $$ fileoutputstream.write(buf, 0, n)[ FD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_28 $$ fileoutputstream.close()[ CD ]
Line_19 $$ FileOutputStream fileoutputstream-->Line_28 $$ fileoutputstream.close()[ FD ]
Line_26 $$ fileoutputstream = new FileOutputStream(newFile)-->Line_28 $$ fileoutputstream.close()[ FD ]
Line_17 $$ if (entryName.startsWith("native")) -->Line_29 $$ zipinputstream.closeEntry()[ CD ]
Line_11 $$ ZipInputStream zipinputstream = null-->Line_29 $$ zipinputstream.closeEntry()[ FD ]
Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))-->Line_29 $$ zipinputstream.closeEntry()[ FD ]
Line_15 $$ while (zipentry != null) -->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ CD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_31 $$ zipentry = zipinputstream.getNextEntry()-->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_12 $$ ZipEntry zipentry-->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_14 $$ zipentry = zipinputstream.getNextEntry()-->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_31 $$ zipentry = zipinputstream.getNextEntry()-->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ CD ]
Line_11 $$ ZipInputStream zipinputstream = null-->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))-->Line_31 $$ zipentry = zipinputstream.getNextEntry()[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_33 $$ zipinputstream.close()[ CD ]
Line_11 $$ ZipInputStream zipinputstream = null-->Line_33 $$ zipinputstream.close()[ FD ]
Line_13 $$ zipinputstream = new ZipInputStream(new FileInputStream(jarFile))-->Line_33 $$ zipinputstream.close()[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_34 $$ String arch = ""[ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_35 $$ boolean x64 = false[ CD ]
Line_37 $$ String property = System.getProperty(key)-->Line_37 $$ String property = System.getProperty(key)[ CD ]
Line_36 $$ for (String key : keys) -->Line_37 $$ String property = System.getProperty(key)[ FD ]
Line_37 $$ String property = System.getProperty(key)-->Line_38 $$ if (property != null) [ FD ]
Line_38 $$ if (property != null) -->Line_39 $$ x64 = (property.indexOf("64") >= 0)[ CD ]
Line_35 $$ boolean x64 = false-->Line_39 $$ x64 = (property.indexOf("64") >= 0)[ FD ]
Line_39 $$ x64 = (property.indexOf("64") >= 0)-->Line_39 $$ x64 = (property.indexOf("64") >= 0)[ FD ]
Line_37 $$ String property = System.getProperty(key)-->Line_39 $$ x64 = (property.indexOf("64") >= 0)[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_42 $$ if (JPTrayIcon.isUnix()) [ CD ]
Line_42 $$ if (JPTrayIcon.isUnix()) -->Line_42 $$ if (JPTrayIcon.isUnix()) [ CD ]
Line_42 $$ if (JPTrayIcon.isUnix()) -->Line_43 $$ if (x64)[ CD ]
Line_43 $$ if (x64)-->Line_43 $$ arch = "linux-amd64"[ CD ]
Line_34 $$ String arch = ""-->Line_43 $$ arch = "linux-amd64"[ FD ]
Line_43 $$ arch = "linux-amd64"-->Line_43 $$ arch = "linux-amd64"[ FD ]
Line_43 $$ if (x64)-->Line_43 $$ arch = "linux-x86"[ CD ]
Line_34 $$ String arch = ""-->Line_43 $$ arch = "linux-x86"[ FD ]
Line_43 $$ arch = "linux-amd64"-->Line_43 $$ arch = "linux-x86"[ FD ]
Line_43 $$ arch = "linux-x86"-->Line_43 $$ arch = "linux-x86"[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_45 $$ if (JPTrayIcon.isWindows()) [ CD ]
Line_45 $$ if (JPTrayIcon.isWindows()) -->Line_45 $$ if (JPTrayIcon.isWindows()) [ CD ]
Line_45 $$ if (JPTrayIcon.isWindows()) -->Line_46 $$ System.out.println("Arch: " + System.getProperty("sun.arch.data.model"))[ CD ]
Line_45 $$ if (JPTrayIcon.isWindows()) -->Line_47 $$ if (x64 && !System.getProperty("sun.arch.data.model").equals("32"))[ CD ]
Line_35 $$ boolean x64 = false-->Line_47 $$ if (x64 && !System.getProperty("sun.arch.data.model").equals("32"))[ FD ]
Line_39 $$ x64 = (property.indexOf("64") >= 0)-->Line_47 $$ if (x64 && !System.getProperty("sun.arch.data.model").equals("32"))[ FD ]
Line_47 $$ if (x64 && !System.getProperty("sun.arch.data.model").equals("32"))-->Line_47 $$ if (x64 && !System.getProperty("sun.arch.data.model").equals("32"))[ CD ]
Line_47 $$ if (x64 && !System.getProperty("sun.arch.data.model").equals("32"))-->Line_47 $$ arch = "win64-amd64"[ CD ]
Line_34 $$ String arch = ""-->Line_47 $$ arch = "win64-amd64"[ FD ]
Line_43 $$ arch = "linux-amd64"-->Line_47 $$ arch = "win64-amd64"[ FD ]
Line_43 $$ arch = "linux-x86"-->Line_47 $$ arch = "win64-amd64"[ FD ]
Line_47 $$ arch = "win64-amd64"-->Line_47 $$ arch = "win64-amd64"[ FD ]
Line_47 $$ if (x64 && !System.getProperty("sun.arch.data.model").equals("32"))-->Line_47 $$ arch = "win32-x86"[ CD ]
Line_34 $$ String arch = ""-->Line_47 $$ arch = "win32-x86"[ FD ]
Line_43 $$ arch = "linux-amd64"-->Line_47 $$ arch = "win32-x86"[ FD ]
Line_43 $$ arch = "linux-x86"-->Line_47 $$ arch = "win32-x86"[ FD ]
Line_47 $$ arch = "win64-amd64"-->Line_47 $$ arch = "win32-x86"[ FD ]
Line_47 $$ arch = "win32-x86"-->Line_47 $$ arch = "win32-x86"[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_49 $$ if (JPTrayIcon.isMac())[ CD ]
Line_49 $$ if (JPTrayIcon.isMac())-->Line_49 $$ if (JPTrayIcon.isMac())[ CD ]
Line_49 $$ if (JPTrayIcon.isMac())-->Line_49 $$ arch = "macosx-universal"[ CD ]
Line_34 $$ String arch = ""-->Line_49 $$ arch = "macosx-universal"[ FD ]
Line_43 $$ arch = "linux-amd64"-->Line_49 $$ arch = "macosx-universal"[ FD ]
Line_43 $$ arch = "linux-x86"-->Line_49 $$ arch = "macosx-universal"[ FD ]
Line_47 $$ arch = "win64-amd64"-->Line_49 $$ arch = "macosx-universal"[ FD ]
Line_47 $$ arch = "win32-x86"-->Line_49 $$ arch = "macosx-universal"[ FD ]
Line_49 $$ arch = "macosx-universal"-->Line_49 $$ arch = "macosx-universal"[ FD ]
Line_2 $$ private static void setup() throws Exception -->Line_50 $$ System.out.println("Using native/" + arch + "/")[ CD ]
Line_2 $$ private static void setup() throws Exception -->Line_51 $$ addLibraryPath(parent + "native/" + arch + "/")[ CD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_15 $$ while (zipentry != null) [ FD ]
Line_31 $$ zipentry = zipinputstream.getNextEntry()-->Line_15 $$ while (zipentry != null) [ FD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_15 $$ while (zipentry != null) [ FD ]
Line_31 $$ zipentry = zipinputstream.getNextEntry()-->Line_15 $$ while (zipentry != null) [ FD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_16 $$ String entryName = zipentry.getName()[ FD ]
Line_31 $$ zipentry = zipinputstream.getNextEntry()-->Line_16 $$ String entryName = zipentry.getName()[ FD ]
Line_16 $$ String entryName = zipentry.getName()-->Line_17 $$ if (entryName.startsWith("native")) [ FD ]
Line_16 $$ String entryName = zipentry.getName()-->Line_17 $$ if (entryName.startsWith("native")) [ FD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_31 $$ zipentry = zipinputstream.getNextEntry()-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_23 $$ zipentry = zipinputstream.getNextEntry()-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_31 $$ zipentry = zipinputstream.getNextEntry()-->Line_21 $$ if (zipentry.isDirectory()) [ FD ]
Line_20 $$ File newFile = new File(parent + entryName)-->Line_22 $$ newFile.mkdirs()[ FD ]
Line_19 $$ FileOutputStream fileoutputstream-->Line_28 $$ fileoutputstream.close()[ FD ]
Line_26 $$ fileoutputstream = new FileOutputStream(newFile)-->Line_28 $$ fileoutputstream.close()[ FD ]
Line_27 $$ while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n)-->Line_27 $$ fileoutputstream.write(buf, 0, n)[ FD ]
