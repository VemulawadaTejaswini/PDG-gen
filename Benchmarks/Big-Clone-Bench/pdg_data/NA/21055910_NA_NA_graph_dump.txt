Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException [ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_3 $$ String cmd = "mysqldump -u " + Constants.dbUser + " -p" + Constants.dbPassword + " " + Constants.dbName + " > " + Constants.tmpDir + "Backup.sql"[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_4 $$ FileWriter fstream = new FileWriter(Constants.tmpDir + Constants.tmpScript)[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_5 $$ BufferedWriter out = new BufferedWriter(fstream)[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_6 $$ out.write(cmd)[ CD ]
Line_5 $$ BufferedWriter out = new BufferedWriter(fstream)-->Line_6 $$ out.write(cmd)[ FD ]
Line_3 $$ String cmd = "mysqldump -u " + Constants.dbUser + " -p" + Constants.dbPassword + " " + Constants.dbName + " > " + Constants.tmpDir + "Backup.sql"-->Line_6 $$ out.write(cmd)[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_7 $$ out.close()[ CD ]
Line_5 $$ BufferedWriter out = new BufferedWriter(fstream)-->Line_7 $$ out.close()[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_8 $$ Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript)[ CD ]
Line_8 $$ Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript)-->Line_8 $$ Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript)[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_9 $$ InputStream is = process.getInputStream()[ CD ]
Line_9 $$ InputStream is = process.getInputStream()-->Line_9 $$ InputStream is = process.getInputStream()[ CD ]
Line_8 $$ Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript)-->Line_9 $$ InputStream is = process.getInputStream()[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_10 $$ InputStreamReader isr = new InputStreamReader(is)[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_11 $$ BufferedReader br = new BufferedReader(isr)[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_12 $$ while (br.readLine() != null) [ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException [ CD ]
Line_11 $$ BufferedReader br = new BufferedReader(isr)-->Line_12 $$ while (br.readLine() != null) [ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_15 $$ String fileName = now4backup()[ CD ]
Line_15 $$ String fileName = now4backup()-->Line_15 $$ String fileName = now4backup()[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_16 $$ cmd = "\"C:\\Archivos de programa\\WinRAR\\Rar.exe\" a -m5 -ed " + Constants.tmpDir + fileName + " " + Constants.tmpDir + "Backup.sql"[ CD ]
Line_3 $$ String cmd = "mysqldump -u " + Constants.dbUser + " -p" + Constants.dbPassword + " " + Constants.dbName + " > " + Constants.tmpDir + "Backup.sql"-->Line_16 $$ cmd = "\"C:\\Archivos de programa\\WinRAR\\Rar.exe\" a -m5 -ed " + Constants.tmpDir + fileName + " " + Constants.tmpDir + "Backup.sql"[ FD ]
Line_16 $$ cmd = "\"C:\\Archivos de programa\\WinRAR\\Rar.exe\" a -m5 -ed " + Constants.tmpDir + fileName + " " + Constants.tmpDir + "Backup.sql"-->Line_16 $$ cmd = "\"C:\\Archivos de programa\\WinRAR\\Rar.exe\" a -m5 -ed " + Constants.tmpDir + fileName + " " + Constants.tmpDir + "Backup.sql"[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_17 $$ process = Runtime.getRuntime().exec(cmd)[ CD ]
Line_8 $$ Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript)-->Line_17 $$ process = Runtime.getRuntime().exec(cmd)[ FD ]
Line_17 $$ process = Runtime.getRuntime().exec(cmd)-->Line_17 $$ process = Runtime.getRuntime().exec(cmd)[ FD ]
Line_17 $$ process = Runtime.getRuntime().exec(cmd)-->Line_17 $$ process = Runtime.getRuntime().exec(cmd)[ CD ]
Line_3 $$ String cmd = "mysqldump -u " + Constants.dbUser + " -p" + Constants.dbPassword + " " + Constants.dbName + " > " + Constants.tmpDir + "Backup.sql"-->Line_17 $$ process = Runtime.getRuntime().exec(cmd)[ FD ]
Line_16 $$ cmd = "\"C:\\Archivos de programa\\WinRAR\\Rar.exe\" a -m5 -ed " + Constants.tmpDir + fileName + " " + Constants.tmpDir + "Backup.sql"-->Line_17 $$ process = Runtime.getRuntime().exec(cmd)[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_18 $$ is = process.getInputStream()[ CD ]
Line_9 $$ InputStream is = process.getInputStream()-->Line_18 $$ is = process.getInputStream()[ FD ]
Line_18 $$ is = process.getInputStream()-->Line_18 $$ is = process.getInputStream()[ FD ]
Line_18 $$ is = process.getInputStream()-->Line_18 $$ is = process.getInputStream()[ CD ]
Line_8 $$ Process process = Runtime.getRuntime().exec(Constants.tmpDir + Constants.tmpScript)-->Line_18 $$ is = process.getInputStream()[ FD ]
Line_17 $$ process = Runtime.getRuntime().exec(cmd)-->Line_18 $$ is = process.getInputStream()[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_19 $$ isr = new InputStreamReader(is)[ CD ]
Line_10 $$ InputStreamReader isr = new InputStreamReader(is)-->Line_19 $$ isr = new InputStreamReader(is)[ FD ]
Line_19 $$ isr = new InputStreamReader(is)-->Line_19 $$ isr = new InputStreamReader(is)[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_20 $$ br = new BufferedReader(isr)[ CD ]
Line_11 $$ BufferedReader br = new BufferedReader(isr)-->Line_20 $$ br = new BufferedReader(isr)[ FD ]
Line_20 $$ br = new BufferedReader(isr)-->Line_20 $$ br = new BufferedReader(isr)[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_21 $$ while (br.readLine() != null) [ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException [ CD ]
Line_11 $$ BufferedReader br = new BufferedReader(isr)-->Line_21 $$ while (br.readLine() != null) [ FD ]
Line_20 $$ br = new BufferedReader(isr)-->Line_21 $$ while (br.readLine() != null) [ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_24 $$ FTPClient client = new FTPClient()[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_25 $$ client.connect(Constants.ftpBackupAddr)[ CD ]
Line_24 $$ FTPClient client = new FTPClient()-->Line_25 $$ client.connect(Constants.ftpBackupAddr)[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_26 $$ client.login(Constants.ftpBackupUser, Constants.ftpBackupPassword)[ CD ]
Line_24 $$ FTPClient client = new FTPClient()-->Line_26 $$ client.login(Constants.ftpBackupUser, Constants.ftpBackupPassword)[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_27 $$ client.changeDirectory("/" + Shared.getConfig("storeName"))[ CD ]
Line_24 $$ FTPClient client = new FTPClient()-->Line_27 $$ client.changeDirectory("/" + Shared.getConfig("storeName"))[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_28 $$ File f = new File(Constants.tmpDir + fileName)[ CD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_29 $$ client.upload(f)[ CD ]
Line_24 $$ FTPClient client = new FTPClient()-->Line_29 $$ client.upload(f)[ FD ]
Line_28 $$ File f = new File(Constants.tmpDir + fileName)-->Line_29 $$ client.upload(f)[ FD ]
Line_2 $$ protected static void createBackup() throws IOException, IllegalStateException, FTPIllegalReplyException, FTPException, FileNotFoundException, FTPDataTransferException, FTPAbortedException -->Line_30 $$ client.disconnect(false)[ CD ]
Line_24 $$ FTPClient client = new FTPClient()-->Line_30 $$ client.disconnect(false)[ FD ]
