Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void test_openStream() throws Exception [ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_3 $$ URL BASE = URLTest.class.getClassLoader().getResource(URLTest.class.getPackage().getName().replace('.', File.separatorChar) + "/lf.jar")[ CD ]
Line_3 $$ URL BASE = URLTest.class.getClassLoader().getResource(URLTest.class.getPackage().getName().replace('.', File.separatorChar) + "/lf.jar")-->Line_3 $$ URL BASE = URLTest.class.getClassLoader().getResource(URLTest.class.getPackage().getName().replace('.', File.separatorChar) + "/lf.jar")[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_4 $$ URL url = new URL("jar:" + BASE + "!/foo.jar!/Bugs/HelloWorld.class")[ CD ]
Line_4 $$ URL url = new URL("jar:" + BASE + "!/foo.jar!/Bugs/HelloWorld.class")-->Line_6 $$ url.openStream()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_10 $$ File resources = Support_Resources.createTempFolder()[ CD ]
Line_10 $$ File resources = Support_Resources.createTempFolder()-->Line_10 $$ File resources = Support_Resources.createTempFolder()[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_11 $$ Support_Resources.copyFile(resources, null, "hyts_htmltest.html")[ CD ]
Line_10 $$ File resources = Support_Resources.createTempFolder()-->Line_11 $$ Support_Resources.copyFile(resources, null, "hyts_htmltest.html")[ FD ]
Line_10 $$ File resources = Support_Resources.createTempFolder()-->Line_12 $$ u = new URL("file", "", resources.getAbsolutePath() + "/hyts_htmltest.html")[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_13 $$ InputStream is1 = u.openStream()[ CD ]
Line_13 $$ InputStream is1 = u.openStream()-->Line_13 $$ InputStream is1 = u.openStream()[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_14 $$ assertTrue("Unable to read from stream", is1.read() != 0)[ CD ]
Line_13 $$ InputStream is1 = u.openStream()-->Line_14 $$ assertTrue("Unable to read from stream", is1.read() != 0)[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_15 $$ is1.close()[ CD ]
Line_13 $$ InputStream is1 = u.openStream()-->Line_15 $$ is1.close()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_16 $$ boolean exception = false[ CD ]
Line_16 $$ boolean exception = false-->Line_21 $$ exception = true[ FD ]
Line_21 $$ exception = true-->Line_21 $$ exception = true[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_23 $$ assertTrue("openStream succeeded for non existent resource", exception)[ CD ]
Line_16 $$ boolean exception = false-->Line_23 $$ assertTrue("openStream succeeded for non existent resource", exception)[ FD ]
Line_21 $$ exception = true-->Line_23 $$ assertTrue("openStream succeeded for non existent resource", exception)[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_24 $$ int port = Support_Jetty.startHttpServerWithDocRoot("resources/org/apache/harmony/luni/tests/java/net/")[ CD ]
Line_24 $$ int port = Support_Jetty.startHttpServerWithDocRoot("resources/org/apache/harmony/luni/tests/java/net/")-->Line_24 $$ int port = Support_Jetty.startHttpServerWithDocRoot("resources/org/apache/harmony/luni/tests/java/net/")[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_25 $$ URL u = new URL("jar:" + "http://localhost:" + port + "/lf.jar!/plus.bmp")[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_26 $$ InputStream in = u.openStream()[ CD ]
Line_26 $$ InputStream in = u.openStream()-->Line_26 $$ InputStream in = u.openStream()[ CD ]
Line_25 $$ URL u = new URL("jar:" + "http://localhost:" + port + "/lf.jar!/plus.bmp")-->Line_26 $$ InputStream in = u.openStream()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_27 $$ byte[] buf = new byte[3][ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_28 $$ int result = in.read(buf)[ CD ]
Line_28 $$ int result = in.read(buf)-->Line_28 $$ int result = in.read(buf)[ CD ]
Line_26 $$ InputStream in = u.openStream()-->Line_28 $$ int result = in.read(buf)[ FD ]
Line_27 $$ byte[] buf = new byte[3]-->Line_28 $$ int result = in.read(buf)[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_29 $$ assertTrue("Incompete read: " + result, result == 3)[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_30 $$ in.close()[ CD ]
Line_26 $$ InputStream in = u.openStream()-->Line_30 $$ in.close()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_31 $$ assertTrue("Returned incorrect data", buf[0] == 0x42 && buf[1] == 0x4d && buf[2] == (byte) 0xbe)[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_32 $$ File test = new File("hytest.$$$")[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_33 $$ FileOutputStream out = new FileOutputStream(test)[ CD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_34 $$ out.write(new byte[] [ CD ]
Line_33 $$ FileOutputStream out = new FileOutputStream(test)-->Line_34 $$ out.write(new byte[] [ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_35 $$ out.close()[ CD ]
Line_33 $$ FileOutputStream out = new FileOutputStream(test)-->Line_35 $$ out.close()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_36 $$ u = new URL("file:" + test.getName())[ CD ]
Line_25 $$ URL u = new URL("jar:" + "http://localhost:" + port + "/lf.jar!/plus.bmp")-->Line_36 $$ u = new URL("file:" + test.getName())[ FD ]
Line_36 $$ u = new URL("file:" + test.getName())-->Line_36 $$ u = new URL("file:" + test.getName())[ FD ]
Line_32 $$ File test = new File("hytest.$$$")-->Line_36 $$ u = new URL("file:" + test.getName())[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_37 $$ in = u.openStream()[ CD ]
Line_26 $$ InputStream in = u.openStream()-->Line_37 $$ in = u.openStream()[ FD ]
Line_37 $$ in = u.openStream()-->Line_37 $$ in = u.openStream()[ FD ]
Line_37 $$ in = u.openStream()-->Line_37 $$ in = u.openStream()[ CD ]
Line_25 $$ URL u = new URL("jar:" + "http://localhost:" + port + "/lf.jar!/plus.bmp")-->Line_37 $$ in = u.openStream()[ FD ]
Line_36 $$ u = new URL("file:" + test.getName())-->Line_37 $$ in = u.openStream()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_38 $$ buf = new byte[3][ CD ]
Line_27 $$ byte[] buf = new byte[3]-->Line_38 $$ buf = new byte[3][ FD ]
Line_38 $$ buf = new byte[3]-->Line_38 $$ buf = new byte[3][ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_39 $$ result = in.read(buf)[ CD ]
Line_28 $$ int result = in.read(buf)-->Line_39 $$ result = in.read(buf)[ FD ]
Line_39 $$ result = in.read(buf)-->Line_39 $$ result = in.read(buf)[ FD ]
Line_39 $$ result = in.read(buf)-->Line_39 $$ result = in.read(buf)[ CD ]
Line_26 $$ InputStream in = u.openStream()-->Line_39 $$ result = in.read(buf)[ FD ]
Line_37 $$ in = u.openStream()-->Line_39 $$ result = in.read(buf)[ FD ]
Line_27 $$ byte[] buf = new byte[3]-->Line_39 $$ result = in.read(buf)[ FD ]
Line_38 $$ buf = new byte[3]-->Line_39 $$ result = in.read(buf)[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_40 $$ in.close()[ CD ]
Line_26 $$ InputStream in = u.openStream()-->Line_40 $$ in.close()[ FD ]
Line_37 $$ in = u.openStream()-->Line_40 $$ in.close()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_41 $$ test.delete()[ CD ]
Line_32 $$ File test = new File("hytest.$$$")-->Line_41 $$ test.delete()[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_42 $$ assertEquals("Incompete read 3", 3, result)[ CD ]
Line_28 $$ int result = in.read(buf)-->Line_42 $$ assertEquals("Incompete read 3", 3, result)[ FD ]
Line_39 $$ result = in.read(buf)-->Line_42 $$ assertEquals("Incompete read 3", 3, result)[ FD ]
Line_2 $$ public void test_openStream() throws Exception -->Line_43 $$ assertTrue("Returned incorrect data 3", buf[0] == 0x55 && buf[1] == (byte) 0xaa && buf[2] == 0x14)[ CD ]
