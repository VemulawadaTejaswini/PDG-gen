Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) [ CD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_3 $$ String nonce = generateNonce()[ CD ]
Line_3 $$ String nonce = generateNonce()-->Line_3 $$ String nonce = generateNonce()[ CD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_4 $$ String createDate = fmtDate.format(new Date())[ CD ]
Line_4 $$ String createDate = fmtDate.format(new Date())-->Line_4 $$ String createDate = fmtDate.format(new Date())[ CD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_5 $$ String keyDigest = null[ CD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_6 $$ MessageDigest sha1 = null[ CD ]
Line_6 $$ MessageDigest sha1 = null-->Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")[ FD ]
Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")[ FD ]
Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")[ CD ]
Line_6 $$ MessageDigest sha1 = null-->Line_9 $$ sha1.update(nonce.getBytes("UTF-8"))[ FD ]
Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_9 $$ sha1.update(nonce.getBytes("UTF-8"))[ FD ]
Line_3 $$ String nonce = generateNonce()-->Line_9 $$ sha1.update(nonce.getBytes("UTF-8"))[ FD ]
Line_6 $$ MessageDigest sha1 = null-->Line_10 $$ sha1.update(createDate.getBytes("UTF-8"))[ FD ]
Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_10 $$ sha1.update(createDate.getBytes("UTF-8"))[ FD ]
Line_4 $$ String createDate = fmtDate.format(new Date())-->Line_10 $$ sha1.update(createDate.getBytes("UTF-8"))[ FD ]
Line_6 $$ MessageDigest sha1 = null-->Line_11 $$ sha1.update(userKey.getBytes("UTF-8"))[ FD ]
Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_11 $$ sha1.update(userKey.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_11 $$ sha1.update(userKey.getBytes("UTF-8"))[ FD ]
Line_6 $$ MessageDigest sha1 = null-->Line_12 $$ sha1.update(applicationKey.getBytes("UTF-8"))[ FD ]
Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_12 $$ sha1.update(applicationKey.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_12 $$ sha1.update(applicationKey.getBytes("UTF-8"))[ FD ]
Line_5 $$ String keyDigest = null-->Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())[ FD ]
Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())-->Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())[ FD ]
Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())-->Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())[ CD ]
Line_6 $$ MessageDigest sha1 = null-->Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())[ FD ]
Line_8 $$ sha1 = MessageDigest.getInstance("SHA1")-->Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_17 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_18 $$ sb.append(applicationId)[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(applicationId)[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_18 $$ sb.append(applicationId)[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_19 $$ sb.append(',')[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append(',')[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_20 $$ sb.append(nonce)[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append(nonce)[ FD ]
Line_3 $$ String nonce = generateNonce()-->Line_20 $$ sb.append(nonce)[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_21 $$ sb.append(',')[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append(',')[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_22 $$ sb.append(createDate)[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(createDate)[ FD ]
Line_4 $$ String createDate = fmtDate.format(new Date())-->Line_22 $$ sb.append(createDate)[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_23 $$ sb.append(',')[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(',')[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_24 $$ sb.append(keyDigest)[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append(keyDigest)[ FD ]
Line_5 $$ String keyDigest = null-->Line_24 $$ sb.append(keyDigest)[ FD ]
Line_13 $$ keyDigest = getHexaDecimal(sha1.digest())-->Line_24 $$ sb.append(keyDigest)[ FD ]
Line_2 $$ public static String generatePassword(String userKey, int applicationId, String applicationKey) -->Line_25 $$ return sb.toString()[ CD ]
Line_25 $$ return sb.toString()-->Line_25 $$ return sb.toString()[ CD ]
Line_17 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ return sb.toString()[ FD ]
