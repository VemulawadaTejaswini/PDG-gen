Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException [ CD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_3 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType())[ CD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()[ CD ]
Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()-->Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()[ CD ]
Line_3 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType())-->Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()[ FD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_5 $$ String sendPath = MessageBufferConstants.getPATH_FOR_SEND_MESSAGE()[ CD ]
Line_5 $$ String sendPath = MessageBufferConstants.getPATH_FOR_SEND_MESSAGE()-->Line_5 $$ String sendPath = MessageBufferConstants.getPATH_FOR_SEND_MESSAGE()[ CD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_6 $$ String timeOutParameter = MessageBufferConstants.getTIMEOUTPARAMETER()[ CD ]
Line_6 $$ String timeOutParameter = MessageBufferConstants.getTIMEOUTPARAMETER()-->Line_6 $$ String timeOutParameter = MessageBufferConstants.getTIMEOUTPARAMETER()[ CD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)[ CD ]
Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)-->Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)[ CD ]
Line_3 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType())-->Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)[ FD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)[ FD ]
Line_5 $$ String sendPath = MessageBufferConstants.getPATH_FOR_SEND_MESSAGE()-->Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)[ FD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_8 $$ String message = msgBufferUtilObj.getFormattedMessage(messageStr)[ CD ]
Line_8 $$ String message = msgBufferUtilObj.getFormattedMessage(messageStr)-->Line_8 $$ String message = msgBufferUtilObj.getFormattedMessage(messageStr)[ CD ]
Line_3 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType())-->Line_8 $$ String message = msgBufferUtilObj.getFormattedMessage(messageStr)[ FD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_8 $$ String message = msgBufferUtilObj.getFormattedMessage(messageStr)[ FD ]
Line_2 $$ public void sendMessage(String messageBufferName, String messageStr, String timeout) throws AppFabricException -->Line_9 $$ String authorizationToken = ""[ CD ]
Line_9 $$ String authorizationToken = ""-->Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)-->Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)-->Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ CD ]
Line_11 $$ ACSTokenProvider tp = new ACSTokenProvider(httpWebProxyServer_, httpWebProxyPort_, this.credentials)-->Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()-->Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)-->Line_12 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)-->Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")-->Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")-->Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ CD ]
Line_7 $$ String messageBufferUri = msgBufferUtilObj.getMessageUri(messageBufferName, sendPath)-->Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")-->Line_13 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_17 $$ if (httpWebProxy_ != null)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ CD ]
Line_16 $$ HttpURLConnection connection-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ FD ]
Line_15 $$ URL urlConn = new URL(sendUri)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ FD ]
Line_17 $$ if (httpWebProxy_ != null)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ CD ]
Line_16 $$ HttpURLConnection connection-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_15 $$ URL urlConn = new URL(sendUri)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_18 $$ connection.setRequestMethod("POST")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_18 $$ connection.setRequestMethod("POST")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_18 $$ connection.setRequestMethod("POST")[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_19 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_TEXT())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_19 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_TEXT())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_19 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_TEXT())[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_20 $$ connection.setRequestProperty("Content-Length", "" + message.length())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_20 $$ connection.setRequestProperty("Content-Length", "" + message.length())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_20 $$ connection.setRequestProperty("Content-Length", "" + message.length())[ FD ]
Line_8 $$ String message = msgBufferUtilObj.getFormattedMessage(messageStr)-->Line_20 $$ connection.setRequestProperty("Content-Length", "" + message.length())[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_21 $$ connection.setRequestProperty("Expect", "100-continue")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_21 $$ connection.setRequestProperty("Expect", "100-continue")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_21 $$ connection.setRequestProperty("Expect", "100-continue")[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_22 $$ connection.setRequestProperty("Accept", "*/*")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_22 $$ connection.setRequestProperty("Accept", "*/*")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_22 $$ connection.setRequestProperty("Accept", "*/*")[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_24 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_24 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_24 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_23 $$ String authStr = TokenConstants.getWrapAuthenticationType() + " " + TokenConstants.getWrapAuthorizationHeaderKey() + "=\"" + authorizationToken + "\""-->Line_24 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_25 $$ connection.setUseCaches(false)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_25 $$ connection.setUseCaches(false)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_25 $$ connection.setUseCaches(false)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_26 $$ connection.setDoInput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_26 $$ connection.setDoInput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_26 $$ connection.setDoInput(true)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_27 $$ connection.setDoOutput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_27 $$ connection.setDoOutput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_27 $$ connection.setDoOutput(true)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_28 $$ DataOutputStream wr = new DataOutputStream(connection.getOutputStream())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_28 $$ DataOutputStream wr = new DataOutputStream(connection.getOutputStream())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_28 $$ DataOutputStream wr = new DataOutputStream(connection.getOutputStream())[ FD ]
Line_28 $$ DataOutputStream wr = new DataOutputStream(connection.getOutputStream())-->Line_29 $$ wr.writeBytes(message)[ FD ]
Line_8 $$ String message = msgBufferUtilObj.getFormattedMessage(messageStr)-->Line_29 $$ wr.writeBytes(message)[ FD ]
Line_28 $$ DataOutputStream wr = new DataOutputStream(connection.getOutputStream())-->Line_30 $$ wr.flush()[ FD ]
Line_28 $$ DataOutputStream wr = new DataOutputStream(connection.getOutputStream())-->Line_31 $$ wr.close()[ FD ]
Line_32 $$ if (LoggerUtil.getIsLoggingOn())-->Line_32 $$ if (LoggerUtil.getIsLoggingOn())[ CD ]
Line_32 $$ if (LoggerUtil.getIsLoggingOn())-->Line_32 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.SendMessage_REQUEST)[ CD ]
Line_16 $$ HttpURLConnection connection-->Line_32 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.SendMessage_REQUEST)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_32 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.SendMessage_REQUEST)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_32 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.SendMessage_REQUEST)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_33 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_33 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_33 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"[ FD ]
Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) -->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ CD ]
Line_16 $$ HttpURLConnection connection-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_16 $$ HttpURLConnection connection-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_16 $$ HttpURLConnection connection-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_34 $$ if (!((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_ACCEPTED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_CREATED) || (connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK))) [ FD ]
Line_16 $$ HttpURLConnection connection-->Line_35 $$ throw new AppFabricException("Message could not be sent. Error.Response code: " + connection.getResponseCode())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_35 $$ throw new AppFabricException("Message could not be sent. Error.Response code: " + connection.getResponseCode())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_35 $$ throw new AppFabricException("Message could not be sent. Error.Response code: " + connection.getResponseCode())[ FD ]
Line_37 $$ if (LoggerUtil.getIsLoggingOn())-->Line_37 $$ if (LoggerUtil.getIsLoggingOn())[ CD ]
Line_37 $$ if (LoggerUtil.getIsLoggingOn())-->Line_37 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseCode, "UTF-8"), SDKLoggerHelper.RecordType.SendMessage_RESPONSE)[ CD ]
Line_33 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"-->Line_37 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseCode, "UTF-8"), SDKLoggerHelper.RecordType.SendMessage_RESPONSE)[ FD ]
