Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception [ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ ActionMessages errors = new ActionMessages()[ CD ]
Line_5 $$ boolean isMultipart = FileUpload.isMultipartContent(request)-->Line_5 $$ boolean isMultipart = FileUpload.isMultipartContent(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_5 $$ boolean isMultipart = FileUpload.isMultipartContent(request)[ FD ]
Line_6 $$ Mail mailInstance = getMailInstance(request)-->Line_6 $$ Mail mailInstance = getMailInstance(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_6 $$ Mail mailInstance = getMailInstance(request)[ FD ]
Line_7 $$ if (isMultipart) -->Line_8 $$ Map fields = new HashMap()[ CD ]
Line_7 $$ if (isMultipart) -->Line_9 $$ Vector attachments = new Vector()[ CD ]
Line_7 $$ if (isMultipart) -->Line_10 $$ List items = diskFileUpload.parseRequest(request)[ CD ]
Line_10 $$ List items = diskFileUpload.parseRequest(request)-->Line_10 $$ List items = diskFileUpload.parseRequest(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_10 $$ List items = diskFileUpload.parseRequest(request)[ FD ]
Line_7 $$ if (isMultipart) -->Line_11 $$ Iterator iter = items.iterator()[ CD ]
Line_11 $$ Iterator iter = items.iterator()-->Line_11 $$ Iterator iter = items.iterator()[ CD ]
Line_10 $$ List items = diskFileUpload.parseRequest(request)-->Line_11 $$ Iterator iter = items.iterator()[ FD ]
Line_7 $$ if (isMultipart) -->Line_12 $$ while (iter.hasNext()) [ CD ]
Line_7 $$ if (isMultipart) -->Line_7 $$ if (isMultipart) [ CD ]
Line_12 $$ while (iter.hasNext()) -->Line_12 $$ while (iter.hasNext()) [ CD ]
Line_11 $$ Iterator iter = items.iterator()-->Line_12 $$ while (iter.hasNext()) [ FD ]
Line_12 $$ while (iter.hasNext()) -->Line_13 $$ FileItem item = (FileItem) iter.next()[ CD ]
Line_11 $$ Iterator iter = items.iterator()-->Line_13 $$ FileItem item = (FileItem) iter.next()[ FD ]
Line_12 $$ while (iter.hasNext()) -->Line_14 $$ if (item.isFormField()) [ CD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ if (item.isFormField()) [ FD ]
Line_14 $$ if (item.isFormField()) -->Line_14 $$ if (item.isFormField()) [ CD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ if (item.isFormField()) [ FD ]
Line_14 $$ if (item.isFormField()) -->Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) [ CD ]
Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) -->Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) [ CD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) [ FD ]
Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) -->Line_16 $$ String[] aux = item.getString().split(":")[ CD ]
Line_16 $$ String[] aux = item.getString().split(":")-->Line_16 $$ String[] aux = item.getString().split(":")[ CD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_16 $$ String[] aux = item.getString().split(":")[ FD ]
Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) -->Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])[ CD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])[ CD ]
Line_6 $$ Mail mailInstance = getMailInstance(request)-->Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])[ FD ]
Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) -->Line_18 $$ attachments.addElement(part)[ CD ]
Line_9 $$ Vector attachments = new Vector()-->Line_18 $$ attachments.addElement(part)[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_18 $$ attachments.addElement(part)[ FD ]
Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) -->Line_20 $$ fields.put(item.getFieldName(), item.getString())[ CD ]
Line_8 $$ Map fields = new HashMap()-->Line_20 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_20 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_20 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_14 $$ if (item.isFormField()) -->Line_23 $$ if (!StringUtils.isBlank(item.getName())) [ CD ]
Line_23 $$ if (!StringUtils.isBlank(item.getName())) -->Line_23 $$ if (!StringUtils.isBlank(item.getName())) [ CD ]
Line_23 $$ if (!StringUtils.isBlank(item.getName())) -->Line_23 $$ if (!StringUtils.isBlank(item.getName())) [ CD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_23 $$ if (!StringUtils.isBlank(item.getName())) [ FD ]
Line_23 $$ if (!StringUtils.isBlank(item.getName())) -->Line_24 $$ ByteArrayOutputStream baos = null[ CD ]
Line_24 $$ ByteArrayOutputStream baos = null-->Line_26 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_26 $$ baos = new ByteArrayOutputStream()-->Line_26 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_24 $$ ByteArrayOutputStream baos = null-->Line_27 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_26 $$ baos = new ByteArrayOutputStream()-->Line_27 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_27 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_29 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_24 $$ ByteArrayOutputStream baos = null-->Line_29 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_26 $$ baos = new ByteArrayOutputStream()-->Line_29 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_30 $$ part.setContentType(item.getContentType())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_30 $$ part.setContentType(item.getContentType())[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_31 $$ part.setName(item.getName())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_31 $$ part.setName(item.getName())[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_32 $$ part.setSize(item.getSize())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_32 $$ part.setSize(item.getSize())[ FD ]
Line_9 $$ Vector attachments = new Vector()-->Line_33 $$ attachments.addElement(part)[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_33 $$ attachments.addElement(part)[ FD ]
Line_24 $$ ByteArrayOutputStream baos = null-->Line_36 $$ IOUtils.closeQuietly(baos)[ FD ]
Line_26 $$ baos = new ByteArrayOutputStream()-->Line_36 $$ IOUtils.closeQuietly(baos)[ FD ]
Line_7 $$ if (isMultipart) -->Line_41 $$ String body = ""[ CD ]
Line_7 $$ if (isMultipart) -->Line_42 $$ if (fields.get("taBody") != null) [ CD ]
Line_8 $$ Map fields = new HashMap()-->Line_42 $$ if (fields.get("taBody") != null) [ FD ]
Line_42 $$ if (fields.get("taBody") != null) -->Line_43 $$ body = (String) fields.get("taBody")[ CD ]
Line_41 $$ String body = ""-->Line_43 $$ body = (String) fields.get("taBody")[ FD ]
Line_43 $$ body = (String) fields.get("taBody")-->Line_43 $$ body = (String) fields.get("taBody")[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_43 $$ body = (String) fields.get("taBody")[ FD ]
Line_42 $$ if (fields.get("taBody") != null) -->Line_44 $$ if (fields.get("taReplyBody") != null) [ CD ]
Line_8 $$ Map fields = new HashMap()-->Line_44 $$ if (fields.get("taReplyBody") != null) [ FD ]
Line_44 $$ if (fields.get("taReplyBody") != null) -->Line_45 $$ body = (String) fields.get("taReplyBody")[ CD ]
Line_41 $$ String body = ""-->Line_45 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_43 $$ body = (String) fields.get("taBody")-->Line_45 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_45 $$ body = (String) fields.get("taReplyBody")-->Line_45 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_45 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_7 $$ if (isMultipart) -->Line_47 $$ Preferences preferencesInstance = getPreferencesInstance(request)[ CD ]
Line_47 $$ Preferences preferencesInstance = getPreferencesInstance(request)-->Line_47 $$ Preferences preferencesInstance = getPreferencesInstance(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_47 $$ Preferences preferencesInstance = getPreferencesInstance(request)[ FD ]
Line_7 $$ if (isMultipart) -->Line_48 $$ Send sendInstance = getSendInstance(request)[ CD ]
Line_48 $$ Send sendInstance = getSendInstance(request)-->Line_48 $$ Send sendInstance = getSendInstance(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_48 $$ Send sendInstance = getSendInstance(request)[ FD ]
Line_7 $$ if (isMultipart) -->Line_49 $$ String mid = (String) fields.get("mid")[ CD ]
Line_8 $$ Map fields = new HashMap()-->Line_49 $$ String mid = (String) fields.get("mid")[ FD ]
Line_7 $$ if (isMultipart) -->Line_50 $$ if (StringUtils.isBlank(mid)) [ CD ]
Line_49 $$ String mid = (String) fields.get("mid")-->Line_50 $$ if (StringUtils.isBlank(mid)) [ FD ]
Line_50 $$ if (StringUtils.isBlank(mid)) -->Line_50 $$ if (StringUtils.isBlank(mid)) [ CD ]
Line_49 $$ String mid = (String) fields.get("mid")-->Line_50 $$ if (StringUtils.isBlank(mid)) [ FD ]
Line_50 $$ if (StringUtils.isBlank(mid)) -->Line_51 $$ request.setAttribute("action", "compose")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_51 $$ request.setAttribute("action", "compose")[ FD ]
Line_50 $$ if (StringUtils.isBlank(mid)) -->Line_53 $$ request.setAttribute("action", "reply")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_53 $$ request.setAttribute("action", "reply")[ FD ]
Line_7 $$ if (isMultipart) -->Line_55 $$ Boolean isHtml = null[ CD ]
Line_7 $$ if (isMultipart) -->Line_56 $$ if (StringUtils.isBlank((String) fields.get("isHtml"))) [ CD ]
Line_56 $$ if (StringUtils.isBlank((String) fields.get("isHtml"))) -->Line_56 $$ if (StringUtils.isBlank((String) fields.get("isHtml"))) [ CD ]
Line_8 $$ Map fields = new HashMap()-->Line_56 $$ if (StringUtils.isBlank((String) fields.get("isHtml"))) [ FD ]
Line_56 $$ if (StringUtils.isBlank((String) fields.get("isHtml"))) -->Line_57 $$ isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage())[ CD ]
Line_55 $$ Boolean isHtml = null-->Line_57 $$ isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage())[ FD ]
Line_57 $$ isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage())-->Line_57 $$ isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage())[ FD ]
Line_47 $$ Preferences preferencesInstance = getPreferencesInstance(request)-->Line_57 $$ isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage())[ FD ]
Line_56 $$ if (StringUtils.isBlank((String) fields.get("isHtml"))) -->Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))[ CD ]
Line_55 $$ Boolean isHtml = null-->Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))[ FD ]
Line_57 $$ isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage())-->Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))[ FD ]
Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))-->Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))[ FD ]
Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))-->Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))[ CD ]
Line_8 $$ Map fields = new HashMap()-->Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))[ FD ]
Line_7 $$ if (isMultipart) -->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ CD ]
Line_48 $$ Send sendInstance = getSendInstance(request)-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_49 $$ String mid = (String) fields.get("mid")-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_41 $$ String body = ""-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_43 $$ body = (String) fields.get("taBody")-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_45 $$ body = (String) fields.get("taReplyBody")-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_9 $$ Vector attachments = new Vector()-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_55 $$ Boolean isHtml = null-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_57 $$ isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage())-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_59 $$ isHtml = Boolean.valueOf((String) fields.get("isHtml"))-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_8 $$ Map fields = new HashMap()-->Line_61 $$ sendInstance.send(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_7 $$ if (isMultipart) -->Line_63 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"))[ CD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_63 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"))[ FD ]
Line_7 $$ if (isMultipart) -->Line_64 $$ request.setAttribute("exception", "The form is null")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_64 $$ request.setAttribute("exception", "The form is null")[ FD ]
Line_7 $$ if (isMultipart) -->Line_65 $$ request.setAttribute("newLocation", null)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_65 $$ request.setAttribute("newLocation", null)[ FD ]
Line_7 $$ if (isMultipart) -->Line_66 $$ doTrace(request, DLog.ERROR, getClass(), "The form is null")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_66 $$ doTrace(request, DLog.ERROR, getClass(), "The form is null")[ FD ]
Line_69 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_69 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)[ CD ]
Line_69 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_70 $$ if (errorMessage == null) [ FD ]
Line_70 $$ if (errorMessage == null) -->Line_71 $$ errorMessage = "NullPointerException"[ CD ]
Line_69 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_71 $$ errorMessage = "NullPointerException"[ FD ]
Line_71 $$ errorMessage = "NullPointerException"-->Line_71 $$ errorMessage = "NullPointerException"[ FD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_73 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage))[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_74 $$ request.setAttribute("exception", errorMessage)[ FD ]
Line_69 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_74 $$ request.setAttribute("exception", errorMessage)[ FD ]
Line_71 $$ errorMessage = "NullPointerException"-->Line_74 $$ request.setAttribute("exception", errorMessage)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_75 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage)[ FD ]
Line_69 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_75 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage)[ FD ]
Line_71 $$ errorMessage = "NullPointerException"-->Line_75 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_78 $$ if (errors.isEmpty()) [ CD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_78 $$ if (errors.isEmpty()) [ FD ]
Line_78 $$ if (errors.isEmpty()) -->Line_78 $$ if (errors.isEmpty()) [ CD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_78 $$ if (errors.isEmpty()) [ FD ]
Line_78 $$ if (errors.isEmpty()) -->Line_79 $$ doTrace(request, DLog.INFO, getClass(), "OK")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_79 $$ doTrace(request, DLog.INFO, getClass(), "OK")[ FD ]
Line_78 $$ if (errors.isEmpty()) -->Line_80 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)[ CD ]
Line_80 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)-->Line_80 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_80 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)[ FD ]
Line_78 $$ if (errors.isEmpty()) -->Line_82 $$ saveErrors(request, errors)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_82 $$ saveErrors(request, errors)[ FD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_82 $$ saveErrors(request, errors)[ FD ]
Line_78 $$ if (errors.isEmpty()) -->Line_83 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)[ CD ]
Line_83 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)-->Line_83 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_83 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ if (item.isFormField()) [ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ if (item.isFormField()) [ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_15 $$ if (item.getFieldName().equals("forwardAttachments")) [ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_16 $$ String[] aux = item.getString().split(":")[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_18 $$ attachments.addElement(part)[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_20 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_20 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_23 $$ if (!StringUtils.isBlank(item.getName())) [ FD ]
Line_24 $$ ByteArrayOutputStream baos = null-->Line_27 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_26 $$ baos = new ByteArrayOutputStream()-->Line_27 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_27 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_29 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_24 $$ ByteArrayOutputStream baos = null-->Line_29 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_26 $$ baos = new ByteArrayOutputStream()-->Line_29 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_30 $$ part.setContentType(item.getContentType())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_30 $$ part.setContentType(item.getContentType())[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_31 $$ part.setName(item.getName())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_31 $$ part.setName(item.getName())[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_32 $$ part.setSize(item.getSize())[ FD ]
Line_13 $$ FileItem item = (FileItem) iter.next()-->Line_32 $$ part.setSize(item.getSize())[ FD ]
Line_17 $$ MailPartObj part = mailInstance.getAttachment(aux[0], aux[1])-->Line_33 $$ attachments.addElement(part)[ FD ]
Line_24 $$ ByteArrayOutputStream baos = null-->Line_36 $$ IOUtils.closeQuietly(baos)[ FD ]
Line_26 $$ baos = new ByteArrayOutputStream()-->Line_36 $$ IOUtils.closeQuietly(baos)[ FD ]
