Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException [ CD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_3 $$ Connection con = null[ CD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_4 $$ Statement stmt = null[ CD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_5 $$ String table = (descr != null) ? descr.getTable() : null[ CD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_5 $$ String table = (descr != null) ? descr.getTable() : null[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_6 $$ Vector dsList = new Vector()[ CD ]
Line_8 $$ String wsflag = Settings.get(table + ".useWebService")-->Line_8 $$ String wsflag = Settings.get(table + ".useWebService")[ CD ]
Line_8 $$ String wsflag = Settings.get(table + ".useWebService")-->Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) [ FD ]
Line_8 $$ String wsflag = Settings.get(table + ".useWebService")-->Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) [ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_10 $$ String serviceUrl = Settings.get(table + ".dataServiceUrl")[ CD ]
Line_10 $$ String serviceUrl = Settings.get(table + ".dataServiceUrl")-->Line_10 $$ String serviceUrl = Settings.get(table + ".dataServiceUrl")[ CD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_11 $$ String serviceUser = Settings.get(table + ".dataServiceUser")[ CD ]
Line_11 $$ String serviceUser = Settings.get(table + ".dataServiceUser")-->Line_11 $$ String serviceUser = Settings.get(table + ".dataServiceUser")[ CD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_12 $$ String servicePassword = Settings.get(table + ".dataServicePassword")[ CD ]
Line_12 $$ String servicePassword = Settings.get(table + ".dataServicePassword")-->Line_12 $$ String servicePassword = Settings.get(table + ".dataServicePassword")[ CD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_13 $$ Call call = (Call) (new Service()).createCall()[ CD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_14 $$ call.setTargetEndpointAddress(serviceUrl)[ CD ]
Line_13 $$ Call call = (Call) (new Service()).createCall()-->Line_14 $$ call.setTargetEndpointAddress(serviceUrl)[ FD ]
Line_10 $$ String serviceUrl = Settings.get(table + ".dataServiceUrl")-->Line_14 $$ call.setTargetEndpointAddress(serviceUrl)[ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_15 $$ call.setOperationName("getData")[ CD ]
Line_13 $$ Call call = (Call) (new Service()).createCall()-->Line_15 $$ call.setOperationName("getData")[ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_16 $$ if (serviceUser != null) [ CD ]
Line_11 $$ String serviceUser = Settings.get(table + ".dataServiceUser")-->Line_16 $$ if (serviceUser != null) [ FD ]
Line_16 $$ if (serviceUser != null) -->Line_17 $$ call.setUsername(serviceUser)[ CD ]
Line_13 $$ Call call = (Call) (new Service()).createCall()-->Line_17 $$ call.setUsername(serviceUser)[ FD ]
Line_11 $$ String serviceUser = Settings.get(table + ".dataServiceUser")-->Line_17 $$ call.setUsername(serviceUser)[ FD ]
Line_16 $$ if (serviceUser != null) -->Line_18 $$ if (servicePassword != null) [ CD ]
Line_12 $$ String servicePassword = Settings.get(table + ".dataServicePassword")-->Line_18 $$ if (servicePassword != null) [ FD ]
Line_18 $$ if (servicePassword != null) -->Line_19 $$ call.setPassword(servicePassword)[ CD ]
Line_13 $$ Call call = (Call) (new Service()).createCall()-->Line_19 $$ call.setPassword(servicePassword)[ FD ]
Line_12 $$ String servicePassword = Settings.get(table + ".dataServicePassword")-->Line_19 $$ call.setPassword(servicePassword)[ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_22 $$ if (log.isDebugEnabled()) [ CD ]
Line_22 $$ if (log.isDebugEnabled()) -->Line_22 $$ if (log.isDebugEnabled()) [ CD ]
Line_22 $$ if (log.isDebugEnabled()) -->Line_23 $$ log.debug("Service " + serviceUrl + " authentication user=" + serviceUser + " passwd=" + servicePassword + " call method getData" + " for table " + table + " station " + ((station != null) ? station.getStn() : "") + " element " + ((descr != null && descr.getElement() != null) ? descr.getElement() : "") + " dateFrom " + dateInterval.getDateFrom().getDayId() + " dateTo " + dateInterval.getDateTo().getDayId() + " sampling " + sampling)[ CD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_23 $$ log.debug("Service " + serviceUrl + " authentication user=" + serviceUser + " passwd=" + servicePassword + " call method getData" + " for table " + table + " station " + ((station != null) ? station.getStn() : "") + " element " + ((descr != null && descr.getElement() != null) ? descr.getElement() : "") + " dateFrom " + dateInterval.getDateFrom().getDayId() + " dateTo " + dateInterval.getDateTo().getDayId() + " sampling " + sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_23 $$ log.debug("Service " + serviceUrl + " authentication user=" + serviceUser + " passwd=" + servicePassword + " call method getData" + " for table " + table + " station " + ((station != null) ? station.getStn() : "") + " element " + ((descr != null && descr.getElement() != null) ? descr.getElement() : "") + " dateFrom " + dateInterval.getDateFrom().getDayId() + " dateTo " + dateInterval.getDateTo().getDayId() + " sampling " + sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_23 $$ log.debug("Service " + serviceUrl + " authentication user=" + serviceUser + " passwd=" + servicePassword + " call method getData" + " for table " + table + " station " + ((station != null) ? station.getStn() : "") + " element " + ((descr != null && descr.getElement() != null) ? descr.getElement() : "") + " dateFrom " + dateInterval.getDateFrom().getDayId() + " dateTo " + dateInterval.getDateTo().getDayId() + " sampling " + sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_23 $$ log.debug("Service " + serviceUrl + " authentication user=" + serviceUser + " passwd=" + servicePassword + " call method getData" + " for table " + table + " station " + ((station != null) ? station.getStn() : "") + " element " + ((descr != null && descr.getElement() != null) ? descr.getElement() : "") + " dateFrom " + dateInterval.getDateFrom().getDayId() + " dateTo " + dateInterval.getDateTo().getDayId() + " sampling " + sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_23 $$ log.debug("Service " + serviceUrl + " authentication user=" + serviceUser + " passwd=" + servicePassword + " call method getData" + " for table " + table + " station " + ((station != null) ? station.getStn() : "") + " element " + ((descr != null && descr.getElement() != null) ? descr.getElement() : "") + " dateFrom " + dateInterval.getDateFrom().getDayId() + " dateTo " + dateInterval.getDateTo().getDayId() + " sampling " + sampling)[ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_25 $$ String dssUrl = (String) call.invoke(new Object[] [ CD ]
Line_13 $$ Call call = (Call) (new Service()).createCall()-->Line_25 $$ String dssUrl = (String) call.invoke(new Object[] [ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_25 $$ String dssUrl = (String) call.invoke(new Object[] [ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_25 $$ String dssUrl = (String) call.invoke(new Object[] [ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_25 $$ String dssUrl = (String) call.invoke(new Object[] [ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_25 $$ String dssUrl = (String) call.invoke(new Object[] [ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_25 $$ String dssUrl = (String) call.invoke(new Object[] [ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_26 $$ if (log.isDebugEnabled()) [ CD ]
Line_26 $$ if (log.isDebugEnabled()) -->Line_26 $$ if (log.isDebugEnabled()) [ CD ]
Line_26 $$ if (log.isDebugEnabled()) -->Line_27 $$ log.debug("Service return url '" + dssUrl + "'")[ CD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_29 $$ if (dssUrl != null && !"".equals(dssUrl)) [ CD ]
Line_29 $$ if (dssUrl != null && !"".equals(dssUrl)) -->Line_29 $$ if (dssUrl != null && !"".equals(dssUrl)) [ CD ]
Line_25 $$ String dssUrl = (String) call.invoke(new Object[] -->Line_29 $$ if (dssUrl != null && !"".equals(dssUrl)) [ FD ]
Line_29 $$ if (dssUrl != null && !"".equals(dssUrl)) -->Line_30 $$ URL dataurl = new URL(dssUrl)[ CD ]
Line_29 $$ if (dssUrl != null && !"".equals(dssUrl)) -->Line_31 $$ DataSequenceSet dsstmp = readDataSet(dataurl.openStream())[ CD ]
Line_31 $$ DataSequenceSet dsstmp = readDataSet(dataurl.openStream())-->Line_31 $$ DataSequenceSet dsstmp = readDataSet(dataurl.openStream())[ CD ]
Line_30 $$ URL dataurl = new URL(dssUrl)-->Line_31 $$ DataSequenceSet dsstmp = readDataSet(dataurl.openStream())[ FD ]
Line_29 $$ if (dssUrl != null && !"".equals(dssUrl)) -->Line_32 $$ if (dsstmp != null && dsstmp.size() > 0) [ CD ]
Line_31 $$ DataSequenceSet dsstmp = readDataSet(dataurl.openStream())-->Line_32 $$ if (dsstmp != null && dsstmp.size() > 0) [ FD ]
Line_32 $$ if (dsstmp != null && dsstmp.size() > 0) -->Line_33 $$ dsList.addAll(dsstmp)[ CD ]
Line_6 $$ Vector dsList = new Vector()-->Line_33 $$ dsList.addAll(dsstmp)[ FD ]
Line_31 $$ DataSequenceSet dsstmp = readDataSet(dataurl.openStream())-->Line_33 $$ dsList.addAll(dsstmp)[ FD ]
Line_32 $$ if (dsstmp != null && dsstmp.size() > 0) -->Line_34 $$ if (log.isDebugEnabled()) [ CD ]
Line_34 $$ if (log.isDebugEnabled()) -->Line_34 $$ if (log.isDebugEnabled()) [ CD ]
Line_34 $$ if (log.isDebugEnabled()) -->Line_35 $$ log.debug("Data set list size is " + dsstmp.size())[ CD ]
Line_31 $$ DataSequenceSet dsstmp = readDataSet(dataurl.openStream())-->Line_35 $$ log.debug("Data set list size is " + dsstmp.size())[ FD ]
Line_32 $$ if (dsstmp != null && dsstmp.size() > 0) -->Line_38 $$ if (log.isDebugEnabled()) [ CD ]
Line_38 $$ if (log.isDebugEnabled()) -->Line_38 $$ if (log.isDebugEnabled()) [ CD ]
Line_38 $$ if (log.isDebugEnabled()) -->Line_39 $$ log.debug("Data set list is empty")[ CD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_44 $$ con = ConnectionPool.getConnection(table)[ CD ]
Line_3 $$ Connection con = null-->Line_44 $$ con = ConnectionPool.getConnection(table)[ FD ]
Line_44 $$ con = ConnectionPool.getConnection(table)-->Line_44 $$ con = ConnectionPool.getConnection(table)[ FD ]
Line_44 $$ con = ConnectionPool.getConnection(table)-->Line_44 $$ con = ConnectionPool.getConnection(table)[ CD ]
Line_5 $$ String table = (descr != null) ? descr.getTable() : null-->Line_44 $$ con = ConnectionPool.getConnection(table)[ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_45 $$ stmt = con.createStatement()[ CD ]
Line_4 $$ Statement stmt = null-->Line_45 $$ stmt = con.createStatement()[ FD ]
Line_45 $$ stmt = con.createStatement()-->Line_45 $$ stmt = con.createStatement()[ FD ]
Line_45 $$ stmt = con.createStatement()-->Line_45 $$ stmt = con.createStatement()[ CD ]
Line_3 $$ Connection con = null-->Line_45 $$ stmt = con.createStatement()[ FD ]
Line_44 $$ con = ConnectionPool.getConnection(table)-->Line_45 $$ stmt = con.createStatement()[ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_46 $$ String className = Settings.get(table + ".classGetter")[ CD ]
Line_46 $$ String className = Settings.get(table + ".classGetter")-->Line_46 $$ String className = Settings.get(table + ".classGetter")[ CD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_47 $$ if (className == null) [ CD ]
Line_46 $$ String className = Settings.get(table + ".classGetter")-->Line_47 $$ if (className == null) [ FD ]
Line_9 $$ if ("yes".equals(wsflag) || "true".equals(wsflag)) -->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ CD ]
Line_6 $$ Vector dsList = new Vector()-->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)-->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)-->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ CD ]
Line_4 $$ Statement stmt = null-->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_45 $$ stmt = con.createStatement()-->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_2 $$ public Vector getData(DataDescription descr, Station station, DateInterval dateInterval, int sampling) throws ApiException -->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_46 $$ String className = Settings.get(table + ".classGetter")-->Line_50 $$ dsList = ((DBAccess) Class.forName(className).newInstance()).getDataSequence(stmt, descr, station, dateInterval, sampling)[ FD ]
Line_4 $$ Statement stmt = null-->Line_58 $$ if (stmt != null) [ FD ]
Line_45 $$ stmt = con.createStatement()-->Line_58 $$ if (stmt != null) [ FD ]
Line_58 $$ if (stmt != null) -->Line_59 $$ stmt.close()[ CD ]
Line_4 $$ Statement stmt = null-->Line_59 $$ stmt.close()[ FD ]
Line_45 $$ stmt = con.createStatement()-->Line_59 $$ stmt.close()[ FD ]
Line_3 $$ Connection con = null-->Line_63 $$ ConnectionPool.releaseConnection(con)[ FD ]
Line_44 $$ con = ConnectionPool.getConnection(table)-->Line_63 $$ ConnectionPool.releaseConnection(con)[ FD ]
