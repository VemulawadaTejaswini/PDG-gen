Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void execute() [ CD ]
Line_4 $$ if (methods == null) -->Line_5 $$ return[ CD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) [ CD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) [ CD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) [ CD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_9 $$ final Resource classFile = i.next()[ CD ]
Line_9 $$ final Resource classFile = i.next()-->Line_9 $$ final Resource classFile = i.next()[ CD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_9 $$ final Resource classFile = i.next()[ FD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_10 $$ if (!classFile.getName().equals(CALLSTACK_FILE)) [ CD ]
Line_10 $$ if (!classFile.getName().equals(CALLSTACK_FILE)) -->Line_10 $$ if (!classFile.getName().equals(CALLSTACK_FILE)) [ CD ]
Line_10 $$ if (!classFile.getName().equals(CALLSTACK_FILE)) -->Line_10 $$ if (!classFile.getName().equals(CALLSTACK_FILE)) [ CD ]
Line_9 $$ final Resource classFile = i.next()-->Line_10 $$ if (!classFile.getName().equals(CALLSTACK_FILE)) [ FD ]
Line_12 $$ InputStream inputStream = classFile.getInputStream()-->Line_12 $$ InputStream inputStream = classFile.getInputStream()[ CD ]
Line_9 $$ final Resource classFile = i.next()-->Line_12 $$ InputStream inputStream = classFile.getInputStream()[ FD ]
Line_13 $$ ClassReader reader = new ClassReader(inputStream)-->Line_14 $$ reader.accept(new MethodAnalyzer(), 0)[ FD ]
Line_7 $$ List<Resource> resources = new ArrayList<Resource>()-->Line_15 $$ resources.add(classFile)[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_15 $$ resources.add(classFile)[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_16 $$ oldSize += classFile.getSize()[ FD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) [ CD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) [ FD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) [ CD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) [ CD ]
Line_7 $$ List<Resource> resources = new ArrayList<Resource>()-->Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) [ FD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_22 $$ final Resource classFile = i.next()[ CD ]
Line_22 $$ final Resource classFile = i.next()-->Line_22 $$ final Resource classFile = i.next()[ CD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_22 $$ final Resource classFile = i.next()[ FD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_22 $$ final Resource classFile = i.next()[ FD ]
Line_24 $$ InputStream inputStream = classFile.getInputStream()-->Line_24 $$ InputStream inputStream = classFile.getInputStream()[ CD ]
Line_22 $$ final Resource classFile = i.next()-->Line_24 $$ InputStream inputStream = classFile.getInputStream()[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_24 $$ InputStream inputStream = classFile.getInputStream()[ FD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) [ CD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) [ CD ]
Line_22 $$ final Resource classFile = i.next()-->Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) [ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) [ FD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_28 $$ reader.accept(new MethodInjector(writer), 0)[ CD ]
Line_25 $$ ClassReader reader = new ClassReader(inputStream)-->Line_28 $$ reader.accept(new MethodInjector(writer), 0)[ FD ]
Line_13 $$ ClassReader reader = new ClassReader(inputStream)-->Line_28 $$ reader.accept(new MethodInjector(writer), 0)[ FD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_29 $$ byte[] b = writer.toByteArray()[ CD ]
Line_29 $$ byte[] b = writer.toByteArray()-->Line_29 $$ byte[] b = writer.toByteArray()[ CD ]
Line_26 $$ ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS)-->Line_29 $$ byte[] b = writer.toByteArray()[ FD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_30 $$ inputStream.close()[ CD ]
Line_24 $$ InputStream inputStream = classFile.getInputStream()-->Line_30 $$ inputStream.close()[ FD ]
Line_12 $$ InputStream inputStream = classFile.getInputStream()-->Line_30 $$ inputStream.close()[ FD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_31 $$ OutputStream outputStream = classFile.getOutputStream()[ CD ]
Line_31 $$ OutputStream outputStream = classFile.getOutputStream()-->Line_31 $$ OutputStream outputStream = classFile.getOutputStream()[ CD ]
Line_22 $$ final Resource classFile = i.next()-->Line_31 $$ OutputStream outputStream = classFile.getOutputStream()[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_31 $$ OutputStream outputStream = classFile.getOutputStream()[ FD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_32 $$ outputStream.write(b)[ CD ]
Line_31 $$ OutputStream outputStream = classFile.getOutputStream()-->Line_32 $$ outputStream.write(b)[ FD ]
Line_29 $$ byte[] b = writer.toByteArray()-->Line_32 $$ outputStream.write(b)[ FD ]
Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) -->Line_33 $$ outputStream.close()[ CD ]
Line_31 $$ OutputStream outputStream = classFile.getOutputStream()-->Line_33 $$ outputStream.close()[ FD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_38 $$ newSize += classFile.getSize()[ CD ]
Line_22 $$ final Resource classFile = i.next()-->Line_38 $$ newSize += classFile.getSize()[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_38 $$ newSize += classFile.getSize()[ FD ]
Line_41 $$ if (!classFile.exists()) -->Line_41 $$ if (!classFile.exists()) [ CD ]
Line_41 $$ if (!classFile.exists()) -->Line_41 $$ if (!classFile.exists()) [ CD ]
Line_22 $$ final Resource classFile = i.next()-->Line_41 $$ if (!classFile.exists()) [ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_41 $$ if (!classFile.exists()) [ FD ]
Line_40 $$ File classFile = new File(classFiles.getDir(), CALLSTACK_FILE)-->Line_41 $$ if (!classFile.exists()) [ FD ]
Line_25 $$ ClassReader reader = new ClassReader(inputStream)-->Line_48 $$ reader.accept(new PushMethodGenerator(writer), 0)[ FD ]
Line_13 $$ ClassReader reader = new ClassReader(inputStream)-->Line_48 $$ reader.accept(new PushMethodGenerator(writer), 0)[ FD ]
Line_45 $$ ClassReader reader = new ClassReader(inputStream)-->Line_48 $$ reader.accept(new PushMethodGenerator(writer), 0)[ FD ]
Line_24 $$ InputStream inputStream = classFile.getInputStream()-->Line_50 $$ inputStream.close()[ FD ]
Line_12 $$ InputStream inputStream = classFile.getInputStream()-->Line_50 $$ inputStream.close()[ FD ]
Line_44 $$ InputStream inputStream = new FileInputStream(classFile)-->Line_50 $$ inputStream.close()[ FD ]
Line_52 $$ byte[] b = writer.toByteArray()-->Line_52 $$ byte[] b = writer.toByteArray()[ CD ]
Line_26 $$ ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS)-->Line_52 $$ byte[] b = writer.toByteArray()[ FD ]
Line_46 $$ ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS)-->Line_52 $$ byte[] b = writer.toByteArray()[ FD ]
Line_24 $$ InputStream inputStream = classFile.getInputStream()-->Line_53 $$ inputStream.close()[ FD ]
Line_12 $$ InputStream inputStream = classFile.getInputStream()-->Line_53 $$ inputStream.close()[ FD ]
Line_44 $$ InputStream inputStream = new FileInputStream(classFile)-->Line_53 $$ inputStream.close()[ FD ]
Line_31 $$ OutputStream outputStream = classFile.getOutputStream()-->Line_55 $$ outputStream.write(b)[ FD ]
Line_54 $$ OutputStream outputStream = new FileOutputStream(classFile)-->Line_55 $$ outputStream.write(b)[ FD ]
Line_29 $$ byte[] b = writer.toByteArray()-->Line_55 $$ outputStream.write(b)[ FD ]
Line_52 $$ byte[] b = writer.toByteArray()-->Line_55 $$ outputStream.write(b)[ FD ]
Line_31 $$ OutputStream outputStream = classFile.getOutputStream()-->Line_56 $$ outputStream.close()[ FD ]
Line_54 $$ OutputStream outputStream = new FileOutputStream(classFile)-->Line_56 $$ outputStream.close()[ FD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) [ FD ]
Line_8 $$ for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) -->Line_9 $$ final Resource classFile = i.next()[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_10 $$ if (!classFile.getName().equals(CALLSTACK_FILE)) [ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_12 $$ InputStream inputStream = classFile.getInputStream()[ FD ]
Line_13 $$ ClassReader reader = new ClassReader(inputStream)-->Line_14 $$ reader.accept(new MethodAnalyzer(), 0)[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_15 $$ resources.add(classFile)[ FD ]
Line_9 $$ final Resource classFile = i.next()-->Line_16 $$ oldSize += classFile.getSize()[ FD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) [ FD ]
Line_21 $$ for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) -->Line_22 $$ final Resource classFile = i.next()[ FD ]
Line_22 $$ final Resource classFile = i.next()-->Line_24 $$ InputStream inputStream = classFile.getInputStream()[ FD ]
Line_22 $$ final Resource classFile = i.next()-->Line_27 $$ if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) [ FD ]
Line_25 $$ ClassReader reader = new ClassReader(inputStream)-->Line_28 $$ reader.accept(new MethodInjector(writer), 0)[ FD ]
Line_26 $$ ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS)-->Line_29 $$ byte[] b = writer.toByteArray()[ FD ]
Line_24 $$ InputStream inputStream = classFile.getInputStream()-->Line_30 $$ inputStream.close()[ FD ]
Line_22 $$ final Resource classFile = i.next()-->Line_31 $$ OutputStream outputStream = classFile.getOutputStream()[ FD ]
Line_31 $$ OutputStream outputStream = classFile.getOutputStream()-->Line_32 $$ outputStream.write(b)[ FD ]
Line_29 $$ byte[] b = writer.toByteArray()-->Line_32 $$ outputStream.write(b)[ FD ]
Line_31 $$ OutputStream outputStream = classFile.getOutputStream()-->Line_33 $$ outputStream.close()[ FD ]
Line_22 $$ final Resource classFile = i.next()-->Line_38 $$ newSize += classFile.getSize()[ FD ]
