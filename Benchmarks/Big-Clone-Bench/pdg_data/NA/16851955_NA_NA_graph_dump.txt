Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testTrainingBackprop() throws IOException [ CD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")[ CD ]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")-->Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")[ CD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_4 $$ temp.deleteOnExit()[ CD ]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")-->Line_4 $$ temp.deleteOnExit()[ FD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_5 $$ IOUtils.copy(this.getClass().getResourceAsStream("xor.data"), new FileOutputStream(temp))[ CD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_6 $$ List<Layer> layers = new ArrayList<Layer>()[ CD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_7 $$ layers.add(Layer.create(2))[ CD ]
Line_6 $$ List<Layer> layers = new ArrayList<Layer>()-->Line_7 $$ layers.add(Layer.create(2))[ FD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_8 $$ layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC))[ CD ]
Line_6 $$ List<Layer> layers = new ArrayList<Layer>()-->Line_8 $$ layers.add(Layer.create(3, ActivationFunction.FANN_SIGMOID_SYMMETRIC))[ FD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_9 $$ layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC))[ CD ]
Line_6 $$ List<Layer> layers = new ArrayList<Layer>()-->Line_9 $$ layers.add(Layer.create(2, ActivationFunction.FANN_SIGMOID_SYMMETRIC))[ FD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_10 $$ layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC))[ CD ]
Line_6 $$ List<Layer> layers = new ArrayList<Layer>()-->Line_10 $$ layers.add(Layer.create(1, ActivationFunction.FANN_SIGMOID_SYMMETRIC))[ FD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_11 $$ Fann fann = new Fann(layers)[ CD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_12 $$ Trainer trainer = new Trainer(fann)[ CD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_13 $$ trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL)[ CD ]
Line_12 $$ Trainer trainer = new Trainer(fann)-->Line_13 $$ trainer.setTrainingAlgorithm(TrainingAlgorithm.FANN_TRAIN_INCREMENTAL)[ FD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_14 $$ float desiredError = .001f[ CD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_15 $$ float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError)[ CD ]
Line_15 $$ float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError)-->Line_15 $$ float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError)[ CD ]
Line_12 $$ Trainer trainer = new Trainer(fann)-->Line_15 $$ float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError)[ FD ]
Line_14 $$ float desiredError = .001f-->Line_15 $$ float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError)[ FD ]
Line_3 $$ File temp = File.createTempFile("fannj_", ".tmp")-->Line_15 $$ float mse = trainer.train(temp.getPath(), 500000, 1000, desiredError)[ FD ]
Line_2 $$ public void testTrainingBackprop() throws IOException -->Line_16 $$ assertTrue("" + mse, mse <= desiredError)[ CD ]
