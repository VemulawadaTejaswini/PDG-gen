Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void init() [ CD ]
Line_2 $$ public void init() -->Line_11 $$ Container c = getContentPane()[ CD ]
Line_11 $$ Container c = getContentPane()-->Line_11 $$ Container c = getContentPane()[ CD ]
Line_2 $$ public void init() -->Line_12 $$ c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS))[ CD ]
Line_11 $$ Container c = getContentPane()-->Line_12 $$ c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS))[ FD ]
Line_2 $$ public void init() -->Line_13 $$ String[] labels = getAppletInfo().split("\n")[ CD ]
Line_13 $$ String[] labels = getAppletInfo().split("\n")-->Line_13 $$ String[] labels = getAppletInfo().split("\n")[ CD ]
Line_2 $$ public void init() -->Line_14 $$ for (int i = 0; i < labels.length; i++) [ CD ]
Line_2 $$ public void init() -->Line_2 $$ public void init() [ CD ]
Line_14 $$ for (int i = 0; i < labels.length; i++) -->Line_14 $$ for (int i = 0; i < labels.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < labels.length; i++) -->Line_14 $$ for (int i = 0; i < labels.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < labels.length; i++) -->Line_14 $$ for (int i = 0; i < labels.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < labels.length; i++) -->Line_15 $$ c.add(new JLabel((labels[i].length() == 0) ? " " : labels[i]))[ CD ]
Line_11 $$ Container c = getContentPane()-->Line_15 $$ c.add(new JLabel((labels[i].length() == 0) ? " " : labels[i]))[ FD ]
Line_2 $$ public void init() -->Line_17 $$ new Worker<Drawing>() [ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_19 $$ Drawing result[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_20 $$ System.out.println("getParameter.datafile:" + getParameter("datafile"))[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_21 $$ if (getParameter("data") != null) [ CD ]
Line_21 $$ if (getParameter("data") != null) -->Line_22 $$ NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), new StringReader(getParameter("data")))[ CD ]
Line_21 $$ if (getParameter("data") != null) -->Line_23 $$ result = (Drawing) domi.readObject(0)[ CD ]
Line_19 $$ Drawing result-->Line_23 $$ result = (Drawing) domi.readObject(0)[ FD ]
Line_23 $$ result = (Drawing) domi.readObject(0)-->Line_23 $$ result = (Drawing) domi.readObject(0)[ FD ]
Line_22 $$ NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), new StringReader(getParameter("data")))-->Line_23 $$ result = (Drawing) domi.readObject(0)[ FD ]
Line_21 $$ if (getParameter("data") != null) -->Line_24 $$ if (getParameter("datafile") != null) [ CD ]
Line_24 $$ if (getParameter("datafile") != null) -->Line_25 $$ URL url = new URL(getDocumentBase(), getParameter("datafile"))[ CD ]
Line_24 $$ if (getParameter("datafile") != null) -->Line_26 $$ InputStream in = url.openConnection().getInputStream()[ CD ]
Line_26 $$ InputStream in = url.openConnection().getInputStream()-->Line_26 $$ InputStream in = url.openConnection().getInputStream()[ CD ]
Line_25 $$ URL url = new URL(getDocumentBase(), getParameter("datafile"))-->Line_26 $$ InputStream in = url.openConnection().getInputStream()[ FD ]
Line_19 $$ Drawing result-->Line_29 $$ result = (Drawing) domi.readObject(0)[ FD ]
Line_23 $$ result = (Drawing) domi.readObject(0)-->Line_29 $$ result = (Drawing) domi.readObject(0)[ FD ]
Line_29 $$ result = (Drawing) domi.readObject(0)-->Line_29 $$ result = (Drawing) domi.readObject(0)[ FD ]
Line_22 $$ NanoXMLDOMInput domi = new NanoXMLDOMInput(new NetFactory(), new StringReader(getParameter("data")))-->Line_29 $$ result = (Drawing) domi.readObject(0)[ FD ]
Line_26 $$ InputStream in = url.openConnection().getInputStream()-->Line_31 $$ in.close()[ FD ]
Line_24 $$ if (getParameter("datafile") != null) -->Line_34 $$ result = null[ CD ]
Line_19 $$ Drawing result-->Line_34 $$ result = null[ FD ]
Line_23 $$ result = (Drawing) domi.readObject(0)-->Line_34 $$ result = null[ FD ]
Line_29 $$ result = (Drawing) domi.readObject(0)-->Line_34 $$ result = null[ FD ]
Line_34 $$ result = null-->Line_34 $$ result = null[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_36 $$ return result[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_39 $$ Container c = getContentPane()[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_39 $$ Container c = getContentPane()[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_40 $$ c.setLayout(new BorderLayout())[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_40 $$ c.setLayout(new BorderLayout())[ FD ]
Line_11 $$ Container c = getContentPane()-->Line_40 $$ c.setLayout(new BorderLayout())[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_41 $$ c.removeAll()[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_41 $$ c.removeAll()[ FD ]
Line_11 $$ Container c = getContentPane()-->Line_41 $$ c.removeAll()[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_42 $$ c.add(drawingPanel = new NetPanel())[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_42 $$ c.add(drawingPanel = new NetPanel())[ FD ]
Line_11 $$ Container c = getContentPane()-->Line_42 $$ c.add(drawingPanel = new NetPanel())[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_43 $$ if (result != null) [ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_43 $$ if (result != null) [ FD ]
Line_19 $$ Drawing result-->Line_43 $$ if (result != null) [ FD ]
Line_23 $$ result = (Drawing) domi.readObject(0)-->Line_43 $$ if (result != null) [ FD ]
Line_29 $$ result = (Drawing) domi.readObject(0)-->Line_43 $$ if (result != null) [ FD ]
Line_34 $$ result = null-->Line_43 $$ if (result != null) [ FD ]
Line_43 $$ if (result != null) -->Line_44 $$ Drawing drawing = (Drawing) result[ CD ]
Line_43 $$ if (result != null) -->Line_45 $$ setDrawing(drawing)[ CD ]
Line_44 $$ Drawing drawing = (Drawing) result-->Line_45 $$ setDrawing(drawing)[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_49 $$ Container c = getContentPane()[ CD ]
Line_49 $$ Container c = getContentPane()-->Line_49 $$ Container c = getContentPane()[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_50 $$ c.setLayout(new BorderLayout())[ CD ]
Line_49 $$ Container c = getContentPane()-->Line_50 $$ c.setLayout(new BorderLayout())[ FD ]
Line_39 $$ Container c = getContentPane()-->Line_50 $$ c.setLayout(new BorderLayout())[ FD ]
Line_11 $$ Container c = getContentPane()-->Line_50 $$ c.setLayout(new BorderLayout())[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_51 $$ c.removeAll()[ CD ]
Line_49 $$ Container c = getContentPane()-->Line_51 $$ c.removeAll()[ FD ]
Line_39 $$ Container c = getContentPane()-->Line_51 $$ c.removeAll()[ FD ]
Line_11 $$ Container c = getContentPane()-->Line_51 $$ c.removeAll()[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_52 $$ c.add(drawingPanel = new NetPanel())[ CD ]
Line_49 $$ Container c = getContentPane()-->Line_52 $$ c.add(drawingPanel = new NetPanel())[ FD ]
Line_39 $$ Container c = getContentPane()-->Line_52 $$ c.add(drawingPanel = new NetPanel())[ FD ]
Line_11 $$ Container c = getContentPane()-->Line_52 $$ c.add(drawingPanel = new NetPanel())[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_53 $$ value.printStackTrace()[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_53 $$ value.printStackTrace()[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_54 $$ getDrawing().add(new TextFigure(value.toString()))[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_54 $$ getDrawing().add(new TextFigure(value.toString()))[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_55 $$ value.printStackTrace()[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_55 $$ value.printStackTrace()[ FD ]
Line_17 $$ new Worker<Drawing>() -->Line_58 $$ Container c = getContentPane()[ CD ]
Line_58 $$ Container c = getContentPane()-->Line_58 $$ Container c = getContentPane()[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_59 $$ initDrawing(getDrawing())[ CD ]
Line_17 $$ new Worker<Drawing>() -->Line_60 $$ c.validate()[ CD ]
Line_58 $$ Container c = getContentPane()-->Line_60 $$ c.validate()[ FD ]
Line_49 $$ Container c = getContentPane()-->Line_60 $$ c.validate()[ FD ]
Line_39 $$ Container c = getContentPane()-->Line_60 $$ c.validate()[ FD ]
Line_11 $$ Container c = getContentPane()-->Line_60 $$ c.validate()[ FD ]
Line_14 $$ for (int i = 0; i < labels.length; i++) -->Line_14 $$ for (int i = 0; i < labels.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < labels.length; i++) -->Line_14 $$ for (int i = 0; i < labels.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < labels.length; i++) -->Line_14 $$ for (int i = 0; i < labels.length; i++) [ FD ]
