Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException [ CD ]
Line_5 $$ Option formatOption = cmdLineParser.addStringOption('f', "format")-->Line_5 $$ Option formatOption = cmdLineParser.addStringOption('f', "format")[ CD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_5 $$ Option formatOption = cmdLineParser.addStringOption('f', "format")[ FD ]
Line_6 $$ Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset")-->Line_6 $$ Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset")[ CD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_6 $$ Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset")[ FD ]
Line_7 $$ Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset")-->Line_7 $$ Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset")[ CD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_7 $$ Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset")[ FD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_8 $$ cmdLineParser.parse(args)[ FD ]
Line_2 $$ public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException -->Line_8 $$ cmdLineParser.parse(args)[ FD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_9 $$ String format = (String) cmdLineParser.getOptionValue(formatOption)[ FD ]
Line_5 $$ Option formatOption = cmdLineParser.addStringOption('f', "format")-->Line_9 $$ String format = (String) cmdLineParser.getOptionValue(formatOption)[ FD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_10 $$ String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption)[ FD ]
Line_6 $$ Option outputEncodingOption = cmdLineParser.addStringOption('c', "outcharset")-->Line_10 $$ String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption)[ FD ]
Line_10 $$ String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption)-->Line_11 $$ if (outputEncoding == null || outputEncoding.trim().equals("")) [ FD ]
Line_11 $$ if (outputEncoding == null || outputEncoding.trim().equals("")) -->Line_12 $$ outputEncoding = "utf-8"[ CD ]
Line_10 $$ String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption)-->Line_12 $$ outputEncoding = "utf-8"[ FD ]
Line_12 $$ outputEncoding = "utf-8"-->Line_12 $$ outputEncoding = "utf-8"[ FD ]
Line_11 $$ if (outputEncoding == null || outputEncoding.trim().equals("")) -->Line_13 $$ System.out.println("Defaulting to output charset utf-8 as argument -c is missing or not valid.")[ CD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_15 $$ String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption)[ FD ]
Line_7 $$ Option inputEncodingOption = cmdLineParser.addStringOption('i', "incharset")-->Line_15 $$ String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption)[ FD ]
Line_10 $$ String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption)-->Line_16 $$ if (inputEncoding == null || outputEncoding.trim().equals("")) [ FD ]
Line_12 $$ outputEncoding = "utf-8"-->Line_16 $$ if (inputEncoding == null || outputEncoding.trim().equals("")) [ FD ]
Line_16 $$ if (inputEncoding == null || outputEncoding.trim().equals("")) -->Line_17 $$ inputEncoding = "utf-8"[ CD ]
Line_15 $$ String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption)-->Line_17 $$ inputEncoding = "utf-8"[ FD ]
Line_17 $$ inputEncoding = "utf-8"-->Line_17 $$ inputEncoding = "utf-8"[ FD ]
Line_16 $$ if (inputEncoding == null || outputEncoding.trim().equals("")) -->Line_18 $$ System.out.println("Defaulting to input charset utf-8 as argument -i is missing or not valid.")[ CD ]
Line_20 $$ String[] remainingArgs = cmdLineParser.getRemainingArgs()-->Line_20 $$ String[] remainingArgs = cmdLineParser.getRemainingArgs()[ CD ]
Line_4 $$ CmdLineParser cmdLineParser = new CmdLineParser()-->Line_20 $$ String[] remainingArgs = cmdLineParser.getRemainingArgs()[ FD ]
Line_21 $$ if (remainingArgs.length != 2) -->Line_22 $$ printUsage("Input and output file are not specified correctly. ")[ CD ]
Line_25 $$ if (!inputFile.exists()) -->Line_25 $$ if (!inputFile.exists()) [ CD ]
Line_25 $$ if (!inputFile.exists()) -->Line_25 $$ if (!inputFile.exists()) [ CD ]
Line_24 $$ File inputFile = new File(remainingArgs[0])-->Line_25 $$ if (!inputFile.exists()) [ FD ]
Line_25 $$ if (!inputFile.exists()) -->Line_26 $$ printUsage("Input file " + remainingArgs[0] + " does not exist. ")[ CD ]
Line_9 $$ String format = (String) cmdLineParser.getOptionValue(formatOption)-->Line_28 $$ if (format == null || format.trim().equals("")) [ FD ]
Line_28 $$ if (format == null || format.trim().equals("")) -->Line_29 $$ format = (String) FileUtil.cutExtension(inputFile.getName()).getValue()[ CD ]
Line_9 $$ String format = (String) cmdLineParser.getOptionValue(formatOption)-->Line_29 $$ format = (String) FileUtil.cutExtension(inputFile.getName()).getValue()[ FD ]
Line_29 $$ format = (String) FileUtil.cutExtension(inputFile.getName()).getValue()-->Line_29 $$ format = (String) FileUtil.cutExtension(inputFile.getName()).getValue()[ FD ]
Line_24 $$ File inputFile = new File(remainingArgs[0])-->Line_29 $$ format = (String) FileUtil.cutExtension(inputFile.getName()).getValue()[ FD ]
Line_32 $$ if (!outputFile.exists()) -->Line_32 $$ if (!outputFile.exists()) [ CD ]
Line_32 $$ if (!outputFile.exists()) -->Line_32 $$ if (!outputFile.exists()) [ CD ]
Line_31 $$ File outputFile = new File(remainingArgs[1])-->Line_32 $$ if (!outputFile.exists()) [ FD ]
Line_32 $$ if (!outputFile.exists()) -->Line_33 $$ outputFile.createNewFile()[ CD ]
Line_31 $$ File outputFile = new File(remainingArgs[1])-->Line_33 $$ outputFile.createNewFile()[ FD ]
Line_9 $$ String format = (String) cmdLineParser.getOptionValue(formatOption)-->Line_36 $$ if ("html".equals(format)) [ FD ]
Line_29 $$ format = (String) FileUtil.cutExtension(inputFile.getName()).getValue()-->Line_36 $$ if ("html".equals(format)) [ FD ]
Line_36 $$ if ("html".equals(format)) -->Line_36 $$ if ("html".equals(format)) [ CD ]
Line_9 $$ String format = (String) cmdLineParser.getOptionValue(formatOption)-->Line_36 $$ if ("html".equals(format)) [ FD ]
Line_29 $$ format = (String) FileUtil.cutExtension(inputFile.getName()).getValue()-->Line_36 $$ if ("html".equals(format)) [ FD ]
Line_36 $$ if ("html".equals(format)) -->Line_37 $$ Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding))[ CD ]
Line_36 $$ if ("html".equals(format)) -->Line_38 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding)[ CD ]
Line_36 $$ if ("html".equals(format)) -->Line_39 $$ char[] buffer = new char[1024][ CD ]
Line_36 $$ if ("html".equals(format)) -->Line_40 $$ int read[ CD ]
Line_36 $$ if ("html".equals(format)) -->Line_41 $$ do [ CD ]
Line_36 $$ if ("html".equals(format)) -->Line_36 $$ if ("html".equals(format)) [ CD ]
Line_40 $$ int read-->Line_41 $$ do [ FD ]
Line_41 $$ do -->Line_42 $$ read = reader.read(buffer)[ CD ]
Line_42 $$ read = reader.read(buffer)-->Line_42 $$ read = reader.read(buffer)[ FD ]
Line_40 $$ int read-->Line_42 $$ read = reader.read(buffer)[ FD ]
Line_42 $$ read = reader.read(buffer)-->Line_42 $$ read = reader.read(buffer)[ CD ]
Line_37 $$ Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding))-->Line_42 $$ read = reader.read(buffer)[ FD ]
Line_39 $$ char[] buffer = new char[1024]-->Line_42 $$ read = reader.read(buffer)[ FD ]
Line_41 $$ do -->Line_43 $$ if (read > 0) [ CD ]
Line_42 $$ read = reader.read(buffer)-->Line_43 $$ if (read > 0) [ FD ]
Line_40 $$ int read-->Line_43 $$ if (read > 0) [ FD ]
Line_43 $$ if (read > 0) -->Line_44 $$ out.write(buffer, 0, read)[ CD ]
Line_38 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding)-->Line_44 $$ out.write(buffer, 0, read)[ FD ]
Line_39 $$ char[] buffer = new char[1024]-->Line_44 $$ out.write(buffer, 0, read)[ FD ]
Line_42 $$ read = reader.read(buffer)-->Line_44 $$ out.write(buffer, 0, read)[ FD ]
Line_40 $$ int read-->Line_44 $$ out.write(buffer, 0, read)[ FD ]
Line_36 $$ if ("html".equals(format)) -->Line_47 $$ out.flush()[ CD ]
Line_38 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding)-->Line_47 $$ out.flush()[ FD ]
Line_36 $$ if ("html".equals(format)) -->Line_48 $$ out.close()[ CD ]
Line_38 $$ OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding)-->Line_48 $$ out.close()[ FD ]
Line_36 $$ if ("html".equals(format)) -->Line_50 $$ printUsage("Format not specified via argument -f. Also guessing for the extension of input file " + inputFile.getName() + " failed")[ CD ]
Line_24 $$ File inputFile = new File(remainingArgs[0])-->Line_50 $$ printUsage("Format not specified via argument -f. Also guessing for the extension of input file " + inputFile.getName() + " failed")[ FD ]
Line_42 $$ read = reader.read(buffer)-->Line_41 $$ do [ FD ]
Line_42 $$ read = reader.read(buffer)-->Line_41 $$ do [ FD ]
Line_42 $$ read = reader.read(buffer)-->Line_43 $$ if (read > 0) [ FD ]
Line_42 $$ read = reader.read(buffer)-->Line_44 $$ out.write(buffer, 0, read)[ FD ]
