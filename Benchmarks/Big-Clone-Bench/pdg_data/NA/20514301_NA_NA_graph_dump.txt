Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ List<String> options(String path) throws TwinException [ CD ]
Line_5 $$ HttpClient client = getClient()-->Line_5 $$ HttpClient client = getClient()[ CD ]
Line_6 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request)-->Line_6 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request)[ CD ]
Line_5 $$ HttpClient client = getClient()-->Line_6 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request)[ FD ]
Line_4 $$ BasicHttpRequest request = new BasicHttpRequest("OPTIONS", url + path)-->Line_6 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request)[ FD ]
Line_7 $$ Header hdr = response.getFirstHeader("Allow")-->Line_7 $$ Header hdr = response.getFirstHeader("Allow")[ CD ]
Line_6 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request)-->Line_7 $$ Header hdr = response.getFirstHeader("Allow")[ FD ]
Line_7 $$ Header hdr = response.getFirstHeader("Allow")-->Line_8 $$ if (hdr == null || hdr.getValue().isEmpty())[ FD ]
Line_8 $$ if (hdr == null || hdr.getValue().isEmpty())-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_8 $$ return Collections.emptyList()-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_9 $$ return Arrays.asList(hdr.getValue().split("\\s*,\\s*"))-->Line_9 $$ return Arrays.asList(hdr.getValue().split("\\s*,\\s*"))[ CD ]
Line_7 $$ Header hdr = response.getFirstHeader("Allow")-->Line_9 $$ return Arrays.asList(hdr.getValue().split("\\s*,\\s*"))[ FD ]
