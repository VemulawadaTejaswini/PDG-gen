Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) [ CD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)[ CD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)[ CD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_4 $$ if (eventID == -1 || nodeID == -1) [ CD ]
Line_4 $$ if (eventID == -1 || nodeID == -1) -->Line_5 $$ log.warn(EventConstants.NODE_UP_EVENT_UEI + " ignored - info incomplete - eventid/nodeid: " + eventID + "/" + nodeID)[ CD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_5 $$ log.warn(EventConstants.NODE_UP_EVENT_UEI + " ignored - info incomplete - eventid/nodeid: " + eventID + "/" + nodeID)[ FD ]
Line_4 $$ if (eventID == -1 || nodeID == -1) -->Line_6 $$ return[ CD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_8 $$ Connection dbConn = null[ CD ]
Line_8 $$ Connection dbConn = null-->Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()[ CD ]
Line_8 $$ Connection dbConn = null-->Line_12 $$ if (openOutageExists(dbConn, nodeID)) [ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_12 $$ if (openOutageExists(dbConn, nodeID)) [ FD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_12 $$ if (openOutageExists(dbConn, nodeID)) [ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_12 $$ if (openOutageExists(dbConn, nodeID)) [ CD ]
Line_8 $$ Connection dbConn = null-->Line_12 $$ if (openOutageExists(dbConn, nodeID)) [ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_12 $$ if (openOutageExists(dbConn, nodeID)) [ FD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_12 $$ if (openOutageExists(dbConn, nodeID)) [ FD ]
Line_8 $$ Connection dbConn = null-->Line_14 $$ dbConn.setAutoCommit(false)[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_14 $$ dbConn.setAutoCommit(false)[ FD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_16 $$ log.error("Unable to change database AutoCommit to FALSE", sqle)[ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)[ CD ]
Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)-->Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)[ CD ]
Line_8 $$ Connection dbConn = null-->Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)[ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_20 $$ outageUpdater.setLong(1, eventID)[ CD ]
Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)-->Line_20 $$ outageUpdater.setLong(1, eventID)[ FD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_20 $$ outageUpdater.setLong(1, eventID)[ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_21 $$ outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime))[ CD ]
Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)-->Line_21 $$ outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime))[ FD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_21 $$ outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime))[ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_22 $$ outageUpdater.setLong(3, nodeID)[ CD ]
Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)-->Line_22 $$ outageUpdater.setLong(3, nodeID)[ FD ]
Line_2 $$ private void handleNodeUp(long eventID, long nodeID, String eventTime) -->Line_22 $$ outageUpdater.setLong(3, nodeID)[ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_23 $$ count = outageUpdater.executeUpdate()[ CD ]
Line_11 $$ int count = 0-->Line_23 $$ count = outageUpdater.executeUpdate()[ FD ]
Line_23 $$ count = outageUpdater.executeUpdate()-->Line_23 $$ count = outageUpdater.executeUpdate()[ FD ]
Line_23 $$ count = outageUpdater.executeUpdate()-->Line_23 $$ count = outageUpdater.executeUpdate()[ CD ]
Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)-->Line_23 $$ count = outageUpdater.executeUpdate()[ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_24 $$ outageUpdater.close()[ CD ]
Line_19 $$ PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGES_FOR_NODE)-->Line_24 $$ outageUpdater.close()[ FD ]
Line_12 $$ if (openOutageExists(dbConn, nodeID)) -->Line_26 $$ log.warn("\'" + EventConstants.NODE_UP_EVENT_UEI + "\' for " + nodeID + " no open record.")[ CD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_26 $$ log.warn("\'" + EventConstants.NODE_UP_EVENT_UEI + "\' for " + nodeID + " no open record.")[ FD ]
Line_8 $$ Connection dbConn = null-->Line_29 $$ dbConn.commit()[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_29 $$ dbConn.commit()[ FD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_30 $$ if (log.isDebugEnabled())[ FD ]
Line_30 $$ if (log.isDebugEnabled())-->Line_30 $$ if (log.isDebugEnabled())[ CD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_30 $$ if (log.isDebugEnabled())[ FD ]
Line_30 $$ if (log.isDebugEnabled())-->Line_30 $$ log.debug("nodeUp closed " + count + " outages for nodeid " + nodeID + " in DB")[ CD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_30 $$ log.debug("nodeUp closed " + count + " outages for nodeid " + nodeID + " in DB")[ FD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_32 $$ log.warn("Rolling back transaction, nodeUp could not be recorded  for nodeId: " + nodeID, se)[ FD ]
Line_8 $$ Connection dbConn = null-->Line_34 $$ dbConn.rollback()[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_34 $$ dbConn.rollback()[ FD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_36 $$ log.warn("SQL exception during rollback, reason", sqle)[ FD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_40 $$ log.warn("SQL exception while handling \'nodeRegainedService\'", se)[ FD ]
Line_8 $$ Connection dbConn = null-->Line_43 $$ if (dbConn != null)[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_43 $$ if (dbConn != null)[ FD ]
Line_43 $$ if (dbConn != null)-->Line_43 $$ dbConn.close()[ CD ]
Line_8 $$ Connection dbConn = null-->Line_43 $$ dbConn.close()[ FD ]
Line_10 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_43 $$ dbConn.close()[ FD ]
Line_3 $$ Category log = ThreadCategory.getInstance(OutageWriter.class)-->Line_45 $$ log.warn("Exception closing JDBC connection", e)[ FD ]
