Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) [ CD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_3 $$ final Dictionary config = new Hashtable()[ CD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_4 $$ config.put(HttpConfig.HTTP_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.enabled", "true"))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_4 $$ config.put(HttpConfig.HTTP_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.enabled", "true"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_4 $$ config.put(HttpConfig.HTTP_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.enabled", "true"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_5 $$ config.put(HttpConfig.HTTPS_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.secure.enabled", "true"))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_5 $$ config.put(HttpConfig.HTTPS_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.secure.enabled", "true"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_5 $$ config.put(HttpConfig.HTTPS_ENABLED_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.secure.enabled", "true"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_6 $$ config.put(HttpConfig.HTTP_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.port", HTTP_PORT_DEFAULT))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_6 $$ config.put(HttpConfig.HTTP_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.port", HTTP_PORT_DEFAULT))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_6 $$ config.put(HttpConfig.HTTP_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.port", HTTP_PORT_DEFAULT))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_7 $$ config.put(HttpConfig.HTTPS_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.secure.port", HTTPS_PORT_DEFAULT))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_7 $$ config.put(HttpConfig.HTTPS_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.secure.port", HTTPS_PORT_DEFAULT))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_7 $$ config.put(HttpConfig.HTTPS_PORT_KEY, getPropertyAsInteger(bc, "org.osgi.service.http.secure.port", HTTPS_PORT_DEFAULT))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_8 $$ config.put(HttpConfig.HOST_KEY, getPropertyAsString(bc, "org.osgi.service.http.hostname", ""))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_8 $$ config.put(HttpConfig.HOST_KEY, getPropertyAsString(bc, "org.osgi.service.http.hostname", ""))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_8 $$ config.put(HttpConfig.HOST_KEY, getPropertyAsString(bc, "org.osgi.service.http.hostname", ""))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_9 $$ Properties mimeProps = new Properties()[ CD ]
Line_9 $$ Properties mimeProps = new Properties()-->Line_11 $$ mimeProps.load(HttpConfig.class.getResourceAsStream("/mime.default"))[ FD ]
Line_12 $$ String propurl = getPropertyAsString(bc, "org.knopflerfish.http.mime.props", "")-->Line_12 $$ String propurl = getPropertyAsString(bc, "org.knopflerfish.http.mime.props", "")[ CD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_12 $$ String propurl = getPropertyAsString(bc, "org.knopflerfish.http.mime.props", "")[ FD ]
Line_12 $$ String propurl = getPropertyAsString(bc, "org.knopflerfish.http.mime.props", "")-->Line_13 $$ if (propurl.length() > 0) [ FD ]
Line_13 $$ if (propurl.length() > 0) -->Line_14 $$ URL url = new URL(propurl)[ CD ]
Line_13 $$ if (propurl.length() > 0) -->Line_15 $$ Properties userMimeProps = new Properties()[ CD ]
Line_13 $$ if (propurl.length() > 0) -->Line_16 $$ userMimeProps.load(url.openStream())[ CD ]
Line_15 $$ Properties userMimeProps = new Properties()-->Line_16 $$ userMimeProps.load(url.openStream())[ FD ]
Line_14 $$ URL url = new URL(propurl)-->Line_16 $$ userMimeProps.load(url.openStream())[ FD ]
Line_13 $$ if (propurl.length() > 0) -->Line_17 $$ Enumeration e = userMimeProps.keys()[ CD ]
Line_17 $$ Enumeration e = userMimeProps.keys()-->Line_17 $$ Enumeration e = userMimeProps.keys()[ CD ]
Line_15 $$ Properties userMimeProps = new Properties()-->Line_17 $$ Enumeration e = userMimeProps.keys()[ FD ]
Line_13 $$ if (propurl.length() > 0) -->Line_18 $$ while (e.hasMoreElements()) [ CD ]
Line_13 $$ if (propurl.length() > 0) -->Line_13 $$ if (propurl.length() > 0) [ CD ]
Line_18 $$ while (e.hasMoreElements()) -->Line_18 $$ while (e.hasMoreElements()) [ CD ]
Line_17 $$ Enumeration e = userMimeProps.keys()-->Line_18 $$ while (e.hasMoreElements()) [ FD ]
Line_18 $$ while (e.hasMoreElements()) -->Line_19 $$ String key = (String) e.nextElement()[ CD ]
Line_17 $$ Enumeration e = userMimeProps.keys()-->Line_19 $$ String key = (String) e.nextElement()[ FD ]
Line_18 $$ while (e.hasMoreElements()) -->Line_20 $$ mimeProps.put(key, userMimeProps.getProperty(key))[ CD ]
Line_9 $$ Properties mimeProps = new Properties()-->Line_20 $$ mimeProps.put(key, userMimeProps.getProperty(key))[ FD ]
Line_19 $$ String key = (String) e.nextElement()-->Line_20 $$ mimeProps.put(key, userMimeProps.getProperty(key))[ FD ]
Line_15 $$ Properties userMimeProps = new Properties()-->Line_20 $$ mimeProps.put(key, userMimeProps.getProperty(key))[ FD ]
Line_19 $$ String key = (String) e.nextElement()-->Line_20 $$ mimeProps.put(key, userMimeProps.getProperty(key))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_26 $$ Vector mimeVector = new Vector(mimeProps.size())[ CD ]
Line_9 $$ Properties mimeProps = new Properties()-->Line_26 $$ Vector mimeVector = new Vector(mimeProps.size())[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_27 $$ Enumeration e = mimeProps.keys()[ CD ]
Line_9 $$ Properties mimeProps = new Properties()-->Line_27 $$ Enumeration e = mimeProps.keys()[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_28 $$ while (e.hasMoreElements()) [ CD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) [ CD ]
Line_28 $$ while (e.hasMoreElements()) -->Line_28 $$ while (e.hasMoreElements()) [ CD ]
Line_17 $$ Enumeration e = userMimeProps.keys()-->Line_28 $$ while (e.hasMoreElements()) [ FD ]
Line_28 $$ while (e.hasMoreElements()) -->Line_29 $$ String key = (String) e.nextElement()[ CD ]
Line_17 $$ Enumeration e = userMimeProps.keys()-->Line_29 $$ String key = (String) e.nextElement()[ FD ]
Line_28 $$ while (e.hasMoreElements()) -->Line_30 $$ mimeVector.addElement(new String[] [ CD ]
Line_26 $$ Vector mimeVector = new Vector(mimeProps.size())-->Line_30 $$ mimeVector.addElement(new String[] [ FD ]
Line_9 $$ Properties mimeProps = new Properties()-->Line_30 $$ mimeVector.addElement(new String[] [ FD ]
Line_29 $$ String key = (String) e.nextElement()-->Line_30 $$ mimeVector.addElement(new String[] [ FD ]
Line_19 $$ String key = (String) e.nextElement()-->Line_30 $$ mimeVector.addElement(new String[] [ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_32 $$ config.put(HttpConfig.MIME_PROPS_KEY, mimeVector)[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_32 $$ config.put(HttpConfig.MIME_PROPS_KEY, mimeVector)[ FD ]
Line_26 $$ Vector mimeVector = new Vector(mimeProps.size())-->Line_32 $$ config.put(HttpConfig.MIME_PROPS_KEY, mimeVector)[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_33 $$ config.put(HttpConfig.SESSION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.session.timeout.default", 1200))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_33 $$ config.put(HttpConfig.SESSION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.session.timeout.default", 1200))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_33 $$ config.put(HttpConfig.SESSION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.session.timeout.default", 1200))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_34 $$ config.put(HttpConfig.CONNECTION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.timeout", 30))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_34 $$ config.put(HttpConfig.CONNECTION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.timeout", 30))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_34 $$ config.put(HttpConfig.CONNECTION_TIMEOUT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.timeout", 30))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_35 $$ config.put(HttpConfig.CONNECTION_MAX_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.max", 50))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_35 $$ config.put(HttpConfig.CONNECTION_MAX_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.max", 50))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_35 $$ config.put(HttpConfig.CONNECTION_MAX_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.connection.max", 50))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_36 $$ config.put(HttpConfig.DNS_LOOKUP_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.dnslookup", "false"))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_36 $$ config.put(HttpConfig.DNS_LOOKUP_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.dnslookup", "false"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_36 $$ config.put(HttpConfig.DNS_LOOKUP_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.dnslookup", "false"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_37 $$ config.put(HttpConfig.RESPONSE_BUFFER_SIZE_DEFAULT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.response.buffer.size.default", 16384))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_37 $$ config.put(HttpConfig.RESPONSE_BUFFER_SIZE_DEFAULT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.response.buffer.size.default", 16384))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_37 $$ config.put(HttpConfig.RESPONSE_BUFFER_SIZE_DEFAULT_KEY, getPropertyAsInteger(bc, "org.knopflerfish.http.response.buffer.size.default", 16384))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_38 $$ config.put(HttpConfig.DEFAULT_CHAR_ENCODING_KEY, getPropertyAsString(bc, HttpConfig.DEFAULT_CHAR_ENCODING_KEY, "ISO-8859-1"))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_38 $$ config.put(HttpConfig.DEFAULT_CHAR_ENCODING_KEY, getPropertyAsString(bc, HttpConfig.DEFAULT_CHAR_ENCODING_KEY, "ISO-8859-1"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_38 $$ config.put(HttpConfig.DEFAULT_CHAR_ENCODING_KEY, getPropertyAsString(bc, HttpConfig.DEFAULT_CHAR_ENCODING_KEY, "ISO-8859-1"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_39 $$ config.put(HttpConfig.REQ_CLIENT_AUTH_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.req.client.auth", "false"))[ CD ]
Line_3 $$ final Dictionary config = new Hashtable()-->Line_39 $$ config.put(HttpConfig.REQ_CLIENT_AUTH_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.req.client.auth", "false"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_39 $$ config.put(HttpConfig.REQ_CLIENT_AUTH_KEY, getPropertyAsBoolean(bc, "org.knopflerfish.http.req.client.auth", "false"))[ FD ]
Line_2 $$ public static Dictionary getDefaultConfig(BundleContext bc) -->Line_40 $$ return config[ CD ]
Line_19 $$ String key = (String) e.nextElement()-->Line_20 $$ mimeProps.put(key, userMimeProps.getProperty(key))[ FD ]
Line_19 $$ String key = (String) e.nextElement()-->Line_20 $$ mimeProps.put(key, userMimeProps.getProperty(key))[ FD ]
Line_29 $$ String key = (String) e.nextElement()-->Line_30 $$ mimeVector.addElement(new String[] [ FD ]
