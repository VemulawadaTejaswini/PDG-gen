Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean initFile(String filename) [ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_3 $$ showStatus("Loading the file, please wait...")[ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_7 $$ if (filename.toLowerCase().endsWith(".spc")) [ CD ]
Line_7 $$ if (filename.toLowerCase().endsWith(".spc")) -->Line_7 $$ if (filename.toLowerCase().endsWith(".spc")) [ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_7 $$ if (filename.toLowerCase().endsWith(".spc")) [ FD ]
Line_10 $$ InputStream stream = url.openStream()-->Line_10 $$ InputStream stream = url.openStream()[ CD ]
Line_9 $$ URL url = new URL(getDocumentBase(), filename)-->Line_10 $$ InputStream stream = url.openStream()[ FD ]
Line_12 $$ byte ftflgs = fichier.readByte()-->Line_12 $$ byte ftflgs = fichier.readByte()[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_12 $$ byte ftflgs = fichier.readByte()[ FD ]
Line_13 $$ byte fversn = fichier.readByte()-->Line_13 $$ byte fversn = fichier.readByte()[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_13 $$ byte fversn = fichier.readByte()[ FD ]
Line_14 $$ if (((ftflgs != 0) && (ftflgs != 0x20)) || (fversn != 0x4B)) -->Line_16 $$ return false[ CD ]
Line_18 $$ byte fexp = fichier.readByte()-->Line_18 $$ byte fexp = fichier.readByte()[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_18 $$ byte fexp = fichier.readByte()[ FD ]
Line_18 $$ byte fexp = fichier.readByte()-->Line_19 $$ if (fexp != 0x80)[ FD ]
Line_18 $$ byte fexp = fichier.readByte()-->Line_19 $$ YFactor = Math.pow(2, fexp) / Math.pow(2, 32)[ FD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_20 $$ Nbpoints = NumericDataUtils.convToIntelInt(fichier.readInt())[ FD ]
Line_21 $$ if (Firstx == shitty_starting_constant) -->Line_22 $$ Firstx = NumericDataUtils.convToIntelDouble(fichier.readLong())[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_22 $$ Firstx = NumericDataUtils.convToIntelDouble(fichier.readLong())[ FD ]
Line_21 $$ if (Firstx == shitty_starting_constant) -->Line_23 $$ Lastx = NumericDataUtils.convToIntelDouble(fichier.readLong())[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_23 $$ Lastx = NumericDataUtils.convToIntelDouble(fichier.readLong())[ FD ]
Line_25 $$ byte fxtype = fichier.readByte()-->Line_25 $$ byte fxtype = fichier.readByte()[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_25 $$ byte fxtype = fichier.readByte()[ FD ]
Line_121 $$ byte fytype = fichier.readByte()-->Line_121 $$ byte fytype = fichier.readByte()[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_121 $$ byte fytype = fichier.readByte()[ FD ]
Line_12 $$ byte ftflgs = fichier.readByte()-->Line_208 $$ if (ftflgs == 0) [ FD ]
Line_208 $$ if (ftflgs == 0) -->Line_209 $$ fichier.skipBytes(512 - 30)[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_209 $$ fichier.skipBytes(512 - 30)[ FD ]
Line_208 $$ if (ftflgs == 0) -->Line_211 $$ fichier.skipBytes(188)[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_211 $$ fichier.skipBytes(188)[ FD ]
Line_208 $$ if (ftflgs == 0) -->Line_212 $$ byte b[ CD ]
Line_208 $$ if (ftflgs == 0) -->Line_213 $$ int i = 0[ CD ]
Line_208 $$ if (ftflgs == 0) -->Line_215 $$ do [ CD ]
Line_208 $$ if (ftflgs == 0) -->Line_208 $$ if (ftflgs == 0) [ CD ]
Line_212 $$ byte b-->Line_215 $$ do [ FD ]
Line_215 $$ do -->Line_216 $$ b = fichier.readByte()[ CD ]
Line_216 $$ b = fichier.readByte()-->Line_216 $$ b = fichier.readByte()[ FD ]
Line_212 $$ byte b-->Line_216 $$ b = fichier.readByte()[ FD ]
Line_216 $$ b = fichier.readByte()-->Line_216 $$ b = fichier.readByte()[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_216 $$ b = fichier.readByte()[ FD ]
Line_215 $$ do -->Line_218 $$ i++[ CD ]
Line_213 $$ int i = 0-->Line_218 $$ i++[ FD ]
Line_208 $$ if (ftflgs == 0) -->Line_220 $$ int j = 0[ CD ]
Line_208 $$ if (ftflgs == 0) -->Line_222 $$ do [ CD ]
Line_208 $$ if (ftflgs == 0) -->Line_208 $$ if (ftflgs == 0) [ CD ]
Line_216 $$ b = fichier.readByte()-->Line_222 $$ do [ FD ]
Line_212 $$ byte b-->Line_222 $$ do [ FD ]
Line_222 $$ do -->Line_223 $$ b = fichier.readByte()[ CD ]
Line_223 $$ b = fichier.readByte()-->Line_223 $$ b = fichier.readByte()[ FD ]
Line_216 $$ b = fichier.readByte()-->Line_223 $$ b = fichier.readByte()[ FD ]
Line_212 $$ byte b-->Line_223 $$ b = fichier.readByte()[ FD ]
Line_223 $$ b = fichier.readByte()-->Line_223 $$ b = fichier.readByte()[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_223 $$ b = fichier.readByte()[ FD ]
Line_222 $$ do -->Line_225 $$ j++[ CD ]
Line_220 $$ int j = 0-->Line_225 $$ j++[ FD ]
Line_208 $$ if (ftflgs == 0) -->Line_227 $$ fichier.skipBytes(512 - 30 - 188 - i - j)[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_227 $$ fichier.skipBytes(512 - 30 - 188 - i - j)[ FD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_229 $$ fichier.skipBytes(32)[ FD ]
Line_18 $$ byte fexp = fichier.readByte()-->Line_231 $$ if (fexp == 0x80) [ FD ]
Line_231 $$ if (fexp == 0x80) -->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ CD ]
Line_231 $$ if (fexp == 0x80) -->Line_231 $$ if (fexp == 0x80) [ CD ]
Line_213 $$ int i = 0-->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ CD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ CD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_213 $$ int i = 0-->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_233 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelFloat(fichier.readInt())[ CD ]
Line_233 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelFloat(fichier.readInt())-->Line_233 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelFloat(fichier.readInt())[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_233 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelFloat(fichier.readInt())[ FD ]
Line_231 $$ if (fexp == 0x80) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ CD ]
Line_231 $$ if (fexp == 0x80) -->Line_231 $$ if (fexp == 0x80) [ CD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_213 $$ int i = 0-->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_236 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ CD ]
Line_236 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ CD ]
Line_236 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_213 $$ int i = 0-->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_236 $$ for (int i = 0; i < Nbpoints; i++) -->Line_237 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelInt(fichier.readInt())[ CD ]
Line_237 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelInt(fichier.readInt())-->Line_237 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelInt(fichier.readInt())[ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_237 $$ My_ZoneVisu.tableau_points[i] = NumericDataUtils.convToIntelInt(fichier.readInt())[ FD ]
Line_7 $$ if (filename.toLowerCase().endsWith(".spc")) -->Line_245 $$ return true[ CD ]
Line_9 $$ URL url = new URL(getDocumentBase(), filename)-->Line_249 $$ InputStream stream = url.openStream()[ FD ]
Line_253 $$ while ((s = fichier.readLine()) != null) -->Line_253 $$ while ((s = fichier.readLine()) != null) [ FD ]
Line_252 $$ String s-->Line_253 $$ while ((s = fichier.readLine()) != null) [ FD ]
Line_253 $$ while ((s = fichier.readLine()) != null) -->Line_253 $$ while ((s = fichier.readLine()) != null) [ CD ]
Line_11 $$ DataInputStream fichier = new DataInputStream(stream)-->Line_253 $$ while ((s = fichier.readLine()) != null) [ FD ]
Line_253 $$ while ((s = fichier.readLine()) != null) -->Line_254 $$ texte.addElement(s)[ CD ]
Line_253 $$ while ((s = fichier.readLine()) != null) -->Line_254 $$ texte.addElement(s)[ FD ]
Line_252 $$ String s-->Line_254 $$ texte.addElement(s)[ FD ]
Line_2 $$ public boolean initFile(String filename) -->Line_260 $$ int My_Counter = 0[ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_261 $$ String uneligne = ""[ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_262 $$ while (My_Counter < nbLignes) [ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_2 $$ public boolean initFile(String filename) [ CD ]
Line_260 $$ int My_Counter = 0-->Line_262 $$ while (My_Counter < nbLignes) [ FD ]
Line_265 $$ do -->Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)[ CD ]
Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)-->Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)[ FD ]
Line_261 $$ String uneligne = ""-->Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)[ FD ]
Line_260 $$ int My_Counter = 0-->Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)[ FD ]
Line_265 $$ do -->Line_267 $$ My_Counter++[ CD ]
Line_260 $$ int My_Counter = 0-->Line_267 $$ My_Counter++[ FD ]
Line_265 $$ do -->Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")[ FD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_265 $$ do [ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_265 $$ do [ FD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_270 $$ if (mon_token.hasMoreTokens() == true) [ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_270 $$ if (mon_token.hasMoreTokens() == true) [ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_271 $$ String keyword = mon_token.nextToken()[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_271 $$ String keyword = mon_token.nextToken()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_271 $$ String keyword = mon_token.nextToken()[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_272 $$ if (StringDataUtils.compareStrings(keyword, "##TITLE=") == 0)[ CD ]
Line_272 $$ if (StringDataUtils.compareStrings(keyword, "##TITLE=") == 0)-->Line_272 $$ TexteTitre = uneligne.substring(9)[ CD ]
Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)-->Line_272 $$ TexteTitre = uneligne.substring(9)[ FD ]
Line_261 $$ String uneligne = ""-->Line_272 $$ TexteTitre = uneligne.substring(9)[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_273 $$ if (StringDataUtils.compareStrings(keyword, "##FIRSTX=") == 0)[ CD ]
Line_273 $$ if (StringDataUtils.compareStrings(keyword, "##FIRSTX=") == 0)-->Line_273 $$ Firstx = Double.valueOf(mon_token.nextToken()).doubleValue()[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_273 $$ Firstx = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_273 $$ Firstx = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_274 $$ if (StringDataUtils.compareStrings(keyword, "##LASTX=") == 0)[ CD ]
Line_274 $$ if (StringDataUtils.compareStrings(keyword, "##LASTX=") == 0)-->Line_274 $$ Lastx = Double.valueOf(mon_token.nextToken()).doubleValue()[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_274 $$ Lastx = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_274 $$ Lastx = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_275 $$ if (StringDataUtils.compareStrings(keyword, "##YFACTOR=") == 0)[ CD ]
Line_275 $$ if (StringDataUtils.compareStrings(keyword, "##YFACTOR=") == 0)-->Line_275 $$ YFactor = Double.valueOf(mon_token.nextToken()).doubleValue()[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_275 $$ YFactor = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_275 $$ YFactor = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_276 $$ if (StringDataUtils.compareStrings(keyword, "##NPOINTS=") == 0)[ CD ]
Line_276 $$ if (StringDataUtils.compareStrings(keyword, "##NPOINTS=") == 0)-->Line_276 $$ Nbpoints = Integer.valueOf(mon_token.nextToken()).intValue()[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_276 $$ Nbpoints = Integer.valueOf(mon_token.nextToken()).intValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_276 $$ Nbpoints = Integer.valueOf(mon_token.nextToken()).intValue()[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_277 $$ if (StringDataUtils.compareStrings(keyword, "##XUNITS=") == 0)[ CD ]
Line_277 $$ if (StringDataUtils.compareStrings(keyword, "##XUNITS=") == 0)-->Line_277 $$ x_units = uneligne.substring(10)[ CD ]
Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)-->Line_277 $$ x_units = uneligne.substring(10)[ FD ]
Line_261 $$ String uneligne = ""-->Line_277 $$ x_units = uneligne.substring(10)[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_278 $$ if (StringDataUtils.compareStrings(keyword, "##YUNITS=") == 0)[ CD ]
Line_278 $$ if (StringDataUtils.compareStrings(keyword, "##YUNITS=") == 0)-->Line_278 $$ y_units = uneligne.substring(10)[ CD ]
Line_266 $$ uneligne = (String) texte.elementAt(My_Counter)-->Line_278 $$ y_units = uneligne.substring(10)[ FD ]
Line_261 $$ String uneligne = ""-->Line_278 $$ y_units = uneligne.substring(10)[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_279 $$ if (StringDataUtils.compareStrings(keyword, "##.OBSERVE") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "FREQUENCY=") == 0)[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_279 $$ if (StringDataUtils.compareStrings(keyword, "##.OBSERVE") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "FREQUENCY=") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_279 $$ if (StringDataUtils.compareStrings(keyword, "##.OBSERVE") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "FREQUENCY=") == 0)[ FD ]
Line_279 $$ if (StringDataUtils.compareStrings(keyword, "##.OBSERVE") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "FREQUENCY=") == 0)-->Line_279 $$ nmr_observe_frequency = Double.valueOf(mon_token.nextToken()).doubleValue()[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_279 $$ nmr_observe_frequency = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_279 $$ nmr_observe_frequency = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_280 $$ if (StringDataUtils.compareStrings(keyword, "##XYDATA=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(X++(Y..Y))") == 0)[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_280 $$ if (StringDataUtils.compareStrings(keyword, "##XYDATA=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(X++(Y..Y))") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_280 $$ if (StringDataUtils.compareStrings(keyword, "##XYDATA=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(X++(Y..Y))") == 0)[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_281 $$ if (StringDataUtils.compareStrings(keyword, "##XYDATA=(X++(Y..Y))") == 0)[ CD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_282 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0)[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_282 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_282 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0)[ FD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_282 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_282 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0)[ FD ]
Line_270 $$ if (mon_token.hasMoreTokens() == true) -->Line_283 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=(XY..XY)") == 0)[ CD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_283 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=(XY..XY)") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_283 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=(XY..XY)") == 0)[ FD ]
Line_2 $$ public boolean initFile(String filename) -->Line_288 $$ if (Datatype.compareTo("UNKNOWN") == 0)[ CD ]
Line_288 $$ if (Datatype.compareTo("UNKNOWN") == 0)-->Line_288 $$ return false[ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_289 $$ if (Datatype.compareTo("PEAK TABLE") == 0 && x_units.compareTo("?") == 0)[ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_290 $$ if (StringDataUtils.truncateEndBlanks(x_units).compareTo("HZ") == 0 && nmr_observe_frequency != shitty_starting_constant) [ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_295 $$ String resultat_move_points = Move_Points_To_Tableau()[ CD ]
Line_295 $$ String resultat_move_points = Move_Points_To_Tableau()-->Line_295 $$ String resultat_move_points = Move_Points_To_Tableau()[ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_296 $$ if (resultat_move_points.compareTo("OK") != 0) [ CD ]
Line_295 $$ String resultat_move_points = Move_Points_To_Tableau()-->Line_296 $$ if (resultat_move_points.compareTo("OK") != 0) [ FD ]
Line_296 $$ if (resultat_move_points.compareTo("OK") != 0) -->Line_298 $$ return false[ CD ]
Line_2 $$ public boolean initFile(String filename) -->Line_300 $$ return true[ CD ]
Line_216 $$ b = fichier.readByte()-->Line_215 $$ do [ FD ]
Line_216 $$ b = fichier.readByte()-->Line_215 $$ do [ FD ]
Line_223 $$ b = fichier.readByte()-->Line_222 $$ do [ FD ]
Line_223 $$ b = fichier.readByte()-->Line_222 $$ do [ FD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_232 $$ for (int i = 0; i < Nbpoints; i++) -->Line_232 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_236 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_236 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_236 $$ for (int i = 0; i < Nbpoints; i++) -->Line_236 $$ for (int i = 0; i < Nbpoints; i++) [ FD ]
Line_253 $$ while ((s = fichier.readLine()) != null) -->Line_254 $$ texte.addElement(s)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_270 $$ if (mon_token.hasMoreTokens() == true) [ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_271 $$ String keyword = mon_token.nextToken()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_273 $$ Firstx = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_274 $$ Lastx = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_275 $$ YFactor = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_276 $$ Nbpoints = Integer.valueOf(mon_token.nextToken()).intValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_279 $$ if (StringDataUtils.compareStrings(keyword, "##.OBSERVE") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "FREQUENCY=") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_279 $$ nmr_observe_frequency = Double.valueOf(mon_token.nextToken()).doubleValue()[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_280 $$ if (StringDataUtils.compareStrings(keyword, "##XYDATA=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(X++(Y..Y))") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_282 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_282 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "(XY..XY)") == 0)[ FD ]
Line_264 $$ StringTokenizer mon_token-->Line_283 $$ if (StringDataUtils.compareStrings(keyword, "##PEAK") == 0 && StringDataUtils.compareStrings(mon_token.nextToken(), "TABLE=(XY..XY)") == 0)[ FD ]
Line_268 $$ mon_token = new StringTokenizer(uneligne, " ")-->Line_265 $$ do [ FD ]
