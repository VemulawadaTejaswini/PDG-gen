Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) [ CD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_3 $$ BufferedReader buffReader = null[ CD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_4 $$ BufferedOutputStream buffOS = null[ CD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_5 $$ URLConnection urlconnection = null[ CD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_6 $$ char flagChar = '0'[ CD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_7 $$ boolean flag = true[ CD ]
Line_5 $$ URLConnection urlconnection = null-->Line_9 $$ urlconnection = url.openConnection()[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_9 $$ urlconnection = url.openConnection()[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_9 $$ urlconnection = url.openConnection()[ CD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_9 $$ urlconnection = url.openConnection()[ FD ]
Line_5 $$ URLConnection urlconnection = null-->Line_10 $$ urlconnection.setDoOutput(true)[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_10 $$ urlconnection.setDoOutput(true)[ FD ]
Line_5 $$ URLConnection urlconnection = null-->Line_11 $$ urlconnection.setDoInput(true)[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_11 $$ urlconnection.setDoInput(true)[ FD ]
Line_5 $$ URLConnection urlconnection = null-->Line_12 $$ urlconnection.setUseCaches(false)[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_12 $$ urlconnection.setUseCaches(false)[ FD ]
Line_5 $$ URLConnection urlconnection = null-->Line_13 $$ urlconnection.setRequestProperty("Content-type", "application/octet-stream")[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_13 $$ urlconnection.setRequestProperty("Content-type", "application/octet-stream")[ FD ]
Line_4 $$ BufferedOutputStream buffOS = null-->Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())[ FD ]
Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())-->Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())[ FD ]
Line_5 $$ URLConnection urlconnection = null-->Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())[ FD ]
Line_4 $$ BufferedOutputStream buffOS = null-->Line_15 $$ buffOS.write((byte[]) typeFlag.getBytes())[ FD ]
Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())-->Line_15 $$ buffOS.write((byte[]) typeFlag.getBytes())[ FD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_15 $$ buffOS.write((byte[]) typeFlag.getBytes())[ FD ]
Line_4 $$ BufferedOutputStream buffOS = null-->Line_16 $$ buffOS.write(arrByte)[ FD ]
Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())-->Line_16 $$ buffOS.write(arrByte)[ FD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_16 $$ buffOS.write(arrByte)[ FD ]
Line_4 $$ BufferedOutputStream buffOS = null-->Line_17 $$ buffOS.flush()[ FD ]
Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())-->Line_17 $$ buffOS.flush()[ FD ]
Line_18 $$ if (Config.DEBUG)-->Line_18 $$ System.out.println("Applet output file successfully! ")[ CD ]
Line_3 $$ BufferedReader buffReader = null-->Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))[ FD ]
Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))-->Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))[ FD ]
Line_5 $$ URLConnection urlconnection = null-->Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))[ FD ]
Line_9 $$ urlconnection = url.openConnection()-->Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))[ FD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_21 $$ String serReturnMess = buffReader.readLine()[ CD ]
Line_3 $$ BufferedReader buffReader = null-->Line_21 $$ String serReturnMess = buffReader.readLine()[ FD ]
Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))-->Line_21 $$ String serReturnMess = buffReader.readLine()[ FD ]
Line_22 $$ if (Config.DEBUG)-->Line_22 $$ System.out.println("Applet check status successfully! " + serReturnMess)[ CD ]
Line_6 $$ char flagChar = '0'-->Line_23 $$ flagChar = '2'[ FD ]
Line_23 $$ flagChar = '2'-->Line_23 $$ flagChar = '2'[ FD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_24 $$ if (serReturnMess != null) [ FD ]
Line_24 $$ if (serReturnMess != null) -->Line_25 $$ stringBuff.append(serReturnMess)[ CD ]
Line_20 $$ StringBuffer stringBuff = new StringBuffer()-->Line_25 $$ stringBuff.append(serReturnMess)[ FD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_25 $$ stringBuff.append(serReturnMess)[ FD ]
Line_24 $$ if (serReturnMess != null) -->Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'[ CD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'[ FD ]
Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'-->Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'[ FD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'[ FD ]
Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'-->Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'[ FD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'[ FD ]
Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'-->Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'[ FD ]
Line_24 $$ if (serReturnMess != null) -->Line_27 $$ flagChar = serReturnMess.charAt(0)[ CD ]
Line_6 $$ char flagChar = '0'-->Line_27 $$ flagChar = serReturnMess.charAt(0)[ FD ]
Line_23 $$ flagChar = '2'-->Line_27 $$ flagChar = serReturnMess.charAt(0)[ FD ]
Line_27 $$ flagChar = serReturnMess.charAt(0)-->Line_27 $$ flagChar = serReturnMess.charAt(0)[ FD ]
Line_27 $$ flagChar = serReturnMess.charAt(0)-->Line_27 $$ flagChar = serReturnMess.charAt(0)[ CD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_27 $$ flagChar = serReturnMess.charAt(0)[ FD ]
Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'-->Line_27 $$ flagChar = serReturnMess.charAt(0)[ FD ]
Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) -->Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) [ FD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) [ FD ]
Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'-->Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) [ FD ]
Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) -->Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) [ CD ]
Line_3 $$ BufferedReader buffReader = null-->Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) [ FD ]
Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))-->Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) [ FD ]
Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) -->Line_30 $$ if (serReturnMess.length() <= 0)[ CD ]
Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) -->Line_30 $$ if (serReturnMess.length() <= 0)[ FD ]
Line_21 $$ String serReturnMess = buffReader.readLine()-->Line_30 $$ if (serReturnMess.length() <= 0)[ FD ]
Line_26 $$ serReturnMess = serReturnMess.substring(serReturnMess.indexOf(32)).trim() + '2'-->Line_30 $$ if (serReturnMess.length() <= 0)[ FD ]
Line_4 $$ BufferedOutputStream buffOS = null-->Line_37 $$ if (buffOS != null)[ FD ]
Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())-->Line_37 $$ if (buffOS != null)[ FD ]
Line_37 $$ if (buffOS != null)-->Line_37 $$ buffOS.close()[ CD ]
Line_4 $$ BufferedOutputStream buffOS = null-->Line_37 $$ buffOS.close()[ FD ]
Line_14 $$ buffOS = new BufferedOutputStream(urlconnection.getOutputStream())-->Line_37 $$ buffOS.close()[ FD ]
Line_3 $$ BufferedReader buffReader = null-->Line_38 $$ if (buffReader != null)[ FD ]
Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))-->Line_38 $$ if (buffReader != null)[ FD ]
Line_38 $$ if (buffReader != null)-->Line_38 $$ buffReader.close()[ CD ]
Line_3 $$ BufferedReader buffReader = null-->Line_38 $$ buffReader.close()[ FD ]
Line_19 $$ buffReader = new BufferedReader(new InputStreamReader(urlconnection.getInputStream()))-->Line_38 $$ buffReader.close()[ FD ]
Line_42 $$ if (flagChar == '2' || flagChar == '3')-->Line_42 $$ flag = true[ CD ]
Line_7 $$ boolean flag = true-->Line_42 $$ flag = true[ FD ]
Line_42 $$ flag = true-->Line_42 $$ flag = true[ FD ]
Line_42 $$ if (flagChar == '2' || flagChar == '3')-->Line_42 $$ flag = false[ CD ]
Line_7 $$ boolean flag = true-->Line_42 $$ flag = false[ FD ]
Line_42 $$ flag = true-->Line_42 $$ flag = false[ FD ]
Line_42 $$ flag = false-->Line_42 $$ flag = false[ FD ]
Line_2 $$ private synchronized boolean saveU(URL url, String typeFlag, byte[] arrByte) -->Line_44 $$ return flag[ CD ]
Line_29 $$ while ((serReturnMess = buffReader.readLine()) != null) -->Line_30 $$ if (serReturnMess.length() <= 0)[ FD ]
