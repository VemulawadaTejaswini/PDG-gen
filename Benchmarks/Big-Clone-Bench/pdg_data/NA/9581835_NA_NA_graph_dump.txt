Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ String WTKdir = null[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ String sourceFile = null[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ String instrFile = null[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ String outFile = null[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ String jadFile = null[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ Manifest mnf[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ if (args.length == 0) [ CD ]
Line_9 $$ if (args.length == 0) -->Line_10 $$ usage()[ CD ]
Line_9 $$ if (args.length == 0) -->Line_11 $$ return[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ int i = 0[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ while (i < args.length && args[i].startsWith("-")) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_14 $$ while (i < args.length && args[i].startsWith("-")) -->Line_15 $$ if (("-WTK".equals(args[i])) && (i < args.length - 1)) [ CD ]
Line_15 $$ if (("-WTK".equals(args[i])) && (i < args.length - 1)) -->Line_16 $$ i++[ CD ]
Line_13 $$ int i = 0-->Line_16 $$ i++[ FD ]
Line_15 $$ if (("-WTK".equals(args[i])) && (i < args.length - 1)) -->Line_17 $$ WTKdir = args[i][ CD ]
Line_17 $$ WTKdir = args[i]-->Line_17 $$ WTKdir = args[i][ FD ]
Line_3 $$ String WTKdir = null-->Line_17 $$ WTKdir = args[i][ FD ]
Line_15 $$ if (("-WTK".equals(args[i])) && (i < args.length - 1)) -->Line_18 $$ if (("-source".equals(args[i])) && (i < args.length - 1)) [ CD ]
Line_18 $$ if (("-source".equals(args[i])) && (i < args.length - 1)) -->Line_19 $$ i++[ CD ]
Line_13 $$ int i = 0-->Line_19 $$ i++[ FD ]
Line_18 $$ if (("-source".equals(args[i])) && (i < args.length - 1)) -->Line_20 $$ sourceFile = args[i][ CD ]
Line_20 $$ sourceFile = args[i]-->Line_20 $$ sourceFile = args[i][ FD ]
Line_4 $$ String sourceFile = null-->Line_20 $$ sourceFile = args[i][ FD ]
Line_18 $$ if (("-source".equals(args[i])) && (i < args.length - 1)) -->Line_21 $$ if (("-instr".equals(args[i])) && (i < args.length - 1)) [ CD ]
Line_21 $$ if (("-instr".equals(args[i])) && (i < args.length - 1)) -->Line_22 $$ i++[ CD ]
Line_13 $$ int i = 0-->Line_22 $$ i++[ FD ]
Line_21 $$ if (("-instr".equals(args[i])) && (i < args.length - 1)) -->Line_23 $$ instrFile = args[i][ CD ]
Line_23 $$ instrFile = args[i]-->Line_23 $$ instrFile = args[i][ FD ]
Line_5 $$ String instrFile = null-->Line_23 $$ instrFile = args[i][ FD ]
Line_21 $$ if (("-instr".equals(args[i])) && (i < args.length - 1)) -->Line_24 $$ if (("-o".equals(args[i])) && (i < args.length - 1)) [ CD ]
Line_24 $$ if (("-o".equals(args[i])) && (i < args.length - 1)) -->Line_25 $$ i++[ CD ]
Line_13 $$ int i = 0-->Line_25 $$ i++[ FD ]
Line_24 $$ if (("-o".equals(args[i])) && (i < args.length - 1)) -->Line_26 $$ outFile = args[i][ CD ]
Line_26 $$ outFile = args[i]-->Line_26 $$ outFile = args[i][ FD ]
Line_6 $$ String outFile = null-->Line_26 $$ outFile = args[i][ FD ]
Line_24 $$ if (("-o".equals(args[i])) && (i < args.length - 1)) -->Line_27 $$ if (("-jad".equals(args[i])) && (i < args.length - 1)) [ CD ]
Line_27 $$ if (("-jad".equals(args[i])) && (i < args.length - 1)) -->Line_28 $$ i++[ CD ]
Line_13 $$ int i = 0-->Line_28 $$ i++[ FD ]
Line_27 $$ if (("-jad".equals(args[i])) && (i < args.length - 1)) -->Line_29 $$ jadFile = args[i][ CD ]
Line_29 $$ jadFile = args[i]-->Line_29 $$ jadFile = args[i][ FD ]
Line_7 $$ String jadFile = null-->Line_29 $$ jadFile = args[i][ FD ]
Line_27 $$ if (("-jad".equals(args[i])) && (i < args.length - 1)) -->Line_31 $$ System.out.println("Error: Unrecognized option: " + args[i])[ CD ]
Line_27 $$ if (("-jad".equals(args[i])) && (i < args.length - 1)) -->Line_32 $$ System.exit(0)[ CD ]
Line_14 $$ while (i < args.length && args[i].startsWith("-")) -->Line_34 $$ i++[ CD ]
Line_13 $$ int i = 0-->Line_34 $$ i++[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_36 $$ if (WTKdir == null || sourceFile == null || instrFile == null) [ CD ]
Line_36 $$ if (WTKdir == null || sourceFile == null || instrFile == null) -->Line_37 $$ System.out.println("Error: Missing parameter!!!")[ CD ]
Line_36 $$ if (WTKdir == null || sourceFile == null || instrFile == null) -->Line_38 $$ usage()[ CD ]
Line_36 $$ if (WTKdir == null || sourceFile == null || instrFile == null) -->Line_39 $$ return[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_41 $$ if (outFile == null)[ CD ]
Line_26 $$ outFile = args[i]-->Line_41 $$ if (outFile == null)[ FD ]
Line_6 $$ String outFile = null-->Line_41 $$ if (outFile == null)[ FD ]
Line_41 $$ if (outFile == null)-->Line_41 $$ outFile = sourceFile[ CD ]
Line_26 $$ outFile = args[i]-->Line_41 $$ outFile = sourceFile[ FD ]
Line_6 $$ String outFile = null-->Line_41 $$ outFile = sourceFile[ FD ]
Line_41 $$ outFile = sourceFile-->Line_41 $$ outFile = sourceFile[ FD ]
Line_20 $$ sourceFile = args[i]-->Line_41 $$ outFile = sourceFile[ FD ]
Line_4 $$ String sourceFile = null-->Line_41 $$ outFile = sourceFile[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_42 $$ FileInputStream fisJar[ CD ]
Line_42 $$ FileInputStream fisJar-->Line_44 $$ fisJar = new FileInputStream(sourceFile)[ FD ]
Line_44 $$ fisJar = new FileInputStream(sourceFile)-->Line_44 $$ fisJar = new FileInputStream(sourceFile)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_50 $$ FileOutputStream fosJar[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_51 $$ File aux = null[ CD ]
Line_51 $$ File aux = null-->Line_53 $$ aux = File.createTempFile("predef", "aux")[ FD ]
Line_53 $$ aux = File.createTempFile("predef", "aux")-->Line_53 $$ aux = File.createTempFile("predef", "aux")[ FD ]
Line_53 $$ aux = File.createTempFile("predef", "aux")-->Line_53 $$ aux = File.createTempFile("predef", "aux")[ CD ]
Line_50 $$ FileOutputStream fosJar-->Line_54 $$ fosJar = new FileOutputStream(aux)[ FD ]
Line_54 $$ fosJar = new FileOutputStream(aux)-->Line_54 $$ fosJar = new FileOutputStream(aux)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_60 $$ JarFile instrJar = null[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_61 $$ Enumeration en = null[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_62 $$ File tempDir = null[ CD ]
Line_60 $$ JarFile instrJar = null-->Line_64 $$ instrJar = new JarFile(instrFile)[ FD ]
Line_64 $$ instrJar = new JarFile(instrFile)-->Line_64 $$ instrJar = new JarFile(instrFile)[ FD ]
Line_61 $$ Enumeration en = null-->Line_65 $$ en = instrJar.entries()[ FD ]
Line_65 $$ en = instrJar.entries()-->Line_65 $$ en = instrJar.entries()[ FD ]
Line_65 $$ en = instrJar.entries()-->Line_65 $$ en = instrJar.entries()[ CD ]
Line_60 $$ JarFile instrJar = null-->Line_65 $$ en = instrJar.entries()[ FD ]
Line_64 $$ instrJar = new JarFile(instrFile)-->Line_65 $$ en = instrJar.entries()[ FD ]
Line_62 $$ File tempDir = null-->Line_66 $$ tempDir = File.createTempFile("jbtp", "")[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_66 $$ tempDir = File.createTempFile("jbtp", "")[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_66 $$ tempDir = File.createTempFile("jbtp", "")[ CD ]
Line_62 $$ File tempDir = null-->Line_67 $$ tempDir.delete()[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_67 $$ tempDir.delete()[ FD ]
Line_62 $$ File tempDir = null-->Line_68 $$ System.out.println("Create directory: " + tempDir.mkdirs())[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_68 $$ System.out.println("Create directory: " + tempDir.mkdirs())[ FD ]
Line_62 $$ File tempDir = null-->Line_69 $$ tempDir.deleteOnExit()[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_69 $$ tempDir.deleteOnExit()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_75 $$ String[] wtklib = new java.io.File(WTKdir + File.separator + "lib").list(new OnlyJar())[ CD ]
Line_75 $$ String[] wtklib = new java.io.File(WTKdir + File.separator + "lib").list(new OnlyJar())-->Line_75 $$ String[] wtklib = new java.io.File(WTKdir + File.separator + "lib").list(new OnlyJar())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_76 $$ String preverifyCmd = WTKdir + File.separator + "bin" + File.separator + "preverify -classpath " + WTKdir + File.separator + "lib" + File.separator + CLDC_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + MIDP_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + WMA_JAR + File.pathSeparator + instrFile[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_77 $$ for (int k = 0; k < wtklib.length; k++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_77 $$ for (int k = 0; k < wtklib.length; k++) [ CD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_77 $$ for (int k = 0; k < wtklib.length; k++) [ CD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_77 $$ for (int k = 0; k < wtklib.length; k++) [ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_78 $$ preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k][ CD ]
Line_78 $$ preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k]-->Line_78 $$ preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k][ FD ]
Line_76 $$ String preverifyCmd = WTKdir + File.separator + "bin" + File.separator + "preverify -classpath " + WTKdir + File.separator + "lib" + File.separator + CLDC_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + MIDP_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + WMA_JAR + File.pathSeparator + instrFile-->Line_78 $$ preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k][ FD ]
Line_2 $$ public static void main(String[] args) -->Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "[ CD ]
Line_78 $$ preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k]-->Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "[ FD ]
Line_76 $$ String preverifyCmd = WTKdir + File.separator + "bin" + File.separator + "preverify -classpath " + WTKdir + File.separator + "lib" + File.separator + CLDC_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + MIDP_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + WMA_JAR + File.pathSeparator + instrFile-->Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "[ FD ]
Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "-->Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "[ FD ]
Line_62 $$ File tempDir = null-->Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_81 $$ while (en.hasMoreElements()) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_81 $$ while (en.hasMoreElements()) -->Line_81 $$ while (en.hasMoreElements()) [ CD ]
Line_61 $$ Enumeration en = null-->Line_81 $$ while (en.hasMoreElements()) [ FD ]
Line_65 $$ en = instrJar.entries()-->Line_81 $$ while (en.hasMoreElements()) [ FD ]
Line_81 $$ while (en.hasMoreElements()) -->Line_82 $$ JarEntry je = (JarEntry) en.nextElement()[ CD ]
Line_61 $$ Enumeration en = null-->Line_82 $$ JarEntry je = (JarEntry) en.nextElement()[ FD ]
Line_65 $$ en = instrJar.entries()-->Line_82 $$ JarEntry je = (JarEntry) en.nextElement()[ FD ]
Line_81 $$ while (en.hasMoreElements()) -->Line_83 $$ String jeName = je.getName()[ CD ]
Line_83 $$ String jeName = je.getName()-->Line_83 $$ String jeName = je.getName()[ CD ]
Line_82 $$ JarEntry je = (JarEntry) en.nextElement()-->Line_83 $$ String jeName = je.getName()[ FD ]
Line_81 $$ while (en.hasMoreElements()) -->Line_84 $$ if (jeName.endsWith(".class"))[ CD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ if (jeName.endsWith(".class"))[ FD ]
Line_84 $$ if (jeName.endsWith(".class"))-->Line_84 $$ if (jeName.endsWith(".class"))[ CD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ if (jeName.endsWith(".class"))[ FD ]
Line_84 $$ if (jeName.endsWith(".class"))-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ CD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ CD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_81 $$ while (en.hasMoreElements()) -->Line_85 $$ preverifyCmd += jeName + " "[ CD ]
Line_85 $$ preverifyCmd += jeName + " "-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_78 $$ preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k]-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_76 $$ String preverifyCmd = WTKdir + File.separator + "bin" + File.separator + "preverify -classpath " + WTKdir + File.separator + "lib" + File.separator + CLDC_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + MIDP_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + WMA_JAR + File.pathSeparator + instrFile-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_83 $$ String jeName = je.getName()-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)-->Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)[ CD ]
Line_85 $$ preverifyCmd += jeName + " "-->Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)[ FD ]
Line_78 $$ preverifyCmd += File.pathSeparator + WTKdir + File.separator + "lib" + wtklib[k]-->Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)[ FD ]
Line_76 $$ String preverifyCmd = WTKdir + File.separator + "bin" + File.separator + "preverify -classpath " + WTKdir + File.separator + "lib" + File.separator + CLDC_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + MIDP_JAR + File.pathSeparator + WTKdir + File.separator + "lib" + File.separator + WMA_JAR + File.pathSeparator + instrFile-->Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)[ FD ]
Line_80 $$ preverifyCmd += " " + "-d " + tempDir.getAbsolutePath() + " "-->Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)[ FD ]
Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)-->Line_89 $$ if (p.waitFor() != 0) [ FD ]
Line_89 $$ if (p.waitFor() != 0) -->Line_90 $$ BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()))[ CD ]
Line_88 $$ Process p = Runtime.getRuntime().exec(preverifyCmd)-->Line_90 $$ BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()))[ FD ]
Line_89 $$ if (p.waitFor() != 0) -->Line_91 $$ System.out.println("Error calling the preverify command.")[ CD ]
Line_89 $$ if (p.waitFor() != 0) -->Line_92 $$ while (in.ready()) [ CD ]
Line_89 $$ if (p.waitFor() != 0) -->Line_89 $$ if (p.waitFor() != 0) [ CD ]
Line_92 $$ while (in.ready()) -->Line_92 $$ while (in.ready()) [ CD ]
Line_90 $$ BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()))-->Line_92 $$ while (in.ready()) [ FD ]
Line_92 $$ while (in.ready()) -->Line_93 $$ System.out.print("" + in.readLine())[ CD ]
Line_90 $$ BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()))-->Line_93 $$ System.out.print("" + in.readLine())[ FD ]
Line_89 $$ if (p.waitFor() != 0) -->Line_95 $$ System.out.println()[ CD ]
Line_89 $$ if (p.waitFor() != 0) -->Line_96 $$ in.close()[ CD ]
Line_90 $$ BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()))-->Line_96 $$ in.close()[ FD ]
Line_89 $$ if (p.waitFor() != 0) -->Line_97 $$ return[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_104 $$ File[] listOfFiles = computeFiles(tempDir)[ CD ]
Line_104 $$ File[] listOfFiles = computeFiles(tempDir)-->Line_104 $$ File[] listOfFiles = computeFiles(tempDir)[ CD ]
Line_62 $$ File tempDir = null-->Line_104 $$ File[] listOfFiles = computeFiles(tempDir)[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_104 $$ File[] listOfFiles = computeFiles(tempDir)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_105 $$ System.out.println("-------------------------------\n" + "Files to insert: ")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_106 $$ String[] strFiles = new String[listOfFiles.length][ CD ]
Line_2 $$ public static void main(String[] args) -->Line_107 $$ int l = tempDir.toString().length() + 1[ CD ]
Line_62 $$ File tempDir = null-->Line_107 $$ int l = tempDir.toString().length() + 1[ FD ]
Line_66 $$ tempDir = File.createTempFile("jbtp", "")-->Line_107 $$ int l = tempDir.toString().length() + 1[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) [ CD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) [ CD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) [ FD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_109 $$ strFiles[j] = listOfFiles[j].toString().substring(l)[ CD ]
Line_109 $$ strFiles[j] = listOfFiles[j].toString().substring(l)-->Line_109 $$ strFiles[j] = listOfFiles[j].toString().substring(l)[ CD ]
Line_107 $$ int l = tempDir.toString().length() + 1-->Line_109 $$ strFiles[j] = listOfFiles[j].toString().substring(l)[ FD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_110 $$ strFiles[j] = strFiles[j].replace(File.separatorChar, '/')[ CD ]
Line_110 $$ strFiles[j] = strFiles[j].replace(File.separatorChar, '/')-->Line_110 $$ strFiles[j] = strFiles[j].replace(File.separatorChar, '/')[ CD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_111 $$ System.out.println(strFiles[j])[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_113 $$ System.out.println("-------------------------------")[ CD ]
Line_8 $$ Manifest mnf-->Line_116 $$ mnf = jis.getManifest()[ FD ]
Line_116 $$ mnf = jis.getManifest()-->Line_116 $$ mnf = jis.getManifest()[ FD ]
Line_116 $$ mnf = jis.getManifest()-->Line_116 $$ mnf = jis.getManifest()[ CD ]
Line_115 $$ JarInputStream jis = new JarInputStream(fisJar)-->Line_116 $$ mnf = jis.getManifest()[ FD ]
Line_82 $$ JarEntry je = (JarEntry) en.nextElement()-->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ CD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ CD ]
Line_115 $$ JarInputStream jis = new JarInputStream(fisJar)-->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ CD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_82 $$ JarEntry je = (JarEntry) en.nextElement()-->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ CD ]
Line_115 $$ JarInputStream jis = new JarInputStream(fisJar)-->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_119 $$ String s = je.getName()[ CD ]
Line_119 $$ String s = je.getName()-->Line_119 $$ String s = je.getName()[ CD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_119 $$ String s = je.getName()[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_119 $$ String s = je.getName()[ FD ]
Line_82 $$ JarEntry je = (JarEntry) en.nextElement()-->Line_119 $$ String s = je.getName()[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ CD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ CD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ CD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ CD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_121 $$ if (strFiles[k].equals(s))[ CD ]
Line_119 $$ String s = je.getName()-->Line_121 $$ if (strFiles[k].equals(s))[ FD ]
Line_121 $$ if (strFiles[k].equals(s))-->Line_121 $$ if (strFiles[k].equals(s))[ CD ]
Line_119 $$ String s = je.getName()-->Line_121 $$ if (strFiles[k].equals(s))[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_123 $$ jos.putNextEntry(je)[ CD ]
Line_117 $$ JarOutputStream jos = new JarOutputStream(fosJar, mnf)-->Line_123 $$ jos.putNextEntry(je)[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_123 $$ jos.putNextEntry(je)[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_123 $$ jos.putNextEntry(je)[ FD ]
Line_82 $$ JarEntry je = (JarEntry) en.nextElement()-->Line_123 $$ jos.putNextEntry(je)[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ CD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ CD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ CD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ CD ]
Line_115 $$ JarInputStream jis = new JarInputStream(fisJar)-->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ CD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ CD ]
Line_115 $$ JarInputStream jis = new JarInputStream(fisJar)-->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_126 $$ jos.write(b, 0, k)[ CD ]
Line_117 $$ JarOutputStream jos = new JarOutputStream(fosJar, mnf)-->Line_126 $$ jos.write(b, 0, k)[ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_126 $$ jos.write(b, 0, k)[ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_126 $$ jos.write(b, 0, k)[ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_126 $$ jos.write(b, 0, k)[ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_126 $$ jos.write(b, 0, k)[ FD ]
Line_115 $$ JarInputStream jis = new JarInputStream(fisJar)-->Line_129 $$ jis.close()[ FD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ FD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ CD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ CD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ FD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ FD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])[ CD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_132 $$ JarEntry je = new JarEntry(strFiles[j])[ CD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_133 $$ jos.putNextEntry(je)[ CD ]
Line_117 $$ JarOutputStream jos = new JarOutputStream(fosJar, mnf)-->Line_133 $$ jos.putNextEntry(je)[ FD ]
Line_132 $$ JarEntry je = new JarEntry(strFiles[j])-->Line_133 $$ jos.putNextEntry(je)[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_133 $$ jos.putNextEntry(je)[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_133 $$ jos.putNextEntry(je)[ FD ]
Line_82 $$ JarEntry je = (JarEntry) en.nextElement()-->Line_133 $$ jos.putNextEntry(je)[ FD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_134 $$ byte[] b = new byte[512][ CD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_135 $$ while (fis.available() > 0) [ CD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ CD ]
Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])-->Line_135 $$ while (fis.available() > 0) [ FD ]
Line_135 $$ while (fis.available() > 0) -->Line_136 $$ int k = fis.read(b, 0, 512)[ CD ]
Line_136 $$ int k = fis.read(b, 0, 512)-->Line_136 $$ int k = fis.read(b, 0, 512)[ CD ]
Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])-->Line_136 $$ int k = fis.read(b, 0, 512)[ FD ]
Line_134 $$ byte[] b = new byte[512]-->Line_136 $$ int k = fis.read(b, 0, 512)[ FD ]
Line_135 $$ while (fis.available() > 0) -->Line_137 $$ jos.write(b, 0, k)[ CD ]
Line_117 $$ JarOutputStream jos = new JarOutputStream(fosJar, mnf)-->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_134 $$ byte[] b = new byte[512]-->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_136 $$ int k = fis.read(b, 0, 512)-->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_139 $$ fis.close()[ CD ]
Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])-->Line_139 $$ fis.close()[ FD ]
Line_117 $$ JarOutputStream jos = new JarOutputStream(fosJar, mnf)-->Line_141 $$ jos.close()[ FD ]
Line_42 $$ FileInputStream fisJar-->Line_142 $$ fisJar.close()[ FD ]
Line_44 $$ fisJar = new FileInputStream(sourceFile)-->Line_142 $$ fisJar.close()[ FD ]
Line_50 $$ FileOutputStream fosJar-->Line_143 $$ fosJar.close()[ FD ]
Line_54 $$ fosJar = new FileOutputStream(aux)-->Line_143 $$ fosJar.close()[ FD ]
Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])-->Line_153 $$ while (fis.available() > 0) [ FD ]
Line_151 $$ FileInputStream fis = new FileInputStream(aux)-->Line_153 $$ while (fis.available() > 0) [ FD ]
Line_153 $$ while (fis.available() > 0) -->Line_154 $$ int k = fis.read(b, 0, 512)[ CD ]
Line_154 $$ int k = fis.read(b, 0, 512)-->Line_154 $$ int k = fis.read(b, 0, 512)[ CD ]
Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])-->Line_154 $$ int k = fis.read(b, 0, 512)[ FD ]
Line_151 $$ FileInputStream fis = new FileInputStream(aux)-->Line_154 $$ int k = fis.read(b, 0, 512)[ FD ]
Line_134 $$ byte[] b = new byte[512]-->Line_154 $$ int k = fis.read(b, 0, 512)[ FD ]
Line_152 $$ byte[] b = new byte[512]-->Line_154 $$ int k = fis.read(b, 0, 512)[ FD ]
Line_153 $$ while (fis.available() > 0) -->Line_155 $$ fos.write(b, 0, k)[ CD ]
Line_150 $$ FileOutputStream fos = new FileOutputStream(outFile)-->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_134 $$ byte[] b = new byte[512]-->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_152 $$ byte[] b = new byte[512]-->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_154 $$ int k = fis.read(b, 0, 512)-->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_136 $$ int k = fis.read(b, 0, 512)-->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])-->Line_157 $$ fis.close()[ FD ]
Line_151 $$ FileInputStream fis = new FileInputStream(aux)-->Line_157 $$ fis.close()[ FD ]
Line_150 $$ FileOutputStream fos = new FileOutputStream(outFile)-->Line_158 $$ fos.close()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_163 $$ Iterator it[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_164 $$ Attributes atr[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_165 $$ atr = mnf.getMainAttributes()[ CD ]
Line_164 $$ Attributes atr-->Line_165 $$ atr = mnf.getMainAttributes()[ FD ]
Line_165 $$ atr = mnf.getMainAttributes()-->Line_165 $$ atr = mnf.getMainAttributes()[ FD ]
Line_165 $$ atr = mnf.getMainAttributes()-->Line_165 $$ atr = mnf.getMainAttributes()[ CD ]
Line_8 $$ Manifest mnf-->Line_165 $$ atr = mnf.getMainAttributes()[ FD ]
Line_116 $$ mnf = jis.getManifest()-->Line_165 $$ atr = mnf.getMainAttributes()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_166 $$ it = atr.keySet().iterator()[ CD ]
Line_163 $$ Iterator it-->Line_166 $$ it = atr.keySet().iterator()[ FD ]
Line_166 $$ it = atr.keySet().iterator()-->Line_166 $$ it = atr.keySet().iterator()[ FD ]
Line_166 $$ it = atr.keySet().iterator()-->Line_166 $$ it = atr.keySet().iterator()[ CD ]
Line_164 $$ Attributes atr-->Line_166 $$ it = atr.keySet().iterator()[ FD ]
Line_165 $$ atr = mnf.getMainAttributes()-->Line_166 $$ it = atr.keySet().iterator()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_167 $$ if (jadFile != null) [ CD ]
Line_29 $$ jadFile = args[i]-->Line_167 $$ if (jadFile != null) [ FD ]
Line_7 $$ String jadFile = null-->Line_167 $$ if (jadFile != null) [ FD ]
Line_150 $$ FileOutputStream fos = new FileOutputStream(outFile)-->Line_171 $$ fos = new FileOutputStream(jadFile)[ FD ]
Line_171 $$ fos = new FileOutputStream(jadFile)-->Line_171 $$ fos = new FileOutputStream(jadFile)[ FD ]
Line_173 $$ while (it.hasNext()) -->Line_173 $$ while (it.hasNext()) [ CD ]
Line_163 $$ Iterator it-->Line_173 $$ while (it.hasNext()) [ FD ]
Line_166 $$ it = atr.keySet().iterator()-->Line_173 $$ while (it.hasNext()) [ FD ]
Line_173 $$ while (it.hasNext()) -->Line_174 $$ Object ats = it.next()[ CD ]
Line_174 $$ Object ats = it.next()-->Line_174 $$ Object ats = it.next()[ CD ]
Line_163 $$ Iterator it-->Line_174 $$ Object ats = it.next()[ FD ]
Line_166 $$ it = atr.keySet().iterator()-->Line_174 $$ Object ats = it.next()[ FD ]
Line_173 $$ while (it.hasNext()) -->Line_175 $$ psjad.println(ats + ": " + atr.get(ats))[ CD ]
Line_172 $$ PrintStream psjad = new PrintStream(fos)-->Line_175 $$ psjad.println(ats + ": " + atr.get(ats))[ FD ]
Line_164 $$ Attributes atr-->Line_175 $$ psjad.println(ats + ": " + atr.get(ats))[ FD ]
Line_165 $$ atr = mnf.getMainAttributes()-->Line_175 $$ psjad.println(ats + ": " + atr.get(ats))[ FD ]
Line_174 $$ Object ats = it.next()-->Line_175 $$ psjad.println(ats + ": " + atr.get(ats))[ FD ]
Line_172 $$ PrintStream psjad = new PrintStream(fos)-->Line_177 $$ psjad.println("MIDlet-Jar-URL: " + outFile)[ FD ]
Line_172 $$ PrintStream psjad = new PrintStream(fos)-->Line_178 $$ psjad.println("MIDlet-Jar-Size: " + outJarFile.length())[ FD ]
Line_170 $$ File outJarFile = new File(outFile)-->Line_178 $$ psjad.println("MIDlet-Jar-Size: " + outJarFile.length())[ FD ]
Line_150 $$ FileOutputStream fos = new FileOutputStream(outFile)-->Line_179 $$ fos.close()[ FD ]
Line_171 $$ fos = new FileOutputStream(jadFile)-->Line_179 $$ fos.close()[ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_77 $$ for (int k = 0; k < wtklib.length; k++) [ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_77 $$ for (int k = 0; k < wtklib.length; k++) [ FD ]
Line_77 $$ for (int k = 0; k < wtklib.length; k++) -->Line_77 $$ for (int k = 0; k < wtklib.length; k++) [ FD ]
Line_82 $$ JarEntry je = (JarEntry) en.nextElement()-->Line_83 $$ String jeName = je.getName()[ FD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ if (jeName.endsWith(".class"))[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ if (jeName.endsWith(".class"))[ FD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ if (jeName.endsWith(".class"))[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ if (jeName.endsWith(".class"))[ FD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_83 $$ String jeName = je.getName()-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)[ FD ]
Line_83 $$ String jeName = je.getName()-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_84 $$ jeName = jeName.substring(0, jeName.length() - 6)-->Line_85 $$ preverifyCmd += jeName + " "[ FD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) [ FD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) [ FD ]
Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) -->Line_108 $$ for (int j = 0; j < listOfFiles.length; j++) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) [ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_119 $$ String s = je.getName()[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_119 $$ String s = je.getName()[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_123 $$ jos.putNextEntry(je)[ FD ]
Line_118 $$ for (JarEntry je = jis.getNextJarEntry(); je != null; je = jis.getNextJarEntry()) -->Line_123 $$ jos.putNextEntry(je)[ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ FD ]
Line_120 $$ for (int k = 0; k < strFiles.length; k++) -->Line_120 $$ for (int k = 0; k < strFiles.length; k++) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) [ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_126 $$ jos.write(b, 0, k)[ FD ]
Line_125 $$ for (int k = jis.read(b, 0, 512); k >= 0; k = jis.read(b, 0, 512)) -->Line_126 $$ jos.write(b, 0, k)[ FD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ FD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ FD ]
Line_130 $$ for (int j = 0; j < strFiles.length; j++) -->Line_130 $$ for (int j = 0; j < strFiles.length; j++) [ FD ]
Line_132 $$ JarEntry je = new JarEntry(strFiles[j])-->Line_133 $$ jos.putNextEntry(je)[ FD ]
Line_131 $$ FileInputStream fis = new FileInputStream(listOfFiles[j])-->Line_139 $$ fis.close()[ FD ]
Line_136 $$ int k = fis.read(b, 0, 512)-->Line_137 $$ jos.write(b, 0, k)[ FD ]
Line_154 $$ int k = fis.read(b, 0, 512)-->Line_155 $$ fos.write(b, 0, k)[ FD ]
Line_174 $$ Object ats = it.next()-->Line_175 $$ psjad.println(ats + ": " + atr.get(ats))[ FD ]
