Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String encrypt(String algorithm, String[] input) [ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_4 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ CD ]
Line_2 $$ public static String encrypt(String algorithm, String[] input) -->Line_4 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ FD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_5 $$ md.reset()[ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_6 $$ for (int i = 0; i < input.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_6 $$ for (int i = 0; i < input.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_6 $$ for (int i = 0; i < input.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_7 $$ if (input[i] != null)[ CD ]
Line_7 $$ if (input[i] != null)-->Line_7 $$ md.update(input[i].getBytes("UTF-8"))[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_7 $$ md.update(input[i].getBytes("UTF-8"))[ FD ]
Line_9 $$ byte[] messageDigest = md.digest()-->Line_9 $$ byte[] messageDigest = md.digest()[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_9 $$ byte[] messageDigest = md.digest()[ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ CD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ CD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_12 $$ hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4))[ CD ]
Line_10 $$ StringBuffer hexString = new StringBuffer()-->Line_12 $$ hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4))[ FD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_13 $$ hexString.append(Integer.toHexString(0x0f & messageDigest[i]))[ CD ]
Line_10 $$ StringBuffer hexString = new StringBuffer()-->Line_13 $$ hexString.append(Integer.toHexString(0x0f & messageDigest[i]))[ FD ]
Line_15 $$ return hexString.toString()-->Line_15 $$ return hexString.toString()[ CD ]
Line_10 $$ StringBuffer hexString = new StringBuffer()-->Line_15 $$ return hexString.toString()[ FD ]
Line_21 $$ return new StringBuffer().toString()-->Line_21 $$ return new StringBuffer().toString()[ CD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_6 $$ for (int i = 0; i < input.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_6 $$ for (int i = 0; i < input.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < input.length; i++) -->Line_6 $$ for (int i = 0; i < input.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < messageDigest.length; i++) -->Line_11 $$ for (int i = 0; i < messageDigest.length; i++) [ FD ]
