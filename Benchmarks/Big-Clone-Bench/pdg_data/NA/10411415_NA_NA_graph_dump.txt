Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void readData(int choice) throws IOException [ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_3 $$ for (i = 0; i < max; i++) for (j = 0; j < max; j++) [ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_2 $$ public void readData(int choice) throws IOException [ CD ]
Line_3 $$ for (i = 0; i < max; i++) for (j = 0; j < max; j++) -->Line_3 $$ for (j = 0; j < max; j++) [ CD ]
Line_3 $$ for (i = 0; i < max; i++) for (j = 0; j < max; j++) -->Line_3 $$ for (i = 0; i < max; i++) for (j = 0; j < max; j++) [ CD ]
Line_3 $$ for (j = 0; j < max; j++) -->Line_4 $$ phase_x[i][j] = 0.0[ CD ]
Line_3 $$ for (j = 0; j < max; j++) -->Line_5 $$ phase_y[i][j] = 0.0[ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_7 $$ URL url[ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_8 $$ InputStream is[ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_9 $$ InputStreamReader isr[ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_10 $$ if (choice == 0) [ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_10 $$ if (choice == 0) [ FD ]
Line_10 $$ if (choice == 0) -->Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")[ CD ]
Line_7 $$ URL url-->Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")[ FD ]
Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")-->Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")[ FD ]
Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")-->Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")[ CD ]
Line_10 $$ if (choice == 0) -->Line_12 $$ is = url.openStream()[ CD ]
Line_8 $$ InputStream is-->Line_12 $$ is = url.openStream()[ FD ]
Line_12 $$ is = url.openStream()-->Line_12 $$ is = url.openStream()[ FD ]
Line_12 $$ is = url.openStream()-->Line_12 $$ is = url.openStream()[ CD ]
Line_7 $$ URL url-->Line_12 $$ is = url.openStream()[ FD ]
Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")-->Line_12 $$ is = url.openStream()[ FD ]
Line_10 $$ if (choice == 0) -->Line_13 $$ isr = new InputStreamReader(is)[ CD ]
Line_9 $$ InputStreamReader isr-->Line_13 $$ isr = new InputStreamReader(is)[ FD ]
Line_13 $$ isr = new InputStreamReader(is)-->Line_13 $$ isr = new InputStreamReader(is)[ FD ]
Line_10 $$ if (choice == 0) -->Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")[ CD ]
Line_7 $$ URL url-->Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")[ FD ]
Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")-->Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")[ FD ]
Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")-->Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")[ FD ]
Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")-->Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")[ CD ]
Line_10 $$ if (choice == 0) -->Line_16 $$ is = url.openStream()[ CD ]
Line_8 $$ InputStream is-->Line_16 $$ is = url.openStream()[ FD ]
Line_12 $$ is = url.openStream()-->Line_16 $$ is = url.openStream()[ FD ]
Line_16 $$ is = url.openStream()-->Line_16 $$ is = url.openStream()[ FD ]
Line_16 $$ is = url.openStream()-->Line_16 $$ is = url.openStream()[ CD ]
Line_7 $$ URL url-->Line_16 $$ is = url.openStream()[ FD ]
Line_11 $$ url = getClass().getResource("resources/Phase_623_620_Achromat.dat")-->Line_16 $$ is = url.openStream()[ FD ]
Line_15 $$ url = getClass().getResource("resources/Phase_623_620_NoAchromat.dat")-->Line_16 $$ is = url.openStream()[ FD ]
Line_10 $$ if (choice == 0) -->Line_17 $$ isr = new InputStreamReader(is)[ CD ]
Line_9 $$ InputStreamReader isr-->Line_17 $$ isr = new InputStreamReader(is)[ FD ]
Line_13 $$ isr = new InputStreamReader(is)-->Line_17 $$ isr = new InputStreamReader(is)[ FD ]
Line_17 $$ isr = new InputStreamReader(is)-->Line_17 $$ isr = new InputStreamReader(is)[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_19 $$ BufferedReader br = new BufferedReader(isr)[ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_20 $$ s = br.readLine()[ CD ]
Line_19 $$ BufferedReader br = new BufferedReader(isr)-->Line_20 $$ s = br.readLine()[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_21 $$ StringTokenizer st = new StringTokenizer(s)[ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_24 $$ phase_x[i][j] = 4 * Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_24 $$ phase_x[i][j] = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_25 $$ phase_y[i][j] = 4 * Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_25 $$ phase_y[i][j] = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_29 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_29 $$ kd[i][j] = Double.parseDouble(st.nextToken())-->Line_29 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_29 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_30 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_30 $$ kfs[i][j] = Double.parseDouble(st.nextToken())-->Line_30 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_30 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_31 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_31 $$ kfl[i][j] = Double.parseDouble(st.nextToken())-->Line_31 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_31 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_32 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_32 $$ kdee[i][j] = Double.parseDouble(st.nextToken())-->Line_32 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_32 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_33 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_33 $$ kdc[i][j] = Double.parseDouble(st.nextToken())-->Line_33 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_33 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_34 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_34 $$ kfc[i][j] = Double.parseDouble(st.nextToken())-->Line_34 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_34 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_36 $$ int k = 0[ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_37 $$ while ((s = br.readLine()) != null) [ CD ]
Line_2 $$ public void readData(int choice) throws IOException -->Line_2 $$ public void readData(int choice) throws IOException [ CD ]
Line_19 $$ BufferedReader br = new BufferedReader(isr)-->Line_37 $$ while ((s = br.readLine()) != null) [ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_38 $$ st = new StringTokenizer(s)[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_38 $$ st = new StringTokenizer(s)[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_38 $$ st = new StringTokenizer(s)[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_39 $$ temp_new = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_39 $$ temp_new = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_40 $$ if (temp_new != temp_prev) [ CD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_46 $$ phase_y[i][j] = 4 * Double.parseDouble(st.nextToken())[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_46 $$ phase_y[i][j] = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_46 $$ phase_y[i][j] = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_47 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_47 $$ kd[i][j] = Double.parseDouble(st.nextToken())-->Line_47 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_47 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_47 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_48 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_48 $$ kfs[i][j] = Double.parseDouble(st.nextToken())-->Line_48 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_48 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_48 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_49 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_49 $$ kfl[i][j] = Double.parseDouble(st.nextToken())-->Line_49 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_49 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_49 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_50 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_50 $$ kdee[i][j] = Double.parseDouble(st.nextToken())-->Line_50 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_50 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_50 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_51 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_51 $$ kdc[i][j] = Double.parseDouble(st.nextToken())-->Line_51 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_51 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_51 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_52 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_52 $$ kfc[i][j] = Double.parseDouble(st.nextToken())-->Line_52 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ CD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_52 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s)-->Line_52 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_37 $$ while ((s = br.readLine()) != null) -->Line_56 $$ k++[ CD ]
Line_36 $$ int k = 0-->Line_56 $$ k++[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_39 $$ temp_new = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_46 $$ phase_y[i][j] = 4 * Double.parseDouble(st.nextToken())[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_47 $$ kd[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_48 $$ kfs[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_49 $$ kfl[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_50 $$ kdee[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_51 $$ kdc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
Line_38 $$ st = new StringTokenizer(s)-->Line_52 $$ kfc[i][j] = Double.parseDouble(st.nextToken())[ FD ]
