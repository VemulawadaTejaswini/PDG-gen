Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void loadQueryProcessorFactories() [ CD ]
Line_2 $$ private static void loadQueryProcessorFactories() -->Line_4 $$ Enumeration<URL> resources = null[ CD ]
Line_4 $$ Enumeration<URL> resources = null-->Line_6 $$ resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING)[ FD ]
Line_6 $$ resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING)-->Line_6 $$ resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING)[ FD ]
Line_6 $$ resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING)-->Line_6 $$ resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING)[ CD ]
Line_2 $$ private static void loadQueryProcessorFactories() -->Line_10 $$ while (resources != null && resources.hasMoreElements()) [ CD ]
Line_2 $$ private static void loadQueryProcessorFactories() -->Line_2 $$ private static void loadQueryProcessorFactories() [ CD ]
Line_4 $$ Enumeration<URL> resources = null-->Line_10 $$ while (resources != null && resources.hasMoreElements()) [ FD ]
Line_6 $$ resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING)-->Line_10 $$ while (resources != null && resources.hasMoreElements()) [ FD ]
Line_10 $$ while (resources != null && resources.hasMoreElements()) -->Line_11 $$ URL url = resources.nextElement()[ CD ]
Line_11 $$ URL url = resources.nextElement()-->Line_11 $$ URL url = resources.nextElement()[ CD ]
Line_4 $$ Enumeration<URL> resources = null-->Line_11 $$ URL url = resources.nextElement()[ FD ]
Line_6 $$ resources = QueryUtils.class.getClassLoader().getResources(RESOURCE_STRING)-->Line_11 $$ URL url = resources.nextElement()[ FD ]
Line_10 $$ while (resources != null && resources.hasMoreElements()) -->Line_12 $$ InputStream is = null[ CD ]
Line_12 $$ InputStream is = null-->Line_14 $$ is = url.openStream()[ FD ]
Line_14 $$ is = url.openStream()-->Line_14 $$ is = url.openStream()[ FD ]
Line_14 $$ is = url.openStream()-->Line_14 $$ is = url.openStream()[ CD ]
Line_11 $$ URL url = resources.nextElement()-->Line_14 $$ is = url.openStream()[ FD ]
Line_10 $$ while (resources != null && resources.hasMoreElements()) -->Line_18 $$ if (is != null) [ CD ]
Line_12 $$ InputStream is = null-->Line_18 $$ if (is != null) [ FD ]
Line_14 $$ is = url.openStream()-->Line_18 $$ if (is != null) [ FD ]
Line_18 $$ if (is != null) -->Line_19 $$ BufferedReader rdr = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_18 $$ if (is != null) -->Line_20 $$ String line[ CD ]
Line_22 $$ while ((line = rdr.readLine()) != null) -->Line_22 $$ while ((line = rdr.readLine()) != null) [ FD ]
Line_20 $$ String line-->Line_22 $$ while ((line = rdr.readLine()) != null) [ FD ]
Line_22 $$ while ((line = rdr.readLine()) != null) -->Line_22 $$ while ((line = rdr.readLine()) != null) [ CD ]
Line_19 $$ BufferedReader rdr = new BufferedReader(new InputStreamReader(is))-->Line_22 $$ while ((line = rdr.readLine()) != null) [ FD ]
Line_24 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()-->Line_24 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)-->Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)[ CD ]
Line_22 $$ while ((line = rdr.readLine()) != null) -->Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)[ FD ]
Line_20 $$ String line-->Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)[ FD ]
Line_24 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()-->Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)[ FD ]
Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)-->Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) [ FD ]
Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) -->Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) [ CD ]
Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)-->Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) [ FD ]
Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) -->Line_27 $$ QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance()[ CD ]
Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)-->Line_27 $$ QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance()[ FD ]
Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) -->Line_28 $$ qpFactoryMap.put(factory.getQueryLanguage().toUpperCase(), factory)[ CD ]
Line_27 $$ QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance()-->Line_28 $$ qpFactoryMap.put(factory.getQueryLanguage().toUpperCase(), factory)[ FD ]
Line_27 $$ QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance()-->Line_28 $$ qpFactoryMap.put(factory.getQueryLanguage().toUpperCase(), factory)[ FD ]
Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) -->Line_30 $$ log.warn("Wrong entry for QueryProcessorFactoryIF service " + "description, '" + line + "' is not implementing the " + "correct interface.")[ CD ]
Line_2 $$ private static void loadQueryProcessorFactories() -->Line_41 $$ if (!qpFactoryMap.containsKey(DEFAULT_LANGUAGE)) [ CD ]
Line_41 $$ if (!qpFactoryMap.containsKey(DEFAULT_LANGUAGE)) -->Line_41 $$ if (!qpFactoryMap.containsKey(DEFAULT_LANGUAGE)) [ CD ]
Line_41 $$ if (!qpFactoryMap.containsKey(DEFAULT_LANGUAGE)) -->Line_41 $$ if (!qpFactoryMap.containsKey(DEFAULT_LANGUAGE)) [ CD ]
Line_41 $$ if (!qpFactoryMap.containsKey(DEFAULT_LANGUAGE)) -->Line_42 $$ qpFactoryMap.put(DEFAULT_LANGUAGE, new TologQueryProcessorFactory())[ CD ]
Line_11 $$ URL url = resources.nextElement()-->Line_14 $$ is = url.openStream()[ FD ]
Line_12 $$ InputStream is = null-->Line_18 $$ if (is != null) [ FD ]
Line_14 $$ is = url.openStream()-->Line_18 $$ if (is != null) [ FD ]
Line_22 $$ while ((line = rdr.readLine()) != null) -->Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)[ FD ]
Line_24 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()-->Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)[ FD ]
Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)-->Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) [ FD ]
Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)-->Line_26 $$ if (QueryProcessorFactoryIF.class.isAssignableFrom(c)) [ FD ]
Line_25 $$ Class<?> c = Class.forName(line, true, classLoader)-->Line_27 $$ QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance()[ FD ]
Line_27 $$ QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance()-->Line_28 $$ qpFactoryMap.put(factory.getQueryLanguage().toUpperCase(), factory)[ FD ]
Line_27 $$ QueryProcessorFactoryIF factory = (QueryProcessorFactoryIF) c.newInstance()-->Line_28 $$ qpFactoryMap.put(factory.getQueryLanguage().toUpperCase(), factory)[ FD ]
