Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) [ CD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_3 $$ ClassLoader cl = null[ CD ]
Line_5 $$ Class clClass = Class.forName("com.simontuffs.onejar.JarClassLoader")-->Line_5 $$ Class clClass = Class.forName("com.simontuffs.onejar.JarClassLoader")[ CD ]
Line_6 $$ Constructor[] constructor = clClass.getConstructors()-->Line_6 $$ Constructor[] constructor = clClass.getConstructors()[ CD ]
Line_5 $$ Class clClass = Class.forName("com.simontuffs.onejar.JarClassLoader")-->Line_6 $$ Constructor[] constructor = clClass.getConstructors()[ FD ]
Line_3 $$ ClassLoader cl = null-->Line_7 $$ cl = (ClassLoader) constructor[1].newInstance(ClassLoader.getSystemClassLoader())[ FD ]
Line_7 $$ cl = (ClassLoader) constructor[1].newInstance(ClassLoader.getSystemClassLoader())-->Line_7 $$ cl = (ClassLoader) constructor[1].newInstance(ClassLoader.getSystemClassLoader())[ FD ]
Line_3 $$ ClassLoader cl = null-->Line_8 $$ System.out.println("Loaded JarClassLoader. cl=" + cl.toString())[ FD ]
Line_7 $$ cl = (ClassLoader) constructor[1].newInstance(ClassLoader.getSystemClassLoader())-->Line_8 $$ System.out.println("Loaded JarClassLoader. cl=" + cl.toString())[ FD ]
Line_3 $$ ClassLoader cl = null-->Line_10 $$ cl = ClassLoader.getSystemClassLoader()[ FD ]
Line_7 $$ cl = (ClassLoader) constructor[1].newInstance(ClassLoader.getSystemClassLoader())-->Line_10 $$ cl = ClassLoader.getSystemClassLoader()[ FD ]
Line_10 $$ cl = ClassLoader.getSystemClassLoader()-->Line_10 $$ cl = ClassLoader.getSystemClassLoader()[ FD ]
Line_10 $$ cl = ClassLoader.getSystemClassLoader()-->Line_10 $$ cl = ClassLoader.getSystemClassLoader()[ CD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_12 $$ URL liburl = cl.getResource(filename)[ CD ]
Line_12 $$ URL liburl = cl.getResource(filename)-->Line_12 $$ URL liburl = cl.getResource(filename)[ CD ]
Line_3 $$ ClassLoader cl = null-->Line_12 $$ URL liburl = cl.getResource(filename)[ FD ]
Line_7 $$ cl = (ClassLoader) constructor[1].newInstance(ClassLoader.getSystemClassLoader())-->Line_12 $$ URL liburl = cl.getResource(filename)[ FD ]
Line_10 $$ cl = ClassLoader.getSystemClassLoader()-->Line_12 $$ URL liburl = cl.getResource(filename)[ FD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_12 $$ URL liburl = cl.getResource(filename)[ FD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_13 $$ if (liburl == null) [ CD ]
Line_12 $$ URL liburl = cl.getResource(filename)-->Line_13 $$ if (liburl == null) [ FD ]
Line_13 $$ if (liburl == null) -->Line_14 $$ return false[ CD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_16 $$ if (!destinationDirectory.endsWith(File.separator)) [ CD ]
Line_16 $$ if (!destinationDirectory.endsWith(File.separator)) -->Line_16 $$ if (!destinationDirectory.endsWith(File.separator)) [ CD ]
Line_16 $$ if (!destinationDirectory.endsWith(File.separator)) -->Line_16 $$ if (!destinationDirectory.endsWith(File.separator)) [ CD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_16 $$ if (!destinationDirectory.endsWith(File.separator)) [ FD ]
Line_16 $$ if (!destinationDirectory.endsWith(File.separator)) -->Line_17 $$ destinationDirectory = destinationDirectory + File.separator[ CD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_17 $$ destinationDirectory = destinationDirectory + File.separator[ FD ]
Line_17 $$ destinationDirectory = destinationDirectory + File.separator-->Line_17 $$ destinationDirectory = destinationDirectory + File.separator[ FD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_17 $$ destinationDirectory = destinationDirectory + File.separator[ FD ]
Line_17 $$ destinationDirectory = destinationDirectory + File.separator-->Line_17 $$ destinationDirectory = destinationDirectory + File.separator[ FD ]
Line_20 $$ File destFile = new File(destinationDirectory + filename)-->Line_21 $$ if (destFile.exists()) [ FD ]
Line_21 $$ if (destFile.exists()) -->Line_21 $$ if (destFile.exists()) [ CD ]
Line_20 $$ File destFile = new File(destinationDirectory + filename)-->Line_21 $$ if (destFile.exists()) [ FD ]
Line_21 $$ if (destFile.exists()) -->Line_22 $$ destFile.delete()[ CD ]
Line_20 $$ File destFile = new File(destinationDirectory + filename)-->Line_22 $$ destFile.delete()[ FD ]
Line_24 $$ InputStream is-->Line_25 $$ is = liburl.openStream()[ FD ]
Line_25 $$ is = liburl.openStream()-->Line_25 $$ is = liburl.openStream()[ FD ]
Line_25 $$ is = liburl.openStream()-->Line_25 $$ is = liburl.openStream()[ CD ]
Line_12 $$ URL liburl = cl.getResource(filename)-->Line_25 $$ is = liburl.openStream()[ FD ]
Line_28 $$ int cnt = is.read(buf)-->Line_28 $$ int cnt = is.read(buf)[ CD ]
Line_24 $$ InputStream is-->Line_28 $$ int cnt = is.read(buf)[ FD ]
Line_25 $$ is = liburl.openStream()-->Line_28 $$ int cnt = is.read(buf)[ FD ]
Line_27 $$ byte[] buf = new byte[4096]-->Line_28 $$ int cnt = is.read(buf)[ FD ]
Line_28 $$ int cnt = is.read(buf)-->Line_29 $$ while (cnt > 0) [ FD ]
Line_29 $$ while (cnt > 0) -->Line_30 $$ os.write(buf, 0, cnt)[ CD ]
Line_26 $$ OutputStream os = new FileOutputStream(destinationDirectory + filename)-->Line_30 $$ os.write(buf, 0, cnt)[ FD ]
Line_27 $$ byte[] buf = new byte[4096]-->Line_30 $$ os.write(buf, 0, cnt)[ FD ]
Line_28 $$ int cnt = is.read(buf)-->Line_30 $$ os.write(buf, 0, cnt)[ FD ]
Line_29 $$ while (cnt > 0) -->Line_31 $$ cnt = is.read(buf)[ CD ]
Line_31 $$ cnt = is.read(buf)-->Line_31 $$ cnt = is.read(buf)[ FD ]
Line_28 $$ int cnt = is.read(buf)-->Line_31 $$ cnt = is.read(buf)[ FD ]
Line_31 $$ cnt = is.read(buf)-->Line_31 $$ cnt = is.read(buf)[ CD ]
Line_24 $$ InputStream is-->Line_31 $$ cnt = is.read(buf)[ FD ]
Line_25 $$ is = liburl.openStream()-->Line_31 $$ cnt = is.read(buf)[ FD ]
Line_27 $$ byte[] buf = new byte[4096]-->Line_31 $$ cnt = is.read(buf)[ FD ]
Line_26 $$ OutputStream os = new FileOutputStream(destinationDirectory + filename)-->Line_33 $$ os.close()[ FD ]
Line_24 $$ InputStream is-->Line_34 $$ is.close()[ FD ]
Line_25 $$ is = liburl.openStream()-->Line_34 $$ is.close()[ FD ]
Line_20 $$ File destFile = new File(destinationDirectory + filename)-->Line_35 $$ destFile.deleteOnExit()[ FD ]
Line_2 $$ private static boolean extractFromJarUsingClassLoader(String searchString, String filename, String destinationDirectory) -->Line_40 $$ return true[ CD ]
Line_31 $$ cnt = is.read(buf)-->Line_29 $$ while (cnt > 0) [ FD ]
Line_31 $$ cnt = is.read(buf)-->Line_29 $$ while (cnt > 0) [ FD ]
Line_31 $$ cnt = is.read(buf)-->Line_30 $$ os.write(buf, 0, cnt)[ FD ]
