Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException [ CD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_3 $$ final Collection<T> result = new LinkedHashSet<T>()[ CD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_4 $$ final Enumeration<URL> resouces = classLoader.getResources("META-INF/services/" + serviceType.getName())[ CD ]
Line_4 $$ final Enumeration<URL> resouces = classLoader.getResources("META-INF/services/" + serviceType.getName())-->Line_4 $$ final Enumeration<URL> resouces = classLoader.getResources("META-INF/services/" + serviceType.getName())[ CD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_4 $$ final Enumeration<URL> resouces = classLoader.getResources("META-INF/services/" + serviceType.getName())[ FD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_4 $$ final Enumeration<URL> resouces = classLoader.getResources("META-INF/services/" + serviceType.getName())[ FD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_5 $$ while (resouces.hasMoreElements()) [ CD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException [ CD ]
Line_5 $$ while (resouces.hasMoreElements()) -->Line_5 $$ while (resouces.hasMoreElements()) [ CD ]
Line_4 $$ final Enumeration<URL> resouces = classLoader.getResources("META-INF/services/" + serviceType.getName())-->Line_5 $$ while (resouces.hasMoreElements()) [ FD ]
Line_5 $$ while (resouces.hasMoreElements()) -->Line_6 $$ final URL url = resouces.nextElement()[ CD ]
Line_6 $$ final URL url = resouces.nextElement()-->Line_6 $$ final URL url = resouces.nextElement()[ CD ]
Line_4 $$ final Enumeration<URL> resouces = classLoader.getResources("META-INF/services/" + serviceType.getName())-->Line_6 $$ final URL url = resouces.nextElement()[ FD ]
Line_5 $$ while (resouces.hasMoreElements()) -->Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ CD ]
Line_6 $$ final URL url = resouces.nextElement()-->Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_9 $$ String line = reader.readLine()-->Line_9 $$ String line = reader.readLine()[ CD ]
Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_9 $$ String line = reader.readLine()[ FD ]
Line_9 $$ String line = reader.readLine()-->Line_10 $$ while (line != null) [ FD ]
Line_10 $$ while (line != null) -->Line_11 $$ if (line.startsWith("#")) [ CD ]
Line_9 $$ String line = reader.readLine()-->Line_11 $$ if (line.startsWith("#")) [ FD ]
Line_11 $$ if (line.startsWith("#")) -->Line_11 $$ if (line.startsWith("#")) [ CD ]
Line_9 $$ String line = reader.readLine()-->Line_11 $$ if (line.startsWith("#")) [ FD ]
Line_11 $$ if (line.startsWith("#")) -->Line_12 $$ if ("".equals(line.trim())) [ CD ]
Line_12 $$ if ("".equals(line.trim())) -->Line_12 $$ if ("".equals(line.trim())) [ CD ]
Line_9 $$ String line = reader.readLine()-->Line_12 $$ if ("".equals(line.trim())) [ FD ]
Line_12 $$ if ("".equals(line.trim())) -->Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)[ CD ]
Line_9 $$ String line = reader.readLine()-->Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)[ FD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)[ FD ]
Line_12 $$ if ("".equals(line.trim())) -->Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) [ CD ]
Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) -->Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) [ CD ]
Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) -->Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) [ CD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) [ FD ]
Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)-->Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) [ FD ]
Line_6 $$ final URL url = resouces.nextElement()-->Line_16 $$ throw new IllegalStateException(String.format("%s: class %s does not implement required interfafce %s", url, implClass, serviceType))[ FD ]
Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)-->Line_16 $$ throw new IllegalStateException(String.format("%s: class %s does not implement required interfafce %s", url, implClass, serviceType))[ FD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_16 $$ throw new IllegalStateException(String.format("%s: class %s does not implement required interfafce %s", url, implClass, serviceType))[ FD ]
Line_12 $$ if ("".equals(line.trim())) -->Line_18 $$ result.add(implClass)[ CD ]
Line_3 $$ final Collection<T> result = new LinkedHashSet<T>()-->Line_18 $$ result.add(implClass)[ FD ]
Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)-->Line_18 $$ result.add(implClass)[ FD ]
Line_10 $$ while (line != null) -->Line_20 $$ line = reader.readLine()[ CD ]
Line_20 $$ line = reader.readLine()-->Line_20 $$ line = reader.readLine()[ FD ]
Line_9 $$ String line = reader.readLine()-->Line_20 $$ line = reader.readLine()[ FD ]
Line_20 $$ line = reader.readLine()-->Line_20 $$ line = reader.readLine()[ CD ]
Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_20 $$ line = reader.readLine()[ FD ]
Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_23 $$ reader.close()[ FD ]
Line_2 $$ public static <T extends Class> Collection<T> listServices(T serviceType, ClassLoader classLoader) throws IOException, ClassNotFoundException -->Line_26 $$ return result[ CD ]
Line_6 $$ final URL url = resouces.nextElement()-->Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_9 $$ String line = reader.readLine()[ FD ]
Line_7 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_23 $$ reader.close()[ FD ]
Line_20 $$ line = reader.readLine()-->Line_10 $$ while (line != null) [ FD ]
Line_20 $$ line = reader.readLine()-->Line_10 $$ while (line != null) [ FD ]
Line_20 $$ line = reader.readLine()-->Line_11 $$ if (line.startsWith("#")) [ FD ]
Line_20 $$ line = reader.readLine()-->Line_11 $$ if (line.startsWith("#")) [ FD ]
Line_20 $$ line = reader.readLine()-->Line_12 $$ if ("".equals(line.trim())) [ FD ]
Line_20 $$ line = reader.readLine()-->Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)[ FD ]
Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)-->Line_15 $$ if (!serviceType.isAssignableFrom(implClass)) [ FD ]
Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)-->Line_16 $$ throw new IllegalStateException(String.format("%s: class %s does not implement required interfafce %s", url, implClass, serviceType))[ FD ]
Line_14 $$ final T implClass = (T) Class.forName(line, true, classLoader)-->Line_18 $$ result.add(implClass)[ FD ]
