Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException [ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_3 $$ if ("file".equalsIgnoreCase(url.getProtocol())) [ CD ]
Line_3 $$ if ("file".equalsIgnoreCase(url.getProtocol())) -->Line_3 $$ if ("file".equalsIgnoreCase(url.getProtocol())) [ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_3 $$ if ("file".equalsIgnoreCase(url.getProtocol())) [ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_5 $$ File file = new File(url.toURI())[ FD ]
Line_5 $$ File file = new File(url.toURI())-->Line_6 $$ if (file.isFile()) [ FD ]
Line_6 $$ if (file.isFile()) -->Line_6 $$ if (file.isFile()) [ CD ]
Line_5 $$ File file = new File(url.toURI())-->Line_6 $$ if (file.isFile()) [ FD ]
Line_6 $$ if (file.isFile()) -->Line_7 $$ return get(file, metadata)[ CD ]
Line_7 $$ return get(file, metadata)-->Line_7 $$ return get(file, metadata)[ CD ]
Line_5 $$ File file = new File(url.toURI())-->Line_7 $$ return get(file, metadata)[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_7 $$ return get(file, metadata)[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_12 $$ URLConnection connection = url.openConnection()[ CD ]
Line_12 $$ URLConnection connection = url.openConnection()-->Line_12 $$ URLConnection connection = url.openConnection()[ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_12 $$ URLConnection connection = url.openConnection()[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_13 $$ String path = url.getPath()[ CD ]
Line_13 $$ String path = url.getPath()-->Line_13 $$ String path = url.getPath()[ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_13 $$ String path = url.getPath()[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_14 $$ int slash = path.lastIndexOf('/')[ CD ]
Line_14 $$ int slash = path.lastIndexOf('/')-->Line_14 $$ int slash = path.lastIndexOf('/')[ CD ]
Line_13 $$ String path = url.getPath()-->Line_14 $$ int slash = path.lastIndexOf('/')[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_15 $$ if (slash + 1 < path.length()) [ CD ]
Line_13 $$ String path = url.getPath()-->Line_15 $$ if (slash + 1 < path.length()) [ FD ]
Line_15 $$ if (slash + 1 < path.length()) -->Line_16 $$ metadata.set(Metadata.RESOURCE_NAME_KEY, path.substring(slash + 1))[ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_16 $$ metadata.set(Metadata.RESOURCE_NAME_KEY, path.substring(slash + 1))[ FD ]
Line_13 $$ String path = url.getPath()-->Line_16 $$ metadata.set(Metadata.RESOURCE_NAME_KEY, path.substring(slash + 1))[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_18 $$ String type = connection.getContentType()[ CD ]
Line_18 $$ String type = connection.getContentType()-->Line_18 $$ String type = connection.getContentType()[ CD ]
Line_12 $$ URLConnection connection = url.openConnection()-->Line_18 $$ String type = connection.getContentType()[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_19 $$ if (type != null) [ CD ]
Line_18 $$ String type = connection.getContentType()-->Line_19 $$ if (type != null) [ FD ]
Line_19 $$ if (type != null) -->Line_20 $$ metadata.set(Metadata.CONTENT_TYPE, type)[ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_20 $$ metadata.set(Metadata.CONTENT_TYPE, type)[ FD ]
Line_18 $$ String type = connection.getContentType()-->Line_20 $$ metadata.set(Metadata.CONTENT_TYPE, type)[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_22 $$ String encoding = connection.getContentEncoding()[ CD ]
Line_22 $$ String encoding = connection.getContentEncoding()-->Line_22 $$ String encoding = connection.getContentEncoding()[ CD ]
Line_12 $$ URLConnection connection = url.openConnection()-->Line_22 $$ String encoding = connection.getContentEncoding()[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_23 $$ if (encoding != null) [ CD ]
Line_22 $$ String encoding = connection.getContentEncoding()-->Line_23 $$ if (encoding != null) [ FD ]
Line_23 $$ if (encoding != null) -->Line_24 $$ metadata.set(Metadata.CONTENT_ENCODING, encoding)[ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_24 $$ metadata.set(Metadata.CONTENT_ENCODING, encoding)[ FD ]
Line_22 $$ String encoding = connection.getContentEncoding()-->Line_24 $$ metadata.set(Metadata.CONTENT_ENCODING, encoding)[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_26 $$ int length = connection.getContentLength()[ CD ]
Line_26 $$ int length = connection.getContentLength()-->Line_26 $$ int length = connection.getContentLength()[ CD ]
Line_12 $$ URLConnection connection = url.openConnection()-->Line_26 $$ int length = connection.getContentLength()[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_27 $$ if (length >= 0) [ CD ]
Line_26 $$ int length = connection.getContentLength()-->Line_27 $$ if (length >= 0) [ FD ]
Line_27 $$ if (length >= 0) -->Line_28 $$ metadata.set(Metadata.CONTENT_LENGTH, Integer.toString(length))[ CD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_28 $$ metadata.set(Metadata.CONTENT_LENGTH, Integer.toString(length))[ FD ]
Line_26 $$ int length = connection.getContentLength()-->Line_28 $$ metadata.set(Metadata.CONTENT_LENGTH, Integer.toString(length))[ FD ]
Line_2 $$ public static TikaInputStream get(URL url, Metadata metadata) throws IOException -->Line_30 $$ return new TikaInputStream(new BufferedInputStream(connection.getInputStream()), new TemporaryResources(), length)[ CD ]
Line_12 $$ URLConnection connection = url.openConnection()-->Line_30 $$ return new TikaInputStream(new BufferedInputStream(connection.getInputStream()), new TemporaryResources(), length)[ FD ]
