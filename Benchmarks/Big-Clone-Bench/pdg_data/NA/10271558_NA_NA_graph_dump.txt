Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void processBasicContent() [ CD ]
Line_2 $$ private void processBasicContent() -->Line_3 $$ String[] packageNames = sourceCollector.getPackageNames()[ CD ]
Line_3 $$ String[] packageNames = sourceCollector.getPackageNames()-->Line_3 $$ String[] packageNames = sourceCollector.getPackageNames()[ CD ]
Line_2 $$ private void processBasicContent() -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ CD ]
Line_2 $$ private void processBasicContent() -->Line_2 $$ private void processBasicContent() [ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ FD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_5 $$ XdcSource[] sources = sourceCollector.getXdcSources(packageNames[i])[ CD ]
Line_5 $$ XdcSource[] sources = sourceCollector.getXdcSources(packageNames[i])-->Line_5 $$ XdcSource[] sources = sourceCollector.getXdcSources(packageNames[i])[ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_6 $$ File dir = new File(outputDir, packageNames[i])[ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_7 $$ dir.mkdirs()[ CD ]
Line_6 $$ File dir = new File(outputDir, packageNames[i])-->Line_7 $$ dir.mkdirs()[ FD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_8 $$ Set pkgDirs = new HashSet()[ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_9 $$ for (int j = 0; j < sources.length; j++) [ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ CD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_9 $$ for (int j = 0; j < sources.length; j++) [ CD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_9 $$ for (int j = 0; j < sources.length; j++) [ CD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_9 $$ for (int j = 0; j < sources.length; j++) [ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_10 $$ XdcSource source = sources[j][ CD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_11 $$ Properties patterns = source.getPatterns()[ CD ]
Line_11 $$ Properties patterns = source.getPatterns()-->Line_11 $$ Properties patterns = source.getPatterns()[ CD ]
Line_10 $$ XdcSource source = sources[j]-->Line_11 $$ Properties patterns = source.getPatterns()[ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_12 $$ if (patterns != null) [ CD ]
Line_11 $$ Properties patterns = source.getPatterns()-->Line_12 $$ if (patterns != null) [ FD ]
Line_12 $$ if (patterns != null) -->Line_13 $$ tables.put("patterns", patterns)[ CD ]
Line_11 $$ Properties patterns = source.getPatterns()-->Line_13 $$ tables.put("patterns", patterns)[ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_15 $$ pkgDirs.add(source.getFile().getParentFile())[ CD ]
Line_8 $$ Set pkgDirs = new HashSet()-->Line_15 $$ pkgDirs.add(source.getFile().getParentFile())[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_15 $$ pkgDirs.add(source.getFile().getParentFile())[ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_16 $$ DialectHandler dialectHandler = source.getDialectHandler()[ CD ]
Line_16 $$ DialectHandler dialectHandler = source.getDialectHandler()-->Line_16 $$ DialectHandler dialectHandler = source.getDialectHandler()[ CD ]
Line_10 $$ XdcSource source = sources[j]-->Line_16 $$ DialectHandler dialectHandler = source.getDialectHandler()[ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_17 $$ Writer out = null[ CD ]
Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()-->Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()[ CD ]
Line_10 $$ XdcSource source = sources[j]-->Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_20 $$ source.setProcessingProperties(baseProperties, j > 0 ? sources[j - 1].getFileName() : null, j < sources.length - 1 ? sources[j + 1].getFileName() : null)[ FD ]
Line_21 $$ String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + "/source-header.xsl", tables)-->Line_21 $$ String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + "/source-header.xsl", tables)[ CD ]
Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()-->Line_21 $$ String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + "/source-header.xsl", tables)[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_22 $$ source.setRootComment(rootComment)[ FD ]
Line_21 $$ String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + "/source-header.xsl", tables)-->Line_22 $$ source.setRootComment(rootComment)[ FD ]
Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)-->Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)[ CD ]
Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()-->Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)[ FD ]
Line_16 $$ DialectHandler dialectHandler = source.getDialectHandler()-->Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)[ FD ]
Line_24 $$ if (LOG.isInfoEnabled()) -->Line_24 $$ if (LOG.isInfoEnabled()) [ CD ]
Line_24 $$ if (LOG.isInfoEnabled()) -->Line_25 $$ LOG.info("Processing source file " + sourceFilePath)[ CD ]
Line_17 $$ Writer out = null-->Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)[ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)[ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)[ CD ]
Line_10 $$ XdcSource source = sources[j]-->Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)[ FD ]
Line_17 $$ Writer out = null-->Line_28 $$ XmlUtils.printHtml(out, htmlDoc)[ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_28 $$ XmlUtils.printHtml(out, htmlDoc)[ FD ]
Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)-->Line_28 $$ XmlUtils.printHtml(out, htmlDoc)[ FD ]
Line_29 $$ if (sourceProcessor != null) -->Line_30 $$ sourceProcessor.processSource(source, encoding, docencoding)[ CD ]
Line_10 $$ XdcSource source = sources[j]-->Line_30 $$ sourceProcessor.processSource(source, encoding, docencoding)[ FD ]
Line_17 $$ Writer out = null-->Line_38 $$ if (out != null) [ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_38 $$ if (out != null) [ FD ]
Line_17 $$ Writer out = null-->Line_40 $$ out.close()[ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_40 $$ out.close()[ FD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) [ CD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ CD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) [ CD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) [ CD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) [ CD ]
Line_8 $$ Set pkgDirs = new HashSet()-->Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) [ FD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")[ CD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")[ FD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_49 $$ if (docFilesDir.exists() && docFilesDir.isDirectory()) [ CD ]
Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")-->Line_49 $$ if (docFilesDir.exists() && docFilesDir.isDirectory()) [ FD ]
Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")-->Line_49 $$ if (docFilesDir.exists() && docFilesDir.isDirectory()) [ FD ]
Line_49 $$ if (docFilesDir.exists() && docFilesDir.isDirectory()) -->Line_50 $$ File targetDir = new File(dir, "xdc-doc-files")[ CD ]
Line_49 $$ if (docFilesDir.exists() && docFilesDir.isDirectory()) -->Line_51 $$ targetDir.mkdirs()[ CD ]
Line_50 $$ File targetDir = new File(dir, "xdc-doc-files")-->Line_51 $$ targetDir.mkdirs()[ FD ]
Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")-->Line_53 $$ IOUtils.copyTree(docFilesDir, targetDir)[ FD ]
Line_50 $$ File targetDir = new File(dir, "xdc-doc-files")-->Line_53 $$ IOUtils.copyTree(docFilesDir, targetDir)[ FD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ FD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ FD ]
Line_4 $$ for (int i = 0; i < packageNames.length; i++) -->Line_4 $$ for (int i = 0; i < packageNames.length; i++) [ FD ]
Line_6 $$ File dir = new File(outputDir, packageNames[i])-->Line_7 $$ dir.mkdirs()[ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_9 $$ for (int j = 0; j < sources.length; j++) [ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_9 $$ for (int j = 0; j < sources.length; j++) [ FD ]
Line_9 $$ for (int j = 0; j < sources.length; j++) -->Line_9 $$ for (int j = 0; j < sources.length; j++) [ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_11 $$ Properties patterns = source.getPatterns()[ FD ]
Line_11 $$ Properties patterns = source.getPatterns()-->Line_12 $$ if (patterns != null) [ FD ]
Line_11 $$ Properties patterns = source.getPatterns()-->Line_13 $$ tables.put("patterns", patterns)[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_15 $$ pkgDirs.add(source.getFile().getParentFile())[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_16 $$ DialectHandler dialectHandler = source.getDialectHandler()[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_20 $$ source.setProcessingProperties(baseProperties, j > 0 ? sources[j - 1].getFileName() : null, j < sources.length - 1 ? sources[j + 1].getFileName() : null)[ FD ]
Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()-->Line_21 $$ String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + "/source-header.xsl", tables)[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_22 $$ source.setRootComment(rootComment)[ FD ]
Line_21 $$ String rootComment = XslUtils.transformToString(sourceFilePath, XSL_PKG + "/source-header.xsl", tables)-->Line_22 $$ source.setRootComment(rootComment)[ FD ]
Line_19 $$ String sourceFilePath = source.getFile().getAbsolutePath()-->Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)[ FD ]
Line_16 $$ DialectHandler dialectHandler = source.getDialectHandler()-->Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)[ FD ]
Line_17 $$ Writer out = null-->Line_28 $$ XmlUtils.printHtml(out, htmlDoc)[ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_28 $$ XmlUtils.printHtml(out, htmlDoc)[ FD ]
Line_23 $$ Document htmlDoc = XslUtils.transform(sourceFilePath, encoding, dialectHandler.getXslResourcePath(), tables)-->Line_28 $$ XmlUtils.printHtml(out, htmlDoc)[ FD ]
Line_10 $$ XdcSource source = sources[j]-->Line_30 $$ sourceProcessor.processSource(source, encoding, docencoding)[ FD ]
Line_17 $$ Writer out = null-->Line_38 $$ if (out != null) [ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_38 $$ if (out != null) [ FD ]
Line_17 $$ Writer out = null-->Line_40 $$ out.close()[ FD ]
Line_27 $$ out = IOUtils.getWriter(new File(dir, source.getFile().getName() + ".html"), docencoding)-->Line_40 $$ out.close()[ FD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) [ FD ]
Line_47 $$ for (Iterator iter = pkgDirs.iterator(); iter.hasNext(); ) -->Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")[ FD ]
Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")-->Line_49 $$ if (docFilesDir.exists() && docFilesDir.isDirectory()) [ FD ]
Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")-->Line_49 $$ if (docFilesDir.exists() && docFilesDir.isDirectory()) [ FD ]
Line_50 $$ File targetDir = new File(dir, "xdc-doc-files")-->Line_51 $$ targetDir.mkdirs()[ FD ]
Line_48 $$ File docFilesDir = new File((File) iter.next(), "xdc-doc-files")-->Line_53 $$ IOUtils.copyTree(docFilesDir, targetDir)[ FD ]
Line_50 $$ File targetDir = new File(dir, "xdc-doc-files")-->Line_53 $$ IOUtils.copyTree(docFilesDir, targetDir)[ FD ]
