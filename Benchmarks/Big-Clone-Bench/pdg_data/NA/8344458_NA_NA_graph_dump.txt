Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception [ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_3 $$ if (NullStatus.isNull(destinationFolder)) [ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_3 $$ if (NullStatus.isNull(destinationFolder)) [ FD ]
Line_3 $$ if (NullStatus.isNull(destinationFolder)) -->Line_3 $$ if (NullStatus.isNull(destinationFolder)) [ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_3 $$ if (NullStatus.isNull(destinationFolder)) [ FD ]
Line_3 $$ if (NullStatus.isNull(destinationFolder)) -->Line_4 $$ destinationFolder = ""[ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_4 $$ destinationFolder = ""[ FD ]
Line_4 $$ destinationFolder = ""-->Line_4 $$ destinationFolder = ""[ FD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_6 $$ new File(destinationFolder).mkdirs()[ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_7 $$ File inputFile = new File(fileName)[ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_8 $$ ZipFile zipFile = new ZipFile(inputFile)[ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_9 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries()[ CD ]
Line_9 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries()-->Line_9 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries()[ CD ]
Line_8 $$ ZipFile zipFile = new ZipFile(inputFile)-->Line_9 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries()[ FD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_10 $$ while (oEnum.hasMoreElements()) [ CD ]
Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception -->Line_2 $$ public static void extractZipPackage(String fileName, String destinationFolder) throws Exception [ CD ]
Line_10 $$ while (oEnum.hasMoreElements()) -->Line_10 $$ while (oEnum.hasMoreElements()) [ CD ]
Line_9 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries()-->Line_10 $$ while (oEnum.hasMoreElements()) [ FD ]
Line_10 $$ while (oEnum.hasMoreElements()) -->Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()[ CD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()[ CD ]
Line_9 $$ Enumeration<? extends ZipEntry> oEnum = zipFile.entries()-->Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()[ FD ]
Line_10 $$ while (oEnum.hasMoreElements()) -->Line_12 $$ File file = new File(destinationFolder + "/" + zipEntry.getName())[ CD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_12 $$ File file = new File(destinationFolder + "/" + zipEntry.getName())[ FD ]
Line_10 $$ while (oEnum.hasMoreElements()) -->Line_13 $$ if (zipEntry.isDirectory()) [ CD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_13 $$ if (zipEntry.isDirectory()) [ FD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_13 $$ if (zipEntry.isDirectory()) [ CD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_13 $$ if (zipEntry.isDirectory()) [ FD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_14 $$ file.mkdirs()[ CD ]
Line_12 $$ File file = new File(destinationFolder + "/" + zipEntry.getName())-->Line_14 $$ file.mkdirs()[ FD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()[ CD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()[ FD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ CD ]
Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ CD ]
Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_18 $$ new File(destinationFolderName).mkdirs()[ CD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_19 $$ FileOutputStream fos = new FileOutputStream(file)[ CD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_20 $$ IOUtils.copy(zipFile.getInputStream(zipEntry), fos)[ CD ]
Line_19 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_20 $$ IOUtils.copy(zipFile.getInputStream(zipEntry), fos)[ FD ]
Line_8 $$ ZipFile zipFile = new ZipFile(inputFile)-->Line_20 $$ IOUtils.copy(zipFile.getInputStream(zipEntry), fos)[ FD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_20 $$ IOUtils.copy(zipFile.getInputStream(zipEntry), fos)[ FD ]
Line_13 $$ if (zipEntry.isDirectory()) -->Line_21 $$ fos.close()[ CD ]
Line_19 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_21 $$ fos.close()[ FD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_12 $$ File file = new File(destinationFolder + "/" + zipEntry.getName())[ FD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_13 $$ if (zipEntry.isDirectory()) [ FD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_13 $$ if (zipEntry.isDirectory()) [ FD ]
Line_12 $$ File file = new File(destinationFolder + "/" + zipEntry.getName())-->Line_14 $$ file.mkdirs()[ FD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()[ FD ]
Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_16 $$ String destinationFolderName = destinationFolder + "/" + zipEntry.getName()-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))-->Line_17 $$ destinationFolderName = destinationFolderName.substring(0, destinationFolderName.lastIndexOf("/"))[ FD ]
Line_19 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_20 $$ IOUtils.copy(zipFile.getInputStream(zipEntry), fos)[ FD ]
Line_11 $$ ZipEntry zipEntry = oEnum.nextElement()-->Line_20 $$ IOUtils.copy(zipFile.getInputStream(zipEntry), fos)[ FD ]
Line_19 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_21 $$ fos.close()[ FD ]
