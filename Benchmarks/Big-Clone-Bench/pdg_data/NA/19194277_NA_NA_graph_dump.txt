Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void create() throws IOException [ CD ]
Line_2 $$ public void create() throws IOException -->Line_3 $$ FileChannel fc = new FileInputStream(sourceFile).getChannel()[ CD ]
Line_3 $$ FileChannel fc = new FileInputStream(sourceFile).getChannel()-->Line_3 $$ FileChannel fc = new FileInputStream(sourceFile).getChannel()[ CD ]
Line_5 $$ FileChannel fc_ = fc.position(element.starting())-->Line_5 $$ FileChannel fc_ = fc.position(element.starting())[ CD ]
Line_3 $$ FileChannel fc = new FileInputStream(sourceFile).getChannel()-->Line_5 $$ FileChannel fc_ = fc.position(element.starting())[ FD ]
Line_4 $$ for (RangeArrayElement element : array) -->Line_5 $$ FileChannel fc_ = fc.position(element.starting())[ FD ]
Line_4 $$ for (RangeArrayElement element : array) -->Line_6 $$ File part = new File(destinationDirectory, "_0x" + Long.toHexString(element.starting()) + ".partial")[ FD ]
Line_7 $$ FileChannel partfc = new FileOutputStream(part).getChannel()-->Line_7 $$ FileChannel partfc = new FileOutputStream(part).getChannel()[ CD ]
Line_7 $$ FileChannel partfc = new FileOutputStream(part).getChannel()-->Line_8 $$ partfc.transferFrom(fc_, 0, element.getSize())[ FD ]
Line_5 $$ FileChannel fc_ = fc.position(element.starting())-->Line_8 $$ partfc.transferFrom(fc_, 0, element.getSize())[ FD ]
Line_4 $$ for (RangeArrayElement element : array) -->Line_8 $$ partfc.transferFrom(fc_, 0, element.getSize())[ FD ]
Line_7 $$ FileChannel partfc = new FileOutputStream(part).getChannel()-->Line_9 $$ partfc.force(true)[ FD ]
Line_7 $$ FileChannel partfc = new FileOutputStream(part).getChannel()-->Line_10 $$ partfc.close()[ FD ]
Line_2 $$ public void create() throws IOException -->Line_12 $$ fc.close()[ CD ]
Line_3 $$ FileChannel fc = new FileInputStream(sourceFile).getChannel()-->Line_12 $$ fc.close()[ FD ]
