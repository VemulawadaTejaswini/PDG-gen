Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ ServiceDescription getServiceDescription() throws ConfigurationException [ CD ]
Line_2 $$ ServiceDescription getServiceDescription() throws ConfigurationException -->Line_3 $$ final XPath pathsXPath = this.xPathFactory.newXPath()[ CD ]
Line_3 $$ final XPath pathsXPath = this.xPathFactory.newXPath()-->Line_3 $$ final XPath pathsXPath = this.xPathFactory.newXPath()[ CD ]
Line_3 $$ final XPath pathsXPath = this.xPathFactory.newXPath()-->Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)[ FD ]
Line_6 $$ final String title = getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.TITLE_ELEMENT)-->Line_6 $$ final String title = getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.TITLE_ELEMENT)[ CD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_6 $$ final String title = getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.TITLE_ELEMENT)[ FD ]
Line_8 $$ Property[] serviceProperties = getServiceProperties(serviceDescriptionNode)-->Line_8 $$ Property[] serviceProperties = getServiceProperties(serviceDescriptionNode)[ CD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_8 $$ Property[] serviceProperties = getServiceProperties(serviceDescriptionNode)[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_9 $$ builder.author(getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.CREATOR_ELEMENT))[ FD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_9 $$ builder.author(getMandatoryElementText(serviceDescriptionNode, ConfigurationFileTagsV1.CREATOR_ELEMENT))[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_10 $$ builder.classname(this.canonicalServiceName)[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_11 $$ builder.description(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.DESCRIPTION_ELEMENT))[ FD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_11 $$ builder.description(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.DESCRIPTION_ELEMENT))[ FD ]
Line_12 $$ final String serviceVersion = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.VERSION_ELEMENT)-->Line_12 $$ final String serviceVersion = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.VERSION_ELEMENT)[ CD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_12 $$ final String serviceVersion = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.VERSION_ELEMENT)[ FD ]
Line_13 $$ final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode)-->Line_13 $$ final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode)[ CD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_13 $$ final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode)[ FD ]
Line_14 $$ String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT)-->Line_14 $$ String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT)[ CD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_14 $$ String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT)[ FD ]
Line_14 $$ String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT)-->Line_15 $$ if (identifier == null || "".equals(identifier)) [ FD ]
Line_17 $$ final MessageDigest identDigest = MessageDigest.getInstance("MD5")-->Line_17 $$ final MessageDigest identDigest = MessageDigest.getInstance("MD5")[ CD ]
Line_17 $$ final MessageDigest identDigest = MessageDigest.getInstance("MD5")-->Line_18 $$ identDigest.update(this.canonicalServiceName.getBytes())[ FD ]
Line_17 $$ final MessageDigest identDigest = MessageDigest.getInstance("MD5")-->Line_20 $$ identDigest.update(versionInfo.getBytes())[ FD ]
Line_19 $$ final String versionInfo = (serviceVersion != null) ? serviceVersion : ""-->Line_20 $$ identDigest.update(versionInfo.getBytes())[ FD ]
Line_21 $$ final URI toolIDURI = toolDescription.getIdentifier()-->Line_21 $$ final URI toolIDURI = toolDescription.getIdentifier()[ CD ]
Line_13 $$ final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode)-->Line_21 $$ final URI toolIDURI = toolDescription.getIdentifier()[ FD ]
Line_21 $$ final URI toolIDURI = toolDescription.getIdentifier()-->Line_22 $$ final String toolIdentifier = toolIDURI == null ? "" : toolIDURI.toString()[ FD ]
Line_17 $$ final MessageDigest identDigest = MessageDigest.getInstance("MD5")-->Line_23 $$ identDigest.update(toolIdentifier.getBytes())[ FD ]
Line_22 $$ final String toolIdentifier = toolIDURI == null ? "" : toolIDURI.toString()-->Line_23 $$ identDigest.update(toolIdentifier.getBytes())[ FD ]
Line_17 $$ final MessageDigest identDigest = MessageDigest.getInstance("MD5")-->Line_24 $$ final BigInteger md5hash = new BigInteger(identDigest.digest())[ FD ]
Line_14 $$ String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT)-->Line_25 $$ identifier = md5hash.toString(16)[ FD ]
Line_25 $$ identifier = md5hash.toString(16)-->Line_25 $$ identifier = md5hash.toString(16)[ FD ]
Line_25 $$ identifier = md5hash.toString(16)-->Line_25 $$ identifier = md5hash.toString(16)[ CD ]
Line_24 $$ final BigInteger md5hash = new BigInteger(identDigest.digest())-->Line_25 $$ identifier = md5hash.toString(16)[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_30 $$ builder.identifier(identifier)[ FD ]
Line_14 $$ String identifier = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.IDENTIFIER_ELEMENT)-->Line_30 $$ builder.identifier(identifier)[ FD ]
Line_25 $$ identifier = md5hash.toString(16)-->Line_30 $$ builder.identifier(identifier)[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_31 $$ builder.version(serviceVersion)[ FD ]
Line_12 $$ final String serviceVersion = getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.VERSION_ELEMENT)-->Line_31 $$ builder.version(serviceVersion)[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_32 $$ builder.tool(toolDescription)[ FD ]
Line_13 $$ final Tool toolDescription = getToolDescriptionElement(serviceDescriptionNode)-->Line_32 $$ builder.tool(toolDescription)[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_33 $$ builder.instructions(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.INSTRUCTIONS_ELEMENT))[ FD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_33 $$ builder.instructions(getOptionalElementText(serviceDescriptionNode, ConfigurationFileTagsV1.INSTRUCTIONS_ELEMENT))[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_34 $$ builder.furtherInfo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.FURTHER_INFO_ELEMENT))[ FD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_34 $$ builder.furtherInfo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.FURTHER_INFO_ELEMENT))[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_35 $$ builder.logo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.LOGO_ELEMENT))[ FD ]
Line_5 $$ final Node serviceDescriptionNode = (Node) pathsXPath.evaluate(ConfigurationFileTagsV1.SERVICE_DESCRIPTION_ELEMENT_XPATH, this.configuration, XPathConstants.NODE)-->Line_35 $$ builder.logo(getOptionalURIElement(serviceDescriptionNode, ConfigurationFileTagsV1.LOGO_ELEMENT))[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_36 $$ builder.serviceProvider(this.serviceProvider)[ FD ]
Line_38 $$ final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths()-->Line_38 $$ final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths()[ CD ]
Line_37 $$ final DBMigrationPathFactory migrationPathFactory = new DBMigrationPathFactory(this.configuration)-->Line_38 $$ final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths()[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_39 $$ builder.paths(MigrationPathConverter.toPlanetsPaths(migrationPaths))[ FD ]
Line_38 $$ final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths()-->Line_39 $$ builder.paths(MigrationPathConverter.toPlanetsPaths(migrationPaths))[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_40 $$ builder.inputFormats(migrationPaths.getInputFormatURIs().toArray(new URI[0]))[ FD ]
Line_38 $$ final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths()-->Line_40 $$ builder.inputFormats(migrationPaths.getInputFormatURIs().toArray(new URI[0]))[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_41 $$ builder.parameters(getUniqueParameters(migrationPaths))[ FD ]
Line_38 $$ final MigrationPaths migrationPaths = migrationPathFactory.getAllMigrationPaths()-->Line_41 $$ builder.parameters(getUniqueParameters(migrationPaths))[ FD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_42 $$ builder.properties(serviceProperties)[ FD ]
Line_8 $$ Property[] serviceProperties = getServiceProperties(serviceDescriptionNode)-->Line_42 $$ builder.properties(serviceProperties)[ FD ]
Line_43 $$ return builder.build()-->Line_43 $$ return builder.build()[ CD ]
Line_7 $$ ServiceDescription.Builder builder = new ServiceDescription.Builder(title, Migrate.class.getCanonicalName())-->Line_43 $$ return builder.build()[ FD ]
