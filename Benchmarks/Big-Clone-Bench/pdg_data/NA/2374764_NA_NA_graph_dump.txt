Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException [ CD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_3 $$ MessageDigest alg = MessageDigest.getInstance(algorithm)[ CD ]
Line_3 $$ MessageDigest alg = MessageDigest.getInstance(algorithm)-->Line_3 $$ MessageDigest alg = MessageDigest.getInstance(algorithm)[ CD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_3 $$ MessageDigest alg = MessageDigest.getInstance(algorithm)[ FD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_4 $$ alg.reset()[ CD ]
Line_3 $$ MessageDigest alg = MessageDigest.getInstance(algorithm)-->Line_4 $$ alg.reset()[ FD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_5 $$ alg.update(new String(passwd).getBytes())[ CD ]
Line_3 $$ MessageDigest alg = MessageDigest.getInstance(algorithm)-->Line_5 $$ alg.update(new String(passwd).getBytes())[ FD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_6 $$ byte[] digest = alg.digest()[ CD ]
Line_6 $$ byte[] digest = alg.digest()-->Line_6 $$ byte[] digest = alg.digest()[ CD ]
Line_3 $$ MessageDigest alg = MessageDigest.getInstance(algorithm)-->Line_6 $$ byte[] digest = alg.digest()[ FD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_7 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_8 $$ for (int i = 0; i < digest.length; i++) [ CD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException [ CD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_8 $$ for (int i = 0; i < digest.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_8 $$ for (int i = 0; i < digest.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_8 $$ for (int i = 0; i < digest.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_9 $$ String hex = Integer.toHexString(0xff & digest[i])[ CD ]
Line_9 $$ String hex = Integer.toHexString(0xff & digest[i])-->Line_9 $$ String hex = Integer.toHexString(0xff & digest[i])[ CD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_10 $$ if (hex.length() == 1) [ CD ]
Line_9 $$ String hex = Integer.toHexString(0xff & digest[i])-->Line_10 $$ if (hex.length() == 1) [ FD ]
Line_10 $$ if (hex.length() == 1) -->Line_11 $$ sb.append('0')[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append('0')[ FD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_13 $$ sb.append(hex)[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(hex)[ FD ]
Line_9 $$ String hex = Integer.toHexString(0xff & digest[i])-->Line_13 $$ sb.append(hex)[ FD ]
Line_2 $$ private static String getHash(char[] passwd, String algorithm) throws NoSuchAlgorithmException -->Line_15 $$ return sb.toString()[ CD ]
Line_15 $$ return sb.toString()-->Line_15 $$ return sb.toString()[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ return sb.toString()[ FD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_8 $$ for (int i = 0; i < digest.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_8 $$ for (int i = 0; i < digest.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < digest.length; i++) -->Line_8 $$ for (int i = 0; i < digest.length; i++) [ FD ]
Line_9 $$ String hex = Integer.toHexString(0xff & digest[i])-->Line_10 $$ if (hex.length() == 1) [ FD ]
Line_9 $$ String hex = Integer.toHexString(0xff & digest[i])-->Line_13 $$ sb.append(hex)[ FD ]
