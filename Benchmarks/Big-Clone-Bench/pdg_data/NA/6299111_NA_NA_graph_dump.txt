Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException [ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_3 $$ URL url = new URL(urlToRetrieve)[ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_4 $$ URLConnection uc = url.openConnection()[ CD ]
Line_4 $$ URLConnection uc = url.openConnection()-->Line_4 $$ URLConnection uc = url.openConnection()[ CD ]
Line_3 $$ URL url = new URL(urlToRetrieve)-->Line_4 $$ URLConnection uc = url.openConnection()[ FD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_5 $$ InputStream is = uc.getInputStream()[ CD ]
Line_5 $$ InputStream is = uc.getInputStream()-->Line_5 $$ InputStream is = uc.getInputStream()[ CD ]
Line_4 $$ URLConnection uc = url.openConnection()-->Line_5 $$ InputStream is = uc.getInputStream()[ FD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_7 $$ StringBuilder output = new StringBuilder(16384)[ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_8 $$ String str[ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_9 $$ boolean first = true[ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_10 $$ while ((str = in.readLine()) != null) [ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException [ CD ]
Line_10 $$ while ((str = in.readLine()) != null) -->Line_10 $$ while ((str = in.readLine()) != null) [ FD ]
Line_8 $$ String str-->Line_10 $$ while ((str = in.readLine()) != null) [ FD ]
Line_10 $$ while ((str = in.readLine()) != null) -->Line_10 $$ while ((str = in.readLine()) != null) [ CD ]
Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_10 $$ while ((str = in.readLine()) != null) [ FD ]
Line_10 $$ while ((str = in.readLine()) != null) -->Line_11 $$ if (!first)[ CD ]
Line_9 $$ boolean first = true-->Line_11 $$ if (!first)[ FD ]
Line_11 $$ if (!first)-->Line_11 $$ if (!first)[ CD ]
Line_9 $$ boolean first = true-->Line_11 $$ if (!first)[ FD ]
Line_11 $$ if (!first)-->Line_11 $$ output.append("\n")[ CD ]
Line_7 $$ StringBuilder output = new StringBuilder(16384)-->Line_11 $$ output.append("\n")[ FD ]
Line_10 $$ while ((str = in.readLine()) != null) -->Line_12 $$ first = false[ CD ]
Line_12 $$ first = false-->Line_12 $$ first = false[ FD ]
Line_9 $$ boolean first = true-->Line_12 $$ first = false[ FD ]
Line_10 $$ while ((str = in.readLine()) != null) -->Line_13 $$ output.append(str)[ CD ]
Line_7 $$ StringBuilder output = new StringBuilder(16384)-->Line_13 $$ output.append(str)[ FD ]
Line_10 $$ while ((str = in.readLine()) != null) -->Line_13 $$ output.append(str)[ FD ]
Line_8 $$ String str-->Line_13 $$ output.append(str)[ FD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_15 $$ in.close()[ CD ]
Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_15 $$ in.close()[ FD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_16 $$ System.err.println(((HttpURLConnection) uc).getResponseMessage())[ CD ]
Line_2 $$ public static String retrieveQ(String urlToRetrieve) throws MalformedURLException, IOException -->Line_17 $$ return output.toString()[ CD ]
Line_17 $$ return output.toString()-->Line_17 $$ return output.toString()[ CD ]
Line_7 $$ StringBuilder output = new StringBuilder(16384)-->Line_17 $$ return output.toString()[ FD ]
Line_12 $$ first = false-->Line_11 $$ if (!first)[ FD ]
Line_12 $$ first = false-->Line_11 $$ if (!first)[ FD ]
Line_10 $$ while ((str = in.readLine()) != null) -->Line_13 $$ output.append(str)[ FD ]
