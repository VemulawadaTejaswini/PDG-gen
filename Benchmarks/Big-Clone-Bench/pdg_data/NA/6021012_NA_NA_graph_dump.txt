Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException [ CD ]
Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException -->Line_3 $$ InputStream is = null[ CD ]
Line_3 $$ InputStream is = null-->Line_5 $$ is = url.openStream()[ FD ]
Line_5 $$ is = url.openStream()-->Line_5 $$ is = url.openStream()[ FD ]
Line_5 $$ is = url.openStream()-->Line_5 $$ is = url.openStream()[ CD ]
Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException -->Line_5 $$ is = url.openStream()[ FD ]
Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException -->Line_7 $$ throw new FlightException("IO Error: cannot read from URL " + url.toString())[ FD ]
Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException -->Line_9 $$ Reader reader = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException -->Line_10 $$ Parser.parseEdges(reader, g, airportToVertex)[ CD ]
Line_9 $$ Reader reader = new BufferedReader(new InputStreamReader(is))-->Line_10 $$ Parser.parseEdges(reader, g, airportToVertex)[ FD ]
Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException -->Line_10 $$ Parser.parseEdges(reader, g, airportToVertex)[ FD ]
Line_2 $$ public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException -->Line_10 $$ Parser.parseEdges(reader, g, airportToVertex)[ FD ]
