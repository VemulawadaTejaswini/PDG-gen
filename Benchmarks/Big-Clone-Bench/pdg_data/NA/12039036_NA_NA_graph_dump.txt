Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static ArrayList<Credential> importCredentials(String urlString) [ CD ]
Line_2 $$ public static ArrayList<Credential> importCredentials(String urlString) -->Line_3 $$ ArrayList<Credential> results = new ArrayList<Credential>()[ CD ]
Line_5 $$ URL url = new URL(urlString)-->Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_9 $$ while ((line = in.readLine()) != null) [ FD ]
Line_8 $$ String line-->Line_9 $$ while ((line = in.readLine()) != null) [ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_9 $$ while ((line = in.readLine()) != null) [ CD ]
Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_9 $$ while ((line = in.readLine()) != null) [ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_10 $$ buff.append(line)[ CD ]
Line_7 $$ StringBuffer buff = new StringBuffer()-->Line_10 $$ buff.append(line)[ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_10 $$ buff.append(line)[ FD ]
Line_8 $$ String line-->Line_10 $$ buff.append(line)[ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ CD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ FD ]
Line_8 $$ String line-->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ FD ]
Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) -->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ CD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ FD ]
Line_8 $$ String line-->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ FD ]
Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) -->Line_12 $$ Credential credential = ProfileParser.parseCredential(buff.toString(), true)[ CD ]
Line_12 $$ Credential credential = ProfileParser.parseCredential(buff.toString(), true)-->Line_12 $$ Credential credential = ProfileParser.parseCredential(buff.toString(), true)[ CD ]
Line_7 $$ StringBuffer buff = new StringBuffer()-->Line_12 $$ Credential credential = ProfileParser.parseCredential(buff.toString(), true)[ FD ]
Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) -->Line_13 $$ results.add(credential)[ CD ]
Line_3 $$ ArrayList<Credential> results = new ArrayList<Credential>()-->Line_13 $$ results.add(credential)[ FD ]
Line_12 $$ Credential credential = ProfileParser.parseCredential(buff.toString(), true)-->Line_13 $$ results.add(credential)[ FD ]
Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) -->Line_14 $$ buff = new StringBuffer()[ CD ]
Line_14 $$ buff = new StringBuffer()-->Line_14 $$ buff = new StringBuffer()[ FD ]
Line_7 $$ StringBuffer buff = new StringBuffer()-->Line_14 $$ buff = new StringBuffer()[ FD ]
Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) -->Line_16 $$ buff.append(NL)[ CD ]
Line_14 $$ buff = new StringBuffer()-->Line_16 $$ buff.append(NL)[ FD ]
Line_7 $$ StringBuffer buff = new StringBuffer()-->Line_16 $$ buff.append(NL)[ FD ]
Line_2 $$ public static ArrayList<Credential> importCredentials(String urlString) -->Line_24 $$ return results[ CD ]
Line_14 $$ buff = new StringBuffer()-->Line_10 $$ buff.append(line)[ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_10 $$ buff.append(line)[ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ FD ]
Line_9 $$ while ((line = in.readLine()) != null) -->Line_11 $$ if (line.equals("-----END PGP SIGNATURE-----")) [ FD ]
Line_14 $$ buff = new StringBuffer()-->Line_12 $$ Credential credential = ProfileParser.parseCredential(buff.toString(), true)[ FD ]
Line_12 $$ Credential credential = ProfileParser.parseCredential(buff.toString(), true)-->Line_13 $$ results.add(credential)[ FD ]
Line_14 $$ buff = new StringBuffer()-->Line_16 $$ buff.append(NL)[ FD ]
