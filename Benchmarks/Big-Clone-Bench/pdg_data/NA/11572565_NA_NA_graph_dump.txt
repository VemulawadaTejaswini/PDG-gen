Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static final boolean copy(File source, File target, boolean overwrite) [ CD ]
Line_2 $$ public static final boolean copy(File source, File target, boolean overwrite) -->Line_3 $$ if (!overwrite && target.exists()) [ CD ]
Line_2 $$ public static final boolean copy(File source, File target, boolean overwrite) -->Line_3 $$ if (!overwrite && target.exists()) [ FD ]
Line_2 $$ public static final boolean copy(File source, File target, boolean overwrite) -->Line_3 $$ if (!overwrite && target.exists()) [ FD ]
Line_3 $$ if (!overwrite && target.exists()) -->Line_4 $$ LOGGER.error("Target file exist and it not permitted to overwrite it !")[ CD ]
Line_3 $$ if (!overwrite && target.exists()) -->Line_5 $$ return false[ CD ]
Line_2 $$ public static final boolean copy(File source, File target, boolean overwrite) -->Line_7 $$ FileChannel in = null[ CD ]
Line_2 $$ public static final boolean copy(File source, File target, boolean overwrite) -->Line_8 $$ FileChannel out = null[ CD ]
Line_7 $$ FileChannel in = null-->Line_10 $$ in = new FileInputStream(source).getChannel()[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_10 $$ in = new FileInputStream(source).getChannel()[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_10 $$ in = new FileInputStream(source).getChannel()[ CD ]
Line_8 $$ FileChannel out = null-->Line_11 $$ out = new FileOutputStream(target).getChannel()[ FD ]
Line_11 $$ out = new FileOutputStream(target).getChannel()-->Line_11 $$ out = new FileOutputStream(target).getChannel()[ FD ]
Line_11 $$ out = new FileOutputStream(target).getChannel()-->Line_11 $$ out = new FileOutputStream(target).getChannel()[ CD ]
Line_7 $$ FileChannel in = null-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_8 $$ FileChannel out = null-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_11 $$ out = new FileOutputStream(target).getChannel()-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_7 $$ FileChannel in = null-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_15 $$ if (LOGGER.isDebugEnabled())-->Line_15 $$ if (LOGGER.isDebugEnabled())[ CD ]
Line_15 $$ if (LOGGER.isDebugEnabled())-->Line_15 $$ e.printStackTrace()[ CD ]
Line_19 $$ if (LOGGER.isDebugEnabled())-->Line_19 $$ if (LOGGER.isDebugEnabled())[ CD ]
Line_19 $$ if (LOGGER.isDebugEnabled())-->Line_19 $$ e.printStackTrace()[ CD ]
Line_7 $$ FileChannel in = null-->Line_23 $$ in.close()[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_23 $$ in.close()[ FD ]
Line_8 $$ FileChannel out = null-->Line_27 $$ out.close()[ FD ]
Line_11 $$ out = new FileOutputStream(target).getChannel()-->Line_27 $$ out.close()[ FD ]
Line_2 $$ public static final boolean copy(File source, File target, boolean overwrite) -->Line_31 $$ return true[ CD ]
