Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException [ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_3 $$ checkPermission(permit, String.valueOf(namespaceId))[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_3 $$ checkPermission(permit, String.valueOf(namespaceId))[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_3 $$ checkPermission(permit, String.valueOf(namespaceId))[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_4 $$ boolean exist = isRoleTypeUsed(namespaceId, id)[ CD ]
Line_4 $$ boolean exist = isRoleTypeUsed(namespaceId, id)-->Line_4 $$ boolean exist = isRoleTypeUsed(namespaceId, id)[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_4 $$ boolean exist = isRoleTypeUsed(namespaceId, id)[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_4 $$ boolean exist = isRoleTypeUsed(namespaceId, id)[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_5 $$ if (exist) [ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_8 $$ if (!removeReferencesInRoleTypes) [ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_8 $$ if (!removeReferencesInRoleTypes) [ FD ]
Line_8 $$ if (!removeReferencesInRoleTypes) -->Line_8 $$ if (!removeReferencesInRoleTypes) [ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_8 $$ if (!removeReferencesInRoleTypes) [ FD ]
Line_8 $$ if (!removeReferencesInRoleTypes) -->Line_9 $$ StringBuffer msgBuf = new StringBuffer()[ CD ]
Line_8 $$ if (!removeReferencesInRoleTypes) -->Line_10 $$ DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id)[ CD ]
Line_10 $$ DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id)-->Line_10 $$ DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id)[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_10 $$ DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id)[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_10 $$ DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id)[ FD ]
Line_8 $$ if (!removeReferencesInRoleTypes) -->Line_11 $$ if (objects.length > 0) [ CD ]
Line_11 $$ if (objects.length > 0) -->Line_12 $$ msgBuf.append("Role Type is Right Identity in one or more Role Types.")[ CD ]
Line_9 $$ StringBuffer msgBuf = new StringBuffer()-->Line_12 $$ msgBuf.append("Role Type is Right Identity in one or more Role Types.")[ FD ]
Line_8 $$ if (!removeReferencesInRoleTypes) -->Line_14 $$ objects = fetchParentReferences(namespaceId, id)[ CD ]
Line_10 $$ DTSTransferObject[] objects = fetchRightIdentityReferences(namespaceId, id)-->Line_14 $$ objects = fetchParentReferences(namespaceId, id)[ FD ]
Line_14 $$ objects = fetchParentReferences(namespaceId, id)-->Line_14 $$ objects = fetchParentReferences(namespaceId, id)[ FD ]
Line_14 $$ objects = fetchParentReferences(namespaceId, id)-->Line_14 $$ objects = fetchParentReferences(namespaceId, id)[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_14 $$ objects = fetchParentReferences(namespaceId, id)[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_14 $$ objects = fetchParentReferences(namespaceId, id)[ FD ]
Line_8 $$ if (!removeReferencesInRoleTypes) -->Line_15 $$ if (objects.length > 0) [ CD ]
Line_15 $$ if (objects.length > 0) -->Line_16 $$ if (msgBuf.length() > 0) [ CD ]
Line_9 $$ StringBuffer msgBuf = new StringBuffer()-->Line_16 $$ if (msgBuf.length() > 0) [ FD ]
Line_16 $$ if (msgBuf.length() > 0) -->Line_17 $$ msgBuf.append("\n")[ CD ]
Line_9 $$ StringBuffer msgBuf = new StringBuffer()-->Line_17 $$ msgBuf.append("\n")[ FD ]
Line_15 $$ if (objects.length > 0) -->Line_19 $$ msgBuf.append("Role Type is Parent of one or more Role Types.")[ CD ]
Line_9 $$ StringBuffer msgBuf = new StringBuffer()-->Line_19 $$ msgBuf.append("Role Type is Parent of one or more Role Types.")[ FD ]
Line_8 $$ if (!removeReferencesInRoleTypes) -->Line_21 $$ if (msgBuf.length() > 0) [ CD ]
Line_9 $$ StringBuffer msgBuf = new StringBuffer()-->Line_21 $$ if (msgBuf.length() > 0) [ FD ]
Line_9 $$ StringBuffer msgBuf = new StringBuffer()-->Line_22 $$ throw new DTSValidationException(msgBuf.toString())[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_25 $$ String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF")[ CD ]
Line_25 $$ String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF")-->Line_25 $$ String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF")[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_26 $$ String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF")[ CD ]
Line_26 $$ String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF")-->Line_26 $$ String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF")[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_27 $$ String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE")[ CD ]
Line_27 $$ String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE")-->Line_27 $$ String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE")[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_28 $$ PreparedStatement pstmt = null[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_29 $$ boolean success = false[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_30 $$ long typeGid = getGID(namespaceId, id)[ CD ]
Line_30 $$ long typeGid = getGID(namespaceId, id)-->Line_30 $$ long typeGid = getGID(namespaceId, id)[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_30 $$ long typeGid = getGID(namespaceId, id)[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_30 $$ long typeGid = getGID(namespaceId, id)[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_31 $$ conn.setAutoCommit(false)[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_32 $$ int defaultLevel = conn.getTransactionIsolation()[ CD ]
Line_32 $$ int defaultLevel = conn.getTransactionIsolation()-->Line_32 $$ int defaultLevel = conn.getTransactionIsolation()[ CD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_33 $$ conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED)[ CD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)[ CD ]
Line_25 $$ String sqlRightId = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_RIGHT_IDENTITY_REF")-->Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_36 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_36 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_30 $$ long typeGid = getGID(namespaceId, id)-->Line_36 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_37 $$ pstmt.executeUpdate()[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_37 $$ pstmt.executeUpdate()[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_38 $$ pstmt.close()[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_38 $$ pstmt.close()[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_39 $$ pstmt = conn.prepareStatement(sqlParent)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_39 $$ pstmt = conn.prepareStatement(sqlParent)[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_39 $$ pstmt = conn.prepareStatement(sqlParent)[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_39 $$ pstmt = conn.prepareStatement(sqlParent)[ CD ]
Line_26 $$ String sqlParent = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE_PARENT_REF")-->Line_39 $$ pstmt = conn.prepareStatement(sqlParent)[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_40 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_40 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_40 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_30 $$ long typeGid = getGID(namespaceId, id)-->Line_40 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_41 $$ pstmt.executeUpdate()[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_41 $$ pstmt.executeUpdate()[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_41 $$ pstmt.executeUpdate()[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_42 $$ pstmt.close()[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_42 $$ pstmt.close()[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_42 $$ pstmt.close()[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_43 $$ pstmt = conn.prepareStatement(sql)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_43 $$ pstmt = conn.prepareStatement(sql)[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_43 $$ pstmt = conn.prepareStatement(sql)[ FD ]
Line_43 $$ pstmt = conn.prepareStatement(sql)-->Line_43 $$ pstmt = conn.prepareStatement(sql)[ FD ]
Line_43 $$ pstmt = conn.prepareStatement(sql)-->Line_43 $$ pstmt = conn.prepareStatement(sql)[ CD ]
Line_27 $$ String sql = getDAO().getStatement(ROLE_TYPE_TABLE_KEY, "DELETE")-->Line_43 $$ pstmt = conn.prepareStatement(sql)[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_44 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_44 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_44 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_43 $$ pstmt = conn.prepareStatement(sql)-->Line_44 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_30 $$ long typeGid = getGID(namespaceId, id)-->Line_44 $$ pstmt.setLong(1, typeGid)[ FD ]
Line_45 $$ int count = pstmt.executeUpdate()-->Line_45 $$ int count = pstmt.executeUpdate()[ CD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_45 $$ int count = pstmt.executeUpdate()[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_45 $$ int count = pstmt.executeUpdate()[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_45 $$ int count = pstmt.executeUpdate()[ FD ]
Line_43 $$ pstmt = conn.prepareStatement(sql)-->Line_45 $$ int count = pstmt.executeUpdate()[ FD ]
Line_29 $$ boolean success = false-->Line_46 $$ success = (count == 1)[ FD ]
Line_46 $$ success = (count == 1)-->Line_46 $$ success = (count == 1)[ FD ]
Line_32 $$ int defaultLevel = conn.getTransactionIsolation()-->Line_52 $$ conn.setTransactionIsolation(defaultLevel)[ FD ]
Line_28 $$ PreparedStatement pstmt = null-->Line_54 $$ closeStatement(pstmt)[ FD ]
Line_35 $$ pstmt = conn.prepareStatement(sqlRightId)-->Line_54 $$ closeStatement(pstmt)[ FD ]
Line_39 $$ pstmt = conn.prepareStatement(sqlParent)-->Line_54 $$ closeStatement(pstmt)[ FD ]
Line_43 $$ pstmt = conn.prepareStatement(sql)-->Line_54 $$ closeStatement(pstmt)[ FD ]
Line_2 $$ public boolean deleteRoleType(int id, int namespaceId, boolean removeReferencesInRoleTypes, DTSPermission permit) throws SQLException, PermissionException, DTSValidationException -->Line_56 $$ return success[ CD ]
