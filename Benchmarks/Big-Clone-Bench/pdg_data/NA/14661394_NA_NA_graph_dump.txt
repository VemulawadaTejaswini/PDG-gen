Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ XmlFilesFilter filter = new XmlFilesFilter()[ CD ]
Line_2 $$ public void run() -->Line_4 $$ String pathTemp = Settings.get("vo_store.databaseMetaCollection")[ CD ]
Line_4 $$ String pathTemp = Settings.get("vo_store.databaseMetaCollection")-->Line_4 $$ String pathTemp = Settings.get("vo_store.databaseMetaCollection")[ CD ]
Line_2 $$ public void run() -->Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))[ CD ]
Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))-->Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))[ CD ]
Line_4 $$ String pathTemp = Settings.get("vo_store.databaseMetaCollection")-->Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))[ FD ]
Line_4 $$ String pathTemp = Settings.get("vo_store.databaseMetaCollection")-->Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))[ FD ]
Line_2 $$ public void run() -->Line_6 $$ String templateName = VOAccess.getElementByName(settingsDB, "TEMPLATE", sectionName)[ CD ]
Line_6 $$ String templateName = VOAccess.getElementByName(settingsDB, "TEMPLATE", sectionName)-->Line_6 $$ String templateName = VOAccess.getElementByName(settingsDB, "TEMPLATE", sectionName)[ CD ]
Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))-->Line_6 $$ String templateName = VOAccess.getElementByName(settingsDB, "TEMPLATE", sectionName)[ FD ]
Line_2 $$ public void run() -->Line_7 $$ String schemaName = VOAccess.getElementByName(settingsDB, "SCHEMA", sectionName)[ CD ]
Line_7 $$ String schemaName = VOAccess.getElementByName(settingsDB, "SCHEMA", sectionName)-->Line_7 $$ String schemaName = VOAccess.getElementByName(settingsDB, "SCHEMA", sectionName)[ CD ]
Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))-->Line_7 $$ String schemaName = VOAccess.getElementByName(settingsDB, "SCHEMA", sectionName)[ FD ]
Line_2 $$ public void run() -->Line_8 $$ byte[] buf = new byte[1024][ CD ]
Line_2 $$ public void run() -->Line_9 $$ Hashtable templateElements = null[ CD ]
Line_13 $$ org.w3c.dom.Document curTemplateXml = VOAccess.readDocument(xmlTemplateUrl)-->Line_13 $$ org.w3c.dom.Document curTemplateXml = VOAccess.readDocument(xmlTemplateUrl)[ CD ]
Line_11 $$ URL xmlTemplateUrl = new URL(httpURI + settingsDB + "/" + templateName)-->Line_13 $$ org.w3c.dom.Document curTemplateXml = VOAccess.readDocument(xmlTemplateUrl)[ FD ]
Line_15 $$ InputStream tempInput = getDocPathsAndValuesXslUrl.openStream()-->Line_15 $$ InputStream tempInput = getDocPathsAndValuesXslUrl.openStream()[ CD ]
Line_12 $$ URL getDocPathsAndValuesXslUrl = new URL(httpURI + settingsDB + "/" + "getDocPathsValuesAndDisplays.xsl")-->Line_15 $$ InputStream tempInput = getDocPathsAndValuesXslUrl.openStream()[ FD ]
Line_17 $$ Transformer trans = TransformerFactory.newInstance().newTransformer(tempXslSource)-->Line_17 $$ Transformer trans = TransformerFactory.newInstance().newTransformer(tempXslSource)[ CD ]
Line_16 $$ javax.xml.transform.sax.SAXSource tempXslSource = new javax.xml.transform.sax.SAXSource(new org.xml.sax.InputSource(tempInput))-->Line_17 $$ Transformer trans = TransformerFactory.newInstance().newTransformer(tempXslSource)[ FD ]
Line_17 $$ Transformer trans = TransformerFactory.newInstance().newTransformer(tempXslSource)-->Line_18 $$ trans.setParameter("schemaUrl", httpURI + settingsDB + "/" + schemaName)[ FD ]
Line_17 $$ Transformer trans = TransformerFactory.newInstance().newTransformer(tempXslSource)-->Line_19 $$ trans.transform(new javax.xml.transform.dom.DOMSource(curTemplateXml), templateResult)[ FD ]
Line_14 $$ DOMResult templateResult = new DOMResult()-->Line_19 $$ trans.transform(new javax.xml.transform.dom.DOMSource(curTemplateXml), templateResult)[ FD ]
Line_15 $$ InputStream tempInput = getDocPathsAndValuesXslUrl.openStream()-->Line_20 $$ tempInput.close()[ FD ]
Line_9 $$ Hashtable templateElements = null-->Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)[ CD ]
Line_14 $$ DOMResult templateResult = new DOMResult()-->Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)[ FD ]
Line_2 $$ public void run() -->Line_27 $$ while (true) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_27 $$ while (true) -->Line_28 $$ File[] fileList = sourceMetaFilesDir.listFiles(filter)[ CD ]
Line_28 $$ File[] fileList = sourceMetaFilesDir.listFiles(filter)-->Line_28 $$ File[] fileList = sourceMetaFilesDir.listFiles(filter)[ CD ]
Line_3 $$ XmlFilesFilter filter = new XmlFilesFilter()-->Line_28 $$ File[] fileList = sourceMetaFilesDir.listFiles(filter)[ FD ]
Line_27 $$ while (true) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ CD ]
Line_27 $$ while (true) -->Line_27 $$ while (true) [ CD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ CD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ CD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ CD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ FD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_30 $$ File newFile = fileList[i][ CD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_32 $$ Document metaDoc = build.build(newFile)[ CD ]
Line_30 $$ File newFile = fileList[i]-->Line_32 $$ Document metaDoc = build.build(newFile)[ FD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_33 $$ Element metaElm = metaDoc.getRootElement()[ CD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_33 $$ Element metaElm = metaDoc.getRootElement()[ FD ]
Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")-->Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")[ CD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")[ FD ]
Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")-->Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")[ CD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")[ FD ]
Line_35 $$ String objId = VOAccess.getUniqueId()-->Line_35 $$ String objId = VOAccess.getUniqueId()[ CD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_36 $$ metaElm.getChild("Content").setText("videostore?type=doc&objId=" + objId)[ FD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_37 $$ metaElm.getChild("Preview").setText("videostore?type=preview&objId=" + objId)[ FD ]
Line_38 $$ boolean found = false-->Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) [ FD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) [ CD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) [ CD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_40 $$ String sourceDataFilesDir = (String) it.next()[ CD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_40 $$ String sourceDataFilesDir = (String) it.next()[ FD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_41 $$ File dataInput = new File(sourceDataFilesDir + "/" + dataFileName)[ CD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_42 $$ if (dataInput.exists()) [ CD ]
Line_41 $$ File dataInput = new File(sourceDataFilesDir + "/" + dataFileName)-->Line_42 $$ if (dataInput.exists()) [ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_42 $$ if (dataInput.exists()) [ CD ]
Line_41 $$ File dataInput = new File(sourceDataFilesDir + "/" + dataFileName)-->Line_42 $$ if (dataInput.exists()) [ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_43 $$ found = true[ CD ]
Line_43 $$ found = true-->Line_43 $$ found = true[ FD ]
Line_38 $$ boolean found = false-->Line_43 $$ found = true[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))[ CD ]
Line_42 $$ if (dataInput.exists()) -->Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))[ CD ]
Line_42 $$ if (dataInput.exists()) -->Line_46 $$ int read = inp.read(buf, 0, buf.length)[ CD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_46 $$ int read = inp.read(buf, 0, buf.length)[ CD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_46 $$ int read = inp.read(buf, 0, buf.length)[ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_46 $$ int read = inp.read(buf, 0, buf.length)[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_47 $$ while (read > 0) [ CD ]
Line_42 $$ if (dataInput.exists()) -->Line_42 $$ if (dataInput.exists()) [ CD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_47 $$ while (read > 0) [ FD ]
Line_47 $$ while (read > 0) -->Line_48 $$ outp.write(buf, 0, read)[ CD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_48 $$ outp.write(buf, 0, read)[ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_48 $$ outp.write(buf, 0, read)[ FD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_48 $$ outp.write(buf, 0, read)[ FD ]
Line_47 $$ while (read > 0) -->Line_49 $$ read = inp.read(buf, 0, buf.length)[ CD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_49 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_49 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_49 $$ read = inp.read(buf, 0, buf.length)[ CD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_49 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_49 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_51 $$ inp.close()[ CD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_51 $$ inp.close()[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_52 $$ outp.flush()[ CD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_52 $$ outp.flush()[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_53 $$ outp.close()[ CD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_53 $$ outp.close()[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_54 $$ dataInput = new File(sourceDataFilesDir + "/" + previewFileName)[ CD ]
Line_41 $$ File dataInput = new File(sourceDataFilesDir + "/" + dataFileName)-->Line_54 $$ dataInput = new File(sourceDataFilesDir + "/" + previewFileName)[ FD ]
Line_54 $$ dataInput = new File(sourceDataFilesDir + "/" + previewFileName)-->Line_54 $$ dataInput = new File(sourceDataFilesDir + "/" + previewFileName)[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))[ CD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))[ CD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_57 $$ read = inp.read(buf, 0, buf.length)[ CD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_57 $$ read = inp.read(buf, 0, buf.length)-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_57 $$ read = inp.read(buf, 0, buf.length)-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ CD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_58 $$ while (read > 0) [ CD ]
Line_42 $$ if (dataInput.exists()) -->Line_42 $$ if (dataInput.exists()) [ CD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_58 $$ while (read > 0) [ FD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_58 $$ while (read > 0) [ FD ]
Line_57 $$ read = inp.read(buf, 0, buf.length)-->Line_58 $$ while (read > 0) [ FD ]
Line_58 $$ while (read > 0) -->Line_59 $$ outp.write(buf, 0, read)[ CD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_59 $$ outp.write(buf, 0, read)[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_59 $$ outp.write(buf, 0, read)[ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_59 $$ outp.write(buf, 0, read)[ FD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_59 $$ outp.write(buf, 0, read)[ FD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_59 $$ outp.write(buf, 0, read)[ FD ]
Line_57 $$ read = inp.read(buf, 0, buf.length)-->Line_59 $$ outp.write(buf, 0, read)[ FD ]
Line_58 $$ while (read > 0) -->Line_60 $$ read = inp.read(buf, 0, buf.length)[ CD ]
Line_60 $$ read = inp.read(buf, 0, buf.length)-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_46 $$ int read = inp.read(buf, 0, buf.length)-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_57 $$ read = inp.read(buf, 0, buf.length)-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_60 $$ read = inp.read(buf, 0, buf.length)-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ CD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_60 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_62 $$ inp.close()[ CD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_62 $$ inp.close()[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_62 $$ inp.close()[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_63 $$ outp.flush()[ CD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_63 $$ outp.flush()[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_63 $$ outp.flush()[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_64 $$ outp.close()[ CD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_64 $$ outp.close()[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_64 $$ outp.close()[ FD ]
Line_42 $$ if (dataInput.exists()) -->Line_66 $$ if (curDirWriteTo >= targetDataFilesDirs.size()) [ CD ]
Line_66 $$ if (curDirWriteTo >= targetDataFilesDirs.size()) -->Line_66 $$ if (curDirWriteTo >= targetDataFilesDirs.size()) [ CD ]
Line_43 $$ found = true-->Line_71 $$ if (!found) [ FD ]
Line_38 $$ boolean found = false-->Line_71 $$ if (!found) [ FD ]
Line_71 $$ if (!found) -->Line_71 $$ if (!found) [ CD ]
Line_43 $$ found = true-->Line_71 $$ if (!found) [ FD ]
Line_38 $$ boolean found = false-->Line_71 $$ if (!found) [ FD ]
Line_71 $$ if (!found) -->Line_72 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".not_found"))[ CD ]
Line_30 $$ File newFile = fileList[i]-->Line_72 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".not_found"))[ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_72 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".not_found"))[ FD ]
Line_71 $$ if (!found) -->Line_74 $$ String title = getValueByPath((String) templateElements.get("title"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_74 $$ String title = getValueByPath((String) templateElements.get("title"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_74 $$ String title = getValueByPath((String) templateElements.get("title"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_74 $$ String title = getValueByPath((String) templateElements.get("title"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_75 $$ String description = getValueByPath((String) templateElements.get("description"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_75 $$ String description = getValueByPath((String) templateElements.get("description"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_75 $$ String description = getValueByPath((String) templateElements.get("description"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_75 $$ String description = getValueByPath((String) templateElements.get("description"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_77 $$ if (null != templateElements.get("onlink")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_77 $$ if (null != templateElements.get("onlink")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_77 $$ if (null != templateElements.get("onlink")) [ FD ]
Line_77 $$ if (null != templateElements.get("onlink")) -->Line_78 $$ onlink = getValueByPath((String) templateElements.get("onlink"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_78 $$ onlink = getValueByPath((String) templateElements.get("onlink"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_78 $$ onlink = getValueByPath((String) templateElements.get("onlink"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_78 $$ onlink = getValueByPath((String) templateElements.get("onlink"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_81 $$ if (null != templateElements.get("ncover")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_81 $$ if (null != templateElements.get("ncover")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_81 $$ if (null != templateElements.get("ncover")) [ FD ]
Line_81 $$ if (null != templateElements.get("ncover")) -->Line_82 $$ ncover = getValueByPath((String) templateElements.get("ncover"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_82 $$ ncover = getValueByPath((String) templateElements.get("ncover"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_82 $$ ncover = getValueByPath((String) templateElements.get("ncover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_82 $$ ncover = getValueByPath((String) templateElements.get("ncover"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_85 $$ if (null != templateElements.get("wcover")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_85 $$ if (null != templateElements.get("wcover")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_85 $$ if (null != templateElements.get("wcover")) [ FD ]
Line_85 $$ if (null != templateElements.get("wcover")) -->Line_86 $$ wcover = getValueByPath((String) templateElements.get("wcover"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_86 $$ wcover = getValueByPath((String) templateElements.get("wcover"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_86 $$ wcover = getValueByPath((String) templateElements.get("wcover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_86 $$ wcover = getValueByPath((String) templateElements.get("wcover"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_89 $$ if (null != templateElements.get("ecover")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_89 $$ if (null != templateElements.get("ecover")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_89 $$ if (null != templateElements.get("ecover")) [ FD ]
Line_89 $$ if (null != templateElements.get("ecover")) -->Line_90 $$ ecover = getValueByPath((String) templateElements.get("ecover"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_90 $$ ecover = getValueByPath((String) templateElements.get("ecover"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_90 $$ ecover = getValueByPath((String) templateElements.get("ecover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_90 $$ ecover = getValueByPath((String) templateElements.get("ecover"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_93 $$ if (null != templateElements.get("scover")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_93 $$ if (null != templateElements.get("scover")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_93 $$ if (null != templateElements.get("scover")) [ FD ]
Line_93 $$ if (null != templateElements.get("scover")) -->Line_94 $$ scover = getValueByPath((String) templateElements.get("scover"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_94 $$ scover = getValueByPath((String) templateElements.get("scover"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_94 $$ scover = getValueByPath((String) templateElements.get("scover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_94 $$ scover = getValueByPath((String) templateElements.get("scover"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_97 $$ if (null != templateElements.get("datefrom")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_97 $$ if (null != templateElements.get("datefrom")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_97 $$ if (null != templateElements.get("datefrom")) [ FD ]
Line_97 $$ if (null != templateElements.get("datefrom")) -->Line_98 $$ datefrom = getValueByPath((String) templateElements.get("datefrom"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_98 $$ datefrom = getValueByPath((String) templateElements.get("datefrom"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_98 $$ datefrom = getValueByPath((String) templateElements.get("datefrom"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_98 $$ datefrom = getValueByPath((String) templateElements.get("datefrom"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_101 $$ if (null != templateElements.get("dateto")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_101 $$ if (null != templateElements.get("dateto")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_101 $$ if (null != templateElements.get("dateto")) [ FD ]
Line_101 $$ if (null != templateElements.get("dateto")) -->Line_102 $$ dateto = getValueByPath((String) templateElements.get("dateto"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_102 $$ dateto = getValueByPath((String) templateElements.get("dateto"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_102 $$ dateto = getValueByPath((String) templateElements.get("dateto"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_102 $$ dateto = getValueByPath((String) templateElements.get("dateto"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_105 $$ if (null != templateElements.get("previewimg")) [ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_105 $$ if (null != templateElements.get("previewimg")) [ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_105 $$ if (null != templateElements.get("previewimg")) [ FD ]
Line_105 $$ if (null != templateElements.get("previewimg")) -->Line_106 $$ previewimg = getValueByPath((String) templateElements.get("previewimg"), metaDoc.getRootElement())[ CD ]
Line_9 $$ Hashtable templateElements = null-->Line_106 $$ previewimg = getValueByPath((String) templateElements.get("previewimg"), metaDoc.getRootElement())[ FD ]
Line_21 $$ templateElements = VOAccess.displaysToHashtable(templateResult)-->Line_106 $$ previewimg = getValueByPath((String) templateElements.get("previewimg"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_106 $$ previewimg = getValueByPath((String) templateElements.get("previewimg"), metaDoc.getRootElement())[ FD ]
Line_71 $$ if (!found) -->Line_110 $$ datefrom = VOAccess.parseDate(datefrom, "yyyy-MM-dd'T'HH:mm:ss", VO.defaultTimeFormat.toPattern())[ CD ]
Line_71 $$ if (!found) -->Line_111 $$ dateto = VOAccess.parseDate(datefrom, "yyyy-MM-dd'T'HH:mm:ss", VO.defaultTimeFormat.toPattern())[ CD ]
Line_71 $$ if (!found) -->Line_113 $$ discussionFields.put("OBJECT_ID", objId)[ CD ]
Line_35 $$ String objId = VOAccess.getUniqueId()-->Line_113 $$ discussionFields.put("OBJECT_ID", objId)[ FD ]
Line_71 $$ if (!found) -->Line_114 $$ discussionFields.put("AUTHOR_ID", "auto")[ CD ]
Line_71 $$ if (!found) -->Line_115 $$ discussionFields.put("AUTHOR_NAME", "auto")[ CD ]
Line_71 $$ if (!found) -->Line_116 $$ discussionFields.put("OBJECT_SECTION", sectionName)[ CD ]
Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))-->Line_116 $$ discussionFields.put("OBJECT_SECTION", sectionName)[ FD ]
Line_71 $$ if (!found) -->Line_117 $$ discussionFields.put("OBJECT_PATH", pathTemp)[ CD ]
Line_4 $$ String pathTemp = Settings.get("vo_store.databaseMetaCollection")-->Line_117 $$ discussionFields.put("OBJECT_PATH", pathTemp)[ FD ]
Line_71 $$ if (!found) -->Line_118 $$ discussionFields.put("FILE_PATH", "")[ CD ]
Line_71 $$ if (!found) -->Line_119 $$ discussionFields.put("TITLE", title)[ CD ]
Line_71 $$ if (!found) -->Line_120 $$ discussionFields.put("DESCRIPTION", description)[ CD ]
Line_71 $$ if (!found) -->Line_121 $$ discussionFields.put("ONLINK", onlink)[ CD ]
Line_71 $$ if (!found) -->Line_122 $$ discussionFields.put("NCOVER", ncover)[ CD ]
Line_71 $$ if (!found) -->Line_123 $$ discussionFields.put("ECOVER", ecover)[ CD ]
Line_71 $$ if (!found) -->Line_124 $$ discussionFields.put("SCOVER", scover)[ CD ]
Line_71 $$ if (!found) -->Line_125 $$ discussionFields.put("WCOVER", wcover)[ CD ]
Line_71 $$ if (!found) -->Line_126 $$ discussionFields.put("PERIOD_START", datefrom)[ CD ]
Line_71 $$ if (!found) -->Line_127 $$ discussionFields.put("PERIOD_END", dateto)[ CD ]
Line_71 $$ if (!found) -->Line_128 $$ discussionFields.put("PREVIEW_IMG", previewimg)[ CD ]
Line_71 $$ if (!found) -->Line_129 $$ discussionFields.put("DISCUSSRESTRICTION", discRestr)[ CD ]
Line_71 $$ if (!found) -->Line_130 $$ discussionFields.put("VOTINGRESTRICTION", votingRestr)[ CD ]
Line_71 $$ if (!found) -->Line_131 $$ VOAccess.createDiscussionFile(discussionFields)[ CD ]
Line_71 $$ if (!found) -->Line_132 $$ VOAccess.updateLastItem(objId, sectionName)[ CD ]
Line_35 $$ String objId = VOAccess.getUniqueId()-->Line_132 $$ VOAccess.updateLastItem(objId, sectionName)[ FD ]
Line_5 $$ String sectionName = pathTemp.substring(1, pathTemp.indexOf("/", 2))-->Line_132 $$ VOAccess.updateLastItem(objId, sectionName)[ FD ]
Line_71 $$ if (!found) -->Line_133 $$ Collection col = CollectionsManager.getCollection(rootDB + pathTemp, true)[ CD ]
Line_71 $$ if (!found) -->Line_135 $$ document.setContent(outXml.outputString(metaElm))[ CD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_135 $$ document.setContent(outXml.outputString(metaElm))[ FD ]
Line_71 $$ if (!found) -->Line_136 $$ col.storeResource(document)[ CD ]
Line_71 $$ if (!found) -->Line_137 $$ Indexer.index(objId)[ CD ]
Line_35 $$ String objId = VOAccess.getUniqueId()-->Line_137 $$ Indexer.index(objId)[ FD ]
Line_71 $$ if (!found) -->Line_138 $$ newFile.delete()[ CD ]
Line_30 $$ File newFile = fileList[i]-->Line_138 $$ newFile.delete()[ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_143 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".bad"))[ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_143 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".bad"))[ FD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ FD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ FD ]
Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) -->Line_29 $$ for (int i = 0; i < Math.min(fileList.length, 500); i++) [ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_32 $$ Document metaDoc = build.build(newFile)[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_33 $$ Element metaElm = metaDoc.getRootElement()[ FD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")[ FD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_34 $$ String dataFileName = metaElm.getChildText("Content"), previewFileName = metaElm.getChildText("Preview")[ FD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_36 $$ metaElm.getChild("Content").setText("videostore?type=doc&objId=" + objId)[ FD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_37 $$ metaElm.getChild("Preview").setText("videostore?type=preview&objId=" + objId)[ FD ]
Line_38 $$ boolean found = false-->Line_71 $$ if (!found) [ FD ]
Line_38 $$ boolean found = false-->Line_71 $$ if (!found) [ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_72 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".not_found"))[ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_72 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".not_found"))[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_74 $$ String title = getValueByPath((String) templateElements.get("title"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_75 $$ String description = getValueByPath((String) templateElements.get("description"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_78 $$ onlink = getValueByPath((String) templateElements.get("onlink"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_82 $$ ncover = getValueByPath((String) templateElements.get("ncover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_86 $$ wcover = getValueByPath((String) templateElements.get("wcover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_90 $$ ecover = getValueByPath((String) templateElements.get("ecover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_94 $$ scover = getValueByPath((String) templateElements.get("scover"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_98 $$ datefrom = getValueByPath((String) templateElements.get("datefrom"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_102 $$ dateto = getValueByPath((String) templateElements.get("dateto"), metaDoc.getRootElement())[ FD ]
Line_32 $$ Document metaDoc = build.build(newFile)-->Line_106 $$ previewimg = getValueByPath((String) templateElements.get("previewimg"), metaDoc.getRootElement())[ FD ]
Line_35 $$ String objId = VOAccess.getUniqueId()-->Line_113 $$ discussionFields.put("OBJECT_ID", objId)[ FD ]
Line_35 $$ String objId = VOAccess.getUniqueId()-->Line_132 $$ VOAccess.updateLastItem(objId, sectionName)[ FD ]
Line_33 $$ Element metaElm = metaDoc.getRootElement()-->Line_135 $$ document.setContent(outXml.outputString(metaElm))[ FD ]
Line_35 $$ String objId = VOAccess.getUniqueId()-->Line_137 $$ Indexer.index(objId)[ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_138 $$ newFile.delete()[ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_143 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".bad"))[ FD ]
Line_30 $$ File newFile = fileList[i]-->Line_143 $$ newFile.renameTo(new File(newFile.getAbsolutePath() + ".bad"))[ FD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) [ FD ]
Line_43 $$ found = true-->Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) [ FD ]
Line_39 $$ for (Iterator it = sourceDataFilesDirs.iterator(); it.hasNext() && !found; ) -->Line_40 $$ String sourceDataFilesDir = (String) it.next()[ FD ]
Line_41 $$ File dataInput = new File(sourceDataFilesDir + "/" + dataFileName)-->Line_42 $$ if (dataInput.exists()) [ FD ]
Line_54 $$ dataInput = new File(sourceDataFilesDir + "/" + previewFileName)-->Line_42 $$ if (dataInput.exists()) [ FD ]
Line_41 $$ File dataInput = new File(sourceDataFilesDir + "/" + dataFileName)-->Line_42 $$ if (dataInput.exists()) [ FD ]
Line_54 $$ dataInput = new File(sourceDataFilesDir + "/" + previewFileName)-->Line_42 $$ if (dataInput.exists()) [ FD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_46 $$ int read = inp.read(buf, 0, buf.length)[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_46 $$ int read = inp.read(buf, 0, buf.length)[ FD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_51 $$ inp.close()[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_51 $$ inp.close()[ FD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_52 $$ outp.flush()[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_52 $$ outp.flush()[ FD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_53 $$ outp.close()[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_53 $$ outp.close()[ FD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_57 $$ read = inp.read(buf, 0, buf.length)[ FD ]
Line_44 $$ BufferedInputStream inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_62 $$ inp.close()[ FD ]
Line_55 $$ inp = new BufferedInputStream(new FileInputStream(dataInput))-->Line_62 $$ inp.close()[ FD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_63 $$ outp.flush()[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_63 $$ outp.flush()[ FD ]
Line_45 $$ FileOutputStream outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".dat"))-->Line_64 $$ outp.close()[ FD ]
Line_56 $$ outp = new FileOutputStream(new File(targetDataFilesDirs.get(curDirWriteTo) + "/" + objId + ".jpg"))-->Line_64 $$ outp.close()[ FD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_47 $$ while (read > 0) [ FD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_47 $$ while (read > 0) [ FD ]
Line_49 $$ read = inp.read(buf, 0, buf.length)-->Line_48 $$ outp.write(buf, 0, read)[ FD ]
Line_60 $$ read = inp.read(buf, 0, buf.length)-->Line_58 $$ while (read > 0) [ FD ]
Line_60 $$ read = inp.read(buf, 0, buf.length)-->Line_58 $$ while (read > 0) [ FD ]
Line_60 $$ read = inp.read(buf, 0, buf.length)-->Line_59 $$ outp.write(buf, 0, read)[ FD ]
