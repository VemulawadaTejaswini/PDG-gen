Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException [ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_3 $$ if (params == null)[ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_3 $$ if (params == null)[ FD ]
Line_3 $$ if (params == null)-->Line_3 $$ params = new DjatokaEncodeParam()[ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_3 $$ params = new DjatokaEncodeParam()[ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_3 $$ params = new DjatokaEncodeParam()[ FD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_4 $$ if (params.getLevels() == 0)[ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_4 $$ if (params.getLevels() == 0)[ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_4 $$ if (params.getLevels() == 0)[ FD ]
Line_4 $$ if (params.getLevels() == 0)-->Line_4 $$ params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()))[ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_4 $$ params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()))[ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_4 $$ params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()))[ FD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_4 $$ params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()))[ FD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_4 $$ params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()))[ FD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_5 $$ File in = null[ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_6 $$ File out = null[ CD ]
Line_5 $$ File in = null-->Line_8 $$ in = IOUtils.createTempTiff(bi)[ FD ]
Line_8 $$ in = IOUtils.createTempTiff(bi)-->Line_8 $$ in = IOUtils.createTempTiff(bi)[ FD ]
Line_8 $$ in = IOUtils.createTempTiff(bi)-->Line_8 $$ in = IOUtils.createTempTiff(bi)[ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_8 $$ in = IOUtils.createTempTiff(bi)[ FD ]
Line_6 $$ File out = null-->Line_9 $$ out = File.createTempFile("tmp", ".jp2")[ FD ]
Line_9 $$ out = File.createTempFile("tmp", ".jp2")-->Line_9 $$ out = File.createTempFile("tmp", ".jp2")[ FD ]
Line_9 $$ out = File.createTempFile("tmp", ".jp2")-->Line_9 $$ out = File.createTempFile("tmp", ".jp2")[ CD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_10 $$ compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params)[ FD ]
Line_3 $$ params = new DjatokaEncodeParam()-->Line_10 $$ compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params)[ FD ]
Line_5 $$ File in = null-->Line_10 $$ compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params)[ FD ]
Line_8 $$ in = IOUtils.createTempTiff(bi)-->Line_10 $$ compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params)[ FD ]
Line_6 $$ File out = null-->Line_10 $$ compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params)[ FD ]
Line_9 $$ out = File.createTempFile("tmp", ".jp2")-->Line_10 $$ compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params)[ FD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_11 $$ IOUtils.copyStream(new FileInputStream(out), output)[ FD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_19 $$ if (in != null)[ CD ]
Line_5 $$ File in = null-->Line_19 $$ if (in != null)[ FD ]
Line_8 $$ in = IOUtils.createTempTiff(bi)-->Line_19 $$ if (in != null)[ FD ]
Line_19 $$ if (in != null)-->Line_19 $$ in.delete()[ CD ]
Line_5 $$ File in = null-->Line_19 $$ in.delete()[ FD ]
Line_8 $$ in = IOUtils.createTempTiff(bi)-->Line_19 $$ in.delete()[ FD ]
Line_2 $$ public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException -->Line_20 $$ if (out != null)[ CD ]
Line_6 $$ File out = null-->Line_20 $$ if (out != null)[ FD ]
Line_9 $$ out = File.createTempFile("tmp", ".jp2")-->Line_20 $$ if (out != null)[ FD ]
Line_20 $$ if (out != null)-->Line_20 $$ out.delete()[ CD ]
Line_6 $$ File out = null-->Line_20 $$ out.delete()[ FD ]
Line_9 $$ out = File.createTempFile("tmp", ".jp2")-->Line_20 $$ out.delete()[ FD ]
