Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception [ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_3 $$ String fullUrl = requestUrlStub + domainName[ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_4 $$ URL url = new URL(fullUrl)[ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_5 $$ HttpURLConnection connection = null[ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_6 $$ connection = null[ CD ]
Line_5 $$ HttpURLConnection connection = null-->Line_6 $$ connection = null[ FD ]
Line_6 $$ connection = null-->Line_6 $$ connection = null[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_7 $$ connection = (HttpURLConnection) url.openConnection()[ CD ]
Line_5 $$ HttpURLConnection connection = null-->Line_7 $$ connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_6 $$ connection = null-->Line_7 $$ connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_7 $$ connection = (HttpURLConnection) url.openConnection()-->Line_7 $$ connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_4 $$ URL url = new URL(fullUrl)-->Line_7 $$ connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_8 $$ connection.setRequestMethod("GET")[ CD ]
Line_5 $$ HttpURLConnection connection = null-->Line_8 $$ connection.setRequestMethod("GET")[ FD ]
Line_6 $$ connection = null-->Line_8 $$ connection.setRequestMethod("GET")[ FD ]
Line_7 $$ connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ connection.setRequestMethod("GET")[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_9 $$ connection.setDoOutput(true)[ CD ]
Line_5 $$ HttpURLConnection connection = null-->Line_9 $$ connection.setDoOutput(true)[ FD ]
Line_6 $$ connection = null-->Line_9 $$ connection.setDoOutput(true)[ FD ]
Line_7 $$ connection = (HttpURLConnection) url.openConnection()-->Line_9 $$ connection.setDoOutput(true)[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_10 $$ connection.setReadTimeout(10000)[ CD ]
Line_5 $$ HttpURLConnection connection = null-->Line_10 $$ connection.setReadTimeout(10000)[ FD ]
Line_6 $$ connection = null-->Line_10 $$ connection.setReadTimeout(10000)[ FD ]
Line_7 $$ connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ connection.setReadTimeout(10000)[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_11 $$ connection.connect()[ CD ]
Line_5 $$ HttpURLConnection connection = null-->Line_11 $$ connection.connect()[ FD ]
Line_6 $$ connection = null-->Line_11 $$ connection.connect()[ FD ]
Line_7 $$ connection = (HttpURLConnection) url.openConnection()-->Line_11 $$ connection.connect()[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_12 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ CD ]
Line_5 $$ HttpURLConnection connection = null-->Line_12 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_6 $$ connection = null-->Line_12 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_7 $$ connection = (HttpURLConnection) url.openConnection()-->Line_12 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_13 $$ String inputLine[ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_14 $$ HostRecord result = new HostRecord(domainName)[ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_15 $$ byte parts[] = new byte[4][ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_16 $$ while ((inputLine = in.readLine()) != null) [ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception [ CD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_16 $$ while ((inputLine = in.readLine()) != null) [ FD ]
Line_13 $$ String inputLine-->Line_16 $$ while ((inputLine = in.readLine()) != null) [ FD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_16 $$ while ((inputLine = in.readLine()) != null) [ CD ]
Line_12 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_16 $$ while ((inputLine = in.readLine()) != null) [ FD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_17 $$ String pat1 = "<span class='orange'>"[ CD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_18 $$ String pat2 = "</span>"[ CD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_19 $$ int index1 = inputLine.indexOf(pat1)[ CD ]
Line_19 $$ int index1 = inputLine.indexOf(pat1)-->Line_19 $$ int index1 = inputLine.indexOf(pat1)[ CD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_19 $$ int index1 = inputLine.indexOf(pat1)[ FD ]
Line_13 $$ String inputLine-->Line_19 $$ int index1 = inputLine.indexOf(pat1)[ FD ]
Line_17 $$ String pat1 = "<span class='orange'>"-->Line_19 $$ int index1 = inputLine.indexOf(pat1)[ FD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_20 $$ int index2 = inputLine.indexOf(pat2)[ CD ]
Line_20 $$ int index2 = inputLine.indexOf(pat2)-->Line_20 $$ int index2 = inputLine.indexOf(pat2)[ CD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_20 $$ int index2 = inputLine.indexOf(pat2)[ FD ]
Line_13 $$ String inputLine-->Line_20 $$ int index2 = inputLine.indexOf(pat2)[ FD ]
Line_18 $$ String pat2 = "</span>"-->Line_20 $$ int index2 = inputLine.indexOf(pat2)[ FD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_21 $$ if ((index1 > 0) && (index2 > 0)) [ CD ]
Line_21 $$ if ((index1 > 0) && (index2 > 0)) -->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ CD ]
Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)-->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ CD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ FD ]
Line_13 $$ String inputLine-->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ FD ]
Line_20 $$ int index2 = inputLine.indexOf(pat2)-->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ FD ]
Line_17 $$ String pat1 = "<span class='orange'>"-->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ FD ]
Line_21 $$ if ((index1 > 0) && (index2 > 0)) -->Line_23 $$ String[] s = ipStr.split("\\.")[ CD ]
Line_23 $$ String[] s = ipStr.split("\\.")-->Line_23 $$ String[] s = ipStr.split("\\.")[ CD ]
Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)-->Line_23 $$ String[] s = ipStr.split("\\.")[ FD ]
Line_21 $$ if ((index1 > 0) && (index2 > 0)) -->Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])[ CD ]
Line_21 $$ if ((index1 > 0) && (index2 > 0)) -->Line_21 $$ if ((index1 > 0) && (index2 > 0)) [ CD ]
Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])-->Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])[ CD ]
Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])-->Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])[ CD ]
Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])-->Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])[ FD ]
Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])-->Line_24 $$ parts[i] = (byte) Integer.parseInt(s[i])[ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_27 $$ IPAddress ipAddress = new IPAddress(parts)[ CD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_28 $$ result.addIpAddress(ipAddress)[ CD ]
Line_14 $$ HostRecord result = new HostRecord(domainName)-->Line_28 $$ result.addIpAddress(ipAddress)[ FD ]
Line_27 $$ IPAddress ipAddress = new IPAddress(parts)-->Line_28 $$ result.addIpAddress(ipAddress)[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_29 $$ in.close()[ CD ]
Line_12 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_29 $$ in.close()[ FD ]
Line_2 $$ public HostRecord addressForHost(String domainName) throws Exception -->Line_30 $$ return result[ CD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_19 $$ int index1 = inputLine.indexOf(pat1)[ FD ]
Line_17 $$ String pat1 = "<span class='orange'>"-->Line_19 $$ int index1 = inputLine.indexOf(pat1)[ FD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_20 $$ int index2 = inputLine.indexOf(pat2)[ FD ]
Line_18 $$ String pat2 = "</span>"-->Line_20 $$ int index2 = inputLine.indexOf(pat2)[ FD ]
Line_16 $$ while ((inputLine = in.readLine()) != null) -->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ FD ]
Line_20 $$ int index2 = inputLine.indexOf(pat2)-->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ FD ]
Line_17 $$ String pat1 = "<span class='orange'>"-->Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)[ FD ]
Line_22 $$ String ipStr = inputLine.substring(index1 + pat1.length(), index2)-->Line_23 $$ String[] s = ipStr.split("\\.")[ FD ]
Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])-->Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])[ FD ]
Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])-->Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])[ FD ]
Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])-->Line_24 $$ for (int i = 0; i < s.length; i++) parts[i] = (byte) Integer.parseInt(s[i])[ FD ]
