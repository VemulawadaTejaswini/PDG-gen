Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException [ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_3 $$ System.out.print("Processing with " + tpl)[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_4 $$ String destinationPath[ CD ]
Line_7 $$ if (tpl.path == null) -->Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET[ CD ]
Line_4 $$ String destinationPath-->Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET[ FD ]
Line_7 $$ if (tpl.path == null) -->Line_10 $$ destinationPath = where.buildDir[ CD ]
Line_4 $$ String destinationPath-->Line_10 $$ destinationPath = where.buildDir[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_10 $$ destinationPath = where.buildDir[ FD ]
Line_10 $$ destinationPath = where.buildDir-->Line_10 $$ destinationPath = where.buildDir[ FD ]
Line_14 $$ if (tpl.path == null) -->Line_15 $$ destinationPath = where.sourceDir[ CD ]
Line_4 $$ String destinationPath-->Line_15 $$ destinationPath = where.sourceDir[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_15 $$ destinationPath = where.sourceDir[ FD ]
Line_10 $$ destinationPath = where.buildDir-->Line_15 $$ destinationPath = where.sourceDir[ FD ]
Line_15 $$ destinationPath = where.sourceDir-->Line_15 $$ destinationPath = where.sourceDir[ FD ]
Line_14 $$ if (tpl.path == null) -->Line_17 $$ destinationPath = "src"[ CD ]
Line_4 $$ String destinationPath-->Line_17 $$ destinationPath = "src"[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_17 $$ destinationPath = "src"[ FD ]
Line_10 $$ destinationPath = where.buildDir-->Line_17 $$ destinationPath = "src"[ FD ]
Line_15 $$ destinationPath = where.sourceDir-->Line_17 $$ destinationPath = "src"[ FD ]
Line_17 $$ destinationPath = "src"-->Line_17 $$ destinationPath = "src"[ FD ]
Line_4 $$ String destinationPath-->Line_21 $$ destinationPath = where.redoraDir[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_21 $$ destinationPath = where.redoraDir[ FD ]
Line_10 $$ destinationPath = where.buildDir-->Line_21 $$ destinationPath = where.redoraDir[ FD ]
Line_15 $$ destinationPath = where.sourceDir-->Line_21 $$ destinationPath = where.redoraDir[ FD ]
Line_17 $$ destinationPath = "src"-->Line_21 $$ destinationPath = where.redoraDir[ FD ]
Line_21 $$ destinationPath = where.redoraDir-->Line_21 $$ destinationPath = where.redoraDir[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_26 $$ if (tpl.path == null) [ CD ]
Line_26 $$ if (tpl.path == null) -->Line_27 $$ if (tpl.destination == Destination.redora)[ CD ]
Line_27 $$ if (tpl.destination == Destination.redora)-->Line_27 $$ destinationPath += separator + artifact[ CD ]
Line_4 $$ String destinationPath-->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_10 $$ destinationPath = where.buildDir-->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_15 $$ destinationPath = where.sourceDir-->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_17 $$ destinationPath = "src"-->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_21 $$ destinationPath = where.redoraDir-->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_27 $$ destinationPath += separator + artifact-->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_27 $$ destinationPath += separator + artifact[ FD ]
Line_27 $$ if (tpl.destination == Destination.redora)-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ CD ]
Line_4 $$ String destinationPath-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_10 $$ destinationPath = where.buildDir-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_15 $$ destinationPath = where.sourceDir-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_17 $$ destinationPath = "src"-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_21 $$ destinationPath = where.redoraDir-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_27 $$ destinationPath += separator + artifact-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)-->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)[ FD ]
Line_26 $$ if (tpl.path == null) -->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ CD ]
Line_4 $$ String destinationPath-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_8 $$ destinationPath = where.buildDir + separatorChar + "generated-sources" + separatorChar + GENERATION_TARGET-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_10 $$ destinationPath = where.buildDir-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_15 $$ destinationPath = where.sourceDir-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_17 $$ destinationPath = "src"-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_21 $$ destinationPath = where.redoraDir-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_27 $$ destinationPath += separator + artifact-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_27 $$ destinationPath += separator + packageName.replace('.', separatorChar)-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ FD ]
Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)-->Line_29 $$ destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\', separatorChar)[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_31 $$ System.out.println(" to " + destinationPath + "..." + outFileName)[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_32 $$ if (tpl.destination == Destination.source) [ CD ]
Line_32 $$ if (tpl.destination == Destination.source) -->Line_33 $$ if (new File(destinationPath, outFileName).exists()) [ CD ]
Line_33 $$ if (new File(destinationPath, outFileName).exists()) -->Line_33 $$ if (new File(destinationPath, outFileName).exists()) [ CD ]
Line_33 $$ if (new File(destinationPath, outFileName).exists()) -->Line_34 $$ System.out.println("Stub " + outFileName + " already exists.")[ CD ]
Line_33 $$ if (new File(destinationPath, outFileName).exists()) -->Line_35 $$ return[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_38 $$ new File(destinationPath).mkdirs()[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_39 $$ InputStream in = null[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_40 $$ Writer out[ CD ]
Line_40 $$ Writer out-->Line_42 $$ out = new FileWriter(new File(destinationPath, outFileName))[ FD ]
Line_42 $$ out = new FileWriter(new File(destinationPath, outFileName))-->Line_42 $$ out = new FileWriter(new File(destinationPath, outFileName))[ FD ]
Line_48 $$ Map<String, NodeModel> root = new HashMap<String, NodeModel>()-->Line_49 $$ root.put("doc", NodeModel.wrap(model))[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_49 $$ root.put("doc", NodeModel.wrap(model))[ FD ]
Line_51 $$ freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName())-->Line_51 $$ freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName())[ CD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_51 $$ freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName())[ FD ]
Line_51 $$ freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName())-->Line_52 $$ template.process(root, out)[ FD ]
Line_48 $$ Map<String, NodeModel> root = new HashMap<String, NodeModel>()-->Line_52 $$ template.process(root, out)[ FD ]
Line_40 $$ Writer out-->Line_52 $$ template.process(root, out)[ FD ]
Line_42 $$ out = new FileWriter(new File(destinationPath, outFileName))-->Line_52 $$ template.process(root, out)[ FD ]
Line_39 $$ InputStream in = null-->Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())[ FD ]
Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())[ FD ]
Line_39 $$ InputStream in = null-->Line_66 $$ xsltTransform(model.getFirstChild(), in, out, xsltParam)[ FD ]
Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_66 $$ xsltTransform(model.getFirstChild(), in, out, xsltParam)[ FD ]
Line_40 $$ Writer out-->Line_66 $$ xsltTransform(model.getFirstChild(), in, out, xsltParam)[ FD ]
Line_42 $$ out = new FileWriter(new File(destinationPath, outFileName))-->Line_66 $$ xsltTransform(model.getFirstChild(), in, out, xsltParam)[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_66 $$ xsltTransform(model.getFirstChild(), in, out, xsltParam)[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_66 $$ xsltTransform(model.getFirstChild(), in, out, xsltParam)[ FD ]
Line_39 $$ InputStream in = null-->Line_72 $$ IOUtils.closeQuietly(in)[ FD ]
Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_72 $$ IOUtils.closeQuietly(in)[ FD ]
Line_39 $$ InputStream in = null-->Line_77 $$ in = new FileInputStream(tpl.getAbsolutePath())[ FD ]
Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_77 $$ in = new FileInputStream(tpl.getAbsolutePath())[ FD ]
Line_77 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_77 $$ in = new FileInputStream(tpl.getAbsolutePath())[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_77 $$ in = new FileInputStream(tpl.getAbsolutePath())[ FD ]
Line_39 $$ InputStream in = null-->Line_78 $$ IOUtils.copy(in, out)[ FD ]
Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_78 $$ IOUtils.copy(in, out)[ FD ]
Line_77 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_78 $$ IOUtils.copy(in, out)[ FD ]
Line_40 $$ Writer out-->Line_78 $$ IOUtils.copy(in, out)[ FD ]
Line_42 $$ out = new FileWriter(new File(destinationPath, outFileName))-->Line_78 $$ IOUtils.copy(in, out)[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_80 $$ throw new ModelGenerationException("File copy failed " + tpl.getTemplateFileName(), e)[ FD ]
Line_39 $$ InputStream in = null-->Line_82 $$ IOUtils.closeQuietly(in)[ FD ]
Line_65 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_82 $$ IOUtils.closeQuietly(in)[ FD ]
Line_77 $$ in = new FileInputStream(tpl.getAbsolutePath())-->Line_82 $$ IOUtils.closeQuietly(in)[ FD ]
Line_2 $$ public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException -->Line_85 $$ IOUtils.closeQuietly(out)[ CD ]
Line_40 $$ Writer out-->Line_85 $$ IOUtils.closeQuietly(out)[ FD ]
Line_42 $$ out = new FileWriter(new File(destinationPath, outFileName))-->Line_85 $$ IOUtils.closeQuietly(out)[ FD ]
