Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean addTextGroup(String key, URL url) [ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_3 $$ if (_textGroups.contains(key))[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_3 $$ if (_textGroups.contains(key))[ FD ]
Line_3 $$ if (_textGroups.contains(key))-->Line_3 $$ if (_textGroups.contains(key))[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_3 $$ if (_textGroups.contains(key))[ FD ]
Line_3 $$ if (_textGroups.contains(key))-->Line_3 $$ return false[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_4 $$ String s[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_5 $$ Hashtable tg = new Hashtable()[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_6 $$ String sGroupKey = "default"[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_7 $$ String sGroup[][ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_8 $$ Vector vGroup = new Vector()[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_9 $$ int cntr[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_11 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_12 $$ while ((s = in.readLine()) != null) [ FD ]
Line_4 $$ String s-->Line_12 $$ while ((s = in.readLine()) != null) [ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_12 $$ while ((s = in.readLine()) != null) [ CD ]
Line_11 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_12 $$ while ((s = in.readLine()) != null) [ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_13 $$ if (s.startsWith("[")) [ CD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_13 $$ if (s.startsWith("[")) [ FD ]
Line_4 $$ String s-->Line_13 $$ if (s.startsWith("[")) [ FD ]
Line_13 $$ if (s.startsWith("[")) -->Line_13 $$ if (s.startsWith("[")) [ CD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_13 $$ if (s.startsWith("[")) [ FD ]
Line_4 $$ String s-->Line_13 $$ if (s.startsWith("[")) [ FD ]
Line_13 $$ if (s.startsWith("[")) -->Line_14 $$ if (vGroup.size() > 0) [ CD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_14 $$ if (vGroup.size() > 0) [ FD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_15 $$ sGroup = new String[vGroup.size()][ FD ]
Line_14 $$ if (vGroup.size() > 0) -->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_14 $$ if (vGroup.size() > 0) -->Line_14 $$ if (vGroup.size() > 0) [ CD ]
Line_9 $$ int cntr-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_9 $$ int cntr-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_9 $$ int cntr-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_16 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_9 $$ int cntr-->Line_16 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_14 $$ if (vGroup.size() > 0) -->Line_17 $$ tg.put(sGroupKey, sGroup)[ CD ]
Line_5 $$ Hashtable tg = new Hashtable()-->Line_17 $$ tg.put(sGroupKey, sGroup)[ FD ]
Line_6 $$ String sGroupKey = "default"-->Line_17 $$ tg.put(sGroupKey, sGroup)[ FD ]
Line_14 $$ if (vGroup.size() > 0) -->Line_18 $$ vGroup.removeAllElements()[ CD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_18 $$ vGroup.removeAllElements()[ FD ]
Line_13 $$ if (s.startsWith("[")) -->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ CD ]
Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))-->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_6 $$ String sGroupKey = "default"-->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))-->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ CD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_4 $$ String s-->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_4 $$ String s-->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_13 $$ if (s.startsWith("[")) -->Line_22 $$ vGroup.addElement(s)[ CD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_22 $$ vGroup.addElement(s)[ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_22 $$ vGroup.addElement(s)[ FD ]
Line_4 $$ String s-->Line_22 $$ vGroup.addElement(s)[ FD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_25 $$ if (vGroup.size() > 0) [ FD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_26 $$ sGroup = new String[vGroup.size()][ FD ]
Line_25 $$ if (vGroup.size() > 0) -->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_25 $$ if (vGroup.size() > 0) -->Line_25 $$ if (vGroup.size() > 0) [ CD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_9 $$ int cntr-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_9 $$ int cntr-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_9 $$ int cntr-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ CD ]
Line_8 $$ Vector vGroup = new Vector()-->Line_27 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_9 $$ int cntr-->Line_27 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_25 $$ if (vGroup.size() > 0) -->Line_28 $$ tg.put(sGroupKey, sGroup)[ CD ]
Line_5 $$ Hashtable tg = new Hashtable()-->Line_28 $$ tg.put(sGroupKey, sGroup)[ FD ]
Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))-->Line_28 $$ tg.put(sGroupKey, sGroup)[ FD ]
Line_6 $$ String sGroupKey = "default"-->Line_28 $$ tg.put(sGroupKey, sGroup)[ FD ]
Line_11 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_30 $$ in.close()[ FD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_36 $$ _textGroups.put(key, tg)[ CD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_36 $$ _textGroups.put(key, tg)[ FD ]
Line_5 $$ Hashtable tg = new Hashtable()-->Line_36 $$ _textGroups.put(key, tg)[ FD ]
Line_2 $$ public boolean addTextGroup(String key, URL url) -->Line_37 $$ return true[ CD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_13 $$ if (s.startsWith("[")) [ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_13 $$ if (s.startsWith("[")) [ FD ]
Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))-->Line_17 $$ tg.put(sGroupKey, sGroup)[ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_20 $$ sGroupKey = s.substring(1, s.indexOf(']'))[ FD ]
Line_12 $$ while ((s = in.readLine()) != null) -->Line_22 $$ vGroup.addElement(s)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_16 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_16 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
Line_27 $$ for (cntr = 0; cntr < vGroup.size(); ++cntr) sGroup[cntr] = (String) vGroup.elementAt(cntr)-->Line_27 $$ sGroup[cntr] = (String) vGroup.elementAt(cntr)[ FD ]
