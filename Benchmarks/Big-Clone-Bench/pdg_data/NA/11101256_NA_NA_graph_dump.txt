Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException [ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())[ CD ]
Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())-->Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ CD ]
Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))-->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ CD ]
Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())-->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ FD ]
Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())-->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ FD ]
Line_3 $$ String subline = line.substring(line.indexOf(inTo) + inTo.length())-->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_5 $$ String inURL = "http://goal.2010worldcup.163.com/data/match/general/" + tempStr.substring(tempStr.indexOf("/") + 1) + ".xml"[ CD ]
Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))-->Line_5 $$ String inURL = "http://goal.2010worldcup.163.com/data/match/general/" + tempStr.substring(tempStr.indexOf("/") + 1) + ".xml"[ FD ]
Line_4 $$ String tempStr = subline.substring(subline.indexOf(inFrom) + inFrom.length(), subline.indexOf(inTo))-->Line_5 $$ String inURL = "http://goal.2010worldcup.163.com/data/match/general/" + tempStr.substring(tempStr.indexOf("/") + 1) + ".xml"[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_6 $$ URL url = new URL(inURL)[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_7 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "utf-8"))[ CD ]
Line_6 $$ URL url = new URL(inURL)-->Line_7 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "utf-8"))[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_8 $$ String inLine = null[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_9 $$ String scoreFrom = "score=\""[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_10 $$ String homeTo = "\" side=\"Home"[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_11 $$ String awayTo = "\" side=\"Away"[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_12 $$ String goalInclud = "Stat"[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_13 $$ String playerFrom = "playerId=\""[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_14 $$ String playerTo = "\" position="[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_15 $$ String timeFrom = "time=\""[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_16 $$ String timeTo = "\" period"[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_17 $$ String teamFinish = "</Team>"[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_18 $$ boolean homeStart = false[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_19 $$ boolean awayStart = false[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_20 $$ while ((inLine = reader.readLine()) != null) [ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException [ CD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_20 $$ while ((inLine = reader.readLine()) != null) [ FD ]
Line_8 $$ String inLine = null-->Line_20 $$ while ((inLine = reader.readLine()) != null) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_20 $$ while ((inLine = reader.readLine()) != null) [ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "utf-8"))-->Line_20 $$ while ((inLine = reader.readLine()) != null) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_21 $$ if (inLine.indexOf(teamFinish) != -1) [ CD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_21 $$ if (inLine.indexOf(teamFinish) != -1) [ FD ]
Line_8 $$ String inLine = null-->Line_21 $$ if (inLine.indexOf(teamFinish) != -1) [ FD ]
Line_17 $$ String teamFinish = "</Team>"-->Line_21 $$ if (inLine.indexOf(teamFinish) != -1) [ FD ]
Line_21 $$ if (inLine.indexOf(teamFinish) != -1) -->Line_22 $$ homeStart = false[ CD ]
Line_22 $$ homeStart = false-->Line_22 $$ homeStart = false[ FD ]
Line_18 $$ boolean homeStart = false-->Line_22 $$ homeStart = false[ FD ]
Line_21 $$ if (inLine.indexOf(teamFinish) != -1) -->Line_23 $$ awayStart = false[ CD ]
Line_23 $$ awayStart = false-->Line_23 $$ awayStart = false[ FD ]
Line_19 $$ boolean awayStart = false-->Line_23 $$ awayStart = false[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_25 $$ if (inLine.indexOf(homeTo) != -1) [ CD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_25 $$ if (inLine.indexOf(homeTo) != -1) [ FD ]
Line_8 $$ String inLine = null-->Line_25 $$ if (inLine.indexOf(homeTo) != -1) [ FD ]
Line_10 $$ String homeTo = "\" side=\"Home"-->Line_25 $$ if (inLine.indexOf(homeTo) != -1) [ FD ]
Line_25 $$ if (inLine.indexOf(homeTo) != -1) -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_9 $$ String scoreFrom = "score=\""-->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_9 $$ String scoreFrom = "score=\""-->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_10 $$ String homeTo = "\" side=\"Home"-->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_25 $$ if (inLine.indexOf(homeTo) != -1) -->Line_27 $$ homeStart = true[ CD ]
Line_22 $$ homeStart = false-->Line_27 $$ homeStart = true[ FD ]
Line_27 $$ homeStart = true-->Line_27 $$ homeStart = true[ FD ]
Line_18 $$ boolean homeStart = false-->Line_27 $$ homeStart = true[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ CD ]
Line_22 $$ homeStart = false-->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_27 $$ homeStart = true-->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_18 $$ boolean homeStart = false-->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_8 $$ String inLine = null-->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_12 $$ String goalInclud = "Stat"-->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) -->Line_30 $$ MatchEvent me = new MatchEvent()[ CD ]
Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) -->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ CD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_8 $$ String inLine = null-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_8 $$ String inLine = null-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_13 $$ String playerFrom = "playerId=\""-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_13 $$ String playerFrom = "playerId=\""-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_8 $$ String inLine = null-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_14 $$ String playerTo = "\" position="-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) -->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ CD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_15 $$ String timeFrom = "time=\""-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_15 $$ String timeFrom = "time=\""-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_16 $$ String timeTo = "\" period"-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) -->Line_33 $$ result.get(key).getHomeEvents().add(me)[ CD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_33 $$ result.get(key).getHomeEvents().add(me)[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_33 $$ result.get(key).getHomeEvents().add(me)[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_35 $$ if (inLine.indexOf(awayTo) != -1) [ CD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_35 $$ if (inLine.indexOf(awayTo) != -1) [ FD ]
Line_8 $$ String inLine = null-->Line_35 $$ if (inLine.indexOf(awayTo) != -1) [ FD ]
Line_11 $$ String awayTo = "\" side=\"Away"-->Line_35 $$ if (inLine.indexOf(awayTo) != -1) [ FD ]
Line_35 $$ if (inLine.indexOf(awayTo) != -1) -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ CD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_9 $$ String scoreFrom = "score=\""-->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_9 $$ String scoreFrom = "score=\""-->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_11 $$ String awayTo = "\" side=\"Away"-->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_35 $$ if (inLine.indexOf(awayTo) != -1) -->Line_37 $$ awayStart = true[ CD ]
Line_23 $$ awayStart = false-->Line_37 $$ awayStart = true[ FD ]
Line_37 $$ awayStart = true-->Line_37 $$ awayStart = true[ FD ]
Line_19 $$ boolean awayStart = false-->Line_37 $$ awayStart = true[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ CD ]
Line_23 $$ awayStart = false-->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_37 $$ awayStart = true-->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_19 $$ boolean awayStart = false-->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_8 $$ String inLine = null-->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_12 $$ String goalInclud = "Stat"-->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) -->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ CD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_8 $$ String inLine = null-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_8 $$ String inLine = null-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_13 $$ String playerFrom = "playerId=\""-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_13 $$ String playerFrom = "playerId=\""-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_8 $$ String inLine = null-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_14 $$ String playerTo = "\" position="-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) -->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ CD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_15 $$ String timeFrom = "time=\""-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_15 $$ String timeFrom = "time=\""-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_8 $$ String inLine = null-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_16 $$ String timeTo = "\" period"-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) -->Line_43 $$ result.get(key).getAwayEvents().add(me)[ CD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_43 $$ result.get(key).getAwayEvents().add(me)[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_43 $$ result.get(key).getAwayEvents().add(me)[ FD ]
Line_2 $$ private void innerJob(String inFrom, String inTo, String line, Map<String, Match> result) throws UnsupportedEncodingException, IOException -->Line_46 $$ reader.close()[ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "utf-8"))-->Line_46 $$ reader.close()[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_21 $$ if (inLine.indexOf(teamFinish) != -1) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_25 $$ if (inLine.indexOf(homeTo) != -1) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_26 $$ result.get(key).setHomeScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(homeTo)))[ FD ]
Line_22 $$ homeStart = false-->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_27 $$ homeStart = true-->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_29 $$ if (homeStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_31 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_32 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_33 $$ result.get(key).getHomeEvents().add(me)[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_35 $$ if (inLine.indexOf(awayTo) != -1) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_36 $$ result.get(key).setAwayScore(inLine.substring(inLine.indexOf(scoreFrom) + scoreFrom.length(), inLine.indexOf(awayTo)))[ FD ]
Line_23 $$ awayStart = false-->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_37 $$ awayStart = true-->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_39 $$ if (awayStart && inLine.indexOf(goalInclud) != -1) [ FD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_41 $$ me.setPlayerName(getPlayerName(inLine.substring(inLine.indexOf(playerFrom) + playerFrom.length(), inLine.indexOf(playerTo))))[ FD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_20 $$ while ((inLine = reader.readLine()) != null) -->Line_42 $$ me.setTime(inLine.substring(inLine.indexOf(timeFrom) + timeFrom.length(), inLine.indexOf(timeTo)))[ FD ]
Line_30 $$ MatchEvent me = new MatchEvent()-->Line_43 $$ result.get(key).getAwayEvents().add(me)[ FD ]
