Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void doUpdate(final boolean notifyOnChange) [ CD ]
Line_2 $$ private void doUpdate(final boolean notifyOnChange) -->Line_3 $$ if (!validServerUrl) [ CD ]
Line_3 $$ if (!validServerUrl) -->Line_4 $$ return[ CD ]
Line_2 $$ private void doUpdate(final boolean notifyOnChange) -->Line_6 $$ boolean tempBuildClean = true[ CD ]
Line_2 $$ private void doUpdate(final boolean notifyOnChange) -->Line_7 $$ List failedBuilds = new ArrayList()[ CD ]
Line_11 $$ while ((line = in.readLine()) != null) -->Line_11 $$ while ((line = in.readLine()) != null) [ FD ]
Line_10 $$ String line = null-->Line_11 $$ while ((line = in.readLine()) != null) [ FD ]
Line_11 $$ while ((line = in.readLine()) != null) -->Line_11 $$ while ((line = in.readLine()) != null) [ CD ]
Line_9 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_11 $$ while ((line = in.readLine()) != null) [ FD ]
Line_11 $$ while ((line = in.readLine()) != null) -->Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)[ CD ]
Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)-->Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)[ CD ]
Line_11 $$ while ((line = in.readLine()) != null) -->Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)[ FD ]
Line_10 $$ String line = null-->Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)[ FD ]
Line_11 $$ while ((line = in.readLine()) != null) -->Line_13 $$ if (matcher.matches() && checkAllProjects) [ CD ]
Line_13 $$ if (matcher.matches() && checkAllProjects) -->Line_13 $$ if (matcher.matches() && checkAllProjects) [ CD ]
Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)-->Line_13 $$ if (matcher.matches() && checkAllProjects) [ FD ]
Line_13 $$ if (matcher.matches() && checkAllProjects) -->Line_14 $$ String project = matcher.group(GROUP_PROJECT)[ CD ]
Line_14 $$ String project = matcher.group(GROUP_PROJECT)-->Line_14 $$ String project = matcher.group(GROUP_PROJECT)[ CD ]
Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)-->Line_14 $$ String project = matcher.group(GROUP_PROJECT)[ FD ]
Line_13 $$ if (matcher.matches() && checkAllProjects) -->Line_15 $$ String status = matcher.group(GROUP_STATUS)[ CD ]
Line_15 $$ String status = matcher.group(GROUP_STATUS)-->Line_15 $$ String status = matcher.group(GROUP_STATUS)[ CD ]
Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)-->Line_15 $$ String status = matcher.group(GROUP_STATUS)[ FD ]
Line_13 $$ if (matcher.matches() && checkAllProjects) -->Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) [ CD ]
Line_15 $$ String status = matcher.group(GROUP_STATUS)-->Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) [ FD ]
Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) -->Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) [ CD ]
Line_15 $$ String status = matcher.group(GROUP_STATUS)-->Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) [ FD ]
Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) -->Line_17 $$ tempBuildClean = false[ CD ]
Line_17 $$ tempBuildClean = false-->Line_17 $$ tempBuildClean = false[ FD ]
Line_6 $$ boolean tempBuildClean = true-->Line_17 $$ tempBuildClean = false[ FD ]
Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) -->Line_18 $$ failedBuilds.add(project)[ CD ]
Line_7 $$ List failedBuilds = new ArrayList()-->Line_18 $$ failedBuilds.add(project)[ FD ]
Line_14 $$ String project = matcher.group(GROUP_PROJECT)-->Line_18 $$ failedBuilds.add(project)[ FD ]
Line_24 $$ if (notifyOnChange) -->Line_25 $$ monitor.notifyServerUnreachable(MessageUtils.getString("error.readError", new String[] [ CD ]
Line_2 $$ private void doUpdate(final boolean notifyOnChange) -->Line_29 $$ if (notifyOnChange && buildClean && !tempBuildClean) [ CD ]
Line_17 $$ tempBuildClean = false-->Line_29 $$ if (notifyOnChange && buildClean && !tempBuildClean) [ FD ]
Line_6 $$ boolean tempBuildClean = true-->Line_29 $$ if (notifyOnChange && buildClean && !tempBuildClean) [ FD ]
Line_29 $$ if (notifyOnChange && buildClean && !tempBuildClean) -->Line_30 $$ monitor.notifyBuildFailure(MessageUtils.getString("message.buildFailed", new Object[] [ CD ]
Line_7 $$ List failedBuilds = new ArrayList()-->Line_30 $$ monitor.notifyBuildFailure(MessageUtils.getString("message.buildFailed", new Object[] [ FD ]
Line_2 $$ private void doUpdate(final boolean notifyOnChange) -->Line_32 $$ if (notifyOnChange && !buildClean && tempBuildClean) [ CD ]
Line_17 $$ tempBuildClean = false-->Line_32 $$ if (notifyOnChange && !buildClean && tempBuildClean) [ FD ]
Line_6 $$ boolean tempBuildClean = true-->Line_32 $$ if (notifyOnChange && !buildClean && tempBuildClean) [ FD ]
Line_32 $$ if (notifyOnChange && !buildClean && tempBuildClean) -->Line_33 $$ monitor.notifyBuildFixed(MessageUtils.getString("message.allBuildsClean"))[ CD ]
Line_2 $$ private void doUpdate(final boolean notifyOnChange) -->Line_36 $$ monitor.setStatus(buildClean)[ CD ]
Line_11 $$ while ((line = in.readLine()) != null) -->Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)[ FD ]
Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)-->Line_13 $$ if (matcher.matches() && checkAllProjects) [ FD ]
Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)-->Line_14 $$ String project = matcher.group(GROUP_PROJECT)[ FD ]
Line_12 $$ Matcher matcher = ROW_PARSER_PATTERN.matcher(line)-->Line_15 $$ String status = matcher.group(GROUP_STATUS)[ FD ]
Line_15 $$ String status = matcher.group(GROUP_STATUS)-->Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) [ FD ]
Line_15 $$ String status = matcher.group(GROUP_STATUS)-->Line_16 $$ if (status.equals(MessageUtils.getString("ccOutput.status.failed"))) [ FD ]
Line_14 $$ String project = matcher.group(GROUP_PROJECT)-->Line_18 $$ failedBuilds.add(project)[ FD ]
