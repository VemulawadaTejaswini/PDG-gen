Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException [ CD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_3 $$ URL url[ CD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_4 $$ url = new URL(sourceUrl)[ CD ]
Line_3 $$ URL url-->Line_4 $$ url = new URL(sourceUrl)[ FD ]
Line_4 $$ url = new URL(sourceUrl)-->Line_4 $$ url = new URL(sourceUrl)[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_5 $$ final URLConnection con = url.openConnection()[ CD ]
Line_5 $$ final URLConnection con = url.openConnection()-->Line_5 $$ final URLConnection con = url.openConnection()[ CD ]
Line_3 $$ URL url-->Line_5 $$ final URLConnection con = url.openConnection()[ FD ]
Line_4 $$ url = new URL(sourceUrl)-->Line_5 $$ final URLConnection con = url.openConnection()[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))[ CD ]
Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))-->Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))[ CD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_7 $$ createParents(f, monitor)[ CD ]
Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))-->Line_7 $$ createParents(f, monitor)[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_7 $$ createParents(f, monitor)[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_8 $$ if (isBinary) [ CD ]
Line_8 $$ if (isBinary) -->Line_9 $$ f.create(con.getInputStream(), true, monitor)[ CD ]
Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))-->Line_9 $$ f.create(con.getInputStream(), true, monitor)[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_9 $$ f.create(con.getInputStream(), true, monitor)[ FD ]
Line_5 $$ final URLConnection con = url.openConnection()-->Line_9 $$ f.create(con.getInputStream(), true, monitor)[ FD ]
Line_8 $$ if (isBinary) -->Line_11 $$ final StringWriter sw = new StringWriter()[ CD ]
Line_8 $$ if (isBinary) -->Line_12 $$ final InputStream in = con.getInputStream()[ CD ]
Line_12 $$ final InputStream in = con.getInputStream()-->Line_12 $$ final InputStream in = con.getInputStream()[ CD ]
Line_5 $$ final URLConnection con = url.openConnection()-->Line_12 $$ final InputStream in = con.getInputStream()[ FD ]
Line_8 $$ if (isBinary) -->Line_13 $$ for (; ; ) [ CD ]
Line_8 $$ if (isBinary) -->Line_8 $$ if (isBinary) [ CD ]
Line_13 $$ for (; ; ) -->Line_14 $$ final int c = in.read()[ CD ]
Line_14 $$ final int c = in.read()-->Line_14 $$ final int c = in.read()[ CD ]
Line_12 $$ final InputStream in = con.getInputStream()-->Line_14 $$ final int c = in.read()[ FD ]
Line_13 $$ for (; ; ) -->Line_15 $$ if (-1 == c) [ CD ]
Line_14 $$ final int c = in.read()-->Line_15 $$ if (-1 == c) [ FD ]
Line_13 $$ for (; ; ) -->Line_18 $$ sw.write(c)[ CD ]
Line_11 $$ final StringWriter sw = new StringWriter()-->Line_18 $$ sw.write(c)[ FD ]
Line_14 $$ final int c = in.read()-->Line_18 $$ sw.write(c)[ FD ]
Line_8 $$ if (isBinary) -->Line_20 $$ sw.close()[ CD ]
Line_11 $$ final StringWriter sw = new StringWriter()-->Line_20 $$ sw.close()[ FD ]
Line_8 $$ if (isBinary) -->Line_21 $$ final String fileText = replaceVariables(templ.getVariables(), sw.toString())[ CD ]
Line_21 $$ final String fileText = replaceVariables(templ.getVariables(), sw.toString())-->Line_21 $$ final String fileText = replaceVariables(templ.getVariables(), sw.toString())[ CD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_21 $$ final String fileText = replaceVariables(templ.getVariables(), sw.toString())[ FD ]
Line_11 $$ final StringWriter sw = new StringWriter()-->Line_21 $$ final String fileText = replaceVariables(templ.getVariables(), sw.toString())[ FD ]
Line_8 $$ if (isBinary) -->Line_22 $$ f.create(new ByteArrayInputStream(fileText.getBytes()), true, monitor)[ CD ]
Line_6 $$ final IFile f = project.getFile(replaceVariables(templ.getVariables(), destFile))-->Line_22 $$ f.create(new ByteArrayInputStream(fileText.getBytes()), true, monitor)[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_22 $$ f.create(new ByteArrayInputStream(fileText.getBytes()), true, monitor)[ FD ]
Line_21 $$ final String fileText = replaceVariables(templ.getVariables(), sw.toString())-->Line_22 $$ f.create(new ByteArrayInputStream(fileText.getBytes()), true, monitor)[ FD ]
Line_2 $$ protected boolean createFile(final IProject project, final IProgressMonitor monitor, final Template templ, final String sourceUrl, final String destFile, final boolean isBinary) throws IOException, CoreException -->Line_24 $$ return true[ CD ]
Line_14 $$ final int c = in.read()-->Line_15 $$ if (-1 == c) [ FD ]
Line_14 $$ final int c = in.read()-->Line_18 $$ sw.write(c)[ FD ]
