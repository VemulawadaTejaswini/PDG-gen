Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public synchronized void write() throws IOException [ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_4 $$ int index = className.lastIndexOf('.')[ CD ]
Line_4 $$ int index = className.lastIndexOf('.')-->Line_4 $$ int index = className.lastIndexOf('.')[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_5 $$ String packageName = className.substring(0, index)[ CD ]
Line_5 $$ String packageName = className.substring(0, index)-->Line_5 $$ String packageName = className.substring(0, index)[ CD ]
Line_4 $$ int index = className.lastIndexOf('.')-->Line_5 $$ String packageName = className.substring(0, index)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_6 $$ String clazz = className.substring(index + 1)[ CD ]
Line_6 $$ String clazz = className.substring(index + 1)-->Line_6 $$ String clazz = className.substring(index + 1)[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_7 $$ String directory = packageName.replace('.', '/')[ CD ]
Line_7 $$ String directory = packageName.replace('.', '/')-->Line_7 $$ String directory = packageName.replace('.', '/')[ CD ]
Line_5 $$ String packageName = className.substring(0, index)-->Line_7 $$ String directory = packageName.replace('.', '/')[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_8 $$ ZipEntry dummyClass = new ZipEntry(directory + "/" + clazz + ".class")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_9 $$ jar.putNextEntry(dummyClass)[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_9 $$ jar.putNextEntry(dummyClass)[ FD ]
Line_8 $$ ZipEntry dummyClass = new ZipEntry(directory + "/" + clazz + ".class")-->Line_9 $$ jar.putNextEntry(dummyClass)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_10 $$ ClassGen classgen = new ClassGen(getClassName(), "java.lang.Object", "<generated>", Constants.ACC_PUBLIC | Constants.ACC_SUPER, null)[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_11 $$ byte[] bytes = classgen.getJavaClass().getBytes()[ CD ]
Line_11 $$ byte[] bytes = classgen.getJavaClass().getBytes()-->Line_11 $$ byte[] bytes = classgen.getJavaClass().getBytes()[ CD ]
Line_10 $$ ClassGen classgen = new ClassGen(getClassName(), "java.lang.Object", "<generated>", Constants.ACC_PUBLIC | Constants.ACC_SUPER, null)-->Line_11 $$ byte[] bytes = classgen.getJavaClass().getBytes()[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_12 $$ jar.write(bytes)[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_12 $$ jar.write(bytes)[ FD ]
Line_11 $$ byte[] bytes = classgen.getJavaClass().getBytes()-->Line_12 $$ jar.write(bytes)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_13 $$ jar.closeEntry()[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_13 $$ jar.closeEntry()[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_14 $$ ZipEntry synthFile = new ZipEntry(directory + "/synth.xml")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_15 $$ jar.putNextEntry(synthFile)[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_15 $$ jar.putNextEntry(synthFile)[ FD ]
Line_14 $$ ZipEntry synthFile = new ZipEntry(directory + "/synth.xml")-->Line_15 $$ jar.putNextEntry(synthFile)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_16 $$ Comment comment = new Comment("Generated by SynthBuilder from L2FProd.com")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_17 $$ Element root = new Element("synth")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_18 $$ root.addAttribute(new Attribute("version", "1"))[ CD ]
Line_17 $$ Element root = new Element("synth")-->Line_18 $$ root.addAttribute(new Attribute("version", "1"))[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_19 $$ root.appendChild(comment)[ CD ]
Line_17 $$ Element root = new Element("synth")-->Line_19 $$ root.appendChild(comment)[ FD ]
Line_16 $$ Comment comment = new Comment("Generated by SynthBuilder from L2FProd.com")-->Line_19 $$ root.appendChild(comment)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_20 $$ Element defaultStyle = new Element("style")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_21 $$ defaultStyle.addAttribute(new Attribute("id", "default"))[ CD ]
Line_20 $$ Element defaultStyle = new Element("style")-->Line_21 $$ defaultStyle.addAttribute(new Attribute("id", "default"))[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_22 $$ Element defaultFont = new Element("font")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_23 $$ defaultFont.addAttribute(new Attribute("name", "SansSerif"))[ CD ]
Line_22 $$ Element defaultFont = new Element("font")-->Line_23 $$ defaultFont.addAttribute(new Attribute("name", "SansSerif"))[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_24 $$ defaultFont.addAttribute(new Attribute("size", "12"))[ CD ]
Line_22 $$ Element defaultFont = new Element("font")-->Line_24 $$ defaultFont.addAttribute(new Attribute("size", "12"))[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_25 $$ defaultStyle.appendChild(defaultFont)[ CD ]
Line_20 $$ Element defaultStyle = new Element("style")-->Line_25 $$ defaultStyle.appendChild(defaultFont)[ FD ]
Line_22 $$ Element defaultFont = new Element("font")-->Line_25 $$ defaultStyle.appendChild(defaultFont)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_26 $$ Element defaultState = new Element("state")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_27 $$ defaultStyle.appendChild(defaultState)[ CD ]
Line_20 $$ Element defaultStyle = new Element("style")-->Line_27 $$ defaultStyle.appendChild(defaultState)[ FD ]
Line_26 $$ Element defaultState = new Element("state")-->Line_27 $$ defaultStyle.appendChild(defaultState)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_28 $$ root.appendChild(defaultStyle)[ CD ]
Line_17 $$ Element root = new Element("synth")-->Line_28 $$ root.appendChild(defaultStyle)[ FD ]
Line_20 $$ Element defaultStyle = new Element("style")-->Line_28 $$ root.appendChild(defaultStyle)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_29 $$ Element bind = new Element("bind")[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_30 $$ bind.addAttribute(new Attribute("style", "default"))[ CD ]
Line_29 $$ Element bind = new Element("bind")-->Line_30 $$ bind.addAttribute(new Attribute("style", "default"))[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_31 $$ bind.addAttribute(new Attribute("type", "region"))[ CD ]
Line_29 $$ Element bind = new Element("bind")-->Line_31 $$ bind.addAttribute(new Attribute("type", "region"))[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_32 $$ bind.addAttribute(new Attribute("key", ".*"))[ CD ]
Line_29 $$ Element bind = new Element("bind")-->Line_32 $$ bind.addAttribute(new Attribute("key", ".*"))[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_33 $$ root.appendChild(bind)[ CD ]
Line_17 $$ Element root = new Element("synth")-->Line_33 $$ root.appendChild(bind)[ FD ]
Line_29 $$ Element bind = new Element("bind")-->Line_33 $$ root.appendChild(bind)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_36 $$ ComponentStyle[] styles = config.getStyles()[ CD ]
Line_36 $$ ComponentStyle[] styles = config.getStyles()-->Line_36 $$ ComponentStyle[] styles = config.getStyles()[ CD ]
Line_37 $$ for (ComponentStyle element : styles) -->Line_38 $$ write(element)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_40 $$ Serializer writer = new Serializer(jar)[ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_41 $$ writer.setIndent(2)[ CD ]
Line_40 $$ Serializer writer = new Serializer(jar)-->Line_41 $$ writer.setIndent(2)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_42 $$ writer.write(doc)[ CD ]
Line_40 $$ Serializer writer = new Serializer(jar)-->Line_42 $$ writer.write(doc)[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_43 $$ writer.flush()[ CD ]
Line_40 $$ Serializer writer = new Serializer(jar)-->Line_43 $$ writer.flush()[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_44 $$ jar.closeEntry()[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_44 $$ jar.closeEntry()[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_2 $$ public synchronized void write() throws IOException [ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_46 $$ String element = (String) iter.next()[ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_46 $$ String element = (String) iter.next()[ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_47 $$ File pathToImage = (File) imagesToCopy.get(element)[ CD ]
Line_46 $$ String element = (String) iter.next()-->Line_47 $$ File pathToImage = (File) imagesToCopy.get(element)[ FD ]
Line_37 $$ for (ComponentStyle element : styles) -->Line_47 $$ File pathToImage = (File) imagesToCopy.get(element)[ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_48 $$ ZipEntry image = new ZipEntry(directory + "/" + element)[ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_49 $$ jar.putNextEntry(image)[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_49 $$ jar.putNextEntry(image)[ FD ]
Line_48 $$ ZipEntry image = new ZipEntry(directory + "/" + element)-->Line_49 $$ jar.putNextEntry(image)[ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_50 $$ FileInputStream input = new FileInputStream(pathToImage)[ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_51 $$ int read = -1[ CD ]
Line_51 $$ int read = -1-->Line_51 $$ int read = -1[ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_52 $$ while ((read = input.read()) != -1) [ CD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_52 $$ while ((read = input.read()) != -1) -->Line_52 $$ while ((read = input.read()) != -1) [ FD ]
Line_51 $$ int read = -1-->Line_52 $$ while ((read = input.read()) != -1) [ FD ]
Line_52 $$ while ((read = input.read()) != -1) -->Line_52 $$ while ((read = input.read()) != -1) [ CD ]
Line_50 $$ FileInputStream input = new FileInputStream(pathToImage)-->Line_52 $$ while ((read = input.read()) != -1) [ FD ]
Line_52 $$ while ((read = input.read()) != -1) -->Line_53 $$ jar.write(read)[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_53 $$ jar.write(read)[ FD ]
Line_52 $$ while ((read = input.read()) != -1) -->Line_53 $$ jar.write(read)[ FD ]
Line_51 $$ int read = -1-->Line_53 $$ jar.write(read)[ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_55 $$ input.close()[ CD ]
Line_50 $$ FileInputStream input = new FileInputStream(pathToImage)-->Line_55 $$ input.close()[ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_56 $$ jar.flush()[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_56 $$ jar.flush()[ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_57 $$ jar.closeEntry()[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_57 $$ jar.closeEntry()[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_59 $$ jar.flush()[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_59 $$ jar.flush()[ FD ]
Line_2 $$ public synchronized void write() throws IOException -->Line_60 $$ jar.close()[ CD ]
Line_3 $$ ZipOutputStream jar = new ZipOutputStream(new FileOutputStream(jarPath))-->Line_60 $$ jar.close()[ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) [ FD ]
Line_45 $$ for (Iterator iter = imagesToCopy.keySet().iterator(); iter.hasNext(); ) -->Line_46 $$ String element = (String) iter.next()[ FD ]
Line_46 $$ String element = (String) iter.next()-->Line_47 $$ File pathToImage = (File) imagesToCopy.get(element)[ FD ]
Line_48 $$ ZipEntry image = new ZipEntry(directory + "/" + element)-->Line_49 $$ jar.putNextEntry(image)[ FD ]
Line_50 $$ FileInputStream input = new FileInputStream(pathToImage)-->Line_55 $$ input.close()[ FD ]
Line_52 $$ while ((read = input.read()) != -1) -->Line_53 $$ jar.write(read)[ FD ]
