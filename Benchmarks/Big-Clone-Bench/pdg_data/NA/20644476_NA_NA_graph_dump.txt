Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException [ CD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_3 $$ final InputStream inputStream = QuickTimeFormatGenerator.class.getResourceAsStream(REFERENCE_MOVIE_RESOURCE)[ CD ]
Line_3 $$ final InputStream inputStream = QuickTimeFormatGenerator.class.getResourceAsStream(REFERENCE_MOVIE_RESOURCE)-->Line_3 $$ final InputStream inputStream = QuickTimeFormatGenerator.class.getResourceAsStream(REFERENCE_MOVIE_RESOURCE)[ CD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_4 $$ final ByteArrayOutputStream byteArray = new ByteArrayOutputStream(1024 * 100)[ CD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_5 $$ IOUtils.copy(inputStream, byteArray)[ CD ]
Line_3 $$ final InputStream inputStream = QuickTimeFormatGenerator.class.getResourceAsStream(REFERENCE_MOVIE_RESOURCE)-->Line_5 $$ IOUtils.copy(inputStream, byteArray)[ FD ]
Line_4 $$ final ByteArrayOutputStream byteArray = new ByteArrayOutputStream(1024 * 100)-->Line_5 $$ IOUtils.copy(inputStream, byteArray)[ FD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_6 $$ final byte[] movieBytes = byteArray.toByteArray()[ CD ]
Line_6 $$ final byte[] movieBytes = byteArray.toByteArray()-->Line_6 $$ final byte[] movieBytes = byteArray.toByteArray()[ CD ]
Line_4 $$ final ByteArrayOutputStream byteArray = new ByteArrayOutputStream(1024 * 100)-->Line_6 $$ final byte[] movieBytes = byteArray.toByteArray()[ FD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_7 $$ final QTHandle qtHandle = new QTHandle(movieBytes)[ CD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_8 $$ final DataRef dataRef = new DataRef(qtHandle, StdQTConstants.kDataRefFileExtensionTag, ".mov")[ CD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_9 $$ final Movie movie = Movie.fromDataRef(dataRef, StdQTConstants.newMovieActive | StdQTConstants4.newMovieAsyncOK)[ CD ]
Line_9 $$ final Movie movie = Movie.fromDataRef(dataRef, StdQTConstants.newMovieActive | StdQTConstants4.newMovieAsyncOK)-->Line_9 $$ final Movie movie = Movie.fromDataRef(dataRef, StdQTConstants.newMovieActive | StdQTConstants4.newMovieAsyncOK)[ CD ]
Line_8 $$ final DataRef dataRef = new DataRef(qtHandle, StdQTConstants.kDataRefFileExtensionTag, ".mov")-->Line_9 $$ final Movie movie = Movie.fromDataRef(dataRef, StdQTConstants.newMovieActive | StdQTConstants4.newMovieAsyncOK)[ FD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_10 $$ final MovieExporter exporter = new MovieExporter(StdQTConstants.kQTFileTypeMovie)[ CD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_11 $$ exporter.doUserDialog(movie, null, 0, movie.getDuration())[ CD ]
Line_10 $$ final MovieExporter exporter = new MovieExporter(StdQTConstants.kQTFileTypeMovie)-->Line_11 $$ exporter.doUserDialog(movie, null, 0, movie.getDuration())[ FD ]
Line_9 $$ final Movie movie = Movie.fromDataRef(dataRef, StdQTConstants.newMovieActive | StdQTConstants4.newMovieAsyncOK)-->Line_11 $$ exporter.doUserDialog(movie, null, 0, movie.getDuration())[ FD ]
Line_9 $$ final Movie movie = Movie.fromDataRef(dataRef, StdQTConstants.newMovieActive | StdQTConstants4.newMovieAsyncOK)-->Line_11 $$ exporter.doUserDialog(movie, null, 0, movie.getDuration())[ FD ]
Line_2 $$ private static AtomContainer askForMovieSettings() throws IOException, QTException -->Line_12 $$ return exporter.getExportSettingsFromAtomContainer()[ CD ]
Line_12 $$ return exporter.getExportSettingsFromAtomContainer()-->Line_12 $$ return exporter.getExportSettingsFromAtomContainer()[ CD ]
Line_10 $$ final MovieExporter exporter = new MovieExporter(StdQTConstants.kQTFileTypeMovie)-->Line_12 $$ return exporter.getExportSettingsFromAtomContainer()[ FD ]
