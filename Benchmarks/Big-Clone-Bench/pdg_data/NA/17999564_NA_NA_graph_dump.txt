Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void decompressFile(File f) throws IOException [ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_3 $$ File target = new File(f.toString().substring(0, f.toString().length() - 3))[ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_3 $$ File target = new File(f.toString().substring(0, f.toString().length() - 3))[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_3 $$ File target = new File(f.toString().substring(0, f.toString().length() - 3))[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_4 $$ System.out.print("Decompressing: " + f.getName() + ".. ")[ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_4 $$ System.out.print("Decompressing: " + f.getName() + ".. ")[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_5 $$ long initialSize = f.length()[ CD ]
Line_5 $$ long initialSize = f.length()-->Line_5 $$ long initialSize = f.length()[ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_5 $$ long initialSize = f.length()[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_6 $$ GZIPInputStream in = new GZIPInputStream(new FileInputStream(f))[ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_7 $$ FileOutputStream fos = new FileOutputStream(target)[ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_8 $$ byte[] buf = new byte[1024][ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_9 $$ int read[ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_10 $$ while ((read = in.read(buf)) != -1) [ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_2 $$ public static void decompressFile(File f) throws IOException [ CD ]
Line_10 $$ while ((read = in.read(buf)) != -1) -->Line_10 $$ while ((read = in.read(buf)) != -1) [ FD ]
Line_9 $$ int read-->Line_10 $$ while ((read = in.read(buf)) != -1) [ FD ]
Line_10 $$ while ((read = in.read(buf)) != -1) -->Line_10 $$ while ((read = in.read(buf)) != -1) [ CD ]
Line_6 $$ GZIPInputStream in = new GZIPInputStream(new FileInputStream(f))-->Line_10 $$ while ((read = in.read(buf)) != -1) [ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_10 $$ while ((read = in.read(buf)) != -1) [ FD ]
Line_10 $$ while ((read = in.read(buf)) != -1) -->Line_11 $$ fos.write(buf, 0, read)[ CD ]
Line_7 $$ FileOutputStream fos = new FileOutputStream(target)-->Line_11 $$ fos.write(buf, 0, read)[ FD ]
Line_8 $$ byte[] buf = new byte[1024]-->Line_11 $$ fos.write(buf, 0, read)[ FD ]
Line_10 $$ while ((read = in.read(buf)) != -1) -->Line_11 $$ fos.write(buf, 0, read)[ FD ]
Line_9 $$ int read-->Line_11 $$ fos.write(buf, 0, read)[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_13 $$ System.out.println("Done.")[ CD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_14 $$ fos.close()[ CD ]
Line_7 $$ FileOutputStream fos = new FileOutputStream(target)-->Line_14 $$ fos.close()[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_15 $$ in.close()[ CD ]
Line_6 $$ GZIPInputStream in = new GZIPInputStream(new FileInputStream(f))-->Line_15 $$ in.close()[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_16 $$ long endSize = target.length()[ CD ]
Line_16 $$ long endSize = target.length()-->Line_16 $$ long endSize = target.length()[ CD ]
Line_3 $$ File target = new File(f.toString().substring(0, f.toString().length() - 3))-->Line_16 $$ long endSize = target.length()[ FD ]
Line_2 $$ public static void decompressFile(File f) throws IOException -->Line_17 $$ System.out.println("Initial size: " + initialSize + "; Decompressed size: " + endSize)[ CD ]
Line_10 $$ while ((read = in.read(buf)) != -1) -->Line_11 $$ fos.write(buf, 0, read)[ FD ]
