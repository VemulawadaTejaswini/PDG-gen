Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private File tmpFileFromURL(String name) [ CD ]
Line_2 $$ private File tmpFileFromURL(String name) -->Line_3 $$ if (name == null) [ CD ]
Line_2 $$ private File tmpFileFromURL(String name) -->Line_3 $$ if (name == null) [ FD ]
Line_3 $$ if (name == null) -->Line_4 $$ System.out.println("ERROR: the provided URL is invalid, aborting download!")[ CD ]
Line_3 $$ if (name == null) -->Line_5 $$ return null[ CD ]
Line_9 $$ final InputStream in = url.openStream()-->Line_9 $$ final InputStream in = url.openStream()[ CD ]
Line_8 $$ final URL url = new URL(name)-->Line_9 $$ final InputStream in = url.openStream()[ FD ]
Line_10 $$ final URLConnection conn = url.openConnection()-->Line_10 $$ final URLConnection conn = url.openConnection()[ CD ]
Line_8 $$ final URL url = new URL(name)-->Line_10 $$ final URLConnection conn = url.openConnection()[ FD ]
Line_11 $$ final int total = conn.getContentLength()-->Line_11 $$ final int total = conn.getContentLength()[ CD ]
Line_10 $$ final URLConnection conn = url.openConnection()-->Line_11 $$ final int total = conn.getContentLength()[ FD ]
Line_12 $$ final String contentType = conn.getContentType()-->Line_12 $$ final String contentType = conn.getContentType()[ CD ]
Line_10 $$ final URLConnection conn = url.openConnection()-->Line_12 $$ final String contentType = conn.getContentType()[ FD ]
Line_12 $$ final String contentType = conn.getContentType()-->Line_14 $$ if (contentType.trim().toLowerCase().indexOf("html") != -1) [ FD ]
Line_14 $$ if (contentType.trim().toLowerCase().indexOf("html") != -1) -->Line_15 $$ return tmpFileFromURL(extractRedirectURL(in))[ CD ]
Line_15 $$ return tmpFileFromURL(extractRedirectURL(in))-->Line_15 $$ return tmpFileFromURL(extractRedirectURL(in))[ CD ]
Line_9 $$ final InputStream in = url.openStream()-->Line_15 $$ return tmpFileFromURL(extractRedirectURL(in))[ FD ]
Line_17 $$ final FileManager fileManager = system.getFileManager()-->Line_17 $$ final FileManager fileManager = system.getFileManager()[ CD ]
Line_18 $$ final File dest = fileManager.createTmpModuleFile()-->Line_18 $$ final File dest = fileManager.createTmpModuleFile()[ CD ]
Line_17 $$ final FileManager fileManager = system.getFileManager()-->Line_18 $$ final File dest = fileManager.createTmpModuleFile()[ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_24 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_22 $$ int len, current = 0-->Line_24 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_24 $$ while ((len = in.read(buf)) > 0) [ CD ]
Line_9 $$ final InputStream in = url.openStream()-->Line_24 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_20 $$ final byte[] buf = new byte[2048]-->Line_24 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_25 $$ current += len[ CD ]
Line_25 $$ current += len-->Line_25 $$ current += len[ FD ]
Line_22 $$ int len, current = 0-->Line_25 $$ current += len[ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_25 $$ current += len[ FD ]
Line_22 $$ int len, current = 0-->Line_25 $$ current += len[ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_26 $$ progress(new ProgressEvent(this, "Downloading " + name, (int) ((current * 100.0) / total)))[ CD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_27 $$ out.write(buf, 0, len)[ CD ]
Line_19 $$ final FileOutputStream out = new FileOutputStream(dest)-->Line_27 $$ out.write(buf, 0, len)[ FD ]
Line_20 $$ final byte[] buf = new byte[2048]-->Line_27 $$ out.write(buf, 0, len)[ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_27 $$ out.write(buf, 0, len)[ FD ]
Line_22 $$ int len, current = 0-->Line_27 $$ out.write(buf, 0, len)[ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_28 $$ out.flush()[ CD ]
Line_19 $$ final FileOutputStream out = new FileOutputStream(dest)-->Line_28 $$ out.flush()[ FD ]
Line_9 $$ final InputStream in = url.openStream()-->Line_30 $$ in.close()[ FD ]
Line_19 $$ final FileOutputStream out = new FileOutputStream(dest)-->Line_31 $$ out.flush()[ FD ]
Line_19 $$ final FileOutputStream out = new FileOutputStream(dest)-->Line_32 $$ out.close()[ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_25 $$ current += len[ FD ]
Line_24 $$ while ((len = in.read(buf)) > 0) -->Line_27 $$ out.write(buf, 0, len)[ FD ]
