Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException [ CD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_3 $$ String url = request.getRequestURL().toString()[ CD ]
Line_3 $$ String url = request.getRequestURL().toString()-->Line_3 $$ String url = request.getRequestURL().toString()[ CD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_3 $$ String url = request.getRequestURL().toString()[ FD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_4 $$ if (delayed.contains(url)) [ CD ]
Line_3 $$ String url = request.getRequestURL().toString()-->Line_4 $$ if (delayed.contains(url)) [ FD ]
Line_4 $$ if (delayed.contains(url)) -->Line_4 $$ if (delayed.contains(url)) [ CD ]
Line_3 $$ String url = request.getRequestURL().toString()-->Line_4 $$ if (delayed.contains(url)) [ FD ]
Line_4 $$ if (delayed.contains(url)) -->Line_5 $$ delayed.remove(url)[ CD ]
Line_3 $$ String url = request.getRequestURL().toString()-->Line_5 $$ delayed.remove(url)[ FD ]
Line_4 $$ if (delayed.contains(url)) -->Line_6 $$ LOGGER.info(MessageFormat.format("Loading delayed resource at url = [[ CD ]
Line_3 $$ String url = request.getRequestURL().toString()-->Line_6 $$ LOGGER.info(MessageFormat.format("Loading delayed resource at url = [[ FD ]
Line_4 $$ if (delayed.contains(url)) -->Line_7 $$ chain.doFilter(request, response)[ CD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_7 $$ chain.doFilter(request, response)[ FD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_7 $$ chain.doFilter(request, response)[ FD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_7 $$ chain.doFilter(request, response)[ FD ]
Line_4 $$ if (delayed.contains(url)) -->Line_9 $$ LOGGER.info("Returning resource = [LoaderApplication.swf]")[ CD ]
Line_4 $$ if (delayed.contains(url)) -->Line_10 $$ InputStream input = null[ CD ]
Line_4 $$ if (delayed.contains(url)) -->Line_11 $$ OutputStream output = null[ CD ]
Line_10 $$ InputStream input = null-->Line_13 $$ input = getClass().getResourceAsStream("LoaderApplication.swf")[ FD ]
Line_13 $$ input = getClass().getResourceAsStream("LoaderApplication.swf")-->Line_13 $$ input = getClass().getResourceAsStream("LoaderApplication.swf")[ FD ]
Line_13 $$ input = getClass().getResourceAsStream("LoaderApplication.swf")-->Line_13 $$ input = getClass().getResourceAsStream("LoaderApplication.swf")[ CD ]
Line_11 $$ OutputStream output = null-->Line_14 $$ output = response.getOutputStream()[ FD ]
Line_14 $$ output = response.getOutputStream()-->Line_14 $$ output = response.getOutputStream()[ FD ]
Line_14 $$ output = response.getOutputStream()-->Line_14 $$ output = response.getOutputStream()[ CD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_14 $$ output = response.getOutputStream()[ FD ]
Line_3 $$ String url = request.getRequestURL().toString()-->Line_15 $$ delayed.add(url)[ FD ]
Line_2 $$ private void delay(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException -->Line_16 $$ response.setHeader("Cache-Control", "no-cache")[ FD ]
Line_10 $$ InputStream input = null-->Line_17 $$ IOUtils.copy(input, output)[ FD ]
Line_13 $$ input = getClass().getResourceAsStream("LoaderApplication.swf")-->Line_17 $$ IOUtils.copy(input, output)[ FD ]
Line_11 $$ OutputStream output = null-->Line_17 $$ IOUtils.copy(input, output)[ FD ]
Line_14 $$ output = response.getOutputStream()-->Line_17 $$ IOUtils.copy(input, output)[ FD ]
Line_11 $$ OutputStream output = null-->Line_19 $$ IOUtils.closeQuietly(output)[ FD ]
Line_14 $$ output = response.getOutputStream()-->Line_19 $$ IOUtils.closeQuietly(output)[ FD ]
Line_10 $$ InputStream input = null-->Line_20 $$ IOUtils.closeQuietly(input)[ FD ]
Line_13 $$ input = getClass().getResourceAsStream("LoaderApplication.swf")-->Line_20 $$ IOUtils.closeQuietly(input)[ FD ]
