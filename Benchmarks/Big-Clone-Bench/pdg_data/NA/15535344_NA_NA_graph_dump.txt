Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testDoubleNaN() [ CD ]
Line_2 $$ public void testDoubleNaN() -->Line_3 $$ double value = 0[ CD ]
Line_2 $$ public void testDoubleNaN() -->Line_4 $$ boolean wasEqual = false[ CD ]
Line_2 $$ public void testDoubleNaN() -->Line_5 $$ String message = "DB operation completed"[ CD ]
Line_2 $$ public void testDoubleNaN() -->Line_6 $$ String ddl1 = "DROP TABLE t1 IF EXISTS;" + "CREATE TABLE t1 ( d DECIMAL, f DOUBLE, l BIGINT, i INTEGER, s SMALLINT, t TINYINT, " + "dt DATE DEFAULT CURRENT_DATE, ti TIME DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP );"[ CD ]
Line_6 $$ String ddl1 = "DROP TABLE t1 IF EXISTS;" + "CREATE TABLE t1 ( d DECIMAL, f DOUBLE, l BIGINT, i INTEGER, s SMALLINT, t TINYINT, " + "dt DATE DEFAULT CURRENT_DATE, ti TIME DEFAULT CURRENT_TIME, ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP );"-->Line_8 $$ stmnt.execute(ddl1)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")[ CD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_10 $$ ps.setString(1, "0.2")[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_11 $$ ps.setDouble(2, 0.2)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_12 $$ ps.setLong(3, java.lang.Long.MAX_VALUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_13 $$ ps.setInt(4, Integer.MAX_VALUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_14 $$ ps.setInt(5, Short.MAX_VALUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_15 $$ ps.setInt(6, 0)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_16 $$ ps.setDate(7, new java.sql.Date(System.currentTimeMillis()))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_17 $$ ps.setTime(8, new java.sql.Time(System.currentTimeMillis()))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_18 $$ ps.setTimestamp(9, new java.sql.Timestamp(System.currentTimeMillis()))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_19 $$ ps.execute()[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_20 $$ ps.setInt(1, 0)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_21 $$ ps.setDouble(2, java.lang.Double.NaN)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_22 $$ ps.setLong(3, java.lang.Long.MIN_VALUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_23 $$ ps.setInt(4, Integer.MIN_VALUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_24 $$ ps.setInt(5, Short.MIN_VALUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_25 $$ ps.setInt(6, 0)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_26 $$ ps.setTimestamp(7, new java.sql.Timestamp(System.currentTimeMillis() + 1))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_27 $$ ps.setTime(8, new java.sql.Time(System.currentTimeMillis() + 1))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_28 $$ ps.setDate(9, new java.sql.Date(System.currentTimeMillis() + 1))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_29 $$ ps.execute()[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_30 $$ ps.setInt(1, 0)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_31 $$ ps.setDouble(2, java.lang.Double.POSITIVE_INFINITY)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_32 $$ ps.setInt(4, Integer.MIN_VALUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_33 $$ ps.setObject(5, Boolean.TRUE)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_34 $$ ps.setBoolean(5, true)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_35 $$ ps.setObject(5, new Short((short) 2), Types.SMALLINT)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_36 $$ ps.setObject(6, new Integer(2), Types.TINYINT)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_37 $$ ps.setObject(7, new java.sql.Date(System.currentTimeMillis() + 2))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_38 $$ ps.setObject(8, new java.sql.Time(System.currentTimeMillis() + 2))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_39 $$ ps.setObject(9, new java.sql.Timestamp(System.currentTimeMillis() + 2))[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_40 $$ ps.execute()[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_41 $$ ps.setObject(1, new Float(0), Types.INTEGER)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_42 $$ ps.setObject(4, new Float(1), Types.INTEGER)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_43 $$ ps.setDouble(2, java.lang.Double.NEGATIVE_INFINITY)[ FD ]
Line_9 $$ PreparedStatement ps = connection.prepareStatement("INSERT INTO t1 (d,f,l,i,s,t,dt,ti,ts) VALUES (?,?,?,?,?,?,?,?,?)")-->Line_44 $$ ps.execute()[ FD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")[ CD ]
Line_46 $$ boolean result = rs.next()-->Line_46 $$ boolean result = rs.next()[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_46 $$ boolean result = rs.next()[ FD ]
Line_3 $$ double value = 0-->Line_47 $$ value = rs.getDouble(2)[ FD ]
Line_47 $$ value = rs.getDouble(2)-->Line_47 $$ value = rs.getDouble(2)[ FD ]
Line_47 $$ value = rs.getDouble(2)-->Line_47 $$ value = rs.getDouble(2)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_47 $$ value = rs.getDouble(2)[ FD ]
Line_48 $$ int integerValue = rs.getInt(4)-->Line_48 $$ int integerValue = rs.getInt(4)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_48 $$ int integerValue = rs.getInt(4)[ FD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_49 $$ if (rs.next()) [ FD ]
Line_49 $$ if (rs.next()) -->Line_49 $$ if (rs.next()) [ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_49 $$ if (rs.next()) [ FD ]
Line_49 $$ if (rs.next()) -->Line_50 $$ value = rs.getDouble(2)[ CD ]
Line_3 $$ double value = 0-->Line_50 $$ value = rs.getDouble(2)[ FD ]
Line_47 $$ value = rs.getDouble(2)-->Line_50 $$ value = rs.getDouble(2)[ FD ]
Line_50 $$ value = rs.getDouble(2)-->Line_50 $$ value = rs.getDouble(2)[ FD ]
Line_50 $$ value = rs.getDouble(2)-->Line_50 $$ value = rs.getDouble(2)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_50 $$ value = rs.getDouble(2)[ FD ]
Line_49 $$ if (rs.next()) -->Line_51 $$ wasEqual = Double.isNaN(value)[ CD ]
Line_4 $$ boolean wasEqual = false-->Line_51 $$ wasEqual = Double.isNaN(value)[ FD ]
Line_51 $$ wasEqual = Double.isNaN(value)-->Line_51 $$ wasEqual = Double.isNaN(value)[ FD ]
Line_51 $$ wasEqual = Double.isNaN(value)-->Line_51 $$ wasEqual = Double.isNaN(value)[ CD ]
Line_3 $$ double value = 0-->Line_51 $$ wasEqual = Double.isNaN(value)[ FD ]
Line_47 $$ value = rs.getDouble(2)-->Line_51 $$ wasEqual = Double.isNaN(value)[ FD ]
Line_50 $$ value = rs.getDouble(2)-->Line_51 $$ wasEqual = Double.isNaN(value)[ FD ]
Line_49 $$ if (rs.next()) -->Line_52 $$ integerValue = rs.getInt(4)[ CD ]
Line_48 $$ int integerValue = rs.getInt(4)-->Line_52 $$ integerValue = rs.getInt(4)[ FD ]
Line_52 $$ integerValue = rs.getInt(4)-->Line_52 $$ integerValue = rs.getInt(4)[ FD ]
Line_52 $$ integerValue = rs.getInt(4)-->Line_52 $$ integerValue = rs.getInt(4)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_52 $$ integerValue = rs.getInt(4)[ FD ]
Line_49 $$ if (rs.next()) -->Line_53 $$ integerValue = rs.getInt(1)[ CD ]
Line_48 $$ int integerValue = rs.getInt(4)-->Line_53 $$ integerValue = rs.getInt(1)[ FD ]
Line_52 $$ integerValue = rs.getInt(4)-->Line_53 $$ integerValue = rs.getInt(1)[ FD ]
Line_53 $$ integerValue = rs.getInt(1)-->Line_53 $$ integerValue = rs.getInt(1)[ FD ]
Line_53 $$ integerValue = rs.getInt(1)-->Line_53 $$ integerValue = rs.getInt(1)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_53 $$ integerValue = rs.getInt(1)[ FD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_55 $$ if (rs.next()) [ FD ]
Line_55 $$ if (rs.next()) -->Line_55 $$ if (rs.next()) [ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_55 $$ if (rs.next()) [ FD ]
Line_55 $$ if (rs.next()) -->Line_56 $$ value = rs.getDouble(2)[ CD ]
Line_3 $$ double value = 0-->Line_56 $$ value = rs.getDouble(2)[ FD ]
Line_47 $$ value = rs.getDouble(2)-->Line_56 $$ value = rs.getDouble(2)[ FD ]
Line_50 $$ value = rs.getDouble(2)-->Line_56 $$ value = rs.getDouble(2)[ FD ]
Line_56 $$ value = rs.getDouble(2)-->Line_56 $$ value = rs.getDouble(2)[ FD ]
Line_56 $$ value = rs.getDouble(2)-->Line_56 $$ value = rs.getDouble(2)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_56 $$ value = rs.getDouble(2)[ FD ]
Line_55 $$ if (rs.next()) -->Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY[ CD ]
Line_4 $$ boolean wasEqual = false-->Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY[ FD ]
Line_51 $$ wasEqual = Double.isNaN(value)-->Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY[ FD ]
Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY-->Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY[ FD ]
Line_4 $$ boolean wasEqual = false-->Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY[ FD ]
Line_51 $$ wasEqual = Double.isNaN(value)-->Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY[ FD ]
Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY-->Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY[ FD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_59 $$ if (rs.next()) [ FD ]
Line_59 $$ if (rs.next()) -->Line_59 $$ if (rs.next()) [ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_59 $$ if (rs.next()) [ FD ]
Line_59 $$ if (rs.next()) -->Line_60 $$ value = rs.getDouble(2)[ CD ]
Line_3 $$ double value = 0-->Line_60 $$ value = rs.getDouble(2)[ FD ]
Line_47 $$ value = rs.getDouble(2)-->Line_60 $$ value = rs.getDouble(2)[ FD ]
Line_50 $$ value = rs.getDouble(2)-->Line_60 $$ value = rs.getDouble(2)[ FD ]
Line_56 $$ value = rs.getDouble(2)-->Line_60 $$ value = rs.getDouble(2)[ FD ]
Line_60 $$ value = rs.getDouble(2)-->Line_60 $$ value = rs.getDouble(2)[ FD ]
Line_60 $$ value = rs.getDouble(2)-->Line_60 $$ value = rs.getDouble(2)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_60 $$ value = rs.getDouble(2)[ FD ]
Line_59 $$ if (rs.next()) -->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ CD ]
Line_4 $$ boolean wasEqual = false-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_51 $$ wasEqual = Double.isNaN(value)-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_4 $$ boolean wasEqual = false-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_51 $$ wasEqual = Double.isNaN(value)-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY-->Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY[ FD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")[ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")[ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_64 $$ if (rs.next()) [ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_64 $$ if (rs.next()) [ FD ]
Line_64 $$ if (rs.next()) -->Line_64 $$ if (rs.next()) [ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_64 $$ if (rs.next()) [ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_64 $$ if (rs.next()) [ FD ]
Line_64 $$ if (rs.next()) -->Line_65 $$ int max = rs.getInt(1)[ CD ]
Line_65 $$ int max = rs.getInt(1)-->Line_65 $$ int max = rs.getInt(1)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_65 $$ int max = rs.getInt(1)[ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_65 $$ int max = rs.getInt(1)[ FD ]
Line_64 $$ if (rs.next()) -->Line_66 $$ System.out.println("Max value for i: " + max)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")[ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")[ FD ]
Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")-->Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")[ FD ]
Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")-->Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")[ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")[ FD ]
Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")-->Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")[ FD ]
Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")-->Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")[ FD ]
Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")-->Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_72 $$ if (rs.next()) [ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_72 $$ if (rs.next()) [ FD ]
Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")-->Line_72 $$ if (rs.next()) [ FD ]
Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")-->Line_72 $$ if (rs.next()) [ FD ]
Line_72 $$ if (rs.next()) -->Line_72 $$ if (rs.next()) [ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_72 $$ if (rs.next()) [ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_72 $$ if (rs.next()) [ FD ]
Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")-->Line_72 $$ if (rs.next()) [ FD ]
Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")-->Line_72 $$ if (rs.next()) [ FD ]
Line_72 $$ if (rs.next()) -->Line_73 $$ int max = rs.getInt(1)[ CD ]
Line_45 $$ ResultSet rs = stmnt.executeQuery("SELECT d, f, l, i, s*2, t FROM t1")-->Line_73 $$ int max = rs.getInt(1)[ FD ]
Line_63 $$ rs = stmnt.executeQuery("SELECT MAX(i) FROM t1")-->Line_73 $$ int max = rs.getInt(1)[ FD ]
Line_70 $$ rs = stmnt.executeQuery("CREATE TABLE cdType (ID INTEGER NOT NULL, name VARCHAR(50), PRIMARY KEY(ID))")-->Line_73 $$ int max = rs.getInt(1)[ FD ]
Line_71 $$ rs = stmnt.executeQuery("SELECT MAX(ID) FROM cdType")-->Line_73 $$ int max = rs.getInt(1)[ FD ]
Line_72 $$ if (rs.next()) -->Line_74 $$ System.out.println("Max value for ID: " + max)[ CD ]
Line_72 $$ if (rs.next()) -->Line_76 $$ System.out.println("Max value for ID not returned")[ CD ]
Line_2 $$ public void testDoubleNaN() -->Line_90 $$ System.out.println("testDoubleNaN complete")[ CD ]
Line_2 $$ public void testDoubleNaN() -->Line_91 $$ assertEquals(true, wasEqual)[ CD ]
Line_4 $$ boolean wasEqual = false-->Line_91 $$ assertEquals(true, wasEqual)[ FD ]
Line_51 $$ wasEqual = Double.isNaN(value)-->Line_91 $$ assertEquals(true, wasEqual)[ FD ]
Line_57 $$ wasEqual = wasEqual && value == Double.POSITIVE_INFINITY-->Line_91 $$ assertEquals(true, wasEqual)[ FD ]
Line_61 $$ wasEqual = wasEqual && value == Double.NEGATIVE_INFINITY-->Line_91 $$ assertEquals(true, wasEqual)[ FD ]
