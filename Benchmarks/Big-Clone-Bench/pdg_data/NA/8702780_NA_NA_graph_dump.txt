Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ final void saveProject(Project project, final File file) [ CD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_3 $$ if (projectsList.contains(project)) [ CD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_3 $$ if (projectsList.contains(project)) [ FD ]
Line_3 $$ if (projectsList.contains(project)) -->Line_3 $$ if (projectsList.contains(project)) [ CD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_3 $$ if (projectsList.contains(project)) [ FD ]
Line_3 $$ if (projectsList.contains(project)) -->Line_4 $$ if (project.isDirty() || !file.getParentFile().equals(workspaceDirectory)) [ CD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_4 $$ if (project.isDirty() || !file.getParentFile().equals(workspaceDirectory)) [ FD ]
Line_4 $$ if (project.isDirty() || !file.getParentFile().equals(workspaceDirectory)) -->Line_4 $$ if (project.isDirty() || !file.getParentFile().equals(workspaceDirectory)) [ CD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_4 $$ if (project.isDirty() || !file.getParentFile().equals(workspaceDirectory)) [ FD ]
Line_6 $$ if (!file.exists()) -->Line_6 $$ if (!file.exists()) [ CD ]
Line_6 $$ if (!file.exists()) -->Line_6 $$ if (!file.exists()) [ CD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_6 $$ if (!file.exists()) [ FD ]
Line_6 $$ if (!file.exists()) -->Line_7 $$ if (!file.createNewFile())[ CD ]
Line_7 $$ if (!file.createNewFile())-->Line_7 $$ if (!file.createNewFile())[ CD ]
Line_7 $$ if (!file.createNewFile())-->Line_7 $$ if (!file.createNewFile())[ CD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_7 $$ if (!file.createNewFile())[ FD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_7 $$ throw new IOException("cannot create file " + file.getAbsolutePath())[ FD ]
Line_9 $$ File tmpFile = File.createTempFile("JFPSM", ".tmp")-->Line_9 $$ File tmpFile = File.createTempFile("JFPSM", ".tmp")[ CD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_11 $$ zoStream.setMethod(ZipOutputStream.DEFLATED)[ FD ]
Line_12 $$ ZipEntry projectXMLEntry = new ZipEntry("project.xml")-->Line_13 $$ projectXMLEntry.setMethod(ZipEntry.DEFLATED)[ FD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_14 $$ zoStream.putNextEntry(projectXMLEntry)[ FD ]
Line_12 $$ ZipEntry projectXMLEntry = new ZipEntry("project.xml")-->Line_14 $$ zoStream.putNextEntry(projectXMLEntry)[ FD ]
Line_15 $$ CustomXMLEncoder encoder = new CustomXMLEncoder(new BufferedOutputStream(new FileOutputStream(tmpFile)))-->Line_16 $$ encoder.writeObject(project)[ FD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_16 $$ encoder.writeObject(project)[ FD ]
Line_15 $$ CustomXMLEncoder encoder = new CustomXMLEncoder(new BufferedOutputStream(new FileOutputStream(tmpFile)))-->Line_17 $$ encoder.close()[ FD ]
Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)-->Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_18 $$ int bytesIn-->Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)-->Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)[ CD ]
Line_20 $$ FileInputStream fis = new FileInputStream(tmpFile)-->Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_19 $$ byte[] readBuffer = new byte[1024]-->Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)-->Line_21 $$ zoStream.write(readBuffer, 0, bytesIn)[ CD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_21 $$ zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_19 $$ byte[] readBuffer = new byte[1024]-->Line_21 $$ zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)-->Line_21 $$ zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_18 $$ int bytesIn-->Line_21 $$ zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_20 $$ FileInputStream fis = new FileInputStream(tmpFile)-->Line_22 $$ fis.close()[ FD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_25 $$ for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) [ FD ]
Line_25 $$ for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) -->Line_25 $$ for (Floor floor : floorSet.getFloorsList()) [ FD ]
Line_24 $$ String floorDirectory-->Line_26 $$ floorDirectory = "levelset/" + floorSet.getName() + "/" + floor.getName() + "/"[ FD ]
Line_26 $$ floorDirectory = "levelset/" + floorSet.getName() + "/" + floor.getName() + "/"-->Line_26 $$ floorDirectory = "levelset/" + floorSet.getName() + "/" + floor.getName() + "/"[ FD ]
Line_25 $$ for (FloorSet floorSet : project.getLevelSet().getFloorSetsList()) for (Floor floor : floorSet.getFloorsList()) -->Line_26 $$ floorDirectory = "levelset/" + floorSet.getName() + "/" + floor.getName() + "/"[ FD ]
Line_25 $$ for (Floor floor : floorSet.getFloorsList()) -->Line_26 $$ floorDirectory = "levelset/" + floorSet.getName() + "/" + floor.getName() + "/"[ FD ]
Line_23 $$ ZipEntry entry-->Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())[ FD ]
Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())-->Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())[ FD ]
Line_27 $$ for (MapType type : MapType.values()) -->Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())[ FD ]
Line_23 $$ ZipEntry entry-->Line_29 $$ entry.setMethod(ZipEntry.DEFLATED)[ FD ]
Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())-->Line_29 $$ entry.setMethod(ZipEntry.DEFLATED)[ FD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_30 $$ zoStream.putNextEntry(entry)[ FD ]
Line_23 $$ ZipEntry entry-->Line_30 $$ zoStream.putNextEntry(entry)[ FD ]
Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())-->Line_30 $$ zoStream.putNextEntry(entry)[ FD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_31 $$ ImageIO.write(floor.getMap(type).getImage(), "png", zoStream)[ FD ]
Line_25 $$ for (Floor floor : floorSet.getFloorsList()) -->Line_31 $$ ImageIO.write(floor.getMap(type).getImage(), "png", zoStream)[ FD ]
Line_27 $$ for (MapType type : MapType.values()) -->Line_31 $$ ImageIO.write(floor.getMap(type).getImage(), "png", zoStream)[ FD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_35 $$ for (Tile tile : project.getTileSet().getTilesList()) for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ CD ]
Line_35 $$ for (Tile tile : project.getTileSet().getTilesList()) for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ CD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ CD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ if (tile.getTexture(textureIndex) != null) [ CD ]
Line_35 $$ for (Tile tile : project.getTileSet().getTilesList()) for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ if (tile.getTexture(textureIndex) != null) -->Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")[ CD ]
Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")-->Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")[ FD ]
Line_23 $$ ZipEntry entry-->Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")[ FD ]
Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())-->Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")[ FD ]
Line_35 $$ for (Tile tile : project.getTileSet().getTilesList()) for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")[ FD ]
Line_35 $$ if (tile.getTexture(textureIndex) != null) -->Line_37 $$ entry.setMethod(ZipEntry.DEFLATED)[ CD ]
Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")-->Line_37 $$ entry.setMethod(ZipEntry.DEFLATED)[ FD ]
Line_23 $$ ZipEntry entry-->Line_37 $$ entry.setMethod(ZipEntry.DEFLATED)[ FD ]
Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())-->Line_37 $$ entry.setMethod(ZipEntry.DEFLATED)[ FD ]
Line_35 $$ if (tile.getTexture(textureIndex) != null) -->Line_38 $$ zoStream.putNextEntry(entry)[ CD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_38 $$ zoStream.putNextEntry(entry)[ FD ]
Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")-->Line_38 $$ zoStream.putNextEntry(entry)[ FD ]
Line_23 $$ ZipEntry entry-->Line_38 $$ zoStream.putNextEntry(entry)[ FD ]
Line_28 $$ entry = new ZipEntry(floorDirectory + type.getFilename())-->Line_38 $$ zoStream.putNextEntry(entry)[ FD ]
Line_35 $$ if (tile.getTexture(textureIndex) != null) -->Line_39 $$ ImageIO.write(tile.getTexture(textureIndex), "png", zoStream)[ CD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_39 $$ ImageIO.write(tile.getTexture(textureIndex), "png", zoStream)[ FD ]
Line_35 $$ for (Tile tile : project.getTileSet().getTilesList()) for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_39 $$ ImageIO.write(tile.getTexture(textureIndex), "png", zoStream)[ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_39 $$ ImageIO.write(tile.getTexture(textureIndex), "png", zoStream)[ FD ]
Line_10 $$ ZipOutputStream zoStream = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(file)))-->Line_41 $$ zoStream.close()[ FD ]
Line_9 $$ File tmpFile = File.createTempFile("JFPSM", ".tmp")-->Line_42 $$ tmpFile.delete()[ FD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_44 $$ throw new RuntimeException("The project " + project.getName() + " cannot be saved!", ioe)[ FD ]
Line_2 $$ final void saveProject(Project project, final File file) -->Line_47 $$ throw new IllegalArgumentException("The project " + project.getName() + " is not handled by this project set!")[ FD ]
Line_21 $$ while ((bytesIn = fis.read(readBuffer)) != -1) zoStream.write(readBuffer, 0, bytesIn)-->Line_21 $$ zoStream.write(readBuffer, 0, bytesIn)[ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) [ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_35 $$ if (tile.getTexture(textureIndex) != null) [ FD ]
Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")-->Line_37 $$ entry.setMethod(ZipEntry.DEFLATED)[ FD ]
Line_36 $$ entry = new ZipEntry(tileDirectory + tile.getName() + textureIndex + ".png")-->Line_38 $$ zoStream.putNextEntry(entry)[ FD ]
Line_35 $$ for (int textureIndex = 0; textureIndex < tile.getMaxTextureCount(); textureIndex++) if (tile.getTexture(textureIndex) != null) -->Line_39 $$ ImageIO.write(tile.getTexture(textureIndex), "png", zoStream)[ FD ]
