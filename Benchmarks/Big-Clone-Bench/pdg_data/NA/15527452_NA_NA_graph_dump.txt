Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void copy(File source, File dest) throws IOException [ CD ]
Line_2 $$ public static void copy(File source, File dest) throws IOException -->Line_3 $$ if (dest.isDirectory()) [ CD ]
Line_2 $$ public static void copy(File source, File dest) throws IOException -->Line_3 $$ if (dest.isDirectory()) [ FD ]
Line_3 $$ if (dest.isDirectory()) -->Line_3 $$ if (dest.isDirectory()) [ CD ]
Line_2 $$ public static void copy(File source, File dest) throws IOException -->Line_3 $$ if (dest.isDirectory()) [ FD ]
Line_3 $$ if (dest.isDirectory()) -->Line_4 $$ dest = new File(dest + File.separator + source.getName())[ CD ]
Line_2 $$ public static void copy(File source, File dest) throws IOException -->Line_4 $$ dest = new File(dest + File.separator + source.getName())[ FD ]
Line_4 $$ dest = new File(dest + File.separator + source.getName())-->Line_4 $$ dest = new File(dest + File.separator + source.getName())[ FD ]
Line_2 $$ public static void copy(File source, File dest) throws IOException -->Line_4 $$ dest = new File(dest + File.separator + source.getName())[ FD ]
Line_2 $$ public static void copy(File source, File dest) throws IOException -->Line_6 $$ FileChannel in = null, out = null[ CD ]
Line_6 $$ FileChannel in = null, out = null-->Line_8 $$ in = new FileInputStream(source).getChannel()[ FD ]
Line_8 $$ in = new FileInputStream(source).getChannel()-->Line_8 $$ in = new FileInputStream(source).getChannel()[ FD ]
Line_8 $$ in = new FileInputStream(source).getChannel()-->Line_8 $$ in = new FileInputStream(source).getChannel()[ CD ]
Line_6 $$ FileChannel in = null, out = null-->Line_9 $$ out = new FileOutputStream(dest).getChannel()[ FD ]
Line_9 $$ out = new FileOutputStream(dest).getChannel()-->Line_9 $$ out = new FileOutputStream(dest).getChannel()[ FD ]
Line_9 $$ out = new FileOutputStream(dest).getChannel()-->Line_9 $$ out = new FileOutputStream(dest).getChannel()[ CD ]
Line_10 $$ long size = in.size()-->Line_10 $$ long size = in.size()[ CD ]
Line_6 $$ FileChannel in = null, out = null-->Line_10 $$ long size = in.size()[ FD ]
Line_8 $$ in = new FileInputStream(source).getChannel()-->Line_10 $$ long size = in.size()[ FD ]
Line_11 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_11 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ CD ]
Line_6 $$ FileChannel in = null, out = null-->Line_11 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_8 $$ in = new FileInputStream(source).getChannel()-->Line_11 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_10 $$ long size = in.size()-->Line_11 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_6 $$ FileChannel in = null, out = null-->Line_12 $$ out.write(buf)[ FD ]
Line_9 $$ out = new FileOutputStream(dest).getChannel()-->Line_12 $$ out.write(buf)[ FD ]
Line_11 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_12 $$ out.write(buf)[ FD ]
Line_6 $$ FileChannel in = null, out = null-->Line_14 $$ if (in != null)[ FD ]
Line_8 $$ in = new FileInputStream(source).getChannel()-->Line_14 $$ if (in != null)[ FD ]
Line_14 $$ if (in != null)-->Line_14 $$ in.close()[ CD ]
Line_6 $$ FileChannel in = null, out = null-->Line_14 $$ in.close()[ FD ]
Line_8 $$ in = new FileInputStream(source).getChannel()-->Line_14 $$ in.close()[ FD ]
Line_6 $$ FileChannel in = null, out = null-->Line_15 $$ if (out != null)[ FD ]
Line_9 $$ out = new FileOutputStream(dest).getChannel()-->Line_15 $$ if (out != null)[ FD ]
Line_15 $$ if (out != null)-->Line_15 $$ out.close()[ CD ]
Line_6 $$ FileChannel in = null, out = null-->Line_15 $$ out.close()[ FD ]
Line_9 $$ out = new FileOutputStream(dest).getChannel()-->Line_15 $$ out.close()[ FD ]
