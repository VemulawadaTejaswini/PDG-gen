Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String[] getPamFiles() throws IOException [ CD ]
Line_2 $$ private String[] getPamFiles() throws IOException -->Line_3 $$ URL url = WorkflowStructure.class.getResource("/de/ibis/permoto/loganalyzer/pam")[ CD ]
Line_3 $$ URL url = WorkflowStructure.class.getResource("/de/ibis/permoto/loganalyzer/pam")-->Line_3 $$ URL url = WorkflowStructure.class.getResource("/de/ibis/permoto/loganalyzer/pam")[ CD ]
Line_2 $$ private String[] getPamFiles() throws IOException -->Line_4 $$ Set<String> result = new LinkedHashSet<String>(8)[ CD ]
Line_2 $$ private String[] getPamFiles() throws IOException -->Line_5 $$ if (url.getProtocol().equals("jar")) [ CD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_5 $$ if (url.getProtocol().equals("jar")) [ CD ]
Line_3 $$ URL url = WorkflowStructure.class.getResource("/de/ibis/permoto/loganalyzer/pam")-->Line_5 $$ if (url.getProtocol().equals("jar")) [ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_6 $$ URLConnection con = url.openConnection()[ CD ]
Line_6 $$ URLConnection con = url.openConnection()-->Line_6 $$ URLConnection con = url.openConnection()[ CD ]
Line_3 $$ URL url = WorkflowStructure.class.getResource("/de/ibis/permoto/loganalyzer/pam")-->Line_6 $$ URLConnection con = url.openConnection()[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_7 $$ JarURLConnection jarCon = (JarURLConnection) con[ CD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_8 $$ JarFile jarFile = jarCon.getJarFile()[ CD ]
Line_8 $$ JarFile jarFile = jarCon.getJarFile()-->Line_8 $$ JarFile jarFile = jarCon.getJarFile()[ CD ]
Line_7 $$ JarURLConnection jarCon = (JarURLConnection) con-->Line_8 $$ JarFile jarFile = jarCon.getJarFile()[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_9 $$ JarEntry jarEntry = jarCon.getJarEntry()[ CD ]
Line_9 $$ JarEntry jarEntry = jarCon.getJarEntry()-->Line_9 $$ JarEntry jarEntry = jarCon.getJarEntry()[ CD ]
Line_7 $$ JarURLConnection jarCon = (JarURLConnection) con-->Line_9 $$ JarEntry jarEntry = jarCon.getJarEntry()[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_10 $$ String rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")[ CD ]
Line_9 $$ JarEntry jarEntry = jarCon.getJarEntry()-->Line_10 $$ String rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_11 $$ rootEntryPath = rootEntryPath + "/"[ CD ]
Line_10 $$ String rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")-->Line_11 $$ rootEntryPath = rootEntryPath + "/"[ FD ]
Line_11 $$ rootEntryPath = rootEntryPath + "/"-->Line_11 $$ rootEntryPath = rootEntryPath + "/"[ FD ]
Line_10 $$ String rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")-->Line_11 $$ rootEntryPath = rootEntryPath + "/"[ FD ]
Line_11 $$ rootEntryPath = rootEntryPath + "/"-->Line_11 $$ rootEntryPath = rootEntryPath + "/"[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) [ CD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_5 $$ if (url.getProtocol().equals("jar")) [ CD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) [ CD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) [ CD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) [ CD ]
Line_8 $$ JarFile jarFile = jarCon.getJarFile()-->Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) [ FD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_13 $$ JarEntry entry = entries.nextElement()[ CD ]
Line_13 $$ JarEntry entry = entries.nextElement()-->Line_13 $$ JarEntry entry = entries.nextElement()[ CD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_13 $$ JarEntry entry = entries.nextElement()[ FD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_14 $$ String entryPath = entry.getName()[ CD ]
Line_14 $$ String entryPath = entry.getName()-->Line_14 $$ String entryPath = entry.getName()[ CD ]
Line_13 $$ JarEntry entry = entries.nextElement()-->Line_14 $$ String entryPath = entry.getName()[ FD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ CD ]
Line_14 $$ String entryPath = entry.getName()-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_10 $$ String rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_11 $$ rootEntryPath = rootEntryPath + "/"-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_15 $$ if (entryPath.startsWith(rootEntryPath)) -->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ CD ]
Line_14 $$ String entryPath = entry.getName()-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_10 $$ String rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_11 $$ rootEntryPath = rootEntryPath + "/"-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_15 $$ if (entryPath.startsWith(rootEntryPath)) -->Line_16 $$ if (entryPath.endsWith(".pam")) [ CD ]
Line_14 $$ String entryPath = entry.getName()-->Line_16 $$ if (entryPath.endsWith(".pam")) [ FD ]
Line_16 $$ if (entryPath.endsWith(".pam")) -->Line_16 $$ if (entryPath.endsWith(".pam")) [ CD ]
Line_14 $$ String entryPath = entry.getName()-->Line_16 $$ if (entryPath.endsWith(".pam")) [ FD ]
Line_16 $$ if (entryPath.endsWith(".pam")) -->Line_17 $$ result.add("/" + entryPath)[ CD ]
Line_4 $$ Set<String> result = new LinkedHashSet<String>(8)-->Line_17 $$ result.add("/" + entryPath)[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_22 $$ String rootEntryPath = url.getFile()[ CD ]
Line_3 $$ URL url = WorkflowStructure.class.getResource("/de/ibis/permoto/loganalyzer/pam")-->Line_22 $$ String rootEntryPath = url.getFile()[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_23 $$ File dir = new File(url.getFile())[ CD ]
Line_3 $$ URL url = WorkflowStructure.class.getResource("/de/ibis/permoto/loganalyzer/pam")-->Line_23 $$ File dir = new File(url.getFile())[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_24 $$ File[] dirContents = dir.listFiles()[ CD ]
Line_24 $$ File[] dirContents = dir.listFiles()-->Line_24 $$ File[] dirContents = dir.listFiles()[ CD ]
Line_23 $$ File dir = new File(url.getFile())-->Line_24 $$ File[] dirContents = dir.listFiles()[ FD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_25 $$ for (int i = 0; i < dirContents.length; i++) [ CD ]
Line_5 $$ if (url.getProtocol().equals("jar")) -->Line_5 $$ if (url.getProtocol().equals("jar")) [ CD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_25 $$ for (int i = 0; i < dirContents.length; i++) [ CD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_25 $$ for (int i = 0; i < dirContents.length; i++) [ CD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_25 $$ for (int i = 0; i < dirContents.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_26 $$ File content = dirContents[i][ CD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_27 $$ if (content.getName().endsWith(".pam")) [ CD ]
Line_27 $$ if (content.getName().endsWith(".pam")) -->Line_27 $$ if (content.getName().endsWith(".pam")) [ CD ]
Line_26 $$ File content = dirContents[i]-->Line_27 $$ if (content.getName().endsWith(".pam")) [ FD ]
Line_27 $$ if (content.getName().endsWith(".pam")) -->Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())[ CD ]
Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())-->Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())[ CD ]
Line_26 $$ File content = dirContents[i]-->Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())[ FD ]
Line_10 $$ String rootEntryPath = (jarEntry != null ? jarEntry.getName() : "")-->Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())[ FD ]
Line_11 $$ rootEntryPath = rootEntryPath + "/"-->Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())[ FD ]
Line_27 $$ if (content.getName().endsWith(".pam")) -->Line_29 $$ result.add("/de/ibis/permoto/loganalyzer/pam/" + relativePath.replace(File.separatorChar, '/'))[ CD ]
Line_4 $$ Set<String> result = new LinkedHashSet<String>(8)-->Line_29 $$ result.add("/de/ibis/permoto/loganalyzer/pam/" + relativePath.replace(File.separatorChar, '/'))[ FD ]
Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())-->Line_29 $$ result.add("/de/ibis/permoto/loganalyzer/pam/" + relativePath.replace(File.separatorChar, '/'))[ FD ]
Line_2 $$ private String[] getPamFiles() throws IOException -->Line_33 $$ return result.toArray(new String[result.size()])[ CD ]
Line_33 $$ return result.toArray(new String[result.size()])-->Line_33 $$ return result.toArray(new String[result.size()])[ CD ]
Line_4 $$ Set<String> result = new LinkedHashSet<String>(8)-->Line_33 $$ return result.toArray(new String[result.size()])[ FD ]
Line_4 $$ Set<String> result = new LinkedHashSet<String>(8)-->Line_33 $$ return result.toArray(new String[result.size()])[ FD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) [ FD ]
Line_12 $$ for (Enumeration<JarEntry> entries = jarFile.entries(); entries.hasMoreElements(); ) -->Line_13 $$ JarEntry entry = entries.nextElement()[ FD ]
Line_13 $$ JarEntry entry = entries.nextElement()-->Line_14 $$ String entryPath = entry.getName()[ FD ]
Line_14 $$ String entryPath = entry.getName()-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_14 $$ String entryPath = entry.getName()-->Line_15 $$ if (entryPath.startsWith(rootEntryPath)) [ FD ]
Line_14 $$ String entryPath = entry.getName()-->Line_16 $$ if (entryPath.endsWith(".pam")) [ FD ]
Line_14 $$ String entryPath = entry.getName()-->Line_16 $$ if (entryPath.endsWith(".pam")) [ FD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_25 $$ for (int i = 0; i < dirContents.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_25 $$ for (int i = 0; i < dirContents.length; i++) [ FD ]
Line_25 $$ for (int i = 0; i < dirContents.length; i++) -->Line_25 $$ for (int i = 0; i < dirContents.length; i++) [ FD ]
Line_26 $$ File content = dirContents[i]-->Line_27 $$ if (content.getName().endsWith(".pam")) [ FD ]
Line_26 $$ File content = dirContents[i]-->Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())[ FD ]
Line_28 $$ String relativePath = content.getAbsolutePath().substring(rootEntryPath.length())-->Line_29 $$ result.add("/de/ibis/permoto/loganalyzer/pam/" + relativePath.replace(File.separatorChar, '/'))[ FD ]
