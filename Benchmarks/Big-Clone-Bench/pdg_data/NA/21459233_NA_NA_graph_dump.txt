Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception [ CD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_3 $$ pm.beginTask("Creating temp project", 1)[ CD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_3 $$ pm.beginTask("Creating temp project", 1)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_4 $$ IPath destination = new Path(pName)[ CD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_5 $$ IJavaProject oldJavaproj = JavaCore.create(project)[ CD ]
Line_5 $$ IJavaProject oldJavaproj = JavaCore.create(project)-->Line_5 $$ IJavaProject oldJavaproj = JavaCore.create(project)[ CD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_5 $$ IJavaProject oldJavaproj = JavaCore.create(project)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_6 $$ IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()[ CD ]
Line_6 $$ IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()-->Line_6 $$ IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()[ CD ]
Line_5 $$ IJavaProject oldJavaproj = JavaCore.create(project)-->Line_6 $$ IClasspathEntry[] classPath = oldJavaproj.getRawClasspath()[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)[ CD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_8 $$ newProject.create(null)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_8 $$ newProject.create(null)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_9 $$ newProject.open(null)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_9 $$ newProject.open(null)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_10 $$ IProjectDescription desc = newProject.getDescription()[ CD ]
Line_10 $$ IProjectDescription desc = newProject.getDescription()-->Line_10 $$ IProjectDescription desc = newProject.getDescription()[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_10 $$ IProjectDescription desc = newProject.getDescription()[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_11 $$ desc.setNatureIds(new String[] [ CD ]
Line_10 $$ IProjectDescription desc = newProject.getDescription()-->Line_11 $$ desc.setNatureIds(new String[] [ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_12 $$ newProject.setDescription(desc, null)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_12 $$ newProject.setDescription(desc, null)[ FD ]
Line_10 $$ IProjectDescription desc = newProject.getDescription()-->Line_12 $$ newProject.setDescription(desc, null)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()[ CD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_15 $$ switch(cEntry.getEntryKind()) [ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_17 $$ System.out.println("Source folder " + cEntry.getPath())[ FD ]
Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_18 $$ newClassPath.add(copySourceFolder(project, newProject, cEntry, destination))[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_18 $$ newClassPath.add(copySourceFolder(project, newProject, cEntry, destination))[ FD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_18 $$ newClassPath.add(copySourceFolder(project, newProject, cEntry, destination))[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_18 $$ newClassPath.add(copySourceFolder(project, newProject, cEntry, destination))[ FD ]
Line_4 $$ IPath destination = new Path(pName)-->Line_18 $$ newClassPath.add(copySourceFolder(project, newProject, cEntry, destination))[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_21 $$ System.out.println("library folder " + cEntry.getPath())[ FD ]
Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_22 $$ newClassPath.add(cEntry)[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_22 $$ newClassPath.add(cEntry)[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_25 $$ System.out.println("project folder " + cEntry.getPath())[ FD ]
Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_26 $$ newClassPath.add(cEntry)[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_26 $$ newClassPath.add(cEntry)[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_29 $$ System.out.println("variable folder " + cEntry.getPath())[ FD ]
Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_30 $$ newClassPath.add(cEntry)[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_30 $$ newClassPath.add(cEntry)[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_33 $$ System.out.println("container folder " + cEntry.getPath())[ FD ]
Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_34 $$ newClassPath.add(cEntry)[ FD ]
Line_14 $$ for (IClasspathEntry cEntry : classPath) -->Line_34 $$ newClassPath.add(cEntry)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_37 $$ copyDir(project.getLocation().toString(), "/translator", newProject.getLocation().toString(), "", new ArrayList<String>() [ CD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_37 $$ copyDir(project.getLocation().toString(), "/translator", newProject.getLocation().toString(), "", new ArrayList<String>() [ FD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_37 $$ copyDir(project.getLocation().toString(), "/translator", newProject.getLocation().toString(), "", new ArrayList<String>() [ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_44 $$ newProject.refreshLocal(IResource.DEPTH_INFINITE, pm)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_44 $$ newProject.refreshLocal(IResource.DEPTH_INFINITE, pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_44 $$ newProject.refreshLocal(IResource.DEPTH_INFINITE, pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_45 $$ newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_45 $$ newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_45 $$ newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_46 $$ newProject.touch(pm)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_46 $$ newProject.touch(pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_46 $$ newProject.touch(pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)[ CD ]
Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)-->Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)[ CD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_48 $$ javaproj.setOutputLocation(new Path("/" + newProject.getName() + "/classes/bin"), null)[ CD ]
Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)-->Line_48 $$ javaproj.setOutputLocation(new Path("/" + newProject.getName() + "/classes/bin"), null)[ FD ]
Line_7 $$ IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName)-->Line_48 $$ javaproj.setOutputLocation(new Path("/" + newProject.getName() + "/classes/bin"), null)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_49 $$ javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm)[ CD ]
Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)-->Line_49 $$ javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_49 $$ javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm)[ FD ]
Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_49 $$ javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm)[ FD ]
Line_13 $$ List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>()-->Line_49 $$ javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_50 $$ Map opts = oldJavaproj.getOptions(true)[ CD ]
Line_50 $$ Map opts = oldJavaproj.getOptions(true)-->Line_50 $$ Map opts = oldJavaproj.getOptions(true)[ CD ]
Line_5 $$ IJavaProject oldJavaproj = JavaCore.create(project)-->Line_50 $$ Map opts = oldJavaproj.getOptions(true)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_51 $$ javaproj.setOptions(opts)[ CD ]
Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)-->Line_51 $$ javaproj.setOptions(opts)[ FD ]
Line_50 $$ Map opts = oldJavaproj.getOptions(true)-->Line_51 $$ javaproj.setOptions(opts)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_52 $$ javaproj.makeConsistent(pm)[ CD ]
Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)-->Line_52 $$ javaproj.makeConsistent(pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_52 $$ javaproj.makeConsistent(pm)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_53 $$ javaproj.save(pm, true)[ CD ]
Line_47 $$ IJavaProject javaproj = JavaCore.create(newProject)-->Line_53 $$ javaproj.save(pm, true)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_53 $$ javaproj.save(pm, true)[ FD ]
Line_2 $$ private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception -->Line_54 $$ return newProject[ CD ]
