Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException [ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_3 $$ if (AGENT != null) [ CD ]
Line_3 $$ if (AGENT != null) -->Line_4 $$ hr.addHeader("User-Agent", AGENT)[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_4 $$ hr.addHeader("User-Agent", AGENT)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_6 $$ if (headers != null) [ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_6 $$ if (headers != null) [ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_7 $$ for (String name : headers.keySet()) [ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_8 $$ hr.addHeader(name, headers.get(name))[ FD ]
Line_7 $$ for (String name : headers.keySet()) -->Line_8 $$ hr.addHeader(name, headers.get(name))[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_8 $$ hr.addHeader(name, headers.get(name))[ FD ]
Line_7 $$ for (String name : headers.keySet()) -->Line_8 $$ hr.addHeader(name, headers.get(name))[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_11 $$ if (GZIP && headers == null || !headers.containsKey("Accept-Encoding")) [ CD ]
Line_11 $$ if (GZIP && headers == null || !headers.containsKey("Accept-Encoding")) -->Line_11 $$ if (GZIP && headers == null || !headers.containsKey("Accept-Encoding")) [ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_11 $$ if (GZIP && headers == null || !headers.containsKey("Accept-Encoding")) [ FD ]
Line_11 $$ if (GZIP && headers == null || !headers.containsKey("Accept-Encoding")) -->Line_12 $$ hr.addHeader("Accept-Encoding", "gzip")[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_12 $$ hr.addHeader("Accept-Encoding", "gzip")[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_14 $$ String cookie = makeCookie()[ CD ]
Line_14 $$ String cookie = makeCookie()-->Line_14 $$ String cookie = makeCookie()[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_15 $$ if (cookie != null) [ CD ]
Line_14 $$ String cookie = makeCookie()-->Line_15 $$ if (cookie != null) [ FD ]
Line_15 $$ if (cookie != null) -->Line_16 $$ hr.addHeader("Cookie", cookie)[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_16 $$ hr.addHeader("Cookie", cookie)[ FD ]
Line_14 $$ String cookie = makeCookie()-->Line_16 $$ hr.addHeader("Cookie", cookie)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_18 $$ if (ah != null) [ CD ]
Line_18 $$ if (ah != null) -->Line_19 $$ ah.applyToken(this, hr)[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_19 $$ ah.applyToken(this, hr)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_21 $$ DefaultHttpClient client = getClient()[ CD ]
Line_21 $$ DefaultHttpClient client = getClient()-->Line_21 $$ DefaultHttpClient client = getClient()[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_22 $$ HttpContext context = new BasicHttpContext()[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_23 $$ CookieStore cookieStore = new BasicCookieStore()[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_24 $$ context.setAttribute(ClientContext.COOKIE_STORE, cookieStore)[ CD ]
Line_22 $$ HttpContext context = new BasicHttpContext()-->Line_24 $$ context.setAttribute(ClientContext.COOKIE_STORE, cookieStore)[ FD ]
Line_23 $$ CookieStore cookieStore = new BasicCookieStore()-->Line_24 $$ context.setAttribute(ClientContext.COOKIE_STORE, cookieStore)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_25 $$ HttpResponse response = client.execute(hr, context)[ CD ]
Line_25 $$ HttpResponse response = client.execute(hr, context)-->Line_25 $$ HttpResponse response = client.execute(hr, context)[ CD ]
Line_21 $$ DefaultHttpClient client = getClient()-->Line_25 $$ HttpResponse response = client.execute(hr, context)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_25 $$ HttpResponse response = client.execute(hr, context)[ FD ]
Line_22 $$ HttpContext context = new BasicHttpContext()-->Line_25 $$ HttpResponse response = client.execute(hr, context)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_26 $$ byte[] data = null[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_27 $$ String redirect = url[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_28 $$ int code = response.getStatusLine().getStatusCode()[ CD ]
Line_28 $$ int code = response.getStatusLine().getStatusCode()-->Line_28 $$ int code = response.getStatusLine().getStatusCode()[ CD ]
Line_25 $$ HttpResponse response = client.execute(hr, context)-->Line_28 $$ int code = response.getStatusLine().getStatusCode()[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_29 $$ String message = response.getStatusLine().getReasonPhrase()[ CD ]
Line_29 $$ String message = response.getStatusLine().getReasonPhrase()-->Line_29 $$ String message = response.getStatusLine().getReasonPhrase()[ CD ]
Line_25 $$ HttpResponse response = client.execute(hr, context)-->Line_29 $$ String message = response.getStatusLine().getReasonPhrase()[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_30 $$ String error = null[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_31 $$ if (code < 200 || code >= 300) [ CD ]
Line_33 $$ HttpEntity entity = response.getEntity()-->Line_33 $$ HttpEntity entity = response.getEntity()[ CD ]
Line_25 $$ HttpResponse response = client.execute(hr, context)-->Line_33 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_34 $$ byte[] s = AQUtility.toBytes(entity.getContent())-->Line_34 $$ byte[] s = AQUtility.toBytes(entity.getContent())[ CD ]
Line_33 $$ HttpEntity entity = response.getEntity()-->Line_34 $$ byte[] s = AQUtility.toBytes(entity.getContent())[ FD ]
Line_30 $$ String error = null-->Line_35 $$ error = new String(s, "UTF-8")[ FD ]
Line_35 $$ error = new String(s, "UTF-8")-->Line_35 $$ error = new String(s, "UTF-8")[ FD ]
Line_30 $$ String error = null-->Line_36 $$ AQUtility.debug("error", error)[ FD ]
Line_35 $$ error = new String(s, "UTF-8")-->Line_36 $$ AQUtility.debug("error", error)[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_41 $$ HttpEntity entity = response.getEntity()[ CD ]
Line_25 $$ HttpResponse response = client.execute(hr, context)-->Line_41 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_42 $$ HttpHost currentHost = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST)[ CD ]
Line_22 $$ HttpContext context = new BasicHttpContext()-->Line_42 $$ HttpHost currentHost = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST)[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_43 $$ HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST)[ CD ]
Line_22 $$ HttpContext context = new BasicHttpContext()-->Line_43 $$ HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST)[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_44 $$ redirect = currentHost.toURI() + currentReq.getURI()[ CD ]
Line_27 $$ String redirect = url-->Line_44 $$ redirect = currentHost.toURI() + currentReq.getURI()[ FD ]
Line_44 $$ redirect = currentHost.toURI() + currentReq.getURI()-->Line_44 $$ redirect = currentHost.toURI() + currentReq.getURI()[ FD ]
Line_42 $$ HttpHost currentHost = (HttpHost) context.getAttribute(ExecutionContext.HTTP_TARGET_HOST)-->Line_44 $$ redirect = currentHost.toURI() + currentReq.getURI()[ FD ]
Line_43 $$ HttpUriRequest currentReq = (HttpUriRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST)-->Line_44 $$ redirect = currentHost.toURI() + currentReq.getURI()[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_45 $$ int size = Math.max(32, Math.min(1024 * 64, (int) entity.getContentLength()))[ CD ]
Line_45 $$ int size = Math.max(32, Math.min(1024 * 64, (int) entity.getContentLength()))-->Line_45 $$ int size = Math.max(32, Math.min(1024 * 64, (int) entity.getContentLength()))[ CD ]
Line_33 $$ HttpEntity entity = response.getEntity()-->Line_45 $$ int size = Math.max(32, Math.min(1024 * 64, (int) entity.getContentLength()))[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_46 $$ PredefinedBAOS baos = new PredefinedBAOS(size)[ CD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_47 $$ Header encoding = entity.getContentEncoding()[ CD ]
Line_47 $$ Header encoding = entity.getContentEncoding()-->Line_47 $$ Header encoding = entity.getContentEncoding()[ CD ]
Line_33 $$ HttpEntity entity = response.getEntity()-->Line_47 $$ Header encoding = entity.getContentEncoding()[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_48 $$ if (encoding != null && encoding.getValue().equalsIgnoreCase("gzip")) [ CD ]
Line_47 $$ Header encoding = entity.getContentEncoding()-->Line_48 $$ if (encoding != null && encoding.getValue().equalsIgnoreCase("gzip")) [ FD ]
Line_48 $$ if (encoding != null && encoding.getValue().equalsIgnoreCase("gzip")) -->Line_49 $$ InputStream is = new GZIPInputStream(entity.getContent())[ CD ]
Line_33 $$ HttpEntity entity = response.getEntity()-->Line_49 $$ InputStream is = new GZIPInputStream(entity.getContent())[ FD ]
Line_48 $$ if (encoding != null && encoding.getValue().equalsIgnoreCase("gzip")) -->Line_50 $$ AQUtility.copy(is, baos)[ CD ]
Line_49 $$ InputStream is = new GZIPInputStream(entity.getContent())-->Line_50 $$ AQUtility.copy(is, baos)[ FD ]
Line_46 $$ PredefinedBAOS baos = new PredefinedBAOS(size)-->Line_50 $$ AQUtility.copy(is, baos)[ FD ]
Line_48 $$ if (encoding != null && encoding.getValue().equalsIgnoreCase("gzip")) -->Line_52 $$ entity.writeTo(baos)[ CD ]
Line_33 $$ HttpEntity entity = response.getEntity()-->Line_52 $$ entity.writeTo(baos)[ FD ]
Line_46 $$ PredefinedBAOS baos = new PredefinedBAOS(size)-->Line_52 $$ entity.writeTo(baos)[ FD ]
Line_31 $$ if (code < 200 || code >= 300) -->Line_54 $$ data = baos.toByteArray()[ CD ]
Line_26 $$ byte[] data = null-->Line_54 $$ data = baos.toByteArray()[ FD ]
Line_54 $$ data = baos.toByteArray()-->Line_54 $$ data = baos.toByteArray()[ FD ]
Line_54 $$ data = baos.toByteArray()-->Line_54 $$ data = baos.toByteArray()[ CD ]
Line_46 $$ PredefinedBAOS baos = new PredefinedBAOS(size)-->Line_54 $$ data = baos.toByteArray()[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_56 $$ AQUtility.debug("response", code)[ CD ]
Line_28 $$ int code = response.getStatusLine().getStatusCode()-->Line_56 $$ AQUtility.debug("response", code)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_57 $$ if (data != null) [ CD ]
Line_26 $$ byte[] data = null-->Line_57 $$ if (data != null) [ FD ]
Line_54 $$ data = baos.toByteArray()-->Line_57 $$ if (data != null) [ FD ]
Line_57 $$ if (data != null) -->Line_58 $$ AQUtility.debug(data.length, url)[ CD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_58 $$ AQUtility.debug(data.length, url)[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ CD ]
Line_22 $$ HttpContext context = new BasicHttpContext()-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_21 $$ DefaultHttpClient client = getClient()-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_26 $$ byte[] data = null-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_54 $$ data = baos.toByteArray()-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_27 $$ String redirect = url-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_44 $$ redirect = currentHost.toURI() + currentReq.getURI()-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_30 $$ String error = null-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_35 $$ error = new String(s, "UTF-8")-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_29 $$ String message = response.getStatusLine().getReasonPhrase()-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_2 $$ private void httpDo(HttpUriRequest hr, String url, Map<String, String> headers, AjaxStatus status) throws ClientProtocolException, IOException -->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_28 $$ int code = response.getStatusLine().getStatusCode()-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
Line_25 $$ HttpResponse response = client.execute(hr, context)-->Line_60 $$ status.code(code).message(message).error(error).redirect(redirect).time(new Date()).data(data).client(client).context(context).headers(response.getAllHeaders())[ FD ]
