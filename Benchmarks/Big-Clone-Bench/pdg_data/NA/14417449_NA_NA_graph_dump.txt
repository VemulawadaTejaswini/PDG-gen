Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void compressAll(File dir, File file) throws IOException [ CD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_3 $$ if (!dir.isDirectory())[ CD ]
Line_3 $$ if (!dir.isDirectory())-->Line_3 $$ if (!dir.isDirectory())[ CD ]
Line_3 $$ if (!dir.isDirectory())-->Line_3 $$ if (!dir.isDirectory())[ CD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_3 $$ if (!dir.isDirectory())[ FD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_4 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file))[ CD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_5 $$ out.setLevel(0)[ CD ]
Line_4 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file))-->Line_5 $$ out.setLevel(0)[ FD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_6 $$ String[] entries = dir.list()[ CD ]
Line_6 $$ String[] entries = dir.list()-->Line_6 $$ String[] entries = dir.list()[ CD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_6 $$ String[] entries = dir.list()[ FD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_7 $$ byte[] buffer = new byte[4096][ CD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_8 $$ int bytesRead[ CD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_2 $$ public static void compressAll(File dir, File file) throws IOException [ CD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_10 $$ File f = new File(dir, entries[i])[ CD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_11 $$ if (f.isDirectory())[ CD ]
Line_10 $$ File f = new File(dir, entries[i])-->Line_11 $$ if (f.isDirectory())[ FD ]
Line_11 $$ if (f.isDirectory())-->Line_11 $$ if (f.isDirectory())[ CD ]
Line_10 $$ File f = new File(dir, entries[i])-->Line_11 $$ if (f.isDirectory())[ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_12 $$ FileInputStream in = new FileInputStream(f)[ CD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_13 $$ ZipEntry entry = new ZipEntry(f.getName())[ CD ]
Line_10 $$ File f = new File(dir, entries[i])-->Line_13 $$ ZipEntry entry = new ZipEntry(f.getName())[ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_14 $$ out.putNextEntry(entry)[ CD ]
Line_4 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file))-->Line_14 $$ out.putNextEntry(entry)[ FD ]
Line_13 $$ ZipEntry entry = new ZipEntry(f.getName())-->Line_14 $$ out.putNextEntry(entry)[ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ CD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_8 $$ int bytesRead-->Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ CD ]
Line_12 $$ FileInputStream in = new FileInputStream(f)-->Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_7 $$ byte[] buffer = new byte[4096]-->Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)[ FD ]
Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_15 $$ out.write(buffer, 0, bytesRead)[ CD ]
Line_4 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file))-->Line_15 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_7 $$ byte[] buffer = new byte[4096]-->Line_15 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_15 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_8 $$ int bytesRead-->Line_15 $$ out.write(buffer, 0, bytesRead)[ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_16 $$ in.close()[ CD ]
Line_12 $$ FileInputStream in = new FileInputStream(f)-->Line_16 $$ in.close()[ FD ]
Line_2 $$ public static void compressAll(File dir, File file) throws IOException -->Line_18 $$ out.close()[ CD ]
Line_4 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file))-->Line_18 $$ out.close()[ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_9 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_10 $$ File f = new File(dir, entries[i])-->Line_11 $$ if (f.isDirectory())[ FD ]
Line_10 $$ File f = new File(dir, entries[i])-->Line_11 $$ if (f.isDirectory())[ FD ]
Line_10 $$ File f = new File(dir, entries[i])-->Line_13 $$ ZipEntry entry = new ZipEntry(f.getName())[ FD ]
Line_13 $$ ZipEntry entry = new ZipEntry(f.getName())-->Line_14 $$ out.putNextEntry(entry)[ FD ]
Line_12 $$ FileInputStream in = new FileInputStream(f)-->Line_16 $$ in.close()[ FD ]
Line_15 $$ while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead)-->Line_15 $$ out.write(buffer, 0, bytesRead)[ FD ]
