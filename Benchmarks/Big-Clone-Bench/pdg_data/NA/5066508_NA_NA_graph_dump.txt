Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException [ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_3 $$ if (key == null || fields == null)[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_6 $$ md.update(getKey())[ FD ]
Line_7 $$ int[] f = getFields(m)-->Line_7 $$ int[] f = getFields(m)[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_7 $$ int[] f = getFields(m)[ FD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_8 $$ for (int i = 0; i < f.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_8 $$ for (int i = 0; i < f.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_8 $$ for (int i = 0; i < f.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_9 $$ int fld = f[i][ CD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_10 $$ if (m.hasField(fld)) [ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_10 $$ if (m.hasField(fld)) [ FD ]
Line_9 $$ int fld = f[i]-->Line_10 $$ if (m.hasField(fld)) [ FD ]
Line_10 $$ if (m.hasField(fld)) -->Line_10 $$ if (m.hasField(fld)) [ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_10 $$ if (m.hasField(fld)) [ FD ]
Line_9 $$ int fld = f[i]-->Line_10 $$ if (m.hasField(fld)) [ FD ]
Line_10 $$ if (m.hasField(fld)) -->Line_11 $$ ISOComponent c = m.getComponent(fld)[ CD ]
Line_11 $$ ISOComponent c = m.getComponent(fld)-->Line_11 $$ ISOComponent c = m.getComponent(fld)[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_11 $$ ISOComponent c = m.getComponent(fld)[ FD ]
Line_9 $$ int fld = f[i]-->Line_11 $$ ISOComponent c = m.getComponent(fld)[ FD ]
Line_10 $$ if (m.hasField(fld)) -->Line_12 $$ if (c instanceof ISOBinaryField)[ CD ]
Line_11 $$ ISOComponent c = m.getComponent(fld)-->Line_12 $$ if (c instanceof ISOBinaryField)[ FD ]
Line_12 $$ if (c instanceof ISOBinaryField)-->Line_12 $$ md.update((byte[]) c.getValue())[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_12 $$ md.update((byte[]) c.getValue())[ FD ]
Line_11 $$ ISOComponent c = m.getComponent(fld)-->Line_12 $$ md.update((byte[]) c.getValue())[ FD ]
Line_12 $$ if (c instanceof ISOBinaryField)-->Line_12 $$ md.update(((String) c.getValue()).getBytes())[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_12 $$ md.update(((String) c.getValue()).getBytes())[ FD ]
Line_11 $$ ISOComponent c = m.getComponent(fld)-->Line_12 $$ md.update(((String) c.getValue()).getBytes())[ FD ]
Line_15 $$ byte[] digest = md.digest()-->Line_15 $$ byte[] digest = md.digest()[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_15 $$ byte[] digest = md.digest()[ FD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) [ FD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_17 $$ m.set(new ISOBinaryField(64, digest, 0, 8))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_17 $$ m.set(new ISOBinaryField(64, digest, 0, 8))[ FD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_18 $$ m.set(new ISOBinaryField(128, digest, 8, 8))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_18 $$ m.set(new ISOBinaryField(128, digest, 8, 8))[ FD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_20 $$ byte[] rxDigest = new byte[16][ CD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_21 $$ if (m.hasField(64))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_21 $$ if (m.hasField(64))[ FD ]
Line_21 $$ if (m.hasField(64))-->Line_21 $$ if (m.hasField(64))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_21 $$ if (m.hasField(64))[ FD ]
Line_21 $$ if (m.hasField(64))-->Line_21 $$ System.arraycopy((byte[]) m.getValue(64), 0, rxDigest, 0, 8)[ CD ]
Line_20 $$ byte[] rxDigest = new byte[16]-->Line_21 $$ System.arraycopy((byte[]) m.getValue(64), 0, rxDigest, 0, 8)[ FD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_21 $$ System.arraycopy((byte[]) m.getValue(64), 0, rxDigest, 0, 8)[ FD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_22 $$ if (m.hasField(128))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_22 $$ if (m.hasField(128))[ FD ]
Line_22 $$ if (m.hasField(128))-->Line_22 $$ if (m.hasField(128))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_22 $$ if (m.hasField(128))[ FD ]
Line_22 $$ if (m.hasField(128))-->Line_22 $$ System.arraycopy((byte[]) m.getValue(128), 0, rxDigest, 8, 8)[ CD ]
Line_20 $$ byte[] rxDigest = new byte[16]-->Line_22 $$ System.arraycopy((byte[]) m.getValue(128), 0, rxDigest, 8, 8)[ FD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_22 $$ System.arraycopy((byte[]) m.getValue(128), 0, rxDigest, 8, 8)[ FD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_23 $$ if (!Arrays.equals(digest, rxDigest)) [ CD ]
Line_23 $$ if (!Arrays.equals(digest, rxDigest)) -->Line_23 $$ if (!Arrays.equals(digest, rxDigest)) [ CD ]
Line_23 $$ if (!Arrays.equals(digest, rxDigest)) -->Line_23 $$ if (!Arrays.equals(digest, rxDigest)) [ CD ]
Line_15 $$ byte[] digest = md.digest()-->Line_23 $$ if (!Arrays.equals(digest, rxDigest)) [ FD ]
Line_20 $$ byte[] rxDigest = new byte[16]-->Line_23 $$ if (!Arrays.equals(digest, rxDigest)) [ FD ]
Line_23 $$ if (!Arrays.equals(digest, rxDigest)) -->Line_24 $$ evt.addMessage(m)[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_24 $$ evt.addMessage(m)[ FD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_24 $$ evt.addMessage(m)[ FD ]
Line_23 $$ if (!Arrays.equals(digest, rxDigest)) -->Line_25 $$ evt.addMessage("MAC expected: " + ISOUtil.hexString(digest))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_25 $$ evt.addMessage("MAC expected: " + ISOUtil.hexString(digest))[ FD ]
Line_15 $$ byte[] digest = md.digest()-->Line_25 $$ evt.addMessage("MAC expected: " + ISOUtil.hexString(digest))[ FD ]
Line_23 $$ if (!Arrays.equals(digest, rxDigest)) -->Line_26 $$ evt.addMessage("MAC received: " + ISOUtil.hexString(rxDigest))[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_26 $$ evt.addMessage("MAC received: " + ISOUtil.hexString(rxDigest))[ FD ]
Line_20 $$ byte[] rxDigest = new byte[16]-->Line_26 $$ evt.addMessage("MAC received: " + ISOUtil.hexString(rxDigest))[ FD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_29 $$ m.unset(64)[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_29 $$ m.unset(64)[ FD ]
Line_16 $$ if (m.getDirection() == ISOMsg.OUTGOING) -->Line_30 $$ m.unset(128)[ CD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_30 $$ m.unset(128)[ FD ]
Line_2 $$ public ISOMsg filter(ISOChannel channel, ISOMsg m, LogEvent evt) throws VetoException -->Line_37 $$ return m[ CD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_8 $$ for (int i = 0; i < f.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_8 $$ for (int i = 0; i < f.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < f.length; i++) -->Line_8 $$ for (int i = 0; i < f.length; i++) [ FD ]
Line_9 $$ int fld = f[i]-->Line_10 $$ if (m.hasField(fld)) [ FD ]
Line_9 $$ int fld = f[i]-->Line_10 $$ if (m.hasField(fld)) [ FD ]
Line_9 $$ int fld = f[i]-->Line_11 $$ ISOComponent c = m.getComponent(fld)[ FD ]
Line_11 $$ ISOComponent c = m.getComponent(fld)-->Line_12 $$ if (c instanceof ISOBinaryField)[ FD ]
Line_11 $$ ISOComponent c = m.getComponent(fld)-->Line_12 $$ md.update((byte[]) c.getValue())[ FD ]
Line_11 $$ ISOComponent c = m.getComponent(fld)-->Line_12 $$ md.update(((String) c.getValue()).getBytes())[ FD ]
