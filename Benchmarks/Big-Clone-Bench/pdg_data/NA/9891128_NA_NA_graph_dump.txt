Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void readIzvestiyaArticles() throws IOException [ CD ]
Line_2 $$ private static void readIzvestiyaArticles() throws IOException -->Line_3 $$ CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream("mathnet_izvestiya.csv")), ';')[ CD ]
Line_2 $$ private static void readIzvestiyaArticles() throws IOException -->Line_4 $$ reader.setTrimWhitespace(true)[ CD ]
Line_3 $$ CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream("mathnet_izvestiya.csv")), ';')-->Line_4 $$ reader.setTrimWhitespace(true)[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_6 $$ while (reader.readRecord()) [ CD ]
Line_3 $$ CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream("mathnet_izvestiya.csv")), ';')-->Line_6 $$ while (reader.readRecord()) [ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_7 $$ String id = reader.get(0)[ CD ]
Line_7 $$ String id = reader.get(0)-->Line_7 $$ String id = reader.get(0)[ CD ]
Line_3 $$ CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream("mathnet_izvestiya.csv")), ';')-->Line_7 $$ String id = reader.get(0)[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_8 $$ String filename = reader.get(1)[ CD ]
Line_8 $$ String filename = reader.get(1)-->Line_8 $$ String filename = reader.get(1)[ CD ]
Line_3 $$ CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream("mathnet_izvestiya.csv")), ';')-->Line_8 $$ String filename = reader.get(1)[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")[ CD ]
Line_6 $$ while (reader.readRecord()) -->Line_10 $$ String name = st.nextToken()[ CD ]
Line_10 $$ String name = st.nextToken()-->Line_10 $$ String name = st.nextToken()[ CD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_10 $$ String name = st.nextToken()[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_11 $$ String volume = st.nextToken()[ CD ]
Line_11 $$ String volume = st.nextToken()-->Line_11 $$ String volume = st.nextToken()[ CD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_11 $$ String volume = st.nextToken()[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_12 $$ String year = st.nextToken()[ CD ]
Line_12 $$ String year = st.nextToken()-->Line_12 $$ String year = st.nextToken()[ CD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_12 $$ String year = st.nextToken()[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_13 $$ String extension = st.nextToken()[ CD ]
Line_13 $$ String extension = st.nextToken()-->Line_13 $$ String extension = st.nextToken()[ CD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_13 $$ String extension = st.nextToken()[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ CD ]
Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ CD ]
Line_12 $$ String year = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_10 $$ String name = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_11 $$ String volume = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_13 $$ String extension = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_11 $$ String volume = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_6 $$ while (reader.readRecord()) -->Line_15 $$ id2filename.put(id, filepath)[ CD ]
Line_7 $$ String id = reader.get(0)-->Line_15 $$ id2filename.put(id, filepath)[ FD ]
Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)-->Line_15 $$ id2filename.put(id, filepath)[ FD ]
Line_3 $$ CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream("mathnet_izvestiya.csv")), ';')-->Line_18 $$ reader.close()[ FD ]
Line_21 $$ String filepath = String.format("%s/%s", INPUT_DIR, entry.getValue())-->Line_21 $$ String filepath = String.format("%s/%s", INPUT_DIR, entry.getValue())[ CD ]
Line_20 $$ for (Map.Entry<String, String> entry : id2filename.entrySet()) -->Line_21 $$ String filepath = String.format("%s/%s", INPUT_DIR, entry.getValue())[ FD ]
Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)-->Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")[ FD ]
Line_21 $$ String filepath = String.format("%s/%s", INPUT_DIR, entry.getValue())-->Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")[ FD ]
Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")-->Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")[ FD ]
Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)-->Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")[ FD ]
Line_21 $$ String filepath = String.format("%s/%s", INPUT_DIR, entry.getValue())-->Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")[ FD ]
Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")-->Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX")[ FD ]
Line_23 $$ if (new File(filepath).exists()) -->Line_23 $$ if (new File(filepath).exists()) [ CD ]
Line_23 $$ if (new File(filepath).exists()) -->Line_24 $$ InputStream in = new FileInputStream(filepath)[ CD ]
Line_23 $$ if (new File(filepath).exists()) -->Line_25 $$ FileOutputStream out = new FileOutputStream(String.format("%s/%s.tex", OUTPUT_DIR, entry.getKey()), false)[ CD ]
Line_20 $$ for (Map.Entry<String, String> entry : id2filename.entrySet()) -->Line_25 $$ FileOutputStream out = new FileOutputStream(String.format("%s/%s.tex", OUTPUT_DIR, entry.getKey()), false)[ FD ]
Line_24 $$ InputStream in = new FileInputStream(filepath)-->Line_27 $$ org.apache.commons.io.IOUtils.copy(in, out)[ FD ]
Line_25 $$ FileOutputStream out = new FileOutputStream(String.format("%s/%s.tex", OUTPUT_DIR, entry.getKey()), false)-->Line_27 $$ org.apache.commons.io.IOUtils.copy(in, out)[ FD ]
Line_24 $$ InputStream in = new FileInputStream(filepath)-->Line_29 $$ org.apache.commons.io.IOUtils.closeQuietly(in)[ FD ]
Line_25 $$ FileOutputStream out = new FileOutputStream(String.format("%s/%s.tex", OUTPUT_DIR, entry.getKey()), false)-->Line_30 $$ org.apache.commons.io.IOUtils.closeQuietly(out)[ FD ]
Line_23 $$ if (new File(filepath).exists()) -->Line_33 $$ logger.log(Level.INFO, "File with the path=" + filepath + " doesn't exist")[ CD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_10 $$ String name = st.nextToken()[ FD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_11 $$ String volume = st.nextToken()[ FD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_12 $$ String year = st.nextToken()[ FD ]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.")-->Line_13 $$ String extension = st.nextToken()[ FD ]
Line_12 $$ String year = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_10 $$ String name = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_11 $$ String volume = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_13 $$ String extension = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_11 $$ String volume = st.nextToken()-->Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)[ FD ]
Line_7 $$ String id = reader.get(0)-->Line_15 $$ id2filename.put(id, filepath)[ FD ]
Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension)-->Line_15 $$ id2filename.put(id, filepath)[ FD ]
