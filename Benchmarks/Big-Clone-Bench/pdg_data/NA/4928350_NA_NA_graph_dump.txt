Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException [ CD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_3 $$ AssertUtility.notNull(text)[ CD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_3 $$ AssertUtility.notNull(text)[ FD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_4 $$ AssertUtility.notNullAndNotSpace(algorithm)[ CD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_4 $$ AssertUtility.notNullAndNotSpace(algorithm)[ FD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_5 $$ String base64[ CD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_6 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ CD ]
Line_6 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_6 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ CD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_6 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ FD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_7 $$ md.update(text.getBytes())[ CD ]
Line_6 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_7 $$ md.update(text.getBytes())[ FD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_7 $$ md.update(text.getBytes())[ FD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_8 $$ base64 = new BASE64Encoder().encode(md.digest())[ CD ]
Line_5 $$ String base64-->Line_8 $$ base64 = new BASE64Encoder().encode(md.digest())[ FD ]
Line_8 $$ base64 = new BASE64Encoder().encode(md.digest())-->Line_8 $$ base64 = new BASE64Encoder().encode(md.digest())[ FD ]
Line_8 $$ base64 = new BASE64Encoder().encode(md.digest())-->Line_8 $$ base64 = new BASE64Encoder().encode(md.digest())[ CD ]
Line_6 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_8 $$ base64 = new BASE64Encoder().encode(md.digest())[ FD ]
Line_2 $$ private static String getBase64(String text, String algorithm) throws NoSuchAlgorithmException -->Line_9 $$ return base64[ CD ]
