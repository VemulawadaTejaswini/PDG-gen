Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) [ CD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_3 $$ FTPClient ftpClient = new FTPClient()[ CD ]
Line_5 $$ Resource resource = entry.getResource()-->Line_5 $$ Resource resource = entry.getResource()[ CD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_5 $$ Resource resource = entry.getResource()[ FD ]
Line_6 $$ if (!resource.isFile()) -->Line_6 $$ if (!resource.isFile()) [ CD ]
Line_6 $$ if (!resource.isFile()) -->Line_6 $$ if (!resource.isFile()) [ CD ]
Line_5 $$ Resource resource = entry.getResource()-->Line_6 $$ if (!resource.isFile()) [ FD ]
Line_6 $$ if (!resource.isFile()) -->Line_7 $$ return[ CD ]
Line_9 $$ if (server.length() == 0) -->Line_10 $$ return[ CD ]
Line_12 $$ String passwordToUse = monitor.getRepository().getPageHandler().processTemplate(password, false)-->Line_12 $$ String passwordToUse = monitor.getRepository().getPageHandler().processTemplate(password, false)[ CD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_12 $$ String passwordToUse = monitor.getRepository().getPageHandler().processTemplate(password, false)[ FD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_13 $$ ftpClient.connect(server)[ FD ]
Line_14 $$ if (user.length() > 0) -->Line_15 $$ ftpClient.login(user, password)[ CD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_15 $$ ftpClient.login(user, password)[ FD ]
Line_17 $$ int reply = ftpClient.getReplyCode()-->Line_17 $$ int reply = ftpClient.getReplyCode()[ CD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_17 $$ int reply = ftpClient.getReplyCode()[ FD ]
Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) [ CD ]
Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) [ CD ]
Line_17 $$ int reply = ftpClient.getReplyCode()-->Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) [ FD ]
Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_19 $$ ftpClient.disconnect()[ CD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_19 $$ ftpClient.disconnect()[ FD ]
Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_20 $$ monitor.handleError("FTP server refused connection:" + server, null)[ CD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_20 $$ monitor.handleError("FTP server refused connection:" + server, null)[ FD ]
Line_18 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_21 $$ return[ CD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_23 $$ ftpClient.setFileType(FTP.IMAGE_FILE_TYPE)[ FD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_24 $$ ftpClient.enterLocalPassiveMode()[ FD ]
Line_25 $$ if (directory.length() > 0) -->Line_26 $$ ftpClient.changeWorkingDirectory(directory)[ CD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_26 $$ ftpClient.changeWorkingDirectory(directory)[ FD ]
Line_28 $$ String filename = monitor.getRepository().getEntryManager().replaceMacros(entry, fileTemplate)-->Line_28 $$ String filename = monitor.getRepository().getEntryManager().replaceMacros(entry, fileTemplate)[ CD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_28 $$ String filename = monitor.getRepository().getEntryManager().replaceMacros(entry, fileTemplate)[ FD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_28 $$ String filename = monitor.getRepository().getEntryManager().replaceMacros(entry, fileTemplate)[ FD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_29 $$ InputStream is = new BufferedInputStream(monitor.getRepository().getStorageManager().getFileInputStream(new File(resource.getPath())))[ FD ]
Line_5 $$ Resource resource = entry.getResource()-->Line_29 $$ InputStream is = new BufferedInputStream(monitor.getRepository().getStorageManager().getFileInputStream(new File(resource.getPath())))[ FD ]
Line_30 $$ boolean ok = ftpClient.storeUniqueFile(filename, is)-->Line_30 $$ boolean ok = ftpClient.storeUniqueFile(filename, is)[ CD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_30 $$ boolean ok = ftpClient.storeUniqueFile(filename, is)[ FD ]
Line_28 $$ String filename = monitor.getRepository().getEntryManager().replaceMacros(entry, fileTemplate)-->Line_30 $$ boolean ok = ftpClient.storeUniqueFile(filename, is)[ FD ]
Line_29 $$ InputStream is = new BufferedInputStream(monitor.getRepository().getStorageManager().getFileInputStream(new File(resource.getPath())))-->Line_30 $$ boolean ok = ftpClient.storeUniqueFile(filename, is)[ FD ]
Line_29 $$ InputStream is = new BufferedInputStream(monitor.getRepository().getStorageManager().getFileInputStream(new File(resource.getPath())))-->Line_31 $$ is.close()[ FD ]
Line_32 $$ if (ok) -->Line_33 $$ monitor.logInfo("Wrote file:" + directory + " " + filename)[ CD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_33 $$ monitor.logInfo("Wrote file:" + directory + " " + filename)[ FD ]
Line_32 $$ if (ok) -->Line_35 $$ monitor.handleError("Failed to write file:" + directory + " " + filename, null)[ CD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_35 $$ monitor.handleError("Failed to write file:" + directory + " " + filename, null)[ FD ]
Line_2 $$ protected void entryMatched(EntryMonitor monitor, Entry entry) -->Line_38 $$ monitor.handleError("Error posting to FTP:" + server, exc)[ FD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_41 $$ ftpClient.logout()[ FD ]
Line_3 $$ FTPClient ftpClient = new FTPClient()-->Line_45 $$ ftpClient.disconnect()[ FD ]
