Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static final long copyFile(final File srcFile, final File dstFile, final long cpySize) throws IOException [ CD ]
Line_2 $$ public static final long copyFile(final File srcFile, final File dstFile, final long cpySize) throws IOException -->Line_3 $$ if ((null == srcFile) || (null == dstFile))[ CD ]
Line_3 $$ if ((null == srcFile) || (null == dstFile))-->Line_3 $$ return (-1L)[ CD ]
Line_2 $$ public static final long copyFile(final File srcFile, final File dstFile, final long cpySize) throws IOException -->Line_4 $$ final File dstFolder = dstFile.getParentFile()[ CD ]
Line_4 $$ final File dstFolder = dstFile.getParentFile()-->Line_4 $$ final File dstFolder = dstFile.getParentFile()[ CD ]
Line_2 $$ public static final long copyFile(final File srcFile, final File dstFile, final long cpySize) throws IOException -->Line_4 $$ final File dstFolder = dstFile.getParentFile()[ FD ]
Line_2 $$ public static final long copyFile(final File srcFile, final File dstFile, final long cpySize) throws IOException -->Line_5 $$ if ((!dstFolder.exists()) && (!dstFolder.mkdirs()))[ CD ]
Line_5 $$ if ((!dstFolder.exists()) && (!dstFolder.mkdirs()))-->Line_5 $$ if ((!dstFolder.exists()) && (!dstFolder.mkdirs()))[ CD ]
Line_4 $$ final File dstFolder = dstFile.getParentFile()-->Line_5 $$ if ((!dstFolder.exists()) && (!dstFolder.mkdirs()))[ FD ]
Line_5 $$ if ((!dstFolder.exists()) && (!dstFolder.mkdirs()))-->Line_5 $$ if ((!dstFolder.exists()) && (!dstFolder.mkdirs()))[ CD ]
Line_4 $$ final File dstFolder = dstFile.getParentFile()-->Line_5 $$ if ((!dstFolder.exists()) && (!dstFolder.mkdirs()))[ FD ]
Line_2 $$ public static final long copyFile(final File srcFile, final File dstFile, final long cpySize) throws IOException -->Line_6 $$ FileChannel srcChannel = null, dstChannel = null[ CD ]
Line_6 $$ FileChannel srcChannel = null, dstChannel = null-->Line_8 $$ srcChannel = new FileInputStream(srcFile).getChannel()[ FD ]
Line_8 $$ srcChannel = new FileInputStream(srcFile).getChannel()-->Line_8 $$ srcChannel = new FileInputStream(srcFile).getChannel()[ FD ]
Line_8 $$ srcChannel = new FileInputStream(srcFile).getChannel()-->Line_8 $$ srcChannel = new FileInputStream(srcFile).getChannel()[ CD ]
Line_6 $$ FileChannel srcChannel = null, dstChannel = null-->Line_9 $$ dstChannel = new FileOutputStream(dstFile).getChannel()[ FD ]
Line_9 $$ dstChannel = new FileOutputStream(dstFile).getChannel()-->Line_9 $$ dstChannel = new FileOutputStream(dstFile).getChannel()[ FD ]
Line_9 $$ dstChannel = new FileOutputStream(dstFile).getChannel()-->Line_9 $$ dstChannel = new FileOutputStream(dstFile).getChannel()[ CD ]
Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)-->Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)[ CD ]
Line_2 $$ public static final long copyFile(final File srcFile, final File dstFile, final long cpySize) throws IOException -->Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)[ FD ]
Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)-->Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)[ CD ]
Line_6 $$ FileChannel srcChannel = null, dstChannel = null-->Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)[ FD ]
Line_9 $$ dstChannel = new FileOutputStream(dstFile).getChannel()-->Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)[ FD ]
Line_6 $$ FileChannel srcChannel = null, dstChannel = null-->Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)[ FD ]
Line_8 $$ srcChannel = new FileInputStream(srcFile).getChannel()-->Line_10 $$ final long srcLen = srcFile.length(), copyLen = dstChannel.transferFrom(srcChannel, 0, (cpySize < 0L) ? srcLen : cpySize)[ FD ]
Line_11 $$ if ((cpySize < 0L) && (copyLen != srcLen))-->Line_11 $$ return (-2L)[ CD ]
Line_6 $$ FileChannel srcChannel = null, dstChannel = null-->Line_14 $$ FileUtil.closeAll(srcChannel, dstChannel)[ FD ]
Line_8 $$ srcChannel = new FileInputStream(srcFile).getChannel()-->Line_14 $$ FileUtil.closeAll(srcChannel, dstChannel)[ FD ]
Line_6 $$ FileChannel srcChannel = null, dstChannel = null-->Line_14 $$ FileUtil.closeAll(srcChannel, dstChannel)[ FD ]
Line_9 $$ dstChannel = new FileOutputStream(dstFile).getChannel()-->Line_14 $$ FileUtil.closeAll(srcChannel, dstChannel)[ FD ]
