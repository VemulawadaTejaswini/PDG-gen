Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testBackup() throws Exception [ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_3 $$ masterJetty.stop()[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_4 $$ copyFile(new File(CONF_DIR + "solrconfig-master1.xml"), new File(master.getConfDir(), "solrconfig.xml"))[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_5 $$ masterJetty = createJetty(master)[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_6 $$ masterClient = createNewSolrServer(masterJetty.getLocalPort())[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_2 $$ public void testBackup() throws Exception [ CD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)[ CD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)[ CD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)[ FD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ index(masterClient, "id", i, "name", "name = " + i)[ CD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ index(masterClient, "id", i, "name", "name = " + i)[ FD ]
Line_2 $$ public void testBackup() throws Exception -->Line_8 $$ masterClient.commit()[ CD ]
Line_9 $$ class BackupThread extends Thread -->Line_9 $$ class BackupThread extends Thread [ CD ]
Line_9 $$ class BackupThread extends Thread -->Line_9 $$ class BackupThread extends Thread [ CD ]
Line_9 $$ class BackupThread extends Thread -->Line_12 $$ String masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=" + ReplicationHandler.CMD_BACKUP[ CD ]
Line_9 $$ class BackupThread extends Thread -->Line_13 $$ URL url[ CD ]
Line_9 $$ class BackupThread extends Thread -->Line_14 $$ InputStream stream = null[ CD ]
Line_13 $$ URL url-->Line_16 $$ url = new URL(masterUrl)[ FD ]
Line_16 $$ url = new URL(masterUrl)-->Line_16 $$ url = new URL(masterUrl)[ FD ]
Line_14 $$ InputStream stream = null-->Line_17 $$ stream = url.openStream()[ FD ]
Line_17 $$ stream = url.openStream()-->Line_17 $$ stream = url.openStream()[ FD ]
Line_17 $$ stream = url.openStream()-->Line_17 $$ stream = url.openStream()[ CD ]
Line_13 $$ URL url-->Line_17 $$ stream = url.openStream()[ FD ]
Line_16 $$ url = new URL(masterUrl)-->Line_17 $$ stream = url.openStream()[ FD ]
Line_14 $$ InputStream stream = null-->Line_18 $$ stream.close()[ FD ]
Line_17 $$ stream = url.openStream()-->Line_18 $$ stream.close()[ FD ]
Line_14 $$ InputStream stream = null-->Line_22 $$ IOUtils.closeQuietly(stream)[ FD ]
Line_17 $$ stream = url.openStream()-->Line_22 $$ IOUtils.closeQuietly(stream)[ FD ]
Line_2 $$ public void testBackup() throws Exception -->Line_29 $$ backupThread.start()[ CD ]
Line_31 $$ class CheckStatus extends Thread -->Line_31 $$ class CheckStatus extends Thread [ CD ]
Line_31 $$ class CheckStatus extends Thread -->Line_31 $$ class CheckStatus extends Thread [ CD ]
Line_31 $$ class CheckStatus extends Thread -->Line_31 $$ class CheckStatus extends Thread [ CD ]
Line_31 $$ class CheckStatus extends Thread -->Line_36 $$ String masterUrl = "http://localhost:" + masterJetty.getLocalPort() + "/solr/replication?command=" + ReplicationHandler.CMD_DETAILS[ CD ]
Line_31 $$ class CheckStatus extends Thread -->Line_37 $$ URL url[ CD ]
Line_31 $$ class CheckStatus extends Thread -->Line_38 $$ InputStream stream = null[ CD ]
Line_37 $$ URL url-->Line_40 $$ url = new URL(masterUrl)[ FD ]
Line_40 $$ url = new URL(masterUrl)-->Line_40 $$ url = new URL(masterUrl)[ FD ]
Line_13 $$ URL url-->Line_40 $$ url = new URL(masterUrl)[ FD ]
Line_16 $$ url = new URL(masterUrl)-->Line_40 $$ url = new URL(masterUrl)[ FD ]
Line_38 $$ InputStream stream = null-->Line_41 $$ stream = url.openStream()[ FD ]
Line_41 $$ stream = url.openStream()-->Line_41 $$ stream = url.openStream()[ FD ]
Line_14 $$ InputStream stream = null-->Line_41 $$ stream = url.openStream()[ FD ]
Line_17 $$ stream = url.openStream()-->Line_41 $$ stream = url.openStream()[ FD ]
Line_41 $$ stream = url.openStream()-->Line_41 $$ stream = url.openStream()[ CD ]
Line_37 $$ URL url-->Line_41 $$ stream = url.openStream()[ FD ]
Line_40 $$ url = new URL(masterUrl)-->Line_41 $$ stream = url.openStream()[ FD ]
Line_13 $$ URL url-->Line_41 $$ stream = url.openStream()[ FD ]
Line_16 $$ url = new URL(masterUrl)-->Line_41 $$ stream = url.openStream()[ FD ]
Line_38 $$ InputStream stream = null-->Line_42 $$ response = IOUtils.toString(stream)[ FD ]
Line_41 $$ stream = url.openStream()-->Line_42 $$ response = IOUtils.toString(stream)[ FD ]
Line_14 $$ InputStream stream = null-->Line_42 $$ response = IOUtils.toString(stream)[ FD ]
Line_17 $$ stream = url.openStream()-->Line_42 $$ response = IOUtils.toString(stream)[ FD ]
Line_43 $$ if (response.contains("<str name=\"status\">success</str>")) -->Line_43 $$ if (response.contains("<str name=\"status\">success</str>")) [ CD ]
Line_43 $$ if (response.contains("<str name=\"status\">success</str>")) -->Line_44 $$ success = true[ CD ]
Line_44 $$ success = true-->Line_44 $$ success = true[ FD ]
Line_38 $$ InputStream stream = null-->Line_46 $$ stream.close()[ FD ]
Line_41 $$ stream = url.openStream()-->Line_46 $$ stream.close()[ FD ]
Line_14 $$ InputStream stream = null-->Line_46 $$ stream.close()[ FD ]
Line_17 $$ stream = url.openStream()-->Line_46 $$ stream.close()[ FD ]
Line_38 $$ InputStream stream = null-->Line_50 $$ IOUtils.closeQuietly(stream)[ FD ]
Line_41 $$ stream = url.openStream()-->Line_50 $$ IOUtils.closeQuietly(stream)[ FD ]
Line_14 $$ InputStream stream = null-->Line_50 $$ IOUtils.closeQuietly(stream)[ FD ]
Line_17 $$ stream = url.openStream()-->Line_50 $$ IOUtils.closeQuietly(stream)[ FD ]
Line_2 $$ public void testBackup() throws Exception -->Line_58 $$ while (true) [ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_2 $$ public void testBackup() throws Exception [ CD ]
Line_58 $$ while (true) -->Line_59 $$ checkStatus.run()[ CD ]
Line_58 $$ while (true) -->Line_60 $$ if (checkStatus.fail != null) [ CD ]
Line_60 $$ if (checkStatus.fail != null) -->Line_61 $$ fail(checkStatus.fail)[ CD ]
Line_58 $$ while (true) -->Line_63 $$ if (checkStatus.success) [ CD ]
Line_58 $$ while (true) -->Line_66 $$ Thread.sleep(200)[ CD ]
Line_58 $$ while (true) -->Line_67 $$ if (waitCnt == 10) [ CD ]
Line_67 $$ if (waitCnt == 10) -->Line_68 $$ fail("Backup success not detected:" + checkStatus.response)[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_72 $$ if (backupThread.fail != null) [ CD ]
Line_72 $$ if (backupThread.fail != null) -->Line_73 $$ fail(backupThread.fail)[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_75 $$ File[] files = dataDir.listFiles(new FilenameFilter() [ CD ]
Line_75 $$ File[] files = dataDir.listFiles(new FilenameFilter() -->Line_77 $$ if (name.startsWith("snapshot")) [ CD ]
Line_75 $$ File[] files = dataDir.listFiles(new FilenameFilter() -->Line_77 $$ if (name.startsWith("snapshot")) [ FD ]
Line_77 $$ if (name.startsWith("snapshot")) -->Line_77 $$ if (name.startsWith("snapshot")) [ CD ]
Line_75 $$ File[] files = dataDir.listFiles(new FilenameFilter() -->Line_77 $$ if (name.startsWith("snapshot")) [ FD ]
Line_77 $$ if (name.startsWith("snapshot")) -->Line_78 $$ return true[ CD ]
Line_75 $$ File[] files = dataDir.listFiles(new FilenameFilter() -->Line_80 $$ return false[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_83 $$ assertEquals(1, files.length)[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_86 $$ TopDocs hits = searcher.search(new MatchAllDocsQuery(), 1)[ CD ]
Line_2 $$ public void testBackup() throws Exception -->Line_87 $$ assertEquals(500, hits.totalHits)[ CD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)[ FD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)[ FD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)[ FD ]
Line_7 $$ for (int i = 0; i < 500; i++) index(masterClient, "id", i, "name", "name = " + i)-->Line_7 $$ index(masterClient, "id", i, "name", "name = " + i)[ FD ]
