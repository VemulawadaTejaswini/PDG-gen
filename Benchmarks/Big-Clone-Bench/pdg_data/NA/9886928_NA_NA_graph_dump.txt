Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException [ CD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact[ CD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_4 $$ AID agentAID = dfd.getName()[ CD ]
Line_4 $$ AID agentAID = dfd.getName()-->Line_4 $$ AID agentAID = dfd.getName()[ CD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_4 $$ AID agentAID = dfd.getName()[ FD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_5 $$ String agentName = agentAID.getName()[ CD ]
Line_5 $$ String agentName = agentAID.getName()-->Line_5 $$ String agentName = agentAID.getName()[ CD ]
Line_4 $$ AID agentAID = dfd.getName()-->Line_5 $$ String agentName = agentAID.getName()[ FD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_6 $$ DFAgentDescription dfdToReturn = null[ CD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_7 $$ String batchErrMsg = ""[ CD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_8 $$ Connection conn = getConnectionWrapper().getConnection()[ CD ]
Line_8 $$ Connection conn = getConnectionWrapper().getConnection()-->Line_8 $$ Connection conn = getConnectionWrapper().getConnection()[ CD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_9 $$ PreparedStatements pss = getPreparedStatements()[ CD ]
Line_9 $$ PreparedStatements pss = getPreparedStatements()-->Line_9 $$ PreparedStatements pss = getPreparedStatements()[ CD ]
Line_6 $$ DFAgentDescription dfdToReturn = null-->Line_11 $$ dfdToReturn = (DFAgentDescription) removeSingle(dfd.getName())[ FD ]
Line_11 $$ dfdToReturn = (DFAgentDescription) removeSingle(dfd.getName())-->Line_11 $$ dfdToReturn = (DFAgentDescription) removeSingle(dfd.getName())[ FD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_11 $$ dfdToReturn = (DFAgentDescription) removeSingle(dfd.getName())[ FD ]
Line_12 $$ Date leaseTime = dfd.getLeaseTime()-->Line_12 $$ Date leaseTime = dfd.getLeaseTime()[ CD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_12 $$ Date leaseTime = dfd.getLeaseTime()[ FD ]
Line_12 $$ Date leaseTime = dfd.getLeaseTime()-->Line_13 $$ long lt = (leaseTime != null ? leaseTime.getTime() : -1)[ FD ]
Line_14 $$ String descrId = getGUID()-->Line_14 $$ String descrId = getGUID()[ CD ]
Line_14 $$ String descrId = getGUID()-->Line_15 $$ pss.stm_insAgentDescr.setString(1, descrId)[ FD ]
Line_5 $$ String agentName = agentAID.getName()-->Line_16 $$ pss.stm_insAgentDescr.setString(2, agentName)[ FD ]
Line_13 $$ long lt = (leaseTime != null ? leaseTime.getTime() : -1)-->Line_17 $$ pss.stm_insAgentDescr.setString(3, String.valueOf(lt))[ FD ]
Line_4 $$ AID agentAID = dfd.getName()-->Line_19 $$ saveAID(agentAID)[ FD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_20 $$ Iterator iter = dfd.getAllLanguages()[ CD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_20 $$ Iterator iter = dfd.getAllLanguages()[ FD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_21 $$ if (iter.hasNext()) [ FD ]
Line_21 $$ if (iter.hasNext()) -->Line_21 $$ if (iter.hasNext()) [ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_21 $$ if (iter.hasNext()) [ FD ]
Line_21 $$ if (iter.hasNext()) -->Line_22 $$ pss.stm_insLanguage.clearBatch()[ CD ]
Line_21 $$ if (iter.hasNext()) -->Line_23 $$ while (iter.hasNext()) [ CD ]
Line_21 $$ if (iter.hasNext()) -->Line_21 $$ if (iter.hasNext()) [ CD ]
Line_23 $$ while (iter.hasNext()) -->Line_23 $$ while (iter.hasNext()) [ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_23 $$ while (iter.hasNext()) [ FD ]
Line_23 $$ while (iter.hasNext()) -->Line_24 $$ pss.stm_insLanguage.setString(1, descrId)[ CD ]
Line_14 $$ String descrId = getGUID()-->Line_24 $$ pss.stm_insLanguage.setString(1, descrId)[ FD ]
Line_23 $$ while (iter.hasNext()) -->Line_25 $$ pss.stm_insLanguage.setString(2, (String) iter.next())[ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_25 $$ pss.stm_insLanguage.setString(2, (String) iter.next())[ FD ]
Line_23 $$ while (iter.hasNext()) -->Line_26 $$ pss.stm_insLanguage.addBatch()[ CD ]
Line_21 $$ if (iter.hasNext()) -->Line_28 $$ pss.stm_insLanguage.executeBatch()[ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_30 $$ iter = dfd.getAllOntologies()[ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_30 $$ iter = dfd.getAllOntologies()[ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_30 $$ iter = dfd.getAllOntologies()[ CD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_30 $$ iter = dfd.getAllOntologies()[ FD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_31 $$ if (iter.hasNext()) [ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_31 $$ if (iter.hasNext()) [ FD ]
Line_31 $$ if (iter.hasNext()) -->Line_31 $$ if (iter.hasNext()) [ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_31 $$ if (iter.hasNext()) [ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_31 $$ if (iter.hasNext()) [ FD ]
Line_31 $$ if (iter.hasNext()) -->Line_32 $$ pss.stm_insOntology.clearBatch()[ CD ]
Line_31 $$ if (iter.hasNext()) -->Line_33 $$ while (iter.hasNext()) [ CD ]
Line_31 $$ if (iter.hasNext()) -->Line_31 $$ if (iter.hasNext()) [ CD ]
Line_33 $$ while (iter.hasNext()) -->Line_33 $$ while (iter.hasNext()) [ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_33 $$ while (iter.hasNext()) [ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_33 $$ while (iter.hasNext()) [ FD ]
Line_33 $$ while (iter.hasNext()) -->Line_34 $$ pss.stm_insOntology.setString(1, descrId)[ CD ]
Line_14 $$ String descrId = getGUID()-->Line_34 $$ pss.stm_insOntology.setString(1, descrId)[ FD ]
Line_33 $$ while (iter.hasNext()) -->Line_35 $$ pss.stm_insOntology.setString(2, (String) iter.next())[ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_35 $$ pss.stm_insOntology.setString(2, (String) iter.next())[ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_35 $$ pss.stm_insOntology.setString(2, (String) iter.next())[ FD ]
Line_33 $$ while (iter.hasNext()) -->Line_36 $$ pss.stm_insOntology.addBatch()[ CD ]
Line_31 $$ if (iter.hasNext()) -->Line_38 $$ pss.stm_insOntology.executeBatch()[ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_40 $$ iter = dfd.getAllProtocols()[ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_40 $$ iter = dfd.getAllProtocols()[ FD ]
Line_40 $$ iter = dfd.getAllProtocols()-->Line_40 $$ iter = dfd.getAllProtocols()[ FD ]
Line_40 $$ iter = dfd.getAllProtocols()-->Line_40 $$ iter = dfd.getAllProtocols()[ CD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_40 $$ iter = dfd.getAllProtocols()[ FD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_41 $$ if (iter.hasNext()) [ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_41 $$ if (iter.hasNext()) [ FD ]
Line_40 $$ iter = dfd.getAllProtocols()-->Line_41 $$ if (iter.hasNext()) [ FD ]
Line_41 $$ if (iter.hasNext()) -->Line_41 $$ if (iter.hasNext()) [ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_41 $$ if (iter.hasNext()) [ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_41 $$ if (iter.hasNext()) [ FD ]
Line_40 $$ iter = dfd.getAllProtocols()-->Line_41 $$ if (iter.hasNext()) [ FD ]
Line_41 $$ if (iter.hasNext()) -->Line_42 $$ pss.stm_insProtocol.clearBatch()[ CD ]
Line_41 $$ if (iter.hasNext()) -->Line_43 $$ while (iter.hasNext()) [ CD ]
Line_41 $$ if (iter.hasNext()) -->Line_41 $$ if (iter.hasNext()) [ CD ]
Line_43 $$ while (iter.hasNext()) -->Line_43 $$ while (iter.hasNext()) [ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_43 $$ while (iter.hasNext()) [ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_43 $$ while (iter.hasNext()) [ FD ]
Line_40 $$ iter = dfd.getAllProtocols()-->Line_43 $$ while (iter.hasNext()) [ FD ]
Line_43 $$ while (iter.hasNext()) -->Line_44 $$ pss.stm_insProtocol.setString(1, descrId)[ CD ]
Line_14 $$ String descrId = getGUID()-->Line_44 $$ pss.stm_insProtocol.setString(1, descrId)[ FD ]
Line_43 $$ while (iter.hasNext()) -->Line_45 $$ pss.stm_insProtocol.setString(2, (String) iter.next())[ CD ]
Line_20 $$ Iterator iter = dfd.getAllLanguages()-->Line_45 $$ pss.stm_insProtocol.setString(2, (String) iter.next())[ FD ]
Line_30 $$ iter = dfd.getAllOntologies()-->Line_45 $$ pss.stm_insProtocol.setString(2, (String) iter.next())[ FD ]
Line_40 $$ iter = dfd.getAllProtocols()-->Line_45 $$ pss.stm_insProtocol.setString(2, (String) iter.next())[ FD ]
Line_43 $$ while (iter.hasNext()) -->Line_46 $$ pss.stm_insProtocol.addBatch()[ CD ]
Line_41 $$ if (iter.hasNext()) -->Line_48 $$ pss.stm_insProtocol.executeBatch()[ CD ]
Line_14 $$ String descrId = getGUID()-->Line_50 $$ saveServices(descrId, dfd.getAllServices())[ FD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_50 $$ saveServices(descrId, dfd.getAllServices())[ FD ]
Line_52 $$ if (regsCnt > MAX_REGISTER_WITHOUT_CLEAN) -->Line_54 $$ clean()[ CD ]
Line_8 $$ Connection conn = getConnectionWrapper().getConnection()-->Line_56 $$ conn.commit()[ FD ]
Line_8 $$ Connection conn = getConnectionWrapper().getConnection()-->Line_59 $$ conn.rollback()[ FD ]
Line_3 $$ DFAgentDescription dfd = (DFAgentDescription) fact-->Line_61 $$ logger.log(Logger.SEVERE, "Rollback for incomplete insertion of DFD for agent " + dfd.getName() + " failed.", se)[ FD ]
Line_2 $$ protected Object insertSingle(Object name, Object fact) throws SQLException -->Line_65 $$ return dfdToReturn[ CD ]
