Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException [ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ response.setContentType("text/html")[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ response.setContentType("text/html")[ FD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_4 $$ ServletContext ctx = getServletContext()[ CD ]
Line_4 $$ ServletContext ctx = getServletContext()-->Line_4 $$ ServletContext ctx = getServletContext()[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)[ CD ]
Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)-->Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)[ CD ]
Line_4 $$ ServletContext ctx = getServletContext()-->Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)[ FD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_6 $$ HttpSession session = request.getSession(false)[ CD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_6 $$ HttpSession session = request.getSession(false)[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_6 $$ HttpSession session = request.getSession(false)[ FD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_7 $$ if (session == null) [ CD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_7 $$ if (session == null) [ FD ]
Line_7 $$ if (session == null) -->Line_8 $$ session = request.getSession(true)[ CD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_8 $$ session = request.getSession(true)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_8 $$ session = request.getSession(true)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_8 $$ session = request.getSession(true)[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_8 $$ session = request.getSession(true)[ FD ]
Line_7 $$ if (session == null) -->Line_9 $$ session.setAttribute(ERROR_TAG, "You need to have run the Sniffer before running " + "the Grinder. Go to <a href=\"/index.jsp\">the start page</a> " + " to run the Sniffer.")[ CD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_9 $$ session.setAttribute(ERROR_TAG, "You need to have run the Sniffer before running " + "the Grinder. Go to <a href=\"/index.jsp\">the start page</a> " + " to run the Sniffer.")[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_9 $$ session.setAttribute(ERROR_TAG, "You need to have run the Sniffer before running " + "the Grinder. Go to <a href=\"/index.jsp\">the start page</a> " + " to run the Sniffer.")[ FD ]
Line_7 $$ if (session == null) -->Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ CD ]
Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)-->Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ CD ]
Line_4 $$ ServletContext ctx = getServletContext()-->Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_7 $$ if (session == null) -->Line_12 $$ session.setMaxInactiveInterval(-1)[ CD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_12 $$ session.setMaxInactiveInterval(-1)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_12 $$ session.setMaxInactiveInterval(-1)[ FD ]
Line_7 $$ if (session == null) -->Line_13 $$ String pValue = request.getParameter(ACTION_TAG)[ CD ]
Line_13 $$ String pValue = request.getParameter(ACTION_TAG)-->Line_13 $$ String pValue = request.getParameter(ACTION_TAG)[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_13 $$ String pValue = request.getParameter(ACTION_TAG)[ FD ]
Line_7 $$ if (session == null) -->Line_14 $$ if (pValue != null && pValue.equals(START_TAG)) [ CD ]
Line_13 $$ String pValue = request.getParameter(ACTION_TAG)-->Line_14 $$ if (pValue != null && pValue.equals(START_TAG)) [ FD ]
Line_14 $$ if (pValue != null && pValue.equals(START_TAG)) -->Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ CD ]
Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)-->Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ CD ]
Line_4 $$ ServletContext ctx = getServletContext()-->Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_14 $$ if (pValue != null && pValue.equals(START_TAG)) -->Line_16 $$ int p = 1[ CD ]
Line_14 $$ if (pValue != null && pValue.equals(START_TAG)) -->Line_17 $$ int t = 1[ CD ]
Line_14 $$ if (pValue != null && pValue.equals(START_TAG)) -->Line_18 $$ int c = 1[ CD ]
Line_16 $$ int p = 1-->Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))[ FD ]
Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))-->Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))[ FD ]
Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))-->Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))[ FD ]
Line_16 $$ int p = 1-->Line_21 $$ p = p > MAX_PROCS ? MAX_PROCS : p[ FD ]
Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))-->Line_21 $$ p = p > MAX_PROCS ? MAX_PROCS : p[ FD ]
Line_21 $$ p = p > MAX_PROCS ? MAX_PROCS : p-->Line_21 $$ p = p > MAX_PROCS ? MAX_PROCS : p[ FD ]
Line_17 $$ int t = 1-->Line_25 $$ t = Integer.parseInt(request.getParameter("threads"))[ FD ]
Line_25 $$ t = Integer.parseInt(request.getParameter("threads"))-->Line_25 $$ t = Integer.parseInt(request.getParameter("threads"))[ FD ]
Line_25 $$ t = Integer.parseInt(request.getParameter("threads"))-->Line_25 $$ t = Integer.parseInt(request.getParameter("threads"))[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_25 $$ t = Integer.parseInt(request.getParameter("threads"))[ FD ]
Line_17 $$ int t = 1-->Line_26 $$ t = t > MAX_THREADS ? MAX_THREADS : t[ FD ]
Line_25 $$ t = Integer.parseInt(request.getParameter("threads"))-->Line_26 $$ t = t > MAX_THREADS ? MAX_THREADS : t[ FD ]
Line_26 $$ t = t > MAX_THREADS ? MAX_THREADS : t-->Line_26 $$ t = t > MAX_THREADS ? MAX_THREADS : t[ FD ]
Line_18 $$ int c = 1-->Line_30 $$ c = Integer.parseInt(request.getParameter("cycles"))[ FD ]
Line_30 $$ c = Integer.parseInt(request.getParameter("cycles"))-->Line_30 $$ c = Integer.parseInt(request.getParameter("cycles"))[ FD ]
Line_30 $$ c = Integer.parseInt(request.getParameter("cycles"))-->Line_30 $$ c = Integer.parseInt(request.getParameter("cycles"))[ CD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_30 $$ c = Integer.parseInt(request.getParameter("cycles"))[ FD ]
Line_18 $$ int c = 1-->Line_31 $$ c = c > MAX_CYCLES ? MAX_CYCLES : c[ FD ]
Line_30 $$ c = Integer.parseInt(request.getParameter("cycles"))-->Line_31 $$ c = c > MAX_CYCLES ? MAX_CYCLES : c[ FD ]
Line_31 $$ c = c > MAX_CYCLES ? MAX_CYCLES : c-->Line_31 $$ c = c > MAX_CYCLES ? MAX_CYCLES : c[ FD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_35 $$ String dirname = (String) session.getAttribute(OUTPUT_TAG)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_35 $$ String dirname = (String) session.getAttribute(OUTPUT_TAG)[ FD ]
Line_38 $$ FileInputStream gpin = new FileInputStream(GPROPS)-->Line_40 $$ copyBytes(gpin, gpout)[ FD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_40 $$ copyBytes(gpin, gpout)[ FD ]
Line_38 $$ FileInputStream gpin = new FileInputStream(GPROPS)-->Line_41 $$ gpin.close()[ FD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_43 $$ Boolean isSecure = (Boolean) session.getAttribute(SECURE_TAG)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_43 $$ Boolean isSecure = (Boolean) session.getAttribute(SECURE_TAG)[ FD ]
Line_43 $$ Boolean isSecure = (Boolean) session.getAttribute(SECURE_TAG)-->Line_44 $$ if (isSecure.booleanValue()) [ FD ]
Line_44 $$ if (isSecure.booleanValue()) -->Line_44 $$ if (isSecure.booleanValue()) [ CD ]
Line_43 $$ Boolean isSecure = (Boolean) session.getAttribute(SECURE_TAG)-->Line_44 $$ if (isSecure.booleanValue()) [ FD ]
Line_44 $$ if (isSecure.booleanValue()) -->Line_45 $$ gpout.write(("grinder.plugin=" + "net.grinder.plugin.http.HttpsPlugin" + "\n").getBytes())[ CD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_45 $$ gpout.write(("grinder.plugin=" + "net.grinder.plugin.http.HttpsPlugin" + "\n").getBytes())[ FD ]
Line_44 $$ if (isSecure.booleanValue()) -->Line_46 $$ String certificate = (String) ictx.lookup(CERTIFICATE)[ CD ]
Line_42 $$ InitialContext ictx = new InitialContext()-->Line_46 $$ String certificate = (String) ictx.lookup(CERTIFICATE)[ FD ]
Line_44 $$ if (isSecure.booleanValue()) -->Line_47 $$ String password = (String) ictx.lookup(PASSWORD)[ CD ]
Line_42 $$ InitialContext ictx = new InitialContext()-->Line_47 $$ String password = (String) ictx.lookup(PASSWORD)[ FD ]
Line_44 $$ if (isSecure.booleanValue()) -->Line_48 $$ gpout.write(("grinder.plugin.parameter.clientCert=" + certificate + "\n").getBytes())[ CD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_48 $$ gpout.write(("grinder.plugin.parameter.clientCert=" + certificate + "\n").getBytes())[ FD ]
Line_44 $$ if (isSecure.booleanValue()) -->Line_49 $$ gpout.write(("grinder.plugin.parameter.clientCertPassword=" + password + "\n").getBytes())[ CD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_49 $$ gpout.write(("grinder.plugin.parameter.clientCertPassword=" + password + "\n").getBytes())[ FD ]
Line_44 $$ if (isSecure.booleanValue()) -->Line_51 $$ gpout.write(("grinder.plugin=" + "net.grinder.plugin.http.HttpPlugin\n").getBytes())[ CD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_51 $$ gpout.write(("grinder.plugin=" + "net.grinder.plugin.http.HttpPlugin\n").getBytes())[ FD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_53 $$ gpout.write(("grinder.processes=" + p + "\n").getBytes())[ FD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_54 $$ gpout.write(("grinder.threads=" + t + "\n").getBytes())[ FD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_55 $$ gpout.write(("grinder.cycles=" + c + "\n").getBytes())[ FD ]
Line_38 $$ FileInputStream gpin = new FileInputStream(GPROPS)-->Line_56 $$ gpin = new FileInputStream(dirname + File.separator + SNIFFOUT)[ FD ]
Line_56 $$ gpin = new FileInputStream(dirname + File.separator + SNIFFOUT)-->Line_56 $$ gpin = new FileInputStream(dirname + File.separator + SNIFFOUT)[ FD ]
Line_38 $$ FileInputStream gpin = new FileInputStream(GPROPS)-->Line_57 $$ copyBytes(gpin, gpout)[ FD ]
Line_56 $$ gpin = new FileInputStream(dirname + File.separator + SNIFFOUT)-->Line_57 $$ copyBytes(gpin, gpout)[ FD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_57 $$ copyBytes(gpin, gpout)[ FD ]
Line_38 $$ FileInputStream gpin = new FileInputStream(GPROPS)-->Line_58 $$ gpin.close()[ FD ]
Line_56 $$ gpin = new FileInputStream(dirname + File.separator + SNIFFOUT)-->Line_58 $$ gpin.close()[ FD ]
Line_39 $$ FileOutputStream gpout = new FileOutputStream(dirname + File.separator + GPROPS)-->Line_59 $$ gpout.close()[ FD ]
Line_42 $$ InitialContext ictx = new InitialContext()-->Line_60 $$ String classpath = (String) ictx.lookup(CLASSPATH)[ FD ]
Line_62 $$ int i = 0-->Line_64 $$ System.arraycopy(JAVA_PROCESS, 0, cmd, i, n)[ FD ]
Line_63 $$ int n = JAVA_PROCESS.length-->Line_64 $$ System.arraycopy(JAVA_PROCESS, 0, cmd, i, n)[ FD ]
Line_60 $$ String classpath = (String) ictx.lookup(CLASSPATH)-->Line_65 $$ cmd[n] = classpath[ FD ]
Line_62 $$ int i = 0-->Line_66 $$ i = n + 1[ FD ]
Line_66 $$ i = n + 1-->Line_66 $$ i = n + 1[ FD ]
Line_63 $$ int n = JAVA_PROCESS.length-->Line_66 $$ i = n + 1[ FD ]
Line_63 $$ int n = JAVA_PROCESS.length-->Line_67 $$ n = GRINDER_PROCESS.length[ FD ]
Line_67 $$ n = GRINDER_PROCESS.length-->Line_67 $$ n = GRINDER_PROCESS.length[ FD ]
Line_62 $$ int i = 0-->Line_68 $$ System.arraycopy(GRINDER_PROCESS, 0, cmd, i, n)[ FD ]
Line_66 $$ i = n + 1-->Line_68 $$ System.arraycopy(GRINDER_PROCESS, 0, cmd, i, n)[ FD ]
Line_63 $$ int n = JAVA_PROCESS.length-->Line_68 $$ System.arraycopy(GRINDER_PROCESS, 0, cmd, i, n)[ FD ]
Line_67 $$ n = GRINDER_PROCESS.length-->Line_68 $$ System.arraycopy(GRINDER_PROCESS, 0, cmd, i, n)[ FD ]
Line_69 $$ for (int j = 0; j < cmd.length; ++j) -->Line_69 $$ for (int j = 0; j < cmd.length; ++j) [ CD ]
Line_69 $$ for (int j = 0; j < cmd.length; ++j) -->Line_69 $$ for (int j = 0; j < cmd.length; ++j) [ CD ]
Line_69 $$ for (int j = 0; j < cmd.length; ++j) -->Line_69 $$ for (int j = 0; j < cmd.length; ++j) [ FD ]
Line_69 $$ for (int j = 0; j < cmd.length; ++j) -->Line_70 $$ System.out.print(cmd[j] + " ")[ CD ]
Line_72 $$ Process proc = Runtime.getRuntime().exec(cmd, null, workdir)-->Line_72 $$ Process proc = Runtime.getRuntime().exec(cmd, null, workdir)[ CD ]
Line_36 $$ File workdir = new File(dirname)-->Line_72 $$ Process proc = Runtime.getRuntime().exec(cmd, null, workdir)[ FD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_73 $$ session.setAttribute(PROCESS_TAG, proc)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_73 $$ session.setAttribute(PROCESS_TAG, proc)[ FD ]
Line_72 $$ Process proc = Runtime.getRuntime().exec(cmd, null, workdir)-->Line_73 $$ session.setAttribute(PROCESS_TAG, proc)[ FD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_76 $$ session.setAttribute(ERROR_MSG_TAG, e.toString())[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_76 $$ session.setAttribute(ERROR_MSG_TAG, e.toString())[ FD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_77 $$ session.setMaxInactiveInterval(TIMEOUT)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_77 $$ session.setMaxInactiveInterval(TIMEOUT)[ FD ]
Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)-->Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ CD ]
Line_4 $$ ServletContext ctx = getServletContext()-->Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)[ FD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_80 $$ e.printStackTrace(response.getWriter())[ FD ]
Line_14 $$ if (pValue != null && pValue.equals(START_TAG)) -->Line_83 $$ if (pValue != null && pValue.equals(CHECK_TAG)) [ CD ]
Line_13 $$ String pValue = request.getParameter(ACTION_TAG)-->Line_83 $$ if (pValue != null && pValue.equals(CHECK_TAG)) [ FD ]
Line_83 $$ if (pValue != null && pValue.equals(CHECK_TAG)) -->Line_84 $$ boolean finished = true[ CD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_86 $$ Process p = (Process) session.getAttribute(PROCESS_TAG)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_86 $$ Process p = (Process) session.getAttribute(PROCESS_TAG)[ FD ]
Line_87 $$ int result = p.exitValue()-->Line_87 $$ int result = p.exitValue()[ CD ]
Line_16 $$ int p = 1-->Line_87 $$ int result = p.exitValue()[ FD ]
Line_20 $$ p = Integer.parseInt(request.getParameter("procs"))-->Line_87 $$ int result = p.exitValue()[ FD ]
Line_21 $$ p = p > MAX_PROCS ? MAX_PROCS : p-->Line_87 $$ int result = p.exitValue()[ FD ]
Line_84 $$ boolean finished = true-->Line_89 $$ finished = false[ FD ]
Line_89 $$ finished = false-->Line_89 $$ finished = false[ FD ]
Line_83 $$ if (pValue != null && pValue.equals(CHECK_TAG)) -->Line_91 $$ if (finished) [ CD ]
Line_91 $$ if (finished) -->Line_92 $$ session.setMaxInactiveInterval(TIMEOUT)[ CD ]
Line_6 $$ HttpSession session = request.getSession(false)-->Line_92 $$ session.setMaxInactiveInterval(TIMEOUT)[ FD ]
Line_8 $$ session = request.getSession(true)-->Line_92 $$ session.setMaxInactiveInterval(TIMEOUT)[ FD ]
Line_91 $$ if (finished) -->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ CD ]
Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)-->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ FD ]
Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ FD ]
Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ FD ]
Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ FD ]
Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)-->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ FD ]
Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)-->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ CD ]
Line_4 $$ ServletContext ctx = getServletContext()-->Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)[ FD ]
Line_91 $$ if (finished) -->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ CD ]
Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ CD ]
Line_4 $$ ServletContext ctx = getServletContext()-->Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)[ FD ]
Line_5 $$ RequestDispatcher rd = ctx.getRequestDispatcher(SETUP_JSP)-->Line_99 $$ rd.forward(request, response)[ FD ]
Line_10 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_99 $$ rd.forward(request, response)[ FD ]
Line_15 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_99 $$ rd.forward(request, response)[ FD ]
Line_78 $$ rd = ctx.getRequestDispatcher(ERROR_JSP)-->Line_99 $$ rd.forward(request, response)[ FD ]
Line_93 $$ rd = ctx.getRequestDispatcher(RESULTS_JSP)-->Line_99 $$ rd.forward(request, response)[ FD ]
Line_95 $$ rd = ctx.getRequestDispatcher(WAIT_JSP)-->Line_99 $$ rd.forward(request, response)[ FD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_99 $$ rd.forward(request, response)[ FD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_99 $$ rd.forward(request, response)[ FD ]
Line_2 $$ private void processRequest(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_101 $$ e.printStackTrace(response.getWriter())[ FD ]
Line_69 $$ for (int j = 0; j < cmd.length; ++j) -->Line_69 $$ for (int j = 0; j < cmd.length; ++j) [ FD ]
Line_69 $$ for (int j = 0; j < cmd.length; ++j) -->Line_69 $$ for (int j = 0; j < cmd.length; ++j) [ FD ]
Line_69 $$ for (int j = 0; j < cmd.length; ++j) -->Line_69 $$ for (int j = 0; j < cmd.length; ++j) [ FD ]
