Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException [ CD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_3 $$ final List<Token> tokens = new ArrayList<Token>(tokenCount)[ CD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_4 $$ final Random r = new Random()[ CD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_5 $$ String t = Long.toString(new Date().getTime()) + Integer.toString(r.nextInt())[ CD ]
Line_4 $$ final Random r = new Random()-->Line_5 $$ String t = Long.toString(new Date().getTime()) + Integer.toString(r.nextInt())[ FD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_6 $$ final MessageDigest m[ CD ]
Line_6 $$ final MessageDigest m-->Line_8 $$ m = MessageDigest.getInstance("MD5")[ FD ]
Line_8 $$ m = MessageDigest.getInstance("MD5")-->Line_8 $$ m = MessageDigest.getInstance("MD5")[ FD ]
Line_8 $$ m = MessageDigest.getInstance("MD5")-->Line_8 $$ m = MessageDigest.getInstance("MD5")[ CD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ CD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException [ CD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ CD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ CD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_13 $$ final Token token = new Token()[ CD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_14 $$ token.setValid(true)[ CD ]
Line_13 $$ final Token token = new Token()-->Line_14 $$ token.setValid(true)[ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_15 $$ m.update(t.getBytes(), 0, t.length())[ CD ]
Line_6 $$ final MessageDigest m-->Line_15 $$ m.update(t.getBytes(), 0, t.length())[ FD ]
Line_8 $$ m = MessageDigest.getInstance("MD5")-->Line_15 $$ m.update(t.getBytes(), 0, t.length())[ FD ]
Line_5 $$ String t = Long.toString(new Date().getTime()) + Integer.toString(r.nextInt())-->Line_15 $$ m.update(t.getBytes(), 0, t.length())[ FD ]
Line_5 $$ String t = Long.toString(new Date().getTime()) + Integer.toString(r.nextInt())-->Line_15 $$ m.update(t.getBytes(), 0, t.length())[ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)[ CD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)[ CD ]
Line_6 $$ final MessageDigest m-->Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)[ FD ]
Line_8 $$ m = MessageDigest.getInstance("MD5")-->Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)[ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_17 $$ while (md5.length() < 32) [ CD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ CD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_17 $$ while (md5.length() < 32) [ FD ]
Line_17 $$ while (md5.length() < 32) -->Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5[ CD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5[ FD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5[ FD ]
Line_4 $$ final Random r = new Random()-->Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5[ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ CD ]
Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_5 $$ String t = Long.toString(new Date().getTime()) + Integer.toString(r.nextInt())-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_21 $$ logger.debug("Generated token #" + (i + 1) + ": " + t)[ CD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_22 $$ token.setTokenString(t)[ CD ]
Line_13 $$ final Token token = new Token()-->Line_22 $$ token.setTokenString(t)[ FD ]
Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)-->Line_22 $$ token.setTokenString(t)[ FD ]
Line_5 $$ String t = Long.toString(new Date().getTime()) + Integer.toString(r.nextInt())-->Line_22 $$ token.setTokenString(t)[ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_23 $$ tokens.add(token)[ CD ]
Line_3 $$ final List<Token> tokens = new ArrayList<Token>(tokenCount)-->Line_23 $$ tokens.add(token)[ FD ]
Line_13 $$ final Token token = new Token()-->Line_23 $$ tokens.add(token)[ FD ]
Line_2 $$ private List<Token> generateTokens(int tokenCount) throws XSServiceException -->Line_25 $$ return tokens[ CD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ FD ]
Line_12 $$ for (int i = 0; i < tokenCount; ++i) -->Line_12 $$ for (int i = 0; i < tokenCount; ++i) [ FD ]
Line_13 $$ final Token token = new Token()-->Line_14 $$ token.setValid(true)[ FD ]
Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)-->Line_15 $$ m.update(t.getBytes(), 0, t.length())[ FD ]
Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)-->Line_15 $$ m.update(t.getBytes(), 0, t.length())[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_16 $$ String md5 = new BigInteger(1, m.digest()).toString(16)-->Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)[ FD ]
Line_13 $$ final Token token = new Token()-->Line_22 $$ token.setTokenString(t)[ FD ]
Line_20 $$ t = md5.substring(0, 8) + "-" + md5.substring(8, 16) + "-" + md5.substring(16, 24) + "-" + md5.substring(24, 32)-->Line_22 $$ token.setTokenString(t)[ FD ]
Line_13 $$ final Token token = new Token()-->Line_23 $$ tokens.add(token)[ FD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_17 $$ while (md5.length() < 32) [ FD ]
Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5-->Line_18 $$ md5 = String.valueOf(r.nextInt(9)) + md5[ FD ]
