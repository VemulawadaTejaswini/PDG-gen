Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException [ CD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_4 $$ con.setAutoCommit(false)[ FD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_5 $$ HashMap<String, String> ldap2db = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_LDAP2DB + this.dbInsertName)[ FD ]
Line_6 $$ Iterator<LDAPModification> it = mods.iterator()-->Line_6 $$ Iterator<LDAPModification> it = mods.iterator()[ CD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_6 $$ Iterator<LDAPModification> it = mods.iterator()[ FD ]
Line_8 $$ while (it.hasNext()) -->Line_8 $$ while (it.hasNext()) [ CD ]
Line_6 $$ Iterator<LDAPModification> it = mods.iterator()-->Line_8 $$ while (it.hasNext()) [ FD ]
Line_8 $$ while (it.hasNext()) -->Line_9 $$ LDAPModification mod = it.next()[ CD ]
Line_9 $$ LDAPModification mod = it.next()-->Line_9 $$ LDAPModification mod = it.next()[ CD ]
Line_6 $$ Iterator<LDAPModification> it = mods.iterator()-->Line_9 $$ LDAPModification mod = it.next()[ FD ]
Line_8 $$ while (it.hasNext()) -->Line_10 $$ if (mod.getOp() != LDAPModification.REPLACE) [ CD ]
Line_9 $$ LDAPModification mod = it.next()-->Line_10 $$ if (mod.getOp() != LDAPModification.REPLACE) [ FD ]
Line_8 $$ while (it.hasNext()) -->Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "[ CD ]
Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "-->Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "[ FD ]
Line_7 $$ String sql = "UPDATE " + this.tableName + " SET "-->Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "[ FD ]
Line_5 $$ HashMap<String, String> ldap2db = (HashMap<String, String>) chain.getRequest().get(JdbcInsert.MYVD_DB_LDAP2DB + this.dbInsertName)-->Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "[ FD ]
Line_9 $$ LDAPModification mod = it.next()-->Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "[ FD ]
Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "-->Line_15 $$ sql += " WHERE " + this.rdnField + "=?"[ FD ]
Line_7 $$ String sql = "UPDATE " + this.tableName + " SET "-->Line_15 $$ sql += " WHERE " + this.rdnField + "=?"[ FD ]
Line_15 $$ sql += " WHERE " + this.rdnField + "=?"-->Line_15 $$ sql += " WHERE " + this.rdnField + "=?"[ FD ]
Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)-->Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)[ CD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)[ FD ]
Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "-->Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)[ FD ]
Line_7 $$ String sql = "UPDATE " + this.tableName + " SET "-->Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)[ FD ]
Line_15 $$ sql += " WHERE " + this.rdnField + "=?"-->Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)[ FD ]
Line_6 $$ Iterator<LDAPModification> it = mods.iterator()-->Line_17 $$ it = mods.iterator()[ FD ]
Line_17 $$ it = mods.iterator()-->Line_17 $$ it = mods.iterator()[ FD ]
Line_17 $$ it = mods.iterator()-->Line_17 $$ it = mods.iterator()[ CD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_17 $$ it = mods.iterator()[ FD ]
Line_19 $$ while (it.hasNext()) -->Line_19 $$ while (it.hasNext()) [ CD ]
Line_6 $$ Iterator<LDAPModification> it = mods.iterator()-->Line_19 $$ while (it.hasNext()) [ FD ]
Line_17 $$ it = mods.iterator()-->Line_19 $$ while (it.hasNext()) [ FD ]
Line_19 $$ while (it.hasNext()) -->Line_20 $$ LDAPModification mod = it.next()[ CD ]
Line_20 $$ LDAPModification mod = it.next()-->Line_20 $$ LDAPModification mod = it.next()[ CD ]
Line_6 $$ Iterator<LDAPModification> it = mods.iterator()-->Line_20 $$ LDAPModification mod = it.next()[ FD ]
Line_17 $$ it = mods.iterator()-->Line_20 $$ LDAPModification mod = it.next()[ FD ]
Line_19 $$ while (it.hasNext()) -->Line_21 $$ ps.setString(i, mod.getAttribute().getStringValue())[ CD ]
Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)-->Line_21 $$ ps.setString(i, mod.getAttribute().getStringValue())[ FD ]
Line_18 $$ int i = 1-->Line_21 $$ ps.setString(i, mod.getAttribute().getStringValue())[ FD ]
Line_20 $$ LDAPModification mod = it.next()-->Line_21 $$ ps.setString(i, mod.getAttribute().getStringValue())[ FD ]
Line_9 $$ LDAPModification mod = it.next()-->Line_21 $$ ps.setString(i, mod.getAttribute().getStringValue())[ FD ]
Line_19 $$ while (it.hasNext()) -->Line_22 $$ i++[ CD ]
Line_18 $$ int i = 1-->Line_22 $$ i++[ FD ]
Line_24 $$ String uid = ((RDN) dn.getDN().getRDNs().get(0)).getValue()-->Line_24 $$ String uid = ((RDN) dn.getDN().getRDNs().get(0)).getValue()[ CD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_24 $$ String uid = ((RDN) dn.getDN().getRDNs().get(0)).getValue()[ FD ]
Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)-->Line_25 $$ ps.setString(i, uid)[ FD ]
Line_18 $$ int i = 1-->Line_25 $$ ps.setString(i, uid)[ FD ]
Line_24 $$ String uid = ((RDN) dn.getDN().getRDNs().get(0)).getValue()-->Line_25 $$ ps.setString(i, uid)[ FD ]
Line_16 $$ PreparedStatement ps = con.prepareStatement(sql)-->Line_26 $$ ps.executeUpdate()[ FD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_27 $$ con.commit()[ FD ]
Line_2 $$ private void modifyEntry(ModifyInterceptorChain chain, DistinguishedName dn, ArrayList<LDAPModification> mods, Connection con) throws LDAPException -->Line_30 $$ con.rollback()[ FD ]
Line_9 $$ LDAPModification mod = it.next()-->Line_10 $$ if (mod.getOp() != LDAPModification.REPLACE) [ FD ]
Line_9 $$ LDAPModification mod = it.next()-->Line_13 $$ sql += ldap2db.get(mod.getAttribute().getName()) + "=? "[ FD ]
Line_20 $$ LDAPModification mod = it.next()-->Line_21 $$ ps.setString(i, mod.getAttribute().getStringValue())[ FD ]
