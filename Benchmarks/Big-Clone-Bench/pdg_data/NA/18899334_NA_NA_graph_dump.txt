Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException [ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_3 $$ HttpAsyncClient httpclient = new DefaultHttpAsyncClient()[ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_4 $$ httpclient.start()[ CD ]
Line_3 $$ HttpAsyncClient httpclient = new DefaultHttpAsyncClient()-->Line_4 $$ httpclient.start()[ FD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_5 $$ if (dataSource != null && dataSource.size() > 0) [ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_5 $$ if (dataSource != null && dataSource.size() > 0) [ FD ]
Line_5 $$ if (dataSource != null && dataSource.size() > 0) -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(dataSource.size())[ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(dataSource.size())[ FD ]
Line_5 $$ if (dataSource != null && dataSource.size() > 0) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ CD ]
Line_5 $$ if (dataSource != null && dataSource.size() > 0) -->Line_5 $$ if (dataSource != null && dataSource.size() > 0) [ CD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ CD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ CD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_8 $$ final HttpGet request = new HttpGet(dataSource.get(i))[ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_8 $$ final HttpGet request = new HttpGet(dataSource.get(i))[ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_8 $$ final HttpGet request = new HttpGet(dataSource.get(i))[ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() [ CD ]
Line_3 $$ HttpAsyncClient httpclient = new DefaultHttpAsyncClient()-->Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() [ FD ]
Line_8 $$ final HttpGet request = new HttpGet(dataSource.get(i))-->Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() [ FD ]
Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() -->Line_11 $$ System.out.println(" Request completed " + count + " " + request.getRequestLine() + " " + response.getStatusLine())[ CD ]
Line_8 $$ final HttpGet request = new HttpGet(dataSource.get(i))-->Line_11 $$ System.out.println(" Request completed " + count + " " + request.getRequestLine() + " " + response.getStatusLine())[ FD ]
Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() -->Line_11 $$ System.out.println(" Request completed " + count + " " + request.getRequestLine() + " " + response.getStatusLine())[ FD ]
Line_13 $$ HttpEntity he = response.getEntity()-->Line_13 $$ HttpEntity he = response.getEntity()[ CD ]
Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() -->Line_13 $$ HttpEntity he = response.getEntity()[ FD ]
Line_15 $$ String resp = EntityUtils.toString(he, "gb2312")-->Line_15 $$ String resp = EntityUtils.toString(he, "gb2312")[ CD ]
Line_13 $$ HttpEntity he = response.getEntity()-->Line_15 $$ String resp = EntityUtils.toString(he, "gb2312")[ FD ]
Line_15 $$ String resp = EntityUtils.toString(he, "gb2312")-->Line_16 $$ if (resp != null && resp.length() > 0) [ FD ]
Line_16 $$ if (resp != null && resp.length() > 0) -->Line_17 $$ SinaGGTJBean ggtjBean = SinaGGTJPostProcess.postSinaGGTJBeanProcess(resp)[ CD ]
Line_17 $$ SinaGGTJBean ggtjBean = SinaGGTJPostProcess.postSinaGGTJBeanProcess(resp)-->Line_17 $$ SinaGGTJBean ggtjBean = SinaGGTJPostProcess.postSinaGGTJBeanProcess(resp)[ CD ]
Line_15 $$ String resp = EntityUtils.toString(he, "gb2312")-->Line_17 $$ SinaGGTJBean ggtjBean = SinaGGTJPostProcess.postSinaGGTJBeanProcess(resp)[ FD ]
Line_16 $$ if (resp != null && resp.length() > 0) -->Line_18 $$ sinaGGTJBeanList.add(ggtjBean)[ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_18 $$ sinaGGTJBeanList.add(ggtjBean)[ FD ]
Line_17 $$ SinaGGTJBean ggtjBean = SinaGGTJPostProcess.postSinaGGTJBeanProcess(resp)-->Line_18 $$ sinaGGTJBeanList.add(ggtjBean)[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(dataSource.size())-->Line_26 $$ latch.countDown()[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(dataSource.size())-->Line_28 $$ latch.countDown()[ FD ]
Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() -->Line_32 $$ latch.countDown()[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(dataSource.size())-->Line_32 $$ latch.countDown()[ FD ]
Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() -->Line_35 $$ latch.countDown()[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(dataSource.size())-->Line_35 $$ latch.countDown()[ FD ]
Line_5 $$ if (dataSource != null && dataSource.size() > 0) -->Line_39 $$ latch.await()[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(dataSource.size())-->Line_39 $$ latch.await()[ FD ]
Line_5 $$ if (dataSource != null && dataSource.size() > 0) -->Line_40 $$ System.out.println("done")[ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_42 $$ if (httpclient != null) [ CD ]
Line_3 $$ HttpAsyncClient httpclient = new DefaultHttpAsyncClient()-->Line_42 $$ if (httpclient != null) [ FD ]
Line_42 $$ if (httpclient != null) -->Line_43 $$ httpclient.shutdown()[ CD ]
Line_3 $$ HttpAsyncClient httpclient = new DefaultHttpAsyncClient()-->Line_43 $$ httpclient.shutdown()[ FD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_45 $$ System.out.println(sinaGGTJBeanList.size())[ CD ]
Line_2 $$ public static void parseSinaGGTJ(ArrayList<String> dataSource, final ArrayList<SinaGGTJBean> sinaGGTJBeanList) throws IOReactorException, InterruptedException -->Line_45 $$ System.out.println(sinaGGTJBeanList.size())[ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_7 $$ for (int i = 0; i < dataSource.size(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < dataSource.size(); i++) -->Line_8 $$ final HttpGet request = new HttpGet(dataSource.get(i))[ FD ]
Line_8 $$ final HttpGet request = new HttpGet(dataSource.get(i))-->Line_9 $$ httpclient.execute(request, new FutureCallback<HttpResponse>() [ FD ]
