Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception [ CD ]
Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception -->Line_3 $$ int reqNo = 20[ CD ]
Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception -->Line_4 $$ Random rnd = new Random()[ CD ]
Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception -->Line_5 $$ List testData = new ArrayList(reqNo)[ CD ]
Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception -->Line_6 $$ for (int i = 0; i < reqNo; i++) [ CD ]
Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception -->Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception [ CD ]
Line_3 $$ int reqNo = 20-->Line_6 $$ for (int i = 0; i < reqNo; i++) [ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_6 $$ for (int i = 0; i < reqNo; i++) [ CD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_6 $$ for (int i = 0; i < reqNo; i++) [ CD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_6 $$ for (int i = 0; i < reqNo; i++) [ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_7 $$ int size = rnd.nextInt(20000)[ CD ]
Line_7 $$ int size = rnd.nextInt(20000)-->Line_7 $$ int size = rnd.nextInt(20000)[ CD ]
Line_4 $$ Random rnd = new Random()-->Line_7 $$ int size = rnd.nextInt(20000)[ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_8 $$ byte[] data = new byte[size][ CD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_9 $$ rnd.nextBytes(data)[ CD ]
Line_4 $$ Random rnd = new Random()-->Line_9 $$ rnd.nextBytes(data)[ FD ]
Line_8 $$ byte[] data = new byte[size]-->Line_9 $$ rnd.nextBytes(data)[ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_10 $$ testData.add(data)[ CD ]
Line_5 $$ List testData = new ArrayList(reqNo)-->Line_10 $$ testData.add(data)[ FD ]
Line_8 $$ byte[] data = new byte[size]-->Line_10 $$ testData.add(data)[ FD ]
Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception -->Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() [ CD ]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) [ CD ]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) [ FD ]
Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) -->Line_15 $$ HttpEntity incoming = ((HttpEntityEnclosingRequest) request).getEntity()[ CD ]
Line_15 $$ HttpEntity incoming = ((HttpEntityEnclosingRequest) request).getEntity()-->Line_15 $$ HttpEntity incoming = ((HttpEntityEnclosingRequest) request).getEntity()[ CD ]
Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) -->Line_16 $$ byte[] data = EntityUtils.toByteArray(incoming)[ CD ]
Line_16 $$ byte[] data = EntityUtils.toByteArray(incoming)-->Line_16 $$ byte[] data = EntityUtils.toByteArray(incoming)[ CD ]
Line_15 $$ HttpEntity incoming = ((HttpEntityEnclosingRequest) request).getEntity()-->Line_16 $$ byte[] data = EntityUtils.toByteArray(incoming)[ FD ]
Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) -->Line_17 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)[ CD ]
Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) -->Line_18 $$ outgoing.setChunked(true)[ CD ]
Line_17 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_18 $$ outgoing.setChunked(true)[ FD ]
Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) -->Line_19 $$ response.setEntity(outgoing)[ CD ]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_19 $$ response.setEntity(outgoing)[ FD ]
Line_17 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_19 $$ response.setEntity(outgoing)[ FD ]
Line_14 $$ if (request instanceof HttpEntityEnclosingRequest) -->Line_22 $$ response.setEntity(outgoing)[ CD ]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_22 $$ response.setEntity(outgoing)[ FD ]
Line_17 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_22 $$ response.setEntity(outgoing)[ FD ]
Line_2 $$ public void testSimpleHttpPostsChunked() throws Exception -->Line_26 $$ this.server.start()[ CD ]
Line_3 $$ int reqNo = 20-->Line_30 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_30 $$ for (int r = 0; r < reqNo; r++) [ CD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_30 $$ for (int r = 0; r < reqNo; r++) [ CD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_30 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_31 $$ if (!conn.isOpen()) [ CD ]
Line_31 $$ if (!conn.isOpen()) -->Line_31 $$ if (!conn.isOpen()) [ CD ]
Line_31 $$ if (!conn.isOpen()) -->Line_31 $$ if (!conn.isOpen()) [ CD ]
Line_31 $$ if (!conn.isOpen()) -->Line_32 $$ Socket socket = new Socket(host.getHostName(), host.getPort())[ CD ]
Line_31 $$ if (!conn.isOpen()) -->Line_33 $$ conn.bind(socket, this.client.getParams())[ CD ]
Line_32 $$ Socket socket = new Socket(host.getHostName(), host.getPort())-->Line_33 $$ conn.bind(socket, this.client.getParams())[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_35 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")[ CD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_36 $$ byte[] data = (byte[]) testData.get(r)[ CD ]
Line_5 $$ List testData = new ArrayList(reqNo)-->Line_36 $$ byte[] data = (byte[]) testData.get(r)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_36 $$ byte[] data = (byte[]) testData.get(r)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_37 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)[ CD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_38 $$ outgoing.setChunked(true)[ CD ]
Line_37 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_38 $$ outgoing.setChunked(true)[ FD ]
Line_17 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_38 $$ outgoing.setChunked(true)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_39 $$ post.setEntity(outgoing)[ CD ]
Line_35 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_39 $$ post.setEntity(outgoing)[ FD ]
Line_37 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_39 $$ post.setEntity(outgoing)[ FD ]
Line_17 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_39 $$ post.setEntity(outgoing)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)[ CD ]
Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)[ CD ]
Line_35 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_41 $$ byte[] received = EntityUtils.toByteArray(response.getEntity())[ CD ]
Line_41 $$ byte[] received = EntityUtils.toByteArray(response.getEntity())-->Line_41 $$ byte[] received = EntityUtils.toByteArray(response.getEntity())[ CD ]
Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_41 $$ byte[] received = EntityUtils.toByteArray(response.getEntity())[ FD ]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_41 $$ byte[] received = EntityUtils.toByteArray(response.getEntity())[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_42 $$ byte[] expected = (byte[]) testData.get(r)[ CD ]
Line_5 $$ List testData = new ArrayList(reqNo)-->Line_42 $$ byte[] expected = (byte[]) testData.get(r)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_42 $$ byte[] expected = (byte[]) testData.get(r)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_43 $$ assertEquals(expected.length, received.length)[ CD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ CD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_30 $$ for (int r = 0; r < reqNo; r++) [ CD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ FD ]
Line_44 $$ for (int i = 0; i < expected.length; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ CD ]
Line_44 $$ for (int i = 0; i < expected.length; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ CD ]
Line_44 $$ for (int i = 0; i < expected.length; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ FD ]
Line_44 $$ for (int i = 0; i < expected.length; i++) -->Line_45 $$ assertEquals(expected[i], received[i])[ CD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_47 $$ if (!this.client.keepAlive(response)) [ CD ]
Line_47 $$ if (!this.client.keepAlive(response)) -->Line_47 $$ if (!this.client.keepAlive(response)) [ CD ]
Line_47 $$ if (!this.client.keepAlive(response)) -->Line_47 $$ if (!this.client.keepAlive(response)) [ CD ]
Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_47 $$ if (!this.client.keepAlive(response)) [ FD ]
Line_12 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_47 $$ if (!this.client.keepAlive(response)) [ FD ]
Line_47 $$ if (!this.client.keepAlive(response)) -->Line_48 $$ conn.close()[ CD ]
Line_3 $$ int reqNo = 20-->Line_52 $$ assertEquals(reqNo, cm.getRequestCount())[ FD ]
Line_3 $$ int reqNo = 20-->Line_53 $$ assertEquals(reqNo, cm.getResponseCount())[ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_6 $$ for (int i = 0; i < reqNo; i++) [ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_6 $$ for (int i = 0; i < reqNo; i++) [ FD ]
Line_6 $$ for (int i = 0; i < reqNo; i++) -->Line_6 $$ for (int i = 0; i < reqNo; i++) [ FD ]
Line_8 $$ byte[] data = new byte[size]-->Line_9 $$ rnd.nextBytes(data)[ FD ]
Line_8 $$ byte[] data = new byte[size]-->Line_10 $$ testData.add(data)[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_30 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_30 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_30 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_32 $$ Socket socket = new Socket(host.getHostName(), host.getPort())-->Line_33 $$ conn.bind(socket, this.client.getParams())[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_36 $$ byte[] data = (byte[]) testData.get(r)[ FD ]
Line_37 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_38 $$ outgoing.setChunked(true)[ FD ]
Line_35 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_39 $$ post.setEntity(outgoing)[ FD ]
Line_37 $$ ByteArrayEntity outgoing = new ByteArrayEntity(data)-->Line_39 $$ post.setEntity(outgoing)[ FD ]
Line_35 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)[ FD ]
Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_41 $$ byte[] received = EntityUtils.toByteArray(response.getEntity())[ FD ]
Line_30 $$ for (int r = 0; r < reqNo; r++) -->Line_42 $$ byte[] expected = (byte[]) testData.get(r)[ FD ]
Line_40 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_47 $$ if (!this.client.keepAlive(response)) [ FD ]
Line_44 $$ for (int i = 0; i < expected.length; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ FD ]
Line_44 $$ for (int i = 0; i < expected.length; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ FD ]
Line_44 $$ for (int i = 0; i < expected.length; i++) -->Line_44 $$ for (int i = 0; i < expected.length; i++) [ FD ]
