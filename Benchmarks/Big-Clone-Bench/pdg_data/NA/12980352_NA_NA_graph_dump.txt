Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException [ CD ]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException -->Line_3 $$ List<Class<?>> classes = new LinkedList<Class<?>>()[ CD ]
Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) -->Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) [ CD ]
Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) -->Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) [ CD ]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) -->Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) [ FD ]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) -->Line_8 $$ JarInputStream jis = new JarInputStream(url.openStream())[ FD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_10 $$ while ((je = jis.getNextJarEntry()) != null) [ FD ]
Line_9 $$ JarEntry je-->Line_10 $$ while ((je = jis.getNextJarEntry()) != null) [ FD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_10 $$ while ((je = jis.getNextJarEntry()) != null) [ CD ]
Line_8 $$ JarInputStream jis = new JarInputStream(url.openStream())-->Line_10 $$ while ((je = jis.getNextJarEntry()) != null) [ FD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_11 $$ Log.verbose("Checking resource " + je.getName())[ CD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_11 $$ Log.verbose("Checking resource " + je.getName())[ FD ]
Line_9 $$ JarEntry je-->Line_11 $$ Log.verbose("Checking resource " + je.getName())[ FD ]
Line_13 $$ if (je.getName().endsWith(".class")) -->Line_13 $$ if (je.getName().endsWith(".class")) [ CD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_13 $$ if (je.getName().endsWith(".class")) [ FD ]
Line_9 $$ JarEntry je-->Line_13 $$ if (je.getName().endsWith(".class")) [ FD ]
Line_13 $$ if (je.getName().endsWith(".class")) -->Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))[ CD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))[ CD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))[ FD ]
Line_9 $$ JarEntry je-->Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))[ FD ]
Line_13 $$ if (je.getName().endsWith(".class")) -->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ CD ]
Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ CD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ CD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException -->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_16 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ CD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_16 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ FD ]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException -->Line_16 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ FD ]
Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_17 $$ classes.add(c)[ CD ]
Line_3 $$ List<Class<?>> classes = new LinkedList<Class<?>>()-->Line_17 $$ classes.add(c)[ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_17 $$ classes.add(c)[ FD ]
Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) -->Line_28 $$ if (url.getPath().endsWith("/")) [ CD ]
Line_28 $$ if (url.getPath().endsWith("/")) -->Line_28 $$ if (url.getPath().endsWith("/")) [ CD ]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) -->Line_28 $$ if (url.getPath().endsWith("/")) [ FD ]
Line_28 $$ if (url.getPath().endsWith("/")) -->Line_29 $$ File root = new File(url.getPath())[ CD ]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) -->Line_29 $$ File root = new File(url.getPath())[ FD ]
Line_29 $$ File root = new File(url.getPath())-->Line_30 $$ for (File file : FileFunctions.getFileTree(root)) [ FD ]
Line_32 $$ if (file.getName().toLowerCase().endsWith(".class")) -->Line_32 $$ if (file.getName().toLowerCase().endsWith(".class")) [ CD ]
Line_30 $$ for (File file : FileFunctions.getFileTree(root)) -->Line_32 $$ if (file.getName().toLowerCase().endsWith(".class")) [ FD ]
Line_32 $$ if (file.getName().toLowerCase().endsWith(".class")) -->Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))[ CD ]
Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))-->Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))[ CD ]
Line_30 $$ for (File file : FileFunctions.getFileTree(root)) -->Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))[ FD ]
Line_29 $$ File root = new File(url.getPath())-->Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))[ FD ]
Line_32 $$ if (file.getName().toLowerCase().endsWith(".class")) -->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ CD ]
Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ CD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))-->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ CD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))-->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException -->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))-->Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_35 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ CD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_35 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ FD ]
Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))-->Line_35 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ FD ]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException -->Line_35 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ FD ]
Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) -->Line_36 $$ classes.add(c)[ CD ]
Line_3 $$ List<Class<?>> classes = new LinkedList<Class<?>>()-->Line_36 $$ classes.add(c)[ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_36 $$ classes.add(c)[ FD ]
Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", ""))-->Line_36 $$ classes.add(c)[ FD ]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException -->Line_45 $$ return classes[ CD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_11 $$ Log.verbose("Checking resource " + je.getName())[ FD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_13 $$ if (je.getName().endsWith(".class")) [ FD ]
Line_10 $$ while ((je = jis.getNextJarEntry()) != null) -->Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))[ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_16 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName())[ FD ]
Line_14 $$ Class<?> c = this.loadClass(je.getName().replaceAll("/", ".").replaceAll(".class$", ""))-->Line_17 $$ classes.add(c)[ FD ]
