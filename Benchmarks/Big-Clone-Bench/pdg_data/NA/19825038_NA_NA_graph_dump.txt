Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception [ CD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_3 $$ StringBuilder parambuilder = new StringBuilder("")[ CD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_4 $$ if (params != null && !params.isEmpty()) [ CD ]
Line_4 $$ if (params != null && !params.isEmpty()) -->Line_4 $$ if (params != null && !params.isEmpty()) [ CD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_4 $$ if (params != null && !params.isEmpty()) [ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_5 $$ for (Map.Entry<String, String> entry : params.entrySet()) [ FD ]
Line_3 $$ StringBuilder parambuilder = new StringBuilder("")-->Line_6 $$ parambuilder.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), encode)).append("&")[ FD ]
Line_5 $$ for (Map.Entry<String, String> entry : params.entrySet()) -->Line_6 $$ parambuilder.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), encode)).append("&")[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_6 $$ parambuilder.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), encode)).append("&")[ FD ]
Line_5 $$ for (Map.Entry<String, String> entry : params.entrySet()) -->Line_6 $$ parambuilder.append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), encode)).append("&")[ FD ]
Line_4 $$ if (params != null && !params.isEmpty()) -->Line_8 $$ parambuilder.deleteCharAt(parambuilder.length() - 1)[ CD ]
Line_3 $$ StringBuilder parambuilder = new StringBuilder("")-->Line_8 $$ parambuilder.deleteCharAt(parambuilder.length() - 1)[ FD ]
Line_3 $$ StringBuilder parambuilder = new StringBuilder("")-->Line_8 $$ parambuilder.deleteCharAt(parambuilder.length() - 1)[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_10 $$ byte[] data = parambuilder.toString().getBytes()[ CD ]
Line_10 $$ byte[] data = parambuilder.toString().getBytes()-->Line_10 $$ byte[] data = parambuilder.toString().getBytes()[ CD ]
Line_3 $$ StringBuilder parambuilder = new StringBuilder("")-->Line_10 $$ byte[] data = parambuilder.toString().getBytes()[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_11 $$ URL url = new URL(path)[ CD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_11 $$ URL url = new URL(path)-->Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_13 $$ conn.setDoOutput(true)[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_13 $$ conn.setDoOutput(true)[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_14 $$ conn.setUseCaches(false)[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_14 $$ conn.setUseCaches(false)[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_15 $$ conn.setConnectTimeout(5 * 1000)[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_15 $$ conn.setConnectTimeout(5 * 1000)[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_16 $$ conn.setRequestMethod("POST")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_16 $$ conn.setRequestMethod("POST")[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_17 $$ conn.setRequestProperty("Accept", "image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_17 $$ conn.setRequestProperty("Accept", "image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*")[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_18 $$ conn.setRequestProperty("Accept-Language", "zh-CN")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_18 $$ conn.setRequestProperty("Accept-Language", "zh-CN")[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_19 $$ conn.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_19 $$ conn.setRequestProperty("User-Agent", "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)")[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_20 $$ conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_20 $$ conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_21 $$ conn.setRequestProperty("Content-Length", String.valueOf(data.length))[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_21 $$ conn.setRequestProperty("Content-Length", String.valueOf(data.length))[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_22 $$ conn.setRequestProperty("Connection", "Keep-Alive")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_22 $$ conn.setRequestProperty("Connection", "Keep-Alive")[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_23 $$ DataOutputStream outStream = new DataOutputStream(conn.getOutputStream())[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_23 $$ DataOutputStream outStream = new DataOutputStream(conn.getOutputStream())[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_24 $$ outStream.write(data)[ CD ]
Line_23 $$ DataOutputStream outStream = new DataOutputStream(conn.getOutputStream())-->Line_24 $$ outStream.write(data)[ FD ]
Line_10 $$ byte[] data = parambuilder.toString().getBytes()-->Line_24 $$ outStream.write(data)[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_25 $$ outStream.flush()[ CD ]
Line_23 $$ DataOutputStream outStream = new DataOutputStream(conn.getOutputStream())-->Line_25 $$ outStream.flush()[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_26 $$ outStream.close()[ CD ]
Line_23 $$ DataOutputStream outStream = new DataOutputStream(conn.getOutputStream())-->Line_26 $$ outStream.close()[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_27 $$ if (conn.getResponseCode() == 200) [ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_27 $$ if (conn.getResponseCode() == 200) [ FD ]
Line_27 $$ if (conn.getResponseCode() == 200) -->Line_28 $$ return StreamTool.readInputStream(conn.getInputStream())[ CD ]
Line_28 $$ return StreamTool.readInputStream(conn.getInputStream())-->Line_28 $$ return StreamTool.readInputStream(conn.getInputStream())[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_28 $$ return StreamTool.readInputStream(conn.getInputStream())[ FD ]
Line_2 $$ public static byte[] post(String path, Map<String, String> params, String encode) throws Exception -->Line_30 $$ return null[ CD ]
