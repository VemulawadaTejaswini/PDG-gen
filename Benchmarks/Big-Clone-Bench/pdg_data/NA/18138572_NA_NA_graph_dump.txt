Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) [ CD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_3 $$ String[] urlArray[ CD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_4 $$ Vector<String> urlVector = new Vector<String>()[ CD ]
Line_6 $$ ClassLoader classLoader = MqatMain.class.getClassLoader()-->Line_6 $$ ClassLoader classLoader = MqatMain.class.getClassLoader()[ CD ]
Line_8 $$ Enumeration e = urlClassLoader.findResources(resourceName)-->Line_8 $$ Enumeration e = urlClassLoader.findResources(resourceName)[ CD ]
Line_7 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_8 $$ Enumeration e = urlClassLoader.findResources(resourceName)[ FD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_8 $$ Enumeration e = urlClassLoader.findResources(resourceName)[ FD ]
Line_9 $$ for (; e.hasMoreElements(); ) -->Line_9 $$ for (; e.hasMoreElements(); ) [ CD ]
Line_8 $$ Enumeration e = urlClassLoader.findResources(resourceName)-->Line_9 $$ for (; e.hasMoreElements(); ) [ FD ]
Line_9 $$ for (; e.hasMoreElements(); ) -->Line_10 $$ URL url = (URL) e.nextElement()[ CD ]
Line_8 $$ Enumeration e = urlClassLoader.findResources(resourceName)-->Line_10 $$ URL url = (URL) e.nextElement()[ FD ]
Line_9 $$ for (; e.hasMoreElements(); ) -->Line_11 $$ if ("file".equals(url.getProtocol())) [ CD ]
Line_11 $$ if ("file".equals(url.getProtocol())) -->Line_11 $$ if ("file".equals(url.getProtocol())) [ CD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_11 $$ if ("file".equals(url.getProtocol())) [ FD ]
Line_11 $$ if ("file".equals(url.getProtocol())) -->Line_12 $$ File file = new File(url.getPath())[ CD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_12 $$ File file = new File(url.getPath())[ FD ]
Line_11 $$ if ("file".equals(url.getProtocol())) -->Line_13 $$ File[] fileList = file.listFiles()[ CD ]
Line_13 $$ File[] fileList = file.listFiles()-->Line_13 $$ File[] fileList = file.listFiles()[ CD ]
Line_12 $$ File file = new File(url.getPath())-->Line_13 $$ File[] fileList = file.listFiles()[ FD ]
Line_11 $$ if ("file".equals(url.getProtocol())) -->Line_14 $$ if (fileList != null) [ CD ]
Line_13 $$ File[] fileList = file.listFiles()-->Line_14 $$ if (fileList != null) [ FD ]
Line_14 $$ if (fileList != null) -->Line_15 $$ for (int i = 0; i < fileList.length; i++) [ CD ]
Line_14 $$ if (fileList != null) -->Line_14 $$ if (fileList != null) [ CD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_15 $$ for (int i = 0; i < fileList.length; i++) [ CD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_15 $$ for (int i = 0; i < fileList.length; i++) [ CD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_15 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_16 $$ String urlStr = fileList[i].toURL().toString()[ CD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_16 $$ String urlStr = fileList[i].toURL().toString()[ CD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_17 $$ if (urlStr.matches(regExFilter)) [ CD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_17 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_17 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_17 $$ if (urlStr.matches(regExFilter)) -->Line_17 $$ if (urlStr.matches(regExFilter)) [ CD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_17 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_17 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_17 $$ if (urlStr.matches(regExFilter)) -->Line_18 $$ urlVector.add(urlStr)[ CD ]
Line_4 $$ Vector<String> urlVector = new Vector<String>()-->Line_18 $$ urlVector.add(urlStr)[ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_18 $$ urlVector.add(urlStr)[ FD ]
Line_11 $$ if ("file".equals(url.getProtocol())) -->Line_22 $$ if ("jar".equals(url.getProtocol())) [ CD ]
Line_22 $$ if ("jar".equals(url.getProtocol())) -->Line_22 $$ if ("jar".equals(url.getProtocol())) [ CD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_22 $$ if ("jar".equals(url.getProtocol())) [ FD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_23 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()[ FD ]
Line_22 $$ if ("jar".equals(url.getProtocol())) -->Line_24 $$ JarFile jarFile = jarConnection.getJarFile()[ CD ]
Line_22 $$ if ("jar".equals(url.getProtocol())) -->Line_25 $$ Enumeration jarEntries = jarFile.entries()[ CD ]
Line_22 $$ if ("jar".equals(url.getProtocol())) -->Line_26 $$ for (; jarEntries.hasMoreElements(); ) [ CD ]
Line_22 $$ if ("jar".equals(url.getProtocol())) -->Line_22 $$ if ("jar".equals(url.getProtocol())) [ CD ]
Line_26 $$ for (; jarEntries.hasMoreElements(); ) -->Line_26 $$ for (; jarEntries.hasMoreElements(); ) [ CD ]
Line_26 $$ for (; jarEntries.hasMoreElements(); ) -->Line_27 $$ JarEntry jarEntry = (JarEntry) jarEntries.nextElement()[ CD ]
Line_26 $$ for (; jarEntries.hasMoreElements(); ) -->Line_28 $$ if (!jarEntry.isDirectory()) [ CD ]
Line_28 $$ if (!jarEntry.isDirectory()) -->Line_28 $$ if (!jarEntry.isDirectory()) [ CD ]
Line_28 $$ if (!jarEntry.isDirectory()) -->Line_28 $$ if (!jarEntry.isDirectory()) [ CD ]
Line_27 $$ JarEntry jarEntry = (JarEntry) jarEntries.nextElement()-->Line_28 $$ if (!jarEntry.isDirectory()) [ FD ]
Line_28 $$ if (!jarEntry.isDirectory()) -->Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)[ CD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)[ CD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)[ FD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)[ FD ]
Line_28 $$ if (!jarEntry.isDirectory()) -->Line_30 $$ urlStr += "/" + jarEntry[ CD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_30 $$ urlStr += "/" + jarEntry[ FD ]
Line_30 $$ urlStr += "/" + jarEntry-->Line_30 $$ urlStr += "/" + jarEntry[ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_30 $$ urlStr += "/" + jarEntry[ FD ]
Line_27 $$ JarEntry jarEntry = (JarEntry) jarEntries.nextElement()-->Line_30 $$ urlStr += "/" + jarEntry[ FD ]
Line_28 $$ if (!jarEntry.isDirectory()) -->Line_31 $$ if (urlStr.matches(regExFilter)) [ CD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_30 $$ urlStr += "/" + jarEntry-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_31 $$ if (urlStr.matches(regExFilter)) -->Line_31 $$ if (urlStr.matches(regExFilter)) [ CD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_30 $$ urlStr += "/" + jarEntry-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_31 $$ if (urlStr.matches(regExFilter)) -->Line_32 $$ urlVector.add(urlStr)[ CD ]
Line_4 $$ Vector<String> urlVector = new Vector<String>()-->Line_32 $$ urlVector.add(urlStr)[ FD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_32 $$ urlVector.add(urlStr)[ FD ]
Line_30 $$ urlStr += "/" + jarEntry-->Line_32 $$ urlVector.add(urlStr)[ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_32 $$ urlVector.add(urlStr)[ FD ]
Line_9 $$ for (; e.hasMoreElements(); ) -->Line_37 $$ if (!urlVector.isEmpty() && firstNoEmptyMatched) [ CD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_37 $$ if (!urlVector.isEmpty() && firstNoEmptyMatched) [ FD ]
Line_37 $$ if (!urlVector.isEmpty() && firstNoEmptyMatched) -->Line_37 $$ if (!urlVector.isEmpty() && firstNoEmptyMatched) [ CD ]
Line_4 $$ Vector<String> urlVector = new Vector<String>()-->Line_37 $$ if (!urlVector.isEmpty() && firstNoEmptyMatched) [ FD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])[ CD ]
Line_3 $$ String[] urlArray-->Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])[ FD ]
Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])-->Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])[ FD ]
Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])-->Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])[ CD ]
Line_4 $$ Vector<String> urlVector = new Vector<String>()-->Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])[ FD ]
Line_4 $$ Vector<String> urlVector = new Vector<String>()-->Line_44 $$ urlArray = urlVector.toArray(new String[urlVector.size()])[ FD ]
Line_2 $$ public static String[] getURLListFromResource(String resourceName, String regExFilter, boolean firstNoEmptyMatched) -->Line_45 $$ return urlArray[ CD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_11 $$ if ("file".equals(url.getProtocol())) [ FD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_12 $$ File file = new File(url.getPath())[ FD ]
Line_12 $$ File file = new File(url.getPath())-->Line_13 $$ File[] fileList = file.listFiles()[ FD ]
Line_13 $$ File[] fileList = file.listFiles()-->Line_14 $$ if (fileList != null) [ FD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_22 $$ if ("jar".equals(url.getProtocol())) [ FD ]
Line_10 $$ URL url = (URL) e.nextElement()-->Line_23 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()[ FD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_15 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_15 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_15 $$ for (int i = 0; i < fileList.length; i++) -->Line_15 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_17 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_17 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_16 $$ String urlStr = fileList[i].toURL().toString()-->Line_18 $$ urlVector.add(urlStr)[ FD ]
Line_27 $$ JarEntry jarEntry = (JarEntry) jarEntries.nextElement()-->Line_28 $$ if (!jarEntry.isDirectory()) [ FD ]
Line_27 $$ JarEntry jarEntry = (JarEntry) jarEntries.nextElement()-->Line_30 $$ urlStr += "/" + jarEntry[ FD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_30 $$ urlStr += "/" + jarEntry-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_30 $$ urlStr += "/" + jarEntry-->Line_31 $$ if (urlStr.matches(regExFilter)) [ FD ]
Line_29 $$ String urlStr = url.toString().substring(0, url.toString().lastIndexOf('!') + 1)-->Line_32 $$ urlVector.add(urlStr)[ FD ]
Line_30 $$ urlStr += "/" + jarEntry-->Line_32 $$ urlVector.add(urlStr)[ FD ]
