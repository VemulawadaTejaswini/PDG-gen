Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception [ CD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_3 $$ Uri.Builder builder = new Uri.Builder()[ CD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_4 $$ builder.scheme("http")[ CD ]
Line_3 $$ Uri.Builder builder = new Uri.Builder()-->Line_4 $$ builder.scheme("http")[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_5 $$ builder.authority("www.goodreads.com")[ CD ]
Line_3 $$ Uri.Builder builder = new Uri.Builder()-->Line_5 $$ builder.authority("www.goodreads.com")[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_6 $$ builder.path("author/list/" + authorId + ".xml")[ CD ]
Line_3 $$ Uri.Builder builder = new Uri.Builder()-->Line_6 $$ builder.path("author/list/" + authorId + ".xml")[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_7 $$ builder.appendQueryParameter("key", _ConsumerKey)[ CD ]
Line_3 $$ Uri.Builder builder = new Uri.Builder()-->Line_7 $$ builder.appendQueryParameter("key", _ConsumerKey)[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_8 $$ builder.appendQueryParameter("page", Integer.toString(page))[ CD ]
Line_3 $$ Uri.Builder builder = new Uri.Builder()-->Line_8 $$ builder.appendQueryParameter("page", Integer.toString(page))[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_8 $$ builder.appendQueryParameter("page", Integer.toString(page))[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_9 $$ HttpClient httpClient = new DefaultHttpClient()[ CD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_10 $$ HttpGet getResponse = new HttpGet(builder.build().toString())[ CD ]
Line_3 $$ Uri.Builder builder = new Uri.Builder()-->Line_10 $$ HttpGet getResponse = new HttpGet(builder.build().toString())[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_11 $$ HttpResponse response = httpClient.execute(getResponse)[ CD ]
Line_11 $$ HttpResponse response = httpClient.execute(getResponse)-->Line_11 $$ HttpResponse response = httpClient.execute(getResponse)[ CD ]
Line_9 $$ HttpClient httpClient = new DefaultHttpClient()-->Line_11 $$ HttpResponse response = httpClient.execute(getResponse)[ FD ]
Line_10 $$ HttpGet getResponse = new HttpGet(builder.build().toString())-->Line_11 $$ HttpResponse response = httpClient.execute(getResponse)[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_12 $$ Response responseData = ResponseParser.parse(response.getEntity().getContent())[ CD ]
Line_12 $$ Response responseData = ResponseParser.parse(response.getEntity().getContent())-->Line_12 $$ Response responseData = ResponseParser.parse(response.getEntity().getContent())[ CD ]
Line_11 $$ HttpResponse response = httpClient.execute(getResponse)-->Line_12 $$ Response responseData = ResponseParser.parse(response.getEntity().getContent())[ FD ]
Line_2 $$ public static Author GetBooksByAuthor(String authorId, int page) throws Exception -->Line_13 $$ return responseData.get_Author()[ CD ]
Line_13 $$ return responseData.get_Author()-->Line_13 $$ return responseData.get_Author()[ CD ]
Line_12 $$ Response responseData = ResponseParser.parse(response.getEntity().getContent())-->Line_13 $$ return responseData.get_Author()[ FD ]
