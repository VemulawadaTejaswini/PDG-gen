Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private ModelDefinition buildModel(String name) [ CD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_3 $$ ModelDefinition model = null[ CD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)[ CD ]
Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)-->Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)[ CD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)[ FD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_5 $$ InputStream is = null[ CD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_6 $$ if (url == null) [ CD ]
Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)-->Line_6 $$ if (url == null) [ FD ]
Line_6 $$ if (url == null) -->Line_7 $$ url = ResourceLocator.locateTextModel(name)[ CD ]
Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)-->Line_7 $$ url = ResourceLocator.locateTextModel(name)[ FD ]
Line_7 $$ url = ResourceLocator.locateTextModel(name)-->Line_7 $$ url = ResourceLocator.locateTextModel(name)[ FD ]
Line_7 $$ url = ResourceLocator.locateTextModel(name)-->Line_7 $$ url = ResourceLocator.locateTextModel(name)[ CD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_7 $$ url = ResourceLocator.locateTextModel(name)[ FD ]
Line_5 $$ InputStream is = null-->Line_9 $$ is = url.openStream()[ FD ]
Line_9 $$ is = url.openStream()-->Line_9 $$ is = url.openStream()[ FD ]
Line_9 $$ is = url.openStream()-->Line_9 $$ is = url.openStream()[ CD ]
Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)-->Line_9 $$ is = url.openStream()[ FD ]
Line_7 $$ url = ResourceLocator.locateTextModel(name)-->Line_9 $$ is = url.openStream()[ FD ]
Line_3 $$ ModelDefinition model = null-->Line_10 $$ model = buildModelFromText(name, is)[ FD ]
Line_10 $$ model = buildModelFromText(name, is)-->Line_10 $$ model = buildModelFromText(name, is)[ FD ]
Line_10 $$ model = buildModelFromText(name, is)-->Line_10 $$ model = buildModelFromText(name, is)[ CD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_10 $$ model = buildModelFromText(name, is)[ FD ]
Line_5 $$ InputStream is = null-->Line_10 $$ model = buildModelFromText(name, is)[ FD ]
Line_9 $$ is = url.openStream()-->Line_10 $$ model = buildModelFromText(name, is)[ FD ]
Line_11 $$ File file = ResourceLocator.replaceExtension(url, ResourceLocator.BINARY_MODEL_EXTENSION)-->Line_11 $$ File file = ResourceLocator.replaceExtension(url, ResourceLocator.BINARY_MODEL_EXTENSION)[ CD ]
Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)-->Line_11 $$ File file = ResourceLocator.replaceExtension(url, ResourceLocator.BINARY_MODEL_EXTENSION)[ FD ]
Line_7 $$ url = ResourceLocator.locateTextModel(name)-->Line_11 $$ File file = ResourceLocator.replaceExtension(url, ResourceLocator.BINARY_MODEL_EXTENSION)[ FD ]
Line_3 $$ ModelDefinition model = null-->Line_12 $$ BinaryExporter.getInstance().save(model, file)[ FD ]
Line_10 $$ model = buildModelFromText(name, is)-->Line_12 $$ BinaryExporter.getInstance().save(model, file)[ FD ]
Line_11 $$ File file = ResourceLocator.replaceExtension(url, ResourceLocator.BINARY_MODEL_EXTENSION)-->Line_12 $$ BinaryExporter.getInstance().save(model, file)[ FD ]
Line_5 $$ InputStream is = null-->Line_20 $$ is = url.openStream()[ FD ]
Line_9 $$ is = url.openStream()-->Line_20 $$ is = url.openStream()[ FD ]
Line_20 $$ is = url.openStream()-->Line_20 $$ is = url.openStream()[ FD ]
Line_20 $$ is = url.openStream()-->Line_20 $$ is = url.openStream()[ CD ]
Line_4 $$ URL url = ResourceLocator.locateBinaryModel(name)-->Line_20 $$ is = url.openStream()[ FD ]
Line_7 $$ url = ResourceLocator.locateTextModel(name)-->Line_20 $$ is = url.openStream()[ FD ]
Line_3 $$ ModelDefinition model = null-->Line_21 $$ model = (ModelDefinition) BinaryImporter.getInstance().load(is)[ FD ]
Line_10 $$ model = buildModelFromText(name, is)-->Line_21 $$ model = (ModelDefinition) BinaryImporter.getInstance().load(is)[ FD ]
Line_21 $$ model = (ModelDefinition) BinaryImporter.getInstance().load(is)-->Line_21 $$ model = (ModelDefinition) BinaryImporter.getInstance().load(is)[ FD ]
Line_5 $$ InputStream is = null-->Line_21 $$ model = (ModelDefinition) BinaryImporter.getInstance().load(is)[ FD ]
Line_9 $$ is = url.openStream()-->Line_21 $$ model = (ModelDefinition) BinaryImporter.getInstance().load(is)[ FD ]
Line_20 $$ is = url.openStream()-->Line_21 $$ model = (ModelDefinition) BinaryImporter.getInstance().load(is)[ FD ]
Line_2 $$ private ModelDefinition buildModel(String name) -->Line_26 $$ return model[ CD ]
