Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException [ CD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_3 $$ HttpRequest req = transport.buildGetRequest()[ CD ]
Line_3 $$ HttpRequest req = transport.buildGetRequest()-->Line_3 $$ HttpRequest req = transport.buildGetRequest()[ CD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_3 $$ HttpRequest req = transport.buildGetRequest()[ FD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_4 $$ req.setUrl(targetUrl)[ CD ]
Line_3 $$ HttpRequest req = transport.buildGetRequest()-->Line_4 $$ req.setUrl(targetUrl)[ FD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_4 $$ req.setUrl(targetUrl)[ FD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_5 $$ NotifyFeed feed = req.execute().parseAs(NotifyFeed.class)[ CD ]
Line_5 $$ NotifyFeed feed = req.execute().parseAs(NotifyFeed.class)-->Line_5 $$ NotifyFeed feed = req.execute().parseAs(NotifyFeed.class)[ CD ]
Line_3 $$ HttpRequest req = transport.buildGetRequest()-->Line_5 $$ NotifyFeed feed = req.execute().parseAs(NotifyFeed.class)[ FD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_6 $$ if (feed.entry == null) [ CD ]
Line_6 $$ if (feed.entry == null) -->Line_7 $$ return Collections.emptyList()[ CD ]
Line_7 $$ return Collections.emptyList()-->Line_7 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_9 $$ List<T_new> results = new ArrayList<T_new>()[ CD ]
Line_12 $$ if (e.id != null) -->Line_13 $$ buffer.append(e.id)[ CD ]
Line_11 $$ StringBuilder buffer = new StringBuilder()-->Line_13 $$ buffer.append(e.id)[ FD ]
Line_11 $$ StringBuilder buffer = new StringBuilder()-->Line_15 $$ buffer.append("@")[ FD ]
Line_16 $$ if (e.updated != null) -->Line_17 $$ buffer.append(e.updated.toStringRfc3339().substring(0, 19) + "Z")[ CD ]
Line_11 $$ StringBuilder buffer = new StringBuilder()-->Line_17 $$ buffer.append(e.updated.toStringRfc3339().substring(0, 19) + "Z")[ FD ]
Line_19 $$ Key key = Datastore.createKey(T_new.class, buffer.toString())-->Line_19 $$ Key key = Datastore.createKey(T_new.class, buffer.toString())[ CD ]
Line_11 $$ StringBuilder buffer = new StringBuilder()-->Line_19 $$ Key key = Datastore.createKey(T_new.class, buffer.toString())[ FD ]
Line_20 $$ T_new news = new T_new()-->Line_21 $$ news.setTitle(e.title)[ FD ]
Line_22 $$ if (e.content != null) -->Line_23 $$ news.setNewText(e.content.substring(0, Math.min(e.content.length(), 500)))[ CD ]
Line_20 $$ T_new news = new T_new()-->Line_23 $$ news.setNewText(e.content.substring(0, Math.min(e.content.length(), 500)))[ FD ]
Line_25 $$ if (e.status != null && e.content == null) -->Line_26 $$ news.setNewText(e.status)[ CD ]
Line_20 $$ T_new news = new T_new()-->Line_26 $$ news.setNewText(e.status)[ FD ]
Line_28 $$ if (e.updated != null) -->Line_29 $$ news.setCreatedAt(new Date(e.updated.value))[ CD ]
Line_20 $$ T_new news = new T_new()-->Line_29 $$ news.setCreatedAt(new Date(e.updated.value))[ FD ]
Line_20 $$ T_new news = new T_new()-->Line_31 $$ news.setContentUrl(e.getAlternate())[ FD ]
Line_10 $$ for (NotifyEntry e : feed.entry) -->Line_31 $$ news.setContentUrl(e.getAlternate())[ FD ]
Line_32 $$ if (e.author != null) -->Line_33 $$ news.setAuthor(e.author.name)[ CD ]
Line_20 $$ T_new news = new T_new()-->Line_33 $$ news.setAuthor(e.author.name)[ FD ]
Line_20 $$ T_new news = new T_new()-->Line_35 $$ news.setKey(key)[ FD ]
Line_19 $$ Key key = Datastore.createKey(T_new.class, buffer.toString())-->Line_35 $$ news.setKey(key)[ FD ]
Line_9 $$ List<T_new> results = new ArrayList<T_new>()-->Line_36 $$ results.add(news)[ FD ]
Line_20 $$ T_new news = new T_new()-->Line_36 $$ results.add(news)[ FD ]
Line_2 $$ public List<T_new> executeGet(HttpTransport transport, String targetUrl) throws HttpResponseException, IOException -->Line_38 $$ return results[ CD ]
