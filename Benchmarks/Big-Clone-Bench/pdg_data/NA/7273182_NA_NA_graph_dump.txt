Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public synchronized String encrypt(String text) throws Exception [ CD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_3 $$ MessageDigest md = null[ CD ]
Line_3 $$ MessageDigest md = null-->Line_5 $$ md = MessageDigest.getInstance("SHA-512")[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-512")-->Line_5 $$ md = MessageDigest.getInstance("SHA-512")[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-512")-->Line_5 $$ md = MessageDigest.getInstance("SHA-512")[ CD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_9 $$ md.update(text.getBytes())[ CD ]
Line_3 $$ MessageDigest md = null-->Line_9 $$ md.update(text.getBytes())[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-512")-->Line_9 $$ md.update(text.getBytes())[ FD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_9 $$ md.update(text.getBytes())[ FD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_10 $$ byte raw[] = md.digest()[ CD ]
Line_10 $$ byte raw[] = md.digest()-->Line_10 $$ byte raw[] = md.digest()[ CD ]
Line_3 $$ MessageDigest md = null-->Line_10 $$ byte raw[] = md.digest()[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA-512")-->Line_10 $$ byte raw[] = md.digest()[ FD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_11 $$ String hash = ""[ CD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ CD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_2 $$ public synchronized String encrypt(String text) throws Exception [ CD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_13 $$ byte temp = raw[i][ CD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_14 $$ String s = Integer.toHexString(new Byte(temp))[ CD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_14 $$ String s = Integer.toHexString(new Byte(temp))[ CD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_15 $$ while (s.length() < 2) [ CD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ CD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_15 $$ while (s.length() < 2) [ FD ]
Line_15 $$ while (s.length() < 2) -->Line_16 $$ s = "0" + s[ CD ]
Line_16 $$ s = "0" + s-->Line_16 $$ s = "0" + s[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_16 $$ s = "0" + s[ FD ]
Line_16 $$ s = "0" + s-->Line_16 $$ s = "0" + s[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_16 $$ s = "0" + s[ FD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_18 $$ s = s.substring(s.length() - 2)[ CD ]
Line_16 $$ s = "0" + s-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_18 $$ s = s.substring(s.length() - 2)[ CD ]
Line_16 $$ s = "0" + s-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_16 $$ s = "0" + s-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_19 $$ hash += s[ CD ]
Line_19 $$ hash += s-->Line_19 $$ hash += s[ FD ]
Line_11 $$ String hash = ""-->Line_19 $$ hash += s[ FD ]
Line_16 $$ s = "0" + s-->Line_19 $$ hash += s[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_19 $$ hash += s[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_19 $$ hash += s[ FD ]
Line_2 $$ public synchronized String encrypt(String text) throws Exception -->Line_21 $$ return hash[ CD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < raw.length; i++) -->Line_12 $$ for (int i = 0; i < raw.length; i++) [ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_18 $$ s = s.substring(s.length() - 2)[ FD ]
Line_14 $$ String s = Integer.toHexString(new Byte(temp))-->Line_19 $$ hash += s[ FD ]
Line_18 $$ s = s.substring(s.length() - 2)-->Line_19 $$ hash += s[ FD ]
Line_16 $$ s = "0" + s-->Line_15 $$ while (s.length() < 2) [ FD ]
Line_16 $$ s = "0" + s-->Line_16 $$ s = "0" + s[ FD ]
