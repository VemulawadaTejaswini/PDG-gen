Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testJTLM_publish911() throws Exception [ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)[ CD ]
Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)-->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_4 $$ Assert.assertEquals(0, m_compilerErrors.getTotalCount())[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS)[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_6 $$ AlignmentType alignment = AlignmentType.compress[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_7 $$ Transmogrifier encoder = new Transmogrifier()[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_8 $$ EXIDecoder decoder = new EXIDecoder()[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_9 $$ Scanner scanner[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_10 $$ InputSource inputSource[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_11 $$ encoder.setAlignmentType(alignment)[ CD ]
Line_7 $$ Transmogrifier encoder = new Transmogrifier()-->Line_11 $$ encoder.setAlignmentType(alignment)[ FD ]
Line_6 $$ AlignmentType alignment = AlignmentType.compress-->Line_11 $$ encoder.setAlignmentType(alignment)[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_12 $$ decoder.setAlignmentType(alignment)[ CD ]
Line_8 $$ EXIDecoder decoder = new EXIDecoder()-->Line_12 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_6 $$ AlignmentType alignment = AlignmentType.compress-->Line_12 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_13 $$ encoder.setEXISchema(grammarCache)[ CD ]
Line_7 $$ Transmogrifier encoder = new Transmogrifier()-->Line_13 $$ encoder.setEXISchema(grammarCache)[ FD ]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS)-->Line_13 $$ encoder.setEXISchema(grammarCache)[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_14 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_15 $$ encoder.setOutputStream(baos)[ CD ]
Line_7 $$ Transmogrifier encoder = new Transmogrifier()-->Line_15 $$ encoder.setOutputStream(baos)[ FD ]
Line_14 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_15 $$ encoder.setOutputStream(baos)[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_16 $$ URL url = resolveSystemIdAsURL("/JTLM/publish911.xml")[ CD ]
Line_16 $$ URL url = resolveSystemIdAsURL("/JTLM/publish911.xml")-->Line_16 $$ URL url = resolveSystemIdAsURL("/JTLM/publish911.xml")[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_17 $$ inputSource = new InputSource(url.toString())[ CD ]
Line_10 $$ InputSource inputSource-->Line_17 $$ inputSource = new InputSource(url.toString())[ FD ]
Line_17 $$ inputSource = new InputSource(url.toString())-->Line_17 $$ inputSource = new InputSource(url.toString())[ FD ]
Line_16 $$ URL url = resolveSystemIdAsURL("/JTLM/publish911.xml")-->Line_17 $$ inputSource = new InputSource(url.toString())[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_18 $$ inputSource.setByteStream(url.openStream())[ CD ]
Line_10 $$ InputSource inputSource-->Line_18 $$ inputSource.setByteStream(url.openStream())[ FD ]
Line_17 $$ inputSource = new InputSource(url.toString())-->Line_18 $$ inputSource.setByteStream(url.openStream())[ FD ]
Line_16 $$ URL url = resolveSystemIdAsURL("/JTLM/publish911.xml")-->Line_18 $$ inputSource.setByteStream(url.openStream())[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_19 $$ byte[] bts[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_20 $$ int n_events, n_texts[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_21 $$ encoder.encode(inputSource)[ CD ]
Line_7 $$ Transmogrifier encoder = new Transmogrifier()-->Line_21 $$ encoder.encode(inputSource)[ FD ]
Line_10 $$ InputSource inputSource-->Line_21 $$ encoder.encode(inputSource)[ FD ]
Line_17 $$ inputSource = new InputSource(url.toString())-->Line_21 $$ encoder.encode(inputSource)[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_22 $$ bts = baos.toByteArray()[ CD ]
Line_19 $$ byte[] bts-->Line_22 $$ bts = baos.toByteArray()[ FD ]
Line_22 $$ bts = baos.toByteArray()-->Line_22 $$ bts = baos.toByteArray()[ FD ]
Line_22 $$ bts = baos.toByteArray()-->Line_22 $$ bts = baos.toByteArray()[ CD ]
Line_14 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_22 $$ bts = baos.toByteArray()[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_23 $$ decoder.setEXISchema(grammarCache)[ CD ]
Line_8 $$ EXIDecoder decoder = new EXIDecoder()-->Line_23 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS)-->Line_23 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_24 $$ decoder.setInputStream(new ByteArrayInputStream(bts))[ CD ]
Line_8 $$ EXIDecoder decoder = new EXIDecoder()-->Line_24 $$ decoder.setInputStream(new ByteArrayInputStream(bts))[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_25 $$ scanner = decoder.processHeader()[ CD ]
Line_9 $$ Scanner scanner-->Line_25 $$ scanner = decoder.processHeader()[ FD ]
Line_25 $$ scanner = decoder.processHeader()-->Line_25 $$ scanner = decoder.processHeader()[ FD ]
Line_25 $$ scanner = decoder.processHeader()-->Line_25 $$ scanner = decoder.processHeader()[ CD ]
Line_8 $$ EXIDecoder decoder = new EXIDecoder()-->Line_25 $$ scanner = decoder.processHeader()[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>()[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_27 $$ EXIEvent exiEvent[ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_28 $$ n_events = 0[ CD ]
Line_20 $$ int n_events, n_texts-->Line_28 $$ n_events = 0[ FD ]
Line_28 $$ n_events = 0-->Line_28 $$ n_events = 0[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_29 $$ n_texts = 0[ CD ]
Line_20 $$ int n_events, n_texts-->Line_29 $$ n_texts = 0[ FD ]
Line_29 $$ n_texts = 0-->Line_29 $$ n_texts = 0[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) [ CD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_2 $$ public void testJTLM_publish911() throws Exception [ CD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_27 $$ EXIEvent exiEvent-->Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) [ CD ]
Line_9 $$ Scanner scanner-->Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_25 $$ scanner = decoder.processHeader()-->Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_31 $$ ++n_events[ CD ]
Line_20 $$ int n_events, n_texts-->Line_31 $$ ++n_events[ FD ]
Line_28 $$ n_events = 0-->Line_31 $$ ++n_events[ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_32 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ CD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_32 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_27 $$ EXIEvent exiEvent-->Line_32 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_32 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_33 $$ if (exiEvent.getCharacters().length() == 0) [ CD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_33 $$ if (exiEvent.getCharacters().length() == 0) [ FD ]
Line_27 $$ EXIEvent exiEvent-->Line_33 $$ if (exiEvent.getCharacters().length() == 0) [ FD ]
Line_33 $$ if (exiEvent.getCharacters().length() == 0) -->Line_34 $$ --n_events[ CD ]
Line_20 $$ int n_events, n_texts-->Line_34 $$ --n_events[ FD ]
Line_28 $$ n_events = 0-->Line_34 $$ --n_events[ FD ]
Line_32 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_37 $$ if (n_texts % 100 == 0) [ CD ]
Line_37 $$ if (n_texts % 100 == 0) -->Line_38 $$ final int n = n_texts / 100[ CD ]
Line_37 $$ if (n_texts % 100 == 0) -->Line_39 $$ Assert.assertEquals(JTLMTest.publish911_centennials[n], exiEvent.getCharacters().makeString())[ CD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_39 $$ Assert.assertEquals(JTLMTest.publish911_centennials[n], exiEvent.getCharacters().makeString())[ FD ]
Line_27 $$ EXIEvent exiEvent-->Line_39 $$ Assert.assertEquals(JTLMTest.publish911_centennials[n], exiEvent.getCharacters().makeString())[ FD ]
Line_32 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_41 $$ ++n_texts[ CD ]
Line_20 $$ int n_events, n_texts-->Line_41 $$ ++n_texts[ FD ]
Line_29 $$ n_texts = 0-->Line_41 $$ ++n_texts[ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_43 $$ exiEventList.add(exiEvent)[ CD ]
Line_26 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>()-->Line_43 $$ exiEventList.add(exiEvent)[ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_43 $$ exiEventList.add(exiEvent)[ FD ]
Line_27 $$ EXIEvent exiEvent-->Line_43 $$ exiEventList.add(exiEvent)[ FD ]
Line_2 $$ public void testJTLM_publish911() throws Exception -->Line_45 $$ Assert.assertEquals(96576, n_events)[ CD ]
Line_20 $$ int n_events, n_texts-->Line_45 $$ Assert.assertEquals(96576, n_events)[ FD ]
Line_28 $$ n_events = 0-->Line_45 $$ Assert.assertEquals(96576, n_events)[ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_32 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_33 $$ if (exiEvent.getCharacters().length() == 0) [ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_39 $$ Assert.assertEquals(JTLMTest.publish911_centennials[n], exiEvent.getCharacters().makeString())[ FD ]
Line_30 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_43 $$ exiEventList.add(exiEvent)[ FD ]
