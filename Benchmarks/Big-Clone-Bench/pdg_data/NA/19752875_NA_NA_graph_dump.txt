Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) [ CD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_3 $$ setHeader(resp)[ CD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_3 $$ setHeader(resp)[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_5 $$ logger.debug("ResRec: Resume a 'receive' session with session id " + command.getSession() + " this client already received " + command.getLen() + " bytes")[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_5 $$ logger.debug("ResRec: Resume a 'receive' session with session id " + command.getSession() + " this client already received " + command.getLen() + " bytes")[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_6 $$ File tempFile = new File(this.getSyncWorkDirectory(req), command.getSession() + ".smodif")[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_6 $$ File tempFile = new File(this.getSyncWorkDirectory(req), command.getSession() + ".smodif")[ FD ]
Line_7 $$ if (!tempFile.exists()) -->Line_7 $$ if (!tempFile.exists()) [ CD ]
Line_7 $$ if (!tempFile.exists()) -->Line_7 $$ if (!tempFile.exists()) [ CD ]
Line_6 $$ File tempFile = new File(this.getSyncWorkDirectory(req), command.getSession() + ".smodif")-->Line_7 $$ if (!tempFile.exists()) [ FD ]
Line_7 $$ if (!tempFile.exists()) -->Line_8 $$ logger.debug("ResRec: the file doesn't exist, so we created it by serializing the entities")[ CD ]
Line_10 $$ OutputStream fos = new FileOutputStream(tempFile)-->Line_11 $$ syncServer.getServerModifications(command.getSession(), fos)[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_11 $$ syncServer.getServerModifications(command.getSession(), fos)[ FD ]
Line_10 $$ OutputStream fos = new FileOutputStream(tempFile)-->Line_12 $$ fos.close()[ FD ]
Line_17 $$ InputStream fis = new FileInputStream(tempFile)-->Line_18 $$ fis.skip(command.getLen())[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_18 $$ fis.skip(command.getLen())[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_19 $$ resp.setContentLength(fis.available())[ FD ]
Line_17 $$ InputStream fis = new FileInputStream(tempFile)-->Line_19 $$ resp.setContentLength(fis.available())[ FD ]
Line_17 $$ InputStream fis = new FileInputStream(tempFile)-->Line_20 $$ while (fis.available() > 0) [ FD ]
Line_20 $$ while (fis.available() > 0) -->Line_21 $$ resp.getOutputStream().write(fis.read())[ CD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_21 $$ resp.getOutputStream().write(fis.read())[ FD ]
Line_17 $$ InputStream fis = new FileInputStream(tempFile)-->Line_21 $$ resp.getOutputStream().write(fis.read())[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_23 $$ resp.getOutputStream().flush()[ FD ]
Line_2 $$ public void resumereceive(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) -->Line_24 $$ resp.flushBuffer()[ FD ]
Line_17 $$ InputStream fis = new FileInputStream(tempFile)-->Line_25 $$ fis.close()[ FD ]
