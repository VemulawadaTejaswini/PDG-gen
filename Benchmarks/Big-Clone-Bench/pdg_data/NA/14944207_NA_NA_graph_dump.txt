Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testStreamURL() throws Exception [ CD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_3 $$ boolean ok = false[ CD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_4 $$ String url = "http://www.apache.org/dist/lucene/solr/"[ CD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_5 $$ String txt = null[ CD ]
Line_5 $$ String txt = null-->Line_7 $$ txt = IOUtils.toString(new URL(url).openStream())[ FD ]
Line_7 $$ txt = IOUtils.toString(new URL(url).openStream())-->Line_7 $$ txt = IOUtils.toString(new URL(url).openStream())[ FD ]
Line_7 $$ txt = IOUtils.toString(new URL(url).openStream())-->Line_7 $$ txt = IOUtils.toString(new URL(url).openStream())[ CD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_12 $$ SolrCore core = h.getCore()[ CD ]
Line_12 $$ SolrCore core = h.getCore()-->Line_12 $$ SolrCore core = h.getCore()[ CD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_13 $$ Map<String, String[]> args = new HashMap<String, String[]>()[ CD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_14 $$ args.put(CommonParams.STREAM_URL, new String[] [ CD ]
Line_13 $$ Map<String, String[]> args = new HashMap<String, String[]>()-->Line_14 $$ args.put(CommonParams.STREAM_URL, new String[] [ FD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_15 $$ List<ContentStream> streams = new ArrayList<ContentStream>()[ CD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_16 $$ parser.buildRequestFrom(core, new MultiMapSolrParams(args), streams)[ CD ]
Line_12 $$ SolrCore core = h.getCore()-->Line_16 $$ parser.buildRequestFrom(core, new MultiMapSolrParams(args), streams)[ FD ]
Line_15 $$ List<ContentStream> streams = new ArrayList<ContentStream>()-->Line_16 $$ parser.buildRequestFrom(core, new MultiMapSolrParams(args), streams)[ FD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_17 $$ assertEquals(1, streams.size())[ CD ]
Line_15 $$ List<ContentStream> streams = new ArrayList<ContentStream>()-->Line_17 $$ assertEquals(1, streams.size())[ FD ]
Line_2 $$ public void testStreamURL() throws Exception -->Line_18 $$ assertEquals(txt, IOUtils.toString(streams.get(0).getStream()))[ CD ]
Line_5 $$ String txt = null-->Line_18 $$ assertEquals(txt, IOUtils.toString(streams.get(0).getStream()))[ FD ]
Line_7 $$ txt = IOUtils.toString(new URL(url).openStream())-->Line_18 $$ assertEquals(txt, IOUtils.toString(streams.get(0).getStream()))[ FD ]
Line_15 $$ List<ContentStream> streams = new ArrayList<ContentStream>()-->Line_18 $$ assertEquals(txt, IOUtils.toString(streams.get(0).getStream()))[ FD ]
