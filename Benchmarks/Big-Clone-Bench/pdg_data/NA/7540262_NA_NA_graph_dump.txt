Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception [ CD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_3 $$ StringBuilder sb = new StringBuilder("")[ CD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_4 $$ if (params != null && !params.isEmpty()) [ CD ]
Line_4 $$ if (params != null && !params.isEmpty()) -->Line_4 $$ if (params != null && !params.isEmpty()) [ CD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_4 $$ if (params != null && !params.isEmpty()) [ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_5 $$ for (Map.Entry<String, String> entry : params.entrySet()) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("")-->Line_6 $$ sb.append(entry.getKey()).append('=').append(URLEncoder.encode(entry.getValue(), encoding)).append('&')[ FD ]
Line_5 $$ for (Map.Entry<String, String> entry : params.entrySet()) -->Line_6 $$ sb.append(entry.getKey()).append('=').append(URLEncoder.encode(entry.getValue(), encoding)).append('&')[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_6 $$ sb.append(entry.getKey()).append('=').append(URLEncoder.encode(entry.getValue(), encoding)).append('&')[ FD ]
Line_5 $$ for (Map.Entry<String, String> entry : params.entrySet()) -->Line_6 $$ sb.append(entry.getKey()).append('=').append(URLEncoder.encode(entry.getValue(), encoding)).append('&')[ FD ]
Line_4 $$ if (params != null && !params.isEmpty()) -->Line_8 $$ sb.deleteCharAt(sb.length() - 1)[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("")-->Line_8 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder("")-->Line_8 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_10 $$ byte[] data = sb.toString().getBytes()[ CD ]
Line_10 $$ byte[] data = sb.toString().getBytes()-->Line_10 $$ byte[] data = sb.toString().getBytes()[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder("")-->Line_10 $$ byte[] data = sb.toString().getBytes()[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_11 $$ URL url = new URL(path)[ CD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_11 $$ URL url = new URL(path)-->Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_13 $$ conn.setRequestMethod("POST")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_13 $$ conn.setRequestMethod("POST")[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_14 $$ conn.setConnectTimeout(5 * 1000)[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_14 $$ conn.setConnectTimeout(5 * 1000)[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_15 $$ conn.setDoOutput(true)[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_15 $$ conn.setDoOutput(true)[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_16 $$ conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_16 $$ conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_17 $$ conn.setRequestProperty("Content-Length", String.valueOf(data.length))[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_17 $$ conn.setRequestProperty("Content-Length", String.valueOf(data.length))[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_18 $$ OutputStream outStream = conn.getOutputStream()[ CD ]
Line_18 $$ OutputStream outStream = conn.getOutputStream()-->Line_18 $$ OutputStream outStream = conn.getOutputStream()[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_18 $$ OutputStream outStream = conn.getOutputStream()[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_19 $$ outStream.write(data)[ CD ]
Line_18 $$ OutputStream outStream = conn.getOutputStream()-->Line_19 $$ outStream.write(data)[ FD ]
Line_10 $$ byte[] data = sb.toString().getBytes()-->Line_19 $$ outStream.write(data)[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_20 $$ outStream.flush()[ CD ]
Line_18 $$ OutputStream outStream = conn.getOutputStream()-->Line_20 $$ outStream.flush()[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_21 $$ outStream.close()[ CD ]
Line_18 $$ OutputStream outStream = conn.getOutputStream()-->Line_21 $$ outStream.close()[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_22 $$ if (conn.getResponseCode() == 200) [ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_22 $$ if (conn.getResponseCode() == 200) [ FD ]
Line_22 $$ if (conn.getResponseCode() == 200) -->Line_23 $$ InputStream inputStream = conn.getInputStream()[ CD ]
Line_23 $$ InputStream inputStream = conn.getInputStream()-->Line_23 $$ InputStream inputStream = conn.getInputStream()[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_23 $$ InputStream inputStream = conn.getInputStream()[ FD ]
Line_22 $$ if (conn.getResponseCode() == 200) -->Line_24 $$ return ResponseResult.parseXML(inputStream)[ CD ]
Line_24 $$ return ResponseResult.parseXML(inputStream)-->Line_24 $$ return ResponseResult.parseXML(inputStream)[ CD ]
Line_23 $$ InputStream inputStream = conn.getInputStream()-->Line_24 $$ return ResponseResult.parseXML(inputStream)[ FD ]
Line_2 $$ public static boolean sendPostRequest(String path, Map<String, String> params, String encoding) throws Exception -->Line_26 $$ return false[ CD ]
