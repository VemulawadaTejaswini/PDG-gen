Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException [ CD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_3 $$ MessageDigest md = null[ CD ]
Line_3 $$ MessageDigest md = null-->Line_5 $$ md = MessageDigest.getInstance(algorithm)[ FD ]
Line_5 $$ md = MessageDigest.getInstance(algorithm)-->Line_5 $$ md = MessageDigest.getInstance(algorithm)[ FD ]
Line_5 $$ md = MessageDigest.getInstance(algorithm)-->Line_5 $$ md = MessageDigest.getInstance(algorithm)[ CD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_5 $$ md = MessageDigest.getInstance(algorithm)[ FD ]
Line_7 $$ String error = "'" + algorithm + "' is not a supported MessageDigest algorithm."-->Line_8 $$ LOG.error(error, e)[ FD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_11 $$ md.update(message.getBytes())[ CD ]
Line_3 $$ MessageDigest md = null-->Line_11 $$ md.update(message.getBytes())[ FD ]
Line_5 $$ md = MessageDigest.getInstance(algorithm)-->Line_11 $$ md.update(message.getBytes())[ FD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_11 $$ md.update(message.getBytes())[ FD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_12 $$ byte[] digestData = md.digest()[ CD ]
Line_12 $$ byte[] digestData = md.digest()-->Line_12 $$ byte[] digestData = md.digest()[ CD ]
Line_3 $$ MessageDigest md = null-->Line_12 $$ byte[] digestData = md.digest()[ FD ]
Line_5 $$ md = MessageDigest.getInstance(algorithm)-->Line_12 $$ byte[] digestData = md.digest()[ FD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_13 $$ String digest = null[ CD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_14 $$ if (base64) [ CD ]
Line_14 $$ if (base64) -->Line_15 $$ Base64Encoder enc = new Base64Encoder()[ CD ]
Line_14 $$ if (base64) -->Line_16 $$ enc.translate(digestData)[ CD ]
Line_15 $$ Base64Encoder enc = new Base64Encoder()-->Line_16 $$ enc.translate(digestData)[ FD ]
Line_12 $$ byte[] digestData = md.digest()-->Line_16 $$ enc.translate(digestData)[ FD ]
Line_14 $$ if (base64) -->Line_17 $$ digest = new String(enc.getCharArray())[ CD ]
Line_13 $$ String digest = null-->Line_17 $$ digest = new String(enc.getCharArray())[ FD ]
Line_17 $$ digest = new String(enc.getCharArray())-->Line_17 $$ digest = new String(enc.getCharArray())[ FD ]
Line_15 $$ Base64Encoder enc = new Base64Encoder()-->Line_17 $$ digest = new String(enc.getCharArray())[ FD ]
Line_14 $$ if (base64) -->Line_19 $$ digest = byteArrayToHex(digestData)[ CD ]
Line_13 $$ String digest = null-->Line_19 $$ digest = byteArrayToHex(digestData)[ FD ]
Line_17 $$ digest = new String(enc.getCharArray())-->Line_19 $$ digest = byteArrayToHex(digestData)[ FD ]
Line_19 $$ digest = byteArrayToHex(digestData)-->Line_19 $$ digest = byteArrayToHex(digestData)[ FD ]
Line_19 $$ digest = byteArrayToHex(digestData)-->Line_19 $$ digest = byteArrayToHex(digestData)[ CD ]
Line_12 $$ byte[] digestData = md.digest()-->Line_19 $$ digest = byteArrayToHex(digestData)[ FD ]
Line_2 $$ public static String calculate(String message, String algorithm, boolean base64) throws IllegalArgumentException -->Line_21 $$ return digest[ CD ]
