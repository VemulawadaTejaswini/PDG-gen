Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public DataSet parse() throws SnifflibDatatypeException [ CD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_3 $$ NumberFormat numformat = NumberFormat.getInstance()[ CD ]
Line_3 $$ NumberFormat numformat = NumberFormat.getInstance()-->Line_3 $$ NumberFormat numformat = NumberFormat.getInstance()[ CD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_4 $$ if (this.headers.size() != this.types.size()) [ CD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_7 $$ DataSet out = null[ CD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_8 $$ if (!this.dryrun) [ CD ]
Line_8 $$ if (!this.dryrun) -->Line_8 $$ if (!this.dryrun) [ CD ]
Line_8 $$ if (!this.dryrun) -->Line_9 $$ out = new DataSet()[ CD ]
Line_7 $$ DataSet out = null-->Line_9 $$ out = new DataSet()[ FD ]
Line_9 $$ out = new DataSet()-->Line_9 $$ out = new DataSet()[ FD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_11 $$ BufferedReader r = null[ CD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_12 $$ StreamTokenizer tokenizer = null[ CD ]
Line_14 $$ if (this.isURL) -->Line_15 $$ if (this.url2goto == null) [ CD ]
Line_15 $$ if (this.url2goto == null) -->Line_16 $$ return (null)[ CD ]
Line_14 $$ if (this.isURL) -->Line_18 $$ DataInputStream in = null[ CD ]
Line_18 $$ DataInputStream in = null-->Line_20 $$ in = new DataInputStream(this.url2goto.openStream())[ FD ]
Line_20 $$ in = new DataInputStream(this.url2goto.openStream())-->Line_20 $$ in = new DataInputStream(this.url2goto.openStream())[ FD ]
Line_11 $$ BufferedReader r = null-->Line_22 $$ r = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_22 $$ r = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_14 $$ if (this.isURL) -->Line_27 $$ if (this.file == null) [ CD ]
Line_14 $$ if (this.isURL) -->Line_30 $$ if (!this.file.exists()) [ CD ]
Line_30 $$ if (!this.file.exists()) -->Line_30 $$ if (!this.file.exists()) [ CD ]
Line_30 $$ if (!this.file.exists()) -->Line_30 $$ if (!this.file.exists()) [ CD ]
Line_14 $$ if (this.isURL) -->Line_33 $$ r = new BufferedReader(new FileReader(this.file))[ CD ]
Line_11 $$ BufferedReader r = null-->Line_33 $$ r = new BufferedReader(new FileReader(this.file))[ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_33 $$ r = new BufferedReader(new FileReader(this.file))[ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_33 $$ r = new BufferedReader(new FileReader(this.file))[ FD ]
Line_35 $$ if (this.ignorePreHeaderLines > 0) -->Line_36 $$ String strLine[ CD ]
Line_35 $$ if (this.ignorePreHeaderLines > 0) -->Line_37 $$ int k = 0[ CD ]
Line_35 $$ if (this.ignorePreHeaderLines > 0) -->Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [ CD ]
Line_35 $$ if (this.ignorePreHeaderLines > 0) -->Line_35 $$ if (this.ignorePreHeaderLines > 0) [ CD ]
Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) -->Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_36 $$ String strLine-->Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) -->Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [ CD ]
Line_11 $$ BufferedReader r = null-->Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) -->Line_39 $$ k++[ CD ]
Line_37 $$ int k = 0-->Line_39 $$ k++[ FD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_42 $$ tokenizer = new StreamTokenizer(r)[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_42 $$ tokenizer = new StreamTokenizer(r)[ FD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_43 $$ tokenizer.resetSyntax()[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_43 $$ tokenizer.resetSyntax()[ FD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_44 $$ tokenizer.eolIsSignificant(true)[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_44 $$ tokenizer.eolIsSignificant(true)[ FD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_45 $$ tokenizer.parseNumbers()[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_45 $$ tokenizer.parseNumbers()[ FD ]
Line_46 $$ if (this.delimiter.equals("\\t")) -->Line_46 $$ if (this.delimiter.equals("\\t")) [ CD ]
Line_46 $$ if (this.delimiter.equals("\\t")) -->Line_47 $$ tokenizer.whitespaceChars('\t', '\t')[ CD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_47 $$ tokenizer.whitespaceChars('\t', '\t')[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_47 $$ tokenizer.whitespaceChars('\t', '\t')[ FD ]
Line_49 $$ if (this.delimiter.equals(",")) -->Line_49 $$ if (this.delimiter.equals(",")) [ CD ]
Line_49 $$ if (this.delimiter.equals(",")) -->Line_50 $$ tokenizer.whitespaceChars(',', ',')[ CD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_50 $$ tokenizer.whitespaceChars(',', ',')[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_50 $$ tokenizer.whitespaceChars(',', ',')[ FD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_52 $$ tokenizer.quoteChar('"')[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_52 $$ tokenizer.quoteChar('"')[ FD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_53 $$ tokenizer.whitespaceChars(' ', ' ')[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_53 $$ tokenizer.whitespaceChars(' ', ' ')[ FD ]
Line_58 $$ if (this.headers.size() > 0) -->Line_59 $$ readingHeaders = false[ CD ]
Line_54 $$ boolean readingHeaders = true-->Line_59 $$ readingHeaders = false[ FD ]
Line_59 $$ readingHeaders = false-->Line_59 $$ readingHeaders = false[ FD ]
Line_58 $$ if (this.headers.size() > 0) -->Line_60 $$ readingInitialValues = true[ CD ]
Line_55 $$ boolean readingInitialValues = false-->Line_60 $$ readingInitialValues = true[ FD ]
Line_60 $$ readingInitialValues = true-->Line_60 $$ readingInitialValues = true[ FD ]
Line_62 $$ if (this.types.size() > 0) -->Line_63 $$ readingInitialValues = false[ CD ]
Line_55 $$ boolean readingInitialValues = false-->Line_63 $$ readingInitialValues = false[ FD ]
Line_60 $$ readingInitialValues = true-->Line_63 $$ readingInitialValues = false[ FD ]
Line_63 $$ readingInitialValues = false-->Line_63 $$ readingInitialValues = false[ FD ]
Line_62 $$ if (this.types.size() > 0) -->Line_64 $$ Class targetclass[ CD ]
Line_62 $$ if (this.types.size() > 0) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ CD ]
Line_62 $$ if (this.types.size() > 0) -->Line_62 $$ if (this.types.size() > 0) [ CD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ CD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ CD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ CD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_66 $$ targetclass = (Class) this.types.get(j)[ CD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_66 $$ targetclass = (Class) this.types.get(j)[ FD ]
Line_64 $$ Class targetclass-->Line_66 $$ targetclass = (Class) this.types.get(j)[ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_66 $$ targetclass = (Class) this.types.get(j)[ FD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_68 $$ this.constructors.add(targetclass.getConstructor(String.class))[ FD ]
Line_64 $$ Class targetclass-->Line_68 $$ this.constructors.add(targetclass.getConstructor(String.class))[ FD ]
Line_62 $$ if (this.types.size() > 0) -->Line_73 $$ readingData = true[ CD ]
Line_56 $$ boolean readingData = false-->Line_73 $$ readingData = true[ FD ]
Line_73 $$ readingData = true-->Line_73 $$ readingData = true[ FD ]
Line_79 $$ while (true) -->Line_80 $$ tokenizer.nextToken()[ CD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_80 $$ tokenizer.nextToken()[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_80 $$ tokenizer.nextToken()[ FD ]
Line_87 $$ advanceField = true-->Line_87 $$ advanceField = true[ FD ]
Line_78 $$ boolean advanceField = true-->Line_87 $$ advanceField = true[ FD ]
Line_88 $$ if (readingHeaders) -->Line_89 $$ this.headers.add(tokenizer.sval)[ CD ]
Line_88 $$ if (readingHeaders) -->Line_91 $$ if (readingInitialValues) [ CD ]
Line_91 $$ if (readingInitialValues) -->Line_92 $$ this.types.add(String.class)[ CD ]
Line_88 $$ if (readingHeaders) -->Line_94 $$ if (!this.dryrun) [ CD ]
Line_94 $$ if (!this.dryrun) -->Line_94 $$ if (!this.dryrun) [ CD ]
Line_94 $$ if (!this.dryrun) -->Line_95 $$ if (out.getColumnCount() <= currentColumn) [ CD ]
Line_75 $$ int currentColumn = 0-->Line_95 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_7 $$ DataSet out = null-->Line_95 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_9 $$ out = new DataSet()-->Line_95 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_95 $$ if (out.getColumnCount() <= currentColumn) -->Line_96 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ CD ]
Line_7 $$ DataSet out = null-->Line_96 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_9 $$ out = new DataSet()-->Line_96 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_96 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_96 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_101 $$ if (currentColumn < this.constructors.size()) [ FD ]
Line_101 $$ if (currentColumn < this.constructors.size()) -->Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)[ CD ]
Line_100 $$ Constructor construct-->Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_101 $$ if (currentColumn < this.constructors.size()) -->Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)[ CD ]
Line_75 $$ int currentColumn = 0-->Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_101 $$ if (currentColumn < this.constructors.size()) -->Line_105 $$ construct = targetclass.getConstructor(String.class)[ CD ]
Line_100 $$ Constructor construct-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ CD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_64 $$ Class targetclass-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_101 $$ if (currentColumn < this.constructors.size()) -->Line_106 $$ this.constructors.add(construct)[ CD ]
Line_100 $$ Constructor construct-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_111 $$ if (!this.dryrun) -->Line_111 $$ if (!this.dryrun) [ CD ]
Line_111 $$ if (!this.dryrun) -->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ CD ]
Line_7 $$ DataSet out = null-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_9 $$ out = new DataSet()-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_76 $$ int currentRow = 0-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_111 $$ if (!this.dryrun) -->Line_113 $$ if (this.findingTargetValue) [ CD ]
Line_113 $$ if (this.findingTargetValue) -->Line_114 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [ CD ]
Line_114 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ CD ]
Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ CD ]
Line_100 $$ Constructor construct-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_114 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_116 $$ r.close()[ CD ]
Line_11 $$ BufferedReader r = null-->Line_116 $$ r.close()[ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_116 $$ r.close()[ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_116 $$ r.close()[ FD ]
Line_114 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_117 $$ return (null)[ CD ]
Line_87 $$ advanceField = true-->Line_137 $$ advanceField = true[ FD ]
Line_137 $$ advanceField = true-->Line_137 $$ advanceField = true[ FD ]
Line_78 $$ boolean advanceField = true-->Line_137 $$ advanceField = true[ FD ]
Line_138 $$ if (readingHeaders) -->Line_141 $$ if (readingInitialValues) [ CD ]
Line_141 $$ if (readingInitialValues) -->Line_142 $$ this.types.add(Double.class)[ CD ]
Line_138 $$ if (readingHeaders) -->Line_144 $$ if (!this.dryrun) [ CD ]
Line_144 $$ if (!this.dryrun) -->Line_144 $$ if (!this.dryrun) [ CD ]
Line_144 $$ if (!this.dryrun) -->Line_145 $$ if (out.getColumnCount() <= currentColumn) [ CD ]
Line_75 $$ int currentColumn = 0-->Line_145 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_7 $$ DataSet out = null-->Line_145 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_9 $$ out = new DataSet()-->Line_145 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_145 $$ if (out.getColumnCount() <= currentColumn) -->Line_146 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ CD ]
Line_7 $$ DataSet out = null-->Line_146 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_9 $$ out = new DataSet()-->Line_146 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_146 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_146 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_151 $$ if (currentColumn < this.constructors.size()) [ FD ]
Line_151 $$ if (currentColumn < this.constructors.size()) -->Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)[ CD ]
Line_100 $$ Constructor construct-->Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_154 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_151 $$ if (currentColumn < this.constructors.size()) -->Line_155 $$ construct = targetclass.getConstructor(double.class)[ CD ]
Line_100 $$ Constructor construct-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ CD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_64 $$ Class targetclass-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_151 $$ if (currentColumn < this.constructors.size()) -->Line_156 $$ this.constructors.add(construct)[ CD ]
Line_100 $$ Constructor construct-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_158 $$ if (readingScientificNotation) -->Line_159 $$ Double val = this.scientificNumber[ CD ]
Line_158 $$ if (readingScientificNotation) -->Line_160 $$ if (!this.dryrun) [ CD ]
Line_160 $$ if (!this.dryrun) -->Line_160 $$ if (!this.dryrun) [ CD ]
Line_7 $$ DataSet out = null-->Line_162 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn)[ FD ]
Line_9 $$ out = new DataSet()-->Line_162 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn)[ FD ]
Line_76 $$ int currentRow = 0-->Line_162 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_162 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn)[ FD ]
Line_159 $$ Double val = this.scientificNumber-->Line_162 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_160 $$ if (!this.dryrun) -->Line_166 $$ if (this.findingTargetValue) [ CD ]
Line_166 $$ if (this.findingTargetValue) -->Line_167 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [ CD ]
Line_167 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_168 $$ Double NVAL = new Double(tokenizer.nval)[ CD ]
Line_170 $$ this.targetValue = numformat.parse(val + "E" + NVAL)-->Line_170 $$ this.targetValue = numformat.parse(val + "E" + NVAL)[ CD ]
Line_3 $$ NumberFormat numformat = NumberFormat.getInstance()-->Line_170 $$ this.targetValue = numformat.parse(val + "E" + NVAL)[ FD ]
Line_167 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_174 $$ tokenizer.nextToken()[ CD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_174 $$ tokenizer.nextToken()[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_174 $$ tokenizer.nextToken()[ FD ]
Line_167 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_175 $$ if (tokenizer.ttype != 'e') [ CD ]
Line_175 $$ if (tokenizer.ttype != 'e') -->Line_176 $$ r.close()[ CD ]
Line_11 $$ BufferedReader r = null-->Line_176 $$ r.close()[ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_176 $$ r.close()[ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_176 $$ r.close()[ FD ]
Line_175 $$ if (tokenizer.ttype != 'e') -->Line_177 $$ return (null)[ CD ]
Line_175 $$ if (tokenizer.ttype != 'e') -->Line_179 $$ tokenizer.pushBack()[ CD ]
Line_12 $$ StreamTokenizer tokenizer = null-->Line_179 $$ tokenizer.pushBack()[ FD ]
Line_42 $$ tokenizer = new StreamTokenizer(r)-->Line_179 $$ tokenizer.pushBack()[ FD ]
Line_158 $$ if (readingScientificNotation) -->Line_183 $$ readingScientificNotation = false[ CD ]
Line_183 $$ readingScientificNotation = false-->Line_183 $$ readingScientificNotation = false[ FD ]
Line_57 $$ boolean readingScientificNotation = false-->Line_183 $$ readingScientificNotation = false[ FD ]
Line_187 $$ if (!this.dryrun) -->Line_187 $$ if (!this.dryrun) [ CD ]
Line_187 $$ if (!this.dryrun) -->Line_188 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn)[ CD ]
Line_7 $$ DataSet out = null-->Line_188 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn)[ FD ]
Line_9 $$ out = new DataSet()-->Line_188 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn)[ FD ]
Line_76 $$ int currentRow = 0-->Line_188 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_188 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn)[ FD ]
Line_187 $$ if (!this.dryrun) -->Line_189 $$ if (this.findingTargetValue) [ CD ]
Line_189 $$ if (this.findingTargetValue) -->Line_190 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [ CD ]
Line_190 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_191 $$ this.targetValue = this.scientificNumber[ CD ]
Line_190 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_192 $$ r.close()[ CD ]
Line_11 $$ BufferedReader r = null-->Line_192 $$ r.close()[ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_192 $$ r.close()[ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_192 $$ r.close()[ FD ]
Line_190 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_193 $$ return (null)[ CD ]
Line_100 $$ Constructor construct-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_208 $$ if (readingHeaders) -->Line_209 $$ readingHeaders = false[ CD ]
Line_209 $$ readingHeaders = false-->Line_209 $$ readingHeaders = false[ FD ]
Line_54 $$ boolean readingHeaders = true-->Line_209 $$ readingHeaders = false[ FD ]
Line_59 $$ readingHeaders = false-->Line_209 $$ readingHeaders = false[ FD ]
Line_208 $$ if (readingHeaders) -->Line_210 $$ readingInitialValues = true[ CD ]
Line_210 $$ readingInitialValues = true-->Line_210 $$ readingInitialValues = true[ FD ]
Line_55 $$ boolean readingInitialValues = false-->Line_210 $$ readingInitialValues = true[ FD ]
Line_60 $$ readingInitialValues = true-->Line_210 $$ readingInitialValues = true[ FD ]
Line_63 $$ readingInitialValues = false-->Line_210 $$ readingInitialValues = true[ FD ]
Line_208 $$ if (readingHeaders) -->Line_212 $$ if (readingInitialValues) [ CD ]
Line_212 $$ if (readingInitialValues) -->Line_213 $$ readingInitialValues = false[ CD ]
Line_210 $$ readingInitialValues = true-->Line_213 $$ readingInitialValues = false[ FD ]
Line_213 $$ readingInitialValues = false-->Line_213 $$ readingInitialValues = false[ FD ]
Line_55 $$ boolean readingInitialValues = false-->Line_213 $$ readingInitialValues = false[ FD ]
Line_60 $$ readingInitialValues = true-->Line_213 $$ readingInitialValues = false[ FD ]
Line_63 $$ readingInitialValues = false-->Line_213 $$ readingInitialValues = false[ FD ]
Line_212 $$ if (readingInitialValues) -->Line_214 $$ readingData = true[ CD ]
Line_214 $$ readingData = true-->Line_214 $$ readingData = true[ FD ]
Line_56 $$ boolean readingData = false-->Line_214 $$ readingData = true[ FD ]
Line_73 $$ readingData = true-->Line_214 $$ readingData = true[ FD ]
Line_217 $$ if (readingData) -->Line_218 $$ currentRow++[ CD ]
Line_76 $$ int currentRow = 0-->Line_218 $$ currentRow++[ FD ]
Line_230 $$ if (readingData) -->Line_231 $$ readingData = false[ CD ]
Line_214 $$ readingData = true-->Line_231 $$ readingData = false[ FD ]
Line_231 $$ readingData = false-->Line_231 $$ readingData = false[ FD ]
Line_56 $$ boolean readingData = false-->Line_231 $$ readingData = false[ FD ]
Line_73 $$ readingData = true-->Line_231 $$ readingData = false[ FD ]
Line_237 $$ if (tokenizer.ttype == '"') -->Line_238 $$ advanceField = true[ CD ]
Line_87 $$ advanceField = true-->Line_238 $$ advanceField = true[ FD ]
Line_137 $$ advanceField = true-->Line_238 $$ advanceField = true[ FD ]
Line_238 $$ advanceField = true-->Line_238 $$ advanceField = true[ FD ]
Line_78 $$ boolean advanceField = true-->Line_238 $$ advanceField = true[ FD ]
Line_237 $$ if (tokenizer.ttype == '"') -->Line_239 $$ if (readingHeaders) [ CD ]
Line_239 $$ if (readingHeaders) -->Line_240 $$ this.headers.add(tokenizer.sval)[ CD ]
Line_239 $$ if (readingHeaders) -->Line_242 $$ if (readingInitialValues) [ CD ]
Line_242 $$ if (readingInitialValues) -->Line_243 $$ this.types.add(String.class)[ CD ]
Line_239 $$ if (readingHeaders) -->Line_245 $$ if (!this.dryrun) [ CD ]
Line_245 $$ if (!this.dryrun) -->Line_245 $$ if (!this.dryrun) [ CD ]
Line_245 $$ if (!this.dryrun) -->Line_246 $$ if (out.getColumnCount() <= currentColumn) [ CD ]
Line_75 $$ int currentColumn = 0-->Line_246 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_7 $$ DataSet out = null-->Line_246 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_9 $$ out = new DataSet()-->Line_246 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_246 $$ if (out.getColumnCount() <= currentColumn) -->Line_247 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ CD ]
Line_7 $$ DataSet out = null-->Line_247 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_9 $$ out = new DataSet()-->Line_247 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_247 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_247 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_75 $$ int currentColumn = 0-->Line_252 $$ if (currentColumn < this.constructors.size()) [ FD ]
Line_252 $$ if (currentColumn < this.constructors.size()) -->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ CD ]
Line_100 $$ Constructor construct-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_255 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_252 $$ if (currentColumn < this.constructors.size()) -->Line_256 $$ construct = targetclass.getConstructor(String.class)[ CD ]
Line_100 $$ Constructor construct-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ CD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_64 $$ Class targetclass-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_252 $$ if (currentColumn < this.constructors.size()) -->Line_257 $$ this.constructors.add(construct)[ CD ]
Line_100 $$ Constructor construct-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_262 $$ if (!this.dryrun) -->Line_262 $$ if (!this.dryrun) [ CD ]
Line_262 $$ if (!this.dryrun) -->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ CD ]
Line_7 $$ DataSet out = null-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_9 $$ out = new DataSet()-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_76 $$ int currentRow = 0-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_75 $$ int currentColumn = 0-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_262 $$ if (!this.dryrun) -->Line_264 $$ if (this.findingTargetValue) [ CD ]
Line_264 $$ if (this.findingTargetValue) -->Line_265 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [ CD ]
Line_265 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ CD ]
Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ CD ]
Line_100 $$ Constructor construct-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_265 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_267 $$ r.close()[ CD ]
Line_11 $$ BufferedReader r = null-->Line_267 $$ r.close()[ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_267 $$ r.close()[ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_267 $$ r.close()[ FD ]
Line_265 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) -->Line_268 $$ return (null)[ CD ]
Line_237 $$ if (tokenizer.ttype == '"') -->Line_284 $$ if (tokenizer.ttype == 'e') [ CD ]
Line_75 $$ int currentColumn = 0-->Line_285 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_284 $$ if (tokenizer.ttype == 'e') -->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ CD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_64 $$ Class targetclass-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) -->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ CD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_64 $$ Class targetclass-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) -->Line_287 $$ currentColumn--[ CD ]
Line_75 $$ int currentColumn = 0-->Line_287 $$ currentColumn--[ FD ]
Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) -->Line_288 $$ readingScientificNotation = true[ CD ]
Line_183 $$ readingScientificNotation = false-->Line_288 $$ readingScientificNotation = true[ FD ]
Line_288 $$ readingScientificNotation = true-->Line_288 $$ readingScientificNotation = true[ FD ]
Line_57 $$ boolean readingScientificNotation = false-->Line_288 $$ readingScientificNotation = true[ FD ]
Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) -->Line_289 $$ advanceField = false[ CD ]
Line_87 $$ advanceField = true-->Line_289 $$ advanceField = false[ FD ]
Line_137 $$ advanceField = true-->Line_289 $$ advanceField = false[ FD ]
Line_238 $$ advanceField = true-->Line_289 $$ advanceField = false[ FD ]
Line_289 $$ advanceField = false-->Line_289 $$ advanceField = false[ FD ]
Line_78 $$ boolean advanceField = true-->Line_289 $$ advanceField = false[ FD ]
Line_284 $$ if (tokenizer.ttype == 'e') -->Line_292 $$ advanceField = false[ CD ]
Line_87 $$ advanceField = true-->Line_292 $$ advanceField = false[ FD ]
Line_137 $$ advanceField = true-->Line_292 $$ advanceField = false[ FD ]
Line_238 $$ advanceField = true-->Line_292 $$ advanceField = false[ FD ]
Line_289 $$ advanceField = false-->Line_292 $$ advanceField = false[ FD ]
Line_292 $$ advanceField = false-->Line_292 $$ advanceField = false[ FD ]
Line_78 $$ boolean advanceField = true-->Line_292 $$ advanceField = false[ FD ]
Line_79 $$ while (true) -->Line_297 $$ if (tokenizer.ttype == StreamTokenizer.TT_EOF) [ CD ]
Line_79 $$ while (true) -->Line_300 $$ if (advanceField) [ CD ]
Line_300 $$ if (advanceField) -->Line_301 $$ currentColumn++[ CD ]
Line_75 $$ int currentColumn = 0-->Line_301 $$ currentColumn++[ FD ]
Line_300 $$ if (advanceField) -->Line_302 $$ if (!readingHeaders) [ CD ]
Line_209 $$ readingHeaders = false-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_54 $$ boolean readingHeaders = true-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_59 $$ readingHeaders = false-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_302 $$ if (!readingHeaders) -->Line_302 $$ if (!readingHeaders) [ CD ]
Line_209 $$ readingHeaders = false-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_54 $$ boolean readingHeaders = true-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_59 $$ readingHeaders = false-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_302 $$ if (!readingHeaders) -->Line_303 $$ if (currentColumn >= this.headers.size()) [ CD ]
Line_75 $$ int currentColumn = 0-->Line_303 $$ if (currentColumn >= this.headers.size()) [ FD ]
Line_303 $$ if (currentColumn >= this.headers.size()) -->Line_304 $$ currentColumn = 0[ CD ]
Line_304 $$ currentColumn = 0-->Line_304 $$ currentColumn = 0[ FD ]
Line_75 $$ int currentColumn = 0-->Line_304 $$ currentColumn = 0[ FD ]
Line_209 $$ readingHeaders = false-->Line_309 $$ if (!readingHeaders) [ FD ]
Line_54 $$ boolean readingHeaders = true-->Line_309 $$ if (!readingHeaders) [ FD ]
Line_59 $$ readingHeaders = false-->Line_309 $$ if (!readingHeaders) [ FD ]
Line_309 $$ if (!readingHeaders) -->Line_309 $$ if (!readingHeaders) [ CD ]
Line_209 $$ readingHeaders = false-->Line_309 $$ if (!readingHeaders) [ FD ]
Line_54 $$ boolean readingHeaders = true-->Line_309 $$ if (!readingHeaders) [ FD ]
Line_59 $$ readingHeaders = false-->Line_309 $$ if (!readingHeaders) [ FD ]
Line_309 $$ if (!readingHeaders) -->Line_310 $$ this.rowcount = currentRow[ CD ]
Line_76 $$ int currentRow = 0-->Line_310 $$ this.rowcount = currentRow[ FD ]
Line_309 $$ if (!readingHeaders) -->Line_312 $$ this.rowcount = 0[ CD ]
Line_309 $$ if (!readingHeaders) -->Line_313 $$ readingHeaders = false[ CD ]
Line_209 $$ readingHeaders = false-->Line_313 $$ readingHeaders = false[ FD ]
Line_54 $$ boolean readingHeaders = true-->Line_313 $$ readingHeaders = false[ FD ]
Line_59 $$ readingHeaders = false-->Line_313 $$ readingHeaders = false[ FD ]
Line_313 $$ readingHeaders = false-->Line_313 $$ readingHeaders = false[ FD ]
Line_309 $$ if (!readingHeaders) -->Line_314 $$ if (this.ignorePostHeaderLines > 0) [ CD ]
Line_314 $$ if (this.ignorePostHeaderLines > 0) -->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ CD ]
Line_314 $$ if (this.ignorePostHeaderLines > 0) -->Line_314 $$ if (this.ignorePostHeaderLines > 0) [ CD ]
Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) -->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) -->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_36 $$ String strLine-->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) -->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ CD ]
Line_11 $$ BufferedReader r = null-->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [ FD ]
Line_317 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) -->Line_318 $$ k++[ CD ]
Line_37 $$ int k = 0-->Line_318 $$ k++[ FD ]
Line_11 $$ BufferedReader r = null-->Line_322 $$ r.close()[ FD ]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in))-->Line_322 $$ r.close()[ FD ]
Line_33 $$ r = new BufferedReader(new FileReader(this.file))-->Line_322 $$ r.close()[ FD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_326 $$ if (!this.dryrun) [ CD ]
Line_326 $$ if (!this.dryrun) -->Line_326 $$ if (!this.dryrun) [ CD ]
Line_326 $$ if (!this.dryrun) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ CD ]
Line_326 $$ if (!this.dryrun) -->Line_326 $$ if (!this.dryrun) [ CD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ CD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ CD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ CD ]
Line_7 $$ DataSet out = null-->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
Line_9 $$ out = new DataSet()-->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
Line_2 $$ public DataSet parse() throws SnifflibDatatypeException -->Line_331 $$ return (out)[ CD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_65 $$ for (int j = 0; j < this.types.size(); j++) [ FD ]
Line_65 $$ for (int j = 0; j < this.types.size(); j++) -->Line_66 $$ targetclass = (Class) this.types.get(j)[ FD ]
Line_66 $$ targetclass = (Class) this.types.get(j)-->Line_68 $$ this.constructors.add(targetclass.getConstructor(String.class))[ FD ]
Line_304 $$ currentColumn = 0-->Line_95 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_304 $$ currentColumn = 0-->Line_96 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_304 $$ currentColumn = 0-->Line_96 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_304 $$ currentColumn = 0-->Line_101 $$ if (currentColumn < this.constructors.size()) [ FD ]
Line_304 $$ currentColumn = 0-->Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_304 $$ currentColumn = 0-->Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_105 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_100 $$ Constructor construct-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_106 $$ this.constructors.add(construct)[ FD ]
Line_304 $$ currentColumn = 0-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_112 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_115 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_304 $$ currentColumn = 0-->Line_145 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_304 $$ currentColumn = 0-->Line_146 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_304 $$ currentColumn = 0-->Line_146 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_304 $$ currentColumn = 0-->Line_151 $$ if (currentColumn < this.constructors.size()) [ FD ]
Line_304 $$ currentColumn = 0-->Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_304 $$ currentColumn = 0-->Line_154 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_155 $$ construct = targetclass.getConstructor(double.class)[ FD ]
Line_100 $$ Constructor construct-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_156 $$ this.constructors.add(construct)[ FD ]
Line_304 $$ currentColumn = 0-->Line_162 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn)[ FD ]
Line_159 $$ Double val = this.scientificNumber-->Line_162 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_164 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_304 $$ currentColumn = 0-->Line_188 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_197 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err)[ FD ]
Line_304 $$ currentColumn = 0-->Line_246 $$ if (out.getColumnCount() <= currentColumn) [ FD ]
Line_304 $$ currentColumn = 0-->Line_247 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_304 $$ currentColumn = 0-->Line_247 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn))[ FD ]
Line_304 $$ currentColumn = 0-->Line_252 $$ if (currentColumn < this.constructors.size()) [ FD ]
Line_304 $$ currentColumn = 0-->Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)[ FD ]
Line_304 $$ currentColumn = 0-->Line_255 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_256 $$ construct = targetclass.getConstructor(String.class)[ FD ]
Line_100 $$ Constructor construct-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_257 $$ this.constructors.add(construct)[ FD ]
Line_304 $$ currentColumn = 0-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_263 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn)[ FD ]
Line_100 $$ Constructor construct-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_102 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_105 $$ construct = targetclass.getConstructor(String.class)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_152 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_155 $$ construct = targetclass.getConstructor(double.class)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_253 $$ construct = (Constructor) this.constructors.get(currentColumn)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_256 $$ construct = targetclass.getConstructor(String.class)-->Line_266 $$ this.targetValue = construct.newInstance((String) tokenizer.sval)[ FD ]
Line_304 $$ currentColumn = 0-->Line_285 $$ Class targetclass = (Class) this.types.get(currentColumn)[ FD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_104 $$ Class targetclass = (Class) this.types.get(currentColumn)-->Line_286 $$ if (Number.class.isAssignableFrom(targetclass)) [ FD ]
Line_304 $$ currentColumn = 0-->Line_287 $$ currentColumn--[ FD ]
Line_304 $$ currentColumn = 0-->Line_301 $$ currentColumn++[ FD ]
Line_209 $$ readingHeaders = false-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_209 $$ readingHeaders = false-->Line_302 $$ if (!readingHeaders) [ FD ]
Line_304 $$ currentColumn = 0-->Line_303 $$ if (currentColumn >= this.headers.size()) [ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_327 $$ for (int j = 0; j < this.headers.size(); j++) [ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
Line_327 $$ for (int j = 0; j < this.headers.size(); j++) -->Line_328 $$ out.setColumnName(j, (String) this.headers.get(j))[ FD ]
