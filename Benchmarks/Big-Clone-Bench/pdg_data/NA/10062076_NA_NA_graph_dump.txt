Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException [ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_5 $$ String installClassVarStr = "000000000000"[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_6 $$ byte[] buf = new byte[installClassVarStr.length()][ CD ]
Line_5 $$ String installClassVarStr = "000000000000"-->Line_6 $$ byte[] buf = new byte[installClassVarStr.length()][ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_7 $$ NumberFormat nf = NumberFormat.getInstance(Locale.US)[ CD ]
Line_7 $$ NumberFormat nf = NumberFormat.getInstance(Locale.US)-->Line_7 $$ NumberFormat nf = NumberFormat.getInstance(Locale.US)[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_8 $$ nf.setGroupingUsed(false)[ CD ]
Line_7 $$ NumberFormat nf = NumberFormat.getInstance(Locale.US)-->Line_8 $$ nf.setGroupingUsed(false)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_9 $$ nf.setMinimumIntegerDigits(installClassVarStr.length())[ CD ]
Line_7 $$ NumberFormat nf = NumberFormat.getInstance(Locale.US)-->Line_9 $$ nf.setMinimumIntegerDigits(installClassVarStr.length())[ FD ]
Line_5 $$ String installClassVarStr = "000000000000"-->Line_9 $$ nf.setMinimumIntegerDigits(installClassVarStr.length())[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_10 $$ int installClassStopPos = 0[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_11 $$ long installClassOffset = reader.available()[ CD ]
Line_11 $$ long installClassOffset = reader.available()-->Line_11 $$ long installClassOffset = reader.available()[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_11 $$ long installClassOffset = reader.available()[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_12 $$ int position = 0[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_13 $$ System.out.println(VAGlobals.i18n("VAArchiver_GenerateInstallExe"))[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_14 $$ reader.read(buf, 0, buf.length)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_14 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_14 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_15 $$ position = 1[ CD ]
Line_12 $$ int position = 0-->Line_15 $$ position = 1[ FD ]
Line_15 $$ position = 1-->Line_15 $$ position = 1[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_16 $$ for (int n = 0; n < 3; n++) [ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException [ CD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_16 $$ for (int n = 0; n < 3; n++) [ CD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_16 $$ for (int n = 0; n < 3; n++) [ CD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_16 $$ for (int n = 0; n < 3; n++) [ FD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) [ CD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_16 $$ for (int n = 0; n < 3; n++) [ CD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) [ CD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) [ CD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) [ CD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_18 $$ content.write(buf[0])[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_18 $$ content.write(buf[0])[ FD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_19 $$ int nextb = reader.read()[ CD ]
Line_19 $$ int nextb = reader.read()-->Line_19 $$ int nextb = reader.read()[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_19 $$ int nextb = reader.read()[ FD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_20 $$ position++[ CD ]
Line_12 $$ int position = 0-->Line_20 $$ position++[ FD ]
Line_15 $$ position = 1-->Line_20 $$ position++[ FD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_21 $$ shiftArray(buf)[ CD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_21 $$ shiftArray(buf)[ FD ]
Line_17 $$ while ((!new String(buf).equals("clname_here_")) && (!new String(buf).equals("clstart_here")) && (!new String(buf).equals("clstop_here_"))) -->Line_22 $$ buf[buf.length - 1] = (byte) nextb[ CD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_24 $$ if (new String(buf).equals("clname_here_")) [ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_24 $$ if (new String(buf).equals("clname_here_")) [ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_25 $$ VAGlobals.printDebug("  clname_here_ found at " + (position - 1))[ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_27 $$ clnameBuffer.append(instClassName_)[ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) [ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_24 $$ if (new String(buf).equals("clname_here_")) [ CD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) [ CD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) [ CD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_29 $$ clnameBuffer.append('.')[ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_31 $$ byte[] clnameBytes = clnameBuffer.toString().getBytes()[ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_32 $$ for (int i = 0; i < 64; i++) [ CD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_24 $$ if (new String(buf).equals("clname_here_")) [ CD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ CD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ CD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_33 $$ content.write(clnameBytes[i])[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_33 $$ content.write(clnameBytes[i])[ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_34 $$ position++[ CD ]
Line_12 $$ int position = 0-->Line_34 $$ position++[ FD ]
Line_15 $$ position = 1-->Line_34 $$ position++[ FD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_36 $$ reader.skip(64 - buf.length)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_36 $$ reader.skip(64 - buf.length)[ FD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_37 $$ reader.read(buf, 0, buf.length)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_37 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_37 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_24 $$ if (new String(buf).equals("clname_here_")) -->Line_38 $$ if (new String(buf).equals("clstart_here")) [ CD ]
Line_38 $$ if (new String(buf).equals("clstart_here")) -->Line_38 $$ if (new String(buf).equals("clstart_here")) [ CD ]
Line_38 $$ if (new String(buf).equals("clstart_here")) -->Line_39 $$ VAGlobals.printDebug("  clstart_here found at " + (position - 1))[ CD ]
Line_38 $$ if (new String(buf).equals("clstart_here")) -->Line_40 $$ buf = nf.format(installClassOffset).getBytes()[ CD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_40 $$ buf = nf.format(installClassOffset).getBytes()[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_40 $$ buf = nf.format(installClassOffset).getBytes()[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_40 $$ buf = nf.format(installClassOffset).getBytes()[ CD ]
Line_7 $$ NumberFormat nf = NumberFormat.getInstance(Locale.US)-->Line_40 $$ buf = nf.format(installClassOffset).getBytes()[ FD ]
Line_11 $$ long installClassOffset = reader.available()-->Line_40 $$ buf = nf.format(installClassOffset).getBytes()[ FD ]
Line_38 $$ if (new String(buf).equals("clstart_here")) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ CD ]
Line_38 $$ if (new String(buf).equals("clstart_here")) -->Line_38 $$ if (new String(buf).equals("clstart_here")) [ CD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ CD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ CD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_42 $$ content.write(buf[i])[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_42 $$ content.write(buf[i])[ FD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_43 $$ position++[ CD ]
Line_12 $$ int position = 0-->Line_43 $$ position++[ FD ]
Line_15 $$ position = 1-->Line_43 $$ position++[ FD ]
Line_38 $$ if (new String(buf).equals("clstart_here")) -->Line_45 $$ reader.read(buf, 0, buf.length)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_45 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_45 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_45 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_38 $$ if (new String(buf).equals("clstart_here")) -->Line_46 $$ if (new String(buf).equals("clstop_here_")) [ CD ]
Line_46 $$ if (new String(buf).equals("clstop_here_")) -->Line_46 $$ if (new String(buf).equals("clstop_here_")) [ CD ]
Line_46 $$ if (new String(buf).equals("clstop_here_")) -->Line_47 $$ VAGlobals.printDebug("  clstop_here_ found at " + (position - 1))[ CD ]
Line_46 $$ if (new String(buf).equals("clstop_here_")) -->Line_48 $$ installClassStopPos = position - 1[ CD ]
Line_48 $$ installClassStopPos = position - 1-->Line_48 $$ installClassStopPos = position - 1[ FD ]
Line_10 $$ int installClassStopPos = 0-->Line_48 $$ installClassStopPos = position - 1[ FD ]
Line_12 $$ int position = 0-->Line_48 $$ installClassStopPos = position - 1[ FD ]
Line_15 $$ position = 1-->Line_48 $$ installClassStopPos = position - 1[ FD ]
Line_46 $$ if (new String(buf).equals("clstop_here_")) -->Line_49 $$ content.write(buf)[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_49 $$ content.write(buf)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_49 $$ content.write(buf)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_49 $$ content.write(buf)[ FD ]
Line_46 $$ if (new String(buf).equals("clstop_here_")) -->Line_50 $$ position += 12[ CD ]
Line_50 $$ position += 12-->Line_50 $$ position += 12[ FD ]
Line_12 $$ int position = 0-->Line_50 $$ position += 12[ FD ]
Line_15 $$ position = 1-->Line_50 $$ position += 12[ FD ]
Line_46 $$ if (new String(buf).equals("clstop_here_")) -->Line_51 $$ reader.read(buf, 0, buf.length)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_51 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_51 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_51 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_54 $$ content.write(buf)[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_54 $$ content.write(buf)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_54 $$ content.write(buf)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_54 $$ content.write(buf)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_55 $$ buf = new byte[2048][ CD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_55 $$ buf = new byte[2048][ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_55 $$ buf = new byte[2048][ FD ]
Line_55 $$ buf = new byte[2048]-->Line_55 $$ buf = new byte[2048][ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_56 $$ int read = reader.read(buf)[ CD ]
Line_56 $$ int read = reader.read(buf)-->Line_56 $$ int read = reader.read(buf)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_56 $$ int read = reader.read(buf)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_56 $$ int read = reader.read(buf)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_56 $$ int read = reader.read(buf)[ FD ]
Line_55 $$ buf = new byte[2048]-->Line_56 $$ int read = reader.read(buf)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_57 $$ while (read > 0) [ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException [ CD ]
Line_56 $$ int read = reader.read(buf)-->Line_57 $$ while (read > 0) [ FD ]
Line_57 $$ while (read > 0) -->Line_58 $$ content.write(buf, 0, read)[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_58 $$ content.write(buf, 0, read)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_58 $$ content.write(buf, 0, read)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_58 $$ content.write(buf, 0, read)[ FD ]
Line_55 $$ buf = new byte[2048]-->Line_58 $$ content.write(buf, 0, read)[ FD ]
Line_56 $$ int read = reader.read(buf)-->Line_58 $$ content.write(buf, 0, read)[ FD ]
Line_57 $$ while (read > 0) -->Line_59 $$ read = reader.read(buf)[ CD ]
Line_59 $$ read = reader.read(buf)-->Line_59 $$ read = reader.read(buf)[ FD ]
Line_56 $$ int read = reader.read(buf)-->Line_59 $$ read = reader.read(buf)[ FD ]
Line_59 $$ read = reader.read(buf)-->Line_59 $$ read = reader.read(buf)[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_59 $$ read = reader.read(buf)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_59 $$ read = reader.read(buf)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_59 $$ read = reader.read(buf)[ FD ]
Line_55 $$ buf = new byte[2048]-->Line_59 $$ read = reader.read(buf)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_61 $$ reader.close()[ CD ]
Line_3 $$ InputStream reader = getClass().getResourceAsStream("/" + instTemplate)-->Line_61 $$ reader.close()[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_62 $$ FileInputStream classStream = new FileInputStream(instClassFile)[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_63 $$ read = classStream.read(buf)[ CD ]
Line_59 $$ read = reader.read(buf)-->Line_63 $$ read = classStream.read(buf)[ FD ]
Line_56 $$ int read = reader.read(buf)-->Line_63 $$ read = classStream.read(buf)[ FD ]
Line_63 $$ read = classStream.read(buf)-->Line_63 $$ read = classStream.read(buf)[ FD ]
Line_63 $$ read = classStream.read(buf)-->Line_63 $$ read = classStream.read(buf)[ CD ]
Line_62 $$ FileInputStream classStream = new FileInputStream(instClassFile)-->Line_63 $$ read = classStream.read(buf)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_63 $$ read = classStream.read(buf)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_63 $$ read = classStream.read(buf)[ FD ]
Line_55 $$ buf = new byte[2048]-->Line_63 $$ read = classStream.read(buf)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_64 $$ while (read > 0) [ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException [ CD ]
Line_59 $$ read = reader.read(buf)-->Line_64 $$ while (read > 0) [ FD ]
Line_56 $$ int read = reader.read(buf)-->Line_64 $$ while (read > 0) [ FD ]
Line_63 $$ read = classStream.read(buf)-->Line_64 $$ while (read > 0) [ FD ]
Line_64 $$ while (read > 0) -->Line_65 $$ content.write(buf, 0, read)[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_55 $$ buf = new byte[2048]-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_59 $$ read = reader.read(buf)-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_56 $$ int read = reader.read(buf)-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_63 $$ read = classStream.read(buf)-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_64 $$ while (read > 0) -->Line_66 $$ read = classStream.read(buf)[ CD ]
Line_66 $$ read = classStream.read(buf)-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_59 $$ read = reader.read(buf)-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_56 $$ int read = reader.read(buf)-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_63 $$ read = classStream.read(buf)-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_66 $$ read = classStream.read(buf)-->Line_66 $$ read = classStream.read(buf)[ CD ]
Line_62 $$ FileInputStream classStream = new FileInputStream(instClassFile)-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_6 $$ byte[] buf = new byte[installClassVarStr.length()]-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_55 $$ buf = new byte[2048]-->Line_66 $$ read = classStream.read(buf)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_68 $$ classStream.close()[ CD ]
Line_62 $$ FileInputStream classStream = new FileInputStream(instClassFile)-->Line_68 $$ classStream.close()[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_69 $$ content.close()[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_69 $$ content.close()[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_70 $$ byte[] contentBytes = content.toByteArray()[ CD ]
Line_70 $$ byte[] contentBytes = content.toByteArray()-->Line_70 $$ byte[] contentBytes = content.toByteArray()[ CD ]
Line_4 $$ ByteArrayOutputStream content = new ByteArrayOutputStream()-->Line_70 $$ byte[] contentBytes = content.toByteArray()[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_71 $$ installClassVarStr = nf.format(contentBytes.length)[ CD ]
Line_5 $$ String installClassVarStr = "000000000000"-->Line_71 $$ installClassVarStr = nf.format(contentBytes.length)[ FD ]
Line_71 $$ installClassVarStr = nf.format(contentBytes.length)-->Line_71 $$ installClassVarStr = nf.format(contentBytes.length)[ FD ]
Line_71 $$ installClassVarStr = nf.format(contentBytes.length)-->Line_71 $$ installClassVarStr = nf.format(contentBytes.length)[ CD ]
Line_7 $$ NumberFormat nf = NumberFormat.getInstance(Locale.US)-->Line_71 $$ installClassVarStr = nf.format(contentBytes.length)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_72 $$ byte[] installClassVarBytes = installClassVarStr.getBytes()[ CD ]
Line_72 $$ byte[] installClassVarBytes = installClassVarStr.getBytes()-->Line_72 $$ byte[] installClassVarBytes = installClassVarStr.getBytes()[ CD ]
Line_5 $$ String installClassVarStr = "000000000000"-->Line_72 $$ byte[] installClassVarBytes = installClassVarStr.getBytes()[ FD ]
Line_71 $$ installClassVarStr = nf.format(contentBytes.length)-->Line_72 $$ byte[] installClassVarBytes = installClassVarStr.getBytes()[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException [ CD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ CD ]
Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ CD ]
Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) -->Line_74 $$ contentBytes[installClassStopPos + i] = installClassVarBytes[i][ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_76 $$ FileOutputStream out = new FileOutputStream(nativeInstallFile)[ CD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_77 $$ out.write(contentBytes)[ CD ]
Line_76 $$ FileOutputStream out = new FileOutputStream(nativeInstallFile)-->Line_77 $$ out.write(contentBytes)[ FD ]
Line_70 $$ byte[] contentBytes = content.toByteArray()-->Line_77 $$ out.write(contentBytes)[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_78 $$ out.close()[ CD ]
Line_76 $$ FileOutputStream out = new FileOutputStream(nativeInstallFile)-->Line_78 $$ out.close()[ FD ]
Line_2 $$ private long generateNativeInstallExe(File nativeInstallFile, String instTemplate, File instClassFile) throws IOException -->Line_79 $$ return installClassOffset[ CD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_16 $$ for (int n = 0; n < 3; n++) [ FD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_16 $$ for (int n = 0; n < 3; n++) [ FD ]
Line_16 $$ for (int n = 0; n < 3; n++) -->Line_16 $$ for (int n = 0; n < 3; n++) [ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_37 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_45 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_50 $$ position += 12-->Line_48 $$ installClassStopPos = position - 1[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_49 $$ content.write(buf)[ FD ]
Line_40 $$ buf = nf.format(installClassOffset).getBytes()-->Line_51 $$ reader.read(buf, 0, buf.length)[ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) [ FD ]
Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) -->Line_28 $$ for (int i = clnameBuffer.length() - 1; i < 64; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ FD ]
Line_32 $$ for (int i = 0; i < 64; i++) -->Line_32 $$ for (int i = 0; i < 64; i++) [ FD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < buf.length; i++) -->Line_41 $$ for (int i = 0; i < buf.length; i++) [ FD ]
Line_59 $$ read = reader.read(buf)-->Line_57 $$ while (read > 0) [ FD ]
Line_59 $$ read = reader.read(buf)-->Line_57 $$ while (read > 0) [ FD ]
Line_59 $$ read = reader.read(buf)-->Line_58 $$ content.write(buf, 0, read)[ FD ]
Line_66 $$ read = classStream.read(buf)-->Line_64 $$ while (read > 0) [ FD ]
Line_66 $$ read = classStream.read(buf)-->Line_64 $$ while (read > 0) [ FD ]
Line_66 $$ read = classStream.read(buf)-->Line_65 $$ content.write(buf, 0, read)[ FD ]
Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) -->Line_73 $$ for (int i = 0; i < installClassVarBytes.length; i++) [ FD ]
