Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void addEntry(InputStream jis, JarEntry entry) throws IOException, URISyntaxException [ CD ]
Line_2 $$ public void addEntry(InputStream jis, JarEntry entry) throws IOException, URISyntaxException -->Line_3 $$ File target = new File(this.target.getPath() + entry.getName()).getAbsoluteFile()[ CD ]
Line_3 $$ File target = new File(this.target.getPath() + entry.getName()).getAbsoluteFile()-->Line_3 $$ File target = new File(this.target.getPath() + entry.getName()).getAbsoluteFile()[ CD ]
Line_2 $$ public void addEntry(InputStream jis, JarEntry entry) throws IOException, URISyntaxException -->Line_3 $$ File target = new File(this.target.getPath() + entry.getName()).getAbsoluteFile()[ FD ]
Line_2 $$ public void addEntry(InputStream jis, JarEntry entry) throws IOException, URISyntaxException -->Line_4 $$ if (!target.exists()) [ CD ]
Line_4 $$ if (!target.exists()) -->Line_4 $$ if (!target.exists()) [ CD ]
Line_4 $$ if (!target.exists()) -->Line_4 $$ if (!target.exists()) [ CD ]
Line_3 $$ File target = new File(this.target.getPath() + entry.getName()).getAbsoluteFile()-->Line_4 $$ if (!target.exists()) [ FD ]
Line_4 $$ if (!target.exists()) -->Line_5 $$ target.createNewFile()[ CD ]
Line_3 $$ File target = new File(this.target.getPath() + entry.getName()).getAbsoluteFile()-->Line_5 $$ target.createNewFile()[ FD ]
Line_2 $$ public void addEntry(InputStream jis, JarEntry entry) throws IOException, URISyntaxException -->Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) [ CD ]
Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) -->Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) [ CD ]
Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) -->Line_8 $$ File sourceEntry = new File(this.source.getPath() + entry.getName())[ CD ]
Line_2 $$ public void addEntry(InputStream jis, JarEntry entry) throws IOException, URISyntaxException -->Line_8 $$ File sourceEntry = new File(this.source.getPath() + entry.getName())[ FD ]
Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) -->Line_9 $$ FileInputStream fis = new FileInputStream(sourceEntry)[ CD ]
Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) -->Line_10 $$ byte[] classBytes = new byte[fis.available()][ CD ]
Line_9 $$ FileInputStream fis = new FileInputStream(sourceEntry)-->Line_10 $$ byte[] classBytes = new byte[fis.available()][ FD ]
Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) -->Line_11 $$ fis.read(classBytes)[ CD ]
Line_9 $$ FileInputStream fis = new FileInputStream(sourceEntry)-->Line_11 $$ fis.read(classBytes)[ FD ]
Line_10 $$ byte[] classBytes = new byte[fis.available()]-->Line_11 $$ fis.read(classBytes)[ FD ]
Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) -->Line_12 $$ (new FileOutputStream(target)).write(classBytes)[ CD ]
Line_10 $$ byte[] classBytes = new byte[fis.available()]-->Line_12 $$ (new FileOutputStream(target)).write(classBytes)[ FD ]
Line_7 $$ if ((new File(this.source.toURI())).isDirectory()) -->Line_14 $$ readwriteStreams(jis, (new FileOutputStream(target)))[ CD ]
Line_2 $$ public void addEntry(InputStream jis, JarEntry entry) throws IOException, URISyntaxException -->Line_14 $$ readwriteStreams(jis, (new FileOutputStream(target)))[ FD ]
