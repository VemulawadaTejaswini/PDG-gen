Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void transport(File file) throws TransportException [ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_3 $$ if (file.exists()) [ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_3 $$ if (file.exists()) [ FD ]
Line_3 $$ if (file.exists()) -->Line_3 $$ if (file.exists()) [ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_3 $$ if (file.exists()) [ FD ]
Line_3 $$ if (file.exists()) -->Line_4 $$ if (file.isDirectory()) [ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_4 $$ if (file.isDirectory()) [ FD ]
Line_4 $$ if (file.isDirectory()) -->Line_4 $$ if (file.isDirectory()) [ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_4 $$ if (file.isDirectory()) [ FD ]
Line_4 $$ if (file.isDirectory()) -->Line_5 $$ File[] files = file.listFiles()[ CD ]
Line_5 $$ File[] files = file.listFiles()-->Line_5 $$ File[] files = file.listFiles()[ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_5 $$ File[] files = file.listFiles()[ FD ]
Line_4 $$ if (file.isDirectory()) -->Line_6 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_4 $$ if (file.isDirectory()) -->Line_4 $$ if (file.isDirectory()) [ CD ]
Line_6 $$ for (int i = 0; i < files.length; i++) -->Line_6 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < files.length; i++) -->Line_6 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < files.length; i++) -->Line_6 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < files.length; i++) -->Line_7 $$ transport(file)[ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_7 $$ transport(file)[ FD ]
Line_4 $$ if (file.isDirectory()) -->Line_9 $$ if (file.isFile()) [ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_9 $$ if (file.isFile()) [ FD ]
Line_9 $$ if (file.isFile()) -->Line_9 $$ if (file.isFile()) [ CD ]
Line_2 $$ public void transport(File file) throws TransportException -->Line_9 $$ if (file.isFile()) [ FD ]
Line_11 $$ FileChannel inChannel = new FileInputStream(file).getChannel()-->Line_11 $$ FileChannel inChannel = new FileInputStream(file).getChannel()[ CD ]
Line_12 $$ FileChannel outChannel = new FileOutputStream(destinationDir).getChannel()-->Line_12 $$ FileChannel outChannel = new FileOutputStream(destinationDir).getChannel()[ CD ]
Line_11 $$ FileChannel inChannel = new FileInputStream(file).getChannel()-->Line_13 $$ inChannel.transferTo(0, inChannel.size(), outChannel)[ FD ]
Line_12 $$ FileChannel outChannel = new FileOutputStream(destinationDir).getChannel()-->Line_13 $$ inChannel.transferTo(0, inChannel.size(), outChannel)[ FD ]
Line_11 $$ FileChannel inChannel = new FileInputStream(file).getChannel()-->Line_13 $$ inChannel.transferTo(0, inChannel.size(), outChannel)[ FD ]
Line_6 $$ for (int i = 0; i < files.length; i++) -->Line_6 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < files.length; i++) -->Line_6 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < files.length; i++) -->Line_6 $$ for (int i = 0; i < files.length; i++) [ FD ]
