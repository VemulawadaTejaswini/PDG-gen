Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Login authenticateClient() [ CD ]
Line_2 $$ public Login authenticateClient() -->Line_3 $$ Object o[ CD ]
Line_2 $$ public Login authenticateClient() -->Line_4 $$ String user, password[ CD ]
Line_2 $$ public Login authenticateClient() -->Line_5 $$ Vector<Login> clientLogins = ClientLoginsTableModel.getClientLogins()[ CD ]
Line_5 $$ Vector<Login> clientLogins = ClientLoginsTableModel.getClientLogins()-->Line_5 $$ Vector<Login> clientLogins = ClientLoginsTableModel.getClientLogins()[ CD ]
Line_2 $$ public Login authenticateClient() -->Line_6 $$ Login login = null[ CD ]
Line_3 $$ Object o-->Line_11 $$ o = objectIn.readObject()[ FD ]
Line_11 $$ o = objectIn.readObject()-->Line_11 $$ o = objectIn.readObject()[ FD ]
Line_11 $$ o = objectIn.readObject()-->Line_11 $$ o = objectIn.readObject()[ CD ]
Line_3 $$ Object o-->Line_12 $$ if (o instanceof String) [ FD ]
Line_11 $$ o = objectIn.readObject()-->Line_12 $$ if (o instanceof String) [ FD ]
Line_12 $$ if (o instanceof String) -->Line_13 $$ user = (String) o[ CD ]
Line_4 $$ String user, password-->Line_13 $$ user = (String) o[ FD ]
Line_13 $$ user = (String) o-->Line_13 $$ user = (String) o[ FD ]
Line_12 $$ if (o instanceof String) -->Line_14 $$ objectOut.flush()[ CD ]
Line_4 $$ String user, password-->Line_16 $$ if (l.getUser().equals(user)) [ FD ]
Line_13 $$ user = (String) o-->Line_16 $$ if (l.getUser().equals(user)) [ FD ]
Line_16 $$ if (l.getUser().equals(user)) -->Line_16 $$ if (l.getUser().equals(user)) [ CD ]
Line_4 $$ String user, password-->Line_16 $$ if (l.getUser().equals(user)) [ FD ]
Line_13 $$ user = (String) o-->Line_16 $$ if (l.getUser().equals(user)) [ FD ]
Line_15 $$ for (Login l : clientLogins) -->Line_16 $$ if (l.getUser().equals(user)) [ FD ]
Line_16 $$ if (l.getUser().equals(user)) -->Line_17 $$ login = l[ CD ]
Line_6 $$ Login login = null-->Line_17 $$ login = l[ FD ]
Line_17 $$ login = l-->Line_17 $$ login = l[ FD ]
Line_15 $$ for (Login l : clientLogins) -->Line_17 $$ login = l[ FD ]
Line_12 $$ if (o instanceof String) -->Line_21 $$ if (login != null) [ CD ]
Line_6 $$ Login login = null-->Line_21 $$ if (login != null) [ FD ]
Line_17 $$ login = l-->Line_21 $$ if (login != null) [ FD ]
Line_21 $$ if (login != null) -->Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")[ CD ]
Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")[ CD ]
Line_21 $$ if (login != null) -->Line_23 $$ md.update(login.getPassword().getBytes())[ CD ]
Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_23 $$ md.update(login.getPassword().getBytes())[ FD ]
Line_6 $$ Login login = null-->Line_23 $$ md.update(login.getPassword().getBytes())[ FD ]
Line_17 $$ login = l-->Line_23 $$ md.update(login.getPassword().getBytes())[ FD ]
Line_21 $$ if (login != null) -->Line_24 $$ DESKeySpec desKeySpec = new DESKeySpec(md.digest())[ CD ]
Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_24 $$ DESKeySpec desKeySpec = new DESKeySpec(md.digest())[ FD ]
Line_21 $$ if (login != null) -->Line_25 $$ SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES")[ CD ]
Line_25 $$ SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES")-->Line_25 $$ SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES")[ CD ]
Line_21 $$ if (login != null) -->Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)[ CD ]
Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)-->Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)[ CD ]
Line_25 $$ SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES")-->Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)[ FD ]
Line_24 $$ DESKeySpec desKeySpec = new DESKeySpec(md.digest())-->Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)[ FD ]
Line_21 $$ if (login != null) -->Line_27 $$ Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding")[ CD ]
Line_27 $$ Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding")-->Line_27 $$ Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding")[ CD ]
Line_21 $$ if (login != null) -->Line_28 $$ desCipher.init(Cipher.ENCRYPT_MODE, secretKey)[ CD ]
Line_27 $$ Cipher desCipher = Cipher.getInstance("DES/ECB/PKCS5Padding")-->Line_28 $$ desCipher.init(Cipher.ENCRYPT_MODE, secretKey)[ FD ]
Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)-->Line_28 $$ desCipher.init(Cipher.ENCRYPT_MODE, secretKey)[ FD ]
Line_21 $$ if (login != null) -->Line_29 $$ byte[] dataKeySeed = new byte[32][ CD ]
Line_21 $$ if (login != null) -->Line_30 $$ Random random = new Random()[ CD ]
Line_21 $$ if (login != null) -->Line_31 $$ random.nextBytes(dataKeySeed)[ CD ]
Line_30 $$ Random random = new Random()-->Line_31 $$ random.nextBytes(dataKeySeed)[ FD ]
Line_29 $$ byte[] dataKeySeed = new byte[32]-->Line_31 $$ random.nextBytes(dataKeySeed)[ FD ]
Line_21 $$ if (login != null) -->Line_32 $$ md.reset()[ CD ]
Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_32 $$ md.reset()[ FD ]
Line_21 $$ if (login != null) -->Line_33 $$ md.update(dataKeySeed)[ CD ]
Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_33 $$ md.update(dataKeySeed)[ FD ]
Line_29 $$ byte[] dataKeySeed = new byte[32]-->Line_33 $$ md.update(dataKeySeed)[ FD ]
Line_21 $$ if (login != null) -->Line_34 $$ dataKeySeed = md.digest()[ CD ]
Line_29 $$ byte[] dataKeySeed = new byte[32]-->Line_34 $$ dataKeySeed = md.digest()[ FD ]
Line_34 $$ dataKeySeed = md.digest()-->Line_34 $$ dataKeySeed = md.digest()[ FD ]
Line_34 $$ dataKeySeed = md.digest()-->Line_34 $$ dataKeySeed = md.digest()[ CD ]
Line_22 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_34 $$ dataKeySeed = md.digest()[ FD ]
Line_21 $$ if (login != null) -->Line_35 $$ SealedObject dataKeySeedSealed[ CD ]
Line_21 $$ if (login != null) -->Line_36 $$ dataKeySeedSealed = new SealedObject(dataKeySeed, desCipher)[ CD ]
Line_35 $$ SealedObject dataKeySeedSealed-->Line_36 $$ dataKeySeedSealed = new SealedObject(dataKeySeed, desCipher)[ FD ]
Line_36 $$ dataKeySeedSealed = new SealedObject(dataKeySeed, desCipher)-->Line_36 $$ dataKeySeedSealed = new SealedObject(dataKeySeed, desCipher)[ FD ]
Line_21 $$ if (login != null) -->Line_37 $$ objectOut.writeObject(dataKeySeedSealed)[ CD ]
Line_35 $$ SealedObject dataKeySeedSealed-->Line_37 $$ objectOut.writeObject(dataKeySeedSealed)[ FD ]
Line_36 $$ dataKeySeedSealed = new SealedObject(dataKeySeed, desCipher)-->Line_37 $$ objectOut.writeObject(dataKeySeedSealed)[ FD ]
Line_21 $$ if (login != null) -->Line_38 $$ objectOut.flush()[ CD ]
Line_21 $$ if (login != null) -->Line_39 $$ desKeySpec = new DESKeySpec(dataKeySeed)[ CD ]
Line_24 $$ DESKeySpec desKeySpec = new DESKeySpec(md.digest())-->Line_39 $$ desKeySpec = new DESKeySpec(dataKeySeed)[ FD ]
Line_39 $$ desKeySpec = new DESKeySpec(dataKeySeed)-->Line_39 $$ desKeySpec = new DESKeySpec(dataKeySeed)[ FD ]
Line_21 $$ if (login != null) -->Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)[ CD ]
Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)-->Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)[ FD ]
Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)-->Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)[ FD ]
Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)-->Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)[ CD ]
Line_25 $$ SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES")-->Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)[ FD ]
Line_24 $$ DESKeySpec desKeySpec = new DESKeySpec(md.digest())-->Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)[ FD ]
Line_39 $$ desKeySpec = new DESKeySpec(dataKeySeed)-->Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)[ FD ]
Line_21 $$ if (login != null) -->Line_41 $$ inCipher = Cipher.getInstance("DES/ECB/PKCS5Padding")[ CD ]
Line_21 $$ if (login != null) -->Line_42 $$ outCipher = Cipher.getInstance("DES/ECB/PKCS5Padding")[ CD ]
Line_21 $$ if (login != null) -->Line_43 $$ inCipher.init(Cipher.DECRYPT_MODE, secretKey)[ CD ]
Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)-->Line_43 $$ inCipher.init(Cipher.DECRYPT_MODE, secretKey)[ FD ]
Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)-->Line_43 $$ inCipher.init(Cipher.DECRYPT_MODE, secretKey)[ FD ]
Line_21 $$ if (login != null) -->Line_44 $$ outCipher.init(Cipher.ENCRYPT_MODE, secretKey)[ CD ]
Line_26 $$ SecretKey secretKey = keyFactory.generateSecret(desKeySpec)-->Line_44 $$ outCipher.init(Cipher.ENCRYPT_MODE, secretKey)[ FD ]
Line_40 $$ secretKey = keyFactory.generateSecret(desKeySpec)-->Line_44 $$ outCipher.init(Cipher.ENCRYPT_MODE, secretKey)[ FD ]
Line_21 $$ if (login != null) -->Line_45 $$ SealedObject sealedObject = (SealedObject) objectIn.readObject()[ CD ]
Line_21 $$ if (login != null) -->Line_46 $$ o = sealedObject.getObject(inCipher)[ CD ]
Line_3 $$ Object o-->Line_46 $$ o = sealedObject.getObject(inCipher)[ FD ]
Line_11 $$ o = objectIn.readObject()-->Line_46 $$ o = sealedObject.getObject(inCipher)[ FD ]
Line_46 $$ o = sealedObject.getObject(inCipher)-->Line_46 $$ o = sealedObject.getObject(inCipher)[ FD ]
Line_46 $$ o = sealedObject.getObject(inCipher)-->Line_46 $$ o = sealedObject.getObject(inCipher)[ CD ]
Line_45 $$ SealedObject sealedObject = (SealedObject) objectIn.readObject()-->Line_46 $$ o = sealedObject.getObject(inCipher)[ FD ]
Line_21 $$ if (login != null) -->Line_47 $$ if (o instanceof String) [ CD ]
Line_3 $$ Object o-->Line_47 $$ if (o instanceof String) [ FD ]
Line_11 $$ o = objectIn.readObject()-->Line_47 $$ if (o instanceof String) [ FD ]
Line_46 $$ o = sealedObject.getObject(inCipher)-->Line_47 $$ if (o instanceof String) [ FD ]
Line_47 $$ if (o instanceof String) -->Line_48 $$ String response = (String) o[ CD ]
Line_47 $$ if (o instanceof String) -->Line_49 $$ if (response.equals("OK")) [ CD ]
Line_48 $$ String response = (String) o-->Line_49 $$ if (response.equals("OK")) [ FD ]
Line_49 $$ if (response.equals("OK")) -->Line_49 $$ if (response.equals("OK")) [ CD ]
Line_48 $$ String response = (String) o-->Line_49 $$ if (response.equals("OK")) [ FD ]
Line_49 $$ if (response.equals("OK")) -->Line_50 $$ SealedObject ok_sealed = new SealedObject("OK", outCipher)[ CD ]
Line_49 $$ if (response.equals("OK")) -->Line_51 $$ objectOut.writeObject(ok_sealed)[ CD ]
Line_50 $$ SealedObject ok_sealed = new SealedObject("OK", outCipher)-->Line_51 $$ objectOut.writeObject(ok_sealed)[ FD ]
Line_49 $$ if (response.equals("OK")) -->Line_52 $$ return login[ CD ]
Line_49 $$ if (response.equals("OK")) -->Line_54 $$ Debug.netMsg("Client sent false response to challenge!")[ CD ]
Line_47 $$ if (o instanceof String) -->Line_57 $$ Debug.netMsg("Client sent false object as response to challenge!")[ CD ]
Line_21 $$ if (login != null) -->Line_60 $$ Debug.netMsg("client sent unkown username: " + user)[ CD ]
Line_2 $$ public Login authenticateClient() -->Line_96 $$ return null[ CD ]
