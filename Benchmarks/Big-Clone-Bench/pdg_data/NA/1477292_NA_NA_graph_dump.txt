Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testCreate() throws Exception [ CD ]
Line_2 $$ public void testCreate() throws Exception -->Line_3 $$ File f = File.createTempFile("DiskCacheItemTest", "tmp")[ CD ]
Line_3 $$ File f = File.createTempFile("DiskCacheItemTest", "tmp")-->Line_3 $$ File f = File.createTempFile("DiskCacheItemTest", "tmp")[ CD ]
Line_2 $$ public void testCreate() throws Exception -->Line_4 $$ f.deleteOnExit()[ CD ]
Line_3 $$ File f = File.createTempFile("DiskCacheItemTest", "tmp")-->Line_4 $$ f.deleteOnExit()[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_7 $$ i.setLastModified(200005L)[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_8 $$ i.setTranslationCount(11)[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_9 $$ i.setEncoding("GB2312")[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_10 $$ i.setHeader(new ResponseHeaderImpl("Test2", new String[] [ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_11 $$ i.setHeader(new ResponseHeaderImpl("Test1", new String[] [ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_16 $$ i.setContentAsStream(input)[ FD ]
Line_14 $$ InputStream input = new ByteArrayInputStream(chineseText)-->Line_16 $$ i.setContentAsStream(input)[ FD ]
Line_14 $$ InputStream input = new ByteArrayInputStream(chineseText)-->Line_18 $$ input.close()[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_21 $$ assertEquals("GB2312", i.getEncoding())[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_22 $$ assertEquals(200005L, i.getLastModified())[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_23 $$ assertEquals(11, i.getTranslationCount())[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_24 $$ assertFalse(i.isCached())[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_25 $$ i.updateAfterAllContentUpdated(null, null)[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_27 $$ assertEquals(3, i.getHeaders().size())[ FD ]
Line_6 $$ DiskCacheItem i = new DiskCacheItem(f)-->Line_29 $$ for (ResponseHeader h : i.getHeaders()) [ FD ]
Line_28 $$ int ii = 0-->Line_30 $$ ii++[ FD ]
Line_28 $$ int ii = 0-->Line_31 $$ if (ii == 1) [ FD ]
Line_31 $$ if (ii == 1) -->Line_32 $$ assertEquals("Content-Length", h.getName())[ CD ]
Line_29 $$ for (ResponseHeader h : i.getHeaders()) -->Line_32 $$ assertEquals("Content-Length", h.getName())[ FD ]
Line_31 $$ if (ii == 1) -->Line_33 $$ assertEquals("[279]", Arrays.toString(h.getValues()))[ CD ]
Line_29 $$ for (ResponseHeader h : i.getHeaders()) -->Line_33 $$ assertEquals("[279]", Arrays.toString(h.getValues()))[ FD ]
Line_31 $$ if (ii == 1) -->Line_34 $$ if (ii == 2) [ CD ]
Line_28 $$ int ii = 0-->Line_34 $$ if (ii == 2) [ FD ]
Line_34 $$ if (ii == 2) -->Line_35 $$ assertEquals("Test1", h.getName())[ CD ]
Line_29 $$ for (ResponseHeader h : i.getHeaders()) -->Line_35 $$ assertEquals("Test1", h.getName())[ FD ]
Line_34 $$ if (ii == 2) -->Line_36 $$ assertEquals("[Value1, Value2]", Arrays.toString(h.getValues()))[ CD ]
Line_29 $$ for (ResponseHeader h : i.getHeaders()) -->Line_36 $$ assertEquals("[Value1, Value2]", Arrays.toString(h.getValues()))[ FD ]
Line_34 $$ if (ii == 2) -->Line_37 $$ if (ii == 3) [ CD ]
Line_28 $$ int ii = 0-->Line_37 $$ if (ii == 3) [ FD ]
Line_37 $$ if (ii == 3) -->Line_38 $$ assertEquals("Test2", h.getName())[ CD ]
Line_29 $$ for (ResponseHeader h : i.getHeaders()) -->Line_38 $$ assertEquals("Test2", h.getName())[ FD ]
Line_37 $$ if (ii == 3) -->Line_39 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues()))[ CD ]
Line_29 $$ for (ResponseHeader h : i.getHeaders()) -->Line_39 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues()))[ FD ]
Line_14 $$ InputStream input = new ByteArrayInputStream(chineseText)-->Line_47 $$ IOUtils.copy(input, w, "GB2312")[ FD ]
Line_45 $$ StringWriter w = new StringWriter()-->Line_47 $$ IOUtils.copy(input, w, "GB2312")[ FD ]
Line_14 $$ InputStream input = new ByteArrayInputStream(chineseText)-->Line_49 $$ IOUtils.closeQuietly(input)[ FD ]
Line_45 $$ StringWriter w = new StringWriter()-->Line_50 $$ IOUtils.closeQuietly(w)[ FD ]
Line_45 $$ StringWriter w = new StringWriter()-->Line_52 $$ assertEquals(new String(chineseText, "GB2312"), w.toString())[ FD ]
Line_14 $$ InputStream input = new ByteArrayInputStream(chineseText)-->Line_58 $$ IOUtils.copy(input, output)[ FD ]
Line_56 $$ ByteArrayOutputStream output = new ByteArrayOutputStream()-->Line_58 $$ IOUtils.copy(input, output)[ FD ]
Line_14 $$ InputStream input = new ByteArrayInputStream(chineseText)-->Line_60 $$ IOUtils.closeQuietly(input)[ FD ]
Line_56 $$ ByteArrayOutputStream output = new ByteArrayOutputStream()-->Line_61 $$ IOUtils.closeQuietly(output)[ FD ]
Line_12 $$ byte[] chineseText = new byte[] -->Line_63 $$ assertTrue(Arrays.equals(chineseText, output.toByteArray()))[ FD ]
Line_56 $$ ByteArrayOutputStream output = new ByteArrayOutputStream()-->Line_63 $$ assertTrue(Arrays.equals(chineseText, output.toByteArray()))[ FD ]
Line_3 $$ File f = File.createTempFile("DiskCacheItemTest", "tmp")-->Line_66 $$ f.delete()[ FD ]
