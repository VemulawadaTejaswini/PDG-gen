Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testWriteThreadsNoCompression() throws Exception [ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_3 $$ Bootstrap bootstrap = new Bootstrap()[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_4 $$ bootstrap.loadProfiles(CommandLineProcessorFactory.PROFILE.DB, CommandLineProcessorFactory.PROFILE.REST_CLIENT, CommandLineProcessorFactory.PROFILE.COLLECTOR)[ CD ]
Line_3 $$ Bootstrap bootstrap = new Bootstrap()-->Line_4 $$ bootstrap.loadProfiles(CommandLineProcessorFactory.PROFILE.DB, CommandLineProcessorFactory.PROFILE.REST_CLIENT, CommandLineProcessorFactory.PROFILE.COLLECTOR)[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_5 $$ final LocalLogFileWriter writer = (LocalLogFileWriter) bootstrap.getBean(LogFileWriter.class)[ CD ]
Line_3 $$ Bootstrap bootstrap = new Bootstrap()-->Line_5 $$ final LocalLogFileWriter writer = (LocalLogFileWriter) bootstrap.getBean(LogFileWriter.class)[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_6 $$ writer.init()[ CD ]
Line_5 $$ final LocalLogFileWriter writer = (LocalLogFileWriter) bootstrap.getBean(LogFileWriter.class)-->Line_6 $$ writer.init()[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_7 $$ writer.setCompressionCodec(null)[ CD ]
Line_5 $$ final LocalLogFileWriter writer = (LocalLogFileWriter) bootstrap.getBean(LogFileWriter.class)-->Line_7 $$ writer.setCompressionCodec(null)[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_8 $$ File fileInput = new File(baseDir, "testWriteOneFile/input")[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_9 $$ fileInput.mkdirs()[ CD ]
Line_8 $$ File fileInput = new File(baseDir, "testWriteOneFile/input")-->Line_9 $$ fileInput.mkdirs()[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_10 $$ File fileOutput = new File(baseDir, "testWriteOneFile/output")[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_11 $$ fileOutput.mkdirs()[ CD ]
Line_10 $$ File fileOutput = new File(baseDir, "testWriteOneFile/output")-->Line_11 $$ fileOutput.mkdirs()[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_12 $$ writer.setBaseDir(fileOutput)[ CD ]
Line_5 $$ final LocalLogFileWriter writer = (LocalLogFileWriter) bootstrap.getBean(LogFileWriter.class)-->Line_12 $$ writer.setBaseDir(fileOutput)[ FD ]
Line_10 $$ File fileOutput = new File(baseDir, "testWriteOneFile/output")-->Line_12 $$ writer.setBaseDir(fileOutput)[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_13 $$ int fileCount = 100[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_14 $$ int lineCount = 100[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_15 $$ File[] inputFiles = createInput(fileInput, fileCount, lineCount)[ CD ]
Line_15 $$ File[] inputFiles = createInput(fileInput, fileCount, lineCount)-->Line_15 $$ File[] inputFiles = createInput(fileInput, fileCount, lineCount)[ CD ]
Line_8 $$ File fileInput = new File(baseDir, "testWriteOneFile/input")-->Line_15 $$ File[] inputFiles = createInput(fileInput, fileCount, lineCount)[ FD ]
Line_13 $$ int fileCount = 100-->Line_15 $$ File[] inputFiles = createInput(fileInput, fileCount, lineCount)[ FD ]
Line_14 $$ int lineCount = 100-->Line_15 $$ File[] inputFiles = createInput(fileInput, fileCount, lineCount)[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_16 $$ ExecutorService exec = Executors.newFixedThreadPool(fileCount)[ CD ]
Line_16 $$ ExecutorService exec = Executors.newFixedThreadPool(fileCount)-->Line_16 $$ ExecutorService exec = Executors.newFixedThreadPool(fileCount)[ CD ]
Line_13 $$ int fileCount = 100-->Line_16 $$ ExecutorService exec = Executors.newFixedThreadPool(fileCount)[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_17 $$ final CountDownLatch latch = new CountDownLatch(fileCount)[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_18 $$ for (int i = 0; i < fileCount; i++) [ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_2 $$ public void testWriteThreadsNoCompression() throws Exception [ CD ]
Line_13 $$ int fileCount = 100-->Line_18 $$ for (int i = 0; i < fileCount; i++) [ FD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_18 $$ for (int i = 0; i < fileCount; i++) [ CD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_18 $$ for (int i = 0; i < fileCount; i++) [ CD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_18 $$ for (int i = 0; i < fileCount; i++) [ FD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_19 $$ final File file = inputFiles[i][ CD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_20 $$ final int count = i[ CD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_21 $$ exec.submit(new Callable<Boolean>() [ CD ]
Line_16 $$ ExecutorService exec = Executors.newFixedThreadPool(fileCount)-->Line_21 $$ exec.submit(new Callable<Boolean>() [ FD ]
Line_21 $$ exec.submit(new Callable<Boolean>() -->Line_23 $$ FileStatus.FileTrackingStatus status = FileStatus.FileTrackingStatus.newBuilder().setFileDate(System.currentTimeMillis()).setDate(System.currentTimeMillis()).setAgentName("agent1").setFileName(file.getName()).setFileSize(file.length()).setLogType("type1").build()[ CD ]
Line_23 $$ FileStatus.FileTrackingStatus status = FileStatus.FileTrackingStatus.newBuilder().setFileDate(System.currentTimeMillis()).setDate(System.currentTimeMillis()).setAgentName("agent1").setFileName(file.getName()).setFileSize(file.length()).setLogType("type1").build()-->Line_23 $$ FileStatus.FileTrackingStatus status = FileStatus.FileTrackingStatus.newBuilder().setFileDate(System.currentTimeMillis()).setDate(System.currentTimeMillis()).setAgentName("agent1").setFileName(file.getName()).setFileSize(file.length()).setLogType("type1").build()[ CD ]
Line_19 $$ final File file = inputFiles[i]-->Line_23 $$ FileStatus.FileTrackingStatus status = FileStatus.FileTrackingStatus.newBuilder().setFileDate(System.currentTimeMillis()).setDate(System.currentTimeMillis()).setAgentName("agent1").setFileName(file.getName()).setFileSize(file.length()).setLogType("type1").build()[ FD ]
Line_19 $$ final File file = inputFiles[i]-->Line_23 $$ FileStatus.FileTrackingStatus status = FileStatus.FileTrackingStatus.newBuilder().setFileDate(System.currentTimeMillis()).setDate(System.currentTimeMillis()).setAgentName("agent1").setFileName(file.getName()).setFileSize(file.length()).setLogType("type1").build()[ FD ]
Line_21 $$ exec.submit(new Callable<Boolean>() -->Line_24 $$ BufferedReader reader = new BufferedReader(new FileReader(file))[ CD ]
Line_27 $$ while ((line = reader.readLine()) != null) -->Line_27 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_26 $$ String line = null-->Line_27 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_27 $$ while ((line = reader.readLine()) != null) -->Line_27 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_24 $$ BufferedReader reader = new BufferedReader(new FileReader(file))-->Line_27 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_27 $$ while ((line = reader.readLine()) != null) -->Line_28 $$ writer.write(status, new ByteArrayInputStream((line + "\n").getBytes()))[ CD ]
Line_5 $$ final LocalLogFileWriter writer = (LocalLogFileWriter) bootstrap.getBean(LogFileWriter.class)-->Line_28 $$ writer.write(status, new ByteArrayInputStream((line + "\n").getBytes()))[ FD ]
Line_23 $$ FileStatus.FileTrackingStatus status = FileStatus.FileTrackingStatus.newBuilder().setFileDate(System.currentTimeMillis()).setDate(System.currentTimeMillis()).setAgentName("agent1").setFileName(file.getName()).setFileSize(file.length()).setLogType("type1").build()-->Line_28 $$ writer.write(status, new ByteArrayInputStream((line + "\n").getBytes()))[ FD ]
Line_24 $$ BufferedReader reader = new BufferedReader(new FileReader(file))-->Line_31 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_21 $$ exec.submit(new Callable<Boolean>() -->Line_33 $$ LOG.info("Thread[" + count + "] completed ")[ CD ]
Line_21 $$ exec.submit(new Callable<Boolean>() -->Line_34 $$ latch.countDown()[ CD ]
Line_17 $$ final CountDownLatch latch = new CountDownLatch(fileCount)-->Line_34 $$ latch.countDown()[ FD ]
Line_21 $$ exec.submit(new Callable<Boolean>() -->Line_35 $$ return true[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_39 $$ latch.await()[ CD ]
Line_17 $$ final CountDownLatch latch = new CountDownLatch(fileCount)-->Line_39 $$ latch.await()[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_40 $$ exec.shutdown()[ CD ]
Line_16 $$ ExecutorService exec = Executors.newFixedThreadPool(fileCount)-->Line_40 $$ exec.shutdown()[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_41 $$ LOG.info("Shutdown thread service")[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_42 $$ writer.close()[ CD ]
Line_5 $$ final LocalLogFileWriter writer = (LocalLogFileWriter) bootstrap.getBean(LogFileWriter.class)-->Line_42 $$ writer.close()[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_43 $$ File[] outputFiles = fileOutput.listFiles()[ CD ]
Line_10 $$ File fileOutput = new File(baseDir, "testWriteOneFile/output")-->Line_43 $$ File[] outputFiles = fileOutput.listFiles()[ FD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_44 $$ assertNotNull(outputFiles)[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_46 $$ testCombinedInput.createNewFile()[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_57 $$ testCombinedOutput.createNewFile()[ CD ]
Line_2 $$ public void testWriteThreadsNoCompression() throws Exception -->Line_68 $$ FileUtils.contentEquals(testCombinedInput, testCombinedOutput)[ CD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_18 $$ for (int i = 0; i < fileCount; i++) [ FD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_18 $$ for (int i = 0; i < fileCount; i++) [ FD ]
Line_18 $$ for (int i = 0; i < fileCount; i++) -->Line_18 $$ for (int i = 0; i < fileCount; i++) [ FD ]
