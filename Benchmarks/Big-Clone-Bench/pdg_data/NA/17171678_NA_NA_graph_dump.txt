Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void deleteMessageBuffer(String messageBufferName) throws AppFabricException [ CD ]
Line_2 $$ public void deleteMessageBuffer(String messageBufferName) throws AppFabricException -->Line_3 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType())[ CD ]
Line_2 $$ public void deleteMessageBuffer(String messageBufferName) throws AppFabricException -->Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()[ CD ]
Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()-->Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()[ CD ]
Line_3 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType())-->Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()[ FD ]
Line_2 $$ public void deleteMessageBuffer(String messageBufferName) throws AppFabricException -->Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)[ CD ]
Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)-->Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)[ CD ]
Line_3 $$ MessageBufferUtil msgBufferUtilObj = new MessageBufferUtil(solutionName, TokenConstants.getSimpleAuthAuthenticationType())-->Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)[ FD ]
Line_2 $$ public void deleteMessageBuffer(String messageBufferName) throws AppFabricException -->Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)[ FD ]
Line_2 $$ public void deleteMessageBuffer(String messageBufferName) throws AppFabricException -->Line_6 $$ String authorizationToken = ""[ CD ]
Line_6 $$ String authorizationToken = ""-->Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)-->Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)-->Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ CD ]
Line_8 $$ ACSTokenProvider tp = new ACSTokenProvider(httpWebProxyServer_, httpWebProxyPort_, this.credentials)-->Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_4 $$ String requestUri = msgBufferUtilObj.getRequestUri()-->Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)-->Line_9 $$ authorizationToken = tp.getACSToken(requestUri, messageBufferUri)[ FD ]
Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)-->Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")-->Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")-->Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ CD ]
Line_5 $$ String messageBufferUri = msgBufferUtilObj.getCreateMessageBufferUri(messageBufferName)-->Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")-->Line_14 $$ messageBufferUri = messageBufferUri.replaceAll("http", "https")[ FD ]
Line_17 $$ if (httpWebProxy_ != null)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ CD ]
Line_16 $$ HttpURLConnection connection-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ FD ]
Line_15 $$ URL urlConn = new URL(messageBufferUri)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)[ FD ]
Line_17 $$ if (httpWebProxy_ != null)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ CD ]
Line_16 $$ HttpURLConnection connection-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_15 $$ URL urlConn = new URL(messageBufferUri)-->Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_18 $$ connection.setRequestMethod("DELETE")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_18 $$ connection.setRequestMethod("DELETE")[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_18 $$ connection.setRequestMethod("DELETE")[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_19 $$ connection.setDoInput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_19 $$ connection.setDoInput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_19 $$ connection.setDoInput(true)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_20 $$ connection.setDoOutput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_20 $$ connection.setDoOutput(true)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_20 $$ connection.setDoOutput(true)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_21 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_ATOM_XML())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_21 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_ATOM_XML())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_21 $$ connection.setRequestProperty("Content-type", MessageBufferConstants.getCONTENT_TYPE_PROPERTY_FOR_ATOM_XML())[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_23 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_23 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_23 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_22 $$ String authStr = TokenConstants.getWrapAuthenticationType() + " " + TokenConstants.getWrapAuthorizationHeaderKey() + "=\"" + authorizationToken + "\""-->Line_23 $$ connection.setRequestProperty("Authorization", authStr)[ FD ]
Line_24 $$ if (LoggerUtil.getIsLoggingOn())-->Line_24 $$ if (LoggerUtil.getIsLoggingOn())[ CD ]
Line_24 $$ if (LoggerUtil.getIsLoggingOn())-->Line_24 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.DeleteMessageBuffer_REQUEST)[ CD ]
Line_16 $$ HttpURLConnection connection-->Line_24 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.DeleteMessageBuffer_REQUEST)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_24 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.DeleteMessageBuffer_REQUEST)[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_24 $$ SDKLoggerHelper.logRequest(connection, SDKLoggerHelper.RecordType.DeleteMessageBuffer_REQUEST)[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) [ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) [ FD ]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) -->Line_27 $$ InputStream is = connection.getInputStream()[ CD ]
Line_27 $$ InputStream is = connection.getInputStream()-->Line_27 $$ InputStream is = connection.getInputStream()[ CD ]
Line_16 $$ HttpURLConnection connection-->Line_27 $$ InputStream is = connection.getInputStream()[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_27 $$ InputStream is = connection.getInputStream()[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_27 $$ InputStream is = connection.getInputStream()[ FD ]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) -->Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) -->Line_29 $$ String line[ CD ]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) -->Line_30 $$ StringBuffer response = new StringBuffer()[ CD ]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) -->Line_31 $$ while ((line = rd.readLine()) != null) [ CD ]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) -->Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) [ CD ]
Line_31 $$ while ((line = rd.readLine()) != null) -->Line_31 $$ while ((line = rd.readLine()) != null) [ FD ]
Line_29 $$ String line-->Line_31 $$ while ((line = rd.readLine()) != null) [ FD ]
Line_31 $$ while ((line = rd.readLine()) != null) -->Line_31 $$ while ((line = rd.readLine()) != null) [ CD ]
Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is))-->Line_31 $$ while ((line = rd.readLine()) != null) [ FD ]
Line_31 $$ while ((line = rd.readLine()) != null) -->Line_32 $$ response.append(line)[ CD ]
Line_30 $$ StringBuffer response = new StringBuffer()-->Line_32 $$ response.append(line)[ FD ]
Line_31 $$ while ((line = rd.readLine()) != null) -->Line_32 $$ response.append(line)[ FD ]
Line_29 $$ String line-->Line_32 $$ response.append(line)[ FD ]
Line_31 $$ while ((line = rd.readLine()) != null) -->Line_33 $$ response.append('\r')[ CD ]
Line_30 $$ StringBuffer response = new StringBuffer()-->Line_33 $$ response.append('\r')[ FD ]
Line_26 $$ if ((connection.getResponseCode() == MessageBufferConstants.HTTP_STATUS_CODE_OK)) -->Line_35 $$ rd.close()[ CD ]
Line_28 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(is))-->Line_35 $$ rd.close()[ FD ]
Line_16 $$ HttpURLConnection connection-->Line_37 $$ throw new AppFabricException("MessageBuffer could not be deleted.Error...Response code:  " + connection.getResponseCode())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection(httpWebProxy_)-->Line_37 $$ throw new AppFabricException("MessageBuffer could not be deleted.Error...Response code:  " + connection.getResponseCode())[ FD ]
Line_17 $$ connection = (HttpURLConnection) urlConn.openConnection()-->Line_37 $$ throw new AppFabricException("MessageBuffer could not be deleted.Error...Response code:  " + connection.getResponseCode())[ FD ]
Line_39 $$ if (LoggerUtil.getIsLoggingOn())-->Line_39 $$ if (LoggerUtil.getIsLoggingOn())[ CD ]
Line_39 $$ if (LoggerUtil.getIsLoggingOn())-->Line_39 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseCode, "UTF-8"), SDKLoggerHelper.RecordType.DeleteMessageBuffer_RESPONSE)[ CD ]
Line_25 $$ String responseCode = "<responseCode>" + connection.getResponseCode() + "</responseCode>"-->Line_39 $$ SDKLoggerHelper.logMessage(URLEncoder.encode(responseCode, "UTF-8"), SDKLoggerHelper.RecordType.DeleteMessageBuffer_RESPONSE)[ FD ]
Line_31 $$ while ((line = rd.readLine()) != null) -->Line_32 $$ response.append(line)[ FD ]
