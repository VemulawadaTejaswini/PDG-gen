Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected File doInBackground(String... params) [ CD ]
Line_6 $$ if (!urlString.endsWith("/")) -->Line_6 $$ if (!urlString.endsWith("/")) [ CD ]
Line_6 $$ if (!urlString.endsWith("/")) -->Line_6 $$ if (!urlString.endsWith("/")) [ CD ]
Line_4 $$ String urlString = params[0]-->Line_6 $$ if (!urlString.endsWith("/")) [ FD ]
Line_6 $$ if (!urlString.endsWith("/")) -->Line_7 $$ urlString += "/"[ CD ]
Line_4 $$ String urlString = params[0]-->Line_7 $$ urlString += "/"[ FD ]
Line_7 $$ urlString += "/"-->Line_7 $$ urlString += "/"[ FD ]
Line_4 $$ String urlString = params[0]-->Line_9 $$ urlString += "apk/" + fileName[ FD ]
Line_7 $$ urlString += "/"-->Line_9 $$ urlString += "apk/" + fileName[ FD ]
Line_9 $$ urlString += "apk/" + fileName-->Line_9 $$ urlString += "apk/" + fileName[ FD ]
Line_5 $$ final String fileName = params[1]-->Line_9 $$ urlString += "apk/" + fileName[ FD ]
Line_11 $$ URLConnection connection = url.openConnection()-->Line_11 $$ URLConnection connection = url.openConnection()[ CD ]
Line_10 $$ URL url = new URL(urlString)-->Line_11 $$ URLConnection connection = url.openConnection()[ FD ]
Line_11 $$ URLConnection connection = url.openConnection()-->Line_12 $$ connection.connect()[ FD ]
Line_13 $$ File dir = new File(Environment.getExternalStorageDirectory(), "imogenemarket")-->Line_14 $$ dir.mkdirs()[ FD ]
Line_15 $$ File file = new File(dir, fileName)-->Line_16 $$ if (file.exists()) [ FD ]
Line_16 $$ if (file.exists()) -->Line_16 $$ if (file.exists()) [ CD ]
Line_15 $$ File file = new File(dir, fileName)-->Line_16 $$ if (file.exists()) [ FD ]
Line_16 $$ if (file.exists()) -->Line_17 $$ file.delete()[ CD ]
Line_15 $$ File file = new File(dir, fileName)-->Line_17 $$ file.delete()[ FD ]
Line_15 $$ File file = new File(dir, fileName)-->Line_19 $$ file.createNewFile()[ FD ]
Line_10 $$ URL url = new URL(urlString)-->Line_20 $$ InputStream input = new BufferedInputStream(url.openStream())[ FD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_25 $$ while ((count = input.read(data)) != -1) [ FD ]
Line_23 $$ int count-->Line_25 $$ while ((count = input.read(data)) != -1) [ FD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_25 $$ while ((count = input.read(data)) != -1) [ CD ]
Line_20 $$ InputStream input = new BufferedInputStream(url.openStream())-->Line_25 $$ while ((count = input.read(data)) != -1) [ FD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_26 $$ if (isCancelled()) [ CD ]
Line_26 $$ if (isCancelled()) -->Line_26 $$ if (isCancelled()) [ CD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_29 $$ bigCount += count[ CD ]
Line_29 $$ bigCount += count-->Line_29 $$ bigCount += count[ FD ]
Line_24 $$ int bigCount = 0-->Line_29 $$ bigCount += count[ FD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_29 $$ bigCount += count[ FD ]
Line_23 $$ int count-->Line_29 $$ bigCount += count[ FD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_30 $$ if (!mLocker.isLocked()) [ CD ]
Line_30 $$ if (!mLocker.isLocked()) -->Line_30 $$ if (!mLocker.isLocked()) [ CD ]
Line_30 $$ if (!mLocker.isLocked()) -->Line_30 $$ if (!mLocker.isLocked()) [ CD ]
Line_30 $$ if (!mLocker.isLocked()) -->Line_31 $$ publishProgress(bigCount)[ CD ]
Line_29 $$ bigCount += count-->Line_31 $$ publishProgress(bigCount)[ FD ]
Line_24 $$ int bigCount = 0-->Line_31 $$ publishProgress(bigCount)[ FD ]
Line_30 $$ if (!mLocker.isLocked()) -->Line_32 $$ bigCount = 0[ CD ]
Line_29 $$ bigCount += count-->Line_32 $$ bigCount = 0[ FD ]
Line_32 $$ bigCount = 0-->Line_32 $$ bigCount = 0[ FD ]
Line_24 $$ int bigCount = 0-->Line_32 $$ bigCount = 0[ FD ]
Line_30 $$ if (!mLocker.isLocked()) -->Line_33 $$ mLocker.lock()[ CD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_35 $$ output.write(data, 0, count)[ CD ]
Line_21 $$ OutputStream output = new FileOutputStream(file)-->Line_35 $$ output.write(data, 0, count)[ FD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_35 $$ output.write(data, 0, count)[ FD ]
Line_23 $$ int count-->Line_35 $$ output.write(data, 0, count)[ FD ]
Line_29 $$ bigCount += count-->Line_38 $$ publishProgress(bigCount)[ FD ]
Line_32 $$ bigCount = 0-->Line_38 $$ publishProgress(bigCount)[ FD ]
Line_24 $$ int bigCount = 0-->Line_38 $$ publishProgress(bigCount)[ FD ]
Line_21 $$ OutputStream output = new FileOutputStream(file)-->Line_39 $$ output.flush()[ FD ]
Line_21 $$ OutputStream output = new FileOutputStream(file)-->Line_40 $$ output.close()[ FD ]
Line_20 $$ InputStream input = new BufferedInputStream(url.openStream())-->Line_41 $$ input.close()[ FD ]
Line_42 $$ if (isCancelled()) -->Line_42 $$ if (isCancelled()) [ CD ]
Line_42 $$ if (isCancelled()) -->Line_43 $$ file.delete()[ CD ]
Line_15 $$ File file = new File(dir, fileName)-->Line_43 $$ file.delete()[ FD ]
Line_42 $$ if (isCancelled()) -->Line_44 $$ return null[ CD ]
Line_2 $$ protected File doInBackground(String... params) -->Line_50 $$ return null[ CD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_29 $$ bigCount += count[ FD ]
Line_29 $$ bigCount += count-->Line_31 $$ publishProgress(bigCount)[ FD ]
Line_32 $$ bigCount = 0-->Line_31 $$ publishProgress(bigCount)[ FD ]
Line_25 $$ while ((count = input.read(data)) != -1) -->Line_35 $$ output.write(data, 0, count)[ FD ]
