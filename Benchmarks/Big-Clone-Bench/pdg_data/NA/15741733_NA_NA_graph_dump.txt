Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception [ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_4 $$ String sep = System.getProperty("file.separator")[ CD ]
Line_4 $$ String sep = System.getProperty("file.separator")-->Line_4 $$ String sep = System.getProperty("file.separator")[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_5 $$ String folders = to.getPath()[ CD ]
Line_5 $$ String folders = to.getPath()-->Line_5 $$ String folders = to.getPath()[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_5 $$ String folders = to.getPath()[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_6 $$ String path = ""[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception [ CD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ CD ]
Line_5 $$ String folders = to.getPath()-->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ CD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ CD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_8 $$ path += folders.charAt(i)[ CD ]
Line_8 $$ path += folders.charAt(i)-->Line_8 $$ path += folders.charAt(i)[ FD ]
Line_6 $$ String path = ""-->Line_8 $$ path += folders.charAt(i)[ FD ]
Line_8 $$ path += folders.charAt(i)-->Line_8 $$ path += folders.charAt(i)[ CD ]
Line_5 $$ String folders = to.getPath()-->Line_8 $$ path += folders.charAt(i)[ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_8 $$ path += folders.charAt(i)[ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_9 $$ if (path.endsWith(sep)) [ CD ]
Line_8 $$ path += folders.charAt(i)-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_6 $$ String path = ""-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_4 $$ String sep = System.getProperty("file.separator")-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_9 $$ if (path.endsWith(sep)) -->Line_9 $$ if (path.endsWith(sep)) [ CD ]
Line_8 $$ path += folders.charAt(i)-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_6 $$ String path = ""-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_4 $$ String sep = System.getProperty("file.separator")-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_9 $$ if (path.endsWith(sep)) -->Line_10 $$ File f = new File(path)[ CD ]
Line_9 $$ if (path.endsWith(sep)) -->Line_11 $$ if (!f.exists())[ CD ]
Line_11 $$ if (!f.exists())-->Line_11 $$ if (!f.exists())[ CD ]
Line_11 $$ if (!f.exists())-->Line_11 $$ if (!f.exists())[ CD ]
Line_10 $$ File f = new File(path)-->Line_11 $$ if (!f.exists())[ FD ]
Line_11 $$ if (!f.exists())-->Line_11 $$ f.mkdir()[ CD ]
Line_10 $$ File f = new File(path)-->Line_11 $$ f.mkdir()[ FD ]
Line_9 $$ if (path.endsWith(sep)) -->Line_12 $$ if (!f.isDirectory()) [ CD ]
Line_12 $$ if (!f.isDirectory()) -->Line_12 $$ if (!f.isDirectory()) [ CD ]
Line_12 $$ if (!f.isDirectory()) -->Line_12 $$ if (!f.isDirectory()) [ CD ]
Line_10 $$ File f = new File(path)-->Line_12 $$ if (!f.isDirectory()) [ FD ]
Line_12 $$ if (!f.isDirectory()) -->Line_13 $$ Out.error(URLDownloader.class, path + " is not a directory!")[ CD ]
Line_12 $$ if (!f.isDirectory()) -->Line_14 $$ return[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_19 $$ Out.info(URLDownloader.class, "Downloading " + url.toExternalForm())[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_19 $$ Out.info(URLDownloader.class, "Downloading " + url.toExternalForm())[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_20 $$ URLConnection uc = url.openConnection()[ CD ]
Line_20 $$ URLConnection uc = url.openConnection()-->Line_20 $$ URLConnection uc = url.openConnection()[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_20 $$ URLConnection uc = url.openConnection()[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_21 $$ DataInputStream is = new DataInputStream(new BufferedInputStream(uc.getInputStream()))[ CD ]
Line_20 $$ URLConnection uc = url.openConnection()-->Line_21 $$ DataInputStream is = new DataInputStream(new BufferedInputStream(uc.getInputStream()))[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_22 $$ FileOutputStream os = new FileOutputStream(to)[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_23 $$ byte[] b = new byte[1024][ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_24 $$ int fileLength = uc.getHeaderFieldInt("Content-Length", 0) / b.length[ CD ]
Line_20 $$ URLConnection uc = url.openConnection()-->Line_24 $$ int fileLength = uc.getHeaderFieldInt("Content-Length", 0) / b.length[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_25 $$ Task task = null[ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_26 $$ if (fileLength > 0)[ CD ]
Line_24 $$ int fileLength = uc.getHeaderFieldInt("Content-Length", 0) / b.length-->Line_26 $$ if (fileLength > 0)[ FD ]
Line_26 $$ if (fileLength > 0)-->Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")[ CD ]
Line_25 $$ Task task = null-->Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")[ FD ]
Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")-->Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")[ FD ]
Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")-->Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")[ CD ]
Line_24 $$ int fileLength = uc.getHeaderFieldInt("Content-Length", 0) / b.length-->Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_27 $$ do [ CD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception [ CD ]
Line_27 $$ do -->Line_28 $$ int c = is.read(b)[ CD ]
Line_28 $$ int c = is.read(b)-->Line_28 $$ int c = is.read(b)[ CD ]
Line_21 $$ DataInputStream is = new DataInputStream(new BufferedInputStream(uc.getInputStream()))-->Line_28 $$ int c = is.read(b)[ FD ]
Line_23 $$ byte[] b = new byte[1024]-->Line_28 $$ int c = is.read(b)[ FD ]
Line_27 $$ do -->Line_29 $$ if (c == -1)[ CD ]
Line_28 $$ int c = is.read(b)-->Line_29 $$ if (c == -1)[ FD ]
Line_27 $$ do -->Line_30 $$ os.write(b, 0, c)[ CD ]
Line_22 $$ FileOutputStream os = new FileOutputStream(to)-->Line_30 $$ os.write(b, 0, c)[ FD ]
Line_23 $$ byte[] b = new byte[1024]-->Line_30 $$ os.write(b, 0, c)[ FD ]
Line_28 $$ int c = is.read(b)-->Line_30 $$ os.write(b, 0, c)[ FD ]
Line_27 $$ do -->Line_31 $$ if (task != null)[ CD ]
Line_25 $$ Task task = null-->Line_31 $$ if (task != null)[ FD ]
Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")-->Line_31 $$ if (task != null)[ FD ]
Line_31 $$ if (task != null)-->Line_31 $$ task.advanceProgress()[ CD ]
Line_25 $$ Task task = null-->Line_31 $$ task.advanceProgress()[ FD ]
Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")-->Line_31 $$ task.advanceProgress()[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_33 $$ if (task != null)[ CD ]
Line_25 $$ Task task = null-->Line_33 $$ if (task != null)[ FD ]
Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")-->Line_33 $$ if (task != null)[ FD ]
Line_33 $$ if (task != null)-->Line_33 $$ task.complete()[ CD ]
Line_25 $$ Task task = null-->Line_33 $$ task.complete()[ FD ]
Line_26 $$ task = TaskManager.createTask(url.toExternalForm(), fileLength, "kB")-->Line_33 $$ task.complete()[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_34 $$ os.close()[ CD ]
Line_22 $$ FileOutputStream os = new FileOutputStream(to)-->Line_34 $$ os.close()[ FD ]
Line_2 $$ public static void downloadURLNow(URL url, File to, SHA1Sum sha1, boolean force) throws Exception -->Line_35 $$ is.close()[ CD ]
Line_21 $$ DataInputStream is = new DataInputStream(new BufferedInputStream(uc.getInputStream()))-->Line_35 $$ is.close()[ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_7 $$ for (int i = 0; i < folders.length(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < folders.length(); i++) -->Line_8 $$ path += folders.charAt(i)[ FD ]
Line_8 $$ path += folders.charAt(i)-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_8 $$ path += folders.charAt(i)-->Line_9 $$ if (path.endsWith(sep)) [ FD ]
Line_10 $$ File f = new File(path)-->Line_11 $$ if (!f.exists())[ FD ]
Line_10 $$ File f = new File(path)-->Line_11 $$ f.mkdir()[ FD ]
Line_10 $$ File f = new File(path)-->Line_12 $$ if (!f.isDirectory()) [ FD ]
Line_28 $$ int c = is.read(b)-->Line_29 $$ if (c == -1)[ FD ]
Line_28 $$ int c = is.read(b)-->Line_30 $$ os.write(b, 0, c)[ FD ]
