Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException [ CD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) [ CD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) [ CD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_4 $$ String mimeType = vds.DSMIME[ CD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_5 $$ if (MimeTypeHelper.isText(mimeType) || MimeTypeHelper.isXml(mimeType)) [ CD ]
Line_4 $$ String mimeType = vds.DSMIME-->Line_5 $$ if (MimeTypeHelper.isText(mimeType) || MimeTypeHelper.isXml(mimeType)) [ FD ]
Line_4 $$ String mimeType = vds.DSMIME-->Line_5 $$ if (MimeTypeHelper.isText(mimeType) || MimeTypeHelper.isXml(mimeType)) [ FD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_7 $$ entry.setContent(IOUtils.toString(vds.getContentStream(), m_encoding), mimeType)[ FD ]
Line_4 $$ String mimeType = vds.DSMIME-->Line_7 $$ entry.setContent(IOUtils.toString(vds.getContentStream(), m_encoding), mimeType)[ FD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_7 $$ entry.setContent(IOUtils.toString(vds.getContentStream(), m_encoding), mimeType)[ FD ]
Line_5 $$ if (MimeTypeHelper.isText(mimeType) || MimeTypeHelper.isXml(mimeType)) -->Line_12 $$ entry.setContent(vds.getContentStream(), mimeType)[ CD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_12 $$ entry.setContent(vds.getContentStream(), mimeType)[ FD ]
Line_4 $$ String mimeType = vds.DSMIME-->Line_12 $$ entry.setContent(vds.getContentStream(), mimeType)[ FD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_12 $$ entry.setContent(vds.getContentStream(), mimeType)[ FD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_15 $$ String dsLocation[ CD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_16 $$ IRI iri[ CD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_17 $$ if (m_format.equals(ATOM_ZIP1_1) && m_transContext != DOTranslationUtility.AS_IS) [ CD ]
Line_17 $$ if (m_format.equals(ATOM_ZIP1_1) && m_transContext != DOTranslationUtility.AS_IS) -->Line_18 $$ dsLocation = vds.DSVersionID + "." + MimeTypeUtils.fileExtensionForMIMEType(vds.DSMIME)[ CD ]
Line_15 $$ String dsLocation-->Line_18 $$ dsLocation = vds.DSVersionID + "." + MimeTypeUtils.fileExtensionForMIMEType(vds.DSMIME)[ FD ]
Line_18 $$ dsLocation = vds.DSVersionID + "." + MimeTypeUtils.fileExtensionForMIMEType(vds.DSMIME)-->Line_18 $$ dsLocation = vds.DSVersionID + "." + MimeTypeUtils.fileExtensionForMIMEType(vds.DSMIME)[ FD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_21 $$ IOUtils.copy(vds.getContentStream(), m_zout)[ FD ]
Line_17 $$ if (m_format.equals(ATOM_ZIP1_1) && m_transContext != DOTranslationUtility.AS_IS) -->Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)[ CD ]
Line_15 $$ String dsLocation-->Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)[ FD ]
Line_18 $$ dsLocation = vds.DSVersionID + "." + MimeTypeUtils.fileExtensionForMIMEType(vds.DSMIME)-->Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)[ FD ]
Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)-->Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)[ FD ]
Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)-->Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)[ CD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_27 $$ dsLocation = StreamUtility.enc(DOTranslationUtility.normalizeDSLocationURLs(m_obj.getPid(), vds, m_transContext).DSLocation)[ FD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_29 $$ iri = new IRI(dsLocation)[ CD ]
Line_16 $$ IRI iri-->Line_29 $$ iri = new IRI(dsLocation)[ FD ]
Line_29 $$ iri = new IRI(dsLocation)-->Line_29 $$ iri = new IRI(dsLocation)[ FD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_30 $$ entry.setSummary(vds.DSVersionID)[ CD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_30 $$ entry.setSummary(vds.DSVersionID)[ FD ]
Line_3 $$ if (m_transContext == DOTranslationUtility.SERIALIZE_EXPORT_ARCHIVE && !m_format.equals(ATOM_ZIP1_1)) -->Line_31 $$ entry.setContent(iri, vds.DSMIME)[ CD ]
Line_2 $$ private void setManagedContent(Entry entry, Datastream vds) throws StreamIOException -->Line_31 $$ entry.setContent(iri, vds.DSMIME)[ FD ]
Line_16 $$ IRI iri-->Line_31 $$ entry.setContent(iri, vds.DSMIME)[ FD ]
Line_29 $$ iri = new IRI(dsLocation)-->Line_31 $$ entry.setContent(iri, vds.DSMIME)[ FD ]
