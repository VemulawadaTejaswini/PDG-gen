Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) [ CD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_3 $$ boolean success = false[ CD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_4 $$ String[] files[ CD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_5 $$ files = dir.list()[ CD ]
Line_4 $$ String[] files-->Line_5 $$ files = dir.list()[ FD ]
Line_5 $$ files = dir.list()-->Line_5 $$ files = dir.list()[ FD ]
Line_5 $$ files = dir.list()-->Line_5 $$ files = dir.list()[ CD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_5 $$ files = dir.list()[ FD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_6 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)[ CD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_7 $$ if (!checkdir.isDirectory()) [ CD ]
Line_7 $$ if (!checkdir.isDirectory()) -->Line_7 $$ if (!checkdir.isDirectory()) [ CD ]
Line_7 $$ if (!checkdir.isDirectory()) -->Line_7 $$ if (!checkdir.isDirectory()) [ CD ]
Line_6 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)-->Line_7 $$ if (!checkdir.isDirectory()) [ FD ]
Line_7 $$ if (!checkdir.isDirectory()) -->Line_8 $$ checkdir.mkdir()[ CD ]
Line_6 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)-->Line_8 $$ checkdir.mkdir()[ FD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_11 $$ Date date = new Date()[ CD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_12 $$ long msec = date.getTime()[ CD ]
Line_12 $$ long msec = date.getTime()-->Line_12 $$ long msec = date.getTime()[ CD ]
Line_11 $$ Date date = new Date()-->Line_12 $$ long msec = date.getTime()[ FD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_13 $$ checkdir.setLastModified(msec)[ CD ]
Line_6 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)-->Line_13 $$ checkdir.setLastModified(msec)[ FD ]
Line_12 $$ long msec = date.getTime()-->Line_13 $$ checkdir.setLastModified(msec)[ FD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_15 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_15 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_15 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_16 $$ File f = new File(dir, files[i])[ CD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_17 $$ File g = new File(files[i])[ CD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_18 $$ if (f.isDirectory()) [ CD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_18 $$ if (f.isDirectory()) [ FD ]
Line_18 $$ if (f.isDirectory()) -->Line_18 $$ if (f.isDirectory()) [ CD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_18 $$ if (f.isDirectory()) [ FD ]
Line_18 $$ if (f.isDirectory()) -->Line_19 $$ if (f.getName().endsWith("saving")) [ CD ]
Line_19 $$ if (f.getName().endsWith("saving")) -->Line_19 $$ if (f.getName().endsWith("saving")) [ CD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_19 $$ if (f.getName().endsWith("saving")) [ FD ]
Line_19 $$ if (f.getName().endsWith("saving")) -->Line_21 $$ if (f.canRead()) [ CD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.canRead()) [ FD ]
Line_21 $$ if (f.canRead()) -->Line_21 $$ if (f.canRead()) [ CD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.canRead()) [ FD ]
Line_21 $$ if (f.canRead()) -->Line_22 $$ String destinationFile = checkdir + System.getProperty("file.separator") + g[ CD ]
Line_21 $$ if (f.canRead()) -->Line_23 $$ String sourceFile = sourcedir + System.getProperty("file.separator") + g[ CD ]
Line_21 $$ if (f.canRead()) -->Line_24 $$ FileInputStream infile = new FileInputStream(sourceFile)[ CD ]
Line_21 $$ if (f.canRead()) -->Line_25 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)[ CD ]
Line_21 $$ if (f.canRead()) -->Line_26 $$ int c[ CD ]
Line_21 $$ if (f.canRead()) -->Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)[ CD ]
Line_21 $$ if (f.canRead()) -->Line_21 $$ if (f.canRead()) [ CD ]
Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_26 $$ int c-->Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)[ CD ]
Line_24 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_27 $$ outfile.write(c)[ CD ]
Line_25 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_27 $$ outfile.write(c)[ FD ]
Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_27 $$ outfile.write(c)[ FD ]
Line_26 $$ int c-->Line_27 $$ outfile.write(c)[ FD ]
Line_21 $$ if (f.canRead()) -->Line_28 $$ infile.close()[ CD ]
Line_24 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_28 $$ infile.close()[ FD ]
Line_21 $$ if (f.canRead()) -->Line_29 $$ outfile.close()[ CD ]
Line_25 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_29 $$ outfile.close()[ FD ]
Line_21 $$ if (f.canRead()) -->Line_31 $$ System.out.println(f.getName() + " is LOCKED!")[ CD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_31 $$ System.out.println(f.getName() + " is LOCKED!")[ FD ]
Line_21 $$ if (f.canRead()) -->Line_32 $$ while (!f.canRead()) [ CD ]
Line_21 $$ if (f.canRead()) -->Line_21 $$ if (f.canRead()) [ CD ]
Line_32 $$ while (!f.canRead()) -->Line_32 $$ while (!f.canRead()) [ CD ]
Line_32 $$ while (!f.canRead()) -->Line_32 $$ while (!f.canRead()) [ CD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_32 $$ while (!f.canRead()) [ FD ]
Line_21 $$ if (f.canRead()) -->Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)[ CD ]
Line_21 $$ if (f.canRead()) -->Line_21 $$ if (f.canRead()) [ CD ]
Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_26 $$ int c-->Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)[ CD ]
Line_24 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_39 $$ outfile.write(c)[ CD ]
Line_25 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_39 $$ outfile.write(c)[ FD ]
Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_39 $$ outfile.write(c)[ FD ]
Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_39 $$ outfile.write(c)[ FD ]
Line_26 $$ int c-->Line_39 $$ outfile.write(c)[ FD ]
Line_21 $$ if (f.canRead()) -->Line_40 $$ infile.close()[ CD ]
Line_24 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_40 $$ infile.close()[ FD ]
Line_21 $$ if (f.canRead()) -->Line_41 $$ outfile.close()[ CD ]
Line_25 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_41 $$ outfile.close()[ FD ]
Line_3 $$ boolean success = false-->Line_45 $$ success = true[ FD ]
Line_45 $$ success = true-->Line_45 $$ success = true[ FD ]
Line_3 $$ boolean success = false-->Line_47 $$ success = false[ FD ]
Line_45 $$ success = true-->Line_47 $$ success = false[ FD ]
Line_47 $$ success = false-->Line_47 $$ success = false[ FD ]
Line_2 $$ public static boolean makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding, boolean autoInitialized) -->Line_50 $$ if (autoInitialized) [ CD ]
Line_50 $$ if (autoInitialized) -->Line_51 $$ Display display = View.getDisplay()[ CD ]
Line_51 $$ Display display = View.getDisplay()-->Line_51 $$ Display display = View.getDisplay()[ CD ]
Line_50 $$ if (autoInitialized) -->Line_52 $$ if (display != null || !display.isDisposed()) [ CD ]
Line_52 $$ if (display != null || !display.isDisposed()) -->Line_52 $$ if (display != null || !display.isDisposed()) [ CD ]
Line_51 $$ Display display = View.getDisplay()-->Line_52 $$ if (display != null || !display.isDisposed()) [ FD ]
Line_52 $$ if (display != null || !display.isDisposed()) -->Line_53 $$ View.getDisplay().syncExec(new Runnable() [ CD ]
Line_53 $$ View.getDisplay().syncExec(new Runnable() -->Line_55 $$ Tab4.redrawBackupTable()[ CD ]
Line_50 $$ if (autoInitialized) -->Line_59 $$ return success[ CD ]
Line_50 $$ if (autoInitialized) -->Line_61 $$ View.getDisplay().syncExec(new Runnable() [ CD ]
Line_61 $$ View.getDisplay().syncExec(new Runnable() -->Line_63 $$ StatusBoxUtils.mainStatusAdd(" Backup Complete", 1)[ CD ]
Line_61 $$ View.getDisplay().syncExec(new Runnable() -->Line_64 $$ View.getPluginInterface().getPluginconfig().setPluginParameter("Azcvsupdater_last_backup", Time.getCurrentTime(View.getPluginInterface().getPluginconfig().getPluginBooleanParameter("MilitaryTime")))[ CD ]
Line_61 $$ View.getDisplay().syncExec(new Runnable() -->Line_65 $$ Tab4.lastBackupTime = View.getPluginInterface().getPluginconfig().getPluginStringParameter("Azcvsupdater_last_backup")[ CD ]
Line_65 $$ Tab4.lastBackupTime = View.getPluginInterface().getPluginconfig().getPluginStringParameter("Azcvsupdater_last_backup")-->Line_65 $$ Tab4.lastBackupTime = View.getPluginInterface().getPluginconfig().getPluginStringParameter("Azcvsupdater_last_backup")[ CD ]
Line_61 $$ View.getDisplay().syncExec(new Runnable() -->Line_66 $$ if (Tab4.lastbackupValue != null || !Tab4.lastbackupValue.isDisposed()) [ CD ]
Line_66 $$ if (Tab4.lastbackupValue != null || !Tab4.lastbackupValue.isDisposed()) -->Line_66 $$ if (Tab4.lastbackupValue != null || !Tab4.lastbackupValue.isDisposed()) [ CD ]
Line_66 $$ if (Tab4.lastbackupValue != null || !Tab4.lastbackupValue.isDisposed()) -->Line_67 $$ Tab4.lastbackupValue.setText("Last backup: " + Tab4.lastBackupTime)[ CD ]
Line_61 $$ View.getDisplay().syncExec(new Runnable() -->Line_69 $$ Tab4.redrawBackupTable()[ CD ]
Line_61 $$ View.getDisplay().syncExec(new Runnable() -->Line_70 $$ Tab6Utils.refreshLists()[ CD ]
Line_50 $$ if (autoInitialized) -->Line_73 $$ return success[ CD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_15 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_15 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_15 $$ for (int i = 0; i < files.length; i++) -->Line_15 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_18 $$ if (f.isDirectory()) [ FD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_18 $$ if (f.isDirectory()) [ FD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_19 $$ if (f.getName().endsWith("saving")) [ FD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.canRead()) [ FD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.canRead()) [ FD ]
Line_24 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_28 $$ infile.close()[ FD ]
Line_25 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_29 $$ outfile.close()[ FD ]
Line_16 $$ File f = new File(dir, files[i])-->Line_31 $$ System.out.println(f.getName() + " is LOCKED!")[ FD ]
Line_24 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_40 $$ infile.close()[ FD ]
Line_25 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_41 $$ outfile.close()[ FD ]
Line_27 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_27 $$ outfile.write(c)[ FD ]
Line_39 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_39 $$ outfile.write(c)[ FD ]
