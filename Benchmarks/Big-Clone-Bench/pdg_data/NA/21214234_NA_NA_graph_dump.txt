Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException [ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_3 $$ if (filename == null)[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_3 $$ if (filename == null)[ FD ]
Line_3 $$ if (filename == null)-->Line_3 $$ return null[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_4 $$ BufferedReader in = null[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_5 $$ InputStream is = null[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_6 $$ String mainClass = null[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_7 $$ String u = filename.toString()[ CD ]
Line_7 $$ String u = filename.toString()-->Line_7 $$ String u = filename.toString()[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_7 $$ String u = filename.toString()[ FD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_8 $$ PluginInfo pi = new PluginInfo()[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_9 $$ URL url[ CD ]
Line_9 $$ URL url-->Line_11 $$ url = new URL("jar:" + u + "!/")[ FD ]
Line_11 $$ url = new URL("jar:" + u + "!/")-->Line_11 $$ url = new URL("jar:" + u + "!/")[ FD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_15 $$ pi.setURL(filename)[ CD ]
Line_8 $$ PluginInfo pi = new PluginInfo()-->Line_15 $$ pi.setURL(filename)[ FD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_15 $$ pi.setURL(filename)[ FD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_16 $$ HashMap names = new HashMap()[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_17 $$ boolean seemsOK = false[ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) [ CD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException [ CD ]
Line_17 $$ boolean seemsOK = false-->Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) [ FD ]
Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) -->Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) [ CD ]
Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) -->Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) [ CD ]
Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) -->Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) [ FD ]
Line_9 $$ URL url-->Line_20 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()[ FD ]
Line_11 $$ url = new URL("jar:" + u + "!/")-->Line_20 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()[ FD ]
Line_20 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()-->Line_21 $$ jarConnection.setUseCaches(false)[ FD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_22 $$ JarFile jf = jarConnection.getJarFile()[ CD ]
Line_20 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()-->Line_22 $$ JarFile jf = jarConnection.getJarFile()[ FD ]
Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))-->Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))[ FD ]
Line_5 $$ InputStream is = null-->Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))[ FD ]
Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))-->Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))[ CD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))[ FD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))[ FD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_24 $$ in = new BufferedReader(new InputStreamReader(is))[ FD ]
Line_4 $$ BufferedReader in = null-->Line_24 $$ in = new BufferedReader(new InputStreamReader(is))[ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_26 $$ while ((line = in.readLine()) != null) [ FD ]
Line_25 $$ String line-->Line_26 $$ while ((line = in.readLine()) != null) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_26 $$ while ((line = in.readLine()) != null) [ CD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_26 $$ while ((line = in.readLine()) != null) [ FD ]
Line_4 $$ BufferedReader in = null-->Line_26 $$ while ((line = in.readLine()) != null) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ CD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ FD ]
Line_25 $$ String line-->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ FD ]
Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) -->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ CD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ FD ]
Line_25 $$ String line-->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ FD ]
Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) -->Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()[ CD ]
Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()-->Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()[ FD ]
Line_6 $$ String mainClass = null-->Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()[ FD ]
Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()-->Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()[ CD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()[ FD ]
Line_25 $$ String line-->Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()[ FD ]
Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) -->Line_29 $$ pi.setMainClass(mainClass)[ CD ]
Line_8 $$ PluginInfo pi = new PluginInfo()-->Line_29 $$ pi.setMainClass(mainClass)[ FD ]
Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()-->Line_29 $$ pi.setMainClass(mainClass)[ FD ]
Line_6 $$ String mainClass = null-->Line_29 $$ pi.setMainClass(mainClass)[ FD ]
Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) -->Line_30 $$ logger.log(Level.SEVERE, "Found plugin main class " + mainClass + " from manifest")[ CD ]
Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ FD ]
Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ FD ]
Line_5 $$ InputStream is = null-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ FD ]
Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ CD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ FD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ FD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_34 $$ in = new BufferedReader(new InputStreamReader(is))[ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_34 $$ in = new BufferedReader(new InputStreamReader(is))[ FD ]
Line_4 $$ BufferedReader in = null-->Line_34 $$ in = new BufferedReader(new InputStreamReader(is))[ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_35 $$ while ((line = in.readLine()) != null) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_35 $$ while ((line = in.readLine()) != null) [ FD ]
Line_25 $$ String line-->Line_35 $$ while ((line = in.readLine()) != null) [ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_35 $$ while ((line = in.readLine()) != null) [ CD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_35 $$ while ((line = in.readLine()) != null) [ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_35 $$ while ((line = in.readLine()) != null) [ FD ]
Line_4 $$ BufferedReader in = null-->Line_35 $$ while ((line = in.readLine()) != null) [ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_36 $$ if (line.startsWith("#")) [ CD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_25 $$ String line-->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_36 $$ if (line.startsWith("#")) -->Line_36 $$ if (line.startsWith("#")) [ CD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_25 $$ String line-->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_39 $$ if (line.length() == 0) [ CD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_39 $$ if (line.length() == 0) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_39 $$ if (line.length() == 0) [ FD ]
Line_25 $$ String line-->Line_39 $$ if (line.length() == 0) [ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_42 $$ String[] sa = line.split("=", 2)[ CD ]
Line_42 $$ String[] sa = line.split("=", 2)-->Line_42 $$ String[] sa = line.split("=", 2)[ CD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_42 $$ String[] sa = line.split("=", 2)[ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_42 $$ String[] sa = line.split("=", 2)[ FD ]
Line_25 $$ String line-->Line_42 $$ String[] sa = line.split("=", 2)[ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_43 $$ names.put(sa[0], sa[1])[ CD ]
Line_16 $$ HashMap names = new HashMap()-->Line_43 $$ names.put(sa[0], sa[1])[ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_44 $$ pi.setPluginNames(names)[ CD ]
Line_8 $$ PluginInfo pi = new PluginInfo()-->Line_44 $$ pi.setPluginNames(names)[ FD ]
Line_16 $$ HashMap names = new HashMap()-->Line_44 $$ pi.setPluginNames(names)[ FD ]
Line_46 $$ seemsOK = true-->Line_46 $$ seemsOK = true[ FD ]
Line_17 $$ boolean seemsOK = false-->Line_46 $$ seemsOK = true[ FD ]
Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) -->Line_48 $$ if (tries >= 5)[ FD ]
Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))-->Line_55 $$ if (is != null)[ FD ]
Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))-->Line_55 $$ if (is != null)[ FD ]
Line_5 $$ InputStream is = null-->Line_55 $$ if (is != null)[ FD ]
Line_55 $$ if (is != null)-->Line_55 $$ is.close()[ CD ]
Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))-->Line_55 $$ is.close()[ FD ]
Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))-->Line_55 $$ is.close()[ FD ]
Line_5 $$ InputStream is = null-->Line_55 $$ is.close()[ FD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ if (in != null)[ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ if (in != null)[ FD ]
Line_4 $$ BufferedReader in = null-->Line_56 $$ if (in != null)[ FD ]
Line_56 $$ if (in != null)-->Line_56 $$ in.close()[ CD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ in.close()[ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ in.close()[ FD ]
Line_4 $$ BufferedReader in = null-->Line_56 $$ in.close()[ FD ]
Line_2 $$ private PluginInfo loadPluginInfo(URL filename) throws PluginNotFoundException -->Line_61 $$ return pi[ CD ]
Line_46 $$ seemsOK = true-->Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) [ FD ]
Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) -->Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) [ FD ]
Line_20 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()-->Line_21 $$ jarConnection.setUseCaches(false)[ FD ]
Line_20 $$ JarURLConnection jarConnection = (JarURLConnection) url.openConnection()-->Line_22 $$ JarFile jf = jarConnection.getJarFile()[ FD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))[ FD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))[ FD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ FD ]
Line_22 $$ JarFile jf = jarConnection.getJarFile()-->Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))[ FD ]
Line_18 $$ for (int tries = 0; (tries <= 5) && (!seemsOK); tries++) -->Line_48 $$ if (tries >= 5)[ FD ]
Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))-->Line_55 $$ if (is != null)[ FD ]
Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))-->Line_55 $$ if (is != null)[ FD ]
Line_23 $$ is = jf.getInputStream(jf.getJarEntry("META-INF/MANIFEST.MF"))-->Line_55 $$ is.close()[ FD ]
Line_33 $$ is = jf.getInputStream(jf.getJarEntry("pluginname.properties"))-->Line_55 $$ is.close()[ FD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ if (in != null)[ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ if (in != null)[ FD ]
Line_24 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ in.close()[ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(is))-->Line_56 $$ in.close()[ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_27 $$ if (line.startsWith("Frostplugin-Main-Class: ")) [ FD ]
Line_26 $$ while ((line = in.readLine()) != null) -->Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()[ FD ]
Line_28 $$ mainClass = line.substring("Frostplugin-Main-Class: ".length()).trim()-->Line_29 $$ pi.setMainClass(mainClass)[ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_36 $$ if (line.startsWith("#")) [ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_39 $$ if (line.length() == 0) [ FD ]
Line_35 $$ while ((line = in.readLine()) != null) -->Line_42 $$ String[] sa = line.split("=", 2)[ FD ]
