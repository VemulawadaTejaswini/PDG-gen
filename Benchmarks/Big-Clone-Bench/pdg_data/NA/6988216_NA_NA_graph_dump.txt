Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testSimpleQuery() throws Exception [ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_3 $$ JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek")[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_4 $$ assertNotNull(dummySource)[ CD ]
Line_3 $$ JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + "users/alexander.klimetschek")-->Line_4 $$ assertNotNull(dummySource)[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_6 $$ assertNotNull(os)[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_6 $$ assertNotNull(os)[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_7 $$ String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_8 $$ os.write(dummyContent.getBytes())[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_8 $$ os.write(dummyContent.getBytes())[ FD ]
Line_7 $$ String dummyContent = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>"-->Line_8 $$ os.write(dummyContent.getBytes())[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_9 $$ os.flush()[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_9 $$ os.flush()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_10 $$ os.close()[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_10 $$ os.close()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_11 $$ JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian")[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_12 $$ assertNotNull(source)[ CD ]
Line_11 $$ JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + "users/bastian")-->Line_12 $$ assertNotNull(source)[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_13 $$ os = ((ModifiableSource) source).getOutputStream()[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_13 $$ os = ((ModifiableSource) source).getOutputStream()[ FD ]
Line_13 $$ os = ((ModifiableSource) source).getOutputStream()-->Line_13 $$ os = ((ModifiableSource) source).getOutputStream()[ FD ]
Line_13 $$ os = ((ModifiableSource) source).getOutputStream()-->Line_13 $$ os = ((ModifiableSource) source).getOutputStream()[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_14 $$ assertNotNull(os)[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_14 $$ assertNotNull(os)[ FD ]
Line_13 $$ os = ((ModifiableSource) source).getOutputStream()-->Line_14 $$ assertNotNull(os)[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_15 $$ String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_16 $$ os.write(content.getBytes())[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_16 $$ os.write(content.getBytes())[ FD ]
Line_13 $$ os = ((ModifiableSource) source).getOutputStream()-->Line_16 $$ os.write(content.getBytes())[ FD ]
Line_15 $$ String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"-->Line_16 $$ os.write(content.getBytes())[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_17 $$ os.flush()[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_17 $$ os.flush()[ FD ]
Line_13 $$ os = ((ModifiableSource) source).getOutputStream()-->Line_17 $$ os.flush()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_18 $$ os.close()[ CD ]
Line_5 $$ OutputStream os = ((ModifiableSource) dummySource).getOutputStream()-->Line_18 $$ os.close()[ FD ]
Line_13 $$ os = ((ModifiableSource) source).getOutputStream()-->Line_18 $$ os.close()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_19 $$ QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']")[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_20 $$ assertNotNull(qResult)[ CD ]
Line_19 $$ QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']")-->Line_20 $$ assertNotNull(qResult)[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_21 $$ Collection results = qResult.getChildren()[ CD ]
Line_21 $$ Collection results = qResult.getChildren()-->Line_21 $$ Collection results = qResult.getChildren()[ CD ]
Line_19 $$ QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + "users?/*[.//user/teamspace='mindquarry']")-->Line_21 $$ Collection results = qResult.getChildren()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_22 $$ assertEquals(1, results.size())[ CD ]
Line_21 $$ Collection results = qResult.getChildren()-->Line_22 $$ assertEquals(1, results.size())[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_23 $$ Iterator it = results.iterator()[ CD ]
Line_23 $$ Iterator it = results.iterator()-->Line_23 $$ Iterator it = results.iterator()[ CD ]
Line_21 $$ Collection results = qResult.getChildren()-->Line_23 $$ Iterator it = results.iterator()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_24 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()[ CD ]
Line_23 $$ Iterator it = results.iterator()-->Line_24 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_25 $$ InputStream rSrcIn = rSrc.getInputStream()[ CD ]
Line_25 $$ InputStream rSrcIn = rSrc.getInputStream()-->Line_25 $$ InputStream rSrcIn = rSrc.getInputStream()[ CD ]
Line_24 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()-->Line_25 $$ InputStream rSrcIn = rSrc.getInputStream()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_26 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_27 $$ IOUtils.copy(rSrcIn, actualOut)[ CD ]
Line_25 $$ InputStream rSrcIn = rSrc.getInputStream()-->Line_27 $$ IOUtils.copy(rSrcIn, actualOut)[ FD ]
Line_26 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()-->Line_27 $$ IOUtils.copy(rSrcIn, actualOut)[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_28 $$ rSrcIn.close()[ CD ]
Line_25 $$ InputStream rSrcIn = rSrc.getInputStream()-->Line_28 $$ rSrcIn.close()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_29 $$ assertEquals(content, actualOut.toString())[ CD ]
Line_15 $$ String content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>"-->Line_29 $$ assertEquals(content, actualOut.toString())[ FD ]
Line_26 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()-->Line_29 $$ assertEquals(content, actualOut.toString())[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_30 $$ actualOut.close()[ CD ]
Line_26 $$ ByteArrayOutputStream actualOut = new ByteArrayOutputStream()-->Line_30 $$ actualOut.close()[ FD ]
Line_2 $$ public void testSimpleQuery() throws Exception -->Line_31 $$ rSrc.delete()[ CD ]
Line_24 $$ JCRNodeSource rSrc = (JCRNodeSource) it.next()-->Line_31 $$ rSrc.delete()[ FD ]
