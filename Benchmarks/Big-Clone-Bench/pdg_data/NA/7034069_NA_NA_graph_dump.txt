Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String getSHA1Hash(String stringToHash) [ CD ]
Line_2 $$ public static String getSHA1Hash(String stringToHash) -->Line_3 $$ String result = ""[ CD ]
Line_2 $$ public static String getSHA1Hash(String stringToHash) -->Line_4 $$ MessageDigest md[ CD ]
Line_4 $$ MessageDigest md-->Line_6 $$ md = MessageDigest.getInstance("SHA-1")[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_6 $$ md = MessageDigest.getInstance("SHA-1")[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_6 $$ md = MessageDigest.getInstance("SHA-1")[ CD ]
Line_4 $$ MessageDigest md-->Line_7 $$ md.update(stringToHash.getBytes("utf-8"))[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_7 $$ md.update(stringToHash.getBytes("utf-8"))[ FD ]
Line_2 $$ public static String getSHA1Hash(String stringToHash) -->Line_7 $$ md.update(stringToHash.getBytes("utf-8"))[ FD ]
Line_8 $$ byte[] hash = md.digest()-->Line_8 $$ byte[] hash = md.digest()[ CD ]
Line_4 $$ MessageDigest md-->Line_8 $$ byte[] hash = md.digest()[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_8 $$ byte[] hash = md.digest()[ FD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_10 $$ for (int i = 0; i < hash.length; i++) [ CD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_10 $$ for (int i = 0; i < hash.length; i++) [ CD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_10 $$ for (int i = 0; i < hash.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_11 $$ int halfByte = (hash[i] >>> 4) & 0x0F[ CD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_12 $$ int twoHalves = 0[ CD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_13 $$ do [ CD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_10 $$ for (int i = 0; i < hash.length; i++) [ CD ]
Line_13 $$ do -->Line_14 $$ if ((0 <= halfByte) && (halfByte <= 9)) [ CD ]
Line_14 $$ if ((0 <= halfByte) && (halfByte <= 9)) -->Line_15 $$ hashString.append((char) ('0' + halfByte))[ CD ]
Line_9 $$ StringBuffer hashString = new StringBuffer()-->Line_15 $$ hashString.append((char) ('0' + halfByte))[ FD ]
Line_14 $$ if ((0 <= halfByte) && (halfByte <= 9)) -->Line_17 $$ hashString.append((char) ('a' + (halfByte - 10)))[ CD ]
Line_9 $$ StringBuffer hashString = new StringBuffer()-->Line_17 $$ hashString.append((char) ('a' + (halfByte - 10)))[ FD ]
Line_13 $$ do -->Line_19 $$ halfByte = hash[i] & 0x0F[ CD ]
Line_19 $$ halfByte = hash[i] & 0x0F-->Line_19 $$ halfByte = hash[i] & 0x0F[ FD ]
Line_11 $$ int halfByte = (hash[i] >>> 4) & 0x0F-->Line_19 $$ halfByte = hash[i] & 0x0F[ FD ]
Line_12 $$ int twoHalves = 0-->Line_13 $$ do [ FD ]
Line_3 $$ String result = ""-->Line_22 $$ result = hashString.toString()[ FD ]
Line_22 $$ result = hashString.toString()-->Line_22 $$ result = hashString.toString()[ FD ]
Line_22 $$ result = hashString.toString()-->Line_22 $$ result = hashString.toString()[ CD ]
Line_9 $$ StringBuffer hashString = new StringBuffer()-->Line_22 $$ result = hashString.toString()[ FD ]
Line_2 $$ public static String getSHA1Hash(String stringToHash) -->Line_28 $$ return result[ CD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_10 $$ for (int i = 0; i < hash.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_10 $$ for (int i = 0; i < hash.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < hash.length; i++) -->Line_10 $$ for (int i = 0; i < hash.length; i++) [ FD ]
