Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception [ CD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_3 $$ String bucketName = "test-" + UUID.randomUUID()[ CD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_4 $$ Service service = new WebClientService(credentials)[ CD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_5 $$ service.createBucket(bucketName)[ CD ]
Line_4 $$ Service service = new WebClientService(credentials)-->Line_5 $$ service.createBucket(bucketName)[ FD ]
Line_3 $$ String bucketName = "test-" + UUID.randomUUID()-->Line_5 $$ service.createBucket(bucketName)[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_6 $$ File file = folder.newFile("foo.txt")[ CD ]
Line_6 $$ File file = folder.newFile("foo.txt")-->Line_6 $$ File file = folder.newFile("foo.txt")[ CD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_7 $$ FileUtils.writeStringToFile(file, UUID.randomUUID().toString())[ CD ]
Line_6 $$ File file = folder.newFile("foo.txt")-->Line_7 $$ FileUtils.writeStringToFile(file, UUID.randomUUID().toString())[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_8 $$ service.createObject(bucketName, file.getName(), file, new NullProgressListener())[ CD ]
Line_4 $$ Service service = new WebClientService(credentials)-->Line_8 $$ service.createObject(bucketName, file.getName(), file, new NullProgressListener())[ FD ]
Line_3 $$ String bucketName = "test-" + UUID.randomUUID()-->Line_8 $$ service.createObject(bucketName, file.getName(), file, new NullProgressListener())[ FD ]
Line_6 $$ File file = folder.newFile("foo.txt")-->Line_8 $$ service.createObject(bucketName, file.getName(), file, new NullProgressListener())[ FD ]
Line_6 $$ File file = folder.newFile("foo.txt")-->Line_8 $$ service.createObject(bucketName, file.getName(), file, new NullProgressListener())[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_9 $$ String publicUrl = service.getPublicUrl(bucketName, file.getName(), new DateTime().plusDays(5))[ CD ]
Line_9 $$ String publicUrl = service.getPublicUrl(bucketName, file.getName(), new DateTime().plusDays(5))-->Line_9 $$ String publicUrl = service.getPublicUrl(bucketName, file.getName(), new DateTime().plusDays(5))[ CD ]
Line_4 $$ Service service = new WebClientService(credentials)-->Line_9 $$ String publicUrl = service.getPublicUrl(bucketName, file.getName(), new DateTime().plusDays(5))[ FD ]
Line_3 $$ String bucketName = "test-" + UUID.randomUUID()-->Line_9 $$ String publicUrl = service.getPublicUrl(bucketName, file.getName(), new DateTime().plusDays(5))[ FD ]
Line_6 $$ File file = folder.newFile("foo.txt")-->Line_9 $$ String publicUrl = service.getPublicUrl(bucketName, file.getName(), new DateTime().plusDays(5))[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_10 $$ File saved = folder.newFile("saved.txt")[ CD ]
Line_10 $$ File saved = folder.newFile("saved.txt")-->Line_10 $$ File saved = folder.newFile("saved.txt")[ CD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_11 $$ InputStream input = new URL(publicUrl).openConnection().getInputStream()[ CD ]
Line_11 $$ InputStream input = new URL(publicUrl).openConnection().getInputStream()-->Line_11 $$ InputStream input = new URL(publicUrl).openConnection().getInputStream()[ CD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_12 $$ FileOutputStream output = new FileOutputStream(saved)[ CD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_13 $$ IOUtils.copy(input, output)[ CD ]
Line_11 $$ InputStream input = new URL(publicUrl).openConnection().getInputStream()-->Line_13 $$ IOUtils.copy(input, output)[ FD ]
Line_12 $$ FileOutputStream output = new FileOutputStream(saved)-->Line_13 $$ IOUtils.copy(input, output)[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_14 $$ output.close()[ CD ]
Line_12 $$ FileOutputStream output = new FileOutputStream(saved)-->Line_14 $$ output.close()[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_15 $$ assertThat("Corrupted download", Files.computeMD5(saved), equalTo(Files.computeMD5(file)))[ CD ]
Line_10 $$ File saved = folder.newFile("saved.txt")-->Line_15 $$ assertThat("Corrupted download", Files.computeMD5(saved), equalTo(Files.computeMD5(file)))[ FD ]
Line_6 $$ File file = folder.newFile("foo.txt")-->Line_15 $$ assertThat("Corrupted download", Files.computeMD5(saved), equalTo(Files.computeMD5(file)))[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_16 $$ service.deleteObject(bucketName, file.getName())[ CD ]
Line_4 $$ Service service = new WebClientService(credentials)-->Line_16 $$ service.deleteObject(bucketName, file.getName())[ FD ]
Line_3 $$ String bucketName = "test-" + UUID.randomUUID()-->Line_16 $$ service.deleteObject(bucketName, file.getName())[ FD ]
Line_6 $$ File file = folder.newFile("foo.txt")-->Line_16 $$ service.deleteObject(bucketName, file.getName())[ FD ]
Line_2 $$ public void shouldDownloadFileUsingPublicLink() throws Exception -->Line_17 $$ service.deleteBucket(bucketName)[ CD ]
Line_4 $$ Service service = new WebClientService(credentials)-->Line_17 $$ service.deleteBucket(bucketName)[ FD ]
Line_3 $$ String bucketName = "test-" + UUID.randomUUID()-->Line_17 $$ service.deleteBucket(bucketName)[ FD ]
