Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_3 $$ if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) [ CD ]
Line_3 $$ if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) -->Line_3 $$ if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) [ CD ]
Line_3 $$ if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) -->Line_3 $$ if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_3 $$ if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) [ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_3 $$ if (!hierarchyRootClazz.isAssignableFrom(callingClazz)) [ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_6 $$ if (null == resourceBaseName) [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_6 $$ if (null == resourceBaseName) [ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_9 $$ String fqcn = callingClazz.getName()[ CD ]
Line_9 $$ String fqcn = callingClazz.getName()-->Line_9 $$ String fqcn = callingClazz.getName()[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_9 $$ String fqcn = callingClazz.getName()[ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_10 $$ String uqcn = fqcn.substring(fqcn.lastIndexOf('.') + 1)[ CD ]
Line_10 $$ String uqcn = fqcn.substring(fqcn.lastIndexOf('.') + 1)-->Line_10 $$ String uqcn = fqcn.substring(fqcn.lastIndexOf('.') + 1)[ CD ]
Line_9 $$ String fqcn = callingClazz.getName()-->Line_10 $$ String uqcn = fqcn.substring(fqcn.lastIndexOf('.') + 1)[ FD ]
Line_9 $$ String fqcn = callingClazz.getName()-->Line_10 $$ String uqcn = fqcn.substring(fqcn.lastIndexOf('.') + 1)[ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_11 $$ String callingClassResource = uqcn + ".properties"[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_12 $$ String globalCallingClassResource = "/" + callingClassResource[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_13 $$ String baseClassResource = resourceBaseName + "-" + uqcn + ".properties"[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_14 $$ String globalBaseClassResource = "/" + baseClassResource[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_15 $$ String pkgResource = resourceBaseName + ".properties"[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_16 $$ String globalResource = "/" + pkgResource[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_17 $$ boolean loaded = false[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_18 $$ final String[] resources = [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_19 $$ List<URL> urls = new ArrayList<URL>()[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_20 $$ Class<?> clazz = callingClazz[ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_21 $$ do [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) [ CD ]
Line_20 $$ Class<?> clazz = callingClazz-->Line_21 $$ do [ FD ]
Line_23 $$ URL url = clazz.getResource(res)-->Line_23 $$ URL url = clazz.getResource(res)[ CD ]
Line_20 $$ Class<?> clazz = callingClazz-->Line_23 $$ URL url = clazz.getResource(res)[ FD ]
Line_22 $$ for (String res : resources) -->Line_23 $$ URL url = clazz.getResource(res)[ FD ]
Line_24 $$ if (null != url && !urls.contains(url)) -->Line_24 $$ if (null != url && !urls.contains(url)) [ CD ]
Line_19 $$ List<URL> urls = new ArrayList<URL>()-->Line_24 $$ if (null != url && !urls.contains(url)) [ FD ]
Line_23 $$ URL url = clazz.getResource(res)-->Line_24 $$ if (null != url && !urls.contains(url)) [ FD ]
Line_24 $$ if (null != url && !urls.contains(url)) -->Line_25 $$ urls.add(url)[ CD ]
Line_19 $$ List<URL> urls = new ArrayList<URL>()-->Line_25 $$ urls.add(url)[ FD ]
Line_23 $$ URL url = clazz.getResource(res)-->Line_25 $$ urls.add(url)[ FD ]
Line_21 $$ do -->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_20 $$ Class<?> clazz = callingClazz-->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_28 $$ if (hierarchyRootClazz.equals(clazz)) -->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_20 $$ Class<?> clazz = callingClazz-->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_28 $$ if (hierarchyRootClazz.equals(clazz)) -->Line_29 $$ clazz = null[ CD ]
Line_29 $$ clazz = null-->Line_29 $$ clazz = null[ FD ]
Line_20 $$ Class<?> clazz = callingClazz-->Line_29 $$ clazz = null[ FD ]
Line_28 $$ if (hierarchyRootClazz.equals(clazz)) -->Line_31 $$ clazz = clazz.getSuperclass()[ CD ]
Line_29 $$ clazz = null-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_20 $$ Class<?> clazz = callingClazz-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_31 $$ clazz = clazz.getSuperclass()[ CD ]
Line_29 $$ clazz = null-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_20 $$ Class<?> clazz = callingClazz-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_34 $$ ListIterator<URL> it = urls.listIterator(urls.size())[ CD ]
Line_34 $$ ListIterator<URL> it = urls.listIterator(urls.size())-->Line_34 $$ ListIterator<URL> it = urls.listIterator(urls.size())[ CD ]
Line_19 $$ List<URL> urls = new ArrayList<URL>()-->Line_34 $$ ListIterator<URL> it = urls.listIterator(urls.size())[ FD ]
Line_19 $$ List<URL> urls = new ArrayList<URL>()-->Line_34 $$ ListIterator<URL> it = urls.listIterator(urls.size())[ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_35 $$ while (it.hasPrevious()) [ CD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) [ CD ]
Line_35 $$ while (it.hasPrevious()) -->Line_35 $$ while (it.hasPrevious()) [ CD ]
Line_34 $$ ListIterator<URL> it = urls.listIterator(urls.size())-->Line_35 $$ while (it.hasPrevious()) [ FD ]
Line_35 $$ while (it.hasPrevious()) -->Line_36 $$ URL url = it.previous()[ CD ]
Line_36 $$ URL url = it.previous()-->Line_36 $$ URL url = it.previous()[ CD ]
Line_34 $$ ListIterator<URL> it = urls.listIterator(urls.size())-->Line_36 $$ URL url = it.previous()[ FD ]
Line_35 $$ while (it.hasPrevious()) -->Line_37 $$ InputStream in = null[ CD ]
Line_37 $$ InputStream in = null-->Line_40 $$ in = url.openStream()[ FD ]
Line_40 $$ in = url.openStream()-->Line_40 $$ in = url.openStream()[ FD ]
Line_40 $$ in = url.openStream()-->Line_40 $$ in = url.openStream()[ CD ]
Line_36 $$ URL url = it.previous()-->Line_40 $$ in = url.openStream()[ FD ]
Line_23 $$ URL url = clazz.getResource(res)-->Line_40 $$ in = url.openStream()[ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_41 $$ props.load(in)[ FD ]
Line_37 $$ InputStream in = null-->Line_41 $$ props.load(in)[ FD ]
Line_40 $$ in = url.openStream()-->Line_41 $$ props.load(in)[ FD ]
Line_42 $$ loaded = true-->Line_42 $$ loaded = true[ FD ]
Line_17 $$ boolean loaded = false-->Line_42 $$ loaded = true[ FD ]
Line_35 $$ while (it.hasPrevious()) -->Line_46 $$ IOUtil.closeSilently(in)[ CD ]
Line_37 $$ InputStream in = null-->Line_46 $$ IOUtil.closeSilently(in)[ FD ]
Line_40 $$ in = url.openStream()-->Line_46 $$ IOUtil.closeSilently(in)[ FD ]
Line_2 $$ public static boolean loadTestProperties(Properties props, Class<?> callingClazz, Class<?> hierarchyRootClazz, String resourceBaseName) -->Line_48 $$ return loaded[ CD ]
Line_29 $$ clazz = null-->Line_21 $$ do [ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_21 $$ do [ FD ]
Line_29 $$ clazz = null-->Line_21 $$ do [ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_21 $$ do [ FD ]
Line_29 $$ clazz = null-->Line_23 $$ URL url = clazz.getResource(res)[ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_23 $$ URL url = clazz.getResource(res)[ FD ]
Line_22 $$ for (String res : resources) -->Line_23 $$ URL url = clazz.getResource(res)[ FD ]
Line_23 $$ URL url = clazz.getResource(res)-->Line_24 $$ if (null != url && !urls.contains(url)) [ FD ]
Line_23 $$ URL url = clazz.getResource(res)-->Line_25 $$ urls.add(url)[ FD ]
Line_29 $$ clazz = null-->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_29 $$ clazz = null-->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_28 $$ if (hierarchyRootClazz.equals(clazz)) [ FD ]
Line_29 $$ clazz = null-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_31 $$ clazz = clazz.getSuperclass()-->Line_31 $$ clazz = clazz.getSuperclass()[ FD ]
Line_36 $$ URL url = it.previous()-->Line_40 $$ in = url.openStream()[ FD ]
Line_37 $$ InputStream in = null-->Line_41 $$ props.load(in)[ FD ]
Line_40 $$ in = url.openStream()-->Line_41 $$ props.load(in)[ FD ]
Line_37 $$ InputStream in = null-->Line_46 $$ IOUtil.closeSilently(in)[ FD ]
Line_40 $$ in = url.openStream()-->Line_46 $$ IOUtil.closeSilently(in)[ FD ]
