Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException [ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_3 $$ if (destFile.exists() && destFile.isDirectory()) [ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_3 $$ if (destFile.exists() && destFile.isDirectory()) [ FD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_3 $$ if (destFile.exists() && destFile.isDirectory()) [ FD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_6 $$ long time = System.currentTimeMillis()[ CD ]
Line_6 $$ long time = System.currentTimeMillis()-->Line_6 $$ long time = System.currentTimeMillis()[ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_7 $$ FileInputStream fis = null[ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_8 $$ FileOutputStream fos = null[ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_9 $$ FileChannel input = null[ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_10 $$ FileChannel output = null[ CD ]
Line_7 $$ FileInputStream fis = null-->Line_12 $$ fis = new FileInputStream(srcFile)[ FD ]
Line_12 $$ fis = new FileInputStream(srcFile)-->Line_12 $$ fis = new FileInputStream(srcFile)[ FD ]
Line_8 $$ FileOutputStream fos = null-->Line_13 $$ fos = new FileOutputStream(destFile)[ FD ]
Line_13 $$ fos = new FileOutputStream(destFile)-->Line_13 $$ fos = new FileOutputStream(destFile)[ FD ]
Line_9 $$ FileChannel input = null-->Line_14 $$ input = fis.getChannel()[ FD ]
Line_14 $$ input = fis.getChannel()-->Line_14 $$ input = fis.getChannel()[ FD ]
Line_14 $$ input = fis.getChannel()-->Line_14 $$ input = fis.getChannel()[ CD ]
Line_7 $$ FileInputStream fis = null-->Line_14 $$ input = fis.getChannel()[ FD ]
Line_12 $$ fis = new FileInputStream(srcFile)-->Line_14 $$ input = fis.getChannel()[ FD ]
Line_10 $$ FileChannel output = null-->Line_15 $$ output = fos.getChannel()[ FD ]
Line_15 $$ output = fos.getChannel()-->Line_15 $$ output = fos.getChannel()[ FD ]
Line_15 $$ output = fos.getChannel()-->Line_15 $$ output = fos.getChannel()[ CD ]
Line_8 $$ FileOutputStream fos = null-->Line_15 $$ output = fos.getChannel()[ FD ]
Line_13 $$ fos = new FileOutputStream(destFile)-->Line_15 $$ output = fos.getChannel()[ FD ]
Line_16 $$ long size = input.size()-->Line_16 $$ long size = input.size()[ CD ]
Line_9 $$ FileChannel input = null-->Line_16 $$ long size = input.size()[ FD ]
Line_14 $$ input = fis.getChannel()-->Line_16 $$ long size = input.size()[ FD ]
Line_17 $$ long pos = 0-->Line_19 $$ while (pos < size && continueWriting(pos, size)) [ FD ]
Line_16 $$ long size = input.size()-->Line_19 $$ while (pos < size && continueWriting(pos, size)) [ FD ]
Line_19 $$ while (pos < size && continueWriting(pos, size)) -->Line_20 $$ count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos)[ CD ]
Line_20 $$ count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos)-->Line_20 $$ count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos)[ FD ]
Line_18 $$ long count = 0-->Line_20 $$ count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos)[ FD ]
Line_19 $$ while (pos < size && continueWriting(pos, size)) -->Line_21 $$ pos += output.transferFrom(input, pos, count)[ CD ]
Line_21 $$ pos += output.transferFrom(input, pos, count)-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_17 $$ long pos = 0-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_21 $$ pos += output.transferFrom(input, pos, count)-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ CD ]
Line_10 $$ FileChannel output = null-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_15 $$ output = fos.getChannel()-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_9 $$ FileChannel input = null-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_14 $$ input = fis.getChannel()-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_21 $$ pos += output.transferFrom(input, pos, count)-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_17 $$ long pos = 0-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_20 $$ count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos)-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_18 $$ long count = 0-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_10 $$ FileChannel output = null-->Line_24 $$ output.close()[ FD ]
Line_15 $$ output = fos.getChannel()-->Line_24 $$ output.close()[ FD ]
Line_8 $$ FileOutputStream fos = null-->Line_25 $$ IOUtils.closeQuietly(fos)[ FD ]
Line_13 $$ fos = new FileOutputStream(destFile)-->Line_25 $$ IOUtils.closeQuietly(fos)[ FD ]
Line_9 $$ FileChannel input = null-->Line_26 $$ input.close()[ FD ]
Line_14 $$ input = fis.getChannel()-->Line_26 $$ input.close()[ FD ]
Line_7 $$ FileInputStream fis = null-->Line_27 $$ IOUtils.closeQuietly(fis)[ FD ]
Line_12 $$ fis = new FileInputStream(srcFile)-->Line_27 $$ IOUtils.closeQuietly(fis)[ FD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_29 $$ if (srcFile.length() != destFile.length()) [ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_29 $$ if (srcFile.length() != destFile.length()) [ FD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_29 $$ if (srcFile.length() != destFile.length()) [ FD ]
Line_29 $$ if (srcFile.length() != destFile.length()) -->Line_30 $$ if (DiskManager.isLocked())[ CD ]
Line_30 $$ if (DiskManager.isLocked())-->Line_30 $$ if (DiskManager.isLocked())[ CD ]
Line_29 $$ if (srcFile.length() != destFile.length()) -->Line_32 $$ time = System.currentTimeMillis() - time[ CD ]
Line_6 $$ long time = System.currentTimeMillis()-->Line_32 $$ time = System.currentTimeMillis() - time[ FD ]
Line_32 $$ time = System.currentTimeMillis() - time-->Line_32 $$ time = System.currentTimeMillis() - time[ FD ]
Line_6 $$ long time = System.currentTimeMillis()-->Line_32 $$ time = System.currentTimeMillis() - time[ FD ]
Line_32 $$ time = System.currentTimeMillis() - time-->Line_32 $$ time = System.currentTimeMillis() - time[ FD ]
Line_29 $$ if (srcFile.length() != destFile.length()) -->Line_33 $$ long speed = (destFile.length() / time) / 1000[ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_33 $$ long speed = (destFile.length() / time) / 1000[ FD ]
Line_29 $$ if (srcFile.length() != destFile.length()) -->Line_34 $$ DiskManager.addDiskSpeed(speed)[ CD ]
Line_33 $$ long speed = (destFile.length() / time) / 1000-->Line_34 $$ DiskManager.addDiskSpeed(speed)[ FD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_36 $$ if (preserveFileDate) [ CD ]
Line_36 $$ if (preserveFileDate) -->Line_37 $$ destFile.setLastModified(srcFile.lastModified())[ CD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_37 $$ destFile.setLastModified(srcFile.lastModified())[ FD ]
Line_2 $$ private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException -->Line_37 $$ destFile.setLastModified(srcFile.lastModified())[ FD ]
Line_21 $$ pos += output.transferFrom(input, pos, count)-->Line_19 $$ while (pos < size && continueWriting(pos, size)) [ FD ]
Line_21 $$ pos += output.transferFrom(input, pos, count)-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
Line_20 $$ count = (size - pos) > FIFTY_MB ? FIFTY_MB : (size - pos)-->Line_21 $$ pos += output.transferFrom(input, pos, count)[ FD ]
