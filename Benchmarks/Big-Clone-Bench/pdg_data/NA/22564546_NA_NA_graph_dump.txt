Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void unzip(String resource) [ CD ]
Line_2 $$ public void unzip(String resource) -->Line_3 $$ File f = new File(resource)[ CD ]
Line_2 $$ public void unzip(String resource) -->Line_4 $$ if (!f.exists())[ CD ]
Line_4 $$ if (!f.exists())-->Line_4 $$ if (!f.exists())[ CD ]
Line_4 $$ if (!f.exists())-->Line_4 $$ if (!f.exists())[ CD ]
Line_3 $$ File f = new File(resource)-->Line_4 $$ if (!f.exists())[ FD ]
Line_2 $$ public void unzip(String resource) -->Line_5 $$ String parent = f.getParent().toString()[ CD ]
Line_5 $$ String parent = f.getParent().toString()-->Line_5 $$ String parent = f.getParent().toString()[ CD ]
Line_3 $$ File f = new File(resource)-->Line_5 $$ String parent = f.getParent().toString()[ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_11 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_10 $$ ZipEntry entry-->Line_11 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_11 $$ while ((entry = zis.getNextEntry()) != null) [ CD ]
Line_9 $$ ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis))-->Line_11 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_12 $$ log.info("Extracting archive entry: " + entry)[ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ String entryPath = new StringBuilder(parent).append(System.getProperty("file.separator")).append(entry.getName()).toString()[ CD ]
Line_13 $$ String entryPath = new StringBuilder(parent).append(System.getProperty("file.separator")).append(entry.getName()).toString()-->Line_13 $$ String entryPath = new StringBuilder(parent).append(System.getProperty("file.separator")).append(entry.getName()).toString()[ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ String entryPath = new StringBuilder(parent).append(System.getProperty("file.separator")).append(entry.getName()).toString()[ FD ]
Line_10 $$ ZipEntry entry-->Line_13 $$ String entryPath = new StringBuilder(parent).append(System.getProperty("file.separator")).append(entry.getName()).toString()[ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_14 $$ if (entry.isDirectory()) [ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_14 $$ if (entry.isDirectory()) [ FD ]
Line_10 $$ ZipEntry entry-->Line_14 $$ if (entry.isDirectory()) [ FD ]
Line_14 $$ if (entry.isDirectory()) -->Line_14 $$ if (entry.isDirectory()) [ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_14 $$ if (entry.isDirectory()) [ FD ]
Line_10 $$ ZipEntry entry-->Line_14 $$ if (entry.isDirectory()) [ FD ]
Line_14 $$ if (entry.isDirectory()) -->Line_15 $$ log.info("Creating directory: " + entryPath)[ CD ]
Line_14 $$ if (entry.isDirectory()) -->Line_16 $$ (new File(entryPath)).mkdir()[ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_19 $$ int count[ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_20 $$ byte data[] = new byte[BUFFER][ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_21 $$ FileOutputStream fos = new FileOutputStream(entryPath)[ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)[ CD ]
Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)-->Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)[ FD ]
Line_7 $$ BufferedOutputStream dest = null-->Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)[ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ CD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_11 $$ while ((entry = zis.getNextEntry()) != null) [ CD ]
Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ FD ]
Line_19 $$ int count-->Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ FD ]
Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ CD ]
Line_9 $$ ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis))-->Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ FD ]
Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_23 $$ dest.write(data, 0, count)[ CD ]
Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)-->Line_23 $$ dest.write(data, 0, count)[ FD ]
Line_7 $$ BufferedOutputStream dest = null-->Line_23 $$ dest.write(data, 0, count)[ FD ]
Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_23 $$ dest.write(data, 0, count)[ FD ]
Line_19 $$ int count-->Line_23 $$ dest.write(data, 0, count)[ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_24 $$ dest.flush()[ CD ]
Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)-->Line_24 $$ dest.flush()[ FD ]
Line_7 $$ BufferedOutputStream dest = null-->Line_24 $$ dest.flush()[ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_25 $$ dest.close()[ CD ]
Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)-->Line_25 $$ dest.close()[ FD ]
Line_7 $$ BufferedOutputStream dest = null-->Line_25 $$ dest.close()[ FD ]
Line_9 $$ ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis))-->Line_27 $$ zis.close()[ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ String entryPath = new StringBuilder(parent).append(System.getProperty("file.separator")).append(entry.getName()).toString()[ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_14 $$ if (entry.isDirectory()) [ FD ]
Line_11 $$ while ((entry = zis.getNextEntry()) != null) -->Line_14 $$ if (entry.isDirectory()) [ FD ]
Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)-->Line_24 $$ dest.flush()[ FD ]
Line_22 $$ dest = new BufferedOutputStream(fos, BUFFER)-->Line_25 $$ dest.close()[ FD ]
Line_23 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_23 $$ dest.write(data, 0, count)[ FD ]
