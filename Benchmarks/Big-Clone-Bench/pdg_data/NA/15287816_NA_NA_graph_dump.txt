Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Vector<Question> reload() throws IOException [ CD ]
Line_2 $$ public Vector<Question> reload() throws IOException -->Line_3 $$ Vector<Question> questions = new Vector<Question>()[ CD ]
Line_2 $$ public Vector<Question> reload() throws IOException -->Line_4 $$ InputStream is = url.openStream()[ CD ]
Line_4 $$ InputStream is = url.openStream()-->Line_4 $$ InputStream is = url.openStream()[ CD ]
Line_2 $$ public Vector<Question> reload() throws IOException -->Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ public Vector<Question> reload() throws IOException -->Line_6 $$ shortName = br.readLine()[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_6 $$ shortName = br.readLine()[ FD ]
Line_2 $$ public Vector<Question> reload() throws IOException -->Line_7 $$ if (shortName != null && shortName.equals("SHORTNAME")) [ CD ]
Line_7 $$ if (shortName != null && shortName.equals("SHORTNAME")) -->Line_8 $$ shortName = br.readLine()[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_8 $$ shortName = br.readLine()[ FD ]
Line_7 $$ if (shortName != null && shortName.equals("SHORTNAME")) -->Line_9 $$ author = br.readLine()[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_9 $$ author = br.readLine()[ FD ]
Line_7 $$ if (shortName != null && shortName.equals("SHORTNAME")) -->Line_10 $$ if (author != null && author.equals("AUTHOR")) [ CD ]
Line_10 $$ if (author != null && author.equals("AUTHOR")) -->Line_11 $$ author = br.readLine()[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_11 $$ author = br.readLine()[ FD ]
Line_10 $$ if (author != null && author.equals("AUTHOR")) -->Line_12 $$ description = br.readLine()[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_12 $$ description = br.readLine()[ FD ]
Line_10 $$ if (author != null && author.equals("AUTHOR")) -->Line_13 $$ if (description != null && description.equals("DESCRIPTION")) [ CD ]
Line_13 $$ if (description != null && description.equals("DESCRIPTION")) -->Line_14 $$ description = br.readLine()[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_14 $$ description = br.readLine()[ FD ]
Line_3 $$ Vector<Question> questions = new Vector<Question>()-->Line_16 $$ questions = QuestionLoader.getQuestions(br)[ FD ]
Line_16 $$ questions = QuestionLoader.getQuestions(br)-->Line_16 $$ questions = QuestionLoader.getQuestions(br)[ FD ]
Line_16 $$ questions = QuestionLoader.getQuestions(br)-->Line_16 $$ questions = QuestionLoader.getQuestions(br)[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_16 $$ questions = QuestionLoader.getQuestions(br)[ FD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_21 $$ br.close()[ FD ]
Line_4 $$ InputStream is = url.openStream()-->Line_22 $$ is.close()[ FD ]
Line_2 $$ public Vector<Question> reload() throws IOException -->Line_33 $$ return questions[ CD ]
