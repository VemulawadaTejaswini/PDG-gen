Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void copyClassFiles(File initFile, File destFile) [ CD ]
Line_2 $$ protected void copyClassFiles(File initFile, File destFile) -->Line_3 $$ if (initFile != null && destFile != null) [ CD ]
Line_3 $$ if (initFile != null && destFile != null) -->Line_4 $$ File[] children = initFile.listFiles()[ CD ]
Line_4 $$ File[] children = initFile.listFiles()-->Line_4 $$ File[] children = initFile.listFiles()[ CD ]
Line_2 $$ protected void copyClassFiles(File initFile, File destFile) -->Line_4 $$ File[] children = initFile.listFiles()[ FD ]
Line_3 $$ if (initFile != null && destFile != null) -->Line_5 $$ File childDestinationDirectory = null, destChild = null[ CD ]
Line_3 $$ if (initFile != null && destFile != null) -->Line_6 $$ FileInputStream in = null[ CD ]
Line_3 $$ if (initFile != null && destFile != null) -->Line_7 $$ FileOutputStream out = null[ CD ]
Line_3 $$ if (initFile != null && destFile != null) -->Line_8 $$ FileChannel cin = null, cout = null[ CD ]
Line_9 $$ for (File child : children) -->Line_10 $$ if (child != null) [ FD ]
Line_10 $$ if (child != null) -->Line_11 $$ if (child.isDirectory()) [ CD ]
Line_9 $$ for (File child : children) -->Line_11 $$ if (child.isDirectory()) [ FD ]
Line_11 $$ if (child.isDirectory()) -->Line_11 $$ if (child.isDirectory()) [ CD ]
Line_9 $$ for (File child : children) -->Line_11 $$ if (child.isDirectory()) [ FD ]
Line_11 $$ if (child.isDirectory()) -->Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())[ CD ]
Line_5 $$ File childDestinationDirectory = null, destChild = null-->Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())[ FD ]
Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())-->Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())[ FD ]
Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())-->Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())[ CD ]
Line_2 $$ protected void copyClassFiles(File initFile, File destFile) -->Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())[ FD ]
Line_9 $$ for (File child : children) -->Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())[ FD ]
Line_11 $$ if (child.isDirectory()) -->Line_13 $$ if (childDestinationDirectory == null) [ CD ]
Line_5 $$ File childDestinationDirectory = null, destChild = null-->Line_13 $$ if (childDestinationDirectory == null) [ FD ]
Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())-->Line_13 $$ if (childDestinationDirectory == null) [ FD ]
Line_5 $$ File childDestinationDirectory = null, destChild = null-->Line_15 $$ childDestinationDirectory = new File(destFile, child.getName())[ FD ]
Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())-->Line_15 $$ childDestinationDirectory = new File(destFile, child.getName())[ FD ]
Line_15 $$ childDestinationDirectory = new File(destFile, child.getName())-->Line_15 $$ childDestinationDirectory = new File(destFile, child.getName())[ FD ]
Line_9 $$ for (File child : children) -->Line_15 $$ childDestinationDirectory = new File(destFile, child.getName())[ FD ]
Line_5 $$ File childDestinationDirectory = null, destChild = null-->Line_16 $$ childDestinationDirectory.mkdir()[ FD ]
Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())-->Line_16 $$ childDestinationDirectory.mkdir()[ FD ]
Line_15 $$ childDestinationDirectory = new File(destFile, child.getName())-->Line_16 $$ childDestinationDirectory.mkdir()[ FD ]
Line_11 $$ if (child.isDirectory()) -->Line_21 $$ copyClassFiles(child, childDestinationDirectory)[ CD ]
Line_9 $$ for (File child : children) -->Line_21 $$ copyClassFiles(child, childDestinationDirectory)[ FD ]
Line_5 $$ File childDestinationDirectory = null, destChild = null-->Line_21 $$ copyClassFiles(child, childDestinationDirectory)[ FD ]
Line_12 $$ childDestinationDirectory = fileExistAsChild(destFile, child.getName())-->Line_21 $$ copyClassFiles(child, childDestinationDirectory)[ FD ]
Line_15 $$ childDestinationDirectory = new File(destFile, child.getName())-->Line_21 $$ copyClassFiles(child, childDestinationDirectory)[ FD ]
Line_5 $$ File childDestinationDirectory = null, destChild = null-->Line_24 $$ destChild = new File(destFile, child.getName())[ FD ]
Line_24 $$ destChild = new File(destFile, child.getName())-->Line_24 $$ destChild = new File(destFile, child.getName())[ FD ]
Line_9 $$ for (File child : children) -->Line_24 $$ destChild = new File(destFile, child.getName())[ FD ]
Line_6 $$ FileInputStream in = null-->Line_25 $$ in = new FileInputStream(child)[ FD ]
Line_25 $$ in = new FileInputStream(child)-->Line_25 $$ in = new FileInputStream(child)[ FD ]
Line_7 $$ FileOutputStream out = null-->Line_26 $$ out = new FileOutputStream(destChild)[ FD ]
Line_26 $$ out = new FileOutputStream(destChild)-->Line_26 $$ out = new FileOutputStream(destChild)[ FD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_27 $$ cin = in.getChannel()[ FD ]
Line_27 $$ cin = in.getChannel()-->Line_27 $$ cin = in.getChannel()[ FD ]
Line_27 $$ cin = in.getChannel()-->Line_27 $$ cin = in.getChannel()[ CD ]
Line_6 $$ FileInputStream in = null-->Line_27 $$ cin = in.getChannel()[ FD ]
Line_25 $$ in = new FileInputStream(child)-->Line_27 $$ cin = in.getChannel()[ FD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_28 $$ cout = out.getChannel()[ FD ]
Line_28 $$ cout = out.getChannel()-->Line_28 $$ cout = out.getChannel()[ FD ]
Line_28 $$ cout = out.getChannel()-->Line_28 $$ cout = out.getChannel()[ CD ]
Line_7 $$ FileOutputStream out = null-->Line_28 $$ cout = out.getChannel()[ FD ]
Line_26 $$ out = new FileOutputStream(destChild)-->Line_28 $$ cout = out.getChannel()[ FD ]
Line_29 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_29 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)[ CD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_31 $$ while (cin.position() < cin.size()) [ FD ]
Line_27 $$ cin = in.getChannel()-->Line_31 $$ while (cin.position() < cin.size()) [ FD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_31 $$ while (cin.position() < cin.size()) [ FD ]
Line_27 $$ cin = in.getChannel()-->Line_31 $$ while (cin.position() < cin.size()) [ FD ]
Line_31 $$ while (cin.position() < cin.size()) -->Line_32 $$ pos = cin.read(buffer)[ CD ]
Line_32 $$ pos = cin.read(buffer)-->Line_32 $$ pos = cin.read(buffer)[ FD ]
Line_30 $$ int pos = 0-->Line_32 $$ pos = cin.read(buffer)[ FD ]
Line_32 $$ pos = cin.read(buffer)-->Line_32 $$ pos = cin.read(buffer)[ CD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_32 $$ pos = cin.read(buffer)[ FD ]
Line_27 $$ cin = in.getChannel()-->Line_32 $$ pos = cin.read(buffer)[ FD ]
Line_29 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_32 $$ pos = cin.read(buffer)[ FD ]
Line_31 $$ while (cin.position() < cin.size()) -->Line_33 $$ if (pos > 0) [ CD ]
Line_32 $$ pos = cin.read(buffer)-->Line_33 $$ if (pos > 0) [ FD ]
Line_30 $$ int pos = 0-->Line_33 $$ if (pos > 0) [ FD ]
Line_33 $$ if (pos > 0) -->Line_34 $$ cout.write(buffer)[ CD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_34 $$ cout.write(buffer)[ FD ]
Line_28 $$ cout = out.getChannel()-->Line_34 $$ cout.write(buffer)[ FD ]
Line_29 $$ ByteBuffer buffer = ByteBuffer.allocate(1000)-->Line_34 $$ cout.write(buffer)[ FD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_37 $$ cin.close()[ FD ]
Line_27 $$ cin = in.getChannel()-->Line_37 $$ cin.close()[ FD ]
Line_8 $$ FileChannel cin = null, cout = null-->Line_38 $$ cout.close()[ FD ]
Line_28 $$ cout = out.getChannel()-->Line_38 $$ cout.close()[ FD ]
Line_32 $$ pos = cin.read(buffer)-->Line_33 $$ if (pos > 0) [ FD ]
