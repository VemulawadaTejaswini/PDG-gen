Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private PluginInterface getClasseJar(String arquivo) [ CD ]
Line_2 $$ private PluginInterface getClasseJar(String arquivo) -->Line_3 $$ URLClassLoader load[ CD ]
Line_5 $$ URL url = new URL("jar", "", "file:" + arquivo + "!/")-->Line_6 $$ JarURLConnection jar = (JarURLConnection) url.openConnection()[ FD ]
Line_7 $$ Enumeration arq = jar.getJarFile().entries()-->Line_7 $$ Enumeration arq = jar.getJarFile().entries()[ CD ]
Line_6 $$ JarURLConnection jar = (JarURLConnection) url.openConnection()-->Line_7 $$ Enumeration arq = jar.getJarFile().entries()[ FD ]
Line_3 $$ URLClassLoader load-->Line_8 $$ load = new URLClassLoader(new URL[] [ FD ]
Line_8 $$ load = new URLClassLoader(new URL[] -->Line_8 $$ load = new URLClassLoader(new URL[] [ FD ]
Line_9 $$ while (arq.hasMoreElements()) -->Line_9 $$ while (arq.hasMoreElements()) [ CD ]
Line_7 $$ Enumeration arq = jar.getJarFile().entries()-->Line_9 $$ while (arq.hasMoreElements()) [ FD ]
Line_9 $$ while (arq.hasMoreElements()) -->Line_10 $$ Object object = arq.nextElement()[ CD ]
Line_10 $$ Object object = arq.nextElement()-->Line_10 $$ Object object = arq.nextElement()[ CD ]
Line_7 $$ Enumeration arq = jar.getJarFile().entries()-->Line_10 $$ Object object = arq.nextElement()[ FD ]
Line_9 $$ while (arq.hasMoreElements()) -->Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) [ CD ]
Line_10 $$ Object object = arq.nextElement()-->Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) [ FD ]
Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) -->Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) [ CD ]
Line_10 $$ Object object = arq.nextElement()-->Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) [ FD ]
Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) -->Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))[ CD ]
Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))-->Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))[ CD ]
Line_3 $$ URLClassLoader load-->Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))[ FD ]
Line_8 $$ load = new URLClassLoader(new URL[] -->Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))[ FD ]
Line_10 $$ Object object = arq.nextElement()-->Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))[ FD ]
Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))-->Line_13 $$ pl = (PluginInterface) cl.newInstance()[ FD ]
Line_2 $$ private PluginInterface getClasseJar(String arquivo) -->Line_27 $$ return pl[ CD ]
Line_10 $$ Object object = arq.nextElement()-->Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) [ FD ]
Line_10 $$ Object object = arq.nextElement()-->Line_11 $$ if (object.toString().contains(".class") && !object.toString().contains("PluginInterface.class")) [ FD ]
Line_10 $$ Object object = arq.nextElement()-->Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))[ FD ]
Line_12 $$ Class cl = load.loadClass(object.toString().replace(".class", ""))-->Line_13 $$ pl = (PluginInterface) cl.newInstance()[ FD ]
