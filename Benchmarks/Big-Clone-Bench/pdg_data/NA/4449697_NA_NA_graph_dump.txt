Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) [ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_3 $$ float a, b[ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_4 $$ int tempI, tempR[ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_5 $$ float tempF[ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_6 $$ int len = g.nodeList[parent].edges.length[ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_7 $$ int[] nodes = new int[len][ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_8 $$ float[] dists = new float[len][ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_9 $$ int[] ref = new int[len][ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_10 $$ if (len == 0)[ CD ]
Line_6 $$ int len = g.nodeList[parent].edges.length-->Line_10 $$ if (len == 0)[ FD ]
Line_10 $$ if (len == 0)-->Line_10 $$ return null[ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_11 $$ if (len == 1) [ CD ]
Line_6 $$ int len = g.nodeList[parent].edges.length-->Line_11 $$ if (len == 1) [ FD ]
Line_11 $$ if (len == 1) -->Line_12 $$ ref[0] = 0[ CD ]
Line_11 $$ if (len == 1) -->Line_13 $$ return ref[ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_15 $$ for (int i = 0; i < len; i++) [ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) [ CD ]
Line_6 $$ int len = g.nodeList[parent].edges.length-->Line_15 $$ for (int i = 0; i < len; i++) [ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_15 $$ for (int i = 0; i < len; i++) [ CD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_15 $$ for (int i = 0; i < len; i++) [ CD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_15 $$ for (int i = 0; i < len; i++) [ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_16 $$ nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i])[ CD ]
Line_16 $$ nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i])-->Line_16 $$ nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i])[ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_16 $$ nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i])[ FD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_16 $$ nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i])[ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_17 $$ a = g.nodeList[nodes[i]].x - g.nodeList[goal].x[ CD ]
Line_17 $$ a = g.nodeList[nodes[i]].x - g.nodeList[goal].x-->Line_17 $$ a = g.nodeList[nodes[i]].x - g.nodeList[goal].x[ FD ]
Line_3 $$ float a, b-->Line_17 $$ a = g.nodeList[nodes[i]].x - g.nodeList[goal].x[ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_18 $$ b = g.nodeList[nodes[i]].y - g.nodeList[goal].y[ CD ]
Line_18 $$ b = g.nodeList[nodes[i]].y - g.nodeList[goal].y-->Line_18 $$ b = g.nodeList[nodes[i]].y - g.nodeList[goal].y[ FD ]
Line_3 $$ float a, b-->Line_18 $$ b = g.nodeList[nodes[i]].y - g.nodeList[goal].y[ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_19 $$ dists[i] = (float) Math.sqrt(a * a + b * b)[ CD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_20 $$ ref[i] = i[ CD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_20 $$ ref[i] = i[ FD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ CD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) [ CD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ FD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ CD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ CD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ FD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_23 $$ for (int j = 0; j < i; j++) [ CD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ CD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_23 $$ for (int j = 0; j < i; j++) [ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_23 $$ for (int j = 0; j < i; j++) [ FD ]
Line_23 $$ for (int j = 0; j < i; j++) -->Line_23 $$ for (int j = 0; j < i; j++) [ CD ]
Line_23 $$ for (int j = 0; j < i; j++) -->Line_23 $$ for (int j = 0; j < i; j++) [ CD ]
Line_23 $$ for (int j = 0; j < i; j++) -->Line_23 $$ for (int j = 0; j < i; j++) [ FD ]
Line_23 $$ for (int j = 0; j < i; j++) -->Line_24 $$ if (dists[j] > dists[j + 1]) [ CD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_25 $$ tempI = nodes[j][ CD ]
Line_25 $$ tempI = nodes[j]-->Line_25 $$ tempI = nodes[j][ FD ]
Line_4 $$ int tempI, tempR-->Line_25 $$ tempI = nodes[j][ FD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_26 $$ nodes[j] = nodes[j + 1][ CD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_27 $$ nodes[j + 1] = tempI[ CD ]
Line_25 $$ tempI = nodes[j]-->Line_27 $$ nodes[j + 1] = tempI[ FD ]
Line_4 $$ int tempI, tempR-->Line_27 $$ nodes[j + 1] = tempI[ FD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_28 $$ tempF = dists[j][ CD ]
Line_28 $$ tempF = dists[j]-->Line_28 $$ tempF = dists[j][ FD ]
Line_5 $$ float tempF-->Line_28 $$ tempF = dists[j][ FD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_29 $$ dists[j] = dists[j + 1][ CD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_30 $$ dists[j + 1] = tempF[ CD ]
Line_28 $$ tempF = dists[j]-->Line_30 $$ dists[j + 1] = tempF[ FD ]
Line_5 $$ float tempF-->Line_30 $$ dists[j + 1] = tempF[ FD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_31 $$ tempR = ref[j][ CD ]
Line_31 $$ tempR = ref[j]-->Line_31 $$ tempR = ref[j][ FD ]
Line_4 $$ int tempI, tempR-->Line_31 $$ tempR = ref[j][ FD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_32 $$ ref[j] = ref[j + 1][ CD ]
Line_24 $$ if (dists[j] > dists[j + 1]) -->Line_33 $$ ref[j + 1] = tempR[ CD ]
Line_31 $$ tempR = ref[j]-->Line_33 $$ ref[j + 1] = tempR[ FD ]
Line_4 $$ int tempI, tempR-->Line_33 $$ ref[j + 1] = tempR[ FD ]
Line_2 $$ private int[] sortNodesToGoal(Graph g, int parent, int goal) -->Line_37 $$ return ref[ CD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_15 $$ for (int i = 0; i < len; i++) [ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_15 $$ for (int i = 0; i < len; i++) [ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_15 $$ for (int i = 0; i < len; i++) [ FD ]
Line_15 $$ for (int i = 0; i < len; i++) -->Line_20 $$ ref[i] = i[ FD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ FD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ FD ]
Line_22 $$ for (int i = len - 1; i >= 0; i--) -->Line_22 $$ for (int i = len - 1; i >= 0; i--) [ FD ]
Line_23 $$ for (int j = 0; j < i; j++) -->Line_23 $$ for (int j = 0; j < i; j++) [ FD ]
Line_23 $$ for (int j = 0; j < i; j++) -->Line_23 $$ for (int j = 0; j < i; j++) [ FD ]
Line_23 $$ for (int j = 0; j < i; j++) -->Line_23 $$ for (int j = 0; j < i; j++) [ FD ]
Line_25 $$ tempI = nodes[j]-->Line_27 $$ nodes[j + 1] = tempI[ FD ]
Line_28 $$ tempF = dists[j]-->Line_30 $$ dists[j + 1] = tempF[ FD ]
Line_31 $$ tempR = ref[j]-->Line_33 $$ ref[j + 1] = tempR[ FD ]
