Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_3 $$ HttpClient client = new HttpClient()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_4 $$ byte[] result = null[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_5 $$ if (method.equalsIgnoreCase("get")) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_5 $$ if (method.equalsIgnoreCase("get")) [ FD ]
Line_5 $$ if (method.equalsIgnoreCase("get")) -->Line_5 $$ if (method.equalsIgnoreCase("get")) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_5 $$ if (method.equalsIgnoreCase("get")) [ FD ]
Line_5 $$ if (method.equalsIgnoreCase("get")) -->Line_6 $$ GetMethod getMethod = new GetMethod(url)[ CD ]
Line_5 $$ if (method.equalsIgnoreCase("get")) -->Line_7 $$ if (contentType == null || contentType.equals(""))[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_7 $$ if (contentType == null || contentType.equals(""))[ FD ]
Line_7 $$ if (contentType == null || contentType.equals(""))-->Line_7 $$ getMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")[ CD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_7 $$ getMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")[ FD ]
Line_7 $$ if (contentType == null || contentType.equals(""))-->Line_7 $$ getMethod.setRequestHeader("Content-Type", contentType)[ CD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_7 $$ getMethod.setRequestHeader("Content-Type", contentType)[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_7 $$ getMethod.setRequestHeader("Content-Type", contentType)[ FD ]
Line_5 $$ if (method.equalsIgnoreCase("get")) -->Line_8 $$ if (headers != null && headers.size() > 0) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_8 $$ if (headers != null && headers.size() > 0) [ FD ]
Line_8 $$ if (headers != null && headers.size() > 0) -->Line_9 $$ Iterator<String> keys = headers.keySet().iterator()[ CD ]
Line_9 $$ Iterator<String> keys = headers.keySet().iterator()-->Line_9 $$ Iterator<String> keys = headers.keySet().iterator()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_9 $$ Iterator<String> keys = headers.keySet().iterator()[ FD ]
Line_8 $$ if (headers != null && headers.size() > 0) -->Line_10 $$ while (keys.hasNext()) [ CD ]
Line_8 $$ if (headers != null && headers.size() > 0) -->Line_8 $$ if (headers != null && headers.size() > 0) [ CD ]
Line_10 $$ while (keys.hasNext()) -->Line_10 $$ while (keys.hasNext()) [ CD ]
Line_9 $$ Iterator<String> keys = headers.keySet().iterator()-->Line_10 $$ while (keys.hasNext()) [ FD ]
Line_10 $$ while (keys.hasNext()) -->Line_11 $$ String key = keys.next()[ CD ]
Line_11 $$ String key = keys.next()-->Line_11 $$ String key = keys.next()[ CD ]
Line_9 $$ Iterator<String> keys = headers.keySet().iterator()-->Line_11 $$ String key = keys.next()[ FD ]
Line_10 $$ while (keys.hasNext()) -->Line_12 $$ getMethod.setRequestHeader(key, headers.get(key))[ CD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_12 $$ getMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_11 $$ String key = keys.next()-->Line_12 $$ getMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_12 $$ getMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_11 $$ String key = keys.next()-->Line_12 $$ getMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_17 $$ if (params != null) [ FD ]
Line_17 $$ if (params != null) -->Line_18 $$ if (secretCode == null)[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_18 $$ if (secretCode == null)[ FD ]
Line_18 $$ if (secretCode == null)-->Line_18 $$ getData = new NameValuePair[params.size()][ CD ]
Line_16 $$ NameValuePair[] getData-->Line_18 $$ getData = new NameValuePair[params.size()][ FD ]
Line_18 $$ getData = new NameValuePair[params.size()]-->Line_18 $$ getData = new NameValuePair[params.size()][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_18 $$ getData = new NameValuePair[params.size()][ FD ]
Line_18 $$ if (secretCode == null)-->Line_18 $$ getData = new NameValuePair[params.size() + 1][ CD ]
Line_16 $$ NameValuePair[] getData-->Line_18 $$ getData = new NameValuePair[params.size() + 1][ FD ]
Line_18 $$ getData = new NameValuePair[params.size()]-->Line_18 $$ getData = new NameValuePair[params.size() + 1][ FD ]
Line_18 $$ getData = new NameValuePair[params.size() + 1]-->Line_18 $$ getData = new NameValuePair[params.size() + 1][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_18 $$ getData = new NameValuePair[params.size() + 1][ FD ]
Line_17 $$ if (params != null) -->Line_19 $$ Iterator<?> iters = params.keySet().iterator()[ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_19 $$ Iterator<?> iters = params.keySet().iterator()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_19 $$ Iterator<?> iters = params.keySet().iterator()[ FD ]
Line_17 $$ if (params != null) -->Line_20 $$ int i = 0[ CD ]
Line_17 $$ if (params != null) -->Line_21 $$ while (iters.hasNext()) [ CD ]
Line_17 $$ if (params != null) -->Line_17 $$ if (params != null) [ CD ]
Line_21 $$ while (iters.hasNext()) -->Line_21 $$ while (iters.hasNext()) [ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_21 $$ while (iters.hasNext()) [ FD ]
Line_21 $$ while (iters.hasNext()) -->Line_22 $$ String key = (String) iters.next()[ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_22 $$ String key = (String) iters.next()[ FD ]
Line_21 $$ while (iters.hasNext()) -->Line_23 $$ getData[i] = new NameValuePair(key, params.get(key).toString())[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_23 $$ getData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_23 $$ getData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_11 $$ String key = keys.next()-->Line_23 $$ getData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_21 $$ while (iters.hasNext()) -->Line_24 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_24 $$ i++[ FD ]
Line_17 $$ if (params != null) -->Line_26 $$ if (secretCode != null) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_26 $$ if (secretCode != null) [ FD ]
Line_26 $$ if (secretCode != null) -->Line_27 $$ boolean isHMac = false[ CD ]
Line_26 $$ if (secretCode != null) -->Line_28 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_28 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))[ FD ]
Line_28 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))-->Line_28 $$ isHMac = true[ CD ]
Line_27 $$ boolean isHMac = false-->Line_28 $$ isHMac = true[ FD ]
Line_28 $$ isHMac = true-->Line_28 $$ isHMac = true[ FD ]
Line_26 $$ if (secretCode != null) -->Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)[ CD ]
Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)-->Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)[ FD ]
Line_27 $$ boolean isHMac = false-->Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)[ FD ]
Line_28 $$ isHMac = true-->Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_29 $$ String sign = EncryptUtil.signature2(params, secretCode, "md5".equalsIgnoreCase(signMethod), isHMac, PARAMETER_SIGN)[ FD ]
Line_26 $$ if (secretCode != null) -->Line_30 $$ getData[i] = new NameValuePair(PARAMETER_SIGN, sign)[ CD ]
Line_17 $$ if (params != null) -->Line_32 $$ getMethod.setQueryString(getData)[ CD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_32 $$ getMethod.setQueryString(getData)[ FD ]
Line_16 $$ NameValuePair[] getData-->Line_32 $$ getMethod.setQueryString(getData)[ FD ]
Line_18 $$ getData = new NameValuePair[params.size()]-->Line_32 $$ getMethod.setQueryString(getData)[ FD ]
Line_18 $$ getData = new NameValuePair[params.size() + 1]-->Line_32 $$ getMethod.setQueryString(getData)[ FD ]
Line_3 $$ HttpClient client = new HttpClient()-->Line_34 $$ client.executeMethod(getMethod)[ FD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_34 $$ client.executeMethod(getMethod)[ FD ]
Line_37 $$ InputStream in = getMethod.getResponseBodyAsStream()-->Line_37 $$ InputStream in = getMethod.getResponseBodyAsStream()[ CD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_37 $$ InputStream in = getMethod.getResponseBodyAsStream()[ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_40 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_39 $$ int count = 0-->Line_40 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_40 $$ while ((count = in.read(buf)) > 0) [ CD ]
Line_37 $$ InputStream in = getMethod.getResponseBodyAsStream()-->Line_40 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_38 $$ byte[] buf = new byte[500]-->Line_40 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_41 $$ bout.write(buf, 0, count)[ CD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_41 $$ bout.write(buf, 0, count)[ FD ]
Line_38 $$ byte[] buf = new byte[500]-->Line_41 $$ bout.write(buf, 0, count)[ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_41 $$ bout.write(buf, 0, count)[ FD ]
Line_39 $$ int count = 0-->Line_41 $$ bout.write(buf, 0, count)[ FD ]
Line_4 $$ byte[] result = null-->Line_43 $$ result = bout.toByteArray()[ FD ]
Line_43 $$ result = bout.toByteArray()-->Line_43 $$ result = bout.toByteArray()[ FD ]
Line_43 $$ result = bout.toByteArray()-->Line_43 $$ result = bout.toByteArray()[ CD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_43 $$ result = bout.toByteArray()[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_47 $$ if (bout != null)[ FD ]
Line_47 $$ if (bout != null)-->Line_47 $$ bout.close()[ CD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_47 $$ bout.close()[ FD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_52 $$ if (getMethod != null)[ FD ]
Line_52 $$ if (getMethod != null)-->Line_52 $$ getMethod.releaseConnection()[ CD ]
Line_6 $$ GetMethod getMethod = new GetMethod(url)-->Line_52 $$ getMethod.releaseConnection()[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_55 $$ if (method.equalsIgnoreCase("post")) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_55 $$ if (method.equalsIgnoreCase("post")) [ FD ]
Line_55 $$ if (method.equalsIgnoreCase("post")) -->Line_55 $$ if (method.equalsIgnoreCase("post")) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_55 $$ if (method.equalsIgnoreCase("post")) [ FD ]
Line_55 $$ if (method.equalsIgnoreCase("post")) -->Line_56 $$ PostMethod postMethod = new PostMethod(url)[ CD ]
Line_55 $$ if (method.equalsIgnoreCase("post")) -->Line_57 $$ if (headers != null && headers.size() > 0) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_57 $$ if (headers != null && headers.size() > 0) [ FD ]
Line_57 $$ if (headers != null && headers.size() > 0) -->Line_58 $$ Iterator<String> keys = headers.keySet().iterator()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_58 $$ Iterator<String> keys = headers.keySet().iterator()[ FD ]
Line_57 $$ if (headers != null && headers.size() > 0) -->Line_59 $$ while (keys.hasNext()) [ CD ]
Line_57 $$ if (headers != null && headers.size() > 0) -->Line_57 $$ if (headers != null && headers.size() > 0) [ CD ]
Line_59 $$ while (keys.hasNext()) -->Line_59 $$ while (keys.hasNext()) [ CD ]
Line_9 $$ Iterator<String> keys = headers.keySet().iterator()-->Line_59 $$ while (keys.hasNext()) [ FD ]
Line_59 $$ while (keys.hasNext()) -->Line_60 $$ String key = keys.next()[ CD ]
Line_60 $$ String key = keys.next()-->Line_60 $$ String key = keys.next()[ CD ]
Line_9 $$ Iterator<String> keys = headers.keySet().iterator()-->Line_60 $$ String key = keys.next()[ FD ]
Line_59 $$ while (keys.hasNext()) -->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ CD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_60 $$ String key = keys.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_11 $$ String key = keys.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_60 $$ String key = keys.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_11 $$ String key = keys.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_65 $$ if (contentType == null) [ FD ]
Line_65 $$ if (contentType == null) -->Line_66 $$ if (files != null && files.size() > 0) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_66 $$ if (files != null && files.size() > 0) [ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_67 $$ Part[] parts[ CD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_68 $$ if (secretCode == null)[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_68 $$ if (secretCode == null)[ FD ]
Line_68 $$ if (secretCode == null)-->Line_68 $$ parts = new Part[params.size() + files.size()][ CD ]
Line_67 $$ Part[] parts-->Line_68 $$ parts = new Part[params.size() + files.size()][ FD ]
Line_68 $$ parts = new Part[params.size() + files.size()]-->Line_68 $$ parts = new Part[params.size() + files.size()][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_68 $$ parts = new Part[params.size() + files.size()][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_68 $$ parts = new Part[params.size() + files.size()][ FD ]
Line_68 $$ if (secretCode == null)-->Line_68 $$ parts = new Part[params.size() + 1 + files.size()][ CD ]
Line_67 $$ Part[] parts-->Line_68 $$ parts = new Part[params.size() + 1 + files.size()][ FD ]
Line_68 $$ parts = new Part[params.size() + files.size()]-->Line_68 $$ parts = new Part[params.size() + 1 + files.size()][ FD ]
Line_68 $$ parts = new Part[params.size() + 1 + files.size()]-->Line_68 $$ parts = new Part[params.size() + 1 + files.size()][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_68 $$ parts = new Part[params.size() + 1 + files.size()][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_68 $$ parts = new Part[params.size() + 1 + files.size()][ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_69 $$ Iterator<?> iters = params.keySet().iterator()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_69 $$ Iterator<?> iters = params.keySet().iterator()[ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_71 $$ while (iters.hasNext()) [ CD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_66 $$ if (files != null && files.size() > 0) [ CD ]
Line_71 $$ while (iters.hasNext()) -->Line_71 $$ while (iters.hasNext()) [ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_71 $$ while (iters.hasNext()) [ FD ]
Line_71 $$ while (iters.hasNext()) -->Line_72 $$ String key = (String) iters.next()[ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_72 $$ String key = (String) iters.next()[ FD ]
Line_71 $$ while (iters.hasNext()) -->Line_73 $$ parts[i] = new StringPart(key, params.get(key).toString(), "UTF-8")[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_73 $$ parts[i] = new StringPart(key, params.get(key).toString(), "UTF-8")[ FD ]
Line_72 $$ String key = (String) iters.next()-->Line_73 $$ parts[i] = new StringPart(key, params.get(key).toString(), "UTF-8")[ FD ]
Line_60 $$ String key = keys.next()-->Line_73 $$ parts[i] = new StringPart(key, params.get(key).toString(), "UTF-8")[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_73 $$ parts[i] = new StringPart(key, params.get(key).toString(), "UTF-8")[ FD ]
Line_11 $$ String key = keys.next()-->Line_73 $$ parts[i] = new StringPart(key, params.get(key).toString(), "UTF-8")[ FD ]
Line_71 $$ while (iters.hasNext()) -->Line_74 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_74 $$ i++[ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_76 $$ if (secretCode != null) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_76 $$ if (secretCode != null) [ FD ]
Line_76 $$ if (secretCode != null) -->Line_78 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_78 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))[ FD ]
Line_78 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))-->Line_78 $$ isHMac = true[ CD ]
Line_27 $$ boolean isHMac = false-->Line_78 $$ isHMac = true[ FD ]
Line_28 $$ isHMac = true-->Line_78 $$ isHMac = true[ FD ]
Line_78 $$ isHMac = true-->Line_78 $$ isHMac = true[ FD ]
Line_76 $$ if (secretCode != null) -->Line_79 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_79 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_79 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_27 $$ boolean isHMac = false-->Line_79 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_28 $$ isHMac = true-->Line_79 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_78 $$ isHMac = true-->Line_79 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_76 $$ if (secretCode != null) -->Line_80 $$ parts[i] = new StringPart(PARAMETER_SIGN, sign)[ CD ]
Line_76 $$ if (secretCode != null) -->Line_81 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_81 $$ i++[ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_83 $$ iters = files.keySet().iterator()[ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_83 $$ iters = files.keySet().iterator()[ FD ]
Line_83 $$ iters = files.keySet().iterator()-->Line_83 $$ iters = files.keySet().iterator()[ FD ]
Line_83 $$ iters = files.keySet().iterator()-->Line_83 $$ iters = files.keySet().iterator()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_83 $$ iters = files.keySet().iterator()[ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_84 $$ while (iters.hasNext()) [ CD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_66 $$ if (files != null && files.size() > 0) [ CD ]
Line_84 $$ while (iters.hasNext()) -->Line_84 $$ while (iters.hasNext()) [ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_84 $$ while (iters.hasNext()) [ FD ]
Line_83 $$ iters = files.keySet().iterator()-->Line_84 $$ while (iters.hasNext()) [ FD ]
Line_84 $$ while (iters.hasNext()) -->Line_85 $$ String key = (String) iters.next()[ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_85 $$ String key = (String) iters.next()[ FD ]
Line_83 $$ iters = files.keySet().iterator()-->Line_85 $$ String key = (String) iters.next()[ FD ]
Line_84 $$ while (iters.hasNext()) -->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ CD ]
Line_86 $$ if (files.get(key).toString().startsWith("http://")) -->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ FD ]
Line_85 $$ String key = (String) iters.next()-->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ FD ]
Line_72 $$ String key = (String) iters.next()-->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ FD ]
Line_60 $$ String key = keys.next()-->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ FD ]
Line_11 $$ String key = keys.next()-->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ FD ]
Line_86 $$ if (files.get(key).toString().startsWith("http://")) -->Line_87 $$ InputStream bin = null[ CD ]
Line_86 $$ if (files.get(key).toString().startsWith("http://")) -->Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_90 $$ URL fileurl = new URL(files.get(key).toString())[ FD ]
Line_85 $$ String key = (String) iters.next()-->Line_90 $$ URL fileurl = new URL(files.get(key).toString())[ FD ]
Line_72 $$ String key = (String) iters.next()-->Line_90 $$ URL fileurl = new URL(files.get(key).toString())[ FD ]
Line_60 $$ String key = keys.next()-->Line_90 $$ URL fileurl = new URL(files.get(key).toString())[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_90 $$ URL fileurl = new URL(files.get(key).toString())[ FD ]
Line_11 $$ String key = keys.next()-->Line_90 $$ URL fileurl = new URL(files.get(key).toString())[ FD ]
Line_87 $$ InputStream bin = null-->Line_91 $$ bin = fileurl.openStream()[ FD ]
Line_91 $$ bin = fileurl.openStream()-->Line_91 $$ bin = fileurl.openStream()[ FD ]
Line_91 $$ bin = fileurl.openStream()-->Line_91 $$ bin = fileurl.openStream()[ CD ]
Line_90 $$ URL fileurl = new URL(files.get(key).toString())-->Line_91 $$ bin = fileurl.openStream()[ FD ]
Line_94 $$ while ((count = bin.read(buf)) > 0) -->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_93 $$ int count = 0-->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_39 $$ int count = 0-->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_94 $$ while ((count = bin.read(buf)) > 0) -->Line_94 $$ while ((count = bin.read(buf)) > 0) [ CD ]
Line_87 $$ InputStream bin = null-->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_91 $$ bin = fileurl.openStream()-->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_92 $$ byte[] buf = new byte[500]-->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_38 $$ byte[] buf = new byte[500]-->Line_94 $$ while ((count = bin.read(buf)) > 0) [ FD ]
Line_94 $$ while ((count = bin.read(buf)) > 0) -->Line_95 $$ bout.write(buf, 0, count)[ CD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_92 $$ byte[] buf = new byte[500]-->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_38 $$ byte[] buf = new byte[500]-->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_94 $$ while ((count = bin.read(buf)) > 0) -->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_93 $$ int count = 0-->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_39 $$ int count = 0-->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_90 $$ URL fileurl = new URL(files.get(key).toString())-->Line_97 $$ parts[i] = new FilePart(key, new ByteArrayPartSource(fileurl.getFile().substring(fileurl.getFile().lastIndexOf("/") + 1), bout.toByteArray()))[ FD ]
Line_90 $$ URL fileurl = new URL(files.get(key).toString())-->Line_97 $$ parts[i] = new FilePart(key, new ByteArrayPartSource(fileurl.getFile().substring(fileurl.getFile().lastIndexOf("/") + 1), bout.toByteArray()))[ FD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_97 $$ parts[i] = new FilePart(key, new ByteArrayPartSource(fileurl.getFile().substring(fileurl.getFile().lastIndexOf("/") + 1), bout.toByteArray()))[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_97 $$ parts[i] = new FilePart(key, new ByteArrayPartSource(fileurl.getFile().substring(fileurl.getFile().lastIndexOf("/") + 1), bout.toByteArray()))[ FD ]
Line_87 $$ InputStream bin = null-->Line_101 $$ if (bin != null)[ FD ]
Line_91 $$ bin = fileurl.openStream()-->Line_101 $$ if (bin != null)[ FD ]
Line_101 $$ if (bin != null)-->Line_101 $$ bin.close()[ CD ]
Line_87 $$ InputStream bin = null-->Line_101 $$ bin.close()[ FD ]
Line_91 $$ bin = fileurl.openStream()-->Line_101 $$ bin.close()[ FD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_102 $$ if (bout != null)[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_102 $$ if (bout != null)[ FD ]
Line_102 $$ if (bout != null)-->Line_102 $$ bout.close()[ CD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_102 $$ bout.close()[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_102 $$ bout.close()[ FD ]
Line_86 $$ if (files.get(key).toString().startsWith("http://")) -->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ FD ]
Line_85 $$ String key = (String) iters.next()-->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ FD ]
Line_72 $$ String key = (String) iters.next()-->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ FD ]
Line_60 $$ String key = keys.next()-->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ FD ]
Line_11 $$ String key = keys.next()-->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ FD ]
Line_84 $$ while (iters.hasNext()) -->Line_105 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_105 $$ i++[ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_107 $$ postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams()))[ CD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_107 $$ postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams()))[ FD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_107 $$ postMethod.setRequestEntity(new MultipartRequestEntity(parts, postMethod.getParams()))[ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_109 $$ NameValuePair[] postData[ CD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_110 $$ if (params != null) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_110 $$ if (params != null) [ FD ]
Line_110 $$ if (params != null) -->Line_111 $$ if (secretCode == null)[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_111 $$ if (secretCode == null)[ FD ]
Line_111 $$ if (secretCode == null)-->Line_111 $$ postData = new NameValuePair[params.size()][ CD ]
Line_109 $$ NameValuePair[] postData-->Line_111 $$ postData = new NameValuePair[params.size()][ FD ]
Line_111 $$ postData = new NameValuePair[params.size()]-->Line_111 $$ postData = new NameValuePair[params.size()][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_111 $$ postData = new NameValuePair[params.size()][ FD ]
Line_111 $$ if (secretCode == null)-->Line_111 $$ postData = new NameValuePair[params.size() + 1][ CD ]
Line_109 $$ NameValuePair[] postData-->Line_111 $$ postData = new NameValuePair[params.size() + 1][ FD ]
Line_111 $$ postData = new NameValuePair[params.size()]-->Line_111 $$ postData = new NameValuePair[params.size() + 1][ FD ]
Line_111 $$ postData = new NameValuePair[params.size() + 1]-->Line_111 $$ postData = new NameValuePair[params.size() + 1][ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_111 $$ postData = new NameValuePair[params.size() + 1][ FD ]
Line_110 $$ if (params != null) -->Line_112 $$ Iterator<?> iters = params.keySet().iterator()[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_112 $$ Iterator<?> iters = params.keySet().iterator()[ FD ]
Line_110 $$ if (params != null) -->Line_114 $$ while (iters.hasNext()) [ CD ]
Line_110 $$ if (params != null) -->Line_110 $$ if (params != null) [ CD ]
Line_114 $$ while (iters.hasNext()) -->Line_114 $$ while (iters.hasNext()) [ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_114 $$ while (iters.hasNext()) [ FD ]
Line_83 $$ iters = files.keySet().iterator()-->Line_114 $$ while (iters.hasNext()) [ FD ]
Line_114 $$ while (iters.hasNext()) -->Line_115 $$ String key = (String) iters.next()[ CD ]
Line_19 $$ Iterator<?> iters = params.keySet().iterator()-->Line_115 $$ String key = (String) iters.next()[ FD ]
Line_83 $$ iters = files.keySet().iterator()-->Line_115 $$ String key = (String) iters.next()[ FD ]
Line_114 $$ while (iters.hasNext()) -->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_115 $$ String key = (String) iters.next()-->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_85 $$ String key = (String) iters.next()-->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_72 $$ String key = (String) iters.next()-->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_60 $$ String key = keys.next()-->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_11 $$ String key = keys.next()-->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_114 $$ while (iters.hasNext()) -->Line_117 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_117 $$ i++[ FD ]
Line_110 $$ if (params != null) -->Line_119 $$ if (secretCode != null) [ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_119 $$ if (secretCode != null) [ FD ]
Line_119 $$ if (secretCode != null) -->Line_121 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_121 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))[ FD ]
Line_121 $$ if (signMethod != null && signMethod.equalsIgnoreCase("hmac"))-->Line_121 $$ isHMac = true[ CD ]
Line_27 $$ boolean isHMac = false-->Line_121 $$ isHMac = true[ FD ]
Line_28 $$ isHMac = true-->Line_121 $$ isHMac = true[ FD ]
Line_78 $$ isHMac = true-->Line_121 $$ isHMac = true[ FD ]
Line_121 $$ isHMac = true-->Line_121 $$ isHMac = true[ FD ]
Line_119 $$ if (secretCode != null) -->Line_122 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_122 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_122 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_27 $$ boolean isHMac = false-->Line_122 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_28 $$ isHMac = true-->Line_122 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_78 $$ isHMac = true-->Line_122 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_121 $$ isHMac = true-->Line_122 $$ String sign = EncryptUtil.signature(params, secretCode, isHMac, PARAMETER_SIGN)[ FD ]
Line_119 $$ if (secretCode != null) -->Line_123 $$ postData[i] = new NameValuePair(PARAMETER_SIGN, sign)[ CD ]
Line_110 $$ if (params != null) -->Line_125 $$ postMethod.setRequestBody(postData)[ CD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_125 $$ postMethod.setRequestBody(postData)[ FD ]
Line_109 $$ NameValuePair[] postData-->Line_125 $$ postMethod.setRequestBody(postData)[ FD ]
Line_111 $$ postData = new NameValuePair[params.size()]-->Line_125 $$ postMethod.setRequestBody(postData)[ FD ]
Line_111 $$ postData = new NameValuePair[params.size() + 1]-->Line_125 $$ postMethod.setRequestBody(postData)[ FD ]
Line_66 $$ if (files != null && files.size() > 0) -->Line_127 $$ if (contentType == null || contentType.equals(""))[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_127 $$ if (contentType == null || contentType.equals(""))[ FD ]
Line_127 $$ if (contentType == null || contentType.equals(""))-->Line_127 $$ postMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")[ CD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_127 $$ postMethod.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8")[ FD ]
Line_65 $$ if (contentType == null) -->Line_130 $$ String content = (String) params.get(params.keySet().iterator().next())[ CD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_130 $$ String content = (String) params.get(params.keySet().iterator().next())[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_130 $$ String content = (String) params.get(params.keySet().iterator().next())[ FD ]
Line_65 $$ if (contentType == null) -->Line_131 $$ RequestEntity entiry = new StringRequestEntity(content, contentType, "UTF-8")[ CD ]
Line_65 $$ if (contentType == null) -->Line_132 $$ postMethod.setRequestEntity(entiry)[ CD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_132 $$ postMethod.setRequestEntity(entiry)[ FD ]
Line_131 $$ RequestEntity entiry = new StringRequestEntity(content, contentType, "UTF-8")-->Line_132 $$ postMethod.setRequestEntity(entiry)[ FD ]
Line_3 $$ HttpClient client = new HttpClient()-->Line_134 $$ client.executeMethod(postMethod)[ FD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_134 $$ client.executeMethod(postMethod)[ FD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_137 $$ InputStream in = postMethod.getResponseBodyAsStream()[ FD ]
Line_140 $$ while ((count = in.read(buf)) > 0) -->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_94 $$ while ((count = bin.read(buf)) > 0) -->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_93 $$ int count = 0-->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_39 $$ int count = 0-->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_140 $$ while ((count = in.read(buf)) > 0) -->Line_140 $$ while ((count = in.read(buf)) > 0) [ CD ]
Line_37 $$ InputStream in = getMethod.getResponseBodyAsStream()-->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_92 $$ byte[] buf = new byte[500]-->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_38 $$ byte[] buf = new byte[500]-->Line_140 $$ while ((count = in.read(buf)) > 0) [ FD ]
Line_140 $$ while ((count = in.read(buf)) > 0) -->Line_141 $$ bout.write(buf, 0, count)[ CD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_92 $$ byte[] buf = new byte[500]-->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_38 $$ byte[] buf = new byte[500]-->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_140 $$ while ((count = in.read(buf)) > 0) -->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_94 $$ while ((count = bin.read(buf)) > 0) -->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_93 $$ int count = 0-->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_39 $$ int count = 0-->Line_141 $$ bout.write(buf, 0, count)[ FD ]
Line_4 $$ byte[] result = null-->Line_143 $$ result = bout.toByteArray()[ FD ]
Line_43 $$ result = bout.toByteArray()-->Line_143 $$ result = bout.toByteArray()[ FD ]
Line_143 $$ result = bout.toByteArray()-->Line_143 $$ result = bout.toByteArray()[ FD ]
Line_143 $$ result = bout.toByteArray()-->Line_143 $$ result = bout.toByteArray()[ CD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_143 $$ result = bout.toByteArray()[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_143 $$ result = bout.toByteArray()[ FD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_147 $$ if (bout != null)[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_147 $$ if (bout != null)[ FD ]
Line_147 $$ if (bout != null)-->Line_147 $$ bout.close()[ CD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_147 $$ bout.close()[ FD ]
Line_35 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_147 $$ bout.close()[ FD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_152 $$ if (postMethod != null)[ FD ]
Line_152 $$ if (postMethod != null)-->Line_152 $$ postMethod.releaseConnection()[ CD ]
Line_56 $$ PostMethod postMethod = new PostMethod(url)-->Line_152 $$ postMethod.releaseConnection()[ FD ]
Line_2 $$ public static byte[] sendRequestV1(String url, Map<String, Object> params, String secretCode, String method, Map<String, String> files, String encoding, String signMethod, Map<String, String> headers, String contentType) -->Line_155 $$ return result[ CD ]
Line_11 $$ String key = keys.next()-->Line_12 $$ getMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_11 $$ String key = keys.next()-->Line_12 $$ getMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_22 $$ String key = (String) iters.next()-->Line_23 $$ getData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_40 $$ while ((count = in.read(buf)) > 0) -->Line_41 $$ bout.write(buf, 0, count)[ FD ]
Line_60 $$ String key = keys.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_60 $$ String key = keys.next()-->Line_61 $$ postMethod.setRequestHeader(key, headers.get(key))[ FD ]
Line_72 $$ String key = (String) iters.next()-->Line_73 $$ parts[i] = new StringPart(key, params.get(key).toString(), "UTF-8")[ FD ]
Line_85 $$ String key = (String) iters.next()-->Line_86 $$ if (files.get(key).toString().startsWith("http://")) [ FD ]
Line_85 $$ String key = (String) iters.next()-->Line_90 $$ URL fileurl = new URL(files.get(key).toString())[ FD ]
Line_90 $$ URL fileurl = new URL(files.get(key).toString())-->Line_91 $$ bin = fileurl.openStream()[ FD ]
Line_90 $$ URL fileurl = new URL(files.get(key).toString())-->Line_97 $$ parts[i] = new FilePart(key, new ByteArrayPartSource(fileurl.getFile().substring(fileurl.getFile().lastIndexOf("/") + 1), bout.toByteArray()))[ FD ]
Line_90 $$ URL fileurl = new URL(files.get(key).toString())-->Line_97 $$ parts[i] = new FilePart(key, new ByteArrayPartSource(fileurl.getFile().substring(fileurl.getFile().lastIndexOf("/") + 1), bout.toByteArray()))[ FD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_97 $$ parts[i] = new FilePart(key, new ByteArrayPartSource(fileurl.getFile().substring(fileurl.getFile().lastIndexOf("/") + 1), bout.toByteArray()))[ FD ]
Line_87 $$ InputStream bin = null-->Line_101 $$ if (bin != null)[ FD ]
Line_91 $$ bin = fileurl.openStream()-->Line_101 $$ if (bin != null)[ FD ]
Line_87 $$ InputStream bin = null-->Line_101 $$ bin.close()[ FD ]
Line_91 $$ bin = fileurl.openStream()-->Line_101 $$ bin.close()[ FD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_102 $$ if (bout != null)[ FD ]
Line_88 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_102 $$ bout.close()[ FD ]
Line_85 $$ String key = (String) iters.next()-->Line_104 $$ parts[i] = new FilePart(key, new File(files.get(key).toString()))[ FD ]
Line_94 $$ while ((count = bin.read(buf)) > 0) -->Line_95 $$ bout.write(buf, 0, count)[ FD ]
Line_115 $$ String key = (String) iters.next()-->Line_116 $$ postData[i] = new NameValuePair(key, params.get(key).toString())[ FD ]
Line_140 $$ while ((count = in.read(buf)) > 0) -->Line_141 $$ bout.write(buf, 0, count)[ FD ]
