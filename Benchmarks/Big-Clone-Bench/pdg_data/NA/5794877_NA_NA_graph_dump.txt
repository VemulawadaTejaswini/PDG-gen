Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException [ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_5 $$ if (encryptionDictionary == null) [ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_5 $$ if (encryptionDictionary == null) [ FD ]
Line_5 $$ if (encryptionDictionary == null) -->Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_8 $$ version = computeVersionNumber()[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_9 $$ revision = computeRevisionNumber()[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_10 $$ encryptionDictionary.setFilter(FILTER)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_10 $$ encryptionDictionary.setFilter(FILTER)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_10 $$ encryptionDictionary.setFilter(FILTER)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_11 $$ encryptionDictionary.setVersion(version)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_11 $$ encryptionDictionary.setVersion(version)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_11 $$ encryptionDictionary.setVersion(version)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_12 $$ encryptionDictionary.setRevision(revision)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_12 $$ encryptionDictionary.setRevision(revision)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_12 $$ encryptionDictionary.setRevision(revision)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_13 $$ encryptionDictionary.setLength(keyLength)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_13 $$ encryptionDictionary.setLength(keyLength)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_13 $$ encryptionDictionary.setLength(keyLength)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_14 $$ String ownerPassword = policy.getOwnerPassword()[ CD ]
Line_14 $$ String ownerPassword = policy.getOwnerPassword()-->Line_14 $$ String ownerPassword = policy.getOwnerPassword()[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_15 $$ String userPassword = policy.getUserPassword()[ CD ]
Line_15 $$ String userPassword = policy.getUserPassword()-->Line_15 $$ String userPassword = policy.getUserPassword()[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_16 $$ if (ownerPassword == null) [ CD ]
Line_14 $$ String ownerPassword = policy.getOwnerPassword()-->Line_16 $$ if (ownerPassword == null) [ FD ]
Line_16 $$ if (ownerPassword == null) -->Line_17 $$ ownerPassword = ""[ CD ]
Line_14 $$ String ownerPassword = policy.getOwnerPassword()-->Line_17 $$ ownerPassword = ""[ FD ]
Line_17 $$ ownerPassword = ""-->Line_17 $$ ownerPassword = ""[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_19 $$ if (userPassword == null) [ CD ]
Line_15 $$ String userPassword = policy.getUserPassword()-->Line_19 $$ if (userPassword == null) [ FD ]
Line_19 $$ if (userPassword == null) -->Line_20 $$ userPassword = ""[ CD ]
Line_15 $$ String userPassword = policy.getUserPassword()-->Line_20 $$ userPassword = ""[ FD ]
Line_20 $$ userPassword = ""-->Line_20 $$ userPassword = ""[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_22 $$ int permissionInt = policy.getPermissions().getPermissionBytes()[ CD ]
Line_22 $$ int permissionInt = policy.getPermissions().getPermissionBytes()-->Line_22 $$ int permissionInt = policy.getPermissions().getPermissionBytes()[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_23 $$ encryptionDictionary.setPermissions(permissionInt)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_23 $$ encryptionDictionary.setPermissions(permissionInt)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_23 $$ encryptionDictionary.setPermissions(permissionInt)[ FD ]
Line_22 $$ int permissionInt = policy.getPermissions().getPermissionBytes()-->Line_23 $$ encryptionDictionary.setPermissions(permissionInt)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_24 $$ int length = keyLength / 8[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()[ CD ]
Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()-->Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()[ CD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_26 $$ if (idArray == null || idArray.size() < 2) [ CD ]
Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()-->Line_26 $$ if (idArray == null || idArray.size() < 2) [ FD ]
Line_26 $$ if (idArray == null || idArray.size() < 2) -->Line_27 $$ idArray = new COSArray()[ CD ]
Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()-->Line_27 $$ idArray = new COSArray()[ FD ]
Line_27 $$ idArray = new COSArray()-->Line_27 $$ idArray = new COSArray()[ FD ]
Line_29 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_29 $$ MessageDigest md = MessageDigest.getInstance("MD5")[ CD ]
Line_30 $$ BigInteger time = BigInteger.valueOf(System.currentTimeMillis())-->Line_30 $$ BigInteger time = BigInteger.valueOf(System.currentTimeMillis())[ CD ]
Line_29 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_31 $$ md.update(time.toByteArray())[ FD ]
Line_30 $$ BigInteger time = BigInteger.valueOf(System.currentTimeMillis())-->Line_31 $$ md.update(time.toByteArray())[ FD ]
Line_29 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_32 $$ md.update(ownerPassword.getBytes())[ FD ]
Line_14 $$ String ownerPassword = policy.getOwnerPassword()-->Line_32 $$ md.update(ownerPassword.getBytes())[ FD ]
Line_17 $$ ownerPassword = ""-->Line_32 $$ md.update(ownerPassword.getBytes())[ FD ]
Line_29 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_33 $$ md.update(userPassword.getBytes())[ FD ]
Line_15 $$ String userPassword = policy.getUserPassword()-->Line_33 $$ md.update(userPassword.getBytes())[ FD ]
Line_20 $$ userPassword = ""-->Line_33 $$ md.update(userPassword.getBytes())[ FD ]
Line_29 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_34 $$ md.update(document.getDocument().toString().getBytes())[ FD ]
Line_35 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_35 $$ byte[] id = md.digest(this.toString().getBytes())[ CD ]
Line_29 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_35 $$ byte[] id = md.digest(this.toString().getBytes())[ FD ]
Line_36 $$ COSString idString = new COSString()-->Line_37 $$ idString.append(id)[ FD ]
Line_35 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_37 $$ idString.append(id)[ FD ]
Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()-->Line_38 $$ idArray.add(idString)[ FD ]
Line_27 $$ idArray = new COSArray()-->Line_38 $$ idArray.add(idString)[ FD ]
Line_36 $$ COSString idString = new COSString()-->Line_38 $$ idArray.add(idString)[ FD ]
Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()-->Line_39 $$ idArray.add(idString)[ FD ]
Line_27 $$ idArray = new COSArray()-->Line_39 $$ idArray.add(idString)[ FD ]
Line_36 $$ COSString idString = new COSString()-->Line_39 $$ idArray.add(idString)[ FD ]
Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()-->Line_40 $$ document.getDocument().setDocumentID(idArray)[ FD ]
Line_27 $$ idArray = new COSArray()-->Line_40 $$ document.getDocument().setDocumentID(idArray)[ FD ]
Line_25 $$ COSArray idArray = document.getDocument().getDocumentID()-->Line_47 $$ COSString id = (COSString) idArray.getObject(0)[ FD ]
Line_27 $$ idArray = new COSArray()-->Line_47 $$ COSString id = (COSString) idArray.getObject(0)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ CD ]
Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ CD ]
Line_24 $$ int length = keyLength / 8-->Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_14 $$ String ownerPassword = policy.getOwnerPassword()-->Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_17 $$ ownerPassword = ""-->Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_15 $$ String userPassword = policy.getUserPassword()-->Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_20 $$ userPassword = ""-->Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ CD ]
Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)-->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ CD ]
Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_22 $$ int permissionInt = policy.getPermissions().getPermissionBytes()-->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_24 $$ int length = keyLength / 8-->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_15 $$ String userPassword = policy.getUserPassword()-->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_20 $$ userPassword = ""-->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_35 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_50 $$ encryptionKey = computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ CD ]
Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_50 $$ encryptionKey = computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_22 $$ int permissionInt = policy.getPermissions().getPermissionBytes()-->Line_50 $$ encryptionKey = computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_24 $$ int length = keyLength / 8-->Line_50 $$ encryptionKey = computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_15 $$ String userPassword = policy.getUserPassword()-->Line_50 $$ encryptionKey = computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_20 $$ userPassword = ""-->Line_50 $$ encryptionKey = computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_35 $$ byte[] id = md.digest(this.toString().getBytes())-->Line_50 $$ encryptionKey = computeEncryptedKey(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_51 $$ encryptionDictionary.setOwnerKey(o)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_51 $$ encryptionDictionary.setOwnerKey(o)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_51 $$ encryptionDictionary.setOwnerKey(o)[ FD ]
Line_48 $$ byte[] o = computeOwnerPassword(ownerPassword.getBytes("ISO-8859-1"), userPassword.getBytes("ISO-8859-1"), revision, length)-->Line_51 $$ encryptionDictionary.setOwnerKey(o)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_52 $$ encryptionDictionary.setUserKey(u)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_52 $$ encryptionDictionary.setUserKey(u)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_52 $$ encryptionDictionary.setUserKey(u)[ FD ]
Line_49 $$ byte[] u = computeUserPassword(userPassword.getBytes("ISO-8859-1"), o, permissionInt, id.getBytes(), revision, length)-->Line_52 $$ encryptionDictionary.setUserKey(u)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_53 $$ document.setEncryptionDictionary(encryptionDictionary)[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_53 $$ document.setEncryptionDictionary(encryptionDictionary)[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_53 $$ document.setEncryptionDictionary(encryptionDictionary)[ FD ]
Line_2 $$ public void prepareDocumentForEncryption(PDDocument doc) throws CryptographyException, IOException -->Line_54 $$ document.getDocument().setEncryptionDictionary(encryptionDictionary.getCOSDictionary())[ CD ]
Line_4 $$ PDEncryptionDictionary encryptionDictionary = document.getEncryptionDictionary()-->Line_54 $$ document.getDocument().setEncryptionDictionary(encryptionDictionary.getCOSDictionary())[ FD ]
Line_6 $$ encryptionDictionary = new PDEncryptionDictionary()-->Line_54 $$ document.getDocument().setEncryptionDictionary(encryptionDictionary.getCOSDictionary())[ FD ]
