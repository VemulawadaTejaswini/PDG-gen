Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void updateMetaList() [ CD ]
Line_2 $$ public void updateMetaList() -->Line_3 $$ metaserverModel.begin()[ CD ]
Line_2 $$ public void updateMetaList() -->Line_4 $$ serverCache.expire(EXPIRE_INTERVAL * 1000)[ CD ]
Line_2 $$ public void updateMetaList() -->Line_5 $$ final Map<String, MetaserverEntry> oldEntries = serverCache.getAll()[ CD ]
Line_5 $$ final Map<String, MetaserverEntry> oldEntries = serverCache.getAll()-->Line_5 $$ final Map<String, MetaserverEntry> oldEntries = serverCache.getAll()[ CD ]
Line_2 $$ public void updateMetaList() -->Line_6 $$ final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST)[ CD ]
Line_6 $$ final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST)-->Line_6 $$ final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST)[ CD ]
Line_2 $$ public void updateMetaList() -->Line_8 $$ metaserverModel.add(localhostMetaserverEntry)[ CD ]
Line_6 $$ final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST)-->Line_8 $$ metaserverModel.add(localhostMetaserverEntry)[ FD ]
Line_2 $$ public void updateMetaList() -->Line_9 $$ oldEntries.remove(ServerCache.makeKey(localhostMetaserverEntry))[ CD ]
Line_5 $$ final Map<String, MetaserverEntry> oldEntries = serverCache.getAll()-->Line_9 $$ oldEntries.remove(ServerCache.makeKey(localhostMetaserverEntry))[ FD ]
Line_6 $$ final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST)-->Line_9 $$ oldEntries.remove(ServerCache.makeKey(localhostMetaserverEntry))[ FD ]
Line_2 $$ public void updateMetaList() -->Line_10 $$ serverCache.put(localhostMetaserverEntry)[ CD ]
Line_6 $$ final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST)-->Line_10 $$ serverCache.put(localhostMetaserverEntry)[ FD ]
Line_13 $$ final String httpProxy = System.getenv("http_proxy")-->Line_13 $$ final String httpProxy = System.getenv("http_proxy")[ CD ]
Line_13 $$ final String httpProxy = System.getenv("http_proxy")-->Line_14 $$ if (httpProxy != null && httpProxy.length() > 0) [ FD ]
Line_14 $$ if (httpProxy != null && httpProxy.length() > 0) -->Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) [ CD ]
Line_13 $$ final String httpProxy = System.getenv("http_proxy")-->Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) [ FD ]
Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) -->Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) [ CD ]
Line_13 $$ final String httpProxy = System.getenv("http_proxy")-->Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) [ FD ]
Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) -->Line_16 $$ final String[] tmp = httpProxy.substring(7).replaceAll("/.*", "").split(":", 2)[ CD ]
Line_16 $$ final String[] tmp = httpProxy.substring(7).replaceAll("/.*", "").split(":", 2)-->Line_16 $$ final String[] tmp = httpProxy.substring(7).replaceAll("/.*", "").split(":", 2)[ CD ]
Line_13 $$ final String httpProxy = System.getenv("http_proxy")-->Line_16 $$ final String[] tmp = httpProxy.substring(7).replaceAll("/.*", "").split(":", 2)[ FD ]
Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) -->Line_17 $$ System.setProperty("http.proxyHost", tmp[0])[ CD ]
Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) -->Line_18 $$ System.setProperty("http.proxyPort", tmp.length >= 2 ? tmp[1] : "80")[ CD ]
Line_15 $$ if (httpProxy.regionMatches(true, 0, "http://", 0, 7)) -->Line_20 $$ System.err.println("Warning: unsupported http_proxy protocol: " + httpProxy)[ CD ]
Line_12 $$ final URL url = new URL(METASERVER_URL)-->Line_23 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_23 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_25 $$ conn.setRequestMethod("GET")[ FD ]
Line_23 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_26 $$ conn.setUseCaches(false)[ FD ]
Line_23 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_27 $$ conn.connect()[ FD ]
Line_23 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_28 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) [ FD ]
Line_28 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) -->Line_29 $$ final InputStream in = conn.getInputStream()[ CD ]
Line_29 $$ final InputStream in = conn.getInputStream()-->Line_29 $$ final InputStream in = conn.getInputStream()[ CD ]
Line_23 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_29 $$ final InputStream in = conn.getInputStream()[ FD ]
Line_28 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) -->Line_30 $$ final InputStreamReader isr = new InputStreamReader(in, "ISO-8859-1")[ CD ]
Line_35 $$ while (true) -->Line_36 $$ final String line = br.readLine()[ CD ]
Line_36 $$ final String line = br.readLine()-->Line_36 $$ final String line = br.readLine()[ CD ]
Line_32 $$ final BufferedReader br = new BufferedReader(isr)-->Line_36 $$ final String line = br.readLine()[ FD ]
Line_35 $$ while (true) -->Line_37 $$ if (line == null) [ CD ]
Line_36 $$ final String line = br.readLine()-->Line_37 $$ if (line == null) [ FD ]
Line_35 $$ while (true) -->Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)[ CD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)[ CD ]
Line_34 $$ final MetaserverEntryParser metaserverEntryParser = new MetaserverEntryParser()-->Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)[ FD ]
Line_36 $$ final String line = br.readLine()-->Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)[ FD ]
Line_35 $$ while (true) -->Line_41 $$ if (metaserverEntry != null) [ CD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_41 $$ if (metaserverEntry != null) [ FD ]
Line_41 $$ if (metaserverEntry != null) -->Line_42 $$ metaserverModel.add(metaserverEntry)[ CD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_42 $$ metaserverModel.add(metaserverEntry)[ FD ]
Line_41 $$ if (metaserverEntry != null) -->Line_43 $$ oldEntries.remove(ServerCache.makeKey(metaserverEntry))[ CD ]
Line_5 $$ final Map<String, MetaserverEntry> oldEntries = serverCache.getAll()-->Line_43 $$ oldEntries.remove(ServerCache.makeKey(metaserverEntry))[ FD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_43 $$ oldEntries.remove(ServerCache.makeKey(metaserverEntry))[ FD ]
Line_41 $$ if (metaserverEntry != null) -->Line_44 $$ serverCache.put(metaserverEntry)[ CD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_44 $$ serverCache.put(metaserverEntry)[ FD ]
Line_32 $$ final BufferedReader br = new BufferedReader(isr)-->Line_48 $$ br.close()[ FD ]
Line_30 $$ final InputStreamReader isr = new InputStreamReader(in, "ISO-8859-1")-->Line_51 $$ isr.close()[ FD ]
Line_23 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_55 $$ conn.disconnect()[ FD ]
Line_5 $$ final Map<String, MetaserverEntry> oldEntries = serverCache.getAll()-->Line_59 $$ for (final MetaserverEntry metaserverEntry : oldEntries.values()) [ FD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_60 $$ metaserverModel.add(metaserverEntry)[ FD ]
Line_59 $$ for (final MetaserverEntry metaserverEntry : oldEntries.values()) -->Line_60 $$ metaserverModel.add(metaserverEntry)[ FD ]
Line_2 $$ public void updateMetaList() -->Line_62 $$ metaserverModel.commit()[ CD ]
Line_2 $$ public void updateMetaList() -->Line_63 $$ serverCache.save()[ CD ]
Line_36 $$ final String line = br.readLine()-->Line_37 $$ if (line == null) [ FD ]
Line_36 $$ final String line = br.readLine()-->Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)[ FD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_41 $$ if (metaserverEntry != null) [ FD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_42 $$ metaserverModel.add(metaserverEntry)[ FD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_43 $$ oldEntries.remove(ServerCache.makeKey(metaserverEntry))[ FD ]
Line_40 $$ final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line)-->Line_44 $$ serverCache.put(metaserverEntry)[ FD ]
