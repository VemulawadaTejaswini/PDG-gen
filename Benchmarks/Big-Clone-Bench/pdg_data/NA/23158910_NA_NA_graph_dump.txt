Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public char check(String password) [ CD ]
Line_2 $$ public char check(String password) -->Line_3 $$ if (captchaRandom.equals("null")) [ CD ]
Line_3 $$ if (captchaRandom.equals("null")) -->Line_3 $$ if (captchaRandom.equals("null")) [ CD ]
Line_3 $$ if (captchaRandom.equals("null")) -->Line_4 $$ return 's'[ CD ]
Line_2 $$ public char check(String password) -->Line_6 $$ if (captchaRandom.equals("used")) [ CD ]
Line_6 $$ if (captchaRandom.equals("used")) -->Line_6 $$ if (captchaRandom.equals("used")) [ CD ]
Line_6 $$ if (captchaRandom.equals("used")) -->Line_7 $$ return 'm'[ CD ]
Line_2 $$ public char check(String password) -->Line_9 $$ String encryptionBase = secret + captchaRandom[ CD ]
Line_2 $$ public char check(String password) -->Line_10 $$ if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) [ CD ]
Line_10 $$ if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) -->Line_10 $$ if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) [ CD ]
Line_10 $$ if (!alphabet.equals(ALPHABET_DEFAULT) || letters != LETTERS_DEFAULT) -->Line_11 $$ encryptionBase += ":" + alphabet + ":" + letters[ CD ]
Line_9 $$ String encryptionBase = secret + captchaRandom-->Line_11 $$ encryptionBase += ":" + alphabet + ":" + letters[ FD ]
Line_11 $$ encryptionBase += ":" + alphabet + ":" + letters-->Line_11 $$ encryptionBase += ":" + alphabet + ":" + letters[ FD ]
Line_2 $$ public char check(String password) -->Line_13 $$ MessageDigest md5[ CD ]
Line_2 $$ public char check(String password) -->Line_14 $$ byte[] digest = [ CD ]
Line_13 $$ MessageDigest md5-->Line_16 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_16 $$ md5 = MessageDigest.getInstance("MD5")-->Line_16 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_16 $$ md5 = MessageDigest.getInstance("MD5")-->Line_16 $$ md5 = MessageDigest.getInstance("MD5")[ CD ]
Line_13 $$ MessageDigest md5-->Line_17 $$ md5.update(encryptionBase.getBytes())[ FD ]
Line_16 $$ md5 = MessageDigest.getInstance("MD5")-->Line_17 $$ md5.update(encryptionBase.getBytes())[ FD ]
Line_9 $$ String encryptionBase = secret + captchaRandom-->Line_17 $$ md5.update(encryptionBase.getBytes())[ FD ]
Line_11 $$ encryptionBase += ":" + alphabet + ":" + letters-->Line_17 $$ md5.update(encryptionBase.getBytes())[ FD ]
Line_14 $$ byte[] digest = -->Line_18 $$ digest = md5.digest()[ FD ]
Line_18 $$ digest = md5.digest()-->Line_18 $$ digest = md5.digest()[ FD ]
Line_18 $$ digest = md5.digest()-->Line_18 $$ digest = md5.digest()[ CD ]
Line_13 $$ MessageDigest md5-->Line_18 $$ digest = md5.digest()[ FD ]
Line_16 $$ md5 = MessageDigest.getInstance("MD5")-->Line_18 $$ digest = md5.digest()[ FD ]
Line_2 $$ public char check(String password) -->Line_21 $$ String correctPassword = ""[ CD ]
Line_2 $$ public char check(String password) -->Line_22 $$ int index[ CD ]
Line_2 $$ public char check(String password) -->Line_23 $$ for (int i = 0; i < letters; i++) [ CD ]
Line_2 $$ public char check(String password) -->Line_2 $$ public char check(String password) [ CD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_23 $$ for (int i = 0; i < letters; i++) [ CD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_23 $$ for (int i = 0; i < letters; i++) [ CD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_23 $$ for (int i = 0; i < letters; i++) [ FD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_24 $$ index = (digest[i] + 256) % 256 % alphabet.length()[ CD ]
Line_24 $$ index = (digest[i] + 256) % 256 % alphabet.length()-->Line_24 $$ index = (digest[i] + 256) % 256 % alphabet.length()[ FD ]
Line_22 $$ int index-->Line_24 $$ index = (digest[i] + 256) % 256 % alphabet.length()[ FD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_25 $$ correctPassword += alphabet.substring(index, index + 1)[ CD ]
Line_25 $$ correctPassword += alphabet.substring(index, index + 1)-->Line_25 $$ correctPassword += alphabet.substring(index, index + 1)[ FD ]
Line_21 $$ String correctPassword = ""-->Line_25 $$ correctPassword += alphabet.substring(index, index + 1)[ FD ]
Line_25 $$ correctPassword += alphabet.substring(index, index + 1)-->Line_25 $$ correctPassword += alphabet.substring(index, index + 1)[ CD ]
Line_24 $$ index = (digest[i] + 256) % 256 % alphabet.length()-->Line_25 $$ correctPassword += alphabet.substring(index, index + 1)[ FD ]
Line_22 $$ int index-->Line_25 $$ correctPassword += alphabet.substring(index, index + 1)[ FD ]
Line_2 $$ public char check(String password) -->Line_27 $$ if (!password.equals(correctPassword)) [ CD ]
Line_27 $$ if (!password.equals(correctPassword)) -->Line_27 $$ if (!password.equals(correctPassword)) [ CD ]
Line_27 $$ if (!password.equals(correctPassword)) -->Line_27 $$ if (!password.equals(correctPassword)) [ CD ]
Line_2 $$ public char check(String password) -->Line_27 $$ if (!password.equals(correctPassword)) [ FD ]
Line_25 $$ correctPassword += alphabet.substring(index, index + 1)-->Line_27 $$ if (!password.equals(correctPassword)) [ FD ]
Line_21 $$ String correctPassword = ""-->Line_27 $$ if (!password.equals(correctPassword)) [ FD ]
Line_27 $$ if (!password.equals(correctPassword)) -->Line_28 $$ return 'w'[ CD ]
Line_27 $$ if (!password.equals(correctPassword)) -->Line_31 $$ return 't'[ CD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_23 $$ for (int i = 0; i < letters; i++) [ FD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_23 $$ for (int i = 0; i < letters; i++) [ FD ]
Line_23 $$ for (int i = 0; i < letters; i++) -->Line_23 $$ for (int i = 0; i < letters; i++) [ FD ]
Line_24 $$ index = (digest[i] + 256) % 256 % alphabet.length()-->Line_25 $$ correctPassword += alphabet.substring(index, index + 1)[ FD ]
