Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_3 $$ if (file == null)[ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_3 $$ if (file == null)[ FD ]
Line_3 $$ if (file == null)-->Line_3 $$ return null[ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_4 $$ if (rw == null || rw.length() == 0) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_4 $$ if (rw == null || rw.length() == 0) [ FD ]
Line_4 $$ if (rw == null || rw.length() == 0) -->Line_5 $$ return null[ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_7 $$ rw = rw.toLowerCase()[ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_7 $$ rw = rw.toLowerCase()[ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_7 $$ rw = rw.toLowerCase()[ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_7 $$ rw = rw.toLowerCase()[ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_7 $$ rw = rw.toLowerCase()[ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_7 $$ rw = rw.toLowerCase()[ FD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_8 $$ if (rw.equals(MODE_READ)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_8 $$ if (rw.equals(MODE_READ)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_8 $$ if (rw.equals(MODE_READ)) [ FD ]
Line_8 $$ if (rw.equals(MODE_READ)) -->Line_8 $$ if (rw.equals(MODE_READ)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_8 $$ if (rw.equals(MODE_READ)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_8 $$ if (rw.equals(MODE_READ)) [ FD ]
Line_8 $$ if (rw.equals(MODE_READ)) -->Line_9 $$ if (FileUtil.exists(file, enableException)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_9 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_9 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_9 $$ if (FileUtil.exists(file, enableException)) -->Line_9 $$ if (FileUtil.exists(file, enableException)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_9 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_9 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_9 $$ if (FileUtil.exists(file, enableException)) -->Line_10 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_9 $$ if (FileUtil.exists(file, enableException)) -->Line_11 $$ FileChannel ch = fis.getChannel()[ CD ]
Line_11 $$ FileChannel ch = fis.getChannel()-->Line_11 $$ FileChannel ch = fis.getChannel()[ CD ]
Line_10 $$ FileInputStream fis = new FileInputStream(file)-->Line_11 $$ FileChannel ch = fis.getChannel()[ FD ]
Line_9 $$ if (FileUtil.exists(file, enableException)) -->Line_12 $$ setObjectMap(ch.hashCode(), fis, FIS)[ CD ]
Line_10 $$ FileInputStream fis = new FileInputStream(file)-->Line_12 $$ setObjectMap(ch.hashCode(), fis, FIS)[ FD ]
Line_11 $$ FileChannel ch = fis.getChannel()-->Line_12 $$ setObjectMap(ch.hashCode(), fis, FIS)[ FD ]
Line_9 $$ if (FileUtil.exists(file, enableException)) -->Line_13 $$ return ch[ CD ]
Line_8 $$ if (rw.equals(MODE_READ)) -->Line_15 $$ if (rw.equals(MODE_WRITE)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_15 $$ if (rw.equals(MODE_WRITE)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_15 $$ if (rw.equals(MODE_WRITE)) [ FD ]
Line_15 $$ if (rw.equals(MODE_WRITE)) -->Line_15 $$ if (rw.equals(MODE_WRITE)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_15 $$ if (rw.equals(MODE_WRITE)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_15 $$ if (rw.equals(MODE_WRITE)) [ FD ]
Line_15 $$ if (rw.equals(MODE_WRITE)) -->Line_16 $$ FileOutputStream fos = new FileOutputStream(file)[ CD ]
Line_15 $$ if (rw.equals(MODE_WRITE)) -->Line_17 $$ FileChannel ch = fos.getChannel()[ CD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_17 $$ FileChannel ch = fos.getChannel()[ FD ]
Line_15 $$ if (rw.equals(MODE_WRITE)) -->Line_18 $$ setObjectMap(ch.hashCode(), fos, FOS_W)[ CD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_18 $$ setObjectMap(ch.hashCode(), fos, FOS_W)[ FD ]
Line_11 $$ FileChannel ch = fis.getChannel()-->Line_18 $$ setObjectMap(ch.hashCode(), fos, FOS_W)[ FD ]
Line_15 $$ if (rw.equals(MODE_WRITE)) -->Line_19 $$ return ch[ CD ]
Line_15 $$ if (rw.equals(MODE_WRITE)) -->Line_20 $$ if (rw.equals(MODE_APPEND)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_20 $$ if (rw.equals(MODE_APPEND)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_20 $$ if (rw.equals(MODE_APPEND)) [ FD ]
Line_20 $$ if (rw.equals(MODE_APPEND)) -->Line_20 $$ if (rw.equals(MODE_APPEND)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_20 $$ if (rw.equals(MODE_APPEND)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_20 $$ if (rw.equals(MODE_APPEND)) [ FD ]
Line_20 $$ if (rw.equals(MODE_APPEND)) -->Line_21 $$ if (FileUtil.exists(file, enableException)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_21 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_21 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_21 $$ if (FileUtil.exists(file, enableException)) -->Line_21 $$ if (FileUtil.exists(file, enableException)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_21 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_21 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_21 $$ if (FileUtil.exists(file, enableException)) -->Line_22 $$ RandomAccessFile raf = new RandomAccessFile(file, "rw")[ CD ]
Line_21 $$ if (FileUtil.exists(file, enableException)) -->Line_23 $$ FileChannel ch = raf.getChannel()[ CD ]
Line_22 $$ RandomAccessFile raf = new RandomAccessFile(file, "rw")-->Line_23 $$ FileChannel ch = raf.getChannel()[ FD ]
Line_21 $$ if (FileUtil.exists(file, enableException)) -->Line_24 $$ ch.position(ch.size())[ CD ]
Line_11 $$ FileChannel ch = fis.getChannel()-->Line_24 $$ ch.position(ch.size())[ FD ]
Line_11 $$ FileChannel ch = fis.getChannel()-->Line_24 $$ ch.position(ch.size())[ FD ]
Line_21 $$ if (FileUtil.exists(file, enableException)) -->Line_25 $$ setObjectMap(ch.hashCode(), raf, FOS_A)[ CD ]
Line_22 $$ RandomAccessFile raf = new RandomAccessFile(file, "rw")-->Line_25 $$ setObjectMap(ch.hashCode(), raf, FOS_A)[ FD ]
Line_11 $$ FileChannel ch = fis.getChannel()-->Line_25 $$ setObjectMap(ch.hashCode(), raf, FOS_A)[ FD ]
Line_21 $$ if (FileUtil.exists(file, enableException)) -->Line_26 $$ return ch[ CD ]
Line_20 $$ if (rw.equals(MODE_APPEND)) -->Line_28 $$ if (rw.equals(MODE_READ_WRITE)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_28 $$ if (rw.equals(MODE_READ_WRITE)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_28 $$ if (rw.equals(MODE_READ_WRITE)) [ FD ]
Line_28 $$ if (rw.equals(MODE_READ_WRITE)) -->Line_28 $$ if (rw.equals(MODE_READ_WRITE)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_28 $$ if (rw.equals(MODE_READ_WRITE)) [ FD ]
Line_7 $$ rw = rw.toLowerCase()-->Line_28 $$ if (rw.equals(MODE_READ_WRITE)) [ FD ]
Line_28 $$ if (rw.equals(MODE_READ_WRITE)) -->Line_29 $$ if (FileUtil.exists(file, enableException)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_29 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_29 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_29 $$ if (FileUtil.exists(file, enableException)) -->Line_29 $$ if (FileUtil.exists(file, enableException)) [ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_29 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_29 $$ if (FileUtil.exists(file, enableException)) [ FD ]
Line_29 $$ if (FileUtil.exists(file, enableException)) -->Line_31 $$ FileChannel ch = raf.getChannel()[ CD ]
Line_22 $$ RandomAccessFile raf = new RandomAccessFile(file, "rw")-->Line_31 $$ FileChannel ch = raf.getChannel()[ FD ]
Line_29 $$ if (FileUtil.exists(file, enableException)) -->Line_32 $$ setObjectMap(ch.hashCode(), raf, RAF)[ CD ]
Line_22 $$ RandomAccessFile raf = new RandomAccessFile(file, "rw")-->Line_32 $$ setObjectMap(ch.hashCode(), raf, RAF)[ FD ]
Line_11 $$ FileChannel ch = fis.getChannel()-->Line_32 $$ setObjectMap(ch.hashCode(), raf, RAF)[ FD ]
Line_29 $$ if (FileUtil.exists(file, enableException)) -->Line_33 $$ return ch[ CD ]
Line_2 $$ public static FileChannel newFileChannel(File file, String rw, boolean enableException) throws IOException -->Line_38 $$ return null[ CD ]
