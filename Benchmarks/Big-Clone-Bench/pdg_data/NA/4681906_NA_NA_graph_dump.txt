Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) [ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_3 $$ AgentLauncher l[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_4 $$ Environment env[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_5 $$ Properties prop[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_6 $$ Resource res[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_7 $$ String token[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_8 $$ String deflt[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_9 $$ String answ[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_10 $$ String key[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_11 $$ String entry[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_12 $$ ShipService service[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_13 $$ de.fhg.igd.util.URL url[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_14 $$ java.net.URL wsurl[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_15 $$ NodeList flow[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_16 $$ InputSource xmlcontrolstream[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_17 $$ TreeMap results[ CD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_19 $$ if (xmlControl == null || xmlControl.length() == 0 || xmlDoc == null || xmlDoc.length() == 0) [ FD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_19 $$ if (xmlControl == null || xmlControl.length() == 0 || xmlDoc == null || xmlDoc.length() == 0) [ FD ]
Line_19 $$ if (xmlControl == null || xmlControl.length() == 0 || xmlDoc == null || xmlDoc.length() == 0) -->Line_20 $$ System.out.println("---- Need control AND XML document! ----")[ CD ]
Line_19 $$ if (xmlControl == null || xmlControl.length() == 0 || xmlDoc == null || xmlDoc.length() == 0) -->Line_21 $$ return[ CD ]
Line_16 $$ InputSource xmlcontrolstream-->Line_26 $$ xmlcontrolstream = new InputSource(new StringReader(xmlControl))[ FD ]
Line_26 $$ xmlcontrolstream = new InputSource(new StringReader(xmlControl))-->Line_26 $$ xmlcontrolstream = new InputSource(new StringReader(xmlControl))[ FD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)[ CD ]
Line_16 $$ InputSource xmlcontrolstream-->Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)[ FD ]
Line_26 $$ xmlcontrolstream = new InputSource(new StringReader(xmlControl))-->Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ CD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ CD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ CD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) [ CD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) [ FD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) [ FD ]
Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) -->Line_30 $$ System.out.println(destinations.item(i).getTextContent())[ CD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_30 $$ System.out.println(destinations.item(i).getTextContent())[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_30 $$ System.out.println(destinations.item(i).getTextContent())[ FD ]
Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) -->Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)[ CD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)[ FD ]
Line_11 $$ String entry-->Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)[ FD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)[ CD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)[ FD ]
Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) -->Line_32 $$ v_delegations_host.add(entry)[ CD ]
Line_23 $$ Vector v_delegations_host = new Vector()-->Line_32 $$ v_delegations_host.add(entry)[ FD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_32 $$ v_delegations_host.add(entry)[ FD ]
Line_11 $$ String entry-->Line_32 $$ v_delegations_host.add(entry)[ FD ]
Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) -->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ CD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ FD ]
Line_11 $$ String entry-->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ CD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ FD ]
Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) -->Line_34 $$ v_delegations_url.add(entry)[ CD ]
Line_24 $$ Vector v_delegations_url = new Vector()-->Line_34 $$ v_delegations_url.add(entry)[ FD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_34 $$ v_delegations_url.add(entry)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_34 $$ v_delegations_url.add(entry)[ FD ]
Line_11 $$ String entry-->Line_34 $$ v_delegations_url.add(entry)[ FD ]
Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) -->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ CD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ FD ]
Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)-->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ FD ]
Line_11 $$ String entry-->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ FD ]
Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)-->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ CD ]
Line_27 $$ NodeList destinations = SimpleXMLParser.parseDocument(xmlcontrolstream, AgentBehaviour.XML_DELEGATE)-->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ FD ]
Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) -->Line_36 $$ v_delegations_method.add(entry)[ CD ]
Line_25 $$ Vector v_delegations_method = new Vector()-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_11 $$ String entry-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_7 $$ String token-->Line_39 $$ token = ""[ FD ]
Line_39 $$ token = ""-->Line_39 $$ token = ""[ FD ]
Line_17 $$ TreeMap results-->Line_40 $$ results = new TreeMap()[ FD ]
Line_40 $$ results = new TreeMap()-->Line_40 $$ results = new TreeMap()[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ CD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ CD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ CD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ FD ]
Line_7 $$ String token-->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ FD ]
Line_39 $$ token = ""-->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ FD ]
Line_7 $$ String token-->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ FD ]
Line_39 $$ token = ""-->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ FD ]
Line_17 $$ TreeMap results-->Line_44 $$ results.put(token, null)[ FD ]
Line_40 $$ results = new TreeMap()-->Line_44 $$ results.put(token, null)[ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_44 $$ results.put(token, null)[ FD ]
Line_7 $$ String token-->Line_44 $$ results.put(token, null)[ FD ]
Line_39 $$ token = ""-->Line_44 $$ results.put(token, null)[ FD ]
Line_5 $$ Properties prop-->Line_45 $$ prop = AgentStructure.defaults()[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_45 $$ prop = AgentStructure.defaults()[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_45 $$ prop = AgentStructure.defaults()[ CD ]
Line_5 $$ Properties prop-->Line_46 $$ prop.setProperty(AgentStructure.PROP_AGENT_CLASS, AGENT_)[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_46 $$ prop.setProperty(AgentStructure.PROP_AGENT_CLASS, AGENT_)[ FD ]
Line_5 $$ Properties prop-->Line_47 $$ prop.setProperty(AgentBehaviour.CTX_DOCID, String.valueOf(docId))[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_47 $$ prop.setProperty(AgentBehaviour.CTX_DOCID, String.valueOf(docId))[ FD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_47 $$ prop.setProperty(AgentBehaviour.CTX_DOCID, String.valueOf(docId))[ FD ]
Line_5 $$ Properties prop-->Line_48 $$ prop.setProperty(AgentBehaviour.CTX_XML, xmlDoc)[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_48 $$ prop.setProperty(AgentBehaviour.CTX_XML, xmlDoc)[ FD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_48 $$ prop.setProperty(AgentBehaviour.CTX_XML, xmlDoc)[ FD ]
Line_5 $$ Properties prop-->Line_49 $$ prop.setProperty("token", token)[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_49 $$ prop.setProperty("token", token)[ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_49 $$ prop.setProperty("token", token)[ FD ]
Line_7 $$ String token-->Line_49 $$ prop.setProperty("token", token)[ FD ]
Line_39 $$ token = ""-->Line_49 $$ prop.setProperty("token", token)[ FD ]
Line_8 $$ String deflt-->Line_50 $$ deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE)[ FD ]
Line_50 $$ deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE)-->Line_50 $$ deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE)[ FD ]
Line_50 $$ deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE)-->Line_50 $$ deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE)[ CD ]
Line_5 $$ Properties prop-->Line_50 $$ deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE)[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_50 $$ deflt = prop.getProperty(AgentStructure.PROP_AGENT_EXCLUDE)[ FD ]
Line_5 $$ Properties prop-->Line_51 $$ prop.setProperty(AgentStructure.PROP_AGENT_EXCLUDE, deflt + ":" + ADDITIONAL_EXCLUDES)[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_51 $$ prop.setProperty(AgentStructure.PROP_AGENT_EXCLUDE, deflt + ":" + ADDITIONAL_EXCLUDES)[ FD ]
Line_12 $$ ShipService service-->Line_52 $$ service = (ShipService) getEnvironment().lookup(WhatIs.stringValue(ShipService.WHATIS))[ FD ]
Line_52 $$ service = (ShipService) getEnvironment().lookup(WhatIs.stringValue(ShipService.WHATIS))-->Line_52 $$ service = (ShipService) getEnvironment().lookup(WhatIs.stringValue(ShipService.WHATIS))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_23 $$ Vector v_delegations_host = new Vector()-->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ CD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ CD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_54 $$ System.out.println("\n-----SCANNING DELEGATES-----")[ CD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_55 $$ System.out.println("\n-----DELEGATE " + i + "-----")[ CD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_56 $$ System.out.println("-----HOST: " + i + ": " + (String) v_delegations_host.elementAt(i))[ CD ]
Line_23 $$ Vector v_delegations_host = new Vector()-->Line_56 $$ System.out.println("-----HOST: " + i + ": " + (String) v_delegations_host.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_56 $$ System.out.println("-----HOST: " + i + ": " + (String) v_delegations_host.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_56 $$ System.out.println("-----HOST: " + i + ": " + (String) v_delegations_host.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_56 $$ System.out.println("-----HOST: " + i + ": " + (String) v_delegations_host.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_57 $$ System.out.println("-----URL: " + i + ": " + (String) v_delegations_url.elementAt(i))[ CD ]
Line_24 $$ Vector v_delegations_url = new Vector()-->Line_57 $$ System.out.println("-----URL: " + i + ": " + (String) v_delegations_url.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_57 $$ System.out.println("-----URL: " + i + ": " + (String) v_delegations_url.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_57 $$ System.out.println("-----URL: " + i + ": " + (String) v_delegations_url.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_57 $$ System.out.println("-----URL: " + i + ": " + (String) v_delegations_url.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_58 $$ System.out.println("-----METHOD: " + i + ": " + (String) v_delegations_method.elementAt(i))[ CD ]
Line_25 $$ Vector v_delegations_method = new Vector()-->Line_58 $$ System.out.println("-----METHOD: " + i + ": " + (String) v_delegations_method.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_58 $$ System.out.println("-----METHOD: " + i + ": " + (String) v_delegations_method.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_58 $$ System.out.println("-----METHOD: " + i + ": " + (String) v_delegations_method.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_58 $$ System.out.println("-----METHOD: " + i + ": " + (String) v_delegations_method.elementAt(i))[ FD ]
Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))-->Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))[ FD ]
Line_13 $$ de.fhg.igd.util.URL url-->Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))[ FD ]
Line_23 $$ Vector v_delegations_host = new Vector()-->Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))[ FD ]
Line_61 $$ boolean alive = service.isAlive(url)-->Line_61 $$ boolean alive = service.isAlive(url)[ CD ]
Line_12 $$ ShipService service-->Line_61 $$ boolean alive = service.isAlive(url)[ FD ]
Line_52 $$ service = (ShipService) getEnvironment().lookup(WhatIs.stringValue(ShipService.WHATIS))-->Line_61 $$ boolean alive = service.isAlive(url)[ FD ]
Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))-->Line_61 $$ boolean alive = service.isAlive(url)[ FD ]
Line_13 $$ de.fhg.igd.util.URL url-->Line_61 $$ boolean alive = service.isAlive(url)[ FD ]
Line_63 $$ if (alive) -->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ CD ]
Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))-->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ FD ]
Line_14 $$ java.net.URL wsurl-->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ FD ]
Line_24 $$ Vector v_delegations_url = new Vector()-->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ FD ]
Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))-->Line_66 $$ wsurl.openStream()[ FD ]
Line_14 $$ java.net.URL wsurl-->Line_66 $$ wsurl.openStream()[ FD ]
Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) -->Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) [ CD ]
Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) -->Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) [ CD ]
Line_5 $$ Properties prop-->Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) [ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) [ FD ]
Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) -->Line_69 $$ System.out.println("-----MIGRATION: First online host found. I will migrate here:)!")[ CD ]
Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) -->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ CD ]
Line_5 $$ Properties prop-->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ FD ]
Line_23 $$ Vector v_delegations_host = new Vector()-->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ FD ]
Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) -->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ CD ]
Line_5 $$ Properties prop-->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ FD ]
Line_24 $$ Vector v_delegations_url = new Vector()-->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ FD ]
Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) -->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ CD ]
Line_5 $$ Properties prop-->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ FD ]
Line_25 $$ Vector v_delegations_method = new Vector()-->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ FD ]
Line_68 $$ if (!prop.containsKey(0 + "." + AgentBehaviour.XML_URL)) -->Line_74 $$ System.out.println("-----MIGRATION: I will not migrate here:(!")[ CD ]
Line_6 $$ Resource res-->Line_90 $$ res = new MemoryResource()[ FD ]
Line_90 $$ res = new MemoryResource()-->Line_90 $$ res = new MemoryResource()[ FD ]
Line_4 $$ Environment env-->Line_91 $$ env = Environment.getEnvironment()[ FD ]
Line_91 $$ env = Environment.getEnvironment()-->Line_91 $$ env = Environment.getEnvironment()[ FD ]
Line_91 $$ env = Environment.getEnvironment()-->Line_91 $$ env = Environment.getEnvironment()[ CD ]
Line_10 $$ String key-->Line_92 $$ key = WhatIs.stringValue(AgentLauncher.WHATIS)[ FD ]
Line_92 $$ key = WhatIs.stringValue(AgentLauncher.WHATIS)-->Line_92 $$ key = WhatIs.stringValue(AgentLauncher.WHATIS)[ FD ]
Line_92 $$ key = WhatIs.stringValue(AgentLauncher.WHATIS)-->Line_92 $$ key = WhatIs.stringValue(AgentLauncher.WHATIS)[ CD ]
Line_3 $$ AgentLauncher l-->Line_93 $$ l = (AgentLauncher) env.lookup(key)[ FD ]
Line_93 $$ l = (AgentLauncher) env.lookup(key)-->Line_93 $$ l = (AgentLauncher) env.lookup(key)[ FD ]
Line_4 $$ Environment env-->Line_93 $$ l = (AgentLauncher) env.lookup(key)[ FD ]
Line_91 $$ env = Environment.getEnvironment()-->Line_93 $$ l = (AgentLauncher) env.lookup(key)[ FD ]
Line_10 $$ String key-->Line_93 $$ l = (AgentLauncher) env.lookup(key)[ FD ]
Line_92 $$ key = WhatIs.stringValue(AgentLauncher.WHATIS)-->Line_93 $$ l = (AgentLauncher) env.lookup(key)[ FD ]
Line_3 $$ AgentLauncher l-->Line_94 $$ if (l == null) [ FD ]
Line_93 $$ l = (AgentLauncher) env.lookup(key)-->Line_94 $$ if (l == null) [ FD ]
Line_94 $$ if (l == null) -->Line_95 $$ System.out.println("Can't find the agent launcher")[ CD ]
Line_94 $$ if (l == null) -->Line_96 $$ return[ CD ]
Line_3 $$ AgentLauncher l-->Line_99 $$ l.launchAgent(res, prop)[ FD ]
Line_93 $$ l = (AgentLauncher) env.lookup(key)-->Line_99 $$ l.launchAgent(res, prop)[ FD ]
Line_6 $$ Resource res-->Line_99 $$ l.launchAgent(res, prop)[ FD ]
Line_90 $$ res = new MemoryResource()-->Line_99 $$ l.launchAgent(res, prop)[ FD ]
Line_5 $$ Properties prop-->Line_99 $$ l.launchAgent(res, prop)[ FD ]
Line_45 $$ prop = AgentStructure.defaults()-->Line_99 $$ l.launchAgent(res, prop)[ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_107 $$ syncmap_.put(token, results)[ FD ]
Line_7 $$ String token-->Line_107 $$ syncmap_.put(token, results)[ FD ]
Line_39 $$ token = ""-->Line_107 $$ syncmap_.put(token, results)[ FD ]
Line_17 $$ TreeMap results-->Line_107 $$ syncmap_.put(token, results)[ FD ]
Line_40 $$ results = new TreeMap()-->Line_107 $$ syncmap_.put(token, results)[ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_112 $$ token.wait(TIMEOUT)[ FD ]
Line_7 $$ String token-->Line_112 $$ token.wait(TIMEOUT)[ FD ]
Line_39 $$ token = ""-->Line_112 $$ token.wait(TIMEOUT)[ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_113 $$ Map m_results = (Map) syncmap_.get(token)[ FD ]
Line_7 $$ String token-->Line_113 $$ Map m_results = (Map) syncmap_.get(token)[ FD ]
Line_39 $$ token = ""-->Line_113 $$ Map m_results = (Map) syncmap_.get(token)[ FD ]
Line_114 $$ Collection c_results = m_results.values()-->Line_114 $$ Collection c_results = m_results.values()[ CD ]
Line_113 $$ Map m_results = (Map) syncmap_.get(token)-->Line_114 $$ Collection c_results = m_results.values()[ FD ]
Line_114 $$ Collection c_results = m_results.values()-->Line_115 $$ String[] sa_results = (String[]) c_results.toArray(new String[0])[ FD ]
Line_9 $$ String answ-->Line_116 $$ answ = ""[ FD ]
Line_116 $$ answ = ""-->Line_116 $$ answ = ""[ FD ]
Line_117 $$ for (int j = 0; j < sa_results.length; j++) -->Line_117 $$ for (int j = 0; j < sa_results.length; j++) [ CD ]
Line_117 $$ for (int j = 0; j < sa_results.length; j++) -->Line_117 $$ for (int j = 0; j < sa_results.length; j++) [ CD ]
Line_117 $$ for (int j = 0; j < sa_results.length; j++) -->Line_117 $$ for (int j = 0; j < sa_results.length; j++) [ FD ]
Line_117 $$ for (int j = 0; j < sa_results.length; j++) -->Line_118 $$ answ = answ + sa_results[j][ CD ]
Line_118 $$ answ = answ + sa_results[j]-->Line_118 $$ answ = answ + sa_results[j][ FD ]
Line_9 $$ String answ-->Line_118 $$ answ = answ + sa_results[j][ FD ]
Line_116 $$ answ = ""-->Line_118 $$ answ = answ + sa_results[j][ FD ]
Line_118 $$ answ = answ + sa_results[j]-->Line_118 $$ answ = answ + sa_results[j][ FD ]
Line_9 $$ String answ-->Line_118 $$ answ = answ + sa_results[j][ FD ]
Line_116 $$ answ = ""-->Line_118 $$ answ = answ + sa_results[j][ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_120 $$ syncmap_.remove(token)[ FD ]
Line_7 $$ String token-->Line_120 $$ syncmap_.remove(token)[ FD ]
Line_39 $$ token = ""-->Line_120 $$ syncmap_.remove(token)[ FD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_122 $$ callbackWS(xmlControl, answ, docId)[ FD ]
Line_118 $$ answ = answ + sa_results[j]-->Line_122 $$ callbackWS(xmlControl, answ, docId)[ FD ]
Line_9 $$ String answ-->Line_122 $$ callbackWS(xmlControl, answ, docId)[ FD ]
Line_116 $$ answ = ""-->Line_122 $$ callbackWS(xmlControl, answ, docId)[ FD ]
Line_2 $$ public void launch(String xmlControl, String xmlDoc, long docId) -->Line_122 $$ callbackWS(xmlControl, answ, docId)[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_29 $$ if (destinations.item(i).getTextContent() != null && destinations.item(i).getTextContent().length() > 0) [ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_30 $$ System.out.println(destinations.item(i).getTextContent())[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)[ FD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_32 $$ v_delegations_host.add(entry)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_32 $$ v_delegations_host.add(entry)[ FD ]
Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)-->Line_32 $$ v_delegations_host.add(entry)[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)[ FD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_34 $$ v_delegations_url.add(entry)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_34 $$ v_delegations_url.add(entry)[ FD ]
Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)-->Line_34 $$ v_delegations_url.add(entry)[ FD ]
Line_28 $$ for (int i = 0; i < destinations.getLength(); i++) -->Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)[ FD ]
Line_31 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_HOST)-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_33 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_URL)-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_35 $$ entry = SimpleXMLParser.findChildEntry(destinations.item(i), AgentBehaviour.XML_METHOD)-->Line_36 $$ v_delegations_method.add(entry)[ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ FD ]
Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) -->Line_41 $$ for (int i = 0; i < TOKEN_LENGTH; i++) [ FD ]
Line_42 $$ token = token + (char) (Math.random() * 26 + 65)-->Line_42 $$ token = token + (char) (Math.random() * 26 + 65)[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) [ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_56 $$ System.out.println("-----HOST: " + i + ": " + (String) v_delegations_host.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_57 $$ System.out.println("-----URL: " + i + ": " + (String) v_delegations_url.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_58 $$ System.out.println("-----METHOD: " + i + ": " + (String) v_delegations_method.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))[ FD ]
Line_60 $$ url = new de.fhg.igd.util.URL((String) v_delegations_host.elementAt(i))-->Line_61 $$ boolean alive = service.isAlive(url)[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))[ FD ]
Line_64 $$ wsurl = new java.net.URL((String) v_delegations_url.elementAt(i))-->Line_66 $$ wsurl.openStream()[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_70 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_HOST, (String) v_delegations_host.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_71 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_URL, (String) v_delegations_url.elementAt(i))[ FD ]
Line_53 $$ for (int i = 0; i < v_delegations_host.size(); i++) -->Line_72 $$ prop.setProperty(0 + "." + AgentBehaviour.XML_METHOD, (String) v_delegations_method.elementAt(i))[ FD ]
Line_117 $$ for (int j = 0; j < sa_results.length; j++) -->Line_117 $$ for (int j = 0; j < sa_results.length; j++) [ FD ]
Line_117 $$ for (int j = 0; j < sa_results.length; j++) -->Line_117 $$ for (int j = 0; j < sa_results.length; j++) [ FD ]
Line_117 $$ for (int j = 0; j < sa_results.length; j++) -->Line_117 $$ for (int j = 0; j < sa_results.length; j++) [ FD ]
Line_118 $$ answ = answ + sa_results[j]-->Line_118 $$ answ = answ + sa_results[j][ FD ]
