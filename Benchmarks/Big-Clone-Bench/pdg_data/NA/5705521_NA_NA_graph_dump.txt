Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected static URL[] createUrls(URL jarUrls[]) [ CD ]
Line_2 $$ protected static URL[] createUrls(URL jarUrls[]) -->Line_3 $$ ArrayList<URL> additionalUrls = new ArrayList<URL>(Arrays.asList(jarUrls))[ CD ]
Line_4 $$ for (URL ju : jarUrls) -->Line_6 $$ JarFile jar = new JarFile(ju.getFile())[ FD ]
Line_7 $$ Enumeration<JarEntry> entries = jar.entries()-->Line_7 $$ Enumeration<JarEntry> entries = jar.entries()[ CD ]
Line_6 $$ JarFile jar = new JarFile(ju.getFile())-->Line_7 $$ Enumeration<JarEntry> entries = jar.entries()[ FD ]
Line_8 $$ while (entries.hasMoreElements()) -->Line_8 $$ while (entries.hasMoreElements()) [ CD ]
Line_7 $$ Enumeration<JarEntry> entries = jar.entries()-->Line_8 $$ while (entries.hasMoreElements()) [ FD ]
Line_8 $$ while (entries.hasMoreElements()) -->Line_9 $$ JarEntry j = entries.nextElement()[ CD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_9 $$ JarEntry j = entries.nextElement()[ CD ]
Line_7 $$ Enumeration<JarEntry> entries = jar.entries()-->Line_9 $$ JarEntry j = entries.nextElement()[ FD ]
Line_8 $$ while (entries.hasMoreElements()) -->Line_10 $$ if (j.isDirectory())[ CD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_10 $$ if (j.isDirectory())[ FD ]
Line_10 $$ if (j.isDirectory())-->Line_10 $$ if (j.isDirectory())[ CD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_10 $$ if (j.isDirectory())[ FD ]
Line_8 $$ while (entries.hasMoreElements()) -->Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) [ CD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) [ FD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) [ FD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_12 $$ URL url = new URL("jar:" + ju.getProtocol() + ":" + ju.getFile() + "!/" + j.getName())[ CD ]
Line_4 $$ for (URL ju : jarUrls) -->Line_12 $$ URL url = new URL("jar:" + ju.getProtocol() + ":" + ju.getFile() + "!/" + j.getName())[ FD ]
Line_4 $$ for (URL ju : jarUrls) -->Line_12 $$ URL url = new URL("jar:" + ju.getProtocol() + ":" + ju.getFile() + "!/" + j.getName())[ FD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_12 $$ URL url = new URL("jar:" + ju.getProtocol() + ":" + ju.getFile() + "!/" + j.getName())[ FD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_13 $$ InputStream is = url.openStream()[ CD ]
Line_13 $$ InputStream is = url.openStream()-->Line_13 $$ InputStream is = url.openStream()[ CD ]
Line_12 $$ URL url = new URL("jar:" + ju.getProtocol() + ":" + ju.getFile() + "!/" + j.getName())-->Line_13 $$ InputStream is = url.openStream()[ FD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_14 $$ File tmpFile = File.createTempFile("SCDeploy", ".jar")[ CD ]
Line_14 $$ File tmpFile = File.createTempFile("SCDeploy", ".jar")-->Line_14 $$ File tmpFile = File.createTempFile("SCDeploy", ".jar")[ CD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_15 $$ FileOutputStream fos = new FileOutputStream(tmpFile)[ CD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_16 $$ IOUtils.copy(is, fos)[ CD ]
Line_13 $$ InputStream is = url.openStream()-->Line_16 $$ IOUtils.copy(is, fos)[ FD ]
Line_15 $$ FileOutputStream fos = new FileOutputStream(tmpFile)-->Line_16 $$ IOUtils.copy(is, fos)[ FD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_17 $$ is.close()[ CD ]
Line_13 $$ InputStream is = url.openStream()-->Line_17 $$ is.close()[ FD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_18 $$ fos.close()[ CD ]
Line_15 $$ FileOutputStream fos = new FileOutputStream(tmpFile)-->Line_18 $$ fos.close()[ FD ]
Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) -->Line_19 $$ additionalUrls.add(new URL("file://" + tmpFile.getAbsolutePath()))[ CD ]
Line_3 $$ ArrayList<URL> additionalUrls = new ArrayList<URL>(Arrays.asList(jarUrls))-->Line_19 $$ additionalUrls.add(new URL("file://" + tmpFile.getAbsolutePath()))[ FD ]
Line_14 $$ File tmpFile = File.createTempFile("SCDeploy", ".jar")-->Line_19 $$ additionalUrls.add(new URL("file://" + tmpFile.getAbsolutePath()))[ FD ]
Line_2 $$ protected static URL[] createUrls(URL jarUrls[]) -->Line_25 $$ return additionalUrls.toArray(new URL[] [ CD ]
Line_25 $$ return additionalUrls.toArray(new URL[] -->Line_25 $$ return additionalUrls.toArray(new URL[] [ CD ]
Line_3 $$ ArrayList<URL> additionalUrls = new ArrayList<URL>(Arrays.asList(jarUrls))-->Line_25 $$ return additionalUrls.toArray(new URL[] [ FD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_10 $$ if (j.isDirectory())[ FD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_10 $$ if (j.isDirectory())[ FD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) [ FD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_11 $$ if (j.getName().startsWith("lib/") && j.getName().endsWith(".jar")) [ FD ]
Line_9 $$ JarEntry j = entries.nextElement()-->Line_12 $$ URL url = new URL("jar:" + ju.getProtocol() + ":" + ju.getFile() + "!/" + j.getName())[ FD ]
Line_12 $$ URL url = new URL("jar:" + ju.getProtocol() + ":" + ju.getFile() + "!/" + j.getName())-->Line_13 $$ InputStream is = url.openStream()[ FD ]
Line_13 $$ InputStream is = url.openStream()-->Line_16 $$ IOUtils.copy(is, fos)[ FD ]
Line_15 $$ FileOutputStream fos = new FileOutputStream(tmpFile)-->Line_16 $$ IOUtils.copy(is, fos)[ FD ]
Line_13 $$ InputStream is = url.openStream()-->Line_17 $$ is.close()[ FD ]
Line_15 $$ FileOutputStream fos = new FileOutputStream(tmpFile)-->Line_18 $$ fos.close()[ FD ]
Line_14 $$ File tmpFile = File.createTempFile("SCDeploy", ".jar")-->Line_19 $$ additionalUrls.add(new URL("file://" + tmpFile.getAbsolutePath()))[ FD ]
