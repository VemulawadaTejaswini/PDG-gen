Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException [ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_3 $$ if (local == null)[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_3 $$ if (local == null)[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_4 $$ if (local.exists() && !local.canWrite())[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_4 $$ if (local.exists() && !local.canWrite())[ FD ]
Line_4 $$ if (local.exists() && !local.canWrite())-->Line_4 $$ if (local.exists() && !local.canWrite())[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_4 $$ if (local.exists() && !local.canWrite())[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_5 $$ long lengthCurrent = local.exists() ? local.length() : -1l[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_5 $$ long lengthCurrent = local.exists() ? local.length() : -1l[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_5 $$ long lengthCurrent = local.exists() ? local.length() : -1l[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_6 $$ if (lengthCurrent == 0)[ CD ]
Line_5 $$ long lengthCurrent = local.exists() ? local.length() : -1l-->Line_6 $$ if (lengthCurrent == 0)[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_7 $$ long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_7 $$ long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_7 $$ long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_8 $$ if (remote == null)[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_8 $$ if (remote == null)[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_9 $$ URLConnection urlConnection = remote.openConnection()[ CD ]
Line_9 $$ URLConnection urlConnection = remote.openConnection()-->Line_9 $$ URLConnection urlConnection = remote.openConnection()[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_9 $$ URLConnection urlConnection = remote.openConnection()[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_10 $$ urlConnection.setDoInput(true)[ CD ]
Line_9 $$ URLConnection urlConnection = remote.openConnection()-->Line_10 $$ urlConnection.setDoInput(true)[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_11 $$ urlConnection.setDoOutput(false)[ CD ]
Line_9 $$ URLConnection urlConnection = remote.openConnection()-->Line_11 $$ urlConnection.setDoOutput(false)[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_12 $$ long lengthRemote = urlConnection.getContentLength()[ CD ]
Line_12 $$ long lengthRemote = urlConnection.getContentLength()-->Line_12 $$ long lengthRemote = urlConnection.getContentLength()[ CD ]
Line_9 $$ URLConnection urlConnection = remote.openConnection()-->Line_12 $$ long lengthRemote = urlConnection.getContentLength()[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_13 $$ long lastModifiedRemote = urlConnection.getLastModified()[ CD ]
Line_13 $$ long lastModifiedRemote = urlConnection.getLastModified()-->Line_13 $$ long lastModifiedRemote = urlConnection.getLastModified()[ CD ]
Line_9 $$ URLConnection urlConnection = remote.openConnection()-->Line_13 $$ long lastModifiedRemote = urlConnection.getLastModified()[ FD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_14 $$ if (lengthRemote == lengthCurrent) [ CD ]
Line_12 $$ long lengthRemote = urlConnection.getContentLength()-->Line_14 $$ if (lengthRemote == lengthCurrent) [ FD ]
Line_5 $$ long lengthCurrent = local.exists() ? local.length() : -1l-->Line_14 $$ if (lengthRemote == lengthCurrent) [ FD ]
Line_14 $$ if (lengthRemote == lengthCurrent) -->Line_15 $$ LOGGER.fine("Not downloading " + remote + " of length " + lengthRemote + " and date " + (lastModifiedRemote > 0 ? new Date(lastModifiedRemote).toString() : "n/a") + " for " + local + " of length " + lengthCurrent + " and date " + new Date(lastModifiedCurrent))[ CD ]
Line_14 $$ if (lengthRemote == lengthCurrent) -->Line_16 $$ return false[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_18 $$ BufferedInputStream inputStream = null[ CD ]
Line_2 $$ private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException -->Line_19 $$ BufferedOutputStream bufferedOutputStream = null[ CD ]
Line_18 $$ BufferedInputStream inputStream = null-->Line_21 $$ inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE)[ FD ]
Line_21 $$ inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE)-->Line_21 $$ inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE)[ FD ]
Line_9 $$ URLConnection urlConnection = remote.openConnection()-->Line_21 $$ inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE)[ FD ]
Line_19 $$ BufferedOutputStream bufferedOutputStream = null-->Line_22 $$ bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local))[ FD ]
Line_22 $$ bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local))-->Line_22 $$ bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local))[ FD ]
Line_24 $$ do -->Line_25 $$ int count = inputStream.read(buffer)[ CD ]
Line_25 $$ int count = inputStream.read(buffer)-->Line_25 $$ int count = inputStream.read(buffer)[ CD ]
Line_18 $$ BufferedInputStream inputStream = null-->Line_25 $$ int count = inputStream.read(buffer)[ FD ]
Line_21 $$ inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE)-->Line_25 $$ int count = inputStream.read(buffer)[ FD ]
Line_23 $$ byte[] buffer = new byte[BUFFER_SIZE]-->Line_25 $$ int count = inputStream.read(buffer)[ FD ]
Line_24 $$ do -->Line_26 $$ if (count < 0)[ CD ]
Line_25 $$ int count = inputStream.read(buffer)-->Line_26 $$ if (count < 0)[ FD ]
Line_24 $$ do -->Line_27 $$ bufferedOutputStream.write(buffer, 0, count)[ CD ]
Line_19 $$ BufferedOutputStream bufferedOutputStream = null-->Line_27 $$ bufferedOutputStream.write(buffer, 0, count)[ FD ]
Line_22 $$ bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local))-->Line_27 $$ bufferedOutputStream.write(buffer, 0, count)[ FD ]
Line_23 $$ byte[] buffer = new byte[BUFFER_SIZE]-->Line_27 $$ bufferedOutputStream.write(buffer, 0, count)[ FD ]
Line_25 $$ int count = inputStream.read(buffer)-->Line_27 $$ bufferedOutputStream.write(buffer, 0, count)[ FD ]
Line_18 $$ BufferedInputStream inputStream = null-->Line_32 $$ if (inputStream != null)[ FD ]
Line_21 $$ inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE)-->Line_32 $$ if (inputStream != null)[ FD ]
Line_32 $$ if (inputStream != null)-->Line_32 $$ inputStream.close()[ CD ]
Line_18 $$ BufferedInputStream inputStream = null-->Line_32 $$ inputStream.close()[ FD ]
Line_21 $$ inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE)-->Line_32 $$ inputStream.close()[ FD ]
Line_19 $$ BufferedOutputStream bufferedOutputStream = null-->Line_36 $$ if (bufferedOutputStream != null)[ FD ]
Line_22 $$ bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local))-->Line_36 $$ if (bufferedOutputStream != null)[ FD ]
Line_36 $$ if (bufferedOutputStream != null)-->Line_36 $$ bufferedOutputStream.close()[ CD ]
Line_19 $$ BufferedOutputStream bufferedOutputStream = null-->Line_36 $$ bufferedOutputStream.close()[ FD ]
Line_22 $$ bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local))-->Line_36 $$ bufferedOutputStream.close()[ FD ]
Line_25 $$ int count = inputStream.read(buffer)-->Line_26 $$ if (count < 0)[ FD ]
Line_25 $$ int count = inputStream.read(buffer)-->Line_27 $$ bufferedOutputStream.write(buffer, 0, count)[ FD ]
