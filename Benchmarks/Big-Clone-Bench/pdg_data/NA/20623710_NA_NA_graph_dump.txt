Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception [ CD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_3 $$ if (!targetDirectory.exists()) [ CD ]
Line_3 $$ if (!targetDirectory.exists()) -->Line_3 $$ if (!targetDirectory.exists()) [ CD ]
Line_3 $$ if (!targetDirectory.exists()) -->Line_3 $$ if (!targetDirectory.exists()) [ CD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_3 $$ if (!targetDirectory.exists()) [ FD ]
Line_3 $$ if (!targetDirectory.exists()) -->Line_4 $$ if (!targetDirectory.mkdirs())[ CD ]
Line_4 $$ if (!targetDirectory.mkdirs())-->Line_4 $$ if (!targetDirectory.mkdirs())[ CD ]
Line_4 $$ if (!targetDirectory.mkdirs())-->Line_4 $$ if (!targetDirectory.mkdirs())[ CD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_4 $$ if (!targetDirectory.mkdirs())[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_4 $$ throw new Exception("Could not create directory " + targetDirectory.getAbsolutePath())[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_6 $$ File tmpFile = new File(targetDirectory, "tmp.fasta")[ CD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_7 $$ FileOutputStream fos = new FileOutputStream(tmpFile)[ CD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_8 $$ FileChannel fco = fos.getChannel()[ CD ]
Line_8 $$ FileChannel fco = fos.getChannel()-->Line_8 $$ FileChannel fco = fos.getChannel()[ CD ]
Line_7 $$ FileOutputStream fos = new FileOutputStream(tmpFile)-->Line_8 $$ FileChannel fco = fos.getChannel()[ FD ]
Line_11 $$ FileChannel fci = fis.getChannel()-->Line_11 $$ FileChannel fci = fis.getChannel()[ CD ]
Line_10 $$ FileInputStream fis = new FileInputStream(file)-->Line_11 $$ FileChannel fci = fis.getChannel()[ FD ]
Line_12 $$ ByteBuffer buffer = ByteBuffer.allocate(64000)-->Line_12 $$ ByteBuffer buffer = ByteBuffer.allocate(64000)[ CD ]
Line_11 $$ FileChannel fci = fis.getChannel()-->Line_13 $$ while (fci.read(buffer) > 0) [ FD ]
Line_12 $$ ByteBuffer buffer = ByteBuffer.allocate(64000)-->Line_13 $$ while (fci.read(buffer) > 0) [ FD ]
Line_13 $$ while (fci.read(buffer) > 0) -->Line_14 $$ buffer.flip()[ CD ]
Line_12 $$ ByteBuffer buffer = ByteBuffer.allocate(64000)-->Line_14 $$ buffer.flip()[ FD ]
Line_13 $$ while (fci.read(buffer) > 0) -->Line_15 $$ fco.write(buffer)[ CD ]
Line_8 $$ FileChannel fco = fos.getChannel()-->Line_15 $$ fco.write(buffer)[ FD ]
Line_12 $$ ByteBuffer buffer = ByteBuffer.allocate(64000)-->Line_15 $$ fco.write(buffer)[ FD ]
Line_13 $$ while (fci.read(buffer) > 0) -->Line_16 $$ buffer.clear()[ CD ]
Line_12 $$ ByteBuffer buffer = ByteBuffer.allocate(64000)-->Line_16 $$ buffer.clear()[ FD ]
Line_11 $$ FileChannel fci = fis.getChannel()-->Line_18 $$ fci.close()[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_20 $$ fco.close()[ CD ]
Line_8 $$ FileChannel fco = fos.getChannel()-->Line_20 $$ fco.close()[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_21 $$ FastaFile fastaFile = new FastaFile(tmpFile)[ CD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_22 $$ fastaFile.split(targetDirectory, prefix, maxUnitBases, maxUnitEntries)[ CD ]
Line_21 $$ FastaFile fastaFile = new FastaFile(tmpFile)-->Line_22 $$ fastaFile.split(targetDirectory, prefix, maxUnitBases, maxUnitEntries)[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_22 $$ fastaFile.split(targetDirectory, prefix, maxUnitBases, maxUnitEntries)[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_22 $$ fastaFile.split(targetDirectory, prefix, maxUnitBases, maxUnitEntries)[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_22 $$ fastaFile.split(targetDirectory, prefix, maxUnitBases, maxUnitEntries)[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_22 $$ fastaFile.split(targetDirectory, prefix, maxUnitBases, maxUnitEntries)[ FD ]
Line_2 $$ public static synchronized void repartition(File[] sourceFiles, File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception -->Line_23 $$ tmpFile.delete()[ CD ]
Line_6 $$ File tmpFile = new File(targetDirectory, "tmp.fasta")-->Line_23 $$ tmpFile.delete()[ FD ]
