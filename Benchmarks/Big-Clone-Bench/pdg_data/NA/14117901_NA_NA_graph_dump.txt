Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ void execute(HttpClient client, MonitoredService svc) [ CD ]
Line_4 $$ URI uri = getURI(svc)-->Line_4 $$ URI uri = getURI(svc)[ CD ]
Line_2 $$ void execute(HttpClient client, MonitoredService svc) -->Line_4 $$ URI uri = getURI(svc)[ FD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_5 $$ PageSequenceHttpMethod method = getMethod()[ CD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_6 $$ method.setURI(uri)[ FD ]
Line_4 $$ URI uri = getURI(svc)-->Line_6 $$ method.setURI(uri)[ FD ]
Line_7 $$ if (getVirtualHost() != null) -->Line_8 $$ method.getParams().setVirtualHost(getVirtualHost())[ CD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_8 $$ method.getParams().setVirtualHost(getVirtualHost())[ FD ]
Line_10 $$ if (getUserAgent() != null) -->Line_11 $$ method.addRequestHeader("User-Agent", getUserAgent())[ CD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_11 $$ method.addRequestHeader("User-Agent", getUserAgent())[ FD ]
Line_13 $$ if (m_parms.length > 0) -->Line_14 $$ method.setParameters(m_parms)[ CD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_14 $$ method.setParameters(m_parms)[ FD ]
Line_16 $$ if (m_page.getUserInfo() != null) -->Line_17 $$ String userInfo = m_page.getUserInfo()[ CD ]
Line_17 $$ String userInfo = m_page.getUserInfo()-->Line_17 $$ String userInfo = m_page.getUserInfo()[ CD ]
Line_16 $$ if (m_page.getUserInfo() != null) -->Line_18 $$ String[] streetCred = userInfo.split(":", 2)[ CD ]
Line_18 $$ String[] streetCred = userInfo.split(":", 2)-->Line_18 $$ String[] streetCred = userInfo.split(":", 2)[ CD ]
Line_17 $$ String userInfo = m_page.getUserInfo()-->Line_18 $$ String[] streetCred = userInfo.split(":", 2)[ FD ]
Line_16 $$ if (m_page.getUserInfo() != null) -->Line_19 $$ if (streetCred.length == 2) [ CD ]
Line_19 $$ if (streetCred.length == 2) -->Line_20 $$ client.getState().setCredentials(new AuthScope(AuthScope.ANY), new UsernamePasswordCredentials(streetCred[0], streetCred[1]))[ CD ]
Line_2 $$ void execute(HttpClient client, MonitoredService svc) -->Line_20 $$ client.getState().setCredentials(new AuthScope(AuthScope.ANY), new UsernamePasswordCredentials(streetCred[0], streetCred[1]))[ FD ]
Line_19 $$ if (streetCred.length == 2) -->Line_21 $$ method.setDoAuthentication(true)[ CD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_21 $$ method.setDoAuthentication(true)[ FD ]
Line_24 $$ int code = client.executeMethod(method)-->Line_24 $$ int code = client.executeMethod(method)[ CD ]
Line_2 $$ void execute(HttpClient client, MonitoredService svc) -->Line_24 $$ int code = client.executeMethod(method)[ FD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_24 $$ int code = client.executeMethod(method)[ FD ]
Line_25 $$ if (!getRange().contains(code)) -->Line_25 $$ if (!getRange().contains(code)) [ CD ]
Line_25 $$ if (!getRange().contains(code)) -->Line_25 $$ if (!getRange().contains(code)) [ CD ]
Line_24 $$ int code = client.executeMethod(method)-->Line_25 $$ if (!getRange().contains(code)) [ FD ]
Line_28 $$ InputStream inputStream = method.getResponseBodyAsStream()-->Line_28 $$ InputStream inputStream = method.getResponseBodyAsStream()[ CD ]
Line_5 $$ PageSequenceHttpMethod method = getMethod()-->Line_28 $$ InputStream inputStream = method.getResponseBodyAsStream()[ FD ]
Line_28 $$ InputStream inputStream = method.getResponseBodyAsStream()-->Line_31 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_29 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_31 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_28 $$ InputStream inputStream = method.getResponseBodyAsStream()-->Line_33 $$ IOUtils.closeQuietly(inputStream)[ FD ]
Line_29 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_34 $$ IOUtils.closeQuietly(outputStream)[ FD ]
Line_36 $$ String responseString = outputStream.toString()-->Line_36 $$ String responseString = outputStream.toString()[ CD ]
Line_29 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_36 $$ String responseString = outputStream.toString()[ FD ]
Line_37 $$ if (getFailurePattern() != null) -->Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)[ CD ]
Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)-->Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)[ CD ]
Line_36 $$ String responseString = outputStream.toString()-->Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)[ FD ]
Line_37 $$ if (getFailurePattern() != null) -->Line_39 $$ if (matcher.find()) [ CD ]
Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)-->Line_39 $$ if (matcher.find()) [ FD ]
Line_39 $$ if (matcher.find()) -->Line_39 $$ if (matcher.find()) [ CD ]
Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)-->Line_39 $$ if (matcher.find()) [ FD ]
Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)-->Line_40 $$ throw new PageSequenceMonitorException(getResolvedFailureMessage(matcher))[ FD ]
Line_43 $$ if (getSuccessPattern() != null) -->Line_44 $$ Matcher matcher = getSuccessPattern().matcher(responseString)[ CD ]
Line_36 $$ String responseString = outputStream.toString()-->Line_44 $$ Matcher matcher = getSuccessPattern().matcher(responseString)[ FD ]
Line_43 $$ if (getSuccessPattern() != null) -->Line_45 $$ if (!matcher.find()) [ CD ]
Line_45 $$ if (!matcher.find()) -->Line_45 $$ if (!matcher.find()) [ CD ]
Line_45 $$ if (!matcher.find()) -->Line_45 $$ if (!matcher.find()) [ CD ]
Line_38 $$ Matcher matcher = getFailurePattern().matcher(responseString)-->Line_45 $$ if (!matcher.find()) [ FD ]
