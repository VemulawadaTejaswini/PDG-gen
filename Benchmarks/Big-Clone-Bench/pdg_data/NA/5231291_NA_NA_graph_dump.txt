Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ Application.getController().notifyProgressStarted()[ CD ]
Line_2 $$ public void run() -->Line_4 $$ Application.getController().notifyProgressUpdated(-1)[ CD ]
Line_2 $$ public void run() -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_6 $$ File archive = fileList.get(f)[ CD ]
Line_6 $$ File archive = fileList.get(f)-->Line_6 $$ File archive = fileList.get(f)[ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_6 $$ File archive = fileList.get(f)[ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_7 $$ String arname = archive.getName()[ CD ]
Line_7 $$ String arname = archive.getName()-->Line_7 $$ String arname = archive.getName()[ CD ]
Line_6 $$ File archive = fileList.get(f)-->Line_7 $$ String arname = archive.getName()[ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ CD ]
Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())-->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ CD ]
Line_7 $$ String arname = archive.getName()-->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ FD ]
Line_7 $$ String arname = archive.getName()-->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ FD ]
Line_7 $$ String arname = archive.getName()-->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_9 $$ Algorithm alg = null[ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_10 $$ Algorithm algs[] = algFactory.getAlgorithms()[ CD ]
Line_10 $$ Algorithm algs[] = algFactory.getAlgorithms()-->Line_10 $$ Algorithm algs[] = algFactory.getAlgorithms()[ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_11 $$ for (int i = 0; i < algs.length; i++) [ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ CD ]
Line_11 $$ for (int i = 0; i < algs.length; i++) -->Line_11 $$ for (int i = 0; i < algs.length; i++) [ CD ]
Line_11 $$ for (int i = 0; i < algs.length; i++) -->Line_11 $$ for (int i = 0; i < algs.length; i++) [ CD ]
Line_11 $$ for (int i = 0; i < algs.length; i++) -->Line_11 $$ for (int i = 0; i < algs.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < algs.length; i++) -->Line_12 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) [ CD ]
Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())-->Line_12 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) [ FD ]
Line_12 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) -->Line_12 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) [ CD ]
Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())-->Line_12 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) [ FD ]
Line_12 $$ if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) -->Line_13 $$ alg = algs[i][ CD ]
Line_13 $$ alg = algs[i]-->Line_13 $$ alg = algs[i][ FD ]
Line_9 $$ Algorithm alg = null-->Line_13 $$ alg = algs[i][ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_17 $$ if (alg == null) [ CD ]
Line_13 $$ alg = algs[i]-->Line_17 $$ if (alg == null) [ FD ]
Line_9 $$ Algorithm alg = null-->Line_17 $$ if (alg == null) [ FD ]
Line_17 $$ if (alg == null) -->Line_18 $$ Application.getController().displayError(bundle.getString("unknown_alg_title"), bundle.getString("unknown_alg_text"))[ CD ]
Line_17 $$ if (alg == null) -->Line_19 $$ return[ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_22 $$ if (!alg.initDecrypt(password)) [ CD ]
Line_22 $$ if (!alg.initDecrypt(password)) -->Line_22 $$ if (!alg.initDecrypt(password)) [ CD ]
Line_22 $$ if (!alg.initDecrypt(password)) -->Line_22 $$ if (!alg.initDecrypt(password)) [ CD ]
Line_13 $$ alg = algs[i]-->Line_22 $$ if (!alg.initDecrypt(password)) [ FD ]
Line_9 $$ Algorithm alg = null-->Line_22 $$ if (!alg.initDecrypt(password)) [ FD ]
Line_22 $$ if (!alg.initDecrypt(password)) -->Line_23 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text"))[ CD ]
Line_22 $$ if (!alg.initDecrypt(password)) -->Line_24 $$ return[ CD ]
Line_13 $$ alg = algs[i]-->Line_29 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) [ FD ]
Line_9 $$ Algorithm alg = null-->Line_29 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) [ FD ]
Line_29 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) -->Line_30 $$ is = alg.getDecryptionStream(new FileInputStream(archive))[ CD ]
Line_13 $$ alg = algs[i]-->Line_30 $$ is = alg.getDecryptionStream(new FileInputStream(archive))[ FD ]
Line_9 $$ Algorithm alg = null-->Line_30 $$ is = alg.getDecryptionStream(new FileInputStream(archive))[ FD ]
Line_29 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) -->Line_31 $$ if (is == null) [ CD ]
Line_31 $$ if (is == null) -->Line_32 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text"))[ CD ]
Line_31 $$ if (is == null) -->Line_33 $$ return[ CD ]
Line_29 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) -->Line_35 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) [ CD ]
Line_13 $$ alg = algs[i]-->Line_35 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) [ FD ]
Line_9 $$ Algorithm alg = null-->Line_35 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) [ FD ]
Line_35 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) -->Line_37 $$ if (is == null) [ CD ]
Line_37 $$ if (is == null) -->Line_38 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text"))[ CD ]
Line_37 $$ if (is == null) -->Line_39 $$ return[ CD ]
Line_43 $$ if (zis == null) -->Line_44 $$ Application.getController().displayError(bundle.getString("dec_init_fail_title"), bundle.getString("dec_init_fail_text"))[ CD ]
Line_43 $$ if (zis == null) -->Line_45 $$ return[ CD ]
Line_48 $$ if (outputDir == null) -->Line_49 $$ return[ CD ]
Line_51 $$ if (!outputDir.exists()) -->Line_51 $$ if (!outputDir.exists()) [ CD ]
Line_51 $$ if (!outputDir.exists()) -->Line_51 $$ if (!outputDir.exists()) [ CD ]
Line_51 $$ if (!outputDir.exists()) -->Line_52 $$ if (!outputDir.mkdir()) [ CD ]
Line_52 $$ if (!outputDir.mkdir()) -->Line_52 $$ if (!outputDir.mkdir()) [ CD ]
Line_52 $$ if (!outputDir.mkdir()) -->Line_52 $$ if (!outputDir.mkdir()) [ CD ]
Line_52 $$ if (!outputDir.mkdir()) -->Line_53 $$ Application.getController().displayError(bundle.getString("output_dir_fail_title"), outputDir.getAbsolutePath() + " " + bundle.getString("output_dir_fail_text"))[ CD ]
Line_52 $$ if (!outputDir.mkdir()) -->Line_54 $$ return[ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_61 $$ File out = new File(outputDir, zae.getName())[ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_62 $$ if (out.exists()) [ CD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_62 $$ if (out.exists()) [ FD ]
Line_62 $$ if (out.exists()) -->Line_62 $$ if (out.exists()) [ CD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_62 $$ if (out.exists()) [ FD ]
Line_62 $$ if (out.exists()) -->Line_63 $$ if (!mayOverwrite(out)) [ CD ]
Line_63 $$ if (!mayOverwrite(out)) -->Line_63 $$ if (!mayOverwrite(out)) [ CD ]
Line_63 $$ if (!mayOverwrite(out)) -->Line_63 $$ if (!mayOverwrite(out)) [ CD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_63 $$ if (!mayOverwrite(out)) [ FD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_67 $$ Application.getController().displayVerbose("writing to file: " + out.getAbsolutePath())[ CD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_67 $$ Application.getController().displayVerbose("writing to file: " + out.getAbsolutePath())[ FD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_68 $$ if (!out.getParentFile().exists()) [ CD ]
Line_68 $$ if (!out.getParentFile().exists()) -->Line_68 $$ if (!out.getParentFile().exists()) [ CD ]
Line_68 $$ if (!out.getParentFile().exists()) -->Line_68 $$ if (!out.getParentFile().exists()) [ CD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_68 $$ if (!out.getParentFile().exists()) [ FD ]
Line_68 $$ if (!out.getParentFile().exists()) -->Line_69 $$ out.getParentFile().mkdirs()[ CD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_69 $$ out.getParentFile().mkdirs()[ FD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_71 $$ if (zae.isDirectory()) [ CD ]
Line_71 $$ if (zae.isDirectory()) -->Line_71 $$ if (zae.isDirectory()) [ CD ]
Line_71 $$ if (zae.isDirectory()) -->Line_72 $$ out.mkdir()[ CD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_72 $$ out.mkdir()[ FD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_75 $$ FileOutputStream os = new FileOutputStream(out)[ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_76 $$ long length = zae.getCompressedSize(), counter = 0[ CD ]
Line_76 $$ long length = zae.getCompressedSize(), counter = 0-->Line_76 $$ long length = zae.getCompressedSize(), counter = 0[ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_77 $$ Application.getController().displayVerbose("Length of zip entry " + zae.getName() + " is " + length + "b")[ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_78 $$ byte[] buffer = new byte[16384][ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_79 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")[ CD ]
Line_79 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_79 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")[ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_80 $$ DigestInputStream in = new DigestInputStream(zis, md)[ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_81 $$ while ((counter = in.read(buffer)) > 0) [ CD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) [ CD ]
Line_81 $$ while ((counter = in.read(buffer)) > 0) -->Line_81 $$ while ((counter = in.read(buffer)) > 0) [ FD ]
Line_76 $$ long length = zae.getCompressedSize(), counter = 0-->Line_81 $$ while ((counter = in.read(buffer)) > 0) [ FD ]
Line_81 $$ while ((counter = in.read(buffer)) > 0) -->Line_81 $$ while ((counter = in.read(buffer)) > 0) [ CD ]
Line_80 $$ DigestInputStream in = new DigestInputStream(zis, md)-->Line_81 $$ while ((counter = in.read(buffer)) > 0) [ FD ]
Line_78 $$ byte[] buffer = new byte[16384]-->Line_81 $$ while ((counter = in.read(buffer)) > 0) [ FD ]
Line_81 $$ while ((counter = in.read(buffer)) > 0) -->Line_82 $$ if (Thread.currentThread().isInterrupted()) [ CD ]
Line_82 $$ if (Thread.currentThread().isInterrupted()) -->Line_82 $$ if (Thread.currentThread().isInterrupted()) [ CD ]
Line_82 $$ if (Thread.currentThread().isInterrupted()) -->Line_83 $$ os.close()[ CD ]
Line_75 $$ FileOutputStream os = new FileOutputStream(out)-->Line_83 $$ os.close()[ FD ]
Line_82 $$ if (Thread.currentThread().isInterrupted()) -->Line_84 $$ zis.close()[ CD ]
Line_82 $$ if (Thread.currentThread().isInterrupted()) -->Line_85 $$ Application.getController().notifyProgressFinished()[ CD ]
Line_82 $$ if (Thread.currentThread().isInterrupted()) -->Line_86 $$ resetModel(true)[ CD ]
Line_82 $$ if (Thread.currentThread().isInterrupted()) -->Line_87 $$ return[ CD ]
Line_81 $$ while ((counter = in.read(buffer)) > 0) -->Line_89 $$ os.write(buffer, 0, (int) counter)[ CD ]
Line_75 $$ FileOutputStream os = new FileOutputStream(out)-->Line_89 $$ os.write(buffer, 0, (int) counter)[ FD ]
Line_78 $$ byte[] buffer = new byte[16384]-->Line_89 $$ os.write(buffer, 0, (int) counter)[ FD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_91 $$ os.close()[ CD ]
Line_75 $$ FileOutputStream os = new FileOutputStream(out)-->Line_91 $$ os.close()[ FD ]
Line_59 $$ while ((zae = zis.getNextZipEntry()) != null) -->Line_92 $$ if (zae.getComment() != null && zae.getComment().length() > 0) [ CD ]
Line_92 $$ if (zae.getComment() != null && zae.getComment().length() > 0) -->Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) [ CD ]
Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) -->Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) [ CD ]
Line_79 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) [ FD ]
Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) -->Line_94 $$ Application.getController().displayVerbose("Hash of " + zae.getName() + ": " + new Base64().encodeToString(md.digest()))[ CD ]
Line_79 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_94 $$ Application.getController().displayVerbose("Hash of " + zae.getName() + ": " + new Base64().encodeToString(md.digest()))[ FD ]
Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) -->Line_95 $$ Application.getController().displayError("Hash Error", "The stored hash of the original file and the hash of the decrypted data do not match. Normally, this means that your data has been manipulated/damaged, but it can also happen if your Java Runtime has a bug in his hash functions.\nIT IS VERY IMPORTANT TO CHECK THE INTEGRITY OF YOUR DECRYPTED DATA!")[ CD ]
Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) -->Line_97 $$ Application.getController().displayVerbose("the hash of " + zae.getName() + " was verified succesfully")[ CD ]
Line_101 $$ if (!gotEntries) -->Line_102 $$ Application.getController().displayError(bundle.getString("error_no_entries_title"), bundle.getString("error_no_entries_text"))[ CD ]
Line_101 $$ if (!gotEntries) -->Line_103 $$ outputDir.delete()[ CD ]
Line_2 $$ public void run() -->Line_115 $$ Application.getController().notifyProgressFinished()[ CD ]
Line_2 $$ public void run() -->Line_116 $$ resetModel(true)[ CD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_5 $$ for (int f = 0; f < fileList.size(); f++) [ FD ]
Line_5 $$ for (int f = 0; f < fileList.size(); f++) -->Line_6 $$ File archive = fileList.get(f)[ FD ]
Line_6 $$ File archive = fileList.get(f)-->Line_7 $$ String arname = archive.getName()[ FD ]
Line_7 $$ String arname = archive.getName()-->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ FD ]
Line_7 $$ String arname = archive.getName()-->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ FD ]
Line_7 $$ String arname = archive.getName()-->Line_8 $$ String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length())[ FD ]
Line_9 $$ Algorithm alg = null-->Line_17 $$ if (alg == null) [ FD ]
Line_9 $$ Algorithm alg = null-->Line_22 $$ if (!alg.initDecrypt(password)) [ FD ]
Line_9 $$ Algorithm alg = null-->Line_29 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) [ FD ]
Line_9 $$ Algorithm alg = null-->Line_30 $$ is = alg.getDecryptionStream(new FileInputStream(archive))[ FD ]
Line_9 $$ Algorithm alg = null-->Line_35 $$ if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) [ FD ]
Line_11 $$ for (int i = 0; i < algs.length; i++) -->Line_11 $$ for (int i = 0; i < algs.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < algs.length; i++) -->Line_11 $$ for (int i = 0; i < algs.length; i++) [ FD ]
Line_11 $$ for (int i = 0; i < algs.length; i++) -->Line_11 $$ for (int i = 0; i < algs.length; i++) [ FD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_62 $$ if (out.exists()) [ FD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_62 $$ if (out.exists()) [ FD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_63 $$ if (!mayOverwrite(out)) [ FD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_67 $$ Application.getController().displayVerbose("writing to file: " + out.getAbsolutePath())[ FD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_68 $$ if (!out.getParentFile().exists()) [ FD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_69 $$ out.getParentFile().mkdirs()[ FD ]
Line_61 $$ File out = new File(outputDir, zae.getName())-->Line_72 $$ out.mkdir()[ FD ]
Line_75 $$ FileOutputStream os = new FileOutputStream(out)-->Line_91 $$ os.close()[ FD ]
Line_79 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_93 $$ if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) [ FD ]
Line_79 $$ MessageDigest md = MessageDigest.getInstance("SHA-1")-->Line_94 $$ Application.getController().displayVerbose("Hash of " + zae.getName() + ": " + new Base64().encodeToString(md.digest()))[ FD ]
