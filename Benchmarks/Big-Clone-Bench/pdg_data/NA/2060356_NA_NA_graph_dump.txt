Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) [ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_3 $$ List res = new ArrayList()[ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_4 $$ File app_dir = getApplicationFile("plugins")[ CD ]
Line_4 $$ File app_dir = getApplicationFile("plugins")-->Line_4 $$ File app_dir = getApplicationFile("plugins")[ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_5 $$ if (!(app_dir.exists()) && app_dir.isDirectory()) [ CD ]
Line_4 $$ File app_dir = getApplicationFile("plugins")-->Line_5 $$ if (!(app_dir.exists()) && app_dir.isDirectory()) [ FD ]
Line_4 $$ File app_dir = getApplicationFile("plugins")-->Line_5 $$ if (!(app_dir.exists()) && app_dir.isDirectory()) [ FD ]
Line_5 $$ if (!(app_dir.exists()) && app_dir.isDirectory()) -->Line_6 $$ listener.messageLogged(LoggerChannel.LT_ERROR, "Application dir '" + app_dir + "' not found")[ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_6 $$ listener.messageLogged(LoggerChannel.LT_ERROR, "Application dir '" + app_dir + "' not found")[ FD ]
Line_5 $$ if (!(app_dir.exists()) && app_dir.isDirectory()) -->Line_7 $$ return (new LaunchablePlugin[0])[ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_9 $$ File[] plugins = app_dir.listFiles()[ CD ]
Line_9 $$ File[] plugins = app_dir.listFiles()-->Line_9 $$ File[] plugins = app_dir.listFiles()[ CD ]
Line_4 $$ File app_dir = getApplicationFile("plugins")-->Line_9 $$ File[] plugins = app_dir.listFiles()[ FD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_10 $$ if (plugins == null || plugins.length == 0) [ CD ]
Line_10 $$ if (plugins == null || plugins.length == 0) -->Line_11 $$ listener.messageLogged(LoggerChannel.LT_ERROR, "Application dir '" + app_dir + "' empty")[ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_11 $$ listener.messageLogged(LoggerChannel.LT_ERROR, "Application dir '" + app_dir + "' empty")[ FD ]
Line_10 $$ if (plugins == null || plugins.length == 0) -->Line_12 $$ return (new LaunchablePlugin[0])[ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_14 $$ for (int i = 0; i < plugins.length; i++) [ CD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) [ CD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_14 $$ for (int i = 0; i < plugins.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_14 $$ for (int i = 0; i < plugins.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_14 $$ for (int i = 0; i < plugins.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_15 $$ File plugin_dir = plugins[i][ CD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_16 $$ if (!plugin_dir.isDirectory()) [ CD ]
Line_16 $$ if (!plugin_dir.isDirectory()) -->Line_16 $$ if (!plugin_dir.isDirectory()) [ CD ]
Line_16 $$ if (!plugin_dir.isDirectory()) -->Line_16 $$ if (!plugin_dir.isDirectory()) [ CD ]
Line_15 $$ File plugin_dir = plugins[i]-->Line_16 $$ if (!plugin_dir.isDirectory()) [ FD ]
Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()-->Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()[ CD ]
Line_22 $$ File[] contents = plugin_dir.listFiles()-->Line_22 $$ File[] contents = plugin_dir.listFiles()[ CD ]
Line_15 $$ File plugin_dir = plugins[i]-->Line_22 $$ File[] contents = plugin_dir.listFiles()[ FD ]
Line_22 $$ File[] contents = plugin_dir.listFiles()-->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)-->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)-->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ CD ]
Line_22 $$ File[] contents = plugin_dir.listFiles()-->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)-->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_26 $$ String[] plugin_version = -->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_27 $$ String[] plugin_id = -->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_29 $$ for (int j = 0; j < contents.length; j++) -->Line_29 $$ for (int j = 0; j < contents.length; j++) [ CD ]
Line_29 $$ for (int j = 0; j < contents.length; j++) -->Line_29 $$ for (int j = 0; j < contents.length; j++) [ CD ]
Line_29 $$ for (int j = 0; j < contents.length; j++) -->Line_29 $$ for (int j = 0; j < contents.length; j++) [ FD ]
Line_29 $$ for (int j = 0; j < contents.length; j++) -->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ CD ]
Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])-->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ FD ]
Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()-->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ FD ]
Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])-->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ CD ]
Line_21 $$ ClassLoader root_cl = classLoader-->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ FD ]
Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])-->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ FD ]
Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()-->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ FD ]
Line_34 $$ if (properties_file.exists()) -->Line_34 $$ if (properties_file.exists()) [ CD ]
Line_40 $$ if (fis != null) -->Line_41 $$ fis.close()[ CD ]
Line_34 $$ if (properties_file.exists()) -->Line_45 $$ if (classLoader instanceof URLClassLoader) [ CD ]
Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])-->Line_45 $$ if (classLoader instanceof URLClassLoader) [ FD ]
Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()-->Line_45 $$ if (classLoader instanceof URLClassLoader) [ FD ]
Line_45 $$ if (classLoader instanceof URLClassLoader) -->Line_47 $$ URL url = current.findResource("plugin.properties")[ CD ]
Line_45 $$ if (classLoader instanceof URLClassLoader) -->Line_48 $$ if (url != null) [ CD ]
Line_48 $$ if (url != null) -->Line_49 $$ props.load(url.openStream())[ CD ]
Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])-->Line_57 $$ Class c = classLoader.loadClass(plugin_class)[ FD ]
Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()-->Line_57 $$ Class c = classLoader.loadClass(plugin_class)[ FD ]
Line_59 $$ if (plugin instanceof LaunchablePlugin) -->Line_60 $$ preloaded_plugins.put(plugin_class, plugin)[ CD ]
Line_59 $$ if (plugin instanceof LaunchablePlugin) -->Line_61 $$ res.add(plugin)[ CD ]
Line_3 $$ List res = new ArrayList()-->Line_61 $$ res.add(plugin)[ FD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_64 $$ listener.messageLogged("Load of plugin in '" + plugin_dir + "' fails", e)[ FD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_67 $$ LaunchablePlugin[] x = new LaunchablePlugin[res.size()][ CD ]
Line_3 $$ List res = new ArrayList()-->Line_67 $$ LaunchablePlugin[] x = new LaunchablePlugin[res.size()][ FD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_68 $$ res.toArray(x)[ CD ]
Line_3 $$ List res = new ArrayList()-->Line_68 $$ res.toArray(x)[ FD ]
Line_67 $$ LaunchablePlugin[] x = new LaunchablePlugin[res.size()]-->Line_68 $$ res.toArray(x)[ FD ]
Line_2 $$ private static LaunchablePlugin[] findLaunchablePlugins(LoggerChannelListener listener) -->Line_69 $$ return (x)[ CD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_14 $$ for (int i = 0; i < plugins.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_14 $$ for (int i = 0; i < plugins.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < plugins.length; i++) -->Line_14 $$ for (int i = 0; i < plugins.length; i++) [ FD ]
Line_15 $$ File plugin_dir = plugins[i]-->Line_16 $$ if (!plugin_dir.isDirectory()) [ FD ]
Line_15 $$ File plugin_dir = plugins[i]-->Line_22 $$ File[] contents = plugin_dir.listFiles()[ FD ]
Line_22 $$ File[] contents = plugin_dir.listFiles()-->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)-->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_26 $$ String[] plugin_version = -->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_27 $$ String[] plugin_id = -->Line_28 $$ contents = getHighestJarVersions(contents, plugin_version, plugin_id, true)[ FD ]
Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()-->Line_45 $$ if (classLoader instanceof URLClassLoader) [ FD ]
Line_20 $$ ClassLoader classLoader = PluginLauncherImpl.class.getClassLoader()-->Line_57 $$ Class c = classLoader.loadClass(plugin_class)[ FD ]
Line_29 $$ for (int j = 0; j < contents.length; j++) -->Line_29 $$ for (int j = 0; j < contents.length; j++) [ FD ]
Line_29 $$ for (int j = 0; j < contents.length; j++) -->Line_29 $$ for (int j = 0; j < contents.length; j++) [ FD ]
Line_29 $$ for (int j = 0; j < contents.length; j++) -->Line_29 $$ for (int j = 0; j < contents.length; j++) [ FD ]
Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])-->Line_30 $$ classLoader = addFileToClassPath(root_cl, classLoader, contents[j])[ FD ]
