Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void unzip(File filename) throws ZipException, IOException [ CD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_3 $$ ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)))[ CD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_4 $$ ZipEntry entry = null[ CD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_5 $$ boolean first_entry = true[ CD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_6 $$ while ((entry = in.getNextEntry()) != null) [ CD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_2 $$ private void unzip(File filename) throws ZipException, IOException [ CD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_6 $$ while ((entry = in.getNextEntry()) != null) [ FD ]
Line_4 $$ ZipEntry entry = null-->Line_6 $$ while ((entry = in.getNextEntry()) != null) [ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_6 $$ while ((entry = in.getNextEntry()) != null) [ CD ]
Line_3 $$ ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_6 $$ while ((entry = in.getNextEntry()) != null) [ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_7 $$ if (first_entry) [ CD ]
Line_7 $$ if (first_entry) -->Line_8 $$ if (!entry.isDirectory()) [ CD ]
Line_8 $$ if (!entry.isDirectory()) -->Line_8 $$ if (!entry.isDirectory()) [ CD ]
Line_8 $$ if (!entry.isDirectory()) -->Line_8 $$ if (!entry.isDirectory()) [ CD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_8 $$ if (!entry.isDirectory()) [ FD ]
Line_4 $$ ZipEntry entry = null-->Line_8 $$ if (!entry.isDirectory()) [ FD ]
Line_8 $$ if (!entry.isDirectory()) -->Line_9 $$ File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()))[ CD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_9 $$ File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()))[ FD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_9 $$ File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()))[ FD ]
Line_8 $$ if (!entry.isDirectory()) -->Line_10 $$ if (!subdir.exists()) [ CD ]
Line_10 $$ if (!subdir.exists()) -->Line_10 $$ if (!subdir.exists()) [ CD ]
Line_10 $$ if (!subdir.exists()) -->Line_10 $$ if (!subdir.exists()) [ CD ]
Line_9 $$ File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()))-->Line_10 $$ if (!subdir.exists()) [ FD ]
Line_10 $$ if (!subdir.exists()) -->Line_11 $$ subdir.mkdir()[ CD ]
Line_9 $$ File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()))-->Line_11 $$ subdir.mkdir()[ FD ]
Line_7 $$ if (first_entry) -->Line_15 $$ first_entry = false[ CD ]
Line_15 $$ first_entry = false-->Line_15 $$ first_entry = false[ FD ]
Line_5 $$ boolean first_entry = true-->Line_15 $$ first_entry = false[ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_17 $$ if (entry.isDirectory()) [ CD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_17 $$ if (entry.isDirectory()) [ FD ]
Line_4 $$ ZipEntry entry = null-->Line_17 $$ if (entry.isDirectory()) [ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_17 $$ if (entry.isDirectory()) [ CD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_17 $$ if (entry.isDirectory()) [ FD ]
Line_4 $$ ZipEntry entry = null-->Line_17 $$ if (entry.isDirectory()) [ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_18 $$ FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()))[ CD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_18 $$ FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()))[ FD ]
Line_4 $$ ZipEntry entry = null-->Line_18 $$ FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()))[ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())[ CD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())[ FD ]
Line_4 $$ ZipEntry entry = null-->Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())[ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))[ CD ]
Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())-->Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))[ FD ]
Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())-->Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))[ FD ]
Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())-->Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))[ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_22 $$ if (!outdir.exists())[ CD ]
Line_22 $$ if (!outdir.exists())-->Line_22 $$ if (!outdir.exists())[ CD ]
Line_22 $$ if (!outdir.exists())-->Line_22 $$ if (!outdir.exists())[ CD ]
Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))-->Line_22 $$ if (!outdir.exists())[ FD ]
Line_22 $$ if (!outdir.exists())-->Line_22 $$ FileUtils.forceMkdir(outdir)[ CD ]
Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))-->Line_22 $$ FileUtils.forceMkdir(outdir)[ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_23 $$ FileOutputStream fo = new FileOutputStream(outfile)[ CD ]
Line_17 $$ if (entry.isDirectory()) -->Line_24 $$ BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER)[ CD ]
Line_17 $$ if (entry.isDirectory()) -->Line_25 $$ int read[ CD ]
Line_17 $$ if (entry.isDirectory()) -->Line_26 $$ byte data[] = new byte[BUFFER][ CD ]
Line_17 $$ if (entry.isDirectory()) -->Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) [ CD ]
Line_17 $$ if (entry.isDirectory()) -->Line_17 $$ if (entry.isDirectory()) [ CD ]
Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) -->Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) [ FD ]
Line_25 $$ int read-->Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) [ FD ]
Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) -->Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) [ CD ]
Line_3 $$ ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) [ FD ]
Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) -->Line_29 $$ bos.write(data, 0, read)[ CD ]
Line_24 $$ BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER)-->Line_29 $$ bos.write(data, 0, read)[ FD ]
Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) -->Line_29 $$ bos.write(data, 0, read)[ FD ]
Line_25 $$ int read-->Line_29 $$ bos.write(data, 0, read)[ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_31 $$ bos.flush()[ CD ]
Line_24 $$ BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER)-->Line_31 $$ bos.flush()[ FD ]
Line_17 $$ if (entry.isDirectory()) -->Line_32 $$ bos.close()[ CD ]
Line_24 $$ BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER)-->Line_32 $$ bos.close()[ FD ]
Line_2 $$ private void unzip(File filename) throws ZipException, IOException -->Line_35 $$ in.close()[ CD ]
Line_3 $$ ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)))-->Line_35 $$ in.close()[ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_8 $$ if (!entry.isDirectory()) [ FD ]
Line_9 $$ File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()))-->Line_10 $$ if (!subdir.exists()) [ FD ]
Line_9 $$ File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()))-->Line_11 $$ subdir.mkdir()[ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_17 $$ if (entry.isDirectory()) [ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_17 $$ if (entry.isDirectory()) [ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_18 $$ FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()))[ FD ]
Line_6 $$ while ((entry = in.getNextEntry()) != null) -->Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())[ FD ]
Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())-->Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))[ FD ]
Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())-->Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))[ FD ]
Line_20 $$ File outfile = new File(dir + File.separator + entry.getName())-->Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))[ FD ]
Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))-->Line_22 $$ if (!outdir.exists())[ FD ]
Line_21 $$ File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()))-->Line_22 $$ FileUtils.forceMkdir(outdir)[ FD ]
Line_24 $$ BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER)-->Line_31 $$ bos.flush()[ FD ]
Line_24 $$ BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER)-->Line_32 $$ bos.close()[ FD ]
Line_27 $$ while ((read = in.read(data, 0, BUFFER)) != -1) -->Line_29 $$ bos.write(data, 0, read)[ FD ]
