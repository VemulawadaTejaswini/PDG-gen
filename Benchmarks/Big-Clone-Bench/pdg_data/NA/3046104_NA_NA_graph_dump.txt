Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception [ CD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()[ CD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_4 $$ qparams.add(new BasicNameValuePair("method", "gg.people.findByUsername"))[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_4 $$ qparams.add(new BasicNameValuePair("method", "gg.people.findByUsername"))[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_5 $$ qparams.add(new BasicNameValuePair("key", this.key))[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_5 $$ qparams.add(new BasicNameValuePair("key", this.key))[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_6 $$ qparams.add(new BasicNameValuePair("username", userName))[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_6 $$ qparams.add(new BasicNameValuePair("username", userName))[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_7 $$ String url = REST_URL + "?" + URLEncodedUtils.format(qparams, "UTF-8")[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_7 $$ String url = REST_URL + "?" + URLEncodedUtils.format(qparams, "UTF-8")[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_8 $$ URI uri = new URI(url)[ CD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_9 $$ HttpGet httpget = new HttpGet(uri)[ CD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_10 $$ HttpResponse response = httpClient.execute(httpget)[ CD ]
Line_10 $$ HttpResponse response = httpClient.execute(httpget)-->Line_10 $$ HttpResponse response = httpClient.execute(httpget)[ CD ]
Line_9 $$ HttpGet httpget = new HttpGet(uri)-->Line_10 $$ HttpResponse response = httpClient.execute(httpget)[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_11 $$ int status = response.getStatusLine().getStatusCode()[ CD ]
Line_11 $$ int status = response.getStatusLine().getStatusCode()-->Line_11 $$ int status = response.getStatusLine().getStatusCode()[ CD ]
Line_10 $$ HttpResponse response = httpClient.execute(httpget)-->Line_11 $$ int status = response.getStatusLine().getStatusCode()[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_12 $$ errorCheck(response, status)[ CD ]
Line_10 $$ HttpResponse response = httpClient.execute(httpget)-->Line_12 $$ errorCheck(response, status)[ FD ]
Line_11 $$ int status = response.getStatusLine().getStatusCode()-->Line_12 $$ errorCheck(response, status)[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_13 $$ InputStream content = response.getEntity().getContent()[ CD ]
Line_13 $$ InputStream content = response.getEntity().getContent()-->Line_13 $$ InputStream content = response.getEntity().getContent()[ CD ]
Line_10 $$ HttpResponse response = httpClient.execute(httpget)-->Line_13 $$ InputStream content = response.getEntity().getContent()[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_14 $$ GGUser user = JAXB.unmarshal(content, GGUser.class)[ CD ]
Line_14 $$ GGUser user = JAXB.unmarshal(content, GGUser.class)-->Line_14 $$ GGUser user = JAXB.unmarshal(content, GGUser.class)[ CD ]
Line_13 $$ InputStream content = response.getEntity().getContent()-->Line_14 $$ GGUser user = JAXB.unmarshal(content, GGUser.class)[ FD ]
Line_2 $$ public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception -->Line_15 $$ return user[ CD ]
