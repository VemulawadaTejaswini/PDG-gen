Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testMandatorySections() throws Exception [ CD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_3 $$ final File specificationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_3 $$ final File specificationDirectory = this.getTestSourcesDirectory()-->Line_3 $$ final File specificationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()[ CD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_5 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutAnnotationsSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_7 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_13 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutDependenciesSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_15 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_21 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutMessagesSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_23 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_29 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationWithoutPropertiesSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "Implementation.java")))[ CD ]
Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_31 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("Implementation"), implementationDirectory)[ FD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_37 $$ IOUtils.copy(this.getClass().getResourceAsStream("ImplementationOfSpecificationWithoutConstructorsSection.java.txt"), new FileOutputStream(new File(implementationDirectory, "ImplementationOfSpecification.java")))[ CD ]
Line_4 $$ final File implementationDirectory = this.getTestSourcesDirectory()-->Line_39 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation("ImplementationOfSpecification"), implementationDirectory)[ FD ]
Line_2 $$ public void testMandatorySections() throws Exception -->Line_45 $$ IOUtils.copy(this.getClass().getResourceAsStream("SpecificationWithoutAnnotationsSection.java.txt"), new FileOutputStream(new File(specificationDirectory, "Specification.java")))[ CD ]
Line_3 $$ final File specificationDirectory = this.getTestSourcesDirectory()-->Line_47 $$ this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification("Specification"), specificationDirectory)[ FD ]
