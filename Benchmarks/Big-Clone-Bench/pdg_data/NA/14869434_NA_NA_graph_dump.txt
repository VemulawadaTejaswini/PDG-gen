Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel()-->Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel()[ CD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_6 $$ for (int i = 1; i <= noofparts; i++) [ CD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_6 $$ for (int i = 1; i <= noofparts; i++) [ CD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_6 $$ for (int i = 1; i <= noofparts; i++) [ FD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()[ CD ]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()-->Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()[ CD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_8 $$ status.setText("Rozdělovač: Rozděluji část " + i + "..")[ CD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_9 $$ in.transferTo(pos, splitsize, out)[ CD ]
Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel()-->Line_9 $$ in.transferTo(pos, splitsize, out)[ FD ]
Line_5 $$ long pos = 0-->Line_9 $$ in.transferTo(pos, splitsize, out)[ FD ]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()-->Line_9 $$ in.transferTo(pos, splitsize, out)[ FD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_10 $$ pos += splitsize[ CD ]
Line_10 $$ pos += splitsize-->Line_10 $$ pos += splitsize[ FD ]
Line_5 $$ long pos = 0-->Line_10 $$ pos += splitsize[ FD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_12 $$ if (remainingsize < splitsize)[ CD ]
Line_12 $$ if (remainingsize < splitsize)-->Line_12 $$ in.transferTo(pos, remainingsize, out)[ CD ]
Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel()-->Line_12 $$ in.transferTo(pos, remainingsize, out)[ FD ]
Line_10 $$ pos += splitsize-->Line_12 $$ in.transferTo(pos, remainingsize, out)[ FD ]
Line_5 $$ long pos = 0-->Line_12 $$ in.transferTo(pos, remainingsize, out)[ FD ]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()-->Line_12 $$ in.transferTo(pos, remainingsize, out)[ FD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_13 $$ pb.setValue(100 * i / noofparts)[ CD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_14 $$ out.close()[ CD ]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()-->Line_14 $$ out.close()[ FD ]
Line_4 $$ FileChannel in = new FileInputStream(inputfile).getChannel()-->Line_16 $$ in.close()[ FD ]
Line_17 $$ if (deleteOnFinish)-->Line_17 $$ new File(inputfile + "").delete()[ CD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_6 $$ for (int i = 1; i <= noofparts; i++) [ FD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_6 $$ for (int i = 1; i <= noofparts; i++) [ FD ]
Line_6 $$ for (int i = 1; i <= noofparts; i++) -->Line_6 $$ for (int i = 1; i <= noofparts; i++) [ FD ]
Line_10 $$ pos += splitsize-->Line_9 $$ in.transferTo(pos, splitsize, out)[ FD ]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()-->Line_9 $$ in.transferTo(pos, splitsize, out)[ FD ]
Line_10 $$ pos += splitsize-->Line_12 $$ in.transferTo(pos, remainingsize, out)[ FD ]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()-->Line_12 $$ in.transferTo(pos, remainingsize, out)[ FD ]
Line_7 $$ FileChannel out = new FileOutputStream(outputfile.getAbsolutePath() + "." + "v" + i).getChannel()-->Line_14 $$ out.close()[ FD ]
