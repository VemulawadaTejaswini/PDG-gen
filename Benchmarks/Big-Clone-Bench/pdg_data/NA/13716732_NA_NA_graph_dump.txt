Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException [ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_3 $$ logger.finer("Need to move audio file to accomodate tag")[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_4 $$ FileChannel fcIn = null[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_5 $$ FileChannel fcOut[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_6 $$ ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize])[ CD ]
Line_6 $$ ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize])-->Line_6 $$ ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize])[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_7 $$ File paddedFile[ CD ]
Line_7 $$ File paddedFile-->Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())[ FD ]
Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())-->Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())[ FD ]
Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())-->Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())[ FD ]
Line_7 $$ File paddedFile-->Line_10 $$ logger.finest("Created temp file:" + paddedFile.getName() + " for " + file.getName())[ FD ]
Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())-->Line_10 $$ logger.finest("Created temp file:" + paddedFile.getName() + " for " + file.getName())[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_10 $$ logger.finest("Created temp file:" + paddedFile.getName() + " for " + file.getName())[ FD ]
Line_13 $$ if (ioe.getMessage().equals(FileSystemMessage.ACCESS_IS_DENIED.getMsg())) -->Line_13 $$ if (ioe.getMessage().equals(FileSystemMessage.ACCESS_IS_DENIED.getMsg())) [ CD ]
Line_13 $$ if (ioe.getMessage().equals(FileSystemMessage.ACCESS_IS_DENIED.getMsg())) -->Line_14 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_14 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_14 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_15 $$ throw new UnableToCreateFileException(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_15 $$ throw new UnableToCreateFileException(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_13 $$ if (ioe.getMessage().equals(FileSystemMessage.ACCESS_IS_DENIED.getMsg())) -->Line_17 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_17 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_17 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_18 $$ throw new UnableToCreateFileException(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_18 $$ throw new UnableToCreateFileException(ErrorMessage.GENERAL_WRITE_FAILED_TO_CREATE_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_5 $$ FileChannel fcOut-->Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_25 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_MODIFY_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_25 $$ logger.severe(ErrorMessage.GENERAL_WRITE_FAILED_TO_MODIFY_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_26 $$ throw new UnableToModifyFileException(ErrorMessage.GENERAL_WRITE_FAILED_TO_MODIFY_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_26 $$ throw new UnableToModifyFileException(ErrorMessage.GENERAL_WRITE_FAILED_TO_MODIFY_TEMPORARY_FILE_IN_FOLDER.getMsg(file.getName(), file.getParentFile().getPath()))[ FD ]
Line_4 $$ FileChannel fcIn = null-->Line_29 $$ fcIn = new FileInputStream(file).getChannel()[ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_29 $$ fcIn = new FileInputStream(file).getChannel()[ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_29 $$ fcIn = new FileInputStream(file).getChannel()[ CD ]
Line_30 $$ long written = fcOut.write(paddingBuffer)-->Line_30 $$ long written = fcOut.write(paddingBuffer)[ CD ]
Line_5 $$ FileChannel fcOut-->Line_30 $$ long written = fcOut.write(paddingBuffer)[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_30 $$ long written = fcOut.write(paddingBuffer)[ FD ]
Line_6 $$ ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize])-->Line_30 $$ long written = fcOut.write(paddingBuffer)[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_31 $$ logger.finer("Copying:" + (file.length() - audioStart) + "bytes")[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_32 $$ long audiolength = file.length() - audioStart[ FD ]
Line_32 $$ long audiolength = file.length() - audioStart-->Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) [ FD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ CD ]
Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)-->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ FD ]
Line_32 $$ long audiolength = file.length() - audioStart-->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ FD ]
Line_5 $$ FileChannel fcOut-->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)[ FD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_35 $$ logger.finer("Written padding:" + written + " Data:" + written2)[ CD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_36 $$ if (written2 != audiolength) [ CD ]
Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)-->Line_36 $$ if (written2 != audiolength) [ FD ]
Line_32 $$ long audiolength = file.length() - audioStart-->Line_36 $$ if (written2 != audiolength) [ FD ]
Line_32 $$ long audiolength = file.length() - audioStart-->Line_37 $$ throw new RuntimeException(ErrorMessage.MP3_UNABLE_TO_ADJUST_PADDING.getMsg(audiolength, written2))[ FD ]
Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)-->Line_37 $$ throw new RuntimeException(ErrorMessage.MP3_UNABLE_TO_ADJUST_PADDING.getMsg(audiolength, written2))[ FD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_40 $$ long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE[ CD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_41 $$ long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE[ CD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ CD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) [ CD ]
Line_40 $$ long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE-->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ FD ]
Line_43 $$ for (int i = 0; i < noOfChunks; i++) -->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ CD ]
Line_43 $$ for (int i = 0; i < noOfChunks; i++) -->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ CD ]
Line_43 $$ for (int i = 0; i < noOfChunks; i++) -->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ FD ]
Line_43 $$ for (int i = 0; i < noOfChunks; i++) -->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ CD ]
Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)-->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ FD ]
Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)-->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ FD ]
Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)-->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ FD ]
Line_5 $$ FileChannel fcOut-->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)[ FD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ CD ]
Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_41 $$ long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_5 $$ FileChannel fcOut-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)[ FD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_47 $$ logger.finer("Written padding:" + written + " Data:" + written2)[ CD ]
Line_33 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) -->Line_48 $$ if (written2 != audiolength) [ CD ]
Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)-->Line_48 $$ if (written2 != audiolength) [ FD ]
Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)-->Line_48 $$ if (written2 != audiolength) [ FD ]
Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)-->Line_48 $$ if (written2 != audiolength) [ FD ]
Line_32 $$ long audiolength = file.length() - audioStart-->Line_48 $$ if (written2 != audiolength) [ FD ]
Line_32 $$ long audiolength = file.length() - audioStart-->Line_49 $$ throw new RuntimeException(ErrorMessage.MP3_UNABLE_TO_ADJUST_PADDING.getMsg(audiolength, written2))[ FD ]
Line_44 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut)-->Line_49 $$ throw new RuntimeException(ErrorMessage.MP3_UNABLE_TO_ADJUST_PADDING.getMsg(audiolength, written2))[ FD ]
Line_34 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut)-->Line_49 $$ throw new RuntimeException(ErrorMessage.MP3_UNABLE_TO_ADJUST_PADDING.getMsg(audiolength, written2))[ FD ]
Line_46 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut)-->Line_49 $$ throw new RuntimeException(ErrorMessage.MP3_UNABLE_TO_ADJUST_PADDING.getMsg(audiolength, written2))[ FD ]
Line_52 $$ long lastModified = file.lastModified()-->Line_52 $$ long lastModified = file.lastModified()[ CD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_52 $$ long lastModified = file.lastModified()[ FD ]
Line_4 $$ FileChannel fcIn = null-->Line_53 $$ if (fcIn != null) [ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_53 $$ if (fcIn != null) [ FD ]
Line_53 $$ if (fcIn != null) -->Line_54 $$ if (fcIn.isOpen()) [ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_54 $$ if (fcIn.isOpen()) [ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_54 $$ if (fcIn.isOpen()) [ FD ]
Line_54 $$ if (fcIn.isOpen()) -->Line_54 $$ if (fcIn.isOpen()) [ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_54 $$ if (fcIn.isOpen()) [ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_54 $$ if (fcIn.isOpen()) [ FD ]
Line_54 $$ if (fcIn.isOpen()) -->Line_55 $$ fcIn.close()[ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_55 $$ fcIn.close()[ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_55 $$ fcIn.close()[ FD ]
Line_5 $$ FileChannel fcOut-->Line_58 $$ if (fcOut != null) [ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_58 $$ if (fcOut != null) [ FD ]
Line_58 $$ if (fcOut != null) -->Line_59 $$ if (fcOut.isOpen()) [ CD ]
Line_5 $$ FileChannel fcOut-->Line_59 $$ if (fcOut.isOpen()) [ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_59 $$ if (fcOut.isOpen()) [ FD ]
Line_59 $$ if (fcOut.isOpen()) -->Line_59 $$ if (fcOut.isOpen()) [ CD ]
Line_5 $$ FileChannel fcOut-->Line_59 $$ if (fcOut.isOpen()) [ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_59 $$ if (fcOut.isOpen()) [ FD ]
Line_59 $$ if (fcOut.isOpen()) -->Line_60 $$ fcOut.close()[ CD ]
Line_5 $$ FileChannel fcOut-->Line_60 $$ fcOut.close()[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_60 $$ fcOut.close()[ FD ]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException -->Line_63 $$ replaceFile(file, paddedFile)[ FD ]
Line_7 $$ File paddedFile-->Line_63 $$ replaceFile(file, paddedFile)[ FD ]
Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())-->Line_63 $$ replaceFile(file, paddedFile)[ FD ]
Line_7 $$ File paddedFile-->Line_64 $$ paddedFile.setLastModified(lastModified)[ FD ]
Line_9 $$ paddedFile = File.createTempFile(Utils.getMinBaseFilenameAllowedForTempFile(file), ".new", file.getParentFile())-->Line_64 $$ paddedFile.setLastModified(lastModified)[ FD ]
Line_52 $$ long lastModified = file.lastModified()-->Line_64 $$ paddedFile.setLastModified(lastModified)[ FD ]
Line_4 $$ FileChannel fcIn = null-->Line_67 $$ if (fcIn != null) [ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_67 $$ if (fcIn != null) [ FD ]
Line_67 $$ if (fcIn != null) -->Line_68 $$ if (fcIn.isOpen()) [ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_68 $$ if (fcIn.isOpen()) [ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_68 $$ if (fcIn.isOpen()) [ FD ]
Line_68 $$ if (fcIn.isOpen()) -->Line_68 $$ if (fcIn.isOpen()) [ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_68 $$ if (fcIn.isOpen()) [ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_68 $$ if (fcIn.isOpen()) [ FD ]
Line_68 $$ if (fcIn.isOpen()) -->Line_69 $$ fcIn.close()[ CD ]
Line_4 $$ FileChannel fcIn = null-->Line_69 $$ fcIn.close()[ FD ]
Line_29 $$ fcIn = new FileInputStream(file).getChannel()-->Line_69 $$ fcIn.close()[ FD ]
Line_5 $$ FileChannel fcOut-->Line_72 $$ if (fcOut != null) [ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_72 $$ if (fcOut != null) [ FD ]
Line_72 $$ if (fcOut != null) -->Line_73 $$ if (fcOut.isOpen()) [ CD ]
Line_5 $$ FileChannel fcOut-->Line_73 $$ if (fcOut.isOpen()) [ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_73 $$ if (fcOut.isOpen()) [ FD ]
Line_73 $$ if (fcOut.isOpen()) -->Line_73 $$ if (fcOut.isOpen()) [ CD ]
Line_5 $$ FileChannel fcOut-->Line_73 $$ if (fcOut.isOpen()) [ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_73 $$ if (fcOut.isOpen()) [ FD ]
Line_73 $$ if (fcOut.isOpen()) -->Line_74 $$ fcOut.close()[ CD ]
Line_5 $$ FileChannel fcOut-->Line_74 $$ fcOut.close()[ FD ]
Line_22 $$ fcOut = new FileOutputStream(paddedFile).getChannel()-->Line_74 $$ fcOut.close()[ FD ]
Line_43 $$ for (int i = 0; i < noOfChunks; i++) -->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ FD ]
Line_43 $$ for (int i = 0; i < noOfChunks; i++) -->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ FD ]
Line_43 $$ for (int i = 0; i < noOfChunks; i++) -->Line_43 $$ for (int i = 0; i < noOfChunks; i++) [ FD ]
