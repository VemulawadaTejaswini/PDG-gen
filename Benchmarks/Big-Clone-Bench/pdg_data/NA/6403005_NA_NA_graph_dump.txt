Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception [ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_3 $$ File transformationFile = null[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_4 $$ String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT)[ CD ]
Line_4 $$ String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT)-->Line_4 $$ String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT)[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_4 $$ String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_5 $$ if (StringUtils.isNotBlank(tr)) [ CD ]
Line_4 $$ String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT)-->Line_5 $$ if (StringUtils.isNotBlank(tr)) [ FD ]
Line_5 $$ if (StringUtils.isNotBlank(tr)) -->Line_5 $$ if (StringUtils.isNotBlank(tr)) [ CD ]
Line_4 $$ String tr = request.getParameter(Definitions.REQUEST_PARAMNAME_XSLT)-->Line_5 $$ if (StringUtils.isNotBlank(tr)) [ FD ]
Line_5 $$ if (StringUtils.isNotBlank(tr)) -->Line_6 $$ transformationFile = new File(xslBase, tr)[ CD ]
Line_3 $$ File transformationFile = null-->Line_6 $$ transformationFile = new File(xslBase, tr)[ FD ]
Line_6 $$ transformationFile = new File(xslBase, tr)-->Line_6 $$ transformationFile = new File(xslBase, tr)[ FD ]
Line_5 $$ if (StringUtils.isNotBlank(tr)) -->Line_7 $$ if (!transformationFile.isFile()) [ CD ]
Line_7 $$ if (!transformationFile.isFile()) -->Line_7 $$ if (!transformationFile.isFile()) [ CD ]
Line_7 $$ if (!transformationFile.isFile()) -->Line_7 $$ if (!transformationFile.isFile()) [ CD ]
Line_3 $$ File transformationFile = null-->Line_7 $$ if (!transformationFile.isFile()) [ FD ]
Line_6 $$ transformationFile = new File(xslBase, tr)-->Line_7 $$ if (!transformationFile.isFile()) [ FD ]
Line_7 $$ if (!transformationFile.isFile()) -->Line_8 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Parameter \"" + Definitions.REQUEST_PARAMNAME_XSLT + "\" " + "with value \"" + tr + "\" refers to non existing file")[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_8 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Parameter \"" + Definitions.REQUEST_PARAMNAME_XSLT + "\" " + "with value \"" + tr + "\" refers to non existing file")[ FD ]
Line_7 $$ if (!transformationFile.isFile()) -->Line_9 $$ return[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_12 $$ StreamResult result[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_13 $$ ByteArrayOutputStream baos = null[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_14 $$ if (isDevelopmentMode) [ CD ]
Line_14 $$ if (isDevelopmentMode) -->Line_15 $$ baos = new ByteArrayOutputStream()[ CD ]
Line_13 $$ ByteArrayOutputStream baos = null-->Line_15 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_15 $$ baos = new ByteArrayOutputStream()-->Line_15 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_14 $$ if (isDevelopmentMode) -->Line_16 $$ if (StringUtils.equals(action, "get")) [ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_16 $$ if (StringUtils.equals(action, "get")) [ FD ]
Line_16 $$ if (StringUtils.equals(action, "get")) -->Line_16 $$ if (StringUtils.equals(action, "get")) [ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_16 $$ if (StringUtils.equals(action, "get")) [ FD ]
Line_16 $$ if (StringUtils.equals(action, "get")) -->Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))[ CD ]
Line_12 $$ StreamResult result-->Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))[ FD ]
Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))-->Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))[ FD ]
Line_16 $$ if (StringUtils.equals(action, "get")) -->Line_19 $$ result = new StreamResult(baos)[ CD ]
Line_12 $$ StreamResult result-->Line_19 $$ result = new StreamResult(baos)[ FD ]
Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))-->Line_19 $$ result = new StreamResult(baos)[ FD ]
Line_19 $$ result = new StreamResult(baos)-->Line_19 $$ result = new StreamResult(baos)[ FD ]
Line_14 $$ if (isDevelopmentMode) -->Line_22 $$ if (StringUtils.equals(action, "get")) [ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_22 $$ if (StringUtils.equals(action, "get")) [ FD ]
Line_22 $$ if (StringUtils.equals(action, "get")) -->Line_22 $$ if (StringUtils.equals(action, "get")) [ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_22 $$ if (StringUtils.equals(action, "get")) [ FD ]
Line_22 $$ if (StringUtils.equals(action, "get")) -->Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))[ CD ]
Line_12 $$ StreamResult result-->Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))[ FD ]
Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))-->Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))[ FD ]
Line_19 $$ result = new StreamResult(baos)-->Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))[ FD ]
Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))-->Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))[ FD ]
Line_22 $$ if (StringUtils.equals(action, "get")) -->Line_25 $$ result = new StreamResult(response.getOutputStream())[ CD ]
Line_12 $$ StreamResult result-->Line_25 $$ result = new StreamResult(response.getOutputStream())[ FD ]
Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))-->Line_25 $$ result = new StreamResult(response.getOutputStream())[ FD ]
Line_19 $$ result = new StreamResult(baos)-->Line_25 $$ result = new StreamResult(response.getOutputStream())[ FD ]
Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))-->Line_25 $$ result = new StreamResult(response.getOutputStream())[ FD ]
Line_25 $$ result = new StreamResult(response.getOutputStream())-->Line_25 $$ result = new StreamResult(response.getOutputStream())[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_25 $$ result = new StreamResult(response.getOutputStream())[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_29 $$ params.putAll(request.getParameterMap())[ CD ]
Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_29 $$ params.putAll(request.getParameterMap())[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_29 $$ params.putAll(request.getParameterMap())[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_30 $$ params.put("[ CD ]
Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_30 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_31 $$ params.put("[ CD ]
Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_31 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_31 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_32 $$ params.put("[ CD ]
Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_32 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_32 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_33 $$ params.put("[ CD ]
Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_33 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_33 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_34 $$ params.put("[ CD ]
Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_34 $$ params.put("[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_35 $$ Transformer transformer = new Transformer()[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_36 $$ transformer.setTransformationFile(transformationFile)[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_36 $$ transformer.setTransformationFile(transformationFile)[ FD ]
Line_3 $$ File transformationFile = null-->Line_36 $$ transformer.setTransformationFile(transformationFile)[ FD ]
Line_6 $$ transformationFile = new File(xslBase, tr)-->Line_36 $$ transformer.setTransformationFile(transformationFile)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_37 $$ transformer.setParams(params)[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_37 $$ transformer.setParams(params)[ FD ]
Line_28 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_37 $$ transformer.setParams(params)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_38 $$ transformer.setTransformMode(TransformMode.NORMAL)[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_38 $$ transformer.setTransformMode(TransformMode.NORMAL)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_39 $$ transformer.setConfiguration(configuration)[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_39 $$ transformer.setConfiguration(configuration)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_40 $$ transformer.setErrorListener(new TransformationErrorListener(response))[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_40 $$ transformer.setErrorListener(new TransformationErrorListener(response))[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_41 $$ transformer.setLogInfo(false)[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_41 $$ transformer.setLogInfo(false)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")[ CD ]
Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")-->Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_43 $$ String contentType[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_44 $$ if (method.endsWith("html")) [ CD ]
Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")-->Line_44 $$ if (method.endsWith("html")) [ FD ]
Line_44 $$ if (method.endsWith("html")) -->Line_44 $$ if (method.endsWith("html")) [ CD ]
Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")-->Line_44 $$ if (method.endsWith("html")) [ FD ]
Line_44 $$ if (method.endsWith("html")) -->Line_45 $$ contentType = Definitions.MIMETYPE_HTML[ CD ]
Line_43 $$ String contentType-->Line_45 $$ contentType = Definitions.MIMETYPE_HTML[ FD ]
Line_45 $$ contentType = Definitions.MIMETYPE_HTML-->Line_45 $$ contentType = Definitions.MIMETYPE_HTML[ FD ]
Line_44 $$ if (method.endsWith("html")) -->Line_46 $$ if (method.equals("xml")) [ CD ]
Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")-->Line_46 $$ if (method.equals("xml")) [ FD ]
Line_46 $$ if (method.equals("xml")) -->Line_46 $$ if (method.equals("xml")) [ CD ]
Line_42 $$ String method = transformer.getOutputProperties().getProperty(OutputKeys.METHOD, "xml")-->Line_46 $$ if (method.equals("xml")) [ FD ]
Line_46 $$ if (method.equals("xml")) -->Line_47 $$ contentType = Definitions.MIMETYPE_XML[ CD ]
Line_43 $$ String contentType-->Line_47 $$ contentType = Definitions.MIMETYPE_XML[ FD ]
Line_45 $$ contentType = Definitions.MIMETYPE_HTML-->Line_47 $$ contentType = Definitions.MIMETYPE_XML[ FD ]
Line_47 $$ contentType = Definitions.MIMETYPE_XML-->Line_47 $$ contentType = Definitions.MIMETYPE_XML[ FD ]
Line_46 $$ if (method.equals("xml")) -->Line_49 $$ contentType = Definitions.MIMETYPE_TEXTPLAIN[ CD ]
Line_43 $$ String contentType-->Line_49 $$ contentType = Definitions.MIMETYPE_TEXTPLAIN[ FD ]
Line_45 $$ contentType = Definitions.MIMETYPE_HTML-->Line_49 $$ contentType = Definitions.MIMETYPE_TEXTPLAIN[ FD ]
Line_47 $$ contentType = Definitions.MIMETYPE_XML-->Line_49 $$ contentType = Definitions.MIMETYPE_TEXTPLAIN[ FD ]
Line_49 $$ contentType = Definitions.MIMETYPE_TEXTPLAIN-->Line_49 $$ contentType = Definitions.MIMETYPE_TEXTPLAIN[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_51 $$ String encoding = transformer.getOutputProperties().getProperty(OutputKeys.ENCODING, "UTF-8")[ CD ]
Line_51 $$ String encoding = transformer.getOutputProperties().getProperty(OutputKeys.ENCODING, "UTF-8")-->Line_51 $$ String encoding = transformer.getOutputProperties().getProperty(OutputKeys.ENCODING, "UTF-8")[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_51 $$ String encoding = transformer.getOutputProperties().getProperty(OutputKeys.ENCODING, "UTF-8")[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_52 $$ response.setContentType(contentType + ";charset=" + encoding)[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_52 $$ response.setContentType(contentType + ";charset=" + encoding)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_53 $$ DataSourceIf dataSource = new NullSource()[ CD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_54 $$ transformer.transform((Source) dataSource, result)[ CD ]
Line_35 $$ Transformer transformer = new Transformer()-->Line_54 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_12 $$ StreamResult result-->Line_54 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_17 $$ result = new StreamResult(new Base64.OutputStream(baos, Base64.DECODE))-->Line_54 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_19 $$ result = new StreamResult(baos)-->Line_54 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_23 $$ result = new StreamResult(new Base64.OutputStream(response.getOutputStream(), Base64.DECODE))-->Line_54 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_25 $$ result = new StreamResult(response.getOutputStream())-->Line_54 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_55 $$ if (isDevelopmentMode) [ CD ]
Line_55 $$ if (isDevelopmentMode) -->Line_56 $$ IOUtils.copy(new ByteArrayInputStream(baos.toByteArray()), response.getOutputStream())[ CD ]
Line_13 $$ ByteArrayOutputStream baos = null-->Line_56 $$ IOUtils.copy(new ByteArrayInputStream(baos.toByteArray()), response.getOutputStream())[ FD ]
Line_15 $$ baos = new ByteArrayOutputStream()-->Line_56 $$ IOUtils.copy(new ByteArrayInputStream(baos.toByteArray()), response.getOutputStream())[ FD ]
Line_2 $$ protected void processTransformAction(HttpServletRequest request, HttpServletResponse response, String action) throws Exception -->Line_56 $$ IOUtils.copy(new ByteArrayInputStream(baos.toByteArray()), response.getOutputStream())[ FD ]
