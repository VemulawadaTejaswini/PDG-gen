Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testRegister() throws IOException [ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_3 $$ User newUser = new User(false, "testregUser", "regUser")[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_4 $$ newUser.setEmail("eagle-r@gmx.de")[ CD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_4 $$ newUser.setEmail("eagle-r@gmx.de")[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_5 $$ newUser.setUniversity("uni")[ CD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_5 $$ newUser.setUniversity("uni")[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_6 $$ newUser.setFirstName("first")[ CD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_6 $$ newUser.setFirstName("first")[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_7 $$ newUser.setLastName("last")[ CD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_7 $$ newUser.setLastName("last")[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_8 $$ User regUser = null[ CD ]
Line_8 $$ User regUser = null-->Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ FD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_13 $$ assertNull("This test user already exists! Abort test", regUser)[ CD ]
Line_8 $$ User regUser = null-->Line_13 $$ assertNull("This test user already exists! Abort test", regUser)[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_13 $$ assertNull("This test user already exists! Abort test", regUser)[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_14 $$ userServiceRemote.registrate(newUser)[ CD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_14 $$ userServiceRemote.registrate(newUser)[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_15 $$ setComplete()[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_16 $$ endTransaction()[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ CD ]
Line_8 $$ User regUser = null-->Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ FD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] [ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_18 $$ assertNotNull(regUser)[ CD ]
Line_8 $$ User regUser = null-->Line_18 $$ assertNotNull(regUser)[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_18 $$ assertNotNull(regUser)[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_18 $$ assertNotNull(regUser)[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_19 $$ assertNotNull(regUser.getId())[ CD ]
Line_8 $$ User regUser = null-->Line_19 $$ assertNotNull(regUser.getId())[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_19 $$ assertNotNull(regUser.getId())[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_19 $$ assertNotNull(regUser.getId())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_20 $$ assertNotNull(regUser.getHash())[ CD ]
Line_8 $$ User regUser = null-->Line_20 $$ assertNotNull(regUser.getHash())[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_20 $$ assertNotNull(regUser.getHash())[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_20 $$ assertNotNull(regUser.getHash())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_21 $$ assertFalse(regUser.getHash().isEmpty())[ CD ]
Line_8 $$ User regUser = null-->Line_21 $$ assertFalse(regUser.getHash().isEmpty())[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_21 $$ assertFalse(regUser.getHash().isEmpty())[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_21 $$ assertFalse(regUser.getHash().isEmpty())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_22 $$ assertEquals(regUser.getLogin(), newUser.getLogin())[ CD ]
Line_8 $$ User regUser = null-->Line_22 $$ assertEquals(regUser.getLogin(), newUser.getLogin())[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_22 $$ assertEquals(regUser.getLogin(), newUser.getLogin())[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_22 $$ assertEquals(regUser.getLogin(), newUser.getLogin())[ FD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_22 $$ assertEquals(regUser.getLogin(), newUser.getLogin())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_23 $$ assertEquals(regUser.getPassword(), newUser.getPassword())[ CD ]
Line_8 $$ User regUser = null-->Line_23 $$ assertEquals(regUser.getPassword(), newUser.getPassword())[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_23 $$ assertEquals(regUser.getPassword(), newUser.getPassword())[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_23 $$ assertEquals(regUser.getPassword(), newUser.getPassword())[ FD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_23 $$ assertEquals(regUser.getPassword(), newUser.getPassword())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_24 $$ assertEquals(regUser.getUniversity(), newUser.getUniversity())[ CD ]
Line_8 $$ User regUser = null-->Line_24 $$ assertEquals(regUser.getUniversity(), newUser.getUniversity())[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_24 $$ assertEquals(regUser.getUniversity(), newUser.getUniversity())[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_24 $$ assertEquals(regUser.getUniversity(), newUser.getUniversity())[ FD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_24 $$ assertEquals(regUser.getUniversity(), newUser.getUniversity())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_25 $$ assertEquals(regUser.getEmail(), newUser.getEmail())[ CD ]
Line_8 $$ User regUser = null-->Line_25 $$ assertEquals(regUser.getEmail(), newUser.getEmail())[ FD ]
Line_10 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_25 $$ assertEquals(regUser.getEmail(), newUser.getEmail())[ FD ]
Line_17 $$ regUser = (User) getJdbcTemplate().queryForObject("select id, login, password, email, hash, REGISTRATION_DATE, university, FORUM_ID from USER where login = ?", new Object[] -->Line_25 $$ assertEquals(regUser.getEmail(), newUser.getEmail())[ FD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_25 $$ assertEquals(regUser.getEmail(), newUser.getEmail())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_26 $$ Integer id = newUser.getId()[ CD ]
Line_26 $$ Integer id = newUser.getId()-->Line_26 $$ Integer id = newUser.getId()[ CD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_26 $$ Integer id = newUser.getId()[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_27 $$ getJdbcTemplate().execute("DELETE FROM USER_AUTHORITIES WHERE USER_ID =" + id)[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_28 $$ getJdbcTemplate().execute("DELETE FROM USER WHERE ID = " + id)[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_29 $$ StringBuilder urlString = new StringBuilder(userService.getForumUrl())[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_30 $$ urlString.append("phpBB.php?action=remove").append("&id=").append(newUser.getForumID()).append("&mode=remove")[ CD ]
Line_29 $$ StringBuilder urlString = new StringBuilder(userService.getForumUrl())-->Line_30 $$ urlString.append("phpBB.php?action=remove").append("&id=").append(newUser.getForumID()).append("&mode=remove")[ FD ]
Line_3 $$ User newUser = new User(false, "testregUser", "regUser")-->Line_30 $$ urlString.append("phpBB.php?action=remove").append("&id=").append(newUser.getForumID()).append("&mode=remove")[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_31 $$ logger.debug("Connecting to URL: " + urlString.toString())[ CD ]
Line_29 $$ StringBuilder urlString = new StringBuilder(userService.getForumUrl())-->Line_31 $$ logger.debug("Connecting to URL: " + urlString.toString())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_32 $$ URL url = new URL(urlString.toString())[ CD ]
Line_29 $$ StringBuilder urlString = new StringBuilder(userService.getForumUrl())-->Line_32 $$ URL url = new URL(urlString.toString())[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_33 $$ URLConnection con = url.openConnection()[ CD ]
Line_33 $$ URLConnection con = url.openConnection()-->Line_33 $$ URLConnection con = url.openConnection()[ CD ]
Line_32 $$ URL url = new URL(urlString.toString())-->Line_33 $$ URLConnection con = url.openConnection()[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_34 $$ BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))[ CD ]
Line_33 $$ URLConnection con = url.openConnection()-->Line_34 $$ BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))[ FD ]
Line_2 $$ public void testRegister() throws IOException -->Line_35 $$ String inputLine[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_2 $$ public void testRegister() throws IOException [ CD ]
Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)-->Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)[ FD ]
Line_35 $$ String inputLine-->Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)[ FD ]
Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)-->Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)[ CD ]
Line_34 $$ BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))-->Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)[ FD ]
Line_36 $$ while ((inputLine = in.readLine()) != null) logger.debug("Response: " + inputLine)-->Line_36 $$ logger.debug("Response: " + inputLine)[ CD ]
Line_2 $$ public void testRegister() throws IOException -->Line_37 $$ in.close()[ CD ]
Line_34 $$ BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))-->Line_37 $$ in.close()[ FD ]
