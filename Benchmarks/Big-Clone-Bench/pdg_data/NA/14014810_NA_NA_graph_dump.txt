Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception [ CD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_3 $$ if (f.isDirectory()) [ CD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_3 $$ if (f.isDirectory()) [ FD ]
Line_3 $$ if (f.isDirectory()) -->Line_3 $$ if (f.isDirectory()) [ CD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_3 $$ if (f.isDirectory()) [ FD ]
Line_3 $$ if (f.isDirectory()) -->Line_4 $$ File[] fl = f.listFiles()[ CD ]
Line_4 $$ File[] fl = f.listFiles()-->Line_4 $$ File[] fl = f.listFiles()[ CD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_4 $$ File[] fl = f.listFiles()[ FD ]
Line_3 $$ if (f.isDirectory()) -->Line_5 $$ base = base.length() == 0 ? "" : base + File.separator[ CD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_5 $$ base = base.length() == 0 ? "" : base + File.separator[ FD ]
Line_5 $$ base = base.length() == 0 ? "" : base + File.separator-->Line_5 $$ base = base.length() == 0 ? "" : base + File.separator[ FD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_5 $$ base = base.length() == 0 ? "" : base + File.separator[ FD ]
Line_5 $$ base = base.length() == 0 ? "" : base + File.separator-->Line_5 $$ base = base.length() == 0 ? "" : base + File.separator[ FD ]
Line_3 $$ if (f.isDirectory()) -->Line_6 $$ for (int i = 0; i < fl.length; i++) [ CD ]
Line_3 $$ if (f.isDirectory()) -->Line_3 $$ if (f.isDirectory()) [ CD ]
Line_6 $$ for (int i = 0; i < fl.length; i++) -->Line_6 $$ for (int i = 0; i < fl.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < fl.length; i++) -->Line_6 $$ for (int i = 0; i < fl.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < fl.length; i++) -->Line_6 $$ for (int i = 0; i < fl.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < fl.length; i++) -->Line_7 $$ zip(out, fl[i], base + fl[i].getName())[ CD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_7 $$ zip(out, fl[i], base + fl[i].getName())[ FD ]
Line_3 $$ if (f.isDirectory()) -->Line_10 $$ out.putNextEntry(new org.apache.tools.zip.ZipEntry(base))[ CD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_10 $$ out.putNextEntry(new org.apache.tools.zip.ZipEntry(base))[ FD ]
Line_3 $$ if (f.isDirectory()) -->Line_11 $$ FileInputStream in = new FileInputStream(f)[ CD ]
Line_3 $$ if (f.isDirectory()) -->Line_12 $$ IOUtils.copyStream(in, out)[ CD ]
Line_11 $$ FileInputStream in = new FileInputStream(f)-->Line_12 $$ IOUtils.copyStream(in, out)[ FD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_12 $$ IOUtils.copyStream(in, out)[ FD ]
Line_3 $$ if (f.isDirectory()) -->Line_13 $$ in.close()[ CD ]
Line_11 $$ FileInputStream in = new FileInputStream(f)-->Line_13 $$ in.close()[ FD ]
Line_2 $$ public static void zip(ZipOutputStream out, File f, String base) throws Exception -->Line_15 $$ Thread.sleep(10)[ CD ]
Line_6 $$ for (int i = 0; i < fl.length; i++) -->Line_6 $$ for (int i = 0; i < fl.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < fl.length; i++) -->Line_6 $$ for (int i = 0; i < fl.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < fl.length; i++) -->Line_6 $$ for (int i = 0; i < fl.length; i++) [ FD ]
