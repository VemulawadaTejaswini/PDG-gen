Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String copy(PluginVersionDetail usePluginVersion, File runtimeRepository) [ CD ]
Line_4 $$ File tmpFile = null-->Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")[ FD ]
Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")-->Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")[ FD ]
Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")-->Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")[ CD ]
Line_4 $$ File tmpFile = null-->Line_7 $$ tmpFile.deleteOnExit()[ FD ]
Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")-->Line_7 $$ tmpFile.deleteOnExit()[ FD ]
Line_2 $$ private String copy(PluginVersionDetail usePluginVersion, File runtimeRepository) -->Line_8 $$ URL url = new URL(usePluginVersion.getUri())[ FD ]
Line_9 $$ String destFilename = new File(url.getFile()).getName()-->Line_9 $$ String destFilename = new File(url.getFile()).getName()[ CD ]
Line_8 $$ URL url = new URL(usePluginVersion.getUri())-->Line_9 $$ String destFilename = new File(url.getFile()).getName()[ FD ]
Line_17 $$ URLConnection urlConnection = url.openConnection()-->Line_17 $$ URLConnection urlConnection = url.openConnection()[ CD ]
Line_8 $$ URL url = new URL(usePluginVersion.getUri())-->Line_17 $$ URLConnection urlConnection = url.openConnection()[ FD ]
Line_13 $$ int bytesDownload = 0-->Line_18 $$ bytesDownload = urlConnection.getContentLength()[ FD ]
Line_18 $$ bytesDownload = urlConnection.getContentLength()-->Line_18 $$ bytesDownload = urlConnection.getContentLength()[ FD ]
Line_18 $$ bytesDownload = urlConnection.getContentLength()-->Line_18 $$ bytesDownload = urlConnection.getContentLength()[ CD ]
Line_17 $$ URLConnection urlConnection = url.openConnection()-->Line_18 $$ bytesDownload = urlConnection.getContentLength()[ FD ]
Line_11 $$ InputStream in = null-->Line_19 $$ in = urlConnection.getInputStream()[ FD ]
Line_19 $$ in = urlConnection.getInputStream()-->Line_19 $$ in = urlConnection.getInputStream()[ FD ]
Line_19 $$ in = urlConnection.getInputStream()-->Line_19 $$ in = urlConnection.getInputStream()[ CD ]
Line_17 $$ URLConnection urlConnection = url.openConnection()-->Line_19 $$ in = urlConnection.getInputStream()[ FD ]
Line_12 $$ FileOutputStream out = null-->Line_20 $$ out = new FileOutputStream(tmpFile)[ FD ]
Line_20 $$ out = new FileOutputStream(tmpFile)-->Line_20 $$ out = new FileOutputStream(tmpFile)[ FD ]
Line_14 $$ long startTime = 0-->Line_21 $$ startTime = System.currentTimeMillis()[ FD ]
Line_21 $$ startTime = System.currentTimeMillis()-->Line_21 $$ startTime = System.currentTimeMillis()[ FD ]
Line_21 $$ startTime = System.currentTimeMillis()-->Line_21 $$ startTime = System.currentTimeMillis()[ CD ]
Line_11 $$ InputStream in = null-->Line_22 $$ IOUtils.copy(in, out)[ FD ]
Line_19 $$ in = urlConnection.getInputStream()-->Line_22 $$ IOUtils.copy(in, out)[ FD ]
Line_12 $$ FileOutputStream out = null-->Line_22 $$ IOUtils.copy(in, out)[ FD ]
Line_20 $$ out = new FileOutputStream(tmpFile)-->Line_22 $$ IOUtils.copy(in, out)[ FD ]
Line_15 $$ long endTime = 0-->Line_23 $$ endTime = System.currentTimeMillis()[ FD ]
Line_23 $$ endTime = System.currentTimeMillis()-->Line_23 $$ endTime = System.currentTimeMillis()[ FD ]
Line_23 $$ endTime = System.currentTimeMillis()-->Line_23 $$ endTime = System.currentTimeMillis()[ CD ]
Line_12 $$ FileOutputStream out = null-->Line_25 $$ if (out != null) [ FD ]
Line_20 $$ out = new FileOutputStream(tmpFile)-->Line_25 $$ if (out != null) [ FD ]
Line_25 $$ if (out != null) -->Line_26 $$ out.close()[ CD ]
Line_12 $$ FileOutputStream out = null-->Line_26 $$ out.close()[ FD ]
Line_20 $$ out = new FileOutputStream(tmpFile)-->Line_26 $$ out.close()[ FD ]
Line_11 $$ InputStream in = null-->Line_28 $$ if (in != null) [ FD ]
Line_19 $$ in = urlConnection.getInputStream()-->Line_28 $$ if (in != null) [ FD ]
Line_28 $$ if (in != null) -->Line_29 $$ in.close()[ CD ]
Line_11 $$ InputStream in = null-->Line_29 $$ in.close()[ FD ]
Line_19 $$ in = urlConnection.getInputStream()-->Line_29 $$ in.close()[ FD ]
Line_34 $$ if ((endTime - startTime) > 0) -->Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)[ CD ]
Line_33 $$ long downloadSpeed = 0-->Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)[ FD ]
Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)-->Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)[ FD ]
Line_33 $$ long downloadSpeed = 0-->Line_37 $$ if (downloadSpeed == 0) [ FD ]
Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)-->Line_37 $$ if (downloadSpeed == 0) [ FD ]
Line_37 $$ if (downloadSpeed == 0) -->Line_38 $$ downloadSpeedInfo = "? B/s"[ CD ]
Line_32 $$ String downloadSpeedInfo = null-->Line_38 $$ downloadSpeedInfo = "? B/s"[ FD ]
Line_38 $$ downloadSpeedInfo = "? B/s"-->Line_38 $$ downloadSpeedInfo = "? B/s"[ FD ]
Line_37 $$ if (downloadSpeed == 0) -->Line_39 $$ if (downloadSpeed < 1000) [ CD ]
Line_33 $$ long downloadSpeed = 0-->Line_39 $$ if (downloadSpeed < 1000) [ FD ]
Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)-->Line_39 $$ if (downloadSpeed < 1000) [ FD ]
Line_39 $$ if (downloadSpeed < 1000) -->Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"[ CD ]
Line_32 $$ String downloadSpeedInfo = null-->Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"[ FD ]
Line_38 $$ downloadSpeedInfo = "? B/s"-->Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"[ FD ]
Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"-->Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"[ FD ]
Line_33 $$ long downloadSpeed = 0-->Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"[ FD ]
Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)-->Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"[ FD ]
Line_39 $$ if (downloadSpeed < 1000) -->Line_41 $$ if (downloadSpeed < 1000000) [ CD ]
Line_33 $$ long downloadSpeed = 0-->Line_41 $$ if (downloadSpeed < 1000000) [ FD ]
Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)-->Line_41 $$ if (downloadSpeed < 1000000) [ FD ]
Line_41 $$ if (downloadSpeed < 1000000) -->Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"[ CD ]
Line_32 $$ String downloadSpeedInfo = null-->Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"[ FD ]
Line_38 $$ downloadSpeedInfo = "? B/s"-->Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"[ FD ]
Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"-->Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"[ FD ]
Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"-->Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"[ FD ]
Line_41 $$ if (downloadSpeed < 1000000) -->Line_43 $$ if (downloadSpeed < 1000000000) [ CD ]
Line_33 $$ long downloadSpeed = 0-->Line_43 $$ if (downloadSpeed < 1000000000) [ FD ]
Line_35 $$ downloadSpeed = 1000L * bytesDownload / (endTime - startTime)-->Line_43 $$ if (downloadSpeed < 1000000000) [ FD ]
Line_43 $$ if (downloadSpeed < 1000000000) -->Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"[ CD ]
Line_32 $$ String downloadSpeedInfo = null-->Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"[ FD ]
Line_38 $$ downloadSpeedInfo = "? B/s"-->Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"[ FD ]
Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"-->Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"[ FD ]
Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"-->Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"[ FD ]
Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"-->Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"[ FD ]
Line_43 $$ if (downloadSpeed < 1000000000) -->Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"[ CD ]
Line_32 $$ String downloadSpeedInfo = null-->Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"[ FD ]
Line_38 $$ downloadSpeedInfo = "? B/s"-->Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"[ FD ]
Line_40 $$ downloadSpeedInfo = downloadSpeed + " B/s"-->Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"[ FD ]
Line_42 $$ downloadSpeedInfo = downloadSpeed / 1000 + " KB/s"-->Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"[ FD ]
Line_44 $$ downloadSpeedInfo = downloadSpeed / 1000000 + " MB/s"-->Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"[ FD ]
Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"-->Line_46 $$ downloadSpeedInfo = downloadSpeed / 1000000000 + " GB/s"[ FD ]
Line_48 $$ String tmpFileMessageDigest = getMessageDigest(tmpFile.toURI().toURL()).getValue()-->Line_48 $$ String tmpFileMessageDigest = getMessageDigest(tmpFile.toURI().toURL()).getValue()[ CD ]
Line_4 $$ File tmpFile = null-->Line_48 $$ String tmpFileMessageDigest = getMessageDigest(tmpFile.toURI().toURL()).getValue()[ FD ]
Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")-->Line_48 $$ String tmpFileMessageDigest = getMessageDigest(tmpFile.toURI().toURL()).getValue()[ FD ]
Line_49 $$ if (!tmpFileMessageDigest.equals(usePluginVersion.getMessageDigest().getValue())) -->Line_49 $$ if (!tmpFileMessageDigest.equals(usePluginVersion.getMessageDigest().getValue())) [ CD ]
Line_49 $$ if (!tmpFileMessageDigest.equals(usePluginVersion.getMessageDigest().getValue())) -->Line_49 $$ if (!tmpFileMessageDigest.equals(usePluginVersion.getMessageDigest().getValue())) [ CD ]
Line_48 $$ String tmpFileMessageDigest = getMessageDigest(tmpFile.toURI().toURL()).getValue()-->Line_49 $$ if (!tmpFileMessageDigest.equals(usePluginVersion.getMessageDigest().getValue())) [ FD ]
Line_2 $$ private String copy(PluginVersionDetail usePluginVersion, File runtimeRepository) -->Line_49 $$ if (!tmpFileMessageDigest.equals(usePluginVersion.getMessageDigest().getValue())) [ FD ]
Line_2 $$ private String copy(PluginVersionDetail usePluginVersion, File runtimeRepository) -->Line_50 $$ throw new RuntimeException("Downloaded file: " + usePluginVersion.getUri() + " does not have required message digest: " + usePluginVersion.getMessageDigest().getValue())[ FD ]
Line_2 $$ private String copy(PluginVersionDetail usePluginVersion, File runtimeRepository) -->Line_50 $$ throw new RuntimeException("Downloaded file: " + usePluginVersion.getUri() + " does not have required message digest: " + usePluginVersion.getMessageDigest().getValue())[ FD ]
Line_52 $$ if (!isNoop()) -->Line_52 $$ if (!isNoop()) [ CD ]
Line_52 $$ if (!isNoop()) -->Line_52 $$ if (!isNoop()) [ CD ]
Line_52 $$ if (!isNoop()) -->Line_53 $$ FileUtils.copyFile(tmpFile, destFile)[ CD ]
Line_4 $$ File tmpFile = null-->Line_53 $$ FileUtils.copyFile(tmpFile, destFile)[ FD ]
Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")-->Line_53 $$ FileUtils.copyFile(tmpFile, destFile)[ FD ]
Line_10 $$ File destFile = new File(runtimeRepository, destFilename)-->Line_53 $$ FileUtils.copyFile(tmpFile, destFile)[ FD ]
Line_4 $$ File tmpFile = null-->Line_57 $$ if (tmpFile != null) [ FD ]
Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")-->Line_57 $$ if (tmpFile != null) [ FD ]
Line_57 $$ if (tmpFile != null) -->Line_58 $$ tmpFile.delete()[ CD ]
Line_4 $$ File tmpFile = null-->Line_58 $$ tmpFile.delete()[ FD ]
Line_6 $$ tmpFile = File.createTempFile("tmpPlugin_", ".zip")-->Line_58 $$ tmpFile.delete()[ FD ]
Line_2 $$ private String copy(PluginVersionDetail usePluginVersion, File runtimeRepository) -->Line_62 $$ throw new RuntimeException("Could not download " + usePluginVersion.getUri() + " to " + runtimeRepository, ex)[ FD ]
