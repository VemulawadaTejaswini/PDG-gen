Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) [ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_3 $$ Zip64File zip64File = null[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_6 $$ zip64File = new Zip64File(zipFile)[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_6 $$ zip64File = new Zip64File(zipFile)[ FD ]
Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)-->Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)[ FD ]
Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)-->Line_8 $$ if (testEntry != null && testEntry.getMethod() == FileEntry.iMETHOD_DEFLATED) [ FD ]
Line_8 $$ if (testEntry != null && testEntry.getMethod() == FileEntry.iMETHOD_DEFLATED) -->Line_9 $$ compress = true[ CD ]
Line_5 $$ boolean compress = false-->Line_9 $$ compress = true[ FD ]
Line_9 $$ compress = true-->Line_9 $$ compress = true[ FD ]
Line_3 $$ Zip64File zip64File = null-->Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress)[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress)[ FD ]
Line_5 $$ boolean compress = false-->Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress)[ FD ]
Line_9 $$ compress = true-->Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress)[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress)[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_11 $$ processAndCreateFolderEntries(zip64File, parseTargetPath(targetPath, toInsert), compress)[ FD ]
Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)-->Line_12 $$ if (testEntry != null) [ FD ]
Line_12 $$ if (testEntry != null) -->Line_13 $$ log.info("[insertFileInto] Entry exists: " + testEntry.getName())[ CD ]
Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)-->Line_13 $$ log.info("[insertFileInto] Entry exists: " + testEntry.getName())[ FD ]
Line_12 $$ if (testEntry != null) -->Line_14 $$ log.info("[insertFileInto] Will delete this entry before inserting: " + toInsert.getName())[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_14 $$ log.info("[insertFileInto] Will delete this entry before inserting: " + toInsert.getName())[ FD ]
Line_12 $$ if (testEntry != null) -->Line_15 $$ if (!testEntry.isDirectory()) [ CD ]
Line_15 $$ if (!testEntry.isDirectory()) -->Line_15 $$ if (!testEntry.isDirectory()) [ CD ]
Line_15 $$ if (!testEntry.isDirectory()) -->Line_15 $$ if (!testEntry.isDirectory()) [ CD ]
Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)-->Line_15 $$ if (!testEntry.isDirectory()) [ FD ]
Line_15 $$ if (!testEntry.isDirectory()) -->Line_16 $$ zip64File.delete(testEntry.getName())[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_16 $$ zip64File.delete(testEntry.getName())[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_16 $$ zip64File.delete(testEntry.getName())[ FD ]
Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)-->Line_16 $$ zip64File.delete(testEntry.getName())[ FD ]
Line_15 $$ if (!testEntry.isDirectory()) -->Line_18 $$ log.info("[insertFileInto] Entry is a directory. " + "Will delete all files contained in this entry and insert " + toInsert.getName() + "and all nested files.")[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_18 $$ log.info("[insertFileInto] Entry is a directory. " + "Will delete all files contained in this entry and insert " + toInsert.getName() + "and all nested files.")[ FD ]
Line_15 $$ if (!testEntry.isDirectory()) -->Line_19 $$ if (!targetPath.contains("/")) [ CD ]
Line_19 $$ if (!targetPath.contains("/")) -->Line_19 $$ if (!targetPath.contains("/")) [ CD ]
Line_19 $$ if (!targetPath.contains("/")) -->Line_19 $$ if (!targetPath.contains("/")) [ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_19 $$ if (!targetPath.contains("/")) [ FD ]
Line_19 $$ if (!targetPath.contains("/")) -->Line_20 $$ targetPath = targetPath + "/"[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_20 $$ targetPath = targetPath + "/"[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_20 $$ targetPath = targetPath + "/"[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_20 $$ targetPath = targetPath + "/"[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_20 $$ targetPath = targetPath + "/"[ FD ]
Line_15 $$ if (!testEntry.isDirectory()) -->Line_22 $$ deleteFileEntry(zip64File, testEntry)[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_22 $$ deleteFileEntry(zip64File, testEntry)[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_22 $$ deleteFileEntry(zip64File, testEntry)[ FD ]
Line_7 $$ FileEntry testEntry = getFileEntry(zip64File, targetPath)-->Line_22 $$ deleteFileEntry(zip64File, testEntry)[ FD ]
Line_15 $$ if (!testEntry.isDirectory()) -->Line_23 $$ log.info("[insertFileInto] Entry successfully deleted.")[ CD ]
Line_12 $$ if (testEntry != null) -->Line_25 $$ log.info("[insertFileInto] Writing new Entry: " + targetPath)[ CD ]
Line_12 $$ if (testEntry != null) -->Line_26 $$ EntryOutputStream out = null[ CD ]
Line_12 $$ if (testEntry != null) -->Line_27 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_27 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_27 $$ if (!compress) [ FD ]
Line_27 $$ if (!compress) -->Line_27 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_27 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_27 $$ if (!compress) [ FD ]
Line_27 $$ if (!compress) -->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_27 $$ if (!compress) -->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_12 $$ if (testEntry != null) -->Line_32 $$ if (toInsert.isDirectory()) [ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_32 $$ if (toInsert.isDirectory()) [ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_32 $$ if (toInsert.isDirectory()) [ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_32 $$ if (toInsert.isDirectory()) [ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_33 $$ out.flush()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_33 $$ out.flush()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_33 $$ out.flush()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_33 $$ out.flush()[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_34 $$ out.close()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_34 $$ out.close()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_34 $$ out.close()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_34 $$ out.close()[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_35 $$ log.info("[insertFileInto] Finished writing entry: " + targetPath)[ CD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)[ CD ]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)-->Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())[ CD ]
Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())-->Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_38 $$ log.info("[insertFileInto] Added entry is a folder.")[ CD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_39 $$ log.info("[insertFileInto] Adding all nested files: ")[ CD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ CD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_32 $$ if (toInsert.isDirectory()) [ CD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ CD ]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)-->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ CD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ CD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_41 $$ File currentFile = containedFiles.get(i)[ CD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_41 $$ File currentFile = containedFiles.get(i)[ CD ]
Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())-->Line_41 $$ File currentFile = containedFiles.get(i)[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_41 $$ File currentFile = containedFiles.get(i)[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)-->Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_43 $$ EntryOutputStream loop_out = null[ CD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_44 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_44 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_44 $$ if (!compress) [ FD ]
Line_44 $$ if (!compress) -->Line_44 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_44 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_44 $$ if (!compress) [ FD ]
Line_44 $$ if (!compress) -->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ CD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_44 $$ if (!compress) -->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ CD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_49 $$ if (currentFile.isFile()) [ CD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_49 $$ if (currentFile.isFile()) [ FD ]
Line_49 $$ if (currentFile.isFile()) -->Line_49 $$ if (currentFile.isFile()) [ CD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_49 $$ if (currentFile.isFile()) [ FD ]
Line_49 $$ if (currentFile.isFile()) -->Line_50 $$ InputStream loop_in = new FileInputStream(currentFile)[ CD ]
Line_49 $$ if (currentFile.isFile()) -->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ CD ]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_49 $$ if (currentFile.isFile()) -->Line_52 $$ loop_in.close()[ CD ]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_52 $$ loop_in.close()[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_54 $$ log.info("[insertFileInto] Added: " + currentPath)[ CD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_55 $$ loop_out.flush()[ CD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_55 $$ loop_out.flush()[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_55 $$ loop_out.flush()[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_55 $$ loop_out.flush()[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_56 $$ loop_out.close()[ CD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_56 $$ loop_out.close()[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_56 $$ loop_out.close()[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_56 $$ loop_out.close()[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_59 $$ InputStream in = new FileInputStream(toInsert)[ CD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_60 $$ IOUtils.copyLarge(in, out)[ CD ]
Line_59 $$ InputStream in = new FileInputStream(toInsert)-->Line_60 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_26 $$ EntryOutputStream out = null-->Line_60 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_60 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_60 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_61 $$ in.close()[ CD ]
Line_59 $$ InputStream in = new FileInputStream(toInsert)-->Line_61 $$ in.close()[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_62 $$ out.flush()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_62 $$ out.flush()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_62 $$ out.flush()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_62 $$ out.flush()[ FD ]
Line_32 $$ if (toInsert.isDirectory()) -->Line_63 $$ out.close()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_63 $$ out.close()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_63 $$ out.close()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_63 $$ out.close()[ FD ]
Line_12 $$ if (testEntry != null) -->Line_67 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_67 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_67 $$ if (!compress) [ FD ]
Line_67 $$ if (!compress) -->Line_67 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_67 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_67 $$ if (!compress) [ FD ]
Line_67 $$ if (!compress) -->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))[ FD ]
Line_67 $$ if (!compress) -->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))[ FD ]
Line_12 $$ if (testEntry != null) -->Line_72 $$ if (toInsert.isDirectory()) [ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_72 $$ if (toInsert.isDirectory()) [ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_72 $$ if (toInsert.isDirectory()) [ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_72 $$ if (toInsert.isDirectory()) [ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_73 $$ out.flush()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_73 $$ out.flush()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_73 $$ out.flush()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_73 $$ out.flush()[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_73 $$ out.flush()[ FD ]
Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_73 $$ out.flush()[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_74 $$ out.close()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_74 $$ out.close()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_74 $$ out.close()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_74 $$ out.close()[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_74 $$ out.close()[ FD ]
Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_74 $$ out.close()[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_75 $$ log.info("[insertFileInto] Finished writing entry: " + targetPath)[ CD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_76 $$ List<String> containedPaths = normalizePaths(toInsert)[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_76 $$ List<String> containedPaths = normalizePaths(toInsert)[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_77 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_77 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_78 $$ log.info("[insertFileInto] Added entry is a folder.")[ CD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_79 $$ log.info("[insertFileInto] Adding all nested files: ")[ CD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ CD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_72 $$ if (toInsert.isDirectory()) [ CD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)-->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ CD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ CD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_81 $$ File currentFile = containedFiles.get(i)[ CD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_81 $$ File currentFile = containedFiles.get(i)[ CD ]
Line_37 $$ List<File> containedFiles = listAllFilesAndFolders(toInsert, new ArrayList<File>())-->Line_81 $$ File currentFile = containedFiles.get(i)[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_81 $$ File currentFile = containedFiles.get(i)[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_81 $$ File currentFile = containedFiles.get(i)[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ CD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_20 $$ targetPath = targetPath + "/"-->Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_36 $$ List<String> containedPaths = normalizePaths(toInsert)-->Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_83 $$ EntryOutputStream loop_out = null[ CD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_84 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_84 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_84 $$ if (!compress) [ FD ]
Line_84 $$ if (!compress) -->Line_84 $$ if (!compress) [ CD ]
Line_5 $$ boolean compress = false-->Line_84 $$ if (!compress) [ FD ]
Line_9 $$ compress = true-->Line_84 $$ if (!compress) [ FD ]
Line_84 $$ if (!compress) -->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ CD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_84 $$ if (!compress) -->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ CD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_89 $$ if (currentFile.isFile()) [ CD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_89 $$ if (currentFile.isFile()) [ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_89 $$ if (currentFile.isFile()) [ FD ]
Line_89 $$ if (currentFile.isFile()) -->Line_89 $$ if (currentFile.isFile()) [ CD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_89 $$ if (currentFile.isFile()) [ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_89 $$ if (currentFile.isFile()) [ FD ]
Line_89 $$ if (currentFile.isFile()) -->Line_90 $$ InputStream loop_in = new FileInputStream(currentFile)[ CD ]
Line_89 $$ if (currentFile.isFile()) -->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ CD ]
Line_90 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_89 $$ if (currentFile.isFile()) -->Line_92 $$ loop_in.close()[ CD ]
Line_90 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_92 $$ loop_in.close()[ FD ]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_92 $$ loop_in.close()[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_94 $$ log.info("[insertFileInto] Added: " + currentPath)[ CD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_95 $$ loop_out.flush()[ CD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_95 $$ loop_out.flush()[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_95 $$ loop_out.flush()[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_95 $$ loop_out.flush()[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_95 $$ loop_out.flush()[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_95 $$ loop_out.flush()[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_95 $$ loop_out.flush()[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_96 $$ loop_out.close()[ CD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_96 $$ loop_out.close()[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_96 $$ loop_out.close()[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_96 $$ loop_out.close()[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_96 $$ loop_out.close()[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_96 $$ loop_out.close()[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_96 $$ loop_out.close()[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_100 $$ IOUtils.copyLarge(in, out)[ CD ]
Line_59 $$ InputStream in = new FileInputStream(toInsert)-->Line_100 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_26 $$ EntryOutputStream out = null-->Line_100 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_100 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_100 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_100 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_100 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_101 $$ in.close()[ CD ]
Line_59 $$ InputStream in = new FileInputStream(toInsert)-->Line_101 $$ in.close()[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_102 $$ out.flush()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_102 $$ out.flush()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_102 $$ out.flush()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_102 $$ out.flush()[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_102 $$ out.flush()[ FD ]
Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_102 $$ out.flush()[ FD ]
Line_72 $$ if (toInsert.isDirectory()) -->Line_103 $$ out.close()[ CD ]
Line_26 $$ EntryOutputStream out = null-->Line_103 $$ out.close()[ FD ]
Line_28 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_103 $$ out.close()[ FD ]
Line_30 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_103 $$ out.close()[ FD ]
Line_68 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_STORED, new Date(toInsert.lastModified()))-->Line_103 $$ out.close()[ FD ]
Line_70 $$ out = zip64File.openEntryOutputStream(targetPath, FileEntry.iMETHOD_DEFLATED, new Date(toInsert.lastModified()))-->Line_103 $$ out.close()[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_106 $$ log.info("[insertFileInto] Done! Added " + toInsert.getName() + " to zip.")[ FD ]
Line_3 $$ Zip64File zip64File = null-->Line_107 $$ zip64File.close()[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_107 $$ zip64File.close()[ FD ]
Line_2 $$ public static File insertFileInto(File zipFile, File toInsert, String targetPath) -->Line_113 $$ return new File(zip64File.getDiskFile().getFileName())[ CD ]
Line_3 $$ Zip64File zip64File = null-->Line_113 $$ return new File(zip64File.getDiskFile().getFileName())[ FD ]
Line_6 $$ zip64File = new Zip64File(zipFile)-->Line_113 $$ return new File(zip64File.getDiskFile().getFileName())[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_41 $$ File currentFile = containedFiles.get(i)[ FD ]
Line_40 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_42 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_49 $$ if (currentFile.isFile()) [ FD ]
Line_41 $$ File currentFile = containedFiles.get(i)-->Line_49 $$ if (currentFile.isFile()) [ FD ]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_51 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_50 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_52 $$ loop_in.close()[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_55 $$ loop_out.flush()[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_55 $$ loop_out.flush()[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_55 $$ loop_out.flush()[ FD ]
Line_43 $$ EntryOutputStream loop_out = null-->Line_56 $$ loop_out.close()[ FD ]
Line_45 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_56 $$ loop_out.close()[ FD ]
Line_47 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_56 $$ loop_out.close()[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) [ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_81 $$ File currentFile = containedFiles.get(i)[ FD ]
Line_80 $$ for (int i = 0; i < containedPaths.size(); i++) -->Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)[ FD ]
Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))[ FD ]
Line_82 $$ String currentPath = targetPath.replace("/", "") + File.separator + containedPaths.get(i)-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))[ FD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_89 $$ if (currentFile.isFile()) [ FD ]
Line_81 $$ File currentFile = containedFiles.get(i)-->Line_89 $$ if (currentFile.isFile()) [ FD ]
Line_90 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_91 $$ IOUtils.copyLarge(loop_in, loop_out)[ FD ]
Line_90 $$ InputStream loop_in = new FileInputStream(currentFile)-->Line_92 $$ loop_in.close()[ FD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_95 $$ loop_out.flush()[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_95 $$ loop_out.flush()[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_95 $$ loop_out.flush()[ FD ]
Line_83 $$ EntryOutputStream loop_out = null-->Line_96 $$ loop_out.close()[ FD ]
Line_85 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_STORED, new Date(currentFile.lastModified()))-->Line_96 $$ loop_out.close()[ FD ]
Line_87 $$ loop_out = zip64File.openEntryOutputStream(currentPath, FileEntry.iMETHOD_DEFLATED, new Date(currentFile.lastModified()))-->Line_96 $$ loop_out.close()[ FD ]
