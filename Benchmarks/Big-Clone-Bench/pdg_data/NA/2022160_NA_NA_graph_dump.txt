Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) [ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_3 $$ if (!m_sslInitiated) [ CD ]
Line_3 $$ if (!m_sslInitiated) -->Line_4 $$ return m_writer.write(byteBuffers)[ CD ]
Line_4 $$ return m_writer.write(byteBuffers)-->Line_4 $$ return m_writer.write(byteBuffers)[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_4 $$ return m_writer.write(byteBuffers)[ FD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_6 $$ if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) [ CD ]
Line_6 $$ if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) -->Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) -->Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) -->Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) -->Line_8 $$ m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers))[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_8 $$ m_initialOutBuffer = NIOUtils.concat(m_initialOutBuffer, m_writer.write(byteBuffers))[ FD ]
Line_7 $$ if (!NIOUtils.isEmpty(byteBuffers)) -->Line_9 $$ byteBuffers = new ByteBuffer[0][ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_9 $$ byteBuffers = new ByteBuffer[0][ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_9 $$ byteBuffers = new ByteBuffer[0][ FD ]
Line_6 $$ if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) -->Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()[ CD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()[ CD ]
Line_6 $$ if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) -->Line_12 $$ ByteBuffer[] buffers = null[ CD ]
Line_15 $$ while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) -->Line_16 $$ buffer.clear()[ CD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_16 $$ buffer.clear()[ FD ]
Line_15 $$ while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) -->Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)[ CD ]
Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)-->Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_14 $$ SSLEngineResult result = null-->Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)-->Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_15 $$ while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) -->Line_18 $$ buffer.flip()[ CD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_18 $$ buffer.flip()[ FD ]
Line_15 $$ while (m_engine.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_WRAP) -->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ CD ]
Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))-->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ FD ]
Line_12 $$ ByteBuffer[] buffers = null-->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ FD ]
Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))-->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ CD ]
Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))-->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ FD ]
Line_12 $$ ByteBuffer[] buffers = null-->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ FD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ FD ]
Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)-->Line_21 $$ if (result == null)[ FD ]
Line_14 $$ SSLEngineResult result = null-->Line_21 $$ if (result == null)[ FD ]
Line_21 $$ if (result == null)-->Line_21 $$ return null[ CD ]
Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)-->Line_22 $$ if (result.getStatus() != SSLEngineResult.Status.OK)[ FD ]
Line_14 $$ SSLEngineResult result = null-->Line_22 $$ if (result.getStatus() != SSLEngineResult.Status.OK)[ FD ]
Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)-->Line_22 $$ throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus())[ FD ]
Line_14 $$ SSLEngineResult result = null-->Line_22 $$ throw new SSLException("Unexpectedly not ok wrapping handshake data, was " + result.getStatus())[ FD ]
Line_17 $$ result = m_engine.wrap(byteBuffers, buffer)-->Line_23 $$ reactToHandshakeStatus(result.getHandshakeStatus())[ FD ]
Line_14 $$ SSLEngineResult result = null-->Line_23 $$ reactToHandshakeStatus(result.getHandshakeStatus())[ FD ]
Line_6 $$ if (m_engine.getHandshakeStatus() != SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING) -->Line_27 $$ return buffers[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_29 $$ ByteBuffer buffer = SSL_BUFFER.get()[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_30 $$ buffer.clear()[ CD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_30 $$ buffer.clear()[ FD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) -->Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) -->Line_32 $$ if (m_initialOutBuffer == null)[ CD ]
Line_32 $$ if (m_initialOutBuffer == null)-->Line_32 $$ return null[ CD ]
Line_31 $$ if (NIOUtils.isEmpty(byteBuffers)) -->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ FD ]
Line_34 $$ byteBuffers = m_writer.write(byteBuffers)-->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ FD ]
Line_34 $$ byteBuffers = m_writer.write(byteBuffers)-->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ FD ]
Line_34 $$ byteBuffers = m_writer.write(byteBuffers)-->Line_34 $$ byteBuffers = m_writer.write(byteBuffers)[ FD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_36 $$ if (m_initialOutBuffer != null) [ CD ]
Line_36 $$ if (m_initialOutBuffer != null) -->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_34 $$ byteBuffers = m_writer.write(byteBuffers)-->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)-->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)-->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_34 $$ byteBuffers = m_writer.write(byteBuffers)-->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)-->Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)[ FD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_40 $$ ByteBuffer[] encrypted = null[ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) [ CD ]
Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) -->Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) -->Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) [ CD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_34 $$ byteBuffers = m_writer.write(byteBuffers)-->Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)-->Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) [ FD ]
Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) -->Line_42 $$ buffer.clear()[ CD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_42 $$ buffer.clear()[ FD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_44 $$ m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_9 $$ byteBuffers = new ByteBuffer[0]-->Line_44 $$ m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_34 $$ byteBuffers = m_writer.write(byteBuffers)-->Line_44 $$ m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_37 $$ byteBuffers = NIOUtils.concat(m_initialOutBuffer, byteBuffers)-->Line_44 $$ m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_44 $$ m_engine.wrap(byteBuffers, buffer)[ FD ]
Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) -->Line_48 $$ buffer.flip()[ CD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_48 $$ buffer.flip()[ FD ]
Line_41 $$ while (!NIOUtils.isEmpty(byteBuffers)) -->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ CD ]
Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))-->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ FD ]
Line_40 $$ ByteBuffer[] encrypted = null-->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ FD ]
Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))-->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ CD ]
Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))-->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ FD ]
Line_40 $$ ByteBuffer[] encrypted = null-->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ FD ]
Line_11 $$ ByteBuffer buffer = SSL_BUFFER.get()-->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ FD ]
Line_2 $$ public ByteBuffer[] write(ByteBuffer[] byteBuffers) -->Line_51 $$ return encrypted[ CD ]
Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))-->Line_19 $$ buffers = NIOUtils.concat(buffers, NIOUtils.copy(buffer))[ FD ]
Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))-->Line_49 $$ encrypted = NIOUtils.concat(encrypted, NIOUtils.copy(buffer))[ FD ]
