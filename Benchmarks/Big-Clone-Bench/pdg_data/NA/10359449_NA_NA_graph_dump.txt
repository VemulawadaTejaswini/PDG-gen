Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected Class findClass(String name) throws ClassNotFoundException [ CD ]
Line_2 $$ protected Class findClass(String name) throws ClassNotFoundException -->Line_3 $$ String classFile = name.replace('.', '/') + ".class"[ CD ]
Line_2 $$ protected Class findClass(String name) throws ClassNotFoundException -->Line_3 $$ String classFile = name.replace('.', '/') + ".class"[ FD ]
Line_2 $$ protected Class findClass(String name) throws ClassNotFoundException -->Line_4 $$ InputStream classInputStream = null[ CD ]
Line_2 $$ protected Class findClass(String name) throws ClassNotFoundException -->Line_5 $$ if (this.extensionJars != null) [ CD ]
Line_5 $$ if (this.extensionJars != null) -->Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) [ CD ]
Line_5 $$ if (this.extensionJars != null) -->Line_5 $$ if (this.extensionJars != null) [ CD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_7 $$ JarFile extensionJar = this.extensionJars[i][ CD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)[ CD ]
Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)-->Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)[ CD ]
Line_7 $$ JarFile extensionJar = this.extensionJars[i]-->Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)[ FD ]
Line_3 $$ String classFile = name.replace('.', '/') + ".class"-->Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)[ FD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_9 $$ if (jarEntry != null) [ CD ]
Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)-->Line_9 $$ if (jarEntry != null) [ FD ]
Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)-->Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)[ FD ]
Line_4 $$ InputStream classInputStream = null-->Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)[ FD ]
Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)-->Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)[ CD ]
Line_7 $$ JarFile extensionJar = this.extensionJars[i]-->Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)[ FD ]
Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)-->Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)[ FD ]
Line_2 $$ protected Class findClass(String name) throws ClassNotFoundException -->Line_18 $$ if (classInputStream == null) [ CD ]
Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)-->Line_18 $$ if (classInputStream == null) [ FD ]
Line_4 $$ InputStream classInputStream = null-->Line_18 $$ if (classInputStream == null) [ FD ]
Line_18 $$ if (classInputStream == null) -->Line_19 $$ URL url = getResource(classFile)[ CD ]
Line_19 $$ URL url = getResource(classFile)-->Line_19 $$ URL url = getResource(classFile)[ CD ]
Line_3 $$ String classFile = name.replace('.', '/') + ".class"-->Line_19 $$ URL url = getResource(classFile)[ FD ]
Line_18 $$ if (classInputStream == null) -->Line_20 $$ if (url == null) [ CD ]
Line_19 $$ URL url = getResource(classFile)-->Line_20 $$ if (url == null) [ FD ]
Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)-->Line_24 $$ classInputStream = url.openStream()[ FD ]
Line_4 $$ InputStream classInputStream = null-->Line_24 $$ classInputStream = url.openStream()[ FD ]
Line_24 $$ classInputStream = url.openStream()-->Line_24 $$ classInputStream = url.openStream()[ FD ]
Line_24 $$ classInputStream = url.openStream()-->Line_24 $$ classInputStream = url.openStream()[ CD ]
Line_19 $$ URL url = getResource(classFile)-->Line_24 $$ classInputStream = url.openStream()[ FD ]
Line_34 $$ while ((size = in.read(buffer)) != -1) -->Line_34 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_33 $$ int size-->Line_34 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_34 $$ while ((size = in.read(buffer)) != -1) -->Line_34 $$ while ((size = in.read(buffer)) != -1) [ CD ]
Line_31 $$ BufferedInputStream in = new BufferedInputStream(classInputStream)-->Line_34 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_32 $$ byte[] buffer = new byte[8096]-->Line_34 $$ while ((size = in.read(buffer)) != -1) [ FD ]
Line_34 $$ while ((size = in.read(buffer)) != -1) -->Line_35 $$ out.write(buffer, 0, size)[ CD ]
Line_30 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_35 $$ out.write(buffer, 0, size)[ FD ]
Line_32 $$ byte[] buffer = new byte[8096]-->Line_35 $$ out.write(buffer, 0, size)[ FD ]
Line_34 $$ while ((size = in.read(buffer)) != -1) -->Line_35 $$ out.write(buffer, 0, size)[ FD ]
Line_33 $$ int size-->Line_35 $$ out.write(buffer, 0, size)[ FD ]
Line_31 $$ BufferedInputStream in = new BufferedInputStream(classInputStream)-->Line_37 $$ in.close()[ FD ]
Line_38 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)-->Line_38 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ CD ]
Line_2 $$ protected Class findClass(String name) throws ClassNotFoundException -->Line_38 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ FD ]
Line_30 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_38 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ FD ]
Line_30 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_38 $$ return defineClass(name, out.toByteArray(), 0, out.size(), this.protectionDomain)[ FD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) -->Line_6 $$ for (int i = 0; i < this.extensionJars.length; i++) [ FD ]
Line_7 $$ JarFile extensionJar = this.extensionJars[i]-->Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)[ FD ]
Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)-->Line_9 $$ if (jarEntry != null) [ FD ]
Line_7 $$ JarFile extensionJar = this.extensionJars[i]-->Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)[ FD ]
Line_8 $$ JarEntry jarEntry = extensionJar.getJarEntry(classFile)-->Line_11 $$ classInputStream = extensionJar.getInputStream(jarEntry)[ FD ]
Line_34 $$ while ((size = in.read(buffer)) != -1) -->Line_35 $$ out.write(buffer, 0, size)[ FD ]
