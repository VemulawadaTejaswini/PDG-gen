Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException [ CD ]
Line_2 $$ public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException -->Line_3 $$ if (DEBUG)[ CD ]
Line_3 $$ if (DEBUG)-->Line_3 $$ System.out.println("DocumentUtilities.readDocument( " + url + ")")[ CD ]
Line_2 $$ public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException -->Line_4 $$ Document document = null[ CD ]
Line_6 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()-->Line_6 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()[ CD ]
Line_6 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()-->Line_7 $$ factory.setNamespaceAware(true)[ FD ]
Line_6 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()-->Line_8 $$ factory.setCoalescing(true)[ FD ]
Line_2 $$ public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException -->Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ connection.setDefaultUseCaches(false)[ FD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_11 $$ connection.setUseCaches(false)[ FD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_12 $$ connection.setRequestProperty("User-Agent", "eXchaNGeR/" + System.getProperty("xngr.version") + " (http://xngr.org/)")[ FD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_13 $$ connection.connect()[ FD ]
Line_14 $$ InputStream stream = connection.getInputStream()-->Line_14 $$ InputStream stream = connection.getInputStream()[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_14 $$ InputStream stream = connection.getInputStream()[ FD ]
Line_4 $$ Document document = null-->Line_15 $$ document = factory.newDocumentBuilder().parse(stream)[ FD ]
Line_15 $$ document = factory.newDocumentBuilder().parse(stream)-->Line_15 $$ document = factory.newDocumentBuilder().parse(stream)[ FD ]
Line_15 $$ document = factory.newDocumentBuilder().parse(stream)-->Line_15 $$ document = factory.newDocumentBuilder().parse(stream)[ CD ]
Line_14 $$ InputStream stream = connection.getInputStream()-->Line_15 $$ document = factory.newDocumentBuilder().parse(stream)[ FD ]
Line_6 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance()-->Line_15 $$ document = factory.newDocumentBuilder().parse(stream)[ FD ]
Line_14 $$ InputStream stream = connection.getInputStream()-->Line_16 $$ stream.close()[ FD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_17 $$ connection.disconnect()[ FD ]
Line_2 $$ public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException -->Line_25 $$ if (DEBUG)[ CD ]
Line_25 $$ if (DEBUG)-->Line_25 $$ System.out.println("DocumentUtilities.readDocument( " + url + ") [" + document + "]")[ CD ]
Line_2 $$ public static synchronized Document readRemoteDocument(URL url, boolean validate) throws IOException, SAXParseException -->Line_26 $$ return document[ CD ]
