Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private synchronized Map load() [ CD ]
Line_2 $$ private synchronized Map load() -->Line_3 $$ if (!mustReloadConfigurationFiles()) [ CD ]
Line_3 $$ if (!mustReloadConfigurationFiles()) -->Line_3 $$ if (!mustReloadConfigurationFiles()) [ CD ]
Line_3 $$ if (!mustReloadConfigurationFiles()) -->Line_3 $$ if (!mustReloadConfigurationFiles()) [ CD ]
Line_3 $$ if (!mustReloadConfigurationFiles()) -->Line_4 $$ return groups[ CD ]
Line_2 $$ private synchronized Map load() -->Line_6 $$ SAXParser saxParser = null[ CD ]
Line_2 $$ private synchronized Map load() -->Line_7 $$ JSODefaultHandler saxHandler = new JSODefaultHandler()[ CD ]
Line_9 $$ final Collection resourcesByOrigin = getConfigResources()-->Line_9 $$ final Collection resourcesByOrigin = getConfigResources()[ CD ]
Line_11 $$ Iterator iOrigin = resourcesByOrigin.iterator()-->Line_11 $$ Iterator iOrigin = resourcesByOrigin.iterator()[ CD ]
Line_9 $$ final Collection resourcesByOrigin = getConfigResources()-->Line_11 $$ Iterator iOrigin = resourcesByOrigin.iterator()[ FD ]
Line_12 $$ while (iOrigin.hasNext()) -->Line_12 $$ while (iOrigin.hasNext()) [ CD ]
Line_11 $$ Iterator iOrigin = resourcesByOrigin.iterator()-->Line_12 $$ while (iOrigin.hasNext()) [ FD ]
Line_12 $$ while (iOrigin.hasNext()) -->Line_13 $$ Resource resource = (Resource) iOrigin.next()[ CD ]
Line_11 $$ Iterator iOrigin = resourcesByOrigin.iterator()-->Line_13 $$ Resource resource = (Resource) iOrigin.next()[ FD ]
Line_12 $$ while (iOrigin.hasNext()) -->Line_14 $$ String origin = resource.getSource()[ CD ]
Line_14 $$ String origin = resource.getSource()-->Line_14 $$ String origin = resource.getSource()[ CD ]
Line_13 $$ Resource resource = (Resource) iOrigin.next()-->Line_14 $$ String origin = resource.getSource()[ FD ]
Line_12 $$ while (iOrigin.hasNext()) -->Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) [ CD ]
Line_14 $$ String origin = resource.getSource()-->Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) [ FD ]
Line_14 $$ String origin = resource.getSource()-->Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) [ FD ]
Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) -->Line_16 $$ LOG.debug("Adding " + CONFIGURATION_FILE_NAME + " from " + origin + ".")[ CD ]
Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) -->Line_17 $$ resourcesList.addFirst(resource.getUrl())[ CD ]
Line_10 $$ final LinkedList resourcesList = new LinkedList()-->Line_17 $$ resourcesList.addFirst(resource.getUrl())[ FD ]
Line_13 $$ Resource resource = (Resource) iOrigin.next()-->Line_17 $$ resourcesList.addFirst(resource.getUrl())[ FD ]
Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) -->Line_19 $$ LOG.debug("Jar " + origin + " refused. See jso.allowedJar property in jso.properties file.")[ CD ]
Line_22 $$ URL external = getExternalResource()-->Line_22 $$ URL external = getExternalResource()[ CD ]
Line_22 $$ URL external = getExternalResource()-->Line_23 $$ if (external != null) [ FD ]
Line_23 $$ if (external != null) -->Line_24 $$ resourcesList.addFirst(external)[ CD ]
Line_10 $$ final LinkedList resourcesList = new LinkedList()-->Line_24 $$ resourcesList.addFirst(external)[ FD ]
Line_22 $$ URL external = getExternalResource()-->Line_24 $$ resourcesList.addFirst(external)[ FD ]
Line_6 $$ SAXParser saxParser = null-->Line_26 $$ saxParser = SAXParserFactory.newInstance().newSAXParser()[ FD ]
Line_26 $$ saxParser = SAXParserFactory.newInstance().newSAXParser()-->Line_26 $$ saxParser = SAXParserFactory.newInstance().newSAXParser()[ FD ]
Line_26 $$ saxParser = SAXParserFactory.newInstance().newSAXParser()-->Line_26 $$ saxParser = SAXParserFactory.newInstance().newSAXParser()[ CD ]
Line_27 $$ Iterator ite = resourcesList.iterator()-->Line_27 $$ Iterator ite = resourcesList.iterator()[ CD ]
Line_10 $$ final LinkedList resourcesList = new LinkedList()-->Line_27 $$ Iterator ite = resourcesList.iterator()[ FD ]
Line_28 $$ while (ite.hasNext()) -->Line_28 $$ while (ite.hasNext()) [ CD ]
Line_27 $$ Iterator ite = resourcesList.iterator()-->Line_28 $$ while (ite.hasNext()) [ FD ]
Line_28 $$ while (ite.hasNext()) -->Line_29 $$ final URL url = (URL) ite.next()[ CD ]
Line_27 $$ Iterator ite = resourcesList.iterator()-->Line_29 $$ final URL url = (URL) ite.next()[ FD ]
Line_28 $$ while (ite.hasNext()) -->Line_30 $$ LOG.debug("Parsing of file " + url.toString() + ".")[ CD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_30 $$ LOG.debug("Parsing of file " + url.toString() + ".")[ FD ]
Line_28 $$ while (ite.hasNext()) -->Line_31 $$ InputStream input = null[ CD ]
Line_31 $$ InputStream input = null-->Line_33 $$ input = url.openStream()[ FD ]
Line_33 $$ input = url.openStream()-->Line_33 $$ input = url.openStream()[ FD ]
Line_33 $$ input = url.openStream()-->Line_33 $$ input = url.openStream()[ CD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_33 $$ input = url.openStream()[ FD ]
Line_6 $$ SAXParser saxParser = null-->Line_34 $$ saxParser.parse(input, saxHandler)[ FD ]
Line_26 $$ saxParser = SAXParserFactory.newInstance().newSAXParser()-->Line_34 $$ saxParser.parse(input, saxHandler)[ FD ]
Line_31 $$ InputStream input = null-->Line_34 $$ saxParser.parse(input, saxHandler)[ FD ]
Line_33 $$ input = url.openStream()-->Line_34 $$ saxParser.parse(input, saxHandler)[ FD ]
Line_7 $$ JSODefaultHandler saxHandler = new JSODefaultHandler()-->Line_34 $$ saxParser.parse(input, saxHandler)[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_36 $$ LOG.error("Parsing of file " + url.toString() + " failed! Parsing still continues.", e)[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_38 $$ LOG.error("Reading of file " + url.toString() + " failed! Parsing still continues.", e)[ FD ]
Line_31 $$ InputStream input = null-->Line_40 $$ if (input != null) [ FD ]
Line_33 $$ input = url.openStream()-->Line_40 $$ if (input != null) [ FD ]
Line_31 $$ InputStream input = null-->Line_42 $$ input.close()[ FD ]
Line_33 $$ input = url.openStream()-->Line_42 $$ input.close()[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_44 $$ LOG.error("Closing inputstream of file " + url.toString() + " failed! Parsing still continues.", e)[ FD ]
Line_2 $$ private synchronized Map load() -->Line_56 $$ this.defaultLocation = (String) saxHandler.getDefaultValues().get("location")[ CD ]
Line_7 $$ JSODefaultHandler saxHandler = new JSODefaultHandler()-->Line_56 $$ this.defaultLocation = (String) saxHandler.getDefaultValues().get("location")[ FD ]
Line_2 $$ private synchronized Map load() -->Line_57 $$ this.defaultTimestampPolicy = (String) saxHandler.getDefaultValues().get("timeStampPolicy")[ CD ]
Line_7 $$ JSODefaultHandler saxHandler = new JSODefaultHandler()-->Line_57 $$ this.defaultTimestampPolicy = (String) saxHandler.getDefaultValues().get("timeStampPolicy")[ FD ]
Line_2 $$ private synchronized Map load() -->Line_58 $$ if (this.defaultTimestampPolicy == null)[ CD ]
Line_58 $$ if (this.defaultTimestampPolicy == null)-->Line_58 $$ this.defaultTimestampPolicy = Group.TIMESTAMP_LOCAL[ CD ]
Line_2 $$ private synchronized Map load() -->Line_59 $$ this.groups = saxHandler.getListGroups()[ CD ]
Line_59 $$ this.groups = saxHandler.getListGroups()-->Line_59 $$ this.groups = saxHandler.getListGroups()[ CD ]
Line_7 $$ JSODefaultHandler saxHandler = new JSODefaultHandler()-->Line_59 $$ this.groups = saxHandler.getListGroups()[ FD ]
Line_2 $$ private synchronized Map load() -->Line_60 $$ return this.groups[ CD ]
Line_13 $$ Resource resource = (Resource) iOrigin.next()-->Line_14 $$ String origin = resource.getSource()[ FD ]
Line_14 $$ String origin = resource.getSource()-->Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) [ FD ]
Line_14 $$ String origin = resource.getSource()-->Line_15 $$ if (origin.startsWith(LOCAL_CLASSPATH) || JarRestrictionManager.getInstance().isJarAllowed(origin)) [ FD ]
Line_13 $$ Resource resource = (Resource) iOrigin.next()-->Line_17 $$ resourcesList.addFirst(resource.getUrl())[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_30 $$ LOG.debug("Parsing of file " + url.toString() + ".")[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_33 $$ input = url.openStream()[ FD ]
Line_31 $$ InputStream input = null-->Line_34 $$ saxParser.parse(input, saxHandler)[ FD ]
Line_33 $$ input = url.openStream()-->Line_34 $$ saxParser.parse(input, saxHandler)[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_36 $$ LOG.error("Parsing of file " + url.toString() + " failed! Parsing still continues.", e)[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_38 $$ LOG.error("Reading of file " + url.toString() + " failed! Parsing still continues.", e)[ FD ]
Line_31 $$ InputStream input = null-->Line_40 $$ if (input != null) [ FD ]
Line_33 $$ input = url.openStream()-->Line_40 $$ if (input != null) [ FD ]
Line_31 $$ InputStream input = null-->Line_42 $$ input.close()[ FD ]
Line_33 $$ input = url.openStream()-->Line_42 $$ input.close()[ FD ]
Line_29 $$ final URL url = (URL) ite.next()-->Line_44 $$ LOG.error("Closing inputstream of file " + url.toString() + " failed! Parsing still continues.", e)[ FD ]
