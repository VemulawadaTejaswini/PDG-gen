Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String EncryptString(String method, String input) [ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_3 $$ MessageDigest md = null[ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_4 $$ byte[] byteHash = null[ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_5 $$ StringBuffer resultString = new StringBuffer()[ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_6 $$ if (method.equals("SHA1") || method.equals("MD5")) [ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_6 $$ if (method.equals("SHA1") || method.equals("MD5")) [ FD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_6 $$ if (method.equals("SHA1") || method.equals("MD5")) [ FD ]
Line_3 $$ MessageDigest md = null-->Line_8 $$ md = MessageDigest.getInstance(method)[ FD ]
Line_8 $$ md = MessageDigest.getInstance(method)-->Line_8 $$ md = MessageDigest.getInstance(method)[ FD ]
Line_8 $$ md = MessageDigest.getInstance(method)-->Line_8 $$ md = MessageDigest.getInstance(method)[ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_8 $$ md = MessageDigest.getInstance(method)[ FD ]
Line_6 $$ if (method.equals("SHA1") || method.equals("MD5")) -->Line_14 $$ return null[ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_16 $$ md.reset()[ CD ]
Line_3 $$ MessageDigest md = null-->Line_16 $$ md.reset()[ FD ]
Line_8 $$ md = MessageDigest.getInstance(method)-->Line_16 $$ md.reset()[ FD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_17 $$ md.update(input.getBytes())[ CD ]
Line_3 $$ MessageDigest md = null-->Line_17 $$ md.update(input.getBytes())[ FD ]
Line_8 $$ md = MessageDigest.getInstance(method)-->Line_17 $$ md.update(input.getBytes())[ FD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_17 $$ md.update(input.getBytes())[ FD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_18 $$ byteHash = md.digest()[ CD ]
Line_4 $$ byte[] byteHash = null-->Line_18 $$ byteHash = md.digest()[ FD ]
Line_18 $$ byteHash = md.digest()-->Line_18 $$ byteHash = md.digest()[ FD ]
Line_18 $$ byteHash = md.digest()-->Line_18 $$ byteHash = md.digest()[ CD ]
Line_3 $$ MessageDigest md = null-->Line_18 $$ byteHash = md.digest()[ FD ]
Line_8 $$ md = MessageDigest.getInstance(method)-->Line_18 $$ byteHash = md.digest()[ FD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_19 $$ for (int i = 0; i < byteHash.length; i++) [ CD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_2 $$ public static String EncryptString(String method, String input) [ CD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_19 $$ for (int i = 0; i < byteHash.length; i++) [ CD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_19 $$ for (int i = 0; i < byteHash.length; i++) [ CD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_19 $$ for (int i = 0; i < byteHash.length; i++) [ FD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])[ CD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])[ CD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_21 $$ if (tmp.length() < 2)[ CD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_21 $$ if (tmp.length() < 2)[ FD ]
Line_21 $$ if (tmp.length() < 2)-->Line_21 $$ tmp = "0" + tmp[ CD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_21 $$ tmp = "0" + tmp[ FD ]
Line_21 $$ tmp = "0" + tmp-->Line_21 $$ tmp = "0" + tmp[ FD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_21 $$ tmp = "0" + tmp[ FD ]
Line_21 $$ tmp = "0" + tmp-->Line_21 $$ tmp = "0" + tmp[ FD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_22 $$ resultString.append(tmp)[ CD ]
Line_5 $$ StringBuffer resultString = new StringBuffer()-->Line_22 $$ resultString.append(tmp)[ FD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_22 $$ resultString.append(tmp)[ FD ]
Line_21 $$ tmp = "0" + tmp-->Line_22 $$ resultString.append(tmp)[ FD ]
Line_2 $$ public static String EncryptString(String method, String input) -->Line_24 $$ return (resultString.toString())[ CD ]
Line_5 $$ StringBuffer resultString = new StringBuffer()-->Line_24 $$ return (resultString.toString())[ FD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_19 $$ for (int i = 0; i < byteHash.length; i++) [ FD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_19 $$ for (int i = 0; i < byteHash.length; i++) [ FD ]
Line_19 $$ for (int i = 0; i < byteHash.length; i++) -->Line_19 $$ for (int i = 0; i < byteHash.length; i++) [ FD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_21 $$ if (tmp.length() < 2)[ FD ]
Line_21 $$ tmp = "0" + tmp-->Line_21 $$ if (tmp.length() < 2)[ FD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_21 $$ tmp = "0" + tmp[ FD ]
Line_21 $$ tmp = "0" + tmp-->Line_21 $$ tmp = "0" + tmp[ FD ]
Line_20 $$ String tmp = Integer.toHexString(0xff & byteHash[i])-->Line_22 $$ resultString.append(tmp)[ FD ]
Line_21 $$ tmp = "0" + tmp-->Line_22 $$ resultString.append(tmp)[ FD ]
