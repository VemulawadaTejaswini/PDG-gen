Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String hashValue(String password, String salt) throws TeqloException [ CD ]
Line_2 $$ public static String hashValue(String password, String salt) throws TeqloException -->Line_3 $$ MessageDigest md = null[ CD ]
Line_3 $$ MessageDigest md = null-->Line_5 $$ md = MessageDigest.getInstance("SHA")[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA")-->Line_5 $$ md = MessageDigest.getInstance("SHA")[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA")-->Line_5 $$ md = MessageDigest.getInstance("SHA")[ CD ]
Line_3 $$ MessageDigest md = null-->Line_6 $$ md.update(password.getBytes("UTF-8"))[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA")-->Line_6 $$ md.update(password.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String hashValue(String password, String salt) throws TeqloException -->Line_6 $$ md.update(password.getBytes("UTF-8"))[ FD ]
Line_3 $$ MessageDigest md = null-->Line_7 $$ md.update(salt.getBytes("UTF-8"))[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA")-->Line_7 $$ md.update(salt.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String hashValue(String password, String salt) throws TeqloException -->Line_7 $$ md.update(salt.getBytes("UTF-8"))[ FD ]
Line_8 $$ byte raw[] = md.digest()-->Line_8 $$ byte raw[] = md.digest()[ CD ]
Line_3 $$ MessageDigest md = null-->Line_8 $$ byte raw[] = md.digest()[ FD ]
Line_5 $$ md = MessageDigest.getInstance("SHA")-->Line_8 $$ byte raw[] = md.digest()[ FD ]
Line_9 $$ char[] encoded = (new BASE64Encoder()).encode(raw).toCharArray()-->Line_9 $$ char[] encoded = (new BASE64Encoder()).encode(raw).toCharArray()[ CD ]
Line_11 $$ while (length > 0 && encoded[length - 1] == '=') length---->Line_11 $$ length--[ CD ]
Line_10 $$ int length = encoded.length-->Line_11 $$ length--[ FD ]
Line_10 $$ int length = encoded.length-->Line_12 $$ for (int i = 0; i < length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_12 $$ for (int i = 0; i < length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_12 $$ for (int i = 0; i < length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_12 $$ for (int i = 0; i < length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_13 $$ if (encoded[i] == '+')[ CD ]
Line_13 $$ if (encoded[i] == '+')-->Line_13 $$ encoded[i] = '*'[ CD ]
Line_13 $$ if (encoded[i] == '+')-->Line_13 $$ if (encoded[i] == '/')[ CD ]
Line_13 $$ if (encoded[i] == '/')-->Line_13 $$ encoded[i] = '-'[ CD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_12 $$ for (int i = 0; i < length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_12 $$ for (int i = 0; i < length; i++) [ FD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_12 $$ for (int i = 0; i < length; i++) [ FD ]
