Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException [ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_3 $$ boolean includeFullyQualifiedURLs = context.getBooleanDevicePolicyValue("protocol.mime.fully.qualified.urls")[ CD ]
Line_3 $$ boolean includeFullyQualifiedURLs = context.getBooleanDevicePolicyValue("protocol.mime.fully.qualified.urls")-->Line_3 $$ boolean includeFullyQualifiedURLs = context.getBooleanDevicePolicyValue("protocol.mime.fully.qualified.urls")[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_3 $$ boolean includeFullyQualifiedURLs = context.getBooleanDevicePolicyValue("protocol.mime.fully.qualified.urls")[ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_4 $$ MarinerRequestContext requestContext = context.getRequestContext()[ CD ]
Line_4 $$ MarinerRequestContext requestContext = context.getRequestContext()-->Line_4 $$ MarinerRequestContext requestContext = context.getRequestContext()[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_4 $$ MarinerRequestContext requestContext = context.getRequestContext()[ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_5 $$ ApplicationContext ac = ContextInternals.getApplicationContext(requestContext)[ CD ]
Line_5 $$ ApplicationContext ac = ContextInternals.getApplicationContext(requestContext)-->Line_5 $$ ApplicationContext ac = ContextInternals.getApplicationContext(requestContext)[ CD ]
Line_4 $$ MarinerRequestContext requestContext = context.getRequestContext()-->Line_5 $$ ApplicationContext ac = ContextInternals.getApplicationContext(requestContext)[ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_6 $$ PackageResources pr = ac.getPackageResources()[ CD ]
Line_6 $$ PackageResources pr = ac.getPackageResources()-->Line_6 $$ PackageResources pr = ac.getPackageResources()[ CD ]
Line_5 $$ ApplicationContext ac = ContextInternals.getApplicationContext(requestContext)-->Line_6 $$ PackageResources pr = ac.getPackageResources()[ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_7 $$ List encodedURLs = pr.getEncodedURLs()[ CD ]
Line_7 $$ List encodedURLs = pr.getEncodedURLs()-->Line_7 $$ List encodedURLs = pr.getEncodedURLs()[ CD ]
Line_6 $$ PackageResources pr = ac.getPackageResources()-->Line_7 $$ List encodedURLs = pr.getEncodedURLs()[ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_8 $$ Map assetURLMap = pr.getAssetURLMap()[ CD ]
Line_8 $$ Map assetURLMap = pr.getAssetURLMap()-->Line_8 $$ Map assetURLMap = pr.getAssetURLMap()[ CD ]
Line_6 $$ PackageResources pr = ac.getPackageResources()-->Line_8 $$ Map assetURLMap = pr.getAssetURLMap()[ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_9 $$ Iterator iterator[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_10 $$ String encodedURL[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_11 $$ PackageResources.Asset asset[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_12 $$ String assetURL = null[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_13 $$ BodyPart assetPart[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_14 $$ if (encodedURLs != null) [ CD ]
Line_7 $$ List encodedURLs = pr.getEncodedURLs()-->Line_14 $$ if (encodedURLs != null) [ FD ]
Line_14 $$ if (encodedURLs != null) -->Line_15 $$ iterator = encodedURLs.iterator()[ CD ]
Line_9 $$ Iterator iterator-->Line_15 $$ iterator = encodedURLs.iterator()[ FD ]
Line_15 $$ iterator = encodedURLs.iterator()-->Line_15 $$ iterator = encodedURLs.iterator()[ FD ]
Line_15 $$ iterator = encodedURLs.iterator()-->Line_15 $$ iterator = encodedURLs.iterator()[ CD ]
Line_7 $$ List encodedURLs = pr.getEncodedURLs()-->Line_15 $$ iterator = encodedURLs.iterator()[ FD ]
Line_14 $$ if (encodedURLs != null) -->Line_17 $$ iterator = assetURLMap.keySet().iterator()[ CD ]
Line_9 $$ Iterator iterator-->Line_17 $$ iterator = assetURLMap.keySet().iterator()[ FD ]
Line_15 $$ iterator = encodedURLs.iterator()-->Line_17 $$ iterator = assetURLMap.keySet().iterator()[ FD ]
Line_17 $$ iterator = assetURLMap.keySet().iterator()-->Line_17 $$ iterator = assetURLMap.keySet().iterator()[ FD ]
Line_17 $$ iterator = assetURLMap.keySet().iterator()-->Line_17 $$ iterator = assetURLMap.keySet().iterator()[ CD ]
Line_8 $$ Map assetURLMap = pr.getAssetURLMap()-->Line_17 $$ iterator = assetURLMap.keySet().iterator()[ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_19 $$ while (iterator.hasNext()) [ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException [ CD ]
Line_19 $$ while (iterator.hasNext()) -->Line_19 $$ while (iterator.hasNext()) [ CD ]
Line_9 $$ Iterator iterator-->Line_19 $$ while (iterator.hasNext()) [ FD ]
Line_15 $$ iterator = encodedURLs.iterator()-->Line_19 $$ while (iterator.hasNext()) [ FD ]
Line_17 $$ iterator = assetURLMap.keySet().iterator()-->Line_19 $$ while (iterator.hasNext()) [ FD ]
Line_19 $$ while (iterator.hasNext()) -->Line_20 $$ encodedURL = (String) iterator.next()[ CD ]
Line_20 $$ encodedURL = (String) iterator.next()-->Line_20 $$ encodedURL = (String) iterator.next()[ FD ]
Line_10 $$ String encodedURL-->Line_20 $$ encodedURL = (String) iterator.next()[ FD ]
Line_9 $$ Iterator iterator-->Line_20 $$ encodedURL = (String) iterator.next()[ FD ]
Line_15 $$ iterator = encodedURLs.iterator()-->Line_20 $$ encodedURL = (String) iterator.next()[ FD ]
Line_17 $$ iterator = assetURLMap.keySet().iterator()-->Line_20 $$ encodedURL = (String) iterator.next()[ FD ]
Line_19 $$ while (iterator.hasNext()) -->Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)[ CD ]
Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)-->Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)[ FD ]
Line_11 $$ PackageResources.Asset asset-->Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)[ FD ]
Line_8 $$ Map assetURLMap = pr.getAssetURLMap()-->Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)[ FD ]
Line_20 $$ encodedURL = (String) iterator.next()-->Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)[ FD ]
Line_10 $$ String encodedURL-->Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)[ FD ]
Line_19 $$ while (iterator.hasNext()) -->Line_22 $$ assetURL = asset.getValue()[ CD ]
Line_22 $$ assetURL = asset.getValue()-->Line_22 $$ assetURL = asset.getValue()[ FD ]
Line_12 $$ String assetURL = null-->Line_22 $$ assetURL = asset.getValue()[ FD ]
Line_22 $$ assetURL = asset.getValue()-->Line_22 $$ assetURL = asset.getValue()[ CD ]
Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)-->Line_22 $$ assetURL = asset.getValue()[ FD ]
Line_11 $$ PackageResources.Asset asset-->Line_22 $$ assetURL = asset.getValue()[ FD ]
Line_19 $$ while (iterator.hasNext()) -->Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) [ CD ]
Line_3 $$ boolean includeFullyQualifiedURLs = context.getBooleanDevicePolicyValue("protocol.mime.fully.qualified.urls")-->Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) [ FD ]
Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) -->Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) [ CD ]
Line_22 $$ assetURL = asset.getValue()-->Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) [ FD ]
Line_12 $$ String assetURL = null-->Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) [ FD ]
Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) -->Line_24 $$ if (isToBeAdded(assetURL, context)) [ CD ]
Line_22 $$ assetURL = asset.getValue()-->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_12 $$ String assetURL = null-->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_24 $$ if (isToBeAdded(assetURL, context)) -->Line_24 $$ if (isToBeAdded(assetURL, context)) [ CD ]
Line_22 $$ assetURL = asset.getValue()-->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_12 $$ String assetURL = null-->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_24 $$ if (isToBeAdded(assetURL, context)) -->Line_25 $$ assetPart = new MimeBodyPart()[ CD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_25 $$ assetPart = new MimeBodyPart()[ FD ]
Line_13 $$ BodyPart assetPart-->Line_25 $$ assetPart = new MimeBodyPart()[ FD ]
Line_27 $$ if (!asset.getOnClientSide()) -->Line_27 $$ if (!asset.getOnClientSide()) [ CD ]
Line_27 $$ if (!asset.getOnClientSide()) -->Line_27 $$ if (!asset.getOnClientSide()) [ CD ]
Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)-->Line_27 $$ if (!asset.getOnClientSide()) [ FD ]
Line_11 $$ PackageResources.Asset asset-->Line_27 $$ if (!asset.getOnClientSide()) [ FD ]
Line_27 $$ if (!asset.getOnClientSide()) -->Line_28 $$ URL url = null[ CD ]
Line_27 $$ if (!asset.getOnClientSide()) -->Line_29 $$ URLConnection connection[ CD ]
Line_28 $$ URL url = null-->Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))[ FD ]
Line_29 $$ URLConnection connection-->Line_32 $$ connection = url.openConnection()[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_32 $$ connection = url.openConnection()[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_32 $$ connection = url.openConnection()[ CD ]
Line_28 $$ URL url = null-->Line_32 $$ connection = url.openConnection()[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_32 $$ connection = url.openConnection()[ FD ]
Line_29 $$ URLConnection connection-->Line_33 $$ if (connection != null) [ FD ]
Line_32 $$ connection = url.openConnection()-->Line_33 $$ if (connection != null) [ FD ]
Line_33 $$ if (connection != null) -->Line_34 $$ connection.setDoInput(true)[ CD ]
Line_29 $$ URLConnection connection-->Line_34 $$ connection.setDoInput(true)[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_34 $$ connection.setDoInput(true)[ FD ]
Line_33 $$ if (connection != null) -->Line_35 $$ connection.setDoOutput(false)[ CD ]
Line_29 $$ URLConnection connection-->Line_35 $$ connection.setDoOutput(false)[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_35 $$ connection.setDoOutput(false)[ FD ]
Line_33 $$ if (connection != null) -->Line_36 $$ connection.setAllowUserInteraction(false)[ CD ]
Line_29 $$ URLConnection connection-->Line_36 $$ connection.setAllowUserInteraction(false)[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_36 $$ connection.setAllowUserInteraction(false)[ FD ]
Line_33 $$ if (connection != null) -->Line_37 $$ connection.connect()[ CD ]
Line_29 $$ URLConnection connection-->Line_37 $$ connection.connect()[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_37 $$ connection.connect()[ FD ]
Line_33 $$ if (connection != null) -->Line_38 $$ connection.getInputStream()[ CD ]
Line_29 $$ URLConnection connection-->Line_38 $$ connection.getInputStream()[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_38 $$ connection.getInputStream()[ FD ]
Line_33 $$ if (connection != null) -->Line_39 $$ assetPart.setDataHandler(new DataHandler(url))[ CD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_39 $$ assetPart.setDataHandler(new DataHandler(url))[ FD ]
Line_13 $$ BodyPart assetPart-->Line_39 $$ assetPart.setDataHandler(new DataHandler(url))[ FD ]
Line_33 $$ if (connection != null) -->Line_40 $$ assetPart.setHeader("Content-Location", assetURL)[ CD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_40 $$ assetPart.setHeader("Content-Location", assetURL)[ FD ]
Line_13 $$ BodyPart assetPart-->Line_40 $$ assetPart.setHeader("Content-Location", assetURL)[ FD ]
Line_22 $$ assetURL = asset.getValue()-->Line_40 $$ assetPart.setHeader("Content-Location", assetURL)[ FD ]
Line_12 $$ String assetURL = null-->Line_40 $$ assetPart.setHeader("Content-Location", assetURL)[ FD ]
Line_33 $$ if (connection != null) -->Line_41 $$ pkg.addBodyPart(assetPart)[ CD ]
Line_2 $$ protected void addAssetResources(MimeMultipart pkg, MarinerPageContext context) throws PackagingException -->Line_41 $$ pkg.addBodyPart(assetPart)[ FD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_41 $$ pkg.addBodyPart(assetPart)[ FD ]
Line_13 $$ BodyPart assetPart-->Line_41 $$ pkg.addBodyPart(assetPart)[ FD ]
Line_44 $$ if (logger.isDebugEnabled()) -->Line_44 $$ if (logger.isDebugEnabled()) [ CD ]
Line_44 $$ if (logger.isDebugEnabled()) -->Line_45 $$ logger.debug("Ignoring asset with malformed URL: " + url.toString())[ CD ]
Line_28 $$ URL url = null-->Line_45 $$ logger.debug("Ignoring asset with malformed URL: " + url.toString())[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_45 $$ logger.debug("Ignoring asset with malformed URL: " + url.toString())[ FD ]
Line_48 $$ if (logger.isDebugEnabled()) -->Line_48 $$ if (logger.isDebugEnabled()) [ CD ]
Line_48 $$ if (logger.isDebugEnabled()) -->Line_49 $$ logger.debug("Ignoring asset with URL that doesn't " + "exist: " + assetURL + " (" + url.toString() + ")")[ CD ]
Line_28 $$ URL url = null-->Line_49 $$ logger.debug("Ignoring asset with URL that doesn't " + "exist: " + assetURL + " (" + url.toString() + ")")[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_49 $$ logger.debug("Ignoring asset with URL that doesn't " + "exist: " + assetURL + " (" + url.toString() + ")")[ FD ]
Line_27 $$ if (!asset.getOnClientSide()) -->Line_53 $$ assetPart.setHeader("Content-Location", "file://" + assetURL)[ CD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_53 $$ assetPart.setHeader("Content-Location", "file://" + assetURL)[ FD ]
Line_13 $$ BodyPart assetPart-->Line_53 $$ assetPart.setHeader("Content-Location", "file://" + assetURL)[ FD ]
Line_20 $$ encodedURL = (String) iterator.next()-->Line_56 $$ throw new PackagingException(exceptionLocalizer.format("could-not-add-asset", encodedURL), e)[ FD ]
Line_10 $$ String encodedURL-->Line_56 $$ throw new PackagingException(exceptionLocalizer.format("could-not-add-asset", encodedURL), e)[ FD ]
Line_20 $$ encodedURL = (String) iterator.next()-->Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)[ FD ]
Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)-->Line_22 $$ assetURL = asset.getValue()[ FD ]
Line_22 $$ assetURL = asset.getValue()-->Line_23 $$ if (includeFullyQualifiedURLs || !isFullyQualifiedURL(assetURL)) [ FD ]
Line_22 $$ assetURL = asset.getValue()-->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_22 $$ assetURL = asset.getValue()-->Line_24 $$ if (isToBeAdded(assetURL, context)) [ FD ]
Line_21 $$ asset = (PackageResources.Asset) assetURLMap.get(encodedURL)-->Line_27 $$ if (!asset.getOnClientSide()) [ FD ]
Line_28 $$ URL url = null-->Line_32 $$ connection = url.openConnection()[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_32 $$ connection = url.openConnection()[ FD ]
Line_29 $$ URLConnection connection-->Line_33 $$ if (connection != null) [ FD ]
Line_32 $$ connection = url.openConnection()-->Line_33 $$ if (connection != null) [ FD ]
Line_29 $$ URLConnection connection-->Line_34 $$ connection.setDoInput(true)[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_34 $$ connection.setDoInput(true)[ FD ]
Line_29 $$ URLConnection connection-->Line_35 $$ connection.setDoOutput(false)[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_35 $$ connection.setDoOutput(false)[ FD ]
Line_29 $$ URLConnection connection-->Line_36 $$ connection.setAllowUserInteraction(false)[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_36 $$ connection.setAllowUserInteraction(false)[ FD ]
Line_29 $$ URLConnection connection-->Line_37 $$ connection.connect()[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_37 $$ connection.connect()[ FD ]
Line_29 $$ URLConnection connection-->Line_38 $$ connection.getInputStream()[ FD ]
Line_32 $$ connection = url.openConnection()-->Line_38 $$ connection.getInputStream()[ FD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_39 $$ assetPart.setDataHandler(new DataHandler(url))[ FD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_40 $$ assetPart.setHeader("Content-Location", assetURL)[ FD ]
Line_22 $$ assetURL = asset.getValue()-->Line_40 $$ assetPart.setHeader("Content-Location", assetURL)[ FD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_41 $$ pkg.addBodyPart(assetPart)[ FD ]
Line_28 $$ URL url = null-->Line_45 $$ logger.debug("Ignoring asset with malformed URL: " + url.toString())[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_45 $$ logger.debug("Ignoring asset with malformed URL: " + url.toString())[ FD ]
Line_28 $$ URL url = null-->Line_49 $$ logger.debug("Ignoring asset with URL that doesn't " + "exist: " + assetURL + " (" + url.toString() + ")")[ FD ]
Line_31 $$ url = context.getAbsoluteURL(new MarinerURL(assetURL))-->Line_49 $$ logger.debug("Ignoring asset with URL that doesn't " + "exist: " + assetURL + " (" + url.toString() + ")")[ FD ]
Line_25 $$ assetPart = new MimeBodyPart()-->Line_53 $$ assetPart.setHeader("Content-Location", "file://" + assetURL)[ FD ]
Line_20 $$ encodedURL = (String) iterator.next()-->Line_56 $$ throw new PackagingException(exceptionLocalizer.format("could-not-add-asset", encodedURL), e)[ FD ]
