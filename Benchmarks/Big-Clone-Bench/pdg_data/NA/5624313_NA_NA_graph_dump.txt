Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private GenomicSequence fetch(Chromosome k, int start, int end) throws IOException [ CD ]
Line_4 $$ String chr = k.toString()-->Line_4 $$ String chr = k.toString()[ CD ]
Line_2 $$ private GenomicSequence fetch(Chromosome k, int start, int end) throws IOException -->Line_4 $$ String chr = k.toString()[ FD ]
Line_5 $$ if (chr.toLowerCase().startsWith("chr"))-->Line_5 $$ if (chr.toLowerCase().startsWith("chr"))[ CD ]
Line_4 $$ String chr = k.toString()-->Line_5 $$ if (chr.toLowerCase().startsWith("chr"))[ FD ]
Line_5 $$ if (chr.toLowerCase().startsWith("chr"))-->Line_5 $$ chr = chr.substring(3)[ CD ]
Line_4 $$ String chr = k.toString()-->Line_5 $$ chr = chr.substring(3)[ FD ]
Line_5 $$ chr = chr.substring(3)-->Line_5 $$ chr = chr.substring(3)[ FD ]
Line_5 $$ chr = chr.substring(3)-->Line_5 $$ chr = chr.substring(3)[ CD ]
Line_4 $$ String chr = k.toString()-->Line_5 $$ chr = chr.substring(3)[ FD ]
Line_5 $$ chr = chr.substring(3)-->Line_5 $$ chr = chr.substring(3)[ FD ]
Line_6 $$ SAXParserFactory f = SAXParserFactory.newInstance()-->Line_6 $$ SAXParserFactory f = SAXParserFactory.newInstance()[ CD ]
Line_6 $$ SAXParserFactory f = SAXParserFactory.newInstance()-->Line_7 $$ f.setNamespaceAware(false)[ FD ]
Line_6 $$ SAXParserFactory f = SAXParserFactory.newInstance()-->Line_8 $$ f.setValidating(false)[ FD ]
Line_9 $$ SAXParser parser = f.newSAXParser()-->Line_9 $$ SAXParser parser = f.newSAXParser()[ CD ]
Line_6 $$ SAXParserFactory f = SAXParserFactory.newInstance()-->Line_9 $$ SAXParser parser = f.newSAXParser()[ FD ]
Line_4 $$ String chr = k.toString()-->Line_10 $$ URL url = new URL("http://genome.ucsc.edu/cgi-bin/das/" + genomeVersion + "/dna?segment=" + URLEncoder.encode(chr, "UTF-8") + ":" + (start + 1) + "," + (end))[ FD ]
Line_5 $$ chr = chr.substring(3)-->Line_10 $$ URL url = new URL("http://genome.ucsc.edu/cgi-bin/das/" + genomeVersion + "/dna?segment=" + URLEncoder.encode(chr, "UTF-8") + ":" + (start + 1) + "," + (end))[ FD ]
Line_12 $$ InputStream in = url.openStream()-->Line_12 $$ InputStream in = url.openStream()[ CD ]
Line_10 $$ URL url = new URL("http://genome.ucsc.edu/cgi-bin/das/" + genomeVersion + "/dna?segment=" + URLEncoder.encode(chr, "UTF-8") + ":" + (start + 1) + "," + (end))-->Line_12 $$ InputStream in = url.openStream()[ FD ]
Line_9 $$ SAXParser parser = f.newSAXParser()-->Line_13 $$ parser.parse(in, handler)[ FD ]
Line_12 $$ InputStream in = url.openStream()-->Line_13 $$ parser.parse(in, handler)[ FD ]
Line_11 $$ DASHandler handler = new DASHandler()-->Line_13 $$ parser.parse(in, handler)[ FD ]
Line_12 $$ InputStream in = url.openStream()-->Line_14 $$ in.close()[ FD ]
Line_16 $$ seq.sequence = handler.bytes.toByteArray()-->Line_16 $$ seq.sequence = handler.bytes.toByteArray()[ CD ]
Line_2 $$ private GenomicSequence fetch(Chromosome k, int start, int end) throws IOException -->Line_17 $$ seq.start = start[ FD ]
Line_2 $$ private GenomicSequence fetch(Chromosome k, int start, int end) throws IOException -->Line_18 $$ seq.end = end[ FD ]
Line_15 $$ GenomicSequence seq = new GenomicSequence()-->Line_19 $$ if (seq.sequence.length != seq.length())[ FD ]
Line_15 $$ GenomicSequence seq = new GenomicSequence()-->Line_19 $$ throw new IOException("bad bound " + seq + " " + seq.sequence.length + " " + seq.length())[ FD ]
