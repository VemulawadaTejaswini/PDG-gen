Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private File newFile(File oldFile) throws IOException [ CD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_3 $$ int counter = 0[ CD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_4 $$ File nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName())[ CD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_4 $$ File nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName())[ FD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_5 $$ while (nFile.exists()) [ CD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_2 $$ private File newFile(File oldFile) throws IOException [ CD ]
Line_5 $$ while (nFile.exists()) -->Line_5 $$ while (nFile.exists()) [ CD ]
Line_4 $$ File nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName())-->Line_5 $$ while (nFile.exists()) [ FD ]
Line_5 $$ while (nFile.exists()) -->Line_6 $$ nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + "_" + counter)[ CD ]
Line_6 $$ nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + "_" + counter)-->Line_6 $$ nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + "_" + counter)[ FD ]
Line_4 $$ File nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName())-->Line_6 $$ nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + "_" + counter)[ FD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_6 $$ nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + "_" + counter)[ FD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_8 $$ IOUtils.copyFile(oldFile, nFile)[ CD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_8 $$ IOUtils.copyFile(oldFile, nFile)[ FD ]
Line_6 $$ nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + "_" + counter)-->Line_8 $$ IOUtils.copyFile(oldFile, nFile)[ FD ]
Line_4 $$ File nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName())-->Line_8 $$ IOUtils.copyFile(oldFile, nFile)[ FD ]
Line_2 $$ private File newFile(File oldFile) throws IOException -->Line_9 $$ return nFile[ CD ]
Line_6 $$ nFile = new File(this.stateDirProvider.get() + File.separator + oldFile.getName() + "_" + counter)-->Line_5 $$ while (nFile.exists()) [ FD ]
