Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testHttpPostsWithExpectationVerification() throws Exception [ CD ]
Line_2 $$ public void testHttpPostsWithExpectationVerification() throws Exception -->Line_3 $$ int reqNo = 3[ CD ]
Line_2 $$ public void testHttpPostsWithExpectationVerification() throws Exception -->Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() [ CD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_6 $$ StringEntity outgoing = new StringEntity("No content")[ CD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_7 $$ response.setEntity(outgoing)[ CD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_7 $$ response.setEntity(outgoing)[ FD ]
Line_6 $$ StringEntity outgoing = new StringEntity("No content")-->Line_7 $$ response.setEntity(outgoing)[ FD ]
Line_2 $$ public void testHttpPostsWithExpectationVerification() throws Exception -->Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() [ CD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_12 $$ Header someheader = request.getFirstHeader("Secret")[ CD ]
Line_12 $$ Header someheader = request.getFirstHeader("Secret")-->Line_12 $$ Header someheader = request.getFirstHeader("Secret")[ CD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_12 $$ Header someheader = request.getFirstHeader("Secret")[ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_12 $$ Header someheader = request.getFirstHeader("Secret")[ FD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_13 $$ if (someheader != null) [ CD ]
Line_12 $$ Header someheader = request.getFirstHeader("Secret")-->Line_13 $$ if (someheader != null) [ FD ]
Line_13 $$ if (someheader != null) -->Line_14 $$ int secretNumber[ CD ]
Line_14 $$ int secretNumber-->Line_16 $$ secretNumber = Integer.parseInt(someheader.getValue())[ FD ]
Line_16 $$ secretNumber = Integer.parseInt(someheader.getValue())-->Line_16 $$ secretNumber = Integer.parseInt(someheader.getValue())[ FD ]
Line_16 $$ secretNumber = Integer.parseInt(someheader.getValue())-->Line_16 $$ secretNumber = Integer.parseInt(someheader.getValue())[ CD ]
Line_12 $$ Header someheader = request.getFirstHeader("Secret")-->Line_16 $$ secretNumber = Integer.parseInt(someheader.getValue())[ FD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_18 $$ response.setStatusCode(HttpStatus.SC_BAD_REQUEST)[ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_18 $$ response.setStatusCode(HttpStatus.SC_BAD_REQUEST)[ FD ]
Line_13 $$ if (someheader != null) -->Line_21 $$ if (secretNumber < 2) [ CD ]
Line_14 $$ int secretNumber-->Line_21 $$ if (secretNumber < 2) [ FD ]
Line_16 $$ secretNumber = Integer.parseInt(someheader.getValue())-->Line_21 $$ if (secretNumber < 2) [ FD ]
Line_21 $$ if (secretNumber < 2) -->Line_22 $$ response.setStatusCode(HttpStatus.SC_EXPECTATION_FAILED)[ CD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_22 $$ response.setStatusCode(HttpStatus.SC_EXPECTATION_FAILED)[ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_22 $$ response.setStatusCode(HttpStatus.SC_EXPECTATION_FAILED)[ FD ]
Line_21 $$ if (secretNumber < 2) -->Line_23 $$ ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes("Wrong secret number"))[ CD ]
Line_21 $$ if (secretNumber < 2) -->Line_24 $$ response.setEntity(outgoing)[ CD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_24 $$ response.setEntity(outgoing)[ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_24 $$ response.setEntity(outgoing)[ FD ]
Line_23 $$ ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes("Wrong secret number"))-->Line_24 $$ response.setEntity(outgoing)[ FD ]
Line_6 $$ StringEntity outgoing = new StringEntity("No content")-->Line_24 $$ response.setEntity(outgoing)[ FD ]
Line_2 $$ public void testHttpPostsWithExpectationVerification() throws Exception -->Line_29 $$ this.server.start()[ CD ]
Line_2 $$ public void testHttpPostsWithExpectationVerification() throws Exception -->Line_30 $$ this.client.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true)[ CD ]
Line_3 $$ int reqNo = 3-->Line_34 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_34 $$ for (int r = 0; r < reqNo; r++) [ CD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_34 $$ for (int r = 0; r < reqNo; r++) [ CD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_34 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_35 $$ if (!conn.isOpen()) [ CD ]
Line_35 $$ if (!conn.isOpen()) -->Line_35 $$ if (!conn.isOpen()) [ CD ]
Line_35 $$ if (!conn.isOpen()) -->Line_35 $$ if (!conn.isOpen()) [ CD ]
Line_35 $$ if (!conn.isOpen()) -->Line_36 $$ Socket socket = new Socket(host.getHostName(), host.getPort())[ CD ]
Line_35 $$ if (!conn.isOpen()) -->Line_37 $$ conn.bind(socket, this.client.getParams())[ CD ]
Line_36 $$ Socket socket = new Socket(host.getHostName(), host.getPort())-->Line_37 $$ conn.bind(socket, this.client.getParams())[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_39 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")[ CD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_40 $$ post.addHeader("Secret", Integer.toString(r))[ CD ]
Line_39 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_40 $$ post.addHeader("Secret", Integer.toString(r))[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_40 $$ post.addHeader("Secret", Integer.toString(r))[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_41 $$ ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes("No content"))[ CD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_42 $$ post.setEntity(outgoing)[ CD ]
Line_39 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_42 $$ post.setEntity(outgoing)[ FD ]
Line_41 $$ ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes("No content"))-->Line_42 $$ post.setEntity(outgoing)[ FD ]
Line_23 $$ ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes("Wrong secret number"))-->Line_42 $$ post.setEntity(outgoing)[ FD ]
Line_6 $$ StringEntity outgoing = new StringEntity("No content")-->Line_42 $$ post.setEntity(outgoing)[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)[ CD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)[ CD ]
Line_39 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_44 $$ HttpEntity entity = response.getEntity()[ CD ]
Line_44 $$ HttpEntity entity = response.getEntity()-->Line_44 $$ HttpEntity entity = response.getEntity()[ CD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_44 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_44 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_44 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_45 $$ assertNotNull(entity)[ CD ]
Line_44 $$ HttpEntity entity = response.getEntity()-->Line_45 $$ assertNotNull(entity)[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_46 $$ entity.consumeContent()[ CD ]
Line_44 $$ HttpEntity entity = response.getEntity()-->Line_46 $$ entity.consumeContent()[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_47 $$ if (r < 2) [ CD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_47 $$ if (r < 2) [ FD ]
Line_47 $$ if (r < 2) -->Line_48 $$ assertEquals(HttpStatus.SC_EXPECTATION_FAILED, response.getStatusLine().getStatusCode())[ CD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_48 $$ assertEquals(HttpStatus.SC_EXPECTATION_FAILED, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_48 $$ assertEquals(HttpStatus.SC_EXPECTATION_FAILED, response.getStatusLine().getStatusCode())[ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_48 $$ assertEquals(HttpStatus.SC_EXPECTATION_FAILED, response.getStatusLine().getStatusCode())[ FD ]
Line_47 $$ if (r < 2) -->Line_50 $$ assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode())[ CD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_50 $$ assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_50 $$ assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_50 $$ assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_52 $$ if (!this.client.keepAlive(response)) [ CD ]
Line_52 $$ if (!this.client.keepAlive(response)) -->Line_52 $$ if (!this.client.keepAlive(response)) [ CD ]
Line_52 $$ if (!this.client.keepAlive(response)) -->Line_52 $$ if (!this.client.keepAlive(response)) [ CD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_52 $$ if (!this.client.keepAlive(response)) [ FD ]
Line_10 $$ this.server.setExpectationVerifier(new HttpExpectationVerifier() -->Line_52 $$ if (!this.client.keepAlive(response)) [ FD ]
Line_4 $$ this.server.registerHandler("*", new HttpRequestHandler() -->Line_52 $$ if (!this.client.keepAlive(response)) [ FD ]
Line_52 $$ if (!this.client.keepAlive(response)) -->Line_53 $$ conn.close()[ CD ]
Line_3 $$ int reqNo = 3-->Line_57 $$ assertEquals(reqNo, cm.getRequestCount())[ FD ]
Line_3 $$ int reqNo = 3-->Line_58 $$ assertEquals(reqNo, cm.getResponseCount())[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_34 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_34 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_34 $$ for (int r = 0; r < reqNo; r++) [ FD ]
Line_36 $$ Socket socket = new Socket(host.getHostName(), host.getPort())-->Line_37 $$ conn.bind(socket, this.client.getParams())[ FD ]
Line_39 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_40 $$ post.addHeader("Secret", Integer.toString(r))[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_40 $$ post.addHeader("Secret", Integer.toString(r))[ FD ]
Line_39 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_42 $$ post.setEntity(outgoing)[ FD ]
Line_41 $$ ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes("No content"))-->Line_42 $$ post.setEntity(outgoing)[ FD ]
Line_39 $$ BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest("POST", "/")-->Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)[ FD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_44 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_44 $$ HttpEntity entity = response.getEntity()-->Line_45 $$ assertNotNull(entity)[ FD ]
Line_44 $$ HttpEntity entity = response.getEntity()-->Line_46 $$ entity.consumeContent()[ FD ]
Line_34 $$ for (int r = 0; r < reqNo; r++) -->Line_47 $$ if (r < 2) [ FD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_48 $$ assertEquals(HttpStatus.SC_EXPECTATION_FAILED, response.getStatusLine().getStatusCode())[ FD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_50 $$ assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_43 $$ HttpResponse response = this.client.execute(post, host, conn)-->Line_52 $$ if (!this.client.keepAlive(response)) [ FD ]
