Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void run(String[] args) throws Throwable [ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_3 $$ ArgParser parser = new ArgParser("Run an experiment")[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_4 $$ parser.addOptions(this, true)[ CD ]
Line_3 $$ ArgParser parser = new ArgParser("Run an experiment")-->Line_4 $$ parser.addOptions(this, true)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)[ FD ]
Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)-->Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)[ FD ]
Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)-->Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)[ CD ]
Line_3 $$ ArgParser parser = new ArgParser("Run an experiment")-->Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)[ FD ]
Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)-->Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_6 $$ if (log4jFile != null) [ CD ]
Line_6 $$ if (log4jFile != null) -->Line_7 $$ logger.info("Using another log4j configuration: %s", log4jFile)[ CD ]
Line_6 $$ if (log4jFile != null) -->Line_8 $$ PropertyConfigurator.configure(log4jFile.getAbsolutePath())[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()[ CD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_11 $$ final Enumeration<URL> e = About.class.getClassLoader().getResources(EXPERIMENT_PACKAGES)[ CD ]
Line_11 $$ final Enumeration<URL> e = About.class.getClassLoader().getResources(EXPERIMENT_PACKAGES)-->Line_11 $$ final Enumeration<URL> e = About.class.getClassLoader().getResources(EXPERIMENT_PACKAGES)[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_12 $$ while (e.hasMoreElements()) [ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_2 $$ private void run(String[] args) throws Throwable [ CD ]
Line_12 $$ while (e.hasMoreElements()) -->Line_12 $$ while (e.hasMoreElements()) [ CD ]
Line_11 $$ final Enumeration<URL> e = About.class.getClassLoader().getResources(EXPERIMENT_PACKAGES)-->Line_12 $$ while (e.hasMoreElements()) [ FD ]
Line_12 $$ while (e.hasMoreElements()) -->Line_13 $$ final URL url = e.nextElement()[ CD ]
Line_13 $$ final URL url = e.nextElement()-->Line_13 $$ final URL url = e.nextElement()[ CD ]
Line_11 $$ final Enumeration<URL> e = About.class.getClassLoader().getResources(EXPERIMENT_PACKAGES)-->Line_13 $$ final URL url = e.nextElement()[ FD ]
Line_12 $$ while (e.hasMoreElements()) -->Line_14 $$ logger.debug("Got URL %s", url)[ CD ]
Line_13 $$ final URL url = e.nextElement()-->Line_14 $$ logger.debug("Got URL %s", url)[ FD ]
Line_12 $$ while (e.hasMoreElements()) -->Line_15 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))[ CD ]
Line_13 $$ final URL url = e.nextElement()-->Line_15 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_12 $$ while (e.hasMoreElements()) -->Line_16 $$ String line[ CD ]
Line_12 $$ while (e.hasMoreElements()) -->Line_17 $$ while ((line = in.readLine()) != null) [ CD ]
Line_12 $$ while (e.hasMoreElements()) -->Line_12 $$ while (e.hasMoreElements()) [ CD ]
Line_17 $$ while ((line = in.readLine()) != null) -->Line_17 $$ while ((line = in.readLine()) != null) [ FD ]
Line_16 $$ String line-->Line_17 $$ while ((line = in.readLine()) != null) [ FD ]
Line_17 $$ while ((line = in.readLine()) != null) -->Line_17 $$ while ((line = in.readLine()) != null) [ CD ]
Line_15 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_17 $$ while ((line = in.readLine()) != null) [ FD ]
Line_17 $$ while ((line = in.readLine()) != null) -->Line_18 $$ String packageName = line[ CD ]
Line_17 $$ while ((line = in.readLine()) != null) -->Line_19 $$ getTasks(url, tasks, packageName)[ CD ]
Line_13 $$ final URL url = e.nextElement()-->Line_19 $$ getTasks(url, tasks, packageName)[ FD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_19 $$ getTasks(url, tasks, packageName)[ FD ]
Line_18 $$ String packageName = line-->Line_19 $$ getTasks(url, tasks, packageName)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_22 $$ getTasks(null, tasks, getClass().getPackage().getName())[ CD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_22 $$ getTasks(null, tasks, getClass().getPackage().getName())[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_23 $$ if (tasks.isEmpty()) [ CD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_23 $$ if (tasks.isEmpty()) [ FD ]
Line_23 $$ if (tasks.isEmpty()) -->Line_23 $$ if (tasks.isEmpty()) [ CD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_23 $$ if (tasks.isEmpty()) [ FD ]
Line_23 $$ if (tasks.isEmpty()) -->Line_24 $$ logger.fatal("I did not find any valid experiment (service bpiwowar.experiments.ExperimentListProvider)")[ CD ]
Line_23 $$ if (tasks.isEmpty()) -->Line_25 $$ System.exit(1)[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_27 $$ if (args.length == 0 || args[0].equals("list")) [ CD ]
Line_27 $$ if (args.length == 0 || args[0].equals("list")) -->Line_28 $$ System.out.format("Available experiments:%n")[ CD ]
Line_27 $$ if (args.length == 0 || args[0].equals("list")) -->Line_29 $$ TreeMapArray<PackageName, String> map = TreeMapArray.newInstance()[ CD ]
Line_29 $$ TreeMapArray<PackageName, String> map = TreeMapArray.newInstance()-->Line_29 $$ TreeMapArray<PackageName, String> map = TreeMapArray.newInstance()[ CD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) [ FD ]
Line_31 $$ TaskName task = entry.getKey()-->Line_31 $$ TaskName task = entry.getKey()[ CD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_31 $$ TaskName task = entry.getKey()[ FD ]
Line_32 $$ if (showClassNames)-->Line_32 $$ map.add(task.packageName, String.format("%s (%s)", task.name, entry.getValue().toString()))[ CD ]
Line_29 $$ TreeMapArray<PackageName, String> map = TreeMapArray.newInstance()-->Line_32 $$ map.add(task.packageName, String.format("%s (%s)", task.name, entry.getValue().toString()))[ FD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_32 $$ map.add(task.packageName, String.format("%s (%s)", task.name, entry.getValue().toString()))[ FD ]
Line_32 $$ if (showClassNames)-->Line_32 $$ map.add(task.packageName, task.name)[ CD ]
Line_29 $$ TreeMapArray<PackageName, String> map = TreeMapArray.newInstance()-->Line_32 $$ map.add(task.packageName, task.name)[ FD ]
Line_27 $$ if (args.length == 0 || args[0].equals("list")) -->Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()[ CD ]
Line_29 $$ TreeMapArray<PackageName, String> map = TreeMapArray.newInstance()-->Line_35 $$ for (Entry<PackageName, ArrayList<String>> entry : map.entrySet()) [ FD ]
Line_36 $$ final PackageName key = entry.getKey()-->Line_36 $$ final PackageName key = entry.getKey()[ CD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_36 $$ final PackageName key = entry.getKey()[ FD ]
Line_37 $$ while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop()-->Line_37 $$ while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop()[ CD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_37 $$ while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop()[ FD ]
Line_36 $$ final PackageName key = entry.getKey()-->Line_37 $$ while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop()[ FD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_37 $$ while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop()[ FD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_37 $$ while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop()[ FD ]
Line_37 $$ while (!ancestors.isEmpty() && key.commonPrefixLength(ancestors.peek()) != ancestors.peek().getLength()) ancestors.pop()-->Line_37 $$ ancestors.pop()[ CD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_37 $$ ancestors.pop()[ FD ]
Line_38 $$ int nbAncestors = ancestors.size()-->Line_38 $$ int nbAncestors = ancestors.size()[ CD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_38 $$ int nbAncestors = ancestors.size()[ FD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_39 $$ int c = nbAncestors > 0 ? ancestors.peek().getLength() : 0[ FD ]
Line_39 $$ int c = nbAncestors > 0 ? ancestors.peek().getLength() : 0-->Line_41 $$ for (int i = 0; i < c; i++) s.append("|")[ FD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_41 $$ for (int i = 0; i < c; i++) s.append("|")[ CD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_41 $$ for (int i = 0; i < c; i++) s.append("|")[ CD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_41 $$ for (int i = 0; i < c; i++) s.append("|")[ FD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_41 $$ s.append("|")[ CD ]
Line_40 $$ StringBuilder s = new StringBuilder()-->Line_41 $$ s.append("|")[ FD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ FD ]
Line_36 $$ final PackageName key = entry.getKey()-->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ CD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ CD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ FD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_43 $$ s.append("|")[ CD ]
Line_40 $$ StringBuilder s = new StringBuilder()-->Line_43 $$ s.append("|")[ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_44 $$ ancestors.add(new PackageName(key, i + 1))[ CD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_44 $$ ancestors.add(new PackageName(key, i + 1))[ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_45 $$ System.out.format("%s%n", s)[ CD ]
Line_40 $$ StringBuilder s = new StringBuilder()-->Line_45 $$ System.out.format("%s%n", s)[ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_46 $$ System.out.format("%s+ [%s]%n", s, ancestors.peek())[ CD ]
Line_40 $$ StringBuilder s = new StringBuilder()-->Line_46 $$ System.out.format("%s+ [%s]%n", s, ancestors.peek())[ FD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_46 $$ System.out.format("%s+ [%s]%n", s, ancestors.peek())[ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_47 $$ nbAncestors++[ CD ]
Line_38 $$ int nbAncestors = ancestors.size()-->Line_47 $$ nbAncestors++[ FD ]
Line_49 $$ String prefix = s.toString()-->Line_49 $$ String prefix = s.toString()[ CD ]
Line_40 $$ StringBuilder s = new StringBuilder()-->Line_49 $$ String prefix = s.toString()[ FD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_50 $$ for (String task : entry.getValue()) System.out.format("%s|- %s%n", prefix, task)[ FD ]
Line_49 $$ String prefix = s.toString()-->Line_50 $$ System.out.format("%s|- %s%n", prefix, task)[ FD ]
Line_31 $$ TaskName task = entry.getKey()-->Line_50 $$ System.out.format("%s|- %s%n", prefix, task)[ FD ]
Line_34 $$ Stack<PackageName> ancestors = new Stack<PackageName>()-->Line_51 $$ ancestors.add(key)[ FD ]
Line_36 $$ final PackageName key = entry.getKey()-->Line_51 $$ ancestors.add(key)[ FD ]
Line_27 $$ if (args.length == 0 || args[0].equals("list")) -->Line_53 $$ return[ CD ]
Line_27 $$ if (args.length == 0 || args[0].equals("list")) -->Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) [ CD ]
Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) -->Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) [ CD ]
Line_55 $$ final class Options -->Line_55 $$ final class Options [ CD ]
Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) -->Line_58 $$ Options options = new Options()[ CD ]
Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) -->Line_59 $$ ArgParser ap = new ArgParser(SEARCH_COMMAND)[ CD ]
Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) -->Line_60 $$ ap.addOptions(options)[ CD ]
Line_59 $$ ArgParser ap = new ArgParser(SEARCH_COMMAND)-->Line_60 $$ ap.addOptions(options)[ FD ]
Line_58 $$ Options options = new Options()-->Line_60 $$ ap.addOptions(options)[ FD ]
Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) -->Line_61 $$ ap.matchAllArgs(args, 1)[ CD ]
Line_59 $$ ArgParser ap = new ArgParser(SEARCH_COMMAND)-->Line_61 $$ ap.matchAllArgs(args, 1)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_61 $$ ap.matchAllArgs(args, 1)[ FD ]
Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)-->Line_61 $$ ap.matchAllArgs(args, 1)[ FD ]
Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) -->Line_62 $$ logger.info("Searching for %s", options.search)[ CD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_63 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) [ FD ]
Line_64 $$ TaskName taskname = entry.getKey()-->Line_64 $$ TaskName taskname = entry.getKey()[ CD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_64 $$ TaskName taskname = entry.getKey()[ FD ]
Line_65 $$ if (taskname.name.contains(options.search)) -->Line_65 $$ if (taskname.name.contains(options.search)) [ CD ]
Line_65 $$ if (taskname.name.contains(options.search)) -->Line_66 $$ System.err.format("[*] %s - %s%n   %s%n", taskname, entry.getValue(), entry.getValue().getAnnotation(TaskDescription.class).description())[ CD ]
Line_64 $$ TaskName taskname = entry.getKey()-->Line_66 $$ System.err.format("[*] %s - %s%n   %s%n", taskname, entry.getValue(), entry.getValue().getAnnotation(TaskDescription.class).description())[ FD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_66 $$ System.err.format("[*] %s - %s%n   %s%n", taskname, entry.getValue(), entry.getValue().getAnnotation(TaskDescription.class).description())[ FD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_66 $$ System.err.format("[*] %s - %s%n   %s%n", taskname, entry.getValue(), entry.getValue().getAnnotation(TaskDescription.class).description())[ FD ]
Line_54 $$ if (args[0].equals(SEARCH_COMMAND)) -->Line_69 $$ return[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_71 $$ String taskName = args[0][ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ FD ]
Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)-->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ FD ]
Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)-->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ FD ]
Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)-->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ FD ]
Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)-->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ FD ]
Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)-->Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()[ CD ]
Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()-->Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()[ CD ]
Line_10 $$ final TreeMap<TaskName, Class<Task>> tasks = GenericHelper.newTreeMap()-->Line_74 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) [ FD ]
Line_71 $$ String taskName = args[0]-->Line_75 $$ if (entry.getKey().name.equals(taskName))[ FD ]
Line_75 $$ if (entry.getKey().name.equals(taskName))-->Line_75 $$ if (entry.getKey().name.equals(taskName))[ CD ]
Line_71 $$ String taskName = args[0]-->Line_75 $$ if (entry.getKey().name.equals(taskName))[ FD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_75 $$ if (entry.getKey().name.equals(taskName))[ FD ]
Line_75 $$ if (entry.getKey().name.equals(taskName))-->Line_75 $$ matching.add(entry.getValue())[ CD ]
Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()-->Line_75 $$ matching.add(entry.getValue())[ FD ]
Line_30 $$ for (Entry<TaskName, Class<Task>> entry : tasks.entrySet()) -->Line_75 $$ matching.add(entry.getValue())[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_77 $$ if (matching.isEmpty()) [ CD ]
Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()-->Line_77 $$ if (matching.isEmpty()) [ FD ]
Line_77 $$ if (matching.isEmpty()) -->Line_77 $$ if (matching.isEmpty()) [ CD ]
Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()-->Line_77 $$ if (matching.isEmpty()) [ FD ]
Line_77 $$ if (matching.isEmpty()) -->Line_78 $$ System.err.println("No task match " + taskName)[ CD ]
Line_77 $$ if (matching.isEmpty()) -->Line_79 $$ System.exit(1)[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_81 $$ if (matching.size() > 1) [ CD ]
Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()-->Line_81 $$ if (matching.size() > 1) [ FD ]
Line_81 $$ if (matching.size() > 1) -->Line_82 $$ System.err.println("Too many tasks match " + taskName)[ CD ]
Line_81 $$ if (matching.size() > 1) -->Line_83 $$ System.exit(1)[ CD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_85 $$ Class<Task> taskClass = matching.get(0)[ CD ]
Line_85 $$ Class<Task> taskClass = matching.get(0)-->Line_85 $$ Class<Task> taskClass = matching.get(0)[ CD ]
Line_73 $$ ArrayList<Class<Task>> matching = GenericHelper.newArrayList()-->Line_85 $$ Class<Task> taskClass = matching.get(0)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_86 $$ logger.info("Running experiment " + taskClass.getCanonicalName())[ CD ]
Line_85 $$ Class<Task> taskClass = matching.get(0)-->Line_86 $$ logger.info("Running experiment " + taskClass.getCanonicalName())[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_87 $$ Task task = taskClass.newInstance()[ CD ]
Line_85 $$ Class<Task> taskClass = matching.get(0)-->Line_87 $$ Task task = taskClass.newInstance()[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_88 $$ int errorCode = 0[ CD ]
Line_31 $$ TaskName task = entry.getKey()-->Line_90 $$ task.init(args)[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_90 $$ task.init(args)[ FD ]
Line_5 $$ args = parser.matchAllArgs(args, 0, ArgParserOption.EXIT_ON_ERROR, ArgParserOption.STOP_FIRST_UNMATCHED)-->Line_90 $$ task.init(args)[ FD ]
Line_72 $$ args = Arrays.copyOfRange(args, 1, args.length)-->Line_90 $$ task.init(args)[ FD ]
Line_91 $$ if (xstreamOutput != null) -->Line_92 $$ OutputStream out[ CD ]
Line_91 $$ if (xstreamOutput != null) -->Line_93 $$ if (xstreamOutput.toString().equals("-"))[ CD ]
Line_93 $$ if (xstreamOutput.toString().equals("-"))-->Line_93 $$ if (xstreamOutput.toString().equals("-"))[ CD ]
Line_93 $$ if (xstreamOutput.toString().equals("-"))-->Line_93 $$ out = System.out[ CD ]
Line_92 $$ OutputStream out-->Line_93 $$ out = System.out[ FD ]
Line_93 $$ out = System.out-->Line_93 $$ out = System.out[ FD ]
Line_93 $$ if (xstreamOutput.toString().equals("-"))-->Line_93 $$ out = new FileOutputStream(xstreamOutput)[ CD ]
Line_92 $$ OutputStream out-->Line_93 $$ out = new FileOutputStream(xstreamOutput)[ FD ]
Line_93 $$ out = System.out-->Line_93 $$ out = new FileOutputStream(xstreamOutput)[ FD ]
Line_93 $$ out = new FileOutputStream(xstreamOutput)-->Line_93 $$ out = new FileOutputStream(xstreamOutput)[ FD ]
Line_91 $$ if (xstreamOutput != null) -->Line_94 $$ logger.info("Serializing the object into %s", xstreamOutput)[ CD ]
Line_91 $$ if (xstreamOutput != null) -->Line_95 $$ new XStream().toXML(task, out)[ CD ]
Line_31 $$ TaskName task = entry.getKey()-->Line_95 $$ new XStream().toXML(task, out)[ FD ]
Line_92 $$ OutputStream out-->Line_95 $$ new XStream().toXML(task, out)[ FD ]
Line_93 $$ out = System.out-->Line_95 $$ new XStream().toXML(task, out)[ FD ]
Line_93 $$ out = new FileOutputStream(xstreamOutput)-->Line_95 $$ new XStream().toXML(task, out)[ FD ]
Line_91 $$ if (xstreamOutput != null) -->Line_96 $$ out.close()[ CD ]
Line_92 $$ OutputStream out-->Line_96 $$ out.close()[ FD ]
Line_93 $$ out = System.out-->Line_96 $$ out.close()[ FD ]
Line_93 $$ out = new FileOutputStream(xstreamOutput)-->Line_96 $$ out.close()[ FD ]
Line_91 $$ if (xstreamOutput != null) -->Line_98 $$ errorCode = task.run()[ CD ]
Line_88 $$ int errorCode = 0-->Line_98 $$ errorCode = task.run()[ FD ]
Line_98 $$ errorCode = task.run()-->Line_98 $$ errorCode = task.run()[ FD ]
Line_98 $$ errorCode = task.run()-->Line_98 $$ errorCode = task.run()[ CD ]
Line_31 $$ TaskName task = entry.getKey()-->Line_98 $$ errorCode = task.run()[ FD ]
Line_102 $$ if (t instanceof InvocationTargetException && t.getCause() != null) -->Line_103 $$ t = t.getCause()[ CD ]
Line_88 $$ int errorCode = 0-->Line_106 $$ errorCode = 2[ FD ]
Line_98 $$ errorCode = task.run()-->Line_106 $$ errorCode = 2[ FD ]
Line_106 $$ errorCode = 2-->Line_106 $$ errorCode = 2[ FD ]
Line_2 $$ private void run(String[] args) throws Throwable -->Line_108 $$ System.exit(errorCode)[ CD ]
Line_88 $$ int errorCode = 0-->Line_108 $$ System.exit(errorCode)[ FD ]
Line_98 $$ errorCode = task.run()-->Line_108 $$ System.exit(errorCode)[ FD ]
Line_106 $$ errorCode = 2-->Line_108 $$ System.exit(errorCode)[ FD ]
Line_13 $$ final URL url = e.nextElement()-->Line_14 $$ logger.debug("Got URL %s", url)[ FD ]
Line_13 $$ final URL url = e.nextElement()-->Line_15 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_18 $$ String packageName = line-->Line_19 $$ getTasks(url, tasks, packageName)[ FD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_41 $$ for (int i = 0; i < c; i++) s.append("|")[ FD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_41 $$ for (int i = 0; i < c; i++) s.append("|")[ FD ]
Line_41 $$ for (int i = 0; i < c; i++) s.append("|")-->Line_41 $$ for (int i = 0; i < c; i++) s.append("|")[ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ FD ]
Line_42 $$ for (int i = c; i < key.getLength(); i++) -->Line_42 $$ for (int i = c; i < key.getLength(); i++) [ FD ]
