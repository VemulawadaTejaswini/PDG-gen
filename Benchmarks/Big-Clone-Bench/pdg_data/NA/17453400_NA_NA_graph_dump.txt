Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static List<PropertiesHolder> convertToPropertiesHolders(Collection<String> locations) [ CD ]
Line_2 $$ public static List<PropertiesHolder> convertToPropertiesHolders(Collection<String> locations) -->Line_3 $$ List<PropertiesHolder> propertiesHolders = new ArrayList<PropertiesHolder>()[ CD ]
Line_6 $$ int startIndex = path.lastIndexOf('/')-->Line_6 $$ int startIndex = path.lastIndexOf('/')[ CD ]
Line_4 $$ for (String path : locations) -->Line_6 $$ int startIndex = path.lastIndexOf('/')[ FD ]
Line_6 $$ int startIndex = path.lastIndexOf('/')-->Line_7 $$ if (startIndex < 0) [ FD ]
Line_7 $$ if (startIndex < 0) -->Line_8 $$ startIndex = 0[ CD ]
Line_6 $$ int startIndex = path.lastIndexOf('/')-->Line_8 $$ startIndex = 0[ FD ]
Line_8 $$ startIndex = 0-->Line_8 $$ startIndex = 0[ FD ]
Line_10 $$ int localeIndex = path.indexOf('_', startIndex)-->Line_10 $$ int localeIndex = path.indexOf('_', startIndex)[ CD ]
Line_4 $$ for (String path : locations) -->Line_10 $$ int localeIndex = path.indexOf('_', startIndex)[ FD ]
Line_6 $$ int startIndex = path.lastIndexOf('/')-->Line_10 $$ int localeIndex = path.indexOf('_', startIndex)[ FD ]
Line_8 $$ startIndex = 0-->Line_10 $$ int localeIndex = path.indexOf('_', startIndex)[ FD ]
Line_10 $$ int localeIndex = path.indexOf('_', startIndex)-->Line_12 $$ if (localeIndex > 0) [ FD ]
Line_12 $$ if (localeIndex > 0) -->Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))[ CD ]
Line_11 $$ String localeString = null-->Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))[ FD ]
Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))-->Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))[ FD ]
Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))-->Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))[ CD ]
Line_4 $$ for (String path : locations) -->Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))[ FD ]
Line_4 $$ for (String path : locations) -->Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))[ FD ]
Line_11 $$ String localeString = null-->Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) [ FD ]
Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))-->Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) [ FD ]
Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) -->Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) [ CD ]
Line_11 $$ String localeString = null-->Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) [ FD ]
Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))-->Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) [ FD ]
Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) -->Line_16 $$ locale = MessageProvider.DEFAULT_LOCALE[ CD ]
Line_5 $$ Locale locale = null-->Line_16 $$ locale = MessageProvider.DEFAULT_LOCALE[ FD ]
Line_16 $$ locale = MessageProvider.DEFAULT_LOCALE-->Line_16 $$ locale = MessageProvider.DEFAULT_LOCALE[ FD ]
Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) -->Line_17 $$ log.info("no locale could be guessed for properties: " + path)[ CD ]
Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) -->Line_19 $$ locale = StringUtils.parseLocaleString(localeString)[ CD ]
Line_5 $$ Locale locale = null-->Line_19 $$ locale = StringUtils.parseLocaleString(localeString)[ FD ]
Line_16 $$ locale = MessageProvider.DEFAULT_LOCALE-->Line_19 $$ locale = StringUtils.parseLocaleString(localeString)[ FD ]
Line_19 $$ locale = StringUtils.parseLocaleString(localeString)-->Line_19 $$ locale = StringUtils.parseLocaleString(localeString)[ FD ]
Line_19 $$ locale = StringUtils.parseLocaleString(localeString)-->Line_19 $$ locale = StringUtils.parseLocaleString(localeString)[ CD ]
Line_11 $$ String localeString = null-->Line_19 $$ locale = StringUtils.parseLocaleString(localeString)[ FD ]
Line_13 $$ localeString = path.substring(localeIndex + 1, path.lastIndexOf('.'))-->Line_19 $$ locale = StringUtils.parseLocaleString(localeString)[ FD ]
Line_15 $$ if (org.apache.commons.lang.StringUtils.isBlank(localeString)) -->Line_20 $$ if (locale == null) [ CD ]
Line_5 $$ Locale locale = null-->Line_20 $$ if (locale == null) [ FD ]
Line_16 $$ locale = MessageProvider.DEFAULT_LOCALE-->Line_20 $$ if (locale == null) [ FD ]
Line_19 $$ locale = StringUtils.parseLocaleString(localeString)-->Line_20 $$ if (locale == null) [ FD ]
Line_20 $$ if (locale == null) -->Line_21 $$ locale = Locale.getDefault()[ CD ]
Line_5 $$ Locale locale = null-->Line_21 $$ locale = Locale.getDefault()[ FD ]
Line_16 $$ locale = MessageProvider.DEFAULT_LOCALE-->Line_21 $$ locale = Locale.getDefault()[ FD ]
Line_19 $$ locale = StringUtils.parseLocaleString(localeString)-->Line_21 $$ locale = Locale.getDefault()[ FD ]
Line_21 $$ locale = Locale.getDefault()-->Line_21 $$ locale = Locale.getDefault()[ FD ]
Line_21 $$ locale = Locale.getDefault()-->Line_21 $$ locale = Locale.getDefault()[ CD ]
Line_20 $$ if (locale == null) -->Line_22 $$ log.info("no locale could be guessed for properties: " + path)[ CD ]
Line_4 $$ for (String path : locations) -->Line_28 $$ if (path.endsWith(".properties")) [ FD ]
Line_28 $$ if (path.endsWith(".properties")) -->Line_28 $$ if (path.endsWith(".properties")) [ CD ]
Line_4 $$ for (String path : locations) -->Line_28 $$ if (path.endsWith(".properties")) [ FD ]
Line_28 $$ if (path.endsWith(".properties")) -->Line_29 $$ props.load(url.openStream())[ CD ]
Line_26 $$ Properties props = new Properties()-->Line_29 $$ props.load(url.openStream())[ FD ]
Line_27 $$ URL url = new URL(path)-->Line_29 $$ props.load(url.openStream())[ FD ]
Line_28 $$ if (path.endsWith(".properties")) -->Line_30 $$ if (path.endsWith(".xml")) [ CD ]
Line_4 $$ for (String path : locations) -->Line_30 $$ if (path.endsWith(".xml")) [ FD ]
Line_30 $$ if (path.endsWith(".xml")) -->Line_30 $$ if (path.endsWith(".xml")) [ CD ]
Line_4 $$ for (String path : locations) -->Line_30 $$ if (path.endsWith(".xml")) [ FD ]
Line_30 $$ if (path.endsWith(".xml")) -->Line_31 $$ props.loadFromXML(url.openStream())[ CD ]
Line_26 $$ Properties props = new Properties()-->Line_31 $$ props.loadFromXML(url.openStream())[ FD ]
Line_27 $$ URL url = new URL(path)-->Line_31 $$ props.loadFromXML(url.openStream())[ FD ]
Line_30 $$ if (path.endsWith(".xml")) -->Line_32 $$ if (path.endsWith(".xls")) [ CD ]
Line_4 $$ for (String path : locations) -->Line_32 $$ if (path.endsWith(".xls")) [ FD ]
Line_32 $$ if (path.endsWith(".xls")) -->Line_32 $$ if (path.endsWith(".xls")) [ CD ]
Line_4 $$ for (String path : locations) -->Line_32 $$ if (path.endsWith(".xls")) [ FD ]
Line_32 $$ if (path.endsWith(".xls")) -->Line_34 $$ log.warn("unknown filetype for properties: " + path)[ CD ]
Line_36 $$ String bundleName = props.getProperty("webwarp-modules-bundle-id")-->Line_36 $$ String bundleName = props.getProperty("webwarp-modules-bundle-id")[ CD ]
Line_26 $$ Properties props = new Properties()-->Line_36 $$ String bundleName = props.getProperty("webwarp-modules-bundle-id")[ FD ]
Line_36 $$ String bundleName = props.getProperty("webwarp-modules-bundle-id")-->Line_37 $$ if (org.apache.commons.lang.StringUtils.isEmpty(bundleName)) [ FD ]
Line_37 $$ if (org.apache.commons.lang.StringUtils.isEmpty(bundleName)) -->Line_37 $$ if (org.apache.commons.lang.StringUtils.isEmpty(bundleName)) [ CD ]
Line_36 $$ String bundleName = props.getProperty("webwarp-modules-bundle-id")-->Line_37 $$ if (org.apache.commons.lang.StringUtils.isEmpty(bundleName)) [ FD ]
Line_37 $$ if (org.apache.commons.lang.StringUtils.isEmpty(bundleName)) -->Line_38 $$ log.warn("bundle name is empty for path: " + path + ". Provide a bundle entry 'webwarp-modules-bundle-id' to set one.")[ CD ]
Line_37 $$ if (org.apache.commons.lang.StringUtils.isEmpty(bundleName)) -->Line_39 $$ bundleName = MessageProvider.DEFAULT_BUNDLE_NAME[ CD ]
Line_36 $$ String bundleName = props.getProperty("webwarp-modules-bundle-id")-->Line_39 $$ bundleName = MessageProvider.DEFAULT_BUNDLE_NAME[ FD ]
Line_39 $$ bundleName = MessageProvider.DEFAULT_BUNDLE_NAME-->Line_39 $$ bundleName = MessageProvider.DEFAULT_BUNDLE_NAME[ FD ]
Line_3 $$ List<PropertiesHolder> propertiesHolders = new ArrayList<PropertiesHolder>()-->Line_41 $$ propertiesHolders.add(new PropertiesHolder(props, bundleName, locale))[ FD ]
Line_2 $$ public static List<PropertiesHolder> convertToPropertiesHolders(Collection<String> locations) -->Line_46 $$ return propertiesHolders[ CD ]
