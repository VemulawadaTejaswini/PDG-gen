Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public List<BadassEntry> parse() [ CD ]
Line_5 $$ URL url = new URL(mUrl)-->Line_6 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_7 $$ connection.setRequestMethod("GET")[ FD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ connection.setDoOutput(true)[ FD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_9 $$ connection.connect()[ FD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_13 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_11 $$ String line-->Line_13 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_13 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_10 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_13 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_14 $$ line = line.trim()[ CD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_14 $$ line = line.trim()[ FD ]
Line_14 $$ line = line.trim()-->Line_14 $$ line = line.trim()[ FD ]
Line_11 $$ String line-->Line_14 $$ line = line.trim()[ FD ]
Line_14 $$ line = line.trim()-->Line_14 $$ line = line.trim()[ CD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_14 $$ line = line.trim()[ FD ]
Line_14 $$ line = line.trim()-->Line_14 $$ line = line.trim()[ FD ]
Line_11 $$ String line-->Line_14 $$ line = line.trim()[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ CD ]
Line_12 $$ boolean flag1 = false-->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ FD ]
Line_14 $$ line = line.trim()-->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ FD ]
Line_11 $$ String line-->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ FD ]
Line_15 $$ if (!flag1 && line.contains(START_PARSE))-->Line_15 $$ flag1 = true[ CD ]
Line_15 $$ flag1 = true-->Line_15 $$ flag1 = true[ FD ]
Line_12 $$ boolean flag1 = false-->Line_15 $$ flag1 = true[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ CD ]
Line_15 $$ flag1 = true-->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_12 $$ boolean flag1 = false-->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_14 $$ line = line.trim()-->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_11 $$ String line-->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_17 $$ if (flag1) [ CD ]
Line_17 $$ if (flag1) -->Line_18 $$ if (line.contains(ENTRY_HINT)) [ CD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_14 $$ line = line.trim()-->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_11 $$ String line-->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_18 $$ if (line.contains(ENTRY_HINT)) -->Line_18 $$ if (line.contains(ENTRY_HINT)) [ CD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_14 $$ line = line.trim()-->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_11 $$ String line-->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_18 $$ if (line.contains(ENTRY_HINT)) -->Line_19 $$ parseBadass(line)[ CD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_19 $$ parseBadass(line)[ FD ]
Line_14 $$ line = line.trim()-->Line_19 $$ parseBadass(line)[ FD ]
Line_11 $$ String line-->Line_19 $$ parseBadass(line)[ FD ]
Line_2 $$ public List<BadassEntry> parse() -->Line_28 $$ return mBadassEntries[ CD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_14 $$ line = line.trim()[ FD ]
Line_14 $$ line = line.trim()-->Line_14 $$ line = line.trim()[ FD ]
Line_15 $$ flag1 = true-->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ FD ]
Line_14 $$ line = line.trim()-->Line_15 $$ if (!flag1 && line.contains(START_PARSE))[ FD ]
Line_15 $$ flag1 = true-->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_14 $$ line = line.trim()-->Line_16 $$ if (flag1 && line.contains(STOP_PARSE))[ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_14 $$ line = line.trim()-->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_14 $$ line = line.trim()-->Line_18 $$ if (line.contains(ENTRY_HINT)) [ FD ]
Line_13 $$ while ((line = reader.readLine()) != null) -->Line_19 $$ parseBadass(line)[ FD ]
Line_14 $$ line = line.trim()-->Line_19 $$ parseBadass(line)[ FD ]
