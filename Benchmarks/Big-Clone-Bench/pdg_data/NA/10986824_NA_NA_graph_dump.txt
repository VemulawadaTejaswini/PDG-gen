Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException [ CD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)[ CD ]
Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)-->Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)[ CD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_4 $$ URI uri = url.toURI()[ CD ]
Line_4 $$ URI uri = url.toURI()-->Line_4 $$ URI uri = url.toURI()[ CD ]
Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)-->Line_4 $$ URI uri = url.toURI()[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_5 $$ String query = IOUtils.toString(url.openStream())[ CD ]
Line_5 $$ String query = IOUtils.toString(url.openStream())-->Line_5 $$ String query = IOUtils.toString(url.openStream())[ CD ]
Line_3 $$ URL url = DocumentTableTest.class.getResource(queryFile)-->Line_5 $$ String query = IOUtils.toString(url.openStream())[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_6 $$ Configuration config = new Configuration()[ CD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_7 $$ config.setHostLanguage(Configuration.XQUERY)[ CD ]
Line_6 $$ Configuration config = new Configuration()-->Line_7 $$ config.setHostLanguage(Configuration.XQUERY)[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_8 $$ StaticQueryContext staticContext = new StaticQueryContext(config)[ CD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_9 $$ staticContext.setBaseURI(uri.toString())[ CD ]
Line_8 $$ StaticQueryContext staticContext = new StaticQueryContext(config)-->Line_9 $$ staticContext.setBaseURI(uri.toString())[ FD ]
Line_4 $$ URI uri = url.toURI()-->Line_9 $$ staticContext.setBaseURI(uri.toString())[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_10 $$ XQueryExpression exp = staticContext.compileQuery(query)[ CD ]
Line_10 $$ XQueryExpression exp = staticContext.compileQuery(query)-->Line_10 $$ XQueryExpression exp = staticContext.compileQuery(query)[ CD ]
Line_8 $$ StaticQueryContext staticContext = new StaticQueryContext(config)-->Line_10 $$ XQueryExpression exp = staticContext.compileQuery(query)[ FD ]
Line_5 $$ String query = IOUtils.toString(url.openStream())-->Line_10 $$ XQueryExpression exp = staticContext.compileQuery(query)[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_11 $$ Properties props = new Properties()[ CD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_12 $$ props.setProperty(SaxonOutputKeys.WRAP, "no")[ CD ]
Line_11 $$ Properties props = new Properties()-->Line_12 $$ props.setProperty(SaxonOutputKeys.WRAP, "no")[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_13 $$ props.setProperty(OutputKeys.INDENT, "no")[ CD ]
Line_11 $$ Properties props = new Properties()-->Line_13 $$ props.setProperty(OutputKeys.INDENT, "no")[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_14 $$ props.setProperty(OutputKeys.OMIT_XML_DECLARATION, "yes")[ CD ]
Line_11 $$ Properties props = new Properties()-->Line_14 $$ props.setProperty(OutputKeys.OMIT_XML_DECLARATION, "yes")[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_15 $$ StringWriter res_sw = new StringWriter()[ CD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_16 $$ DynamicQueryContext dynamicContext = new DynamicQueryContext(config)[ CD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_17 $$ exp.run(dynamicContext, new StreamResult(res_sw), props)[ CD ]
Line_10 $$ XQueryExpression exp = staticContext.compileQuery(query)-->Line_17 $$ exp.run(dynamicContext, new StreamResult(res_sw), props)[ FD ]
Line_16 $$ DynamicQueryContext dynamicContext = new DynamicQueryContext(config)-->Line_17 $$ exp.run(dynamicContext, new StreamResult(res_sw), props)[ FD ]
Line_11 $$ Properties props = new Properties()-->Line_17 $$ exp.run(dynamicContext, new StreamResult(res_sw), props)[ FD ]
Line_2 $$ private static String executeQueryWithSaxon(String queryFile) throws XPathException, FileNotFoundException, IOException, URISyntaxException -->Line_18 $$ return res_sw.toString()[ CD ]
Line_18 $$ return res_sw.toString()-->Line_18 $$ return res_sw.toString()[ CD ]
Line_15 $$ StringWriter res_sw = new StringWriter()-->Line_18 $$ return res_sw.toString()[ FD ]
