Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static byte[] hash(String identifier) [ CD ]
Line_2 $$ public static byte[] hash(String identifier) -->Line_3 $$ if (function.equals("SHA-1")) [ CD ]
Line_3 $$ if (function.equals("SHA-1")) -->Line_3 $$ if (function.equals("SHA-1")) [ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(function)-->Line_5 $$ MessageDigest md = MessageDigest.getInstance(function)[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(function)-->Line_6 $$ md.reset()[ FD ]
Line_7 $$ byte[] code = md.digest(identifier.getBytes())-->Line_7 $$ byte[] code = md.digest(identifier.getBytes())[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(function)-->Line_7 $$ byte[] code = md.digest(identifier.getBytes())[ FD ]
Line_2 $$ public static byte[] hash(String identifier) -->Line_7 $$ byte[] code = md.digest(identifier.getBytes())[ FD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_11 $$ for (int j = 0; j < code.length * 8; j++) [ CD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_11 $$ for (int j = 0; j < code.length * 8; j++) [ CD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_11 $$ for (int j = 0; j < code.length * 8; j++) [ FD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_12 $$ int currBit = ((code[j / 8] & (1 << (j % 8))) >> j % 8)[ CD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_13 $$ if (currBit == 1)[ CD ]
Line_12 $$ int currBit = ((code[j / 8] & (1 << (j % 8))) >> j % 8)-->Line_13 $$ if (currBit == 1)[ FD ]
Line_13 $$ if (currBit == 1)-->Line_13 $$ bitCount++[ CD ]
Line_10 $$ int bitCount = 1-->Line_13 $$ bitCount++[ FD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_14 $$ if (((j + 1) % shrink) == 0) [ CD ]
Line_14 $$ if (((j + 1) % shrink) == 0) -->Line_15 $$ int shrinkBit = (bitCount % 2 == 0) ? 0 : 1[ CD ]
Line_14 $$ if (((j + 1) % shrink) == 0) -->Line_16 $$ value[j / shrink / 8] |= (shrinkBit << ((j / shrink) % 8))[ CD ]
Line_14 $$ if (((j + 1) % shrink) == 0) -->Line_17 $$ bitCount = 1[ CD ]
Line_17 $$ bitCount = 1-->Line_17 $$ bitCount = 1[ FD ]
Line_10 $$ int bitCount = 1-->Line_17 $$ bitCount = 1[ FD ]
Line_2 $$ public static byte[] hash(String identifier) -->Line_25 $$ if (function.equals("CRC32")) [ CD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_25 $$ if (function.equals("CRC32")) [ CD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_26 $$ CRC32 crc32 = new CRC32()[ CD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_27 $$ crc32.reset()[ CD ]
Line_26 $$ CRC32 crc32 = new CRC32()-->Line_27 $$ crc32.reset()[ FD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_28 $$ crc32.update(identifier.getBytes())[ CD ]
Line_26 $$ CRC32 crc32 = new CRC32()-->Line_28 $$ crc32.update(identifier.getBytes())[ FD ]
Line_2 $$ public static byte[] hash(String identifier) -->Line_28 $$ crc32.update(identifier.getBytes())[ FD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_29 $$ long code = crc32.getValue()[ CD ]
Line_26 $$ CRC32 crc32 = new CRC32()-->Line_29 $$ long code = crc32.getValue()[ FD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_30 $$ code &= (0xffffffffffffffffL >>> (64 - KEY_LENGTH))[ CD ]
Line_7 $$ byte[] code = md.digest(identifier.getBytes())-->Line_30 $$ code &= (0xffffffffffffffffL >>> (64 - KEY_LENGTH))[ FD ]
Line_30 $$ code &= (0xffffffffffffffffL >>> (64 - KEY_LENGTH))-->Line_30 $$ code &= (0xffffffffffffffffL >>> (64 - KEY_LENGTH))[ FD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_32 $$ for (int i = 0; i < value.length; i++) [ CD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_25 $$ if (function.equals("CRC32")) [ CD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_32 $$ for (int i = 0; i < value.length; i++) [ CD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_32 $$ for (int i = 0; i < value.length; i++) [ CD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_32 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_33 $$ value[value.length - i - 1] = (byte) ((code >> 8 * i) & 0xff)[ CD ]
Line_25 $$ if (function.equals("CRC32")) -->Line_35 $$ return value[ CD ]
Line_2 $$ public static byte[] hash(String identifier) -->Line_37 $$ if (function.equals("Java")) [ CD ]
Line_37 $$ if (function.equals("Java")) -->Line_37 $$ if (function.equals("Java")) [ CD ]
Line_37 $$ if (function.equals("Java")) -->Line_38 $$ int code = identifier.hashCode()[ CD ]
Line_2 $$ public static byte[] hash(String identifier) -->Line_38 $$ int code = identifier.hashCode()[ FD ]
Line_37 $$ if (function.equals("Java")) -->Line_39 $$ code &= (0xffffffff >>> (32 - KEY_LENGTH))[ CD ]
Line_7 $$ byte[] code = md.digest(identifier.getBytes())-->Line_39 $$ code &= (0xffffffff >>> (32 - KEY_LENGTH))[ FD ]
Line_30 $$ code &= (0xffffffffffffffffL >>> (64 - KEY_LENGTH))-->Line_39 $$ code &= (0xffffffff >>> (32 - KEY_LENGTH))[ FD ]
Line_39 $$ code &= (0xffffffff >>> (32 - KEY_LENGTH))-->Line_39 $$ code &= (0xffffffff >>> (32 - KEY_LENGTH))[ FD ]
Line_37 $$ if (function.equals("Java")) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ CD ]
Line_37 $$ if (function.equals("Java")) -->Line_37 $$ if (function.equals("Java")) [ CD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ CD ]
Line_41 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ CD ]
Line_41 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < value.length; i++) -->Line_42 $$ value[value.length - i - 1] = (byte) ((code >> 8 * i) & 0xff)[ CD ]
Line_37 $$ if (function.equals("Java")) -->Line_44 $$ return value[ CD ]
Line_2 $$ public static byte[] hash(String identifier) -->Line_46 $$ return null[ CD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_11 $$ for (int j = 0; j < code.length * 8; j++) [ FD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_11 $$ for (int j = 0; j < code.length * 8; j++) [ FD ]
Line_11 $$ for (int j = 0; j < code.length * 8; j++) -->Line_11 $$ for (int j = 0; j < code.length * 8; j++) [ FD ]
Line_12 $$ int currBit = ((code[j / 8] & (1 << (j % 8))) >> j % 8)-->Line_13 $$ if (currBit == 1)[ FD ]
Line_17 $$ bitCount = 1-->Line_13 $$ bitCount++[ FD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_32 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_32 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_32 $$ for (int i = 0; i < value.length; i++) -->Line_32 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ FD ]
Line_41 $$ for (int i = 0; i < value.length; i++) -->Line_41 $$ for (int i = 0; i < value.length; i++) [ FD ]
