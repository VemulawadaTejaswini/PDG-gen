Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public synchronized void download(URL url, File file) throws IOException [ CD ]
Line_2 $$ public synchronized void download(URL url, File file) throws IOException -->Line_3 $$ reset()[ CD ]
Line_2 $$ public synchronized void download(URL url, File file) throws IOException -->Line_4 $$ MessageDigest digest[ CD ]
Line_4 $$ MessageDigest digest-->Line_6 $$ digest = MessageDigest.getInstance("MD5")[ FD ]
Line_6 $$ digest = MessageDigest.getInstance("MD5")-->Line_6 $$ digest = MessageDigest.getInstance("MD5")[ FD ]
Line_6 $$ digest = MessageDigest.getInstance("MD5")-->Line_6 $$ digest = MessageDigest.getInstance("MD5")[ CD ]
Line_2 $$ public synchronized void download(URL url, File file) throws IOException -->Line_10 $$ InputStream in = url.openConnection(proxy).getInputStream()[ CD ]
Line_10 $$ InputStream in = url.openConnection(proxy).getInputStream()-->Line_10 $$ InputStream in = url.openConnection(proxy).getInputStream()[ CD ]
Line_2 $$ public synchronized void download(URL url, File file) throws IOException -->Line_10 $$ InputStream in = url.openConnection(proxy).getInputStream()[ FD ]
Line_2 $$ public synchronized void download(URL url, File file) throws IOException -->Line_11 $$ byte[] buffer = new byte[2048][ CD ]
Line_2 $$ public synchronized void download(URL url, File file) throws IOException -->Line_12 $$ BufferedOutputStream bos = file == null ? null : new BufferedOutputStream(new FileOutputStream(file), buffer.length)[ CD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) [ FD ]
Line_14 $$ int size-->Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) [ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) [ CD ]
Line_10 $$ InputStream in = url.openConnection(proxy).getInputStream()-->Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) [ FD ]
Line_11 $$ byte[] buffer = new byte[2048]-->Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) [ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_16 $$ if (this.isCancelled())[ CD ]
Line_16 $$ if (this.isCancelled())-->Line_16 $$ if (this.isCancelled())[ CD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_17 $$ if (bos != null)[ CD ]
Line_12 $$ BufferedOutputStream bos = file == null ? null : new BufferedOutputStream(new FileOutputStream(file), buffer.length)-->Line_17 $$ if (bos != null)[ FD ]
Line_17 $$ if (bos != null)-->Line_17 $$ bos.write(buffer, 0, size)[ CD ]
Line_12 $$ BufferedOutputStream bos = file == null ? null : new BufferedOutputStream(new FileOutputStream(file), buffer.length)-->Line_17 $$ bos.write(buffer, 0, size)[ FD ]
Line_11 $$ byte[] buffer = new byte[2048]-->Line_17 $$ bos.write(buffer, 0, size)[ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_17 $$ bos.write(buffer, 0, size)[ FD ]
Line_14 $$ int size-->Line_17 $$ bos.write(buffer, 0, size)[ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_18 $$ if (size > 0) [ CD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_18 $$ if (size > 0) [ FD ]
Line_14 $$ int size-->Line_18 $$ if (size > 0) [ FD ]
Line_18 $$ if (size > 0) -->Line_19 $$ digest.update(buffer, 0, size)[ CD ]
Line_4 $$ MessageDigest digest-->Line_19 $$ digest.update(buffer, 0, size)[ FD ]
Line_6 $$ digest = MessageDigest.getInstance("MD5")-->Line_19 $$ digest.update(buffer, 0, size)[ FD ]
Line_11 $$ byte[] buffer = new byte[2048]-->Line_19 $$ digest.update(buffer, 0, size)[ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_19 $$ digest.update(buffer, 0, size)[ FD ]
Line_14 $$ int size-->Line_19 $$ digest.update(buffer, 0, size)[ FD ]
Line_18 $$ if (size > 0) -->Line_20 $$ this.length += size[ CD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_20 $$ this.length += size[ FD ]
Line_14 $$ int size-->Line_20 $$ this.length += size[ FD ]
Line_18 $$ if (size > 0) -->Line_21 $$ progress()[ CD ]
Line_12 $$ BufferedOutputStream bos = file == null ? null : new BufferedOutputStream(new FileOutputStream(file), buffer.length)-->Line_25 $$ if (bos != null) [ FD ]
Line_25 $$ if (bos != null) -->Line_26 $$ bos.flush()[ CD ]
Line_12 $$ BufferedOutputStream bos = file == null ? null : new BufferedOutputStream(new FileOutputStream(file), buffer.length)-->Line_26 $$ bos.flush()[ FD ]
Line_25 $$ if (bos != null) -->Line_27 $$ bos.close()[ CD ]
Line_12 $$ BufferedOutputStream bos = file == null ? null : new BufferedOutputStream(new FileOutputStream(file), buffer.length)-->Line_27 $$ bos.close()[ FD ]
Line_2 $$ public synchronized void download(URL url, File file) throws IOException -->Line_30 $$ if (!cancelled)[ CD ]
Line_30 $$ if (!cancelled)-->Line_30 $$ this.checkSum = CheckSum.toString(digest.digest())[ CD ]
Line_30 $$ this.checkSum = CheckSum.toString(digest.digest())-->Line_30 $$ this.checkSum = CheckSum.toString(digest.digest())[ CD ]
Line_4 $$ MessageDigest digest-->Line_30 $$ this.checkSum = CheckSum.toString(digest.digest())[ FD ]
Line_6 $$ digest = MessageDigest.getInstance("MD5")-->Line_30 $$ this.checkSum = CheckSum.toString(digest.digest())[ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_17 $$ bos.write(buffer, 0, size)[ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_18 $$ if (size > 0) [ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_19 $$ digest.update(buffer, 0, size)[ FD ]
Line_15 $$ while ((size = in.read(buffer, 0, buffer.length)) != -1) -->Line_20 $$ this.length += size[ FD ]
