Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public int run(@NotNull final List<String> args) throws Exception [ CD ]
Line_2 $$ public int run(@NotNull final List<String> args) throws Exception -->Line_3 $$ int returnCode = 0[ CD ]
Line_2 $$ public int run(@NotNull final List<String> args) throws Exception -->Line_4 $$ if (args.size() == 0) [ CD ]
Line_2 $$ public int run(@NotNull final List<String> args) throws Exception -->Line_4 $$ if (args.size() == 0) [ FD ]
Line_4 $$ if (args.size() == 0) -->Line_5 $$ log(Level.SEVERE, "noarguments")[ CD ]
Line_4 $$ if (args.size() == 0) -->Line_6 $$ returnCode++[ CD ]
Line_3 $$ int returnCode = 0-->Line_6 $$ returnCode++[ FD ]
Line_2 $$ public int run(@NotNull final List<String> args) throws Exception -->Line_8 $$ final byte[] buf = new byte[BUF_SIZE][ CD ]
Line_12 $$ final URLConnection con = url.openConnection()-->Line_12 $$ final URLConnection con = url.openConnection()[ CD ]
Line_11 $$ final URL url = new URL(arg)-->Line_12 $$ final URLConnection con = url.openConnection()[ FD ]
Line_13 $$ final InputStream in = con.getInputStream()-->Line_13 $$ final InputStream in = con.getInputStream()[ CD ]
Line_12 $$ final URLConnection con = url.openConnection()-->Line_13 $$ final InputStream in = con.getInputStream()[ FD ]
Line_15 $$ final String location = con.getHeaderField("Content-Location")-->Line_15 $$ final String location = con.getHeaderField("Content-Location")[ CD ]
Line_12 $$ final URLConnection con = url.openConnection()-->Line_15 $$ final String location = con.getHeaderField("Content-Location")[ FD ]
Line_16 $$ final String outputFilename = new File((location != null ? new URL(url, location) : url).getFile()).getName()-->Line_16 $$ final String outputFilename = new File((location != null ? new URL(url, location) : url).getFile()).getName()[ CD ]
Line_9 $$ for (final String arg : args) -->Line_17 $$ log(Level.INFO, "writing", arg, outputFilename)[ FD ]
Line_16 $$ final String outputFilename = new File((location != null ? new URL(url, location) : url).getFile()).getName()-->Line_17 $$ log(Level.INFO, "writing", arg, outputFilename)[ FD ]
Line_13 $$ final InputStream in = con.getInputStream()-->Line_20 $$ for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) [ FD ]
Line_8 $$ final byte[] buf = new byte[BUF_SIZE]-->Line_20 $$ for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) [ FD ]
Line_20 $$ for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) -->Line_20 $$ for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) [ CD ]
Line_20 $$ for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) -->Line_21 $$ out.write(buf, 0, bytesRead)[ CD ]
Line_18 $$ final OutputStream out = new FileOutputStream(outputFilename)-->Line_21 $$ out.write(buf, 0, bytesRead)[ FD ]
Line_8 $$ final byte[] buf = new byte[BUF_SIZE]-->Line_21 $$ out.write(buf, 0, bytesRead)[ FD ]
Line_20 $$ for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) -->Line_21 $$ out.write(buf, 0, bytesRead)[ FD ]
Line_18 $$ final OutputStream out = new FileOutputStream(outputFilename)-->Line_24 $$ out.close()[ FD ]
Line_13 $$ final InputStream in = con.getInputStream()-->Line_27 $$ in.close()[ FD ]
Line_9 $$ for (final String arg : args) -->Line_30 $$ log(Level.WARNING, "cannotopen", arg, e)[ FD ]
Line_3 $$ int returnCode = 0-->Line_31 $$ returnCode++[ FD ]
Line_2 $$ public int run(@NotNull final List<String> args) throws Exception -->Line_34 $$ return returnCode[ CD ]
Line_20 $$ for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) -->Line_21 $$ out.write(buf, 0, bytesRead)[ FD ]
