Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void discoverFactories() [ CD ]
Line_2 $$ protected void discoverFactories() -->Line_3 $$ DataSourceRegistry registry = this[ CD ]
Line_5 $$ ClassLoader loader = DataSetURI.class.getClassLoader()-->Line_5 $$ ClassLoader loader = DataSetURI.class.getClassLoader()[ CD ]
Line_5 $$ ClassLoader loader = DataSetURI.class.getClassLoader()-->Line_7 $$ if (loader == null) [ FD ]
Line_7 $$ if (loader == null) -->Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")[ CD ]
Line_6 $$ Enumeration<URL> urls-->Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")[ FD ]
Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")[ FD ]
Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")[ CD ]
Line_7 $$ if (loader == null) -->Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")[ CD ]
Line_6 $$ Enumeration<URL> urls-->Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")[ FD ]
Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")[ FD ]
Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")[ FD ]
Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")[ CD ]
Line_5 $$ ClassLoader loader = DataSetURI.class.getClassLoader()-->Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")[ FD ]
Line_12 $$ while (urls.hasMoreElements()) -->Line_12 $$ while (urls.hasMoreElements()) [ CD ]
Line_6 $$ Enumeration<URL> urls-->Line_12 $$ while (urls.hasMoreElements()) [ FD ]
Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_12 $$ while (urls.hasMoreElements()) [ FD ]
Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_12 $$ while (urls.hasMoreElements()) [ FD ]
Line_12 $$ while (urls.hasMoreElements()) -->Line_13 $$ URL url = urls.nextElement()[ CD ]
Line_13 $$ URL url = urls.nextElement()-->Line_13 $$ URL url = urls.nextElement()[ CD ]
Line_6 $$ Enumeration<URL> urls-->Line_13 $$ URL url = urls.nextElement()[ FD ]
Line_8 $$ urls = ClassLoader.getSystemResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_13 $$ URL url = urls.nextElement()[ FD ]
Line_10 $$ urls = loader.getResources("META-INF/org.virbo.datasource.DataSourceFactory")-->Line_13 $$ URL url = urls.nextElement()[ FD ]
Line_12 $$ while (urls.hasMoreElements()) -->Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ CD ]
Line_13 $$ URL url = urls.nextElement()-->Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_12 $$ while (urls.hasMoreElements()) -->Line_15 $$ String s = reader.readLine()[ CD ]
Line_15 $$ String s = reader.readLine()-->Line_15 $$ String s = reader.readLine()[ CD ]
Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_15 $$ String s = reader.readLine()[ FD ]
Line_12 $$ while (urls.hasMoreElements()) -->Line_16 $$ while (s != null) [ CD ]
Line_12 $$ while (urls.hasMoreElements()) -->Line_12 $$ while (urls.hasMoreElements()) [ CD ]
Line_15 $$ String s = reader.readLine()-->Line_16 $$ while (s != null) [ FD ]
Line_16 $$ while (s != null) -->Line_17 $$ if (s.trim().length() > 0) [ CD ]
Line_15 $$ String s = reader.readLine()-->Line_17 $$ if (s.trim().length() > 0) [ FD ]
Line_17 $$ if (s.trim().length() > 0) -->Line_18 $$ List<String> extensions = null[ CD ]
Line_17 $$ if (s.trim().length() > 0) -->Line_19 $$ List<String> mimeTypes = null[ CD ]
Line_17 $$ if (s.trim().length() > 0) -->Line_20 $$ String factoryClassName = s[ CD ]
Line_22 $$ Class c = Class.forName(factoryClassName)-->Line_22 $$ Class c = Class.forName(factoryClassName)[ CD ]
Line_20 $$ String factoryClassName = s-->Line_22 $$ Class c = Class.forName(factoryClassName)[ FD ]
Line_22 $$ Class c = Class.forName(factoryClassName)-->Line_23 $$ DataSourceFactory f = (DataSourceFactory) c.newInstance()[ FD ]
Line_25 $$ Method m = c.getMethod("extensions", new Class[0])-->Line_25 $$ Method m = c.getMethod("extensions", new Class[0])[ CD ]
Line_22 $$ Class c = Class.forName(factoryClassName)-->Line_25 $$ Method m = c.getMethod("extensions", new Class[0])[ FD ]
Line_18 $$ List<String> extensions = null-->Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])-->Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_25 $$ Method m = c.getMethod("extensions", new Class[0])-->Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_23 $$ DataSourceFactory f = (DataSourceFactory) c.newInstance()-->Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_22 $$ Class c = Class.forName(factoryClassName)-->Line_32 $$ Method m = c.getMethod("mimeTypes", new Class[0])[ FD ]
Line_19 $$ List<String> mimeTypes = null-->Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])-->Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_25 $$ Method m = c.getMethod("extensions", new Class[0])-->Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_23 $$ DataSourceFactory f = (DataSourceFactory) c.newInstance()-->Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_17 $$ if (s.trim().length() > 0) -->Line_45 $$ if (extensions != null) [ CD ]
Line_18 $$ List<String> extensions = null-->Line_45 $$ if (extensions != null) [ FD ]
Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])-->Line_45 $$ if (extensions != null) [ FD ]
Line_3 $$ DataSourceRegistry registry = this-->Line_47 $$ registry.registerExtension(factoryClassName, e, null)[ FD ]
Line_20 $$ String factoryClassName = s-->Line_47 $$ registry.registerExtension(factoryClassName, e, null)[ FD ]
Line_46 $$ for (String e : extensions) -->Line_47 $$ registry.registerExtension(factoryClassName, e, null)[ FD ]
Line_17 $$ if (s.trim().length() > 0) -->Line_50 $$ if (mimeTypes != null) [ CD ]
Line_19 $$ List<String> mimeTypes = null-->Line_50 $$ if (mimeTypes != null) [ FD ]
Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])-->Line_50 $$ if (mimeTypes != null) [ FD ]
Line_3 $$ DataSourceRegistry registry = this-->Line_52 $$ registry.registerMimeType(factoryClassName, m)[ FD ]
Line_20 $$ String factoryClassName = s-->Line_52 $$ registry.registerMimeType(factoryClassName, m)[ FD ]
Line_25 $$ Method m = c.getMethod("extensions", new Class[0])-->Line_52 $$ registry.registerMimeType(factoryClassName, m)[ FD ]
Line_16 $$ while (s != null) -->Line_56 $$ s = reader.readLine()[ CD ]
Line_56 $$ s = reader.readLine()-->Line_56 $$ s = reader.readLine()[ FD ]
Line_15 $$ String s = reader.readLine()-->Line_56 $$ s = reader.readLine()[ FD ]
Line_56 $$ s = reader.readLine()-->Line_56 $$ s = reader.readLine()[ CD ]
Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_56 $$ s = reader.readLine()[ FD ]
Line_12 $$ while (urls.hasMoreElements()) -->Line_58 $$ reader.close()[ CD ]
Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_58 $$ reader.close()[ FD ]
Line_46 $$ for (String e : extensions) -->Line_61 $$ e.printStackTrace()[ FD ]
Line_13 $$ URL url = urls.nextElement()-->Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_15 $$ String s = reader.readLine()[ FD ]
Line_14 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_58 $$ reader.close()[ FD ]
Line_56 $$ s = reader.readLine()-->Line_16 $$ while (s != null) [ FD ]
Line_56 $$ s = reader.readLine()-->Line_16 $$ while (s != null) [ FD ]
Line_56 $$ s = reader.readLine()-->Line_17 $$ if (s.trim().length() > 0) [ FD ]
Line_20 $$ String factoryClassName = s-->Line_22 $$ Class c = Class.forName(factoryClassName)[ FD ]
Line_22 $$ Class c = Class.forName(factoryClassName)-->Line_23 $$ DataSourceFactory f = (DataSourceFactory) c.newInstance()[ FD ]
Line_22 $$ Class c = Class.forName(factoryClassName)-->Line_25 $$ Method m = c.getMethod("extensions", new Class[0])[ FD ]
Line_25 $$ Method m = c.getMethod("extensions", new Class[0])-->Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_23 $$ DataSourceFactory f = (DataSourceFactory) c.newInstance()-->Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_22 $$ Class c = Class.forName(factoryClassName)-->Line_32 $$ Method m = c.getMethod("mimeTypes", new Class[0])[ FD ]
Line_25 $$ Method m = c.getMethod("extensions", new Class[0])-->Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_23 $$ DataSourceFactory f = (DataSourceFactory) c.newInstance()-->Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])[ FD ]
Line_18 $$ List<String> extensions = null-->Line_45 $$ if (extensions != null) [ FD ]
Line_26 $$ extensions = (List<String>) m.invoke(f, new Object[0])-->Line_45 $$ if (extensions != null) [ FD ]
Line_20 $$ String factoryClassName = s-->Line_47 $$ registry.registerExtension(factoryClassName, e, null)[ FD ]
Line_46 $$ for (String e : extensions) -->Line_47 $$ registry.registerExtension(factoryClassName, e, null)[ FD ]
Line_19 $$ List<String> mimeTypes = null-->Line_50 $$ if (mimeTypes != null) [ FD ]
Line_33 $$ mimeTypes = (List<String>) m.invoke(f, new Object[0])-->Line_50 $$ if (mimeTypes != null) [ FD ]
Line_20 $$ String factoryClassName = s-->Line_52 $$ registry.registerMimeType(factoryClassName, m)[ FD ]
Line_25 $$ Method m = c.getMethod("extensions", new Class[0])-->Line_52 $$ registry.registerMimeType(factoryClassName, m)[ FD ]
