Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public String doAction(Action commandAction) throws Exception [ CD ]
Line_2 $$ public String doAction(Action commandAction) throws Exception -->Line_3 $$ Map<String, String> args = commandAction.getArgs()[ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_3 $$ Map<String, String> args = commandAction.getArgs()[ CD ]
Line_2 $$ public String doAction(Action commandAction) throws Exception -->Line_3 $$ Map<String, String> args = commandAction.getArgs()[ FD ]
Line_2 $$ public String doAction(Action commandAction) throws Exception -->Line_4 $$ EnumCommandActionType actionType = commandAction.getType()[ CD ]
Line_4 $$ EnumCommandActionType actionType = commandAction.getType()-->Line_4 $$ EnumCommandActionType actionType = commandAction.getType()[ CD ]
Line_2 $$ public String doAction(Action commandAction) throws Exception -->Line_4 $$ EnumCommandActionType actionType = commandAction.getType()[ FD ]
Line_2 $$ public String doAction(Action commandAction) throws Exception -->Line_5 $$ String actionResult = ""[ CD ]
Line_8 $$ String method = getMethod()-->Line_8 $$ String method = getMethod()[ CD ]
Line_9 $$ String contentType = getContentType()-->Line_9 $$ String contentType = getContentType()[ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_13 $$ if (args.containsKey("method")) [ FD ]
Line_13 $$ if (args.containsKey("method")) -->Line_13 $$ if (args.containsKey("method")) [ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_13 $$ if (args.containsKey("method")) [ FD ]
Line_13 $$ if (args.containsKey("method")) -->Line_14 $$ method = args.get("method").toUpperCase()[ CD ]
Line_8 $$ String method = getMethod()-->Line_14 $$ method = args.get("method").toUpperCase()[ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_14 $$ method = args.get("method").toUpperCase()[ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_14 $$ method = args.get("method").toUpperCase()[ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_14 $$ method = args.get("method").toUpperCase()[ FD ]
Line_13 $$ if (args.containsKey("method")) -->Line_15 $$ if (args.containsKey("contenttype")) [ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_15 $$ if (args.containsKey("contenttype")) [ FD ]
Line_15 $$ if (args.containsKey("contenttype")) -->Line_15 $$ if (args.containsKey("contenttype")) [ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_15 $$ if (args.containsKey("contenttype")) [ FD ]
Line_15 $$ if (args.containsKey("contenttype")) -->Line_16 $$ contentType = args.get("contenttype").toLowerCase()[ CD ]
Line_9 $$ String contentType = getContentType()-->Line_16 $$ contentType = args.get("contenttype").toLowerCase()[ FD ]
Line_16 $$ contentType = args.get("contenttype").toLowerCase()-->Line_16 $$ contentType = args.get("contenttype").toLowerCase()[ FD ]
Line_16 $$ contentType = args.get("contenttype").toLowerCase()-->Line_16 $$ contentType = args.get("contenttype").toLowerCase()[ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_16 $$ contentType = args.get("contenttype").toLowerCase()[ FD ]
Line_15 $$ if (args.containsKey("contenttype")) -->Line_17 $$ if (args.containsKey("postdata")) [ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_17 $$ if (args.containsKey("postdata")) [ FD ]
Line_17 $$ if (args.containsKey("postdata")) -->Line_17 $$ if (args.containsKey("postdata")) [ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_17 $$ if (args.containsKey("postdata")) [ FD ]
Line_17 $$ if (args.containsKey("postdata")) -->Line_18 $$ contentType = args.get("postdata").toLowerCase()[ CD ]
Line_9 $$ String contentType = getContentType()-->Line_18 $$ contentType = args.get("postdata").toLowerCase()[ FD ]
Line_16 $$ contentType = args.get("contenttype").toLowerCase()-->Line_18 $$ contentType = args.get("postdata").toLowerCase()[ FD ]
Line_18 $$ contentType = args.get("postdata").toLowerCase()-->Line_18 $$ contentType = args.get("postdata").toLowerCase()[ FD ]
Line_18 $$ contentType = args.get("postdata").toLowerCase()-->Line_18 $$ contentType = args.get("postdata").toLowerCase()[ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_18 $$ contentType = args.get("postdata").toLowerCase()[ FD ]
Line_20 $$ if (!allowedHttpMethods.contains(method.toUpperCase())) -->Line_20 $$ if (!allowedHttpMethods.contains(method.toUpperCase())) [ CD ]
Line_20 $$ if (!allowedHttpMethods.contains(method.toUpperCase())) -->Line_20 $$ if (!allowedHttpMethods.contains(method.toUpperCase())) [ CD ]
Line_8 $$ String method = getMethod()-->Line_20 $$ if (!allowedHttpMethods.contains(method.toUpperCase())) [ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_20 $$ if (!allowedHttpMethods.contains(method.toUpperCase())) [ FD ]
Line_23 $$ String commandStr = Pattern.compile("^/").matcher(args.get("command")).replaceAll("")-->Line_23 $$ String commandStr = Pattern.compile("^/").matcher(args.get("command")).replaceAll("")[ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_23 $$ String commandStr = Pattern.compile("^/").matcher(args.get("command")).replaceAll("")[ FD ]
Line_8 $$ String method = getMethod()-->Line_24 $$ if ("GET".equals(method)) [ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_24 $$ if ("GET".equals(method)) [ FD ]
Line_24 $$ if ("GET".equals(method)) -->Line_24 $$ if ("GET".equals(method)) [ CD ]
Line_8 $$ String method = getMethod()-->Line_24 $$ if ("GET".equals(method)) [ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_24 $$ if ("GET".equals(method)) [ FD ]
Line_24 $$ if ("GET".equals(method)) -->Line_25 $$ pathUrl = commandStr[ CD ]
Line_11 $$ String pathUrl = ""-->Line_25 $$ pathUrl = commandStr[ FD ]
Line_25 $$ pathUrl = commandStr-->Line_25 $$ pathUrl = commandStr[ FD ]
Line_23 $$ String commandStr = Pattern.compile("^/").matcher(args.get("command")).replaceAll("")-->Line_25 $$ pathUrl = commandStr[ FD ]
Line_24 $$ if ("GET".equals(method)) -->Line_27 $$ String[] argStr = args.get("command").split("\\?")[ CD ]
Line_27 $$ String[] argStr = args.get("command").split("\\?")-->Line_27 $$ String[] argStr = args.get("command").split("\\?")[ CD ]
Line_3 $$ Map<String, String> args = commandAction.getArgs()-->Line_27 $$ String[] argStr = args.get("command").split("\\?")[ FD ]
Line_24 $$ if ("GET".equals(method)) -->Line_28 $$ pathUrl = argStr[0][ CD ]
Line_11 $$ String pathUrl = ""-->Line_28 $$ pathUrl = argStr[0][ FD ]
Line_25 $$ pathUrl = commandStr-->Line_28 $$ pathUrl = argStr[0][ FD ]
Line_28 $$ pathUrl = argStr[0]-->Line_28 $$ pathUrl = argStr[0][ FD ]
Line_24 $$ if ("GET".equals(method)) -->Line_29 $$ data = argStr[1][ CD ]
Line_12 $$ String data = ""-->Line_29 $$ data = argStr[1][ FD ]
Line_29 $$ data = argStr[1]-->Line_29 $$ data = argStr[1][ FD ]
Line_10 $$ String url = "http://" + getHost() + ":" + getPort() + "/"-->Line_31 $$ url += pathUrl[ FD ]
Line_31 $$ url += pathUrl-->Line_31 $$ url += pathUrl[ FD ]
Line_11 $$ String pathUrl = ""-->Line_31 $$ url += pathUrl[ FD ]
Line_25 $$ pathUrl = commandStr-->Line_31 $$ url += pathUrl[ FD ]
Line_28 $$ pathUrl = argStr[0]-->Line_31 $$ url += pathUrl[ FD ]
Line_32 $$ URL urlObj = new URL(url)-->Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()[ FD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_34 $$ conn.setUseCaches(false)[ FD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_35 $$ conn.setRequestMethod(method)[ FD ]
Line_8 $$ String method = getMethod()-->Line_35 $$ conn.setRequestMethod(method)[ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_35 $$ conn.setRequestMethod(method)[ FD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_36 $$ conn.setConnectTimeout(getConnectTimeout())[ FD ]
Line_8 $$ String method = getMethod()-->Line_37 $$ if ("POST".equals(method)) [ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_37 $$ if ("POST".equals(method)) [ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_37 $$ if ("POST".equals(method)) [ CD ]
Line_8 $$ String method = getMethod()-->Line_37 $$ if ("POST".equals(method)) [ FD ]
Line_14 $$ method = args.get("method").toUpperCase()-->Line_37 $$ if ("POST".equals(method)) [ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_38 $$ conn.setDoOutput(true)[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_38 $$ conn.setDoOutput(true)[ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_39 $$ conn.setDoInput(true)[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_39 $$ conn.setDoInput(true)[ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_40 $$ conn.setRequestProperty("Content-Type", contentType)[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_40 $$ conn.setRequestProperty("Content-Type", contentType)[ FD ]
Line_9 $$ String contentType = getContentType()-->Line_40 $$ conn.setRequestProperty("Content-Type", contentType)[ FD ]
Line_16 $$ contentType = args.get("contenttype").toLowerCase()-->Line_40 $$ conn.setRequestProperty("Content-Type", contentType)[ FD ]
Line_18 $$ contentType = args.get("postdata").toLowerCase()-->Line_40 $$ conn.setRequestProperty("Content-Type", contentType)[ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_41 $$ conn.setRequestProperty("Content-Length", Integer.toString(data.length()))[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_41 $$ conn.setRequestProperty("Content-Length", Integer.toString(data.length()))[ FD ]
Line_12 $$ String data = ""-->Line_41 $$ conn.setRequestProperty("Content-Length", Integer.toString(data.length()))[ FD ]
Line_29 $$ data = argStr[1]-->Line_41 $$ conn.setRequestProperty("Content-Length", Integer.toString(data.length()))[ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_42 $$ OutputStream outputStream = conn.getOutputStream()[ CD ]
Line_42 $$ OutputStream outputStream = conn.getOutputStream()-->Line_42 $$ OutputStream outputStream = conn.getOutputStream()[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_42 $$ OutputStream outputStream = conn.getOutputStream()[ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_43 $$ outputStream.write(data.getBytes())[ CD ]
Line_42 $$ OutputStream outputStream = conn.getOutputStream()-->Line_43 $$ outputStream.write(data.getBytes())[ FD ]
Line_12 $$ String data = ""-->Line_43 $$ outputStream.write(data.getBytes())[ FD ]
Line_29 $$ data = argStr[1]-->Line_43 $$ outputStream.write(data.getBytes())[ FD ]
Line_37 $$ if ("POST".equals(method)) -->Line_44 $$ outputStream.flush()[ CD ]
Line_42 $$ OutputStream outputStream = conn.getOutputStream()-->Line_44 $$ outputStream.flush()[ FD ]
Line_46 $$ InputStream inputStream = conn.getInputStream()-->Line_46 $$ InputStream inputStream = conn.getInputStream()[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_46 $$ InputStream inputStream = conn.getInputStream()[ FD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_47 $$ if (conn.getResponseCode() != 200) [ FD ]
Line_47 $$ if (conn.getResponseCode() != 200) -->Line_48 $$ Integer responseCode = conn.getResponseCode()[ CD ]
Line_48 $$ Integer responseCode = conn.getResponseCode()-->Line_48 $$ Integer responseCode = conn.getResponseCode()[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_48 $$ Integer responseCode = conn.getResponseCode()[ FD ]
Line_47 $$ if (conn.getResponseCode() != 200) -->Line_49 $$ conn.disconnect()[ CD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_49 $$ conn.disconnect()[ FD ]
Line_48 $$ Integer responseCode = conn.getResponseCode()-->Line_50 $$ throw new GatewayException("Invalid response from server, expecting status code 200 but received " + responseCode.toString())[ FD ]
Line_52 $$ Calendar endTime = Calendar.getInstance()-->Line_52 $$ Calendar endTime = Calendar.getInstance()[ CD ]
Line_52 $$ Calendar endTime = Calendar.getInstance()-->Line_53 $$ endTime.add(Calendar.MILLISECOND, getReadTimeout())[ FD ]
Line_52 $$ Calendar endTime = Calendar.getInstance()-->Line_54 $$ while (Calendar.getInstance().before(endTime) && inputStream.available() == 0) [ FD ]
Line_46 $$ InputStream inputStream = conn.getInputStream()-->Line_54 $$ while (Calendar.getInstance().before(endTime) && inputStream.available() == 0) [ FD ]
Line_46 $$ InputStream inputStream = conn.getInputStream()-->Line_60 $$ while (inputStream.available() > 0) [ FD ]
Line_60 $$ while (inputStream.available() > 0) -->Line_61 $$ actionResult += (char) inputStream.read()[ CD ]
Line_61 $$ actionResult += (char) inputStream.read()-->Line_61 $$ actionResult += (char) inputStream.read()[ FD ]
Line_5 $$ String actionResult = ""-->Line_61 $$ actionResult += (char) inputStream.read()[ FD ]
Line_46 $$ InputStream inputStream = conn.getInputStream()-->Line_61 $$ actionResult += (char) inputStream.read()[ FD ]
Line_61 $$ actionResult += (char) inputStream.read()-->Line_63 $$ if (actionResult.length() > 0) [ FD ]
Line_5 $$ String actionResult = ""-->Line_63 $$ if (actionResult.length() > 0) [ FD ]
Line_63 $$ if (actionResult.length() > 0) -->Line_65 $$ actionResult = ""[ CD ]
Line_61 $$ actionResult += (char) inputStream.read()-->Line_65 $$ actionResult = ""[ FD ]
Line_5 $$ String actionResult = ""-->Line_65 $$ actionResult = ""[ FD ]
Line_65 $$ actionResult = ""-->Line_65 $$ actionResult = ""[ FD ]
Line_33 $$ HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection()-->Line_68 $$ conn.disconnect()[ FD ]
Line_61 $$ actionResult += (char) inputStream.read()-->Line_71 $$ actionResult = responseBuffer[ FD ]
Line_5 $$ String actionResult = ""-->Line_71 $$ actionResult = responseBuffer[ FD ]
Line_65 $$ actionResult = ""-->Line_71 $$ actionResult = responseBuffer[ FD ]
Line_71 $$ actionResult = responseBuffer-->Line_71 $$ actionResult = responseBuffer[ FD ]
Line_2 $$ public String doAction(Action commandAction) throws Exception -->Line_75 $$ return actionResult[ CD ]
