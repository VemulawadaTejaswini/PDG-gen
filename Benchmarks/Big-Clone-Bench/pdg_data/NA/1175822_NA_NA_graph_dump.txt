Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String novoMetodoDeCriptografarParaMD5QueNaoFoiUtilizadoAinda(String input) [ CD ]
Line_2 $$ public static String novoMetodoDeCriptografarParaMD5QueNaoFoiUtilizadoAinda(String input) -->Line_3 $$ if (input == null) [ CD ]
Line_2 $$ public static String novoMetodoDeCriptografarParaMD5QueNaoFoiUtilizadoAinda(String input) -->Line_3 $$ if (input == null) [ FD ]
Line_3 $$ if (input == null) -->Line_4 $$ return null[ CD ]
Line_7 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_7 $$ MessageDigest digest = MessageDigest.getInstance("MD5")[ CD ]
Line_7 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_8 $$ digest.update(input.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String novoMetodoDeCriptografarParaMD5QueNaoFoiUtilizadoAinda(String input) -->Line_8 $$ digest.update(input.getBytes("UTF-8"))[ FD ]
Line_7 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_9 $$ BigInteger hash = new BigInteger(1, digest.digest())[ FD ]
Line_10 $$ String output = hash.toString(16)-->Line_10 $$ String output = hash.toString(16)[ CD ]
Line_9 $$ BigInteger hash = new BigInteger(1, digest.digest())-->Line_10 $$ String output = hash.toString(16)[ FD ]
Line_10 $$ String output = hash.toString(16)-->Line_11 $$ if (output.length() < 32) [ FD ]
Line_11 $$ if (output.length() < 32) -->Line_12 $$ int sizeDiff = 32 - output.length()[ CD ]
Line_10 $$ String output = hash.toString(16)-->Line_12 $$ int sizeDiff = 32 - output.length()[ FD ]
Line_11 $$ if (output.length() < 32) -->Line_13 $$ do [ CD ]
Line_11 $$ if (output.length() < 32) -->Line_11 $$ if (output.length() < 32) [ CD ]
Line_13 $$ do -->Line_14 $$ output = "0" + output[ CD ]
Line_14 $$ output = "0" + output-->Line_14 $$ output = "0" + output[ FD ]
Line_10 $$ String output = hash.toString(16)-->Line_14 $$ output = "0" + output[ FD ]
Line_14 $$ output = "0" + output-->Line_14 $$ output = "0" + output[ FD ]
Line_10 $$ String output = hash.toString(16)-->Line_14 $$ output = "0" + output[ FD ]
Line_12 $$ int sizeDiff = 32 - output.length()-->Line_13 $$ do [ FD ]
Line_14 $$ output = "0" + output-->Line_14 $$ output = "0" + output[ FD ]
