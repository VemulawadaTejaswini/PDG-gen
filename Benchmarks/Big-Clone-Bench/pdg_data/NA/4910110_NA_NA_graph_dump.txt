Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void test() throws Exception [ CD ]
Line_2 $$ public void test() throws Exception -->Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")[ CD ]
Line_2 $$ public void test() throws Exception -->Line_4 $$ MockResponseStateObserver observer = new MockResponseStateObserver()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_5 $$ r.addStateObserver(observer)[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_5 $$ r.addStateObserver(observer)[ FD ]
Line_4 $$ MockResponseStateObserver observer = new MockResponseStateObserver()-->Line_5 $$ r.addStateObserver(observer)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_6 $$ assertEquals("UTF-8", r.getCharacterEncoding())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_6 $$ assertEquals("UTF-8", r.getCharacterEncoding())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_7 $$ assertEquals(-1L, r.getLastModified())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_7 $$ assertEquals(-1L, r.getLastModified())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_8 $$ assertEquals(0, r.getTranslationCount())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_8 $$ assertEquals(0, r.getTranslationCount())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_9 $$ r.setTranslationCount(10)[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_9 $$ r.setTranslationCount(10)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_10 $$ assertEquals(10, r.getTranslationCount())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_10 $$ assertEquals(10, r.getTranslationCount())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_11 $$ assertNotNull(r.getHeadersStorage())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_11 $$ assertNotNull(r.getHeadersStorage())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_12 $$ assertNull(r.getHeaders())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_12 $$ assertNull(r.getHeaders())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_13 $$ r.setLastModified(100000L)[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_13 $$ r.setLastModified(100000L)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_14 $$ assertEquals(100000L, r.getLastModified())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_14 $$ assertEquals(100000L, r.getLastModified())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_15 $$ assertFalse(r.getHeaders().isEmpty())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_15 $$ assertFalse(r.getHeaders().isEmpty())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_17 $$ Set<ResponseHeader> set = new TreeSet<ResponseHeader>()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_18 $$ set.add(new ResponseHeaderImpl("Last-Modified", new String[] [ CD ]
Line_17 $$ Set<ResponseHeader> set = new TreeSet<ResponseHeader>()-->Line_18 $$ set.add(new ResponseHeaderImpl("Last-Modified", new String[] [ FD ]
Line_2 $$ public void test() throws Exception -->Line_19 $$ r.addHeaders(set)[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_19 $$ r.addHeaders(set)[ FD ]
Line_17 $$ Set<ResponseHeader> set = new TreeSet<ResponseHeader>()-->Line_19 $$ r.addHeaders(set)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_21 $$ assertEquals(1, r.getHeaders().size())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_21 $$ assertEquals(1, r.getHeaders().size())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_22 $$ assertEquals(200000L, r.getLastModified())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_22 $$ assertEquals(200000L, r.getLastModified())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_25 $$ set.add(new ResponseHeaderImpl("Last-Modified", new String[] [ CD ]
Line_17 $$ Set<ResponseHeader> set = new TreeSet<ResponseHeader>()-->Line_25 $$ set.add(new ResponseHeaderImpl("Last-Modified", new String[] [ FD ]
Line_2 $$ public void test() throws Exception -->Line_26 $$ set.add(new ResponseHeaderImpl("User-Agent", new String[] [ CD ]
Line_17 $$ Set<ResponseHeader> set = new TreeSet<ResponseHeader>()-->Line_26 $$ set.add(new ResponseHeaderImpl("User-Agent", new String[] [ FD ]
Line_2 $$ public void test() throws Exception -->Line_27 $$ r.addHeaders(set)[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_27 $$ r.addHeaders(set)[ FD ]
Line_17 $$ Set<ResponseHeader> set = new TreeSet<ResponseHeader>()-->Line_27 $$ r.addHeaders(set)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_29 $$ assertEquals(2, r.getHeaders().size())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_29 $$ assertEquals(2, r.getHeaders().size())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_30 $$ int ii = 0[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_31 $$ for (ResponseHeader h : r.getHeaders()) [ FD ]
Line_30 $$ int ii = 0-->Line_32 $$ ii++[ FD ]
Line_30 $$ int ii = 0-->Line_33 $$ if (ii == 1) [ FD ]
Line_33 $$ if (ii == 1) -->Line_34 $$ assertEquals("Last-Modified", h.getName())[ CD ]
Line_31 $$ for (ResponseHeader h : r.getHeaders()) -->Line_34 $$ assertEquals("Last-Modified", h.getName())[ FD ]
Line_33 $$ if (ii == 1) -->Line_35 $$ assertEquals(Arrays.toString(new String[] [ CD ]
Line_31 $$ for (ResponseHeader h : r.getHeaders()) -->Line_35 $$ assertEquals(Arrays.toString(new String[] [ FD ]
Line_33 $$ if (ii == 1) -->Line_36 $$ if (ii == 2) [ CD ]
Line_30 $$ int ii = 0-->Line_36 $$ if (ii == 2) [ FD ]
Line_36 $$ if (ii == 2) -->Line_37 $$ assertEquals("User-Agent", h.getName())[ CD ]
Line_31 $$ for (ResponseHeader h : r.getHeaders()) -->Line_37 $$ assertEquals("User-Agent", h.getName())[ FD ]
Line_36 $$ if (ii == 2) -->Line_38 $$ assertEquals(Arrays.toString(new String[] [ CD ]
Line_31 $$ for (ResponseHeader h : r.getHeaders()) -->Line_38 $$ assertEquals(Arrays.toString(new String[] [ FD ]
Line_2 $$ public void test() throws Exception -->Line_41 $$ r.addText("This is an example")[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_41 $$ r.addText("This is an example")[ FD ]
Line_2 $$ public void test() throws Exception -->Line_42 $$ r.addText(" and another one.")[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_42 $$ r.addText(" and another one.")[ FD ]
Line_2 $$ public void test() throws Exception -->Line_43 $$ assertEquals("This is an example and another one.", mockStorage.getText())[ CD ]
Line_2 $$ public void test() throws Exception -->Line_44 $$ InputStream input = r.getInputStream()[ CD ]
Line_44 $$ InputStream input = r.getInputStream()-->Line_44 $$ InputStream input = r.getInputStream()[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_44 $$ InputStream input = r.getInputStream()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_45 $$ StringWriter writer = new StringWriter()[ CD ]
Line_44 $$ InputStream input = r.getInputStream()-->Line_47 $$ IOUtils.copy(input, writer, "UTF-8")[ FD ]
Line_45 $$ StringWriter writer = new StringWriter()-->Line_47 $$ IOUtils.copy(input, writer, "UTF-8")[ FD ]
Line_44 $$ InputStream input = r.getInputStream()-->Line_49 $$ input.close()[ FD ]
Line_45 $$ StringWriter writer = new StringWriter()-->Line_50 $$ writer.close()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_52 $$ assertEquals("This is an example and another one.", writer.toString())[ CD ]
Line_45 $$ StringWriter writer = new StringWriter()-->Line_52 $$ assertEquals("This is an example and another one.", writer.toString())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_54 $$ OutputStream output = r.getOutputStream()[ CD ]
Line_54 $$ OutputStream output = r.getOutputStream()-->Line_54 $$ OutputStream output = r.getOutputStream()[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_54 $$ OutputStream output = r.getOutputStream()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_55 $$ output.write(" and another line".getBytes("UTF-8"))[ CD ]
Line_54 $$ OutputStream output = r.getOutputStream()-->Line_55 $$ output.write(" and another line".getBytes("UTF-8"))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_56 $$ assertEquals("This is an example and another one. and another line", r.getText())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_56 $$ assertEquals("This is an example and another one. and another line", r.getText())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_59 $$ Writer output = r.getWriter()[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_59 $$ Writer output = r.getWriter()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_60 $$ output.write(" and write some more")[ CD ]
Line_54 $$ OutputStream output = r.getOutputStream()-->Line_60 $$ output.write(" and write some more")[ FD ]
Line_2 $$ public void test() throws Exception -->Line_61 $$ assertEquals("This is an example and another one. and another line and write some more", r.getText())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_61 $$ assertEquals("This is an example and another one. and another line and write some more", r.getText())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_63 $$ assertFalse(r.hasEnded())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_63 $$ assertFalse(r.hasEnded())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_64 $$ assertNull(r.getEndState())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_64 $$ assertNull(r.getEndState())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_65 $$ assertEquals(0L, observer.getHits())[ CD ]
Line_4 $$ MockResponseStateObserver observer = new MockResponseStateObserver()-->Line_65 $$ assertEquals(0L, observer.getHits())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_66 $$ r.setEndState(ResponseStateOk.getInstance())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_66 $$ r.setEndState(ResponseStateOk.getInstance())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_67 $$ assertEquals(ResponseStateOk.getInstance(), r.getEndState())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_67 $$ assertEquals(ResponseStateOk.getInstance(), r.getEndState())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_68 $$ assertTrue(r.hasEnded())[ CD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_68 $$ assertTrue(r.hasEnded())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_69 $$ assertEquals(1L, observer.getHits())[ CD ]
Line_4 $$ MockResponseStateObserver observer = new MockResponseStateObserver()-->Line_69 $$ assertEquals(1L, observer.getHits())[ FD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_71 $$ r.getOutputStream()[ FD ]
Line_3 $$ TranslationResponseStorage r = new TranslationResponseStorage(mockStorage, "UTF-8")-->Line_76 $$ r.getWriter()[ FD ]
