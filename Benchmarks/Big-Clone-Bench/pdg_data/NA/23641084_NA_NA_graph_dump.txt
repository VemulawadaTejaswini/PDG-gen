Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ EventType type = event.getEventType()[ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_3 $$ EventType type = event.getEventType()[ CD ]
Line_2 $$ public void run() -->Line_4 $$ IBaseObject field = event.getField()[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_4 $$ IBaseObject field = event.getField()[ CD ]
Line_2 $$ public void run() -->Line_5 $$ log.info("select----->" + field.getAttribute(IDatafield.URL))[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_5 $$ log.info("select----->" + field.getAttribute(IDatafield.URL))[ FD ]
Line_7 $$ IParent parent = field.getParent()-->Line_7 $$ IParent parent = field.getParent()[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_7 $$ IParent parent = field.getParent()[ FD ]
Line_8 $$ String name = field.getName()-->Line_8 $$ String name = field.getName()[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_8 $$ String name = field.getName()[ FD ]
Line_3 $$ EventType type = event.getEventType()-->Line_9 $$ if (type == EventType.ON_BTN_CLICK) [ FD ]
Line_9 $$ if (type == EventType.ON_BTN_CLICK) -->Line_10 $$ invoke(parent, "eventRule_" + name)[ CD ]
Line_7 $$ IParent parent = field.getParent()-->Line_10 $$ invoke(parent, "eventRule_" + name)[ FD ]
Line_9 $$ if (type == EventType.ON_BTN_CLICK) -->Line_11 $$ Object value = event.get(Event.ARG_VALUE)[ CD ]
Line_11 $$ Object value = event.get(Event.ARG_VALUE)-->Line_11 $$ Object value = event.get(Event.ARG_VALUE)[ CD ]
Line_9 $$ if (type == EventType.ON_BTN_CLICK) -->Line_12 $$ if (value != null && value instanceof String[]) [ CD ]
Line_12 $$ if (value != null && value instanceof String[]) -->Line_13 $$ String[] args = (String[]) value[ CD ]
Line_9 $$ if (type == EventType.ON_BTN_CLICK) -->Line_16 $$ if (type == EventType.ON_BEFORE_DOWNLOAD)[ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_16 $$ if (type == EventType.ON_BEFORE_DOWNLOAD)[ FD ]
Line_16 $$ if (type == EventType.ON_BEFORE_DOWNLOAD)-->Line_16 $$ invoke(parent, "eventRule_" + name)[ CD ]
Line_7 $$ IParent parent = field.getParent()-->Line_16 $$ invoke(parent, "eventRule_" + name)[ FD ]
Line_16 $$ if (type == EventType.ON_BEFORE_DOWNLOAD)-->Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) [ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) [ FD ]
Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) -->Line_17 $$ String pattern = (String) event.get(Event.ARG_PATTERN)[ CD ]
Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) -->Line_18 $$ Object value = event.get(Event.ARG_VALUE)[ CD ]
Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) -->Line_19 $$ Class cls = field.getDataType()[ CD ]
Line_19 $$ Class cls = field.getDataType()-->Line_19 $$ Class cls = field.getDataType()[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_19 $$ Class cls = field.getDataType()[ FD ]
Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) -->Line_20 $$ if (cls == null || value == null || value.getClass().equals(cls))[ CD ]
Line_19 $$ Class cls = field.getDataType()-->Line_20 $$ if (cls == null || value == null || value.getClass().equals(cls))[ FD ]
Line_11 $$ Object value = event.get(Event.ARG_VALUE)-->Line_20 $$ if (cls == null || value == null || value.getClass().equals(cls))[ FD ]
Line_20 $$ if (cls == null || value == null || value.getClass().equals(cls))-->Line_20 $$ field.setValue(value)[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_20 $$ field.setValue(value)[ FD ]
Line_11 $$ Object value = event.get(Event.ARG_VALUE)-->Line_20 $$ field.setValue(value)[ FD ]
Line_20 $$ if (cls == null || value == null || value.getClass().equals(cls))-->Line_20 $$ if (pattern == null)[ CD ]
Line_17 $$ String pattern = (String) event.get(Event.ARG_PATTERN)-->Line_20 $$ if (pattern == null)[ FD ]
Line_20 $$ if (pattern == null)-->Line_20 $$ field.setValue(ConvertUtils.convert(value.toString(), cls))[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_20 $$ field.setValue(ConvertUtils.convert(value.toString(), cls))[ FD ]
Line_19 $$ Class cls = field.getDataType()-->Line_20 $$ field.setValue(ConvertUtils.convert(value.toString(), cls))[ FD ]
Line_11 $$ Object value = event.get(Event.ARG_VALUE)-->Line_20 $$ field.setValue(ConvertUtils.convert(value.toString(), cls))[ FD ]
Line_20 $$ if (pattern == null)-->Line_20 $$ if (Date.class.isAssignableFrom(cls))[ CD ]
Line_19 $$ Class cls = field.getDataType()-->Line_20 $$ if (Date.class.isAssignableFrom(cls))[ FD ]
Line_20 $$ if (Date.class.isAssignableFrom(cls))-->Line_20 $$ if (Date.class.isAssignableFrom(cls))[ CD ]
Line_19 $$ Class cls = field.getDataType()-->Line_20 $$ if (Date.class.isAssignableFrom(cls))[ FD ]
Line_20 $$ if (Date.class.isAssignableFrom(cls))-->Line_20 $$ field.setValue(new SimpleDateFormat(pattern).parse((String) value))[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_20 $$ field.setValue(new SimpleDateFormat(pattern).parse((String) value))[ FD ]
Line_20 $$ if (Date.class.isAssignableFrom(cls))-->Line_20 $$ if (Number.class.isAssignableFrom(cls))[ CD ]
Line_19 $$ Class cls = field.getDataType()-->Line_20 $$ if (Number.class.isAssignableFrom(cls))[ FD ]
Line_20 $$ if (Number.class.isAssignableFrom(cls))-->Line_20 $$ if (Number.class.isAssignableFrom(cls))[ CD ]
Line_19 $$ Class cls = field.getDataType()-->Line_20 $$ if (Number.class.isAssignableFrom(cls))[ FD ]
Line_20 $$ if (Number.class.isAssignableFrom(cls))-->Line_20 $$ field.setValue(new DecimalFormat(pattern).parse((String) value))[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_20 $$ field.setValue(new DecimalFormat(pattern).parse((String) value))[ FD ]
Line_20 $$ if (Number.class.isAssignableFrom(cls))-->Line_20 $$ field.setValue(new MessageFormat(pattern).parse((String) value))[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_20 $$ field.setValue(new MessageFormat(pattern).parse((String) value))[ FD ]
Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) -->Line_21 $$ invoke(parent, "checkRule_" + name)[ CD ]
Line_7 $$ IParent parent = field.getParent()-->Line_21 $$ invoke(parent, "checkRule_" + name)[ FD ]
Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) -->Line_22 $$ invoke(parent, "defaultRule_" + name)[ CD ]
Line_7 $$ IParent parent = field.getParent()-->Line_22 $$ invoke(parent, "defaultRule_" + name)[ FD ]
Line_16 $$ if (type == EventType.ON_VALUE_CHANGE) -->Line_23 $$ if (type == EventType.ON_ROW_SELECTED) [ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_23 $$ if (type == EventType.ON_ROW_SELECTED) [ FD ]
Line_23 $$ if (type == EventType.ON_ROW_SELECTED) -->Line_24 $$ log.info("table row selected.")[ CD ]
Line_23 $$ if (type == EventType.ON_ROW_SELECTED) -->Line_25 $$ Object selected = event.get(Event.ARG_ROW_INDEX)[ CD ]
Line_25 $$ Object selected = event.get(Event.ARG_ROW_INDEX)-->Line_25 $$ Object selected = event.get(Event.ARG_ROW_INDEX)[ CD ]
Line_23 $$ if (type == EventType.ON_ROW_SELECTED) -->Line_26 $$ if (selected instanceof Integer)[ CD ]
Line_25 $$ Object selected = event.get(Event.ARG_ROW_INDEX)-->Line_26 $$ if (selected instanceof Integer)[ FD ]
Line_26 $$ if (selected instanceof Integer)-->Line_26 $$ presentation.setSelectedRowIndex((IModuleList) field, (Integer) selected)[ CD ]
Line_26 $$ if (selected instanceof Integer)-->Line_26 $$ if (selected instanceof List) [ CD ]
Line_25 $$ Object selected = event.get(Event.ARG_ROW_INDEX)-->Line_26 $$ if (selected instanceof List) [ FD ]
Line_26 $$ if (selected instanceof List) -->Line_27 $$ String s = ""[ CD ]
Line_26 $$ if (selected instanceof List) -->Line_28 $$ String conn = ""[ CD ]
Line_27 $$ String s = ""-->Line_30 $$ s = s + conn + item[ FD ]
Line_30 $$ s = s + conn + item-->Line_30 $$ s = s + conn + item[ FD ]
Line_29 $$ for (Integer item : (List<Integer>) selected) -->Line_30 $$ s = s + conn + item[ FD ]
Line_28 $$ String conn = ""-->Line_31 $$ conn = ","[ FD ]
Line_31 $$ conn = ","-->Line_31 $$ conn = ","[ FD ]
Line_26 $$ if (selected instanceof List) -->Line_33 $$ log.info("row " + s + " line(s) been selected.")[ CD ]
Line_23 $$ if (type == EventType.ON_ROW_SELECTED) -->Line_35 $$ if (type == EventType.ON_ROW_DBLCLICK) [ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_35 $$ if (type == EventType.ON_ROW_DBLCLICK) [ FD ]
Line_35 $$ if (type == EventType.ON_ROW_DBLCLICK) -->Line_36 $$ log.info("table row double-clicked.")[ CD ]
Line_35 $$ if (type == EventType.ON_ROW_DBLCLICK) -->Line_37 $$ presentation.setSelectedRowIndex((IModuleList) field, (Integer) event.get(Event.ARG_ROW_INDEX))[ CD ]
Line_35 $$ if (type == EventType.ON_ROW_DBLCLICK) -->Line_38 $$ if (type == EventType.ON_ROW_INSERT) [ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_38 $$ if (type == EventType.ON_ROW_INSERT) [ FD ]
Line_38 $$ if (type == EventType.ON_ROW_INSERT) -->Line_39 $$ log.info("table row inserted.")[ CD ]
Line_38 $$ if (type == EventType.ON_ROW_INSERT) -->Line_40 $$ listAdd((IModuleList) field, (Integer) event.get(Event.ARG_ROW_INDEX))[ CD ]
Line_38 $$ if (type == EventType.ON_ROW_INSERT) -->Line_41 $$ if (type == EventType.ON_ROW_REMOVE) [ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_41 $$ if (type == EventType.ON_ROW_REMOVE) [ FD ]
Line_41 $$ if (type == EventType.ON_ROW_REMOVE) -->Line_42 $$ log.info("table row removed.")[ CD ]
Line_41 $$ if (type == EventType.ON_ROW_REMOVE) -->Line_43 $$ listRemove((IModuleList) field, (Integer) event.get(Event.ARG_ROW_INDEX))[ CD ]
Line_41 $$ if (type == EventType.ON_ROW_REMOVE) -->Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) [ CD ]
Line_3 $$ EventType type = event.getEventType()-->Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) [ FD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_45 $$ log.info("file uploaded.")[ CD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_46 $$ InputStream is = (InputStream) event.get(Event.ARG_VALUE)[ CD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_47 $$ String uploadFileName = (String) event.get(Event.ARG_FILE_NAME)[ CD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_48 $$ log.info("<-----file name:" + uploadFileName)[ CD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_49 $$ OutputStream os = (OutputStream) field.getValue()[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_49 $$ OutputStream os = (OutputStream) field.getValue()[ FD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_50 $$ IOUtils.copy(is, os)[ CD ]
Line_46 $$ InputStream is = (InputStream) event.get(Event.ARG_VALUE)-->Line_50 $$ IOUtils.copy(is, os)[ FD ]
Line_49 $$ OutputStream os = (OutputStream) field.getValue()-->Line_50 $$ IOUtils.copy(is, os)[ FD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_51 $$ is.close()[ CD ]
Line_46 $$ InputStream is = (InputStream) event.get(Event.ARG_VALUE)-->Line_51 $$ is.close()[ FD ]
Line_44 $$ if (type == EventType.ON_FILE_UPLOAD) -->Line_52 $$ os.close()[ CD ]
Line_49 $$ OutputStream os = (OutputStream) field.getValue()-->Line_52 $$ os.close()[ FD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_55 $$ if (field != null)[ FD ]
Line_55 $$ if (field != null)-->Line_55 $$ log.info("field type is :" + field.getDataType().getName())[ CD ]
Line_4 $$ IBaseObject field = event.getField()-->Line_55 $$ log.info("field type is :" + field.getDataType().getName())[ FD ]
