Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) [ CD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_3 $$ MerlotDebug.msg("Downloading URL: " + url)[ CD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_4 $$ String filename = url.getFile()[ CD ]
Line_4 $$ String filename = url.getFile()-->Line_4 $$ String filename = url.getFile()[ CD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_4 $$ String filename = url.getFile()[ FD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_5 $$ if (filename.indexOf('/') >= 0) [ CD ]
Line_4 $$ String filename = url.getFile()-->Line_5 $$ if (filename.indexOf('/') >= 0) [ FD ]
Line_5 $$ if (filename.indexOf('/') >= 0) -->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ CD ]
Line_4 $$ String filename = url.getFile()-->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ FD ]
Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)-->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ FD ]
Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)-->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ CD ]
Line_4 $$ String filename = url.getFile()-->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ FD ]
Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)-->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ FD ]
Line_4 $$ String filename = url.getFile()-->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ FD ]
Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)-->Line_6 $$ filename = filename.substring(filename.lastIndexOf('/') + 1)[ FD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_8 $$ File cache = new File(dir, sfilename)[ CD ]
Line_10 $$ if (!dir.exists()) -->Line_10 $$ if (!dir.exists()) [ CD ]
Line_10 $$ if (!dir.exists()) -->Line_10 $$ if (!dir.exists()) [ CD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_10 $$ if (!dir.exists()) [ FD ]
Line_10 $$ if (!dir.exists()) -->Line_11 $$ dir.mkdirs()[ CD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_11 $$ dir.mkdirs()[ FD ]
Line_13 $$ URLConnection connection = url.openConnection()-->Line_13 $$ URLConnection connection = url.openConnection()[ CD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_13 $$ URLConnection connection = url.openConnection()[ FD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_14 $$ if (cache.exists() && cache.canRead()) [ FD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_14 $$ if (cache.exists() && cache.canRead()) [ FD ]
Line_14 $$ if (cache.exists() && cache.canRead()) -->Line_15 $$ connection.connect()[ CD ]
Line_13 $$ URLConnection connection = url.openConnection()-->Line_15 $$ connection.connect()[ FD ]
Line_14 $$ if (cache.exists() && cache.canRead()) -->Line_16 $$ long remoteTimestamp = connection.getLastModified()[ CD ]
Line_16 $$ long remoteTimestamp = connection.getLastModified()-->Line_16 $$ long remoteTimestamp = connection.getLastModified()[ CD ]
Line_13 $$ URLConnection connection = url.openConnection()-->Line_16 $$ long remoteTimestamp = connection.getLastModified()[ FD ]
Line_14 $$ if (cache.exists() && cache.canRead()) -->Line_17 $$ if (remoteTimestamp == 0 || remoteTimestamp > cache.lastModified()) [ CD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_17 $$ if (remoteTimestamp == 0 || remoteTimestamp > cache.lastModified()) [ FD ]
Line_17 $$ if (remoteTimestamp == 0 || remoteTimestamp > cache.lastModified()) -->Line_18 $$ cache = downloadContent(connection, cache)[ CD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_18 $$ cache = downloadContent(connection, cache)[ FD ]
Line_18 $$ cache = downloadContent(connection, cache)-->Line_18 $$ cache = downloadContent(connection, cache)[ FD ]
Line_18 $$ cache = downloadContent(connection, cache)-->Line_18 $$ cache = downloadContent(connection, cache)[ CD ]
Line_13 $$ URLConnection connection = url.openConnection()-->Line_18 $$ cache = downloadContent(connection, cache)[ FD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_18 $$ cache = downloadContent(connection, cache)[ FD ]
Line_18 $$ cache = downloadContent(connection, cache)-->Line_18 $$ cache = downloadContent(connection, cache)[ FD ]
Line_17 $$ if (remoteTimestamp == 0 || remoteTimestamp > cache.lastModified()) -->Line_20 $$ MerlotDebug.msg("Using cached version for URL: " + url)[ CD ]
Line_14 $$ if (cache.exists() && cache.canRead()) -->Line_23 $$ cache = downloadContent(connection, cache)[ CD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_23 $$ cache = downloadContent(connection, cache)[ FD ]
Line_18 $$ cache = downloadContent(connection, cache)-->Line_23 $$ cache = downloadContent(connection, cache)[ FD ]
Line_23 $$ cache = downloadContent(connection, cache)-->Line_23 $$ cache = downloadContent(connection, cache)[ FD ]
Line_23 $$ cache = downloadContent(connection, cache)-->Line_23 $$ cache = downloadContent(connection, cache)[ CD ]
Line_13 $$ URLConnection connection = url.openConnection()-->Line_23 $$ cache = downloadContent(connection, cache)[ FD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_23 $$ cache = downloadContent(connection, cache)[ FD ]
Line_18 $$ cache = downloadContent(connection, cache)-->Line_23 $$ cache = downloadContent(connection, cache)[ FD ]
Line_23 $$ cache = downloadContent(connection, cache)-->Line_23 $$ cache = downloadContent(connection, cache)[ FD ]
Line_2 $$ public static File downloadURL(URL url, File dir, String sfilename) -->Line_28 $$ if (cache != null && cache.exists()) [ CD ]
Line_8 $$ File cache = new File(dir, sfilename)-->Line_28 $$ if (cache != null && cache.exists()) [ FD ]
Line_18 $$ cache = downloadContent(connection, cache)-->Line_28 $$ if (cache != null && cache.exists()) [ FD ]
Line_23 $$ cache = downloadContent(connection, cache)-->Line_28 $$ if (cache != null && cache.exists()) [ FD ]
Line_28 $$ if (cache != null && cache.exists()) -->Line_29 $$ return cache[ CD ]
Line_28 $$ if (cache != null && cache.exists()) -->Line_31 $$ return null[ CD ]
