Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) [ CD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_3 $$ String[] files[ CD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_4 $$ files = dir.list()[ CD ]
Line_3 $$ String[] files-->Line_4 $$ files = dir.list()[ FD ]
Line_4 $$ files = dir.list()-->Line_4 $$ files = dir.list()[ FD ]
Line_4 $$ files = dir.list()-->Line_4 $$ files = dir.list()[ CD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_4 $$ files = dir.list()[ FD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_5 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)[ CD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_6 $$ if (!checkdir.isDirectory()) [ CD ]
Line_6 $$ if (!checkdir.isDirectory()) -->Line_6 $$ if (!checkdir.isDirectory()) [ CD ]
Line_6 $$ if (!checkdir.isDirectory()) -->Line_6 $$ if (!checkdir.isDirectory()) [ CD ]
Line_5 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)-->Line_6 $$ if (!checkdir.isDirectory()) [ FD ]
Line_6 $$ if (!checkdir.isDirectory()) -->Line_7 $$ checkdir.mkdir()[ CD ]
Line_5 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)-->Line_7 $$ checkdir.mkdir()[ FD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_10 $$ Date date = new Date()[ CD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_11 $$ long msec = date.getTime()[ CD ]
Line_11 $$ long msec = date.getTime()-->Line_11 $$ long msec = date.getTime()[ CD ]
Line_10 $$ Date date = new Date()-->Line_11 $$ long msec = date.getTime()[ FD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_12 $$ checkdir.setLastModified(msec)[ CD ]
Line_5 $$ File checkdir = new File(destinationdir + System.getProperty("file.separator") + destinationDirEnding)-->Line_12 $$ checkdir.setLastModified(msec)[ FD ]
Line_11 $$ long msec = date.getTime()-->Line_12 $$ checkdir.setLastModified(msec)[ FD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_13 $$ File checkFile = new File(checkdir + System.getProperty("file.separator") + "azureus.config")[ CD ]
Line_2 $$ public static void makeBackup(File dir, String sourcedir, String destinationdir, String destinationDirEnding) -->Line_14 $$ if (checkFile.exists()) [ CD ]
Line_13 $$ File checkFile = new File(checkdir + System.getProperty("file.separator") + "azureus.config")-->Line_14 $$ if (checkFile.exists()) [ FD ]
Line_14 $$ if (checkFile.exists()) -->Line_14 $$ if (checkFile.exists()) [ CD ]
Line_13 $$ File checkFile = new File(checkdir + System.getProperty("file.separator") + "azureus.config")-->Line_14 $$ if (checkFile.exists()) [ FD ]
Line_14 $$ if (checkFile.exists()) -->Line_15 $$ checkFile.setLastModified(msec)[ CD ]
Line_13 $$ File checkFile = new File(checkdir + System.getProperty("file.separator") + "azureus.config")-->Line_15 $$ checkFile.setLastModified(msec)[ FD ]
Line_11 $$ long msec = date.getTime()-->Line_15 $$ checkFile.setLastModified(msec)[ FD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_18 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_18 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_18 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_19 $$ File f = new File(dir, files[i])[ CD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_20 $$ File g = new File(files[i])[ CD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_21 $$ if (f.isDirectory()) [ CD ]
Line_19 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.isDirectory()) [ FD ]
Line_21 $$ if (f.isDirectory()) -->Line_21 $$ if (f.isDirectory()) [ CD ]
Line_19 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.isDirectory()) [ FD ]
Line_21 $$ if (f.isDirectory()) -->Line_23 $$ String destinationFile = checkdir + System.getProperty("file.separator") + g[ CD ]
Line_21 $$ if (f.isDirectory()) -->Line_24 $$ String sourceFile = sourcedir + System.getProperty("file.separator") + g[ CD ]
Line_21 $$ if (f.isDirectory()) -->Line_25 $$ FileInputStream infile = new FileInputStream(sourceFile)[ CD ]
Line_21 $$ if (f.isDirectory()) -->Line_26 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)[ CD ]
Line_21 $$ if (f.isDirectory()) -->Line_27 $$ int c[ CD ]
Line_21 $$ if (f.isDirectory()) -->Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)[ CD ]
Line_21 $$ if (f.isDirectory()) -->Line_21 $$ if (f.isDirectory()) [ CD ]
Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_27 $$ int c-->Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)[ CD ]
Line_25 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)[ FD ]
Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_28 $$ outfile.write(c)[ CD ]
Line_26 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_28 $$ outfile.write(c)[ FD ]
Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_28 $$ outfile.write(c)[ FD ]
Line_27 $$ int c-->Line_28 $$ outfile.write(c)[ FD ]
Line_21 $$ if (f.isDirectory()) -->Line_29 $$ infile.close()[ CD ]
Line_25 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_29 $$ infile.close()[ FD ]
Line_21 $$ if (f.isDirectory()) -->Line_30 $$ outfile.close()[ CD ]
Line_26 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_30 $$ outfile.close()[ FD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_18 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_18 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_18 $$ for (int i = 0; i < files.length; i++) -->Line_18 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_19 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.isDirectory()) [ FD ]
Line_19 $$ File f = new File(dir, files[i])-->Line_21 $$ if (f.isDirectory()) [ FD ]
Line_25 $$ FileInputStream infile = new FileInputStream(sourceFile)-->Line_29 $$ infile.close()[ FD ]
Line_26 $$ FileOutputStream outfile = new FileOutputStream(destinationFile)-->Line_30 $$ outfile.close()[ FD ]
Line_28 $$ while ((c = infile.read()) != -1) outfile.write(c)-->Line_28 $$ outfile.write(c)[ FD ]
