Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void runTask(HashMap pjobParameters) throws Exception [ CD ]
Line_2 $$ public void runTask(HashMap pjobParameters) throws Exception -->Line_3 $$ if (hasRequiredResources(isSubTask())) [ CD ]
Line_3 $$ if (hasRequiredResources(isSubTask())) -->Line_3 $$ if (hasRequiredResources(isSubTask())) [ CD ]
Line_3 $$ if (hasRequiredResources(isSubTask())) -->Line_4 $$ File lfileSource = new File(getSource())[ CD ]
Line_3 $$ if (hasRequiredResources(isSubTask())) -->Line_5 $$ File lfileTarget = new File(getTarget())[ CD ]
Line_3 $$ if (hasRequiredResources(isSubTask())) -->Line_6 $$ FileChannel lfisInput = null[ CD ]
Line_3 $$ if (hasRequiredResources(isSubTask())) -->Line_7 $$ FileChannel lfosOutput = null[ CD ]
Line_11 $$ while (!lblnDone) -->Line_11 $$ while (!lblnDone) [ CD ]
Line_10 $$ boolean lblnDone = false-->Line_11 $$ while (!lblnDone) [ FD ]
Line_11 $$ while (!lblnDone) -->Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()[ CD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()[ FD ]
Line_6 $$ FileChannel lfisInput = null-->Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()[ FD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()[ CD ]
Line_11 $$ while (!lblnDone) -->Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()[ CD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()[ FD ]
Line_7 $$ FileChannel lfosOutput = null-->Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()[ FD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()[ CD ]
Line_16 $$ long size = lfisInput.size()-->Line_16 $$ long size = lfisInput.size()[ CD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_16 $$ long size = lfisInput.size()[ FD ]
Line_6 $$ FileChannel lfisInput = null-->Line_16 $$ long size = lfisInput.size()[ FD ]
Line_17 $$ long position = 0-->Line_18 $$ while (position < size) [ FD ]
Line_16 $$ long size = lfisInput.size()-->Line_18 $$ while (position < size) [ FD ]
Line_18 $$ while (position < size) -->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ CD ]
Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_17 $$ long position = 0-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ CD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_6 $$ FileChannel lfisInput = null-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_17 $$ long position = 0-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_15 $$ int maxCount = (mbCount * 1024 * 1024) - (32 * 1024)-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_7 $$ FileChannel lfosOutput = null-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
Line_21 $$ lblnDone = true-->Line_21 $$ lblnDone = true[ FD ]
Line_10 $$ boolean lblnDone = false-->Line_21 $$ lblnDone = true[ FD ]
Line_24 $$ if (lioXcp.getMessage().contains("Insufficient system resources exist to complete the requested servic")) -->Line_24 $$ if (lioXcp.getMessage().contains("Insufficient system resources exist to complete the requested servic")) [ CD ]
Line_24 $$ if (lioXcp.getMessage().contains("Insufficient system resources exist to complete the requested servic")) -->Line_25 $$ mbCount--[ CD ]
Line_9 $$ int mbCount = 64-->Line_25 $$ mbCount--[ FD ]
Line_24 $$ if (lioXcp.getMessage().contains("Insufficient system resources exist to complete the requested servic")) -->Line_26 $$ getLog().debug("Dropped resource count down to [" + mbCount + "]")[ CD ]
Line_24 $$ if (lioXcp.getMessage().contains("Insufficient system resources exist to complete the requested servic")) -->Line_27 $$ if (mbCount == 0) [ CD ]
Line_9 $$ int mbCount = 64-->Line_27 $$ if (mbCount == 0) [ FD ]
Line_27 $$ if (mbCount == 0) -->Line_28 $$ lblnDone = true[ CD ]
Line_21 $$ lblnDone = true-->Line_28 $$ lblnDone = true[ FD ]
Line_28 $$ lblnDone = true-->Line_28 $$ lblnDone = true[ FD ]
Line_10 $$ boolean lblnDone = false-->Line_28 $$ lblnDone = true[ FD ]
Line_24 $$ if (lioXcp.getMessage().contains("Insufficient system resources exist to complete the requested servic")) -->Line_30 $$ if (lfisInput != null) [ CD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_30 $$ if (lfisInput != null) [ FD ]
Line_6 $$ FileChannel lfisInput = null-->Line_30 $$ if (lfisInput != null) [ FD ]
Line_30 $$ if (lfisInput != null) -->Line_31 $$ lfisInput.close()[ CD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_31 $$ lfisInput.close()[ FD ]
Line_6 $$ FileChannel lfisInput = null-->Line_31 $$ lfisInput.close()[ FD ]
Line_24 $$ if (lioXcp.getMessage().contains("Insufficient system resources exist to complete the requested servic")) -->Line_33 $$ if (lfosOutput != null) [ CD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_33 $$ if (lfosOutput != null) [ FD ]
Line_7 $$ FileChannel lfosOutput = null-->Line_33 $$ if (lfosOutput != null) [ FD ]
Line_33 $$ if (lfosOutput != null) -->Line_34 $$ lfosOutput.close()[ CD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_34 $$ lfosOutput.close()[ FD ]
Line_7 $$ FileChannel lfosOutput = null-->Line_34 $$ lfosOutput.close()[ FD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_42 $$ if (lfisInput != null) [ FD ]
Line_6 $$ FileChannel lfisInput = null-->Line_42 $$ if (lfisInput != null) [ FD ]
Line_42 $$ if (lfisInput != null) -->Line_43 $$ lfisInput.close()[ CD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_43 $$ lfisInput.close()[ FD ]
Line_6 $$ FileChannel lfisInput = null-->Line_43 $$ lfisInput.close()[ FD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_45 $$ if (lfosOutput != null) [ FD ]
Line_7 $$ FileChannel lfosOutput = null-->Line_45 $$ if (lfosOutput != null) [ FD ]
Line_45 $$ if (lfosOutput != null) -->Line_46 $$ lfosOutput.close()[ CD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_46 $$ lfosOutput.close()[ FD ]
Line_7 $$ FileChannel lfosOutput = null-->Line_46 $$ lfosOutput.close()[ FD ]
Line_21 $$ lblnDone = true-->Line_11 $$ while (!lblnDone) [ FD ]
Line_28 $$ lblnDone = true-->Line_11 $$ while (!lblnDone) [ FD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_16 $$ long size = lfisInput.size()[ FD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_30 $$ if (lfisInput != null) [ FD ]
Line_12 $$ lfisInput = new FileInputStream(lfileSource).getChannel()-->Line_31 $$ lfisInput.close()[ FD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_33 $$ if (lfosOutput != null) [ FD ]
Line_13 $$ lfosOutput = new FileOutputStream(lfileTarget).getChannel()-->Line_34 $$ lfosOutput.close()[ FD ]
Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)-->Line_18 $$ while (position < size) [ FD ]
Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)-->Line_18 $$ while (position < size) [ FD ]
Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)-->Line_19 $$ position += lfisInput.transferTo(position, maxCount, lfosOutput)[ FD ]
