Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ Pair p = null[ CD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_5 $$ while ((p = queue.pop()) != null) [ FD ]
Line_3 $$ Pair p = null-->Line_5 $$ while ((p = queue.pop()) != null) [ FD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_5 $$ while ((p = queue.pop()) != null) [ CD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())[ CD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())[ FD ]
Line_3 $$ Pair p = null-->Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_8 $$ get.setFollowRedirects(true)[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_9 $$ get.setRequestHeader("Mariner-Application", "prerenderer")[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_10 $$ get.setRequestHeader("Mariner-DeviceName", deviceName)[ FD ]
Line_11 $$ int iGetResultCode = httpClient.executeMethod(get)-->Line_11 $$ int iGetResultCode = httpClient.executeMethod(get)[ CD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_11 $$ int iGetResultCode = httpClient.executeMethod(get)[ FD ]
Line_11 $$ int iGetResultCode = httpClient.executeMethod(get)-->Line_12 $$ if (iGetResultCode != 200) [ FD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_13 $$ throw new IOException("Got response code " + iGetResultCode + " for a request for " + p.getRemoteUri())[ FD ]
Line_3 $$ Pair p = null-->Line_13 $$ throw new IOException("Got response code " + iGetResultCode + " for a request for " + p.getRemoteUri())[ FD ]
Line_15 $$ InputStream is = get.getResponseBodyAsStream()-->Line_15 $$ InputStream is = get.getResponseBodyAsStream()[ CD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_15 $$ InputStream is = get.getResponseBodyAsStream()[ FD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_16 $$ File localFile = new File(deviceFile, p.getLocalUri())[ FD ]
Line_3 $$ Pair p = null-->Line_16 $$ File localFile = new File(deviceFile, p.getLocalUri())[ FD ]
Line_16 $$ File localFile = new File(deviceFile, p.getLocalUri())-->Line_17 $$ localFile.getParentFile().mkdirs()[ FD ]
Line_15 $$ InputStream is = get.getResponseBodyAsStream()-->Line_19 $$ IOUtils.copy(is, os)[ FD ]
Line_18 $$ OutputStream os = new FileOutputStream(localFile)-->Line_19 $$ IOUtils.copy(is, os)[ FD ]
Line_18 $$ OutputStream os = new FileOutputStream(localFile)-->Line_20 $$ os.close()[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_22 $$ get.releaseConnection()[ FD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_8 $$ get.setFollowRedirects(true)[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_9 $$ get.setRequestHeader("Mariner-Application", "prerenderer")[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_10 $$ get.setRequestHeader("Mariner-DeviceName", deviceName)[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_11 $$ int iGetResultCode = httpClient.executeMethod(get)[ FD ]
Line_11 $$ int iGetResultCode = httpClient.executeMethod(get)-->Line_12 $$ if (iGetResultCode != 200) [ FD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_13 $$ throw new IOException("Got response code " + iGetResultCode + " for a request for " + p.getRemoteUri())[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_15 $$ InputStream is = get.getResponseBodyAsStream()[ FD ]
Line_5 $$ while ((p = queue.pop()) != null) -->Line_16 $$ File localFile = new File(deviceFile, p.getLocalUri())[ FD ]
Line_16 $$ File localFile = new File(deviceFile, p.getLocalUri())-->Line_17 $$ localFile.getParentFile().mkdirs()[ FD ]
Line_15 $$ InputStream is = get.getResponseBodyAsStream()-->Line_19 $$ IOUtils.copy(is, os)[ FD ]
Line_18 $$ OutputStream os = new FileOutputStream(localFile)-->Line_19 $$ IOUtils.copy(is, os)[ FD ]
Line_18 $$ OutputStream os = new FileOutputStream(localFile)-->Line_20 $$ os.close()[ FD ]
Line_6 $$ GetMethod get = new GetMethod(p.getRemoteUri())-->Line_22 $$ get.releaseConnection()[ FD ]
