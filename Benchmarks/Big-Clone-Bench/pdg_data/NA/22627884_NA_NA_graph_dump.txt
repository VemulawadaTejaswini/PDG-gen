Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException [ CD ]
Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException -->Line_4 $$ final String providerNamePrefix = providerClass.getName() + "."[ FD ]
Line_5 $$ final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() -->Line_7 $$ return key1.compareTo(key2)[ CD ]
Line_7 $$ return key1.compareTo(key2)-->Line_7 $$ return key1.compareTo(key2)[ CD ]
Line_5 $$ final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() -->Line_7 $$ return key1.compareTo(key2)[ FD ]
Line_5 $$ final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() -->Line_7 $$ return key1.compareTo(key2)[ FD ]
Line_11 $$ if (platformProviders.exists()) -->Line_11 $$ if (platformProviders.exists()) [ CD ]
Line_11 $$ if (platformProviders.exists()) -->Line_12 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_12 $$ if (this.isLoggable(Level.FINEST)) -->Line_12 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_12 $$ if (this.isLoggable(Level.FINEST)) -->Line_13 $$ this.log(Level.FINEST, getMessage("processing", platformProviders.getAbsolutePath()), null)[ CD ]
Line_24 $$ if (in != null) -->Line_25 $$ in.close()[ CD ]
Line_28 $$ if (suppressExceptionOnClose) -->Line_29 $$ this.log(Level.SEVERE, getMessage(e), e)[ CD ]
Line_4 $$ final String providerNamePrefix = providerClass.getName() + "."-->Line_36 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) [ FD ]
Line_36 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_36 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) [ CD ]
Line_4 $$ final String providerNamePrefix = providerClass.getName() + "."-->Line_36 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) [ FD ]
Line_36 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_37 $$ final String configuration = e.getValue().toString()[ CD ]
Line_36 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_38 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_38 $$ if (this.isLoggable(Level.FINEST)) -->Line_38 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_38 $$ if (this.isLoggable(Level.FINEST)) -->Line_39 $$ this.log(Level.FINEST, getMessage("providerInfo", platformProviders.getAbsolutePath(), providerClass.getName(), configuration), null)[ CD ]
Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException -->Line_39 $$ this.log(Level.FINEST, getMessage("providerInfo", platformProviders.getAbsolutePath(), providerClass.getName(), configuration), null)[ FD ]
Line_36 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_41 $$ providers.put(e.getKey().toString(), this.createProviderObject(providerClass, configuration, platformProviders.toURI().toURL()))[ CD ]
Line_5 $$ final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() -->Line_41 $$ providers.put(e.getKey().toString(), this.createProviderObject(providerClass, configuration, platformProviders.toURI().toURL()))[ FD ]
Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException -->Line_41 $$ providers.put(e.getKey().toString(), this.createProviderObject(providerClass, configuration, platformProviders.toURI().toURL()))[ FD ]
Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException -->Line_45 $$ final Enumeration<URL> classpathProviders = this.findResources(this.getProviderLocation() + '/' + providerClass.getName())[ FD ]
Line_48 $$ while (classpathProviders.hasMoreElements()) -->Line_48 $$ while (classpathProviders.hasMoreElements()) [ CD ]
Line_48 $$ while (classpathProviders.hasMoreElements()) -->Line_50 $$ final URL url = classpathProviders.nextElement()[ CD ]
Line_50 $$ final URL url = classpathProviders.nextElement()-->Line_50 $$ final URL url = classpathProviders.nextElement()[ CD ]
Line_48 $$ while (classpathProviders.hasMoreElements()) -->Line_51 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_51 $$ if (this.isLoggable(Level.FINEST)) -->Line_51 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_51 $$ if (this.isLoggable(Level.FINEST)) -->Line_52 $$ this.log(Level.FINEST, getMessage("processing", url.toExternalForm()), null)[ CD ]
Line_50 $$ final URL url = classpathProviders.nextElement()-->Line_52 $$ this.log(Level.FINEST, getMessage("processing", url.toExternalForm()), null)[ FD ]
Line_48 $$ while (classpathProviders.hasMoreElements()) -->Line_54 $$ BufferedReader reader = null[ CD ]
Line_48 $$ while (classpathProviders.hasMoreElements()) -->Line_55 $$ boolean suppressExceptionOnClose = true[ CD ]
Line_54 $$ BufferedReader reader = null-->Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))[ FD ]
Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))[ FD ]
Line_50 $$ final URL url = classpathProviders.nextElement()-->Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))[ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_59 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_58 $$ String line = null-->Line_59 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_59 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_54 $$ BufferedReader reader = null-->Line_59 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_59 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_60 $$ if (line.contains("#")) [ CD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_60 $$ if (line.contains("#")) [ FD ]
Line_58 $$ String line = null-->Line_60 $$ if (line.contains("#")) [ FD ]
Line_60 $$ if (line.contains("#")) -->Line_60 $$ if (line.contains("#")) [ CD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_60 $$ if (line.contains("#")) [ FD ]
Line_58 $$ String line = null-->Line_60 $$ if (line.contains("#")) [ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_63 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_63 $$ if (this.isLoggable(Level.FINEST)) -->Line_63 $$ if (this.isLoggable(Level.FINEST)) [ CD ]
Line_63 $$ if (this.isLoggable(Level.FINEST)) -->Line_64 $$ this.log(Level.FINEST, getMessage("providerInfo", url.toExternalForm(), providerClass.getName(), line), null)[ CD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_64 $$ this.log(Level.FINEST, getMessage("providerInfo", url.toExternalForm(), providerClass.getName(), line), null)[ FD ]
Line_58 $$ String line = null-->Line_64 $$ this.log(Level.FINEST, getMessage("providerInfo", url.toExternalForm(), providerClass.getName(), line), null)[ FD ]
Line_50 $$ final URL url = classpathProviders.nextElement()-->Line_64 $$ this.log(Level.FINEST, getMessage("providerInfo", url.toExternalForm(), providerClass.getName(), line), null)[ FD ]
Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException -->Line_64 $$ this.log(Level.FINEST, getMessage("providerInfo", url.toExternalForm(), providerClass.getName(), line), null)[ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ CD ]
Line_5 $$ final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() -->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ FD ]
Line_5 $$ final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() -->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ FD ]
Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException -->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ FD ]
Line_58 $$ String line = null-->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ FD ]
Line_50 $$ final URL url = classpathProviders.nextElement()-->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ FD ]
Line_55 $$ boolean suppressExceptionOnClose = true-->Line_68 $$ suppressExceptionOnClose = false[ FD ]
Line_68 $$ suppressExceptionOnClose = false-->Line_68 $$ suppressExceptionOnClose = false[ FD ]
Line_54 $$ BufferedReader reader = null-->Line_71 $$ if (reader != null) [ FD ]
Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_71 $$ if (reader != null) [ FD ]
Line_71 $$ if (reader != null) -->Line_72 $$ reader.close()[ CD ]
Line_54 $$ BufferedReader reader = null-->Line_72 $$ reader.close()[ FD ]
Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_72 $$ reader.close()[ FD ]
Line_75 $$ if (suppressExceptionOnClose) -->Line_76 $$ this.log(Level.SEVERE, getMessage(e), e)[ CD ]
Line_83 $$ if (this.isLoggable(Level.FINE)) -->Line_83 $$ if (this.isLoggable(Level.FINE)) [ CD ]
Line_83 $$ if (this.isLoggable(Level.FINE)) -->Line_84 $$ this.log(Level.FINE, getMessage("contextReport", count, this.getProviderLocation() + '/' + providerClass.getName(), Long.valueOf(System.currentTimeMillis() - t0)), null)[ CD ]
Line_2 $$ private <T> Collection<T> loadProviders(final Class<T> providerClass) throws ModelException -->Line_84 $$ this.log(Level.FINE, getMessage("contextReport", count, this.getProviderLocation() + '/' + providerClass.getName(), Long.valueOf(System.currentTimeMillis() - t0)), null)[ FD ]
Line_86 $$ return providers.values()-->Line_86 $$ return providers.values()[ CD ]
Line_5 $$ final Map<String, T> providers = new TreeMap<String, T>(new Comparator<String>() -->Line_86 $$ return providers.values()[ FD ]
Line_50 $$ final URL url = classpathProviders.nextElement()-->Line_52 $$ this.log(Level.FINEST, getMessage("processing", url.toExternalForm()), null)[ FD ]
Line_50 $$ final URL url = classpathProviders.nextElement()-->Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))[ FD ]
Line_54 $$ BufferedReader reader = null-->Line_71 $$ if (reader != null) [ FD ]
Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_71 $$ if (reader != null) [ FD ]
Line_54 $$ BufferedReader reader = null-->Line_72 $$ reader.close()[ FD ]
Line_57 $$ reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_72 $$ reader.close()[ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_60 $$ if (line.contains("#")) [ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_60 $$ if (line.contains("#")) [ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_64 $$ this.log(Level.FINEST, getMessage("providerInfo", url.toExternalForm(), providerClass.getName(), line), null)[ FD ]
Line_59 $$ while ((line = reader.readLine()) != null) -->Line_66 $$ providers.put(providerNamePrefix + providers.size(), this.createProviderObject(providerClass, line, url))[ FD ]
