Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void request() [ CD ]
Line_5 $$ if (isCometConnection) -->Line_6 $$ connection.setReadTimeout(0)[ CD ]
Line_5 $$ if (isCometConnection) -->Line_8 $$ connection.setReadTimeout(30000)[ CD ]
Line_14 $$ if ("post".equalsIgnoreCase(method)) -->Line_14 $$ if ("post".equalsIgnoreCase(method)) [ CD ]
Line_14 $$ if ("post".equalsIgnoreCase(method)) -->Line_15 $$ connection.setDoOutput(true)[ CD ]
Line_14 $$ if ("post".equalsIgnoreCase(method)) -->Line_16 $$ connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")[ CD ]
Line_18 $$ if (user != null) -->Line_19 $$ String auth = user + ":" + (password != null ? password : "")[ CD ]
Line_18 $$ if (user != null) -->Line_20 $$ String base64Auth = HttpRequest.Base64.byteArrayToBase64(auth.getBytes())[ CD ]
Line_20 $$ String base64Auth = HttpRequest.Base64.byteArrayToBase64(auth.getBytes())-->Line_20 $$ String base64Auth = HttpRequest.Base64.byteArrayToBase64(auth.getBytes())[ CD ]
Line_19 $$ String auth = user + ":" + (password != null ? password : "")-->Line_20 $$ String base64Auth = HttpRequest.Base64.byteArrayToBase64(auth.getBytes())[ FD ]
Line_18 $$ if (user != null) -->Line_21 $$ connection.setRequestProperty("Authorization", "Basic " + base64Auth)[ CD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) [ CD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_24 $$ String key = (String) iter.next()[ CD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_24 $$ String key = (String) iter.next()[ FD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_25 $$ connection.setRequestProperty(key, (String) headers.get(key))[ CD ]
Line_24 $$ String key = (String) iter.next()-->Line_25 $$ connection.setRequestProperty(key, (String) headers.get(key))[ FD ]
Line_24 $$ String key = (String) iter.next()-->Line_25 $$ connection.setRequestProperty(key, (String) headers.get(key))[ FD ]
Line_28 $$ if (checkAbort())-->Line_28 $$ if (checkAbort())[ CD ]
Line_28 $$ if (checkAbort())-->Line_28 $$ return[ CD ]
Line_29 $$ if ("post".equalsIgnoreCase(method)) -->Line_29 $$ if ("post".equalsIgnoreCase(method)) [ CD ]
Line_29 $$ if ("post".equalsIgnoreCase(method)) -->Line_30 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream())[ CD ]
Line_29 $$ if ("post".equalsIgnoreCase(method)) -->Line_32 $$ if (content != null) [ CD ]
Line_32 $$ if (content != null) -->Line_33 $$ dos.writeBytes(content)[ CD ]
Line_30 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream())-->Line_33 $$ dos.writeBytes(content)[ FD ]
Line_29 $$ if ("post".equalsIgnoreCase(method)) -->Line_35 $$ if (checkAbort())[ CD ]
Line_35 $$ if (checkAbort())-->Line_35 $$ if (checkAbort())[ CD ]
Line_35 $$ if (checkAbort())-->Line_35 $$ return[ CD ]
Line_29 $$ if ("post".equalsIgnoreCase(method)) -->Line_36 $$ dos.flush()[ CD ]
Line_30 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream())-->Line_36 $$ dos.flush()[ FD ]
Line_29 $$ if ("post".equalsIgnoreCase(method)) -->Line_37 $$ dos.close()[ CD ]
Line_30 $$ DataOutputStream dos = new DataOutputStream(connection.getOutputStream())-->Line_37 $$ dos.close()[ FD ]
Line_40 $$ if (checkAbort())-->Line_40 $$ if (checkAbort())[ CD ]
Line_40 $$ if (checkAbort())-->Line_40 $$ return[ CD ]
Line_41 $$ InputStream is = null-->Line_43 $$ is = connection.getInputStream()[ FD ]
Line_43 $$ is = connection.getInputStream()-->Line_43 $$ is = connection.getInputStream()[ FD ]
Line_43 $$ is = connection.getInputStream()-->Line_43 $$ is = connection.getInputStream()[ CD ]
Line_45 $$ if (checkAbort())-->Line_45 $$ if (checkAbort())[ CD ]
Line_45 $$ if (checkAbort())-->Line_45 $$ return[ CD ]
Line_47 $$ if (onreadystatechange != null) -->Line_48 $$ onreadystatechange.onLoaded()[ CD ]
Line_55 $$ if (readyState < 2) -->Line_57 $$ status = connection.getResponseCode()[ CD ]
Line_55 $$ if (readyState < 2) -->Line_58 $$ statusText = connection.getResponseMessage()[ CD ]
Line_55 $$ if (readyState < 2) -->Line_59 $$ if (onreadystatechange != null) [ CD ]
Line_59 $$ if (onreadystatechange != null) -->Line_60 $$ onreadystatechange.onSent()[ CD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) [ FD ]
Line_66 $$ int read-->Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) [ FD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) [ CD ]
Line_41 $$ InputStream is = null-->Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) [ FD ]
Line_43 $$ is = connection.getInputStream()-->Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) [ FD ]
Line_65 $$ byte[] buffer = new byte[10240]-->Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) [ FD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_68 $$ if (checkAbort())[ CD ]
Line_68 $$ if (checkAbort())-->Line_68 $$ if (checkAbort())[ CD ]
Line_68 $$ if (checkAbort())-->Line_68 $$ return[ CD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_69 $$ if (readyState != 3) [ CD ]
Line_69 $$ if (readyState != 3) -->Line_71 $$ if (onreadystatechange != null) [ CD ]
Line_71 $$ if (onreadystatechange != null) -->Line_72 $$ onreadystatechange.onReceiving()[ CD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_75 $$ boolean received = false[ CD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_76 $$ if (receiving != null) [ CD ]
Line_76 $$ if (receiving != null) -->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ CD ]
Line_75 $$ boolean received = false-->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ FD ]
Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)-->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ FD ]
Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)-->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ CD ]
Line_64 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(10240)-->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ FD ]
Line_65 $$ byte[] buffer = new byte[10240]-->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ FD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ FD ]
Line_66 $$ int read-->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ FD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_79 $$ if (!received) [ CD ]
Line_75 $$ boolean received = false-->Line_79 $$ if (!received) [ FD ]
Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)-->Line_79 $$ if (!received) [ FD ]
Line_79 $$ if (!received) -->Line_79 $$ if (!received) [ CD ]
Line_75 $$ boolean received = false-->Line_79 $$ if (!received) [ FD ]
Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)-->Line_79 $$ if (!received) [ FD ]
Line_79 $$ if (!received) -->Line_80 $$ baos.write(buffer, 0, read)[ CD ]
Line_64 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(10240)-->Line_80 $$ baos.write(buffer, 0, read)[ FD ]
Line_65 $$ byte[] buffer = new byte[10240]-->Line_80 $$ baos.write(buffer, 0, read)[ FD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_80 $$ baos.write(buffer, 0, read)[ FD ]
Line_66 $$ int read-->Line_80 $$ baos.write(buffer, 0, read)[ FD ]
Line_83 $$ if (checkAbort())-->Line_83 $$ if (checkAbort())[ CD ]
Line_83 $$ if (checkAbort())-->Line_83 $$ return[ CD ]
Line_41 $$ InputStream is = null-->Line_84 $$ is.close()[ FD ]
Line_43 $$ is = connection.getInputStream()-->Line_84 $$ is.close()[ FD ]
Line_87 $$ String type = connection.getHeaderField("Content-Type")-->Line_87 $$ String type = connection.getHeaderField("Content-Type")[ CD ]
Line_87 $$ String type = connection.getHeaderField("Content-Type")-->Line_88 $$ if (type != null) [ FD ]
Line_88 $$ if (type != null) -->Line_89 $$ String charset = null[ CD ]
Line_88 $$ if (type != null) -->Line_90 $$ String lowerType = type.toLowerCase()[ CD ]
Line_90 $$ String lowerType = type.toLowerCase()-->Line_90 $$ String lowerType = type.toLowerCase()[ CD ]
Line_87 $$ String type = connection.getHeaderField("Content-Type")-->Line_90 $$ String lowerType = type.toLowerCase()[ FD ]
Line_88 $$ if (type != null) -->Line_91 $$ int idx = lowerType.indexOf("charset=")[ CD ]
Line_91 $$ int idx = lowerType.indexOf("charset=")-->Line_91 $$ int idx = lowerType.indexOf("charset=")[ CD ]
Line_90 $$ String lowerType = type.toLowerCase()-->Line_91 $$ int idx = lowerType.indexOf("charset=")[ FD ]
Line_88 $$ if (type != null) -->Line_92 $$ if (idx != -1) [ CD ]
Line_91 $$ int idx = lowerType.indexOf("charset=")-->Line_92 $$ if (idx != -1) [ FD ]
Line_92 $$ if (idx != -1) -->Line_93 $$ charset = type.substring(idx + 8)[ CD ]
Line_89 $$ String charset = null-->Line_93 $$ charset = type.substring(idx + 8)[ FD ]
Line_93 $$ charset = type.substring(idx + 8)-->Line_93 $$ charset = type.substring(idx + 8)[ FD ]
Line_93 $$ charset = type.substring(idx + 8)-->Line_93 $$ charset = type.substring(idx + 8)[ CD ]
Line_87 $$ String type = connection.getHeaderField("Content-Type")-->Line_93 $$ charset = type.substring(idx + 8)[ FD ]
Line_92 $$ if (idx != -1) -->Line_95 $$ idx = lowerType.indexOf("/xml")[ CD ]
Line_91 $$ int idx = lowerType.indexOf("charset=")-->Line_95 $$ idx = lowerType.indexOf("/xml")[ FD ]
Line_95 $$ idx = lowerType.indexOf("/xml")-->Line_95 $$ idx = lowerType.indexOf("/xml")[ FD ]
Line_95 $$ idx = lowerType.indexOf("/xml")-->Line_95 $$ idx = lowerType.indexOf("/xml")[ CD ]
Line_90 $$ String lowerType = type.toLowerCase()-->Line_95 $$ idx = lowerType.indexOf("/xml")[ FD ]
Line_92 $$ if (idx != -1) -->Line_96 $$ if (idx != -1) [ CD ]
Line_91 $$ int idx = lowerType.indexOf("charset=")-->Line_96 $$ if (idx != -1) [ FD ]
Line_95 $$ idx = lowerType.indexOf("/xml")-->Line_96 $$ if (idx != -1) [ FD ]
Line_96 $$ if (idx != -1) -->Line_97 $$ String tmp = baos.toString()[ CD ]
Line_97 $$ String tmp = baos.toString()-->Line_97 $$ String tmp = baos.toString()[ CD ]
Line_64 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(10240)-->Line_97 $$ String tmp = baos.toString()[ FD ]
Line_96 $$ if (idx != -1) -->Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)[ CD ]
Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)-->Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)[ CD ]
Line_97 $$ String tmp = baos.toString()-->Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)[ FD ]
Line_96 $$ if (idx != -1) -->Line_99 $$ if (matcher.find()) [ CD ]
Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)-->Line_99 $$ if (matcher.find()) [ FD ]
Line_99 $$ if (matcher.find()) -->Line_99 $$ if (matcher.find()) [ CD ]
Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)-->Line_99 $$ if (matcher.find()) [ FD ]
Line_99 $$ if (matcher.find()) -->Line_100 $$ charset = matcher.group(1)[ CD ]
Line_89 $$ String charset = null-->Line_100 $$ charset = matcher.group(1)[ FD ]
Line_93 $$ charset = type.substring(idx + 8)-->Line_100 $$ charset = matcher.group(1)[ FD ]
Line_100 $$ charset = matcher.group(1)-->Line_100 $$ charset = matcher.group(1)[ FD ]
Line_100 $$ charset = matcher.group(1)-->Line_100 $$ charset = matcher.group(1)[ CD ]
Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)-->Line_100 $$ charset = matcher.group(1)[ FD ]
Line_96 $$ if (idx != -1) -->Line_105 $$ idx = lowerType.indexOf("html")[ CD ]
Line_91 $$ int idx = lowerType.indexOf("charset=")-->Line_105 $$ idx = lowerType.indexOf("html")[ FD ]
Line_95 $$ idx = lowerType.indexOf("/xml")-->Line_105 $$ idx = lowerType.indexOf("html")[ FD ]
Line_105 $$ idx = lowerType.indexOf("html")-->Line_105 $$ idx = lowerType.indexOf("html")[ FD ]
Line_105 $$ idx = lowerType.indexOf("html")-->Line_105 $$ idx = lowerType.indexOf("html")[ CD ]
Line_90 $$ String lowerType = type.toLowerCase()-->Line_105 $$ idx = lowerType.indexOf("html")[ FD ]
Line_96 $$ if (idx != -1) -->Line_106 $$ if (idx != -1) [ CD ]
Line_91 $$ int idx = lowerType.indexOf("charset=")-->Line_106 $$ if (idx != -1) [ FD ]
Line_95 $$ idx = lowerType.indexOf("/xml")-->Line_106 $$ if (idx != -1) [ FD ]
Line_105 $$ idx = lowerType.indexOf("html")-->Line_106 $$ if (idx != -1) [ FD ]
Line_106 $$ if (idx != -1) -->Line_107 $$ String tmp = baos.toString()[ CD ]
Line_64 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(10240)-->Line_107 $$ String tmp = baos.toString()[ FD ]
Line_106 $$ if (idx != -1) -->Line_108 $$ Matcher matcher = Pattern.compile("<meta.*content\\s*=\\s*[\'\"][^'\"]*charset\\s*=\\s*([^'\"]*)\\s*[\'\"].*>", Pattern.MULTILINE | Pattern.CASE_INSENSITIVE).matcher(tmp)[ CD ]
Line_97 $$ String tmp = baos.toString()-->Line_108 $$ Matcher matcher = Pattern.compile("<meta.*content\\s*=\\s*[\'\"][^'\"]*charset\\s*=\\s*([^'\"]*)\\s*[\'\"].*>", Pattern.MULTILINE | Pattern.CASE_INSENSITIVE).matcher(tmp)[ FD ]
Line_106 $$ if (idx != -1) -->Line_109 $$ if (matcher.find()) [ CD ]
Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)-->Line_109 $$ if (matcher.find()) [ FD ]
Line_109 $$ if (matcher.find()) -->Line_109 $$ if (matcher.find()) [ CD ]
Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)-->Line_109 $$ if (matcher.find()) [ FD ]
Line_109 $$ if (matcher.find()) -->Line_110 $$ charset = matcher.group(1)[ CD ]
Line_89 $$ String charset = null-->Line_110 $$ charset = matcher.group(1)[ FD ]
Line_93 $$ charset = type.substring(idx + 8)-->Line_110 $$ charset = matcher.group(1)[ FD ]
Line_100 $$ charset = matcher.group(1)-->Line_110 $$ charset = matcher.group(1)[ FD ]
Line_110 $$ charset = matcher.group(1)-->Line_110 $$ charset = matcher.group(1)[ FD ]
Line_110 $$ charset = matcher.group(1)-->Line_110 $$ charset = matcher.group(1)[ CD ]
Line_98 $$ Matcher matcher = Pattern.compile("<\\?.*encoding\\s*=\\s*[\'\"]([^'\"]*)[\'\"].*\\?>", Pattern.MULTILINE).matcher(tmp)-->Line_110 $$ charset = matcher.group(1)[ FD ]
Line_88 $$ if (type != null) -->Line_117 $$ if (charset != null) [ CD ]
Line_89 $$ String charset = null-->Line_117 $$ if (charset != null) [ FD ]
Line_93 $$ charset = type.substring(idx + 8)-->Line_117 $$ if (charset != null) [ FD ]
Line_100 $$ charset = matcher.group(1)-->Line_117 $$ if (charset != null) [ FD ]
Line_110 $$ charset = matcher.group(1)-->Line_117 $$ if (charset != null) [ FD ]
Line_64 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(10240)-->Line_119 $$ responseText = baos.toString(charset)[ FD ]
Line_89 $$ String charset = null-->Line_119 $$ responseText = baos.toString(charset)[ FD ]
Line_93 $$ charset = type.substring(idx + 8)-->Line_119 $$ responseText = baos.toString(charset)[ FD ]
Line_100 $$ charset = matcher.group(1)-->Line_119 $$ responseText = baos.toString(charset)[ FD ]
Line_110 $$ charset = matcher.group(1)-->Line_119 $$ responseText = baos.toString(charset)[ FD ]
Line_64 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(10240)-->Line_126 $$ responseText = baos.toString("iso-8859-1")[ FD ]
Line_64 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(10240)-->Line_128 $$ responseText = baos.toString()[ FD ]
Line_132 $$ if (onreadystatechange != null) -->Line_133 $$ onreadystatechange.onLoaded()[ CD ]
Line_138 $$ if (checkAbort())-->Line_138 $$ if (checkAbort())[ CD ]
Line_138 $$ if (checkAbort())-->Line_138 $$ return[ CD ]
Line_141 $$ if (onreadystatechange != null) -->Line_142 $$ onreadystatechange.onLoaded()[ CD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) [ FD ]
Line_23 $$ for (Iterator<String> iter = headers.keySet().iterator(); iter.hasNext(); ) -->Line_24 $$ String key = (String) iter.next()[ FD ]
Line_24 $$ String key = (String) iter.next()-->Line_25 $$ connection.setRequestProperty(key, (String) headers.get(key))[ FD ]
Line_24 $$ String key = (String) iter.next()-->Line_25 $$ connection.setRequestProperty(key, (String) headers.get(key))[ FD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)[ FD ]
Line_75 $$ boolean received = false-->Line_79 $$ if (!received) [ FD ]
Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)-->Line_79 $$ if (!received) [ FD ]
Line_75 $$ boolean received = false-->Line_79 $$ if (!received) [ FD ]
Line_77 $$ received = receiving.receiving(baos, buffer, 0, read)-->Line_79 $$ if (!received) [ FD ]
Line_67 $$ while (!toAbort && (read = is.read(buffer)) != -1) -->Line_80 $$ baos.write(buffer, 0, read)[ FD ]
