Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private synchronized void executePrebuildCache() [ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_4 $$ String pathStr = ""[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_5 $$ String[] paths = null[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_6 $$ XMLCacheBuilder cacheBuilder = null[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_7 $$ if (this.getConfigPath() != null) [ CD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()[ CD ]
Line_6 $$ XMLCacheBuilder cacheBuilder = null-->Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()[ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()[ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()[ CD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_9 $$ if (cacheBuilder == null)[ CD ]
Line_6 $$ XMLCacheBuilder cacheBuilder = null-->Line_9 $$ if (cacheBuilder == null)[ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_9 $$ if (cacheBuilder == null)[ FD ]
Line_9 $$ if (cacheBuilder == null)-->Line_9 $$ return[ CD ]
Line_12 $$ FileInputStream is = new FileInputStream(file)-->Line_15 $$ if (is != null) [ FD ]
Line_15 $$ if (is != null) -->Line_16 $$ byte[] buf = new byte[8192][ CD ]
Line_15 $$ if (is != null) -->Line_17 $$ while (((length = is.read(buf)) != -1)) [ CD ]
Line_15 $$ if (is != null) -->Line_15 $$ if (is != null) [ CD ]
Line_17 $$ while (((length = is.read(buf)) != -1)) -->Line_17 $$ while (((length = is.read(buf)) != -1)) [ FD ]
Line_14 $$ int length = 0-->Line_17 $$ while (((length = is.read(buf)) != -1)) [ FD ]
Line_17 $$ while (((length = is.read(buf)) != -1)) -->Line_17 $$ while (((length = is.read(buf)) != -1)) [ CD ]
Line_12 $$ FileInputStream is = new FileInputStream(file)-->Line_17 $$ while (((length = is.read(buf)) != -1)) [ FD ]
Line_16 $$ byte[] buf = new byte[8192]-->Line_17 $$ while (((length = is.read(buf)) != -1)) [ FD ]
Line_17 $$ while (((length = is.read(buf)) != -1)) -->Line_18 $$ os.write(buf, 0, length)[ CD ]
Line_13 $$ OutputStream os = new ByteArrayOutputStream()-->Line_18 $$ os.write(buf, 0, length)[ FD ]
Line_16 $$ byte[] buf = new byte[8192]-->Line_18 $$ os.write(buf, 0, length)[ FD ]
Line_17 $$ while (((length = is.read(buf)) != -1)) -->Line_18 $$ os.write(buf, 0, length)[ FD ]
Line_14 $$ int length = 0-->Line_18 $$ os.write(buf, 0, length)[ FD ]
Line_15 $$ if (is != null) -->Line_20 $$ is.close()[ CD ]
Line_12 $$ FileInputStream is = new FileInputStream(file)-->Line_20 $$ is.close()[ FD ]
Line_15 $$ if (is != null) -->Line_21 $$ os.flush()[ CD ]
Line_13 $$ OutputStream os = new ByteArrayOutputStream()-->Line_21 $$ os.flush()[ FD ]
Line_15 $$ if (is != null) -->Line_22 $$ os.close()[ CD ]
Line_13 $$ OutputStream os = new ByteArrayOutputStream()-->Line_22 $$ os.close()[ FD ]
Line_15 $$ if (is != null) -->Line_23 $$ is.close()[ CD ]
Line_12 $$ FileInputStream is = new FileInputStream(file)-->Line_23 $$ is.close()[ FD ]
Line_25 $$ String filesStr = os.toString()-->Line_25 $$ String filesStr = os.toString()[ CD ]
Line_13 $$ OutputStream os = new ByteArrayOutputStream()-->Line_25 $$ String filesStr = os.toString()[ FD ]
Line_25 $$ String filesStr = os.toString()-->Line_26 $$ if (filesStr == null)[ FD ]
Line_26 $$ if (filesStr == null)-->Line_26 $$ return[ CD ]
Line_5 $$ String[] paths = null-->Line_27 $$ paths = filesStr.split("\n")[ FD ]
Line_27 $$ paths = filesStr.split("\n")-->Line_27 $$ paths = filesStr.split("\n")[ FD ]
Line_27 $$ paths = filesStr.split("\n")-->Line_27 $$ paths = filesStr.split("\n")[ CD ]
Line_25 $$ String filesStr = os.toString()-->Line_27 $$ paths = filesStr.split("\n")[ FD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_34 $$ XMLRoot root = ConfigureDigester.getXmlRoot()[ CD ]
Line_34 $$ XMLRoot root = ConfigureDigester.getXmlRoot()-->Line_34 $$ XMLRoot root = ConfigureDigester.getXmlRoot()[ CD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_35 $$ cacheBuilder = root.getCacheBuilder()[ CD ]
Line_6 $$ XMLCacheBuilder cacheBuilder = null-->Line_35 $$ cacheBuilder = root.getCacheBuilder()[ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_35 $$ cacheBuilder = root.getCacheBuilder()[ FD ]
Line_35 $$ cacheBuilder = root.getCacheBuilder()-->Line_35 $$ cacheBuilder = root.getCacheBuilder()[ FD ]
Line_35 $$ cacheBuilder = root.getCacheBuilder()-->Line_35 $$ cacheBuilder = root.getCacheBuilder()[ CD ]
Line_34 $$ XMLRoot root = ConfigureDigester.getXmlRoot()-->Line_35 $$ cacheBuilder = root.getCacheBuilder()[ FD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_36 $$ if (cacheBuilder == null)[ CD ]
Line_6 $$ XMLCacheBuilder cacheBuilder = null-->Line_36 $$ if (cacheBuilder == null)[ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_36 $$ if (cacheBuilder == null)[ FD ]
Line_35 $$ cacheBuilder = root.getCacheBuilder()-->Line_36 $$ if (cacheBuilder == null)[ FD ]
Line_36 $$ if (cacheBuilder == null)-->Line_36 $$ return[ CD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_37 $$ pathStr = cacheBuilder.getPath()[ CD ]
Line_4 $$ String pathStr = ""-->Line_37 $$ pathStr = cacheBuilder.getPath()[ FD ]
Line_37 $$ pathStr = cacheBuilder.getPath()-->Line_37 $$ pathStr = cacheBuilder.getPath()[ FD ]
Line_37 $$ pathStr = cacheBuilder.getPath()-->Line_37 $$ pathStr = cacheBuilder.getPath()[ CD ]
Line_6 $$ XMLCacheBuilder cacheBuilder = null-->Line_37 $$ pathStr = cacheBuilder.getPath()[ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_37 $$ pathStr = cacheBuilder.getPath()[ FD ]
Line_35 $$ cacheBuilder = root.getCacheBuilder()-->Line_37 $$ pathStr = cacheBuilder.getPath()[ FD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_38 $$ if (pathStr == null)[ CD ]
Line_4 $$ String pathStr = ""-->Line_38 $$ if (pathStr == null)[ FD ]
Line_37 $$ pathStr = cacheBuilder.getPath()-->Line_38 $$ if (pathStr == null)[ FD ]
Line_38 $$ if (pathStr == null)-->Line_38 $$ return[ CD ]
Line_7 $$ if (this.getConfigPath() != null) -->Line_39 $$ paths = pathStr.split("\n")[ CD ]
Line_5 $$ String[] paths = null-->Line_39 $$ paths = pathStr.split("\n")[ FD ]
Line_27 $$ paths = filesStr.split("\n")-->Line_39 $$ paths = pathStr.split("\n")[ FD ]
Line_39 $$ paths = pathStr.split("\n")-->Line_39 $$ paths = pathStr.split("\n")[ FD ]
Line_39 $$ paths = pathStr.split("\n")-->Line_39 $$ paths = pathStr.split("\n")[ CD ]
Line_4 $$ String pathStr = ""-->Line_39 $$ paths = pathStr.split("\n")[ FD ]
Line_37 $$ pathStr = cacheBuilder.getPath()-->Line_39 $$ paths = pathStr.split("\n")[ FD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_41 $$ logger.warn("[prebuildCache start:" + new java.util.Date() + "]")[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_42 $$ for (int i = 0; i < paths.length; i++) [ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_2 $$ private synchronized void executePrebuildCache() [ CD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_42 $$ for (int i = 0; i < paths.length; i++) [ CD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_42 $$ for (int i = 0; i < paths.length; i++) [ CD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_42 $$ for (int i = 0; i < paths.length; i++) [ FD ]
Line_46 $$ URL url = new URL(path)-->Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_48 $$ huc.setDoInput(true)[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_49 $$ huc.setDoOutput(true)[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_50 $$ huc.setUseCaches(false)[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_51 $$ huc.setRequestProperty("Content-Type", "text/html")[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_52 $$ DataOutputStream dos = new DataOutputStream(huc.getOutputStream())[ FD ]
Line_52 $$ DataOutputStream dos = new DataOutputStream(huc.getOutputStream())-->Line_53 $$ dos.flush()[ FD ]
Line_52 $$ DataOutputStream dos = new DataOutputStream(huc.getOutputStream())-->Line_54 $$ dos.close()[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_55 $$ BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(huc.getInputStream()))[ FD ]
Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)-->Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)[ FD ]
Line_57 $$ String line-->Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)[ FD ]
Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)-->Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)[ CD ]
Line_55 $$ BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(huc.getInputStream()))-->Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)[ FD ]
Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)-->Line_58 $$ result.append(line)[ CD ]
Line_56 $$ StringBuffer result = new StringBuffer()-->Line_58 $$ result.append(line)[ FD ]
Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)-->Line_58 $$ result.append(line)[ FD ]
Line_57 $$ String line-->Line_58 $$ result.append(line)[ FD ]
Line_55 $$ BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(huc.getInputStream()))-->Line_59 $$ bufferedReader.close()[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_60 $$ huc.disconnect()[ FD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_71 $$ logger.warn("[prebuildCache end:" + new java.util.Date() + "]")[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_72 $$ logger.info("[Time to migrate cache]")[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_73 $$ if (CacheManager.getPreCacheMap() == null || CacheManager.getPreCacheMap().size() == 0) [ CD ]
Line_73 $$ if (CacheManager.getPreCacheMap() == null || CacheManager.getPreCacheMap().size() == 0) -->Line_74 $$ logger.warn("[****Something wrong in prebuild cache process is CACHE_SERVER dead? escape sending cache to CLIENT****]")[ CD ]
Line_73 $$ if (CacheManager.getPreCacheMap() == null || CacheManager.getPreCacheMap().size() == 0) -->Line_75 $$ return[ CD ]
Line_73 $$ if (CacheManager.getPreCacheMap() == null || CacheManager.getPreCacheMap().size() == 0) -->Line_77 $$ CacheManager.migrateCache()[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_79 $$ logger.info("[Cache migration finish!]")[ CD ]
Line_2 $$ private synchronized void executePrebuildCache() -->Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) [ CD ]
Line_6 $$ XMLCacheBuilder cacheBuilder = null-->Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) [ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) [ FD ]
Line_35 $$ cacheBuilder = root.getCacheBuilder()-->Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) [ FD ]
Line_6 $$ XMLCacheBuilder cacheBuilder = null-->Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) [ FD ]
Line_8 $$ cacheBuilder = CompositePageUtil.getCacheBuilder()-->Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) [ FD ]
Line_35 $$ cacheBuilder = root.getCacheBuilder()-->Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) [ FD ]
Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) -->Line_81 $$ logger.info("Sending cache to CLIENT")[ CD ]
Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) -->Line_82 $$ if (cuttleManagerList != null) [ CD ]
Line_82 $$ if (cuttleManagerList != null) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ CD ]
Line_82 $$ if (cuttleManagerList != null) -->Line_82 $$ if (cuttleManagerList != null) [ CD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ FD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ CD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ CD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ FD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ FD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_85 $$ CuttleManager cuttleManager = (CuttleManager) cuttleManagerList.get(i)[ FD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_85 $$ CuttleManager cuttleManager = (CuttleManager) cuttleManagerList.get(i)[ FD ]
Line_85 $$ CuttleManager cuttleManager = (CuttleManager) cuttleManagerList.get(i)-->Line_86 $$ cuttleManager.migrateCache(CacheManager.getCacheTimeoutMap(), CacheManager.getCacheMap())[ FD ]
Line_80 $$ if (cacheBuilder.getPoint() != null && cacheBuilder.getPoint().equals("SERVER")) -->Line_94 $$ logger.info("Cache migrate to CLIENT finished!")[ CD ]
Line_17 $$ while (((length = is.read(buf)) != -1)) -->Line_18 $$ os.write(buf, 0, length)[ FD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_42 $$ for (int i = 0; i < paths.length; i++) [ FD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_42 $$ for (int i = 0; i < paths.length; i++) [ FD ]
Line_42 $$ for (int i = 0; i < paths.length; i++) -->Line_42 $$ for (int i = 0; i < paths.length; i++) [ FD ]
Line_46 $$ URL url = new URL(path)-->Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_48 $$ huc.setDoInput(true)[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_49 $$ huc.setDoOutput(true)[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_50 $$ huc.setUseCaches(false)[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_51 $$ huc.setRequestProperty("Content-Type", "text/html")[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_52 $$ DataOutputStream dos = new DataOutputStream(huc.getOutputStream())[ FD ]
Line_52 $$ DataOutputStream dos = new DataOutputStream(huc.getOutputStream())-->Line_53 $$ dos.flush()[ FD ]
Line_52 $$ DataOutputStream dos = new DataOutputStream(huc.getOutputStream())-->Line_54 $$ dos.close()[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_55 $$ BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(huc.getInputStream()))[ FD ]
Line_55 $$ BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(huc.getInputStream()))-->Line_59 $$ bufferedReader.close()[ FD ]
Line_47 $$ HttpURLConnection huc = (HttpURLConnection) url.openConnection()-->Line_60 $$ huc.disconnect()[ FD ]
Line_58 $$ while (null != (line = bufferedReader.readLine())) result.append(line)-->Line_58 $$ result.append(line)[ FD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ FD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ FD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) [ FD ]
Line_83 $$ for (int i = 0; i < cuttleManagerList.size(); i++) -->Line_85 $$ CuttleManager cuttleManager = (CuttleManager) cuttleManagerList.get(i)[ FD ]
Line_85 $$ CuttleManager cuttleManager = (CuttleManager) cuttleManagerList.get(i)-->Line_86 $$ cuttleManager.migrateCache(CacheManager.getCacheTimeoutMap(), CacheManager.getCacheMap())[ FD ]
