Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testDecode1000BinaryStore() throws Exception [ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/DataStore/DataStore.xsd", getClass(), m_compilerErrors)[ CD ]
Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/DataStore/DataStore.xsd", getClass(), m_compilerErrors)-->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/DataStore/DataStore.xsd", getClass(), m_compilerErrors)[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_4 $$ Assert.assertEquals(0, m_compilerErrors.getTotalCount())[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS)[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_6 $$ String[] base64Values100 = [ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_7 $$ AlignmentType alignment = AlignmentType.bitPacked[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_8 $$ Transmogrifier encoder = new Transmogrifier()[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_9 $$ encoder.setEXISchema(grammarCache)[ CD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_9 $$ encoder.setEXISchema(grammarCache)[ FD ]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS)-->Line_9 $$ encoder.setEXISchema(grammarCache)[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_10 $$ encoder.setAlignmentType(alignment)[ CD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_10 $$ encoder.setAlignmentType(alignment)[ FD ]
Line_7 $$ AlignmentType alignment = AlignmentType.bitPacked-->Line_10 $$ encoder.setAlignmentType(alignment)[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_12 $$ encoder.setOutputStream(baos)[ CD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_12 $$ encoder.setOutputStream(baos)[ FD ]
Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_12 $$ encoder.setOutputStream(baos)[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_13 $$ URL url = resolveSystemIdAsURL("/DataStore/instance/1000BinaryStore.xml")[ CD ]
Line_13 $$ URL url = resolveSystemIdAsURL("/DataStore/instance/1000BinaryStore.xml")-->Line_13 $$ URL url = resolveSystemIdAsURL("/DataStore/instance/1000BinaryStore.xml")[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_14 $$ encoder.encode(new InputSource(url.openStream()))[ CD ]
Line_8 $$ Transmogrifier encoder = new Transmogrifier()-->Line_14 $$ encoder.encode(new InputSource(url.openStream()))[ FD ]
Line_13 $$ URL url = resolveSystemIdAsURL("/DataStore/instance/1000BinaryStore.xml")-->Line_14 $$ encoder.encode(new InputSource(url.openStream()))[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_15 $$ byte[] bts = baos.toByteArray()[ CD ]
Line_15 $$ byte[] bts = baos.toByteArray()-->Line_15 $$ byte[] bts = baos.toByteArray()[ CD ]
Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_15 $$ byte[] bts = baos.toByteArray()[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_16 $$ Scanner scanner[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_17 $$ int n_texts[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_18 $$ EXIDecoder decoder = new EXIDecoder(999)[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_19 $$ decoder.setEXISchema(grammarCache)[ CD ]
Line_18 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_19 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS)-->Line_19 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_20 $$ decoder.setAlignmentType(alignment)[ CD ]
Line_18 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_20 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_7 $$ AlignmentType alignment = AlignmentType.bitPacked-->Line_20 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_21 $$ decoder.setInputStream(new ByteArrayInputStream(bts))[ CD ]
Line_18 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_21 $$ decoder.setInputStream(new ByteArrayInputStream(bts))[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_22 $$ scanner = decoder.processHeader()[ CD ]
Line_16 $$ Scanner scanner-->Line_22 $$ scanner = decoder.processHeader()[ FD ]
Line_22 $$ scanner = decoder.processHeader()-->Line_22 $$ scanner = decoder.processHeader()[ FD ]
Line_22 $$ scanner = decoder.processHeader()-->Line_22 $$ scanner = decoder.processHeader()[ CD ]
Line_18 $$ EXIDecoder decoder = new EXIDecoder(999)-->Line_22 $$ scanner = decoder.processHeader()[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_23 $$ EXIEvent exiEvent[ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_24 $$ n_texts = 0[ CD ]
Line_17 $$ int n_texts-->Line_24 $$ n_texts = 0[ FD ]
Line_24 $$ n_texts = 0-->Line_24 $$ n_texts = 0[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) [ CD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_2 $$ public void testDecode1000BinaryStore() throws Exception [ CD ]
Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_23 $$ EXIEvent exiEvent-->Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) [ CD ]
Line_16 $$ Scanner scanner-->Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_22 $$ scanner = decoder.processHeader()-->Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_26 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ CD ]
Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_26 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_23 $$ EXIEvent exiEvent-->Line_26 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_26 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_27 $$ if (++n_texts % 100 == 0) [ CD ]
Line_17 $$ int n_texts-->Line_27 $$ if (++n_texts % 100 == 0) [ FD ]
Line_24 $$ n_texts = 0-->Line_27 $$ if (++n_texts % 100 == 0) [ FD ]
Line_27 $$ if (++n_texts % 100 == 0) -->Line_28 $$ String expected = base64Values100[(n_texts / 100) - 1][ CD ]
Line_27 $$ if (++n_texts % 100 == 0) -->Line_29 $$ String val = exiEvent.getCharacters().makeString()[ CD ]
Line_29 $$ String val = exiEvent.getCharacters().makeString()-->Line_29 $$ String val = exiEvent.getCharacters().makeString()[ CD ]
Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_29 $$ String val = exiEvent.getCharacters().makeString()[ FD ]
Line_23 $$ EXIEvent exiEvent-->Line_29 $$ String val = exiEvent.getCharacters().makeString()[ FD ]
Line_27 $$ if (++n_texts % 100 == 0) -->Line_30 $$ Assert.assertEquals(expected, val)[ CD ]
Line_28 $$ String expected = base64Values100[(n_texts / 100) - 1]-->Line_30 $$ Assert.assertEquals(expected, val)[ FD ]
Line_29 $$ String val = exiEvent.getCharacters().makeString()-->Line_30 $$ Assert.assertEquals(expected, val)[ FD ]
Line_2 $$ public void testDecode1000BinaryStore() throws Exception -->Line_34 $$ Assert.assertEquals(1000, n_texts)[ CD ]
Line_17 $$ int n_texts-->Line_34 $$ Assert.assertEquals(1000, n_texts)[ FD ]
Line_24 $$ n_texts = 0-->Line_34 $$ Assert.assertEquals(1000, n_texts)[ FD ]
Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_26 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_25 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_29 $$ String val = exiEvent.getCharacters().makeString()[ FD ]
Line_28 $$ String expected = base64Values100[(n_texts / 100) - 1]-->Line_30 $$ Assert.assertEquals(expected, val)[ FD ]
Line_29 $$ String val = exiEvent.getCharacters().makeString()-->Line_30 $$ Assert.assertEquals(expected, val)[ FD ]
