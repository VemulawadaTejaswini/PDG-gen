Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException [ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_3 $$ ZipOutputStream myZipOut = null[ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_4 $$ BufferedInputStream myDocumentInputStream = null[ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_5 $$ String myFinalFile = null[ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_6 $$ String myTargetPath = null[ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_7 $$ String myTargetFileName = null[ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_8 $$ String myInputFileName = null[ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_9 $$ byte[] myBytesBuffer = null[ CD ]
Line_2 $$ public void zipDocsetFiles(SaxHandler theXmlHandler, int theEventId, Attributes theAtts) throws BpsProcessException -->Line_10 $$ int myLength = 0[ CD ]
Line_3 $$ ZipOutputStream myZipOut = null-->Line_12 $$ myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile))[ FD ]
Line_12 $$ myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile))-->Line_12 $$ myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile))[ FD ]
Line_3 $$ ZipOutputStream myZipOut = null-->Line_13 $$ myZipOut.putNextEntry(new ZipEntry(myTargetPath + myTargetFileName))[ FD ]
Line_12 $$ myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile))-->Line_13 $$ myZipOut.putNextEntry(new ZipEntry(myTargetPath + myTargetFileName))[ FD ]
Line_4 $$ BufferedInputStream myDocumentInputStream = null-->Line_14 $$ myDocumentInputStream = new BufferedInputStream(new FileInputStream(myInputFileName))[ FD ]
Line_14 $$ myDocumentInputStream = new BufferedInputStream(new FileInputStream(myInputFileName))-->Line_14 $$ myDocumentInputStream = new BufferedInputStream(new FileInputStream(myInputFileName))[ FD ]
Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)-->Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_10 $$ int myLength = 0-->Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)-->Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)[ CD ]
Line_4 $$ BufferedInputStream myDocumentInputStream = null-->Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_14 $$ myDocumentInputStream = new BufferedInputStream(new FileInputStream(myInputFileName))-->Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_9 $$ byte[] myBytesBuffer = null-->Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)-->Line_15 $$ myZipOut.write(myBytesBuffer, 0, myLength)[ CD ]
Line_3 $$ ZipOutputStream myZipOut = null-->Line_15 $$ myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_12 $$ myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile))-->Line_15 $$ myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_9 $$ byte[] myBytesBuffer = null-->Line_15 $$ myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)-->Line_15 $$ myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_10 $$ int myLength = 0-->Line_15 $$ myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
Line_3 $$ ZipOutputStream myZipOut = null-->Line_16 $$ myZipOut.closeEntry()[ FD ]
Line_12 $$ myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile))-->Line_16 $$ myZipOut.closeEntry()[ FD ]
Line_3 $$ ZipOutputStream myZipOut = null-->Line_17 $$ myZipOut.close()[ FD ]
Line_12 $$ myZipOut = new ZipOutputStream(new FileOutputStream(myFinalFile))-->Line_17 $$ myZipOut.close()[ FD ]
Line_15 $$ while ((myLength = myDocumentInputStream.read(myBytesBuffer, 0, 4096)) != -1) myZipOut.write(myBytesBuffer, 0, myLength)-->Line_15 $$ myZipOut.write(myBytesBuffer, 0, myLength)[ FD ]
