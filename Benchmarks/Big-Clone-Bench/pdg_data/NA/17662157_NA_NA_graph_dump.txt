Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] argz) [ CD ]
Line_2 $$ public static void main(String[] argz) -->Line_3 $$ int X, Y, Z[ CD ]
Line_2 $$ public static void main(String[] argz) -->Line_4 $$ X = 256[ CD ]
Line_3 $$ int X, Y, Z-->Line_4 $$ X = 256[ FD ]
Line_4 $$ X = 256-->Line_4 $$ X = 256[ FD ]
Line_2 $$ public static void main(String[] argz) -->Line_5 $$ Y = 256[ CD ]
Line_3 $$ int X, Y, Z-->Line_5 $$ Y = 256[ FD ]
Line_5 $$ Y = 256-->Line_5 $$ Y = 256[ FD ]
Line_2 $$ public static void main(String[] argz) -->Line_6 $$ Z = 256[ CD ]
Line_3 $$ int X, Y, Z-->Line_6 $$ Z = 256[ FD ]
Line_6 $$ Z = 256-->Line_6 $$ Z = 256[ FD ]
Line_10 $$ FileChannel out = out_stream.getChannel()-->Line_10 $$ FileChannel out = out_stream.getChannel()[ CD ]
Line_9 $$ FileOutputStream out_stream = new FileOutputStream(new File(work_folder + "\\converted.dat"))-->Line_10 $$ FileChannel out = out_stream.getChannel()[ FD ]
Line_13 $$ FileChannel in = new FileInputStream(file).getChannel()-->Line_13 $$ FileChannel in = new FileInputStream(file).getChannel()[ CD ]
Line_14 $$ ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length())-->Line_14 $$ ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length())[ CD ]
Line_12 $$ File file = new File(work_folder + "\\" + f_name)-->Line_14 $$ ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length())[ FD ]
Line_13 $$ FileChannel in = new FileInputStream(file).getChannel()-->Line_15 $$ in.read(buffa)[ FD ]
Line_14 $$ ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length())-->Line_15 $$ in.read(buffa)[ FD ]
Line_13 $$ FileChannel in = new FileInputStream(file).getChannel()-->Line_16 $$ in.close()[ FD ]
Line_18 $$ FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N)-->Line_18 $$ FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N)[ CD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ CD ]
Line_14 $$ ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length())-->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ CD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ CD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ CD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_21 $$ byte c = buffa.get(i)[ CD ]
Line_21 $$ byte c = buffa.get(i)-->Line_21 $$ byte c = buffa.get(i)[ CD ]
Line_14 $$ ByteBuffer buffa = BufferUtil.newByteBuffer((int) file.length())-->Line_21 $$ byte c = buffa.get(i)[ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_21 $$ byte c = buffa.get(i)[ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_22 $$ min = Math.min(min, (float) (c))[ CD ]
Line_22 $$ min = Math.min(min, (float) (c))-->Line_22 $$ min = Math.min(min, (float) (c))[ FD ]
Line_19 $$ float min = Float.MAX_VALUE-->Line_22 $$ min = Math.min(min, (float) (c))[ FD ]
Line_22 $$ min = Math.min(min, (float) (c))-->Line_22 $$ min = Math.min(min, (float) (c))[ CD ]
Line_22 $$ min = Math.min(min, (float) (c))-->Line_22 $$ min = Math.min(min, (float) (c))[ FD ]
Line_19 $$ float min = Float.MAX_VALUE-->Line_22 $$ min = Math.min(min, (float) (c))[ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_23 $$ output_data.put((float) (c))[ CD ]
Line_18 $$ FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N)-->Line_23 $$ output_data.put((float) (c))[ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ FD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ CD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ CD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ FD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ CD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ CD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_3 $$ int X, Y, Z-->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_5 $$ Y = 256-->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ CD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ CD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_27 $$ for (int k = 0; k < Z; ++k) [ CD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ CD ]
Line_3 $$ int X, Y, Z-->Line_27 $$ for (int k = 0; k < Z; ++k) [ FD ]
Line_6 $$ Z = 256-->Line_27 $$ for (int k = 0; k < Z; ++k) [ FD ]
Line_27 $$ for (int k = 0; k < Z; ++k) -->Line_27 $$ for (int k = 0; k < Z; ++k) [ CD ]
Line_27 $$ for (int k = 0; k < Z; ++k) -->Line_27 $$ for (int k = 0; k < Z; ++k) [ CD ]
Line_27 $$ for (int k = 0; k < Z; ++k) -->Line_27 $$ for (int k = 0; k < Z; ++k) [ FD ]
Line_27 $$ for (int k = 0; k < Z; ++k) -->Line_28 $$ output_data.put(min)[ CD ]
Line_18 $$ FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N)-->Line_28 $$ output_data.put(min)[ FD ]
Line_22 $$ min = Math.min(min, (float) (c))-->Line_28 $$ output_data.put(min)[ FD ]
Line_19 $$ float min = Float.MAX_VALUE-->Line_28 $$ output_data.put(min)[ FD ]
Line_18 $$ FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N)-->Line_32 $$ output_data.rewind()[ FD ]
Line_18 $$ FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N)-->Line_33 $$ System.out.println("size of output_data = " + Integer.toString(output_data.capacity()))[ FD ]
Line_10 $$ FileChannel out = out_stream.getChannel()-->Line_34 $$ out.write(BufferUtil.copyFloatBufferAsByteBuffer(output_data))[ FD ]
Line_18 $$ FloatBuffer output_data = BufferUtil.newFloatBuffer(N * N * N)-->Line_34 $$ out.write(BufferUtil.copyFloatBufferAsByteBuffer(output_data))[ FD ]
Line_35 $$ ByteBuffer buffa2 = BufferUtil.newByteBuffer(2)-->Line_35 $$ ByteBuffer buffa2 = BufferUtil.newByteBuffer(2)[ CD ]
Line_35 $$ ByteBuffer buffa2 = BufferUtil.newByteBuffer(2)-->Line_36 $$ buffa2.put((byte) '.')[ FD ]
Line_10 $$ FileChannel out = out_stream.getChannel()-->Line_37 $$ out.close()[ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) [ FD ]
Line_20 $$ for (int i = 0, j = 0; i < buffa.capacity(); i++, j++) -->Line_21 $$ byte c = buffa.get(i)[ FD ]
Line_22 $$ min = Math.min(min, (float) (c))-->Line_22 $$ min = Math.min(min, (float) (c))[ FD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ FD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ FD ]
Line_25 $$ for (int i = 0; i < Y - X; ++i) -->Line_25 $$ for (int i = 0; i < Y - X; ++i) [ FD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_26 $$ for (int j = 0; j < Y; ++j) -->Line_26 $$ for (int j = 0; j < Y; ++j) [ FD ]
Line_27 $$ for (int k = 0; k < Z; ++k) -->Line_27 $$ for (int k = 0; k < Z; ++k) [ FD ]
Line_27 $$ for (int k = 0; k < Z; ++k) -->Line_27 $$ for (int k = 0; k < Z; ++k) [ FD ]
Line_27 $$ for (int k = 0; k < Z; ++k) -->Line_27 $$ for (int k = 0; k < Z; ++k) [ FD ]
