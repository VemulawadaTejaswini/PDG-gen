Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void reconfigureDebug() [ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_5 $$ String methodString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.method']/@value")[ CD ]
Line_5 $$ String methodString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.method']/@value")-->Line_5 $$ String methodString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.method']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_6 $$ String levelString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.level']/@value")[ CD ]
Line_6 $$ String levelString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.level']/@value")-->Line_6 $$ String levelString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.level']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_7 $$ String quietString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.quiet']/@value")[ CD ]
Line_7 $$ String quietString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.quiet']/@value")-->Line_7 $$ String quietString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.quiet']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_8 $$ String fileString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.file']/@value")[ CD ]
Line_8 $$ String fileString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.file']/@value")-->Line_8 $$ String fileString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.file']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_9 $$ String filemodeString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.filemode']/@value")[ CD ]
Line_9 $$ String filemodeString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.filemode']/@value")-->Line_9 $$ String filemodeString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.filemode']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_10 $$ String calltraceString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.calltrace']/@value")[ CD ]
Line_10 $$ String calltraceString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.calltrace']/@value")-->Line_10 $$ String calltraceString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.calltrace']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_11 $$ String rotateTimeoutString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatetimeout']/@value")[ CD ]
Line_11 $$ String rotateTimeoutString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatetimeout']/@value")-->Line_11 $$ String rotateTimeoutString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatetimeout']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_12 $$ String rotateDestString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedest']/@value")[ CD ]
Line_12 $$ String rotateDestString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedest']/@value")-->Line_12 $$ String rotateDestString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedest']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_13 $$ String rotateCompressString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatecompress']/@value")[ CD ]
Line_13 $$ String rotateCompressString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatecompress']/@value")-->Line_13 $$ String rotateCompressString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatecompress']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_14 $$ String rotateDaysString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedays']/@value")[ CD ]
Line_14 $$ String rotateDaysString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedays']/@value")-->Line_14 $$ String rotateDaysString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedays']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_15 $$ String rotateArchiveString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatearchive']/@value")[ CD ]
Line_15 $$ String rotateArchiveString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatearchive']/@value")-->Line_15 $$ String rotateArchiveString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatearchive']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_16 $$ String rotateDeleteString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedelete']/@value")[ CD ]
Line_16 $$ String rotateDeleteString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedelete']/@value")-->Line_16 $$ String rotateDeleteString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedelete']/@value")[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_17 $$ String dirName = "."[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_18 $$ if (rotateTimeoutString != null) [ CD ]
Line_11 $$ String rotateTimeoutString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatetimeout']/@value")-->Line_18 $$ if (rotateTimeoutString != null) [ FD ]
Line_18 $$ if (rotateTimeoutString != null) -->Line_19 $$ rotateTimeout = Integer.parseInt(rotateTimeoutString)[ CD ]
Line_11 $$ String rotateTimeoutString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatetimeout']/@value")-->Line_19 $$ rotateTimeout = Integer.parseInt(rotateTimeoutString)[ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_21 $$ if (rotateDestString != null) [ CD ]
Line_12 $$ String rotateDestString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedest']/@value")-->Line_21 $$ if (rotateDestString != null) [ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_24 $$ if (rotateCompressString != null && rotateCompressString.equalsIgnoreCase("true")) [ CD ]
Line_13 $$ String rotateCompressString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatecompress']/@value")-->Line_24 $$ if (rotateCompressString != null && rotateCompressString.equalsIgnoreCase("true")) [ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_27 $$ if (rotateDaysString != null) [ CD ]
Line_14 $$ String rotateDaysString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedays']/@value")-->Line_27 $$ if (rotateDaysString != null) [ FD ]
Line_27 $$ if (rotateDaysString != null) -->Line_28 $$ rotateDays = Integer.parseInt(rotateDaysString)[ CD ]
Line_14 $$ String rotateDaysString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedays']/@value")-->Line_28 $$ rotateDays = Integer.parseInt(rotateDaysString)[ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_30 $$ if (rotateArchiveString != null) [ CD ]
Line_15 $$ String rotateArchiveString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatearchive']/@value")-->Line_30 $$ if (rotateArchiveString != null) [ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_33 $$ if (rotateDeleteString != null && rotateDeleteString.equalsIgnoreCase("true")) [ CD ]
Line_16 $$ String rotateDeleteString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.rotatedelete']/@value")-->Line_33 $$ if (rotateDeleteString != null && rotateDeleteString.equalsIgnoreCase("true")) [ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_36 $$ if (fileString != null && fileString.indexOf("/") != -1) [ CD ]
Line_8 $$ String fileString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.file']/@value")-->Line_36 $$ if (fileString != null && fileString.indexOf("/") != -1) [ FD ]
Line_36 $$ if (fileString != null && fileString.indexOf("/") != -1) -->Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))[ CD ]
Line_17 $$ String dirName = "."-->Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))[ FD ]
Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))-->Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))[ FD ]
Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))-->Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))[ CD ]
Line_8 $$ String fileString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.file']/@value")-->Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))[ FD ]
Line_8 $$ String fileString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.file']/@value")-->Line_37 $$ dirName = fileString.substring(0, fileString.lastIndexOf("/"))[ FD ]
Line_36 $$ if (fileString != null && fileString.indexOf("/") != -1) -->Line_38 $$ (new File(dirName)).mkdirs()[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_40 $$ if (methodString != null) [ CD ]
Line_5 $$ String methodString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.method']/@value")-->Line_40 $$ if (methodString != null) [ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_45 $$ if (levelString != null) [ CD ]
Line_6 $$ String levelString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.level']/@value")-->Line_45 $$ if (levelString != null) [ FD ]
Line_45 $$ if (levelString != null) -->Line_46 $$ logValue = Integer.parseInt(levelString)[ CD ]
Line_6 $$ String levelString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.level']/@value")-->Line_46 $$ logValue = Integer.parseInt(levelString)[ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_50 $$ if (calltraceString != null && calltraceString.equalsIgnoreCase("true")) [ CD ]
Line_10 $$ String calltraceString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.calltrace']/@value")-->Line_50 $$ if (calltraceString != null && calltraceString.equalsIgnoreCase("true")) [ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_55 $$ if (logMethod == null) [ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_58 $$ if (quietString != null) [ CD ]
Line_7 $$ String quietString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.quiet']/@value")-->Line_58 $$ if (quietString != null) [ FD ]
Line_58 $$ if (quietString != null) -->Line_59 $$ if (quietString.equalsIgnoreCase("true")) [ CD ]
Line_7 $$ String quietString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.quiet']/@value")-->Line_59 $$ if (quietString.equalsIgnoreCase("true")) [ FD ]
Line_59 $$ if (quietString.equalsIgnoreCase("true")) -->Line_59 $$ if (quietString.equalsIgnoreCase("true")) [ CD ]
Line_7 $$ String quietString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.quiet']/@value")-->Line_59 $$ if (quietString.equalsIgnoreCase("true")) [ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_63 $$ if (logMethod != null) [ CD ]
Line_63 $$ if (logMethod != null) -->Line_64 $$ if (logMethod.equalsIgnoreCase("file")) [ CD ]
Line_64 $$ if (logMethod.equalsIgnoreCase("file")) -->Line_64 $$ if (logMethod.equalsIgnoreCase("file")) [ CD ]
Line_64 $$ if (logMethod.equalsIgnoreCase("file")) -->Line_65 $$ if (fileString != null) [ CD ]
Line_8 $$ String fileString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.file']/@value")-->Line_65 $$ if (fileString != null) [ FD ]
Line_63 $$ if (logMethod != null) -->Line_73 $$ System.err.println("*** A debugging method (debug.method) is required in properties file!")[ CD ]
Line_63 $$ if (logMethod != null) -->Line_74 $$ System.err.println("*** Please refer to configuration documentation.")[ CD ]
Line_63 $$ if (logMethod != null) -->Line_75 $$ System.exit(-1)[ CD ]
Line_2 $$ private static void reconfigureDebug() -->Line_79 $$ if (useFile) [ CD ]
Line_9 $$ String filemodeString = NodeUtil.walkNodeTree(Server.getConfig(), "//configuration/object[@type='engine.debug']/property[@type='engine.filemode']/@value")-->Line_82 $$ if (filemodeString != null && filemodeString.equalsIgnoreCase("append")) [ FD ]
Line_89 $$ Date date = calendar.getTime()-->Line_89 $$ Date date = calendar.getTime()[ CD ]
Line_88 $$ Calendar calendar = new GregorianCalendar()-->Line_89 $$ Date date = calendar.getTime()[ FD ]
Line_90 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z")-->Line_92 $$ ps.println("--- Log file opened " + format1.format(date) + " ---")[ FD ]
Line_89 $$ Date date = calendar.getTime()-->Line_92 $$ ps.println("--- Log file opened " + format1.format(date) + " ---")[ FD ]
Line_2 $$ private static void reconfigureDebug() -->Line_101 $$ if (!registeredSchedule) [ CD ]
Line_101 $$ if (!registeredSchedule) -->Line_103 $$ if (Server.getScheduler() != null) [ CD ]
Line_103 $$ if (Server.getScheduler() != null) -->Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() [ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_106 $$ if (rotateTimeout != 0) [ CD ]
Line_106 $$ if (rotateTimeout != 0) -->Line_107 $$ return rotateTimeout / 10[ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_109 $$ return 0[ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_112 $$ FileChannel srcChannel, destChannel[ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_113 $$ String destOutFile = logFile + "." + System.currentTimeMillis()[ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_114 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz"[ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_115 $$ if (rotateDest != null) [ CD ]
Line_115 $$ if (rotateDest != null) -->Line_116 $$ (new File(rotateDest)).mkdirs()[ CD ]
Line_115 $$ if (rotateDest != null) -->Line_117 $$ if (destOutFile.indexOf("/") != -1) [ CD ]
Line_113 $$ String destOutFile = logFile + "." + System.currentTimeMillis()-->Line_117 $$ if (destOutFile.indexOf("/") != -1) [ FD ]
Line_117 $$ if (destOutFile.indexOf("/") != -1) -->Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)[ CD ]
Line_113 $$ String destOutFile = logFile + "." + System.currentTimeMillis()-->Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)[ FD ]
Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)-->Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)[ FD ]
Line_113 $$ String destOutFile = logFile + "." + System.currentTimeMillis()-->Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)[ FD ]
Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)-->Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)[ FD ]
Line_113 $$ String destOutFile = logFile + "." + System.currentTimeMillis()-->Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)[ FD ]
Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)-->Line_118 $$ destOutFile = rotateDest + "/" + destOutFile.substring(destOutFile.lastIndexOf("/") + 1)[ FD ]
Line_115 $$ if (rotateDest != null) -->Line_120 $$ if (destOutFileCompressed.indexOf("/") != -1) [ CD ]
Line_114 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz"-->Line_120 $$ if (destOutFileCompressed.indexOf("/") != -1) [ FD ]
Line_120 $$ if (destOutFileCompressed.indexOf("/") != -1) -->Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)[ CD ]
Line_114 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz"-->Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)[ FD ]
Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)-->Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)[ FD ]
Line_114 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz"-->Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)[ FD ]
Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)-->Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)[ FD ]
Line_114 $$ String destOutFileCompressed = logFile + "." + System.currentTimeMillis() + ".gz"-->Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)[ FD ]
Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)-->Line_121 $$ destOutFileCompressed = rotateDest + "/" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf("/") + 1)[ FD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_124 $$ if (rotateCompress) [ CD ]
Line_130 $$ while ((len = in.read(buf)) > 0) -->Line_130 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_129 $$ int len-->Line_130 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_130 $$ while ((len = in.read(buf)) > 0) -->Line_130 $$ while ((len = in.read(buf)) > 0) [ CD ]
Line_127 $$ FileInputStream in = new FileInputStream(logFile)-->Line_130 $$ while ((len = in.read(buf)) > 0) [ FD ]
Line_130 $$ while ((len = in.read(buf)) > 0) -->Line_131 $$ out.write(buf, 0, len)[ CD ]
Line_126 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed))-->Line_131 $$ out.write(buf, 0, len)[ FD ]
Line_130 $$ while ((len = in.read(buf)) > 0) -->Line_131 $$ out.write(buf, 0, len)[ FD ]
Line_129 $$ int len-->Line_131 $$ out.write(buf, 0, len)[ FD ]
Line_127 $$ FileInputStream in = new FileInputStream(logFile)-->Line_133 $$ in.close()[ FD ]
Line_126 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed))-->Line_134 $$ out.finish()[ FD ]
Line_126 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed))-->Line_135 $$ out.close()[ FD ]
Line_127 $$ FileInputStream in = new FileInputStream(logFile)-->Line_137 $$ in = null[ FD ]
Line_137 $$ in = null-->Line_137 $$ in = null[ FD ]
Line_126 $$ GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed))-->Line_138 $$ out = null[ FD ]
Line_138 $$ out = null-->Line_138 $$ out = null[ FD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()[ FD ]
Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()-->Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()[ FD ]
Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()-->Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()[ CD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()[ FD ]
Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()-->Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()[ FD ]
Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()-->Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()[ CD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_157 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()-->Line_157 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_157 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()-->Line_157 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_157 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()-->Line_157 $$ destChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_158 $$ srcChannel.close()[ FD ]
Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()-->Line_158 $$ srcChannel.close()[ FD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_159 $$ destChannel.close()[ FD ]
Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()-->Line_159 $$ destChannel.close()[ FD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_160 $$ srcChannel = null[ FD ]
Line_145 $$ srcChannel = new FileInputStream(logFile).getChannel()-->Line_160 $$ srcChannel = null[ FD ]
Line_160 $$ srcChannel = null-->Line_160 $$ srcChannel = null[ FD ]
Line_112 $$ FileChannel srcChannel, destChannel-->Line_161 $$ destChannel = null[ FD ]
Line_151 $$ destChannel = new FileOutputStream(destOutFile).getChannel()-->Line_161 $$ destChannel = null[ FD ]
Line_161 $$ destChannel = null-->Line_161 $$ destChannel = null[ FD ]
Line_124 $$ if (rotateCompress) -->Line_166 $$ Debug.debug("Rotated log file '" + logFile + "' to '" + destOutFile + "'")[ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_168 $$ if (rotateDelete && isFile) [ CD ]
Line_168 $$ if (rotateDelete && isFile) -->Line_175 $$ (new File(logFile)).delete()[ CD ]
Line_168 $$ if (rotateDelete && isFile) -->Line_176 $$ reconfigureDebug()[ CD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_178 $$ if (rotateDest != null) [ CD ]
Line_178 $$ if (rotateDest != null) -->Line_179 $$ long comparisonTime = rotateDays * (60 * 60 * 24 * 1000)[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_180 $$ long currentTime = System.currentTimeMillis()[ CD ]
Line_180 $$ long currentTime = System.currentTimeMillis()-->Line_180 $$ long currentTime = System.currentTimeMillis()[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_181 $$ File fileList[] = (new File(rotateDest)).listFiles()[ CD ]
Line_181 $$ File fileList[] = (new File(rotateDest)).listFiles()-->Line_181 $$ File fileList[] = (new File(rotateDest)).listFiles()[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_182 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd")[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_183 $$ java.util.Date date = new java.util.Date(currentTime)[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_184 $$ String archiveFile = format1.format(date).toString() + ".zip"[ CD ]
Line_182 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd")-->Line_184 $$ String archiveFile = format1.format(date).toString() + ".zip"[ FD ]
Line_90 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z")-->Line_184 $$ String archiveFile = format1.format(date).toString() + ".zip"[ FD ]
Line_183 $$ java.util.Date date = new java.util.Date(currentTime)-->Line_184 $$ String archiveFile = format1.format(date).toString() + ".zip"[ FD ]
Line_89 $$ Date date = calendar.getTime()-->Line_184 $$ String archiveFile = format1.format(date).toString() + ".zip"[ FD ]
Line_178 $$ if (rotateDest != null) -->Line_185 $$ if (rotateArchive != null) [ CD ]
Line_185 $$ if (rotateArchive != null) -->Line_186 $$ archiveFile = rotateArchive + "/" + archiveFile[ CD ]
Line_184 $$ String archiveFile = format1.format(date).toString() + ".zip"-->Line_186 $$ archiveFile = rotateArchive + "/" + archiveFile[ FD ]
Line_186 $$ archiveFile = rotateArchive + "/" + archiveFile-->Line_186 $$ archiveFile = rotateArchive + "/" + archiveFile[ FD ]
Line_184 $$ String archiveFile = format1.format(date).toString() + ".zip"-->Line_186 $$ archiveFile = rotateArchive + "/" + archiveFile[ FD ]
Line_186 $$ archiveFile = rotateArchive + "/" + archiveFile-->Line_186 $$ archiveFile = rotateArchive + "/" + archiveFile[ FD ]
Line_185 $$ if (rotateArchive != null) -->Line_187 $$ (new File(rotateArchive)).mkdirs()[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_189 $$ Archive archive = new Archive(archiveFile)[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_190 $$ for (int i = 0; i < fileList.length; i++) [ CD ]
Line_178 $$ if (rotateDest != null) -->Line_178 $$ if (rotateDest != null) [ CD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_190 $$ for (int i = 0; i < fileList.length; i++) [ CD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_190 $$ for (int i = 0; i < fileList.length; i++) [ CD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_190 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_191 $$ String currentFilename = fileList[i].getName()[ CD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_191 $$ String currentFilename = fileList[i].getName()[ CD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_192 $$ long timeDifference = (currentTime - fileList[i].lastModified())[ CD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [ CD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [ FD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [ FD ]
Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) -->Line_194 $$ if (rotateDest != null) [ CD ]
Line_194 $$ if (rotateDest != null) -->Line_195 $$ currentFilename = rotateDest + "/" + currentFilename[ CD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_195 $$ currentFilename = rotateDest + "/" + currentFilename[ FD ]
Line_195 $$ currentFilename = rotateDest + "/" + currentFilename-->Line_195 $$ currentFilename = rotateDest + "/" + currentFilename[ FD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_195 $$ currentFilename = rotateDest + "/" + currentFilename[ FD ]
Line_195 $$ currentFilename = rotateDest + "/" + currentFilename-->Line_195 $$ currentFilename = rotateDest + "/" + currentFilename[ FD ]
Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) -->Line_197 $$ if (timeDifference > comparisonTime) [ CD ]
Line_192 $$ long timeDifference = (currentTime - fileList[i].lastModified())-->Line_197 $$ if (timeDifference > comparisonTime) [ FD ]
Line_179 $$ long comparisonTime = rotateDays * (60 * 60 * 24 * 1000)-->Line_197 $$ if (timeDifference > comparisonTime) [ FD ]
Line_197 $$ if (timeDifference > comparisonTime) -->Line_198 $$ archive.addFile(fileList[i].getName(), currentFilename)[ CD ]
Line_189 $$ Archive archive = new Archive(archiveFile)-->Line_198 $$ archive.addFile(fileList[i].getName(), currentFilename)[ FD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_198 $$ archive.addFile(fileList[i].getName(), currentFilename)[ FD ]
Line_195 $$ currentFilename = rotateDest + "/" + currentFilename-->Line_198 $$ archive.addFile(fileList[i].getName(), currentFilename)[ FD ]
Line_197 $$ if (timeDifference > comparisonTime) -->Line_199 $$ fileList[i].delete()[ CD ]
Line_178 $$ if (rotateDest != null) -->Line_203 $$ archive = null[ CD ]
Line_189 $$ Archive archive = new Archive(archiveFile)-->Line_203 $$ archive = null[ FD ]
Line_203 $$ archive = null-->Line_203 $$ archive = null[ FD ]
Line_178 $$ if (rotateDest != null) -->Line_205 $$ format1 = null[ CD ]
Line_182 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd")-->Line_205 $$ format1 = null[ FD ]
Line_205 $$ format1 = null-->Line_205 $$ format1 = null[ FD ]
Line_90 $$ DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z")-->Line_205 $$ format1 = null[ FD ]
Line_178 $$ if (rotateDest != null) -->Line_206 $$ date = null[ CD ]
Line_183 $$ java.util.Date date = new java.util.Date(currentTime)-->Line_206 $$ date = null[ FD ]
Line_206 $$ date = null-->Line_206 $$ date = null[ FD ]
Line_89 $$ Date date = calendar.getTime()-->Line_206 $$ date = null[ FD ]
Line_104 $$ Server.getScheduler().register("Log File Rotator for '" + logFile + "'", new SchedulerInterface() -->Line_210 $$ return "Debug Rotator for logs"[ CD ]
Line_130 $$ while ((len = in.read(buf)) > 0) -->Line_131 $$ out.write(buf, 0, len)[ FD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_190 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_190 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_190 $$ for (int i = 0; i < fileList.length; i++) -->Line_190 $$ for (int i = 0; i < fileList.length; i++) [ FD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [ FD ]
Line_195 $$ currentFilename = rotateDest + "/" + currentFilename-->Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [ FD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [ FD ]
Line_195 $$ currentFilename = rotateDest + "/" + currentFilename-->Line_193 $$ if ((rotateCompress && currentFilename.endsWith(".gz")) || (!rotateCompress && currentFilename.indexOf(logFile + ".") != -1)) [ FD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_195 $$ currentFilename = rotateDest + "/" + currentFilename[ FD ]
Line_195 $$ currentFilename = rotateDest + "/" + currentFilename-->Line_195 $$ currentFilename = rotateDest + "/" + currentFilename[ FD ]
Line_192 $$ long timeDifference = (currentTime - fileList[i].lastModified())-->Line_197 $$ if (timeDifference > comparisonTime) [ FD ]
Line_191 $$ String currentFilename = fileList[i].getName()-->Line_198 $$ archive.addFile(fileList[i].getName(), currentFilename)[ FD ]
Line_195 $$ currentFilename = rotateDest + "/" + currentFilename-->Line_198 $$ archive.addFile(fileList[i].getName(), currentFilename)[ FD ]
