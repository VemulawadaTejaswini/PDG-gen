Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public int executeUpdateJT(String sql, Object[][] paramsList) [ CD ]
Line_2 $$ public int executeUpdateJT(String sql, Object[][] paramsList) -->Line_3 $$ Connection connection = null[ CD ]
Line_2 $$ public int executeUpdateJT(String sql, Object[][] paramsList) -->Line_4 $$ connection = this.getConnection()[ CD ]
Line_3 $$ Connection connection = null-->Line_4 $$ connection = this.getConnection()[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_4 $$ connection = this.getConnection()[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_4 $$ connection = this.getConnection()[ CD ]
Line_3 $$ Connection connection = null-->Line_6 $$ connection.setAutoCommit(false)[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_6 $$ connection.setAutoCommit(false)[ FD ]
Line_2 $$ public int executeUpdateJT(String sql, Object[][] paramsList) -->Line_10 $$ PreparedStatement preparedStatement = null[ CD ]
Line_10 $$ PreparedStatement preparedStatement = null-->Line_12 $$ preparedStatement = connection.prepareStatement(sql)[ FD ]
Line_12 $$ preparedStatement = connection.prepareStatement(sql)-->Line_12 $$ preparedStatement = connection.prepareStatement(sql)[ FD ]
Line_12 $$ preparedStatement = connection.prepareStatement(sql)-->Line_12 $$ preparedStatement = connection.prepareStatement(sql)[ CD ]
Line_3 $$ Connection connection = null-->Line_12 $$ preparedStatement = connection.prepareStatement(sql)[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_12 $$ preparedStatement = connection.prepareStatement(sql)[ FD ]
Line_2 $$ public int executeUpdateJT(String sql, Object[][] paramsList) -->Line_12 $$ preparedStatement = connection.prepareStatement(sql)[ FD ]
Line_13 $$ for (int i = 0; i < paramsList.length; i++) -->Line_13 $$ for (int i = 0; i < paramsList.length; i++) [ CD ]
Line_13 $$ for (int i = 0; i < paramsList.length; i++) -->Line_13 $$ for (int i = 0; i < paramsList.length; i++) [ CD ]
Line_13 $$ for (int i = 0; i < paramsList.length; i++) -->Line_13 $$ for (int i = 0; i < paramsList.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < paramsList.length; i++) -->Line_14 $$ if (connection != null && !connection.isClosed()) [ CD ]
Line_14 $$ if (connection != null && !connection.isClosed()) -->Line_14 $$ if (connection != null && !connection.isClosed()) [ CD ]
Line_3 $$ Connection connection = null-->Line_14 $$ if (connection != null && !connection.isClosed()) [ FD ]
Line_4 $$ connection = this.getConnection()-->Line_14 $$ if (connection != null && !connection.isClosed()) [ FD ]
Line_14 $$ if (connection != null && !connection.isClosed()) -->Line_15 $$ InputStream is = null[ CD ]
Line_14 $$ if (connection != null && !connection.isClosed()) -->Line_16 $$ if (paramsList[i].length > 0) [ CD ]
Line_16 $$ if (paramsList[i].length > 0) -->Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) [ CD ]
Line_16 $$ if (paramsList[i].length > 0) -->Line_16 $$ if (paramsList[i].length > 0) [ CD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) [ CD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) [ CD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) [ FD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_18 $$ Object obj = paramsList[i][j][ CD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) [ CD ]
Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) -->Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) [ CD ]
Line_18 $$ Object obj = paramsList[i][j]-->Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) [ FD ]
Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) -->Line_20 $$ File file = (File) obj[ CD ]
Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) -->Line_21 $$ is = new FileInputStream(file)[ CD ]
Line_21 $$ is = new FileInputStream(file)-->Line_21 $$ is = new FileInputStream(file)[ FD ]
Line_15 $$ InputStream is = null-->Line_21 $$ is = new FileInputStream(file)[ FD ]
Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) -->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ CD ]
Line_10 $$ PreparedStatement preparedStatement = null-->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ FD ]
Line_12 $$ preparedStatement = connection.prepareStatement(sql)-->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ FD ]
Line_21 $$ is = new FileInputStream(file)-->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ FD ]
Line_15 $$ InputStream is = null-->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ FD ]
Line_20 $$ File file = (File) obj-->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ FD ]
Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) -->Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) [ CD ]
Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) -->Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) [ CD ]
Line_18 $$ Object obj = paramsList[i][j]-->Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) [ FD ]
Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) -->Line_24 $$ java.text.SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")[ CD ]
Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) -->Line_25 $$ preparedStatement.setString(j + 1, sdf.format((Date) obj))[ CD ]
Line_10 $$ PreparedStatement preparedStatement = null-->Line_25 $$ preparedStatement.setString(j + 1, sdf.format((Date) obj))[ FD ]
Line_12 $$ preparedStatement = connection.prepareStatement(sql)-->Line_25 $$ preparedStatement.setString(j + 1, sdf.format((Date) obj))[ FD ]
Line_24 $$ java.text.SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")-->Line_25 $$ preparedStatement.setString(j + 1, sdf.format((Date) obj))[ FD ]
Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) -->Line_27 $$ preparedStatement.setObject(j + 1, obj)[ CD ]
Line_10 $$ PreparedStatement preparedStatement = null-->Line_27 $$ preparedStatement.setObject(j + 1, obj)[ FD ]
Line_12 $$ preparedStatement = connection.prepareStatement(sql)-->Line_27 $$ preparedStatement.setObject(j + 1, obj)[ FD ]
Line_18 $$ Object obj = paramsList[i][j]-->Line_27 $$ preparedStatement.setObject(j + 1, obj)[ FD ]
Line_14 $$ if (connection != null && !connection.isClosed()) -->Line_31 $$ preparedStatement.executeUpdate()[ CD ]
Line_10 $$ PreparedStatement preparedStatement = null-->Line_31 $$ preparedStatement.executeUpdate()[ FD ]
Line_12 $$ preparedStatement = connection.prepareStatement(sql)-->Line_31 $$ preparedStatement.executeUpdate()[ FD ]
Line_14 $$ if (connection != null && !connection.isClosed()) -->Line_32 $$ if (is != null) [ CD ]
Line_21 $$ is = new FileInputStream(file)-->Line_32 $$ if (is != null) [ FD ]
Line_15 $$ InputStream is = null-->Line_32 $$ if (is != null) [ FD ]
Line_32 $$ if (is != null) -->Line_33 $$ is.close()[ CD ]
Line_21 $$ is = new FileInputStream(file)-->Line_33 $$ is.close()[ FD ]
Line_15 $$ InputStream is = null-->Line_33 $$ is.close()[ FD ]
Line_3 $$ Connection connection = null-->Line_42 $$ connection.rollback()[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_42 $$ connection.rollback()[ FD ]
Line_3 $$ Connection connection = null-->Line_49 $$ connection.commit()[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_49 $$ connection.commit()[ FD ]
Line_10 $$ PreparedStatement preparedStatement = null-->Line_55 $$ preparedStatement.close()[ FD ]
Line_12 $$ preparedStatement = connection.prepareStatement(sql)-->Line_55 $$ preparedStatement.close()[ FD ]
Line_3 $$ Connection connection = null-->Line_56 $$ connection.close()[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_56 $$ connection.close()[ FD ]
Line_3 $$ Connection connection = null-->Line_61 $$ connection.close()[ FD ]
Line_4 $$ connection = this.getConnection()-->Line_61 $$ connection.close()[ FD ]
Line_2 $$ public int executeUpdateJT(String sql, Object[][] paramsList) -->Line_68 $$ return -1[ CD ]
Line_68 $$ return -1-->Line_68 $$ return -1[ CD ]
Line_13 $$ for (int i = 0; i < paramsList.length; i++) -->Line_13 $$ for (int i = 0; i < paramsList.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < paramsList.length; i++) -->Line_13 $$ for (int i = 0; i < paramsList.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < paramsList.length; i++) -->Line_13 $$ for (int i = 0; i < paramsList.length; i++) [ FD ]
Line_15 $$ InputStream is = null-->Line_32 $$ if (is != null) [ FD ]
Line_15 $$ InputStream is = null-->Line_33 $$ is.close()[ FD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) [ FD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) [ FD ]
Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) -->Line_17 $$ for (int j = 0; j < paramsList[i].length; j++) [ FD ]
Line_18 $$ Object obj = paramsList[i][j]-->Line_19 $$ if (obj.getClass().equals(Class.forName("java.io.File"))) [ FD ]
Line_21 $$ is = new FileInputStream(file)-->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ FD ]
Line_20 $$ File file = (File) obj-->Line_22 $$ preparedStatement.setBinaryStream(j + 1, is, (int) file.length())[ FD ]
Line_18 $$ Object obj = paramsList[i][j]-->Line_23 $$ if (obj.getClass().equals(Class.forName("java.util.Date"))) [ FD ]
Line_24 $$ java.text.SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")-->Line_25 $$ preparedStatement.setString(j + 1, sdf.format((Date) obj))[ FD ]
Line_18 $$ Object obj = paramsList[i][j]-->Line_27 $$ preparedStatement.setObject(j + 1, obj)[ FD ]
