Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException [ CD ]
Line_2 $$ private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException -->Line_3 $$ DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder()[ CD ]
Line_3 $$ DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder()-->Line_3 $$ DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder()[ CD ]
Line_2 $$ private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException -->Line_4 $$ InputStream stream = null[ CD ]
Line_4 $$ InputStream stream = null-->Line_6 $$ stream = new URL(url).openStream()[ FD ]
Line_6 $$ stream = new URL(url).openStream()-->Line_6 $$ stream = new URL(url).openStream()[ FD ]
Line_6 $$ stream = new URL(url).openStream()-->Line_6 $$ stream = new URL(url).openStream()[ CD ]
Line_7 $$ return db.parse(stream)-->Line_7 $$ return db.parse(stream)[ CD ]
Line_3 $$ DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder()-->Line_7 $$ return db.parse(stream)[ FD ]
Line_4 $$ InputStream stream = null-->Line_7 $$ return db.parse(stream)[ FD ]
Line_6 $$ stream = new URL(url).openStream()-->Line_7 $$ return db.parse(stream)[ FD ]
Line_4 $$ InputStream stream = null-->Line_9 $$ if (stream != null)[ FD ]
Line_6 $$ stream = new URL(url).openStream()-->Line_9 $$ if (stream != null)[ FD ]
Line_9 $$ if (stream != null)-->Line_9 $$ stream.close()[ CD ]
Line_4 $$ InputStream stream = null-->Line_9 $$ stream.close()[ FD ]
Line_6 $$ stream = new URL(url).openStream()-->Line_9 $$ stream.close()[ FD ]
