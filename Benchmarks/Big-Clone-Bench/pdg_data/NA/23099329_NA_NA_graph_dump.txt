Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void close() throws IOException [ CD ]
Line_2 $$ public void close() throws IOException -->Line_3 $$ super.close()[ CD ]
Line_2 $$ public void close() throws IOException -->Line_4 $$ byte[] signatureData = toByteArray()[ CD ]
Line_4 $$ byte[] signatureData = toByteArray()-->Line_4 $$ byte[] signatureData = toByteArray()[ CD ]
Line_2 $$ public void close() throws IOException -->Line_5 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream)[ CD ]
Line_2 $$ public void close() throws IOException -->Line_6 $$ ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile))[ CD ]
Line_2 $$ public void close() throws IOException -->Line_7 $$ ZipEntry zipEntry[ CD ]
Line_2 $$ public void close() throws IOException -->Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ CD ]
Line_2 $$ public void close() throws IOException -->Line_2 $$ public void close() throws IOException [ CD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ FD ]
Line_7 $$ ZipEntry zipEntry-->Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ FD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ CD ]
Line_6 $$ ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile))-->Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [ FD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) [ CD ]
Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) -->Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) [ CD ]
Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) -->Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) [ CD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) [ FD ]
Line_7 $$ ZipEntry zipEntry-->Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) [ FD ]
Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) -->Line_10 $$ ZipEntry newZipEntry = new ZipEntry(zipEntry.getName())[ CD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_10 $$ ZipEntry newZipEntry = new ZipEntry(zipEntry.getName())[ FD ]
Line_7 $$ ZipEntry zipEntry-->Line_10 $$ ZipEntry newZipEntry = new ZipEntry(zipEntry.getName())[ FD ]
Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) -->Line_11 $$ zipOutputStream.putNextEntry(newZipEntry)[ CD ]
Line_5 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream)-->Line_11 $$ zipOutputStream.putNextEntry(newZipEntry)[ FD ]
Line_10 $$ ZipEntry newZipEntry = new ZipEntry(zipEntry.getName())-->Line_11 $$ zipOutputStream.putNextEntry(newZipEntry)[ FD ]
Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) -->Line_12 $$ LOG.debug("copying " + zipEntry.getName())[ CD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_12 $$ LOG.debug("copying " + zipEntry.getName())[ FD ]
Line_7 $$ ZipEntry zipEntry-->Line_12 $$ LOG.debug("copying " + zipEntry.getName())[ FD ]
Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) -->Line_13 $$ IOUtils.copy(zipInputStream, zipOutputStream)[ CD ]
Line_6 $$ ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile))-->Line_13 $$ IOUtils.copy(zipInputStream, zipOutputStream)[ FD ]
Line_5 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream)-->Line_13 $$ IOUtils.copy(zipInputStream, zipOutputStream)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_16 $$ zipInputStream.close()[ CD ]
Line_6 $$ ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(this.originalZipFile))-->Line_16 $$ zipInputStream.close()[ FD ]
Line_2 $$ public void close() throws IOException -->Line_17 $$ zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE)[ CD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_17 $$ zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE)[ FD ]
Line_7 $$ ZipEntry zipEntry-->Line_17 $$ zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE)[ FD ]
Line_17 $$ zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE)-->Line_17 $$ zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_18 $$ LOG.debug("writing " + zipEntry.getName())[ CD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_18 $$ LOG.debug("writing " + zipEntry.getName())[ FD ]
Line_7 $$ ZipEntry zipEntry-->Line_18 $$ LOG.debug("writing " + zipEntry.getName())[ FD ]
Line_17 $$ zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE)-->Line_18 $$ LOG.debug("writing " + zipEntry.getName())[ FD ]
Line_2 $$ public void close() throws IOException -->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ CD ]
Line_5 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream)-->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_7 $$ ZipEntry zipEntry-->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_17 $$ zipEntry = new ZipEntry(ASiCUtil.SIGNATURE_FILE)-->Line_19 $$ zipOutputStream.putNextEntry(zipEntry)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_20 $$ IOUtils.write(signatureData, zipOutputStream)[ CD ]
Line_4 $$ byte[] signatureData = toByteArray()-->Line_20 $$ IOUtils.write(signatureData, zipOutputStream)[ FD ]
Line_5 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream)-->Line_20 $$ IOUtils.write(signatureData, zipOutputStream)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_21 $$ zipOutputStream.close()[ CD ]
Line_5 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(this.targetOutputStream)-->Line_21 $$ zipOutputStream.close()[ FD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_9 $$ if (!zipEntry.getName().equals(ASiCUtil.SIGNATURE_FILE)) [ FD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_10 $$ ZipEntry newZipEntry = new ZipEntry(zipEntry.getName())[ FD ]
Line_10 $$ ZipEntry newZipEntry = new ZipEntry(zipEntry.getName())-->Line_11 $$ zipOutputStream.putNextEntry(newZipEntry)[ FD ]
Line_8 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) -->Line_12 $$ LOG.debug("copying " + zipEntry.getName())[ FD ]
