Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception [ CD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_3 $$ int i = 0[ CD ]
Line_6 $$ String urlString = service.getDownloadURL(desc.getPackageId(), desc.getVersion(), desc.getPlatformName())-->Line_6 $$ String urlString = service.getDownloadURL(desc.getPackageId(), desc.getVersion(), desc.getPlatformName())[ CD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_6 $$ String urlString = service.getDownloadURL(desc.getPackageId(), desc.getVersion(), desc.getPlatformName())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_6 $$ String urlString = service.getDownloadURL(desc.getPackageId(), desc.getVersion(), desc.getPlatformName())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_6 $$ String urlString = service.getDownloadURL(desc.getPackageId(), desc.getVersion(), desc.getPlatformName())[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_7 $$ int minProgress = 20 + 80 * i / downloadList.size()[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_8 $$ int maxProgress = 20 + 80 * (i + 1) / downloadList.size()[ FD ]
Line_9 $$ boolean incremental = UpdateManager.isIncrementalUpdate()-->Line_9 $$ boolean incremental = UpdateManager.isIncrementalUpdate()[ CD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) [ CD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) [ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())[ CD ]
Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())-->Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())[ CD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())[ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())[ CD ]
Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())-->Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())[ CD ]
Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())-->Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())[ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_13 $$ incremental &= baseVersion != null[ CD ]
Line_9 $$ boolean incremental = UpdateManager.isIncrementalUpdate()-->Line_13 $$ incremental &= baseVersion != null[ FD ]
Line_13 $$ incremental &= baseVersion != null-->Line_13 $$ incremental &= baseVersion != null[ FD ]
Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())-->Line_13 $$ incremental &= baseVersion != null[ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_14 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(baseVersion, "UTF-8") : "")).toURL()[ CD ]
Line_14 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(baseVersion, "UTF-8") : "")).toURL()-->Line_14 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(baseVersion, "UTF-8") : "")).toURL()[ CD ]
Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())-->Line_14 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(baseVersion, "UTF-8") : "")).toURL()[ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_15 $$ if (incremental) [ CD ]
Line_15 $$ if (incremental) -->Line_16 $$ LogService.getRoot().info("Updating " + desc.getPackageId() + " incrementally.")[ CD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_16 $$ LogService.getRoot().info("Updating " + desc.getPackageId() + " incrementally.")[ FD ]
Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())-->Line_18 $$ updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion())[ FD ]
Line_12 $$ String baseVersion = extension.getLatestInstalledVersionBefore(desc.getVersion())-->Line_18 $$ updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion())[ FD ]
Line_14 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(baseVersion, "UTF-8") : "")).toURL()-->Line_18 $$ updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion())[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_18 $$ updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion())[ FD ]
Line_7 $$ int minProgress = 20 + 80 * i / downloadList.size()-->Line_18 $$ updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion())[ FD ]
Line_8 $$ int maxProgress = 20 + 80 * (i + 1) / downloadList.size()-->Line_18 $$ updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_18 $$ updatePluginIncrementally(extension, openStream(url, progressListener, minProgress, maxProgress), baseVersion, desc.getVersion())[ FD ]
Line_9 $$ boolean incremental = UpdateManager.isIncrementalUpdate()-->Line_21 $$ incremental = false[ FD ]
Line_13 $$ incremental &= baseVersion != null-->Line_21 $$ incremental = false[ FD ]
Line_21 $$ incremental = false-->Line_21 $$ incremental = false[ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_24 $$ if (!incremental) [ CD ]
Line_9 $$ boolean incremental = UpdateManager.isIncrementalUpdate()-->Line_24 $$ if (!incremental) [ FD ]
Line_13 $$ incremental &= baseVersion != null-->Line_24 $$ if (!incremental) [ FD ]
Line_21 $$ incremental = false-->Line_24 $$ if (!incremental) [ FD ]
Line_24 $$ if (!incremental) -->Line_24 $$ if (!incremental) [ CD ]
Line_9 $$ boolean incremental = UpdateManager.isIncrementalUpdate()-->Line_24 $$ if (!incremental) [ FD ]
Line_13 $$ incremental &= baseVersion != null-->Line_24 $$ if (!incremental) [ FD ]
Line_21 $$ incremental = false-->Line_24 $$ if (!incremental) [ FD ]
Line_24 $$ if (!incremental) -->Line_25 $$ LogService.getRoot().info("Updating " + desc.getPackageId() + ".")[ CD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_25 $$ LogService.getRoot().info("Updating " + desc.getPackageId() + ".")[ FD ]
Line_24 $$ if (!incremental) -->Line_26 $$ updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ CD ]
Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())-->Line_26 $$ updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_14 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(baseVersion, "UTF-8") : "")).toURL()-->Line_26 $$ updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_26 $$ updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_7 $$ int minProgress = 20 + 80 * i / downloadList.size()-->Line_26 $$ updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_8 $$ int maxProgress = 20 + 80 * (i + 1) / downloadList.size()-->Line_26 $$ updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_26 $$ updatePlugin(extension, openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_28 $$ extension.addAndSelectVersion(desc.getVersion())[ CD ]
Line_11 $$ ManagedExtension extension = ManagedExtension.getOrCreate(desc.getPackageId(), desc.getName(), desc.getLicenseName())-->Line_28 $$ extension.addAndSelectVersion(desc.getVersion())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_28 $$ extension.addAndSelectVersion(desc.getVersion())[ FD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_30 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(RapidMiner.getLongVersion(), "UTF-8") : "")).toURL()[ CD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_31 $$ LogService.getRoot().info("Updating RapidMiner core.")[ CD ]
Line_10 $$ if (desc.getPackageTypeName().equals("RAPIDMINER_PLUGIN")) -->Line_32 $$ updateRapidMiner(openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ CD ]
Line_14 $$ URL url = UpdateManager.getUpdateServerURI(urlString + (incremental ? "?baseVersion=" + URLEncoder.encode(baseVersion, "UTF-8") : "")).toURL()-->Line_32 $$ updateRapidMiner(openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_32 $$ updateRapidMiner(openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_7 $$ int minProgress = 20 + 80 * i / downloadList.size()-->Line_32 $$ updateRapidMiner(openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_8 $$ int maxProgress = 20 + 80 * (i + 1) / downloadList.size()-->Line_32 $$ updateRapidMiner(openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_5 $$ for (PackageDescriptor desc : downloadList) -->Line_32 $$ updateRapidMiner(openStream(url, progressListener, minProgress, maxProgress), desc.getVersion())[ FD ]
Line_3 $$ int i = 0-->Line_34 $$ i++[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_35 $$ progressListener.setCompleted(20 + 80 * i / downloadList.size())[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_35 $$ progressListener.setCompleted(20 + 80 * i / downloadList.size())[ FD ]
Line_2 $$ public void performUpdates(List<PackageDescriptor> downloadList, ProgressListener progressListener) throws IOException, UpdateServiceException_Exception -->Line_40 $$ progressListener.complete()[ FD ]
