Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception [ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_3 $$ String jobDir = nodeDir + File.separator + "job_" + zer.getUri()[ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_3 $$ String jobDir = nodeDir + File.separator + "job_" + zer.getUri()[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_4 $$ if (!WorkDirectory.isWorkingDirectoryValid(jobDir)) [ CD ]
Line_4 $$ if (!WorkDirectory.isWorkingDirectoryValid(jobDir)) -->Line_4 $$ if (!WorkDirectory.isWorkingDirectoryValid(jobDir)) [ CD ]
Line_4 $$ if (!WorkDirectory.isWorkingDirectoryValid(jobDir)) -->Line_4 $$ if (!WorkDirectory.isWorkingDirectoryValid(jobDir)) [ CD ]
Line_3 $$ String jobDir = nodeDir + File.separator + "job_" + zer.getUri()-->Line_4 $$ if (!WorkDirectory.isWorkingDirectoryValid(jobDir)) [ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")[ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) -->Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) -->Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) -->Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_8 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_9 $$ throw new Exception("Cannot acces to result file " + f.getAbsolutePath())[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_11 $$ String fcopyName = reportDir + File.separator + zer.getName() + ".xml"[ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_11 $$ String fcopyName = reportDir + File.separator + zer.getName() + ".xml"[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_12 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f))[ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fcopyName))[ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_14 $$ IOUtils.copy(bis, bos)[ CD ]
Line_12 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f))-->Line_14 $$ IOUtils.copy(bis, bos)[ FD ]
Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_14 $$ IOUtils.copy(bis, bos)[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_15 $$ bis.close()[ CD ]
Line_12 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f))-->Line_15 $$ bis.close()[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_16 $$ bos.close()[ CD ]
Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_16 $$ bos.close()[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_17 $$ zer.setUri(fcopyName)[ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_17 $$ zer.setUri(fcopyName)[ FD ]
Line_11 $$ String fcopyName = reportDir + File.separator + zer.getName() + ".xml"-->Line_17 $$ zer.setUri(fcopyName)[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_18 $$ f = new File(jobDir + File.separator + "status.xml")[ CD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_18 $$ f = new File(jobDir + File.separator + "status.xml")[ FD ]
Line_18 $$ f = new File(jobDir + File.separator + "status.xml")-->Line_18 $$ f = new File(jobDir + File.separator + "status.xml")[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) -->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_18 $$ f = new File(jobDir + File.separator + "status.xml")-->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) -->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_18 $$ f = new File(jobDir + File.separator + "status.xml")-->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) -->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ CD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_18 $$ f = new File(jobDir + File.separator + "status.xml")-->Line_19 $$ if (!f.exists() || !f.isFile() || !f.canRead()) [ FD ]
Line_7 $$ File f = new File(jobDir + File.separator + "result.xml")-->Line_20 $$ throw new Exception("Cannot acces to status file " + f.getAbsolutePath())[ FD ]
Line_18 $$ f = new File(jobDir + File.separator + "status.xml")-->Line_20 $$ throw new Exception("Cannot acces to status file " + f.getAbsolutePath())[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_22 $$ fcopyName = reportDir + File.separator + zer.getName() + "_status.xml"[ CD ]
Line_11 $$ String fcopyName = reportDir + File.separator + zer.getName() + ".xml"-->Line_22 $$ fcopyName = reportDir + File.separator + zer.getName() + "_status.xml"[ FD ]
Line_22 $$ fcopyName = reportDir + File.separator + zer.getName() + "_status.xml"-->Line_22 $$ fcopyName = reportDir + File.separator + zer.getName() + "_status.xml"[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_22 $$ fcopyName = reportDir + File.separator + zer.getName() + "_status.xml"[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_23 $$ bis = new BufferedInputStream(new FileInputStream(f))[ CD ]
Line_12 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f))-->Line_23 $$ bis = new BufferedInputStream(new FileInputStream(f))[ FD ]
Line_23 $$ bis = new BufferedInputStream(new FileInputStream(f))-->Line_23 $$ bis = new BufferedInputStream(new FileInputStream(f))[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_24 $$ bos = new BufferedOutputStream(new FileOutputStream(fcopyName))[ CD ]
Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_24 $$ bos = new BufferedOutputStream(new FileOutputStream(fcopyName))[ FD ]
Line_24 $$ bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_24 $$ bos = new BufferedOutputStream(new FileOutputStream(fcopyName))[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_25 $$ IOUtils.copy(bis, bos)[ CD ]
Line_12 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f))-->Line_25 $$ IOUtils.copy(bis, bos)[ FD ]
Line_23 $$ bis = new BufferedInputStream(new FileInputStream(f))-->Line_25 $$ IOUtils.copy(bis, bos)[ FD ]
Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_25 $$ IOUtils.copy(bis, bos)[ FD ]
Line_24 $$ bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_25 $$ IOUtils.copy(bis, bos)[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_26 $$ bis.close()[ CD ]
Line_12 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(f))-->Line_26 $$ bis.close()[ FD ]
Line_23 $$ bis = new BufferedInputStream(new FileInputStream(f))-->Line_26 $$ bis.close()[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_27 $$ bos.close()[ CD ]
Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_27 $$ bos.close()[ FD ]
Line_24 $$ bos = new BufferedOutputStream(new FileOutputStream(fcopyName))-->Line_27 $$ bos.close()[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_28 $$ statusZers.add(new ZipEntryRef(ZipEntryRef.SINGLE_FILE, zer.getName(), fcopyName, ZipEntryRef.WITH_REL))[ CD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_28 $$ statusZers.add(new ZipEntryRef(ZipEntryRef.SINGLE_FILE, zer.getName(), fcopyName, ZipEntryRef.WITH_REL))[ FD ]
Line_2 $$ private void prepareQueryResultData(ZipEntryRef zer, String nodeDir, String reportDir, Set<ZipEntryRef> statusZers) throws Exception -->Line_28 $$ statusZers.add(new ZipEntryRef(ZipEntryRef.SINGLE_FILE, zer.getName(), fcopyName, ZipEntryRef.WITH_REL))[ FD ]
