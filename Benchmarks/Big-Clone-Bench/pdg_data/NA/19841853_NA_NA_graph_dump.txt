Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception [ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_3 $$ final String partialURL = updateURL + (updateURL.endsWith("/") ? "" : "/") + "fdt.jar"[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_3 $$ final String partialURL = updateURL + (updateURL.endsWith("/") ? "" : "/") + "fdt.jar"[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_4 $$ logger.log("Checking remote fdt.jar at URL: " + partialURL)[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_5 $$ String JVMVersion = "NotAvailable"[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_6 $$ String JVMRuntimeVersion = "NotAvailable"[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_7 $$ String OSVersion = "NotAvailable"[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_8 $$ String OSName = "NotAvailable"[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_9 $$ String OSArch = "NotAvailable"[ CD ]
Line_5 $$ String JVMVersion = "NotAvailable"-->Line_11 $$ JVMVersion = System.getProperty("java.vm.version")[ FD ]
Line_11 $$ JVMVersion = System.getProperty("java.vm.version")-->Line_11 $$ JVMVersion = System.getProperty("java.vm.version")[ FD ]
Line_11 $$ JVMVersion = System.getProperty("java.vm.version")-->Line_11 $$ JVMVersion = System.getProperty("java.vm.version")[ CD ]
Line_5 $$ String JVMVersion = "NotAvailable"-->Line_13 $$ JVMVersion = "NotAvailable"[ FD ]
Line_11 $$ JVMVersion = System.getProperty("java.vm.version")-->Line_13 $$ JVMVersion = "NotAvailable"[ FD ]
Line_13 $$ JVMVersion = "NotAvailable"-->Line_13 $$ JVMVersion = "NotAvailable"[ FD ]
Line_6 $$ String JVMRuntimeVersion = "NotAvailable"-->Line_16 $$ JVMRuntimeVersion = System.getProperty("java.runtime.version")[ FD ]
Line_16 $$ JVMRuntimeVersion = System.getProperty("java.runtime.version")-->Line_16 $$ JVMRuntimeVersion = System.getProperty("java.runtime.version")[ FD ]
Line_16 $$ JVMRuntimeVersion = System.getProperty("java.runtime.version")-->Line_16 $$ JVMRuntimeVersion = System.getProperty("java.runtime.version")[ CD ]
Line_6 $$ String JVMRuntimeVersion = "NotAvailable"-->Line_18 $$ JVMRuntimeVersion = "NotAvailable"[ FD ]
Line_16 $$ JVMRuntimeVersion = System.getProperty("java.runtime.version")-->Line_18 $$ JVMRuntimeVersion = "NotAvailable"[ FD ]
Line_18 $$ JVMRuntimeVersion = "NotAvailable"-->Line_18 $$ JVMRuntimeVersion = "NotAvailable"[ FD ]
Line_8 $$ String OSName = "NotAvailable"-->Line_21 $$ OSName = System.getProperty("os.name")[ FD ]
Line_21 $$ OSName = System.getProperty("os.name")-->Line_21 $$ OSName = System.getProperty("os.name")[ FD ]
Line_21 $$ OSName = System.getProperty("os.name")-->Line_21 $$ OSName = System.getProperty("os.name")[ CD ]
Line_8 $$ String OSName = "NotAvailable"-->Line_23 $$ OSName = "NotAvailable"[ FD ]
Line_21 $$ OSName = System.getProperty("os.name")-->Line_23 $$ OSName = "NotAvailable"[ FD ]
Line_23 $$ OSName = "NotAvailable"-->Line_23 $$ OSName = "NotAvailable"[ FD ]
Line_9 $$ String OSArch = "NotAvailable"-->Line_26 $$ OSArch = System.getProperty("os.arch")[ FD ]
Line_26 $$ OSArch = System.getProperty("os.arch")-->Line_26 $$ OSArch = System.getProperty("os.arch")[ FD ]
Line_26 $$ OSArch = System.getProperty("os.arch")-->Line_26 $$ OSArch = System.getProperty("os.arch")[ CD ]
Line_9 $$ String OSArch = "NotAvailable"-->Line_28 $$ OSArch = "NotAvailable"[ FD ]
Line_26 $$ OSArch = System.getProperty("os.arch")-->Line_28 $$ OSArch = "NotAvailable"[ FD ]
Line_28 $$ OSArch = "NotAvailable"-->Line_28 $$ OSArch = "NotAvailable"[ FD ]
Line_7 $$ String OSVersion = "NotAvailable"-->Line_31 $$ OSVersion = System.getProperty("os.version")[ FD ]
Line_31 $$ OSVersion = System.getProperty("os.version")-->Line_31 $$ OSVersion = System.getProperty("os.version")[ FD ]
Line_31 $$ OSVersion = System.getProperty("os.version")-->Line_31 $$ OSVersion = System.getProperty("os.version")[ CD ]
Line_7 $$ String OSVersion = "NotAvailable"-->Line_33 $$ OSVersion = "NotAvailable"[ FD ]
Line_31 $$ OSVersion = System.getProperty("os.version")-->Line_33 $$ OSVersion = "NotAvailable"[ FD ]
Line_33 $$ OSVersion = "NotAvailable"-->Line_33 $$ OSVersion = "NotAvailable"[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_35 $$ StringBuilder urlBuilder = new StringBuilder()[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_36 $$ urlBuilder.append(partialURL)[ CD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_36 $$ urlBuilder.append(partialURL)[ FD ]
Line_3 $$ final String partialURL = updateURL + (updateURL.endsWith("/") ? "" : "/") + "fdt.jar"-->Line_36 $$ urlBuilder.append(partialURL)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_37 $$ urlBuilder.append("?FDTCurrentVersion=").append(currentVersion)[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_37 $$ urlBuilder.append("?FDTCurrentVersion=").append(currentVersion)[ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_37 $$ urlBuilder.append("?FDTCurrentVersion=").append(currentVersion)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_38 $$ urlBuilder.append("&shouldUpdate=").append(shouldUpdate)[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_38 $$ urlBuilder.append("&shouldUpdate=").append(shouldUpdate)[ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_38 $$ urlBuilder.append("&shouldUpdate=").append(shouldUpdate)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_39 $$ urlBuilder.append("&tstamp=").append(System.currentTimeMillis())[ CD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_39 $$ urlBuilder.append("&tstamp=").append(System.currentTimeMillis())[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_40 $$ urlBuilder.append("&java.vm.version=").append(JVMVersion)[ CD ]
Line_5 $$ String JVMVersion = "NotAvailable"-->Line_40 $$ urlBuilder.append("&java.vm.version=").append(JVMVersion)[ FD ]
Line_11 $$ JVMVersion = System.getProperty("java.vm.version")-->Line_40 $$ urlBuilder.append("&java.vm.version=").append(JVMVersion)[ FD ]
Line_13 $$ JVMVersion = "NotAvailable"-->Line_40 $$ urlBuilder.append("&java.vm.version=").append(JVMVersion)[ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_40 $$ urlBuilder.append("&java.vm.version=").append(JVMVersion)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_41 $$ urlBuilder.append("&java.runtime.version=").append(JVMRuntimeVersion)[ CD ]
Line_6 $$ String JVMRuntimeVersion = "NotAvailable"-->Line_41 $$ urlBuilder.append("&java.runtime.version=").append(JVMRuntimeVersion)[ FD ]
Line_16 $$ JVMRuntimeVersion = System.getProperty("java.runtime.version")-->Line_41 $$ urlBuilder.append("&java.runtime.version=").append(JVMRuntimeVersion)[ FD ]
Line_18 $$ JVMRuntimeVersion = "NotAvailable"-->Line_41 $$ urlBuilder.append("&java.runtime.version=").append(JVMRuntimeVersion)[ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_41 $$ urlBuilder.append("&java.runtime.version=").append(JVMRuntimeVersion)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_42 $$ urlBuilder.append("&os.name=").append(OSName)[ CD ]
Line_8 $$ String OSName = "NotAvailable"-->Line_42 $$ urlBuilder.append("&os.name=").append(OSName)[ FD ]
Line_21 $$ OSName = System.getProperty("os.name")-->Line_42 $$ urlBuilder.append("&os.name=").append(OSName)[ FD ]
Line_23 $$ OSName = "NotAvailable"-->Line_42 $$ urlBuilder.append("&os.name=").append(OSName)[ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_42 $$ urlBuilder.append("&os.name=").append(OSName)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_43 $$ urlBuilder.append("&os.version=").append(OSVersion)[ CD ]
Line_7 $$ String OSVersion = "NotAvailable"-->Line_43 $$ urlBuilder.append("&os.version=").append(OSVersion)[ FD ]
Line_31 $$ OSVersion = System.getProperty("os.version")-->Line_43 $$ urlBuilder.append("&os.version=").append(OSVersion)[ FD ]
Line_33 $$ OSVersion = "NotAvailable"-->Line_43 $$ urlBuilder.append("&os.version=").append(OSVersion)[ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_43 $$ urlBuilder.append("&os.version=").append(OSVersion)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_44 $$ urlBuilder.append("&os.arch=").append(OSArch)[ CD ]
Line_9 $$ String OSArch = "NotAvailable"-->Line_44 $$ urlBuilder.append("&os.arch=").append(OSArch)[ FD ]
Line_26 $$ OSArch = System.getProperty("os.arch")-->Line_44 $$ urlBuilder.append("&os.arch=").append(OSArch)[ FD ]
Line_28 $$ OSArch = "NotAvailable"-->Line_44 $$ urlBuilder.append("&os.arch=").append(OSArch)[ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_44 $$ urlBuilder.append("&os.arch=").append(OSArch)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_45 $$ final Properties p = getFDTUpdateProperties()[ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_45 $$ final Properties p = getFDTUpdateProperties()[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_46 $$ if (p.getProperty("totalRead") == null) [ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_46 $$ if (p.getProperty("totalRead") == null) [ FD ]
Line_46 $$ if (p.getProperty("totalRead") == null) -->Line_47 $$ p.put("totalRead", "0")[ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_47 $$ p.put("totalRead", "0")[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_49 $$ if (p.getProperty("totalWrite") == null) [ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_49 $$ if (p.getProperty("totalWrite") == null) [ FD ]
Line_49 $$ if (p.getProperty("totalWrite") == null) -->Line_50 $$ p.put("totalWrite", "0")[ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_50 $$ p.put("totalWrite", "0")[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_52 $$ checkAndSetInstanceID(p)[ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_52 $$ checkAndSetInstanceID(p)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_53 $$ if (p.getProperty("totalRead_rst") != null) [ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_53 $$ if (p.getProperty("totalRead_rst") != null) [ FD ]
Line_53 $$ if (p.getProperty("totalRead_rst") != null) -->Line_54 $$ p.remove("totalRead_rst")[ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_54 $$ p.remove("totalRead_rst")[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_56 $$ if (p.getProperty("totalWrite_rst") != null) [ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_56 $$ if (p.getProperty("totalWrite_rst") != null) [ FD ]
Line_56 $$ if (p.getProperty("totalWrite_rst") != null) -->Line_57 $$ p.remove("totalWrite_rst")[ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_57 $$ p.remove("totalWrite_rst")[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_59 $$ if (p != null && p.size() > 0) [ CD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_59 $$ if (p != null && p.size() > 0) [ FD ]
Line_45 $$ final Properties p = getFDTUpdateProperties()-->Line_60 $$ for (final Map.Entry<Object, Object> entry : p.entrySet()) [ FD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_61 $$ urlBuilder.append("&").append(entry.getKey()).append("=").append(entry.getValue())[ FD ]
Line_60 $$ for (final Map.Entry<Object, Object> entry : p.entrySet()) -->Line_61 $$ urlBuilder.append("&").append(entry.getKey()).append("=").append(entry.getValue())[ FD ]
Line_60 $$ for (final Map.Entry<Object, Object> entry : p.entrySet()) -->Line_61 $$ urlBuilder.append("&").append(entry.getKey()).append("=").append(entry.getValue())[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_64 $$ final String finalPath = new URI(FDT.class.getProtectionDomain().getCodeSource().getLocation().toString()).getPath()[ CD ]
Line_64 $$ final String finalPath = new URI(FDT.class.getProtectionDomain().getCodeSource().getLocation().toString()).getPath()-->Line_64 $$ final String finalPath = new URI(FDT.class.getProtectionDomain().getCodeSource().getLocation().toString()).getPath()[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_65 $$ if (finalPath == null || finalPath.length() == 0) [ CD ]
Line_64 $$ final String finalPath = new URI(FDT.class.getProtectionDomain().getCodeSource().getLocation().toString()).getPath()-->Line_65 $$ if (finalPath == null || finalPath.length() == 0) [ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_68 $$ final File currentJar = new File(finalPath)[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_69 $$ if (!currentJar.exists()) [ CD ]
Line_69 $$ if (!currentJar.exists()) -->Line_69 $$ if (!currentJar.exists()) [ CD ]
Line_69 $$ if (!currentJar.exists()) -->Line_69 $$ if (!currentJar.exists()) [ CD ]
Line_68 $$ final File currentJar = new File(finalPath)-->Line_69 $$ if (!currentJar.exists()) [ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_72 $$ if (currentJar.isFile() && currentJar.canWrite()) [ CD ]
Line_68 $$ final File currentJar = new File(finalPath)-->Line_72 $$ if (currentJar.isFile() && currentJar.canWrite()) [ FD ]
Line_68 $$ final File currentJar = new File(finalPath)-->Line_72 $$ if (currentJar.isFile() && currentJar.canWrite()) [ FD ]
Line_72 $$ if (currentJar.isFile() && currentJar.canWrite()) -->Line_73 $$ logger.log("\nCurrent fdt.jar path is: " + finalPath)[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_77 $$ File tmpUpdateFile = null[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_78 $$ FileOutputStream fos = null[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_79 $$ JarFile jf = null[ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_80 $$ InputStream connInputStream = null[ CD ]
Line_77 $$ File tmpUpdateFile = null-->Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")[ FD ]
Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")-->Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")[ FD ]
Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")-->Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")[ CD ]
Line_77 $$ File tmpUpdateFile = null-->Line_83 $$ tmpUpdateFile.deleteOnExit()[ FD ]
Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")-->Line_83 $$ tmpUpdateFile.deleteOnExit()[ FD ]
Line_78 $$ FileOutputStream fos = null-->Line_84 $$ fos = new FileOutputStream(tmpUpdateFile)[ FD ]
Line_84 $$ fos = new FileOutputStream(tmpUpdateFile)-->Line_84 $$ fos = new FileOutputStream(tmpUpdateFile)[ FD ]
Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()-->Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()[ CD ]
Line_35 $$ StringBuilder urlBuilder = new StringBuilder()-->Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()[ FD ]
Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()-->Line_86 $$ urlConnection.setDefaultUseCaches(false)[ FD ]
Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()-->Line_87 $$ urlConnection.setUseCaches(false)[ FD ]
Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()-->Line_88 $$ urlConnection.setConnectTimeout(URL_CONNECTION_TIMEOUT)[ FD ]
Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()-->Line_89 $$ urlConnection.setReadTimeout(URL_CONNECTION_TIMEOUT)[ FD ]
Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()-->Line_91 $$ urlConnection.connect()[ FD ]
Line_80 $$ InputStream connInputStream = null-->Line_92 $$ connInputStream = urlConnection.getInputStream()[ FD ]
Line_92 $$ connInputStream = urlConnection.getInputStream()-->Line_92 $$ connInputStream = urlConnection.getInputStream()[ FD ]
Line_92 $$ connInputStream = urlConnection.getInputStream()-->Line_92 $$ connInputStream = urlConnection.getInputStream()[ CD ]
Line_85 $$ final URLConnection urlConnection = new URL(urlBuilder.toString()).openConnection()-->Line_92 $$ connInputStream = urlConnection.getInputStream()[ FD ]
Line_96 $$ while ((count = connInputStream.read(buff)) > 0) -->Line_96 $$ while ((count = connInputStream.read(buff)) > 0) [ FD ]
Line_95 $$ int count = 0-->Line_96 $$ while ((count = connInputStream.read(buff)) > 0) [ FD ]
Line_96 $$ while ((count = connInputStream.read(buff)) > 0) -->Line_96 $$ while ((count = connInputStream.read(buff)) > 0) [ CD ]
Line_80 $$ InputStream connInputStream = null-->Line_96 $$ while ((count = connInputStream.read(buff)) > 0) [ FD ]
Line_92 $$ connInputStream = urlConnection.getInputStream()-->Line_96 $$ while ((count = connInputStream.read(buff)) > 0) [ FD ]
Line_94 $$ byte[] buff = new byte[8192]-->Line_96 $$ while ((count = connInputStream.read(buff)) > 0) [ FD ]
Line_96 $$ while ((count = connInputStream.read(buff)) > 0) -->Line_97 $$ fos.write(buff, 0, count)[ CD ]
Line_78 $$ FileOutputStream fos = null-->Line_97 $$ fos.write(buff, 0, count)[ FD ]
Line_84 $$ fos = new FileOutputStream(tmpUpdateFile)-->Line_97 $$ fos.write(buff, 0, count)[ FD ]
Line_94 $$ byte[] buff = new byte[8192]-->Line_97 $$ fos.write(buff, 0, count)[ FD ]
Line_96 $$ while ((count = connInputStream.read(buff)) > 0) -->Line_97 $$ fos.write(buff, 0, count)[ FD ]
Line_95 $$ int count = 0-->Line_97 $$ fos.write(buff, 0, count)[ FD ]
Line_78 $$ FileOutputStream fos = null-->Line_99 $$ fos.flush()[ FD ]
Line_84 $$ fos = new FileOutputStream(tmpUpdateFile)-->Line_99 $$ fos.flush()[ FD ]
Line_79 $$ JarFile jf = null-->Line_100 $$ jf = new JarFile(tmpUpdateFile)[ FD ]
Line_100 $$ jf = new JarFile(tmpUpdateFile)-->Line_100 $$ jf = new JarFile(tmpUpdateFile)[ FD ]
Line_101 $$ final Manifest mf = jf.getManifest()-->Line_101 $$ final Manifest mf = jf.getManifest()[ CD ]
Line_79 $$ JarFile jf = null-->Line_101 $$ final Manifest mf = jf.getManifest()[ FD ]
Line_100 $$ jf = new JarFile(tmpUpdateFile)-->Line_101 $$ final Manifest mf = jf.getManifest()[ FD ]
Line_102 $$ final Attributes attr = mf.getMainAttributes()-->Line_102 $$ final Attributes attr = mf.getMainAttributes()[ CD ]
Line_101 $$ final Manifest mf = jf.getManifest()-->Line_102 $$ final Attributes attr = mf.getMainAttributes()[ FD ]
Line_103 $$ final String remoteVersion = attr.getValue("Implementation-Version")-->Line_103 $$ final String remoteVersion = attr.getValue("Implementation-Version")[ CD ]
Line_102 $$ final Attributes attr = mf.getMainAttributes()-->Line_103 $$ final String remoteVersion = attr.getValue("Implementation-Version")[ FD ]
Line_103 $$ final String remoteVersion = attr.getValue("Implementation-Version")-->Line_104 $$ if (remoteVersion == null || remoteVersion.trim().length() == 0) [ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_107 $$ if (currentVersion.equals(remoteVersion.trim())) [ FD ]
Line_107 $$ if (currentVersion.equals(remoteVersion.trim())) -->Line_107 $$ if (currentVersion.equals(remoteVersion.trim())) [ CD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_107 $$ if (currentVersion.equals(remoteVersion.trim())) [ FD ]
Line_103 $$ final String remoteVersion = attr.getValue("Implementation-Version")-->Line_107 $$ if (currentVersion.equals(remoteVersion.trim())) [ FD ]
Line_107 $$ if (currentVersion.equals(remoteVersion.trim())) -->Line_108 $$ return false[ CD ]
Line_113 $$ final String parent = currentJar.getParent()-->Line_113 $$ final String parent = currentJar.getParent()[ CD ]
Line_68 $$ final File currentJar = new File(finalPath)-->Line_113 $$ final String parent = currentJar.getParent()[ FD ]
Line_113 $$ final String parent = currentJar.getParent()-->Line_114 $$ if (parent == null) [ FD ]
Line_114 $$ if (parent == null) -->Line_115 $$ logger.log("Unable to determine parent dir for: " + currentJar)[ CD ]
Line_119 $$ if (!parentDir.canWrite()) -->Line_119 $$ if (!parentDir.canWrite()) [ CD ]
Line_119 $$ if (!parentDir.canWrite()) -->Line_119 $$ if (!parentDir.canWrite()) [ CD ]
Line_118 $$ final File parentDir = new File(parent)-->Line_119 $$ if (!parentDir.canWrite()) [ FD ]
Line_119 $$ if (!parentDir.canWrite()) -->Line_120 $$ logger.log(Level.WARNING, "[ WARNING CHECK ] The OS reported that is unable to write in parent dir: " + parentDir + " continue anyway; the call might be broken.")[ CD ]
Line_118 $$ final File parentDir = new File(parent)-->Line_122 $$ final File bkpJar = new File(parentDir.getPath() + File.separator + "fdt_" + Config.FDT_FULL_VERSION + ".jar")[ FD ]
Line_123 $$ boolean bDel = bkpJar.exists()-->Line_123 $$ boolean bDel = bkpJar.exists()[ CD ]
Line_122 $$ final File bkpJar = new File(parentDir.getPath() + File.separator + "fdt_" + Config.FDT_FULL_VERSION + ".jar")-->Line_123 $$ boolean bDel = bkpJar.exists()[ FD ]
Line_124 $$ if (bDel) -->Line_125 $$ bDel = bkpJar.delete()[ CD ]
Line_123 $$ boolean bDel = bkpJar.exists()-->Line_125 $$ bDel = bkpJar.delete()[ FD ]
Line_125 $$ bDel = bkpJar.delete()-->Line_125 $$ bDel = bkpJar.delete()[ FD ]
Line_125 $$ bDel = bkpJar.delete()-->Line_125 $$ bDel = bkpJar.delete()[ CD ]
Line_122 $$ final File bkpJar = new File(parentDir.getPath() + File.separator + "fdt_" + Config.FDT_FULL_VERSION + ".jar")-->Line_125 $$ bDel = bkpJar.delete()[ FD ]
Line_124 $$ if (bDel) -->Line_126 $$ if (!bDel) [ CD ]
Line_123 $$ boolean bDel = bkpJar.exists()-->Line_126 $$ if (!bDel) [ FD ]
Line_125 $$ bDel = bkpJar.delete()-->Line_126 $$ if (!bDel) [ FD ]
Line_126 $$ if (!bDel) -->Line_126 $$ if (!bDel) [ CD ]
Line_123 $$ boolean bDel = bkpJar.exists()-->Line_126 $$ if (!bDel) [ FD ]
Line_125 $$ bDel = bkpJar.delete()-->Line_126 $$ if (!bDel) [ FD ]
Line_126 $$ if (!bDel) -->Line_127 $$ logger.log("[ WARNING ] Unable to delete backup jar with the same version: " + bkpJar + " ... will continue")[ CD ]
Line_126 $$ if (!bDel) -->Line_129 $$ logger.log("[ INFO ] Backup jar (same version as the update) " + bkpJar + " delete it.")[ CD ]
Line_132 $$ boolean renameSucced = currentJar.renameTo(bkpJar)-->Line_132 $$ boolean renameSucced = currentJar.renameTo(bkpJar)[ CD ]
Line_68 $$ final File currentJar = new File(finalPath)-->Line_132 $$ boolean renameSucced = currentJar.renameTo(bkpJar)[ FD ]
Line_122 $$ final File bkpJar = new File(parentDir.getPath() + File.separator + "fdt_" + Config.FDT_FULL_VERSION + ".jar")-->Line_132 $$ boolean renameSucced = currentJar.renameTo(bkpJar)[ FD ]
Line_132 $$ boolean renameSucced = currentJar.renameTo(bkpJar)-->Line_133 $$ if (!renameSucced) [ FD ]
Line_133 $$ if (!renameSucced) -->Line_133 $$ if (!renameSucced) [ CD ]
Line_132 $$ boolean renameSucced = currentJar.renameTo(bkpJar)-->Line_133 $$ if (!renameSucced) [ FD ]
Line_133 $$ if (!renameSucced) -->Line_134 $$ logger.log(Level.WARNING, "Unable to create backup: " + bkpJar + " for current FDT before update.")[ CD ]
Line_133 $$ if (!renameSucced) -->Line_136 $$ logger.log("Backing up old FDT succeeded: " + bkpJar)[ CD ]
Line_111 $$ if (shouldUpdate) -->Line_141 $$ copyFile2File(tmpUpdateFile, currentJar, noLock)[ CD ]
Line_77 $$ File tmpUpdateFile = null-->Line_141 $$ copyFile2File(tmpUpdateFile, currentJar, noLock)[ FD ]
Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")-->Line_141 $$ copyFile2File(tmpUpdateFile, currentJar, noLock)[ FD ]
Line_68 $$ final File currentJar = new File(finalPath)-->Line_141 $$ copyFile2File(tmpUpdateFile, currentJar, noLock)[ FD ]
Line_2 $$ public static final boolean updateFDT(final String currentVersion, final String updateURL, boolean shouldUpdate, boolean noLock) throws Exception -->Line_141 $$ copyFile2File(tmpUpdateFile, currentJar, noLock)[ FD ]
Line_80 $$ InputStream connInputStream = null-->Line_145 $$ closeIgnoringExceptions(connInputStream)[ FD ]
Line_92 $$ connInputStream = urlConnection.getInputStream()-->Line_145 $$ closeIgnoringExceptions(connInputStream)[ FD ]
Line_78 $$ FileOutputStream fos = null-->Line_146 $$ closeIgnoringExceptions(fos)[ FD ]
Line_84 $$ fos = new FileOutputStream(tmpUpdateFile)-->Line_146 $$ closeIgnoringExceptions(fos)[ FD ]
Line_77 $$ File tmpUpdateFile = null-->Line_147 $$ if (tmpUpdateFile != null) [ FD ]
Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")-->Line_147 $$ if (tmpUpdateFile != null) [ FD ]
Line_77 $$ File tmpUpdateFile = null-->Line_149 $$ tmpUpdateFile.delete()[ FD ]
Line_82 $$ tmpUpdateFile = File.createTempFile("fdt_update_tmp", ".jar")-->Line_149 $$ tmpUpdateFile.delete()[ FD ]
Line_96 $$ while ((count = connInputStream.read(buff)) > 0) -->Line_97 $$ fos.write(buff, 0, count)[ FD ]
