Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void deploy(final File extension) [ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_3 $$ log.info("Deploying new extension from [ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_3 $$ log.info("Deploying new extension from [ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_4 $$ RequestContextHolder.setRequestContext(new RequestContext(SZoneConfig.getDefaultZoneName(), SZoneConfig.getAdminUserName(SZoneConfig.getDefaultZoneName()), new BaseSessionContext()))[ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_5 $$ RequestContextHolder.getRequestContext().resolve()[ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_6 $$ JarInputStream warIn[ CD ]
Line_6 $$ JarInputStream warIn-->Line_8 $$ warIn = new JarInputStream(new FileInputStream(extension), true)[ FD ]
Line_8 $$ warIn = new JarInputStream(new FileInputStream(extension), true)-->Line_8 $$ warIn = new JarInputStream(new FileInputStream(extension), true)[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_10 $$ log.warn("Unable to open extension WAR at " + extension.getPath(), e)[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_13 $$ SAXReader reader = new SAXReader(false)[ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_14 $$ reader.setIncludeExternalDTDDeclarations(false)[ CD ]
Line_13 $$ SAXReader reader = new SAXReader(false)-->Line_14 $$ reader.setIncludeExternalDTDDeclarations(false)[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_15 $$ String extensionPrefix = extension.getName().substring(0, extension.getName().lastIndexOf("."))[ CD ]
Line_15 $$ String extensionPrefix = extension.getName().substring(0, extension.getName().lastIndexOf("."))-->Line_15 $$ String extensionPrefix = extension.getName().substring(0, extension.getName().lastIndexOf("."))[ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_15 $$ String extensionPrefix = extension.getName().substring(0, extension.getName().lastIndexOf("."))[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_15 $$ String extensionPrefix = extension.getName().substring(0, extension.getName().lastIndexOf("."))[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_16 $$ File extensionDir = new File(extensionBaseDir, extensionPrefix)[ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_17 $$ extensionDir.mkdirs()[ CD ]
Line_16 $$ File extensionDir = new File(extensionBaseDir, extensionPrefix)-->Line_17 $$ extensionDir.mkdirs()[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_18 $$ File extensionWebDir = new File(this.extensionWebDir, extensionPrefix)[ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_19 $$ extensionWebDir.mkdirs()[ CD ]
Line_18 $$ File extensionWebDir = new File(this.extensionWebDir, extensionPrefix)-->Line_19 $$ extensionWebDir.mkdirs()[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ CD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ CD ]
Line_6 $$ JarInputStream warIn-->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_8 $$ warIn = new JarInputStream(new FileInputStream(extension), true)-->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ CD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ CD ]
Line_6 $$ JarInputStream warIn-->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_8 $$ warIn = new JarInputStream(new FileInputStream(extension), true)-->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ CD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ CD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_23 $$ if (entry.isDirectory()) -->Line_23 $$ if (entry.isDirectory()) [ CD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_23 $$ if (entry.isDirectory()) -->Line_24 $$ log.debug("Creating directory at [ CD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_24 $$ log.debug("Creating directory at [ FD ]
Line_23 $$ if (entry.isDirectory()) -->Line_25 $$ inflated.mkdirs()[ CD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_25 $$ inflated.mkdirs()[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_28 $$ inflated.getParentFile().mkdirs()[ CD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_28 $$ inflated.getParentFile().mkdirs()[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_29 $$ FileOutputStream entryOut = new FileOutputStream(inflated)[ CD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) [ CD ]
Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) -->Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) [ CD ]
Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) -->Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) [ CD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) [ FD ]
Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) -->Line_31 $$ log.debug("Inflating file resource to [ CD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_31 $$ log.debug("Inflating file resource to [ FD ]
Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) -->Line_32 $$ IOUtils.copy(warIn, entryOut)[ CD ]
Line_6 $$ JarInputStream warIn-->Line_32 $$ IOUtils.copy(warIn, entryOut)[ FD ]
Line_8 $$ warIn = new JarInputStream(new FileInputStream(extension), true)-->Line_32 $$ IOUtils.copy(warIn, entryOut)[ FD ]
Line_29 $$ FileOutputStream entryOut = new FileOutputStream(inflated)-->Line_32 $$ IOUtils.copy(warIn, entryOut)[ FD ]
Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) -->Line_33 $$ entryOut.close()[ CD ]
Line_29 $$ FileOutputStream entryOut = new FileOutputStream(inflated)-->Line_33 $$ entryOut.close()[ FD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))[ CD ]
Line_13 $$ SAXReader reader = new SAXReader(false)-->Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))[ FD ]
Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)-->Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)[ CD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)[ FD ]
Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)-->Line_39 $$ if (schema == null || StringUtils.isBlank(schema.getText())) [ FD ]
Line_39 $$ if (schema == null || StringUtils.isBlank(schema.getText())) -->Line_40 $$ log.debug("Inflating XML with unrecognized schema to [ CD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_40 $$ log.debug("Inflating XML with unrecognized schema to [ FD ]
Line_43 $$ if (schema.getText().contains(definitionsSchemaNamespace)) -->Line_43 $$ if (schema.getText().contains(definitionsSchemaNamespace)) [ CD ]
Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)-->Line_43 $$ if (schema.getText().contains(definitionsSchemaNamespace)) [ FD ]
Line_43 $$ if (schema.getText().contains(definitionsSchemaNamespace)) -->Line_44 $$ log.debug("Inflating and registering definition from [ CD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_44 $$ log.debug("Inflating and registering definition from [ FD ]
Line_43 $$ if (schema.getText().contains(definitionsSchemaNamespace)) -->Line_45 $$ document.getRootElement().add(new AbstractAttribute() [ CD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_45 $$ document.getRootElement().add(new AbstractAttribute() [ FD ]
Line_45 $$ document.getRootElement().add(new AbstractAttribute() -->Line_45 $$ document.getRootElement().add(new AbstractAttribute() [ CD ]
Line_45 $$ document.getRootElement().add(new AbstractAttribute() -->Line_48 $$ return new QName(extensionAttr, document.getRootElement().getNamespace())[ CD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_48 $$ return new QName(extensionAttr, document.getRootElement().getNamespace())[ FD ]
Line_45 $$ document.getRootElement().add(new AbstractAttribute() -->Line_51 $$ return extension.getName().substring(0, extension.getName().lastIndexOf("."))[ CD ]
Line_51 $$ return extension.getName().substring(0, extension.getName().lastIndexOf("."))-->Line_51 $$ return extension.getName().substring(0, extension.getName().lastIndexOf("."))[ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_51 $$ return extension.getName().substring(0, extension.getName().lastIndexOf("."))[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_51 $$ return extension.getName().substring(0, extension.getName().lastIndexOf("."))[ FD ]
Line_43 $$ if (schema.getText().contains(definitionsSchemaNamespace)) -->Line_54 $$ definitionModule.addDefinition(document, true)[ CD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_54 $$ definitionModule.addDefinition(document, true)[ FD ]
Line_57 $$ if (schema.getText().contains(templateSchemaNamespace)) -->Line_57 $$ if (schema.getText().contains(templateSchemaNamespace)) [ CD ]
Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)-->Line_57 $$ if (schema.getText().contains(templateSchemaNamespace)) [ FD ]
Line_57 $$ if (schema.getText().contains(templateSchemaNamespace)) -->Line_58 $$ log.debug("Inflating and registering template from [ CD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_58 $$ log.debug("Inflating and registering template from [ FD ]
Line_57 $$ if (schema.getText().contains(templateSchemaNamespace)) -->Line_59 $$ templateService.addTemplate(document, true, zoneModule.getDefaultZone())[ CD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_59 $$ templateService.addTemplate(document, true, zoneModule.getDefaultZone())[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_63 $$ log.warn("Malformed XML file in extension war at " + extension.getPath(), e)[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_68 $$ log.warn("Malformed extension war at " + extension.getPath(), e)[ FD ]
Line_6 $$ JarInputStream warIn-->Line_72 $$ warIn.close()[ FD ]
Line_8 $$ warIn = new JarInputStream(new FileInputStream(extension), true)-->Line_72 $$ warIn.close()[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_74 $$ log.warn("Unable to close extension war at " + extension.getPath(), e)[ FD ]
Line_2 $$ public void deploy(final File extension) -->Line_79 $$ log.info("Extension deployed successfully from [ CD ]
Line_2 $$ public void deploy(final File extension) -->Line_79 $$ log.info("Extension deployed successfully from [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_23 $$ if (entry.isDirectory()) [ FD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_24 $$ log.debug("Creating directory at [ FD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_25 $$ inflated.mkdirs()[ FD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_28 $$ inflated.getParentFile().mkdirs()[ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) [ FD ]
Line_21 $$ for (JarEntry entry = warIn.getNextJarEntry(); entry != null; entry = warIn.getNextJarEntry()) -->Line_30 $$ if (!entry.getName().endsWith(configurationFileExtension)) [ FD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_31 $$ log.debug("Inflating file resource to [ FD ]
Line_29 $$ FileOutputStream entryOut = new FileOutputStream(inflated)-->Line_32 $$ IOUtils.copy(warIn, entryOut)[ FD ]
Line_29 $$ FileOutputStream entryOut = new FileOutputStream(inflated)-->Line_33 $$ entryOut.close()[ FD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)[ FD ]
Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)-->Line_39 $$ if (schema == null || StringUtils.isBlank(schema.getText())) [ FD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_40 $$ log.debug("Inflating XML with unrecognized schema to [ FD ]
Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)-->Line_43 $$ if (schema.getText().contains(definitionsSchemaNamespace)) [ FD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_44 $$ log.debug("Inflating and registering definition from [ FD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_45 $$ document.getRootElement().add(new AbstractAttribute() [ FD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_54 $$ definitionModule.addDefinition(document, true)[ FD ]
Line_38 $$ Attribute schema = document.getRootElement().attribute(schemaAttribute)-->Line_57 $$ if (schema.getText().contains(templateSchemaNamespace)) [ FD ]
Line_22 $$ File inflated = new File(entry.getName().startsWith(infPrefix) ? extensionDir : extensionWebDir, entry.getName())-->Line_58 $$ log.debug("Inflating and registering template from [ FD ]
Line_37 $$ final Document document = reader.read(new TeeInputStream(new CloseShieldInputStream(warIn), entryOut, true))-->Line_59 $$ templateService.addTemplate(document, true, zoneModule.getDefaultZone())[ FD ]
