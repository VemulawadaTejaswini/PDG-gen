Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) [ CD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_3 $$ boolean imported = false[ CD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_4 $$ KeyStore ks = null[ CD ]
Line_4 $$ KeyStore ks = null-->Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())[ FD ]
Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())-->Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())[ FD ]
Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())-->Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())[ CD ]
Line_4 $$ KeyStore ks = null-->Line_7 $$ ks.load(new BufferedInputStream(new FileInputStream(keystoreLocation)), pw.toCharArray())[ FD ]
Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())-->Line_7 $$ ks.load(new BufferedInputStream(new FileInputStream(keystoreLocation)), pw.toCharArray())[ FD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_7 $$ ks.load(new BufferedInputStream(new FileInputStream(keystoreLocation)), pw.toCharArray())[ FD ]
Line_9 $$ if (this.debugLevel >= SAWSConstant.ErrorInfo) -->Line_10 $$ this.sawsDebugLog.write("Error reading keystore file when exporting PKC: " + e.getMessage())[ CD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_14 $$ Certificate cert = null[ CD ]
Line_17 $$ CertificateFactory cf = CertificateFactory.getInstance("X.509")-->Line_17 $$ CertificateFactory cf = CertificateFactory.getInstance("X.509")[ CD ]
Line_16 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(pkcFile))-->Line_18 $$ while (bis.available() > 0) [ FD ]
Line_18 $$ while (bis.available() > 0) -->Line_19 $$ cert = cf.generateCertificate(bis)[ CD ]
Line_19 $$ cert = cf.generateCertificate(bis)-->Line_19 $$ cert = cf.generateCertificate(bis)[ FD ]
Line_14 $$ Certificate cert = null-->Line_19 $$ cert = cf.generateCertificate(bis)[ FD ]
Line_19 $$ cert = cf.generateCertificate(bis)-->Line_19 $$ cert = cf.generateCertificate(bis)[ CD ]
Line_17 $$ CertificateFactory cf = CertificateFactory.getInstance("X.509")-->Line_19 $$ cert = cf.generateCertificate(bis)[ FD ]
Line_16 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(pkcFile))-->Line_19 $$ cert = cf.generateCertificate(bis)[ FD ]
Line_22 $$ if (this.debugLevel >= SAWSConstant.ErrorInfo) -->Line_23 $$ this.sawsDebugLog.write("Error reading certificate from file when importing PKC: " + e.getMessage())[ CD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_27 $$ BufferedOutputStream bos = null[ CD ]
Line_27 $$ BufferedOutputStream bos = null-->Line_29 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(keystoreLocation)))[ FD ]
Line_29 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(keystoreLocation)))-->Line_29 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(keystoreLocation)))[ FD ]
Line_31 $$ if (this.debugLevel >= SAWSConstant.ErrorInfo) -->Line_32 $$ this.sawsDebugLog.write("Error accessing key store file when importing certificate: " + e.getMessage())[ CD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_37 $$ if (alias.equals("rootca")) [ FD ]
Line_37 $$ if (alias.equals("rootca")) -->Line_37 $$ if (alias.equals("rootca")) [ CD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_37 $$ if (alias.equals("rootca")) [ FD ]
Line_37 $$ if (alias.equals("rootca")) -->Line_38 $$ ks.setCertificateEntry(alias, cert)[ CD ]
Line_4 $$ KeyStore ks = null-->Line_38 $$ ks.setCertificateEntry(alias, cert)[ FD ]
Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())-->Line_38 $$ ks.setCertificateEntry(alias, cert)[ FD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_38 $$ ks.setCertificateEntry(alias, cert)[ FD ]
Line_19 $$ cert = cf.generateCertificate(bis)-->Line_38 $$ ks.setCertificateEntry(alias, cert)[ FD ]
Line_14 $$ Certificate cert = null-->Line_38 $$ ks.setCertificateEntry(alias, cert)[ FD ]
Line_37 $$ if (alias.equals("rootca")) -->Line_40 $$ KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(pw.toCharArray()))[ CD ]
Line_4 $$ KeyStore ks = null-->Line_40 $$ KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(pw.toCharArray()))[ FD ]
Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())-->Line_40 $$ KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(pw.toCharArray()))[ FD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_40 $$ KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(pw.toCharArray()))[ FD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_40 $$ KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(pw.toCharArray()))[ FD ]
Line_37 $$ if (alias.equals("rootca")) -->Line_41 $$ ks.setKeyEntry(alias, pkEntry.getPrivateKey(), pw.toCharArray(), new Certificate[] [ CD ]
Line_4 $$ KeyStore ks = null-->Line_41 $$ ks.setKeyEntry(alias, pkEntry.getPrivateKey(), pw.toCharArray(), new Certificate[] [ FD ]
Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())-->Line_41 $$ ks.setKeyEntry(alias, pkEntry.getPrivateKey(), pw.toCharArray(), new Certificate[] [ FD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_41 $$ ks.setKeyEntry(alias, pkEntry.getPrivateKey(), pw.toCharArray(), new Certificate[] [ FD ]
Line_40 $$ KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) ks.getEntry(alias, new KeyStore.PasswordProtection(pw.toCharArray()))-->Line_41 $$ ks.setKeyEntry(alias, pkEntry.getPrivateKey(), pw.toCharArray(), new Certificate[] [ FD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_41 $$ ks.setKeyEntry(alias, pkEntry.getPrivateKey(), pw.toCharArray(), new Certificate[] [ FD ]
Line_4 $$ KeyStore ks = null-->Line_43 $$ ks.store(bos, pw.toCharArray())[ FD ]
Line_6 $$ ks = KeyStore.getInstance(KeyStore.getDefaultType())-->Line_43 $$ ks.store(bos, pw.toCharArray())[ FD ]
Line_27 $$ BufferedOutputStream bos = null-->Line_43 $$ ks.store(bos, pw.toCharArray())[ FD ]
Line_29 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(keystoreLocation)))-->Line_43 $$ ks.store(bos, pw.toCharArray())[ FD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_43 $$ ks.store(bos, pw.toCharArray())[ FD ]
Line_3 $$ boolean imported = false-->Line_44 $$ imported = true[ FD ]
Line_44 $$ imported = true-->Line_44 $$ imported = true[ FD ]
Line_47 $$ if (this.debugLevel >= SAWSConstant.ErrorInfo) -->Line_48 $$ this.sawsDebugLog.write("Error writing keystore to file when importing key store: " + e.getMessage())[ CD ]
Line_2 $$ private boolean importPKC(String keystoreLocation, String pw, String pkcFile, String alias) -->Line_52 $$ return imported[ CD ]
