Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception [ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ ActionMessages errors = new ActionMessages()[ CD ]
Line_5 $$ boolean isMultipart = FileUpload.isMultipartContent(request)-->Line_5 $$ boolean isMultipart = FileUpload.isMultipartContent(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_5 $$ boolean isMultipart = FileUpload.isMultipartContent(request)[ FD ]
Line_6 $$ if (isMultipart) -->Line_7 $$ Map fields = new HashMap()[ CD ]
Line_6 $$ if (isMultipart) -->Line_8 $$ Vector attachments = new Vector()[ CD ]
Line_6 $$ if (isMultipart) -->Line_9 $$ List items = diskFileUpload.parseRequest(request)[ CD ]
Line_9 $$ List items = diskFileUpload.parseRequest(request)-->Line_9 $$ List items = diskFileUpload.parseRequest(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_9 $$ List items = diskFileUpload.parseRequest(request)[ FD ]
Line_6 $$ if (isMultipart) -->Line_10 $$ Iterator iter = items.iterator()[ CD ]
Line_10 $$ Iterator iter = items.iterator()-->Line_10 $$ Iterator iter = items.iterator()[ CD ]
Line_9 $$ List items = diskFileUpload.parseRequest(request)-->Line_10 $$ Iterator iter = items.iterator()[ FD ]
Line_6 $$ if (isMultipart) -->Line_11 $$ while (iter.hasNext()) [ CD ]
Line_6 $$ if (isMultipart) -->Line_6 $$ if (isMultipart) [ CD ]
Line_11 $$ while (iter.hasNext()) -->Line_11 $$ while (iter.hasNext()) [ CD ]
Line_10 $$ Iterator iter = items.iterator()-->Line_11 $$ while (iter.hasNext()) [ FD ]
Line_11 $$ while (iter.hasNext()) -->Line_12 $$ FileItem item = (FileItem) iter.next()[ CD ]
Line_10 $$ Iterator iter = items.iterator()-->Line_12 $$ FileItem item = (FileItem) iter.next()[ FD ]
Line_11 $$ while (iter.hasNext()) -->Line_13 $$ if (item.isFormField()) [ CD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_13 $$ if (item.isFormField()) [ FD ]
Line_13 $$ if (item.isFormField()) -->Line_13 $$ if (item.isFormField()) [ CD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_13 $$ if (item.isFormField()) [ FD ]
Line_13 $$ if (item.isFormField()) -->Line_14 $$ fields.put(item.getFieldName(), item.getString())[ CD ]
Line_7 $$ Map fields = new HashMap()-->Line_14 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_13 $$ if (item.isFormField()) -->Line_16 $$ if (!StringUtils.isBlank(item.getName())) [ CD ]
Line_16 $$ if (!StringUtils.isBlank(item.getName())) -->Line_16 $$ if (!StringUtils.isBlank(item.getName())) [ CD ]
Line_16 $$ if (!StringUtils.isBlank(item.getName())) -->Line_16 $$ if (!StringUtils.isBlank(item.getName())) [ CD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_16 $$ if (!StringUtils.isBlank(item.getName())) [ FD ]
Line_16 $$ if (!StringUtils.isBlank(item.getName())) -->Line_17 $$ ByteArrayOutputStream baos = null[ CD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_19 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_19 $$ baos = new ByteArrayOutputStream()-->Line_19 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_20 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_19 $$ baos = new ByteArrayOutputStream()-->Line_20 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_20 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_22 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_22 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_19 $$ baos = new ByteArrayOutputStream()-->Line_22 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_23 $$ part.setContentType(item.getContentType())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_23 $$ part.setContentType(item.getContentType())[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_24 $$ part.setName(item.getName())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_24 $$ part.setName(item.getName())[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_25 $$ part.setSize(item.getSize())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_25 $$ part.setSize(item.getSize())[ FD ]
Line_8 $$ Vector attachments = new Vector()-->Line_26 $$ attachments.addElement(part)[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_26 $$ attachments.addElement(part)[ FD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_29 $$ IOUtils.closeQuietly(baos)[ FD ]
Line_19 $$ baos = new ByteArrayOutputStream()-->Line_29 $$ IOUtils.closeQuietly(baos)[ FD ]
Line_6 $$ if (isMultipart) -->Line_34 $$ String body = ""[ CD ]
Line_6 $$ if (isMultipart) -->Line_35 $$ if (fields.get("taBody") != null) [ CD ]
Line_7 $$ Map fields = new HashMap()-->Line_35 $$ if (fields.get("taBody") != null) [ FD ]
Line_35 $$ if (fields.get("taBody") != null) -->Line_36 $$ body = (String) fields.get("taBody")[ CD ]
Line_34 $$ String body = ""-->Line_36 $$ body = (String) fields.get("taBody")[ FD ]
Line_36 $$ body = (String) fields.get("taBody")-->Line_36 $$ body = (String) fields.get("taBody")[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_36 $$ body = (String) fields.get("taBody")[ FD ]
Line_35 $$ if (fields.get("taBody") != null) -->Line_37 $$ if (fields.get("taReplyBody") != null) [ CD ]
Line_7 $$ Map fields = new HashMap()-->Line_37 $$ if (fields.get("taReplyBody") != null) [ FD ]
Line_37 $$ if (fields.get("taReplyBody") != null) -->Line_38 $$ body = (String) fields.get("taReplyBody")[ CD ]
Line_34 $$ String body = ""-->Line_38 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_36 $$ body = (String) fields.get("taBody")-->Line_38 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_38 $$ body = (String) fields.get("taReplyBody")-->Line_38 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_38 $$ body = (String) fields.get("taReplyBody")[ FD ]
Line_6 $$ if (isMultipart) -->Line_40 $$ Preferences preferencesInstance = getPreferencesInstance(request)[ CD ]
Line_40 $$ Preferences preferencesInstance = getPreferencesInstance(request)-->Line_40 $$ Preferences preferencesInstance = getPreferencesInstance(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_40 $$ Preferences preferencesInstance = getPreferencesInstance(request)[ FD ]
Line_6 $$ if (isMultipart) -->Line_41 $$ Send sendInstance = getSendInstance(request)[ CD ]
Line_41 $$ Send sendInstance = getSendInstance(request)-->Line_41 $$ Send sendInstance = getSendInstance(request)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_41 $$ Send sendInstance = getSendInstance(request)[ FD ]
Line_6 $$ if (isMultipart) -->Line_42 $$ String mid = (String) fields.get("mid")[ CD ]
Line_7 $$ Map fields = new HashMap()-->Line_42 $$ String mid = (String) fields.get("mid")[ FD ]
Line_6 $$ if (isMultipart) -->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ CD ]
Line_41 $$ Send sendInstance = getSendInstance(request)-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_42 $$ String mid = (String) fields.get("mid")-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_34 $$ String body = ""-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_36 $$ body = (String) fields.get("taBody")-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_38 $$ body = (String) fields.get("taReplyBody")-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_8 $$ Vector attachments = new Vector()-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_40 $$ Preferences preferencesInstance = getPreferencesInstance(request)-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_7 $$ Map fields = new HashMap()-->Line_43 $$ sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get("identity")), (String) fields.get("to"), (String) fields.get("cc"), (String) fields.get("bcc"), (String) fields.get("subject"), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get("priority"))[ FD ]
Line_6 $$ if (isMultipart) -->Line_45 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"))[ CD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_45 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "mail.send", "The form is null"))[ FD ]
Line_6 $$ if (isMultipart) -->Line_46 $$ request.setAttribute("exception", "The form is null")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_46 $$ request.setAttribute("exception", "The form is null")[ FD ]
Line_6 $$ if (isMultipart) -->Line_47 $$ request.setAttribute("newLocation", null)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_47 $$ request.setAttribute("newLocation", null)[ FD ]
Line_6 $$ if (isMultipart) -->Line_48 $$ doTrace(request, DLog.ERROR, getClass(), "The form is null")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_48 $$ doTrace(request, DLog.ERROR, getClass(), "The form is null")[ FD ]
Line_51 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_51 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)[ CD ]
Line_51 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_52 $$ if (errorMessage == null) [ FD ]
Line_52 $$ if (errorMessage == null) -->Line_53 $$ errorMessage = "NullPointerException"[ CD ]
Line_51 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_53 $$ errorMessage = "NullPointerException"[ FD ]
Line_53 $$ errorMessage = "NullPointerException"-->Line_53 $$ errorMessage = "NullPointerException"[ FD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_55 $$ errors.add("general", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + "general", errorMessage))[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_56 $$ request.setAttribute("exception", errorMessage)[ FD ]
Line_51 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_56 $$ request.setAttribute("exception", errorMessage)[ FD ]
Line_53 $$ errorMessage = "NullPointerException"-->Line_56 $$ request.setAttribute("exception", errorMessage)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_57 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage)[ FD ]
Line_51 $$ String errorMessage = ExceptionUtilities.parseMessage(ex)-->Line_57 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage)[ FD ]
Line_53 $$ errorMessage = "NullPointerException"-->Line_57 $$ doTrace(request, DLog.ERROR, getClass(), errorMessage)[ FD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_60 $$ if (errors.isEmpty()) [ CD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_60 $$ if (errors.isEmpty()) [ FD ]
Line_60 $$ if (errors.isEmpty()) -->Line_60 $$ if (errors.isEmpty()) [ CD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_60 $$ if (errors.isEmpty()) [ FD ]
Line_60 $$ if (errors.isEmpty()) -->Line_61 $$ doTrace(request, DLog.INFO, getClass(), "OK")[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_61 $$ doTrace(request, DLog.INFO, getClass(), "OK")[ FD ]
Line_60 $$ if (errors.isEmpty()) -->Line_62 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)[ CD ]
Line_62 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)-->Line_62 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_62 $$ return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD)[ FD ]
Line_60 $$ if (errors.isEmpty()) -->Line_64 $$ saveErrors(request, errors)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_64 $$ saveErrors(request, errors)[ FD ]
Line_3 $$ ActionMessages errors = new ActionMessages()-->Line_64 $$ saveErrors(request, errors)[ FD ]
Line_60 $$ if (errors.isEmpty()) -->Line_65 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)[ CD ]
Line_65 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)-->Line_65 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)[ CD ]
Line_2 $$ protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_65 $$ return mapping.findForward(Constants.ACTION_FAIL_FORWARD)[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_13 $$ if (item.isFormField()) [ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_13 $$ if (item.isFormField()) [ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_14 $$ fields.put(item.getFieldName(), item.getString())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_16 $$ if (!StringUtils.isBlank(item.getName())) [ FD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_20 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_19 $$ baos = new ByteArrayOutputStream()-->Line_20 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_20 $$ IOUtils.copy(item.getInputStream(), baos)[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_22 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_22 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_19 $$ baos = new ByteArrayOutputStream()-->Line_22 $$ part.setAttachent(baos.toByteArray())[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_23 $$ part.setContentType(item.getContentType())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_23 $$ part.setContentType(item.getContentType())[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_24 $$ part.setName(item.getName())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_24 $$ part.setName(item.getName())[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_25 $$ part.setSize(item.getSize())[ FD ]
Line_12 $$ FileItem item = (FileItem) iter.next()-->Line_25 $$ part.setSize(item.getSize())[ FD ]
Line_21 $$ MailPartObj part = new MailPartObj()-->Line_26 $$ attachments.addElement(part)[ FD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_29 $$ IOUtils.closeQuietly(baos)[ FD ]
Line_19 $$ baos = new ByteArrayOutputStream()-->Line_29 $$ IOUtils.closeQuietly(baos)[ FD ]
