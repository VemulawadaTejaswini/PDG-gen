Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void fetchKey() throws IOException [ CD ]
Line_2 $$ public void fetchKey() throws IOException -->Line_3 $$ String strurl = MessageFormat.format(keyurl, new Object[] [ CD ]
Line_3 $$ String strurl = MessageFormat.format(keyurl, new Object[] -->Line_3 $$ String strurl = MessageFormat.format(keyurl, new Object[] [ CD ]
Line_2 $$ public void fetchKey() throws IOException -->Line_4 $$ StringBuffer result = new StringBuffer()[ CD ]
Line_2 $$ public void fetchKey() throws IOException -->Line_5 $$ BufferedReader reader = null[ CD ]
Line_2 $$ public void fetchKey() throws IOException -->Line_6 $$ URL url = null[ CD ]
Line_6 $$ URL url = null-->Line_8 $$ url = new URL(strurl)[ FD ]
Line_8 $$ url = new URL(strurl)-->Line_8 $$ url = new URL(strurl)[ FD ]
Line_5 $$ BufferedReader reader = null-->Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_6 $$ URL url = null-->Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_8 $$ url = new URL(strurl)-->Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_11 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_10 $$ String line = null-->Line_11 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_11 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_5 $$ BufferedReader reader = null-->Line_11 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_11 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_12 $$ result.append(line)[ CD ]
Line_4 $$ StringBuffer result = new StringBuffer()-->Line_12 $$ result.append(line)[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_12 $$ result.append(line)[ FD ]
Line_10 $$ String line = null-->Line_12 $$ result.append(line)[ FD ]
Line_5 $$ BufferedReader reader = null-->Line_16 $$ if (reader != null)[ FD ]
Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_16 $$ if (reader != null)[ FD ]
Line_16 $$ if (reader != null)-->Line_16 $$ reader.close()[ CD ]
Line_5 $$ BufferedReader reader = null-->Line_16 $$ reader.close()[ FD ]
Line_9 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_16 $$ reader.close()[ FD ]
Line_2 $$ public void fetchKey() throws IOException -->Line_20 $$ Pattern p = Pattern.compile("<key>(.*)</key>")[ CD ]
Line_20 $$ Pattern p = Pattern.compile("<key>(.*)</key>")-->Line_20 $$ Pattern p = Pattern.compile("<key>(.*)</key>")[ CD ]
Line_2 $$ public void fetchKey() throws IOException -->Line_21 $$ Matcher m = p.matcher(result.toString())[ CD ]
Line_21 $$ Matcher m = p.matcher(result.toString())-->Line_21 $$ Matcher m = p.matcher(result.toString())[ CD ]
Line_20 $$ Pattern p = Pattern.compile("<key>(.*)</key>")-->Line_21 $$ Matcher m = p.matcher(result.toString())[ FD ]
Line_4 $$ StringBuffer result = new StringBuffer()-->Line_21 $$ Matcher m = p.matcher(result.toString())[ FD ]
Line_2 $$ public void fetchKey() throws IOException -->Line_22 $$ if (m.matches()) [ CD ]
Line_21 $$ Matcher m = p.matcher(result.toString())-->Line_22 $$ if (m.matches()) [ FD ]
Line_22 $$ if (m.matches()) -->Line_22 $$ if (m.matches()) [ CD ]
Line_21 $$ Matcher m = p.matcher(result.toString())-->Line_22 $$ if (m.matches()) [ FD ]
Line_22 $$ if (m.matches()) -->Line_23 $$ this.key = m.group(1)[ CD ]
Line_23 $$ this.key = m.group(1)-->Line_23 $$ this.key = m.group(1)[ CD ]
Line_21 $$ Matcher m = p.matcher(result.toString())-->Line_23 $$ this.key = m.group(1)[ FD ]
Line_11 $$ while ((line = reader.readLine()) != null) -->Line_12 $$ result.append(line)[ FD ]
