Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Constructor run() throws Exception [ CD ]
Line_2 $$ public Constructor run() throws Exception -->Line_3 $$ String path = "META-INF/services/" + ComponentApplicationContext.class.getName()[ CD ]
Line_2 $$ public Constructor run() throws Exception -->Line_4 $$ ClassLoader loader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_4 $$ ClassLoader loader = Thread.currentThread().getContextClassLoader()-->Line_4 $$ ClassLoader loader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_2 $$ public Constructor run() throws Exception -->Line_5 $$ final Enumeration<URL> urls[ CD ]
Line_2 $$ public Constructor run() throws Exception -->Line_6 $$ if (loader == null) [ CD ]
Line_4 $$ ClassLoader loader = Thread.currentThread().getContextClassLoader()-->Line_6 $$ if (loader == null) [ FD ]
Line_6 $$ if (loader == null) -->Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)[ CD ]
Line_5 $$ final Enumeration<URL> urls-->Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)[ FD ]
Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)-->Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)[ FD ]
Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)-->Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)[ CD ]
Line_3 $$ String path = "META-INF/services/" + ComponentApplicationContext.class.getName()-->Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)[ FD ]
Line_6 $$ if (loader == null) -->Line_9 $$ urls = loader.getResources(path)[ CD ]
Line_5 $$ final Enumeration<URL> urls-->Line_9 $$ urls = loader.getResources(path)[ FD ]
Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)-->Line_9 $$ urls = loader.getResources(path)[ FD ]
Line_9 $$ urls = loader.getResources(path)-->Line_9 $$ urls = loader.getResources(path)[ FD ]
Line_9 $$ urls = loader.getResources(path)-->Line_9 $$ urls = loader.getResources(path)[ CD ]
Line_4 $$ ClassLoader loader = Thread.currentThread().getContextClassLoader()-->Line_9 $$ urls = loader.getResources(path)[ FD ]
Line_3 $$ String path = "META-INF/services/" + ComponentApplicationContext.class.getName()-->Line_9 $$ urls = loader.getResources(path)[ FD ]
Line_2 $$ public Constructor run() throws Exception -->Line_11 $$ while (urls.hasMoreElements()) [ CD ]
Line_2 $$ public Constructor run() throws Exception -->Line_2 $$ public Constructor run() throws Exception [ CD ]
Line_11 $$ while (urls.hasMoreElements()) -->Line_11 $$ while (urls.hasMoreElements()) [ CD ]
Line_5 $$ final Enumeration<URL> urls-->Line_11 $$ while (urls.hasMoreElements()) [ FD ]
Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)-->Line_11 $$ while (urls.hasMoreElements()) [ FD ]
Line_9 $$ urls = loader.getResources(path)-->Line_11 $$ while (urls.hasMoreElements()) [ FD ]
Line_11 $$ while (urls.hasMoreElements()) -->Line_12 $$ URL url = urls.nextElement()[ CD ]
Line_12 $$ URL url = urls.nextElement()-->Line_12 $$ URL url = urls.nextElement()[ CD ]
Line_5 $$ final Enumeration<URL> urls-->Line_12 $$ URL url = urls.nextElement()[ FD ]
Line_7 $$ urls = ComponentApplicationContext.class.getClassLoader().getResources(path)-->Line_12 $$ URL url = urls.nextElement()[ FD ]
Line_9 $$ urls = loader.getResources(path)-->Line_12 $$ URL url = urls.nextElement()[ FD ]
Line_11 $$ while (urls.hasMoreElements()) -->Line_13 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ CD ]
Line_12 $$ URL url = urls.nextElement()-->Line_13 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_16 $$ while ((className = reader.readLine()) != null) -->Line_16 $$ while ((className = reader.readLine()) != null) [ FD ]
Line_15 $$ String className = null-->Line_16 $$ while ((className = reader.readLine()) != null) [ FD ]
Line_16 $$ while ((className = reader.readLine()) != null) -->Line_16 $$ while ((className = reader.readLine()) != null) [ CD ]
Line_13 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_16 $$ while ((className = reader.readLine()) != null) [ FD ]
Line_16 $$ while ((className = reader.readLine()) != null) -->Line_17 $$ final String name = className.trim()[ CD ]
Line_17 $$ final String name = className.trim()-->Line_17 $$ final String name = className.trim()[ CD ]
Line_16 $$ while ((className = reader.readLine()) != null) -->Line_17 $$ final String name = className.trim()[ FD ]
Line_15 $$ String className = null-->Line_17 $$ final String name = className.trim()[ FD ]
Line_16 $$ while ((className = reader.readLine()) != null) -->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ CD ]
Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) -->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ CD ]
Line_17 $$ final String name = className.trim()-->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ FD ]
Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) -->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ CD ]
Line_17 $$ final String name = className.trim()-->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ FD ]
Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) -->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ CD ]
Line_17 $$ final String name = className.trim()-->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ FD ]
Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) -->Line_19 $$ final Class<?> cls[ CD ]
Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) -->Line_20 $$ if (loader == null) [ CD ]
Line_4 $$ ClassLoader loader = Thread.currentThread().getContextClassLoader()-->Line_20 $$ if (loader == null) [ FD ]
Line_20 $$ if (loader == null) -->Line_21 $$ cls = Class.forName(name)[ CD ]
Line_19 $$ final Class<?> cls-->Line_21 $$ cls = Class.forName(name)[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_21 $$ cls = Class.forName(name)[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_21 $$ cls = Class.forName(name)[ CD ]
Line_17 $$ final String name = className.trim()-->Line_21 $$ cls = Class.forName(name)[ FD ]
Line_20 $$ if (loader == null) -->Line_23 $$ cls = Class.forName(name, true, loader)[ CD ]
Line_19 $$ final Class<?> cls-->Line_23 $$ cls = Class.forName(name, true, loader)[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_23 $$ cls = Class.forName(name, true, loader)[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_23 $$ cls = Class.forName(name, true, loader)[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_23 $$ cls = Class.forName(name, true, loader)[ CD ]
Line_17 $$ final String name = className.trim()-->Line_23 $$ cls = Class.forName(name, true, loader)[ FD ]
Line_4 $$ ClassLoader loader = Thread.currentThread().getContextClassLoader()-->Line_23 $$ cls = Class.forName(name, true, loader)[ FD ]
Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) -->Line_25 $$ int m = cls.getModifiers()[ CD ]
Line_25 $$ int m = cls.getModifiers()-->Line_25 $$ int m = cls.getModifiers()[ CD ]
Line_19 $$ final Class<?> cls-->Line_25 $$ int m = cls.getModifiers()[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_25 $$ int m = cls.getModifiers()[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_25 $$ int m = cls.getModifiers()[ FD ]
Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) -->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ CD ]
Line_19 $$ final Class<?> cls-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) -->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ CD ]
Line_25 $$ int m = cls.getModifiers()-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) -->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ CD ]
Line_25 $$ int m = cls.getModifiers()-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) -->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ CD ]
Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()-->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ CD ]
Line_19 $$ final Class<?> cls-->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ FD ]
Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) -->Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) [ CD ]
Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) -->Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) [ CD ]
Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) -->Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) [ CD ]
Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()-->Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) [ FD ]
Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) -->Line_29 $$ constructor.setAccessible(true)[ CD ]
Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()-->Line_29 $$ constructor.setAccessible(true)[ FD ]
Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) -->Line_31 $$ return constructor[ CD ]
Line_19 $$ final Class<?> cls-->Line_33 $$ throw new ClassCastException(cls.getName())[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_33 $$ throw new ClassCastException(cls.getName())[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_33 $$ throw new ClassCastException(cls.getName())[ FD ]
Line_13 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_38 $$ reader.close()[ FD ]
Line_12 $$ URL url = urls.nextElement()-->Line_13 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_13 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_38 $$ reader.close()[ FD ]
Line_16 $$ while ((className = reader.readLine()) != null) -->Line_17 $$ final String name = className.trim()[ FD ]
Line_17 $$ final String name = className.trim()-->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ FD ]
Line_17 $$ final String name = className.trim()-->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ FD ]
Line_17 $$ final String name = className.trim()-->Line_18 $$ if (!name.startsWith("#") && !name.startsWith(";") && !name.startsWith("//")) [ FD ]
Line_17 $$ final String name = className.trim()-->Line_21 $$ cls = Class.forName(name)[ FD ]
Line_17 $$ final String name = className.trim()-->Line_23 $$ cls = Class.forName(name, true, loader)[ FD ]
Line_19 $$ final Class<?> cls-->Line_25 $$ int m = cls.getModifiers()[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_25 $$ int m = cls.getModifiers()[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_25 $$ int m = cls.getModifiers()[ FD ]
Line_19 $$ final Class<?> cls-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_25 $$ int m = cls.getModifiers()-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_25 $$ int m = cls.getModifiers()-->Line_26 $$ if (ComponentApplicationContext.class.isAssignableFrom(cls) && !Modifier.isAbstract(m) && !Modifier.isInterface(m)) [ FD ]
Line_19 $$ final Class<?> cls-->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()[ FD ]
Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()-->Line_28 $$ if (!Modifier.isPublic(constructor.getModifiers())) [ FD ]
Line_27 $$ Constructor constructor = cls.getDeclaredConstructor()-->Line_29 $$ constructor.setAccessible(true)[ FD ]
Line_19 $$ final Class<?> cls-->Line_33 $$ throw new ClassCastException(cls.getName())[ FD ]
Line_21 $$ cls = Class.forName(name)-->Line_33 $$ throw new ClassCastException(cls.getName())[ FD ]
Line_23 $$ cls = Class.forName(name, true, loader)-->Line_33 $$ throw new ClassCastException(cls.getName())[ FD ]
