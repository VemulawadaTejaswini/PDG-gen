Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) [ CD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_3 $$ final FTPClient ftp = new FTPClient()[ CD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_4 $$ final FTPMessageCollector listener = new FTPMessageCollector()[ CD ]
Line_6 $$ final String localDirName = localName.substring(0, localName.lastIndexOf(File.separator))-->Line_6 $$ final String localDirName = localName.substring(0, localName.lastIndexOf(File.separator))[ CD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_6 $$ final String localDirName = localName.substring(0, localName.lastIndexOf(File.separator))[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_6 $$ final String localDirName = localName.substring(0, localName.lastIndexOf(File.separator))[ FD ]
Line_11 $$ if (!localDir.exists()) -->Line_11 $$ if (!localDir.exists()) [ CD ]
Line_11 $$ if (!localDir.exists()) -->Line_11 $$ if (!localDir.exists()) [ CD ]
Line_10 $$ final File localDir = new File(localDirName)-->Line_11 $$ if (!localDir.exists()) [ FD ]
Line_11 $$ if (!localDir.exists()) -->Line_12 $$ System.out.println("   create Dir " + localDirName)[ CD ]
Line_11 $$ if (!localDir.exists()) -->Line_13 $$ localDir.mkdir()[ CD ]
Line_10 $$ final File localDir = new File(localDirName)-->Line_13 $$ localDir.mkdir()[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_15 $$ ftp.setTimeout(10000)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_16 $$ ftp.setRemoteHost(host)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_17 $$ ftp.setMessageListener(listener)[ FD ]
Line_4 $$ final FTPMessageCollector listener = new FTPMessageCollector()-->Line_17 $$ ftp.setMessageListener(listener)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_24 $$ final TileInfoManager tileInfoMgr = TileInfoManager.getInstance()[ CD ]
Line_24 $$ final TileInfoManager tileInfoMgr = TileInfoManager.getInstance()-->Line_24 $$ final TileInfoManager tileInfoMgr = TileInfoManager.getInstance()[ CD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_25 $$ final Job downloadJob = new Job(Messages.job_name_ftpDownload) [ CD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_28 $$ showTileInfo(remoteFileName, -1)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_30 $$ ftp.connect()[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_31 $$ showTileInfo(remoteFileName, -2)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_33 $$ ftp.login(user, password)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_35 $$ ftp.setConnectMode(FTPConnectMode.PASV)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_37 $$ ftp.setType(FTPTransferType.BINARY)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_38 $$ showTileInfo(remoteFileName, -3)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_40 $$ ftp.chdir(remoteFilePath)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_40 $$ ftp.chdir(remoteFilePath)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_41 $$ ftp.setProgressMonitor(new FTPProgressMonitor() [ FD ]
Line_41 $$ ftp.setProgressMonitor(new FTPProgressMonitor() -->Line_43 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_LOADING_MONITOR, remoteFileName, count)[ CD ]
Line_24 $$ final TileInfoManager tileInfoMgr = TileInfoManager.getInstance()-->Line_43 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_LOADING_MONITOR, remoteFileName, count)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_43 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_LOADING_MONITOR, remoteFileName, count)[ FD ]
Line_41 $$ ftp.setProgressMonitor(new FTPProgressMonitor() -->Line_43 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_LOADING_MONITOR, remoteFileName, count)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_46 $$ showTileInfo(remoteFileName, -4)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_48 $$ ftp.get(localName, remoteFileName)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_48 $$ ftp.get(localName, remoteFileName)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_48 $$ ftp.get(localName, remoteFileName)[ FD ]
Line_3 $$ final FTPClient ftp = new FTPClient()-->Line_50 $$ ftp.quit()[ FD ]
Line_24 $$ final TileInfoManager tileInfoMgr = TileInfoManager.getInstance()-->Line_57 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_ERROR_LOADING, remoteFileName, 0)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_57 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_ERROR_LOADING, remoteFileName, 0)[ FD ]
Line_24 $$ final TileInfoManager tileInfoMgr = TileInfoManager.getInstance()-->Line_59 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_END_LOADING, remoteFileName, 0)[ FD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_59 $$ tileInfoMgr.updateSRTMTileInfo(TileEventId.SRTM_DATA_END_LOADING, remoteFileName, 0)[ FD ]
Line_25 $$ final Job downloadJob = new Job(Messages.job_name_ftpDownload) -->Line_61 $$ return Status.OK_STATUS[ CD ]
Line_2 $$ public void get(final String remoteFilePath, final String remoteFileName, final String localName) -->Line_64 $$ downloadJob.schedule()[ CD ]
Line_25 $$ final Job downloadJob = new Job(Messages.job_name_ftpDownload) -->Line_64 $$ downloadJob.schedule()[ FD ]
Line_25 $$ final Job downloadJob = new Job(Messages.job_name_ftpDownload) -->Line_66 $$ downloadJob.join()[ FD ]
