Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception [ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_3 $$ long maxsize = 50[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_4 $$ long maxwidth = 3000[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_5 $$ long maxheight = 3000[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_6 $$ long minheight = 10[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_7 $$ ActionRequestImpl reqImpl = (ActionRequestImpl) req[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_8 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()[ CD ]
Line_8 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_8 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()[ CD ]
Line_7 $$ ActionRequestImpl reqImpl = (ActionRequestImpl) req-->Line_8 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()[ FD ]
Line_10 $$ UploadPortletRequest uploadReq = PortalUtil.getUploadPortletRequest(req)-->Line_10 $$ UploadPortletRequest uploadReq = PortalUtil.getUploadPortletRequest(req)[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_10 $$ UploadPortletRequest uploadReq = PortalUtil.getUploadPortletRequest(req)[ FD ]
Line_11 $$ String parent = ParamUtil.getString(req, "parent")-->Line_11 $$ String parent = ParamUtil.getString(req, "parent")[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_11 $$ String parent = ParamUtil.getString(req, "parent")[ FD ]
Line_12 $$ int countFiles = ParamUtil.getInteger(req, "countFiles")-->Line_12 $$ int countFiles = ParamUtil.getInteger(req, "countFiles")[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_12 $$ int countFiles = ParamUtil.getInteger(req, "countFiles")[ FD ]
Line_11 $$ String parent = ParamUtil.getString(req, "parent")-->Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)[ FD ]
Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)-->Line_15 $$ _checkUserPermissions(folder, user, PERMISSION_WRITE)[ FD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_15 $$ _checkUserPermissions(folder, user, PERMISSION_WRITE)[ FD ]
Line_16 $$ String userId = user.getUserId()-->Line_16 $$ String userId = user.getUserId()[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_16 $$ String userId = user.getUserId()[ FD ]
Line_12 $$ int countFiles = ParamUtil.getInteger(req, "countFiles")-->Line_19 $$ for (int k = 0; k < countFiles; k++) [ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_19 $$ for (int k = 0; k < countFiles; k++) [ CD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_19 $$ for (int k = 0; k < countFiles; k++) [ CD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_19 $$ for (int k = 0; k < countFiles; k++) [ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_20 $$ File file = new File()[ CD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_21 $$ String title = ParamUtil.getString(req, "title" + k)[ CD ]
Line_21 $$ String title = ParamUtil.getString(req, "title" + k)-->Line_21 $$ String title = ParamUtil.getString(req, "title" + k)[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_21 $$ String title = ParamUtil.getString(req, "title" + k)[ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_22 $$ String friendlyName = ParamUtil.getString(req, "friendlyName" + k)[ CD ]
Line_22 $$ String friendlyName = ParamUtil.getString(req, "friendlyName" + k)-->Line_22 $$ String friendlyName = ParamUtil.getString(req, "friendlyName" + k)[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_22 $$ String friendlyName = ParamUtil.getString(req, "friendlyName" + k)[ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_23 $$ Date publishDate = new Date()[ CD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)[ CD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)[ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_25 $$ fileName = checkMACFileName(fileName)[ CD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_25 $$ fileName = checkMACFileName(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_25 $$ fileName = checkMACFileName(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_25 $$ fileName = checkMACFileName(fileName)[ CD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_25 $$ fileName = checkMACFileName(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_25 $$ fileName = checkMACFileName(fileName)[ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ CD ]
Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) -->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ CD ]
Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) -->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ CD ]
Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)-->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ FD ]
Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) -->Line_27 $$ customMessage += fileName + ", "[ CD ]
Line_27 $$ customMessage += fileName + ", "-->Line_27 $$ customMessage += fileName + ", "[ FD ]
Line_17 $$ String customMessage = "Some file does not match the filters specified by the folder: "-->Line_27 $$ customMessage += fileName + ", "[ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_27 $$ customMessage += fileName + ", "[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_27 $$ customMessage += fileName + ", "[ FD ]
Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) -->Line_28 $$ filterError = true[ CD ]
Line_28 $$ filterError = true-->Line_28 $$ filterError = true[ FD ]
Line_18 $$ boolean filterError = false-->Line_28 $$ filterError = true[ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_31 $$ if (fileName.length() > 0) [ CD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_31 $$ if (fileName.length() > 0) [ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_31 $$ if (fileName.length() > 0) [ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)[ CD ]
Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)-->Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)[ CD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_33 $$ String URI = folder.getPath() + fileName[ CD ]
Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)-->Line_33 $$ String URI = folder.getPath() + fileName[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)[ CD ]
Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)-->Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)[ CD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_35 $$ file.setTitle(title)[ CD ]
Line_20 $$ File file = new File()-->Line_35 $$ file.setTitle(title)[ FD ]
Line_21 $$ String title = ParamUtil.getString(req, "title" + k)-->Line_35 $$ file.setTitle(title)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_36 $$ file.setFileName(fileName)[ CD ]
Line_20 $$ File file = new File()-->Line_36 $$ file.setFileName(fileName)[ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_36 $$ file.setFileName(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_36 $$ file.setFileName(fileName)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_37 $$ file.setFriendlyName(friendlyName)[ CD ]
Line_20 $$ File file = new File()-->Line_37 $$ file.setFriendlyName(friendlyName)[ FD ]
Line_22 $$ String friendlyName = ParamUtil.getString(req, "friendlyName" + k)-->Line_37 $$ file.setFriendlyName(friendlyName)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_38 $$ file.setPublishDate(publishDate)[ CD ]
Line_20 $$ File file = new File()-->Line_38 $$ file.setPublishDate(publishDate)[ FD ]
Line_23 $$ Date publishDate = new Date()-->Line_38 $$ file.setPublishDate(publishDate)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_39 $$ file.setModUser(userId)[ CD ]
Line_20 $$ File file = new File()-->Line_39 $$ file.setModUser(userId)[ FD ]
Line_16 $$ String userId = user.getUserId()-->Line_39 $$ file.setModUser(userId)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_40 $$ InodeFactory.saveInode(file)[ CD ]
Line_20 $$ File file = new File()-->Line_40 $$ InodeFactory.saveInode(file)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_41 $$ String filePath = FileFactory.getRealAssetsRootPath()[ CD ]
Line_41 $$ String filePath = FileFactory.getRealAssetsRootPath()-->Line_41 $$ String filePath = FileFactory.getRealAssetsRootPath()[ CD ]
Line_31 $$ if (fileName.length() > 0) -->Line_42 $$ new java.io.File(filePath).mkdir()[ CD ]
Line_31 $$ if (fileName.length() > 0) -->Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)[ CD ]
Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)-->Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)[ CD ]
Line_10 $$ UploadPortletRequest uploadReq = PortalUtil.getUploadPortletRequest(req)-->Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_44 $$ Logger.debug(this, "bytes" + uploadedFile.length())[ CD ]
Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)-->Line_44 $$ Logger.debug(this, "bytes" + uploadedFile.length())[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_45 $$ file.setSize((int) uploadedFile.length() - 2)[ CD ]
Line_20 $$ File file = new File()-->Line_45 $$ file.setSize((int) uploadedFile.length() - 2)[ FD ]
Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)-->Line_45 $$ file.setSize((int) uploadedFile.length() - 2)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_46 $$ file.setMimeType(mimeType)[ CD ]
Line_20 $$ File file = new File()-->Line_46 $$ file.setMimeType(mimeType)[ FD ]
Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)-->Line_46 $$ file.setMimeType(mimeType)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_47 $$ Host host = HostFactory.getCurrentHost(httpReq)[ CD ]
Line_47 $$ Host host = HostFactory.getCurrentHost(httpReq)-->Line_47 $$ Host host = HostFactory.getCurrentHost(httpReq)[ CD ]
Line_8 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_47 $$ Host host = HostFactory.getCurrentHost(httpReq)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_48 $$ Identifier ident = IdentifierFactory.getIdentifierByURI(URI, host)[ CD ]
Line_48 $$ Identifier ident = IdentifierFactory.getIdentifierByURI(URI, host)-->Line_48 $$ Identifier ident = IdentifierFactory.getIdentifierByURI(URI, host)[ CD ]
Line_33 $$ String URI = folder.getPath() + fileName-->Line_48 $$ Identifier ident = IdentifierFactory.getIdentifierByURI(URI, host)[ FD ]
Line_47 $$ Host host = HostFactory.getCurrentHost(httpReq)-->Line_48 $$ Identifier ident = IdentifierFactory.getIdentifierByURI(URI, host)[ FD ]
Line_31 $$ if (fileName.length() > 0) -->Line_49 $$ String message = ""[ CD ]
Line_31 $$ if (fileName.length() > 0) -->Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) [ CD ]
Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)-->Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) [ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) [ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) [ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_51 $$ InodeFactory.deleteInode(file)[ CD ]
Line_20 $$ File file = new File()-->Line_51 $$ InodeFactory.deleteInode(file)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_52 $$ message = "The uploaded file " + fileName + " already exists in this folder"[ CD ]
Line_49 $$ String message = ""-->Line_52 $$ message = "The uploaded file " + fileName + " already exists in this folder"[ FD ]
Line_52 $$ message = "The uploaded file " + fileName + " already exists in this folder"-->Line_52 $$ message = "The uploaded file " + fileName + " already exists in this folder"[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_53 $$ SessionMessages.add(req, "custommessage", message)[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_53 $$ SessionMessages.add(req, "custommessage", message)[ FD ]
Line_49 $$ String message = ""-->Line_53 $$ SessionMessages.add(req, "custommessage", message)[ FD ]
Line_52 $$ message = "The uploaded file " + fileName + " already exists in this folder"-->Line_53 $$ SessionMessages.add(req, "custommessage", message)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_55 $$ String fileInodePath = String.valueOf(file.getInode())[ CD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_55 $$ String fileInodePath = String.valueOf(file.getInode())[ CD ]
Line_20 $$ File file = new File()-->Line_55 $$ String fileInodePath = String.valueOf(file.getInode())[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_56 $$ if (fileInodePath.length() == 1) [ CD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_56 $$ if (fileInodePath.length() == 1) [ FD ]
Line_56 $$ if (fileInodePath.length() == 1) -->Line_57 $$ fileInodePath = fileInodePath + "0"[ CD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_57 $$ fileInodePath = fileInodePath + "0"[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_57 $$ fileInodePath = fileInodePath + "0"[ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_57 $$ fileInodePath = fileInodePath + "0"[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_57 $$ fileInodePath = fileInodePath + "0"[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ CD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_60 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath.substring(0, 1)).mkdir()[ CD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_60 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath.substring(0, 1)).mkdir()[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_60 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath.substring(0, 1)).mkdir()[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_60 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath.substring(0, 1)).mkdir()[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_61 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath).mkdir()[ CD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)[ CD ]
Line_20 $$ File file = new File()-->Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_63 $$ java.io.FileOutputStream fout = new java.io.FileOutputStream(f)[ CD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_64 $$ FileChannel outputChannel = fout.getChannel()[ CD ]
Line_64 $$ FileChannel outputChannel = fout.getChannel()-->Line_64 $$ FileChannel outputChannel = fout.getChannel()[ CD ]
Line_63 $$ java.io.FileOutputStream fout = new java.io.FileOutputStream(f)-->Line_64 $$ FileChannel outputChannel = fout.getChannel()[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()[ CD ]
Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()-->Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()[ CD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_66 $$ outputChannel.transferFrom(inputChannel, 0, inputChannel.size())[ CD ]
Line_64 $$ FileChannel outputChannel = fout.getChannel()-->Line_66 $$ outputChannel.transferFrom(inputChannel, 0, inputChannel.size())[ FD ]
Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()-->Line_66 $$ outputChannel.transferFrom(inputChannel, 0, inputChannel.size())[ FD ]
Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()-->Line_66 $$ outputChannel.transferFrom(inputChannel, 0, inputChannel.size())[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_67 $$ outputChannel.force(false)[ CD ]
Line_64 $$ FileChannel outputChannel = fout.getChannel()-->Line_67 $$ outputChannel.force(false)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_68 $$ outputChannel.close()[ CD ]
Line_64 $$ FileChannel outputChannel = fout.getChannel()-->Line_68 $$ outputChannel.close()[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_69 $$ inputChannel.close()[ CD ]
Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()-->Line_69 $$ inputChannel.close()[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_70 $$ Logger.debug(this, "SaveFileAction New File in =" + filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)[ CD ]
Line_20 $$ File file = new File()-->Line_70 $$ Logger.debug(this, "SaveFileAction New File in =" + filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) [ CD ]
Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)-->Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) [ FD ]
Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)-->Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) [ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_72 $$ com.dotmarketing.util.Thumbnail.resizeImage(filePath + java.io.File.separator + fileInodePath + java.io.File.separator, String.valueOf(file.getInode()), suffix)[ CD ]
Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)-->Line_72 $$ com.dotmarketing.util.Thumbnail.resizeImage(filePath + java.io.File.separator + fileInodePath + java.io.File.separator, String.valueOf(file.getInode()), suffix)[ FD ]
Line_20 $$ File file = new File()-->Line_72 $$ com.dotmarketing.util.Thumbnail.resizeImage(filePath + java.io.File.separator + fileInodePath + java.io.File.separator, String.valueOf(file.getInode()), suffix)[ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_73 $$ int height = javax.imageio.ImageIO.read(f).getHeight()[ CD ]
Line_73 $$ int height = javax.imageio.ImageIO.read(f).getHeight()-->Line_73 $$ int height = javax.imageio.ImageIO.read(f).getHeight()[ CD ]
Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)-->Line_73 $$ int height = javax.imageio.ImageIO.read(f).getHeight()[ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_74 $$ file.setHeight(height)[ CD ]
Line_20 $$ File file = new File()-->Line_74 $$ file.setHeight(height)[ FD ]
Line_73 $$ int height = javax.imageio.ImageIO.read(f).getHeight()-->Line_74 $$ file.setHeight(height)[ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_75 $$ Logger.debug(this, "File height=" + height)[ CD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_76 $$ int width = javax.imageio.ImageIO.read(f).getWidth()[ CD ]
Line_76 $$ int width = javax.imageio.ImageIO.read(f).getWidth()-->Line_76 $$ int width = javax.imageio.ImageIO.read(f).getWidth()[ CD ]
Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)-->Line_76 $$ int width = javax.imageio.ImageIO.read(f).getWidth()[ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_77 $$ file.setWidth(width)[ CD ]
Line_20 $$ File file = new File()-->Line_77 $$ file.setWidth(width)[ FD ]
Line_76 $$ int width = javax.imageio.ImageIO.read(f).getWidth()-->Line_77 $$ file.setWidth(width)[ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_78 $$ Logger.debug(this, "File width=" + width)[ CD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_79 $$ long size = (f.length() / 1024)[ CD ]
Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)-->Line_79 $$ long size = (f.length() / 1024)[ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_80 $$ WebAssetFactory.createAsset(file, userId, folder)[ CD ]
Line_20 $$ File file = new File()-->Line_80 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_16 $$ String userId = user.getUserId()-->Line_80 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)-->Line_80 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) -->Line_82 $$ WebAssetFactory.createAsset(file, userId, folder)[ CD ]
Line_20 $$ File file = new File()-->Line_82 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_16 $$ String userId = user.getUserId()-->Line_82 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)-->Line_82 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_84 $$ WorkingCache.addToWorkingAssetToCache(file)[ CD ]
Line_20 $$ File file = new File()-->Line_84 $$ WorkingCache.addToWorkingAssetToCache(file)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_85 $$ _setFilePermissions(folder, file, user)[ CD ]
Line_14 $$ Folder folder = (Folder) InodeFactory.getInode(parent, Folder.class)-->Line_85 $$ _setFilePermissions(folder, file, user)[ FD ]
Line_20 $$ File file = new File()-->Line_85 $$ _setFilePermissions(folder, file, user)[ FD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_85 $$ _setFilePermissions(folder, file, user)[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_86 $$ fileCounter += 1[ CD ]
Line_86 $$ fileCounter += 1-->Line_86 $$ fileCounter += 1[ FD ]
Line_13 $$ int fileCounter = 0-->Line_86 $$ fileCounter += 1[ FD ]
Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) -->Line_87 $$ if ((subcmd != null) && subcmd.equals(com.dotmarketing.util.Constants.PUBLISH)) [ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_87 $$ if ((subcmd != null) && subcmd.equals(com.dotmarketing.util.Constants.PUBLISH)) [ FD ]
Line_20 $$ File file = new File()-->Line_89 $$ PublishFactory.publishAsset(file, httpReq)[ FD ]
Line_8 $$ HttpServletRequest httpReq = reqImpl.getHttpServletRequest()-->Line_89 $$ PublishFactory.publishAsset(file, httpReq)[ FD ]
Line_86 $$ fileCounter += 1-->Line_90 $$ if (fileCounter > 1) [ FD ]
Line_13 $$ int fileCounter = 0-->Line_90 $$ if (fileCounter > 1) [ FD ]
Line_90 $$ if (fileCounter > 1) -->Line_91 $$ SessionMessages.add(req, "message", "message.file_asset.save")[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_91 $$ SessionMessages.add(req, "message", "message.file_asset.save")[ FD ]
Line_90 $$ if (fileCounter > 1) -->Line_93 $$ SessionMessages.add(req, "message", "message.fileupload.save")[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_93 $$ SessionMessages.add(req, "message", "message.fileupload.save")[ FD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_97 $$ SessionMessages.add(req, "error", "message.webasset.published.failed")[ FD ]
Line_103 $$ if (filterError) -->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ CD ]
Line_27 $$ customMessage += fileName + ", "-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_17 $$ String customMessage = "Some file does not match the filters specified by the folder: "-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ CD ]
Line_27 $$ customMessage += fileName + ", "-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_17 $$ String customMessage = "Some file does not match the filters specified by the folder: "-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_27 $$ customMessage += fileName + ", "-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_17 $$ String customMessage = "Some file does not match the filters specified by the folder: "-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))-->Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))[ FD ]
Line_103 $$ if (filterError) -->Line_105 $$ SessionMessages.add(req, "custommessage", customMessage)[ CD ]
Line_2 $$ public void _saveWebAsset(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form, User user, String subcmd) throws WebAssetException, Exception -->Line_105 $$ SessionMessages.add(req, "custommessage", customMessage)[ FD ]
Line_27 $$ customMessage += fileName + ", "-->Line_105 $$ SessionMessages.add(req, "custommessage", customMessage)[ FD ]
Line_17 $$ String customMessage = "Some file does not match the filters specified by the folder: "-->Line_105 $$ SessionMessages.add(req, "custommessage", customMessage)[ FD ]
Line_104 $$ customMessage = customMessage.substring(0, customMessage.lastIndexOf(","))-->Line_105 $$ SessionMessages.add(req, "custommessage", customMessage)[ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_19 $$ for (int k = 0; k < countFiles; k++) [ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_19 $$ for (int k = 0; k < countFiles; k++) [ FD ]
Line_19 $$ for (int k = 0; k < countFiles; k++) -->Line_19 $$ for (int k = 0; k < countFiles; k++) [ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_25 $$ fileName = checkMACFileName(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_25 $$ fileName = checkMACFileName(fileName)[ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_26 $$ if (!FolderFactory.matchFilter(folder, fileName)) [ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_27 $$ customMessage += fileName + ", "[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_27 $$ customMessage += fileName + ", "[ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_31 $$ if (fileName.length() > 0) [ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_31 $$ if (fileName.length() > 0) [ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)[ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)[ FD ]
Line_20 $$ File file = new File()-->Line_35 $$ file.setTitle(title)[ FD ]
Line_21 $$ String title = ParamUtil.getString(req, "title" + k)-->Line_35 $$ file.setTitle(title)[ FD ]
Line_20 $$ File file = new File()-->Line_36 $$ file.setFileName(fileName)[ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_36 $$ file.setFileName(fileName)[ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_36 $$ file.setFileName(fileName)[ FD ]
Line_20 $$ File file = new File()-->Line_37 $$ file.setFriendlyName(friendlyName)[ FD ]
Line_22 $$ String friendlyName = ParamUtil.getString(req, "friendlyName" + k)-->Line_37 $$ file.setFriendlyName(friendlyName)[ FD ]
Line_20 $$ File file = new File()-->Line_38 $$ file.setPublishDate(publishDate)[ FD ]
Line_23 $$ Date publishDate = new Date()-->Line_38 $$ file.setPublishDate(publishDate)[ FD ]
Line_20 $$ File file = new File()-->Line_39 $$ file.setModUser(userId)[ FD ]
Line_20 $$ File file = new File()-->Line_40 $$ InodeFactory.saveInode(file)[ FD ]
Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)-->Line_44 $$ Logger.debug(this, "bytes" + uploadedFile.length())[ FD ]
Line_20 $$ File file = new File()-->Line_45 $$ file.setSize((int) uploadedFile.length() - 2)[ FD ]
Line_43 $$ java.io.File uploadedFile = uploadReq.getFile("uploadedFile" + k)-->Line_45 $$ file.setSize((int) uploadedFile.length() - 2)[ FD ]
Line_20 $$ File file = new File()-->Line_46 $$ file.setMimeType(mimeType)[ FD ]
Line_32 $$ String mimeType = FileFactory.getMimeType(fileName)-->Line_46 $$ file.setMimeType(mimeType)[ FD ]
Line_33 $$ String URI = folder.getPath() + fileName-->Line_48 $$ Identifier ident = IdentifierFactory.getIdentifierByURI(URI, host)[ FD ]
Line_47 $$ Host host = HostFactory.getCurrentHost(httpReq)-->Line_48 $$ Identifier ident = IdentifierFactory.getIdentifierByURI(URI, host)[ FD ]
Line_24 $$ String fileName = ParamUtil.getString(req, "fileName" + k)-->Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) [ FD ]
Line_25 $$ fileName = checkMACFileName(fileName)-->Line_50 $$ if ((FileFactory.existsFileName(folder, fileName))) [ FD ]
Line_20 $$ File file = new File()-->Line_51 $$ InodeFactory.deleteInode(file)[ FD ]
Line_49 $$ String message = ""-->Line_53 $$ SessionMessages.add(req, "custommessage", message)[ FD ]
Line_52 $$ message = "The uploaded file " + fileName + " already exists in this folder"-->Line_53 $$ SessionMessages.add(req, "custommessage", message)[ FD ]
Line_20 $$ File file = new File()-->Line_55 $$ String fileInodePath = String.valueOf(file.getInode())[ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_56 $$ if (fileInodePath.length() == 1) [ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_56 $$ if (fileInodePath.length() == 1) [ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_56 $$ if (fileInodePath.length() == 1) [ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_57 $$ fileInodePath = fileInodePath + "0"[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_57 $$ fileInodePath = fileInodePath + "0"[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_57 $$ fileInodePath = fileInodePath + "0"[ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)[ FD ]
Line_55 $$ String fileInodePath = String.valueOf(file.getInode())-->Line_60 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath.substring(0, 1)).mkdir()[ FD ]
Line_57 $$ fileInodePath = fileInodePath + "0"-->Line_60 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath.substring(0, 1)).mkdir()[ FD ]
Line_59 $$ fileInodePath = fileInodePath.substring(0, 1) + java.io.File.separator + fileInodePath.substring(1, 2)-->Line_60 $$ new java.io.File(filePath + java.io.File.separator + fileInodePath.substring(0, 1)).mkdir()[ FD ]
Line_20 $$ File file = new File()-->Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)[ FD ]
Line_63 $$ java.io.FileOutputStream fout = new java.io.FileOutputStream(f)-->Line_64 $$ FileChannel outputChannel = fout.getChannel()[ FD ]
Line_64 $$ FileChannel outputChannel = fout.getChannel()-->Line_66 $$ outputChannel.transferFrom(inputChannel, 0, inputChannel.size())[ FD ]
Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()-->Line_66 $$ outputChannel.transferFrom(inputChannel, 0, inputChannel.size())[ FD ]
Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()-->Line_66 $$ outputChannel.transferFrom(inputChannel, 0, inputChannel.size())[ FD ]
Line_64 $$ FileChannel outputChannel = fout.getChannel()-->Line_67 $$ outputChannel.force(false)[ FD ]
Line_64 $$ FileChannel outputChannel = fout.getChannel()-->Line_68 $$ outputChannel.close()[ FD ]
Line_65 $$ FileChannel inputChannel = new java.io.FileInputStream(uploadedFile).getChannel()-->Line_69 $$ inputChannel.close()[ FD ]
Line_20 $$ File file = new File()-->Line_70 $$ Logger.debug(this, "SaveFileAction New File in =" + filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)[ FD ]
Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)-->Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) [ FD ]
Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)-->Line_71 $$ if (suffix.equals("jpg") || suffix.equals("gif")) [ FD ]
Line_34 $$ String suffix = UtilMethods.getFileExtension(fileName)-->Line_72 $$ com.dotmarketing.util.Thumbnail.resizeImage(filePath + java.io.File.separator + fileInodePath + java.io.File.separator, String.valueOf(file.getInode()), suffix)[ FD ]
Line_20 $$ File file = new File()-->Line_72 $$ com.dotmarketing.util.Thumbnail.resizeImage(filePath + java.io.File.separator + fileInodePath + java.io.File.separator, String.valueOf(file.getInode()), suffix)[ FD ]
Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)-->Line_73 $$ int height = javax.imageio.ImageIO.read(f).getHeight()[ FD ]
Line_20 $$ File file = new File()-->Line_74 $$ file.setHeight(height)[ FD ]
Line_73 $$ int height = javax.imageio.ImageIO.read(f).getHeight()-->Line_74 $$ file.setHeight(height)[ FD ]
Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)-->Line_76 $$ int width = javax.imageio.ImageIO.read(f).getWidth()[ FD ]
Line_20 $$ File file = new File()-->Line_77 $$ file.setWidth(width)[ FD ]
Line_76 $$ int width = javax.imageio.ImageIO.read(f).getWidth()-->Line_77 $$ file.setWidth(width)[ FD ]
Line_62 $$ java.io.File f = new java.io.File(filePath + java.io.File.separator + fileInodePath + java.io.File.separator + file.getInode() + "." + suffix)-->Line_79 $$ long size = (f.length() / 1024)[ FD ]
Line_20 $$ File file = new File()-->Line_80 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_20 $$ File file = new File()-->Line_82 $$ WebAssetFactory.createAsset(file, userId, folder)[ FD ]
Line_20 $$ File file = new File()-->Line_84 $$ WorkingCache.addToWorkingAssetToCache(file)[ FD ]
Line_20 $$ File file = new File()-->Line_85 $$ _setFilePermissions(folder, file, user)[ FD ]
Line_20 $$ File file = new File()-->Line_89 $$ PublishFactory.publishAsset(file, httpReq)[ FD ]
Line_86 $$ fileCounter += 1-->Line_90 $$ if (fileCounter > 1) [ FD ]
