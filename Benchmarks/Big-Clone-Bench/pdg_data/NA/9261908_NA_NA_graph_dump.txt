Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException [ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_3 $$ HttpMethod method = null[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_4 $$ InputStream is = null[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_5 $$ SolrParams params = request.getParams()[ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_5 $$ SolrParams params = request.getParams()[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_5 $$ SolrParams params = request.getParams()[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_6 $$ Collection<ContentStream> streams = requestWriter.getContentStreams(request)[ CD ]
Line_6 $$ Collection<ContentStream> streams = requestWriter.getContentStreams(request)-->Line_6 $$ Collection<ContentStream> streams = requestWriter.getContentStreams(request)[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_6 $$ Collection<ContentStream> streams = requestWriter.getContentStreams(request)[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_7 $$ String path = requestWriter.getPath(request)[ CD ]
Line_7 $$ String path = requestWriter.getPath(request)-->Line_7 $$ String path = requestWriter.getPath(request)[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_7 $$ String path = requestWriter.getPath(request)[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_8 $$ if (path == null || !path.startsWith("/")) [ CD ]
Line_8 $$ if (path == null || !path.startsWith("/")) -->Line_8 $$ if (path == null || !path.startsWith("/")) [ CD ]
Line_7 $$ String path = requestWriter.getPath(request)-->Line_8 $$ if (path == null || !path.startsWith("/")) [ FD ]
Line_8 $$ if (path == null || !path.startsWith("/")) -->Line_9 $$ path = "/select"[ CD ]
Line_7 $$ String path = requestWriter.getPath(request)-->Line_9 $$ path = "/select"[ FD ]
Line_9 $$ path = "/select"-->Line_9 $$ path = "/select"[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_11 $$ ResponseParser parser = request.getResponseParser()[ CD ]
Line_11 $$ ResponseParser parser = request.getResponseParser()-->Line_11 $$ ResponseParser parser = request.getResponseParser()[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_11 $$ ResponseParser parser = request.getResponseParser()[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_12 $$ if (parser == null) [ CD ]
Line_11 $$ ResponseParser parser = request.getResponseParser()-->Line_12 $$ if (parser == null) [ FD ]
Line_12 $$ if (parser == null) -->Line_13 $$ parser = _parser[ CD ]
Line_11 $$ ResponseParser parser = request.getResponseParser()-->Line_13 $$ parser = _parser[ FD ]
Line_13 $$ parser = _parser-->Line_13 $$ parser = _parser[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_15 $$ ModifiableSolrParams wparams = new ModifiableSolrParams()[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_16 $$ wparams.set(CommonParams.WT, parser.getWriterType())[ CD ]
Line_15 $$ ModifiableSolrParams wparams = new ModifiableSolrParams()-->Line_16 $$ wparams.set(CommonParams.WT, parser.getWriterType())[ FD ]
Line_11 $$ ResponseParser parser = request.getResponseParser()-->Line_16 $$ wparams.set(CommonParams.WT, parser.getWriterType())[ FD ]
Line_13 $$ parser = _parser-->Line_16 $$ wparams.set(CommonParams.WT, parser.getWriterType())[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_17 $$ wparams.set(CommonParams.VERSION, parser.getVersion())[ CD ]
Line_15 $$ ModifiableSolrParams wparams = new ModifiableSolrParams()-->Line_17 $$ wparams.set(CommonParams.VERSION, parser.getVersion())[ FD ]
Line_11 $$ ResponseParser parser = request.getResponseParser()-->Line_17 $$ wparams.set(CommonParams.VERSION, parser.getVersion())[ FD ]
Line_13 $$ parser = _parser-->Line_17 $$ wparams.set(CommonParams.VERSION, parser.getVersion())[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_18 $$ if (params == null) [ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_18 $$ if (params == null) [ FD ]
Line_18 $$ if (params == null) -->Line_19 $$ params = wparams[ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_19 $$ params = wparams[ FD ]
Line_19 $$ params = wparams-->Line_19 $$ params = wparams[ FD ]
Line_15 $$ ModifiableSolrParams wparams = new ModifiableSolrParams()-->Line_19 $$ params = wparams[ FD ]
Line_18 $$ if (params == null) -->Line_21 $$ params = new DefaultSolrParams(wparams, params)[ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_21 $$ params = new DefaultSolrParams(wparams, params)[ FD ]
Line_19 $$ params = wparams-->Line_21 $$ params = new DefaultSolrParams(wparams, params)[ FD ]
Line_21 $$ params = new DefaultSolrParams(wparams, params)-->Line_21 $$ params = new DefaultSolrParams(wparams, params)[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_23 $$ if (_invariantParams != null) [ CD ]
Line_23 $$ if (_invariantParams != null) -->Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)[ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)[ FD ]
Line_19 $$ params = wparams-->Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)[ FD ]
Line_21 $$ params = new DefaultSolrParams(wparams, params)-->Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)[ FD ]
Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)-->Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_26 $$ int tries = _maxRetries + 1[ CD ]
Line_26 $$ int tries = _maxRetries + 1-->Line_28 $$ while (tries-- > 0) [ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_30 $$ if (SolrRequest.METHOD.GET == request.getMethod()) [ FD ]
Line_30 $$ if (SolrRequest.METHOD.GET == request.getMethod()) -->Line_31 $$ if (streams != null) [ CD ]
Line_6 $$ Collection<ContentStream> streams = requestWriter.getContentStreams(request)-->Line_31 $$ if (streams != null) [ FD ]
Line_30 $$ if (SolrRequest.METHOD.GET == request.getMethod()) -->Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))[ FD ]
Line_3 $$ HttpMethod method = null-->Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))[ FD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))[ FD ]
Line_19 $$ params = wparams-->Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))[ FD ]
Line_21 $$ params = new DefaultSolrParams(wparams, params)-->Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))[ FD ]
Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)-->Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))[ FD ]
Line_30 $$ if (SolrRequest.METHOD.GET == request.getMethod()) -->Line_35 $$ if (SolrRequest.METHOD.POST == request.getMethod()) [ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_35 $$ if (SolrRequest.METHOD.POST == request.getMethod()) [ FD ]
Line_35 $$ if (SolrRequest.METHOD.POST == request.getMethod()) -->Line_36 $$ String url = _baseURL + path[ CD ]
Line_35 $$ if (SolrRequest.METHOD.POST == request.getMethod()) -->Line_37 $$ boolean isMultipart = (streams != null && streams.size() > 1)[ CD ]
Line_6 $$ Collection<ContentStream> streams = requestWriter.getContentStreams(request)-->Line_37 $$ boolean isMultipart = (streams != null && streams.size() > 1)[ FD ]
Line_35 $$ if (SolrRequest.METHOD.POST == request.getMethod()) -->Line_38 $$ if (streams == null || isMultipart) [ CD ]
Line_37 $$ boolean isMultipart = (streams != null && streams.size() > 1)-->Line_38 $$ if (streams == null || isMultipart) [ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_39 $$ PostMethod post = new PostMethod(url)[ CD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_40 $$ post.getParams().setContentCharset("UTF-8")[ CD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_40 $$ post.getParams().setContentCharset("UTF-8")[ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_41 $$ if (!this.useMultiPartPost && !isMultipart) [ CD ]
Line_37 $$ boolean isMultipart = (streams != null && streams.size() > 1)-->Line_41 $$ if (!this.useMultiPartPost && !isMultipart) [ FD ]
Line_41 $$ if (!this.useMultiPartPost && !isMultipart) -->Line_42 $$ post.addRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")[ CD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_42 $$ post.addRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")[ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_44 $$ List<Part> parts = new LinkedList<Part>()[ CD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()[ CD ]
Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()-->Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()[ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()[ FD ]
Line_19 $$ params = wparams-->Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()[ FD ]
Line_21 $$ params = new DefaultSolrParams(wparams, params)-->Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()[ FD ]
Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)-->Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()[ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_46 $$ while (iter.hasNext()) [ CD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_38 $$ if (streams == null || isMultipart) [ CD ]
Line_46 $$ while (iter.hasNext()) -->Line_46 $$ while (iter.hasNext()) [ CD ]
Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()-->Line_46 $$ while (iter.hasNext()) [ FD ]
Line_46 $$ while (iter.hasNext()) -->Line_47 $$ String p = iter.next()[ CD ]
Line_47 $$ String p = iter.next()-->Line_47 $$ String p = iter.next()[ CD ]
Line_45 $$ Iterator<String> iter = params.getParameterNamesIterator()-->Line_47 $$ String p = iter.next()[ FD ]
Line_46 $$ while (iter.hasNext()) -->Line_48 $$ String[] vals = params.getParams(p)[ CD ]
Line_48 $$ String[] vals = params.getParams(p)-->Line_48 $$ String[] vals = params.getParams(p)[ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_48 $$ String[] vals = params.getParams(p)[ FD ]
Line_19 $$ params = wparams-->Line_48 $$ String[] vals = params.getParams(p)[ FD ]
Line_21 $$ params = new DefaultSolrParams(wparams, params)-->Line_48 $$ String[] vals = params.getParams(p)[ FD ]
Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)-->Line_48 $$ String[] vals = params.getParams(p)[ FD ]
Line_47 $$ String p = iter.next()-->Line_48 $$ String[] vals = params.getParams(p)[ FD ]
Line_46 $$ while (iter.hasNext()) -->Line_49 $$ if (vals != null) [ CD ]
Line_48 $$ String[] vals = params.getParams(p)-->Line_49 $$ if (vals != null) [ FD ]
Line_37 $$ boolean isMultipart = (streams != null && streams.size() > 1)-->Line_51 $$ if (this.useMultiPartPost || isMultipart) [ FD ]
Line_51 $$ if (this.useMultiPartPost || isMultipart) -->Line_52 $$ parts.add(new StringPart(p, v, "UTF-8"))[ CD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_52 $$ parts.add(new StringPart(p, v, "UTF-8"))[ FD ]
Line_51 $$ if (this.useMultiPartPost || isMultipart) -->Line_54 $$ post.addParameter(p, v)[ CD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_54 $$ post.addParameter(p, v)[ FD ]
Line_47 $$ String p = iter.next()-->Line_54 $$ post.addParameter(p, v)[ FD ]
Line_50 $$ for (String v : vals) -->Line_54 $$ post.addParameter(p, v)[ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_59 $$ if (isMultipart) [ CD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_65 $$ parts.add(new PartBase(c.getName(), c.getContentType(), charSet, transferEncoding) [ FD ]
Line_65 $$ parts.add(new PartBase(c.getName(), c.getContentType(), charSet, transferEncoding) -->Line_67 $$ return c.getSize()[ CD ]
Line_67 $$ return c.getSize()-->Line_67 $$ return c.getSize()[ CD ]
Line_65 $$ parts.add(new PartBase(c.getName(), c.getContentType(), charSet, transferEncoding) -->Line_70 $$ Reader reader = c.getReader()[ CD ]
Line_70 $$ Reader reader = c.getReader()-->Line_70 $$ Reader reader = c.getReader()[ CD ]
Line_70 $$ Reader reader = c.getReader()-->Line_72 $$ IOUtils.copy(reader, out)[ FD ]
Line_65 $$ parts.add(new PartBase(c.getName(), c.getContentType(), charSet, transferEncoding) -->Line_72 $$ IOUtils.copy(reader, out)[ FD ]
Line_70 $$ Reader reader = c.getReader()-->Line_74 $$ reader.close()[ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_80 $$ if (parts.size() > 0) [ CD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_80 $$ if (parts.size() > 0) [ FD ]
Line_80 $$ if (parts.size() > 0) -->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ CD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_85 $$ String pstr = ClientUtils.toQueryString(params, false)[ CD ]
Line_5 $$ SolrParams params = request.getParams()-->Line_85 $$ String pstr = ClientUtils.toQueryString(params, false)[ FD ]
Line_19 $$ params = wparams-->Line_85 $$ String pstr = ClientUtils.toQueryString(params, false)[ FD ]
Line_21 $$ params = new DefaultSolrParams(wparams, params)-->Line_85 $$ String pstr = ClientUtils.toQueryString(params, false)[ FD ]
Line_24 $$ params = new DefaultSolrParams(_invariantParams, params)-->Line_85 $$ String pstr = ClientUtils.toQueryString(params, false)[ FD ]
Line_38 $$ if (streams == null || isMultipart) -->Line_92 $$ if (contentStream[0] instanceof RequestWriter.LazyContentStream) [ CD ]
Line_92 $$ if (contentStream[0] instanceof RequestWriter.LazyContentStream) -->Line_93 $$ post.setRequestEntity(new RequestEntity() [ CD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_93 $$ post.setRequestEntity(new RequestEntity() [ FD ]
Line_93 $$ post.setRequestEntity(new RequestEntity() -->Line_95 $$ return -1[ CD ]
Line_95 $$ return -1-->Line_95 $$ return -1[ CD ]
Line_93 $$ post.setRequestEntity(new RequestEntity() -->Line_98 $$ return contentStream[0].getContentType()[ CD ]
Line_98 $$ return contentStream[0].getContentType()-->Line_98 $$ return contentStream[0].getContentType()[ CD ]
Line_93 $$ post.setRequestEntity(new RequestEntity() -->Line_101 $$ return false[ CD ]
Line_93 $$ post.setRequestEntity(new RequestEntity() -->Line_104 $$ ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream)[ CD ]
Line_93 $$ post.setRequestEntity(new RequestEntity() -->Line_104 $$ ((RequestWriter.LazyContentStream) contentStream[0]).writeTo(outputStream)[ FD ]
Line_92 $$ if (contentStream[0] instanceof RequestWriter.LazyContentStream) -->Line_108 $$ is = contentStream[0].getStream()[ CD ]
Line_92 $$ if (contentStream[0] instanceof RequestWriter.LazyContentStream) -->Line_109 $$ post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()))[ CD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_109 $$ post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()))[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_114 $$ throw new SolrServerException("Unsupported method: " + request.getMethod())[ FD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_117 $$ method.releaseConnection()[ FD ]
Line_3 $$ HttpMethod method = null-->Line_117 $$ method.releaseConnection()[ FD ]
Line_4 $$ InputStream is = null-->Line_119 $$ if (is != null) [ FD ]
Line_119 $$ if (is != null) -->Line_120 $$ is.close()[ CD ]
Line_4 $$ InputStream is = null-->Line_120 $$ is.close()[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_130 $$ method.setFollowRedirects(_followRedirects)[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_130 $$ method.setFollowRedirects(_followRedirects)[ FD ]
Line_3 $$ HttpMethod method = null-->Line_130 $$ method.setFollowRedirects(_followRedirects)[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_131 $$ method.addRequestHeader("User-Agent", AGENT)[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_131 $$ method.addRequestHeader("User-Agent", AGENT)[ FD ]
Line_3 $$ HttpMethod method = null-->Line_131 $$ method.addRequestHeader("User-Agent", AGENT)[ FD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_132 $$ if (_allowCompression) [ CD ]
Line_132 $$ if (_allowCompression) -->Line_133 $$ method.setRequestHeader(new Header("Accept-Encoding", "gzip,deflate"))[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_133 $$ method.setRequestHeader(new Header("Accept-Encoding", "gzip,deflate"))[ FD ]
Line_3 $$ HttpMethod method = null-->Line_133 $$ method.setRequestHeader(new Header("Accept-Encoding", "gzip,deflate"))[ FD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_136 $$ int statusCode = _httpClient.executeMethod(method)[ FD ]
Line_3 $$ HttpMethod method = null-->Line_136 $$ int statusCode = _httpClient.executeMethod(method)[ FD ]
Line_137 $$ if (statusCode != HttpStatus.SC_OK) -->Line_139 $$ msg.append(method.getStatusLine().getReasonPhrase())[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_139 $$ msg.append(method.getStatusLine().getReasonPhrase())[ FD ]
Line_3 $$ HttpMethod method = null-->Line_139 $$ msg.append(method.getStatusLine().getReasonPhrase())[ FD ]
Line_137 $$ if (statusCode != HttpStatus.SC_OK) -->Line_140 $$ msg.append("\n\n")[ CD ]
Line_137 $$ if (statusCode != HttpStatus.SC_OK) -->Line_141 $$ msg.append(method.getStatusText())[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_141 $$ msg.append(method.getStatusText())[ FD ]
Line_3 $$ HttpMethod method = null-->Line_141 $$ msg.append(method.getStatusText())[ FD ]
Line_137 $$ if (statusCode != HttpStatus.SC_OK) -->Line_142 $$ msg.append("\n\n")[ CD ]
Line_137 $$ if (statusCode != HttpStatus.SC_OK) -->Line_143 $$ msg.append("request: " + method.getURI())[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_143 $$ msg.append("request: " + method.getURI())[ FD ]
Line_3 $$ HttpMethod method = null-->Line_143 $$ msg.append("request: " + method.getURI())[ FD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_147 $$ if (method instanceof HttpMethodBase) [ FD ]
Line_3 $$ HttpMethod method = null-->Line_147 $$ if (method instanceof HttpMethodBase) [ FD ]
Line_147 $$ if (method instanceof HttpMethodBase) -->Line_148 $$ charset = ((HttpMethodBase) method).getResponseCharSet()[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_150 $$ InputStream respBody = method.getResponseBodyAsStream()[ FD ]
Line_3 $$ HttpMethod method = null-->Line_150 $$ InputStream respBody = method.getResponseBodyAsStream()[ FD ]
Line_151 $$ if (_allowCompression) -->Line_152 $$ Header contentEncodingHeader = method.getResponseHeader("Content-Encoding")[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_152 $$ Header contentEncodingHeader = method.getResponseHeader("Content-Encoding")[ FD ]
Line_3 $$ HttpMethod method = null-->Line_152 $$ Header contentEncodingHeader = method.getResponseHeader("Content-Encoding")[ FD ]
Line_151 $$ if (_allowCompression) -->Line_153 $$ if (contentEncodingHeader != null) [ CD ]
Line_153 $$ if (contentEncodingHeader != null) -->Line_154 $$ String contentEncoding = contentEncodingHeader.getValue()[ CD ]
Line_153 $$ if (contentEncodingHeader != null) -->Line_155 $$ if (contentEncoding.contains("gzip")) [ CD ]
Line_155 $$ if (contentEncoding.contains("gzip")) -->Line_155 $$ if (contentEncoding.contains("gzip")) [ CD ]
Line_155 $$ if (contentEncoding.contains("gzip")) -->Line_157 $$ if (contentEncoding.contains("deflate")) [ CD ]
Line_157 $$ if (contentEncoding.contains("deflate")) -->Line_157 $$ if (contentEncoding.contains("deflate")) [ CD ]
Line_153 $$ if (contentEncodingHeader != null) -->Line_161 $$ Header contentTypeHeader = method.getResponseHeader("Content-Type")[ CD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_161 $$ Header contentTypeHeader = method.getResponseHeader("Content-Type")[ FD ]
Line_3 $$ HttpMethod method = null-->Line_161 $$ Header contentTypeHeader = method.getResponseHeader("Content-Type")[ FD ]
Line_153 $$ if (contentEncodingHeader != null) -->Line_162 $$ if (contentTypeHeader != null) [ CD ]
Line_162 $$ if (contentTypeHeader != null) -->Line_163 $$ String contentType = contentTypeHeader.getValue()[ CD ]
Line_162 $$ if (contentTypeHeader != null) -->Line_164 $$ if (contentType != null) [ CD ]
Line_164 $$ if (contentType != null) -->Line_165 $$ if (contentType.startsWith("application/x-gzip-compressed")) [ CD ]
Line_165 $$ if (contentType.startsWith("application/x-gzip-compressed")) -->Line_165 $$ if (contentType.startsWith("application/x-gzip-compressed")) [ CD ]
Line_165 $$ if (contentType.startsWith("application/x-gzip-compressed")) -->Line_167 $$ if (contentType.startsWith("application/x-deflate")) [ CD ]
Line_167 $$ if (contentType.startsWith("application/x-deflate")) -->Line_167 $$ if (contentType.startsWith("application/x-deflate")) [ CD ]
Line_174 $$ return processor.processResponse(respBody, charset)-->Line_174 $$ return processor.processResponse(respBody, charset)[ CD ]
Line_2 $$ public NamedList<Object> request(final SolrRequest request, ResponseParser processor) throws SolrServerException, IOException -->Line_174 $$ return processor.processResponse(respBody, charset)[ FD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_180 $$ method.releaseConnection()[ FD ]
Line_3 $$ HttpMethod method = null-->Line_180 $$ method.releaseConnection()[ FD ]
Line_4 $$ InputStream is = null-->Line_181 $$ if (is != null) [ FD ]
Line_181 $$ if (is != null) -->Line_182 $$ is.close()[ CD ]
Line_4 $$ InputStream is = null-->Line_182 $$ is.close()[ FD ]
Line_37 $$ boolean isMultipart = (streams != null && streams.size() > 1)-->Line_38 $$ if (streams == null || isMultipart) [ FD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_40 $$ post.getParams().setContentCharset("UTF-8")[ FD ]
Line_37 $$ boolean isMultipart = (streams != null && streams.size() > 1)-->Line_41 $$ if (!this.useMultiPartPost && !isMultipart) [ FD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_42 $$ post.addRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8")[ FD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_65 $$ parts.add(new PartBase(c.getName(), c.getContentType(), charSet, transferEncoding) [ FD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_80 $$ if (parts.size() > 0) [ FD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_44 $$ List<Part> parts = new LinkedList<Part>()-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_81 $$ post.setRequestEntity(new MultipartRequestEntity(parts.toArray(new Part[parts.size()]), post.getParams()))[ FD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_93 $$ post.setRequestEntity(new RequestEntity() [ FD ]
Line_39 $$ PostMethod post = new PostMethod(url)-->Line_109 $$ post.setRequestEntity(new InputStreamRequestEntity(is, contentStream[0].getContentType()))[ FD ]
Line_34 $$ method = new GetMethod(_baseURL + path + ClientUtils.toQueryString(params, false))-->Line_117 $$ method.releaseConnection()[ FD ]
Line_47 $$ String p = iter.next()-->Line_48 $$ String[] vals = params.getParams(p)[ FD ]
Line_48 $$ String[] vals = params.getParams(p)-->Line_49 $$ if (vals != null) [ FD ]
Line_47 $$ String p = iter.next()-->Line_54 $$ post.addParameter(p, v)[ FD ]
Line_50 $$ for (String v : vals) -->Line_54 $$ post.addParameter(p, v)[ FD ]
