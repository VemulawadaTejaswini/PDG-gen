Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void parse() throws IOException [ CD ]
Line_2 $$ public void parse() throws IOException -->Line_3 $$ URL url = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA))[ CD ]
Line_2 $$ public void parse() throws IOException -->Line_4 $$ URLConnection con = url.openConnection()[ CD ]
Line_4 $$ URLConnection con = url.openConnection()-->Line_4 $$ URLConnection con = url.openConnection()[ CD ]
Line_3 $$ URL url = new URL((new DataUrlResolver()).getDataUrl(DomainName.CROATIA))-->Line_4 $$ URLConnection con = url.openConnection()[ FD ]
Line_2 $$ public void parse() throws IOException -->Line_5 $$ BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()))[ CD ]
Line_4 $$ URLConnection con = url.openConnection()-->Line_5 $$ BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()))[ FD ]
Line_2 $$ public void parse() throws IOException -->Line_6 $$ String str[ CD ]
Line_2 $$ public void parse() throws IOException -->Line_7 $$ bStream.readLine()[ CD ]
Line_5 $$ BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()))-->Line_7 $$ bStream.readLine()[ FD ]
Line_2 $$ public void parse() throws IOException -->Line_8 $$ while ((str = bStream.readLine()) != null) [ CD ]
Line_2 $$ public void parse() throws IOException -->Line_2 $$ public void parse() throws IOException [ CD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_8 $$ while ((str = bStream.readLine()) != null) [ FD ]
Line_6 $$ String str-->Line_8 $$ while ((str = bStream.readLine()) != null) [ FD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_8 $$ while ((str = bStream.readLine()) != null) [ CD ]
Line_5 $$ BufferedReader bStream = new BufferedReader(new InputStreamReader(con.getInputStream()))-->Line_8 $$ while ((str = bStream.readLine()) != null) [ FD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_9 $$ String[] tokens = str.split("(\\s+)")[ CD ]
Line_9 $$ String[] tokens = str.split("(\\s+)")-->Line_9 $$ String[] tokens = str.split("(\\s+)")[ CD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_9 $$ String[] tokens = str.split("(\\s+)")[ FD ]
Line_6 $$ String str-->Line_9 $$ String[] tokens = str.split("(\\s+)")[ FD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_10 $$ String charCode = tokens[0].replaceAll("([0-9+])", "")[ CD ]
Line_10 $$ String charCode = tokens[0].replaceAll("([0-9+])", "")-->Line_10 $$ String charCode = tokens[0].replaceAll("([0-9+])", "")[ CD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_11 $$ Float value = Float.parseFloat(tokens[2].trim().replace(",", "."))[ CD ]
Line_11 $$ Float value = Float.parseFloat(tokens[2].trim().replace(",", "."))-->Line_11 $$ Float value = Float.parseFloat(tokens[2].trim().replace(",", "."))[ CD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_12 $$ CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER)[ CD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_13 $$ this.set.add(unit)[ CD ]
Line_12 $$ CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER)-->Line_13 $$ this.set.add(unit)[ FD ]
Line_8 $$ while ((str = bStream.readLine()) != null) -->Line_9 $$ String[] tokens = str.split("(\\s+)")[ FD ]
Line_12 $$ CurrencyUnit unit = new CurrencyUnit(charCode, value, DEFAULT_MULTIPLIER)-->Line_13 $$ this.set.add(unit)[ FD ]
