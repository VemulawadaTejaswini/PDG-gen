Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ void run(String[] args) [ CD ]
Line_2 $$ void run(String[] args) -->Line_3 $$ InputStream istream = System.in[ CD ]
Line_2 $$ void run(String[] args) -->Line_4 $$ System.out.println("TradeMaximizer " + version)[ CD ]
Line_2 $$ void run(String[] args) -->Line_5 $$ String filename = parseArgs(args, false)[ CD ]
Line_5 $$ String filename = parseArgs(args, false)-->Line_5 $$ String filename = parseArgs(args, false)[ CD ]
Line_2 $$ void run(String[] args) -->Line_5 $$ String filename = parseArgs(args, false)[ FD ]
Line_2 $$ void run(String[] args) -->Line_6 $$ if (filename != null) [ CD ]
Line_5 $$ String filename = parseArgs(args, false)-->Line_6 $$ if (filename != null) [ FD ]
Line_6 $$ if (filename != null) -->Line_7 $$ System.out.println("Input from: " + filename)[ CD ]
Line_5 $$ String filename = parseArgs(args, false)-->Line_9 $$ if (filename.startsWith("http:") || filename.startsWith("ftp:")) [ FD ]
Line_5 $$ String filename = parseArgs(args, false)-->Line_9 $$ if (filename.startsWith("http:") || filename.startsWith("ftp:")) [ FD ]
Line_9 $$ if (filename.startsWith("http:") || filename.startsWith("ftp:")) -->Line_10 $$ URL url = new URL(filename)[ CD ]
Line_9 $$ if (filename.startsWith("http:") || filename.startsWith("ftp:")) -->Line_11 $$ istream = url.openStream()[ CD ]
Line_3 $$ InputStream istream = System.in-->Line_11 $$ istream = url.openStream()[ FD ]
Line_11 $$ istream = url.openStream()-->Line_11 $$ istream = url.openStream()[ FD ]
Line_11 $$ istream = url.openStream()-->Line_11 $$ istream = url.openStream()[ CD ]
Line_10 $$ URL url = new URL(filename)-->Line_11 $$ istream = url.openStream()[ FD ]
Line_9 $$ if (filename.startsWith("http:") || filename.startsWith("ftp:")) -->Line_12 $$ istream = new FileInputStream(filename)[ CD ]
Line_3 $$ InputStream istream = System.in-->Line_12 $$ istream = new FileInputStream(filename)[ FD ]
Line_11 $$ istream = url.openStream()-->Line_12 $$ istream = new FileInputStream(filename)[ FD ]
Line_12 $$ istream = new FileInputStream(filename)-->Line_12 $$ istream = new FileInputStream(filename)[ FD ]
Line_2 $$ void run(String[] args) -->Line_17 $$ List<String[]> wantLists = readWantLists(istream)[ CD ]
Line_17 $$ List<String[]> wantLists = readWantLists(istream)-->Line_17 $$ List<String[]> wantLists = readWantLists(istream)[ CD ]
Line_3 $$ InputStream istream = System.in-->Line_17 $$ List<String[]> wantLists = readWantLists(istream)[ FD ]
Line_11 $$ istream = url.openStream()-->Line_17 $$ List<String[]> wantLists = readWantLists(istream)[ FD ]
Line_12 $$ istream = new FileInputStream(filename)-->Line_17 $$ List<String[]> wantLists = readWantLists(istream)[ FD ]
Line_2 $$ void run(String[] args) -->Line_18 $$ if (wantLists == null)[ CD ]
Line_17 $$ List<String[]> wantLists = readWantLists(istream)-->Line_18 $$ if (wantLists == null)[ FD ]
Line_18 $$ if (wantLists == null)-->Line_18 $$ return[ CD ]
Line_2 $$ void run(String[] args) -->Line_19 $$ if (options.size() > 0) [ CD ]
Line_19 $$ if (options.size() > 0) -->Line_20 $$ System.out.print("Options:")[ CD ]
Line_19 $$ if (options.size() > 0) -->Line_22 $$ System.out.println()[ CD ]
Line_2 $$ void run(String[] args) -->Line_24 $$ System.out.println()[ CD ]
Line_26 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_26 $$ MessageDigest digest = MessageDigest.getInstance("MD5")[ CD ]
Line_26 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_29 $$ digest.update((byte) ' ')[ FD ]
Line_26 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_30 $$ digest.update(w.getBytes())[ FD ]
Line_28 $$ for (String w : wset) -->Line_30 $$ digest.update(w.getBytes())[ FD ]
Line_26 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_32 $$ digest.update((byte) '\n')[ FD ]
Line_26 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_34 $$ System.out.println("Input Checksum: " + toHexString(digest.digest()))[ FD ]
Line_2 $$ void run(String[] args) -->Line_37 $$ parseArgs(args, true)[ CD ]
Line_2 $$ void run(String[] args) -->Line_37 $$ parseArgs(args, true)[ FD ]
Line_2 $$ void run(String[] args) -->Line_38 $$ if (iterations > 1 && seed == -1) [ CD ]
Line_38 $$ if (iterations > 1 && seed == -1) -->Line_39 $$ seed = System.currentTimeMillis()[ CD ]
Line_38 $$ if (iterations > 1 && seed == -1) -->Line_40 $$ System.out.println("No explicit SEED, using " + seed)[ CD ]
Line_2 $$ void run(String[] args) -->Line_42 $$ if (!(metric instanceof MetricSumSquares) && priorityScheme != NO_PRIORITIES)[ CD ]
Line_42 $$ if (!(metric instanceof MetricSumSquares) && priorityScheme != NO_PRIORITIES)-->Line_42 $$ System.out.println("Warning: using priorities with the non-default metric is normally worthless")[ CD ]
Line_2 $$ void run(String[] args) -->Line_43 $$ buildGraph(wantLists)[ CD ]
Line_17 $$ List<String[]> wantLists = readWantLists(istream)-->Line_43 $$ buildGraph(wantLists)[ FD ]
Line_2 $$ void run(String[] args) -->Line_44 $$ if (showMissing && officialNames != null && officialNames.size() > 0) [ CD ]
Line_45 $$ for (String name : usedNames) officialNames.remove(name)-->Line_45 $$ officialNames.remove(name)[ FD ]
Line_44 $$ if (showMissing && officialNames != null && officialNames.size() > 0) -->Line_46 $$ List<String> missing = new ArrayList<String>(officialNames)[ CD ]
Line_44 $$ if (showMissing && officialNames != null && officialNames.size() > 0) -->Line_47 $$ Collections.sort(missing)[ CD ]
Line_46 $$ List<String> missing = new ArrayList<String>(officialNames)-->Line_47 $$ Collections.sort(missing)[ FD ]
Line_44 $$ if (showMissing && officialNames != null && officialNames.size() > 0) -->Line_51 $$ System.out.println()[ CD ]
Line_2 $$ void run(String[] args) -->Line_53 $$ if (showErrors && errors.size() > 0) [ CD ]
Line_53 $$ if (showErrors && errors.size() > 0) -->Line_54 $$ Collections.sort(errors)[ CD ]
Line_53 $$ if (showErrors && errors.size() > 0) -->Line_55 $$ System.out.println("ERRORS:")[ CD ]
Line_56 $$ for (String error : errors) System.out.println(error)-->Line_56 $$ System.out.println(error)[ FD ]
Line_53 $$ if (showErrors && errors.size() > 0) -->Line_57 $$ System.out.println()[ CD ]
Line_2 $$ void run(String[] args) -->Line_59 $$ long startTime = System.currentTimeMillis()[ CD ]
Line_59 $$ long startTime = System.currentTimeMillis()-->Line_59 $$ long startTime = System.currentTimeMillis()[ CD ]
Line_2 $$ void run(String[] args) -->Line_60 $$ graph.removeImpossibleEdges()[ CD ]
Line_2 $$ void run(String[] args) -->Line_61 $$ List<List<Graph.Vertex>> bestCycles = graph.findCycles()[ CD ]
Line_61 $$ List<List<Graph.Vertex>> bestCycles = graph.findCycles()-->Line_61 $$ List<List<Graph.Vertex>> bestCycles = graph.findCycles()[ CD ]
Line_2 $$ void run(String[] args) -->Line_62 $$ int bestMetric = metric.calculate(bestCycles)[ CD ]
Line_62 $$ int bestMetric = metric.calculate(bestCycles)-->Line_62 $$ int bestMetric = metric.calculate(bestCycles)[ CD ]
Line_61 $$ List<List<Graph.Vertex>> bestCycles = graph.findCycles()-->Line_62 $$ int bestMetric = metric.calculate(bestCycles)[ FD ]
Line_2 $$ void run(String[] args) -->Line_63 $$ if (iterations > 1) [ CD ]
Line_63 $$ if (iterations > 1) -->Line_64 $$ System.out.println(metric)[ CD ]
Line_63 $$ if (iterations > 1) -->Line_65 $$ graph.saveMatches()[ CD ]
Line_63 $$ if (iterations > 1) -->Line_66 $$ for (int i = 0; i < iterations - 1; i++) [ CD ]
Line_63 $$ if (iterations > 1) -->Line_63 $$ if (iterations > 1) [ CD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_66 $$ for (int i = 0; i < iterations - 1; i++) [ CD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_66 $$ for (int i = 0; i < iterations - 1; i++) [ CD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_66 $$ for (int i = 0; i < iterations - 1; i++) [ FD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_67 $$ graph.shuffle()[ CD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_68 $$ List<List<Graph.Vertex>> cycles = graph.findCycles()[ CD ]
Line_68 $$ List<List<Graph.Vertex>> cycles = graph.findCycles()-->Line_68 $$ List<List<Graph.Vertex>> cycles = graph.findCycles()[ CD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_69 $$ int newMetric = metric.calculate(cycles)[ CD ]
Line_69 $$ int newMetric = metric.calculate(cycles)-->Line_69 $$ int newMetric = metric.calculate(cycles)[ CD ]
Line_68 $$ List<List<Graph.Vertex>> cycles = graph.findCycles()-->Line_69 $$ int newMetric = metric.calculate(cycles)[ FD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_70 $$ if (newMetric < bestMetric) [ CD ]
Line_69 $$ int newMetric = metric.calculate(cycles)-->Line_70 $$ if (newMetric < bestMetric) [ FD ]
Line_62 $$ int bestMetric = metric.calculate(bestCycles)-->Line_70 $$ if (newMetric < bestMetric) [ FD ]
Line_70 $$ if (newMetric < bestMetric) -->Line_71 $$ bestMetric = newMetric[ CD ]
Line_71 $$ bestMetric = newMetric-->Line_71 $$ bestMetric = newMetric[ FD ]
Line_62 $$ int bestMetric = metric.calculate(bestCycles)-->Line_71 $$ bestMetric = newMetric[ FD ]
Line_69 $$ int newMetric = metric.calculate(cycles)-->Line_71 $$ bestMetric = newMetric[ FD ]
Line_70 $$ if (newMetric < bestMetric) -->Line_72 $$ bestCycles = cycles[ CD ]
Line_72 $$ bestCycles = cycles-->Line_72 $$ bestCycles = cycles[ FD ]
Line_61 $$ List<List<Graph.Vertex>> bestCycles = graph.findCycles()-->Line_72 $$ bestCycles = cycles[ FD ]
Line_68 $$ List<List<Graph.Vertex>> cycles = graph.findCycles()-->Line_72 $$ bestCycles = cycles[ FD ]
Line_70 $$ if (newMetric < bestMetric) -->Line_73 $$ graph.saveMatches()[ CD ]
Line_70 $$ if (newMetric < bestMetric) -->Line_74 $$ System.out.println(metric)[ CD ]
Line_70 $$ if (newMetric < bestMetric) -->Line_75 $$ if (verbose)[ CD ]
Line_75 $$ if (verbose)-->Line_75 $$ System.out.println("# " + metric)[ CD ]
Line_63 $$ if (iterations > 1) -->Line_77 $$ System.out.println()[ CD ]
Line_63 $$ if (iterations > 1) -->Line_78 $$ graph.restoreMatches()[ CD ]
Line_2 $$ void run(String[] args) -->Line_80 $$ long stopTime = System.currentTimeMillis()[ CD ]
Line_80 $$ long stopTime = System.currentTimeMillis()-->Line_80 $$ long stopTime = System.currentTimeMillis()[ CD ]
Line_2 $$ void run(String[] args) -->Line_81 $$ displayMatches(bestCycles)[ CD ]
Line_72 $$ bestCycles = cycles-->Line_81 $$ displayMatches(bestCycles)[ FD ]
Line_61 $$ List<List<Graph.Vertex>> bestCycles = graph.findCycles()-->Line_81 $$ displayMatches(bestCycles)[ FD ]
Line_2 $$ void run(String[] args) -->Line_82 $$ if (showElapsedTime)[ CD ]
Line_82 $$ if (showElapsedTime)-->Line_82 $$ System.out.println("Elapsed time = " + (stopTime - startTime) + "ms")[ CD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_66 $$ for (int i = 0; i < iterations - 1; i++) [ FD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_66 $$ for (int i = 0; i < iterations - 1; i++) [ FD ]
Line_66 $$ for (int i = 0; i < iterations - 1; i++) -->Line_66 $$ for (int i = 0; i < iterations - 1; i++) [ FD ]
Line_68 $$ List<List<Graph.Vertex>> cycles = graph.findCycles()-->Line_69 $$ int newMetric = metric.calculate(cycles)[ FD ]
Line_69 $$ int newMetric = metric.calculate(cycles)-->Line_70 $$ if (newMetric < bestMetric) [ FD ]
Line_71 $$ bestMetric = newMetric-->Line_70 $$ if (newMetric < bestMetric) [ FD ]
Line_69 $$ int newMetric = metric.calculate(cycles)-->Line_71 $$ bestMetric = newMetric[ FD ]
Line_68 $$ List<List<Graph.Vertex>> cycles = graph.findCycles()-->Line_72 $$ bestCycles = cycles[ FD ]
