Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean authenticate(String userName, String loginPassword) [ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_3 $$ if (!systemConfigManager.getBool("ldap", "authEnable")) [ CD ]
Line_3 $$ if (!systemConfigManager.getBool("ldap", "authEnable")) -->Line_3 $$ if (!systemConfigManager.getBool("ldap", "authEnable")) [ CD ]
Line_3 $$ if (!systemConfigManager.getBool("ldap", "authEnable")) -->Line_3 $$ if (!systemConfigManager.getBool("ldap", "authEnable")) [ CD ]
Line_3 $$ if (!systemConfigManager.getBool("ldap", "authEnable")) -->Line_4 $$ return false[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_6 $$ String ldapName = userName[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_7 $$ AkteraUser user = userDAO.findUserByName(userName)[ CD ]
Line_7 $$ AkteraUser user = userDAO.findUserByName(userName)-->Line_7 $$ AkteraUser user = userDAO.findUserByName(userName)[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_7 $$ AkteraUser user = userDAO.findUserByName(userName)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_8 $$ if (user != null && StringTools.isNotTrimEmpty(user.getLdapName())) [ CD ]
Line_7 $$ AkteraUser user = userDAO.findUserByName(userName)-->Line_8 $$ if (user != null && StringTools.isNotTrimEmpty(user.getLdapName())) [ FD ]
Line_8 $$ if (user != null && StringTools.isNotTrimEmpty(user.getLdapName())) -->Line_9 $$ ldapName = user.getLdapName()[ CD ]
Line_6 $$ String ldapName = userName-->Line_9 $$ ldapName = user.getLdapName()[ FD ]
Line_9 $$ ldapName = user.getLdapName()-->Line_9 $$ ldapName = user.getLdapName()[ FD ]
Line_9 $$ ldapName = user.getLdapName()-->Line_9 $$ ldapName = user.getLdapName()[ CD ]
Line_7 $$ AkteraUser user = userDAO.findUserByName(userName)-->Line_9 $$ ldapName = user.getLdapName()[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_11 $$ String server = systemConfigManager.getString("ldap", "authHost")[ CD ]
Line_11 $$ String server = systemConfigManager.getString("ldap", "authHost")-->Line_11 $$ String server = systemConfigManager.getString("ldap", "authHost")[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_12 $$ if (StringTools.isTrimEmpty(server)) [ CD ]
Line_11 $$ String server = systemConfigManager.getString("ldap", "authHost")-->Line_12 $$ if (StringTools.isTrimEmpty(server)) [ FD ]
Line_12 $$ if (StringTools.isTrimEmpty(server)) -->Line_12 $$ if (StringTools.isTrimEmpty(server)) [ CD ]
Line_11 $$ String server = systemConfigManager.getString("ldap", "authHost")-->Line_12 $$ if (StringTools.isTrimEmpty(server)) [ FD ]
Line_12 $$ if (StringTools.isTrimEmpty(server)) -->Line_13 $$ return false[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_15 $$ int port = NumberTools.toInt(systemConfigManager.get("ldap", "authPort"), 389)[ CD ]
Line_15 $$ int port = NumberTools.toInt(systemConfigManager.get("ldap", "authPort"), 389)-->Line_15 $$ int port = NumberTools.toInt(systemConfigManager.get("ldap", "authPort"), 389)[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_16 $$ String type = StringTools.trim(systemConfigManager.getString("ldap", "authType"))[ CD ]
Line_16 $$ String type = StringTools.trim(systemConfigManager.getString("ldap", "authType"))-->Line_16 $$ String type = StringTools.trim(systemConfigManager.getString("ldap", "authType"))[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_17 $$ String baseDn = StringTools.trim(systemConfigManager.getString("ldap", "authBaseDn"))[ CD ]
Line_17 $$ String baseDn = StringTools.trim(systemConfigManager.getString("ldap", "authBaseDn"))-->Line_17 $$ String baseDn = StringTools.trim(systemConfigManager.getString("ldap", "authBaseDn"))[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_18 $$ String userDn = StringTools.trim(systemConfigManager.getString("ldap", "authUserDn"))[ CD ]
Line_18 $$ String userDn = StringTools.trim(systemConfigManager.getString("ldap", "authUserDn"))-->Line_18 $$ String userDn = StringTools.trim(systemConfigManager.getString("ldap", "authUserDn"))[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_19 $$ String password = StringTools.trim(systemConfigManager.getString("ldap", "authPassword"))[ CD ]
Line_19 $$ String password = StringTools.trim(systemConfigManager.getString("ldap", "authPassword"))-->Line_19 $$ String password = StringTools.trim(systemConfigManager.getString("ldap", "authPassword"))[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_20 $$ String query = StringTools.trim(systemConfigManager.getString("ldap", "authQuery"))[ CD ]
Line_20 $$ String query = StringTools.trim(systemConfigManager.getString("ldap", "authQuery"))-->Line_20 $$ String query = StringTools.trim(systemConfigManager.getString("ldap", "authQuery"))[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_21 $$ String bindDn = StringTools.trim(systemConfigManager.getString("ldap", "authBindDn"))[ CD ]
Line_21 $$ String bindDn = StringTools.trim(systemConfigManager.getString("ldap", "authBindDn"))-->Line_21 $$ String bindDn = StringTools.trim(systemConfigManager.getString("ldap", "authBindDn"))[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_22 $$ String passwordAttributeName = StringTools.trim(systemConfigManager.getString("ldap", "authPasswordAttributeName"))[ CD ]
Line_22 $$ String passwordAttributeName = StringTools.trim(systemConfigManager.getString("ldap", "authPasswordAttributeName"))-->Line_22 $$ String passwordAttributeName = StringTools.trim(systemConfigManager.getString("ldap", "authPasswordAttributeName"))[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_23 $$ Map<String, Object> params = new HashMap<String, Object>()[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_24 $$ params.put("userName", userName)[ CD ]
Line_23 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_24 $$ params.put("userName", userName)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_24 $$ params.put("userName", userName)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_25 $$ params.put("ldapName", ldapName)[ CD ]
Line_23 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_25 $$ params.put("ldapName", ldapName)[ FD ]
Line_6 $$ String ldapName = userName-->Line_25 $$ params.put("ldapName", ldapName)[ FD ]
Line_9 $$ ldapName = user.getLdapName()-->Line_25 $$ params.put("ldapName", ldapName)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_26 $$ params.put("loginName", StringTools.isTrimEmpty(ldapName) ? userName : ldapName)[ CD ]
Line_23 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_26 $$ params.put("loginName", StringTools.isTrimEmpty(ldapName) ? userName : ldapName)[ FD ]
Line_6 $$ String ldapName = userName-->Line_26 $$ params.put("loginName", StringTools.isTrimEmpty(ldapName) ? userName : ldapName)[ FD ]
Line_9 $$ ldapName = user.getLdapName()-->Line_26 $$ params.put("loginName", StringTools.isTrimEmpty(ldapName) ? userName : ldapName)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_27 $$ query = StringTools.replaceTemplate(query, params)[ CD ]
Line_20 $$ String query = StringTools.trim(systemConfigManager.getString("ldap", "authQuery"))-->Line_27 $$ query = StringTools.replaceTemplate(query, params)[ FD ]
Line_27 $$ query = StringTools.replaceTemplate(query, params)-->Line_27 $$ query = StringTools.replaceTemplate(query, params)[ FD ]
Line_27 $$ query = StringTools.replaceTemplate(query, params)-->Line_27 $$ query = StringTools.replaceTemplate(query, params)[ CD ]
Line_20 $$ String query = StringTools.trim(systemConfigManager.getString("ldap", "authQuery"))-->Line_27 $$ query = StringTools.replaceTemplate(query, params)[ FD ]
Line_27 $$ query = StringTools.replaceTemplate(query, params)-->Line_27 $$ query = StringTools.replaceTemplate(query, params)[ FD ]
Line_23 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_27 $$ query = StringTools.replaceTemplate(query, params)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)[ CD ]
Line_21 $$ String bindDn = StringTools.trim(systemConfigManager.getString("ldap", "authBindDn"))-->Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)[ FD ]
Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)-->Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)[ FD ]
Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)-->Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)[ CD ]
Line_21 $$ String bindDn = StringTools.trim(systemConfigManager.getString("ldap", "authBindDn"))-->Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)[ FD ]
Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)-->Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)[ FD ]
Line_23 $$ Map<String, Object> params = new HashMap<String, Object>()-->Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_30 $$ env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory")[ CD ]
Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()-->Line_30 $$ env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory")[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_31 $$ env.put(Context.PROVIDER_URL, "ldap://" + server + ":" + port + "/" + baseDn)[ CD ]
Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()-->Line_31 $$ env.put(Context.PROVIDER_URL, "ldap://" + server + ":" + port + "/" + baseDn)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_32 $$ env.put(Context.SECURITY_AUTHENTICATION, "simple")[ CD ]
Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()-->Line_32 $$ env.put(Context.SECURITY_AUTHENTICATION, "simple")[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_33 $$ if ("ldapAuthBind".equals(type)) [ CD ]
Line_16 $$ String type = StringTools.trim(systemConfigManager.getString("ldap", "authType"))-->Line_33 $$ if ("ldapAuthBind".equals(type)) [ FD ]
Line_33 $$ if ("ldapAuthBind".equals(type)) -->Line_33 $$ if ("ldapAuthBind".equals(type)) [ CD ]
Line_16 $$ String type = StringTools.trim(systemConfigManager.getString("ldap", "authType"))-->Line_33 $$ if ("ldapAuthBind".equals(type)) [ FD ]
Line_33 $$ if ("ldapAuthBind".equals(type)) -->Line_34 $$ env.put(Context.SECURITY_PRINCIPAL, bindDn)[ CD ]
Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()-->Line_34 $$ env.put(Context.SECURITY_PRINCIPAL, bindDn)[ FD ]
Line_21 $$ String bindDn = StringTools.trim(systemConfigManager.getString("ldap", "authBindDn"))-->Line_34 $$ env.put(Context.SECURITY_PRINCIPAL, bindDn)[ FD ]
Line_28 $$ bindDn = StringTools.replaceTemplate(bindDn, params)-->Line_34 $$ env.put(Context.SECURITY_PRINCIPAL, bindDn)[ FD ]
Line_33 $$ if ("ldapAuthBind".equals(type)) -->Line_35 $$ env.put(Context.SECURITY_CREDENTIALS, loginPassword)[ CD ]
Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()-->Line_35 $$ env.put(Context.SECURITY_CREDENTIALS, loginPassword)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_35 $$ env.put(Context.SECURITY_CREDENTIALS, loginPassword)[ FD ]
Line_37 $$ DirContext ctx = new InitialDirContext(env)-->Line_39 $$ ctx.close()[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_47 $$ if (StringTools.isTrimEmpty(userDn) || StringTools.isTrimEmpty(password)) [ CD ]
Line_18 $$ String userDn = StringTools.trim(systemConfigManager.getString("ldap", "authUserDn"))-->Line_47 $$ if (StringTools.isTrimEmpty(userDn) || StringTools.isTrimEmpty(password)) [ FD ]
Line_19 $$ String password = StringTools.trim(systemConfigManager.getString("ldap", "authPassword"))-->Line_47 $$ if (StringTools.isTrimEmpty(userDn) || StringTools.isTrimEmpty(password)) [ FD ]
Line_47 $$ if (StringTools.isTrimEmpty(userDn) || StringTools.isTrimEmpty(password)) -->Line_48 $$ return false[ CD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_50 $$ env.put(Context.SECURITY_PRINCIPAL, userDn)[ CD ]
Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()-->Line_50 $$ env.put(Context.SECURITY_PRINCIPAL, userDn)[ FD ]
Line_18 $$ String userDn = StringTools.trim(systemConfigManager.getString("ldap", "authUserDn"))-->Line_50 $$ env.put(Context.SECURITY_PRINCIPAL, userDn)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_51 $$ env.put(Context.SECURITY_CREDENTIALS, password)[ CD ]
Line_29 $$ Hashtable<String, Object> env = new Hashtable<String, Object>()-->Line_51 $$ env.put(Context.SECURITY_CREDENTIALS, password)[ FD ]
Line_19 $$ String password = StringTools.trim(systemConfigManager.getString("ldap", "authPassword"))-->Line_51 $$ env.put(Context.SECURITY_CREDENTIALS, password)[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_53 $$ NamingEnumeration<SearchResult> results = null[ CD ]
Line_37 $$ DirContext ctx = new InitialDirContext(env)-->Line_55 $$ ctx = new InitialDirContext(env)[ FD ]
Line_55 $$ ctx = new InitialDirContext(env)-->Line_55 $$ ctx = new InitialDirContext(env)[ FD ]
Line_56 $$ SearchControls controls = new SearchControls()-->Line_57 $$ controls.setSearchScope(SearchControls.SUBTREE_SCOPE)[ FD ]
Line_53 $$ NamingEnumeration<SearchResult> results = null-->Line_58 $$ results = ctx.search("", query, controls)[ FD ]
Line_58 $$ results = ctx.search("", query, controls)-->Line_58 $$ results = ctx.search("", query, controls)[ FD ]
Line_58 $$ results = ctx.search("", query, controls)-->Line_58 $$ results = ctx.search("", query, controls)[ CD ]
Line_37 $$ DirContext ctx = new InitialDirContext(env)-->Line_58 $$ results = ctx.search("", query, controls)[ FD ]
Line_55 $$ ctx = new InitialDirContext(env)-->Line_58 $$ results = ctx.search("", query, controls)[ FD ]
Line_20 $$ String query = StringTools.trim(systemConfigManager.getString("ldap", "authQuery"))-->Line_58 $$ results = ctx.search("", query, controls)[ FD ]
Line_27 $$ query = StringTools.replaceTemplate(query, params)-->Line_58 $$ results = ctx.search("", query, controls)[ FD ]
Line_56 $$ SearchControls controls = new SearchControls()-->Line_58 $$ results = ctx.search("", query, controls)[ FD ]
Line_53 $$ NamingEnumeration<SearchResult> results = null-->Line_59 $$ if (results.hasMore()) [ FD ]
Line_58 $$ results = ctx.search("", query, controls)-->Line_59 $$ if (results.hasMore()) [ FD ]
Line_59 $$ if (results.hasMore()) -->Line_59 $$ if (results.hasMore()) [ CD ]
Line_53 $$ NamingEnumeration<SearchResult> results = null-->Line_59 $$ if (results.hasMore()) [ FD ]
Line_58 $$ results = ctx.search("", query, controls)-->Line_59 $$ if (results.hasMore()) [ FD ]
Line_59 $$ if (results.hasMore()) -->Line_60 $$ SearchResult searchResult = results.next()[ CD ]
Line_60 $$ SearchResult searchResult = results.next()-->Line_60 $$ SearchResult searchResult = results.next()[ CD ]
Line_53 $$ NamingEnumeration<SearchResult> results = null-->Line_60 $$ SearchResult searchResult = results.next()[ FD ]
Line_58 $$ results = ctx.search("", query, controls)-->Line_60 $$ SearchResult searchResult = results.next()[ FD ]
Line_59 $$ if (results.hasMore()) -->Line_61 $$ Attributes attributes = searchResult.getAttributes()[ CD ]
Line_61 $$ Attributes attributes = searchResult.getAttributes()-->Line_61 $$ Attributes attributes = searchResult.getAttributes()[ CD ]
Line_60 $$ SearchResult searchResult = results.next()-->Line_61 $$ Attributes attributes = searchResult.getAttributes()[ FD ]
Line_59 $$ if (results.hasMore()) -->Line_62 $$ if (attributes.get(passwordAttributeName) == null) [ CD ]
Line_61 $$ Attributes attributes = searchResult.getAttributes()-->Line_62 $$ if (attributes.get(passwordAttributeName) == null) [ FD ]
Line_22 $$ String passwordAttributeName = StringTools.trim(systemConfigManager.getString("ldap", "authPasswordAttributeName"))-->Line_62 $$ if (attributes.get(passwordAttributeName) == null) [ FD ]
Line_62 $$ if (attributes.get(passwordAttributeName) == null) -->Line_63 $$ return false[ CD ]
Line_59 $$ if (results.hasMore()) -->Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())[ CD ]
Line_61 $$ Attributes attributes = searchResult.getAttributes()-->Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())[ FD ]
Line_22 $$ String passwordAttributeName = StringTools.trim(systemConfigManager.getString("ldap", "authPasswordAttributeName"))-->Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())[ FD ]
Line_59 $$ if (results.hasMore()) -->Line_66 $$ if (pass.startsWith("[ CD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_66 $$ if (pass.startsWith("[ FD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_66 $$ if (pass.startsWith("[ FD ]
Line_66 $$ if (pass.startsWith("-->Line_67 $$ String method = pass.substring(1, pass.indexOf('}'))[ CD ]
Line_67 $$ String method = pass.substring(1, pass.indexOf('}'))-->Line_67 $$ String method = pass.substring(1, pass.indexOf('}'))[ CD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_67 $$ String method = pass.substring(1, pass.indexOf('}'))[ FD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_67 $$ String method = pass.substring(1, pass.indexOf('}'))[ FD ]
Line_66 $$ if (pass.startsWith("-->Line_68 $$ MessageDigest digest = MessageDigest.getInstance(method)[ CD ]
Line_68 $$ MessageDigest digest = MessageDigest.getInstance(method)-->Line_68 $$ MessageDigest digest = MessageDigest.getInstance(method)[ CD ]
Line_67 $$ String method = pass.substring(1, pass.indexOf('}'))-->Line_68 $$ MessageDigest digest = MessageDigest.getInstance(method)[ FD ]
Line_66 $$ if (pass.startsWith("-->Line_69 $$ digest.update(loginPassword.getBytes(), 0, loginPassword.length())[ CD ]
Line_68 $$ MessageDigest digest = MessageDigest.getInstance(method)-->Line_69 $$ digest.update(loginPassword.getBytes(), 0, loginPassword.length())[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_69 $$ digest.update(loginPassword.getBytes(), 0, loginPassword.length())[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_69 $$ digest.update(loginPassword.getBytes(), 0, loginPassword.length())[ FD ]
Line_66 $$ if (pass.startsWith("-->Line_70 $$ if (pass.equals("[ CD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_70 $$ if (pass.equals("[ FD ]
Line_70 $$ if (pass.equals("-->Line_70 $$ if (pass.equals("[ CD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_70 $$ if (pass.equals("[ FD ]
Line_68 $$ MessageDigest digest = MessageDigest.getInstance(method)-->Line_70 $$ if (pass.equals("[ FD ]
Line_70 $$ if (pass.equals("-->Line_71 $$ return true[ CD ]
Line_66 $$ if (pass.startsWith("-->Line_74 $$ if (pass.equals(loginPassword)) [ CD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_74 $$ if (pass.equals(loginPassword)) [ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_74 $$ if (pass.equals(loginPassword)) [ FD ]
Line_74 $$ if (pass.equals(loginPassword)) -->Line_74 $$ if (pass.equals(loginPassword)) [ CD ]
Line_65 $$ String pass = new String((byte[]) attributes.get(passwordAttributeName).get())-->Line_74 $$ if (pass.equals(loginPassword)) [ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_74 $$ if (pass.equals(loginPassword)) [ FD ]
Line_74 $$ if (pass.equals(loginPassword)) -->Line_75 $$ return true[ CD ]
Line_53 $$ NamingEnumeration<SearchResult> results = null-->Line_81 $$ if (results != null) [ FD ]
Line_58 $$ results = ctx.search("", query, controls)-->Line_81 $$ if (results != null) [ FD ]
Line_53 $$ NamingEnumeration<SearchResult> results = null-->Line_83 $$ results.close()[ FD ]
Line_58 $$ results = ctx.search("", query, controls)-->Line_83 $$ results.close()[ FD ]
Line_37 $$ DirContext ctx = new InitialDirContext(env)-->Line_87 $$ if (ctx != null) [ FD ]
Line_55 $$ ctx = new InitialDirContext(env)-->Line_87 $$ if (ctx != null) [ FD ]
Line_37 $$ DirContext ctx = new InitialDirContext(env)-->Line_89 $$ ctx.close()[ FD ]
Line_55 $$ ctx = new InitialDirContext(env)-->Line_89 $$ ctx.close()[ FD ]
Line_2 $$ public boolean authenticate(String userName, String loginPassword) -->Line_94 $$ return false[ CD ]
