Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected int run(CmdLineParser parser) [ CD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_3 $$ final List<String> args = parser.getRemainingArgs()[ CD ]
Line_3 $$ final List<String> args = parser.getRemainingArgs()-->Line_3 $$ final List<String> args = parser.getRemainingArgs()[ CD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_3 $$ final List<String> args = parser.getRemainingArgs()[ FD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_4 $$ if (args.isEmpty()) [ CD ]
Line_3 $$ final List<String> args = parser.getRemainingArgs()-->Line_4 $$ if (args.isEmpty()) [ FD ]
Line_4 $$ if (args.isEmpty()) -->Line_4 $$ if (args.isEmpty()) [ CD ]
Line_3 $$ final List<String> args = parser.getRemainingArgs()-->Line_4 $$ if (args.isEmpty()) [ FD ]
Line_4 $$ if (args.isEmpty()) -->Line_5 $$ System.err.println("summarysort :: WORKDIR not given.")[ CD ]
Line_4 $$ if (args.isEmpty()) -->Line_6 $$ return 3[ CD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_8 $$ if (args.size() == 1) [ CD ]
Line_3 $$ final List<String> args = parser.getRemainingArgs()-->Line_8 $$ if (args.size() == 1) [ FD ]
Line_8 $$ if (args.size() == 1) -->Line_9 $$ System.err.println("summarysort :: INPATH not given.")[ CD ]
Line_8 $$ if (args.size() == 1) -->Line_10 $$ return 3[ CD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_12 $$ final String outS = (String) parser.getOptionValue(outputDirOpt)[ CD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_12 $$ final String outS = (String) parser.getOptionValue(outputDirOpt)[ FD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)[ CD ]
Line_3 $$ final List<String> args = parser.getRemainingArgs()-->Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)[ FD ]
Line_3 $$ final List<String> args = parser.getRemainingArgs()-->Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)[ FD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_14 $$ final boolean verbose = parser.getBoolean(verboseOpt)[ CD ]
Line_14 $$ final boolean verbose = parser.getBoolean(verboseOpt)-->Line_14 $$ final boolean verbose = parser.getBoolean(verboseOpt)[ CD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_14 $$ final boolean verbose = parser.getBoolean(verboseOpt)[ FD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_15 $$ final Configuration conf = getConf()[ CD ]
Line_15 $$ final Configuration conf = getConf()-->Line_15 $$ final Configuration conf = getConf()[ CD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_16 $$ final Timer t = new Timer()[ CD ]
Line_15 $$ final Configuration conf = getConf()-->Line_18 $$ conf.setInt("mapred.reduce.tasks", Math.max(1, maxReduceTasks * 9 / 10))[ FD ]
Line_19 $$ final Job job = sortOne(conf, in, wrkDir, "summarysort", "")-->Line_19 $$ final Job job = sortOne(conf, in, wrkDir, "summarysort", "")[ CD ]
Line_15 $$ final Configuration conf = getConf()-->Line_19 $$ final Job job = sortOne(conf, in, wrkDir, "summarysort", "")[ FD ]
Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)-->Line_19 $$ final Job job = sortOne(conf, in, wrkDir, "summarysort", "")[ FD ]
Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)-->Line_19 $$ final Job job = sortOne(conf, in, wrkDir, "summarysort", "")[ FD ]
Line_16 $$ final Timer t = new Timer()-->Line_21 $$ t.start()[ FD ]
Line_22 $$ if (!job.waitForCompletion(verbose)) -->Line_22 $$ if (!job.waitForCompletion(verbose)) [ CD ]
Line_22 $$ if (!job.waitForCompletion(verbose)) -->Line_22 $$ if (!job.waitForCompletion(verbose)) [ CD ]
Line_19 $$ final Job job = sortOne(conf, in, wrkDir, "summarysort", "")-->Line_22 $$ if (!job.waitForCompletion(verbose)) [ FD ]
Line_14 $$ final boolean verbose = parser.getBoolean(verboseOpt)-->Line_22 $$ if (!job.waitForCompletion(verbose)) [ FD ]
Line_22 $$ if (!job.waitForCompletion(verbose)) -->Line_23 $$ System.err.println("summarysort :: Job failed.")[ CD ]
Line_22 $$ if (!job.waitForCompletion(verbose)) -->Line_24 $$ return 4[ CD ]
Line_16 $$ final Timer t = new Timer()-->Line_26 $$ System.out.printf("summarysort :: Job complete in %d.%03d s.\n", t.stopS(), t.fms())[ FD ]
Line_16 $$ final Timer t = new Timer()-->Line_26 $$ System.out.printf("summarysort :: Job complete in %d.%03d s.\n", t.stopS(), t.fms())[ FD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_35 $$ if (out != null)[ CD ]
Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)-->Line_35 $$ if (out != null)[ FD ]
Line_16 $$ final Timer t = new Timer()-->Line_37 $$ t.start()[ FD ]
Line_38 $$ final FileSystem srcFS = wrkDir.getFileSystem(conf)-->Line_38 $$ final FileSystem srcFS = wrkDir.getFileSystem(conf)[ CD ]
Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)-->Line_38 $$ final FileSystem srcFS = wrkDir.getFileSystem(conf)[ FD ]
Line_15 $$ final Configuration conf = getConf()-->Line_38 $$ final FileSystem srcFS = wrkDir.getFileSystem(conf)[ FD ]
Line_39 $$ final FileSystem dstFS = out.getFileSystem(conf)-->Line_39 $$ final FileSystem dstFS = out.getFileSystem(conf)[ CD ]
Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)-->Line_39 $$ final FileSystem dstFS = out.getFileSystem(conf)[ FD ]
Line_15 $$ final Configuration conf = getConf()-->Line_39 $$ final FileSystem dstFS = out.getFileSystem(conf)[ FD ]
Line_40 $$ final OutputStream outs = dstFS.create(out)-->Line_40 $$ final OutputStream outs = dstFS.create(out)[ CD ]
Line_39 $$ final FileSystem dstFS = out.getFileSystem(conf)-->Line_40 $$ final OutputStream outs = dstFS.create(out)[ FD ]
Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)-->Line_40 $$ final OutputStream outs = dstFS.create(out)[ FD ]
Line_41 $$ final FileStatus[] parts = srcFS.globStatus(new Path(wrkDir, in.getName() + "-[0-9][0-9][0-9][0-9][0-9][0-9]*"))-->Line_41 $$ final FileStatus[] parts = srcFS.globStatus(new Path(wrkDir, in.getName() + "-[0-9][0-9][0-9][0-9][0-9][0-9]*"))[ CD ]
Line_38 $$ final FileSystem srcFS = wrkDir.getFileSystem(conf)-->Line_41 $$ final FileStatus[] parts = srcFS.globStatus(new Path(wrkDir, in.getName() + "-[0-9][0-9][0-9][0-9][0-9][0-9]*"))[ FD ]
Line_13 $$ final Path wrkDir = new Path(args.get(0)), in = new Path(args.get(1)), out = outS == null ? null : new Path(outS)-->Line_41 $$ final FileStatus[] parts = srcFS.globStatus(new Path(wrkDir, in.getName() + "-[0-9][0-9][0-9][0-9][0-9][0-9]*"))[ FD ]
Line_44 $$ final Timer t2 = new Timer()-->Line_46 $$ t2.start()[ FD ]
Line_47 $$ final InputStream ins = srcFS.open(part.getPath())-->Line_47 $$ final InputStream ins = srcFS.open(part.getPath())[ CD ]
Line_38 $$ final FileSystem srcFS = wrkDir.getFileSystem(conf)-->Line_47 $$ final InputStream ins = srcFS.open(part.getPath())[ FD ]
Line_45 $$ for (final FileStatus part : parts) -->Line_47 $$ final InputStream ins = srcFS.open(part.getPath())[ FD ]
Line_47 $$ final InputStream ins = srcFS.open(part.getPath())-->Line_48 $$ IOUtils.copyBytes(ins, outs, conf, false)[ FD ]
Line_40 $$ final OutputStream outs = dstFS.create(out)-->Line_48 $$ IOUtils.copyBytes(ins, outs, conf, false)[ FD ]
Line_15 $$ final Configuration conf = getConf()-->Line_48 $$ IOUtils.copyBytes(ins, outs, conf, false)[ FD ]
Line_47 $$ final InputStream ins = srcFS.open(part.getPath())-->Line_49 $$ ins.close()[ FD ]
Line_43 $$ int i = 0-->Line_50 $$ System.out.printf("summarysort :: Merged part %d in %d.%03d s.\n", ++i, t2.stopS(), t2.fms())[ FD ]
Line_44 $$ final Timer t2 = new Timer()-->Line_50 $$ System.out.printf("summarysort :: Merged part %d in %d.%03d s.\n", ++i, t2.stopS(), t2.fms())[ FD ]
Line_44 $$ final Timer t2 = new Timer()-->Line_50 $$ System.out.printf("summarysort :: Merged part %d in %d.%03d s.\n", ++i, t2.stopS(), t2.fms())[ FD ]
Line_38 $$ final FileSystem srcFS = wrkDir.getFileSystem(conf)-->Line_53 $$ srcFS.delete(part.getPath(), false)[ FD ]
Line_45 $$ for (final FileStatus part : parts) -->Line_53 $$ srcFS.delete(part.getPath(), false)[ FD ]
Line_40 $$ final OutputStream outs = dstFS.create(out)-->Line_54 $$ outs.write(BlockCompressedStreamConstants.EMPTY_GZIP_BLOCK)[ FD ]
Line_40 $$ final OutputStream outs = dstFS.create(out)-->Line_55 $$ outs.close()[ FD ]
Line_16 $$ final Timer t = new Timer()-->Line_56 $$ System.out.printf("summarysort :: Merging complete in %d.%03d s.\n", t.stopS(), t.fms())[ FD ]
Line_16 $$ final Timer t = new Timer()-->Line_56 $$ System.out.printf("summarysort :: Merging complete in %d.%03d s.\n", t.stopS(), t.fms())[ FD ]
Line_2 $$ protected int run(CmdLineParser parser) -->Line_61 $$ return 0[ CD ]
