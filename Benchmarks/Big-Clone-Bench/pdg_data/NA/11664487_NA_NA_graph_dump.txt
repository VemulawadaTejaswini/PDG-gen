Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ ReadableByteChannel in = Channels.newChannel((new FileInputStream("/home/sannies/suckerpunch-distantplanet_h1080p/suckerpunch-distantplanet_h1080p.mov")))[ CD ]
Line_3 $$ ReadableByteChannel in = Channels.newChannel((new FileInputStream("/home/sannies/suckerpunch-distantplanet_h1080p/suckerpunch-distantplanet_h1080p.mov")))-->Line_3 $$ ReadableByteChannel in = Channels.newChannel((new FileInputStream("/home/sannies/suckerpunch-distantplanet_h1080p/suckerpunch-distantplanet_h1080p.mov")))[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ Movie movie = MovieCreator.build(in)[ CD ]
Line_4 $$ Movie movie = MovieCreator.build(in)-->Line_4 $$ Movie movie = MovieCreator.build(in)[ CD ]
Line_3 $$ ReadableByteChannel in = Channels.newChannel((new FileInputStream("/home/sannies/suckerpunch-distantplanet_h1080p/suckerpunch-distantplanet_h1080p.mov")))-->Line_4 $$ Movie movie = MovieCreator.build(in)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ in.close()[ CD ]
Line_3 $$ ReadableByteChannel in = Channels.newChannel((new FileInputStream("/home/sannies/suckerpunch-distantplanet_h1080p/suckerpunch-distantplanet_h1080p.mov")))-->Line_5 $$ in.close()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ List<Track> tracks = movie.getTracks()[ CD ]
Line_6 $$ List<Track> tracks = movie.getTracks()-->Line_6 $$ List<Track> tracks = movie.getTracks()[ CD ]
Line_4 $$ Movie movie = MovieCreator.build(in)-->Line_6 $$ List<Track> tracks = movie.getTracks()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ movie.setTracks(new LinkedList<Track>())[ CD ]
Line_4 $$ Movie movie = MovieCreator.build(in)-->Line_7 $$ movie.setTracks(new LinkedList<Track>())[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_8 $$ double startTime = 35.000[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_9 $$ double endTime = 145.000[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_10 $$ boolean timeCorrected = false[ CD ]
Line_11 $$ for (Track track : tracks) -->Line_12 $$ if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) [ FD ]
Line_11 $$ for (Track track : tracks) -->Line_12 $$ if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) [ FD ]
Line_12 $$ if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) -->Line_13 $$ if (timeCorrected) [ CD ]
Line_12 $$ if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) -->Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)[ CD ]
Line_8 $$ double startTime = 35.000-->Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)[ FD ]
Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)-->Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)[ FD ]
Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)-->Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)[ CD ]
Line_11 $$ for (Track track : tracks) -->Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)[ FD ]
Line_8 $$ double startTime = 35.000-->Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)[ FD ]
Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)-->Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)[ FD ]
Line_12 $$ if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) -->Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)[ CD ]
Line_9 $$ double endTime = 145.000-->Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)[ FD ]
Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)-->Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)[ FD ]
Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)-->Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)[ CD ]
Line_11 $$ for (Track track : tracks) -->Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)[ FD ]
Line_9 $$ double endTime = 145.000-->Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)[ FD ]
Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)-->Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)[ FD ]
Line_12 $$ if (track.getSyncSamples() != null && track.getSyncSamples().length > 0) -->Line_18 $$ timeCorrected = true[ CD ]
Line_10 $$ boolean timeCorrected = false-->Line_18 $$ timeCorrected = true[ FD ]
Line_18 $$ timeCorrected = true-->Line_18 $$ timeCorrected = true[ FD ]
Line_24 $$ long startSample = -1-->Line_24 $$ long startSample = -1[ CD ]
Line_25 $$ long endSample = -1-->Line_25 $$ long endSample = -1[ CD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ CD ]
Line_11 $$ for (Track track : tracks) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ FD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ CD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ CD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ FD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)[ CD ]
Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)-->Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)[ CD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)[ FD ]
Line_11 $$ for (Track track : tracks) -->Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)[ FD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ CD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ CD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ CD ]
Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)-->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ CD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ CD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_29 $$ if (currentTime <= startTime) [ CD ]
Line_23 $$ double currentTime = 0-->Line_29 $$ if (currentTime <= startTime) [ FD ]
Line_8 $$ double startTime = 35.000-->Line_29 $$ if (currentTime <= startTime) [ FD ]
Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)-->Line_29 $$ if (currentTime <= startTime) [ FD ]
Line_29 $$ if (currentTime <= startTime) -->Line_30 $$ startSample = currentSample[ CD ]
Line_30 $$ startSample = currentSample-->Line_30 $$ startSample = currentSample[ FD ]
Line_24 $$ long startSample = -1-->Line_30 $$ startSample = currentSample[ FD ]
Line_22 $$ long currentSample = 0-->Line_30 $$ startSample = currentSample[ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_32 $$ if (currentTime <= endTime) [ CD ]
Line_23 $$ double currentTime = 0-->Line_32 $$ if (currentTime <= endTime) [ FD ]
Line_9 $$ double endTime = 145.000-->Line_32 $$ if (currentTime <= endTime) [ FD ]
Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)-->Line_32 $$ if (currentTime <= endTime) [ FD ]
Line_32 $$ if (currentTime <= endTime) -->Line_33 $$ endSample = currentSample[ CD ]
Line_33 $$ endSample = currentSample-->Line_33 $$ endSample = currentSample[ FD ]
Line_25 $$ long endSample = -1-->Line_33 $$ endSample = currentSample[ FD ]
Line_22 $$ long currentSample = 0-->Line_33 $$ endSample = currentSample[ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()[ CD ]
Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()-->Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()[ FD ]
Line_23 $$ double currentTime = 0-->Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()[ FD ]
Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)-->Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()[ FD ]
Line_11 $$ for (Track track : tracks) -->Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()[ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_38 $$ currentSample++[ CD ]
Line_22 $$ long currentSample = 0-->Line_38 $$ currentSample++[ FD ]
Line_4 $$ Movie movie = MovieCreator.build(in)-->Line_41 $$ movie.addTrack(new CroppedTrack(track, startSample, endSample))[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_43 $$ long start1 = System.currentTimeMillis()[ CD ]
Line_43 $$ long start1 = System.currentTimeMillis()-->Line_43 $$ long start1 = System.currentTimeMillis()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_44 $$ IsoFile out = new DefaultMp4Builder().build(movie)[ CD ]
Line_44 $$ IsoFile out = new DefaultMp4Builder().build(movie)-->Line_44 $$ IsoFile out = new DefaultMp4Builder().build(movie)[ CD ]
Line_4 $$ Movie movie = MovieCreator.build(in)-->Line_44 $$ IsoFile out = new DefaultMp4Builder().build(movie)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_45 $$ long start2 = System.currentTimeMillis()[ CD ]
Line_45 $$ long start2 = System.currentTimeMillis()-->Line_45 $$ long start2 = System.currentTimeMillis()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_46 $$ FileOutputStream fos = new FileOutputStream(String.format("output-%f-%f.mp4", startTime, endTime))[ CD ]
Line_8 $$ double startTime = 35.000-->Line_46 $$ FileOutputStream fos = new FileOutputStream(String.format("output-%f-%f.mp4", startTime, endTime))[ FD ]
Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)-->Line_46 $$ FileOutputStream fos = new FileOutputStream(String.format("output-%f-%f.mp4", startTime, endTime))[ FD ]
Line_9 $$ double endTime = 145.000-->Line_46 $$ FileOutputStream fos = new FileOutputStream(String.format("output-%f-%f.mp4", startTime, endTime))[ FD ]
Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)-->Line_46 $$ FileOutputStream fos = new FileOutputStream(String.format("output-%f-%f.mp4", startTime, endTime))[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_47 $$ FileChannel fc = fos.getChannel()[ CD ]
Line_47 $$ FileChannel fc = fos.getChannel()-->Line_47 $$ FileChannel fc = fos.getChannel()[ CD ]
Line_46 $$ FileOutputStream fos = new FileOutputStream(String.format("output-%f-%f.mp4", startTime, endTime))-->Line_47 $$ FileChannel fc = fos.getChannel()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_48 $$ out.getBox(fc)[ CD ]
Line_44 $$ IsoFile out = new DefaultMp4Builder().build(movie)-->Line_48 $$ out.getBox(fc)[ FD ]
Line_47 $$ FileChannel fc = fos.getChannel()-->Line_48 $$ out.getBox(fc)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_49 $$ fc.close()[ CD ]
Line_47 $$ FileChannel fc = fos.getChannel()-->Line_49 $$ fc.close()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_50 $$ fos.close()[ CD ]
Line_46 $$ FileOutputStream fos = new FileOutputStream(String.format("output-%f-%f.mp4", startTime, endTime))-->Line_50 $$ fos.close()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_51 $$ long start3 = System.currentTimeMillis()[ CD ]
Line_51 $$ long start3 = System.currentTimeMillis()-->Line_51 $$ long start3 = System.currentTimeMillis()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_52 $$ System.err.println("Building IsoFile took : " + (start2 - start1) + "ms")[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_53 $$ System.err.println("Writing IsoFile took  : " + (start3 - start2) + "ms")[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_54 $$ System.err.println("Writing IsoFile speed : " + (new File(String.format("output-%f-%f.mp4", startTime, endTime)).length() / (start3 - start2) / 1000) + "MB/s")[ CD ]
Line_8 $$ double startTime = 35.000-->Line_54 $$ System.err.println("Writing IsoFile speed : " + (new File(String.format("output-%f-%f.mp4", startTime, endTime)).length() / (start3 - start2) / 1000) + "MB/s")[ FD ]
Line_16 $$ startTime = correctTimeToNextSyncSample(track, startTime)-->Line_54 $$ System.err.println("Writing IsoFile speed : " + (new File(String.format("output-%f-%f.mp4", startTime, endTime)).length() / (start3 - start2) / 1000) + "MB/s")[ FD ]
Line_9 $$ double endTime = 145.000-->Line_54 $$ System.err.println("Writing IsoFile speed : " + (new File(String.format("output-%f-%f.mp4", startTime, endTime)).length() / (start3 - start2) / 1000) + "MB/s")[ FD ]
Line_17 $$ endTime = correctTimeToNextSyncSample(track, endTime)-->Line_54 $$ System.err.println("Writing IsoFile speed : " + (new File(String.format("output-%f-%f.mp4", startTime, endTime)).length() / (start3 - start2) / 1000) + "MB/s")[ FD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ FD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ FD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) [ FD ]
Line_26 $$ for (int i = 0; i < track.getDecodingTimeEntries().size(); i++) -->Line_27 $$ TimeToSampleBox.Entry entry = track.getDecodingTimeEntries().get(i)[ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ FD ]
Line_28 $$ for (int j = 0; j < entry.getCount(); j++) -->Line_28 $$ for (int j = 0; j < entry.getCount(); j++) [ FD ]
Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()-->Line_29 $$ if (currentTime <= startTime) [ FD ]
Line_37 $$ currentTime += (double) entry.getDelta() / (double) track.getTrackMetaData().getTimescale()-->Line_32 $$ if (currentTime <= endTime) [ FD ]
