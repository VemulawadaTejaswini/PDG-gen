Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException [ CD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_3 $$ String callURL = theURL[ CD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_4 $$ callURL += "?method=test"[ CD ]
Line_3 $$ String callURL = theURL-->Line_4 $$ callURL += "?method=test"[ FD ]
Line_4 $$ callURL += "?method=test"-->Line_4 $$ callURL += "?method=test"[ FD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_5 $$ java.net.HttpURLConnection conn[ CD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_6 $$ java.net.URL url = new java.net.URL(callURL)[ CD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()[ CD ]
Line_5 $$ java.net.HttpURLConnection conn-->Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()[ FD ]
Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()-->Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()[ FD ]
Line_6 $$ java.net.URL url = new java.net.URL(callURL)-->Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_8 $$ if (isFollowingRedirects != null)[ CD ]
Line_8 $$ if (isFollowingRedirects != null)-->Line_8 $$ conn.setInstanceFollowRedirects(isFollowingRedirects.booleanValue())[ CD ]
Line_5 $$ java.net.HttpURLConnection conn-->Line_8 $$ conn.setInstanceFollowRedirects(isFollowingRedirects.booleanValue())[ FD ]
Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()-->Line_8 $$ conn.setInstanceFollowRedirects(isFollowingRedirects.booleanValue())[ FD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_9 $$ if (theConnectTimeout >= 0)[ CD ]
Line_9 $$ if (theConnectTimeout >= 0)-->Line_9 $$ conn.setConnectTimeout(theConnectTimeout)[ CD ]
Line_5 $$ java.net.HttpURLConnection conn-->Line_9 $$ conn.setConnectTimeout(theConnectTimeout)[ FD ]
Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()-->Line_9 $$ conn.setConnectTimeout(theConnectTimeout)[ FD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_10 $$ if (theReadTimeout >= 0)[ CD ]
Line_10 $$ if (theReadTimeout >= 0)-->Line_10 $$ conn.setReadTimeout(theReadTimeout)[ CD ]
Line_5 $$ java.net.HttpURLConnection conn-->Line_10 $$ conn.setReadTimeout(theReadTimeout)[ FD ]
Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()-->Line_10 $$ conn.setReadTimeout(theReadTimeout)[ FD ]
Line_2 $$ public java.security.cert.X509Certificate[] getServerCerts() throws IOException -->Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) [ CD ]
Line_5 $$ java.net.HttpURLConnection conn-->Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) [ FD ]
Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()-->Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) [ FD ]
Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) -->Line_12 $$ SecurityRetriever retriever = new SecurityRetriever()[ CD ]
Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) -->Line_13 $$ javax.net.ssl.SSLContext sc[ CD ]
Line_13 $$ javax.net.ssl.SSLContext sc-->Line_15 $$ sc = javax.net.ssl.SSLContext.getInstance("SSL")[ FD ]
Line_15 $$ sc = javax.net.ssl.SSLContext.getInstance("SSL")-->Line_15 $$ sc = javax.net.ssl.SSLContext.getInstance("SSL")[ FD ]
Line_15 $$ sc = javax.net.ssl.SSLContext.getInstance("SSL")-->Line_15 $$ sc = javax.net.ssl.SSLContext.getInstance("SSL")[ CD ]
Line_13 $$ javax.net.ssl.SSLContext sc-->Line_16 $$ sc.init(theKeyManagers, new javax.net.ssl.TrustManager[] [ FD ]
Line_15 $$ sc = javax.net.ssl.SSLContext.getInstance("SSL")-->Line_16 $$ sc.init(theKeyManagers, new javax.net.ssl.TrustManager[] [ FD ]
Line_19 $$ IOException toThrow = new IOException("Could not initialize SSL context: " + e.getMessage())-->Line_20 $$ toThrow.setStackTrace(e.getStackTrace())[ FD ]
Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) -->Line_23 $$ javax.net.ssl.HttpsURLConnection sConn = (javax.net.ssl.HttpsURLConnection) conn[ CD ]
Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) -->Line_24 $$ sConn.setSSLSocketFactory(sc.getSocketFactory())[ CD ]
Line_23 $$ javax.net.ssl.HttpsURLConnection sConn = (javax.net.ssl.HttpsURLConnection) conn-->Line_24 $$ sConn.setSSLSocketFactory(sc.getSocketFactory())[ FD ]
Line_13 $$ javax.net.ssl.SSLContext sc-->Line_24 $$ sConn.setSSLSocketFactory(sc.getSocketFactory())[ FD ]
Line_15 $$ sc = javax.net.ssl.SSLContext.getInstance("SSL")-->Line_24 $$ sConn.setSSLSocketFactory(sc.getSocketFactory())[ FD ]
Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) -->Line_25 $$ sConn.setHostnameVerifier(new javax.net.ssl.HostnameVerifier() [ CD ]
Line_23 $$ javax.net.ssl.HttpsURLConnection sConn = (javax.net.ssl.HttpsURLConnection) conn-->Line_25 $$ sConn.setHostnameVerifier(new javax.net.ssl.HostnameVerifier() [ FD ]
Line_25 $$ sConn.setHostnameVerifier(new javax.net.ssl.HostnameVerifier() -->Line_27 $$ return true[ CD ]
Line_5 $$ java.net.HttpURLConnection conn-->Line_31 $$ conn.connect()[ FD ]
Line_7 $$ conn = (java.net.HttpURLConnection) url.openConnection()-->Line_31 $$ conn.connect()[ FD ]
Line_12 $$ SecurityRetriever retriever = new SecurityRetriever()-->Line_33 $$ if (retriever.getCerts() == null)[ FD ]
Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) -->Line_35 $$ return retriever.getCerts()[ CD ]
Line_35 $$ return retriever.getCerts()-->Line_35 $$ return retriever.getCerts()[ CD ]
Line_12 $$ SecurityRetriever retriever = new SecurityRetriever()-->Line_35 $$ return retriever.getCerts()[ FD ]
Line_11 $$ if (conn instanceof javax.net.ssl.HttpsURLConnection) -->Line_36 $$ return null[ CD ]
