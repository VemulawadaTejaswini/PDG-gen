Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException [ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_3 $$ if (alignmentSource == null)[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_3 $$ if (alignmentSource == null)[ FD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_4 $$ URL url[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_5 $$ String st[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_6 $$ BufferedReader reader[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_7 $$ Alignment alignment[ CD ]
Line_7 $$ Alignment alignment-->Line_10 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_10 $$ alignment = parseAlignment(alignmentSource)-->Line_10 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_10 $$ alignment = parseAlignment(alignmentSource)-->Line_10 $$ alignment = parseAlignment(alignmentSource)[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_10 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_4 $$ URL url-->Line_13 $$ url = new URL(alignmentSource)[ FD ]
Line_13 $$ url = new URL(alignmentSource)-->Line_13 $$ url = new URL(alignmentSource)[ FD ]
Line_6 $$ BufferedReader reader-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_4 $$ URL url-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_13 $$ url = new URL(alignmentSource)-->Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_5 $$ String st-->Line_15 $$ st = ""[ FD ]
Line_15 $$ st = ""-->Line_15 $$ st = ""[ FD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_16 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_5 $$ String st-->Line_16 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_15 $$ st = ""-->Line_16 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_16 $$ while (((st = reader.readLine()) != null)) [ CD ]
Line_6 $$ BufferedReader reader-->Line_16 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_16 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_17 $$ alignment = parseAlignment(st)[ CD ]
Line_17 $$ alignment = parseAlignment(st)-->Line_17 $$ alignment = parseAlignment(st)[ FD ]
Line_7 $$ Alignment alignment-->Line_17 $$ alignment = parseAlignment(st)[ FD ]
Line_10 $$ alignment = parseAlignment(alignmentSource)-->Line_17 $$ alignment = parseAlignment(st)[ FD ]
Line_17 $$ alignment = parseAlignment(st)-->Line_17 $$ alignment = parseAlignment(st)[ CD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_17 $$ alignment = parseAlignment(st)[ FD ]
Line_5 $$ String st-->Line_17 $$ alignment = parseAlignment(st)[ FD ]
Line_15 $$ st = ""-->Line_17 $$ alignment = parseAlignment(st)[ FD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_18 $$ addAlignmentWrapper(new AlignmentWrapper(name, reference, alignmentSource, alignment))[ CD ]
Line_22 $$ File itemFile = new File(alignmentSource)-->Line_23 $$ if (itemFile.exists()) [ FD ]
Line_23 $$ if (itemFile.exists()) -->Line_23 $$ if (itemFile.exists()) [ CD ]
Line_22 $$ File itemFile = new File(alignmentSource)-->Line_23 $$ if (itemFile.exists()) [ FD ]
Line_23 $$ if (itemFile.exists()) -->Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) [ CD ]
Line_22 $$ File itemFile = new File(alignmentSource)-->Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) [ FD ]
Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) -->Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) [ CD ]
Line_22 $$ File itemFile = new File(alignmentSource)-->Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) [ FD ]
Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) -->Line_25 $$ File[] files = itemFile.listFiles()[ CD ]
Line_25 $$ File[] files = itemFile.listFiles()-->Line_25 $$ File[] files = itemFile.listFiles()[ CD ]
Line_22 $$ File itemFile = new File(alignmentSource)-->Line_25 $$ File[] files = itemFile.listFiles()[ FD ]
Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) -->Line_26 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) -->Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) [ CD ]
Line_26 $$ for (int i = 0; i < files.length; i++) -->Line_26 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_26 $$ for (int i = 0; i < files.length; i++) -->Line_26 $$ for (int i = 0; i < files.length; i++) [ CD ]
Line_26 $$ for (int i = 0; i < files.length; i++) -->Line_26 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_26 $$ for (int i = 0; i < files.length; i++) -->Line_27 $$ if (files[i].isFile() && !files[i].isHidden()) [ CD ]
Line_27 $$ if (files[i].isFile() && !files[i].isHidden()) -->Line_27 $$ if (files[i].isFile() && !files[i].isHidden()) [ CD ]
Line_27 $$ if (files[i].isFile() && !files[i].isHidden()) -->Line_28 $$ processAlignmentsFromAlignmentSource(name, reference, files[i].getPath())[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_28 $$ processAlignmentsFromAlignmentSource(name, reference, files[i].getPath())[ FD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_28 $$ processAlignmentsFromAlignmentSource(name, reference, files[i].getPath())[ FD ]
Line_27 $$ if (files[i].isFile() && !files[i].isHidden()) -->Line_29 $$ if (files[i].isDirectory() && !files[i].isHidden() && deepScan) [ CD ]
Line_29 $$ if (files[i].isDirectory() && !files[i].isHidden() && deepScan) -->Line_29 $$ if (files[i].isDirectory() && !files[i].isHidden() && deepScan) [ CD ]
Line_29 $$ if (files[i].isDirectory() && !files[i].isHidden() && deepScan) -->Line_30 $$ processAlignmentsFromAlignmentSource(name, reference, files[i].getPath())[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_30 $$ processAlignmentsFromAlignmentSource(name, reference, files[i].getPath())[ FD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_30 $$ processAlignmentsFromAlignmentSource(name, reference, files[i].getPath())[ FD ]
Line_24 $$ if (itemFile.isDirectory() && !itemFile.isHidden()) -->Line_33 $$ if (itemFile.isFile() && !itemFile.isHidden()) [ CD ]
Line_22 $$ File itemFile = new File(alignmentSource)-->Line_33 $$ if (itemFile.isFile() && !itemFile.isHidden()) [ FD ]
Line_33 $$ if (itemFile.isFile() && !itemFile.isHidden()) -->Line_33 $$ if (itemFile.isFile() && !itemFile.isHidden()) [ CD ]
Line_22 $$ File itemFile = new File(alignmentSource)-->Line_33 $$ if (itemFile.isFile() && !itemFile.isHidden()) [ FD ]
Line_17 $$ alignment = parseAlignment(st)-->Line_35 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_7 $$ Alignment alignment-->Line_35 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_10 $$ alignment = parseAlignment(alignmentSource)-->Line_35 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_35 $$ alignment = parseAlignment(alignmentSource)-->Line_35 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_35 $$ alignment = parseAlignment(alignmentSource)-->Line_35 $$ alignment = parseAlignment(alignmentSource)[ CD ]
Line_2 $$ private void processAlignmentsFromAlignmentSource(String name, Alignment reference, String alignmentSource) throws AlignmentParserException, IllegalArgumentException, KADMOSCMDException, IOException -->Line_35 $$ alignment = parseAlignment(alignmentSource)[ FD ]
Line_6 $$ BufferedReader reader-->Line_38 $$ reader = new BufferedReader(new FileReader(alignmentSource))[ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_38 $$ reader = new BufferedReader(new FileReader(alignmentSource))[ FD ]
Line_38 $$ reader = new BufferedReader(new FileReader(alignmentSource))-->Line_38 $$ reader = new BufferedReader(new FileReader(alignmentSource))[ FD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_39 $$ st = ""[ FD ]
Line_5 $$ String st-->Line_39 $$ st = ""[ FD ]
Line_15 $$ st = ""-->Line_39 $$ st = ""[ FD ]
Line_39 $$ st = ""-->Line_39 $$ st = ""[ FD ]
Line_40 $$ while (((st = reader.readLine()) != null)) -->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_5 $$ String st-->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_15 $$ st = ""-->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_39 $$ st = ""-->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_40 $$ while (((st = reader.readLine()) != null)) -->Line_40 $$ while (((st = reader.readLine()) != null)) [ CD ]
Line_6 $$ BufferedReader reader-->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_14 $$ reader = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_38 $$ reader = new BufferedReader(new FileReader(alignmentSource))-->Line_40 $$ while (((st = reader.readLine()) != null)) [ FD ]
Line_40 $$ while (((st = reader.readLine()) != null)) -->Line_41 $$ alignment = parseAlignment(st)[ CD ]
Line_41 $$ alignment = parseAlignment(st)-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_17 $$ alignment = parseAlignment(st)-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_7 $$ Alignment alignment-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_10 $$ alignment = parseAlignment(alignmentSource)-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_35 $$ alignment = parseAlignment(alignmentSource)-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_41 $$ alignment = parseAlignment(st)-->Line_41 $$ alignment = parseAlignment(st)[ CD ]
Line_40 $$ while (((st = reader.readLine()) != null)) -->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_5 $$ String st-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_15 $$ st = ""-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_39 $$ st = ""-->Line_41 $$ alignment = parseAlignment(st)[ FD ]
Line_40 $$ while (((st = reader.readLine()) != null)) -->Line_42 $$ addAlignmentWrapper(new AlignmentWrapper(name, reference, st, alignment))[ CD ]
Line_16 $$ while (((st = reader.readLine()) != null)) -->Line_17 $$ alignment = parseAlignment(st)[ FD ]
Line_26 $$ for (int i = 0; i < files.length; i++) -->Line_26 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_26 $$ for (int i = 0; i < files.length; i++) -->Line_26 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_26 $$ for (int i = 0; i < files.length; i++) -->Line_26 $$ for (int i = 0; i < files.length; i++) [ FD ]
Line_40 $$ while (((st = reader.readLine()) != null)) -->Line_41 $$ alignment = parseAlignment(st)[ FD ]
