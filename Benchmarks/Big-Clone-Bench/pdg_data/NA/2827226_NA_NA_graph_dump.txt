Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) [ CD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)[ CD ]
Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)-->Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)[ CD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)[ FD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)[ FD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_5 $$ if (resolved == null && piCatalogResolver != null) [ CD ]
Line_5 $$ if (resolved == null && piCatalogResolver != null) -->Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)[ CD ]
Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)-->Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)[ FD ]
Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)-->Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)[ FD ]
Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)-->Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)[ CD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)[ FD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)[ FD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_8 $$ if (resolved != null) [ CD ]
Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)-->Line_8 $$ if (resolved != null) [ FD ]
Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)-->Line_8 $$ if (resolved != null) [ FD ]
Line_10 $$ InputSource iSource = new InputSource(resolved)-->Line_11 $$ iSource.setPublicId(publicId)[ FD ]
Line_2 $$ public InputSource resolveEntity(String publicId, String systemId) -->Line_11 $$ iSource.setPublicId(publicId)[ FD ]
Line_13 $$ InputStream iStream = url.openStream()-->Line_13 $$ InputStream iStream = url.openStream()[ CD ]
Line_12 $$ URL url = new URL(resolved)-->Line_13 $$ InputStream iStream = url.openStream()[ FD ]
Line_10 $$ InputSource iSource = new InputSource(resolved)-->Line_14 $$ iSource.setByteStream(iStream)[ FD ]
Line_13 $$ InputStream iStream = url.openStream()-->Line_14 $$ iSource.setByteStream(iStream)[ FD ]
Line_4 $$ String resolved = catalogResolver.getResolvedEntity(publicId, systemId)-->Line_17 $$ catalogManager.debug.message(1, "Failed to create InputSource", resolved)[ FD ]
Line_6 $$ resolved = piCatalogResolver.getResolvedEntity(publicId, systemId)-->Line_17 $$ catalogManager.debug.message(1, "Failed to create InputSource", resolved)[ FD ]
Line_8 $$ if (resolved != null) -->Line_21 $$ return null[ CD ]
