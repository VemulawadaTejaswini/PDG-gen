Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected Integer doInBackground() throws Exception [ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_3 $$ int numOfRows = 0[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_6 $$ LinkedHashSet<AnsweredQuestion> answeredQuestionSet = new LinkedHashSet<AnsweredQuestion>()[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_7 $$ LinkedHashSet<Integer> studentSet = new LinkedHashSet<Integer>()[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_8 $$ final String delimiter = ";"[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_9 $$ final String typeToProcess = "F"[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_10 $$ String line[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_11 $$ String[] chunks = new String[9][ CD ]
Line_13 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_14 $$ in.readLine()[ FD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_15 $$ while ((line = in.readLine()) != null) [ FD ]
Line_10 $$ String line-->Line_15 $$ while ((line = in.readLine()) != null) [ FD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_15 $$ while ((line = in.readLine()) != null) [ CD ]
Line_13 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_15 $$ while ((line = in.readLine()) != null) [ FD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_16 $$ chunks = line.split(delimiter)[ CD ]
Line_16 $$ chunks = line.split(delimiter)-->Line_16 $$ chunks = line.split(delimiter)[ FD ]
Line_11 $$ String[] chunks = new String[9]-->Line_16 $$ chunks = line.split(delimiter)[ FD ]
Line_16 $$ chunks = line.split(delimiter)-->Line_16 $$ chunks = line.split(delimiter)[ CD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_16 $$ chunks = line.split(delimiter)[ FD ]
Line_10 $$ String line-->Line_16 $$ chunks = line.split(delimiter)[ FD ]
Line_8 $$ final String delimiter = ";"-->Line_16 $$ chunks = line.split(delimiter)[ FD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_17 $$ numOfRows++[ CD ]
Line_3 $$ int numOfRows = 0-->Line_17 $$ numOfRows++[ FD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_18 $$ if (chunks[2].equals(typeToProcess)) [ CD ]
Line_9 $$ final String typeToProcess = "F"-->Line_18 $$ if (chunks[2].equals(typeToProcess)) [ FD ]
Line_18 $$ if (chunks[2].equals(typeToProcess)) -->Line_18 $$ if (chunks[2].equals(typeToProcess)) [ CD ]
Line_9 $$ final String typeToProcess = "F"-->Line_18 $$ if (chunks[2].equals(typeToProcess)) [ FD ]
Line_18 $$ if (chunks[2].equals(typeToProcess)) -->Line_19 $$ answeredQuestionSet.add(new AnsweredQuestion(chunks[4], chunks[5]))[ CD ]
Line_6 $$ LinkedHashSet<AnsweredQuestion> answeredQuestionSet = new LinkedHashSet<AnsweredQuestion>()-->Line_19 $$ answeredQuestionSet.add(new AnsweredQuestion(chunks[4], chunks[5]))[ FD ]
Line_18 $$ if (chunks[2].equals(typeToProcess)) -->Line_20 $$ studentSet.add(new Integer(chunks[0]))[ CD ]
Line_7 $$ LinkedHashSet<Integer> studentSet = new LinkedHashSet<Integer>()-->Line_20 $$ studentSet.add(new Integer(chunks[0]))[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_23 $$ in.close()[ FD ]
Line_25 $$ Integer I-->Line_27 $$ I = new Integer(i++)[ FD ]
Line_27 $$ I = new Integer(i++)-->Line_27 $$ I = new Integer(i++)[ FD ]
Line_24 $$ int i = 0-->Line_27 $$ I = new Integer(i++)[ FD ]
Line_26 $$ for (AnsweredQuestion pair : answeredQuestionSet) -->Line_28 $$ combinationMap.put(pair, I)[ FD ]
Line_25 $$ Integer I-->Line_28 $$ combinationMap.put(pair, I)[ FD ]
Line_27 $$ I = new Integer(i++)-->Line_28 $$ combinationMap.put(pair, I)[ FD ]
Line_25 $$ Integer I-->Line_29 $$ combinationMapReverse.put(I, pair)[ FD ]
Line_27 $$ I = new Integer(i++)-->Line_29 $$ combinationMapReverse.put(I, pair)[ FD ]
Line_26 $$ for (AnsweredQuestion pair : answeredQuestionSet) -->Line_29 $$ combinationMapReverse.put(I, pair)[ FD ]
Line_6 $$ LinkedHashSet<AnsweredQuestion> answeredQuestionSet = new LinkedHashSet<AnsweredQuestion>()-->Line_31 $$ matrix = new SparseObjectMatrix2D(answeredQuestionSet.size(), studentSet.size())[ FD ]
Line_7 $$ LinkedHashSet<Integer> studentSet = new LinkedHashSet<Integer>()-->Line_31 $$ matrix = new SparseObjectMatrix2D(answeredQuestionSet.size(), studentSet.size())[ FD ]
Line_32 $$ int lastStudentNumber = -1-->Line_32 $$ int lastStudentNumber = -1[ CD ]
Line_13 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_34 $$ in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))[ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_34 $$ in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))[ FD ]
Line_13 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_35 $$ in.readLine()[ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_35 $$ in.readLine()[ FD ]
Line_36 $$ while ((line = in.readLine()) != null) -->Line_36 $$ while ((line = in.readLine()) != null) [ FD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_36 $$ while ((line = in.readLine()) != null) [ FD ]
Line_10 $$ String line-->Line_36 $$ while ((line = in.readLine()) != null) [ FD ]
Line_36 $$ while ((line = in.readLine()) != null) -->Line_36 $$ while ((line = in.readLine()) != null) [ CD ]
Line_13 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_36 $$ while ((line = in.readLine()) != null) [ FD ]
Line_34 $$ in = new BufferedReader(new InputStreamReader(url.openStream(), "ISO-8859-2"))-->Line_36 $$ while ((line = in.readLine()) != null) [ FD ]
Line_36 $$ while ((line = in.readLine()) != null) -->Line_37 $$ chunks = line.split(delimiter)[ CD ]
Line_37 $$ chunks = line.split(delimiter)-->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_16 $$ chunks = line.split(delimiter)-->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_11 $$ String[] chunks = new String[9]-->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_37 $$ chunks = line.split(delimiter)-->Line_37 $$ chunks = line.split(delimiter)[ CD ]
Line_36 $$ while ((line = in.readLine()) != null) -->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_10 $$ String line-->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_8 $$ final String delimiter = ";"-->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_36 $$ while ((line = in.readLine()) != null) -->Line_38 $$ pair = null[ CD ]
Line_38 $$ pair = null-->Line_38 $$ pair = null[ FD ]
Line_26 $$ for (AnsweredQuestion pair : answeredQuestionSet) -->Line_38 $$ pair = null[ FD ]
Line_36 $$ while ((line = in.readLine()) != null) -->Line_39 $$ if (chunks[2].equals(typeToProcess)) [ CD ]
Line_9 $$ final String typeToProcess = "F"-->Line_39 $$ if (chunks[2].equals(typeToProcess)) [ FD ]
Line_39 $$ if (chunks[2].equals(typeToProcess)) -->Line_39 $$ if (chunks[2].equals(typeToProcess)) [ CD ]
Line_9 $$ final String typeToProcess = "F"-->Line_39 $$ if (chunks[2].equals(typeToProcess)) [ FD ]
Line_39 $$ if (chunks[2].equals(typeToProcess)) -->Line_40 $$ if (Integer.parseInt(chunks[0]) != lastStudentNumber) [ CD ]
Line_32 $$ int lastStudentNumber = -1-->Line_40 $$ if (Integer.parseInt(chunks[0]) != lastStudentNumber) [ FD ]
Line_40 $$ if (Integer.parseInt(chunks[0]) != lastStudentNumber) -->Line_41 $$ lastStudentNumber++[ CD ]
Line_32 $$ int lastStudentNumber = -1-->Line_41 $$ lastStudentNumber++[ FD ]
Line_39 $$ if (chunks[2].equals(typeToProcess)) -->Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])[ CD ]
Line_38 $$ pair = null-->Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])[ FD ]
Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])-->Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])[ FD ]
Line_26 $$ for (AnsweredQuestion pair : answeredQuestionSet) -->Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])[ FD ]
Line_39 $$ if (chunks[2].equals(typeToProcess)) -->Line_44 $$ if (combinationMap.containsKey(pair)) [ CD ]
Line_38 $$ pair = null-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_26 $$ for (AnsweredQuestion pair : answeredQuestionSet) -->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_44 $$ if (combinationMap.containsKey(pair)) -->Line_44 $$ if (combinationMap.containsKey(pair)) [ CD ]
Line_38 $$ pair = null-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_26 $$ for (AnsweredQuestion pair : answeredQuestionSet) -->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_44 $$ if (combinationMap.containsKey(pair)) -->Line_45 $$ matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE)[ CD ]
Line_32 $$ int lastStudentNumber = -1-->Line_45 $$ matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE)[ FD ]
Line_38 $$ pair = null-->Line_45 $$ matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE)[ FD ]
Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])-->Line_45 $$ matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE)[ FD ]
Line_26 $$ for (AnsweredQuestion pair : answeredQuestionSet) -->Line_45 $$ matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE)[ FD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_55 $$ ObjectMatrix1D row = null[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_2 $$ protected Integer doInBackground() throws Exception [ CD ]
Line_24 $$ int i = 0-->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ CD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ CD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ FD ]
Line_24 $$ int i = 0-->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_57 $$ row = matrix.viewRow(i)[ CD ]
Line_57 $$ row = matrix.viewRow(i)-->Line_57 $$ row = matrix.viewRow(i)[ FD ]
Line_55 $$ ObjectMatrix1D row = null-->Line_57 $$ row = matrix.viewRow(i)[ FD ]
Line_57 $$ row = matrix.viewRow(i)-->Line_57 $$ row = matrix.viewRow(i)[ CD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_57 $$ row = matrix.viewRow(i)[ FD ]
Line_24 $$ int i = 0-->Line_57 $$ row = matrix.viewRow(i)[ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_58 $$ int sum = 0[ CD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ CD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ CD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ CD ]
Line_57 $$ row = matrix.viewRow(i)-->Line_59 $$ for (int k = 0; k < row.size(); k++) [ FD ]
Line_55 $$ ObjectMatrix1D row = null-->Line_59 $$ for (int k = 0; k < row.size(); k++) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ CD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ CD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ CD ]
Line_57 $$ row = matrix.viewRow(i)-->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
Line_55 $$ ObjectMatrix1D row = null-->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
Line_57 $$ row = matrix.viewRow(i)-->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
Line_55 $$ ObjectMatrix1D row = null-->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) -->Line_61 $$ sum++[ CD ]
Line_58 $$ int sum = 0-->Line_61 $$ sum++[ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_64 $$ supportVector[i] = sum[ CD ]
Line_58 $$ int sum = 0-->Line_64 $$ supportVector[i] = sum[ FD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_66 $$ applet.combinationMap = this.combinationMap[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_67 $$ applet.combinationMapReverse = this.combinationMapReverse[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_68 $$ applet.matrix = this.matrix[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_70 $$ System.out.println("data loaded.")[ CD ]
Line_2 $$ protected Integer doInBackground() throws Exception -->Line_71 $$ return null[ CD ]
Line_15 $$ while ((line = in.readLine()) != null) -->Line_16 $$ chunks = line.split(delimiter)[ FD ]
Line_36 $$ while ((line = in.readLine()) != null) -->Line_37 $$ chunks = line.split(delimiter)[ FD ]
Line_38 $$ pair = null-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_38 $$ pair = null-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])-->Line_44 $$ if (combinationMap.containsKey(pair)) [ FD ]
Line_38 $$ pair = null-->Line_45 $$ matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE)[ FD ]
Line_43 $$ pair = new AnsweredQuestion(chunks[4], chunks[5])-->Line_45 $$ matrix.setQuick(combinationMap.get(pair), lastStudentNumber, Boolean.TRUE)[ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) [ FD ]
Line_56 $$ for (int i = 0; i < combinationMap.size(); i++) -->Line_57 $$ row = matrix.viewRow(i)[ FD ]
Line_58 $$ int sum = 0-->Line_64 $$ supportVector[i] = sum[ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_59 $$ for (int k = 0; k < row.size(); k++) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
Line_59 $$ for (int k = 0; k < row.size(); k++) -->Line_60 $$ if (row.getQuick(k) != null && row.getQuick(k).equals(Boolean.TRUE)) [ FD ]
