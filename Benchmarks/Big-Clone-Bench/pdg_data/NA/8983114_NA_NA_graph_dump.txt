Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testWrite() [ CD ]
Line_2 $$ public void testWrite() -->Line_3 $$ System.out.println("write")[ CD ]
Line_2 $$ public void testWrite() -->Line_4 $$ final File[] files = [ CD ]
Line_2 $$ public void testWrite() -->Line_5 $$ System.out.println("Creating hash...")[ CD ]
Line_2 $$ public void testWrite() -->Line_6 $$ String initHash = MD5File.MD5Directory(files[0])[ CD ]
Line_6 $$ String initHash = MD5File.MD5Directory(files[0])-->Line_6 $$ String initHash = MD5File.MD5Directory(files[0])[ CD ]
Line_2 $$ public void testWrite() -->Line_7 $$ System.out.println("Hash: " + initHash)[ CD ]
Line_2 $$ public void testWrite() -->Line_8 $$ Share readShare = ShareUtility.createShare(files, "TestShare")[ CD ]
Line_8 $$ Share readShare = ShareUtility.createShare(files, "TestShare")-->Line_8 $$ Share readShare = ShareUtility.createShare(files, "TestShare")[ CD ]
Line_4 $$ final File[] files = -->Line_8 $$ Share readShare = ShareUtility.createShare(files, "TestShare")[ FD ]
Line_2 $$ public void testWrite() -->Line_9 $$ System.out.println("Creating shares...")[ CD ]
Line_2 $$ public void testWrite() -->Line_10 $$ final ShareFolder[] readers = ShareUtility.cropShareToParts(readShare, PARTS)[ CD ]
Line_10 $$ final ShareFolder[] readers = ShareUtility.cropShareToParts(readShare, PARTS)-->Line_10 $$ final ShareFolder[] readers = ShareUtility.cropShareToParts(readShare, PARTS)[ CD ]
Line_8 $$ Share readShare = ShareUtility.createShare(files, "TestShare")-->Line_10 $$ final ShareFolder[] readers = ShareUtility.cropShareToParts(readShare, PARTS)[ FD ]
Line_2 $$ public void testWrite() -->Line_11 $$ System.out.println("Reading and writing shares...")[ CD ]
Line_2 $$ public void testWrite() -->Line_13 $$ for (int i = 0; i < PARTS; i++) [ CD ]
Line_2 $$ public void testWrite() -->Line_2 $$ public void testWrite() [ CD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_13 $$ for (int i = 0; i < PARTS; i++) [ CD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_13 $$ for (int i = 0; i < PARTS; i++) [ CD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_13 $$ for (int i = 0; i < PARTS; i++) [ FD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_14 $$ final int j = i[ CD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_15 $$ new Thread() [ CD ]
Line_15 $$ new Thread() -->Line_17 $$ ShareFolder part = (ShareFolder) ObjectClone.clone(readers[j])[ CD ]
Line_15 $$ new Thread() -->Line_18 $$ ShareFileReader reader = new ShareFileReader(readers[j], files[0])[ CD ]
Line_15 $$ new Thread() -->Line_19 $$ ShareFileWriter writer = new ShareFileWriter(part, new File("Downloads/" + readers[j].getName()))[ CD ]
Line_15 $$ new Thread() -->Line_20 $$ long tot = 0[ CD ]
Line_15 $$ new Thread() -->Line_21 $$ byte[] b = new byte[(int) (Math.random() * 10000)][ CD ]
Line_15 $$ new Thread() -->Line_22 $$ while (tot < readers[j].getSize()) [ CD ]
Line_15 $$ new Thread() -->Line_15 $$ new Thread() [ CD ]
Line_20 $$ long tot = 0-->Line_22 $$ while (tot < readers[j].getSize()) [ FD ]
Line_22 $$ while (tot < readers[j].getSize()) -->Line_23 $$ reader.read(b)[ CD ]
Line_18 $$ ShareFileReader reader = new ShareFileReader(readers[j], files[0])-->Line_23 $$ reader.read(b)[ FD ]
Line_21 $$ byte[] b = new byte[(int) (Math.random() * 10000)]-->Line_23 $$ reader.read(b)[ FD ]
Line_22 $$ while (tot < readers[j].getSize()) -->Line_24 $$ byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length][ CD ]
Line_22 $$ while (tot < readers[j].getSize()) -->Line_25 $$ System.arraycopy(b, 0, bwrite, 0, b.length)[ CD ]
Line_21 $$ byte[] b = new byte[(int) (Math.random() * 10000)]-->Line_25 $$ System.arraycopy(b, 0, bwrite, 0, b.length)[ FD ]
Line_24 $$ byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length]-->Line_25 $$ System.arraycopy(b, 0, bwrite, 0, b.length)[ FD ]
Line_22 $$ while (tot < readers[j].getSize()) -->Line_26 $$ writer.write(bwrite, b.length)[ CD ]
Line_19 $$ ShareFileWriter writer = new ShareFileWriter(part, new File("Downloads/" + readers[j].getName()))-->Line_26 $$ writer.write(bwrite, b.length)[ FD ]
Line_24 $$ byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length]-->Line_26 $$ writer.write(bwrite, b.length)[ FD ]
Line_22 $$ while (tot < readers[j].getSize()) -->Line_27 $$ tot += b.length[ CD ]
Line_27 $$ tot += b.length-->Line_27 $$ tot += b.length[ FD ]
Line_20 $$ long tot = 0-->Line_27 $$ tot += b.length[ FD ]
Line_15 $$ new Thread() -->Line_30 $$ System.out.println((int) (done * 100.0 / PARTS) + "% Complete")[ CD ]
Line_2 $$ public void testWrite() -->Line_34 $$ while (done < PARTS) [ CD ]
Line_2 $$ public void testWrite() -->Line_2 $$ public void testWrite() [ CD ]
Line_34 $$ while (done < PARTS) -->Line_35 $$ Thread.yield()[ CD ]
Line_8 $$ Share readShare = ShareUtility.createShare(files, "TestShare")-->Line_37 $$ File resultFile = new File("Downloads/" + readShare.getName())[ FD ]
Line_2 $$ public void testWrite() -->Line_38 $$ System.out.println("Creating hash of written share...")[ CD ]
Line_2 $$ public void testWrite() -->Line_39 $$ String resultHash = MD5File.MD5Directory(resultFile)[ CD ]
Line_2 $$ public void testWrite() -->Line_40 $$ System.out.println("Init hash:   " + initHash)[ CD ]
Line_2 $$ public void testWrite() -->Line_41 $$ System.out.println("Result hash: " + resultHash)[ CD ]
Line_2 $$ public void testWrite() -->Line_42 $$ assertEquals(initHash, resultHash)[ CD ]
Line_6 $$ String initHash = MD5File.MD5Directory(files[0])-->Line_42 $$ assertEquals(initHash, resultHash)[ FD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_13 $$ for (int i = 0; i < PARTS; i++) [ FD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_13 $$ for (int i = 0; i < PARTS; i++) [ FD ]
Line_13 $$ for (int i = 0; i < PARTS; i++) -->Line_13 $$ for (int i = 0; i < PARTS; i++) [ FD ]
Line_27 $$ tot += b.length-->Line_22 $$ while (tot < readers[j].getSize()) [ FD ]
Line_27 $$ tot += b.length-->Line_22 $$ while (tot < readers[j].getSize()) [ FD ]
Line_24 $$ byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length]-->Line_25 $$ System.arraycopy(b, 0, bwrite, 0, b.length)[ FD ]
Line_24 $$ byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length]-->Line_26 $$ writer.write(bwrite, b.length)[ FD ]
