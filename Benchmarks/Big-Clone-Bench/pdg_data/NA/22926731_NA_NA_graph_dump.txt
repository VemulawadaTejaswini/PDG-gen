Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testDelegateUsage() throws IOException [ CD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)[ CD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_4 $$ ElementParser elementParser = (ElementParser) elementParserControl.getMock()[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_4 $$ ElementParser elementParser = (ElementParser) elementParserControl.getMock()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_5 $$ elementParserControl.replay()[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_5 $$ elementParserControl.replay()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_6 $$ URL url = getClass().getResource("/net/sf/ngrease/core/ast/simple-element.ngr")[ CD ]
Line_6 $$ URL url = getClass().getResource("/net/sf/ngrease/core/ast/simple-element.ngr")-->Line_6 $$ URL url = getClass().getResource("/net/sf/ngrease/core/ast/simple-element.ngr")[ CD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_7 $$ ElementSource source = new ElementSourceUrlImpl(url, elementParser)[ CD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_8 $$ elementParserControl.verify()[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_8 $$ elementParserControl.verify()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_9 $$ elementParserControl.reset()[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_9 $$ elementParserControl.reset()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_10 $$ Element element = new ElementDefaultImpl("")[ CD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_11 $$ elementParser.parse(url.openStream())[ CD ]
Line_4 $$ ElementParser elementParser = (ElementParser) elementParserControl.getMock()-->Line_11 $$ elementParser.parse(url.openStream())[ FD ]
Line_6 $$ URL url = getClass().getResource("/net/sf/ngrease/core/ast/simple-element.ngr")-->Line_11 $$ elementParser.parse(url.openStream())[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_12 $$ elementParserControl.setMatcher(new ArgumentsMatcher() [ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_12 $$ elementParserControl.setMatcher(new ArgumentsMatcher() [ FD ]
Line_12 $$ elementParserControl.setMatcher(new ArgumentsMatcher() -->Line_14 $$ if (!arg0[0].getClass().equals(arg1[0].getClass())) [ CD ]
Line_14 $$ if (!arg0[0].getClass().equals(arg1[0].getClass())) -->Line_14 $$ if (!arg0[0].getClass().equals(arg1[0].getClass())) [ CD ]
Line_14 $$ if (!arg0[0].getClass().equals(arg1[0].getClass())) -->Line_14 $$ if (!arg0[0].getClass().equals(arg1[0].getClass())) [ CD ]
Line_14 $$ if (!arg0[0].getClass().equals(arg1[0].getClass())) -->Line_15 $$ return false[ CD ]
Line_12 $$ elementParserControl.setMatcher(new ArgumentsMatcher() -->Line_17 $$ return true[ CD ]
Line_12 $$ elementParserControl.setMatcher(new ArgumentsMatcher() -->Line_20 $$ return Arrays.asList(arg0).toString()[ CD ]
Line_20 $$ return Arrays.asList(arg0).toString()-->Line_20 $$ return Arrays.asList(arg0).toString()[ CD ]
Line_12 $$ elementParserControl.setMatcher(new ArgumentsMatcher() -->Line_20 $$ return Arrays.asList(arg0).toString()[ FD ]
Line_12 $$ elementParserControl.setMatcher(new ArgumentsMatcher() -->Line_20 $$ return Arrays.asList(arg0).toString()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_23 $$ elementParserControl.setReturnValue(element, 1)[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_23 $$ elementParserControl.setReturnValue(element, 1)[ FD ]
Line_10 $$ Element element = new ElementDefaultImpl("")-->Line_23 $$ elementParserControl.setReturnValue(element, 1)[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_24 $$ elementParserControl.replay()[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_24 $$ elementParserControl.replay()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_25 $$ Element elementAgain = source.getElement()[ CD ]
Line_7 $$ ElementSource source = new ElementSourceUrlImpl(url, elementParser)-->Line_25 $$ Element elementAgain = source.getElement()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_26 $$ elementParserControl.verify()[ CD ]
Line_3 $$ MockControl elementParserControl = MockControl.createControl(ElementParser.class)-->Line_26 $$ elementParserControl.verify()[ FD ]
Line_2 $$ public void testDelegateUsage() throws IOException -->Line_27 $$ assertTrue(element == elementAgain)[ CD ]
