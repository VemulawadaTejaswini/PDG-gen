Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static byte[] getJarEntry(String jarName, String entry, int port) [ CD ]
Line_2 $$ public static byte[] getJarEntry(String jarName, String entry, int port) -->Line_3 $$ byte[] b = null[ CD ]
Line_5 $$ String codebase = System.getProperty("java.rmi.server.codebase", InetAddress.getLocalHost().getHostName())-->Line_5 $$ String codebase = System.getProperty("java.rmi.server.codebase", InetAddress.getLocalHost().getHostName())[ CD ]
Line_5 $$ String codebase = System.getProperty("java.rmi.server.codebase", InetAddress.getLocalHost().getHostName())-->Line_7 $$ int x = codebase.indexOf(protocol) + protocol.length()[ FD ]
Line_6 $$ String protocol = "http://"-->Line_7 $$ int x = codebase.indexOf(protocol) + protocol.length()[ FD ]
Line_6 $$ String protocol = "http://"-->Line_7 $$ int x = codebase.indexOf(protocol) + protocol.length()[ FD ]
Line_8 $$ String s2 = codebase.substring(x)-->Line_8 $$ String s2 = codebase.substring(x)[ CD ]
Line_5 $$ String codebase = System.getProperty("java.rmi.server.codebase", InetAddress.getLocalHost().getHostName())-->Line_8 $$ String s2 = codebase.substring(x)[ FD ]
Line_7 $$ int x = codebase.indexOf(protocol) + protocol.length()-->Line_8 $$ String s2 = codebase.substring(x)[ FD ]
Line_9 $$ int x2 = s2.indexOf('/')-->Line_9 $$ int x2 = s2.indexOf('/')[ CD ]
Line_8 $$ String s2 = codebase.substring(x)-->Line_9 $$ int x2 = s2.indexOf('/')[ FD ]
Line_10 $$ String downloadHost = s2.substring(0, x2)-->Line_10 $$ String downloadHost = s2.substring(0, x2)[ CD ]
Line_8 $$ String s2 = codebase.substring(x)-->Line_10 $$ String downloadHost = s2.substring(0, x2)[ FD ]
Line_9 $$ int x2 = s2.indexOf('/')-->Line_10 $$ String downloadHost = s2.substring(0, x2)[ FD ]
Line_10 $$ String downloadHost = s2.substring(0, x2)-->Line_11 $$ if (downloadHost.indexOf(':') == -1) [ FD ]
Line_11 $$ if (downloadHost.indexOf(':') == -1) -->Line_12 $$ downloadHost += ":" + port[ CD ]
Line_10 $$ String downloadHost = s2.substring(0, x2)-->Line_12 $$ downloadHost += ":" + port[ FD ]
Line_12 $$ downloadHost += ":" + port-->Line_12 $$ downloadHost += ":" + port[ FD ]
Line_2 $$ public static byte[] getJarEntry(String jarName, String entry, int port) -->Line_12 $$ downloadHost += ":" + port[ FD ]
Line_14 $$ URL url = new URL("jar:http://" + downloadHost + "/" + jarName + "!/" + entry)-->Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection()[ FD ]
Line_16 $$ JarEntry je = jurl.getJarEntry()-->Line_16 $$ JarEntry je = jurl.getJarEntry()[ CD ]
Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection()-->Line_16 $$ JarEntry je = jurl.getJarEntry()[ FD ]
Line_17 $$ InputStream is = jurl.getInputStream()-->Line_17 $$ InputStream is = jurl.getInputStream()[ CD ]
Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection()-->Line_17 $$ InputStream is = jurl.getInputStream()[ FD ]
Line_16 $$ JarEntry je = jurl.getJarEntry()-->Line_19 $$ int size = (int) je.getSize()[ FD ]
Line_3 $$ byte[] b = null-->Line_20 $$ b = new byte[size][ FD ]
Line_20 $$ b = new byte[size]-->Line_20 $$ b = new byte[size][ FD ]
Line_23 $$ while ((size - rb) > 0) -->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ CD ]
Line_24 $$ chunk = bis.read(b, rb, size - rb)-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ FD ]
Line_22 $$ int chunk = 0-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ FD ]
Line_24 $$ chunk = bis.read(b, rb, size - rb)-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ CD ]
Line_18 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ FD ]
Line_3 $$ byte[] b = null-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ FD ]
Line_20 $$ b = new byte[size]-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ FD ]
Line_21 $$ int rb = 0-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ FD ]
Line_23 $$ while ((size - rb) > 0) -->Line_25 $$ if (chunk == -1) [ CD ]
Line_24 $$ chunk = bis.read(b, rb, size - rb)-->Line_25 $$ if (chunk == -1) [ FD ]
Line_22 $$ int chunk = 0-->Line_25 $$ if (chunk == -1) [ FD ]
Line_23 $$ while ((size - rb) > 0) -->Line_28 $$ rb += chunk[ CD ]
Line_28 $$ rb += chunk-->Line_28 $$ rb += chunk[ FD ]
Line_21 $$ int rb = 0-->Line_28 $$ rb += chunk[ FD ]
Line_24 $$ chunk = bis.read(b, rb, size - rb)-->Line_28 $$ rb += chunk[ FD ]
Line_22 $$ int chunk = 0-->Line_28 $$ rb += chunk[ FD ]
Line_18 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_30 $$ bis.close()[ FD ]
Line_17 $$ InputStream is = jurl.getInputStream()-->Line_31 $$ is.close()[ FD ]
Line_18 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_32 $$ bis = null[ FD ]
Line_32 $$ bis = null-->Line_32 $$ bis = null[ FD ]
Line_17 $$ InputStream is = jurl.getInputStream()-->Line_33 $$ is = null[ FD ]
Line_33 $$ is = null-->Line_33 $$ is = null[ FD ]
Line_14 $$ URL url = new URL("jar:http://" + downloadHost + "/" + jarName + "!/" + entry)-->Line_34 $$ url = null[ FD ]
Line_34 $$ url = null-->Line_34 $$ url = null[ FD ]
Line_15 $$ JarURLConnection jurl = (JarURLConnection) url.openConnection()-->Line_35 $$ jurl = null[ FD ]
Line_35 $$ jurl = null-->Line_35 $$ jurl = null[ FD ]
Line_2 $$ public static byte[] getJarEntry(String jarName, String entry, int port) -->Line_43 $$ return b[ CD ]
Line_28 $$ rb += chunk-->Line_24 $$ chunk = bis.read(b, rb, size - rb)[ FD ]
Line_24 $$ chunk = bis.read(b, rb, size - rb)-->Line_25 $$ if (chunk == -1) [ FD ]
Line_24 $$ chunk = bis.read(b, rb, size - rb)-->Line_28 $$ rb += chunk[ FD ]
