Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static boolean genCustomerLocationsFileAndCustomerIndexFile(String completePath, String masterFile, String CustLocationsFileName, String CustIndexFileName) [ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inFile).getChannel()-->Line_6 $$ FileChannel inC = new FileInputStream(inFile).getChannel()[ CD ]
Line_8 $$ FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel()-->Line_8 $$ FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel()[ CD ]
Line_10 $$ FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel()-->Line_10 $$ FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel()[ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inFile).getChannel()-->Line_11 $$ int fileSize = (int) inC.size()[ FD ]
Line_12 $$ int totalNoDataRows = fileSize / 7-->Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) [ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) [ CD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) [ CD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) [ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)[ CD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)[ CD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_15 $$ inC.read(mappedBuffer)[ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inFile).getChannel()-->Line_15 $$ inC.read(mappedBuffer)[ FD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_15 $$ inC.read(mappedBuffer)[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_16 $$ mappedBuffer.position(0)[ CD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_16 $$ mappedBuffer.position(0)[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_17 $$ short movieName = mappedBuffer.getShort()[ CD ]
Line_17 $$ short movieName = mappedBuffer.getShort()-->Line_17 $$ short movieName = mappedBuffer.getShort()[ CD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_17 $$ short movieName = mappedBuffer.getShort()[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_18 $$ int customer = mappedBuffer.getInt()[ CD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_18 $$ int customer = mappedBuffer.getInt()[ CD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_18 $$ int customer = mappedBuffer.getInt()[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_19 $$ byte rating = mappedBuffer.get()[ CD ]
Line_19 $$ byte rating = mappedBuffer.get()-->Line_19 $$ byte rating = mappedBuffer.get()[ CD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_19 $$ byte rating = mappedBuffer.get()[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_20 $$ mappedBuffer.clear()[ CD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_20 $$ mappedBuffer.clear()[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ CD ]
Line_4 $$ TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1)-->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ FD ]
Line_21 $$ if (CustInfoHash.containsKey(customer)) -->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ CD ]
Line_4 $$ TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1)-->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ FD ]
Line_21 $$ if (CustInfoHash.containsKey(customer)) -->Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ CD ]
Line_4 $$ TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1)-->Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ FD ]
Line_21 $$ if (CustInfoHash.containsKey(customer)) -->Line_23 $$ locations.add(i)[ CD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_23 $$ locations.add(i)[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_23 $$ locations.add(i)[ FD ]
Line_21 $$ if (CustInfoHash.containsKey(customer)) -->Line_24 $$ CustInfoHash.put(customer, locations)[ CD ]
Line_4 $$ TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1)-->Line_24 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_24 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_24 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_21 $$ if (CustInfoHash.containsKey(customer)) -->Line_27 $$ locations.add(i)[ CD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_27 $$ locations.add(i)[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_27 $$ locations.add(i)[ FD ]
Line_21 $$ if (CustInfoHash.containsKey(customer)) -->Line_28 $$ CustInfoHash.put(customer, locations)[ CD ]
Line_4 $$ TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1)-->Line_28 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_28 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_28 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_31 $$ int[] customers = CustInfoHash.keys()-->Line_31 $$ int[] customers = CustInfoHash.keys()[ CD ]
Line_4 $$ TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1)-->Line_31 $$ int[] customers = CustInfoHash.keys()[ FD ]
Line_31 $$ int[] customers = CustInfoHash.keys()-->Line_32 $$ Arrays.sort(customers)[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ CD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ CD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_35 $$ int customer = customers[i][ CD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ CD ]
Line_4 $$ TIntObjectHashMap CustInfoHash = new TIntObjectHashMap(480189, 1)-->Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ FD ]
Line_35 $$ int customer = customers[i]-->Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_37 $$ int noRatingsForCust = locations.size()[ CD ]
Line_37 $$ int noRatingsForCust = locations.size()-->Line_37 $$ int noRatingsForCust = locations.size()[ CD ]
Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_37 $$ int noRatingsForCust = locations.size()[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_37 $$ int noRatingsForCust = locations.size()[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)[ CD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)[ CD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_39 $$ outBuf1.putInt(customer)[ CD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_39 $$ outBuf1.putInt(customer)[ FD ]
Line_35 $$ int customer = customers[i]-->Line_39 $$ outBuf1.putInt(customer)[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_39 $$ outBuf1.putInt(customer)[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_40 $$ outBuf1.putInt(count)[ CD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_40 $$ outBuf1.putInt(count)[ FD ]
Line_33 $$ int count = 1-->Line_40 $$ outBuf1.putInt(count)[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_41 $$ outBuf1.putInt(count + noRatingsForCust - 1)[ CD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_41 $$ outBuf1.putInt(count + noRatingsForCust - 1)[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_42 $$ outBuf1.flip()[ CD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_42 $$ outBuf1.flip()[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_43 $$ outC1.write(outBuf1)[ CD ]
Line_8 $$ FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel()-->Line_43 $$ outC1.write(outBuf1)[ FD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_43 $$ outC1.write(outBuf1)[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_44 $$ count += noRatingsForCust[ CD ]
Line_44 $$ count += noRatingsForCust-->Line_44 $$ count += noRatingsForCust[ FD ]
Line_33 $$ int count = 1-->Line_44 $$ count += noRatingsForCust[ FD ]
Line_37 $$ int noRatingsForCust = locations.size()-->Line_44 $$ count += noRatingsForCust[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ CD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ CD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ CD ]
Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ CD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ CD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)[ CD ]
Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)-->Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)[ CD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_47 $$ outBuf2.putInt(locations.get(j))[ CD ]
Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)-->Line_47 $$ outBuf2.putInt(locations.get(j))[ FD ]
Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_47 $$ outBuf2.putInt(locations.get(j))[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_47 $$ outBuf2.putInt(locations.get(j))[ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_47 $$ outBuf2.putInt(locations.get(j))[ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_48 $$ outBuf2.flip()[ CD ]
Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)-->Line_48 $$ outBuf2.flip()[ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_49 $$ outC2.write(outBuf2)[ CD ]
Line_10 $$ FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel()-->Line_49 $$ outC2.write(outBuf2)[ FD ]
Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)-->Line_49 $$ outC2.write(outBuf2)[ FD ]
Line_6 $$ FileChannel inC = new FileInputStream(inFile).getChannel()-->Line_52 $$ inC.close()[ FD ]
Line_8 $$ FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel()-->Line_53 $$ outC1.close()[ FD ]
Line_10 $$ FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel()-->Line_54 $$ outC2.close()[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) [ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) [ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) [ FD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_15 $$ inC.read(mappedBuffer)[ FD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_16 $$ mappedBuffer.position(0)[ FD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_17 $$ short movieName = mappedBuffer.getShort()[ FD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_18 $$ int customer = mappedBuffer.getInt()[ FD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_19 $$ byte rating = mappedBuffer.get()[ FD ]
Line_14 $$ ByteBuffer mappedBuffer = ByteBuffer.allocate(7)-->Line_20 $$ mappedBuffer.clear()[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_21 $$ if (CustInfoHash.containsKey(customer)) [ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_23 $$ locations.add(i)[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_23 $$ locations.add(i)[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_24 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_24 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_27 $$ locations.add(i)[ FD ]
Line_13 $$ for (int i = 1; i <= totalNoDataRows; i++) -->Line_27 $$ locations.add(i)[ FD ]
Line_18 $$ int customer = mappedBuffer.getInt()-->Line_28 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_22 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_28 $$ CustInfoHash.put(customer, locations)[ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ FD ]
Line_34 $$ for (int i = 0; i < customers.length; i++) -->Line_34 $$ for (int i = 0; i < customers.length; i++) [ FD ]
Line_35 $$ int customer = customers[i]-->Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)[ FD ]
Line_36 $$ TIntArrayList locations = (TIntArrayList) CustInfoHash.get(customer)-->Line_37 $$ int noRatingsForCust = locations.size()[ FD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_39 $$ outBuf1.putInt(customer)[ FD ]
Line_35 $$ int customer = customers[i]-->Line_39 $$ outBuf1.putInt(customer)[ FD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_40 $$ outBuf1.putInt(count)[ FD ]
Line_44 $$ count += noRatingsForCust-->Line_40 $$ outBuf1.putInt(count)[ FD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_41 $$ outBuf1.putInt(count + noRatingsForCust - 1)[ FD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_42 $$ outBuf1.flip()[ FD ]
Line_38 $$ ByteBuffer outBuf1 = ByteBuffer.allocate(12)-->Line_43 $$ outC1.write(outBuf1)[ FD ]
Line_37 $$ int noRatingsForCust = locations.size()-->Line_44 $$ count += noRatingsForCust[ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_45 $$ for (int j = 0; j < locations.size(); j++) [ FD ]
Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)-->Line_47 $$ outBuf2.putInt(locations.get(j))[ FD ]
Line_45 $$ for (int j = 0; j < locations.size(); j++) -->Line_47 $$ outBuf2.putInt(locations.get(j))[ FD ]
Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)-->Line_48 $$ outBuf2.flip()[ FD ]
Line_46 $$ ByteBuffer outBuf2 = ByteBuffer.allocate(4)-->Line_49 $$ outC2.write(outBuf2)[ FD ]
