Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void backupFile(File file) [ CD ]
Line_2 $$ private static void backupFile(File file) -->Line_3 $$ FileChannel in = null, out = null[ CD ]
Line_5 $$ if (!file.getName().endsWith(".bak")) -->Line_5 $$ if (!file.getName().endsWith(".bak")) [ CD ]
Line_5 $$ if (!file.getName().endsWith(".bak")) -->Line_5 $$ if (!file.getName().endsWith(".bak")) [ CD ]
Line_2 $$ private static void backupFile(File file) -->Line_5 $$ if (!file.getName().endsWith(".bak")) [ FD ]
Line_5 $$ if (!file.getName().endsWith(".bak")) -->Line_6 $$ in = new FileInputStream(file).getChannel()[ CD ]
Line_3 $$ FileChannel in = null, out = null-->Line_6 $$ in = new FileInputStream(file).getChannel()[ FD ]
Line_6 $$ in = new FileInputStream(file).getChannel()-->Line_6 $$ in = new FileInputStream(file).getChannel()[ FD ]
Line_6 $$ in = new FileInputStream(file).getChannel()-->Line_6 $$ in = new FileInputStream(file).getChannel()[ CD ]
Line_5 $$ if (!file.getName().endsWith(".bak")) -->Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()[ CD ]
Line_3 $$ FileChannel in = null, out = null-->Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()[ FD ]
Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()-->Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()[ FD ]
Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()-->Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()[ CD ]
Line_2 $$ private static void backupFile(File file) -->Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()[ FD ]
Line_5 $$ if (!file.getName().endsWith(".bak")) -->Line_8 $$ long size = in.size()[ CD ]
Line_8 $$ long size = in.size()-->Line_8 $$ long size = in.size()[ CD ]
Line_3 $$ FileChannel in = null, out = null-->Line_8 $$ long size = in.size()[ FD ]
Line_6 $$ in = new FileInputStream(file).getChannel()-->Line_8 $$ long size = in.size()[ FD ]
Line_5 $$ if (!file.getName().endsWith(".bak")) -->Line_9 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ CD ]
Line_9 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_9 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ CD ]
Line_3 $$ FileChannel in = null, out = null-->Line_9 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_6 $$ in = new FileInputStream(file).getChannel()-->Line_9 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_8 $$ long size = in.size()-->Line_9 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_5 $$ if (!file.getName().endsWith(".bak")) -->Line_10 $$ out.write(buf)[ CD ]
Line_3 $$ FileChannel in = null, out = null-->Line_10 $$ out.write(buf)[ FD ]
Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()-->Line_10 $$ out.write(buf)[ FD ]
Line_9 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_10 $$ out.write(buf)[ FD ]
Line_3 $$ FileChannel in = null, out = null-->Line_17 $$ if (in != null)[ FD ]
Line_6 $$ in = new FileInputStream(file).getChannel()-->Line_17 $$ if (in != null)[ FD ]
Line_17 $$ if (in != null)-->Line_17 $$ in.close()[ CD ]
Line_3 $$ FileChannel in = null, out = null-->Line_17 $$ in.close()[ FD ]
Line_6 $$ in = new FileInputStream(file).getChannel()-->Line_17 $$ in.close()[ FD ]
Line_3 $$ FileChannel in = null, out = null-->Line_18 $$ if (out != null)[ FD ]
Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()-->Line_18 $$ if (out != null)[ FD ]
Line_18 $$ if (out != null)-->Line_18 $$ out.close()[ CD ]
Line_3 $$ FileChannel in = null, out = null-->Line_18 $$ out.close()[ FD ]
Line_7 $$ out = new FileOutputStream(new File(file.toString() + ".bak")).getChannel()-->Line_18 $$ out.close()[ FD ]
