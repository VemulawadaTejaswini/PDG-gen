Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void decompress(final File src) throws IOException [ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_4 $$ final String srcPath = src.getPath()[ CD ]
Line_4 $$ final String srcPath = src.getPath()-->Line_4 $$ final String srcPath = src.getPath()[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_4 $$ final String srcPath = src.getPath()[ FD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_5 $$ checkSourceFile(src)[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_5 $$ checkSourceFile(src)[ FD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_6 $$ final boolean test = this.switches.contains(Switch.test)[ CD ]
Line_6 $$ final boolean test = this.switches.contains(Switch.test)-->Line_6 $$ final boolean test = this.switches.contains(Switch.test)[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_7 $$ final File dst[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_8 $$ if (test)[ CD ]
Line_8 $$ if (test)-->Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)[ CD ]
Line_7 $$ final File dst-->Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)[ FD ]
Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)-->Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)[ FD ]
Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)-->Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)[ CD ]
Line_8 $$ if (test)-->Line_12 $$ if (srcPath.endsWith(".bz2"))[ CD ]
Line_4 $$ final String srcPath = src.getPath()-->Line_12 $$ if (srcPath.endsWith(".bz2"))[ FD ]
Line_12 $$ if (srcPath.endsWith(".bz2"))-->Line_12 $$ if (srcPath.endsWith(".bz2"))[ CD ]
Line_4 $$ final String srcPath = src.getPath()-->Line_12 $$ if (srcPath.endsWith(".bz2"))[ FD ]
Line_12 $$ if (srcPath.endsWith(".bz2"))-->Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))[ CD ]
Line_7 $$ final File dst-->Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))[ FD ]
Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)-->Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))[ FD ]
Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))-->Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))[ FD ]
Line_4 $$ final String srcPath = src.getPath()-->Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))[ FD ]
Line_4 $$ final String srcPath = src.getPath()-->Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))[ FD ]
Line_12 $$ if (srcPath.endsWith(".bz2"))-->Line_16 $$ this.log.println("WARNING: Can't guess original name, using extension \".out\":").println(srcPath)[ CD ]
Line_4 $$ final String srcPath = src.getPath()-->Line_16 $$ this.log.println("WARNING: Can't guess original name, using extension \".out\":").println(srcPath)[ FD ]
Line_12 $$ if (srcPath.endsWith(".bz2"))-->Line_17 $$ dst = new File(srcPath + ".out")[ CD ]
Line_7 $$ final File dst-->Line_17 $$ dst = new File(srcPath + ".out")[ FD ]
Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)-->Line_17 $$ dst = new File(srcPath + ".out")[ FD ]
Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))-->Line_17 $$ dst = new File(srcPath + ".out")[ FD ]
Line_17 $$ dst = new File(srcPath + ".out")-->Line_17 $$ dst = new File(srcPath + ".out")[ FD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_20 $$ if (!checkDestFile(dst))[ CD ]
Line_20 $$ if (!checkDestFile(dst))-->Line_20 $$ if (!checkDestFile(dst))[ CD ]
Line_20 $$ if (!checkDestFile(dst))-->Line_20 $$ if (!checkDestFile(dst))[ CD ]
Line_7 $$ final File dst-->Line_20 $$ if (!checkDestFile(dst))[ FD ]
Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)-->Line_20 $$ if (!checkDestFile(dst))[ FD ]
Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))-->Line_20 $$ if (!checkDestFile(dst))[ FD ]
Line_17 $$ dst = new File(srcPath + ".out")-->Line_20 $$ if (!checkDestFile(dst))[ FD ]
Line_20 $$ if (!checkDestFile(dst))-->Line_21 $$ return[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_22 $$ final boolean showProgress = this.switches.contains(Switch.showProgress)[ CD ]
Line_22 $$ final boolean showProgress = this.switches.contains(Switch.showProgress)-->Line_22 $$ final boolean showProgress = this.switches.contains(Switch.showProgress)[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_23 $$ BZip2InputStream in = null[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_24 $$ FileOutputStream out = null[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_25 $$ FileChannel outChannel = null[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_26 $$ FileLock inLock = null[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_27 $$ FileLock outLock = null[ CD ]
Line_31 $$ final FileChannel inChannel = in0.getChannel()-->Line_31 $$ final FileChannel inChannel = in0.getChannel()[ CD ]
Line_30 $$ final FileInputStream in0 = new FileInputStream(src)-->Line_31 $$ final FileChannel inChannel = in0.getChannel()[ FD ]
Line_32 $$ final long inSize = inChannel.size()-->Line_32 $$ final long inSize = inChannel.size()[ CD ]
Line_31 $$ final FileChannel inChannel = in0.getChannel()-->Line_32 $$ final long inSize = inChannel.size()[ FD ]
Line_26 $$ FileLock inLock = null-->Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)[ FD ]
Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)-->Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)[ FD ]
Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)-->Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)[ CD ]
Line_31 $$ final FileChannel inChannel = in0.getChannel()-->Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)[ FD ]
Line_32 $$ final long inSize = inChannel.size()-->Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)[ FD ]
Line_26 $$ FileLock inLock = null-->Line_34 $$ if (inLock == null)[ FD ]
Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)-->Line_34 $$ if (inLock == null)[ FD ]
Line_23 $$ BZip2InputStream in = null-->Line_36 $$ in = new BZip2InputStream(new BufferedXInputStream(in0, 8192))[ FD ]
Line_36 $$ in = new BZip2InputStream(new BufferedXInputStream(in0, 8192))-->Line_36 $$ in = new BZip2InputStream(new BufferedXInputStream(in0, 8192))[ FD ]
Line_24 $$ FileOutputStream out = null-->Line_37 $$ out = new FileOutputStream(dst)[ FD ]
Line_37 $$ out = new FileOutputStream(dst)-->Line_37 $$ out = new FileOutputStream(dst)[ FD ]
Line_25 $$ FileChannel outChannel = null-->Line_38 $$ outChannel = out.getChannel()[ FD ]
Line_38 $$ outChannel = out.getChannel()-->Line_38 $$ outChannel = out.getChannel()[ FD ]
Line_38 $$ outChannel = out.getChannel()-->Line_38 $$ outChannel = out.getChannel()[ CD ]
Line_24 $$ FileOutputStream out = null-->Line_38 $$ outChannel = out.getChannel()[ FD ]
Line_37 $$ out = new FileOutputStream(dst)-->Line_38 $$ outChannel = out.getChannel()[ FD ]
Line_27 $$ FileLock outLock = null-->Line_39 $$ outLock = outChannel.tryLock()[ FD ]
Line_39 $$ outLock = outChannel.tryLock()-->Line_39 $$ outLock = outChannel.tryLock()[ FD ]
Line_39 $$ outLock = outChannel.tryLock()-->Line_39 $$ outLock = outChannel.tryLock()[ CD ]
Line_25 $$ FileChannel outChannel = null-->Line_39 $$ outLock = outChannel.tryLock()[ FD ]
Line_38 $$ outChannel = out.getChannel()-->Line_39 $$ outLock = outChannel.tryLock()[ FD ]
Line_27 $$ FileLock outLock = null-->Line_40 $$ if (outLock == null)[ FD ]
Line_39 $$ outLock = outChannel.tryLock()-->Line_40 $$ if (outLock == null)[ FD ]
Line_22 $$ final boolean showProgress = this.switches.contains(Switch.showProgress)-->Line_42 $$ if (showProgress || this.verbose) [ FD ]
Line_42 $$ if (showProgress || this.verbose) -->Line_44 $$ this.log.print("source: " + src).print(": size=").println(inSize)[ CD ]
Line_32 $$ final long inSize = inChannel.size()-->Line_44 $$ this.log.print("source: " + src).print(": size=").println(inSize)[ FD ]
Line_42 $$ if (showProgress || this.verbose) -->Line_45 $$ this.log.println("target: " + dst)[ CD ]
Line_50 $$ while (true) -->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ CD ]
Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ CD ]
Line_25 $$ FileChannel outChannel = null-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ FD ]
Line_38 $$ outChannel = out.getChannel()-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ FD ]
Line_23 $$ BZip2InputStream in = null-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ FD ]
Line_36 $$ in = new BZip2InputStream(new BufferedXInputStream(in0, 8192))-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ FD ]
Line_47 $$ long pos = 0-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ FD ]
Line_49 $$ final long maxStep = showProgress ? Math.max(8192, inSize / MAX_PROGRESS) : Integer.MAX_VALUE-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ FD ]
Line_50 $$ while (true) -->Line_53 $$ if (step <= 0) [ CD ]
Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)-->Line_53 $$ if (step <= 0) [ FD ]
Line_53 $$ if (step <= 0) -->Line_55 $$ final long a = inChannel.size()[ CD ]
Line_55 $$ final long a = inChannel.size()-->Line_55 $$ final long a = inChannel.size()[ CD ]
Line_31 $$ final FileChannel inChannel = in0.getChannel()-->Line_55 $$ final long a = inChannel.size()[ FD ]
Line_53 $$ if (step <= 0) -->Line_56 $$ if (a != inSize)[ CD ]
Line_55 $$ final long a = inChannel.size()-->Line_56 $$ if (a != inSize)[ FD ]
Line_32 $$ final long inSize = inChannel.size()-->Line_56 $$ if (a != inSize)[ FD ]
Line_53 $$ if (step <= 0) -->Line_58 $$ if (inChannel.position() >= inSize) [ CD ]
Line_32 $$ final long inSize = inChannel.size()-->Line_58 $$ if (inChannel.position() >= inSize) [ FD ]
Line_31 $$ final FileChannel inChannel = in0.getChannel()-->Line_58 $$ if (inChannel.position() >= inSize) [ FD ]
Line_58 $$ if (inChannel.position() >= inSize) -->Line_60 $$ if (showProgress) [ CD ]
Line_60 $$ if (showProgress) -->Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')[ CD ]
Line_60 $$ if (showProgress) -->Line_60 $$ if (showProgress) [ CD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')[ CD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')[ CD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')[ FD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_63 $$ this.log.print('#')[ CD ]
Line_60 $$ if (showProgress) -->Line_64 $$ this.log.println(" done")[ CD ]
Line_53 $$ if (step <= 0) -->Line_71 $$ pos += step[ CD ]
Line_71 $$ pos += step-->Line_71 $$ pos += step[ FD ]
Line_47 $$ long pos = 0-->Line_71 $$ pos += step[ FD ]
Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)-->Line_71 $$ pos += step[ FD ]
Line_53 $$ if (step <= 0) -->Line_72 $$ if (showProgress) [ CD ]
Line_31 $$ final FileChannel inChannel = in0.getChannel()-->Line_74 $$ final double p = (double) inChannel.position() / (double) inSize[ FD ]
Line_72 $$ if (showProgress) -->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ CD ]
Line_72 $$ if (showProgress) -->Line_72 $$ if (showProgress) [ CD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ FD ]
Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ CD ]
Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ CD ]
Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ FD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ FD ]
Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')-->Line_77 $$ this.log.print('#')[ CD ]
Line_72 $$ if (showProgress) -->Line_78 $$ progress = newProgress[ CD ]
Line_78 $$ progress = newProgress-->Line_78 $$ progress = newProgress[ FD ]
Line_48 $$ int progress = 0-->Line_78 $$ progress = newProgress[ FD ]
Line_82 $$ final long outSize = outChannel.size()-->Line_82 $$ final long outSize = outChannel.size()[ CD ]
Line_25 $$ FileChannel outChannel = null-->Line_82 $$ final long outSize = outChannel.size()[ FD ]
Line_38 $$ outChannel = out.getChannel()-->Line_82 $$ final long outSize = outChannel.size()[ FD ]
Line_23 $$ BZip2InputStream in = null-->Line_83 $$ in.close()[ FD ]
Line_36 $$ in = new BZip2InputStream(new BufferedXInputStream(in0, 8192))-->Line_83 $$ in.close()[ FD ]
Line_24 $$ FileOutputStream out = null-->Line_84 $$ out.close()[ FD ]
Line_37 $$ out = new FileOutputStream(dst)-->Line_84 $$ out.close()[ FD ]
Line_85 $$ if (this.verbose) -->Line_87 $$ final double ratio = (outSize == 0) ? (inSize * 100) : ((double) inSize / (double) outSize)[ CD ]
Line_85 $$ if (this.verbose) -->Line_88 $$ this.log.print("compressed size: ").print(inSize).print("; decompressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%')[ CD ]
Line_87 $$ final double ratio = (outSize == 0) ? (inSize * 100) : ((double) inSize / (double) outSize)-->Line_88 $$ this.log.print("compressed size: ").print(inSize).print("; decompressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%')[ FD ]
Line_82 $$ final long outSize = outChannel.size()-->Line_88 $$ this.log.print("compressed size: ").print(inSize).print("; decompressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%')[ FD ]
Line_32 $$ final long inSize = inChannel.size()-->Line_88 $$ this.log.print("compressed size: ").print(inSize).print("; decompressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%')[ FD ]
Line_6 $$ final boolean test = this.switches.contains(Switch.test)-->Line_92 $$ if (!test && !this.switches.contains(Switch.keep)) [ FD ]
Line_92 $$ if (!test && !this.switches.contains(Switch.keep)) -->Line_92 $$ if (!test && !this.switches.contains(Switch.keep)) [ CD ]
Line_92 $$ if (!test && !this.switches.contains(Switch.keep)) -->Line_94 $$ if (!src.delete())[ CD ]
Line_94 $$ if (!src.delete())-->Line_94 $$ if (!src.delete())[ CD ]
Line_94 $$ if (!src.delete())-->Line_94 $$ if (!src.delete())[ CD ]
Line_2 $$ private void decompress(final File src) throws IOException -->Line_94 $$ if (!src.delete())[ FD ]
Line_6 $$ final boolean test = this.switches.contains(Switch.test)-->Line_97 $$ if (test && !dst.delete())[ FD ]
Line_97 $$ if (test && !dst.delete())-->Line_97 $$ if (test && !dst.delete())[ CD ]
Line_7 $$ final File dst-->Line_97 $$ if (test && !dst.delete())[ FD ]
Line_9 $$ dst = File.createTempFile("jaxlib-bzip", null)-->Line_97 $$ if (test && !dst.delete())[ FD ]
Line_13 $$ dst = new File(srcPath.substring(0, srcPath.length() - 4))-->Line_97 $$ if (test && !dst.delete())[ FD ]
Line_17 $$ dst = new File(srcPath + ".out")-->Line_97 $$ if (test && !dst.delete())[ FD ]
Line_23 $$ BZip2InputStream in = null-->Line_102 $$ IO.tryClose(in)[ FD ]
Line_36 $$ in = new BZip2InputStream(new BufferedXInputStream(in0, 8192))-->Line_102 $$ IO.tryClose(in)[ FD ]
Line_24 $$ FileOutputStream out = null-->Line_103 $$ IO.tryClose(out)[ FD ]
Line_37 $$ out = new FileOutputStream(dst)-->Line_103 $$ IO.tryClose(out)[ FD ]
Line_26 $$ FileLock inLock = null-->Line_104 $$ IO.tryRelease(inLock)[ FD ]
Line_33 $$ inLock = inChannel.tryLock(0, inSize, true)-->Line_104 $$ IO.tryRelease(inLock)[ FD ]
Line_27 $$ FileLock outLock = null-->Line_105 $$ IO.tryRelease(outLock)[ FD ]
Line_39 $$ outLock = outChannel.tryLock()-->Line_105 $$ IO.tryRelease(outLock)[ FD ]
Line_71 $$ pos += step-->Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)[ FD ]
Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)-->Line_53 $$ if (step <= 0) [ FD ]
Line_55 $$ final long a = inChannel.size()-->Line_56 $$ if (a != inSize)[ FD ]
Line_52 $$ final long step = outChannel.transferFrom(in, pos, maxStep)-->Line_71 $$ pos += step[ FD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')[ FD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')[ FD ]
Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')-->Line_62 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#')[ FD ]
Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ FD ]
Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ FD ]
Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')-->Line_76 $$ for (int i = progress; i < newProgress; i++) this.log.print('#')[ FD ]
