Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException [ CD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_3 $$ Debug.log("Parsing template : " + templateFile.getAbsolutePath(), module)[ CD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_3 $$ Debug.log("Parsing template : " + templateFile.getAbsolutePath(), module)[ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_4 $$ Reader reader = null[ CD ]
Line_4 $$ Reader reader = null-->Line_6 $$ reader = new InputStreamReader(new FileInputStream(templateFile))[ FD ]
Line_6 $$ reader = new InputStreamReader(new FileInputStream(templateFile))-->Line_6 $$ reader = new InputStreamReader(new FileInputStream(templateFile))[ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_10 $$ String targetDirectoryName = args.length > 1 ? args[1] : null[ CD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_11 $$ if (targetDirectoryName == null) [ CD ]
Line_10 $$ String targetDirectoryName = args.length > 1 ? args[1] : null-->Line_11 $$ if (targetDirectoryName == null) [ FD ]
Line_11 $$ if (targetDirectoryName == null) -->Line_12 $$ targetDirectoryName = target[ CD ]
Line_10 $$ String targetDirectoryName = args.length > 1 ? args[1] : null-->Line_12 $$ targetDirectoryName = target[ FD ]
Line_12 $$ targetDirectoryName = target-->Line_12 $$ targetDirectoryName = target[ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_14 $$ String targetDirectory = ofbizHome + targetDirectoryName + args[0][ CD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_15 $$ File targetDir = new File(targetDirectory)[ CD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_16 $$ if (!targetDir.exists()) [ CD ]
Line_16 $$ if (!targetDir.exists()) -->Line_16 $$ if (!targetDir.exists()) [ CD ]
Line_16 $$ if (!targetDir.exists()) -->Line_16 $$ if (!targetDir.exists()) [ CD ]
Line_15 $$ File targetDir = new File(targetDirectory)-->Line_16 $$ if (!targetDir.exists()) [ FD ]
Line_16 $$ if (!targetDir.exists()) -->Line_17 $$ boolean created = targetDir.mkdirs()[ CD ]
Line_17 $$ boolean created = targetDir.mkdirs()-->Line_17 $$ boolean created = targetDir.mkdirs()[ CD ]
Line_15 $$ File targetDir = new File(targetDirectory)-->Line_17 $$ boolean created = targetDir.mkdirs()[ FD ]
Line_16 $$ if (!targetDir.exists()) -->Line_18 $$ if (!created) [ CD ]
Line_17 $$ boolean created = targetDir.mkdirs()-->Line_18 $$ if (!created) [ FD ]
Line_18 $$ if (!created) -->Line_18 $$ if (!created) [ CD ]
Line_17 $$ boolean created = targetDir.mkdirs()-->Line_18 $$ if (!created) [ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_22 $$ if (!targetDirectory.endsWith("/")) [ CD ]
Line_22 $$ if (!targetDirectory.endsWith("/")) -->Line_22 $$ if (!targetDirectory.endsWith("/")) [ CD ]
Line_22 $$ if (!targetDirectory.endsWith("/")) -->Line_22 $$ if (!targetDirectory.endsWith("/")) [ CD ]
Line_14 $$ String targetDirectory = ofbizHome + targetDirectoryName + args[0]-->Line_22 $$ if (!targetDirectory.endsWith("/")) [ FD ]
Line_22 $$ if (!targetDirectory.endsWith("/")) -->Line_23 $$ targetDirectory = targetDirectory + "/"[ CD ]
Line_14 $$ String targetDirectory = ofbizHome + targetDirectoryName + args[0]-->Line_23 $$ targetDirectory = targetDirectory + "/"[ FD ]
Line_23 $$ targetDirectory = targetDirectory + "/"-->Line_23 $$ targetDirectory = targetDirectory + "/"[ FD ]
Line_14 $$ String targetDirectory = ofbizHome + targetDirectoryName + args[0]-->Line_23 $$ targetDirectory = targetDirectory + "/"[ FD ]
Line_23 $$ targetDirectory = targetDirectory + "/"-->Line_23 $$ targetDirectory = targetDirectory + "/"[ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_25 $$ Writer writer = null[ CD ]
Line_25 $$ Writer writer = null-->Line_27 $$ writer = new FileWriter(targetDirectory + templateFile.getName())[ FD ]
Line_27 $$ writer = new FileWriter(targetDirectory + templateFile.getName())-->Line_27 $$ writer = new FileWriter(targetDirectory + templateFile.getName())[ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_27 $$ writer = new FileWriter(targetDirectory + templateFile.getName())[ FD ]
Line_4 $$ Reader reader = null-->Line_32 $$ FreeMarkerWorker.renderTemplate(templateFile.getAbsolutePath(), reader, dataMap, writer)[ FD ]
Line_6 $$ reader = new InputStreamReader(new FileInputStream(templateFile))-->Line_32 $$ FreeMarkerWorker.renderTemplate(templateFile.getAbsolutePath(), reader, dataMap, writer)[ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_32 $$ FreeMarkerWorker.renderTemplate(templateFile.getAbsolutePath(), reader, dataMap, writer)[ FD ]
Line_25 $$ Writer writer = null-->Line_32 $$ FreeMarkerWorker.renderTemplate(templateFile.getAbsolutePath(), reader, dataMap, writer)[ FD ]
Line_27 $$ writer = new FileWriter(targetDirectory + templateFile.getName())-->Line_32 $$ FreeMarkerWorker.renderTemplate(templateFile.getAbsolutePath(), reader, dataMap, writer)[ FD ]
Line_2 $$ private void parseTemplate(File templateFile, Map dataMap) throws ContainerException -->Line_32 $$ FreeMarkerWorker.renderTemplate(templateFile.getAbsolutePath(), reader, dataMap, writer)[ FD ]
Line_25 $$ Writer writer = null-->Line_37 $$ writer.flush()[ FD ]
Line_27 $$ writer = new FileWriter(targetDirectory + templateFile.getName())-->Line_37 $$ writer.flush()[ FD ]
Line_25 $$ Writer writer = null-->Line_38 $$ writer.close()[ FD ]
Line_27 $$ writer = new FileWriter(targetDirectory + templateFile.getName())-->Line_38 $$ writer.close()[ FD ]
