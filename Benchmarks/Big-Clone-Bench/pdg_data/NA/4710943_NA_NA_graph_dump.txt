Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException [ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_3 $$ long t0 = System.currentTimeMillis()[ CD ]
Line_3 $$ long t0 = System.currentTimeMillis()-->Line_3 $$ long t0 = System.currentTimeMillis()[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_4 $$ String id = request.getRequestURI().split("/")[3][ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_4 $$ String id = request.getRequestURI().split("/")[3][ FD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_5 $$ Song song = manager.find(id)[ CD ]
Line_5 $$ Song song = manager.find(id)-->Line_5 $$ Song song = manager.find(id)[ CD ]
Line_4 $$ String id = request.getRequestURI().split("/")[3]-->Line_5 $$ Song song = manager.find(id)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_6 $$ if (song != null) [ CD ]
Line_5 $$ Song song = manager.find(id)-->Line_6 $$ if (song != null) [ FD ]
Line_6 $$ if (song != null) -->Line_7 $$ if (song.getArtwork()) [ CD ]
Line_5 $$ Song song = manager.find(id)-->Line_7 $$ if (song.getArtwork()) [ FD ]
Line_7 $$ if (song.getArtwork()) -->Line_7 $$ if (song.getArtwork()) [ CD ]
Line_5 $$ Song song = manager.find(id)-->Line_7 $$ if (song.getArtwork()) [ FD ]
Line_7 $$ if (song.getArtwork()) -->Line_8 $$ if (log.isDebugEnabled())[ CD ]
Line_8 $$ if (log.isDebugEnabled())-->Line_8 $$ if (log.isDebugEnabled())[ CD ]
Line_8 $$ if (log.isDebugEnabled())-->Line_8 $$ log.debug("song has embedded artwork")[ CD ]
Line_10 $$ AudioFile af = AudioFileIO.read(new File(song.getFile()))-->Line_10 $$ AudioFile af = AudioFileIO.read(new File(song.getFile()))[ CD ]
Line_5 $$ Song song = manager.find(id)-->Line_10 $$ AudioFile af = AudioFileIO.read(new File(song.getFile()))[ FD ]
Line_11 $$ Tag tag = af.getTag()-->Line_11 $$ Tag tag = af.getTag()[ CD ]
Line_10 $$ AudioFile af = AudioFileIO.read(new File(song.getFile()))-->Line_11 $$ Tag tag = af.getTag()[ FD ]
Line_12 $$ Artwork aw = tag.getFirstArtwork()-->Line_12 $$ Artwork aw = tag.getFirstArtwork()[ CD ]
Line_11 $$ Tag tag = af.getTag()-->Line_12 $$ Artwork aw = tag.getFirstArtwork()[ FD ]
Line_13 $$ byte[] bytes = aw.getBinaryData()-->Line_13 $$ byte[] bytes = aw.getBinaryData()[ CD ]
Line_12 $$ Artwork aw = tag.getFirstArtwork()-->Line_13 $$ byte[] bytes = aw.getBinaryData()[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_14 $$ response.setStatus(HttpServletResponse.SC_OK)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_15 $$ response.setContentType(aw.getMimeType())[ FD ]
Line_12 $$ Artwork aw = tag.getFirstArtwork()-->Line_15 $$ response.setContentType(aw.getMimeType())[ FD ]
Line_13 $$ byte[] bytes = aw.getBinaryData()-->Line_16 $$ response.getOutputStream().write(bytes)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_16 $$ response.getOutputStream().write(bytes)[ FD ]
Line_7 $$ if (song.getArtwork()) -->Line_21 $$ if (log.isDebugEnabled())[ CD ]
Line_21 $$ if (log.isDebugEnabled())-->Line_21 $$ if (log.isDebugEnabled())[ CD ]
Line_21 $$ if (log.isDebugEnabled())-->Line_21 $$ log.debug("search in directory")[ CD ]
Line_7 $$ if (song.getArtwork()) -->Line_22 $$ File directory = new File(song.getFile()).getParentFile()[ CD ]
Line_22 $$ File directory = new File(song.getFile()).getParentFile()-->Line_22 $$ File directory = new File(song.getFile()).getParentFile()[ CD ]
Line_5 $$ Song song = manager.find(id)-->Line_22 $$ File directory = new File(song.getFile()).getParentFile()[ FD ]
Line_7 $$ if (song.getArtwork()) -->Line_23 $$ File[] files = directory.listFiles(filter)[ CD ]
Line_23 $$ File[] files = directory.listFiles(filter)-->Line_23 $$ File[] files = directory.listFiles(filter)[ CD ]
Line_22 $$ File directory = new File(song.getFile()).getParentFile()-->Line_23 $$ File[] files = directory.listFiles(filter)[ FD ]
Line_7 $$ if (song.getArtwork()) -->Line_24 $$ if (files != null && files.length > 0) [ CD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_25 $$ File file = files[0][ CD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_26 $$ String type = FilenameUtils.getExtension(file.getName()).toLowerCase()[ CD ]
Line_26 $$ String type = FilenameUtils.getExtension(file.getName()).toLowerCase()-->Line_26 $$ String type = FilenameUtils.getExtension(file.getName()).toLowerCase()[ CD ]
Line_25 $$ File file = files[0]-->Line_26 $$ String type = FilenameUtils.getExtension(file.getName()).toLowerCase()[ FD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_27 $$ if (type.startsWith("jp"))[ CD ]
Line_26 $$ String type = FilenameUtils.getExtension(file.getName()).toLowerCase()-->Line_27 $$ if (type.startsWith("jp"))[ FD ]
Line_27 $$ if (type.startsWith("jp"))-->Line_27 $$ if (type.startsWith("jp"))[ CD ]
Line_26 $$ String type = FilenameUtils.getExtension(file.getName()).toLowerCase()-->Line_27 $$ if (type.startsWith("jp"))[ FD ]
Line_27 $$ if (type.startsWith("jp"))-->Line_27 $$ type = "jpeg"[ CD ]
Line_26 $$ String type = FilenameUtils.getExtension(file.getName()).toLowerCase()-->Line_27 $$ type = "jpeg"[ FD ]
Line_27 $$ type = "jpeg"-->Line_27 $$ type = "jpeg"[ FD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_28 $$ String mime = "image/" + type[ CD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_29 $$ response.setStatus(HttpServletResponse.SC_OK)[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_29 $$ response.setStatus(HttpServletResponse.SC_OK)[ FD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_30 $$ response.setContentType(mime)[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_30 $$ response.setContentType(mime)[ FD ]
Line_28 $$ String mime = "image/" + type-->Line_30 $$ response.setContentType(mime)[ FD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_31 $$ FileInputStream stream = new FileInputStream(file)[ CD ]
Line_31 $$ FileInputStream stream = new FileInputStream(file)-->Line_33 $$ IOUtils.copy(stream, response.getOutputStream())[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_33 $$ IOUtils.copy(stream, response.getOutputStream())[ FD ]
Line_31 $$ FileInputStream stream = new FileInputStream(file)-->Line_37 $$ IOUtils.closeQuietly(stream)[ FD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_40 $$ if (log.isDebugEnabled())[ CD ]
Line_40 $$ if (log.isDebugEnabled())-->Line_40 $$ if (log.isDebugEnabled())[ CD ]
Line_40 $$ if (log.isDebugEnabled())-->Line_40 $$ log.debug("image not found: " + id + ", sending redirect: " + redirect)[ CD ]
Line_24 $$ if (files != null && files.length > 0) -->Line_41 $$ response.sendRedirect(redirect)[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_41 $$ response.sendRedirect(redirect)[ FD ]
Line_6 $$ if (song != null) -->Line_45 $$ log.info("song not found: " + id)[ CD ]
Line_6 $$ if (song != null) -->Line_46 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_46 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_48 $$ long t1 = System.currentTimeMillis()[ CD ]
Line_48 $$ long t1 = System.currentTimeMillis()-->Line_48 $$ long t1 = System.currentTimeMillis()[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_49 $$ log.info("request: " + id + " duration: " + (t1 - t0) + "ms")[ CD ]
