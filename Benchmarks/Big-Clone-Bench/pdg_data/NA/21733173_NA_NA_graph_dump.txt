Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException [ CD ]
Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException -->Line_3 $$ System.out.println("downloadFtp(" + file + ", " + jurl + ")")[ CD ]
Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException -->Line_4 $$ FTPClient client = new FTPClient()[ CD ]
Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException -->Line_5 $$ client.addProtocolCommandListener(new ProtocolCommandListener() [ CD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_5 $$ client.addProtocolCommandListener(new ProtocolCommandListener() [ FD ]
Line_5 $$ client.addProtocolCommandListener(new ProtocolCommandListener() -->Line_7 $$ System.out.println("downloadFtp: " + event.getMessage())[ CD ]
Line_5 $$ client.addProtocolCommandListener(new ProtocolCommandListener() -->Line_7 $$ System.out.println("downloadFtp: " + event.getMessage())[ FD ]
Line_5 $$ client.addProtocolCommandListener(new ProtocolCommandListener() -->Line_10 $$ System.out.println("downloadFtp: " + event.getMessage())[ CD ]
Line_5 $$ client.addProtocolCommandListener(new ProtocolCommandListener() -->Line_10 $$ System.out.println("downloadFtp: " + event.getMessage())[ FD ]
Line_5 $$ client.addProtocolCommandListener(new ProtocolCommandListener() -->Line_10 $$ System.out.println("downloadFtp: " + event.getMessage())[ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_14 $$ client.connect(jurl.getHost(), -1 == jurl.getPort() ? FTP.DEFAULT_PORT : jurl.getPort())[ FD ]
Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException -->Line_14 $$ client.connect(jurl.getHost(), -1 == jurl.getPort() ? FTP.DEFAULT_PORT : jurl.getPort())[ FD ]
Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException -->Line_14 $$ client.connect(jurl.getHost(), -1 == jurl.getPort() ? FTP.DEFAULT_PORT : jurl.getPort())[ FD ]
Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException -->Line_14 $$ client.connect(jurl.getHost(), -1 == jurl.getPort() ? FTP.DEFAULT_PORT : jurl.getPort())[ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_15 $$ int reply = client.getReplyCode()[ FD ]
Line_16 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_16 $$ if (!FTPReply.isPositiveCompletion(reply)) [ CD ]
Line_16 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_16 $$ if (!FTPReply.isPositiveCompletion(reply)) [ CD ]
Line_16 $$ if (!FTPReply.isPositiveCompletion(reply)) -->Line_17 $$ client.disconnect()[ CD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_17 $$ client.disconnect()[ FD ]
Line_20 $$ if (!client.login("anonymous", "anonymous")) -->Line_20 $$ if (!client.login("anonymous", "anonymous")) [ CD ]
Line_20 $$ if (!client.login("anonymous", "anonymous")) -->Line_20 $$ if (!client.login("anonymous", "anonymous")) [ CD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_20 $$ if (!client.login("anonymous", "anonymous")) [ FD ]
Line_20 $$ if (!client.login("anonymous", "anonymous")) -->Line_21 $$ client.logout()[ CD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_21 $$ client.logout()[ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_24 $$ client.setFileType(FTP.BINARY_FILE_TYPE)[ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_25 $$ client.enterLocalPassiveMode()[ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_27 $$ boolean ok = client.retrieveFile(jurl.getPath(), out)[ FD ]
Line_2 $$ private void downloadFtp(File file, URL jurl) throws SocketException, IOException -->Line_27 $$ boolean ok = client.retrieveFile(jurl.getPath(), out)[ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_29 $$ client.logout()[ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_36 $$ if (client.isConnected()) [ FD ]
Line_36 $$ if (client.isConnected()) -->Line_36 $$ if (client.isConnected()) [ CD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_36 $$ if (client.isConnected()) [ FD ]
Line_4 $$ FTPClient client = new FTPClient()-->Line_38 $$ client.disconnect()[ FD ]
