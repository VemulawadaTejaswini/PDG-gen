Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) [ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_4 $$ if (sources == null || sources.size() == 0)[ FD ]
Line_4 $$ if (sources == null || sources.size() == 0)-->Line_4 $$ return false[ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_5 $$ if (target.exists())[ FD ]
Line_5 $$ if (target.exists())-->Line_5 $$ if (target.exists())[ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_5 $$ if (target.exists())[ FD ]
Line_5 $$ if (target.exists())-->Line_5 $$ target.delete()[ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_5 $$ target.delete()[ FD ]
Line_7 $$ boolean isJar = target.getName().toLowerCase().endsWith(".jar")-->Line_7 $$ boolean isJar = target.getName().toLowerCase().endsWith(".jar")[ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_7 $$ boolean isJar = target.getName().toLowerCase().endsWith(".jar")[ FD ]
Line_8 $$ if (isJar) -->Line_9 $$ if (manifest != null)[ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_9 $$ if (manifest != null)[ FD ]
Line_9 $$ if (manifest != null)-->Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)[ CD ]
Line_6 $$ ZipOutputStream output = null-->Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)[ FD ]
Line_9 $$ if (manifest != null)-->Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))[ CD ]
Line_6 $$ ZipOutputStream output = null-->Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))-->Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))[ FD ]
Line_8 $$ if (isJar) -->Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))[ CD ]
Line_6 $$ ZipOutputStream output = null-->Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))-->Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))[ FD ]
Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))-->Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))[ FD ]
Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')-->Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')[ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')[ FD ]
Line_12 $$ if (!baseDir.endsWith("/"))-->Line_12 $$ if (!baseDir.endsWith("/"))[ CD ]
Line_12 $$ if (!baseDir.endsWith("/"))-->Line_12 $$ if (!baseDir.endsWith("/"))[ CD ]
Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')-->Line_12 $$ if (!baseDir.endsWith("/"))[ FD ]
Line_12 $$ if (!baseDir.endsWith("/"))-->Line_12 $$ baseDir = baseDir + "/"[ CD ]
Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')-->Line_12 $$ baseDir = baseDir + "/"[ FD ]
Line_12 $$ baseDir = baseDir + "/"-->Line_12 $$ baseDir = baseDir + "/"[ FD ]
Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')-->Line_12 $$ baseDir = baseDir + "/"[ FD ]
Line_12 $$ baseDir = baseDir + "/"-->Line_12 $$ baseDir = baseDir + "/"[ FD ]
Line_13 $$ int baseDirLength = baseDir.length()-->Line_13 $$ int baseDirLength = baseDir.length()[ CD ]
Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')-->Line_13 $$ int baseDirLength = baseDir.length()[ FD ]
Line_12 $$ baseDir = baseDir + "/"-->Line_13 $$ int baseDirLength = baseDir.length()[ FD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) [ CD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) [ CD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) [ CD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) [ FD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_16 $$ File fileOrDir = (File) it.next()[ CD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_16 $$ File fileOrDir = (File) it.next()[ FD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_17 $$ if (isJar && (manifest != null) && fileOrDir.getName().equals("META-INF"))[ CD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_17 $$ if (isJar && (manifest != null) && fileOrDir.getName().equals("META-INF"))[ FD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_18 $$ if (fileOrDir.isDirectory())[ CD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ if (fileOrDir.isDirectory())[ FD ]
Line_18 $$ if (fileOrDir.isDirectory())-->Line_18 $$ if (fileOrDir.isDirectory())[ CD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ if (fileOrDir.isDirectory())[ FD ]
Line_18 $$ if (fileOrDir.isDirectory())-->Line_18 $$ list.addAll(getContents(fileOrDir))[ CD ]
Line_14 $$ ArrayList list = new ArrayList()-->Line_18 $$ list.addAll(getContents(fileOrDir))[ FD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ list.addAll(getContents(fileOrDir))[ FD ]
Line_18 $$ if (fileOrDir.isDirectory())-->Line_18 $$ list.add(fileOrDir)[ CD ]
Line_14 $$ ArrayList list = new ArrayList()-->Line_18 $$ list.add(fileOrDir)[ FD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ list.add(fileOrDir)[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ CD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ CD ]
Line_14 $$ ArrayList list = new ArrayList()-->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ CD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_23 $$ File file = (File) list.get(i)[ CD ]
Line_14 $$ ArrayList list = new ArrayList()-->Line_23 $$ File file = (File) list.get(i)[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_23 $$ File file = (File) list.get(i)[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_24 $$ FileInputStream f_in = new FileInputStream(file)[ CD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')[ CD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')[ CD ]
Line_23 $$ File file = (File) list.get(i)-->Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_26 $$ if (filename.startsWith(baseDir))[ CD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_12 $$ baseDir = baseDir + "/"-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_26 $$ if (filename.startsWith(baseDir))-->Line_26 $$ if (filename.startsWith(baseDir))[ CD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_11 $$ String baseDir = ((File) sources.get(0)).getParentFile().getAbsolutePath().replace('\\', '/')-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_12 $$ baseDir = baseDir + "/"-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_26 $$ if (filename.startsWith(baseDir))-->Line_26 $$ filename = filename.substring(baseDirLength)[ CD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_26 $$ filename = filename.substring(baseDirLength)[ FD ]
Line_26 $$ filename = filename.substring(baseDirLength)-->Line_26 $$ filename = filename.substring(baseDirLength)[ FD ]
Line_26 $$ filename = filename.substring(baseDirLength)-->Line_26 $$ filename = filename.substring(baseDirLength)[ CD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_26 $$ filename = filename.substring(baseDirLength)[ FD ]
Line_26 $$ filename = filename.substring(baseDirLength)-->Line_26 $$ filename = filename.substring(baseDirLength)[ FD ]
Line_13 $$ int baseDirLength = baseDir.length()-->Line_26 $$ filename = filename.substring(baseDirLength)[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_27 $$ if (isJar)[ CD ]
Line_27 $$ if (isJar)-->Line_27 $$ output.putNextEntry(new JarEntry(filename))[ CD ]
Line_6 $$ ZipOutputStream output = null-->Line_27 $$ output.putNextEntry(new JarEntry(filename))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_27 $$ output.putNextEntry(new JarEntry(filename))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))-->Line_27 $$ output.putNextEntry(new JarEntry(filename))[ FD ]
Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))-->Line_27 $$ output.putNextEntry(new JarEntry(filename))[ FD ]
Line_27 $$ if (isJar)-->Line_27 $$ output.putNextEntry(new ZipEntry(filename))[ CD ]
Line_6 $$ ZipOutputStream output = null-->Line_27 $$ output.putNextEntry(new ZipEntry(filename))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_27 $$ output.putNextEntry(new ZipEntry(filename))[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))-->Line_27 $$ output.putNextEntry(new ZipEntry(filename))[ FD ]
Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))-->Line_27 $$ output.putNextEntry(new ZipEntry(filename))[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ CD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ CD ]
Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_21 $$ int bytesRead-->Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ CD ]
Line_24 $$ FileInputStream f_in = new FileInputStream(file)-->Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_20 $$ byte[] buffer = new byte[1024]-->Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_28 $$ output.write(buffer, 0, bytesRead)[ CD ]
Line_6 $$ ZipOutputStream output = null-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_20 $$ byte[] buffer = new byte[1024]-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_21 $$ int bytesRead-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_29 $$ f_in.close()[ CD ]
Line_24 $$ FileInputStream f_in = new FileInputStream(file)-->Line_29 $$ f_in.close()[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_30 $$ output.closeEntry()[ CD ]
Line_6 $$ ZipOutputStream output = null-->Line_30 $$ output.closeEntry()[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_30 $$ output.closeEntry()[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))-->Line_30 $$ output.closeEntry()[ FD ]
Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))-->Line_30 $$ output.closeEntry()[ FD ]
Line_6 $$ ZipOutputStream output = null-->Line_32 $$ output.close()[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target), manifest)-->Line_32 $$ output.close()[ FD ]
Line_9 $$ output = new JarOutputStream(new FileOutputStream(target))-->Line_32 $$ output.close()[ FD ]
Line_10 $$ output = new ZipOutputStream(new FileOutputStream(target))-->Line_32 $$ output.close()[ FD ]
Line_2 $$ public static boolean compress(ArrayList sources, File target, Manifest manifest) -->Line_37 $$ return true[ CD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) [ FD ]
Line_15 $$ for (Iterator it = sources.iterator(); it.hasNext(); ) -->Line_16 $$ File fileOrDir = (File) it.next()[ FD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_17 $$ if (isJar && (manifest != null) && fileOrDir.getName().equals("META-INF"))[ FD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ if (fileOrDir.isDirectory())[ FD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ if (fileOrDir.isDirectory())[ FD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ list.addAll(getContents(fileOrDir))[ FD ]
Line_16 $$ File fileOrDir = (File) it.next()-->Line_18 $$ list.add(fileOrDir)[ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) [ FD ]
Line_22 $$ for (int i = 0, n = list.size(); i < n; i++) -->Line_23 $$ File file = (File) list.get(i)[ FD ]
Line_23 $$ File file = (File) list.get(i)-->Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')[ FD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_26 $$ filename = filename.substring(baseDirLength)-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_26 $$ filename = filename.substring(baseDirLength)-->Line_26 $$ if (filename.startsWith(baseDir))[ FD ]
Line_25 $$ String filename = file.getAbsolutePath().replace('\\', '/')-->Line_26 $$ filename = filename.substring(baseDirLength)[ FD ]
Line_26 $$ filename = filename.substring(baseDirLength)-->Line_26 $$ filename = filename.substring(baseDirLength)[ FD ]
Line_24 $$ FileInputStream f_in = new FileInputStream(file)-->Line_29 $$ f_in.close()[ FD ]
Line_28 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_28 $$ output.write(buffer, 0, bytesRead)[ FD ]
