Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException [ CD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_3 $$ URL url = null[ CD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_4 $$ if (path.indexOf(':') >= 2) [ CD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_4 $$ if (path.indexOf(':') >= 2) [ FD ]
Line_3 $$ URL url = null-->Line_6 $$ url = new URL(path)[ FD ]
Line_6 $$ url = new URL(path)-->Line_6 $$ url = new URL(path)[ FD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_10 $$ InputStream is = null[ CD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_11 $$ int capacityHint = 0[ CD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_12 $$ if (url == null) [ CD ]
Line_3 $$ URL url = null-->Line_12 $$ if (url == null) [ FD ]
Line_6 $$ url = new URL(path)-->Line_12 $$ if (url == null) [ FD ]
Line_12 $$ if (url == null) -->Line_13 $$ File file = new File(path)[ CD ]
Line_12 $$ if (url == null) -->Line_14 $$ capacityHint = (int) file.length()[ CD ]
Line_11 $$ int capacityHint = 0-->Line_14 $$ capacityHint = (int) file.length()[ FD ]
Line_14 $$ capacityHint = (int) file.length()-->Line_14 $$ capacityHint = (int) file.length()[ FD ]
Line_13 $$ File file = new File(path)-->Line_14 $$ capacityHint = (int) file.length()[ FD ]
Line_10 $$ InputStream is = null-->Line_16 $$ is = new FileInputStream(file)[ FD ]
Line_16 $$ is = new FileInputStream(file)-->Line_16 $$ is = new FileInputStream(file)[ FD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_18 $$ Context.reportError(getMessage("msg.couldnt.open", path))[ FD ]
Line_23 $$ URLConnection uc = url.openConnection()-->Line_23 $$ URLConnection uc = url.openConnection()[ CD ]
Line_3 $$ URL url = null-->Line_23 $$ URLConnection uc = url.openConnection()[ FD ]
Line_6 $$ url = new URL(path)-->Line_23 $$ URLConnection uc = url.openConnection()[ FD ]
Line_10 $$ InputStream is = null-->Line_24 $$ is = uc.getInputStream()[ FD ]
Line_16 $$ is = new FileInputStream(file)-->Line_24 $$ is = uc.getInputStream()[ FD ]
Line_24 $$ is = uc.getInputStream()-->Line_24 $$ is = uc.getInputStream()[ FD ]
Line_24 $$ is = uc.getInputStream()-->Line_24 $$ is = uc.getInputStream()[ CD ]
Line_23 $$ URLConnection uc = url.openConnection()-->Line_24 $$ is = uc.getInputStream()[ FD ]
Line_11 $$ int capacityHint = 0-->Line_25 $$ capacityHint = uc.getContentLength()[ FD ]
Line_14 $$ capacityHint = (int) file.length()-->Line_25 $$ capacityHint = uc.getContentLength()[ FD ]
Line_25 $$ capacityHint = uc.getContentLength()-->Line_25 $$ capacityHint = uc.getContentLength()[ FD ]
Line_25 $$ capacityHint = uc.getContentLength()-->Line_25 $$ capacityHint = uc.getContentLength()[ CD ]
Line_23 $$ URLConnection uc = url.openConnection()-->Line_25 $$ capacityHint = uc.getContentLength()[ FD ]
Line_11 $$ int capacityHint = 0-->Line_26 $$ if (capacityHint > (1 << 20)) [ FD ]
Line_14 $$ capacityHint = (int) file.length()-->Line_26 $$ if (capacityHint > (1 << 20)) [ FD ]
Line_25 $$ capacityHint = uc.getContentLength()-->Line_26 $$ if (capacityHint > (1 << 20)) [ FD ]
Line_26 $$ if (capacityHint > (1 << 20)) -->Line_27 $$ capacityHint = -1[ CD ]
Line_11 $$ int capacityHint = 0-->Line_27 $$ capacityHint = -1[ FD ]
Line_14 $$ capacityHint = (int) file.length()-->Line_27 $$ capacityHint = -1[ FD ]
Line_25 $$ capacityHint = uc.getContentLength()-->Line_27 $$ capacityHint = -1[ FD ]
Line_27 $$ capacityHint = -1-->Line_27 $$ capacityHint = -1[ FD ]
Line_27 $$ capacityHint = -1-->Line_27 $$ capacityHint = -1[ CD ]
Line_3 $$ URL url = null-->Line_30 $$ Context.reportError(getMessage("msg.couldnt.open.url", url.toString(), ex.toString()))[ FD ]
Line_6 $$ url = new URL(path)-->Line_30 $$ Context.reportError(getMessage("msg.couldnt.open.url", url.toString(), ex.toString()))[ FD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_34 $$ if (capacityHint <= 0) [ CD ]
Line_11 $$ int capacityHint = 0-->Line_34 $$ if (capacityHint <= 0) [ FD ]
Line_14 $$ capacityHint = (int) file.length()-->Line_34 $$ if (capacityHint <= 0) [ FD ]
Line_25 $$ capacityHint = uc.getContentLength()-->Line_34 $$ if (capacityHint <= 0) [ FD ]
Line_27 $$ capacityHint = -1-->Line_34 $$ if (capacityHint <= 0) [ FD ]
Line_34 $$ if (capacityHint <= 0) -->Line_35 $$ capacityHint = 4096[ CD ]
Line_11 $$ int capacityHint = 0-->Line_35 $$ capacityHint = 4096[ FD ]
Line_14 $$ capacityHint = (int) file.length()-->Line_35 $$ capacityHint = 4096[ FD ]
Line_25 $$ capacityHint = uc.getContentLength()-->Line_35 $$ capacityHint = 4096[ FD ]
Line_27 $$ capacityHint = -1-->Line_35 $$ capacityHint = 4096[ FD ]
Line_35 $$ capacityHint = 4096-->Line_35 $$ capacityHint = 4096[ FD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_37 $$ byte[] data[ CD ]
Line_10 $$ InputStream is = null-->Line_40 $$ is = new BufferedInputStream(is)[ FD ]
Line_16 $$ is = new FileInputStream(file)-->Line_40 $$ is = new BufferedInputStream(is)[ FD ]
Line_24 $$ is = uc.getInputStream()-->Line_40 $$ is = new BufferedInputStream(is)[ FD ]
Line_40 $$ is = new BufferedInputStream(is)-->Line_40 $$ is = new BufferedInputStream(is)[ FD ]
Line_37 $$ byte[] data-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_41 $$ data = Kit.readStream(is, capacityHint)-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_41 $$ data = Kit.readStream(is, capacityHint)-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ CD ]
Line_10 $$ InputStream is = null-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_16 $$ is = new FileInputStream(file)-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_24 $$ is = uc.getInputStream()-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_40 $$ is = new BufferedInputStream(is)-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_11 $$ int capacityHint = 0-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_14 $$ capacityHint = (int) file.length()-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_25 $$ capacityHint = uc.getContentLength()-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_27 $$ capacityHint = -1-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_35 $$ capacityHint = 4096-->Line_41 $$ data = Kit.readStream(is, capacityHint)[ FD ]
Line_10 $$ InputStream is = null-->Line_43 $$ is.close()[ FD ]
Line_16 $$ is = new FileInputStream(file)-->Line_43 $$ is.close()[ FD ]
Line_24 $$ is = uc.getInputStream()-->Line_43 $$ is.close()[ FD ]
Line_40 $$ is = new BufferedInputStream(is)-->Line_43 $$ is.close()[ FD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_49 $$ Object result[ CD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_50 $$ if (convertToString) [ CD ]
Line_50 $$ if (convertToString) -->Line_51 $$ result = new String(data)[ CD ]
Line_49 $$ Object result-->Line_51 $$ result = new String(data)[ FD ]
Line_51 $$ result = new String(data)-->Line_51 $$ result = new String(data)[ FD ]
Line_50 $$ if (convertToString) -->Line_53 $$ result = data[ CD ]
Line_49 $$ Object result-->Line_53 $$ result = data[ FD ]
Line_51 $$ result = new String(data)-->Line_53 $$ result = data[ FD ]
Line_53 $$ result = data-->Line_53 $$ result = data[ FD ]
Line_37 $$ byte[] data-->Line_53 $$ result = data[ FD ]
Line_41 $$ data = Kit.readStream(is, capacityHint)-->Line_53 $$ result = data[ FD ]
Line_2 $$ private static Object readFileOrUrl(String path, boolean convertToString) throws IOException -->Line_55 $$ return result[ CD ]
