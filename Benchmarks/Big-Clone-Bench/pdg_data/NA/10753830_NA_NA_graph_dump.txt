Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException [ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_3 $$ if (logger.isDebugEnabled()) [ CD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_3 $$ if (logger.isDebugEnabled()) [ CD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_4 $$ logger.debug("Sending request to " + address)[ CD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_5 $$ String requestString = XMLUtil.transformToString(request)[ CD ]
Line_5 $$ String requestString = XMLUtil.transformToString(request)-->Line_5 $$ String requestString = XMLUtil.transformToString(request)[ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_5 $$ String requestString = XMLUtil.transformToString(request)[ FD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_6 $$ logger.debug("Sending Request " + requestString)[ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_8 $$ URL url = new URL(address)[ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ CD ]
Line_8 $$ URL url = new URL(address)-->Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_10 $$ connection.setRequestProperty("Content-Type", "text/xml")[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ connection.setRequestProperty("Content-Type", "text/xml")[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_11 $$ connection.setDoOutput(true)[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_11 $$ connection.setDoOutput(true)[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_12 $$ connection.setDefaultUseCaches(false)[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_12 $$ connection.setDefaultUseCaches(false)[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_13 $$ connection.setRequestMethod("POST")[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_13 $$ connection.setRequestMethod("POST")[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_14 $$ connection.connect()[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_14 $$ connection.connect()[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_15 $$ OutputStream os = connection.getOutputStream()[ CD ]
Line_15 $$ OutputStream os = connection.getOutputStream()-->Line_15 $$ OutputStream os = connection.getOutputStream()[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_15 $$ OutputStream os = connection.getOutputStream()[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_16 $$ XMLUtil.transformToStream(request, os)[ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_16 $$ XMLUtil.transformToStream(request, os)[ FD ]
Line_15 $$ OutputStream os = connection.getOutputStream()-->Line_16 $$ XMLUtil.transformToStream(request, os)[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_17 $$ os.flush()[ CD ]
Line_15 $$ OutputStream os = connection.getOutputStream()-->Line_17 $$ os.flush()[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_18 $$ os.close()[ CD ]
Line_15 $$ OutputStream os = connection.getOutputStream()-->Line_18 $$ os.close()[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_19 $$ if (connection.getResponseCode() != connection.HTTP_OK) [ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_19 $$ if (connection.getResponseCode() != connection.HTTP_OK) [ FD ]
Line_19 $$ if (connection.getResponseCode() != connection.HTTP_OK) -->Line_20 $$ logger.error("Was expecting HTTP_OK (200) but received response code: " + connection.getResponseCode())[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_20 $$ logger.error("Was expecting HTTP_OK (200) but received response code: " + connection.getResponseCode())[ FD ]
Line_19 $$ if (connection.getResponseCode() != connection.HTTP_OK) -->Line_21 $$ logger.error("Message: " + connection.getResponseMessage())[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_21 $$ logger.error("Message: " + connection.getResponseMessage())[ FD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_22 $$ throw new LibraryException(LibraryException.Code.REQUEST_FAILURE, connection.getResponseCode() + " - " + connection.getResponseMessage())[ FD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_22 $$ throw new LibraryException(LibraryException.Code.REQUEST_FAILURE, connection.getResponseCode() + " - " + connection.getResponseMessage())[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_24 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ CD ]
Line_9 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_24 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_25 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_26 $$ String line[ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_27 $$ while ((line = rd.readLine()) != null) [ CD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException [ CD ]
Line_27 $$ while ((line = rd.readLine()) != null) -->Line_27 $$ while ((line = rd.readLine()) != null) [ FD ]
Line_26 $$ String line-->Line_27 $$ while ((line = rd.readLine()) != null) [ FD ]
Line_27 $$ while ((line = rd.readLine()) != null) -->Line_27 $$ while ((line = rd.readLine()) != null) [ CD ]
Line_24 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_27 $$ while ((line = rd.readLine()) != null) [ FD ]
Line_27 $$ while ((line = rd.readLine()) != null) -->Line_28 $$ sb.append(line)[ CD ]
Line_25 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append(line)[ FD ]
Line_27 $$ while ((line = rd.readLine()) != null) -->Line_28 $$ sb.append(line)[ FD ]
Line_26 $$ String line-->Line_28 $$ sb.append(line)[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_30 $$ rd.close()[ CD ]
Line_24 $$ BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_30 $$ rd.close()[ FD ]
Line_2 $$ public static Document send(String address, Document request) throws MalformedURLException, IOException -->Line_31 $$ if (logger.isDebugEnabled()) [ CD ]
Line_31 $$ if (logger.isDebugEnabled()) -->Line_31 $$ if (logger.isDebugEnabled()) [ CD ]
Line_31 $$ if (logger.isDebugEnabled()) -->Line_32 $$ logger.debug("Received Response" + sb.toString())[ CD ]
Line_25 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ logger.debug("Received Response" + sb.toString())[ FD ]
Line_35 $$ return XMLUtil.parseString(sb.toString())-->Line_35 $$ return XMLUtil.parseString(sb.toString())[ CD ]
Line_25 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ return XMLUtil.parseString(sb.toString())[ FD ]
Line_27 $$ while ((line = rd.readLine()) != null) -->Line_28 $$ sb.append(line)[ FD ]
