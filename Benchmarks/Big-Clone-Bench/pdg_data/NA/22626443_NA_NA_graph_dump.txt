Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) [ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_3 $$ FileOutputStream arcFile = null[ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_4 $$ JarOutputStream jout = null[ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_5 $$ DirectoryScanner ds = null[ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_6 $$ ds = new DirectoryScanner()[ CD ]
Line_5 $$ DirectoryScanner ds = null-->Line_6 $$ ds = new DirectoryScanner()[ FD ]
Line_6 $$ ds = new DirectoryScanner()-->Line_6 $$ ds = new DirectoryScanner()[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_7 $$ ds.setCaseSensitive(true)[ CD ]
Line_5 $$ DirectoryScanner ds = null-->Line_7 $$ ds.setCaseSensitive(true)[ FD ]
Line_6 $$ ds = new DirectoryScanner()-->Line_7 $$ ds.setCaseSensitive(true)[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_8 $$ ds.setBasedir(in)[ CD ]
Line_5 $$ DirectoryScanner ds = null-->Line_8 $$ ds.setBasedir(in)[ FD ]
Line_6 $$ ds = new DirectoryScanner()-->Line_8 $$ ds.setBasedir(in)[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_8 $$ ds.setBasedir(in)[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_9 $$ ds.scan()[ CD ]
Line_5 $$ DirectoryScanner ds = null-->Line_9 $$ ds.scan()[ FD ]
Line_6 $$ ds = new DirectoryScanner()-->Line_9 $$ ds.scan()[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_10 $$ ds.setCaseSensitive(true)[ CD ]
Line_5 $$ DirectoryScanner ds = null-->Line_10 $$ ds.setCaseSensitive(true)[ FD ]
Line_6 $$ ds = new DirectoryScanner()-->Line_10 $$ ds.setCaseSensitive(true)[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_11 $$ String[] names = ds.getIncludedFiles()[ CD ]
Line_11 $$ String[] names = ds.getIncludedFiles()-->Line_11 $$ String[] names = ds.getIncludedFiles()[ CD ]
Line_5 $$ DirectoryScanner ds = null-->Line_11 $$ String[] names = ds.getIncludedFiles()[ FD ]
Line_6 $$ ds = new DirectoryScanner()-->Line_11 $$ String[] names = ds.getIncludedFiles()[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_12 $$ ArrayList exName = new ArrayList()[ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_13 $$ if (names == null || names.length < 1)[ CD ]
Line_13 $$ if (names == null || names.length < 1)-->Line_13 $$ return null[ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_14 $$ File tempArc = new File(tempDir, outArc.substring(0, outArc.length()))[ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_14 $$ File tempArc = new File(tempDir, outArc.substring(0, outArc.length()))[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_14 $$ File tempArc = new File(tempDir, outArc.substring(0, outArc.length()))[ FD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_18 $$ for (int i = 0; i < names.length; i++) [ CD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_18 $$ for (int i = 0; i < names.length; i++) [ CD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_18 $$ for (int i = 0; i < names.length; i++) [ FD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_19 $$ if (names[i].toUpperCase().indexOf("MANIFEST.MF") > -1) [ CD ]
Line_19 $$ if (names[i].toUpperCase().indexOf("MANIFEST.MF") > -1) -->Line_20 $$ FileInputStream fis = new FileInputStream(in.getAbsolutePath() + "/" + names[i].replace('\\', '/'))[ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_20 $$ FileInputStream fis = new FileInputStream(in.getAbsolutePath() + "/" + names[i].replace('\\', '/'))[ FD ]
Line_19 $$ if (names[i].toUpperCase().indexOf("MANIFEST.MF") > -1) -->Line_21 $$ mf = new Manifest(fis)[ CD ]
Line_21 $$ mf = new Manifest(fis)-->Line_21 $$ mf = new Manifest(fis)[ FD ]
Line_16 $$ Manifest mf = null-->Line_21 $$ mf = new Manifest(fis)[ FD ]
Line_19 $$ if (names[i].toUpperCase().indexOf("MANIFEST.MF") > -1) -->Line_22 $$ v.add(names[i])[ CD ]
Line_17 $$ List v = new ArrayList()-->Line_22 $$ v.add(names[i])[ FD ]
Line_17 $$ List v = new ArrayList()-->Line_24 $$ String[] toJar = new String[v.size()][ FD ]
Line_17 $$ List v = new ArrayList()-->Line_25 $$ v.toArray(toJar)[ FD ]
Line_24 $$ String[] toJar = new String[v.size()]-->Line_25 $$ v.toArray(toJar)[ FD ]
Line_14 $$ File tempArc = new File(tempDir, outArc.substring(0, outArc.length()))-->Line_26 $$ tempArc.createNewFile()[ FD ]
Line_3 $$ FileOutputStream arcFile = null-->Line_27 $$ arcFile = new FileOutputStream(tempArc)[ FD ]
Line_27 $$ arcFile = new FileOutputStream(tempArc)-->Line_27 $$ arcFile = new FileOutputStream(tempArc)[ FD ]
Line_21 $$ mf = new Manifest(fis)-->Line_28 $$ if (mf == null)[ FD ]
Line_16 $$ Manifest mf = null-->Line_28 $$ if (mf == null)[ FD ]
Line_28 $$ if (mf == null)-->Line_28 $$ jout = new JarOutputStream(arcFile)[ CD ]
Line_4 $$ JarOutputStream jout = null-->Line_28 $$ jout = new JarOutputStream(arcFile)[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile)-->Line_28 $$ jout = new JarOutputStream(arcFile)[ FD ]
Line_28 $$ if (mf == null)-->Line_28 $$ jout = new JarOutputStream(arcFile, mf)[ CD ]
Line_4 $$ JarOutputStream jout = null-->Line_28 $$ jout = new JarOutputStream(arcFile, mf)[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile)-->Line_28 $$ jout = new JarOutputStream(arcFile, mf)[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile, mf)-->Line_28 $$ jout = new JarOutputStream(arcFile, mf)[ FD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ CD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ CD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ FD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_31 $$ if (conf != null) [ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_31 $$ if (conf != null) [ FD ]
Line_31 $$ if (conf != null) -->Line_32 $$ if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) [ CD ]
Line_32 $$ if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) -->Line_32 $$ if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) [ CD ]
Line_32 $$ if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) -->Line_32 $$ if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) [ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_32 $$ if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) [ FD ]
Line_32 $$ if (!conf.allowFileAction(toJar[i], PatchConfigXML.OP_CREATE)) -->Line_33 $$ exName.add(toJar[i])[ CD ]
Line_12 $$ ArrayList exName = new ArrayList()-->Line_33 $$ exName.add(toJar[i])[ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_37 $$ String currentPath = in.getAbsolutePath() + "/" + toJar[i][ CD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_37 $$ String currentPath = in.getAbsolutePath() + "/" + toJar[i][ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_38 $$ String entryName = toJar[i].replace('\\', '/')[ CD ]
Line_38 $$ String entryName = toJar[i].replace('\\', '/')-->Line_38 $$ String entryName = toJar[i].replace('\\', '/')[ CD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_39 $$ JarEntry currentEntry = new JarEntry(entryName)[ CD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_40 $$ jout.putNextEntry(currentEntry)[ CD ]
Line_4 $$ JarOutputStream jout = null-->Line_40 $$ jout.putNextEntry(currentEntry)[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile)-->Line_40 $$ jout.putNextEntry(currentEntry)[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile, mf)-->Line_40 $$ jout.putNextEntry(currentEntry)[ FD ]
Line_39 $$ JarEntry currentEntry = new JarEntry(entryName)-->Line_40 $$ jout.putNextEntry(currentEntry)[ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_41 $$ FileInputStream fis = new FileInputStream(currentPath)[ CD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_42 $$ int len[ CD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)[ CD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ CD ]
Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)-->Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)[ FD ]
Line_42 $$ int len-->Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)[ FD ]
Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)-->Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)[ CD ]
Line_41 $$ FileInputStream fis = new FileInputStream(currentPath)-->Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)[ FD ]
Line_20 $$ FileInputStream fis = new FileInputStream(in.getAbsolutePath() + "/" + names[i].replace('\\', '/'))-->Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)[ FD ]
Line_29 $$ byte[] buffer = new byte[1024]-->Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)[ FD ]
Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)-->Line_43 $$ jout.write(buffer, 0, len)[ CD ]
Line_4 $$ JarOutputStream jout = null-->Line_43 $$ jout.write(buffer, 0, len)[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile)-->Line_43 $$ jout.write(buffer, 0, len)[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile, mf)-->Line_43 $$ jout.write(buffer, 0, len)[ FD ]
Line_29 $$ byte[] buffer = new byte[1024]-->Line_43 $$ jout.write(buffer, 0, len)[ FD ]
Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)-->Line_43 $$ jout.write(buffer, 0, len)[ FD ]
Line_42 $$ int len-->Line_43 $$ jout.write(buffer, 0, len)[ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_44 $$ fis.close()[ CD ]
Line_41 $$ FileInputStream fis = new FileInputStream(currentPath)-->Line_44 $$ fis.close()[ FD ]
Line_20 $$ FileInputStream fis = new FileInputStream(in.getAbsolutePath() + "/" + names[i].replace('\\', '/'))-->Line_44 $$ fis.close()[ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_45 $$ jout.closeEntry()[ CD ]
Line_4 $$ JarOutputStream jout = null-->Line_45 $$ jout.closeEntry()[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile)-->Line_45 $$ jout.closeEntry()[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile, mf)-->Line_45 $$ jout.closeEntry()[ FD ]
Line_4 $$ JarOutputStream jout = null-->Line_51 $$ jout.close()[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile)-->Line_51 $$ jout.close()[ FD ]
Line_28 $$ jout = new JarOutputStream(arcFile, mf)-->Line_51 $$ jout.close()[ FD ]
Line_3 $$ FileOutputStream arcFile = null-->Line_52 $$ arcFile.close()[ FD ]
Line_27 $$ arcFile = new FileOutputStream(tempArc)-->Line_52 $$ arcFile.close()[ FD ]
Line_2 $$ public static File jar(File in, String outArc, File tempDir, PatchConfigXML conf) -->Line_57 $$ return tempArc[ CD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_18 $$ for (int i = 0; i < names.length; i++) [ FD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_18 $$ for (int i = 0; i < names.length; i++) [ FD ]
Line_18 $$ for (int i = 0; i < names.length; i++) -->Line_18 $$ for (int i = 0; i < names.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < toJar.length; i++) -->Line_30 $$ for (int i = 0; i < toJar.length; i++) [ FD ]
Line_39 $$ JarEntry currentEntry = new JarEntry(entryName)-->Line_40 $$ jout.putNextEntry(currentEntry)[ FD ]
Line_41 $$ FileInputStream fis = new FileInputStream(currentPath)-->Line_44 $$ fis.close()[ FD ]
Line_43 $$ while ((len = fis.read(buffer)) >= 0) jout.write(buffer, 0, len)-->Line_43 $$ jout.write(buffer, 0, len)[ FD ]
