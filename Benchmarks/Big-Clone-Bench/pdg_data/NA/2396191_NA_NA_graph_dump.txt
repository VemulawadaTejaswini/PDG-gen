Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception [ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_3 $$ timeCheck("getLinksFromURLFast ")[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_4 $$ URL x_url = new URL(p_url)[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_5 $$ URLConnection x_conn = x_url.openConnection()[ CD ]
Line_5 $$ URLConnection x_conn = x_url.openConnection()-->Line_5 $$ URLConnection x_conn = x_url.openConnection()[ CD ]
Line_4 $$ URL x_url = new URL(p_url)-->Line_5 $$ URLConnection x_conn = x_url.openConnection()[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_6 $$ InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream())[ CD ]
Line_5 $$ URLConnection x_conn = x_url.openConnection()-->Line_6 $$ InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream())[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_7 $$ BufferedReader x_reader = new BufferedReader(x_is_reader)[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_8 $$ String x_line = null[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_10 $$ System.out.println("RE: " + e.toString())[ CD ]
Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)-->Line_10 $$ System.out.println("RE: " + e.toString())[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_11 $$ REMatch x_match = e.getMatch(p_url)[ CD ]
Line_11 $$ REMatch x_match = e.getMatch(p_url)-->Line_11 $$ REMatch x_match = e.getMatch(p_url)[ CD ]
Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)-->Line_11 $$ REMatch x_match = e.getMatch(p_url)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_11 $$ REMatch x_match = e.getMatch(p_url)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_12 $$ String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ CD ]
Line_12 $$ String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))-->Line_12 $$ String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_12 $$ String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_11 $$ REMatch x_match = e.getMatch(p_url)-->Line_12 $$ String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_11 $$ REMatch x_match = e.getMatch(p_url)-->Line_12 $$ String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)[ CD ]
Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)-->Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)[ FD ]
Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)-->Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_14 $$ x_match = e.getMatch(p_url)[ CD ]
Line_11 $$ REMatch x_match = e.getMatch(p_url)-->Line_14 $$ x_match = e.getMatch(p_url)[ FD ]
Line_14 $$ x_match = e.getMatch(p_url)-->Line_14 $$ x_match = e.getMatch(p_url)[ FD ]
Line_14 $$ x_match = e.getMatch(p_url)-->Line_14 $$ x_match = e.getMatch(p_url)[ CD ]
Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)-->Line_14 $$ x_match = e.getMatch(p_url)[ FD ]
Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)-->Line_14 $$ x_match = e.getMatch(p_url)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_14 $$ x_match = e.getMatch(p_url)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ CD ]
Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))-->Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_11 $$ REMatch x_match = e.getMatch(p_url)-->Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_14 $$ x_match = e.getMatch(p_url)-->Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_11 $$ REMatch x_match = e.getMatch(p_url)-->Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_14 $$ x_match = e.getMatch(p_url)-->Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_16 $$ e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE)[ CD ]
Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)-->Line_16 $$ e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE)[ FD ]
Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)-->Line_16 $$ e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE)[ FD ]
Line_16 $$ e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE)-->Line_16 $$ e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_17 $$ System.out.println("RE: " + e.toString())[ CD ]
Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)-->Line_17 $$ System.out.println("RE: " + e.toString())[ FD ]
Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)-->Line_17 $$ System.out.println("RE: " + e.toString())[ FD ]
Line_16 $$ e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE)-->Line_17 $$ System.out.println("RE: " + e.toString())[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_18 $$ Vector x_links = new Vector(100)[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_19 $$ Vector x_texts = new Vector(100)[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_20 $$ StringBuffer x_buf = new StringBuffer(10000)[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_21 $$ REMatch[] x_matches = null[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_22 $$ timeCheck("starting parsing ")[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_23 $$ while ((x_line = x_reader.readLine()) != null) [ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception [ CD ]
Line_23 $$ while ((x_line = x_reader.readLine()) != null) -->Line_23 $$ while ((x_line = x_reader.readLine()) != null) [ FD ]
Line_8 $$ String x_line = null-->Line_23 $$ while ((x_line = x_reader.readLine()) != null) [ FD ]
Line_23 $$ while ((x_line = x_reader.readLine()) != null) -->Line_23 $$ while ((x_line = x_reader.readLine()) != null) [ CD ]
Line_7 $$ BufferedReader x_reader = new BufferedReader(x_is_reader)-->Line_23 $$ while ((x_line = x_reader.readLine()) != null) [ FD ]
Line_23 $$ while ((x_line = x_reader.readLine()) != null) -->Line_24 $$ x_buf.append(x_line)[ CD ]
Line_20 $$ StringBuffer x_buf = new StringBuffer(10000)-->Line_24 $$ x_buf.append(x_line)[ FD ]
Line_23 $$ while ((x_line = x_reader.readLine()) != null) -->Line_24 $$ x_buf.append(x_line)[ FD ]
Line_8 $$ String x_line = null-->Line_24 $$ x_buf.append(x_line)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_26 $$ String x_page = x_buf.toString()[ CD ]
Line_26 $$ String x_page = x_buf.toString()-->Line_26 $$ String x_page = x_buf.toString()[ CD ]
Line_20 $$ StringBuffer x_buf = new StringBuffer(10000)-->Line_26 $$ String x_page = x_buf.toString()[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_27 $$ String x_link = null[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_28 $$ x_matches = e.getAllMatches(x_page)[ CD ]
Line_21 $$ REMatch[] x_matches = null-->Line_28 $$ x_matches = e.getAllMatches(x_page)[ FD ]
Line_28 $$ x_matches = e.getAllMatches(x_page)-->Line_28 $$ x_matches = e.getAllMatches(x_page)[ FD ]
Line_28 $$ x_matches = e.getAllMatches(x_page)-->Line_28 $$ x_matches = e.getAllMatches(x_page)[ CD ]
Line_9 $$ RE e = new RE("(.*/)", RE.REG_ICASE)-->Line_28 $$ x_matches = e.getAllMatches(x_page)[ FD ]
Line_13 $$ e = new RE("(http://.*?)/?", RE.REG_ICASE)-->Line_28 $$ x_matches = e.getAllMatches(x_page)[ FD ]
Line_16 $$ e = new RE("<a href=\"?(.*?)\"?>(.*?)</a>", RE.REG_ICASE)-->Line_28 $$ x_matches = e.getAllMatches(x_page)[ FD ]
Line_26 $$ String x_page = x_buf.toString()-->Line_28 $$ x_matches = e.getAllMatches(x_page)[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_29 $$ for (int i = 0; i < x_matches.length; i++) [ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception [ CD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_29 $$ for (int i = 0; i < x_matches.length; i++) [ CD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_29 $$ for (int i = 0; i < x_matches.length; i++) [ CD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_29 $$ for (int i = 0; i < x_matches.length; i++) [ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))[ CD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))[ FD ]
Line_27 $$ String x_link = null-->Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))[ FD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))[ CD ]
Line_26 $$ String x_page = x_buf.toString()-->Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))[ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_31 $$ if (x_link.indexOf("mailto:") != -1)[ CD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_31 $$ if (x_link.indexOf("mailto:") != -1)[ FD ]
Line_27 $$ String x_link = null-->Line_31 $$ if (x_link.indexOf("mailto:") != -1)[ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ CD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_27 $$ String x_link = null-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ CD ]
Line_15 $$ String x_root = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_12 $$ String x_dir = p_url.substring(x_match.getSubStartIndex(1), x_match.getSubEndIndex(1))-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_27 $$ String x_link = null-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_33 $$ x_links.addElement(x_link)[ CD ]
Line_18 $$ Vector x_links = new Vector(100)-->Line_33 $$ x_links.addElement(x_link)[ FD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_33 $$ x_links.addElement(x_link)[ FD ]
Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)-->Line_33 $$ x_links.addElement(x_link)[ FD ]
Line_27 $$ String x_link = null-->Line_33 $$ x_links.addElement(x_link)[ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_34 $$ x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)))[ CD ]
Line_19 $$ Vector x_texts = new Vector(100)-->Line_34 $$ x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)))[ FD ]
Line_26 $$ String x_page = x_buf.toString()-->Line_34 $$ x_texts.addElement(x_page.substring(x_matches[i].getSubStartIndex(2), x_matches[i].getSubEndIndex(2)))[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_36 $$ Vector[] x_result = new Vector[2][ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_37 $$ x_result[0] = x_links[ CD ]
Line_18 $$ Vector x_links = new Vector(100)-->Line_37 $$ x_result[0] = x_links[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_38 $$ x_result[1] = x_texts[ CD ]
Line_19 $$ Vector x_texts = new Vector(100)-->Line_38 $$ x_result[1] = x_texts[ FD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_39 $$ timeCheck("end parsing ")[ CD ]
Line_2 $$ public static Vector[] getLinksFromURLFast(String p_url) throws Exception -->Line_40 $$ return x_result[ CD ]
Line_23 $$ while ((x_line = x_reader.readLine()) != null) -->Line_24 $$ x_buf.append(x_line)[ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_29 $$ for (int i = 0; i < x_matches.length; i++) [ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_29 $$ for (int i = 0; i < x_matches.length; i++) [ FD ]
Line_29 $$ for (int i = 0; i < x_matches.length; i++) -->Line_29 $$ for (int i = 0; i < x_matches.length; i++) [ FD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_31 $$ if (x_link.indexOf("mailto:") != -1)[ FD ]
Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)-->Line_31 $$ if (x_link.indexOf("mailto:") != -1)[ FD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)-->Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)[ FD ]
Line_30 $$ x_link = x_page.substring(x_matches[i].getSubStartIndex(1), x_matches[i].getSubEndIndex(1))-->Line_33 $$ x_links.addElement(x_link)[ FD ]
Line_32 $$ x_link = toAbsolute(x_root, x_dir, x_link)-->Line_33 $$ x_links.addElement(x_link)[ FD ]
