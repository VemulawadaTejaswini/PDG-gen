Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception [ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_3 $$ List<String> requestLines = new ArrayList<String>()[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_4 $$ InputStream is = clientConnection.getInputStream()[ CD ]
Line_4 $$ InputStream is = clientConnection.getInputStream()-->Line_4 $$ InputStream is = clientConnection.getInputStream()[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_4 $$ InputStream is = clientConnection.getInputStream()[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())[ CD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_7 $$ if (!st.hasMoreTokens()) [ CD ]
Line_7 $$ if (!st.hasMoreTokens()) -->Line_7 $$ if (!st.hasMoreTokens()) [ CD ]
Line_7 $$ if (!st.hasMoreTokens()) -->Line_7 $$ if (!st.hasMoreTokens()) [ CD ]
Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())-->Line_7 $$ if (!st.hasMoreTokens()) [ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_10 $$ String method = st.nextToken()[ CD ]
Line_10 $$ String method = st.nextToken()-->Line_10 $$ String method = st.nextToken()[ CD ]
Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())-->Line_10 $$ String method = st.nextToken()[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_11 $$ if (!st.hasMoreTokens()) [ CD ]
Line_11 $$ if (!st.hasMoreTokens()) -->Line_11 $$ if (!st.hasMoreTokens()) [ CD ]
Line_11 $$ if (!st.hasMoreTokens()) -->Line_11 $$ if (!st.hasMoreTokens()) [ CD ]
Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())-->Line_11 $$ if (!st.hasMoreTokens()) [ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_14 $$ String uri = decodePercent(st.nextToken())[ CD ]
Line_14 $$ String uri = decodePercent(st.nextToken())-->Line_14 $$ String uri = decodePercent(st.nextToken())[ CD ]
Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())-->Line_14 $$ String uri = decodePercent(st.nextToken())[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_15 $$ if (!st.hasMoreTokens()) [ CD ]
Line_15 $$ if (!st.hasMoreTokens()) -->Line_15 $$ if (!st.hasMoreTokens()) [ CD ]
Line_15 $$ if (!st.hasMoreTokens()) -->Line_15 $$ if (!st.hasMoreTokens()) [ CD ]
Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())-->Line_15 $$ if (!st.hasMoreTokens()) [ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_18 $$ String version = st.nextToken()[ CD ]
Line_18 $$ String version = st.nextToken()-->Line_18 $$ String version = st.nextToken()[ CD ]
Line_6 $$ StringTokenizer st = new StringTokenizer(in.readLine())-->Line_18 $$ String version = st.nextToken()[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_19 $$ Properties parms = new Properties()[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_20 $$ int qmi = uri.indexOf('?')[ CD ]
Line_20 $$ int qmi = uri.indexOf('?')-->Line_20 $$ int qmi = uri.indexOf('?')[ CD ]
Line_14 $$ String uri = decodePercent(st.nextToken())-->Line_20 $$ int qmi = uri.indexOf('?')[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_21 $$ if (qmi >= 0) [ CD ]
Line_20 $$ int qmi = uri.indexOf('?')-->Line_21 $$ if (qmi >= 0) [ FD ]
Line_21 $$ if (qmi >= 0) -->Line_22 $$ decodeParms(uri.substring(qmi + 1), parms)[ CD ]
Line_19 $$ Properties parms = new Properties()-->Line_22 $$ decodeParms(uri.substring(qmi + 1), parms)[ FD ]
Line_14 $$ String uri = decodePercent(st.nextToken())-->Line_22 $$ decodeParms(uri.substring(qmi + 1), parms)[ FD ]
Line_21 $$ if (qmi >= 0) -->Line_23 $$ uri = decodePercent(uri.substring(0, qmi))[ CD ]
Line_14 $$ String uri = decodePercent(st.nextToken())-->Line_23 $$ uri = decodePercent(uri.substring(0, qmi))[ FD ]
Line_23 $$ uri = decodePercent(uri.substring(0, qmi))-->Line_23 $$ uri = decodePercent(uri.substring(0, qmi))[ FD ]
Line_23 $$ uri = decodePercent(uri.substring(0, qmi))-->Line_23 $$ uri = decodePercent(uri.substring(0, qmi))[ CD ]
Line_14 $$ String uri = decodePercent(st.nextToken())-->Line_23 $$ uri = decodePercent(uri.substring(0, qmi))[ FD ]
Line_23 $$ uri = decodePercent(uri.substring(0, qmi))-->Line_23 $$ uri = decodePercent(uri.substring(0, qmi))[ FD ]
Line_20 $$ int qmi = uri.indexOf('?')-->Line_23 $$ uri = decodePercent(uri.substring(0, qmi))[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_25 $$ String params = ""[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_26 $$ if (parms.size() > 0) [ CD ]
Line_19 $$ Properties parms = new Properties()-->Line_26 $$ if (parms.size() > 0) [ FD ]
Line_26 $$ if (parms.size() > 0) -->Line_27 $$ params = "?"[ CD ]
Line_25 $$ String params = ""-->Line_27 $$ params = "?"[ FD ]
Line_27 $$ params = "?"-->Line_27 $$ params = "?"[ FD ]
Line_19 $$ Properties parms = new Properties()-->Line_28 $$ for (Object key : parms.keySet()) [ FD ]
Line_25 $$ String params = ""-->Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"[ FD ]
Line_27 $$ params = "?"-->Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"[ FD ]
Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"-->Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"[ FD ]
Line_19 $$ Properties parms = new Properties()-->Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"[ FD ]
Line_26 $$ if (parms.size() > 0) -->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ CD ]
Line_25 $$ String params = ""-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_27 $$ params = "?"-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ CD ]
Line_25 $$ String params = ""-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_27 $$ params = "?"-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_25 $$ String params = ""-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_27 $$ params = "?"-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_29 $$ params = params + key + "=" + parms.getProperty(((String) key)) + "&"-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")-->Line_31 $$ params = params.substring(0, params.length() - 1).replace(" ", "%20")[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_33 $$ logger.debug("HTTP Request: " + method + " " + uri + params + " " + version)[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_34 $$ requestLines.add(method + " " + uri + params + " " + version)[ CD ]
Line_3 $$ List<String> requestLines = new ArrayList<String>()-->Line_34 $$ requestLines.add(method + " " + uri + params + " " + version)[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_35 $$ Properties headerVars = new Properties()[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_36 $$ String line[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_37 $$ String currentBoundary = null[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_38 $$ Stack<String> boundaryStack = new Stack<String>()[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_39 $$ boolean readingBoundary = false[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_40 $$ String additionalData = ""[ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_41 $$ while (in.ready() && (line = in.readLine()) != null) [ CD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception [ CD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_41 $$ while (in.ready() && (line = in.readLine()) != null) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_41 $$ while (in.ready() && (line = in.readLine()) != null) [ FD ]
Line_36 $$ String line-->Line_41 $$ while (in.ready() && (line = in.readLine()) != null) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_41 $$ while (in.ready() && (line = in.readLine()) != null) [ CD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_41 $$ while (in.ready() && (line = in.readLine()) != null) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_42 $$ if (line.equals("") && (headerVars.get("Content-Type") == null || headerVars.get("Content-Length") == null)) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_42 $$ if (line.equals("") && (headerVars.get("Content-Type") == null || headerVars.get("Content-Length") == null)) [ FD ]
Line_36 $$ String line-->Line_42 $$ if (line.equals("") && (headerVars.get("Content-Type") == null || headerVars.get("Content-Length") == null)) [ FD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_42 $$ if (line.equals("") && (headerVars.get("Content-Type") == null || headerVars.get("Content-Length") == null)) [ FD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_42 $$ if (line.equals("") && (headerVars.get("Content-Type") == null || headerVars.get("Content-Length") == null)) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_45 $$ logger.debug("HTTP Request Header: " + line)[ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_46 $$ if (line.contains(": ")) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_36 $$ String line-->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_46 $$ if (line.contains(": ")) -->Line_46 $$ if (line.contains(": ")) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_36 $$ String line-->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_46 $$ if (line.contains(": ")) -->Line_47 $$ String vals[] = line.split(": ")[ CD ]
Line_47 $$ String vals[] = line.split(": ")-->Line_47 $$ String vals[] = line.split(": ")[ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_47 $$ String vals[] = line.split(": ")[ FD ]
Line_36 $$ String line-->Line_47 $$ String vals[] = line.split(": ")[ FD ]
Line_46 $$ if (line.contains(": ")) -->Line_48 $$ headerVars.put(vals[0].trim(), vals[1].trim())[ CD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_48 $$ headerVars.put(vals[0].trim(), vals[1].trim())[ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ CD ]
Line_39 $$ boolean readingBoundary = false-->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ FD ]
Line_36 $$ String line-->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ FD ]
Line_50 $$ if (!readingBoundary && line.contains(": ")) -->Line_51 $$ if (line.contains("boundary=")) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_36 $$ String line-->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_51 $$ if (line.contains("boundary=")) -->Line_51 $$ if (line.contains("boundary=")) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_36 $$ String line-->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_51 $$ if (line.contains("boundary=")) -->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ CD ]
Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()-->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ FD ]
Line_37 $$ String currentBoundary = null-->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ FD ]
Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()-->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ FD ]
Line_36 $$ String line-->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ FD ]
Line_51 $$ if (line.contains("boundary=")) -->Line_53 $$ boundaryStack.push("--" + currentBoundary)[ CD ]
Line_38 $$ Stack<String> boundaryStack = new Stack<String>()-->Line_53 $$ boundaryStack.push("--" + currentBoundary)[ FD ]
Line_50 $$ if (!readingBoundary && line.contains(": ")) -->Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) [ FD ]
Line_36 $$ String line-->Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) [ FD ]
Line_38 $$ Stack<String> boundaryStack = new Stack<String>()-->Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) [ FD ]
Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) -->Line_57 $$ int val = Integer.parseInt((String) headerVars.get("Content-Length"))[ CD ]
Line_57 $$ int val = Integer.parseInt((String) headerVars.get("Content-Length"))-->Line_57 $$ int val = Integer.parseInt((String) headerVars.get("Content-Length"))[ CD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_57 $$ int val = Integer.parseInt((String) headerVars.get("Content-Length"))[ FD ]
Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) -->Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) [ CD ]
Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) -->Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) [ CD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) [ FD ]
Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) -->Line_59 $$ char buf[] = new char[val][ CD ]
Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) -->Line_60 $$ int read = in.read(buf)[ CD ]
Line_60 $$ int read = in.read(buf)-->Line_60 $$ int read = in.read(buf)[ CD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_60 $$ int read = in.read(buf)[ FD ]
Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) -->Line_61 $$ line = String.valueOf(buf, 0, read)[ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_61 $$ line = String.valueOf(buf, 0, read)[ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_61 $$ line = String.valueOf(buf, 0, read)[ FD ]
Line_36 $$ String line-->Line_61 $$ line = String.valueOf(buf, 0, read)[ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_61 $$ line = String.valueOf(buf, 0, read)[ CD ]
Line_60 $$ int read = in.read(buf)-->Line_61 $$ line = String.valueOf(buf, 0, read)[ FD ]
Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) -->Line_62 $$ additionalData = line[ CD ]
Line_62 $$ additionalData = line-->Line_62 $$ additionalData = line[ FD ]
Line_40 $$ String additionalData = ""-->Line_62 $$ additionalData = line[ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_62 $$ additionalData = line[ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_62 $$ additionalData = line[ FD ]
Line_36 $$ String line-->Line_62 $$ additionalData = line[ FD ]
Line_58 $$ if (headerVars.getProperty("Content-Type").contains("x-www-form-urlencoded")) -->Line_63 $$ logger.debug("HTTP Request Header Form Parameters: " + line)[ CD ]
Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) -->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_36 $$ String line-->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_38 $$ Stack<String> boundaryStack = new Stack<String>()-->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_39 $$ boolean readingBoundary = false-->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) -->Line_66 $$ readingBoundary = true[ CD ]
Line_66 $$ readingBoundary = true-->Line_66 $$ readingBoundary = true[ FD ]
Line_39 $$ boolean readingBoundary = false-->Line_66 $$ readingBoundary = true[ FD ]
Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) -->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ CD ]
Line_66 $$ readingBoundary = true-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_39 $$ boolean readingBoundary = false-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_36 $$ String line-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_38 $$ Stack<String> boundaryStack = new Stack<String>()-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) -->Line_68 $$ readingBoundary = false[ CD ]
Line_66 $$ readingBoundary = true-->Line_68 $$ readingBoundary = false[ FD ]
Line_68 $$ readingBoundary = false-->Line_68 $$ readingBoundary = false[ FD ]
Line_39 $$ boolean readingBoundary = false-->Line_68 $$ readingBoundary = false[ FD ]
Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) -->Line_69 $$ if (line.contains(": ") && readingBoundary) [ CD ]
Line_66 $$ readingBoundary = true-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_68 $$ readingBoundary = false-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_39 $$ boolean readingBoundary = false-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_36 $$ String line-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_69 $$ if (line.contains(": ") && readingBoundary) -->Line_70 $$ if (method.equalsIgnoreCase("PUT")) [ CD ]
Line_10 $$ String method = st.nextToken()-->Line_70 $$ if (method.equalsIgnoreCase("PUT")) [ FD ]
Line_70 $$ if (method.equalsIgnoreCase("PUT")) -->Line_70 $$ if (method.equalsIgnoreCase("PUT")) [ CD ]
Line_10 $$ String method = st.nextToken()-->Line_70 $$ if (method.equalsIgnoreCase("PUT")) [ FD ]
Line_70 $$ if (method.equalsIgnoreCase("PUT")) -->Line_71 $$ if (line.contains("form-data; ")) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_36 $$ String line-->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_71 $$ if (line.contains("form-data; ")) -->Line_71 $$ if (line.contains("form-data; ")) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_36 $$ String line-->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_71 $$ if (line.contains("form-data; ")) -->Line_72 $$ String formValues = line.split("form-data; ")[1][ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_72 $$ String formValues = line.split("form-data; ")[1][ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_72 $$ String formValues = line.split("form-data; ")[1][ FD ]
Line_36 $$ String line-->Line_72 $$ String formValues = line.split("form-data; ")[1][ FD ]
Line_72 $$ String formValues = line.split("form-data; ")[1]-->Line_73 $$ for (String varValue : formValues.replace("\"", "").split("; ")) [ FD ]
Line_74 $$ String[] vV = varValue.split("=")-->Line_74 $$ String[] vV = varValue.split("=")[ CD ]
Line_73 $$ for (String varValue : formValues.replace("\"", "").split("; ")) -->Line_74 $$ String[] vV = varValue.split("=")[ FD ]
Line_75 $$ vV[0] = decodePercent(vV[0])-->Line_75 $$ vV[0] = decodePercent(vV[0])[ CD ]
Line_76 $$ vV[1] = decodePercent(vV[1])-->Line_76 $$ vV[1] = decodePercent(vV[1])[ CD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_77 $$ headerVars.put(vV[0], vV[1])[ FD ]
Line_69 $$ if (line.contains(": ") && readingBoundary) -->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ CD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ FD ]
Line_36 $$ String line-->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ FD ]
Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) -->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ CD ]
Line_38 $$ Stack<String> boundaryStack = new Stack<String>()-->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ FD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ FD ]
Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) -->Line_82 $$ int length = Integer.parseInt(headerVars.getProperty("Content-Length"))[ CD ]
Line_82 $$ int length = Integer.parseInt(headerVars.getProperty("Content-Length"))-->Line_82 $$ int length = Integer.parseInt(headerVars.getProperty("Content-Length"))[ CD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_82 $$ int length = Integer.parseInt(headerVars.getProperty("Content-Length"))[ FD ]
Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) -->Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) [ CD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) [ CD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) [ FD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))[ CD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_85 $$ if (!uploadFilePath.exists()) [ CD ]
Line_85 $$ if (!uploadFilePath.exists()) -->Line_85 $$ if (!uploadFilePath.exists()) [ CD ]
Line_85 $$ if (!uploadFilePath.exists()) -->Line_85 $$ if (!uploadFilePath.exists()) [ CD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_85 $$ if (!uploadFilePath.exists()) [ FD ]
Line_85 $$ if (!uploadFilePath.exists()) -->Line_86 $$ logger.error("Temporaty dir does not exist: " + uploadFilePath.getCanonicalPath())[ CD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_86 $$ logger.error("Temporaty dir does not exist: " + uploadFilePath.getCanonicalPath())[ FD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_88 $$ if (!uploadFilePath.isDirectory()) [ CD ]
Line_88 $$ if (!uploadFilePath.isDirectory()) -->Line_88 $$ if (!uploadFilePath.isDirectory()) [ CD ]
Line_88 $$ if (!uploadFilePath.isDirectory()) -->Line_88 $$ if (!uploadFilePath.isDirectory()) [ CD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_88 $$ if (!uploadFilePath.isDirectory()) [ FD ]
Line_88 $$ if (!uploadFilePath.isDirectory()) -->Line_89 $$ logger.error("Temporary dir is not a directory: " + uploadFilePath.getCanonicalPath())[ CD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_89 $$ logger.error("Temporary dir is not a directory: " + uploadFilePath.getCanonicalPath())[ FD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_91 $$ if (!uploadFilePath.canWrite()) [ CD ]
Line_91 $$ if (!uploadFilePath.canWrite()) -->Line_91 $$ if (!uploadFilePath.canWrite()) [ CD ]
Line_91 $$ if (!uploadFilePath.canWrite()) -->Line_91 $$ if (!uploadFilePath.canWrite()) [ CD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_91 $$ if (!uploadFilePath.canWrite()) [ FD ]
Line_91 $$ if (!uploadFilePath.canWrite()) -->Line_92 $$ logger.error("VOctopus Webserver doesn't have permissions to write on temporary dir: " + uploadFilePath.getCanonicalPath())[ CD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_92 $$ logger.error("VOctopus Webserver doesn't have permissions to write on temporary dir: " + uploadFilePath.getCanonicalPath())[ FD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_94 $$ FileOutputStream out = null[ CD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_96 $$ String putUploadPath = uploadFilePath.getAbsolutePath() + "/" + headerVars.getProperty("filename")[ FD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_96 $$ String putUploadPath = uploadFilePath.getAbsolutePath() + "/" + headerVars.getProperty("filename")[ FD ]
Line_94 $$ FileOutputStream out = null-->Line_97 $$ out = new FileOutputStream(putUploadPath)[ FD ]
Line_97 $$ out = new FileOutputStream(putUploadPath)-->Line_97 $$ out = new FileOutputStream(putUploadPath)[ FD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) [ FD ]
Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) -->Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) [ FD ]
Line_99 $$ int c-->Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) [ FD ]
Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) -->Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) [ CD ]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(is))-->Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) [ FD ]
Line_82 $$ int length = Integer.parseInt(headerVars.getProperty("Content-Length"))-->Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) [ FD ]
Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) -->Line_101 $$ outf.write(c)[ CD ]
Line_98 $$ OutputStream outf = new BufferedOutputStream(out)-->Line_101 $$ outf.write(c)[ FD ]
Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) -->Line_101 $$ outf.write(c)[ FD ]
Line_99 $$ int c-->Line_101 $$ outf.write(c)[ FD ]
Line_94 $$ FileOutputStream out = null-->Line_104 $$ if (out != null) [ FD ]
Line_97 $$ out = new FileOutputStream(putUploadPath)-->Line_104 $$ if (out != null) [ FD ]
Line_104 $$ if (out != null) -->Line_105 $$ out.close()[ CD ]
Line_94 $$ FileOutputStream out = null-->Line_105 $$ out.close()[ FD ]
Line_97 $$ out = new FileOutputStream(putUploadPath)-->Line_105 $$ out.close()[ FD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_108 $$ File copied = new File(VOctopusConfigurationManager.getInstance().getDocumentRootPath() + uri + headerVars.get("filename"))[ FD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_109 $$ File tempFile = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory") + "/" + headerVars.get("filename"))[ FD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_110 $$ FileChannel ic = new FileInputStream(tempFile.getAbsolutePath()).getChannel()[ CD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_111 $$ FileChannel oc = new FileOutputStream(copied.getAbsolutePath()).getChannel()[ CD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_112 $$ ic.transferTo(0, ic.size(), oc)[ CD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_113 $$ ic.close()[ CD ]
Line_83 $$ if (headerVars.getProperty("Content-Transfer-Encoding").contains("binary")) -->Line_114 $$ oc.close()[ CD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_118 $$ for (Object var : headerVars.keySet()) [ FD ]
Line_3 $$ List<String> requestLines = new ArrayList<String>()-->Line_119 $$ requestLines.add(var + ": " + headerVars.get(var))[ FD ]
Line_35 $$ Properties headerVars = new Properties()-->Line_119 $$ requestLines.add(var + ": " + headerVars.get(var))[ FD ]
Line_118 $$ for (Object var : headerVars.keySet()) -->Line_119 $$ requestLines.add(var + ": " + headerVars.get(var))[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_121 $$ if (!additionalData.equals("")) [ CD ]
Line_121 $$ if (!additionalData.equals("")) -->Line_121 $$ if (!additionalData.equals("")) [ CD ]
Line_121 $$ if (!additionalData.equals("")) -->Line_121 $$ if (!additionalData.equals("")) [ CD ]
Line_62 $$ additionalData = line-->Line_121 $$ if (!additionalData.equals("")) [ FD ]
Line_40 $$ String additionalData = ""-->Line_121 $$ if (!additionalData.equals("")) [ FD ]
Line_121 $$ if (!additionalData.equals("")) -->Line_122 $$ requestLines.add("ADDITIONAL" + additionalData)[ CD ]
Line_3 $$ List<String> requestLines = new ArrayList<String>()-->Line_122 $$ requestLines.add("ADDITIONAL" + additionalData)[ FD ]
Line_2 $$ private String[] verifyConnection(Socket clientConnection) throws Exception -->Line_124 $$ return requestLines.toArray(new String[requestLines.size()])[ CD ]
Line_124 $$ return requestLines.toArray(new String[requestLines.size()])-->Line_124 $$ return requestLines.toArray(new String[requestLines.size()])[ CD ]
Line_3 $$ List<String> requestLines = new ArrayList<String>()-->Line_124 $$ return requestLines.toArray(new String[requestLines.size()])[ FD ]
Line_3 $$ List<String> requestLines = new ArrayList<String>()-->Line_124 $$ return requestLines.toArray(new String[requestLines.size()])[ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_42 $$ if (line.equals("") && (headerVars.get("Content-Type") == null || headerVars.get("Content-Length") == null)) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_42 $$ if (line.equals("") && (headerVars.get("Content-Type") == null || headerVars.get("Content-Length") == null)) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_46 $$ if (line.contains(": ")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_47 $$ String vals[] = line.split(": ")[ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_47 $$ String vals[] = line.split(": ")[ FD ]
Line_66 $$ readingBoundary = true-->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ FD ]
Line_68 $$ readingBoundary = false-->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_50 $$ if (!readingBoundary && line.contains(": ")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_51 $$ if (line.contains("boundary=")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_52 $$ currentBoundary = line.split("boundary=")[1].trim()[ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_56 $$ if (line.equals("") && boundaryStack.isEmpty()) [ FD ]
Line_60 $$ int read = in.read(buf)-->Line_61 $$ line = String.valueOf(buf, 0, read)[ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_62 $$ additionalData = line[ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_62 $$ additionalData = line[ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_66 $$ readingBoundary = true-->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_68 $$ readingBoundary = false-->Line_65 $$ if (line.equals(boundaryStack.peek()) && !readingBoundary) [ FD ]
Line_66 $$ readingBoundary = true-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_68 $$ readingBoundary = false-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_67 $$ if (line.equals(boundaryStack.peek()) && readingBoundary) [ FD ]
Line_66 $$ readingBoundary = true-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_68 $$ readingBoundary = false-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_69 $$ if (line.contains(": ") && readingBoundary) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_71 $$ if (line.contains("form-data; ")) [ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_72 $$ String formValues = line.split("form-data; ")[1][ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_72 $$ String formValues = line.split("form-data; ")[1][ FD ]
Line_72 $$ String formValues = line.split("form-data; ")[1]-->Line_73 $$ for (String varValue : formValues.replace("\"", "").split("; ")) [ FD ]
Line_73 $$ for (String varValue : formValues.replace("\"", "").split("; ")) -->Line_74 $$ String[] vV = varValue.split("=")[ FD ]
Line_41 $$ while (in.ready() && (line = in.readLine()) != null) -->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ FD ]
Line_61 $$ line = String.valueOf(buf, 0, read)-->Line_81 $$ if (line.contains("") && readingBoundary && !boundaryStack.isEmpty() && headerVars.get("filename") != null) [ FD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_85 $$ if (!uploadFilePath.exists()) [ FD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_86 $$ logger.error("Temporaty dir does not exist: " + uploadFilePath.getCanonicalPath())[ FD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_88 $$ if (!uploadFilePath.isDirectory()) [ FD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_89 $$ logger.error("Temporary dir is not a directory: " + uploadFilePath.getCanonicalPath())[ FD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_91 $$ if (!uploadFilePath.canWrite()) [ FD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_92 $$ logger.error("VOctopus Webserver doesn't have permissions to write on temporary dir: " + uploadFilePath.getCanonicalPath())[ FD ]
Line_84 $$ File uploadFilePath = new File(VOctopusConfigurationManager.WebServerProperties.HTTPD_CONF.getPropertyValue("TempDirectory"))-->Line_96 $$ String putUploadPath = uploadFilePath.getAbsolutePath() + "/" + headerVars.getProperty("filename")[ FD ]
Line_94 $$ FileOutputStream out = null-->Line_104 $$ if (out != null) [ FD ]
Line_97 $$ out = new FileOutputStream(putUploadPath)-->Line_104 $$ if (out != null) [ FD ]
Line_94 $$ FileOutputStream out = null-->Line_105 $$ out.close()[ FD ]
Line_97 $$ out = new FileOutputStream(putUploadPath)-->Line_105 $$ out.close()[ FD ]
Line_100 $$ while (in.ready() && (c = in.read()) != -1 && length-- > 0) -->Line_101 $$ outf.write(c)[ FD ]
