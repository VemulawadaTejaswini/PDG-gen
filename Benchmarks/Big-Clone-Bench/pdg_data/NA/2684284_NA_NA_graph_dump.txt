Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public DAS getDAS() throws MalformedURLException, IOException, ParseException, DASException, DODSException [ CD ]
Line_2 $$ public DAS getDAS() throws MalformedURLException, IOException, ParseException, DASException, DODSException -->Line_3 $$ InputStream is[ CD ]
Line_2 $$ public DAS getDAS() throws MalformedURLException, IOException, ParseException, DASException, DODSException -->Line_4 $$ if (fileStream != null)[ CD ]
Line_4 $$ if (fileStream != null)-->Line_4 $$ is = parseMime(fileStream)[ CD ]
Line_3 $$ InputStream is-->Line_4 $$ is = parseMime(fileStream)[ FD ]
Line_4 $$ is = parseMime(fileStream)-->Line_4 $$ is = parseMime(fileStream)[ FD ]
Line_4 $$ is = parseMime(fileStream)-->Line_4 $$ is = parseMime(fileStream)[ CD ]
Line_4 $$ if (fileStream != null)-->Line_5 $$ URL url = new URL(urlString + ".das" + projString + selString)[ CD ]
Line_4 $$ if (fileStream != null)-->Line_6 $$ if (dumpDAS) [ CD ]
Line_6 $$ if (dumpDAS) -->Line_7 $$ System.out.println("--DConnect.getDAS to " + url)[ CD ]
Line_6 $$ if (dumpDAS) -->Line_8 $$ copy(url.openStream(), System.out)[ CD ]
Line_5 $$ URL url = new URL(urlString + ".das" + projString + selString)-->Line_8 $$ copy(url.openStream(), System.out)[ FD ]
Line_6 $$ if (dumpDAS) -->Line_9 $$ System.out.println("\n--DConnect.getDAS END1")[ CD ]
Line_6 $$ if (dumpDAS) -->Line_10 $$ dumpBytes(url.openStream(), 100)[ CD ]
Line_5 $$ URL url = new URL(urlString + ".das" + projString + selString)-->Line_10 $$ dumpBytes(url.openStream(), 100)[ FD ]
Line_6 $$ if (dumpDAS) -->Line_11 $$ System.out.println("\n-DConnect.getDAS END2")[ CD ]
Line_4 $$ if (fileStream != null)-->Line_13 $$ is = openConnection(url)[ CD ]
Line_3 $$ InputStream is-->Line_13 $$ is = openConnection(url)[ FD ]
Line_4 $$ is = parseMime(fileStream)-->Line_13 $$ is = openConnection(url)[ FD ]
Line_13 $$ is = openConnection(url)-->Line_13 $$ is = openConnection(url)[ FD ]
Line_13 $$ is = openConnection(url)-->Line_13 $$ is = openConnection(url)[ CD ]
Line_5 $$ URL url = new URL(urlString + ".das" + projString + selString)-->Line_13 $$ is = openConnection(url)[ FD ]
Line_2 $$ public DAS getDAS() throws MalformedURLException, IOException, ParseException, DASException, DODSException -->Line_15 $$ DAS das = new DAS()[ CD ]
Line_15 $$ DAS das = new DAS()-->Line_17 $$ das.parse(is)[ FD ]
Line_3 $$ InputStream is-->Line_17 $$ das.parse(is)[ FD ]
Line_4 $$ is = parseMime(fileStream)-->Line_17 $$ das.parse(is)[ FD ]
Line_13 $$ is = openConnection(url)-->Line_17 $$ das.parse(is)[ FD ]
Line_3 $$ InputStream is-->Line_19 $$ is.close()[ FD ]
Line_4 $$ is = parseMime(fileStream)-->Line_19 $$ is.close()[ FD ]
Line_13 $$ is = openConnection(url)-->Line_19 $$ is.close()[ FD ]
Line_20 $$ if (connection instanceof HttpURLConnection)-->Line_20 $$ ((HttpURLConnection) connection).disconnect()[ CD ]
Line_2 $$ public DAS getDAS() throws MalformedURLException, IOException, ParseException, DASException, DODSException -->Line_22 $$ return das[ CD ]
