Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception [ CD ]
Line_2 $$ private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception -->Line_3 $$ if (!entry.isDirectory()) [ CD ]
Line_3 $$ if (!entry.isDirectory()) -->Line_3 $$ if (!entry.isDirectory()) [ CD ]
Line_3 $$ if (!entry.isDirectory()) -->Line_3 $$ if (!entry.isDirectory()) [ CD ]
Line_2 $$ private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception -->Line_3 $$ if (!entry.isDirectory()) [ FD ]
Line_3 $$ if (!entry.isDirectory()) -->Line_4 $$ createFolders(destinationFile.getParentFile())[ CD ]
Line_2 $$ private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception -->Line_4 $$ createFolders(destinationFile.getParentFile())[ FD ]
Line_3 $$ if (!entry.isDirectory()) -->Line_5 $$ FileOutputStream fis = new FileOutputStream(destinationFile)[ CD ]
Line_2 $$ private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception -->Line_7 $$ IOUtils.copy(zin, fis)[ FD ]
Line_5 $$ FileOutputStream fis = new FileOutputStream(destinationFile)-->Line_7 $$ IOUtils.copy(zin, fis)[ FD ]
Line_2 $$ private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception -->Line_9 $$ zin.closeEntry()[ FD ]
Line_5 $$ FileOutputStream fis = new FileOutputStream(destinationFile)-->Line_10 $$ fis.close()[ FD ]
Line_3 $$ if (!entry.isDirectory()) -->Line_13 $$ createFolders(destinationFile)[ CD ]
Line_2 $$ private static void unpackEntry(File destinationFile, ZipInputStream zin, ZipEntry entry) throws Exception -->Line_13 $$ createFolders(destinationFile)[ FD ]
