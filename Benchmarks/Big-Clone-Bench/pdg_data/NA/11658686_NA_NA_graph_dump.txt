Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException [ CD ]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_3 $$ response.setContentType("application/zip")[ CD ]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_3 $$ response.setContentType("application/zip")[ FD ]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_4 $$ response.setHeader("Content-Disposition", "inline; filename=c:/server1.zip")[ CD ]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_4 $$ response.setHeader("Content-Disposition", "inline; filename=c:/server1.zip")[ FD ]
Line_10 $$ java.util.Properties props = new java.util.Properties()-->Line_11 $$ props.load(new java.io.FileInputStream(ejb.bprocess.util.NewGenLibRoot.getRoot() + "/SystemFiles/ENV_VAR.txt"))[ FD ]
Line_12 $$ String jbossHomePath = props.getProperty("JBOSS_HOME")-->Line_12 $$ String jbossHomePath = props.getProperty("JBOSS_HOME")[ CD ]
Line_10 $$ java.util.Properties props = new java.util.Properties()-->Line_12 $$ String jbossHomePath = props.getProperty("JBOSS_HOME")[ FD ]
Line_12 $$ String jbossHomePath = props.getProperty("JBOSS_HOME")-->Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")[ FD ]
Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")-->Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")[ FD ]
Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")-->Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")[ CD ]
Line_12 $$ String jbossHomePath = props.getProperty("JBOSS_HOME")-->Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")[ FD ]
Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")-->Line_13 $$ jbossHomePath = jbossHomePath.replaceAll("deploy", "log")[ FD ]
Line_6 $$ BufferedInputStream origin = null-->Line_15 $$ origin = new BufferedInputStream(fis, BUFFER)[ FD ]
Line_15 $$ origin = new BufferedInputStream(fis, BUFFER)-->Line_15 $$ origin = new BufferedInputStream(fis, BUFFER)[ FD ]
Line_8 $$ ZipOutputStream zipOut = new ZipOutputStream(new BufferedOutputStream(dest))-->Line_17 $$ zipOut.putNextEntry(entry)[ FD ]
Line_16 $$ ZipEntry entry = new ZipEntry(jbossHomePath + "/server.log")-->Line_17 $$ zipOut.putNextEntry(entry)[ FD ]
Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) -->Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) [ FD ]
Line_18 $$ int count-->Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) [ FD ]
Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) -->Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) [ CD ]
Line_6 $$ BufferedInputStream origin = null-->Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) [ FD ]
Line_15 $$ origin = new BufferedInputStream(fis, BUFFER)-->Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) [ FD ]
Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) -->Line_20 $$ zipOut.write(data, 0, count)[ CD ]
Line_8 $$ ZipOutputStream zipOut = new ZipOutputStream(new BufferedOutputStream(dest))-->Line_20 $$ zipOut.write(data, 0, count)[ FD ]
Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) -->Line_20 $$ zipOut.write(data, 0, count)[ FD ]
Line_18 $$ int count-->Line_20 $$ zipOut.write(data, 0, count)[ FD ]
Line_6 $$ BufferedInputStream origin = null-->Line_22 $$ origin.close()[ FD ]
Line_15 $$ origin = new BufferedInputStream(fis, BUFFER)-->Line_22 $$ origin.close()[ FD ]
Line_8 $$ ZipOutputStream zipOut = new ZipOutputStream(new BufferedOutputStream(dest))-->Line_23 $$ zipOut.closeEntry()[ FD ]
Line_25 $$ java.nio.channels.FileChannel fc1 = fis1.getChannel()-->Line_25 $$ java.nio.channels.FileChannel fc1 = fis1.getChannel()[ CD ]
Line_24 $$ java.io.FileInputStream fis1 = new java.io.FileInputStream(new java.io.File("server.zip"))-->Line_25 $$ java.nio.channels.FileChannel fc1 = fis1.getChannel()[ FD ]
Line_25 $$ java.nio.channels.FileChannel fc1 = fis1.getChannel()-->Line_26 $$ int length1 = (int) fc1.size()[ FD ]
Line_24 $$ java.io.FileInputStream fis1 = new java.io.FileInputStream(new java.io.File("server.zip"))-->Line_29 $$ fis1.read(buffer)[ FD ]
Line_30 $$ OutputStream out1 = response.getOutputStream()-->Line_30 $$ OutputStream out1 = response.getOutputStream()[ CD ]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_30 $$ OutputStream out1 = response.getOutputStream()[ FD ]
Line_30 $$ OutputStream out1 = response.getOutputStream()-->Line_31 $$ out1.write(buffer)[ FD ]
Line_24 $$ java.io.FileInputStream fis1 = new java.io.FileInputStream(new java.io.File("server.zip"))-->Line_32 $$ fis1.close()[ FD ]
Line_30 $$ OutputStream out1 = response.getOutputStream()-->Line_33 $$ out1.close()[ FD ]
Line_19 $$ while ((count = origin.read(data, 0, BUFFER)) != -1) -->Line_20 $$ zipOut.write(data, 0, count)[ FD ]
