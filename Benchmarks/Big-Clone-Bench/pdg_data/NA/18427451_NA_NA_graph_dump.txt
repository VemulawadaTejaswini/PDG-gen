Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ static void cleanFile(File file) [ CD ]
Line_2 $$ static void cleanFile(File file) -->Line_3 $$ final Counter cnt = new Counter()[ CD ]
Line_2 $$ static void cleanFile(File file) -->Line_4 $$ final File out = new File(FileUtils.appendToFileName(file.getAbsolutePath(), ".cleaned"))[ CD ]
Line_2 $$ static void cleanFile(File file) -->Line_4 $$ final File out = new File(FileUtils.appendToFileName(file.getAbsolutePath(), ".cleaned"))[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_5 $$ final SAMFileReader reader = new SAMFileReader(file)[ CD ]
Line_2 $$ static void cleanFile(File file) -->Line_6 $$ final SAMRecordIterator it = reader.iterator()[ CD ]
Line_6 $$ final SAMRecordIterator it = reader.iterator()-->Line_6 $$ final SAMRecordIterator it = reader.iterator()[ CD ]
Line_5 $$ final SAMFileReader reader = new SAMFileReader(file)-->Line_6 $$ final SAMRecordIterator it = reader.iterator()[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)[ CD ]
Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)-->Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)[ CD ]
Line_4 $$ final File out = new File(FileUtils.appendToFileName(file.getAbsolutePath(), ".cleaned"))-->Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)[ FD ]
Line_5 $$ final SAMFileReader reader = new SAMFileReader(file)-->Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_8 $$ if (!it.hasNext())[ CD ]
Line_8 $$ if (!it.hasNext())-->Line_8 $$ if (!it.hasNext())[ CD ]
Line_8 $$ if (!it.hasNext())-->Line_8 $$ if (!it.hasNext())[ CD ]
Line_6 $$ final SAMRecordIterator it = reader.iterator()-->Line_8 $$ if (!it.hasNext())[ FD ]
Line_8 $$ if (!it.hasNext())-->Line_8 $$ return[ CD ]
Line_2 $$ static void cleanFile(File file) -->Line_9 $$ log.info("Cleaning file " + file + " to " + out.getName())[ CD ]
Line_4 $$ final File out = new File(FileUtils.appendToFileName(file.getAbsolutePath(), ".cleaned"))-->Line_9 $$ log.info("Cleaning file " + file + " to " + out.getName())[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_10 $$ SAMRecord last = it.next()[ CD ]
Line_10 $$ SAMRecord last = it.next()-->Line_10 $$ SAMRecord last = it.next()[ CD ]
Line_6 $$ final SAMRecordIterator it = reader.iterator()-->Line_10 $$ SAMRecord last = it.next()[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_11 $$ writer.addAlignment(last)[ CD ]
Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)-->Line_11 $$ writer.addAlignment(last)[ FD ]
Line_10 $$ SAMRecord last = it.next()-->Line_11 $$ writer.addAlignment(last)[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_12 $$ while (it.hasNext()) [ CD ]
Line_2 $$ static void cleanFile(File file) -->Line_2 $$ static void cleanFile(File file) [ CD ]
Line_12 $$ while (it.hasNext()) -->Line_12 $$ while (it.hasNext()) [ CD ]
Line_6 $$ final SAMRecordIterator it = reader.iterator()-->Line_12 $$ while (it.hasNext()) [ FD ]
Line_12 $$ while (it.hasNext()) -->Line_13 $$ final SAMRecord now = it.next()[ CD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_13 $$ final SAMRecord now = it.next()[ CD ]
Line_6 $$ final SAMRecordIterator it = reader.iterator()-->Line_13 $$ final SAMRecord now = it.next()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_14 $$ final int start1 = last.getAlignmentStart()[ CD ]
Line_14 $$ final int start1 = last.getAlignmentStart()-->Line_14 $$ final int start1 = last.getAlignmentStart()[ CD ]
Line_10 $$ SAMRecord last = it.next()-->Line_14 $$ final int start1 = last.getAlignmentStart()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_15 $$ final int start2 = now.getAlignmentStart()[ CD ]
Line_15 $$ final int start2 = now.getAlignmentStart()-->Line_15 $$ final int start2 = now.getAlignmentStart()[ CD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_15 $$ final int start2 = now.getAlignmentStart()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_16 $$ final int end1 = last.getAlignmentEnd()[ CD ]
Line_16 $$ final int end1 = last.getAlignmentEnd()-->Line_16 $$ final int end1 = last.getAlignmentEnd()[ CD ]
Line_10 $$ SAMRecord last = it.next()-->Line_16 $$ final int end1 = last.getAlignmentEnd()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_17 $$ final int end2 = now.getAlignmentEnd()[ CD ]
Line_17 $$ final int end2 = now.getAlignmentEnd()-->Line_17 $$ final int end2 = now.getAlignmentEnd()[ CD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_17 $$ final int end2 = now.getAlignmentEnd()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_18 $$ if (start1 == start2 && end1 == end2) [ CD ]
Line_18 $$ if (start1 == start2 && end1 == end2) -->Line_19 $$ log.debug("Discarding record " + now.toString())[ CD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_19 $$ log.debug("Discarding record " + now.toString())[ FD ]
Line_18 $$ if (start1 == start2 && end1 == end2) -->Line_20 $$ cnt.count()[ CD ]
Line_3 $$ final Counter cnt = new Counter()-->Line_20 $$ cnt.count()[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_23 $$ writer.addAlignment(now)[ CD ]
Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)-->Line_23 $$ writer.addAlignment(now)[ FD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_23 $$ writer.addAlignment(now)[ FD ]
Line_12 $$ while (it.hasNext()) -->Line_24 $$ last = now[ CD ]
Line_24 $$ last = now-->Line_24 $$ last = now[ FD ]
Line_10 $$ SAMRecord last = it.next()-->Line_24 $$ last = now[ FD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_24 $$ last = now[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_26 $$ writer.close()[ CD ]
Line_7 $$ final SAMFileWriter writer = new SAMFileWriterFactory().makeSAMOrBAMWriter(reader.getFileHeader(), true, out)-->Line_26 $$ writer.close()[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_27 $$ reader.close()[ CD ]
Line_5 $$ final SAMFileReader reader = new SAMFileReader(file)-->Line_27 $$ reader.close()[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_28 $$ log.info(file + " done, discarded " + cnt.getCount() + " reads")[ CD ]
Line_3 $$ final Counter cnt = new Counter()-->Line_28 $$ log.info(file + " done, discarded " + cnt.getCount() + " reads")[ FD ]
Line_2 $$ static void cleanFile(File file) -->Line_29 $$ exe.shutdown()[ CD ]
Line_24 $$ last = now-->Line_14 $$ final int start1 = last.getAlignmentStart()[ FD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_15 $$ final int start2 = now.getAlignmentStart()[ FD ]
Line_24 $$ last = now-->Line_16 $$ final int end1 = last.getAlignmentEnd()[ FD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_17 $$ final int end2 = now.getAlignmentEnd()[ FD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_19 $$ log.debug("Discarding record " + now.toString())[ FD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_23 $$ writer.addAlignment(now)[ FD ]
Line_13 $$ final SAMRecord now = it.next()-->Line_24 $$ last = now[ FD ]
