Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException [ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_3 $$ ChallengeAction challengeAction[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_4 $$ ManagerResponse challengeResponse[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_5 $$ String challenge[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_6 $$ String key[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_7 $$ LoginAction loginAction[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_8 $$ ManagerResponse loginResponse[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_9 $$ if (socket == null) [ CD ]
Line_9 $$ if (socket == null) -->Line_10 $$ connect()[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_15 $$ protocolIdentifier.wait(timeout)[ FD ]
Line_20 $$ if (protocolIdentifier.value == null) -->Line_21 $$ disconnect()[ CD ]
Line_20 $$ if (protocolIdentifier.value == null) -->Line_22 $$ if (reader != null && reader.getTerminationException() != null) [ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_29 $$ challengeAction = new ChallengeAction("MD5")[ CD ]
Line_3 $$ ChallengeAction challengeAction-->Line_29 $$ challengeAction = new ChallengeAction("MD5")[ FD ]
Line_29 $$ challengeAction = new ChallengeAction("MD5")-->Line_29 $$ challengeAction = new ChallengeAction("MD5")[ FD ]
Line_4 $$ ManagerResponse challengeResponse-->Line_31 $$ challengeResponse = sendAction(challengeAction)[ FD ]
Line_31 $$ challengeResponse = sendAction(challengeAction)-->Line_31 $$ challengeResponse = sendAction(challengeAction)[ FD ]
Line_31 $$ challengeResponse = sendAction(challengeAction)-->Line_31 $$ challengeResponse = sendAction(challengeAction)[ CD ]
Line_3 $$ ChallengeAction challengeAction-->Line_31 $$ challengeResponse = sendAction(challengeAction)[ FD ]
Line_29 $$ challengeAction = new ChallengeAction("MD5")-->Line_31 $$ challengeResponse = sendAction(challengeAction)[ FD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_36 $$ if (challengeResponse instanceof ChallengeResponse) [ CD ]
Line_4 $$ ManagerResponse challengeResponse-->Line_36 $$ if (challengeResponse instanceof ChallengeResponse) [ FD ]
Line_31 $$ challengeResponse = sendAction(challengeAction)-->Line_36 $$ if (challengeResponse instanceof ChallengeResponse) [ FD ]
Line_36 $$ if (challengeResponse instanceof ChallengeResponse) -->Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()[ CD ]
Line_5 $$ String challenge-->Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()[ FD ]
Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()-->Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()[ FD ]
Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()-->Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()[ CD ]
Line_36 $$ if (challengeResponse instanceof ChallengeResponse) -->Line_39 $$ disconnect()[ CD ]
Line_4 $$ ManagerResponse challengeResponse-->Line_40 $$ throw new AuthenticationFailedException("Unable to get challenge from Asterisk. ChallengeAction returned: " + challengeResponse.getMessage())[ FD ]
Line_31 $$ challengeResponse = sendAction(challengeAction)-->Line_40 $$ throw new AuthenticationFailedException("Unable to get challenge from Asterisk. ChallengeAction returned: " + challengeResponse.getMessage())[ FD ]
Line_43 $$ MessageDigest md-->Line_44 $$ md = MessageDigest.getInstance("MD5")[ FD ]
Line_44 $$ md = MessageDigest.getInstance("MD5")-->Line_44 $$ md = MessageDigest.getInstance("MD5")[ FD ]
Line_44 $$ md = MessageDigest.getInstance("MD5")-->Line_44 $$ md = MessageDigest.getInstance("MD5")[ CD ]
Line_5 $$ String challenge-->Line_45 $$ if (challenge != null) [ FD ]
Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()-->Line_45 $$ if (challenge != null) [ FD ]
Line_45 $$ if (challenge != null) -->Line_46 $$ md.update(challenge.getBytes())[ CD ]
Line_43 $$ MessageDigest md-->Line_46 $$ md.update(challenge.getBytes())[ FD ]
Line_44 $$ md = MessageDigest.getInstance("MD5")-->Line_46 $$ md.update(challenge.getBytes())[ FD ]
Line_5 $$ String challenge-->Line_46 $$ md.update(challenge.getBytes())[ FD ]
Line_37 $$ challenge = ((ChallengeResponse) challengeResponse).getChallenge()-->Line_46 $$ md.update(challenge.getBytes())[ FD ]
Line_48 $$ if (password != null) -->Line_49 $$ md.update(password.getBytes())[ CD ]
Line_43 $$ MessageDigest md-->Line_49 $$ md.update(password.getBytes())[ FD ]
Line_44 $$ md = MessageDigest.getInstance("MD5")-->Line_49 $$ md.update(password.getBytes())[ FD ]
Line_6 $$ String key-->Line_51 $$ key = ManagerUtil.toHexString(md.digest())[ FD ]
Line_51 $$ key = ManagerUtil.toHexString(md.digest())-->Line_51 $$ key = ManagerUtil.toHexString(md.digest())[ FD ]
Line_51 $$ key = ManagerUtil.toHexString(md.digest())-->Line_51 $$ key = ManagerUtil.toHexString(md.digest())[ CD ]
Line_43 $$ MessageDigest md-->Line_51 $$ key = ManagerUtil.toHexString(md.digest())[ FD ]
Line_44 $$ md = MessageDigest.getInstance("MD5")-->Line_51 $$ key = ManagerUtil.toHexString(md.digest())[ FD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_56 $$ loginAction = new LoginAction(username, "MD5", key, eventMask)[ CD ]
Line_7 $$ LoginAction loginAction-->Line_56 $$ loginAction = new LoginAction(username, "MD5", key, eventMask)[ FD ]
Line_56 $$ loginAction = new LoginAction(username, "MD5", key, eventMask)-->Line_56 $$ loginAction = new LoginAction(username, "MD5", key, eventMask)[ FD ]
Line_8 $$ ManagerResponse loginResponse-->Line_58 $$ loginResponse = sendAction(loginAction)[ FD ]
Line_58 $$ loginResponse = sendAction(loginAction)-->Line_58 $$ loginResponse = sendAction(loginAction)[ FD ]
Line_58 $$ loginResponse = sendAction(loginAction)-->Line_58 $$ loginResponse = sendAction(loginAction)[ CD ]
Line_7 $$ LoginAction loginAction-->Line_58 $$ loginResponse = sendAction(loginAction)[ FD ]
Line_56 $$ loginAction = new LoginAction(username, "MD5", key, eventMask)-->Line_58 $$ loginResponse = sendAction(loginAction)[ FD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_63 $$ if (loginResponse instanceof ManagerError) [ CD ]
Line_8 $$ ManagerResponse loginResponse-->Line_63 $$ if (loginResponse instanceof ManagerError) [ FD ]
Line_58 $$ loginResponse = sendAction(loginAction)-->Line_63 $$ if (loginResponse instanceof ManagerError) [ FD ]
Line_63 $$ if (loginResponse instanceof ManagerError) -->Line_64 $$ disconnect()[ CD ]
Line_8 $$ ManagerResponse loginResponse-->Line_65 $$ throw new AuthenticationFailedException(loginResponse.getMessage())[ FD ]
Line_58 $$ loginResponse = sendAction(loginAction)-->Line_65 $$ throw new AuthenticationFailedException(loginResponse.getMessage())[ FD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_68 $$ logger.info("Successfully logged in")[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_69 $$ version = determineVersion()[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_70 $$ writer.setTargetVersion(version)[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_71 $$ logger.info("Determined Asterisk version: " + version)[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_72 $$ ConnectEvent connectEvent = new ConnectEvent(this)[ CD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_73 $$ connectEvent.setProtocolIdentifier(getProtocolIdentifier())[ CD ]
Line_72 $$ ConnectEvent connectEvent = new ConnectEvent(this)-->Line_73 $$ connectEvent.setProtocolIdentifier(getProtocolIdentifier())[ FD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_74 $$ connectEvent.setDateReceived(DateUtil.getDate())[ CD ]
Line_72 $$ ConnectEvent connectEvent = new ConnectEvent(this)-->Line_74 $$ connectEvent.setDateReceived(DateUtil.getDate())[ FD ]
Line_2 $$ protected synchronized void doLogin(long timeout, String eventMask) throws IOException, AuthenticationFailedException, TimeoutException -->Line_75 $$ fireEvent(connectEvent)[ CD ]
Line_72 $$ ConnectEvent connectEvent = new ConnectEvent(this)-->Line_75 $$ fireEvent(connectEvent)[ FD ]
