Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException [ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_3 $$ InputStream is = null[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_4 $$ OutputStream os = null[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) [ CD ]
Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) -->Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) [ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) [ FD ]
Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) -->Line_6 $$ ServletFileUpload upload = new ServletFileUpload()[ CD ]
Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) -->Line_7 $$ FileItemIterator iter = upload.getItemIterator(rr.getRequest())[ CD ]
Line_7 $$ FileItemIterator iter = upload.getItemIterator(rr.getRequest())-->Line_7 $$ FileItemIterator iter = upload.getItemIterator(rr.getRequest())[ CD ]
Line_6 $$ ServletFileUpload upload = new ServletFileUpload()-->Line_7 $$ FileItemIterator iter = upload.getItemIterator(rr.getRequest())[ FD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_7 $$ FileItemIterator iter = upload.getItemIterator(rr.getRequest())[ FD ]
Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) -->Line_8 $$ while (iter.hasNext()) [ CD ]
Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) -->Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) [ CD ]
Line_8 $$ while (iter.hasNext()) -->Line_8 $$ while (iter.hasNext()) [ CD ]
Line_7 $$ FileItemIterator iter = upload.getItemIterator(rr.getRequest())-->Line_8 $$ while (iter.hasNext()) [ FD ]
Line_8 $$ while (iter.hasNext()) -->Line_9 $$ FileItemStream item = iter.next()[ CD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_9 $$ FileItemStream item = iter.next()[ CD ]
Line_7 $$ FileItemIterator iter = upload.getItemIterator(rr.getRequest())-->Line_9 $$ FileItemStream item = iter.next()[ FD ]
Line_8 $$ while (iter.hasNext()) -->Line_10 $$ if (!item.isFormField()) [ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_10 $$ if (!item.isFormField()) [ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_10 $$ if (!item.isFormField()) [ CD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_10 $$ if (!item.isFormField()) [ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_11 $$ is = item.openStream()[ CD ]
Line_11 $$ is = item.openStream()-->Line_11 $$ is = item.openStream()[ FD ]
Line_3 $$ InputStream is = null-->Line_11 $$ is = item.openStream()[ FD ]
Line_11 $$ is = item.openStream()-->Line_11 $$ is = item.openStream()[ CD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_11 $$ is = item.openStream()[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_12 $$ applyConversionsProperties(rr.getConversionProperties(), cpath)[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_12 $$ applyConversionsProperties(rr.getConversionProperties(), cpath)[ FD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_12 $$ applyConversionsProperties(rr.getConversionProperties(), cpath)[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)[ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_14 $$ String alloc = buffer.allocate(is)[ CD ]
Line_14 $$ String alloc = buffer.allocate(is)-->Line_14 $$ String alloc = buffer.allocate(is)[ CD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_14 $$ String alloc = buffer.allocate(is)[ FD ]
Line_11 $$ is = item.openStream()-->Line_14 $$ String alloc = buffer.allocate(is)[ FD ]
Line_3 $$ InputStream is = null-->Line_14 $$ String alloc = buffer.allocate(is)[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)[ CD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)[ CD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)[ FD ]
Line_14 $$ String alloc = buffer.allocate(is)-->Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_16 $$ is.close()[ CD ]
Line_11 $$ is = item.openStream()-->Line_16 $$ is.close()[ FD ]
Line_3 $$ InputStream is = null-->Line_16 $$ is.close()[ FD ]
Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())-->Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())[ FD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())[ FD ]
Line_19 $$ if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) -->Line_19 $$ if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) [ CD ]
Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())-->Line_19 $$ if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) [ FD ]
Line_19 $$ if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) -->Line_20 $$ ValidationServlet valServ = new ValidationServlet()[ CD ]
Line_19 $$ if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) -->Line_21 $$ valServ.printValidationResult(response, vRes)[ CD ]
Line_20 $$ ValidationServlet valServ = new ValidationServlet()-->Line_21 $$ valServ.printValidationResult(response, vRes)[ FD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_21 $$ valServ.printValidationResult(response, vRes)[ FD ]
Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())-->Line_21 $$ valServ.printValidationResult(response, vRes)[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_23 $$ ins.close()[ FD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_25 $$ buffer.removeData(alloc, true)[ FD ]
Line_14 $$ String alloc = buffer.allocate(is)-->Line_25 $$ buffer.removeData(alloc, true)[ FD ]
Line_19 $$ if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) -->Line_27 $$ return[ CD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_33 $$ ins.close()[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_37 $$ File zipFile = null[ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_38 $$ FileOutputStream fos = null[ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_39 $$ String newTemp = UUID.randomUUID().toString()[ CD ]
Line_39 $$ String newTemp = UUID.randomUUID().toString()-->Line_39 $$ String newTemp = UUID.randomUUID().toString()[ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_40 $$ IOResolver ior = EGEConfigurationManager.getInstance().getStandardIOResolver()[ CD ]
Line_40 $$ IOResolver ior = EGEConfigurationManager.getInstance().getStandardIOResolver()-->Line_40 $$ IOResolver ior = EGEConfigurationManager.getInstance().getStandardIOResolver()[ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_41 $$ File buffDir = new File(buffer.getDataDir(alloc))[ CD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_41 $$ File buffDir = new File(buffer.getDataDir(alloc))[ FD ]
Line_14 $$ String alloc = buffer.allocate(is)-->Line_41 $$ File buffDir = new File(buffer.getDataDir(alloc))[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)[ CD ]
Line_37 $$ File zipFile = null-->Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)[ FD ]
Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)-->Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_43 $$ fos = new FileOutputStream(zipFile)[ CD ]
Line_38 $$ FileOutputStream fos = null-->Line_43 $$ fos = new FileOutputStream(zipFile)[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_43 $$ fos = new FileOutputStream(zipFile)[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_44 $$ ior.compressData(buffDir, fos)[ CD ]
Line_40 $$ IOResolver ior = EGEConfigurationManager.getInstance().getStandardIOResolver()-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_41 $$ File buffDir = new File(buffer.getDataDir(alloc))-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_38 $$ FileOutputStream fos = null-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_45 $$ ins = new FileInputStream(zipFile)[ CD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_45 $$ ins = new FileInputStream(zipFile)[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_45 $$ ins = new FileInputStream(zipFile)[ FD ]
Line_10 $$ if (!item.isFormField()) -->Line_46 $$ File szipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + ZIP_EXT)[ CD ]
Line_10 $$ if (!item.isFormField()) -->Line_47 $$ fos = new FileOutputStream(szipFile)[ CD ]
Line_38 $$ FileOutputStream fos = null-->Line_47 $$ fos = new FileOutputStream(szipFile)[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_47 $$ fos = new FileOutputStream(szipFile)[ FD ]
Line_47 $$ fos = new FileOutputStream(szipFile)-->Line_47 $$ fos = new FileOutputStream(szipFile)[ FD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_38 $$ FileOutputStream fos = null-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_47 $$ fos = new FileOutputStream(szipFile)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_38 $$ FileOutputStream fos = null-->Line_52 $$ fos.close()[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_52 $$ fos.close()[ FD ]
Line_47 $$ fos = new FileOutputStream(szipFile)-->Line_52 $$ fos.close()[ FD ]
Line_54 $$ boolean isComplex = EGEIOUtils.isComplexZip(szipFile)-->Line_54 $$ boolean isComplex = EGEIOUtils.isComplexZip(szipFile)[ CD ]
Line_46 $$ File szipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + ZIP_EXT)-->Line_54 $$ boolean isComplex = EGEIOUtils.isComplexZip(szipFile)[ FD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_55 $$ response.setContentType(APPLICATION_OCTET_STREAM)[ FD ]
Line_56 $$ String fN = item.getName().substring(0, item.getName().lastIndexOf("."))-->Line_56 $$ String fN = item.getName().substring(0, item.getName().lastIndexOf("."))[ CD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_56 $$ String fN = item.getName().substring(0, item.getName().lastIndexOf("."))[ FD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_56 $$ String fN = item.getName().substring(0, item.getName().lastIndexOf("."))[ FD ]
Line_57 $$ if (isComplex) -->Line_58 $$ String fileExt[ CD ]
Line_57 $$ if (isComplex) -->Line_59 $$ if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) [ CD ]
Line_59 $$ if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) -->Line_59 $$ if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) [ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_59 $$ if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) [ FD ]
Line_59 $$ if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) -->Line_60 $$ fileExt = DOCX_EXT[ CD ]
Line_58 $$ String fileExt-->Line_60 $$ fileExt = DOCX_EXT[ FD ]
Line_60 $$ fileExt = DOCX_EXT-->Line_60 $$ fileExt = DOCX_EXT[ FD ]
Line_59 $$ if (cpath.getOutputDataType().getMimeType().equals(APPLICATION_MSWORD)) -->Line_62 $$ fileExt = ZIP_EXT[ CD ]
Line_58 $$ String fileExt-->Line_62 $$ fileExt = ZIP_EXT[ FD ]
Line_60 $$ fileExt = DOCX_EXT-->Line_62 $$ fileExt = ZIP_EXT[ FD ]
Line_62 $$ fileExt = ZIP_EXT-->Line_62 $$ fileExt = ZIP_EXT[ FD ]
Line_57 $$ if (isComplex) -->Line_64 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + fN + fileExt + "\"")[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_64 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + fN + fileExt + "\"")[ FD ]
Line_57 $$ if (isComplex) -->Line_65 $$ FileInputStream fis = new FileInputStream(szipFile)[ CD ]
Line_57 $$ if (isComplex) -->Line_66 $$ os = response.getOutputStream()[ CD ]
Line_66 $$ os = response.getOutputStream()-->Line_66 $$ os = response.getOutputStream()[ FD ]
Line_4 $$ OutputStream os = null-->Line_66 $$ os = response.getOutputStream()[ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_66 $$ os = response.getOutputStream()[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_66 $$ os = response.getOutputStream()[ FD ]
Line_65 $$ FileInputStream fis = new FileInputStream(szipFile)-->Line_68 $$ EGEIOUtils.copyStream(fis, os)[ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_68 $$ EGEIOUtils.copyStream(fis, os)[ FD ]
Line_4 $$ OutputStream os = null-->Line_68 $$ EGEIOUtils.copyStream(fis, os)[ FD ]
Line_65 $$ FileInputStream fis = new FileInputStream(szipFile)-->Line_70 $$ fis.close()[ FD ]
Line_57 $$ if (isComplex) -->Line_73 $$ String fileExt = getMimeExtensionProvider().getFileExtension(cpath.getOutputDataType().getMimeType())[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_73 $$ String fileExt = getMimeExtensionProvider().getFileExtension(cpath.getOutputDataType().getMimeType())[ FD ]
Line_57 $$ if (isComplex) -->Line_74 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + fN + fileExt + "\"")[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_74 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + fN + fileExt + "\"")[ FD ]
Line_57 $$ if (isComplex) -->Line_75 $$ os = response.getOutputStream()[ CD ]
Line_66 $$ os = response.getOutputStream()-->Line_75 $$ os = response.getOutputStream()[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_75 $$ os = response.getOutputStream()[ FD ]
Line_4 $$ OutputStream os = null-->Line_75 $$ os = response.getOutputStream()[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_75 $$ os = response.getOutputStream()[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_75 $$ os = response.getOutputStream()[ FD ]
Line_57 $$ if (isComplex) -->Line_76 $$ EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os)[ CD ]
Line_66 $$ os = response.getOutputStream()-->Line_76 $$ EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os)[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_76 $$ EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os)[ FD ]
Line_4 $$ OutputStream os = null-->Line_76 $$ EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os)[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_79 $$ ins.close()[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_79 $$ ins.close()[ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_80 $$ if (os != null) [ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_80 $$ if (os != null) [ FD ]
Line_4 $$ OutputStream os = null-->Line_80 $$ if (os != null) [ FD ]
Line_80 $$ if (os != null) -->Line_81 $$ os.flush()[ CD ]
Line_66 $$ os = response.getOutputStream()-->Line_81 $$ os.flush()[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_81 $$ os.flush()[ FD ]
Line_4 $$ OutputStream os = null-->Line_81 $$ os.flush()[ FD ]
Line_80 $$ if (os != null) -->Line_82 $$ os.close()[ CD ]
Line_66 $$ os = response.getOutputStream()-->Line_82 $$ os.close()[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_82 $$ os.close()[ FD ]
Line_4 $$ OutputStream os = null-->Line_82 $$ os.close()[ FD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_84 $$ buffer.clear(true)[ FD ]
Line_46 $$ File szipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + ZIP_EXT)-->Line_85 $$ szipFile.delete()[ FD ]
Line_37 $$ File zipFile = null-->Line_86 $$ if (zipFile != null) [ FD ]
Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)-->Line_86 $$ if (zipFile != null) [ FD ]
Line_86 $$ if (zipFile != null) -->Line_87 $$ zipFile.delete()[ CD ]
Line_37 $$ File zipFile = null-->Line_87 $$ zipFile.delete()[ FD ]
Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)-->Line_87 $$ zipFile.delete()[ FD ]
Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) -->Line_93 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST)[ CD ]
Line_2 $$ private void doConvert(HttpServletResponse response, ConversionRequestResolver rr, EGE ege, ConversionsPath cpath) throws FileUploadException, IOException, RequestResolvingException, EGEException, FileNotFoundException, ConverterException, ZipException -->Line_93 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST)[ FD ]
Line_5 $$ if (ServletFileUpload.isMultipartContent(rr.getRequest())) -->Line_94 $$ return[ CD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_10 $$ if (!item.isFormField()) [ FD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_11 $$ is = item.openStream()[ FD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_14 $$ String alloc = buffer.allocate(is)[ FD ]
Line_11 $$ is = item.openStream()-->Line_14 $$ String alloc = buffer.allocate(is)[ FD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)[ FD ]
Line_14 $$ String alloc = buffer.allocate(is)-->Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)[ FD ]
Line_11 $$ is = item.openStream()-->Line_16 $$ is.close()[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())[ FD ]
Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())-->Line_19 $$ if (vRes.getStatus().equals(ValidationResult.Status.FATAL)) [ FD ]
Line_20 $$ ValidationServlet valServ = new ValidationServlet()-->Line_21 $$ valServ.printValidationResult(response, vRes)[ FD ]
Line_18 $$ ValidationResult vRes = ege.performValidation(ins, cpath.getInputDataType())-->Line_21 $$ valServ.printValidationResult(response, vRes)[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_23 $$ ins.close()[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_23 $$ ins.close()[ FD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_25 $$ buffer.removeData(alloc, true)[ FD ]
Line_14 $$ String alloc = buffer.allocate(is)-->Line_25 $$ buffer.removeData(alloc, true)[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_33 $$ ins.close()[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_33 $$ ins.close()[ FD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_41 $$ File buffDir = new File(buffer.getDataDir(alloc))[ FD ]
Line_14 $$ String alloc = buffer.allocate(is)-->Line_41 $$ File buffDir = new File(buffer.getDataDir(alloc))[ FD ]
Line_40 $$ IOResolver ior = EGEConfigurationManager.getInstance().getStandardIOResolver()-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_41 $$ File buffDir = new File(buffer.getDataDir(alloc))-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_38 $$ FileOutputStream fos = null-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_47 $$ fos = new FileOutputStream(szipFile)-->Line_44 $$ ior.compressData(buffDir, fos)[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_38 $$ FileOutputStream fos = null-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_47 $$ fos = new FileOutputStream(szipFile)-->Line_50 $$ ege.performConversion(ins, fos, cpath)[ FD ]
Line_38 $$ FileOutputStream fos = null-->Line_52 $$ fos.close()[ FD ]
Line_43 $$ fos = new FileOutputStream(zipFile)-->Line_52 $$ fos.close()[ FD ]
Line_47 $$ fos = new FileOutputStream(szipFile)-->Line_52 $$ fos.close()[ FD ]
Line_46 $$ File szipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + ZIP_EXT)-->Line_54 $$ boolean isComplex = EGEIOUtils.isComplexZip(szipFile)[ FD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_56 $$ String fN = item.getName().substring(0, item.getName().lastIndexOf("."))[ FD ]
Line_9 $$ FileItemStream item = iter.next()-->Line_56 $$ String fN = item.getName().substring(0, item.getName().lastIndexOf("."))[ FD ]
Line_65 $$ FileInputStream fis = new FileInputStream(szipFile)-->Line_68 $$ EGEIOUtils.copyStream(fis, os)[ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_68 $$ EGEIOUtils.copyStream(fis, os)[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_68 $$ EGEIOUtils.copyStream(fis, os)[ FD ]
Line_65 $$ FileInputStream fis = new FileInputStream(szipFile)-->Line_70 $$ fis.close()[ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_76 $$ EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os)[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_76 $$ EGEIOUtils.unzipSingleFile(new ZipFile(szipFile), os)[ FD ]
Line_15 $$ InputStream ins = buffer.getDataAsStream(alloc)-->Line_79 $$ ins.close()[ FD ]
Line_45 $$ ins = new FileInputStream(zipFile)-->Line_79 $$ ins.close()[ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_80 $$ if (os != null) [ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_80 $$ if (os != null) [ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_81 $$ os.flush()[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_81 $$ os.flush()[ FD ]
Line_66 $$ os = response.getOutputStream()-->Line_82 $$ os.close()[ FD ]
Line_75 $$ os = response.getOutputStream()-->Line_82 $$ os.close()[ FD ]
Line_13 $$ DataBuffer buffer = new DataBuffer(0, EGEConstants.BUFFER_TEMP_PATH)-->Line_84 $$ buffer.clear(true)[ FD ]
Line_46 $$ File szipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + ZIP_EXT)-->Line_85 $$ szipFile.delete()[ FD ]
Line_37 $$ File zipFile = null-->Line_86 $$ if (zipFile != null) [ FD ]
Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)-->Line_86 $$ if (zipFile != null) [ FD ]
Line_37 $$ File zipFile = null-->Line_87 $$ zipFile.delete()[ FD ]
Line_42 $$ zipFile = new File(EGEConstants.BUFFER_TEMP_PATH + File.separator + newTemp + EZP_EXT)-->Line_87 $$ zipFile.delete()[ FD ]
