Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException [ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_3 $$ final String url = req.getParameter("url")[ CD ]
Line_3 $$ final String url = req.getParameter("url")-->Line_3 $$ final String url = req.getParameter("url")[ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_3 $$ final String url = req.getParameter("url")[ FD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_4 $$ if (!isAllowed(url)) [ CD ]
Line_4 $$ if (!isAllowed(url)) -->Line_4 $$ if (!isAllowed(url)) [ CD ]
Line_4 $$ if (!isAllowed(url)) -->Line_4 $$ if (!isAllowed(url)) [ CD ]
Line_3 $$ final String url = req.getParameter("url")-->Line_4 $$ if (!isAllowed(url)) [ FD ]
Line_4 $$ if (!isAllowed(url)) -->Line_5 $$ resp.setStatus(HttpServletResponse.SC_FORBIDDEN)[ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_5 $$ resp.setStatus(HttpServletResponse.SC_FORBIDDEN)[ FD ]
Line_4 $$ if (!isAllowed(url)) -->Line_6 $$ return[ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_8 $$ final HttpClient client = new HttpClient()[ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_9 $$ client.getParams().setVersion(HttpVersion.HTTP_1_0)[ CD ]
Line_8 $$ final HttpClient client = new HttpClient()-->Line_9 $$ client.getParams().setVersion(HttpVersion.HTTP_1_0)[ FD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_10 $$ final PostMethod method = new PostMethod(url)[ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_11 $$ method.getParams().setVersion(HttpVersion.HTTP_1_0)[ CD ]
Line_10 $$ final PostMethod method = new PostMethod(url)-->Line_11 $$ method.getParams().setVersion(HttpVersion.HTTP_1_0)[ FD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_12 $$ method.setFollowRedirects(false)[ CD ]
Line_10 $$ final PostMethod method = new PostMethod(url)-->Line_12 $$ method.setFollowRedirects(false)[ FD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_13 $$ final RequestEntity entity = new InputStreamRequestEntity(req.getInputStream())[ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_13 $$ final RequestEntity entity = new InputStreamRequestEntity(req.getInputStream())[ FD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_14 $$ method.setRequestEntity(entity)[ CD ]
Line_10 $$ final PostMethod method = new PostMethod(url)-->Line_14 $$ method.setRequestEntity(entity)[ FD ]
Line_13 $$ final RequestEntity entity = new InputStreamRequestEntity(req.getInputStream())-->Line_14 $$ method.setRequestEntity(entity)[ FD ]
Line_16 $$ final int statusCode = client.executeMethod(method)-->Line_16 $$ final int statusCode = client.executeMethod(method)[ CD ]
Line_8 $$ final HttpClient client = new HttpClient()-->Line_16 $$ final int statusCode = client.executeMethod(method)[ FD ]
Line_10 $$ final PostMethod method = new PostMethod(url)-->Line_16 $$ final int statusCode = client.executeMethod(method)[ FD ]
Line_16 $$ final int statusCode = client.executeMethod(method)-->Line_17 $$ if (statusCode != -1) [ FD ]
Line_17 $$ if (statusCode != -1) -->Line_18 $$ InputStream is = null[ CD ]
Line_17 $$ if (statusCode != -1) -->Line_19 $$ ServletOutputStream os = null[ CD ]
Line_18 $$ InputStream is = null-->Line_21 $$ is = method.getResponseBodyAsStream()[ FD ]
Line_21 $$ is = method.getResponseBodyAsStream()-->Line_21 $$ is = method.getResponseBodyAsStream()[ FD ]
Line_21 $$ is = method.getResponseBodyAsStream()-->Line_21 $$ is = method.getResponseBodyAsStream()[ CD ]
Line_10 $$ final PostMethod method = new PostMethod(url)-->Line_21 $$ is = method.getResponseBodyAsStream()[ FD ]
Line_19 $$ ServletOutputStream os = null-->Line_23 $$ os = resp.getOutputStream()[ FD ]
Line_23 $$ os = resp.getOutputStream()-->Line_23 $$ os = resp.getOutputStream()[ FD ]
Line_23 $$ os = resp.getOutputStream()-->Line_23 $$ os = resp.getOutputStream()[ CD ]
Line_2 $$ protected void doPost(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException -->Line_23 $$ os = resp.getOutputStream()[ FD ]
Line_18 $$ InputStream is = null-->Line_24 $$ IOUtils.copy(is, os)[ FD ]
Line_21 $$ is = method.getResponseBodyAsStream()-->Line_24 $$ IOUtils.copy(is, os)[ FD ]
Line_19 $$ ServletOutputStream os = null-->Line_24 $$ IOUtils.copy(is, os)[ FD ]
Line_23 $$ os = resp.getOutputStream()-->Line_24 $$ IOUtils.copy(is, os)[ FD ]
Line_19 $$ ServletOutputStream os = null-->Line_26 $$ if (os != null) [ FD ]
Line_23 $$ os = resp.getOutputStream()-->Line_26 $$ if (os != null) [ FD ]
Line_19 $$ ServletOutputStream os = null-->Line_28 $$ os.flush()[ FD ]
Line_23 $$ os = resp.getOutputStream()-->Line_28 $$ os.flush()[ FD ]
Line_34 $$ final String message = ioex.getMessage()-->Line_34 $$ final String message = ioex.getMessage()[ CD ]
Line_35 $$ if (!"chunked stream ended unexpectedly".equals(message)) -->Line_35 $$ if (!"chunked stream ended unexpectedly".equals(message)) [ CD ]
Line_35 $$ if (!"chunked stream ended unexpectedly".equals(message)) -->Line_35 $$ if (!"chunked stream ended unexpectedly".equals(message)) [ CD ]
Line_34 $$ final String message = ioex.getMessage()-->Line_35 $$ if (!"chunked stream ended unexpectedly".equals(message)) [ FD ]
Line_18 $$ InputStream is = null-->Line_39 $$ IOUtils.closeQuietly(is)[ FD ]
Line_21 $$ is = method.getResponseBodyAsStream()-->Line_39 $$ IOUtils.closeQuietly(is)[ FD ]
Line_10 $$ final PostMethod method = new PostMethod(url)-->Line_43 $$ method.releaseConnection()[ FD ]
