Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException [ CD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_3 $$ ValidationReport vr = new DefaultValidationReport()[ CD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_5 $$ vr.setFileUri(unit.getAbsolutePath())[ CD ]
Line_3 $$ ValidationReport vr = new DefaultValidationReport()-->Line_5 $$ vr.setFileUri(unit.getAbsolutePath())[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_5 $$ vr.setFileUri(unit.getAbsolutePath())[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_6 $$ SAXParser parser[ CD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_7 $$ SAXReader reader = null[ CD ]
Line_6 $$ SAXParser parser-->Line_9 $$ parser = factory.newSAXParser()[ FD ]
Line_9 $$ parser = factory.newSAXParser()-->Line_9 $$ parser = factory.newSAXParser()[ FD ]
Line_9 $$ parser = factory.newSAXParser()-->Line_9 $$ parser = factory.newSAXParser()[ CD ]
Line_7 $$ SAXReader reader = null-->Line_10 $$ reader = new SAXReader(parser.getXMLReader())[ FD ]
Line_10 $$ reader = new SAXReader(parser.getXMLReader())-->Line_10 $$ reader = new SAXReader(parser.getXMLReader())[ FD ]
Line_6 $$ SAXParser parser-->Line_10 $$ reader = new SAXReader(parser.getXMLReader())[ FD ]
Line_9 $$ parser = factory.newSAXParser()-->Line_10 $$ reader = new SAXReader(parser.getXMLReader())[ FD ]
Line_7 $$ SAXReader reader = null-->Line_11 $$ reader.setValidation(false)[ FD ]
Line_10 $$ reader = new SAXReader(parser.getXMLReader())-->Line_11 $$ reader.setValidation(false)[ FD ]
Line_7 $$ SAXReader reader = null-->Line_12 $$ reader.setErrorHandler(this.errorHandler)[ FD ]
Line_10 $$ reader = new SAXReader(parser.getXMLReader())-->Line_12 $$ reader.setErrorHandler(this.errorHandler)[ FD ]
Line_16 $$ String m = "Something is wrong when register schema"-->Line_17 $$ logger.error(m, e)[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_20 $$ ZipInputStream zipInputStream[ CD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_21 $$ InputStream tempInput = null[ CD ]
Line_21 $$ InputStream tempInput = null-->Line_23 $$ tempInput = new FileInputStream(unit.getAbsolutePath())[ FD ]
Line_23 $$ tempInput = new FileInputStream(unit.getAbsolutePath())-->Line_23 $$ tempInput = new FileInputStream(unit.getAbsolutePath())[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_23 $$ tempInput = new FileInputStream(unit.getAbsolutePath())[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_25 $$ String m = String.format("The file [%s] don't exist.", unit.getAbsolutePath())[ FD ]
Line_16 $$ String m = "Something is wrong when register schema"-->Line_26 $$ logger.error(m, e1)[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_29 $$ zipInputStream = new ZipInputStream(tempInput)[ CD ]
Line_20 $$ ZipInputStream zipInputStream-->Line_29 $$ zipInputStream = new ZipInputStream(tempInput)[ FD ]
Line_29 $$ zipInputStream = new ZipInputStream(tempInput)-->Line_29 $$ zipInputStream = new ZipInputStream(tempInput)[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_30 $$ ZipEntry zipEntry = null[ CD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_32 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_32 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_32 $$ zipEntry = zipInputStream.getNextEntry()[ CD ]
Line_20 $$ ZipInputStream zipInputStream-->Line_32 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_29 $$ zipInputStream = new ZipInputStream(tempInput)-->Line_32 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_33 $$ if (zipEntry == null) [ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_33 $$ if (zipEntry == null) [ FD ]
Line_33 $$ if (zipEntry == null) -->Line_34 $$ String m = String.format("Error when get zipEntry. Maybe the [%s] is not zip file!", unit.getAbsolutePath())[ CD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_34 $$ String m = String.format("Error when get zipEntry. Maybe the [%s] is not zip file!", unit.getAbsolutePath())[ FD ]
Line_33 $$ if (zipEntry == null) -->Line_35 $$ logger.error(m)[ CD ]
Line_16 $$ String m = "Something is wrong when register schema"-->Line_35 $$ logger.error(m)[ FD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_38 $$ while (zipEntry != null) [ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_38 $$ while (zipEntry != null) [ FD ]
Line_38 $$ while (zipEntry != null) -->Line_39 $$ if (configFiles.contains(zipEntry.getName())) [ CD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_39 $$ if (configFiles.contains(zipEntry.getName())) [ CD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_39 $$ if (configFiles.contains(zipEntry.getName())) [ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_39 $$ if (configFiles.contains(zipEntry.getName())) [ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_40 $$ byte[] extra = new byte[(int) zipEntry.getSize()][ CD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_40 $$ byte[] extra = new byte[(int) zipEntry.getSize()][ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_40 $$ byte[] extra = new byte[(int) zipEntry.getSize()][ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_41 $$ zipInputStream.read(extra)[ CD ]
Line_20 $$ ZipInputStream zipInputStream-->Line_41 $$ zipInputStream.read(extra)[ FD ]
Line_29 $$ zipInputStream = new ZipInputStream(tempInput)-->Line_41 $$ zipInputStream.read(extra)[ FD ]
Line_40 $$ byte[] extra = new byte[(int) zipEntry.getSize()]-->Line_41 $$ zipInputStream.read(extra)[ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_42 $$ File file = File.createTempFile("temp", "extra")[ CD ]
Line_42 $$ File file = File.createTempFile("temp", "extra")-->Line_42 $$ File file = File.createTempFile("temp", "extra")[ CD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_43 $$ file.deleteOnExit()[ CD ]
Line_42 $$ File file = File.createTempFile("temp", "extra")-->Line_43 $$ file.deleteOnExit()[ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_44 $$ logger.info("[TempFile:]" + file.getAbsoluteFile())[ CD ]
Line_42 $$ File file = File.createTempFile("temp", "extra")-->Line_44 $$ logger.info("[TempFile:]" + file.getAbsoluteFile())[ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_45 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(extra)[ CD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_46 $$ FileOutputStream tempFileOutputStream = new FileOutputStream(file)[ CD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_47 $$ IOUtils.copy(byteInputStream, tempFileOutputStream)[ CD ]
Line_45 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(extra)-->Line_47 $$ IOUtils.copy(byteInputStream, tempFileOutputStream)[ FD ]
Line_46 $$ FileOutputStream tempFileOutputStream = new FileOutputStream(file)-->Line_47 $$ IOUtils.copy(byteInputStream, tempFileOutputStream)[ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_48 $$ tempFileOutputStream.flush()[ CD ]
Line_46 $$ FileOutputStream tempFileOutputStream = new FileOutputStream(file)-->Line_48 $$ tempFileOutputStream.flush()[ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_49 $$ IOUtils.closeQuietly(tempFileOutputStream)[ CD ]
Line_46 $$ FileOutputStream tempFileOutputStream = new FileOutputStream(file)-->Line_49 $$ IOUtils.closeQuietly(tempFileOutputStream)[ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_50 $$ InputStream inputStream = new FileInputStream(file)[ CD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ CD ]
Line_7 $$ SAXReader reader = null-->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_10 $$ reader = new SAXReader(parser.getXMLReader())-->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_50 $$ InputStream inputStream = new FileInputStream(file)-->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_39 $$ if (configFiles.contains(zipEntry.getName())) -->Line_52 $$ IOUtils.closeQuietly(inputStream)[ CD ]
Line_50 $$ InputStream inputStream = new FileInputStream(file)-->Line_52 $$ IOUtils.closeQuietly(inputStream)[ FD ]
Line_38 $$ while (zipEntry != null) -->Line_54 $$ zipEntry = zipInputStream.getNextEntry()[ CD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_54 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_54 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_54 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_54 $$ zipEntry = zipInputStream.getNextEntry()[ CD ]
Line_20 $$ ZipInputStream zipInputStream-->Line_54 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_29 $$ zipInputStream = new ZipInputStream(tempInput)-->Line_54 $$ zipEntry = zipInputStream.getNextEntry()[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_57 $$ ValidationMessage vm = new XMLValidationMessage("IOError", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_57 $$ ValidationMessage vm = new XMLValidationMessage("IOError", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_57 $$ ValidationMessage vm = new XMLValidationMessage("IOError", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_57 $$ ValidationMessage vm = new XMLValidationMessage("IOError", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_3 $$ ValidationReport vr = new DefaultValidationReport()-->Line_58 $$ vr.addValidationMessage(vm)[ FD ]
Line_57 $$ ValidationMessage vm = new XMLValidationMessage("IOError", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)-->Line_58 $$ vr.addValidationMessage(vm)[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_60 $$ ValidationMessage vm = new XMLValidationMessage("Document Error.", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_60 $$ ValidationMessage vm = new XMLValidationMessage("Document Error.", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_30 $$ ZipEntry zipEntry = null-->Line_60 $$ ValidationMessage vm = new XMLValidationMessage("Document Error.", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_32 $$ zipEntry = zipInputStream.getNextEntry()-->Line_60 $$ ValidationMessage vm = new XMLValidationMessage("Document Error.", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)[ FD ]
Line_3 $$ ValidationReport vr = new DefaultValidationReport()-->Line_61 $$ vr.addValidationMessage(vm)[ FD ]
Line_57 $$ ValidationMessage vm = new XMLValidationMessage("IOError", 0, 0, unit.getUrl() + ":" + zipEntry.getName(), e)-->Line_61 $$ vr.addValidationMessage(vm)[ FD ]
Line_21 $$ InputStream tempInput = null-->Line_63 $$ IOUtils.closeQuietly(tempInput)[ FD ]
Line_23 $$ tempInput = new FileInputStream(unit.getAbsolutePath())-->Line_63 $$ IOUtils.closeQuietly(tempInput)[ FD ]
Line_20 $$ ZipInputStream zipInputStream-->Line_64 $$ IOUtils.closeQuietly(zipInputStream)[ FD ]
Line_29 $$ zipInputStream = new ZipInputStream(tempInput)-->Line_64 $$ IOUtils.closeQuietly(zipInputStream)[ FD ]
Line_2 $$ public ValidationReport validate(OriginalDeployUnitDescription unit) throws UnitValidationException -->Line_66 $$ return vr[ CD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_38 $$ while (zipEntry != null) [ FD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_38 $$ while (zipEntry != null) [ FD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_39 $$ if (configFiles.contains(zipEntry.getName())) [ FD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_40 $$ byte[] extra = new byte[(int) zipEntry.getSize()][ FD ]
Line_40 $$ byte[] extra = new byte[(int) zipEntry.getSize()]-->Line_41 $$ zipInputStream.read(extra)[ FD ]
Line_42 $$ File file = File.createTempFile("temp", "extra")-->Line_43 $$ file.deleteOnExit()[ FD ]
Line_42 $$ File file = File.createTempFile("temp", "extra")-->Line_44 $$ logger.info("[TempFile:]" + file.getAbsoluteFile())[ FD ]
Line_45 $$ ByteArrayInputStream byteInputStream = new ByteArrayInputStream(extra)-->Line_47 $$ IOUtils.copy(byteInputStream, tempFileOutputStream)[ FD ]
Line_46 $$ FileOutputStream tempFileOutputStream = new FileOutputStream(file)-->Line_47 $$ IOUtils.copy(byteInputStream, tempFileOutputStream)[ FD ]
Line_46 $$ FileOutputStream tempFileOutputStream = new FileOutputStream(file)-->Line_48 $$ tempFileOutputStream.flush()[ FD ]
Line_46 $$ FileOutputStream tempFileOutputStream = new FileOutputStream(file)-->Line_49 $$ IOUtils.closeQuietly(tempFileOutputStream)[ FD ]
Line_50 $$ InputStream inputStream = new FileInputStream(file)-->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_54 $$ zipEntry = zipInputStream.getNextEntry()-->Line_51 $$ reader.read(inputStream, unit.getAbsolutePath() + ":" + zipEntry.getName())[ FD ]
Line_50 $$ InputStream inputStream = new FileInputStream(file)-->Line_52 $$ IOUtils.closeQuietly(inputStream)[ FD ]
