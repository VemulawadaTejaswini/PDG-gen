Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception [ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_3 $$ CipherOutputStream out[ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_4 $$ InputStream in[ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_5 $$ Cipher cipher[ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_6 $$ SecretKey key[ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_7 $$ byte[] byteBuffer[ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_8 $$ cipher = Cipher.getInstance("DES")[ CD ]
Line_5 $$ Cipher cipher-->Line_8 $$ cipher = Cipher.getInstance("DES")[ FD ]
Line_8 $$ cipher = Cipher.getInstance("DES")-->Line_8 $$ cipher = Cipher.getInstance("DES")[ FD ]
Line_8 $$ cipher = Cipher.getInstance("DES")-->Line_8 $$ cipher = Cipher.getInstance("DES")[ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_9 $$ key = new SecretKeySpec(password.getBytes(), "DES")[ CD ]
Line_6 $$ SecretKey key-->Line_9 $$ key = new SecretKeySpec(password.getBytes(), "DES")[ FD ]
Line_9 $$ key = new SecretKeySpec(password.getBytes(), "DES")-->Line_9 $$ key = new SecretKeySpec(password.getBytes(), "DES")[ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_9 $$ key = new SecretKeySpec(password.getBytes(), "DES")[ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, key)[ CD ]
Line_5 $$ Cipher cipher-->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, key)[ FD ]
Line_8 $$ cipher = Cipher.getInstance("DES")-->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, key)[ FD ]
Line_6 $$ SecretKey key-->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, key)[ FD ]
Line_9 $$ key = new SecretKeySpec(password.getBytes(), "DES")-->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, key)[ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_11 $$ in = new FileInputStream(originalFile)[ CD ]
Line_4 $$ InputStream in-->Line_11 $$ in = new FileInputStream(originalFile)[ FD ]
Line_11 $$ in = new FileInputStream(originalFile)-->Line_11 $$ in = new FileInputStream(originalFile)[ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_12 $$ out = new CipherOutputStream(new FileOutputStream(encryptedFile), cipher)[ CD ]
Line_3 $$ CipherOutputStream out-->Line_12 $$ out = new CipherOutputStream(new FileOutputStream(encryptedFile), cipher)[ FD ]
Line_12 $$ out = new CipherOutputStream(new FileOutputStream(encryptedFile), cipher)-->Line_12 $$ out = new CipherOutputStream(new FileOutputStream(encryptedFile), cipher)[ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_13 $$ byteBuffer = new byte[1024][ CD ]
Line_7 $$ byte[] byteBuffer-->Line_13 $$ byteBuffer = new byte[1024][ FD ]
Line_13 $$ byteBuffer = new byte[1024]-->Line_13 $$ byteBuffer = new byte[1024][ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ CD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception [ CD ]
Line_4 $$ InputStream in-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_11 $$ in = new FileInputStream(originalFile)-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_7 $$ byte[] byteBuffer-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_13 $$ byteBuffer = new byte[1024]-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) -->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ CD ]
Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) -->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ CD ]
Line_3 $$ CipherOutputStream out-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_12 $$ out = new CipherOutputStream(new FileOutputStream(encryptedFile), cipher)-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_7 $$ byte[] byteBuffer-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_13 $$ byteBuffer = new byte[1024]-->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) -->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_15 $$ in.close()[ CD ]
Line_4 $$ InputStream in-->Line_15 $$ in.close()[ FD ]
Line_11 $$ in = new FileInputStream(originalFile)-->Line_15 $$ in.close()[ FD ]
Line_2 $$ public void encryptFile(String originalFile, String encryptedFile, String password) throws Exception -->Line_16 $$ out.close()[ CD ]
Line_3 $$ CipherOutputStream out-->Line_16 $$ out.close()[ FD ]
Line_12 $$ out = new CipherOutputStream(new FileOutputStream(encryptedFile), cipher)-->Line_16 $$ out.close()[ FD ]
Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) -->Line_14 $$ for (int n; (n = in.read(byteBuffer)) != -1; out.write(byteBuffer, 0, n)) [ FD ]
