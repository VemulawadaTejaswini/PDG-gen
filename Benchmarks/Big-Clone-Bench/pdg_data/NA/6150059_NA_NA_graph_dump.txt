Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void nioBuild() [ CD ]
Line_4 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4)-->Line_4 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4)[ CD ]
Line_5 $$ final FileChannel out = new FileOutputStream(dest).getChannel()-->Line_5 $$ final FileChannel out = new FileOutputStream(dest).getChannel()[ CD ]
Line_6 $$ for (File part : parts) -->Line_7 $$ setState(part.getName(), BUILDING)[ FD ]
Line_8 $$ FileChannel in = new FileInputStream(part).getChannel()-->Line_8 $$ FileChannel in = new FileInputStream(part).getChannel()[ CD ]
Line_8 $$ FileChannel in = new FileInputStream(part).getChannel()-->Line_9 $$ while (in.read(buffer) > 0) [ FD ]
Line_4 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4)-->Line_9 $$ while (in.read(buffer) > 0) [ FD ]
Line_9 $$ while (in.read(buffer) > 0) -->Line_10 $$ buffer.flip()[ CD ]
Line_4 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4)-->Line_10 $$ buffer.flip()[ FD ]
Line_9 $$ while (in.read(buffer) > 0) -->Line_11 $$ written += out.write(buffer)[ CD ]
Line_5 $$ final FileChannel out = new FileOutputStream(dest).getChannel()-->Line_11 $$ written += out.write(buffer)[ FD ]
Line_4 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4)-->Line_11 $$ written += out.write(buffer)[ FD ]
Line_9 $$ while (in.read(buffer) > 0) -->Line_12 $$ buffer.clear()[ CD ]
Line_4 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4)-->Line_12 $$ buffer.clear()[ FD ]
Line_8 $$ FileChannel in = new FileInputStream(part).getChannel()-->Line_14 $$ in.close()[ FD ]
Line_5 $$ final FileChannel out = new FileOutputStream(dest).getChannel()-->Line_16 $$ out.close()[ FD ]
