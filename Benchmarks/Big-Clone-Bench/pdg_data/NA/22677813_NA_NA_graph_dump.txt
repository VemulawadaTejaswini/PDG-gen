Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException [ CD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_3 $$ final String baseName = StringUtils.substringBefore(name, "$")[ CD ]
Line_3 $$ final String baseName = StringUtils.substringBefore(name, "$")-->Line_3 $$ final String baseName = StringUtils.substringBefore(name, "$")[ CD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_3 $$ final String baseName = StringUtils.substringBefore(name, "$")[ FD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) [ CD ]
Line_3 $$ final String baseName = StringUtils.substringBefore(name, "$")-->Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) [ FD ]
Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) -->Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) [ CD ]
Line_3 $$ final String baseName = StringUtils.substringBefore(name, "$")-->Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) [ FD ]
Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) -->Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) [ CD ]
Line_3 $$ final String baseName = StringUtils.substringBefore(name, "$")-->Line_4 $$ if (baseName.startsWith("java") && !whitelist.contains(baseName) && !additionalWhitelist.contains(baseName)) [ FD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_7 $$ if (!name.startsWith("com.gargoylesoftware")) [ CD ]
Line_7 $$ if (!name.startsWith("com.gargoylesoftware")) -->Line_7 $$ if (!name.startsWith("com.gargoylesoftware")) [ CD ]
Line_7 $$ if (!name.startsWith("com.gargoylesoftware")) -->Line_7 $$ if (!name.startsWith("com.gargoylesoftware")) [ CD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_7 $$ if (!name.startsWith("com.gargoylesoftware")) [ FD ]
Line_7 $$ if (!name.startsWith("com.gargoylesoftware")) -->Line_8 $$ return super.loadClass(name)[ CD ]
Line_8 $$ return super.loadClass(name)-->Line_8 $$ return super.loadClass(name)[ CD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_8 $$ return super.loadClass(name)[ FD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_10 $$ super.loadClass(name)[ CD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_10 $$ super.loadClass(name)[ FD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_11 $$ final InputStream is = getResourceAsStream(name.replaceAll("\\.", "/") + ".class")[ CD ]
Line_11 $$ final InputStream is = getResourceAsStream(name.replaceAll("\\.", "/") + ".class")-->Line_11 $$ final InputStream is = getResourceAsStream(name.replaceAll("\\.", "/") + ".class")[ CD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_11 $$ final InputStream is = getResourceAsStream(name.replaceAll("\\.", "/") + ".class")[ FD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_12 $$ final ByteArrayOutputStream bos = new ByteArrayOutputStream()[ CD ]
Line_11 $$ final InputStream is = getResourceAsStream(name.replaceAll("\\.", "/") + ".class")-->Line_14 $$ IOUtils.copy(is, bos)[ FD ]
Line_12 $$ final ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_14 $$ IOUtils.copy(is, bos)[ FD ]
Line_15 $$ final byte[] bytes = bos.toByteArray()-->Line_15 $$ final byte[] bytes = bos.toByteArray()[ CD ]
Line_12 $$ final ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_15 $$ final byte[] bytes = bos.toByteArray()[ FD ]
Line_16 $$ return defineClass(name, bytes, 0, bytes.length)-->Line_16 $$ return defineClass(name, bytes, 0, bytes.length)[ CD ]
Line_2 $$ public Class<?> loadClass(final String name) throws ClassNotFoundException -->Line_16 $$ return defineClass(name, bytes, 0, bytes.length)[ FD ]
Line_15 $$ final byte[] bytes = bos.toByteArray()-->Line_16 $$ return defineClass(name, bytes, 0, bytes.length)[ FD ]
