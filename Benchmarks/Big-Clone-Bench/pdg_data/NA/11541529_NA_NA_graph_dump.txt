Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void initFiles() throws IOException [ CD ]
Line_2 $$ private void initFiles() throws IOException -->Line_3 $$ if (!tempDir.exists()) [ CD ]
Line_3 $$ if (!tempDir.exists()) -->Line_3 $$ if (!tempDir.exists()) [ CD ]
Line_3 $$ if (!tempDir.exists()) -->Line_3 $$ if (!tempDir.exists()) [ CD ]
Line_3 $$ if (!tempDir.exists()) -->Line_4 $$ if (!tempDir.mkdir())[ CD ]
Line_4 $$ if (!tempDir.mkdir())-->Line_4 $$ if (!tempDir.mkdir())[ CD ]
Line_4 $$ if (!tempDir.mkdir())-->Line_4 $$ if (!tempDir.mkdir())[ CD ]
Line_2 $$ private void initFiles() throws IOException -->Line_6 $$ File tmp = new File(tempDir, TORRENT_FILENAME)[ CD ]
Line_2 $$ private void initFiles() throws IOException -->Line_7 $$ if (!tmp.exists()) [ CD ]
Line_7 $$ if (!tmp.exists()) -->Line_7 $$ if (!tmp.exists()) [ CD ]
Line_7 $$ if (!tmp.exists()) -->Line_7 $$ if (!tmp.exists()) [ CD ]
Line_6 $$ File tmp = new File(tempDir, TORRENT_FILENAME)-->Line_7 $$ if (!tmp.exists()) [ FD ]
Line_7 $$ if (!tmp.exists()) -->Line_8 $$ FileChannel in = new FileInputStream(torrentFile).getChannel()[ CD ]
Line_8 $$ FileChannel in = new FileInputStream(torrentFile).getChannel()-->Line_8 $$ FileChannel in = new FileInputStream(torrentFile).getChannel()[ CD ]
Line_7 $$ if (!tmp.exists()) -->Line_9 $$ FileChannel out = new FileOutputStream(tmp).getChannel()[ CD ]
Line_9 $$ FileChannel out = new FileOutputStream(tmp).getChannel()-->Line_9 $$ FileChannel out = new FileOutputStream(tmp).getChannel()[ CD ]
Line_7 $$ if (!tmp.exists()) -->Line_10 $$ in.transferTo(0, in.size(), out)[ CD ]
Line_8 $$ FileChannel in = new FileInputStream(torrentFile).getChannel()-->Line_10 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_9 $$ FileChannel out = new FileOutputStream(tmp).getChannel()-->Line_10 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_8 $$ FileChannel in = new FileInputStream(torrentFile).getChannel()-->Line_10 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_7 $$ if (!tmp.exists()) -->Line_11 $$ in.close()[ CD ]
Line_8 $$ FileChannel in = new FileInputStream(torrentFile).getChannel()-->Line_11 $$ in.close()[ FD ]
Line_7 $$ if (!tmp.exists()) -->Line_12 $$ out.close()[ CD ]
Line_9 $$ FileChannel out = new FileOutputStream(tmp).getChannel()-->Line_12 $$ out.close()[ FD ]
Line_2 $$ private void initFiles() throws IOException -->Line_15 $$ if (!stateFile.exists()) [ CD ]
Line_15 $$ if (!stateFile.exists()) -->Line_15 $$ if (!stateFile.exists()) [ CD ]
Line_15 $$ if (!stateFile.exists()) -->Line_15 $$ if (!stateFile.exists()) [ CD ]
Line_15 $$ if (!stateFile.exists()) -->Line_16 $$ FileChannel out = new FileOutputStream(stateFile).getChannel()[ CD ]
Line_15 $$ if (!stateFile.exists()) -->Line_17 $$ int numChunks = metadata.getPieceHashes().size()[ CD ]
Line_17 $$ int numChunks = metadata.getPieceHashes().size()-->Line_17 $$ int numChunks = metadata.getPieceHashes().size()[ CD ]
Line_15 $$ if (!stateFile.exists()) -->Line_18 $$ ByteBuffer zero = ByteBuffer.wrap(new byte[] [ CD ]
Line_18 $$ ByteBuffer zero = ByteBuffer.wrap(new byte[] -->Line_18 $$ ByteBuffer zero = ByteBuffer.wrap(new byte[] [ CD ]
Line_15 $$ if (!stateFile.exists()) -->Line_19 $$ for (int i = 0; i < numChunks; i++) [ CD ]
Line_15 $$ if (!stateFile.exists()) -->Line_15 $$ if (!stateFile.exists()) [ CD ]
Line_17 $$ int numChunks = metadata.getPieceHashes().size()-->Line_19 $$ for (int i = 0; i < numChunks; i++) [ FD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_19 $$ for (int i = 0; i < numChunks; i++) [ CD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_19 $$ for (int i = 0; i < numChunks; i++) [ CD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_19 $$ for (int i = 0; i < numChunks; i++) [ FD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_20 $$ out.write(zero)[ CD ]
Line_9 $$ FileChannel out = new FileOutputStream(tmp).getChannel()-->Line_20 $$ out.write(zero)[ FD ]
Line_18 $$ ByteBuffer zero = ByteBuffer.wrap(new byte[] -->Line_20 $$ out.write(zero)[ FD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_21 $$ zero.clear()[ CD ]
Line_18 $$ ByteBuffer zero = ByteBuffer.wrap(new byte[] -->Line_21 $$ zero.clear()[ FD ]
Line_15 $$ if (!stateFile.exists()) -->Line_23 $$ out.close()[ CD ]
Line_9 $$ FileChannel out = new FileOutputStream(tmp).getChannel()-->Line_23 $$ out.close()[ FD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_19 $$ for (int i = 0; i < numChunks; i++) [ FD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_19 $$ for (int i = 0; i < numChunks; i++) [ FD ]
Line_19 $$ for (int i = 0; i < numChunks; i++) -->Line_19 $$ for (int i = 0; i < numChunks; i++) [ FD ]
