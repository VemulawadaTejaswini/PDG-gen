Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void close() throws IOException [ CD ]
Line_2 $$ public void close() throws IOException -->Line_3 $$ output.flush()[ CD ]
Line_2 $$ public void close() throws IOException -->Line_4 $$ output.close()[ CD ]
Line_2 $$ public void close() throws IOException -->Line_5 $$ FTPClient client = new FTPClient()[ CD ]
Line_2 $$ public void close() throws IOException -->Line_6 $$ if (server == null) [ CD ]
Line_6 $$ if (server == null) -->Line_9 $$ if (port != null) [ CD ]
Line_9 $$ if (port != null) -->Line_10 $$ client.connect(server, Integer.parseInt(port))[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_10 $$ client.connect(server, Integer.parseInt(port))[ FD ]
Line_9 $$ if (port != null) -->Line_12 $$ client.connect(server)[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_12 $$ client.connect(server)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_15 $$ if (username != null) [ CD ]
Line_15 $$ if (username != null) -->Line_16 $$ logger.debug("log in as specified user")[ CD ]
Line_15 $$ if (username != null) -->Line_17 $$ client.login(username, password)[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_17 $$ client.login(username, password)[ FD ]
Line_15 $$ if (username != null) -->Line_19 $$ logger.debug("log in as anonymous")[ CD ]
Line_15 $$ if (username != null) -->Line_20 $$ client.login("anonymous", this.getClass().getName())[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_20 $$ client.login("anonymous", this.getClass().getName())[ FD ]
Line_2 $$ public void close() throws IOException -->Line_22 $$ if (binaery) [ CD ]
Line_22 $$ if (binaery) -->Line_23 $$ logger.debug("use binaery mode")[ CD ]
Line_22 $$ if (binaery) -->Line_24 $$ client.setFileType(FTP.BINARY_FILE_TYPE)[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_24 $$ client.setFileType(FTP.BINARY_FILE_TYPE)[ FD ]
Line_22 $$ if (binaery) -->Line_26 $$ logger.debug("use ascii mode")[ CD ]
Line_22 $$ if (binaery) -->Line_27 $$ client.setFileType(FTP.ASCII_FILE_TYPE)[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_27 $$ client.setFileType(FTP.ASCII_FILE_TYPE)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_29 $$ client.enterLocalPassiveMode()[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_29 $$ client.enterLocalPassiveMode()[ FD ]
Line_2 $$ public void close() throws IOException -->Line_30 $$ logger.debug("store file on server: " + tempFile + " under name: " + file)[ CD ]
Line_2 $$ public void close() throws IOException -->Line_31 $$ InputStream stream = new FileInputStream(tempFile)[ CD ]
Line_2 $$ public void close() throws IOException -->Line_32 $$ String dir = file.substring(0, file.lastIndexOf("/")) + "/"[ CD ]
Line_2 $$ public void close() throws IOException -->Line_33 $$ String split[] = dir.split("/")[ CD ]
Line_33 $$ String split[] = dir.split("/")-->Line_33 $$ String split[] = dir.split("/")[ CD ]
Line_32 $$ String dir = file.substring(0, file.lastIndexOf("/")) + "/"-->Line_33 $$ String split[] = dir.split("/")[ FD ]
Line_2 $$ public void close() throws IOException -->Line_34 $$ String last = ""[ CD ]
Line_2 $$ public void close() throws IOException -->Line_35 $$ logger.debug("creating dir: " + dir)[ CD ]
Line_2 $$ public void close() throws IOException -->Line_36 $$ for (int i = 0; i < split.length; i++) [ CD ]
Line_2 $$ public void close() throws IOException -->Line_2 $$ public void close() throws IOException [ CD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_36 $$ for (int i = 0; i < split.length; i++) [ CD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_36 $$ for (int i = 0; i < split.length; i++) [ CD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_36 $$ for (int i = 0; i < split.length; i++) [ FD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_37 $$ last = last + "/" + split[i][ CD ]
Line_37 $$ last = last + "/" + split[i]-->Line_37 $$ last = last + "/" + split[i][ FD ]
Line_34 $$ String last = ""-->Line_37 $$ last = last + "/" + split[i][ FD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_38 $$ logger.debug(last + " --> " + client.makeDirectory(last))[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_38 $$ logger.debug(last + " --> " + client.makeDirectory(last))[ FD ]
Line_37 $$ last = last + "/" + split[i]-->Line_38 $$ logger.debug(last + " --> " + client.makeDirectory(last))[ FD ]
Line_34 $$ String last = ""-->Line_38 $$ logger.debug(last + " --> " + client.makeDirectory(last))[ FD ]
Line_2 $$ public void close() throws IOException -->Line_40 $$ logger.debug("storing file: " + file)[ CD ]
Line_2 $$ public void close() throws IOException -->Line_41 $$ client.deleteFile(file)[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_41 $$ client.deleteFile(file)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_42 $$ client.storeFile(file, stream)[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_42 $$ client.storeFile(file, stream)[ FD ]
Line_31 $$ InputStream stream = new FileInputStream(tempFile)-->Line_42 $$ client.storeFile(file, stream)[ FD ]
Line_2 $$ public void close() throws IOException -->Line_43 $$ client.disconnect()[ CD ]
Line_5 $$ FTPClient client = new FTPClient()-->Line_43 $$ client.disconnect()[ FD ]
Line_2 $$ public void close() throws IOException -->Line_44 $$ tempFile.delete()[ CD ]
Line_46 $$ FTPSource source = new FTPSource()-->Line_47 $$ source.configure(properties)[ FD ]
Line_46 $$ FTPSource source = new FTPSource()-->Line_48 $$ source.setIdentifier(file)[ FD ]
Line_46 $$ FTPSource source = new FTPSource()-->Line_49 $$ if (source.exist()) [ FD ]
Line_49 $$ if (source.exist()) -->Line_49 $$ if (source.exist()) [ CD ]
Line_46 $$ FTPSource source = new FTPSource()-->Line_49 $$ if (source.exist()) [ FD ]
Line_49 $$ if (source.exist()) -->Line_50 $$ logger.debug("done")[ CD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_36 $$ for (int i = 0; i < split.length; i++) [ FD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_36 $$ for (int i = 0; i < split.length; i++) [ FD ]
Line_36 $$ for (int i = 0; i < split.length; i++) -->Line_36 $$ for (int i = 0; i < split.length; i++) [ FD ]
Line_37 $$ last = last + "/" + split[i]-->Line_38 $$ logger.debug(last + " --> " + client.makeDirectory(last))[ FD ]
