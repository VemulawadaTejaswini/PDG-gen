Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testResolveURL() throws Exception [ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_3 $$ System.out.println("resolveURL")[ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_4 $$ File bigFile = new File("./src/test/java/big.json")[ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_5 $$ File smallFile = new File("./src/test/java/sample1.json")[ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_6 $$ Object[] urls = new Object[] [ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_7 $$ JSONSchemaURIResolverImpl uriResolver = new JSONSchemaURIResolverImpl()[ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()[ CD ]
Line_10 $$ InputStream is = new URL((String) urls[0]).openStream()-->Line_10 $$ InputStream is = new URL((String) urls[0]).openStream()[ CD ]
Line_10 $$ InputStream is = new URL((String) urls[0]).openStream()-->Line_11 $$ is.close()[ FD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_13 $$ for (int i = 2; i < urls.length; i++) [ CD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_13 $$ for (int i = 2; i < urls.length; i++) [ CD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_13 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_14 $$ if (urls[i] instanceof String) [ CD ]
Line_14 $$ if (urls[i] instanceof String) -->Line_15 $$ String url = (String) urls[i][ CD ]
Line_14 $$ if (urls[i] instanceof String) -->Line_16 $$ uriResolver.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ CD ]
Line_7 $$ JSONSchemaURIResolverImpl uriResolver = new JSONSchemaURIResolverImpl()-->Line_16 $$ uriResolver.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ FD ]
Line_15 $$ String url = (String) urls[i]-->Line_16 $$ uriResolver.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ FD ]
Line_14 $$ if (urls[i] instanceof String) -->Line_17 $$ if (urls[i] instanceof File) [ CD ]
Line_17 $$ if (urls[i] instanceof File) -->Line_18 $$ uriResolver.register(((File) urls[i]).toURI().toURL(), urls[i])[ CD ]
Line_7 $$ JSONSchemaURIResolverImpl uriResolver = new JSONSchemaURIResolverImpl()-->Line_18 $$ uriResolver.register(((File) urls[i]).toURI().toURL(), urls[i])[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_2 $$ public void testResolveURL() throws Exception [ CD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_23 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ CD ]
Line_23 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ CD ]
Line_23 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_23 $$ for (int i = 2; i < urls.length; i++) -->Line_24 $$ if (urls[i] instanceof String) [ CD ]
Line_24 $$ if (urls[i] instanceof String) -->Line_25 $$ String url = (String) urls[i][ CD ]
Line_24 $$ if (urls[i] instanceof String) -->Line_26 $$ uriResolver2.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_26 $$ uriResolver2.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ FD ]
Line_25 $$ String url = (String) urls[i]-->Line_26 $$ uriResolver2.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ FD ]
Line_15 $$ String url = (String) urls[i]-->Line_26 $$ uriResolver2.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ FD ]
Line_24 $$ if (urls[i] instanceof String) -->Line_27 $$ if (urls[i] instanceof File) [ CD ]
Line_27 $$ if (urls[i] instanceof File) -->Line_28 $$ uriResolver2.register(((File) urls[i]).toURI().toURL(), urls[i])[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_28 $$ uriResolver2.register(((File) urls[i]).toURI().toURL(), urls[i])[ FD ]
Line_31 $$ for (Object source : urls) -->Line_33 $$ if (source instanceof String) [ FD ]
Line_33 $$ if (source instanceof String) -->Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)[ CD ]
Line_7 $$ JSONSchemaURIResolverImpl uriResolver = new JSONSchemaURIResolverImpl()-->Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)[ FD ]
Line_33 $$ if (source instanceof String) -->Line_35 $$ assertNotNull(ss.getReader())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_35 $$ assertNotNull(ss.getReader())[ FD ]
Line_33 $$ if (source instanceof String) -->Line_36 $$ assertNull(ss.getInputStream())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_36 $$ assertNull(ss.getInputStream())[ FD ]
Line_33 $$ if (source instanceof String) -->Line_37 $$ ss.getReader().close()[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_37 $$ ss.getReader().close()[ FD ]
Line_31 $$ for (Object source : urls) -->Line_45 $$ if (source instanceof String) [ FD ]
Line_45 $$ if (source instanceof String) -->Line_46 $$ StreamSource ss = uriResolver.resolveURL(new URL((String) source), null)[ CD ]
Line_7 $$ JSONSchemaURIResolverImpl uriResolver = new JSONSchemaURIResolverImpl()-->Line_46 $$ StreamSource ss = uriResolver.resolveURL(new URL((String) source), null)[ FD ]
Line_45 $$ if (source instanceof String) -->Line_47 $$ assertNotNull(ss.getReader())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_47 $$ assertNotNull(ss.getReader())[ FD ]
Line_45 $$ if (source instanceof String) -->Line_48 $$ assertNull(ss.getInputStream())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_48 $$ assertNull(ss.getInputStream())[ FD ]
Line_45 $$ if (source instanceof String) -->Line_49 $$ ss.getReader().close()[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_49 $$ ss.getReader().close()[ FD ]
Line_31 $$ for (Object source : urls) -->Line_57 $$ if (source instanceof String) [ FD ]
Line_57 $$ if (source instanceof String) -->Line_58 $$ StreamSource ss = uriResolver2.resolveURI(new URI((String) source), null)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_58 $$ StreamSource ss = uriResolver2.resolveURI(new URI((String) source), null)[ FD ]
Line_57 $$ if (source instanceof String) -->Line_59 $$ assertNotNull(ss.getReader())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_59 $$ assertNotNull(ss.getReader())[ FD ]
Line_57 $$ if (source instanceof String) -->Line_60 $$ assertNull(ss.getInputStream())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_60 $$ assertNull(ss.getInputStream())[ FD ]
Line_57 $$ if (source instanceof String) -->Line_61 $$ ss.getReader().close()[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_61 $$ ss.getReader().close()[ FD ]
Line_57 $$ if (source instanceof String) -->Line_62 $$ assertTrue((new URL((String) source)).equals(uriResolver2.lastURL))[ CD ]
Line_57 $$ if (source instanceof String) -->Line_63 $$ assertFalse((new URL((String) source)).equals(uriResolver2.lastMapped))[ CD ]
Line_31 $$ for (Object source : urls) -->Line_71 $$ if (source instanceof String) [ FD ]
Line_71 $$ if (source instanceof String) -->Line_72 $$ StreamSource ss = uriResolver2.resolveURL(new URL((String) source), null)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_72 $$ StreamSource ss = uriResolver2.resolveURL(new URL((String) source), null)[ FD ]
Line_71 $$ if (source instanceof String) -->Line_73 $$ assertNotNull(ss.getReader())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_73 $$ assertNotNull(ss.getReader())[ FD ]
Line_71 $$ if (source instanceof String) -->Line_74 $$ assertNull(ss.getInputStream())[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_74 $$ assertNull(ss.getInputStream())[ FD ]
Line_71 $$ if (source instanceof String) -->Line_75 $$ ss.getReader().close()[ CD ]
Line_34 $$ StreamSource ss = uriResolver.resolveURI(new URI((String) source), null)-->Line_75 $$ ss.getReader().close()[ FD ]
Line_71 $$ if (source instanceof String) -->Line_76 $$ assertTrue((new URL((String) source)).equals(uriResolver2.lastURL))[ CD ]
Line_71 $$ if (source instanceof String) -->Line_77 $$ assertFalse((new URL((String) source)).equals(uriResolver2.lastMapped))[ CD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_83 $$ uriResolver2.register(new URL("ftp://localhost/1"), bigFile)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_83 $$ uriResolver2.register(new URL("ftp://localhost/1"), bigFile)[ FD ]
Line_4 $$ File bigFile = new File("./src/test/java/big.json")-->Line_83 $$ uriResolver2.register(new URL("ftp://localhost/1"), bigFile)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_84 $$ uriResolver2.register(new URL("ftp://localhost/2"), smallFile)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_84 $$ uriResolver2.register(new URL("ftp://localhost/2"), smallFile)[ FD ]
Line_5 $$ File smallFile = new File("./src/test/java/sample1.json")-->Line_84 $$ uriResolver2.register(new URL("ftp://localhost/2"), smallFile)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_85 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_85 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile)[ FD ]
Line_5 $$ File smallFile = new File("./src/test/java/sample1.json")-->Line_85 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile)[ FD ]
Line_87 $$ Reader r1 = uriResolver2.resolveURL(new URL("ftp://localhost/2"), null).getReader()-->Line_87 $$ Reader r1 = uriResolver2.resolveURL(new URL("ftp://localhost/2"), null).getReader()[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_87 $$ Reader r1 = uriResolver2.resolveURL(new URL("ftp://localhost/2"), null).getReader()[ FD ]
Line_88 $$ Reader r2 = uriResolver2.resolveURL(new URL("ftp://localhost/2#2"), null).getReader()-->Line_88 $$ Reader r2 = uriResolver2.resolveURL(new URL("ftp://localhost/2#2"), null).getReader()[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_88 $$ Reader r2 = uriResolver2.resolveURL(new URL("ftp://localhost/2#2"), null).getReader()[ FD ]
Line_90 $$ while ((ch = r1.read()) != -1) -->Line_90 $$ while ((ch = r1.read()) != -1) [ FD ]
Line_89 $$ int ch = 0-->Line_90 $$ while ((ch = r1.read()) != -1) [ FD ]
Line_90 $$ while ((ch = r1.read()) != -1) -->Line_90 $$ while ((ch = r1.read()) != -1) [ CD ]
Line_87 $$ Reader r1 = uriResolver2.resolveURL(new URL("ftp://localhost/2"), null).getReader()-->Line_90 $$ while ((ch = r1.read()) != -1) [ FD ]
Line_90 $$ while ((ch = r1.read()) != -1) -->Line_91 $$ assertEquals(ch, r2.read())[ CD ]
Line_90 $$ while ((ch = r1.read()) != -1) -->Line_91 $$ assertEquals(ch, r2.read())[ FD ]
Line_89 $$ int ch = 0-->Line_91 $$ assertEquals(ch, r2.read())[ FD ]
Line_88 $$ Reader r2 = uriResolver2.resolveURL(new URL("ftp://localhost/2#2"), null).getReader()-->Line_91 $$ assertEquals(ch, r2.read())[ FD ]
Line_88 $$ Reader r2 = uriResolver2.resolveURL(new URL("ftp://localhost/2#2"), null).getReader()-->Line_93 $$ assertEquals(-1, r2.read())[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_97 $$ uriResolver2.register(new URL("ftp://localhost/1"), null)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_97 $$ uriResolver2.register(new URL("ftp://localhost/1"), null)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_98 $$ uriResolver2.register(new URL("ftp://localhost/2"), null)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_98 $$ uriResolver2.register(new URL("ftp://localhost/2"), null)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_99 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), null)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_99 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), null)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_100 $$ uriResolver2.register(new URL("ftp://localhost/1"), bigFile, true)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_100 $$ uriResolver2.register(new URL("ftp://localhost/1"), bigFile, true)[ FD ]
Line_4 $$ File bigFile = new File("./src/test/java/big.json")-->Line_100 $$ uriResolver2.register(new URL("ftp://localhost/1"), bigFile, true)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_101 $$ uriResolver2.register(new URL("ftp://localhost/2"), smallFile, true)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_101 $$ uriResolver2.register(new URL("ftp://localhost/2"), smallFile, true)[ FD ]
Line_5 $$ File smallFile = new File("./src/test/java/sample1.json")-->Line_101 $$ uriResolver2.register(new URL("ftp://localhost/2"), smallFile, true)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_102 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile, true)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_102 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile, true)[ FD ]
Line_5 $$ File smallFile = new File("./src/test/java/sample1.json")-->Line_102 $$ uriResolver2.register(new URL("ftp://localhost/2#2"), smallFile, true)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_103 $$ uriResolver2.unregister(new URL("ftp://localhost/1"), true)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_103 $$ uriResolver2.unregister(new URL("ftp://localhost/1"), true)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_104 $$ uriResolver2.unregister(new URL("ftp://localhost/2"), true)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_104 $$ uriResolver2.unregister(new URL("ftp://localhost/2"), true)[ FD ]
Line_2 $$ public void testResolveURL() throws Exception -->Line_105 $$ uriResolver2.unregister(new URL("ftp://localhost/2#2"), true)[ CD ]
Line_8 $$ JSONSchemaURIResolverImpl uriResolver2 = new JSONSchemaURIResolverImpl()-->Line_105 $$ uriResolver2.unregister(new URL("ftp://localhost/2#2"), true)[ FD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_13 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_13 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_13 $$ for (int i = 2; i < urls.length; i++) -->Line_13 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_15 $$ String url = (String) urls[i]-->Line_16 $$ uriResolver.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ FD ]
Line_23 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_23 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_23 $$ for (int i = 2; i < urls.length; i++) -->Line_23 $$ for (int i = 2; i < urls.length; i++) [ FD ]
Line_25 $$ String url = (String) urls[i]-->Line_26 $$ uriResolver2.register(new URL(url), new File("./src/test/java/" + url.replace(":", "_").replace("/", "_") + ".schema.json"))[ FD ]
Line_90 $$ while ((ch = r1.read()) != -1) -->Line_91 $$ assertEquals(ch, r2.read())[ FD ]
