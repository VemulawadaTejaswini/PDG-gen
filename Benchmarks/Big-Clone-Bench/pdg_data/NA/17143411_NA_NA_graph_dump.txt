Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException [ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_3 $$ String callback = para(req, JsonWriter.CALLBACK, null)[ CD ]
Line_3 $$ String callback = para(req, JsonWriter.CALLBACK, null)-->Line_3 $$ String callback = para(req, JsonWriter.CALLBACK, null)[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_3 $$ String callback = para(req, JsonWriter.CALLBACK, null)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_4 $$ String input = para(req, INPUT, null)[ CD ]
Line_4 $$ String input = para(req, INPUT, null)-->Line_4 $$ String input = para(req, INPUT, null)[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_4 $$ String input = para(req, INPUT, null)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_5 $$ String type = para(req, TYPE, "url")[ CD ]
Line_5 $$ String type = para(req, TYPE, "url")-->Line_5 $$ String type = para(req, TYPE, "url")[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_5 $$ String type = para(req, TYPE, "url")[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_6 $$ String format = para(req, FORMAT, null)[ CD ]
Line_6 $$ String format = para(req, FORMAT, null)-->Line_6 $$ String format = para(req, FORMAT, null)[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_6 $$ String format = para(req, FORMAT, null)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_7 $$ PrintWriter out = null[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_8 $$ Reader contentReader = null[ CD ]
Line_7 $$ PrintWriter out = null-->Line_10 $$ out = resp.getWriter()[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_10 $$ out = resp.getWriter()[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_10 $$ out = resp.getWriter()[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_10 $$ out = resp.getWriter()[ FD ]
Line_4 $$ String input = para(req, INPUT, null)-->Line_11 $$ if (StringUtils.trimToNull(input) == null) [ FD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_12 $$ resp.setContentType("text/html")[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_12 $$ resp.setContentType("text/html")[ FD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_13 $$ printHelp(out)[ CD ]
Line_7 $$ PrintWriter out = null-->Line_13 $$ printHelp(out)[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_13 $$ printHelp(out)[ FD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_15 $$ if (type.equalsIgnoreCase("url")) [ CD ]
Line_5 $$ String type = para(req, TYPE, "url")-->Line_15 $$ if (type.equalsIgnoreCase("url")) [ FD ]
Line_15 $$ if (type.equalsIgnoreCase("url")) -->Line_15 $$ if (type.equalsIgnoreCase("url")) [ CD ]
Line_5 $$ String type = para(req, TYPE, "url")-->Line_15 $$ if (type.equalsIgnoreCase("url")) [ FD ]
Line_15 $$ if (type.equalsIgnoreCase("url")) -->Line_16 $$ HttpGet httpget = new HttpGet(input)[ CD ]
Line_18 $$ HttpResponse response = client.execute(httpget)-->Line_18 $$ HttpResponse response = client.execute(httpget)[ CD ]
Line_16 $$ HttpGet httpget = new HttpGet(input)-->Line_18 $$ HttpResponse response = client.execute(httpget)[ FD ]
Line_19 $$ HttpEntity entity = response.getEntity()-->Line_19 $$ HttpEntity entity = response.getEntity()[ CD ]
Line_18 $$ HttpResponse response = client.execute(httpget)-->Line_19 $$ HttpEntity entity = response.getEntity()[ FD ]
Line_19 $$ HttpEntity entity = response.getEntity()-->Line_20 $$ if (entity != null) [ FD ]
Line_20 $$ if (entity != null) -->Line_21 $$ String charset = "UTF-8"[ CD ]
Line_20 $$ if (entity != null) -->Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)[ CD ]
Line_8 $$ Reader contentReader = null-->Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)[ FD ]
Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)-->Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)[ FD ]
Line_19 $$ HttpEntity entity = response.getEntity()-->Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)[ FD ]
Line_20 $$ if (entity != null) -->Line_23 $$ if (false) [ CD ]
Line_23 $$ if (false) -->Line_24 $$ contentReader = new FilterXmlReader(contentReader)[ CD ]
Line_8 $$ Reader contentReader = null-->Line_24 $$ contentReader = new FilterXmlReader(contentReader)[ FD ]
Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)-->Line_24 $$ contentReader = new FilterXmlReader(contentReader)[ FD ]
Line_24 $$ contentReader = new FilterXmlReader(contentReader)-->Line_24 $$ contentReader = new FilterXmlReader(contentReader)[ FD ]
Line_23 $$ if (false) -->Line_26 $$ contentReader = new BufferedReader(contentReader)[ CD ]
Line_8 $$ Reader contentReader = null-->Line_26 $$ contentReader = new BufferedReader(contentReader)[ FD ]
Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)-->Line_26 $$ contentReader = new BufferedReader(contentReader)[ FD ]
Line_24 $$ contentReader = new FilterXmlReader(contentReader)-->Line_26 $$ contentReader = new BufferedReader(contentReader)[ FD ]
Line_26 $$ contentReader = new BufferedReader(contentReader)-->Line_26 $$ contentReader = new BufferedReader(contentReader)[ FD ]
Line_16 $$ HttpGet httpget = new HttpGet(input)-->Line_30 $$ httpget.abort()[ FD ]
Line_15 $$ if (type.equalsIgnoreCase("url")) -->Line_34 $$ contentReader = new StringReader(input)[ CD ]
Line_8 $$ Reader contentReader = null-->Line_34 $$ contentReader = new StringReader(input)[ FD ]
Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)-->Line_34 $$ contentReader = new StringReader(input)[ FD ]
Line_24 $$ contentReader = new FilterXmlReader(contentReader)-->Line_34 $$ contentReader = new StringReader(input)[ FD ]
Line_26 $$ contentReader = new BufferedReader(contentReader)-->Line_34 $$ contentReader = new StringReader(input)[ FD ]
Line_34 $$ contentReader = new StringReader(input)-->Line_34 $$ contentReader = new StringReader(input)[ FD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_36 $$ long time = System.currentTimeMillis()[ CD ]
Line_36 $$ long time = System.currentTimeMillis()-->Line_36 $$ long time = System.currentTimeMillis()[ CD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_37 $$ TokenStream stream = nameTokenStream(contentReader)[ CD ]
Line_37 $$ TokenStream stream = nameTokenStream(contentReader)-->Line_37 $$ TokenStream stream = nameTokenStream(contentReader)[ CD ]
Line_8 $$ Reader contentReader = null-->Line_37 $$ TokenStream stream = nameTokenStream(contentReader)[ FD ]
Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)-->Line_37 $$ TokenStream stream = nameTokenStream(contentReader)[ FD ]
Line_24 $$ contentReader = new FilterXmlReader(contentReader)-->Line_37 $$ TokenStream stream = nameTokenStream(contentReader)[ FD ]
Line_26 $$ contentReader = new BufferedReader(contentReader)-->Line_37 $$ TokenStream stream = nameTokenStream(contentReader)[ FD ]
Line_34 $$ contentReader = new StringReader(input)-->Line_37 $$ TokenStream stream = nameTokenStream(contentReader)[ FD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_38 $$ SciNameIterator iter = new SciNameIterator(stream)[ CD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_39 $$ if (format != null && format.equalsIgnoreCase("json")) [ CD ]
Line_6 $$ String format = para(req, FORMAT, null)-->Line_39 $$ if (format != null && format.equalsIgnoreCase("json")) [ FD ]
Line_39 $$ if (format != null && format.equalsIgnoreCase("json")) -->Line_40 $$ resp.setContentType("application/json")[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_40 $$ resp.setContentType("application/json")[ FD ]
Line_39 $$ if (format != null && format.equalsIgnoreCase("json")) -->Line_41 $$ streamAsJSON(iter, out, callback)[ CD ]
Line_38 $$ SciNameIterator iter = new SciNameIterator(stream)-->Line_41 $$ streamAsJSON(iter, out, callback)[ FD ]
Line_7 $$ PrintWriter out = null-->Line_41 $$ streamAsJSON(iter, out, callback)[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_41 $$ streamAsJSON(iter, out, callback)[ FD ]
Line_3 $$ String callback = para(req, JsonWriter.CALLBACK, null)-->Line_41 $$ streamAsJSON(iter, out, callback)[ FD ]
Line_39 $$ if (format != null && format.equalsIgnoreCase("json")) -->Line_42 $$ if (format != null && format.equalsIgnoreCase("xml")) [ CD ]
Line_6 $$ String format = para(req, FORMAT, null)-->Line_42 $$ if (format != null && format.equalsIgnoreCase("xml")) [ FD ]
Line_42 $$ if (format != null && format.equalsIgnoreCase("xml")) -->Line_43 $$ resp.setContentType("text/xml")[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_43 $$ resp.setContentType("text/xml")[ FD ]
Line_42 $$ if (format != null && format.equalsIgnoreCase("xml")) -->Line_44 $$ streamAsXML(iter, out)[ CD ]
Line_38 $$ SciNameIterator iter = new SciNameIterator(stream)-->Line_44 $$ streamAsXML(iter, out)[ FD ]
Line_7 $$ PrintWriter out = null-->Line_44 $$ streamAsXML(iter, out)[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_44 $$ streamAsXML(iter, out)[ FD ]
Line_42 $$ if (format != null && format.equalsIgnoreCase("xml")) -->Line_46 $$ resp.setContentType("text/plain")[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws WsException -->Line_46 $$ resp.setContentType("text/plain")[ FD ]
Line_42 $$ if (format != null && format.equalsIgnoreCase("xml")) -->Line_47 $$ streamAsText(iter, out)[ CD ]
Line_38 $$ SciNameIterator iter = new SciNameIterator(stream)-->Line_47 $$ streamAsText(iter, out)[ FD ]
Line_7 $$ PrintWriter out = null-->Line_47 $$ streamAsText(iter, out)[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_47 $$ streamAsText(iter, out)[ FD ]
Line_11 $$ if (StringUtils.trimToNull(input) == null) -->Line_49 $$ log.info("Indexing finished in " + (System.currentTimeMillis() - time) + " msecs")[ CD ]
Line_8 $$ Reader contentReader = null-->Line_55 $$ if (contentReader != null) [ FD ]
Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)-->Line_55 $$ if (contentReader != null) [ FD ]
Line_24 $$ contentReader = new FilterXmlReader(contentReader)-->Line_55 $$ if (contentReader != null) [ FD ]
Line_26 $$ contentReader = new BufferedReader(contentReader)-->Line_55 $$ if (contentReader != null) [ FD ]
Line_34 $$ contentReader = new StringReader(input)-->Line_55 $$ if (contentReader != null) [ FD ]
Line_8 $$ Reader contentReader = null-->Line_57 $$ contentReader.close()[ FD ]
Line_22 $$ contentReader = new InputStreamReader(entity.getContent(), charset)-->Line_57 $$ contentReader.close()[ FD ]
Line_24 $$ contentReader = new FilterXmlReader(contentReader)-->Line_57 $$ contentReader.close()[ FD ]
Line_26 $$ contentReader = new BufferedReader(contentReader)-->Line_57 $$ contentReader.close()[ FD ]
Line_34 $$ contentReader = new StringReader(input)-->Line_57 $$ contentReader.close()[ FD ]
Line_7 $$ PrintWriter out = null-->Line_62 $$ out.flush()[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_62 $$ out.flush()[ FD ]
Line_7 $$ PrintWriter out = null-->Line_63 $$ out.close()[ FD ]
Line_10 $$ out = resp.getWriter()-->Line_63 $$ out.close()[ FD ]
