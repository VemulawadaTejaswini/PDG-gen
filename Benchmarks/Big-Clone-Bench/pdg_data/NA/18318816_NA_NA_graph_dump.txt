Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException [ CD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_3 $$ final Properties properties = new Properties()[ CD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_4 $$ properties.put("archetypeGroupId", "org.nexopenframework.plugins")[ CD ]
Line_3 $$ final Properties properties = new Properties()-->Line_4 $$ properties.put("archetypeGroupId", "org.nexopenframework.plugins")[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_5 $$ properties.put("archetypeArtifactId", "openfrwk-archetype-webmodule")[ CD ]
Line_3 $$ final Properties properties = new Properties()-->Line_5 $$ properties.put("archetypeArtifactId", "openfrwk-archetype-webmodule")[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_6 $$ final String version = org.maven.ide.eclipse.ext.Maven2Plugin.getArchetypeVersion()[ CD ]
Line_6 $$ final String version = org.maven.ide.eclipse.ext.Maven2Plugin.getArchetypeVersion()-->Line_6 $$ final String version = org.maven.ide.eclipse.ext.Maven2Plugin.getArchetypeVersion()[ CD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_7 $$ properties.put("archetypeVersion", version)[ CD ]
Line_3 $$ final Properties properties = new Properties()-->Line_7 $$ properties.put("archetypeVersion", version)[ FD ]
Line_6 $$ final String version = org.maven.ide.eclipse.ext.Maven2Plugin.getArchetypeVersion()-->Line_7 $$ properties.put("archetypeVersion", version)[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_8 $$ properties.put("artifactId", moduleExtension.getArtifact())[ CD ]
Line_3 $$ final Properties properties = new Properties()-->Line_8 $$ properties.put("artifactId", moduleExtension.getArtifact())[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_8 $$ properties.put("artifactId", moduleExtension.getArtifact())[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_9 $$ properties.put("groupId", moduleExtension.getGroup())[ CD ]
Line_3 $$ final Properties properties = new Properties()-->Line_9 $$ properties.put("groupId", moduleExtension.getGroup())[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_9 $$ properties.put("groupId", moduleExtension.getGroup())[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_10 $$ properties.put("version", moduleExtension.getVersion())[ CD ]
Line_3 $$ final Properties properties = new Properties()-->Line_10 $$ properties.put("version", moduleExtension.getVersion())[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_10 $$ properties.put("version", moduleExtension.getVersion())[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_11 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()[ CD ]
Line_11 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()-->Line_11 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()[ CD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_12 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)[ CD ]
Line_12 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)-->Line_12 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)[ CD ]
Line_11 $$ final ILaunchManager launchManager = DebugPlugin.getDefault().getLaunchManager()-->Line_12 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")[ CD ]
Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")-->Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")[ CD ]
Line_12 $$ final ILaunchConfigurationType launchConfigurationType = launchManager.getLaunchConfigurationType(LAUNCH_CONFIGURATION_TYPE_ID)-->Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_14 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()[ CD ]
Line_14 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()-->Line_14 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()[ CD ]
Line_16 $$ final String dfPom = getPomFile(moduleExtension.getGroup(), moduleExtension.getArtifact())-->Line_16 $$ final String dfPom = getPomFile(moduleExtension.getGroup(), moduleExtension.getArtifact())[ CD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_16 $$ final String dfPom = getPomFile(moduleExtension.getGroup(), moduleExtension.getArtifact())[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_16 $$ final String dfPom = getPomFile(moduleExtension.getGroup(), moduleExtension.getArtifact())[ FD ]
Line_16 $$ final String dfPom = getPomFile(moduleExtension.getGroup(), moduleExtension.getArtifact())-->Line_17 $$ final ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())[ FD ]
Line_19 $$ OutputStream fous = null-->Line_21 $$ fous = new FileOutputStream(f)[ FD ]
Line_21 $$ fous = new FileOutputStream(f)-->Line_21 $$ fous = new FileOutputStream(f)[ FD ]
Line_17 $$ final ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())-->Line_22 $$ IOUtils.copy(bais, fous)[ FD ]
Line_19 $$ OutputStream fous = null-->Line_22 $$ IOUtils.copy(bais, fous)[ FD ]
Line_21 $$ fous = new FileOutputStream(f)-->Line_22 $$ IOUtils.copy(bais, fous)[ FD ]
Line_19 $$ OutputStream fous = null-->Line_25 $$ if (fous != null) [ FD ]
Line_21 $$ fous = new FileOutputStream(f)-->Line_25 $$ if (fous != null) [ FD ]
Line_25 $$ if (fous != null) -->Line_26 $$ fous.close()[ CD ]
Line_19 $$ OutputStream fous = null-->Line_26 $$ fous.close()[ FD ]
Line_21 $$ fous = new FileOutputStream(f)-->Line_26 $$ fous.close()[ FD ]
Line_17 $$ final ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())-->Line_28 $$ if (bais != null) [ FD ]
Line_28 $$ if (bais != null) -->Line_29 $$ bais.close()[ CD ]
Line_17 $$ final ByteArrayInputStream bais = new ByteArrayInputStream(dfPom.getBytes())-->Line_29 $$ bais.close()[ FD ]
Line_37 $$ final Class clazz = Thread.currentThread().getContextClassLoader().loadClass("org.maven.ide.eclipse.Maven2Plugin")-->Line_37 $$ final Class clazz = Thread.currentThread().getContextClassLoader().loadClass("org.maven.ide.eclipse.Maven2Plugin")[ CD ]
Line_37 $$ final Class clazz = Thread.currentThread().getContextClassLoader().loadClass("org.maven.ide.eclipse.Maven2Plugin")-->Line_38 $$ final Maven2Plugin plugin = (Maven2Plugin) clazz.getMethod("getDefault", new Class[0]).invoke(null, new Object[0])[ FD ]
Line_35 $$ boolean offline = false-->Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")[ FD ]
Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")-->Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")[ FD ]
Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")-->Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")[ CD ]
Line_38 $$ final Maven2Plugin plugin = (Maven2Plugin) clazz.getMethod("getDefault", new Class[0]).invoke(null, new Object[0])-->Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")[ FD ]
Line_47 $$ if (offline) -->Line_48 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ CD ]
Line_34 $$ String goalName = "archetype:create"-->Line_48 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ FD ]
Line_48 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_48 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ FD ]
Line_48 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_48 $$ goalName = new StringBuffer(goalName).append(" -o").toString()[ CD ]
Line_35 $$ boolean offline = false-->Line_50 $$ if (!offline) [ FD ]
Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")-->Line_50 $$ if (!offline) [ FD ]
Line_50 $$ if (!offline) -->Line_50 $$ if (!offline) [ CD ]
Line_35 $$ boolean offline = false-->Line_50 $$ if (!offline) [ FD ]
Line_39 $$ offline = plugin.getPreferenceStore().getBoolean("eclipse.m2.offline")-->Line_50 $$ if (!offline) [ FD ]
Line_50 $$ if (!offline) -->Line_51 $$ final IPreferenceStore ps = Maven2Plugin.getDefault().getPreferenceStore()[ CD ]
Line_51 $$ final IPreferenceStore ps = Maven2Plugin.getDefault().getPreferenceStore()-->Line_51 $$ final IPreferenceStore ps = Maven2Plugin.getDefault().getPreferenceStore()[ CD ]
Line_50 $$ if (!offline) -->Line_52 $$ final String repositories = ps.getString(Maven2PreferenceConstants.P_M2_REPOSITORIES)[ CD ]
Line_52 $$ final String repositories = ps.getString(Maven2PreferenceConstants.P_M2_REPOSITORIES)-->Line_52 $$ final String repositories = ps.getString(Maven2PreferenceConstants.P_M2_REPOSITORIES)[ CD ]
Line_51 $$ final IPreferenceStore ps = Maven2Plugin.getDefault().getPreferenceStore()-->Line_52 $$ final String repositories = ps.getString(Maven2PreferenceConstants.P_M2_REPOSITORIES)[ FD ]
Line_50 $$ if (!offline) -->Line_53 $$ final String[] repos = repositories.split(org.maven.ide.eclipse.ext.Maven2Plugin.REPO_SEPARATOR)[ CD ]
Line_53 $$ final String[] repos = repositories.split(org.maven.ide.eclipse.ext.Maven2Plugin.REPO_SEPARATOR)-->Line_53 $$ final String[] repos = repositories.split(org.maven.ide.eclipse.ext.Maven2Plugin.REPO_SEPARATOR)[ CD ]
Line_52 $$ final String repositories = ps.getString(Maven2PreferenceConstants.P_M2_REPOSITORIES)-->Line_53 $$ final String[] repos = repositories.split(org.maven.ide.eclipse.ext.Maven2Plugin.REPO_SEPARATOR)[ FD ]
Line_50 $$ if (!offline) -->Line_54 $$ final StringBuffer sbRepos = new StringBuffer()[ CD ]
Line_50 $$ if (!offline) -->Line_55 $$ for (int k = 0; k < repos.length; k++) [ CD ]
Line_50 $$ if (!offline) -->Line_50 $$ if (!offline) [ CD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_55 $$ for (int k = 0; k < repos.length; k++) [ CD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_55 $$ for (int k = 0; k < repos.length; k++) [ CD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_55 $$ for (int k = 0; k < repos.length; k++) [ FD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_56 $$ sbRepos.append(repos[k])[ CD ]
Line_54 $$ final StringBuffer sbRepos = new StringBuffer()-->Line_56 $$ sbRepos.append(repos[k])[ FD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_57 $$ if (k != repos.length - 1) [ CD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_57 $$ if (k != repos.length - 1) [ FD ]
Line_57 $$ if (k != repos.length - 1) -->Line_58 $$ sbRepos.append(",")[ CD ]
Line_54 $$ final StringBuffer sbRepos = new StringBuffer()-->Line_58 $$ sbRepos.append(",")[ FD ]
Line_50 $$ if (!offline) -->Line_61 $$ properties.put("remoteRepositories", sbRepos.toString())[ CD ]
Line_3 $$ final Properties properties = new Properties()-->Line_61 $$ properties.put("remoteRepositories", sbRepos.toString())[ FD ]
Line_54 $$ final StringBuffer sbRepos = new StringBuffer()-->Line_61 $$ properties.put("remoteRepositories", sbRepos.toString())[ FD ]
Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")-->Line_63 $$ workingCopy.setAttribute(ATTR_GOALS, goalName)[ FD ]
Line_34 $$ String goalName = "archetype:create"-->Line_63 $$ workingCopy.setAttribute(ATTR_GOALS, goalName)[ FD ]
Line_48 $$ goalName = new StringBuffer(goalName).append(" -o").toString()-->Line_63 $$ workingCopy.setAttribute(ATTR_GOALS, goalName)[ FD ]
Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")-->Line_64 $$ workingCopy.setAttribute(ATTR_POM_DIR, archetypePomDirectory.getAbsolutePath())[ FD ]
Line_14 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()-->Line_64 $$ workingCopy.setAttribute(ATTR_POM_DIR, archetypePomDirectory.getAbsolutePath())[ FD ]
Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")-->Line_65 $$ workingCopy.setAttribute(ATTR_PROPERTIES, convertPropertiesToList(properties))[ FD ]
Line_3 $$ final Properties properties = new Properties()-->Line_65 $$ workingCopy.setAttribute(ATTR_PROPERTIES, convertPropertiesToList(properties))[ FD ]
Line_66 $$ final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout()-->Line_66 $$ final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout()[ CD ]
Line_13 $$ final ILaunchConfigurationWorkingCopy workingCopy = launchConfigurationType.newInstance(null, "Creating WEB module using Apache Maven archetype")-->Line_67 $$ TimeoutLaunchConfiguration.launchWithTimeout(new NullProgressMonitor(), workingCopy, project, timeout)[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_67 $$ TimeoutLaunchConfiguration.launchWithTimeout(new NullProgressMonitor(), workingCopy, project, timeout)[ FD ]
Line_66 $$ final long timeout = org.maven.ide.eclipse.ext.Maven2Plugin.getTimeout()-->Line_67 $$ TimeoutLaunchConfiguration.launchWithTimeout(new NullProgressMonitor(), workingCopy, project, timeout)[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_68 $$ FileUtils.copyDirectoryStructure(new File(archetypePomDirectory, project.getName()), new File(location))[ FD ]
Line_2 $$ public static void invokeMvnArtifact(final IProject project, final IModuleExtension moduleExtension, final String location) throws CoreException, InterruptedException, IOException -->Line_71 $$ project.refreshLocal(IResource.DEPTH_INFINITE, null)[ FD ]
Line_14 $$ File archetypePomDirectory = getDefaultArchetypePomDirectory()-->Line_73 $$ FileUtils.deleteDirectory(archetypePomDirectory)[ FD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_55 $$ for (int k = 0; k < repos.length; k++) [ FD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_55 $$ for (int k = 0; k < repos.length; k++) [ FD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_55 $$ for (int k = 0; k < repos.length; k++) [ FD ]
Line_55 $$ for (int k = 0; k < repos.length; k++) -->Line_57 $$ if (k != repos.length - 1) [ FD ]
