Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public byte[] getDigest(OMProcessingInstruction pi, String digestAlgorithm) throws OMException [ CD ]
Line_2 $$ public byte[] getDigest(OMProcessingInstruction pi, String digestAlgorithm) throws OMException -->Line_3 $$ byte[] digest = new byte[0][ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)[ CD ]
Line_2 $$ public byte[] getDigest(OMProcessingInstruction pi, String digestAlgorithm) throws OMException -->Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_6 $$ md.update((byte) 0)[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_7 $$ md.update((byte) 0)[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_8 $$ md.update((byte) 0)[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_9 $$ md.update((byte) 7)[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_10 $$ md.update(pi.getTarget().getBytes("UnicodeBigUnmarked"))[ FD ]
Line_2 $$ public byte[] getDigest(OMProcessingInstruction pi, String digestAlgorithm) throws OMException -->Line_10 $$ md.update(pi.getTarget().getBytes("UnicodeBigUnmarked"))[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_11 $$ md.update((byte) 0)[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_12 $$ md.update((byte) 0)[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_13 $$ md.update(pi.getValue().getBytes("UnicodeBigUnmarked"))[ FD ]
Line_2 $$ public byte[] getDigest(OMProcessingInstruction pi, String digestAlgorithm) throws OMException -->Line_13 $$ md.update(pi.getValue().getBytes("UnicodeBigUnmarked"))[ FD ]
Line_3 $$ byte[] digest = new byte[0]-->Line_14 $$ digest = md.digest()[ FD ]
Line_14 $$ digest = md.digest()-->Line_14 $$ digest = md.digest()[ FD ]
Line_14 $$ digest = md.digest()-->Line_14 $$ digest = md.digest()[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(digestAlgorithm)-->Line_14 $$ digest = md.digest()[ FD ]
Line_2 $$ public byte[] getDigest(OMProcessingInstruction pi, String digestAlgorithm) throws OMException -->Line_20 $$ return digest[ CD ]
