Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException [ CD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_3 $$ final Map<String, DomAttr> map = createAttributesCopyWithClonedAttribute(frame, "src")[ CD ]
Line_3 $$ final Map<String, DomAttr> map = createAttributesCopyWithClonedAttribute(frame, "src")-->Line_3 $$ final Map<String, DomAttr> map = createAttributesCopyWithClonedAttribute(frame, "src")[ CD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_3 $$ final Map<String, DomAttr> map = createAttributesCopyWithClonedAttribute(frame, "src")[ FD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_4 $$ final DomAttr srcAttr = map.get("src")[ CD ]
Line_4 $$ final DomAttr srcAttr = map.get("src")-->Line_4 $$ final DomAttr srcAttr = map.get("src")[ CD ]
Line_3 $$ final Map<String, DomAttr> map = createAttributesCopyWithClonedAttribute(frame, "src")-->Line_4 $$ final DomAttr srcAttr = map.get("src")[ FD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_5 $$ if (srcAttr == null) [ CD ]
Line_4 $$ final DomAttr srcAttr = map.get("src")-->Line_5 $$ if (srcAttr == null) [ FD ]
Line_5 $$ if (srcAttr == null) -->Line_6 $$ return map[ CD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_8 $$ final Page enclosedPage = frame.getEnclosedPage()[ CD ]
Line_8 $$ final Page enclosedPage = frame.getEnclosedPage()-->Line_8 $$ final Page enclosedPage = frame.getEnclosedPage()[ CD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_8 $$ final Page enclosedPage = frame.getEnclosedPage()[ FD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_9 $$ final String suffix = getFileExtension(enclosedPage)[ CD ]
Line_9 $$ final String suffix = getFileExtension(enclosedPage)-->Line_9 $$ final String suffix = getFileExtension(enclosedPage)[ CD ]
Line_8 $$ final Page enclosedPage = frame.getEnclosedPage()-->Line_9 $$ final String suffix = getFileExtension(enclosedPage)[ FD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)[ CD ]
Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)-->Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)[ CD ]
Line_4 $$ final DomAttr srcAttr = map.get("src")-->Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)[ FD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_11 $$ if (enclosedPage instanceof HtmlPage) [ CD ]
Line_8 $$ final Page enclosedPage = frame.getEnclosedPage()-->Line_11 $$ if (enclosedPage instanceof HtmlPage) [ FD ]
Line_11 $$ if (enclosedPage instanceof HtmlPage) -->Line_12 $$ file.delete()[ CD ]
Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)-->Line_12 $$ file.delete()[ FD ]
Line_11 $$ if (enclosedPage instanceof HtmlPage) -->Line_13 $$ ((HtmlPage) enclosedPage).save(file)[ CD ]
Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)-->Line_13 $$ ((HtmlPage) enclosedPage).save(file)[ FD ]
Line_11 $$ if (enclosedPage instanceof HtmlPage) -->Line_15 $$ final InputStream is = enclosedPage.getWebResponse().getContentAsStream()[ CD ]
Line_15 $$ final InputStream is = enclosedPage.getWebResponse().getContentAsStream()-->Line_15 $$ final InputStream is = enclosedPage.getWebResponse().getContentAsStream()[ CD ]
Line_8 $$ final Page enclosedPage = frame.getEnclosedPage()-->Line_15 $$ final InputStream is = enclosedPage.getWebResponse().getContentAsStream()[ FD ]
Line_11 $$ if (enclosedPage instanceof HtmlPage) -->Line_16 $$ final FileOutputStream fos = new FileOutputStream(file)[ CD ]
Line_11 $$ if (enclosedPage instanceof HtmlPage) -->Line_17 $$ IOUtils.copyLarge(is, fos)[ CD ]
Line_15 $$ final InputStream is = enclosedPage.getWebResponse().getContentAsStream()-->Line_17 $$ IOUtils.copyLarge(is, fos)[ FD ]
Line_16 $$ final FileOutputStream fos = new FileOutputStream(file)-->Line_17 $$ IOUtils.copyLarge(is, fos)[ FD ]
Line_11 $$ if (enclosedPage instanceof HtmlPage) -->Line_18 $$ IOUtils.closeQuietly(is)[ CD ]
Line_15 $$ final InputStream is = enclosedPage.getWebResponse().getContentAsStream()-->Line_18 $$ IOUtils.closeQuietly(is)[ FD ]
Line_11 $$ if (enclosedPage instanceof HtmlPage) -->Line_19 $$ IOUtils.closeQuietly(fos)[ CD ]
Line_16 $$ final FileOutputStream fos = new FileOutputStream(file)-->Line_19 $$ IOUtils.closeQuietly(fos)[ FD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_21 $$ srcAttr.setValue(file.getParentFile().getName() + FILE_SEPARATOR + file.getName())[ CD ]
Line_4 $$ final DomAttr srcAttr = map.get("src")-->Line_21 $$ srcAttr.setValue(file.getParentFile().getName() + FILE_SEPARATOR + file.getName())[ FD ]
Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)-->Line_21 $$ srcAttr.setValue(file.getParentFile().getName() + FILE_SEPARATOR + file.getName())[ FD ]
Line_10 $$ final File file = createFile(srcAttr.getValue(), "." + suffix)-->Line_21 $$ srcAttr.setValue(file.getParentFile().getName() + FILE_SEPARATOR + file.getName())[ FD ]
Line_2 $$ private Map<String, DomAttr> getAttributesFor(final BaseFrame frame) throws IOException -->Line_22 $$ return map[ CD ]
