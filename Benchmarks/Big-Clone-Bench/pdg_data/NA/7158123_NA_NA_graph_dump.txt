Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void truncateLog(long finalZxid) throws IOException [ CD ]
Line_2 $$ public void truncateLog(long finalZxid) throws IOException -->Line_3 $$ long highestZxid = 0[ CD ]
Line_5 $$ long zxid = isValidSnapshot(f)-->Line_5 $$ long zxid = isValidSnapshot(f)[ CD ]
Line_4 $$ for (File f : dataDir.listFiles()) -->Line_5 $$ long zxid = isValidSnapshot(f)[ FD ]
Line_5 $$ long zxid = isValidSnapshot(f)-->Line_6 $$ if (zxid == -1) [ FD ]
Line_6 $$ if (zxid == -1) -->Line_7 $$ LOG.warn("Skipping " + f)[ CD ]
Line_5 $$ long zxid = isValidSnapshot(f)-->Line_10 $$ if (zxid > highestZxid) [ FD ]
Line_3 $$ long highestZxid = 0-->Line_10 $$ if (zxid > highestZxid) [ FD ]
Line_10 $$ if (zxid > highestZxid) -->Line_11 $$ highestZxid = zxid[ CD ]
Line_3 $$ long highestZxid = 0-->Line_11 $$ highestZxid = zxid[ FD ]
Line_11 $$ highestZxid = zxid-->Line_11 $$ highestZxid = zxid[ FD ]
Line_5 $$ long zxid = isValidSnapshot(f)-->Line_11 $$ highestZxid = zxid[ FD ]
Line_2 $$ public void truncateLog(long finalZxid) throws IOException -->Line_14 $$ File[] files = getLogFiles(dataLogDir.listFiles(), highestZxid)[ CD ]
Line_14 $$ File[] files = getLogFiles(dataLogDir.listFiles(), highestZxid)-->Line_14 $$ File[] files = getLogFiles(dataLogDir.listFiles(), highestZxid)[ CD ]
Line_3 $$ long highestZxid = 0-->Line_14 $$ File[] files = getLogFiles(dataLogDir.listFiles(), highestZxid)[ FD ]
Line_11 $$ highestZxid = zxid-->Line_14 $$ File[] files = getLogFiles(dataLogDir.listFiles(), highestZxid)[ FD ]
Line_2 $$ public void truncateLog(long finalZxid) throws IOException -->Line_15 $$ boolean truncated = false[ CD ]
Line_18 $$ InputArchive ia = BinaryInputArchive.getArchive(fin)-->Line_18 $$ InputArchive ia = BinaryInputArchive.getArchive(fin)[ CD ]
Line_17 $$ FileInputStream fin = new FileInputStream(f)-->Line_18 $$ InputArchive ia = BinaryInputArchive.getArchive(fin)[ FD ]
Line_19 $$ FileChannel fchan = fin.getChannel()-->Line_19 $$ FileChannel fchan = fin.getChannel()[ CD ]
Line_17 $$ FileInputStream fin = new FileInputStream(f)-->Line_19 $$ FileChannel fchan = fin.getChannel()[ FD ]
Line_21 $$ while (true) -->Line_22 $$ byte[] bytes = ia.readBuffer("txtEntry")[ CD ]
Line_22 $$ byte[] bytes = ia.readBuffer("txtEntry")-->Line_22 $$ byte[] bytes = ia.readBuffer("txtEntry")[ CD ]
Line_18 $$ InputArchive ia = BinaryInputArchive.getArchive(fin)-->Line_22 $$ byte[] bytes = ia.readBuffer("txtEntry")[ FD ]
Line_21 $$ while (true) -->Line_23 $$ if (bytes.length == 0) [ CD ]
Line_21 $$ while (true) -->Line_26 $$ InputArchive iab = BinaryInputArchive.getArchive(new ByteArrayInputStream(bytes))[ CD ]
Line_26 $$ InputArchive iab = BinaryInputArchive.getArchive(new ByteArrayInputStream(bytes))-->Line_26 $$ InputArchive iab = BinaryInputArchive.getArchive(new ByteArrayInputStream(bytes))[ CD ]
Line_21 $$ while (true) -->Line_27 $$ TxnHeader hdr = new TxnHeader()[ CD ]
Line_21 $$ while (true) -->Line_28 $$ deserializeTxn(iab, hdr)[ CD ]
Line_26 $$ InputArchive iab = BinaryInputArchive.getArchive(new ByteArrayInputStream(bytes))-->Line_28 $$ deserializeTxn(iab, hdr)[ FD ]
Line_27 $$ TxnHeader hdr = new TxnHeader()-->Line_28 $$ deserializeTxn(iab, hdr)[ FD ]
Line_21 $$ while (true) -->Line_29 $$ if (ia.readByte("EOF") != 'B') [ CD ]
Line_18 $$ InputArchive ia = BinaryInputArchive.getArchive(fin)-->Line_29 $$ if (ia.readByte("EOF") != 'B') [ FD ]
Line_21 $$ while (true) -->Line_32 $$ if (hdr.getZxid() == finalZxid) [ CD ]
Line_2 $$ public void truncateLog(long finalZxid) throws IOException -->Line_32 $$ if (hdr.getZxid() == finalZxid) [ FD ]
Line_27 $$ TxnHeader hdr = new TxnHeader()-->Line_32 $$ if (hdr.getZxid() == finalZxid) [ FD ]
Line_32 $$ if (hdr.getZxid() == finalZxid) -->Line_33 $$ long pos = fchan.position()[ CD ]
Line_33 $$ long pos = fchan.position()-->Line_33 $$ long pos = fchan.position()[ CD ]
Line_19 $$ FileChannel fchan = fin.getChannel()-->Line_33 $$ long pos = fchan.position()[ FD ]
Line_32 $$ if (hdr.getZxid() == finalZxid) -->Line_34 $$ fin.close()[ CD ]
Line_17 $$ FileInputStream fin = new FileInputStream(f)-->Line_34 $$ fin.close()[ FD ]
Line_32 $$ if (hdr.getZxid() == finalZxid) -->Line_35 $$ FileOutputStream fout = new FileOutputStream(f)[ CD ]
Line_32 $$ if (hdr.getZxid() == finalZxid) -->Line_36 $$ FileChannel fchanOut = fout.getChannel()[ CD ]
Line_36 $$ FileChannel fchanOut = fout.getChannel()-->Line_36 $$ FileChannel fchanOut = fout.getChannel()[ CD ]
Line_35 $$ FileOutputStream fout = new FileOutputStream(f)-->Line_36 $$ FileChannel fchanOut = fout.getChannel()[ FD ]
Line_32 $$ if (hdr.getZxid() == finalZxid) -->Line_37 $$ fchanOut.truncate(pos)[ CD ]
Line_36 $$ FileChannel fchanOut = fout.getChannel()-->Line_37 $$ fchanOut.truncate(pos)[ FD ]
Line_33 $$ long pos = fchan.position()-->Line_37 $$ fchanOut.truncate(pos)[ FD ]
Line_32 $$ if (hdr.getZxid() == finalZxid) -->Line_38 $$ truncated = true[ CD ]
Line_38 $$ truncated = true-->Line_38 $$ truncated = true[ FD ]
Line_15 $$ boolean truncated = false-->Line_38 $$ truncated = true[ FD ]
Line_38 $$ truncated = true-->Line_44 $$ if (truncated == true) [ FD ]
Line_15 $$ boolean truncated = false-->Line_44 $$ if (truncated == true) [ FD ]
Line_2 $$ public void truncateLog(long finalZxid) throws IOException -->Line_48 $$ if (truncated == false) [ CD ]
Line_38 $$ truncated = true-->Line_48 $$ if (truncated == false) [ FD ]
Line_15 $$ boolean truncated = false-->Line_48 $$ if (truncated == false) [ FD ]
Line_48 $$ if (truncated == false) -->Line_49 $$ LOG.error("Not able to truncate the log " + Long.toHexString(finalZxid))[ CD ]
Line_2 $$ public void truncateLog(long finalZxid) throws IOException -->Line_49 $$ LOG.error("Not able to truncate the log " + Long.toHexString(finalZxid))[ FD ]
Line_48 $$ if (truncated == false) -->Line_50 $$ System.exit(13)[ CD ]
Line_26 $$ InputArchive iab = BinaryInputArchive.getArchive(new ByteArrayInputStream(bytes))-->Line_28 $$ deserializeTxn(iab, hdr)[ FD ]
Line_27 $$ TxnHeader hdr = new TxnHeader()-->Line_28 $$ deserializeTxn(iab, hdr)[ FD ]
Line_27 $$ TxnHeader hdr = new TxnHeader()-->Line_32 $$ if (hdr.getZxid() == finalZxid) [ FD ]
Line_35 $$ FileOutputStream fout = new FileOutputStream(f)-->Line_36 $$ FileChannel fchanOut = fout.getChannel()[ FD ]
Line_36 $$ FileChannel fchanOut = fout.getChannel()-->Line_37 $$ fchanOut.truncate(pos)[ FD ]
Line_33 $$ long pos = fchan.position()-->Line_37 $$ fchanOut.truncate(pos)[ FD ]
