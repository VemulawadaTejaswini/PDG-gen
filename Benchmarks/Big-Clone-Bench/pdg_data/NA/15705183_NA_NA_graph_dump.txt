Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void initDefaultRolesFile() [ CD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_3 $$ String webConfigPath = System.getProperty("dcm4chee-web3.cfg.path", "conf/dcm4chee-web3")[ CD ]
Line_3 $$ String webConfigPath = System.getProperty("dcm4chee-web3.cfg.path", "conf/dcm4chee-web3")-->Line_3 $$ String webConfigPath = System.getProperty("dcm4chee-web3.cfg.path", "conf/dcm4chee-web3")[ CD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")[ CD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_5 $$ if (!mappingFile.isAbsolute())[ CD ]
Line_5 $$ if (!mappingFile.isAbsolute())-->Line_5 $$ if (!mappingFile.isAbsolute())[ CD ]
Line_5 $$ if (!mappingFile.isAbsolute())-->Line_5 $$ if (!mappingFile.isAbsolute())[ CD ]
Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")-->Line_5 $$ if (!mappingFile.isAbsolute())[ FD ]
Line_5 $$ if (!mappingFile.isAbsolute())-->Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())[ CD ]
Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")-->Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())[ FD ]
Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())-->Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())[ FD ]
Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")-->Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())[ FD ]
Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())-->Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())[ FD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_6 $$ if (mappingFile.exists())[ CD ]
Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")-->Line_6 $$ if (mappingFile.exists())[ FD ]
Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())-->Line_6 $$ if (mappingFile.exists())[ FD ]
Line_6 $$ if (mappingFile.exists())-->Line_6 $$ if (mappingFile.exists())[ CD ]
Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")-->Line_6 $$ if (mappingFile.exists())[ FD ]
Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())-->Line_6 $$ if (mappingFile.exists())[ FD ]
Line_6 $$ if (mappingFile.exists())-->Line_6 $$ return[ CD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_7 $$ log.info("Init default Role Mapping file! mappingFile:" + mappingFile)[ CD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_8 $$ if (mappingFile.getParentFile().mkdirs())[ CD ]
Line_8 $$ if (mappingFile.getParentFile().mkdirs())-->Line_8 $$ if (mappingFile.getParentFile().mkdirs())[ CD ]
Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")-->Line_8 $$ if (mappingFile.getParentFile().mkdirs())[ FD ]
Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())-->Line_8 $$ if (mappingFile.getParentFile().mkdirs())[ FD ]
Line_8 $$ if (mappingFile.getParentFile().mkdirs())-->Line_8 $$ log.info("M-WRITE dir:" + mappingFile.getParent())[ CD ]
Line_4 $$ File mappingFile = new File(webConfigPath + "roles.json")-->Line_8 $$ log.info("M-WRITE dir:" + mappingFile.getParent())[ FD ]
Line_5 $$ mappingFile = new File(ServerConfigLocator.locate().getServerHomeDir(), mappingFile.getPath())-->Line_8 $$ log.info("M-WRITE dir:" + mappingFile.getParent())[ FD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_9 $$ FileChannel fos = null[ CD ]
Line_2 $$ protected void initDefaultRolesFile() -->Line_10 $$ InputStream is = null[ CD ]
Line_12 $$ URL url = getClass().getResource("/META-INF/roles-default.json")-->Line_12 $$ URL url = getClass().getResource("/META-INF/roles-default.json")[ CD ]
Line_10 $$ InputStream is = null-->Line_14 $$ is = url.openStream()[ FD ]
Line_14 $$ is = url.openStream()-->Line_14 $$ is = url.openStream()[ FD ]
Line_14 $$ is = url.openStream()-->Line_14 $$ is = url.openStream()[ CD ]
Line_12 $$ URL url = getClass().getResource("/META-INF/roles-default.json")-->Line_14 $$ is = url.openStream()[ FD ]
Line_15 $$ ReadableByteChannel inCh = Channels.newChannel(is)-->Line_15 $$ ReadableByteChannel inCh = Channels.newChannel(is)[ CD ]
Line_10 $$ InputStream is = null-->Line_15 $$ ReadableByteChannel inCh = Channels.newChannel(is)[ FD ]
Line_14 $$ is = url.openStream()-->Line_15 $$ ReadableByteChannel inCh = Channels.newChannel(is)[ FD ]
Line_9 $$ FileChannel fos = null-->Line_16 $$ fos = new FileOutputStream(mappingFile).getChannel()[ FD ]
Line_16 $$ fos = new FileOutputStream(mappingFile).getChannel()-->Line_16 $$ fos = new FileOutputStream(mappingFile).getChannel()[ FD ]
Line_16 $$ fos = new FileOutputStream(mappingFile).getChannel()-->Line_16 $$ fos = new FileOutputStream(mappingFile).getChannel()[ CD ]
Line_10 $$ InputStream is = null-->Line_18 $$ while (is.available() > 0) pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_14 $$ is = url.openStream()-->Line_18 $$ while (is.available() > 0) pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_18 $$ while (is.available() > 0) pos += fos.transferFrom(inCh, pos, is.available())-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ CD ]
Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_17 $$ int pos = 0-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ CD ]
Line_9 $$ FileChannel fos = null-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_16 $$ fos = new FileOutputStream(mappingFile).getChannel()-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_15 $$ ReadableByteChannel inCh = Channels.newChannel(is)-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_17 $$ int pos = 0-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_10 $$ InputStream is = null-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_14 $$ is = url.openStream()-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
Line_10 $$ InputStream is = null-->Line_22 $$ close(is)[ FD ]
Line_14 $$ is = url.openStream()-->Line_22 $$ close(is)[ FD ]
Line_9 $$ FileChannel fos = null-->Line_23 $$ close(fos)[ FD ]
Line_16 $$ fos = new FileOutputStream(mappingFile).getChannel()-->Line_23 $$ close(fos)[ FD ]
Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())-->Line_18 $$ pos += fos.transferFrom(inCh, pos, is.available())[ FD ]
