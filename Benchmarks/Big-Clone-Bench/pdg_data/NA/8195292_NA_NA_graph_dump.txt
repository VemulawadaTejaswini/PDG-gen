Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testGetJarInformation() throws Exception [ CD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_3 $$ final URL url1 = getClass().getResource("/fakejars/something")[ CD ]
Line_3 $$ final URL url1 = getClass().getResource("/fakejars/something")-->Line_3 $$ final URL url1 = getClass().getResource("/fakejars/something")[ CD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_4 $$ final URL url2 = getClass().getResource("/fakejars/something-else")[ CD ]
Line_4 $$ final URL url2 = getClass().getResource("/fakejars/something-else")-->Line_4 $$ final URL url2 = getClass().getResource("/fakejars/something-else")[ CD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_5 $$ final URL url3 = getClass().getResource("/fakejars/another-thing")[ CD ]
Line_5 $$ final URL url3 = getClass().getResource("/fakejars/another-thing")-->Line_5 $$ final URL url3 = getClass().getResource("/fakejars/another-thing")[ CD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_6 $$ final Map<String, Date> paths = new HashMap<String, Date>()[ CD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_7 $$ paths.put(SOMETHING_JAR, new Date(url1.openConnection().getLastModified()))[ CD ]
Line_6 $$ final Map<String, Date> paths = new HashMap<String, Date>()-->Line_7 $$ paths.put(SOMETHING_JAR, new Date(url1.openConnection().getLastModified()))[ FD ]
Line_3 $$ final URL url1 = getClass().getResource("/fakejars/something")-->Line_7 $$ paths.put(SOMETHING_JAR, new Date(url1.openConnection().getLastModified()))[ FD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_8 $$ paths.put(SOMETHING_ELSE_JAR, new Date(url2.openConnection().getLastModified()))[ CD ]
Line_6 $$ final Map<String, Date> paths = new HashMap<String, Date>()-->Line_8 $$ paths.put(SOMETHING_ELSE_JAR, new Date(url2.openConnection().getLastModified()))[ FD ]
Line_4 $$ final URL url2 = getClass().getResource("/fakejars/something-else")-->Line_8 $$ paths.put(SOMETHING_ELSE_JAR, new Date(url2.openConnection().getLastModified()))[ FD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_9 $$ paths.put(ANOTHER_THING_JAR, new Date(url3.openConnection().getLastModified()))[ CD ]
Line_6 $$ final Map<String, Date> paths = new HashMap<String, Date>()-->Line_9 $$ paths.put(ANOTHER_THING_JAR, new Date(url3.openConnection().getLastModified()))[ FD ]
Line_5 $$ final URL url3 = getClass().getResource("/fakejars/another-thing")-->Line_9 $$ paths.put(ANOTHER_THING_JAR, new Date(url3.openConnection().getLastModified()))[ FD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_10 $$ paths.put(NOT_A_JAR, null)[ CD ]
Line_6 $$ final Map<String, Date> paths = new HashMap<String, Date>()-->Line_10 $$ paths.put(NOT_A_JAR, null)[ FD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_11 $$ context.checking(new Expectations() [ CD ]
Line_6 $$ final Map<String, Date> paths = new HashMap<String, Date>()-->Line_14 $$ will(returnValue(paths.keySet()))[ FD ]
Line_3 $$ final URL url1 = getClass().getResource("/fakejars/something")-->Line_16 $$ will(returnValue(url1))[ FD ]
Line_4 $$ final URL url2 = getClass().getResource("/fakejars/something-else")-->Line_18 $$ will(returnValue(url2))[ FD ]
Line_5 $$ final URL url3 = getClass().getResource("/fakejars/another-thing")-->Line_20 $$ will(returnValue(url3))[ FD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_23 $$ final Map<URL, Date> output = new ModulesImpl(servletContext, null, new LoggerProvider()).getJarInformation()[ CD ]
Line_23 $$ final Map<URL, Date> output = new ModulesImpl(servletContext, null, new LoggerProvider()).getJarInformation()-->Line_23 $$ final Map<URL, Date> output = new ModulesImpl(servletContext, null, new LoggerProvider()).getJarInformation()[ CD ]
Line_2 $$ public void testGetJarInformation() throws Exception -->Line_24 $$ assertThat(output.size(), is(3))[ CD ]
Line_23 $$ final Map<URL, Date> output = new ModulesImpl(servletContext, null, new LoggerProvider()).getJarInformation()-->Line_24 $$ assertThat(output.size(), is(3))[ FD ]
Line_23 $$ final Map<URL, Date> output = new ModulesImpl(servletContext, null, new LoggerProvider()).getJarInformation()-->Line_25 $$ for (final URL url : output.keySet()) [ FD ]
Line_26 $$ final String jarName = url.toString()-->Line_26 $$ final String jarName = url.toString()[ CD ]
Line_25 $$ for (final URL url : output.keySet()) -->Line_26 $$ final String jarName = url.toString()[ FD ]
Line_26 $$ final String jarName = url.toString()-->Line_27 $$ final String key = WEB_INF_LIB_PATH + jarName.substring(jarName.lastIndexOf("/") + 1) + ".jar"[ FD ]
Line_26 $$ final String jarName = url.toString()-->Line_27 $$ final String key = WEB_INF_LIB_PATH + jarName.substring(jarName.lastIndexOf("/") + 1) + ".jar"[ FD ]
Line_23 $$ final Map<URL, Date> output = new ModulesImpl(servletContext, null, new LoggerProvider()).getJarInformation()-->Line_28 $$ assertThat(output.get(url), is(paths.get(key)))[ FD ]
Line_25 $$ for (final URL url : output.keySet()) -->Line_28 $$ assertThat(output.get(url), is(paths.get(key)))[ FD ]
Line_6 $$ final Map<String, Date> paths = new HashMap<String, Date>()-->Line_28 $$ assertThat(output.get(url), is(paths.get(key)))[ FD ]
Line_27 $$ final String key = WEB_INF_LIB_PATH + jarName.substring(jarName.lastIndexOf("/") + 1) + ".jar"-->Line_28 $$ assertThat(output.get(url), is(paths.get(key)))[ FD ]
