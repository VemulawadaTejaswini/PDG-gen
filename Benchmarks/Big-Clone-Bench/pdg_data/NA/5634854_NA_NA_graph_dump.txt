Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void checkClients() [ CD ]
Line_6 $$ if (Util.getDebugLevel() > 90)-->Line_6 $$ e.printStackTrace()[ CD ]
Line_9 $$ if (CANT_CHECK_CLIENTS != null)-->Line_9 $$ KeyboardHero.removeStatus(CANT_CHECK_CLIENTS)[ CD ]
Line_11 $$ URLConnection connection = url.openConnection(getProxy())-->Line_11 $$ URLConnection connection = url.openConnection(getProxy())[ CD ]
Line_10 $$ URL url = new URL(URL_STR + "?req=clients" + (server != null ? "&port=" + server.getLocalPort() : ""))-->Line_11 $$ URLConnection connection = url.openConnection(getProxy())[ FD ]
Line_11 $$ URLConnection connection = url.openConnection(getProxy())-->Line_12 $$ connection.setRequestProperty("User-Agent", USER_AGENT)[ FD ]
Line_11 $$ URLConnection connection = url.openConnection(getProxy())-->Line_13 $$ BufferedReader bufferedRdr = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_15 $$ if (Util.getDebugLevel() > 30)-->Line_15 $$ Util.debug("URL: " + url)[ CD ]
Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) -->Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) [ FD ]
Line_14 $$ String ln-->Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) [ FD ]
Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) -->Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) [ CD ]
Line_13 $$ BufferedReader bufferedRdr = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) [ FD ]
Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) -->Line_17 $$ String[] parts = ln.split(":", 2)[ CD ]
Line_17 $$ String[] parts = ln.split(":", 2)-->Line_17 $$ String[] parts = ln.split(":", 2)[ CD ]
Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) -->Line_17 $$ String[] parts = ln.split(":", 2)[ FD ]
Line_14 $$ String ln-->Line_17 $$ String[] parts = ln.split(":", 2)[ FD ]
Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) -->Line_18 $$ if (parts.length < 2) [ CD ]
Line_18 $$ if (parts.length < 2) -->Line_19 $$ Util.debug(12, "Line read in checkClients: " + ln)[ CD ]
Line_25 $$ if (Util.getDebugLevel() > 25)-->Line_25 $$ Util.debug("NEW Address: " + address.toString())[ CD ]
Line_23 $$ InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]))-->Line_25 $$ Util.debug("NEW Address: " + address.toString())[ FD ]
Line_27 $$ Iterator<Client> iterator = clients.iterator()-->Line_27 $$ Iterator<Client> iterator = clients.iterator()[ CD ]
Line_28 $$ while (iterator.hasNext()) -->Line_28 $$ while (iterator.hasNext()) [ CD ]
Line_27 $$ Iterator<Client> iterator = clients.iterator()-->Line_28 $$ while (iterator.hasNext()) [ FD ]
Line_28 $$ while (iterator.hasNext()) -->Line_29 $$ final Client client = iterator.next()[ CD ]
Line_29 $$ final Client client = iterator.next()-->Line_29 $$ final Client client = iterator.next()[ CD ]
Line_27 $$ Iterator<Client> iterator = clients.iterator()-->Line_29 $$ final Client client = iterator.next()[ FD ]
Line_28 $$ while (iterator.hasNext()) -->Line_30 $$ if (client.socket.isClosed()) [ CD ]
Line_30 $$ if (client.socket.isClosed()) -->Line_30 $$ if (client.socket.isClosed()) [ CD ]
Line_30 $$ if (client.socket.isClosed()) -->Line_31 $$ iterator.remove()[ CD ]
Line_27 $$ Iterator<Client> iterator = clients.iterator()-->Line_31 $$ iterator.remove()[ FD ]
Line_28 $$ while (iterator.hasNext()) -->Line_34 $$ if (Util.getDebugLevel() > 26 && client.address != null)[ CD ]
Line_34 $$ if (Util.getDebugLevel() > 26 && client.address != null)-->Line_34 $$ Util.debug("Address: " + client.address.toString())[ CD ]
Line_28 $$ while (iterator.hasNext()) -->Line_35 $$ if (address.equals(client.address)) [ CD ]
Line_23 $$ InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]))-->Line_35 $$ if (address.equals(client.address)) [ FD ]
Line_35 $$ if (address.equals(client.address)) -->Line_35 $$ if (address.equals(client.address)) [ CD ]
Line_23 $$ InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]))-->Line_35 $$ if (address.equals(client.address)) [ FD ]
Line_35 $$ if (address.equals(client.address)) -->Line_36 $$ notFound = false[ CD ]
Line_36 $$ notFound = false-->Line_36 $$ notFound = false[ FD ]
Line_24 $$ boolean notFound = true-->Line_36 $$ notFound = false[ FD ]
Line_41 $$ if (notFound) -->Line_42 $$ connectClient(address)[ CD ]
Line_23 $$ InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]))-->Line_42 $$ connectClient(address)[ FD ]
Line_13 $$ BufferedReader bufferedRdr = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_47 $$ bufferedRdr.close()[ FD ]
Line_16 $$ while ((ln = bufferedRdr.readLine()) != null) -->Line_17 $$ String[] parts = ln.split(":", 2)[ FD ]
Line_23 $$ InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]))-->Line_25 $$ Util.debug("NEW Address: " + address.toString())[ FD ]
Line_23 $$ InetSocketAddress address = new InetSocketAddress(parts[0], Integer.parseInt(parts[1]))-->Line_42 $$ connectClient(address)[ FD ]
