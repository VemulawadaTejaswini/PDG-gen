Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String getTextFromPart(Part part) [ CD ]
Line_2 $$ public static String getTextFromPart(Part part) -->Line_4 $$ if (part != null && part.getBody() != null) [ FD ]
Line_4 $$ if (part != null && part.getBody() != null) -->Line_5 $$ InputStream in = part.getBody().getInputStream()[ CD ]
Line_5 $$ InputStream in = part.getBody().getInputStream()-->Line_5 $$ InputStream in = part.getBody().getInputStream()[ CD ]
Line_2 $$ public static String getTextFromPart(Part part) -->Line_5 $$ InputStream in = part.getBody().getInputStream()[ FD ]
Line_4 $$ if (part != null && part.getBody() != null) -->Line_6 $$ String mimeType = part.getMimeType()[ CD ]
Line_6 $$ String mimeType = part.getMimeType()-->Line_6 $$ String mimeType = part.getMimeType()[ CD ]
Line_2 $$ public static String getTextFromPart(Part part) -->Line_6 $$ String mimeType = part.getMimeType()[ FD ]
Line_4 $$ if (part != null && part.getBody() != null) -->Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) [ CD ]
Line_6 $$ String mimeType = part.getMimeType()-->Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) [ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_9 $$ IOUtils.copy(in, out)[ CD ]
Line_5 $$ InputStream in = part.getBody().getInputStream()-->Line_9 $$ IOUtils.copy(in, out)[ FD ]
Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_9 $$ IOUtils.copy(in, out)[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_10 $$ in.close()[ CD ]
Line_5 $$ InputStream in = part.getBody().getInputStream()-->Line_10 $$ in.close()[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_11 $$ in = null[ CD ]
Line_5 $$ InputStream in = part.getBody().getInputStream()-->Line_11 $$ in = null[ FD ]
Line_11 $$ in = null-->Line_11 $$ in = null[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")[ CD ]
Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")-->Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")[ CD ]
Line_2 $$ public static String getTextFromPart(Part part) -->Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_13 $$ if (charset != null) [ CD ]
Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")-->Line_13 $$ if (charset != null) [ FD ]
Line_13 $$ if (charset != null) -->Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)[ CD ]
Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")-->Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)[ FD ]
Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)-->Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)[ FD ]
Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)-->Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)[ CD ]
Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")-->Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)[ FD ]
Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)-->Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_16 $$ if (charset == null) [ CD ]
Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")-->Line_16 $$ if (charset == null) [ FD ]
Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)-->Line_16 $$ if (charset == null) [ FD ]
Line_16 $$ if (charset == null) -->Line_17 $$ charset = "ASCII"[ CD ]
Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")-->Line_17 $$ charset = "ASCII"[ FD ]
Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)-->Line_17 $$ charset = "ASCII"[ FD ]
Line_17 $$ charset = "ASCII"-->Line_17 $$ charset = "ASCII"[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_19 $$ String result = out.toString(charset)[ CD ]
Line_19 $$ String result = out.toString(charset)-->Line_19 $$ String result = out.toString(charset)[ CD ]
Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_19 $$ String result = out.toString(charset)[ FD ]
Line_12 $$ String charset = getHeaderParameter(part.getContentType(), "charset")-->Line_19 $$ String result = out.toString(charset)[ FD ]
Line_14 $$ charset = CharsetUtil.toJavaCharset(charset)-->Line_19 $$ String result = out.toString(charset)[ FD ]
Line_17 $$ charset = "ASCII"-->Line_19 $$ String result = out.toString(charset)[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_20 $$ out.close()[ CD ]
Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_20 $$ out.close()[ FD ]
Line_7 $$ if (mimeType != null && MimeUtility.mimeTypeMatches(mimeType, "text/*")) -->Line_21 $$ return result[ CD ]
Line_2 $$ public static String getTextFromPart(Part part) -->Line_29 $$ return null[ CD ]
