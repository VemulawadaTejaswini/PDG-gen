Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException [ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_3 $$ if (responseBufferSize > 0)[ CD ]
Line_3 $$ if (responseBufferSize > 0)-->Line_3 $$ resp.setBufferSize(responseBufferSize)[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_3 $$ resp.setBufferSize(responseBufferSize)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_4 $$ String pathinfo = req.getPathInfo()[ CD ]
Line_4 $$ String pathinfo = req.getPathInfo()-->Line_4 $$ String pathinfo = req.getPathInfo()[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_4 $$ String pathinfo = req.getPathInfo()[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_5 $$ if (pathinfo == null) [ CD ]
Line_4 $$ String pathinfo = req.getPathInfo()-->Line_5 $$ if (pathinfo == null) [ FD ]
Line_5 $$ if (pathinfo == null) -->Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)[ CD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)[ FD ]
Line_5 $$ if (pathinfo == null) -->Line_7 $$ if (urlstring == null) [ CD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_7 $$ if (urlstring == null) [ FD ]
Line_7 $$ if (urlstring == null) -->Line_8 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString("error.nourl"))[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_8 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString("error.nourl"))[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_8 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString("error.nourl"))[ FD ]
Line_7 $$ if (urlstring == null) -->Line_9 $$ return[ CD ]
Line_5 $$ if (pathinfo == null) -->Line_11 $$ boolean allowCookieForwarding = "true".equals(req.getParameter(ALLOW_COOKIE_FORWARDING))[ CD ]
Line_11 $$ boolean allowCookieForwarding = "true".equals(req.getParameter(ALLOW_COOKIE_FORWARDING))-->Line_11 $$ boolean allowCookieForwarding = "true".equals(req.getParameter(ALLOW_COOKIE_FORWARDING))[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_11 $$ boolean allowCookieForwarding = "true".equals(req.getParameter(ALLOW_COOKIE_FORWARDING))[ FD ]
Line_5 $$ if (pathinfo == null) -->Line_12 $$ boolean allowFormDataForwarding = "true".equals(req.getParameter(ALLOW_FORM_DATA_FORWARDING))[ CD ]
Line_12 $$ boolean allowFormDataForwarding = "true".equals(req.getParameter(ALLOW_FORM_DATA_FORWARDING))-->Line_12 $$ boolean allowFormDataForwarding = "true".equals(req.getParameter(ALLOW_FORM_DATA_FORWARDING))[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_12 $$ boolean allowFormDataForwarding = "true".equals(req.getParameter(ALLOW_FORM_DATA_FORWARDING))[ FD ]
Line_5 $$ if (pathinfo == null) -->Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)[ CD ]
Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)-->Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)[ CD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)[ FD ]
Line_5 $$ if (pathinfo == null) -->Line_14 $$ resp.sendRedirect(target)[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_14 $$ resp.sendRedirect(target)[ FD ]
Line_13 $$ String target = new JGlossURLRewriter(req.getContextPath() + req.getServletPath(), new URL(HttpUtils.getRequestURL(req).toString()), null, allowCookieForwarding, allowFormDataForwarding).rewrite(urlstring, true)-->Line_14 $$ resp.sendRedirect(target)[ FD ]
Line_5 $$ if (pathinfo == null) -->Line_15 $$ return[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_17 $$ Set connectionAllowedProtocols[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_18 $$ if (req.isSecure())[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_18 $$ if (req.isSecure())[ FD ]
Line_18 $$ if (req.isSecure())-->Line_18 $$ if (req.isSecure())[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_18 $$ if (req.isSecure())[ FD ]
Line_18 $$ if (req.isSecure())-->Line_18 $$ connectionAllowedProtocols = secureAllowedProtocols[ CD ]
Line_17 $$ Set connectionAllowedProtocols-->Line_18 $$ connectionAllowedProtocols = secureAllowedProtocols[ FD ]
Line_18 $$ connectionAllowedProtocols = secureAllowedProtocols-->Line_18 $$ connectionAllowedProtocols = secureAllowedProtocols[ FD ]
Line_18 $$ if (req.isSecure())-->Line_18 $$ connectionAllowedProtocols = allowedProtocols[ CD ]
Line_17 $$ Set connectionAllowedProtocols-->Line_18 $$ connectionAllowedProtocols = allowedProtocols[ FD ]
Line_18 $$ connectionAllowedProtocols = secureAllowedProtocols-->Line_18 $$ connectionAllowedProtocols = allowedProtocols[ FD ]
Line_18 $$ connectionAllowedProtocols = allowedProtocols-->Line_18 $$ connectionAllowedProtocols = allowedProtocols[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_19 $$ Object[] oa = JGlossURLRewriter.parseEncodedPath(pathinfo)[ CD ]
Line_19 $$ Object[] oa = JGlossURLRewriter.parseEncodedPath(pathinfo)-->Line_19 $$ Object[] oa = JGlossURLRewriter.parseEncodedPath(pathinfo)[ CD ]
Line_4 $$ String pathinfo = req.getPathInfo()-->Line_19 $$ Object[] oa = JGlossURLRewriter.parseEncodedPath(pathinfo)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_20 $$ if (oa == null) [ CD ]
Line_19 $$ Object[] oa = JGlossURLRewriter.parseEncodedPath(pathinfo)-->Line_20 $$ if (oa == null) [ FD ]
Line_20 $$ if (oa == null) -->Line_21 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString("error.malformedrequest"), new Object[] [ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_21 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString("error.malformedrequest"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_21 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale(), new UTF8ResourceBundleControl()).getString("error.malformedrequest"), new Object[] [ FD ]
Line_20 $$ if (oa == null) -->Line_22 $$ return[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_24 $$ boolean allowCookieForwarding = ((Boolean) oa[0]).booleanValue()[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_25 $$ boolean allowFormDataForwarding = ((Boolean) oa[1]).booleanValue()[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_27 $$ getServletContext().log("received request for " + urlstring)[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_28 $$ if (urlstring.toLowerCase().indexOf(req.getServletPath().toLowerCase()) != -1) [ CD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_28 $$ if (urlstring.toLowerCase().indexOf(req.getServletPath().toLowerCase()) != -1) [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_28 $$ if (urlstring.toLowerCase().indexOf(req.getServletPath().toLowerCase()) != -1) [ FD ]
Line_28 $$ if (urlstring.toLowerCase().indexOf(req.getServletPath().toLowerCase()) != -1) -->Line_29 $$ resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.addressnotallowed"), new Object[] [ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_29 $$ resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.addressnotallowed"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_29 $$ resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.addressnotallowed"), new Object[] [ FD ]
Line_28 $$ if (urlstring.toLowerCase().indexOf(req.getServletPath().toLowerCase()) != -1) -->Line_30 $$ return[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_32 $$ if (urlstring.indexOf(':') == -1) [ CD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_32 $$ if (urlstring.indexOf(':') == -1) [ FD ]
Line_32 $$ if (urlstring.indexOf(':') == -1) -->Line_33 $$ if (req.isSecure()) [ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_33 $$ if (req.isSecure()) [ FD ]
Line_33 $$ if (req.isSecure()) -->Line_33 $$ if (req.isSecure()) [ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_33 $$ if (req.isSecure()) [ FD ]
Line_33 $$ if (req.isSecure()) -->Line_34 $$ if (secureAllowedProtocols.contains("https"))[ CD ]
Line_34 $$ if (secureAllowedProtocols.contains("https"))-->Line_34 $$ if (secureAllowedProtocols.contains("https"))[ CD ]
Line_34 $$ if (secureAllowedProtocols.contains("https"))-->Line_34 $$ urlstring = "https://" + urlstring[ CD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_34 $$ urlstring = "https://" + urlstring[ FD ]
Line_34 $$ urlstring = "https://" + urlstring-->Line_34 $$ urlstring = "https://" + urlstring[ FD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_34 $$ urlstring = "https://" + urlstring[ FD ]
Line_34 $$ urlstring = "https://" + urlstring-->Line_34 $$ urlstring = "https://" + urlstring[ FD ]
Line_33 $$ if (req.isSecure()) -->Line_36 $$ if (allowedProtocols.contains("http"))[ CD ]
Line_36 $$ if (allowedProtocols.contains("http"))-->Line_36 $$ if (allowedProtocols.contains("http"))[ CD ]
Line_36 $$ if (allowedProtocols.contains("http"))-->Line_36 $$ urlstring = "http://" + urlstring[ CD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_36 $$ urlstring = "http://" + urlstring[ FD ]
Line_34 $$ urlstring = "https://" + urlstring-->Line_36 $$ urlstring = "http://" + urlstring[ FD ]
Line_36 $$ urlstring = "http://" + urlstring-->Line_36 $$ urlstring = "http://" + urlstring[ FD ]
Line_6 $$ String urlstring = req.getParameter(REMOTE_URL)-->Line_36 $$ urlstring = "http://" + urlstring[ FD ]
Line_34 $$ urlstring = "https://" + urlstring-->Line_36 $$ urlstring = "http://" + urlstring[ FD ]
Line_36 $$ urlstring = "http://" + urlstring-->Line_36 $$ urlstring = "http://" + urlstring[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_39 $$ URL url[ CD ]
Line_39 $$ URL url-->Line_41 $$ url = new URL(urlstring)[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_41 $$ url = new URL(urlstring)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_43 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.malformedurl"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_43 $$ resp.sendError(HttpServletResponse.SC_BAD_REQUEST, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.malformedurl"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_46 $$ String protocol = url.getProtocol()[ CD ]
Line_46 $$ String protocol = url.getProtocol()-->Line_46 $$ String protocol = url.getProtocol()[ CD ]
Line_39 $$ URL url-->Line_46 $$ String protocol = url.getProtocol()[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_46 $$ String protocol = url.getProtocol()[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) [ CD ]
Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) -->Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) [ CD ]
Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) -->Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) [ CD ]
Line_17 $$ Set connectionAllowedProtocols-->Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) [ FD ]
Line_18 $$ connectionAllowedProtocols = secureAllowedProtocols-->Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) [ FD ]
Line_18 $$ connectionAllowedProtocols = allowedProtocols-->Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) [ FD ]
Line_46 $$ String protocol = url.getProtocol()-->Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) [ FD ]
Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) -->Line_48 $$ resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.protocolnotallowed"), new Object[] [ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_48 $$ resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.protocolnotallowed"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_48 $$ resp.sendError(HttpServletResponse.SC_FORBIDDEN, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.protocolnotallowed"), new Object[] [ FD ]
Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) -->Line_49 $$ getServletContext().log("protocol not allowed accessing " + url.toString())[ CD ]
Line_39 $$ URL url-->Line_49 $$ getServletContext().log("protocol not allowed accessing " + url.toString())[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_49 $$ getServletContext().log("protocol not allowed accessing " + url.toString())[ FD ]
Line_47 $$ if (!connectionAllowedProtocols.contains(protocol)) -->Line_50 $$ return[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_52 $$ boolean remoteIsHttp = protocol.equals("http") || protocol.equals("https")[ CD ]
Line_46 $$ String protocol = url.getProtocol()-->Line_52 $$ boolean remoteIsHttp = protocol.equals("http") || protocol.equals("https")[ FD ]
Line_46 $$ String protocol = url.getProtocol()-->Line_52 $$ boolean remoteIsHttp = protocol.equals("http") || protocol.equals("https")[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_53 $$ boolean forwardCookies = remoteIsHttp && enableCookieForwarding && allowCookieForwarding[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_54 $$ boolean forwardFormData = remoteIsHttp && enableFormDataForwarding && allowFormDataForwarding && (enableFormDataSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https"))[ CD ]
Line_54 $$ boolean forwardFormData = remoteIsHttp && enableFormDataForwarding && allowFormDataForwarding && (enableFormDataSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https"))-->Line_54 $$ boolean forwardFormData = remoteIsHttp && enableFormDataForwarding && allowFormDataForwarding && (enableFormDataSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https"))[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_54 $$ boolean forwardFormData = remoteIsHttp && enableFormDataForwarding && allowFormDataForwarding && (enableFormDataSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https"))[ FD ]
Line_39 $$ URL url-->Line_54 $$ boolean forwardFormData = remoteIsHttp && enableFormDataForwarding && allowFormDataForwarding && (enableFormDataSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https"))[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_54 $$ boolean forwardFormData = remoteIsHttp && enableFormDataForwarding && allowFormDataForwarding && (enableFormDataSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https"))[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_55 $$ if (forwardFormData) [ CD ]
Line_55 $$ if (forwardFormData) -->Line_56 $$ String query = req.getQueryString()[ CD ]
Line_56 $$ String query = req.getQueryString()-->Line_56 $$ String query = req.getQueryString()[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_56 $$ String query = req.getQueryString()[ FD ]
Line_55 $$ if (forwardFormData) -->Line_57 $$ if (query != null && query.length() > 0) [ CD ]
Line_56 $$ String query = req.getQueryString()-->Line_57 $$ if (query != null && query.length() > 0) [ FD ]
Line_57 $$ if (query != null && query.length() > 0) -->Line_58 $$ if (url.getQuery() == null || url.getQuery().length() == 0)[ CD ]
Line_39 $$ URL url-->Line_58 $$ if (url.getQuery() == null || url.getQuery().length() == 0)[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_58 $$ if (url.getQuery() == null || url.getQuery().length() == 0)[ FD ]
Line_39 $$ URL url-->Line_58 $$ if (url.getQuery() == null || url.getQuery().length() == 0)[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_58 $$ if (url.getQuery() == null || url.getQuery().length() == 0)[ FD ]
Line_58 $$ if (url.getQuery() == null || url.getQuery().length() == 0)-->Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)[ CD ]
Line_39 $$ URL url-->Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)[ FD ]
Line_39 $$ URL url-->Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)[ FD ]
Line_58 $$ if (url.getQuery() == null || url.getQuery().length() == 0)-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ CD ]
Line_39 $$ URL url-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_39 $$ URL url-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_62 $$ URLConnection connection = url.openConnection()[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_62 $$ URLConnection connection = url.openConnection()[ CD ]
Line_39 $$ URL url-->Line_62 $$ URLConnection connection = url.openConnection()[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_62 $$ URLConnection connection = url.openConnection()[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_62 $$ URLConnection connection = url.openConnection()[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_62 $$ URLConnection connection = url.openConnection()[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_63 $$ if (forwardFormData && post && remoteIsHttp) [ CD ]
Line_52 $$ boolean remoteIsHttp = protocol.equals("http") || protocol.equals("https")-->Line_63 $$ if (forwardFormData && post && remoteIsHttp) [ FD ]
Line_63 $$ if (forwardFormData && post && remoteIsHttp) -->Line_64 $$ getServletContext().log("using POST")[ CD ]
Line_63 $$ if (forwardFormData && post && remoteIsHttp) -->Line_70 $$ connection.setDoInput(true)[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_70 $$ connection.setDoInput(true)[ FD ]
Line_63 $$ if (forwardFormData && post && remoteIsHttp) -->Line_71 $$ connection.setDoOutput(true)[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_71 $$ connection.setDoOutput(true)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_73 $$ String acceptEncoding = buildAcceptEncoding(req.getHeader("accept-encoding"))[ CD ]
Line_73 $$ String acceptEncoding = buildAcceptEncoding(req.getHeader("accept-encoding"))-->Line_73 $$ String acceptEncoding = buildAcceptEncoding(req.getHeader("accept-encoding"))[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_73 $$ String acceptEncoding = buildAcceptEncoding(req.getHeader("accept-encoding"))[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_74 $$ getServletContext().log("accept-encoding: " + acceptEncoding)[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_75 $$ if (acceptEncoding != null)[ CD ]
Line_73 $$ String acceptEncoding = buildAcceptEncoding(req.getHeader("accept-encoding"))-->Line_75 $$ if (acceptEncoding != null)[ FD ]
Line_75 $$ if (acceptEncoding != null)-->Line_75 $$ connection.setRequestProperty("Accept-Encoding", acceptEncoding)[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_75 $$ connection.setRequestProperty("Accept-Encoding", acceptEncoding)[ FD ]
Line_73 $$ String acceptEncoding = buildAcceptEncoding(req.getHeader("accept-encoding"))-->Line_75 $$ connection.setRequestProperty("Accept-Encoding", acceptEncoding)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_76 $$ forwardRequestHeaders(connection, req)[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_76 $$ forwardRequestHeaders(connection, req)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_76 $$ forwardRequestHeaders(connection, req)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ CD ]
Line_53 $$ boolean forwardCookies = remoteIsHttp && enableCookieForwarding && allowCookieForwarding-->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ FD ]
Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))-->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ FD ]
Line_39 $$ URL url-->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))[ FD ]
Line_77 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || !req.isSecure() || url.getProtocol().equals("https")))-->Line_77 $$ CookieTools.addRequestCookies(connection, req.getCookies(), getServletContext())[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_77 $$ CookieTools.addRequestCookies(connection, req.getCookies(), getServletContext())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_77 $$ CookieTools.addRequestCookies(connection, req.getCookies(), getServletContext())[ FD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_79 $$ connection.connect()[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_39 $$ URL url-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_39 $$ URL url-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_81 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.unknownhost"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_84 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.connect"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_84 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.connect"), new Object[] [ FD ]
Line_39 $$ URL url-->Line_84 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.connect"), new Object[] [ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_84 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.connect"), new Object[] [ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_84 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.connect"), new Object[] [ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_84 $$ resp.sendError(HttpServletResponse.SC_BAD_GATEWAY, MessageFormat.format(ResourceBundle.getBundle(MESSAGES, req.getLocale()).getString("error.connect"), new Object[] [ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_87 $$ if (forwardFormData && post && remoteIsHttp) [ CD ]
Line_52 $$ boolean remoteIsHttp = protocol.equals("http") || protocol.equals("https")-->Line_87 $$ if (forwardFormData && post && remoteIsHttp) [ FD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_88 $$ InputStream is = req.getInputStream()[ CD ]
Line_88 $$ InputStream is = req.getInputStream()-->Line_88 $$ InputStream is = req.getInputStream()[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_88 $$ InputStream is = req.getInputStream()[ FD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_89 $$ OutputStream os = connection.getOutputStream()[ CD ]
Line_89 $$ OutputStream os = connection.getOutputStream()-->Line_89 $$ OutputStream os = connection.getOutputStream()[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_89 $$ OutputStream os = connection.getOutputStream()[ FD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_90 $$ byte[] buf = new byte[512][ CD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_91 $$ int len[ CD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)[ CD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_87 $$ if (forwardFormData && post && remoteIsHttp) [ CD ]
Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)-->Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)[ FD ]
Line_91 $$ int len-->Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)[ FD ]
Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)-->Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)[ CD ]
Line_88 $$ InputStream is = req.getInputStream()-->Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)[ FD ]
Line_90 $$ byte[] buf = new byte[512]-->Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)[ FD ]
Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)-->Line_92 $$ os.write(buf, 0, len)[ CD ]
Line_89 $$ OutputStream os = connection.getOutputStream()-->Line_92 $$ os.write(buf, 0, len)[ FD ]
Line_90 $$ byte[] buf = new byte[512]-->Line_92 $$ os.write(buf, 0, len)[ FD ]
Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)-->Line_92 $$ os.write(buf, 0, len)[ FD ]
Line_91 $$ int len-->Line_92 $$ os.write(buf, 0, len)[ FD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_93 $$ is.close()[ CD ]
Line_88 $$ InputStream is = req.getInputStream()-->Line_93 $$ is.close()[ FD ]
Line_87 $$ if (forwardFormData && post && remoteIsHttp) -->Line_94 $$ os.close()[ CD ]
Line_89 $$ OutputStream os = connection.getOutputStream()-->Line_94 $$ os.close()[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_96 $$ forwardResponseHeaders(connection, req, resp, rewriter)[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_96 $$ forwardResponseHeaders(connection, req, resp, rewriter)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_96 $$ forwardResponseHeaders(connection, req, resp, rewriter)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_96 $$ forwardResponseHeaders(connection, req, resp, rewriter)[ FD ]
Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)-->Line_96 $$ forwardResponseHeaders(connection, req, resp, rewriter)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ CD ]
Line_53 $$ boolean forwardCookies = remoteIsHttp && enableCookieForwarding && allowCookieForwarding-->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ FD ]
Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))-->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ CD ]
Line_39 $$ URL url-->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ FD ]
Line_41 $$ url = new URL(urlstring)-->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "?" + query)-->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ FD ]
Line_58 $$ url = new URL(url.toExternalForm() + "&" + query)-->Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))[ FD ]
Line_97 $$ if (forwardCookies && (enableCookieSecureInsecureForwarding || req.isSecure() || !url.getProtocol().equals("https")))-->Line_97 $$ CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext())[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_97 $$ CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_97 $$ CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_97 $$ CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_97 $$ CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_97 $$ CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_97 $$ CookieTools.addResponseCookies(connection, resp, req.getServerName(), req.getContextPath() + req.getServletPath(), req.isSecure(), getServletContext())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_98 $$ if (remoteIsHttp) [ CD ]
Line_100 $$ int response = ((HttpURLConnection) connection).getResponseCode()-->Line_100 $$ int response = ((HttpURLConnection) connection).getResponseCode()[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_102 $$ resp.setStatus(response)[ FD ]
Line_100 $$ int response = ((HttpURLConnection) connection).getResponseCode()-->Line_102 $$ resp.setStatus(response)[ FD ]
Line_100 $$ int response = ((HttpURLConnection) connection).getResponseCode()-->Line_103 $$ if (response == 304)[ FD ]
Line_103 $$ if (response == 304)-->Line_103 $$ return[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_108 $$ String type = connection.getContentType()[ CD ]
Line_108 $$ String type = connection.getContentType()-->Line_108 $$ String type = connection.getContentType()[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_108 $$ String type = connection.getContentType()[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_109 $$ getServletContext().log("content type " + type + " url " + connection.getURL().toString())[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_109 $$ getServletContext().log("content type " + type + " url " + connection.getURL().toString())[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_110 $$ boolean supported = false[ CD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_111 $$ if (type != null) [ CD ]
Line_108 $$ String type = connection.getContentType()-->Line_111 $$ if (type != null) [ FD ]
Line_111 $$ if (type != null) -->Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) [ CD ]
Line_111 $$ if (type != null) -->Line_111 $$ if (type != null) [ CD ]
Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) [ CD ]
Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) [ CD ]
Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) [ FD ]
Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ if (type.startsWith(rewrittenContentTypes[i])) [ CD ]
Line_108 $$ String type = connection.getContentType()-->Line_112 $$ if (type.startsWith(rewrittenContentTypes[i])) [ FD ]
Line_112 $$ if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ if (type.startsWith(rewrittenContentTypes[i])) [ CD ]
Line_108 $$ String type = connection.getContentType()-->Line_112 $$ if (type.startsWith(rewrittenContentTypes[i])) [ FD ]
Line_112 $$ if (type.startsWith(rewrittenContentTypes[i])) -->Line_113 $$ supported = true[ CD ]
Line_113 $$ supported = true-->Line_113 $$ supported = true[ FD ]
Line_110 $$ boolean supported = false-->Line_113 $$ supported = true[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_117 $$ if (supported) [ CD ]
Line_117 $$ if (supported) -->Line_118 $$ String encoding = connection.getContentEncoding()[ CD ]
Line_118 $$ String encoding = connection.getContentEncoding()-->Line_118 $$ String encoding = connection.getContentEncoding()[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_118 $$ String encoding = connection.getContentEncoding()[ FD ]
Line_117 $$ if (supported) -->Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")[ CD ]
Line_113 $$ supported = true-->Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")[ FD ]
Line_110 $$ boolean supported = false-->Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")[ FD ]
Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")-->Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")[ FD ]
Line_118 $$ String encoding = connection.getContentEncoding()-->Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")[ FD ]
Line_118 $$ String encoding = connection.getContentEncoding()-->Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")[ FD ]
Line_118 $$ String encoding = connection.getContentEncoding()-->Line_119 $$ supported = encoding == null || encoding.endsWith("gzip") || encoding.endsWith("deflate") || encoding.equals("identity")[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_121 $$ if (supported)[ CD ]
Line_121 $$ if (supported)-->Line_121 $$ rewrite(connection, req, resp, rewriter)[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_121 $$ rewrite(connection, req, resp, rewriter)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_121 $$ rewrite(connection, req, resp, rewriter)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_121 $$ rewrite(connection, req, resp, rewriter)[ FD ]
Line_61 $$ JGlossURLRewriter rewriter = new JGlossURLRewriter(new URL(req.getScheme(), req.getServerName(), req.getServerPort(), req.getContextPath() + req.getServletPath()).toExternalForm(), url, connectionAllowedProtocols, allowCookieForwarding, allowFormDataForwarding)-->Line_121 $$ rewrite(connection, req, resp, rewriter)[ FD ]
Line_121 $$ if (supported)-->Line_121 $$ tunnel(connection, req, resp)[ CD ]
Line_62 $$ URLConnection connection = url.openConnection()-->Line_121 $$ tunnel(connection, req, resp)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_121 $$ tunnel(connection, req, resp)[ FD ]
Line_2 $$ protected void doGetPost(HttpServletRequest req, HttpServletResponse resp, boolean post) throws ServletException, IOException -->Line_121 $$ tunnel(connection, req, resp)[ FD ]
Line_92 $$ while ((len = is.read(buf)) != -1) os.write(buf, 0, len)-->Line_92 $$ os.write(buf, 0, len)[ FD ]
Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) [ FD ]
Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) [ FD ]
Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) -->Line_112 $$ for (int i = 0; i < rewrittenContentTypes.length; i++) if (type.startsWith(rewrittenContentTypes[i])) [ FD ]
