Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception [ CD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_3 $$ Vector<SearchKeyResult> outVec = new Vector<SearchKeyResult>()[ CD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_4 $$ String uri = iKeyServer + "/pks/lookup?search=" + URLEncoder.encode(iText, "UTF-8")[ CD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_4 $$ String uri = iKeyServer + "/pks/lookup?search=" + URLEncoder.encode(iText, "UTF-8")[ FD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_5 $$ URL url = new URL(uri)[ CD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_6 $$ BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()))[ CD ]
Line_5 $$ URL url = new URL(uri)-->Line_6 $$ BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()))[ FD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_7 $$ Pattern regex = Pattern.compile("pub.*?<a\\s+href\\s*=\"(.*?)\".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\".*?\".*?>\\s*(.+?)\\s*</a>", Pattern.CANON_EQ)[ CD ]
Line_7 $$ Pattern regex = Pattern.compile("pub.*?<a\\s+href\\s*=\"(.*?)\".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\".*?\".*?>\\s*(.+?)\\s*</a>", Pattern.CANON_EQ)-->Line_7 $$ Pattern regex = Pattern.compile("pub.*?<a\\s+href\\s*=\"(.*?)\".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\".*?\".*?>\\s*(.+?)\\s*</a>", Pattern.CANON_EQ)[ CD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_8 $$ String line[ CD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_9 $$ while ((line = input.readLine()) != null) [ CD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception [ CD ]
Line_9 $$ while ((line = input.readLine()) != null) -->Line_9 $$ while ((line = input.readLine()) != null) [ FD ]
Line_8 $$ String line-->Line_9 $$ while ((line = input.readLine()) != null) [ FD ]
Line_9 $$ while ((line = input.readLine()) != null) -->Line_9 $$ while ((line = input.readLine()) != null) [ CD ]
Line_6 $$ BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_9 $$ while ((line = input.readLine()) != null) [ FD ]
Line_9 $$ while ((line = input.readLine()) != null) -->Line_10 $$ Matcher regexMatcher = regex.matcher(line)[ CD ]
Line_10 $$ Matcher regexMatcher = regex.matcher(line)-->Line_10 $$ Matcher regexMatcher = regex.matcher(line)[ CD ]
Line_7 $$ Pattern regex = Pattern.compile("pub.*?<a\\s+href\\s*=\"(.*?)\".*?>\\s*(\\w+)\\s*</a>.*?(\\d+-\\d+-\\d+).*?<a\\s+href\\s*=\".*?\".*?>\\s*(.+?)\\s*</a>", Pattern.CANON_EQ)-->Line_10 $$ Matcher regexMatcher = regex.matcher(line)[ FD ]
Line_9 $$ while ((line = input.readLine()) != null) -->Line_10 $$ Matcher regexMatcher = regex.matcher(line)[ FD ]
Line_8 $$ String line-->Line_10 $$ Matcher regexMatcher = regex.matcher(line)[ FD ]
Line_9 $$ while ((line = input.readLine()) != null) -->Line_11 $$ while (regexMatcher.find()) [ CD ]
Line_9 $$ while ((line = input.readLine()) != null) -->Line_9 $$ while ((line = input.readLine()) != null) [ CD ]
Line_11 $$ while (regexMatcher.find()) -->Line_11 $$ while (regexMatcher.find()) [ CD ]
Line_10 $$ Matcher regexMatcher = regex.matcher(line)-->Line_11 $$ while (regexMatcher.find()) [ FD ]
Line_11 $$ while (regexMatcher.find()) -->Line_12 $$ String id = regexMatcher.group(2)[ CD ]
Line_12 $$ String id = regexMatcher.group(2)-->Line_12 $$ String id = regexMatcher.group(2)[ CD ]
Line_10 $$ Matcher regexMatcher = regex.matcher(line)-->Line_12 $$ String id = regexMatcher.group(2)[ FD ]
Line_11 $$ while (regexMatcher.find()) -->Line_13 $$ String downUrl = iKeyServer + regexMatcher.group(1)[ CD ]
Line_10 $$ Matcher regexMatcher = regex.matcher(line)-->Line_13 $$ String downUrl = iKeyServer + regexMatcher.group(1)[ FD ]
Line_11 $$ while (regexMatcher.find()) -->Line_14 $$ String downDate = regexMatcher.group(3)[ CD ]
Line_14 $$ String downDate = regexMatcher.group(3)-->Line_14 $$ String downDate = regexMatcher.group(3)[ CD ]
Line_10 $$ Matcher regexMatcher = regex.matcher(line)-->Line_14 $$ String downDate = regexMatcher.group(3)[ FD ]
Line_11 $$ while (regexMatcher.find()) -->Line_15 $$ String name = HTMLDecoder.decodeHTML(regexMatcher.group(4))[ CD ]
Line_15 $$ String name = HTMLDecoder.decodeHTML(regexMatcher.group(4))-->Line_15 $$ String name = HTMLDecoder.decodeHTML(regexMatcher.group(4))[ CD ]
Line_10 $$ Matcher regexMatcher = regex.matcher(line)-->Line_15 $$ String name = HTMLDecoder.decodeHTML(regexMatcher.group(4))[ FD ]
Line_11 $$ while (regexMatcher.find()) -->Line_16 $$ outVec.add(new SearchKeyResult(id, name, downDate, downUrl))[ CD ]
Line_3 $$ Vector<SearchKeyResult> outVec = new Vector<SearchKeyResult>()-->Line_16 $$ outVec.add(new SearchKeyResult(id, name, downDate, downUrl))[ FD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_19 $$ input.close()[ CD ]
Line_6 $$ BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()))-->Line_19 $$ input.close()[ FD ]
Line_2 $$ public static Collection<SearchKeyResult> searchKey(String iText, String iKeyServer) throws Exception -->Line_20 $$ return outVec[ CD ]
Line_9 $$ while ((line = input.readLine()) != null) -->Line_10 $$ Matcher regexMatcher = regex.matcher(line)[ FD ]
