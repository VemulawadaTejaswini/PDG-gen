Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void generateDocFile(String srcFileName, String s, String destFileName) [ CD ]
Line_5 $$ ZipEntry documentXML = docxFile.getEntry("word/document.xml")-->Line_5 $$ ZipEntry documentXML = docxFile.getEntry("word/document.xml")[ CD ]
Line_4 $$ ZipFile docxFile = new ZipFile(new File(srcFileName))-->Line_5 $$ ZipEntry documentXML = docxFile.getEntry("word/document.xml")[ FD ]
Line_6 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()-->Line_6 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()[ CD ]
Line_7 $$ InputStream documentXMLIS1 = docxFile.getInputStream(documentXML)-->Line_7 $$ InputStream documentXMLIS1 = docxFile.getInputStream(documentXML)[ CD ]
Line_4 $$ ZipFile docxFile = new ZipFile(new File(srcFileName))-->Line_7 $$ InputStream documentXMLIS1 = docxFile.getInputStream(documentXML)[ FD ]
Line_5 $$ ZipEntry documentXML = docxFile.getEntry("word/document.xml")-->Line_7 $$ InputStream documentXMLIS1 = docxFile.getInputStream(documentXML)[ FD ]
Line_8 $$ Document doc = dbf.newDocumentBuilder().parse(documentXMLIS1)-->Line_8 $$ Document doc = dbf.newDocumentBuilder().parse(documentXMLIS1)[ CD ]
Line_7 $$ InputStream documentXMLIS1 = docxFile.getInputStream(documentXML)-->Line_8 $$ Document doc = dbf.newDocumentBuilder().parse(documentXMLIS1)[ FD ]
Line_6 $$ DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance()-->Line_8 $$ Document doc = dbf.newDocumentBuilder().parse(documentXMLIS1)[ FD ]
Line_9 $$ Transformer t = TransformerFactory.newInstance().newTransformer()-->Line_9 $$ Transformer t = TransformerFactory.newInstance().newTransformer()[ CD ]
Line_9 $$ Transformer t = TransformerFactory.newInstance().newTransformer()-->Line_11 $$ t.transform(new DOMSource(doc), new StreamResult(baos))[ FD ]
Line_4 $$ ZipFile docxFile = new ZipFile(new File(srcFileName))-->Line_13 $$ Enumeration<ZipEntry> entriesIter = (Enumeration<ZipEntry>) docxFile.entries()[ FD ]
Line_14 $$ while (entriesIter.hasMoreElements()) -->Line_14 $$ while (entriesIter.hasMoreElements()) [ CD ]
Line_13 $$ Enumeration<ZipEntry> entriesIter = (Enumeration<ZipEntry>) docxFile.entries()-->Line_14 $$ while (entriesIter.hasMoreElements()) [ FD ]
Line_14 $$ while (entriesIter.hasMoreElements()) -->Line_15 $$ ZipEntry entry = entriesIter.nextElement()[ CD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_15 $$ ZipEntry entry = entriesIter.nextElement()[ CD ]
Line_13 $$ Enumeration<ZipEntry> entriesIter = (Enumeration<ZipEntry>) docxFile.entries()-->Line_15 $$ ZipEntry entry = entriesIter.nextElement()[ FD ]
Line_14 $$ while (entriesIter.hasMoreElements()) -->Line_16 $$ if (entry.getName().equals("word/document.xml")) [ CD ]
Line_16 $$ if (entry.getName().equals("word/document.xml")) -->Line_16 $$ if (entry.getName().equals("word/document.xml")) [ CD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_16 $$ if (entry.getName().equals("word/document.xml")) [ FD ]
Line_16 $$ if (entry.getName().equals("word/document.xml")) -->Line_17 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_17 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_17 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_16 $$ if (entry.getName().equals("word/document.xml")) -->Line_18 $$ byte[] datas = s.getBytes("UTF-8")[ CD ]
Line_18 $$ byte[] datas = s.getBytes("UTF-8")-->Line_18 $$ byte[] datas = s.getBytes("UTF-8")[ CD ]
Line_2 $$ private void generateDocFile(String srcFileName, String s, String destFileName) -->Line_18 $$ byte[] datas = s.getBytes("UTF-8")[ FD ]
Line_16 $$ if (entry.getName().equals("word/document.xml")) -->Line_19 $$ docxOutFile.write(datas, 0, datas.length)[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_19 $$ docxOutFile.write(datas, 0, datas.length)[ FD ]
Line_18 $$ byte[] datas = s.getBytes("UTF-8")-->Line_19 $$ docxOutFile.write(datas, 0, datas.length)[ FD ]
Line_16 $$ if (entry.getName().equals("word/document.xml")) -->Line_20 $$ docxOutFile.closeEntry()[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_20 $$ docxOutFile.closeEntry()[ FD ]
Line_16 $$ if (entry.getName().equals("word/document.xml")) -->Line_21 $$ if (entry.getName().equals("word/media/image1.png")) [ CD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_21 $$ if (entry.getName().equals("word/media/image1.png")) [ CD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_21 $$ if (entry.getName().equals("word/media/image1.png")) [ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")[ CD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_23 $$ byte[] data = new byte[incoming.available()][ CD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_23 $$ byte[] data = new byte[incoming.available()][ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_24 $$ int readCount = incoming.read(data, 0, data.length)[ CD ]
Line_24 $$ int readCount = incoming.read(data, 0, data.length)-->Line_24 $$ int readCount = incoming.read(data, 0, data.length)[ CD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_24 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_24 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_25 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_25 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_25 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_26 $$ docxOutFile.write(data, 0, readCount)[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_26 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_26 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_24 $$ int readCount = incoming.read(data, 0, data.length)-->Line_26 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_27 $$ docxOutFile.closeEntry()[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_27 $$ docxOutFile.closeEntry()[ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_29 $$ InputStream incoming = docxFile.getInputStream(entry)[ CD ]
Line_4 $$ ZipFile docxFile = new ZipFile(new File(srcFileName))-->Line_29 $$ InputStream incoming = docxFile.getInputStream(entry)[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_29 $$ InputStream incoming = docxFile.getInputStream(entry)[ FD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_30 $$ byte[] data = new byte[incoming.available()][ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_31 $$ int readCount = incoming.read(data, 0, data.length)[ CD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_31 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_31 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_32 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_32 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_32 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_33 $$ docxOutFile.write(data, 0, readCount)[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_33 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_33 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_24 $$ int readCount = incoming.read(data, 0, data.length)-->Line_33 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_21 $$ if (entry.getName().equals("word/media/image1.png")) -->Line_34 $$ docxOutFile.closeEntry()[ CD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_34 $$ docxOutFile.closeEntry()[ FD ]
Line_12 $$ ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(destFileName))-->Line_37 $$ docxOutFile.close()[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_16 $$ if (entry.getName().equals("word/document.xml")) [ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_17 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_18 $$ byte[] datas = s.getBytes("UTF-8")-->Line_19 $$ docxOutFile.write(datas, 0, datas.length)[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_21 $$ if (entry.getName().equals("word/media/image1.png")) [ FD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_23 $$ byte[] data = new byte[incoming.available()][ FD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_24 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_24 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_25 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_26 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_24 $$ int readCount = incoming.read(data, 0, data.length)-->Line_26 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_29 $$ InputStream incoming = docxFile.getInputStream(entry)[ FD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_30 $$ byte[] data = new byte[incoming.available()][ FD ]
Line_22 $$ InputStream incoming = new FileInputStream("c:/aaa.jpg")-->Line_31 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_31 $$ int readCount = incoming.read(data, 0, data.length)[ FD ]
Line_15 $$ ZipEntry entry = entriesIter.nextElement()-->Line_32 $$ docxOutFile.putNextEntry(new ZipEntry(entry.getName()))[ FD ]
Line_23 $$ byte[] data = new byte[incoming.available()]-->Line_33 $$ docxOutFile.write(data, 0, readCount)[ FD ]
Line_24 $$ int readCount = incoming.read(data, 0, data.length)-->Line_33 $$ docxOutFile.write(data, 0, readCount)[ FD ]
