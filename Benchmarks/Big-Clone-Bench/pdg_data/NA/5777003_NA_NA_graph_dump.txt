Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testDecodeJTLM_publish100() throws Exception [ CD ]
Line_2 $$ public void testDecodeJTLM_publish100() throws Exception -->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)[ CD ]
Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)-->Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors)[ CD ]
Line_2 $$ public void testDecodeJTLM_publish100() throws Exception -->Line_4 $$ Assert.assertEquals(0, m_compilerErrors.getTotalCount())[ CD ]
Line_2 $$ public void testDecodeJTLM_publish100() throws Exception -->Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS)[ CD ]
Line_2 $$ public void testDecodeJTLM_publish100() throws Exception -->Line_6 $$ String[] exiFiles = [ CD ]
Line_2 $$ public void testDecodeJTLM_publish100() throws Exception -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ CD ]
Line_2 $$ public void testDecodeJTLM_publish100() throws Exception -->Line_2 $$ public void testDecodeJTLM_publish100() throws Exception [ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_8 $$ AlignmentType alignment = Alignments[i][ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_9 $$ EXIDecoder decoder = new EXIDecoder()[ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_10 $$ Scanner scanner[ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_11 $$ decoder.setAlignmentType(alignment)[ CD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_11 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_8 $$ AlignmentType alignment = Alignments[i]-->Line_11 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_12 $$ URL url = resolveSystemIdAsURL(exiFiles[i])[ CD ]
Line_12 $$ URL url = resolveSystemIdAsURL(exiFiles[i])-->Line_12 $$ URL url = resolveSystemIdAsURL(exiFiles[i])[ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_13 $$ int n_events, n_texts[ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_14 $$ decoder.setEXISchema(grammarCache)[ CD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_14 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS)-->Line_14 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_15 $$ decoder.setInputStream(url.openStream())[ CD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_15 $$ decoder.setInputStream(url.openStream())[ FD ]
Line_12 $$ URL url = resolveSystemIdAsURL(exiFiles[i])-->Line_15 $$ decoder.setInputStream(url.openStream())[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_16 $$ scanner = decoder.processHeader()[ CD ]
Line_10 $$ Scanner scanner-->Line_16 $$ scanner = decoder.processHeader()[ FD ]
Line_16 $$ scanner = decoder.processHeader()-->Line_16 $$ scanner = decoder.processHeader()[ FD ]
Line_16 $$ scanner = decoder.processHeader()-->Line_16 $$ scanner = decoder.processHeader()[ CD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_16 $$ scanner = decoder.processHeader()[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_17 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>()[ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_18 $$ EXIEvent exiEvent[ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_19 $$ n_events = 0[ CD ]
Line_13 $$ int n_events, n_texts-->Line_19 $$ n_events = 0[ FD ]
Line_19 $$ n_events = 0-->Line_19 $$ n_events = 0[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_20 $$ n_texts = 0[ CD ]
Line_13 $$ int n_events, n_texts-->Line_20 $$ n_texts = 0[ FD ]
Line_20 $$ n_texts = 0-->Line_20 $$ n_texts = 0[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) [ CD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ CD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_18 $$ EXIEvent exiEvent-->Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) [ CD ]
Line_10 $$ Scanner scanner-->Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_16 $$ scanner = decoder.processHeader()-->Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) [ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_22 $$ ++n_events[ CD ]
Line_13 $$ int n_events, n_texts-->Line_22 $$ ++n_events[ FD ]
Line_19 $$ n_events = 0-->Line_22 $$ ++n_events[ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ CD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_18 $$ EXIEvent exiEvent-->Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()[ CD ]
Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()-->Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()[ CD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()[ FD ]
Line_18 $$ EXIEvent exiEvent-->Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()[ FD ]
Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_25 $$ if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) [ CD ]
Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()-->Line_25 $$ if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) [ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_25 $$ if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) [ FD ]
Line_18 $$ EXIEvent exiEvent-->Line_25 $$ if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) [ FD ]
Line_25 $$ if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) -->Line_26 $$ --n_events[ CD ]
Line_13 $$ int n_events, n_texts-->Line_26 $$ --n_events[ FD ]
Line_19 $$ n_events = 0-->Line_26 $$ --n_events[ FD ]
Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_29 $$ if (n_texts % 100 == 0) [ CD ]
Line_29 $$ if (n_texts % 100 == 0) -->Line_30 $$ final int n = n_texts / 100[ CD ]
Line_29 $$ if (n_texts % 100 == 0) -->Line_31 $$ Assert.assertEquals(publish100_centennials[n], stringValue)[ CD ]
Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()-->Line_31 $$ Assert.assertEquals(publish100_centennials[n], stringValue)[ FD ]
Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) -->Line_33 $$ ++n_texts[ CD ]
Line_13 $$ int n_events, n_texts-->Line_33 $$ ++n_texts[ FD ]
Line_20 $$ n_texts = 0-->Line_33 $$ ++n_texts[ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_35 $$ exiEventList.add(exiEvent)[ CD ]
Line_17 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>()-->Line_35 $$ exiEventList.add(exiEvent)[ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_35 $$ exiEventList.add(exiEvent)[ FD ]
Line_18 $$ EXIEvent exiEvent-->Line_35 $$ exiEventList.add(exiEvent)[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_37 $$ Assert.assertEquals(10610, n_events)[ CD ]
Line_13 $$ int n_events, n_texts-->Line_37 $$ Assert.assertEquals(10610, n_events)[ FD ]
Line_19 $$ n_events = 0-->Line_37 $$ Assert.assertEquals(10610, n_events)[ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ FD ]
Line_7 $$ for (int i = 0; i < Alignments.length; i++) -->Line_7 $$ for (int i = 0; i < Alignments.length; i++) [ FD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_11 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_8 $$ AlignmentType alignment = Alignments[i]-->Line_11 $$ decoder.setAlignmentType(alignment)[ FD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_14 $$ decoder.setEXISchema(grammarCache)[ FD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_15 $$ decoder.setInputStream(url.openStream())[ FD ]
Line_12 $$ URL url = resolveSystemIdAsURL(exiFiles[i])-->Line_15 $$ decoder.setInputStream(url.openStream())[ FD ]
Line_9 $$ EXIDecoder decoder = new EXIDecoder()-->Line_16 $$ scanner = decoder.processHeader()[ FD ]
Line_13 $$ int n_events, n_texts-->Line_37 $$ Assert.assertEquals(10610, n_events)[ FD ]
Line_19 $$ n_events = 0-->Line_37 $$ Assert.assertEquals(10610, n_events)[ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_23 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()[ FD ]
Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()-->Line_25 $$ if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) [ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_25 $$ if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) [ FD ]
Line_24 $$ String stringValue = exiEvent.getCharacters().makeString()-->Line_31 $$ Assert.assertEquals(publish100_centennials[n], stringValue)[ FD ]
Line_21 $$ while ((exiEvent = scanner.nextEvent()) != null) -->Line_35 $$ exiEventList.add(exiEvent)[ FD ]
