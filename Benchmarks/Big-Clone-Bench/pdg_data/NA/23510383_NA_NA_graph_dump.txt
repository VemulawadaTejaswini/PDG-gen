Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException [ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_3 $$ int index = file.getName().lastIndexOf(".")[ CD ]
Line_3 $$ int index = file.getName().lastIndexOf(".")-->Line_3 $$ int index = file.getName().lastIndexOf(".")[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_3 $$ int index = file.getName().lastIndexOf(".")[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_4 $$ String name = file.getName().substring(0, index)[ CD ]
Line_4 $$ String name = file.getName().substring(0, index)-->Line_4 $$ String name = file.getName().substring(0, index)[ CD ]
Line_3 $$ int index = file.getName().lastIndexOf(".")-->Line_4 $$ String name = file.getName().substring(0, index)[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_4 $$ String name = file.getName().substring(0, index)[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_5 $$ DecimalFormat format = new DecimalFormat("####")[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_6 $$ format.setMinimumIntegerDigits(4)[ CD ]
Line_5 $$ DecimalFormat format = new DecimalFormat("####")-->Line_6 $$ format.setMinimumIntegerDigits(4)[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_7 $$ int count = 0[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_8 $$ File main = new File(name)[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_9 $$ if (main.exists()) [ CD ]
Line_8 $$ File main = new File(name)-->Line_9 $$ if (main.exists()) [ FD ]
Line_9 $$ if (main.exists()) -->Line_9 $$ if (main.exists()) [ CD ]
Line_8 $$ File main = new File(name)-->Line_9 $$ if (main.exists()) [ FD ]
Line_8 $$ File main = new File(name)-->Line_10 $$ throw new IOException(main.getAbsolutePath())[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_12 $$ main.mkdir()[ CD ]
Line_8 $$ File main = new File(name)-->Line_12 $$ main.mkdir()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_13 $$ File version = new File(main, "version")[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_14 $$ version.createNewFile()[ CD ]
Line_13 $$ File version = new File(main, "version")-->Line_14 $$ version.createNewFile()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_15 $$ PrintWriter writer = new PrintWriter(version)[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_16 $$ writer.write(Videso3D.VERSION)[ CD ]
Line_15 $$ PrintWriter writer = new PrintWriter(version)-->Line_16 $$ writer.write(Videso3D.VERSION)[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_17 $$ writer.flush()[ CD ]
Line_15 $$ PrintWriter writer = new PrintWriter(version)-->Line_17 $$ writer.flush()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_18 $$ writer.close()[ CD ]
Line_15 $$ PrintWriter writer = new PrintWriter(version)-->Line_18 $$ writer.close()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_19 $$ File xmlDir = new File(main.getAbsolutePath() + "/xml")[ CD ]
Line_8 $$ File main = new File(name)-->Line_19 $$ File xmlDir = new File(main.getAbsolutePath() + "/xml")[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_20 $$ xmlDir.mkdir()[ CD ]
Line_19 $$ File xmlDir = new File(main.getAbsolutePath() + "/xml")-->Line_20 $$ xmlDir.mkdir()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_21 $$ if (types != null && !types.isEmpty()) [ CD ]
Line_21 $$ if (types != null && !types.isEmpty()) -->Line_21 $$ if (types != null && !types.isEmpty()) [ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_21 $$ if (types != null && !types.isEmpty()) [ FD ]
Line_21 $$ if (types != null && !types.isEmpty()) -->Line_22 $$ File databases = new File(main.getAbsolutePath() + "/databases")[ CD ]
Line_8 $$ File main = new File(name)-->Line_22 $$ File databases = new File(main.getAbsolutePath() + "/databases")[ FD ]
Line_21 $$ if (types != null && !types.isEmpty()) -->Line_23 $$ databases.mkdir()[ CD ]
Line_22 $$ File databases = new File(main.getAbsolutePath() + "/databases")-->Line_23 $$ databases.mkdir()[ FD ]
Line_25 $$ Type type = DatabaseManager.stringToType(t)-->Line_25 $$ Type type = DatabaseManager.stringToType(t)[ CD ]
Line_24 $$ for (String t : types) -->Line_25 $$ Type type = DatabaseManager.stringToType(t)[ FD ]
Line_25 $$ Type type = DatabaseManager.stringToType(t)-->Line_26 $$ if (type != null) [ FD ]
Line_26 $$ if (type != null) -->Line_27 $$ if (onlyLinks) [ CD ]
Line_27 $$ if (onlyLinks) -->Line_28 $$ if (databasesIncluded) [ CD ]
Line_28 $$ if (databasesIncluded) -->Line_29 $$ String currentName = DatabaseManager.getCurrentName(type)[ CD ]
Line_29 $$ String currentName = DatabaseManager.getCurrentName(type)-->Line_29 $$ String currentName = DatabaseManager.getCurrentName(type)[ CD ]
Line_25 $$ Type type = DatabaseManager.stringToType(t)-->Line_29 $$ String currentName = DatabaseManager.getCurrentName(type)[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_30 $$ File baseCopy = new File(databases, currentName + "." + type)[ CD ]
Line_28 $$ if (databasesIncluded) -->Line_31 $$ baseCopy.createNewFile()[ CD ]
Line_30 $$ File baseCopy = new File(databases, currentName + "." + type)-->Line_31 $$ baseCopy.createNewFile()[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()[ CD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()[ CD ]
Line_28 $$ if (databasesIncluded) -->Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()[ CD ]
Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()-->Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()[ CD ]
Line_28 $$ if (databasesIncluded) -->Line_34 $$ destination.transferFrom(source, 0, source.size())[ CD ]
Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()-->Line_34 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_34 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_34 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_35 $$ source.close()[ CD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_35 $$ source.close()[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_36 $$ destination.close()[ CD ]
Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()-->Line_36 $$ destination.close()[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_37 $$ List<String[]> clefs = new ArrayList<String[]>()[ CD ]
Line_28 $$ if (databasesIncluded) -->Line_38 $$ Statement st = DatabaseManager.getCurrent(Type.Databases)[ CD ]
Line_38 $$ Statement st = DatabaseManager.getCurrent(Type.Databases)-->Line_38 $$ Statement st = DatabaseManager.getCurrent(Type.Databases)[ CD ]
Line_28 $$ if (databasesIncluded) -->Line_39 $$ ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'")[ CD ]
Line_39 $$ ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'")-->Line_39 $$ ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'")[ CD ]
Line_38 $$ Statement st = DatabaseManager.getCurrent(Type.Databases)-->Line_39 $$ ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'")[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_40 $$ while (rs.next()) [ CD ]
Line_28 $$ if (databasesIncluded) -->Line_28 $$ if (databasesIncluded) [ CD ]
Line_40 $$ while (rs.next()) -->Line_40 $$ while (rs.next()) [ CD ]
Line_39 $$ ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'")-->Line_40 $$ while (rs.next()) [ FD ]
Line_40 $$ while (rs.next()) -->Line_41 $$ clefs.add(new String[] [ CD ]
Line_37 $$ List<String[]> clefs = new ArrayList<String[]>()-->Line_41 $$ clefs.add(new String[] [ FD ]
Line_39 $$ ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'")-->Line_41 $$ clefs.add(new String[] [ FD ]
Line_39 $$ ResultSet rs = st.executeQuery("select * from clefs where type='" + currentName + "'")-->Line_41 $$ clefs.add(new String[] [ FD ]
Line_28 $$ if (databasesIncluded) -->Line_43 $$ st.close()[ CD ]
Line_38 $$ Statement st = DatabaseManager.getCurrent(Type.Databases)-->Line_43 $$ st.close()[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_44 $$ if (!clefs.isEmpty()) [ CD ]
Line_44 $$ if (!clefs.isEmpty()) -->Line_44 $$ if (!clefs.isEmpty()) [ CD ]
Line_44 $$ if (!clefs.isEmpty()) -->Line_44 $$ if (!clefs.isEmpty()) [ CD ]
Line_37 $$ List<String[]> clefs = new ArrayList<String[]>()-->Line_44 $$ if (!clefs.isEmpty()) [ FD ]
Line_44 $$ if (!clefs.isEmpty()) -->Line_45 $$ File clefsFile = new File(databases, currentName + "_clefs")[ CD ]
Line_44 $$ if (!clefs.isEmpty()) -->Line_46 $$ clefsFile.createNewFile()[ CD ]
Line_45 $$ File clefsFile = new File(databases, currentName + "_clefs")-->Line_46 $$ clefsFile.createNewFile()[ FD ]
Line_44 $$ if (!clefs.isEmpty()) -->Line_47 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile))[ CD ]
Line_44 $$ if (!clefs.isEmpty()) -->Line_48 $$ oos.writeObject(clefs)[ CD ]
Line_47 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile))-->Line_48 $$ oos.writeObject(clefs)[ FD ]
Line_37 $$ List<String[]> clefs = new ArrayList<String[]>()-->Line_48 $$ oos.writeObject(clefs)[ FD ]
Line_44 $$ if (!clefs.isEmpty()) -->Line_49 $$ oos.close()[ CD ]
Line_47 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile))-->Line_49 $$ oos.close()[ FD ]
Line_28 $$ if (databasesIncluded) -->Line_51 $$ File filesDir = new File(currentName + "_files")[ CD ]
Line_28 $$ if (databasesIncluded) -->Line_52 $$ if (filesDir.exists() && filesDir.isDirectory()) [ CD ]
Line_51 $$ File filesDir = new File(currentName + "_files")-->Line_52 $$ if (filesDir.exists() && filesDir.isDirectory()) [ FD ]
Line_51 $$ File filesDir = new File(currentName + "_files")-->Line_52 $$ if (filesDir.exists() && filesDir.isDirectory()) [ FD ]
Line_52 $$ if (filesDir.exists() && filesDir.isDirectory()) -->Line_53 $$ File baseFiles = new File(databases, currentName + "_files")[ CD ]
Line_52 $$ if (filesDir.exists() && filesDir.isDirectory()) -->Line_54 $$ baseFiles.mkdirs()[ CD ]
Line_53 $$ File baseFiles = new File(databases, currentName + "_files")-->Line_54 $$ baseFiles.mkdirs()[ FD ]
Line_51 $$ File filesDir = new File(currentName + "_files")-->Line_55 $$ for (File f : filesDir.listFiles()) [ FD ]
Line_55 $$ for (File f : filesDir.listFiles()) -->Line_56 $$ File copy = new File(baseFiles, f.getName())[ FD ]
Line_56 $$ File copy = new File(baseFiles, f.getName())-->Line_57 $$ copy.createNewFile()[ FD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_58 $$ source = new FileInputStream(f).getChannel()[ FD ]
Line_58 $$ source = new FileInputStream(f).getChannel()-->Line_58 $$ source = new FileInputStream(f).getChannel()[ FD ]
Line_58 $$ source = new FileInputStream(f).getChannel()-->Line_58 $$ source = new FileInputStream(f).getChannel()[ CD ]
Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()-->Line_59 $$ destination = new FileOutputStream(copy).getChannel()[ FD ]
Line_59 $$ destination = new FileOutputStream(copy).getChannel()-->Line_59 $$ destination = new FileOutputStream(copy).getChannel()[ FD ]
Line_59 $$ destination = new FileOutputStream(copy).getChannel()-->Line_59 $$ destination = new FileOutputStream(copy).getChannel()[ CD ]
Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()-->Line_60 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_59 $$ destination = new FileOutputStream(copy).getChannel()-->Line_60 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_60 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_58 $$ source = new FileInputStream(f).getChannel()-->Line_60 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_60 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_58 $$ source = new FileInputStream(f).getChannel()-->Line_60 $$ destination.transferFrom(source, 0, source.size())[ FD ]
Line_32 $$ FileChannel source = new FileInputStream(new File(currentName)).getChannel()-->Line_61 $$ source.close()[ FD ]
Line_58 $$ source = new FileInputStream(f).getChannel()-->Line_61 $$ source.close()[ FD ]
Line_33 $$ FileChannel destination = new FileOutputStream(baseCopy).getChannel()-->Line_62 $$ destination.close()[ FD ]
Line_59 $$ destination = new FileOutputStream(copy).getChannel()-->Line_62 $$ destination.close()[ FD ]
Line_27 $$ if (onlyLinks) -->Line_66 $$ File selectedObjects = new File(databases, type.toString())[ CD ]
Line_25 $$ Type type = DatabaseManager.stringToType(t)-->Line_66 $$ File selectedObjects = new File(databases, type.toString())[ FD ]
Line_27 $$ if (onlyLinks) -->Line_67 $$ selectedObjects.createNewFile()[ CD ]
Line_66 $$ File selectedObjects = new File(databases, type.toString())-->Line_67 $$ selectedObjects.createNewFile()[ FD ]
Line_27 $$ if (onlyLinks) -->Line_69 $$ oos.writeObject(objects.get(type))[ CD ]
Line_47 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile))-->Line_69 $$ oos.writeObject(objects.get(type))[ FD ]
Line_25 $$ Type type = DatabaseManager.stringToType(t)-->Line_69 $$ oos.writeObject(objects.get(type))[ FD ]
Line_27 $$ if (onlyLinks) -->Line_70 $$ oos.close()[ CD ]
Line_47 $$ ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile))-->Line_70 $$ oos.close()[ FD ]
Line_25 $$ Type type = DatabaseManager.stringToType(t)-->Line_72 $$ for (Restorable r : DatasManager.getController(type).getSelectedObjects()) [ FD ]
Line_72 $$ for (Restorable r : DatasManager.getController(type).getSelectedObjects()) -->Line_73 $$ this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"))[ FD ]
Line_72 $$ for (Restorable r : DatasManager.getController(type).getSelectedObjects()) -->Line_73 $$ this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"))[ FD ]
Line_5 $$ DecimalFormat format = new DecimalFormat("####")-->Line_73 $$ this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"))[ FD ]
Line_7 $$ int count = 0-->Line_73 $$ this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + "-" + type + "-" + format.format(count++) + ".xml"))[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_79 $$ File imagesDir = new File(main.getAbsolutePath() + "/images")[ CD ]
Line_8 $$ File main = new File(name)-->Line_79 $$ File imagesDir = new File(main.getAbsolutePath() + "/images")[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_80 $$ imagesDir.mkdir()[ CD ]
Line_79 $$ File imagesDir = new File(main.getAbsolutePath() + "/images")-->Line_80 $$ imagesDir.mkdir()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_82 $$ if (images.contains(si.getName())) [ FD ]
Line_82 $$ if (images.contains(si.getName())) -->Line_82 $$ if (images.contains(si.getName())) [ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_82 $$ if (images.contains(si.getName())) [ FD ]
Line_81 $$ for (EditableSurfaceImage si : this.getImages()) -->Line_82 $$ if (images.contains(si.getName())) [ FD ]
Line_82 $$ if (images.contains(si.getName())) -->Line_83 $$ int idx = si.getName().lastIndexOf(".")[ CD ]
Line_83 $$ int idx = si.getName().lastIndexOf(".")-->Line_83 $$ int idx = si.getName().lastIndexOf(".")[ CD ]
Line_81 $$ for (EditableSurfaceImage si : this.getImages()) -->Line_83 $$ int idx = si.getName().lastIndexOf(".")[ FD ]
Line_82 $$ if (images.contains(si.getName())) -->Line_84 $$ String newName = si.getName()[ CD ]
Line_84 $$ String newName = si.getName()-->Line_84 $$ String newName = si.getName()[ CD ]
Line_81 $$ for (EditableSurfaceImage si : this.getImages()) -->Line_84 $$ String newName = si.getName()[ FD ]
Line_82 $$ if (images.contains(si.getName())) -->Line_85 $$ if (idx != -1) [ CD ]
Line_83 $$ int idx = si.getName().lastIndexOf(".")-->Line_85 $$ if (idx != -1) [ FD ]
Line_85 $$ if (idx != -1) -->Line_86 $$ newName = si.getName().substring(0, idx)[ CD ]
Line_84 $$ String newName = si.getName()-->Line_86 $$ newName = si.getName().substring(0, idx)[ FD ]
Line_86 $$ newName = si.getName().substring(0, idx)-->Line_86 $$ newName = si.getName().substring(0, idx)[ FD ]
Line_86 $$ newName = si.getName().substring(0, idx)-->Line_86 $$ newName = si.getName().substring(0, idx)[ CD ]
Line_83 $$ int idx = si.getName().lastIndexOf(".")-->Line_86 $$ newName = si.getName().substring(0, idx)[ FD ]
Line_81 $$ for (EditableSurfaceImage si : this.getImages()) -->Line_86 $$ newName = si.getName().substring(0, idx)[ FD ]
Line_82 $$ if (images.contains(si.getName())) -->Line_88 $$ File img = new File(imagesDir, newName + ".gtif")[ CD ]
Line_82 $$ if (images.contains(si.getName())) -->Line_89 $$ ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img)[ CD ]
Line_88 $$ File img = new File(imagesDir, newName + ".gtif")-->Line_89 $$ ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img)[ FD ]
Line_81 $$ for (EditableSurfaceImage si : this.getImages()) -->Line_89 $$ ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img)[ FD ]
Line_81 $$ for (EditableSurfaceImage si : this.getImages()) -->Line_89 $$ ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img)[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_92 $$ File trajectoDir = new File(main, "trajectory")[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_93 $$ trajectoDir.mkdirs()[ CD ]
Line_92 $$ File trajectoDir = new File(main, "trajectory")-->Line_93 $$ trajectoDir.mkdirs()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_95 $$ if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) [ FD ]
Line_94 $$ for (Layer l : wwd.getModel().getLayers()) -->Line_95 $$ if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) [ FD ]
Line_95 $$ if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) -->Line_96 $$ GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true)[ CD ]
Line_92 $$ File trajectoDir = new File(main, "trajectory")-->Line_96 $$ GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true)[ FD ]
Line_94 $$ for (Layer l : wwd.getModel().getLayers()) -->Line_96 $$ GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true)[ FD ]
Line_96 $$ GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true)-->Line_98 $$ geoWriter.writeTrack((GEOTrack) track)[ FD ]
Line_95 $$ if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) -->Line_100 $$ geoWriter.close()[ CD ]
Line_96 $$ GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + "/" + l.getName(), true)-->Line_100 $$ geoWriter.close()[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_103 $$ if (types != null && types.contains("Autres objets affichés.")) [ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_103 $$ if (types != null && types.contains("Autres objets affichés.")) [ FD ]
Line_105 $$ if (l.getName().equals(AIRSPACE_LAYER_NAME)) -->Line_105 $$ if (l.getName().equals(AIRSPACE_LAYER_NAME)) [ CD ]
Line_94 $$ for (Layer l : wwd.getModel().getLayers()) -->Line_105 $$ if (l.getName().equals(AIRSPACE_LAYER_NAME)) [ FD ]
Line_72 $$ for (Restorable r : DatasManager.getController(type).getSelectedObjects()) -->Line_107 $$ this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_5 $$ DecimalFormat format = new DecimalFormat("####")-->Line_107 $$ this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_7 $$ int count = 0-->Line_107 $$ this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_105 $$ if (l.getName().equals(AIRSPACE_LAYER_NAME)) -->Line_109 $$ if (l.getName().equals(RENDERABLE_LAYER_NAME)) [ CD ]
Line_109 $$ if (l.getName().equals(RENDERABLE_LAYER_NAME)) -->Line_109 $$ if (l.getName().equals(RENDERABLE_LAYER_NAME)) [ CD ]
Line_94 $$ for (Layer l : wwd.getModel().getLayers()) -->Line_109 $$ if (l.getName().equals(RENDERABLE_LAYER_NAME)) [ FD ]
Line_72 $$ for (Restorable r : DatasManager.getController(type).getSelectedObjects()) -->Line_111 $$ if (r instanceof Restorable) [ FD ]
Line_111 $$ if (r instanceof Restorable) -->Line_112 $$ this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"))[ CD ]
Line_72 $$ for (Restorable r : DatasManager.getController(type).getSelectedObjects()) -->Line_112 $$ this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_5 $$ DecimalFormat format = new DecimalFormat("####")-->Line_112 $$ this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_7 $$ int count = 0-->Line_112 $$ this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_109 $$ if (l.getName().equals(RENDERABLE_LAYER_NAME)) -->Line_115 $$ if (l.getName().equals(BALISES2D_LAYER_NAME)) [ CD ]
Line_115 $$ if (l.getName().equals(BALISES2D_LAYER_NAME)) -->Line_115 $$ if (l.getName().equals(BALISES2D_LAYER_NAME)) [ CD ]
Line_94 $$ for (Layer l : wwd.getModel().getLayers()) -->Line_115 $$ if (l.getName().equals(BALISES2D_LAYER_NAME)) [ FD ]
Line_116 $$ for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) -->Line_117 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_116 $$ for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) -->Line_117 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_5 $$ DecimalFormat format = new DecimalFormat("####")-->Line_117 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_7 $$ int count = 0-->Line_117 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_115 $$ if (l.getName().equals(BALISES2D_LAYER_NAME)) -->Line_119 $$ if (l.getName().equals(BALISES3D_LAYER_NAME)) [ CD ]
Line_119 $$ if (l.getName().equals(BALISES3D_LAYER_NAME)) -->Line_119 $$ if (l.getName().equals(BALISES3D_LAYER_NAME)) [ CD ]
Line_94 $$ for (Layer l : wwd.getModel().getLayers()) -->Line_119 $$ if (l.getName().equals(BALISES3D_LAYER_NAME)) [ FD ]
Line_116 $$ for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) -->Line_121 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_116 $$ for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) -->Line_121 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_5 $$ DecimalFormat format = new DecimalFormat("####")-->Line_121 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_7 $$ int count = 0-->Line_121 $$ this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_126 $$ for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) -->Line_127 $$ if (a.isVisible())[ FD ]
Line_127 $$ if (a.isVisible())-->Line_127 $$ if (a.isVisible())[ CD ]
Line_126 $$ for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) -->Line_127 $$ if (a.isVisible())[ FD ]
Line_127 $$ if (a.isVisible())-->Line_127 $$ this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"))[ CD ]
Line_126 $$ for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) -->Line_127 $$ this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_126 $$ for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) -->Line_127 $$ this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_5 $$ DecimalFormat format = new DecimalFormat("####")-->Line_127 $$ this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_7 $$ int count = 0-->Line_127 $$ this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + "-" + format.format(count++) + ".xml"))[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_129 $$ this.saveObjectInXml(this.wwd.getView(), new File(main, "globe.xml"))[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_130 $$ FileManager.createZipFile(file, main)[ CD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_130 $$ FileManager.createZipFile(file, main)[ FD ]
Line_8 $$ File main = new File(name)-->Line_130 $$ FileManager.createZipFile(file, main)[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_131 $$ FileManager.deleteFile(main)[ CD ]
Line_8 $$ File main = new File(name)-->Line_131 $$ FileManager.deleteFile(main)[ FD ]
Line_2 $$ public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException -->Line_132 $$ return true[ CD ]
