Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static int copy(File src, int amount, File dst) [ CD ]
Line_2 $$ public static int copy(File src, int amount, File dst) -->Line_3 $$ final int BUFFER_SIZE = 1024[ CD ]
Line_2 $$ public static int copy(File src, int amount, File dst) -->Line_4 $$ int amountToRead = amount[ CD ]
Line_2 $$ public static int copy(File src, int amount, File dst) -->Line_5 $$ InputStream in = null[ CD ]
Line_2 $$ public static int copy(File src, int amount, File dst) -->Line_6 $$ OutputStream out = null[ CD ]
Line_5 $$ InputStream in = null-->Line_8 $$ in = new BufferedInputStream(new FileInputStream(src))[ FD ]
Line_8 $$ in = new BufferedInputStream(new FileInputStream(src))-->Line_8 $$ in = new BufferedInputStream(new FileInputStream(src))[ FD ]
Line_6 $$ OutputStream out = null-->Line_9 $$ out = new BufferedOutputStream(new FileOutputStream(dst))[ FD ]
Line_9 $$ out = new BufferedOutputStream(new FileOutputStream(dst))-->Line_9 $$ out = new BufferedOutputStream(new FileOutputStream(dst))[ FD ]
Line_4 $$ int amountToRead = amount-->Line_11 $$ while (amountToRead > 0) [ FD ]
Line_11 $$ while (amountToRead > 0) -->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ CD ]
Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))-->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ CD ]
Line_5 $$ InputStream in = null-->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ FD ]
Line_8 $$ in = new BufferedInputStream(new FileInputStream(src))-->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ FD ]
Line_10 $$ byte[] buf = new byte[BUFFER_SIZE]-->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ FD ]
Line_3 $$ final int BUFFER_SIZE = 1024-->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ FD ]
Line_4 $$ int amountToRead = amount-->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ FD ]
Line_11 $$ while (amountToRead > 0) -->Line_13 $$ if (read == -1)[ CD ]
Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))-->Line_13 $$ if (read == -1)[ FD ]
Line_11 $$ while (amountToRead > 0) -->Line_14 $$ amountToRead -= read[ CD ]
Line_14 $$ amountToRead -= read-->Line_14 $$ amountToRead -= read[ FD ]
Line_4 $$ int amountToRead = amount-->Line_14 $$ amountToRead -= read[ FD ]
Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))-->Line_14 $$ amountToRead -= read[ FD ]
Line_11 $$ while (amountToRead > 0) -->Line_15 $$ out.write(buf, 0, read)[ CD ]
Line_6 $$ OutputStream out = null-->Line_15 $$ out.write(buf, 0, read)[ FD ]
Line_9 $$ out = new BufferedOutputStream(new FileOutputStream(dst))-->Line_15 $$ out.write(buf, 0, read)[ FD ]
Line_10 $$ byte[] buf = new byte[BUFFER_SIZE]-->Line_15 $$ out.write(buf, 0, read)[ FD ]
Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))-->Line_15 $$ out.write(buf, 0, read)[ FD ]
Line_5 $$ InputStream in = null-->Line_19 $$ if (in != null)[ FD ]
Line_8 $$ in = new BufferedInputStream(new FileInputStream(src))-->Line_19 $$ if (in != null)[ FD ]
Line_5 $$ InputStream in = null-->Line_20 $$ in.close()[ FD ]
Line_8 $$ in = new BufferedInputStream(new FileInputStream(src))-->Line_20 $$ in.close()[ FD ]
Line_6 $$ OutputStream out = null-->Line_23 $$ if (out != null) [ FD ]
Line_9 $$ out = new BufferedOutputStream(new FileOutputStream(dst))-->Line_23 $$ if (out != null) [ FD ]
Line_6 $$ OutputStream out = null-->Line_25 $$ out.flush()[ FD ]
Line_9 $$ out = new BufferedOutputStream(new FileOutputStream(dst))-->Line_25 $$ out.flush()[ FD ]
Line_6 $$ OutputStream out = null-->Line_29 $$ out.close()[ FD ]
Line_9 $$ out = new BufferedOutputStream(new FileOutputStream(dst))-->Line_29 $$ out.close()[ FD ]
Line_2 $$ public static int copy(File src, int amount, File dst) -->Line_34 $$ return amount - amountToRead[ CD ]
Line_14 $$ amountToRead -= read-->Line_11 $$ while (amountToRead > 0) [ FD ]
Line_14 $$ amountToRead -= read-->Line_11 $$ while (amountToRead > 0) [ FD ]
Line_14 $$ amountToRead -= read-->Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))[ FD ]
Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))-->Line_13 $$ if (read == -1)[ FD ]
Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))-->Line_14 $$ amountToRead -= read[ FD ]
Line_12 $$ int read = in.read(buf, 0, Math.min(BUFFER_SIZE, amountToRead))-->Line_15 $$ out.write(buf, 0, read)[ FD ]
