Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void start() throws Exception [ CD ]
Line_2 $$ public void start() throws Exception -->Line_3 $$ initMetaData()[ CD ]
Line_2 $$ public void start() throws Exception -->Line_4 $$ Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>()[ CD ]
Line_5 $$ for (ONDEXConcept c : graph.getConcepts()) -->Line_6 $$ for (ConceptAccession ca : c.getConceptAccessions()) [ FD ]
Line_6 $$ for (ConceptAccession ca : c.getConceptAccessions()) -->Line_7 $$ if (ca.getElementOf().equals(dsCHEMBL) && !accessions.containsKey(ca.getAccession()))[ FD ]
Line_7 $$ if (ca.getElementOf().equals(dsCHEMBL) && !accessions.containsKey(ca.getAccession()))-->Line_7 $$ if (ca.getElementOf().equals(dsCHEMBL) && !accessions.containsKey(ca.getAccession()))[ CD ]
Line_4 $$ Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>()-->Line_7 $$ if (ca.getElementOf().equals(dsCHEMBL) && !accessions.containsKey(ca.getAccession()))[ FD ]
Line_6 $$ for (ConceptAccession ca : c.getConceptAccessions()) -->Line_7 $$ if (ca.getElementOf().equals(dsCHEMBL) && !accessions.containsKey(ca.getAccession()))[ FD ]
Line_7 $$ if (ca.getElementOf().equals(dsCHEMBL) && !accessions.containsKey(ca.getAccession()))-->Line_7 $$ accessions.put(ca.getAccession(), new HashSet<ONDEXConcept>())[ CD ]
Line_4 $$ Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>()-->Line_7 $$ accessions.put(ca.getAccession(), new HashSet<ONDEXConcept>())[ FD ]
Line_6 $$ for (ConceptAccession ca : c.getConceptAccessions()) -->Line_7 $$ accessions.put(ca.getAccession(), new HashSet<ONDEXConcept>())[ FD ]
Line_5 $$ for (ONDEXConcept c : graph.getConcepts()) -->Line_8 $$ accessions.get(ca.getAccession()).add(c)[ FD ]
Line_4 $$ Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>()-->Line_8 $$ accessions.get(ca.getAccession()).add(c)[ FD ]
Line_6 $$ for (ConceptAccession ca : c.getConceptAccessions()) -->Line_8 $$ accessions.get(ca.getAccession()).add(c)[ FD ]
Line_2 $$ public void start() throws Exception -->Line_11 $$ System.out.println(accessions)[ CD ]
Line_4 $$ Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>()-->Line_11 $$ System.out.println(accessions)[ FD ]
Line_2 $$ public void start() throws Exception -->Line_12 $$ int count = 0[ CD ]
Line_4 $$ Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>()-->Line_13 $$ for (String accession : accessions.keySet()) [ FD ]
Line_14 $$ URL url = new URL("https://www.ebi.ac.uk/chemblws/compounds/" + accession + "/bioactivities")-->Line_15 $$ HttpURLConnection uc = (HttpURLConnection) url.openConnection()[ FD ]
Line_16 $$ int code = uc.getResponseCode()-->Line_16 $$ int code = uc.getResponseCode()[ CD ]
Line_15 $$ HttpURLConnection uc = (HttpURLConnection) url.openConnection()-->Line_16 $$ int code = uc.getResponseCode()[ FD ]
Line_16 $$ int code = uc.getResponseCode()-->Line_17 $$ if (code != 200) [ FD ]
Line_17 $$ if (code != 200) -->Line_18 $$ String response = uc.getResponseMessage()[ CD ]
Line_18 $$ String response = uc.getResponseMessage()-->Line_18 $$ String response = uc.getResponseMessage()[ CD ]
Line_15 $$ HttpURLConnection uc = (HttpURLConnection) url.openConnection()-->Line_18 $$ String response = uc.getResponseMessage()[ FD ]
Line_17 $$ if (code != 200) -->Line_19 $$ fireEventOccurred(new ParsingErrorEvent("HTTP/1.x " + code + " " + response, getCurrentMethodName()))[ CD ]
Line_17 $$ if (code != 200) -->Line_21 $$ InputStream in = new BufferedInputStream(uc.getInputStream())[ CD ]
Line_15 $$ HttpURLConnection uc = (HttpURLConnection) url.openConnection()-->Line_21 $$ InputStream in = new BufferedInputStream(uc.getInputStream())[ FD ]
Line_17 $$ if (code != 200) -->Line_22 $$ DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance()[ CD ]
Line_22 $$ DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance()-->Line_22 $$ DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance()[ CD ]
Line_17 $$ if (code != 200) -->Line_23 $$ DocumentBuilder dBuilder = dbFactory.newDocumentBuilder()[ CD ]
Line_23 $$ DocumentBuilder dBuilder = dbFactory.newDocumentBuilder()-->Line_23 $$ DocumentBuilder dBuilder = dbFactory.newDocumentBuilder()[ CD ]
Line_22 $$ DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance()-->Line_23 $$ DocumentBuilder dBuilder = dbFactory.newDocumentBuilder()[ FD ]
Line_17 $$ if (code != 200) -->Line_24 $$ Document doc = dBuilder.parse(in)[ CD ]
Line_24 $$ Document doc = dBuilder.parse(in)-->Line_24 $$ Document doc = dBuilder.parse(in)[ CD ]
Line_23 $$ DocumentBuilder dBuilder = dbFactory.newDocumentBuilder()-->Line_24 $$ Document doc = dBuilder.parse(in)[ FD ]
Line_21 $$ InputStream in = new BufferedInputStream(uc.getInputStream())-->Line_24 $$ Document doc = dBuilder.parse(in)[ FD ]
Line_17 $$ if (code != 200) -->Line_25 $$ doc.getDocumentElement().normalize()[ CD ]
Line_24 $$ Document doc = dBuilder.parse(in)-->Line_25 $$ doc.getDocumentElement().normalize()[ FD ]
Line_17 $$ if (code != 200) -->Line_26 $$ NodeList nList = doc.getElementsByTagName("bioactivity")[ CD ]
Line_26 $$ NodeList nList = doc.getElementsByTagName("bioactivity")-->Line_26 $$ NodeList nList = doc.getElementsByTagName("bioactivity")[ CD ]
Line_24 $$ Document doc = dBuilder.parse(in)-->Line_26 $$ NodeList nList = doc.getElementsByTagName("bioactivity")[ FD ]
Line_17 $$ if (code != 200) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ CD ]
Line_17 $$ if (code != 200) -->Line_17 $$ if (code != 200) [ CD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ CD ]
Line_26 $$ NodeList nList = doc.getElementsByTagName("bioactivity")-->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ FD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ CD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ CD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ FD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_28 $$ Node nNode = nList.item(temp)[ CD ]
Line_28 $$ Node nNode = nList.item(temp)-->Line_28 $$ Node nNode = nList.item(temp)[ CD ]
Line_26 $$ NodeList nList = doc.getElementsByTagName("bioactivity")-->Line_28 $$ Node nNode = nList.item(temp)[ FD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_28 $$ Node nNode = nList.item(temp)[ FD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) [ CD ]
Line_28 $$ Node nNode = nList.item(temp)-->Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) [ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_30 $$ Element eElement = (Element) nNode[ CD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)[ CD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)[ CD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_32 $$ activity.createConceptAccession(getTagValue("assay__chemblid", eElement), dsASSAY, false)[ CD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_32 $$ activity.createConceptAccession(getTagValue("assay__chemblid", eElement), dsASSAY, false)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_32 $$ activity.createConceptAccession(getTagValue("assay__chemblid", eElement), dsASSAY, false)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_33 $$ activity.createAttribute(anRef, getTagValue("reference", eElement), true)[ CD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_33 $$ activity.createAttribute(anRef, getTagValue("reference", eElement), true)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_33 $$ activity.createAttribute(anRef, getTagValue("reference", eElement), true)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_34 $$ activity.createAttribute(anOrg, getTagValue("organism", eElement), true)[ CD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_34 $$ activity.createAttribute(anOrg, getTagValue("organism", eElement), true)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_34 $$ activity.createAttribute(anOrg, getTagValue("organism", eElement), true)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_35 $$ String type = getTagValue("bioactivity__type", eElement)[ CD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_35 $$ String type = getTagValue("bioactivity__type", eElement)[ CD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_35 $$ String type = getTagValue("bioactivity__type", eElement)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_36 $$ type = type.replace(" ", "_")[ CD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_36 $$ type = type.replace(" ", "_")[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_36 $$ type = type.replace(" ", "_")[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_36 $$ type = type.replace(" ", "_")[ CD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_36 $$ type = type.replace(" ", "_")[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_36 $$ type = type.replace(" ", "_")[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_37 $$ if (!anTypes.containsKey(type)) [ CD ]
Line_37 $$ if (!anTypes.containsKey(type)) -->Line_37 $$ if (!anTypes.containsKey(type)) [ CD ]
Line_37 $$ if (!anTypes.containsKey(type)) -->Line_37 $$ if (!anTypes.containsKey(type)) [ CD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_37 $$ if (!anTypes.containsKey(type)) [ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_37 $$ if (!anTypes.containsKey(type)) [ FD ]
Line_37 $$ if (!anTypes.containsKey(type)) -->Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)[ CD ]
Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)-->Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)[ CD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)[ FD ]
Line_37 $$ if (!anTypes.containsKey(type)) -->Line_39 $$ String units = getTagValue("units", eElement)[ CD ]
Line_39 $$ String units = getTagValue("units", eElement)-->Line_39 $$ String units = getTagValue("units", eElement)[ CD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_39 $$ String units = getTagValue("units", eElement)[ FD ]
Line_37 $$ if (!anTypes.containsKey(type)) -->Line_40 $$ if (graph.getMetaData().getUnit(units) == null)[ CD ]
Line_39 $$ String units = getTagValue("units", eElement)-->Line_40 $$ if (graph.getMetaData().getUnit(units) == null)[ FD ]
Line_40 $$ if (graph.getMetaData().getUnit(units) == null)-->Line_40 $$ graph.getMetaData().getFactory().createUnit(units)[ CD ]
Line_39 $$ String units = getTagValue("units", eElement)-->Line_40 $$ graph.getMetaData().getFactory().createUnit(units)[ FD ]
Line_37 $$ if (!anTypes.containsKey(type)) -->Line_41 $$ an.setUnit(graph.getMetaData().getUnit(units))[ CD ]
Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)-->Line_41 $$ an.setUnit(graph.getMetaData().getUnit(units))[ FD ]
Line_39 $$ String units = getTagValue("units", eElement)-->Line_41 $$ an.setUnit(graph.getMetaData().getUnit(units))[ FD ]
Line_37 $$ if (!anTypes.containsKey(type)) -->Line_42 $$ anTypes.put(type, an)[ CD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_42 $$ anTypes.put(type, an)[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_42 $$ anTypes.put(type, an)[ FD ]
Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)-->Line_42 $$ anTypes.put(type, an)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_44 $$ String value = getTagValue("value", eElement)[ CD ]
Line_44 $$ String value = getTagValue("value", eElement)-->Line_44 $$ String value = getTagValue("value", eElement)[ CD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_44 $$ String value = getTagValue("value", eElement)[ FD ]
Line_46 $$ Double d = Double.valueOf(value)-->Line_46 $$ Double d = Double.valueOf(value)[ CD ]
Line_44 $$ String value = getTagValue("value", eElement)-->Line_46 $$ Double d = Double.valueOf(value)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_46 $$ Double d = Double.valueOf(value)-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_50 $$ String comment = getTagValue("activity__comment", eElement)[ CD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_50 $$ String comment = getTagValue("activity__comment", eElement)[ CD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_50 $$ String comment = getTagValue("activity__comment", eElement)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_51 $$ if (comment != null && comment.trim().length() > 0) [ CD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_51 $$ if (comment != null && comment.trim().length() > 0) [ FD ]
Line_51 $$ if (comment != null && comment.trim().length() > 0) -->Line_52 $$ if (mapping.containsKey(comment))[ CD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_52 $$ if (mapping.containsKey(comment))[ FD ]
Line_52 $$ if (mapping.containsKey(comment))-->Line_52 $$ if (mapping.containsKey(comment))[ CD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_52 $$ if (mapping.containsKey(comment))[ FD ]
Line_52 $$ if (mapping.containsKey(comment))-->Line_52 $$ comment = mapping.get(comment)[ CD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_52 $$ comment = mapping.get(comment)[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_52 $$ comment = mapping.get(comment)[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_52 $$ comment = mapping.get(comment)[ CD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_52 $$ comment = mapping.get(comment)[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_52 $$ comment = mapping.get(comment)[ FD ]
Line_51 $$ if (comment != null && comment.trim().length() > 0) -->Line_53 $$ activity.createAttribute(anComment, comment, true)[ CD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_53 $$ activity.createAttribute(anComment, comment, true)[ FD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_53 $$ activity.createAttribute(anComment, comment, true)[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_53 $$ activity.createAttribute(anComment, comment, true)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_55 $$ count++[ CD ]
Line_12 $$ int count = 0-->Line_55 $$ count++[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_56 $$ Set<ONDEXConcept> compounds = accessions.get(accession)[ CD ]
Line_56 $$ Set<ONDEXConcept> compounds = accessions.get(accession)-->Line_56 $$ Set<ONDEXConcept> compounds = accessions.get(accession)[ CD ]
Line_4 $$ Map<String, Set<ONDEXConcept>> accessions = new HashMap<String, Set<ONDEXConcept>>()-->Line_56 $$ Set<ONDEXConcept> compounds = accessions.get(accession)[ FD ]
Line_13 $$ for (String accession : accessions.keySet()) -->Line_56 $$ Set<ONDEXConcept> compounds = accessions.get(accession)[ FD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_58 $$ graph.getFactory().createRelation(c, activity, rtActivity, evidencetype)[ FD ]
Line_5 $$ for (ONDEXConcept c : graph.getConcepts()) -->Line_58 $$ graph.getFactory().createRelation(c, activity, rtActivity, evidencetype)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_58 $$ graph.getFactory().createRelation(c, activity, rtActivity, evidencetype)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_60 $$ String key = getTagValue("target__chemblid", eElement)[ CD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_60 $$ String key = getTagValue("target__chemblid", eElement)[ CD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_60 $$ String key = getTagValue("target__chemblid", eElement)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_61 $$ if (!targets.containsKey(key)) [ CD ]
Line_61 $$ if (!targets.containsKey(key)) -->Line_61 $$ if (!targets.containsKey(key)) [ CD ]
Line_61 $$ if (!targets.containsKey(key)) -->Line_61 $$ if (!targets.containsKey(key)) [ CD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_61 $$ if (!targets.containsKey(key)) [ FD ]
Line_61 $$ if (!targets.containsKey(key)) -->Line_62 $$ ONDEXConcept c = graph.getFactory().createConcept(key, dsCHEMBL, ccTarget, evidencetype)[ CD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_62 $$ ONDEXConcept c = graph.getFactory().createConcept(key, dsCHEMBL, ccTarget, evidencetype)[ FD ]
Line_61 $$ if (!targets.containsKey(key)) -->Line_63 $$ c.createConceptName(getTagValue("target__name", eElement), true)[ CD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_63 $$ c.createConceptName(getTagValue("target__name", eElement), true)[ FD ]
Line_5 $$ for (ONDEXConcept c : graph.getConcepts()) -->Line_63 $$ c.createConceptName(getTagValue("target__name", eElement), true)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_63 $$ c.createConceptName(getTagValue("target__name", eElement), true)[ FD ]
Line_61 $$ if (!targets.containsKey(key)) -->Line_64 $$ c.createConceptAccession(key, dsTARGET, false)[ CD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_64 $$ c.createConceptAccession(key, dsTARGET, false)[ FD ]
Line_5 $$ for (ONDEXConcept c : graph.getConcepts()) -->Line_64 $$ c.createConceptAccession(key, dsTARGET, false)[ FD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_64 $$ c.createConceptAccession(key, dsTARGET, false)[ FD ]
Line_61 $$ if (!targets.containsKey(key)) -->Line_65 $$ targets.put(key, c)[ CD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_65 $$ targets.put(key, c)[ FD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_65 $$ targets.put(key, c)[ FD ]
Line_5 $$ for (ONDEXConcept c : graph.getConcepts()) -->Line_65 $$ targets.put(key, c)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_67 $$ ONDEXConcept target = targets.get(key)[ CD ]
Line_67 $$ ONDEXConcept target = targets.get(key)-->Line_67 $$ ONDEXConcept target = targets.get(key)[ CD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_67 $$ ONDEXConcept target = targets.get(key)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)[ CD ]
Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)-->Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)[ CD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)[ FD ]
Line_67 $$ ONDEXConcept target = targets.get(key)-->Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)[ FD ]
Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) -->Line_69 $$ r.createAttribute(anConf, Double.valueOf(getTagValue("target__confidence", eElement)), false)[ CD ]
Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)-->Line_69 $$ r.createAttribute(anConf, Double.valueOf(getTagValue("target__confidence", eElement)), false)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_69 $$ r.createAttribute(anConf, Double.valueOf(getTagValue("target__confidence", eElement)), false)[ FD ]
Line_2 $$ public void start() throws Exception -->Line_74 $$ fireEventOccurred(new GeneralOutputEvent("Total assays parsed:" + count, getCurrentMethodName()))[ CD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ FD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ FD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) [ FD ]
Line_27 $$ for (int temp = 0; temp < nList.getLength(); temp++) -->Line_28 $$ Node nNode = nList.item(temp)[ FD ]
Line_28 $$ Node nNode = nList.item(temp)-->Line_29 $$ if (nNode.getNodeType() == Node.ELEMENT_NODE) [ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_32 $$ activity.createConceptAccession(getTagValue("assay__chemblid", eElement), dsASSAY, false)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_32 $$ activity.createConceptAccession(getTagValue("assay__chemblid", eElement), dsASSAY, false)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_33 $$ activity.createAttribute(anRef, getTagValue("reference", eElement), true)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_33 $$ activity.createAttribute(anRef, getTagValue("reference", eElement), true)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_34 $$ activity.createAttribute(anOrg, getTagValue("organism", eElement), true)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_34 $$ activity.createAttribute(anOrg, getTagValue("organism", eElement), true)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_35 $$ String type = getTagValue("bioactivity__type", eElement)[ FD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_36 $$ type = type.replace(" ", "_")[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_36 $$ type = type.replace(" ", "_")[ FD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_37 $$ if (!anTypes.containsKey(type)) [ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_37 $$ if (!anTypes.containsKey(type)) [ FD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_39 $$ String units = getTagValue("units", eElement)[ FD ]
Line_39 $$ String units = getTagValue("units", eElement)-->Line_40 $$ if (graph.getMetaData().getUnit(units) == null)[ FD ]
Line_39 $$ String units = getTagValue("units", eElement)-->Line_40 $$ graph.getMetaData().getFactory().createUnit(units)[ FD ]
Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)-->Line_41 $$ an.setUnit(graph.getMetaData().getUnit(units))[ FD ]
Line_39 $$ String units = getTagValue("units", eElement)-->Line_41 $$ an.setUnit(graph.getMetaData().getUnit(units))[ FD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_42 $$ anTypes.put(type, an)[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_42 $$ anTypes.put(type, an)[ FD ]
Line_38 $$ AttributeName an = graph.getMetaData().getFactory().createAttributeName(type, Double.class)-->Line_42 $$ anTypes.put(type, an)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_44 $$ String value = getTagValue("value", eElement)[ FD ]
Line_44 $$ String value = getTagValue("value", eElement)-->Line_46 $$ Double d = Double.valueOf(value)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_46 $$ Double d = Double.valueOf(value)-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_35 $$ String type = getTagValue("bioactivity__type", eElement)-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_36 $$ type = type.replace(" ", "_")-->Line_47 $$ activity.createAttribute(anTypes.get(type), d, false)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_50 $$ String comment = getTagValue("activity__comment", eElement)[ FD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_51 $$ if (comment != null && comment.trim().length() > 0) [ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_51 $$ if (comment != null && comment.trim().length() > 0) [ FD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_52 $$ if (mapping.containsKey(comment))[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_52 $$ if (mapping.containsKey(comment))[ FD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_52 $$ if (mapping.containsKey(comment))[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_52 $$ if (mapping.containsKey(comment))[ FD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_52 $$ comment = mapping.get(comment)[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_52 $$ comment = mapping.get(comment)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_53 $$ activity.createAttribute(anComment, comment, true)[ FD ]
Line_50 $$ String comment = getTagValue("activity__comment", eElement)-->Line_53 $$ activity.createAttribute(anComment, comment, true)[ FD ]
Line_52 $$ comment = mapping.get(comment)-->Line_53 $$ activity.createAttribute(anComment, comment, true)[ FD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_58 $$ graph.getFactory().createRelation(c, activity, rtActivity, evidencetype)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_58 $$ graph.getFactory().createRelation(c, activity, rtActivity, evidencetype)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_60 $$ String key = getTagValue("target__chemblid", eElement)[ FD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_61 $$ if (!targets.containsKey(key)) [ FD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_62 $$ ONDEXConcept c = graph.getFactory().createConcept(key, dsCHEMBL, ccTarget, evidencetype)[ FD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_63 $$ c.createConceptName(getTagValue("target__name", eElement), true)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_63 $$ c.createConceptName(getTagValue("target__name", eElement), true)[ FD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_64 $$ c.createConceptAccession(key, dsTARGET, false)[ FD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_64 $$ c.createConceptAccession(key, dsTARGET, false)[ FD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_65 $$ targets.put(key, c)[ FD ]
Line_57 $$ for (ONDEXConcept c : compounds) -->Line_65 $$ targets.put(key, c)[ FD ]
Line_60 $$ String key = getTagValue("target__chemblid", eElement)-->Line_67 $$ ONDEXConcept target = targets.get(key)[ FD ]
Line_31 $$ ONDEXConcept activity = graph.getFactory().createConcept(getTagValue("assay__chemblid", eElement), getTagValue("assay__description", eElement), dsCHEMBL, ccActivity, evidencetype)-->Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)[ FD ]
Line_67 $$ ONDEXConcept target = targets.get(key)-->Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)[ FD ]
Line_68 $$ ONDEXRelation r = graph.getFactory().createRelation(activity, target, rtOccin, evidencetype)-->Line_69 $$ r.createAttribute(anConf, Double.valueOf(getTagValue("target__confidence", eElement)), false)[ FD ]
Line_30 $$ Element eElement = (Element) nNode-->Line_69 $$ r.createAttribute(anConf, Double.valueOf(getTagValue("target__confidence", eElement)), false)[ FD ]
