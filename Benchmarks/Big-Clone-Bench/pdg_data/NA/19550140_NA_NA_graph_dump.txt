Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void ensure(File pFile) throws IOException [ CD ]
Line_2 $$ private static void ensure(File pFile) throws IOException -->Line_3 $$ if (!pFile.exists()) [ CD ]
Line_3 $$ if (!pFile.exists()) -->Line_3 $$ if (!pFile.exists()) [ CD ]
Line_3 $$ if (!pFile.exists()) -->Line_3 $$ if (!pFile.exists()) [ CD ]
Line_2 $$ private static void ensure(File pFile) throws IOException -->Line_3 $$ if (!pFile.exists()) [ FD ]
Line_3 $$ if (!pFile.exists()) -->Line_4 $$ FileOutputStream fos = new FileOutputStream(pFile)[ CD ]
Line_3 $$ if (!pFile.exists()) -->Line_5 $$ String resourceName = "/" + pFile.getName()[ CD ]
Line_2 $$ private static void ensure(File pFile) throws IOException -->Line_5 $$ String resourceName = "/" + pFile.getName()[ FD ]
Line_3 $$ if (!pFile.exists()) -->Line_6 $$ InputStream is = BaseTest.class.getResourceAsStream(resourceName)[ CD ]
Line_6 $$ InputStream is = BaseTest.class.getResourceAsStream(resourceName)-->Line_6 $$ InputStream is = BaseTest.class.getResourceAsStream(resourceName)[ CD ]
Line_5 $$ String resourceName = "/" + pFile.getName()-->Line_6 $$ InputStream is = BaseTest.class.getResourceAsStream(resourceName)[ FD ]
Line_3 $$ if (!pFile.exists()) -->Line_7 $$ Assert.assertNotNull(String.format("Could not find resource [%s].", resourceName), is)[ CD ]
Line_6 $$ InputStream is = BaseTest.class.getResourceAsStream(resourceName)-->Line_7 $$ Assert.assertNotNull(String.format("Could not find resource [%s].", resourceName), is)[ FD ]
Line_5 $$ String resourceName = "/" + pFile.getName()-->Line_7 $$ Assert.assertNotNull(String.format("Could not find resource [%s].", resourceName), is)[ FD ]
Line_3 $$ if (!pFile.exists()) -->Line_8 $$ IOUtils.copy(is, fos)[ CD ]
Line_6 $$ InputStream is = BaseTest.class.getResourceAsStream(resourceName)-->Line_8 $$ IOUtils.copy(is, fos)[ FD ]
Line_4 $$ FileOutputStream fos = new FileOutputStream(pFile)-->Line_8 $$ IOUtils.copy(is, fos)[ FD ]
Line_3 $$ if (!pFile.exists()) -->Line_9 $$ fos.close()[ CD ]
Line_4 $$ FileOutputStream fos = new FileOutputStream(pFile)-->Line_9 $$ fos.close()[ FD ]
