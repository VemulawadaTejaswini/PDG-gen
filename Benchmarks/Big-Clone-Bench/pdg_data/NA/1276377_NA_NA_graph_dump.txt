Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String send(String ipStr, int port, String password, String command, InetAddress localhost, int localPort) throws SocketTimeoutException, BadRcon, ResponseEmpty [ CD ]
Line_2 $$ public static String send(String ipStr, int port, String password, String command, InetAddress localhost, int localPort) throws SocketTimeoutException, BadRcon, ResponseEmpty -->Line_3 $$ StringBuffer response = new StringBuffer()[ CD ]
Line_15 $$ while (keepGoing) -->Line_16 $$ String receivedContent = buffRead.readLine()[ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_16 $$ String receivedContent = buffRead.readLine()[ CD ]
Line_10 $$ BufferedReader buffRead = new BufferedReader(new InputStreamReader(in))-->Line_16 $$ String receivedContent = buffRead.readLine()[ FD ]
Line_15 $$ while (keepGoing) -->Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) [ FD ]
Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) -->Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) [ FD ]
Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) -->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ CD ]
Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())-->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ FD ]
Line_12 $$ String digestSeed = ""-->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ FD ]
Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())-->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ FD ]
Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")[ CD ]
Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_21 $$ md5.update(digestSeed.getBytes())[ FD ]
Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())-->Line_21 $$ md5.update(digestSeed.getBytes())[ FD ]
Line_12 $$ String digestSeed = ""-->Line_21 $$ md5.update(digestSeed.getBytes())[ FD ]
Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_22 $$ md5.update(password.getBytes())[ FD ]
Line_2 $$ public static String send(String ipStr, int port, String password, String command, InetAddress localhost, int localPort) throws SocketTimeoutException, BadRcon, ResponseEmpty -->Line_22 $$ md5.update(password.getBytes())[ FD ]
Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_23 $$ String digestStr = "login " + digestedToHex(md5.digest()) + "\n"[ FD ]
Line_23 $$ String digestStr = "login " + digestedToHex(md5.digest()) + "\n"-->Line_24 $$ out.write(digestStr.getBytes())[ FD ]
Line_3 $$ StringBuffer response = new StringBuffer()-->Line_26 $$ response.append("MD5 algorithm not available - unable to complete RCON request.")[ FD ]
Line_27 $$ keepGoing = false-->Line_27 $$ keepGoing = false[ FD ]
Line_14 $$ boolean keepGoing = true-->Line_27 $$ keepGoing = false[ FD ]
Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) -->Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) [ FD ]
Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) -->Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) [ FD ]
Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) -->Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) [ FD ]
Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) -->Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) [ FD ]
Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) -->Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) [ FD ]
Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) -->Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) [ CD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) [ FD ]
Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) -->Line_34 $$ keepGoing = false[ CD ]
Line_27 $$ keepGoing = false-->Line_34 $$ keepGoing = false[ FD ]
Line_34 $$ keepGoing = false-->Line_34 $$ keepGoing = false[ FD ]
Line_14 $$ boolean keepGoing = true-->Line_34 $$ keepGoing = false[ FD ]
Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) -->Line_35 $$ loggedIn = true[ CD ]
Line_35 $$ loggedIn = true-->Line_35 $$ loggedIn = true[ FD ]
Line_13 $$ boolean loggedIn = false-->Line_35 $$ loggedIn = true[ FD ]
Line_38 $$ if (loggedIn) -->Line_39 $$ String cmd = "exec " + command + "\n"[ CD ]
Line_38 $$ if (loggedIn) -->Line_40 $$ out.write(cmd.getBytes())[ CD ]
Line_39 $$ String cmd = "exec " + command + "\n"-->Line_40 $$ out.write(cmd.getBytes())[ FD ]
Line_38 $$ if (loggedIn) -->Line_41 $$ readResponse(buffRead, response)[ CD ]
Line_10 $$ BufferedReader buffRead = new BufferedReader(new InputStreamReader(in))-->Line_41 $$ readResponse(buffRead, response)[ FD ]
Line_3 $$ StringBuffer response = new StringBuffer()-->Line_41 $$ readResponse(buffRead, response)[ FD ]
Line_38 $$ if (loggedIn) -->Line_42 $$ if (response.length() == 0) [ CD ]
Line_3 $$ StringBuffer response = new StringBuffer()-->Line_42 $$ if (response.length() == 0) [ FD ]
Line_3 $$ StringBuffer response = new StringBuffer()-->Line_49 $$ response.append("UnknownHostException: " + e.getMessage())[ FD ]
Line_3 $$ StringBuffer response = new StringBuffer()-->Line_51 $$ response.append("Couldn't get I/O for the connection: " + e.getMessage())[ FD ]
Line_55 $$ if (out != null) -->Line_56 $$ out.close()[ CD ]
Line_58 $$ if (in != null) -->Line_59 $$ in.close()[ CD ]
Line_61 $$ if (rconSocket != null) -->Line_62 $$ rconSocket.close()[ CD ]
Line_2 $$ public static String send(String ipStr, int port, String password, String command, InetAddress localhost, int localPort) throws SocketTimeoutException, BadRcon, ResponseEmpty -->Line_67 $$ return response.toString()[ CD ]
Line_67 $$ return response.toString()-->Line_67 $$ return response.toString()[ CD ]
Line_3 $$ StringBuffer response = new StringBuffer()-->Line_67 $$ return response.toString()[ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) [ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_17 $$ if (receivedContent.startsWith("### Digest seed: ")) [ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())[ FD ]
Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_21 $$ md5.update(digestSeed.getBytes())[ FD ]
Line_18 $$ digestSeed = receivedContent.substring(17, receivedContent.length())-->Line_21 $$ md5.update(digestSeed.getBytes())[ FD ]
Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_22 $$ md5.update(password.getBytes())[ FD ]
Line_20 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_23 $$ String digestStr = "login " + digestedToHex(md5.digest()) + "\n"[ FD ]
Line_23 $$ String digestStr = "login " + digestedToHex(md5.digest()) + "\n"-->Line_24 $$ out.write(digestStr.getBytes())[ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) [ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_29 $$ if (receivedContent.startsWith("error: not authenticated: you can only invoke 'login'")) [ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) [ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_31 $$ if (receivedContent.startsWith("Authentication failed.")) [ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) [ FD ]
Line_16 $$ String receivedContent = buffRead.readLine()-->Line_33 $$ if (receivedContent.startsWith("Authentication successful, rcon ready.")) [ FD ]
