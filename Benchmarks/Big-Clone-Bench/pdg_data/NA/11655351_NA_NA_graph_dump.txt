Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testMark() throws IllegalArgumentException, IOException [ CD ]
Line_2 $$ public void testMark() throws IllegalArgumentException, IOException -->Line_3 $$ Assert.assertNotNull(this.m_detector)[ CD ]
Line_2 $$ public void testMark() throws IllegalArgumentException, IOException -->Line_4 $$ File f = new File("testdocuments/voiddocument/Voiderror.htm")[ CD ]
Line_2 $$ public void testMark() throws IllegalArgumentException, IOException -->Line_5 $$ Assert.assertTrue("Test file " + f.getAbsolutePath() + " does not exist. ", f.exists())[ CD ]
Line_4 $$ File f = new File("testdocuments/voiddocument/Voiderror.htm")-->Line_5 $$ Assert.assertTrue("Test file " + f.getAbsolutePath() + " does not exist. ", f.exists())[ FD ]
Line_4 $$ File f = new File("testdocuments/voiddocument/Voiderror.htm")-->Line_5 $$ Assert.assertTrue("Test file " + f.getAbsolutePath() + " does not exist. ", f.exists())[ FD ]
Line_2 $$ public void testMark() throws IllegalArgumentException, IOException -->Line_6 $$ URL url = f.toURL()[ CD ]
Line_6 $$ URL url = f.toURL()-->Line_6 $$ URL url = f.toURL()[ CD ]
Line_4 $$ File f = new File("testdocuments/voiddocument/Voiderror.htm")-->Line_6 $$ URL url = f.toURL()[ FD ]
Line_2 $$ public void testMark() throws IllegalArgumentException, IOException -->Line_7 $$ this.m_detector.detectCodepage(url.openStream(), 200)[ CD ]
Line_6 $$ URL url = f.toURL()-->Line_7 $$ this.m_detector.detectCodepage(url.openStream(), 200)[ FD ]
