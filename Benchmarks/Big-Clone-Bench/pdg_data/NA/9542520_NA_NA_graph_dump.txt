Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_2 $$ public void run() -->Line_3 $$ while (true) [ CD ]
Line_2 $$ public void run() -->Line_2 $$ public void run() [ CD ]
Line_3 $$ while (true) -->Line_10 $$ umat.flush()[ CD ]
Line_3 $$ while (true) -->Line_17 $$ String userdat = "data/" + username + "_l.cod"[ CD ]
Line_3 $$ while (true) -->Line_18 $$ URL url = null[ CD ]
Line_18 $$ URL url = null-->Line_20 $$ url = new URL(base, userdat)[ FD ]
Line_20 $$ url = new URL(base, userdat)-->Line_20 $$ url = new URL(base, userdat)[ FD ]
Line_3 $$ while (true) -->Line_23 $$ InputStream in = null[ CD ]
Line_23 $$ InputStream in = null-->Line_25 $$ in = url.openStream()[ FD ]
Line_25 $$ in = url.openStream()-->Line_25 $$ in = url.openStream()[ FD ]
Line_25 $$ in = url.openStream()-->Line_25 $$ in = url.openStream()[ CD ]
Line_18 $$ URL url = null-->Line_25 $$ in = url.openStream()[ FD ]
Line_20 $$ url = new URL(base, userdat)-->Line_25 $$ in = url.openStream()[ FD ]
Line_3 $$ while (true) -->Line_28 $$ BufferedReader reader = null[ CD ]
Line_28 $$ BufferedReader reader = null-->Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_34 $$ String line = reader.readLine()-->Line_34 $$ String line = reader.readLine()[ CD ]
Line_28 $$ BufferedReader reader = null-->Line_34 $$ String line = reader.readLine()[ FD ]
Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_34 $$ String line = reader.readLine()[ FD ]
Line_36 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())-->Line_36 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ CD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_36 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_37 $$ this.topol = tokenizer.nextToken().trim().toLowerCase()-->Line_37 $$ this.topol = tokenizer.nextToken().trim().toLowerCase()[ CD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_37 $$ this.topol = tokenizer.nextToken().trim().toLowerCase()[ FD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_38 $$ xunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_39 $$ yunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_42 $$ for (int e = 0; e < yunit; e++) [ CD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_42 $$ for (int e = 0; e < yunit; e++) [ CD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_42 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_42 $$ for (int e = 0; e < yunit; e++) [ CD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_44 $$ line = reader.readLine()[ CD ]
Line_44 $$ line = reader.readLine()-->Line_44 $$ line = reader.readLine()[ FD ]
Line_34 $$ String line = reader.readLine()-->Line_44 $$ line = reader.readLine()[ FD ]
Line_44 $$ line = reader.readLine()-->Line_44 $$ line = reader.readLine()[ CD ]
Line_28 $$ BufferedReader reader = null-->Line_44 $$ line = reader.readLine()[ FD ]
Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_44 $$ line = reader.readLine()[ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_45 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")[ CD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_46 $$ for (int w = 0; w < dim; w++) [ CD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_36 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())-->Line_46 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_46 $$ for (int w = 0; w < dim; w++) -->Line_46 $$ for (int w = 0; w < dim; w++) [ CD ]
Line_46 $$ for (int w = 0; w < dim; w++) -->Line_46 $$ for (int w = 0; w < dim; w++) [ CD ]
Line_46 $$ for (int w = 0; w < dim; w++) -->Line_46 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_46 $$ for (int w = 0; w < dim; w++) -->Line_47 $$ if (tokenizer2.countTokens() > 0)[ CD ]
Line_45 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_47 $$ if (tokenizer2.countTokens() > 0)[ FD ]
Line_47 $$ if (tokenizer2.countTokens() > 0)-->Line_47 $$ tokenizer2.nextToken()[ CD ]
Line_45 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_47 $$ tokenizer2.nextToken()[ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_49 $$ while (tokenizer2.countTokens() > 0) [ CD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ CD ]
Line_45 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_49 $$ while (tokenizer2.countTokens() > 0) [ FD ]
Line_49 $$ while (tokenizer2.countTokens() > 0) -->Line_50 $$ label = tokenizer2.nextToken() + " "[ CD ]
Line_50 $$ label = tokenizer2.nextToken() + " "-->Line_50 $$ label = tokenizer2.nextToken() + " "[ FD ]
Line_40 $$ String label = null-->Line_50 $$ label = tokenizer2.nextToken() + " "[ FD ]
Line_45 $$ StringTokenizer tokenizer2 = new StringTokenizer(line, " ")-->Line_50 $$ label = tokenizer2.nextToken() + " "[ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_52 $$ if (label == null) [ CD ]
Line_50 $$ label = tokenizer2.nextToken() + " "-->Line_52 $$ if (label == null) [ FD ]
Line_40 $$ String label = null-->Line_52 $$ if (label == null) [ FD ]
Line_52 $$ if (label == null) -->Line_53 $$ labels[r][e] = "none"[ CD ]
Line_52 $$ if (label == null) -->Line_55 $$ labels[r][e] = label[ CD ]
Line_50 $$ label = tokenizer2.nextToken() + " "-->Line_55 $$ labels[r][e] = label[ FD ]
Line_40 $$ String label = null-->Line_55 $$ labels[r][e] = label[ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_57 $$ label = null[ CD ]
Line_50 $$ label = tokenizer2.nextToken() + " "-->Line_57 $$ label = null[ FD ]
Line_57 $$ label = null-->Line_57 $$ label = null[ FD ]
Line_40 $$ String label = null-->Line_57 $$ label = null[ FD ]
Line_28 $$ BufferedReader reader = null-->Line_60 $$ reader.close()[ FD ]
Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_60 $$ reader.close()[ FD ]
Line_61 $$ if (topol.equals("hexa")) -->Line_61 $$ if (topol.equals("hexa")) [ CD ]
Line_61 $$ if (topol.equals("hexa")) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_61 $$ if (topol.equals("hexa")) -->Line_61 $$ if (topol.equals("hexa")) [ CD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_67 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_67 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_67 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_67 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_68 $$ if (q % 2 == 0) [ CD ]
Line_68 $$ if (q % 2 == 0) -->Line_69 $$ double nenner = (p * width)[ CD ]
Line_68 $$ if (q % 2 == 0) -->Line_70 $$ xposit[p][q] = (int) Math.round(nenner / divisor1)[ CD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_72 $$ if (q % 2 != 0) [ CD ]
Line_72 $$ if (q % 2 != 0) -->Line_74 $$ xposit[p][q] = (int) Math.round(nenner / divisor1)[ CD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_76 $$ yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2)[ CD ]
Line_80 $$ if (topol.equals("rect")) -->Line_80 $$ if (topol.equals("rect")) [ CD ]
Line_80 $$ if (topol.equals("rect")) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_80 $$ if (topol.equals("rect")) -->Line_80 $$ if (topol.equals("rect")) [ CD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ CD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ CD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_87 $$ double nenner = (width * 0.5) + (p * width)[ CD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_88 $$ xposit[p][q] = (int) Math.round((nenner / divisor1))[ CD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_89 $$ yposit[p][q] = (int) Math.round(((height * 0.5) + q * height) / divisor2)[ CD ]
Line_3 $$ while (true) -->Line_96 $$ mt.removeImage(umat)[ CD ]
Line_3 $$ while (true) -->Line_97 $$ umat = getImage(base, userpng)[ CD ]
Line_3 $$ while (true) -->Line_98 $$ mt.addImage(umat, 0)[ CD ]
Line_3 $$ while (true) -->Line_104 $$ repaint()[ CD ]
Line_18 $$ URL url = null-->Line_25 $$ in = url.openStream()[ FD ]
Line_20 $$ url = new URL(base, userdat)-->Line_25 $$ in = url.openStream()[ FD ]
Line_28 $$ BufferedReader reader = null-->Line_34 $$ String line = reader.readLine()[ FD ]
Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_34 $$ String line = reader.readLine()[ FD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_36 $$ int dim = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_37 $$ this.topol = tokenizer.nextToken().trim().toLowerCase()[ FD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_38 $$ xunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_35 $$ StringTokenizer tokenizer = new StringTokenizer(line, " ")-->Line_39 $$ yunit = Integer.parseInt(tokenizer.nextToken().trim().toLowerCase())[ FD ]
Line_28 $$ BufferedReader reader = null-->Line_60 $$ reader.close()[ FD ]
Line_30 $$ reader = new BufferedReader(new InputStreamReader(in))-->Line_60 $$ reader.close()[ FD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_42 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_42 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_42 $$ for (int e = 0; e < yunit; e++) -->Line_42 $$ for (int e = 0; e < yunit; e++) [ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_43 $$ for (int r = 0; r < xunit; r++) -->Line_43 $$ for (int r = 0; r < xunit; r++) [ FD ]
Line_57 $$ label = null-->Line_52 $$ if (label == null) [ FD ]
Line_57 $$ label = null-->Line_55 $$ labels[r][e] = label[ FD ]
Line_46 $$ for (int w = 0; w < dim; w++) -->Line_46 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_46 $$ for (int w = 0; w < dim; w++) -->Line_46 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_46 $$ for (int w = 0; w < dim; w++) -->Line_46 $$ for (int w = 0; w < dim; w++) [ FD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_66 $$ for (int p = 0; p < xunit; p++) -->Line_66 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_67 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_67 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_67 $$ for (int q = 0; q < yunit; q++) -->Line_67 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_85 $$ for (int p = 0; p < xunit; p++) -->Line_85 $$ for (int p = 0; p < xunit; p++) [ FD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ FD ]
Line_86 $$ for (int q = 0; q < yunit; q++) -->Line_86 $$ for (int q = 0; q < yunit; q++) [ FD ]
