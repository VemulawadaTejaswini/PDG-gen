Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void connect() throws IOException [ CD ]
Line_2 $$ public void connect() throws IOException -->Line_3 $$ URL url = getLocator().getURL()[ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_3 $$ URL url = getLocator().getURL()[ CD ]
Line_2 $$ public void connect() throws IOException -->Line_4 $$ if (url.getProtocol().equals("file")) [ CD ]
Line_4 $$ if (url.getProtocol().equals("file")) -->Line_4 $$ if (url.getProtocol().equals("file")) [ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_4 $$ if (url.getProtocol().equals("file")) [ FD ]
Line_4 $$ if (url.getProtocol().equals("file")) -->Line_5 $$ final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm())[ CD ]
Line_5 $$ final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm())-->Line_5 $$ final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm())[ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_5 $$ final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm())[ FD ]
Line_4 $$ if (url.getProtocol().equals("file")) -->Line_6 $$ if (newUrlStr != null) [ CD ]
Line_5 $$ final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm())-->Line_6 $$ if (newUrlStr != null) [ FD ]
Line_6 $$ if (newUrlStr != null) -->Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) [ CD ]
Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) -->Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) [ CD ]
Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) -->Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) [ CD ]
Line_5 $$ final String newUrlStr = URLUtils.createAbsoluteFileUrl(url.toExternalForm())-->Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) [ FD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) [ FD ]
Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) -->Line_8 $$ logger.warning("Changing file URL to absolute for URL.openConnection, from " + url.toExternalForm() + " to " + newUrlStr)[ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_8 $$ logger.warning("Changing file URL to absolute for URL.openConnection, from " + url.toExternalForm() + " to " + newUrlStr)[ FD ]
Line_7 $$ if (!newUrlStr.toString().equals(url.toExternalForm())) -->Line_9 $$ url = new URL(newUrlStr)[ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_9 $$ url = new URL(newUrlStr)[ FD ]
Line_9 $$ url = new URL(newUrlStr)-->Line_9 $$ url = new URL(newUrlStr)[ FD ]
Line_2 $$ public void connect() throws IOException -->Line_13 $$ conn = url.openConnection()[ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_13 $$ conn = url.openConnection()[ FD ]
Line_9 $$ url = new URL(newUrlStr)-->Line_13 $$ conn = url.openConnection()[ FD ]
Line_2 $$ public void connect() throws IOException -->Line_14 $$ if (!url.getProtocol().equals("ftp") && conn.getURL().getProtocol().equals("ftp")) [ CD ]
Line_14 $$ if (!url.getProtocol().equals("ftp") && conn.getURL().getProtocol().equals("ftp")) -->Line_14 $$ if (!url.getProtocol().equals("ftp") && conn.getURL().getProtocol().equals("ftp")) [ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_14 $$ if (!url.getProtocol().equals("ftp") && conn.getURL().getProtocol().equals("ftp")) [ FD ]
Line_9 $$ url = new URL(newUrlStr)-->Line_14 $$ if (!url.getProtocol().equals("ftp") && conn.getURL().getProtocol().equals("ftp")) [ FD ]
Line_14 $$ if (!url.getProtocol().equals("ftp") && conn.getURL().getProtocol().equals("ftp")) -->Line_15 $$ logger.warning("URL.openConnection() morphed " + url + " to " + conn.getURL())[ CD ]
Line_2 $$ public void connect() throws IOException -->Line_18 $$ if (conn instanceof HttpURLConnection) [ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_19 $$ final HttpURLConnection huc = (HttpURLConnection) conn[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_20 $$ huc.connect()[ CD ]
Line_19 $$ final HttpURLConnection huc = (HttpURLConnection) conn-->Line_20 $$ huc.connect()[ FD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_21 $$ final int code = huc.getResponseCode()[ CD ]
Line_21 $$ final int code = huc.getResponseCode()-->Line_21 $$ final int code = huc.getResponseCode()[ CD ]
Line_19 $$ final HttpURLConnection huc = (HttpURLConnection) conn-->Line_21 $$ final int code = huc.getResponseCode()[ FD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_22 $$ if (!(code >= 200 && code < 300)) [ CD ]
Line_22 $$ if (!(code >= 200 && code < 300)) -->Line_22 $$ if (!(code >= 200 && code < 300)) [ CD ]
Line_22 $$ if (!(code >= 200 && code < 300)) -->Line_23 $$ huc.disconnect()[ CD ]
Line_19 $$ final HttpURLConnection huc = (HttpURLConnection) conn-->Line_23 $$ huc.disconnect()[ FD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_26 $$ logger.finer("URL: " + url)[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_27 $$ logger.finer("Response code: " + code)[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_28 $$ logger.finer("Full content type: " + conn.getContentType())[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_29 $$ boolean contentTypeSet = false[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_30 $$ if (stripTrailer(conn.getContentType()).equals("text/plain")) [ CD ]
Line_30 $$ if (stripTrailer(conn.getContentType()).equals("text/plain")) -->Line_30 $$ if (stripTrailer(conn.getContentType()).equals("text/plain")) [ CD ]
Line_30 $$ if (stripTrailer(conn.getContentType()).equals("text/plain")) -->Line_31 $$ final String ext = PathUtils.extractExtension(url.getPath())[ CD ]
Line_31 $$ final String ext = PathUtils.extractExtension(url.getPath())-->Line_31 $$ final String ext = PathUtils.extractExtension(url.getPath())[ CD ]
Line_3 $$ URL url = getLocator().getURL()-->Line_31 $$ final String ext = PathUtils.extractExtension(url.getPath())[ FD ]
Line_9 $$ url = new URL(newUrlStr)-->Line_31 $$ final String ext = PathUtils.extractExtension(url.getPath())[ FD ]
Line_30 $$ if (stripTrailer(conn.getContentType()).equals("text/plain")) -->Line_32 $$ if (ext != null) [ CD ]
Line_31 $$ final String ext = PathUtils.extractExtension(url.getPath())-->Line_32 $$ if (ext != null) [ FD ]
Line_32 $$ if (ext != null) -->Line_33 $$ final String result = MimeManager.getMimeType(ext)[ CD ]
Line_33 $$ final String result = MimeManager.getMimeType(ext)-->Line_33 $$ final String result = MimeManager.getMimeType(ext)[ CD ]
Line_31 $$ final String ext = PathUtils.extractExtension(url.getPath())-->Line_33 $$ final String result = MimeManager.getMimeType(ext)[ FD ]
Line_32 $$ if (ext != null) -->Line_34 $$ if (result != null) [ CD ]
Line_33 $$ final String result = MimeManager.getMimeType(ext)-->Line_34 $$ if (result != null) [ FD ]
Line_34 $$ if (result != null) -->Line_35 $$ contentTypeStr = ContentDescriptor.mimeTypeToPackageName(result)[ CD ]
Line_33 $$ final String result = MimeManager.getMimeType(ext)-->Line_35 $$ contentTypeStr = ContentDescriptor.mimeTypeToPackageName(result)[ FD ]
Line_34 $$ if (result != null) -->Line_36 $$ contentTypeSet = true[ CD ]
Line_29 $$ boolean contentTypeSet = false-->Line_36 $$ contentTypeSet = true[ FD ]
Line_36 $$ contentTypeSet = true-->Line_36 $$ contentTypeSet = true[ FD ]
Line_34 $$ if (result != null) -->Line_37 $$ logger.fine("Received content type " + conn.getContentType() + "; overriding based on extension, to: " + result)[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_41 $$ if (!contentTypeSet)[ CD ]
Line_29 $$ boolean contentTypeSet = false-->Line_41 $$ if (!contentTypeSet)[ FD ]
Line_36 $$ contentTypeSet = true-->Line_41 $$ if (!contentTypeSet)[ FD ]
Line_41 $$ if (!contentTypeSet)-->Line_41 $$ if (!contentTypeSet)[ CD ]
Line_29 $$ boolean contentTypeSet = false-->Line_41 $$ if (!contentTypeSet)[ FD ]
Line_36 $$ contentTypeSet = true-->Line_41 $$ if (!contentTypeSet)[ FD ]
Line_41 $$ if (!contentTypeSet)-->Line_41 $$ contentTypeStr = ContentDescriptor.mimeTypeToPackageName(stripTrailer(conn.getContentType()))[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_43 $$ conn.connect()[ CD ]
Line_18 $$ if (conn instanceof HttpURLConnection) -->Line_44 $$ contentTypeStr = ContentDescriptor.mimeTypeToPackageName(conn.getContentType())[ CD ]
Line_2 $$ public void connect() throws IOException -->Line_48 $$ sources[0] = new URLSourceStream()[ CD ]
