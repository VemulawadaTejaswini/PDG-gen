Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private ByteBuffer getByteBuffer(String resource) throws IOException [ CD ]
Line_2 $$ private ByteBuffer getByteBuffer(String resource) throws IOException -->Line_3 $$ ClassLoader classLoader = this.getClass().getClassLoader()[ CD ]
Line_3 $$ ClassLoader classLoader = this.getClass().getClassLoader()-->Line_3 $$ ClassLoader classLoader = this.getClass().getClassLoader()[ CD ]
Line_2 $$ private ByteBuffer getByteBuffer(String resource) throws IOException -->Line_4 $$ InputStream in = classLoader.getResourceAsStream(resource)[ CD ]
Line_4 $$ InputStream in = classLoader.getResourceAsStream(resource)-->Line_4 $$ InputStream in = classLoader.getResourceAsStream(resource)[ CD ]
Line_3 $$ ClassLoader classLoader = this.getClass().getClassLoader()-->Line_4 $$ InputStream in = classLoader.getResourceAsStream(resource)[ FD ]
Line_2 $$ private ByteBuffer getByteBuffer(String resource) throws IOException -->Line_4 $$ InputStream in = classLoader.getResourceAsStream(resource)[ FD ]
Line_2 $$ private ByteBuffer getByteBuffer(String resource) throws IOException -->Line_5 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_2 $$ private ByteBuffer getByteBuffer(String resource) throws IOException -->Line_6 $$ IOUtils.copy(in, out)[ CD ]
Line_4 $$ InputStream in = classLoader.getResourceAsStream(resource)-->Line_6 $$ IOUtils.copy(in, out)[ FD ]
Line_5 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_6 $$ IOUtils.copy(in, out)[ FD ]
Line_2 $$ private ByteBuffer getByteBuffer(String resource) throws IOException -->Line_7 $$ return ByteBuffer.wrap(out.toByteArray())[ CD ]
Line_7 $$ return ByteBuffer.wrap(out.toByteArray())-->Line_7 $$ return ByteBuffer.wrap(out.toByteArray())[ CD ]
Line_5 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_7 $$ return ByteBuffer.wrap(out.toByteArray())[ FD ]
