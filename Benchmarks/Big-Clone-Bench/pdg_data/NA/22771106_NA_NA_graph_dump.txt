Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException [ CD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_3 $$ boolean doBld = Boolean.parseBoolean(props.getProperty(project + ".bld"))[ CD ]
Line_3 $$ boolean doBld = Boolean.parseBoolean(props.getProperty(project + ".bld"))-->Line_3 $$ boolean doBld = Boolean.parseBoolean(props.getProperty(project + ".bld"))[ CD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_3 $$ boolean doBld = Boolean.parseBoolean(props.getProperty(project + ".bld"))[ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_4 $$ String url = props.getProperty(project + ".url")[ CD ]
Line_4 $$ String url = props.getProperty(project + ".url")-->Line_4 $$ String url = props.getProperty(project + ".url")[ CD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_4 $$ String url = props.getProperty(project + ".url")[ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_5 $$ if (!doBld || project == null || project.length() == 0) [ CD ]
Line_3 $$ boolean doBld = Boolean.parseBoolean(props.getProperty(project + ".bld"))-->Line_5 $$ if (!doBld || project == null || project.length() == 0) [ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_5 $$ if (!doBld || project == null || project.length() == 0) [ FD ]
Line_5 $$ if (!doBld || project == null || project.length() == 0) -->Line_6 $$ System.out.println("BuildLauncher: Not configured to build '" + project + "'")[ CD ]
Line_5 $$ if (!doBld || project == null || project.length() == 0) -->Line_7 $$ return[ CD ]
Line_5 $$ if (!doBld || project == null || project.length() == 0) -->Line_8 $$ if (url == null) [ CD ]
Line_4 $$ String url = props.getProperty(project + ".url")-->Line_8 $$ if (url == null) [ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_11 $$ SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS")[ CD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_12 $$ System.out.println(fmt.format(new Date()) + ": Triggering a build via: " + url)[ CD ]
Line_11 $$ SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS")-->Line_12 $$ System.out.println(fmt.format(new Date()) + ": Triggering a build via: " + url)[ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_13 $$ BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()))[ CD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_14 $$ while (r.readLine() != null) [ CD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException [ CD ]
Line_13 $$ BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()))-->Line_14 $$ while (r.readLine() != null) [ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_15 $$ System.out.println(fmt.format(new Date()) + ": Build triggered!")[ CD ]
Line_11 $$ SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS")-->Line_15 $$ System.out.println(fmt.format(new Date()) + ": Build triggered!")[ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_16 $$ LATEST_BUILD.put(project, rev)[ CD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_16 $$ LATEST_BUILD.put(project, rev)[ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_16 $$ LATEST_BUILD.put(project, rev)[ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_17 $$ r.close()[ CD ]
Line_13 $$ BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()))-->Line_17 $$ r.close()[ FD ]
Line_2 $$ private void triggerBuild(Properties props, String project, int rev) throws IOException -->Line_18 $$ System.out.println(fmt.format(new Date()) + ": triggerBuild() done!")[ CD ]
Line_11 $$ SimpleDateFormat fmt = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS")-->Line_18 $$ System.out.println(fmt.format(new Date()) + ": triggerBuild() done!")[ FD ]
