Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void execute(PaymentInfoMagcard payinfo) [ CD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_3 $$ if (payinfo.getTotal().compareTo(BigDecimal.ZERO) > 0) [ CD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_3 $$ if (payinfo.getTotal().compareTo(BigDecimal.ZERO) > 0) [ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_6 $$ sb.append("x_login=")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_7 $$ sb.append(URLEncoder.encode(m_sCommerceID, "UTF-8"))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_8 $$ sb.append("&x_password=")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_9 $$ sb.append(URLEncoder.encode(m_sCommercePassword, "UTF-8"))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_10 $$ sb.append("&x_version=3.1")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_11 $$ sb.append("&x_test_request=")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_12 $$ sb.append(m_bTestMode)[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_13 $$ sb.append("&x_method=CC")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_14 $$ sb.append("&x_type=")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_15 $$ sb.append(OPERATIONVALIDATE)[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_16 $$ sb.append("&x_amount=")[ FD ]
Line_18 $$ String amount = formatter.format(payinfo.getTotal())-->Line_18 $$ String amount = formatter.format(payinfo.getTotal())[ CD ]
Line_17 $$ NumberFormat formatter = new DecimalFormat("000.00")-->Line_18 $$ String amount = formatter.format(payinfo.getTotal())[ FD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_18 $$ String amount = formatter.format(payinfo.getTotal())[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_19 $$ sb.append(URLEncoder.encode((String) amount, "UTF-8"))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_20 $$ sb.append("&x_delim_data=TRUE")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_21 $$ sb.append("&x_delim_char=|")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_22 $$ sb.append("&x_relay_response=FALSE")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_23 $$ sb.append("&x_exp_date=")[ FD ]
Line_24 $$ String tmp = payinfo.getExpirationDate()-->Line_24 $$ String tmp = payinfo.getExpirationDate()[ CD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_24 $$ String tmp = payinfo.getExpirationDate()[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_25 $$ sb.append(tmp.charAt(2))[ FD ]
Line_24 $$ String tmp = payinfo.getExpirationDate()-->Line_25 $$ sb.append(tmp.charAt(2))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_26 $$ sb.append(tmp.charAt(3))[ FD ]
Line_24 $$ String tmp = payinfo.getExpirationDate()-->Line_26 $$ sb.append(tmp.charAt(3))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_27 $$ sb.append(tmp.charAt(0))[ FD ]
Line_24 $$ String tmp = payinfo.getExpirationDate()-->Line_27 $$ sb.append(tmp.charAt(0))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_28 $$ sb.append(tmp.charAt(1))[ FD ]
Line_24 $$ String tmp = payinfo.getExpirationDate()-->Line_28 $$ sb.append(tmp.charAt(1))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_29 $$ sb.append("&x_card_num=")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_30 $$ sb.append(URLEncoder.encode(payinfo.getCardNumber(), "UTF-8"))[ FD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_30 $$ sb.append(URLEncoder.encode(payinfo.getCardNumber(), "UTF-8"))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_31 $$ sb.append("&x_description=Shop+Transaction")[ FD ]
Line_32 $$ String[] cc_name = payinfo.getHolderName().split(" ")-->Line_32 $$ String[] cc_name = payinfo.getHolderName().split(" ")[ CD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_32 $$ String[] cc_name = payinfo.getHolderName().split(" ")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_33 $$ sb.append("&x_first_name=")[ FD ]
Line_34 $$ if (cc_name.length > 0) -->Line_35 $$ sb.append(URLEncoder.encode(cc_name[0], "UTF-8"))[ CD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_35 $$ sb.append(URLEncoder.encode(cc_name[0], "UTF-8"))[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_37 $$ sb.append("&x_last_name=")[ FD ]
Line_38 $$ if (cc_name.length > 1) -->Line_39 $$ sb.append(URLEncoder.encode(cc_name[1], "UTF-8"))[ CD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_39 $$ sb.append(URLEncoder.encode(cc_name[1], "UTF-8"))[ FD ]
Line_42 $$ URLConnection connection = url.openConnection()-->Line_42 $$ URLConnection connection = url.openConnection()[ CD ]
Line_41 $$ URL url = new URL(ENDPOINTADDRESS)-->Line_42 $$ URLConnection connection = url.openConnection()[ FD ]
Line_42 $$ URLConnection connection = url.openConnection()-->Line_43 $$ connection.setDoOutput(true)[ FD ]
Line_42 $$ URLConnection connection = url.openConnection()-->Line_44 $$ connection.setUseCaches(false)[ FD ]
Line_42 $$ URLConnection connection = url.openConnection()-->Line_45 $$ connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")[ FD ]
Line_42 $$ URLConnection connection = url.openConnection()-->Line_46 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream())[ FD ]
Line_46 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream())-->Line_47 $$ out.write(sb.toString().getBytes())[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_47 $$ out.write(sb.toString().getBytes())[ FD ]
Line_46 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream())-->Line_48 $$ out.flush()[ FD ]
Line_46 $$ DataOutputStream out = new DataOutputStream(connection.getOutputStream())-->Line_49 $$ out.close()[ FD ]
Line_42 $$ URLConnection connection = url.openConnection()-->Line_50 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))[ FD ]
Line_51 $$ String line-->Line_52 $$ line = in.readLine()[ FD ]
Line_52 $$ line = in.readLine()-->Line_52 $$ line = in.readLine()[ FD ]
Line_52 $$ line = in.readLine()-->Line_52 $$ line = in.readLine()[ CD ]
Line_50 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_52 $$ line = in.readLine()[ FD ]
Line_50 $$ BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))-->Line_53 $$ in.close()[ FD ]
Line_54 $$ String[] ccRep = line.split("\\|")-->Line_54 $$ String[] ccRep = line.split("\\|")[ CD ]
Line_51 $$ String line-->Line_54 $$ String[] ccRep = line.split("\\|")[ FD ]
Line_52 $$ line = in.readLine()-->Line_54 $$ String[] ccRep = line.split("\\|")[ FD ]
Line_55 $$ if ("1".equals(ccRep[0])) -->Line_55 $$ if ("1".equals(ccRep[0])) [ CD ]
Line_55 $$ if ("1".equals(ccRep[0])) -->Line_56 $$ payinfo.paymentOK((String) ccRep[4])[ CD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_56 $$ payinfo.paymentOK((String) ccRep[4])[ FD ]
Line_55 $$ if ("1".equals(ccRep[0])) -->Line_58 $$ payinfo.paymentError(AppLocal.getIntString("message.paymenterror") + "\n" + ccRep[0] + " -- " + ccRep[3])[ CD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_58 $$ payinfo.paymentError(AppLocal.getIntString("message.paymenterror") + "\n" + ccRep[0] + " -- " + ccRep[3])[ FD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_61 $$ payinfo.paymentError(AppLocal.getIntString("message.paymentexceptionservice") + "\n" + eUE.getMessage())[ FD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_63 $$ payinfo.paymentError(AppLocal.getIntString("message.paymentexceptionservice") + "\n" + eMURL.getMessage())[ FD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_65 $$ payinfo.paymentError(AppLocal.getIntString("message.paymenterror") + "\n" + e.getMessage())[ FD ]
Line_3 $$ if (payinfo.getTotal().compareTo(BigDecimal.ZERO) > 0) -->Line_68 $$ payinfo.paymentError(AppLocal.getIntString("message.paymentrefundsnotsupported"))[ CD ]
Line_2 $$ public void execute(PaymentInfoMagcard payinfo) -->Line_68 $$ payinfo.paymentError(AppLocal.getIntString("message.paymentrefundsnotsupported"))[ FD ]
