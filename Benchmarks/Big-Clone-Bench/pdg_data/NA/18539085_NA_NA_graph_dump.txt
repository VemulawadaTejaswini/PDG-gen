Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ static void createCompleteXML(File file) [ CD ]
Line_2 $$ static void createCompleteXML(File file) -->Line_3 $$ FileInputStream fis = null[ CD ]
Line_2 $$ static void createCompleteXML(File file) -->Line_4 $$ FileOutputStream fos = null[ CD ]
Line_3 $$ FileInputStream fis = null-->Line_6 $$ fis = new FileInputStream(errorFile)[ FD ]
Line_6 $$ fis = new FileInputStream(errorFile)-->Line_6 $$ fis = new FileInputStream(errorFile)[ FD ]
Line_4 $$ FileOutputStream fos = null-->Line_7 $$ fos = new FileOutputStream(file)[ FD ]
Line_7 $$ fos = new FileOutputStream(file)-->Line_7 $$ fos = new FileOutputStream(file)[ FD ]
Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)-->Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)[ FD ]
Line_9 $$ int offset-->Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)[ FD ]
Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)-->Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)[ CD ]
Line_3 $$ FileInputStream fis = null-->Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)[ FD ]
Line_6 $$ fis = new FileInputStream(errorFile)-->Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)[ FD ]
Line_8 $$ byte[] data = new byte[Integer.parseInt(BlueXStatics.prop.getProperty("allocationUnit"))]-->Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)[ FD ]
Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)-->Line_10 $$ fos.write(data, 0, offset)[ CD ]
Line_4 $$ FileOutputStream fos = null-->Line_10 $$ fos.write(data, 0, offset)[ FD ]
Line_7 $$ fos = new FileOutputStream(file)-->Line_10 $$ fos.write(data, 0, offset)[ FD ]
Line_8 $$ byte[] data = new byte[Integer.parseInt(BlueXStatics.prop.getProperty("allocationUnit"))]-->Line_10 $$ fos.write(data, 0, offset)[ FD ]
Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)-->Line_10 $$ fos.write(data, 0, offset)[ FD ]
Line_9 $$ int offset-->Line_10 $$ fos.write(data, 0, offset)[ FD ]
Line_3 $$ FileInputStream fis = null-->Line_15 $$ fis.close()[ FD ]
Line_6 $$ fis = new FileInputStream(errorFile)-->Line_15 $$ fis.close()[ FD ]
Line_4 $$ FileOutputStream fos = null-->Line_19 $$ fos.close()[ FD ]
Line_7 $$ fos = new FileOutputStream(file)-->Line_19 $$ fos.close()[ FD ]
Line_2 $$ static void createCompleteXML(File file) -->Line_23 $$ FileWriter fw = null[ CD ]
Line_23 $$ FileWriter fw = null-->Line_25 $$ fw = new FileWriter(file, true)[ FD ]
Line_25 $$ fw = new FileWriter(file, true)-->Line_25 $$ fw = new FileWriter(file, true)[ FD ]
Line_23 $$ FileWriter fw = null-->Line_26 $$ fw.append("</detail>")[ FD ]
Line_25 $$ fw = new FileWriter(file, true)-->Line_26 $$ fw.append("</detail>")[ FD ]
Line_23 $$ FileWriter fw = null-->Line_27 $$ fw.append("\n</exception>")[ FD ]
Line_25 $$ fw = new FileWriter(file, true)-->Line_27 $$ fw.append("\n</exception>")[ FD ]
Line_23 $$ FileWriter fw = null-->Line_28 $$ fw.append("\n</log>")[ FD ]
Line_25 $$ fw = new FileWriter(file, true)-->Line_28 $$ fw.append("\n</log>")[ FD ]
Line_23 $$ FileWriter fw = null-->Line_33 $$ fw.close()[ FD ]
Line_25 $$ fw = new FileWriter(file, true)-->Line_33 $$ fw.close()[ FD ]
Line_10 $$ while ((offset = fis.read(data)) != -1) fos.write(data, 0, offset)-->Line_10 $$ fos.write(data, 0, offset)[ FD ]
