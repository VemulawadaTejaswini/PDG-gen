Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) [ CD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_3 $$ in = new BufferedInputStream(in)[ CD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_3 $$ in = new BufferedInputStream(in)[ FD ]
Line_3 $$ in = new BufferedInputStream(in)-->Line_3 $$ in = new BufferedInputStream(in)[ FD ]
Line_7 $$ if (ext.toLowerCase().equals("docx")) -->Line_7 $$ if (ext.toLowerCase().equals("docx")) [ CD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_7 $$ if (ext.toLowerCase().equals("docx")) [ FD ]
Line_7 $$ if (ext.toLowerCase().equals("docx")) -->Line_8 $$ doc = new XWPFDocument(in)[ CD ]
Line_6 $$ POIXMLDocument doc-->Line_8 $$ doc = new XWPFDocument(in)[ FD ]
Line_8 $$ doc = new XWPFDocument(in)-->Line_8 $$ doc = new XWPFDocument(in)[ FD ]
Line_7 $$ if (ext.toLowerCase().equals("docx")) -->Line_9 $$ if (ext.toLowerCase().equals("xlsx")) [ CD ]
Line_9 $$ if (ext.toLowerCase().equals("xlsx")) -->Line_9 $$ if (ext.toLowerCase().equals("xlsx")) [ CD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_9 $$ if (ext.toLowerCase().equals("xlsx")) [ FD ]
Line_9 $$ if (ext.toLowerCase().equals("xlsx")) -->Line_10 $$ doc = new XSSFWorkbook(in)[ CD ]
Line_6 $$ POIXMLDocument doc-->Line_10 $$ doc = new XSSFWorkbook(in)[ FD ]
Line_8 $$ doc = new XWPFDocument(in)-->Line_10 $$ doc = new XSSFWorkbook(in)[ FD ]
Line_10 $$ doc = new XSSFWorkbook(in)-->Line_10 $$ doc = new XSSFWorkbook(in)[ FD ]
Line_9 $$ if (ext.toLowerCase().equals("xlsx")) -->Line_11 $$ if (ext.toLowerCase().equals("pptx")) [ CD ]
Line_11 $$ if (ext.toLowerCase().equals("pptx")) -->Line_11 $$ if (ext.toLowerCase().equals("pptx")) [ CD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_11 $$ if (ext.toLowerCase().equals("pptx")) [ FD ]
Line_11 $$ if (ext.toLowerCase().equals("pptx")) -->Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")[ CD ]
Line_5 $$ File tempPptx = null-->Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")[ FD ]
Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")-->Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")[ FD ]
Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")-->Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")[ CD ]
Line_11 $$ if (ext.toLowerCase().equals("pptx")) -->Line_13 $$ OutputStream tempPptxOut = new FileOutputStream(tempPptx)[ CD ]
Line_11 $$ if (ext.toLowerCase().equals("pptx")) -->Line_14 $$ tempPptxOut = new BufferedOutputStream(tempPptxOut)[ CD ]
Line_13 $$ OutputStream tempPptxOut = new FileOutputStream(tempPptx)-->Line_14 $$ tempPptxOut = new BufferedOutputStream(tempPptxOut)[ FD ]
Line_14 $$ tempPptxOut = new BufferedOutputStream(tempPptxOut)-->Line_14 $$ tempPptxOut = new BufferedOutputStream(tempPptxOut)[ FD ]
Line_11 $$ if (ext.toLowerCase().equals("pptx")) -->Line_15 $$ IOUtils.copy(in, tempPptxOut)[ CD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_15 $$ IOUtils.copy(in, tempPptxOut)[ FD ]
Line_3 $$ in = new BufferedInputStream(in)-->Line_15 $$ IOUtils.copy(in, tempPptxOut)[ FD ]
Line_13 $$ OutputStream tempPptxOut = new FileOutputStream(tempPptx)-->Line_15 $$ IOUtils.copy(in, tempPptxOut)[ FD ]
Line_14 $$ tempPptxOut = new BufferedOutputStream(tempPptxOut)-->Line_15 $$ IOUtils.copy(in, tempPptxOut)[ FD ]
Line_11 $$ if (ext.toLowerCase().equals("pptx")) -->Line_16 $$ tempPptxOut.close()[ CD ]
Line_13 $$ OutputStream tempPptxOut = new FileOutputStream(tempPptx)-->Line_16 $$ tempPptxOut.close()[ FD ]
Line_14 $$ tempPptxOut = new BufferedOutputStream(tempPptxOut)-->Line_16 $$ tempPptxOut.close()[ FD ]
Line_11 $$ if (ext.toLowerCase().equals("pptx")) -->Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())[ CD ]
Line_6 $$ POIXMLDocument doc-->Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())[ FD ]
Line_8 $$ doc = new XWPFDocument(in)-->Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())[ FD ]
Line_10 $$ doc = new XSSFWorkbook(in)-->Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())[ FD ]
Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())-->Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())[ FD ]
Line_5 $$ File tempPptx = null-->Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())[ FD ]
Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")-->Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())[ FD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) [ FD ]
Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()-->Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()[ CD ]
Line_6 $$ POIXMLDocument doc-->Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()[ FD ]
Line_8 $$ doc = new XWPFDocument(in)-->Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()[ FD ]
Line_10 $$ doc = new XSSFWorkbook(in)-->Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()[ FD ]
Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())-->Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()[ FD ]
Line_23 $$ if (property.getKey().equals(Metadata.TITLE)) -->Line_23 $$ if (property.getKey().equals(Metadata.TITLE)) [ CD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_23 $$ if (property.getKey().equals(Metadata.TITLE)) [ FD ]
Line_23 $$ if (property.getKey().equals(Metadata.TITLE)) -->Line_24 $$ coreProperties.setTitle(property.getValue())[ CD ]
Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()-->Line_24 $$ coreProperties.setTitle(property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_24 $$ coreProperties.setTitle(property.getValue())[ FD ]
Line_23 $$ if (property.getKey().equals(Metadata.TITLE)) -->Line_25 $$ if (property.getKey().equals(Metadata.AUTHOR)) [ CD ]
Line_25 $$ if (property.getKey().equals(Metadata.AUTHOR)) -->Line_25 $$ if (property.getKey().equals(Metadata.AUTHOR)) [ CD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_25 $$ if (property.getKey().equals(Metadata.AUTHOR)) [ FD ]
Line_25 $$ if (property.getKey().equals(Metadata.AUTHOR)) -->Line_26 $$ coreProperties.setCreator(property.getValue())[ CD ]
Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()-->Line_26 $$ coreProperties.setCreator(property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_26 $$ coreProperties.setCreator(property.getValue())[ FD ]
Line_25 $$ if (property.getKey().equals(Metadata.AUTHOR)) -->Line_27 $$ if (property.getKey().equals(Metadata.KEYWORDS)) [ CD ]
Line_27 $$ if (property.getKey().equals(Metadata.KEYWORDS)) -->Line_27 $$ if (property.getKey().equals(Metadata.KEYWORDS)) [ CD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_27 $$ if (property.getKey().equals(Metadata.KEYWORDS)) [ FD ]
Line_27 $$ if (property.getKey().equals(Metadata.KEYWORDS)) -->Line_28 $$ coreProperties.getUnderlyingProperties().setKeywordsProperty(property.getValue())[ CD ]
Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()-->Line_28 $$ coreProperties.getUnderlyingProperties().setKeywordsProperty(property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_28 $$ coreProperties.getUnderlyingProperties().setKeywordsProperty(property.getValue())[ FD ]
Line_27 $$ if (property.getKey().equals(Metadata.KEYWORDS)) -->Line_29 $$ if (property.getKey().equals(Metadata.COMMENTS)) [ CD ]
Line_29 $$ if (property.getKey().equals(Metadata.COMMENTS)) -->Line_29 $$ if (property.getKey().equals(Metadata.COMMENTS)) [ CD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_29 $$ if (property.getKey().equals(Metadata.COMMENTS)) [ FD ]
Line_29 $$ if (property.getKey().equals(Metadata.COMMENTS)) -->Line_30 $$ coreProperties.setDescription(property.getValue())[ CD ]
Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()-->Line_30 $$ coreProperties.setDescription(property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_30 $$ coreProperties.setDescription(property.getValue())[ FD ]
Line_29 $$ if (property.getKey().equals(Metadata.COMMENTS)) -->Line_31 $$ if (property.getKey().equals(Metadata.SUBJECT)) [ CD ]
Line_31 $$ if (property.getKey().equals(Metadata.SUBJECT)) -->Line_31 $$ if (property.getKey().equals(Metadata.SUBJECT)) [ CD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_31 $$ if (property.getKey().equals(Metadata.SUBJECT)) [ FD ]
Line_31 $$ if (property.getKey().equals(Metadata.SUBJECT)) -->Line_32 $$ coreProperties.setSubjectProperty(property.getValue())[ CD ]
Line_22 $$ CoreProperties coreProperties = doc.getProperties().getCoreProperties()-->Line_32 $$ coreProperties.setSubjectProperty(property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_32 $$ coreProperties.setSubjectProperty(property.getValue())[ FD ]
Line_31 $$ if (property.getKey().equals(Metadata.SUBJECT)) -->Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) [ CD ]
Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) -->Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) [ CD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) [ FD ]
Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) -->Line_34 $$ doc.getProperties().getExtendedProperties().getUnderlyingProperties().setCompany(property.getValue())[ CD ]
Line_6 $$ POIXMLDocument doc-->Line_34 $$ doc.getProperties().getExtendedProperties().getUnderlyingProperties().setCompany(property.getValue())[ FD ]
Line_8 $$ doc = new XWPFDocument(in)-->Line_34 $$ doc.getProperties().getExtendedProperties().getUnderlyingProperties().setCompany(property.getValue())[ FD ]
Line_10 $$ doc = new XSSFWorkbook(in)-->Line_34 $$ doc.getProperties().getExtendedProperties().getUnderlyingProperties().setCompany(property.getValue())[ FD ]
Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())-->Line_34 $$ doc.getProperties().getExtendedProperties().getUnderlyingProperties().setCompany(property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_34 $$ doc.getProperties().getExtendedProperties().getUnderlyingProperties().setCompany(property.getValue())[ FD ]
Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) -->Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()[ CD ]
Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()-->Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()[ CD ]
Line_6 $$ POIXMLDocument doc-->Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()[ FD ]
Line_8 $$ doc = new XWPFDocument(in)-->Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()[ FD ]
Line_10 $$ doc = new XSSFWorkbook(in)-->Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()[ FD ]
Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())-->Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()[ FD ]
Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) -->Line_37 $$ if (customProperties.contains(property.getKey())) [ CD ]
Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()-->Line_37 $$ if (customProperties.contains(property.getKey())) [ FD ]
Line_37 $$ if (customProperties.contains(property.getKey())) -->Line_37 $$ if (customProperties.contains(property.getKey())) [ CD ]
Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()-->Line_37 $$ if (customProperties.contains(property.getKey())) [ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_37 $$ if (customProperties.contains(property.getKey())) [ FD ]
Line_37 $$ if (customProperties.contains(property.getKey())) -->Line_38 $$ int index = 0[ CD ]
Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()-->Line_39 $$ for (CTProperty prop : customProperties.getUnderlyingProperties().getPropertyArray()) [ FD ]
Line_40 $$ if (prop.getName().equals(property.getKey())) -->Line_40 $$ if (prop.getName().equals(property.getKey())) [ CD ]
Line_39 $$ for (CTProperty prop : customProperties.getUnderlyingProperties().getPropertyArray()) -->Line_40 $$ if (prop.getName().equals(property.getKey())) [ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_40 $$ if (prop.getName().equals(property.getKey())) [ FD ]
Line_40 $$ if (prop.getName().equals(property.getKey())) -->Line_41 $$ customProperties.getUnderlyingProperties().removeProperty(index)[ CD ]
Line_38 $$ int index = 0-->Line_41 $$ customProperties.getUnderlyingProperties().removeProperty(index)[ FD ]
Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()-->Line_41 $$ customProperties.getUnderlyingProperties().removeProperty(index)[ FD ]
Line_38 $$ int index = 0-->Line_44 $$ index++[ FD ]
Line_33 $$ if (property.getKey().equals(Metadata.COMPANY)) -->Line_47 $$ customProperties.addProperty(property.getKey(), property.getValue())[ CD ]
Line_36 $$ org.apache.poi.POIXMLProperties.CustomProperties customProperties = doc.getProperties().getCustomProperties()-->Line_47 $$ customProperties.addProperty(property.getKey(), property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_47 $$ customProperties.addProperty(property.getKey(), property.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> property : properties.entrySet()) -->Line_47 $$ customProperties.addProperty(property.getKey(), property.getValue())[ FD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_50 $$ in.close()[ FD ]
Line_3 $$ in = new BufferedInputStream(in)-->Line_50 $$ in.close()[ FD ]
Line_51 $$ File tempOpenXMLDocumentFile = File.createTempFile("temp", "tmp")-->Line_51 $$ File tempOpenXMLDocumentFile = File.createTempFile("temp", "tmp")[ CD ]
Line_52 $$ OutputStream tempOpenXMLDocumentOut = new FileOutputStream(tempOpenXMLDocumentFile)-->Line_53 $$ tempOpenXMLDocumentOut = new BufferedOutputStream(tempOpenXMLDocumentOut)[ FD ]
Line_53 $$ tempOpenXMLDocumentOut = new BufferedOutputStream(tempOpenXMLDocumentOut)-->Line_53 $$ tempOpenXMLDocumentOut = new BufferedOutputStream(tempOpenXMLDocumentOut)[ FD ]
Line_6 $$ POIXMLDocument doc-->Line_54 $$ doc.write(tempOpenXMLDocumentOut)[ FD ]
Line_8 $$ doc = new XWPFDocument(in)-->Line_54 $$ doc.write(tempOpenXMLDocumentOut)[ FD ]
Line_10 $$ doc = new XSSFWorkbook(in)-->Line_54 $$ doc.write(tempOpenXMLDocumentOut)[ FD ]
Line_17 $$ doc = new XSLFSlideShow(tempPptx.getAbsolutePath())-->Line_54 $$ doc.write(tempOpenXMLDocumentOut)[ FD ]
Line_52 $$ OutputStream tempOpenXMLDocumentOut = new FileOutputStream(tempOpenXMLDocumentFile)-->Line_54 $$ doc.write(tempOpenXMLDocumentOut)[ FD ]
Line_53 $$ tempOpenXMLDocumentOut = new BufferedOutputStream(tempOpenXMLDocumentOut)-->Line_54 $$ doc.write(tempOpenXMLDocumentOut)[ FD ]
Line_52 $$ OutputStream tempOpenXMLDocumentOut = new FileOutputStream(tempOpenXMLDocumentFile)-->Line_55 $$ tempOpenXMLDocumentOut.close()[ FD ]
Line_53 $$ tempOpenXMLDocumentOut = new BufferedOutputStream(tempOpenXMLDocumentOut)-->Line_55 $$ tempOpenXMLDocumentOut.close()[ FD ]
Line_56 $$ long length = tempOpenXMLDocumentFile.length()-->Line_56 $$ long length = tempOpenXMLDocumentFile.length()[ CD ]
Line_51 $$ File tempOpenXMLDocumentFile = File.createTempFile("temp", "tmp")-->Line_56 $$ long length = tempOpenXMLDocumentFile.length()[ FD ]
Line_57 $$ InputStream tempOpenXMLDocumentIn = new FileInputStream(tempOpenXMLDocumentFile)-->Line_58 $$ tempOpenXMLDocumentIn = new BufferedInputStream(tempOpenXMLDocumentIn)[ FD ]
Line_58 $$ tempOpenXMLDocumentIn = new BufferedInputStream(tempOpenXMLDocumentIn)-->Line_58 $$ tempOpenXMLDocumentIn = new BufferedInputStream(tempOpenXMLDocumentIn)[ FD ]
Line_59 $$ OutputStream out = null-->Line_61 $$ out = outProvider.getOutputStream()[ FD ]
Line_61 $$ out = outProvider.getOutputStream()-->Line_61 $$ out = outProvider.getOutputStream()[ FD ]
Line_61 $$ out = outProvider.getOutputStream()-->Line_61 $$ out = outProvider.getOutputStream()[ CD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_61 $$ out = outProvider.getOutputStream()[ FD ]
Line_59 $$ OutputStream out = null-->Line_62 $$ out = new BufferedOutputStream(out)[ FD ]
Line_61 $$ out = outProvider.getOutputStream()-->Line_62 $$ out = new BufferedOutputStream(out)[ FD ]
Line_62 $$ out = new BufferedOutputStream(out)-->Line_62 $$ out = new BufferedOutputStream(out)[ FD ]
Line_57 $$ InputStream tempOpenXMLDocumentIn = new FileInputStream(tempOpenXMLDocumentFile)-->Line_63 $$ IOUtils.copy(tempOpenXMLDocumentIn, out)[ FD ]
Line_58 $$ tempOpenXMLDocumentIn = new BufferedInputStream(tempOpenXMLDocumentIn)-->Line_63 $$ IOUtils.copy(tempOpenXMLDocumentIn, out)[ FD ]
Line_59 $$ OutputStream out = null-->Line_63 $$ IOUtils.copy(tempOpenXMLDocumentIn, out)[ FD ]
Line_61 $$ out = outProvider.getOutputStream()-->Line_63 $$ IOUtils.copy(tempOpenXMLDocumentIn, out)[ FD ]
Line_62 $$ out = new BufferedOutputStream(out)-->Line_63 $$ IOUtils.copy(tempOpenXMLDocumentIn, out)[ FD ]
Line_59 $$ OutputStream out = null-->Line_64 $$ out.flush()[ FD ]
Line_61 $$ out = outProvider.getOutputStream()-->Line_64 $$ out.flush()[ FD ]
Line_62 $$ out = new BufferedOutputStream(out)-->Line_64 $$ out.flush()[ FD ]
Line_59 $$ OutputStream out = null-->Line_66 $$ IOUtils.closeQuietly(out)[ FD ]
Line_61 $$ out = outProvider.getOutputStream()-->Line_66 $$ IOUtils.closeQuietly(out)[ FD ]
Line_62 $$ out = new BufferedOutputStream(out)-->Line_66 $$ IOUtils.closeQuietly(out)[ FD ]
Line_68 $$ if (!FileUtils.deleteQuietly(tempOpenXMLDocumentFile)) -->Line_68 $$ if (!FileUtils.deleteQuietly(tempOpenXMLDocumentFile)) [ CD ]
Line_68 $$ if (!FileUtils.deleteQuietly(tempOpenXMLDocumentFile)) -->Line_68 $$ if (!FileUtils.deleteQuietly(tempOpenXMLDocumentFile)) [ CD ]
Line_51 $$ File tempOpenXMLDocumentFile = File.createTempFile("temp", "tmp")-->Line_68 $$ if (!FileUtils.deleteQuietly(tempOpenXMLDocumentFile)) [ FD ]
Line_68 $$ if (!FileUtils.deleteQuietly(tempOpenXMLDocumentFile)) -->Line_69 $$ tempOpenXMLDocumentFile.deleteOnExit()[ CD ]
Line_51 $$ File tempOpenXMLDocumentFile = File.createTempFile("temp", "tmp")-->Line_69 $$ tempOpenXMLDocumentFile.deleteOnExit()[ FD ]
Line_71 $$ if (tempPptx != null && !FileUtils.deleteQuietly(tempPptx)) -->Line_71 $$ if (tempPptx != null && !FileUtils.deleteQuietly(tempPptx)) [ CD ]
Line_5 $$ File tempPptx = null-->Line_71 $$ if (tempPptx != null && !FileUtils.deleteQuietly(tempPptx)) [ FD ]
Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")-->Line_71 $$ if (tempPptx != null && !FileUtils.deleteQuietly(tempPptx)) [ FD ]
Line_71 $$ if (tempPptx != null && !FileUtils.deleteQuietly(tempPptx)) -->Line_72 $$ tempPptx.deleteOnExit()[ CD ]
Line_5 $$ File tempPptx = null-->Line_72 $$ tempPptx.deleteOnExit()[ FD ]
Line_12 $$ tempPptx = File.createTempFile("temp", "pptx")-->Line_72 $$ tempPptx.deleteOnExit()[ FD ]
Line_2 $$ public static long writePropertiesInOpenXMLDocument(String ext, InputStream in, OutputStreamProvider outProvider, Map<String, String> properties) -->Line_84 $$ IOUtils.closeQuietly(in)[ FD ]
Line_3 $$ in = new BufferedInputStream(in)-->Line_84 $$ IOUtils.closeQuietly(in)[ FD ]
