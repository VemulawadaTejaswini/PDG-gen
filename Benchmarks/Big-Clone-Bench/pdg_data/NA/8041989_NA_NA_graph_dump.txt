Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException [ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_3 $$ String requestURI = req.getRequestURI()[ CD ]
Line_3 $$ String requestURI = req.getRequestURI()-->Line_3 $$ String requestURI = req.getRequestURI()[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_3 $$ String requestURI = req.getRequestURI()[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_4 $$ logger.info("The requested URI: [ CD ]
Line_3 $$ String requestURI = req.getRequestURI()-->Line_4 $$ logger.info("The requested URI: [ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)[ CD ]
Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)-->Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)[ CD ]
Line_3 $$ String requestURI = req.getRequestURI()-->Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)[ FD ]
Line_3 $$ String requestURI = req.getRequestURI()-->Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_6 $$ int signIndex = parameter.indexOf(StringUtil.ARXIVID_SEGMENTID_DELIMITER)[ CD ]
Line_6 $$ int signIndex = parameter.indexOf(StringUtil.ARXIVID_SEGMENTID_DELIMITER)-->Line_6 $$ int signIndex = parameter.indexOf(StringUtil.ARXIVID_SEGMENTID_DELIMITER)[ CD ]
Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)-->Line_6 $$ int signIndex = parameter.indexOf(StringUtil.ARXIVID_SEGMENTID_DELIMITER)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter[ CD ]
Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)-->Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter[ FD ]
Line_6 $$ int signIndex = parameter.indexOf(StringUtil.ARXIVID_SEGMENTID_DELIMITER)-->Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_8 $$ String segmentId = signIndex != -1 ? parameter.substring(signIndex + 1) : null[ CD ]
Line_5 $$ String parameter = requestURI.substring(requestURI.lastIndexOf(ARXIVID_ENTRY) + ARXIVID_ENTRY_LENGTH)-->Line_8 $$ String segmentId = signIndex != -1 ? parameter.substring(signIndex + 1) : null[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_9 $$ if (arxivId == null) [ CD ]
Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter-->Line_9 $$ if (arxivId == null) [ FD ]
Line_9 $$ if (arxivId == null) -->Line_10 $$ logger.error("The request with an empty arxiv id parameter")[ CD ]
Line_9 $$ if (arxivId == null) -->Line_11 $$ return[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_13 $$ String filePath = segmentId == null ? format("/opt/mocassin/aux-pdf/%s" + StringUtil.arxivid2filename(arxivId, "pdf")) : "/opt/mocassin/pdf/" + StringUtil.segmentid2filename(arxivId, Integer.parseInt(segmentId), "pdf")[ CD ]
Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter-->Line_13 $$ String filePath = segmentId == null ? format("/opt/mocassin/aux-pdf/%s" + StringUtil.arxivid2filename(arxivId, "pdf")) : "/opt/mocassin/pdf/" + StringUtil.segmentid2filename(arxivId, Integer.parseInt(segmentId), "pdf")[ FD ]
Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter-->Line_13 $$ String filePath = segmentId == null ? format("/opt/mocassin/aux-pdf/%s" + StringUtil.arxivid2filename(arxivId, "pdf")) : "/opt/mocassin/pdf/" + StringUtil.segmentid2filename(arxivId, Integer.parseInt(segmentId), "pdf")[ FD ]
Line_8 $$ String segmentId = signIndex != -1 ? parameter.substring(signIndex + 1) : null-->Line_13 $$ String filePath = segmentId == null ? format("/opt/mocassin/aux-pdf/%s" + StringUtil.arxivid2filename(arxivId, "pdf")) : "/opt/mocassin/pdf/" + StringUtil.segmentid2filename(arxivId, Integer.parseInt(segmentId), "pdf")[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_14 $$ if (!new File(filePath).exists()) [ CD ]
Line_14 $$ if (!new File(filePath).exists()) -->Line_14 $$ if (!new File(filePath).exists()) [ CD ]
Line_14 $$ if (!new File(filePath).exists()) -->Line_14 $$ if (!new File(filePath).exists()) [ CD ]
Line_14 $$ if (!new File(filePath).exists()) -->Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))[ CD ]
Line_13 $$ String filePath = segmentId == null ? format("/opt/mocassin/aux-pdf/%s" + StringUtil.arxivid2filename(arxivId, "pdf")) : "/opt/mocassin/pdf/" + StringUtil.segmentid2filename(arxivId, Integer.parseInt(segmentId), "pdf")-->Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))[ FD ]
Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))-->Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))[ FD ]
Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))-->Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))[ CD ]
Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter-->Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))[ FD ]
Line_18 $$ FileInputStream fileInputStream = new FileInputStream(filePath)-->Line_20 $$ IOUtils.copy(fileInputStream, byteArrayOutputStream)[ FD ]
Line_19 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()-->Line_20 $$ IOUtils.copy(fileInputStream, byteArrayOutputStream)[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_21 $$ resp.setContentType("application/pdf")[ FD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_22 $$ resp.setHeader("Content-disposition", String.format("attachment; filename=%s", StringUtil.arxivid2filename(arxivId, "pdf")))[ FD ]
Line_7 $$ String arxivId = signIndex != -1 ? parameter.substring(0, signIndex) : parameter-->Line_22 $$ resp.setHeader("Content-disposition", String.format("attachment; filename=%s", StringUtil.arxivid2filename(arxivId, "pdf")))[ FD ]
Line_23 $$ ServletOutputStream outputStream = resp.getOutputStream()-->Line_23 $$ ServletOutputStream outputStream = resp.getOutputStream()[ CD ]
Line_2 $$ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException -->Line_23 $$ ServletOutputStream outputStream = resp.getOutputStream()[ FD ]
Line_23 $$ ServletOutputStream outputStream = resp.getOutputStream()-->Line_24 $$ outputStream.write(byteArrayOutputStream.toByteArray())[ FD ]
Line_19 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()-->Line_24 $$ outputStream.write(byteArrayOutputStream.toByteArray())[ FD ]
Line_23 $$ ServletOutputStream outputStream = resp.getOutputStream()-->Line_25 $$ outputStream.close()[ FD ]
Line_13 $$ String filePath = segmentId == null ? format("/opt/mocassin/aux-pdf/%s" + StringUtil.arxivid2filename(arxivId, "pdf")) : "/opt/mocassin/pdf/" + StringUtil.segmentid2filename(arxivId, Integer.parseInt(segmentId), "pdf")-->Line_27 $$ logger.error("Error while downloading: PDF file= '[ FD ]
Line_15 $$ filePath = format("/opt/mocassin/aux-pdf/%s", StringUtil.arxivid2filename(arxivId, "pdf"))-->Line_27 $$ logger.error("Error while downloading: PDF file= '[ FD ]
