Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) [ CD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)[ CD ]
Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)-->Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)[ CD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)[ FD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)[ FD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_4 $$ StringBuffer result = new StringBuffer()[ CD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_5 $$ while (matcher.find()) [ CD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) [ CD ]
Line_5 $$ while (matcher.find()) -->Line_5 $$ while (matcher.find()) [ CD ]
Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)-->Line_5 $$ while (matcher.find()) [ FD ]
Line_5 $$ while (matcher.find()) -->Line_6 $$ String protectedMarkup = matcher.group()[ CD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_6 $$ String protectedMarkup = matcher.group()[ CD ]
Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)-->Line_6 $$ String protectedMarkup = matcher.group()[ FD ]
Line_5 $$ while (matcher.find()) -->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ CD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ CD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")[ CD ]
Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_10 $$ digest.reset()[ FD ]
Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_11 $$ digest.update(protectedMarkup.getBytes("UTF-8"))[ FD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_11 $$ digest.update(protectedMarkup.getBytes("UTF-8"))[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_11 $$ digest.update(protectedMarkup.getBytes("UTF-8"))[ FD ]
Line_12 $$ String hash = bytesToHash(digest.digest())-->Line_12 $$ String hash = bytesToHash(digest.digest())[ CD ]
Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_12 $$ String hash = bytesToHash(digest.digest())[ FD ]
Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)-->Line_13 $$ matcher.appendReplacement(result, hash)[ FD ]
Line_4 $$ StringBuffer result = new StringBuffer()-->Line_13 $$ matcher.appendReplacement(result, hash)[ FD ]
Line_12 $$ String hash = bytesToHash(digest.digest())-->Line_13 $$ matcher.appendReplacement(result, hash)[ FD ]
Line_12 $$ String hash = bytesToHash(digest.digest())-->Line_14 $$ c_protectionMap.put(hash, protectedMarkup)[ FD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_14 $$ c_protectionMap.put(hash, protectedMarkup)[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_14 $$ c_protectionMap.put(hash, protectedMarkup)[ FD ]
Line_12 $$ String hash = bytesToHash(digest.digest())-->Line_15 $$ m_hashList.add(hash)[ FD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_22 $$ matcher.appendTail(result)[ CD ]
Line_3 $$ Matcher matcher = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL).matcher(content)-->Line_22 $$ matcher.appendTail(result)[ FD ]
Line_4 $$ StringBuffer result = new StringBuffer()-->Line_22 $$ matcher.appendTail(result)[ FD ]
Line_2 $$ private String protectMarkup(String content, String markupRegex, String replaceSource, String replaceTarget) -->Line_23 $$ return result.toString()[ CD ]
Line_23 $$ return result.toString()-->Line_23 $$ return result.toString()[ CD ]
Line_4 $$ StringBuffer result = new StringBuffer()-->Line_23 $$ return result.toString()[ FD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)[ FD ]
Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_10 $$ digest.reset()[ FD ]
Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_11 $$ digest.update(protectedMarkup.getBytes("UTF-8"))[ FD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_11 $$ digest.update(protectedMarkup.getBytes("UTF-8"))[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_11 $$ digest.update(protectedMarkup.getBytes("UTF-8"))[ FD ]
Line_9 $$ MessageDigest digest = MessageDigest.getInstance("MD5")-->Line_12 $$ String hash = bytesToHash(digest.digest())[ FD ]
Line_12 $$ String hash = bytesToHash(digest.digest())-->Line_13 $$ matcher.appendReplacement(result, hash)[ FD ]
Line_12 $$ String hash = bytesToHash(digest.digest())-->Line_14 $$ c_protectionMap.put(hash, protectedMarkup)[ FD ]
Line_6 $$ String protectedMarkup = matcher.group()-->Line_14 $$ c_protectionMap.put(hash, protectedMarkup)[ FD ]
Line_7 $$ protectedMarkup = protectedMarkup.replaceAll(replaceSource, replaceTarget)-->Line_14 $$ c_protectionMap.put(hash, protectedMarkup)[ FD ]
Line_12 $$ String hash = bytesToHash(digest.digest())-->Line_15 $$ m_hashList.add(hash)[ FD ]
