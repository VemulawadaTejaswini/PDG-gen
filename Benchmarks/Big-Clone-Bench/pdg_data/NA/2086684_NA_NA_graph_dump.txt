Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private BoardPattern[] getBoardPatterns() [ CD ]
Line_2 $$ private BoardPattern[] getBoardPatterns() -->Line_3 $$ Resource[] resources = boardManager.getResources("boards")[ CD ]
Line_3 $$ Resource[] resources = boardManager.getResources("boards")-->Line_3 $$ Resource[] resources = boardManager.getResources("boards")[ CD ]
Line_2 $$ private BoardPattern[] getBoardPatterns() -->Line_4 $$ BoardPattern[] boardPatterns = new BoardPattern[resources.length][ CD ]
Line_2 $$ private BoardPattern[] getBoardPatterns() -->Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i][ CD ]
Line_2 $$ private BoardPattern[] getBoardPatterns() -->Line_2 $$ private BoardPattern[] getBoardPatterns() [ CD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i][ CD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i][ CD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i][ FD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_5 $$ boardPatterns[i] = (BoardPattern) resources[i][ CD ]
Line_2 $$ private BoardPattern[] getBoardPatterns() -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ CD ]
Line_2 $$ private BoardPattern[] getBoardPatterns() -->Line_2 $$ private BoardPattern[] getBoardPatterns() [ CD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_6 $$ for (int i = 0; i < resources.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ CD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ FD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_6 $$ for (int i = 0; i < resources.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) [ CD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ CD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) [ CD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) [ CD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) [ FD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_8 $$ String name1 = boardPatterns[j].getName()[ CD ]
Line_8 $$ String name1 = boardPatterns[j].getName()-->Line_8 $$ String name1 = boardPatterns[j].getName()[ CD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_9 $$ String name2 = boardPatterns[j + 1].getName()[ CD ]
Line_9 $$ String name2 = boardPatterns[j + 1].getName()-->Line_9 $$ String name2 = boardPatterns[j + 1].getName()[ CD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_10 $$ if (name1.compareTo(name2) > 0) [ CD ]
Line_8 $$ String name1 = boardPatterns[j].getName()-->Line_10 $$ if (name1.compareTo(name2) > 0) [ FD ]
Line_9 $$ String name2 = boardPatterns[j + 1].getName()-->Line_10 $$ if (name1.compareTo(name2) > 0) [ FD ]
Line_10 $$ if (name1.compareTo(name2) > 0) -->Line_11 $$ BoardPattern tmp = boardPatterns[j][ CD ]
Line_10 $$ if (name1.compareTo(name2) > 0) -->Line_12 $$ boardPatterns[j] = boardPatterns[j + 1][ CD ]
Line_10 $$ if (name1.compareTo(name2) > 0) -->Line_13 $$ boardPatterns[j + 1] = tmp[ CD ]
Line_11 $$ BoardPattern tmp = boardPatterns[j]-->Line_13 $$ boardPatterns[j + 1] = tmp[ FD ]
Line_2 $$ private BoardPattern[] getBoardPatterns() -->Line_17 $$ return boardPatterns[ CD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i][ FD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i][ FD ]
Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i]-->Line_5 $$ for (int i = 0; i < resources.length; i++) boardPatterns[i] = (BoardPattern) resources[i][ FD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ FD ]
Line_6 $$ for (int i = 0; i < resources.length; i++) -->Line_6 $$ for (int i = 0; i < resources.length; i++) [ FD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) [ FD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) [ FD ]
Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) -->Line_7 $$ for (int j = 0; j < resources.length - (i + 1); j++) [ FD ]
Line_8 $$ String name1 = boardPatterns[j].getName()-->Line_10 $$ if (name1.compareTo(name2) > 0) [ FD ]
Line_9 $$ String name2 = boardPatterns[j + 1].getName()-->Line_10 $$ if (name1.compareTo(name2) > 0) [ FD ]
Line_11 $$ BoardPattern tmp = boardPatterns[j]-->Line_13 $$ boardPatterns[j + 1] = tmp[ FD ]
