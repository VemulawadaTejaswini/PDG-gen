Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException [ CD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_3 $$ if (!dir.isDirectory())[ CD ]
Line_3 $$ if (!dir.isDirectory())-->Line_3 $$ if (!dir.isDirectory())[ CD ]
Line_3 $$ if (!dir.isDirectory())-->Line_3 $$ if (!dir.isDirectory())[ CD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_3 $$ if (!dir.isDirectory())[ FD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_4 $$ String[] entries = dir.list()[ CD ]
Line_4 $$ String[] entries = dir.list()-->Line_4 $$ String[] entries = dir.list()[ CD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_4 $$ String[] entries = dir.list()[ FD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_5 $$ byte[] buffer = new byte[4096][ CD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_6 $$ int bytes_read[ CD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfile))[ CD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException [ CD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_9 $$ File f = new File(dir, entries[i])[ CD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_10 $$ if (f.isDirectory())[ CD ]
Line_9 $$ File f = new File(dir, entries[i])-->Line_10 $$ if (f.isDirectory())[ FD ]
Line_10 $$ if (f.isDirectory())-->Line_10 $$ if (f.isDirectory())[ CD ]
Line_9 $$ File f = new File(dir, entries[i])-->Line_10 $$ if (f.isDirectory())[ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_11 $$ FileInputStream in = new FileInputStream(f)[ CD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath())[ CD ]
Line_9 $$ File f = new File(dir, entries[i])-->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath())[ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_13 $$ out.putNextEntry(entry)[ CD ]
Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfile))-->Line_13 $$ out.putNextEntry(entry)[ FD ]
Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath())-->Line_13 $$ out.putNextEntry(entry)[ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)[ CD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ CD ]
Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)-->Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)[ FD ]
Line_6 $$ int bytes_read-->Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)[ FD ]
Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)-->Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)[ CD ]
Line_11 $$ FileInputStream in = new FileInputStream(f)-->Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)[ FD ]
Line_5 $$ byte[] buffer = new byte[4096]-->Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)[ FD ]
Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)-->Line_14 $$ out.write(buffer, 0, bytes_read)[ CD ]
Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfile))-->Line_14 $$ out.write(buffer, 0, bytes_read)[ FD ]
Line_5 $$ byte[] buffer = new byte[4096]-->Line_14 $$ out.write(buffer, 0, bytes_read)[ FD ]
Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)-->Line_14 $$ out.write(buffer, 0, bytes_read)[ FD ]
Line_6 $$ int bytes_read-->Line_14 $$ out.write(buffer, 0, bytes_read)[ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_15 $$ in.close()[ CD ]
Line_11 $$ FileInputStream in = new FileInputStream(f)-->Line_15 $$ in.close()[ FD ]
Line_2 $$ protected void zipDirectory(File dir, File zipfile) throws IOException, IllegalArgumentException -->Line_17 $$ out.close()[ CD ]
Line_7 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipfile))-->Line_17 $$ out.close()[ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < entries.length; i++) -->Line_8 $$ for (int i = 0; i < entries.length; i++) [ FD ]
Line_9 $$ File f = new File(dir, entries[i])-->Line_10 $$ if (f.isDirectory())[ FD ]
Line_9 $$ File f = new File(dir, entries[i])-->Line_10 $$ if (f.isDirectory())[ FD ]
Line_9 $$ File f = new File(dir, entries[i])-->Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath())[ FD ]
Line_12 $$ ZipEntry entry = new ZipEntry(f.getPath())-->Line_13 $$ out.putNextEntry(entry)[ FD ]
Line_11 $$ FileInputStream in = new FileInputStream(f)-->Line_15 $$ in.close()[ FD ]
Line_14 $$ while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read)-->Line_14 $$ out.write(buffer, 0, bytes_read)[ FD ]
