Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testReadPerMemberSixSmall() throws IOException [ CD ]
Line_2 $$ public void testReadPerMemberSixSmall() throws IOException -->Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz))[ CD ]
Line_2 $$ public void testReadPerMemberSixSmall() throws IOException -->Line_4 $$ gzin.setEofEachMember(true)[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz))-->Line_4 $$ gzin.setEofEachMember(true)[ FD ]
Line_2 $$ public void testReadPerMemberSixSmall() throws IOException -->Line_5 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_2 $$ public void testReadPerMemberSixSmall() throws IOException -->Line_2 $$ public void testReadPerMemberSixSmall() throws IOException [ CD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_5 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_5 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_5 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_6 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_6 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())-->Line_6 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz))-->Line_6 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_7 $$ assertEquals("wrong 1-byte member count", 1, count2)[ CD ]
Line_6 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())-->Line_7 $$ assertEquals("wrong 1-byte member count", 1, count2)[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_8 $$ gzin.nextMember()[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz))-->Line_8 $$ gzin.nextMember()[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_9 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_9 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())-->Line_9 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz))-->Line_9 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_10 $$ assertEquals("wrong 5-byte member count", 5, count3)[ CD ]
Line_9 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())-->Line_10 $$ assertEquals("wrong 5-byte member count", 5, count3)[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_11 $$ gzin.nextMember()[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz))-->Line_11 $$ gzin.nextMember()[ FD ]
Line_2 $$ public void testReadPerMemberSixSmall() throws IOException -->Line_13 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_13 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())-->Line_13 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())[ CD ]
Line_3 $$ GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(sixsmall_gz))-->Line_13 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())[ FD ]
Line_2 $$ public void testReadPerMemberSixSmall() throws IOException -->Line_14 $$ assertEquals("wrong eof count", 0, countEnd)[ CD ]
Line_13 $$ int countEnd = IOUtils.copy(gzin, new NullOutputStream())-->Line_14 $$ assertEquals("wrong eof count", 0, countEnd)[ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_5 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_5 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_5 $$ for (int i = 0; i < 3; i++) -->Line_5 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_6 $$ int count2 = IOUtils.copy(gzin, new NullOutputStream())-->Line_7 $$ assertEquals("wrong 1-byte member count", 1, count2)[ FD ]
Line_9 $$ int count3 = IOUtils.copy(gzin, new NullOutputStream())-->Line_10 $$ assertEquals("wrong 5-byte member count", 5, count3)[ FD ]
