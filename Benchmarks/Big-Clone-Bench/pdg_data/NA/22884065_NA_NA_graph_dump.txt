Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testFidelity() throws ParserException, IOException [ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_3 $$ Lexer lexer[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_4 $$ Node node[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_5 $$ int position[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_6 $$ StringBuffer buffer[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_7 $$ String string[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_8 $$ char[] ref[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_9 $$ char[] test[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_10 $$ URL url = new URL("http://sourceforge.net")[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_11 $$ lexer = new Lexer(url.openConnection())[ CD ]
Line_3 $$ Lexer lexer-->Line_11 $$ lexer = new Lexer(url.openConnection())[ FD ]
Line_11 $$ lexer = new Lexer(url.openConnection())-->Line_11 $$ lexer = new Lexer(url.openConnection())[ FD ]
Line_10 $$ URL url = new URL("http://sourceforge.net")-->Line_11 $$ lexer = new Lexer(url.openConnection())[ FD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_12 $$ position = 0[ CD ]
Line_5 $$ int position-->Line_12 $$ position = 0[ FD ]
Line_12 $$ position = 0-->Line_12 $$ position = 0[ FD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_13 $$ buffer = new StringBuffer(80000)[ CD ]
Line_6 $$ StringBuffer buffer-->Line_13 $$ buffer = new StringBuffer(80000)[ FD ]
Line_13 $$ buffer = new StringBuffer(80000)-->Line_13 $$ buffer = new StringBuffer(80000)[ FD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_14 $$ while (null != (node = lexer.nextNode())) [ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_2 $$ public void testFidelity() throws ParserException, IOException [ CD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_14 $$ while (null != (node = lexer.nextNode())) [ FD ]
Line_4 $$ Node node-->Line_14 $$ while (null != (node = lexer.nextNode())) [ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_14 $$ while (null != (node = lexer.nextNode())) [ CD ]
Line_3 $$ Lexer lexer-->Line_14 $$ while (null != (node = lexer.nextNode())) [ FD ]
Line_11 $$ lexer = new Lexer(url.openConnection())-->Line_14 $$ while (null != (node = lexer.nextNode())) [ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_15 $$ string = node.toHtml()[ CD ]
Line_15 $$ string = node.toHtml()-->Line_15 $$ string = node.toHtml()[ FD ]
Line_7 $$ String string-->Line_15 $$ string = node.toHtml()[ FD ]
Line_15 $$ string = node.toHtml()-->Line_15 $$ string = node.toHtml()[ CD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_15 $$ string = node.toHtml()[ FD ]
Line_4 $$ Node node-->Line_15 $$ string = node.toHtml()[ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_16 $$ if (position != node.getStartPosition())[ CD ]
Line_5 $$ int position-->Line_16 $$ if (position != node.getStartPosition())[ FD ]
Line_12 $$ position = 0-->Line_16 $$ if (position != node.getStartPosition())[ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_16 $$ if (position != node.getStartPosition())[ FD ]
Line_4 $$ Node node-->Line_16 $$ if (position != node.getStartPosition())[ FD ]
Line_16 $$ if (position != node.getStartPosition())-->Line_16 $$ fail("non-contiguous" + string)[ CD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_17 $$ buffer.append(string)[ CD ]
Line_6 $$ StringBuffer buffer-->Line_17 $$ buffer.append(string)[ FD ]
Line_13 $$ buffer = new StringBuffer(80000)-->Line_17 $$ buffer.append(string)[ FD ]
Line_15 $$ string = node.toHtml()-->Line_17 $$ buffer.append(string)[ FD ]
Line_7 $$ String string-->Line_17 $$ buffer.append(string)[ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_18 $$ position = node.getEndPosition()[ CD ]
Line_18 $$ position = node.getEndPosition()-->Line_18 $$ position = node.getEndPosition()[ FD ]
Line_5 $$ int position-->Line_18 $$ position = node.getEndPosition()[ FD ]
Line_12 $$ position = 0-->Line_18 $$ position = node.getEndPosition()[ FD ]
Line_18 $$ position = node.getEndPosition()-->Line_18 $$ position = node.getEndPosition()[ CD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_18 $$ position = node.getEndPosition()[ FD ]
Line_4 $$ Node node-->Line_18 $$ position = node.getEndPosition()[ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_19 $$ if (buffer.length() != position)[ CD ]
Line_18 $$ position = node.getEndPosition()-->Line_19 $$ if (buffer.length() != position)[ FD ]
Line_5 $$ int position-->Line_19 $$ if (buffer.length() != position)[ FD ]
Line_12 $$ position = 0-->Line_19 $$ if (buffer.length() != position)[ FD ]
Line_6 $$ StringBuffer buffer-->Line_19 $$ if (buffer.length() != position)[ FD ]
Line_13 $$ buffer = new StringBuffer(80000)-->Line_19 $$ if (buffer.length() != position)[ FD ]
Line_19 $$ if (buffer.length() != position)-->Line_19 $$ fail("text length differed after encountering node " + string)[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_21 $$ ref = lexer.getPage().getText().toCharArray()[ CD ]
Line_8 $$ char[] ref-->Line_21 $$ ref = lexer.getPage().getText().toCharArray()[ FD ]
Line_21 $$ ref = lexer.getPage().getText().toCharArray()-->Line_21 $$ ref = lexer.getPage().getText().toCharArray()[ FD ]
Line_21 $$ ref = lexer.getPage().getText().toCharArray()-->Line_21 $$ ref = lexer.getPage().getText().toCharArray()[ CD ]
Line_3 $$ Lexer lexer-->Line_21 $$ ref = lexer.getPage().getText().toCharArray()[ FD ]
Line_11 $$ lexer = new Lexer(url.openConnection())-->Line_21 $$ ref = lexer.getPage().getText().toCharArray()[ FD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_22 $$ test = new char[buffer.length()][ CD ]
Line_9 $$ char[] test-->Line_22 $$ test = new char[buffer.length()][ FD ]
Line_22 $$ test = new char[buffer.length()]-->Line_22 $$ test = new char[buffer.length()][ FD ]
Line_6 $$ StringBuffer buffer-->Line_22 $$ test = new char[buffer.length()][ FD ]
Line_13 $$ buffer = new StringBuffer(80000)-->Line_22 $$ test = new char[buffer.length()][ FD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_23 $$ buffer.getChars(0, buffer.length(), test, 0)[ CD ]
Line_6 $$ StringBuffer buffer-->Line_23 $$ buffer.getChars(0, buffer.length(), test, 0)[ FD ]
Line_13 $$ buffer = new StringBuffer(80000)-->Line_23 $$ buffer.getChars(0, buffer.length(), test, 0)[ FD ]
Line_9 $$ char[] test-->Line_23 $$ buffer.getChars(0, buffer.length(), test, 0)[ FD ]
Line_22 $$ test = new char[buffer.length()]-->Line_23 $$ buffer.getChars(0, buffer.length(), test, 0)[ FD ]
Line_6 $$ StringBuffer buffer-->Line_23 $$ buffer.getChars(0, buffer.length(), test, 0)[ FD ]
Line_13 $$ buffer = new StringBuffer(80000)-->Line_23 $$ buffer.getChars(0, buffer.length(), test, 0)[ FD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_24 $$ assertEquals("different amounts of text", ref.length, test.length)[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])[ CD ]
Line_2 $$ public void testFidelity() throws ParserException, IOException -->Line_2 $$ public void testFidelity() throws ParserException, IOException [ CD ]
Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])-->Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])[ CD ]
Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])-->Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])[ CD ]
Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])-->Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])[ FD ]
Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])-->Line_25 $$ if (ref[i] != test[i])[ CD ]
Line_25 $$ if (ref[i] != test[i])-->Line_25 $$ fail("character differs at position " + i + ", expected <" + ref[i] + "> but was <" + test[i] + ">")[ CD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_15 $$ string = node.toHtml()[ FD ]
Line_18 $$ position = node.getEndPosition()-->Line_16 $$ if (position != node.getStartPosition())[ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_16 $$ if (position != node.getStartPosition())[ FD ]
Line_15 $$ string = node.toHtml()-->Line_17 $$ buffer.append(string)[ FD ]
Line_14 $$ while (null != (node = lexer.nextNode())) -->Line_18 $$ position = node.getEndPosition()[ FD ]
Line_18 $$ position = node.getEndPosition()-->Line_19 $$ if (buffer.length() != position)[ FD ]
Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])-->Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])[ FD ]
Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])-->Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])[ FD ]
Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])-->Line_25 $$ for (int i = 0; i < ref.length; i++) if (ref[i] != test[i])[ FD ]
