Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) throws Exception [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ String st = "http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz"[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_4 $$ URL url = new URL(st)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_5 $$ InputStream fis = null[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ if ("file".equals(url.getProtocol()))[ CD ]
Line_6 $$ if ("file".equals(url.getProtocol()))-->Line_6 $$ if ("file".equals(url.getProtocol()))[ CD ]
Line_4 $$ URL url = new URL(st)-->Line_6 $$ if ("file".equals(url.getProtocol()))[ FD ]
Line_6 $$ if ("file".equals(url.getProtocol()))-->Line_6 $$ fis = new FileInputStream(url.getFile())[ CD ]
Line_5 $$ InputStream fis = null-->Line_6 $$ fis = new FileInputStream(url.getFile())[ FD ]
Line_6 $$ fis = new FileInputStream(url.getFile())-->Line_6 $$ fis = new FileInputStream(url.getFile())[ FD ]
Line_4 $$ URL url = new URL(st)-->Line_6 $$ fis = new FileInputStream(url.getFile())[ FD ]
Line_6 $$ if ("file".equals(url.getProtocol()))-->Line_6 $$ if ("http".equals(url.getProtocol()))[ CD ]
Line_6 $$ if ("http".equals(url.getProtocol()))-->Line_6 $$ if ("http".equals(url.getProtocol()))[ CD ]
Line_4 $$ URL url = new URL(st)-->Line_6 $$ if ("http".equals(url.getProtocol()))[ FD ]
Line_6 $$ if ("http".equals(url.getProtocol()))-->Line_6 $$ fis = url.openStream()[ CD ]
Line_5 $$ InputStream fis = null-->Line_6 $$ fis = url.openStream()[ FD ]
Line_6 $$ fis = new FileInputStream(url.getFile())-->Line_6 $$ fis = url.openStream()[ FD ]
Line_6 $$ fis = url.openStream()-->Line_6 $$ fis = url.openStream()[ FD ]
Line_6 $$ fis = url.openStream()-->Line_6 $$ fis = url.openStream()[ CD ]
Line_4 $$ URL url = new URL(st)-->Line_6 $$ fis = url.openStream()[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ ZipInputStream zis = new ZipInputStream(fis)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_8 $$ ZipEntry entry[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_9 $$ while ((entry = zis.getNextEntry()) != null) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_2 $$ public static void main(String[] args) throws Exception [ CD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_9 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_8 $$ ZipEntry entry-->Line_9 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_9 $$ while ((entry = zis.getNextEntry()) != null) [ CD ]
Line_7 $$ ZipInputStream zis = new ZipInputStream(fis)-->Line_9 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_10 $$ System.out.println("Extracting: " + entry)[ CD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_11 $$ int count[ CD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_12 $$ byte data[] = new byte[BUFFER][ CD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ FileOutputStream fos = new FileOutputStream(entry.getName())[ CD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ FileOutputStream fos = new FileOutputStream(entry.getName())[ FD ]
Line_8 $$ ZipEntry entry-->Line_13 $$ FileOutputStream fos = new FileOutputStream(entry.getName())[ FD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_14 $$ BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)[ CD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ CD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_9 $$ while ((entry = zis.getNextEntry()) != null) [ CD ]
Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ FD ]
Line_11 $$ int count-->Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ FD ]
Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ CD ]
Line_7 $$ ZipInputStream zis = new ZipInputStream(fis)-->Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)[ FD ]
Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_15 $$ dest.write(data, 0, count)[ CD ]
Line_14 $$ BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)-->Line_15 $$ dest.write(data, 0, count)[ FD ]
Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_15 $$ dest.write(data, 0, count)[ FD ]
Line_11 $$ int count-->Line_15 $$ dest.write(data, 0, count)[ FD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_16 $$ dest.flush()[ CD ]
Line_14 $$ BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)-->Line_16 $$ dest.flush()[ FD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_17 $$ dest.close()[ CD ]
Line_14 $$ BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)-->Line_17 $$ dest.close()[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_19 $$ zis.close()[ CD ]
Line_7 $$ ZipInputStream zis = new ZipInputStream(fis)-->Line_19 $$ zis.close()[ FD ]
Line_9 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ FileOutputStream fos = new FileOutputStream(entry.getName())[ FD ]
Line_14 $$ BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)-->Line_16 $$ dest.flush()[ FD ]
Line_14 $$ BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)-->Line_17 $$ dest.close()[ FD ]
Line_15 $$ while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count)-->Line_15 $$ dest.write(data, 0, count)[ FD ]
