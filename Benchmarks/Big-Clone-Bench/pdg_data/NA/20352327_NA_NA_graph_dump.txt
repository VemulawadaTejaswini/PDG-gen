Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException [ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_3 $$ if (LOG.isDebugEnabled())[ CD ]
Line_3 $$ if (LOG.isDebugEnabled())-->Line_3 $$ if (LOG.isDebugEnabled())[ CD ]
Line_3 $$ if (LOG.isDebugEnabled())-->Line_3 $$ LOG.debug("Create '" + newName + "' in '" + xmldbUri + "'")[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_4 $$ XmldbURI newNameUri = XmldbURI.create(newName)[ CD ]
Line_4 $$ XmldbURI newNameUri = XmldbURI.create(newName)-->Line_4 $$ XmldbURI newNameUri = XmldbURI.create(newName)[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_4 $$ XmldbURI newNameUri = XmldbURI.create(newName)[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)[ CD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_6 $$ if (mime == null) [ CD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_6 $$ if (mime == null) [ FD ]
Line_6 $$ if (mime == null) -->Line_7 $$ mime = MimeType.BINARY_TYPE[ CD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_7 $$ mime = MimeType.BINARY_TYPE[ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_7 $$ mime = MimeType.BINARY_TYPE[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_9 $$ DBBroker broker = null[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_10 $$ Collection collection = null[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_11 $$ BufferedInputStream bis = new BufferedInputStream(is)[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(vtf)[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_14 $$ IOUtils.copy(bis, bos)[ CD ]
Line_11 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_14 $$ IOUtils.copy(bis, bos)[ FD ]
Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(vtf)-->Line_14 $$ IOUtils.copy(bis, bos)[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_15 $$ bis.close()[ CD ]
Line_11 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_15 $$ bis.close()[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_16 $$ bos.close()[ CD ]
Line_13 $$ BufferedOutputStream bos = new BufferedOutputStream(vtf)-->Line_16 $$ bos.close()[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_17 $$ vtf.close()[ CD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_17 $$ vtf.close()[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) [ CD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) [ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) [ FD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) [ FD ]
Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) -->Line_19 $$ if (LOG.isDebugEnabled())[ CD ]
Line_19 $$ if (LOG.isDebugEnabled())-->Line_19 $$ if (LOG.isDebugEnabled())[ CD ]
Line_19 $$ if (LOG.isDebugEnabled())-->Line_19 $$ LOG.debug("Creating dummy XML file for null resource lock '" + newNameUri + "'")[ CD ]
Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) -->Line_20 $$ vtf = new VirtualTempFile()[ CD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_20 $$ vtf = new VirtualTempFile()[ FD ]
Line_20 $$ vtf = new VirtualTempFile()-->Line_20 $$ vtf = new VirtualTempFile()[ FD ]
Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) -->Line_21 $$ IOUtils.write("<null_resource/>", vtf)[ CD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_21 $$ IOUtils.write("<null_resource/>", vtf)[ FD ]
Line_20 $$ vtf = new VirtualTempFile()-->Line_21 $$ IOUtils.write("<null_resource/>", vtf)[ FD ]
Line_18 $$ if (mime.isXMLType() && vtf.length() == 0L) -->Line_22 $$ vtf.close()[ CD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_22 $$ vtf.close()[ FD ]
Line_20 $$ vtf = new VirtualTempFile()-->Line_22 $$ vtf.close()[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()[ CD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_25 $$ Txn txn = transact.beginTransaction()[ CD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_25 $$ Txn txn = transact.beginTransaction()[ CD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_25 $$ Txn txn = transact.beginTransaction()[ FD ]
Line_9 $$ DBBroker broker = null-->Line_27 $$ broker = brokerPool.get(subject)[ FD ]
Line_27 $$ broker = brokerPool.get(subject)-->Line_27 $$ broker = brokerPool.get(subject)[ FD ]
Line_27 $$ broker = brokerPool.get(subject)-->Line_27 $$ broker = brokerPool.get(subject)[ CD ]
Line_10 $$ Collection collection = null-->Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)[ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)[ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)[ CD ]
Line_9 $$ DBBroker broker = null-->Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)[ FD ]
Line_27 $$ broker = brokerPool.get(subject)-->Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)[ FD ]
Line_10 $$ Collection collection = null-->Line_29 $$ if (collection == null) [ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_29 $$ if (collection == null) [ FD ]
Line_29 $$ if (collection == null) -->Line_30 $$ LOG.debug("Collection " + xmldbUri + " does not exist")[ CD ]
Line_29 $$ if (collection == null) -->Line_31 $$ transact.abort(txn)[ CD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_31 $$ transact.abort(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_31 $$ transact.abort(txn)[ FD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_34 $$ if (mime.isXMLType()) [ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_34 $$ if (mime.isXMLType()) [ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_34 $$ if (mime.isXMLType()) [ CD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_34 $$ if (mime.isXMLType()) [ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_34 $$ if (mime.isXMLType()) [ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_35 $$ if (LOG.isDebugEnabled())[ CD ]
Line_35 $$ if (LOG.isDebugEnabled())-->Line_35 $$ if (LOG.isDebugEnabled())[ CD ]
Line_35 $$ if (LOG.isDebugEnabled())-->Line_35 $$ LOG.debug("Inserting XML document '" + mime.getName() + "'")[ CD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_35 $$ LOG.debug("Inserting XML document '" + mime.getName() + "'")[ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_35 $$ LOG.debug("Inserting XML document '" + mime.getName() + "'")[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_36 $$ VirtualTempFileInputSource vtfis = new VirtualTempFileInputSource(vtf)[ CD ]
Line_34 $$ if (mime.isXMLType()) -->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ CD ]
Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ CD ]
Line_10 $$ Collection collection = null-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ FD ]
Line_9 $$ DBBroker broker = null-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ FD ]
Line_27 $$ broker = brokerPool.get(subject)-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ FD ]
Line_4 $$ XmldbURI newNameUri = XmldbURI.create(newName)-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ FD ]
Line_36 $$ VirtualTempFileInputSource vtfis = new VirtualTempFileInputSource(vtf)-->Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_38 $$ DocumentImpl doc = info.getDocument()[ CD ]
Line_38 $$ DocumentImpl doc = info.getDocument()-->Line_38 $$ DocumentImpl doc = info.getDocument()[ CD ]
Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)-->Line_38 $$ DocumentImpl doc = info.getDocument()[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_39 $$ doc.getMetadata().setMimeType(mime.getName())[ CD ]
Line_38 $$ DocumentImpl doc = info.getDocument()-->Line_39 $$ doc.getMetadata().setMimeType(mime.getName())[ FD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_39 $$ doc.getMetadata().setMimeType(mime.getName())[ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_39 $$ doc.getMetadata().setMimeType(mime.getName())[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ CD ]
Line_10 $$ Collection collection = null-->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ FD ]
Line_9 $$ DBBroker broker = null-->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ FD ]
Line_27 $$ broker = brokerPool.get(subject)-->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ FD ]
Line_37 $$ IndexInfo info = collection.validateXMLResource(txn, broker, newNameUri, vtfis)-->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ FD ]
Line_36 $$ VirtualTempFileInputSource vtfis = new VirtualTempFileInputSource(vtf)-->Line_40 $$ collection.store(txn, broker, info, vtfis, false)[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_42 $$ if (LOG.isDebugEnabled())[ CD ]
Line_42 $$ if (LOG.isDebugEnabled())-->Line_42 $$ if (LOG.isDebugEnabled())[ CD ]
Line_42 $$ if (LOG.isDebugEnabled())-->Line_42 $$ LOG.debug("Inserting BINARY document '" + mime.getName() + "'")[ CD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_42 $$ LOG.debug("Inserting BINARY document '" + mime.getName() + "'")[ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_42 $$ LOG.debug("Inserting BINARY document '" + mime.getName() + "'")[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_43 $$ InputStream fis = vtf.getByteStream()[ CD ]
Line_43 $$ InputStream fis = vtf.getByteStream()-->Line_43 $$ InputStream fis = vtf.getByteStream()[ CD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_43 $$ InputStream fis = vtf.getByteStream()[ FD ]
Line_20 $$ vtf = new VirtualTempFile()-->Line_43 $$ InputStream fis = vtf.getByteStream()[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_44 $$ bis = new BufferedInputStream(fis)[ CD ]
Line_11 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_44 $$ bis = new BufferedInputStream(fis)[ FD ]
Line_44 $$ bis = new BufferedInputStream(fis)-->Line_44 $$ bis = new BufferedInputStream(fis)[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ CD ]
Line_10 $$ Collection collection = null-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_9 $$ DBBroker broker = null-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_27 $$ broker = brokerPool.get(subject)-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_4 $$ XmldbURI newNameUri = XmldbURI.create(newName)-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_11 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_44 $$ bis = new BufferedInputStream(fis)-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_5 $$ MimeType mime = MimeTable.getInstance().getContentTypeFor(newName)-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_7 $$ mime = MimeType.BINARY_TYPE-->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_45 $$ DocumentImpl doc = collection.addBinaryResource(txn, broker, newNameUri, bis, mime.getName(), length.longValue())[ FD ]
Line_34 $$ if (mime.isXMLType()) -->Line_46 $$ bis.close()[ CD ]
Line_11 $$ BufferedInputStream bis = new BufferedInputStream(is)-->Line_46 $$ bis.close()[ FD ]
Line_44 $$ bis = new BufferedInputStream(fis)-->Line_46 $$ bis.close()[ FD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_48 $$ transact.commit(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_48 $$ transact.commit(txn)[ FD ]
Line_49 $$ if (LOG.isDebugEnabled())-->Line_49 $$ if (LOG.isDebugEnabled())[ CD ]
Line_49 $$ if (LOG.isDebugEnabled())-->Line_49 $$ LOG.debug("Document created sucessfully")[ CD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_52 $$ transact.abort(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_52 $$ transact.abort(txn)[ FD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_56 $$ transact.abort(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_56 $$ transact.abort(txn)[ FD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_60 $$ transact.abort(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_60 $$ transact.abort(txn)[ FD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_64 $$ transact.abort(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_64 $$ transact.abort(txn)[ FD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_68 $$ transact.abort(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_68 $$ transact.abort(txn)[ FD ]
Line_24 $$ TransactionManager transact = brokerPool.getTransactionManager()-->Line_72 $$ transact.abort(txn)[ FD ]
Line_25 $$ Txn txn = transact.beginTransaction()-->Line_72 $$ transact.abort(txn)[ FD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_75 $$ if (vtf != null) [ FD ]
Line_20 $$ vtf = new VirtualTempFile()-->Line_75 $$ if (vtf != null) [ FD ]
Line_75 $$ if (vtf != null) -->Line_76 $$ vtf.delete()[ CD ]
Line_12 $$ VirtualTempFile vtf = new VirtualTempFile()-->Line_76 $$ vtf.delete()[ FD ]
Line_20 $$ vtf = new VirtualTempFile()-->Line_76 $$ vtf.delete()[ FD ]
Line_10 $$ Collection collection = null-->Line_78 $$ if (collection != null) [ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_78 $$ if (collection != null) [ FD ]
Line_78 $$ if (collection != null) -->Line_79 $$ collection.release(Lock.WRITE_LOCK)[ CD ]
Line_10 $$ Collection collection = null-->Line_79 $$ collection.release(Lock.WRITE_LOCK)[ FD ]
Line_28 $$ collection = broker.openCollection(xmldbUri, Lock.WRITE_LOCK)-->Line_79 $$ collection.release(Lock.WRITE_LOCK)[ FD ]
Line_9 $$ DBBroker broker = null-->Line_81 $$ brokerPool.release(broker)[ FD ]
Line_27 $$ broker = brokerPool.get(subject)-->Line_81 $$ brokerPool.release(broker)[ FD ]
Line_82 $$ if (LOG.isDebugEnabled())-->Line_82 $$ if (LOG.isDebugEnabled())[ CD ]
Line_82 $$ if (LOG.isDebugEnabled())-->Line_82 $$ LOG.debug("Finished creation")[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_84 $$ XmldbURI newResource = xmldbUri.append(newName)[ CD ]
Line_84 $$ XmldbURI newResource = xmldbUri.append(newName)-->Line_84 $$ XmldbURI newResource = xmldbUri.append(newName)[ CD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_84 $$ XmldbURI newResource = xmldbUri.append(newName)[ FD ]
Line_2 $$ public XmldbURI createFile(String newName, InputStream is, Long length, String contentType) throws IOException, PermissionDeniedException, CollectionDoesNotExistException -->Line_85 $$ return newResource[ CD ]
