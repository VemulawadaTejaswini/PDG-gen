Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testCommitRollback() throws Exception [ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_3 $$ Statement stmt = con.createStatement()[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_3 $$ Statement stmt = con.createStatement()[ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_4 $$ assertNotNull(stmt)[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_4 $$ assertNotNull(stmt)[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_5 $$ assertTrue(con.getAutoCommit())[ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_6 $$ stmt.execute("CREATE TABLE #TESTCOMMIT (id int primary key)")[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_6 $$ stmt.execute("CREATE TABLE #TESTCOMMIT (id int primary key)")[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_7 $$ con.setAutoCommit(false)[ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_8 $$ assertFalse(con.getAutoCommit())[ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_9 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (1)"))[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_9 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (1)"))[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_10 $$ con.commit()[ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_11 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (2)"))[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_11 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (2)"))[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_12 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (3)"))[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_12 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (3)"))[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_13 $$ con.rollback()[ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_14 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (4)"))[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_14 $$ assertEquals(1, stmt.executeUpdate("INSERT INTO #TESTCOMMIT VALUES (4)"))[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_15 $$ con.setAutoCommit(true)[ CD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_16 $$ ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM #TESTCOMMIT")[ CD ]
Line_16 $$ ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM #TESTCOMMIT")-->Line_16 $$ ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM #TESTCOMMIT")[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_16 $$ ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM #TESTCOMMIT")[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_17 $$ rs.next()[ CD ]
Line_16 $$ ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM #TESTCOMMIT")-->Line_17 $$ rs.next()[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_18 $$ assertEquals("commit", 2, rs.getInt(1))[ CD ]
Line_16 $$ ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM #TESTCOMMIT")-->Line_18 $$ assertEquals("commit", 2, rs.getInt(1))[ FD ]
Line_2 $$ public void testCommitRollback() throws Exception -->Line_19 $$ stmt.close()[ CD ]
Line_3 $$ Statement stmt = con.createStatement()-->Line_19 $$ stmt.close()[ FD ]
