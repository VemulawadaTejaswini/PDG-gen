Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static String makeTempTraceFile(String base) throws IOException [ CD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_3 $$ File temp = File.createTempFile(base, ".trace")[ CD ]
Line_3 $$ File temp = File.createTempFile(base, ".trace")-->Line_3 $$ File temp = File.createTempFile(base, ".trace")[ CD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_3 $$ File temp = File.createTempFile(base, ".trace")[ FD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_4 $$ temp.deleteOnExit()[ CD ]
Line_3 $$ File temp = File.createTempFile(base, ".trace")-->Line_4 $$ temp.deleteOnExit()[ FD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_5 $$ FileChannel dstChannel = new FileOutputStream(temp).getChannel()[ CD ]
Line_5 $$ FileChannel dstChannel = new FileOutputStream(temp).getChannel()-->Line_5 $$ FileChannel dstChannel = new FileOutputStream(temp).getChannel()[ CD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()[ CD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()[ CD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_7 $$ long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ CD ]
Line_7 $$ long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size())-->Line_7 $$ long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ CD ]
Line_5 $$ FileChannel dstChannel = new FileOutputStream(temp).getChannel()-->Line_7 $$ long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_7 $$ long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_7 $$ long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size())[ FD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_8 $$ srcChannel.close()[ CD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_8 $$ srcChannel.close()[ FD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()[ CD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()[ FD ]
Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()-->Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()[ FD ]
Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()-->Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()[ CD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_10 $$ dstChannel.transferFrom(srcChannel, size, srcChannel.size())[ CD ]
Line_5 $$ FileChannel dstChannel = new FileOutputStream(temp).getChannel()-->Line_10 $$ dstChannel.transferFrom(srcChannel, size, srcChannel.size())[ FD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_10 $$ dstChannel.transferFrom(srcChannel, size, srcChannel.size())[ FD ]
Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()-->Line_10 $$ dstChannel.transferFrom(srcChannel, size, srcChannel.size())[ FD ]
Line_7 $$ long size = dstChannel.transferFrom(srcChannel, 0, srcChannel.size())-->Line_10 $$ dstChannel.transferFrom(srcChannel, size, srcChannel.size())[ FD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_10 $$ dstChannel.transferFrom(srcChannel, size, srcChannel.size())[ FD ]
Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()-->Line_10 $$ dstChannel.transferFrom(srcChannel, size, srcChannel.size())[ FD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_11 $$ srcChannel.close()[ CD ]
Line_6 $$ FileChannel srcChannel = new FileInputStream(base + ".key").getChannel()-->Line_11 $$ srcChannel.close()[ FD ]
Line_9 $$ srcChannel = new FileInputStream(base + ".data").getChannel()-->Line_11 $$ srcChannel.close()[ FD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_12 $$ dstChannel.close()[ CD ]
Line_5 $$ FileChannel dstChannel = new FileOutputStream(temp).getChannel()-->Line_12 $$ dstChannel.close()[ FD ]
Line_2 $$ private static String makeTempTraceFile(String base) throws IOException -->Line_13 $$ return temp.getPath()[ CD ]
Line_13 $$ return temp.getPath()-->Line_13 $$ return temp.getPath()[ CD ]
Line_3 $$ File temp = File.createTempFile(base, ".trace")-->Line_13 $$ return temp.getPath()[ FD ]
