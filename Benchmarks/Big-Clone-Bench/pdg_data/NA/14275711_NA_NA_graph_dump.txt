Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) [ CD ]
Line_4 $$ ClassLoader classLoader = getClassLoader()-->Line_4 $$ ClassLoader classLoader = getClassLoader()[ CD ]
Line_4 $$ ClassLoader classLoader = getClassLoader()-->Line_5 $$ if (classLoader == null)[ FD ]
Line_5 $$ if (classLoader == null)-->Line_5 $$ return[ CD ]
Line_6 $$ Enumeration iter-->Line_7 $$ iter = classLoader.getResources(fileName)[ FD ]
Line_7 $$ iter = classLoader.getResources(fileName)-->Line_7 $$ iter = classLoader.getResources(fileName)[ FD ]
Line_7 $$ iter = classLoader.getResources(fileName)-->Line_7 $$ iter = classLoader.getResources(fileName)[ CD ]
Line_4 $$ ClassLoader classLoader = getClassLoader()-->Line_7 $$ iter = classLoader.getResources(fileName)[ FD ]
Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) -->Line_7 $$ iter = classLoader.getResources(fileName)[ FD ]
Line_8 $$ while (iter.hasMoreElements()) -->Line_8 $$ while (iter.hasMoreElements()) [ CD ]
Line_6 $$ Enumeration iter-->Line_8 $$ while (iter.hasMoreElements()) [ FD ]
Line_7 $$ iter = classLoader.getResources(fileName)-->Line_8 $$ while (iter.hasMoreElements()) [ FD ]
Line_8 $$ while (iter.hasMoreElements()) -->Line_9 $$ URL url = (URL) iter.nextElement()[ CD ]
Line_6 $$ Enumeration iter-->Line_9 $$ URL url = (URL) iter.nextElement()[ FD ]
Line_7 $$ iter = classLoader.getResources(fileName)-->Line_9 $$ URL url = (URL) iter.nextElement()[ FD ]
Line_8 $$ while (iter.hasMoreElements()) -->Line_10 $$ if (fileList.contains(url.toString()))[ CD ]
Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) -->Line_10 $$ if (fileList.contains(url.toString()))[ FD ]
Line_10 $$ if (fileList.contains(url.toString()))-->Line_10 $$ if (fileList.contains(url.toString()))[ CD ]
Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) -->Line_10 $$ if (fileList.contains(url.toString()))[ FD ]
Line_9 $$ URL url = (URL) iter.nextElement()-->Line_10 $$ if (fileList.contains(url.toString()))[ FD ]
Line_8 $$ while (iter.hasMoreElements()) -->Line_11 $$ fileList.add(url.toString())[ CD ]
Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) -->Line_11 $$ fileList.add(url.toString())[ FD ]
Line_9 $$ URL url = (URL) iter.nextElement()-->Line_11 $$ fileList.add(url.toString())[ FD ]
Line_8 $$ while (iter.hasMoreElements()) -->Line_12 $$ InputStream is = null[ CD ]
Line_12 $$ InputStream is = null-->Line_14 $$ is = url.openStream()[ FD ]
Line_14 $$ is = url.openStream()-->Line_14 $$ is = url.openStream()[ FD ]
Line_14 $$ is = url.openStream()-->Line_14 $$ is = url.openStream()[ CD ]
Line_9 $$ URL url = (URL) iter.nextElement()-->Line_14 $$ is = url.openStream()[ FD ]
Line_15 $$ Properties props = new Properties()-->Line_16 $$ props.load(is)[ FD ]
Line_12 $$ InputStream is = null-->Line_16 $$ props.load(is)[ FD ]
Line_14 $$ is = url.openStream()-->Line_16 $$ props.load(is)[ FD ]
Line_15 $$ Properties props = new Properties()-->Line_17 $$ for (Map.Entry entry : props.entrySet()) [ FD ]
Line_17 $$ for (Map.Entry entry : props.entrySet()) -->Line_18 $$ String apiName = (String) entry.getKey()[ FD ]
Line_17 $$ for (Map.Entry entry : props.entrySet()) -->Line_19 $$ String serializerName = (String) entry.getValue()[ FD ]
Line_20 $$ Class apiClass = null-->Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)[ FD ]
Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)-->Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)[ FD ]
Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)-->Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)[ CD ]
Line_18 $$ String apiName = (String) entry.getKey()-->Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)[ FD ]
Line_4 $$ ClassLoader classLoader = getClassLoader()-->Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)[ FD ]
Line_21 $$ Class serializerClass = null-->Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)[ CD ]
Line_19 $$ String serializerName = (String) entry.getValue()-->Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)[ FD ]
Line_4 $$ ClassLoader classLoader = getClassLoader()-->Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)[ FD ]
Line_34 $$ if (!type.isAssignableFrom(serializerClass))-->Line_34 $$ if (!type.isAssignableFrom(serializerClass))[ CD ]
Line_34 $$ if (!type.isAssignableFrom(serializerClass))-->Line_34 $$ if (!type.isAssignableFrom(serializerClass))[ CD ]
Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) -->Line_34 $$ if (!type.isAssignableFrom(serializerClass))[ FD ]
Line_21 $$ Class serializerClass = null-->Line_34 $$ if (!type.isAssignableFrom(serializerClass))[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_34 $$ if (!type.isAssignableFrom(serializerClass))[ FD ]
Line_21 $$ Class serializerClass = null-->Line_34 $$ throw new HessianException(url + ": " + serializerClass.getName() + " is invalid because it does not implement " + type.getName())[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_34 $$ throw new HessianException(url + ": " + serializerClass.getName() + " is invalid because it does not implement " + type.getName())[ FD ]
Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) -->Line_34 $$ throw new HessianException(url + ": " + serializerClass.getName() + " is invalid because it does not implement " + type.getName())[ FD ]
Line_2 $$ private void initSerializerFiles(String fileName, HashSet<String> fileList, HashMap<Class, Class> classMap, Class type) -->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_20 $$ Class apiClass = null-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_21 $$ Class serializerClass = null-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_12 $$ InputStream is = null-->Line_38 $$ if (is != null)[ FD ]
Line_14 $$ is = url.openStream()-->Line_38 $$ if (is != null)[ FD ]
Line_38 $$ if (is != null)-->Line_38 $$ is.close()[ CD ]
Line_12 $$ InputStream is = null-->Line_38 $$ is.close()[ FD ]
Line_14 $$ is = url.openStream()-->Line_38 $$ is.close()[ FD ]
Line_9 $$ URL url = (URL) iter.nextElement()-->Line_10 $$ if (fileList.contains(url.toString()))[ FD ]
Line_9 $$ URL url = (URL) iter.nextElement()-->Line_11 $$ fileList.add(url.toString())[ FD ]
Line_9 $$ URL url = (URL) iter.nextElement()-->Line_14 $$ is = url.openStream()[ FD ]
Line_15 $$ Properties props = new Properties()-->Line_16 $$ props.load(is)[ FD ]
Line_12 $$ InputStream is = null-->Line_16 $$ props.load(is)[ FD ]
Line_14 $$ is = url.openStream()-->Line_16 $$ props.load(is)[ FD ]
Line_15 $$ Properties props = new Properties()-->Line_17 $$ for (Map.Entry entry : props.entrySet()) [ FD ]
Line_17 $$ for (Map.Entry entry : props.entrySet()) -->Line_18 $$ String apiName = (String) entry.getKey()[ FD ]
Line_17 $$ for (Map.Entry entry : props.entrySet()) -->Line_19 $$ String serializerName = (String) entry.getValue()[ FD ]
Line_18 $$ String apiName = (String) entry.getKey()-->Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)[ FD ]
Line_19 $$ String serializerName = (String) entry.getValue()-->Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)[ FD ]
Line_21 $$ Class serializerClass = null-->Line_34 $$ if (!type.isAssignableFrom(serializerClass))[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_34 $$ if (!type.isAssignableFrom(serializerClass))[ FD ]
Line_21 $$ Class serializerClass = null-->Line_34 $$ throw new HessianException(url + ": " + serializerClass.getName() + " is invalid because it does not implement " + type.getName())[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_34 $$ throw new HessianException(url + ": " + serializerClass.getName() + " is invalid because it does not implement " + type.getName())[ FD ]
Line_20 $$ Class apiClass = null-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_23 $$ apiClass = Class.forName(apiName, false, classLoader)-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_21 $$ Class serializerClass = null-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_29 $$ serializerClass = Class.forName(serializerName, false, classLoader)-->Line_35 $$ classMap.put(apiClass, serializerClass)[ FD ]
Line_12 $$ InputStream is = null-->Line_38 $$ if (is != null)[ FD ]
Line_14 $$ is = url.openStream()-->Line_38 $$ if (is != null)[ FD ]
Line_12 $$ InputStream is = null-->Line_38 $$ is.close()[ FD ]
Line_14 $$ is = url.openStream()-->Line_38 $$ is.close()[ FD ]
