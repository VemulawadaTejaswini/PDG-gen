Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public byte[] exportCommunityData(String communityId) throws RepositoryException, IOException [ CD ]
Line_2 $$ public byte[] exportCommunityData(String communityId) throws RepositoryException, IOException -->Line_3 $$ Community community[ CD ]
Line_3 $$ Community community-->Line_5 $$ community = getCommunityById(communityId)[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_5 $$ community = getCommunityById(communityId)[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_5 $$ community = getCommunityById(communityId)[ CD ]
Line_2 $$ public byte[] exportCommunityData(String communityId) throws RepositoryException, IOException -->Line_5 $$ community = getCommunityById(communityId)[ FD ]
Line_2 $$ public byte[] exportCommunityData(String communityId) throws RepositoryException, IOException -->Line_9 $$ String contentPath = JCRUtil.getNodeById(communityId, community.getWorkspace()).getPath()[ CD ]
Line_9 $$ String contentPath = JCRUtil.getNodeById(communityId, community.getWorkspace()).getPath()-->Line_9 $$ String contentPath = JCRUtil.getNodeById(communityId, community.getWorkspace()).getPath()[ CD ]
Line_2 $$ public byte[] exportCommunityData(String communityId) throws RepositoryException, IOException -->Line_9 $$ String contentPath = JCRUtil.getNodeById(communityId, community.getWorkspace()).getPath()[ FD ]
Line_3 $$ Community community-->Line_9 $$ String contentPath = JCRUtil.getNodeById(communityId, community.getWorkspace()).getPath()[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_9 $$ String contentPath = JCRUtil.getNodeById(communityId, community.getWorkspace()).getPath()[ FD ]
Line_11 $$ File zipOutFilename = File.createTempFile("exported-community", ".zip.tmp")-->Line_11 $$ File zipOutFilename = File.createTempFile("exported-community", ".zip.tmp")[ CD ]
Line_11 $$ File zipOutFilename = File.createTempFile("exported-community", ".zip.tmp")-->Line_12 $$ TemporaryFilesHandler.register(null, zipOutFilename)[ FD ]
Line_14 $$ File file = File.createTempFile("exported-community", null)-->Line_14 $$ File file = File.createTempFile("exported-community", null)[ CD ]
Line_14 $$ File file = File.createTempFile("exported-community", null)-->Line_15 $$ TemporaryFilesHandler.register(null, file)[ FD ]
Line_3 $$ Community community-->Line_17 $$ exportCommunitySystemView(community, contentPath, fos)[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_17 $$ exportCommunitySystemView(community, contentPath, fos)[ FD ]
Line_9 $$ String contentPath = JCRUtil.getNodeById(communityId, community.getWorkspace()).getPath()-->Line_17 $$ exportCommunitySystemView(community, contentPath, fos)[ FD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_17 $$ exportCommunitySystemView(community, contentPath, fos)[ FD ]
Line_16 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_18 $$ fos.close()[ FD ]
Line_19 $$ File propertiesFile = File.createTempFile("exported-community-properties", null)-->Line_19 $$ File propertiesFile = File.createTempFile("exported-community-properties", null)[ CD ]
Line_19 $$ File propertiesFile = File.createTempFile("exported-community-properties", null)-->Line_20 $$ TemporaryFilesHandler.register(null, propertiesFile)[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_22 $$ fosProperties.write(("communityId=" + communityId).getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_23 $$ fosProperties.write(";".getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_24 $$ fosProperties.write(("externalId=" + community.getExternalId()).getBytes())[ FD ]
Line_3 $$ Community community-->Line_24 $$ fosProperties.write(("externalId=" + community.getExternalId()).getBytes())[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_24 $$ fosProperties.write(("externalId=" + community.getExternalId()).getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_25 $$ fosProperties.write(";".getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_26 $$ fosProperties.write(("title=" + I18NUtils.localize(community.getTitle())).getBytes())[ FD ]
Line_3 $$ Community community-->Line_26 $$ fosProperties.write(("title=" + I18NUtils.localize(community.getTitle())).getBytes())[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_26 $$ fosProperties.write(("title=" + I18NUtils.localize(community.getTitle())).getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_27 $$ fosProperties.write(";".getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_28 $$ fosProperties.write(("communityType=" + community.getType()).getBytes())[ FD ]
Line_3 $$ Community community-->Line_28 $$ fosProperties.write(("communityType=" + community.getType()).getBytes())[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_28 $$ fosProperties.write(("communityType=" + community.getType()).getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_29 $$ fosProperties.write(";".getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_30 $$ fosProperties.write(("communityName=" + community.getName()).getBytes())[ FD ]
Line_3 $$ Community community-->Line_30 $$ fosProperties.write(("communityName=" + community.getName()).getBytes())[ FD ]
Line_5 $$ community = getCommunityById(communityId)-->Line_30 $$ fosProperties.write(("communityName=" + community.getName()).getBytes())[ FD ]
Line_21 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_31 $$ fosProperties.close()[ FD ]
Line_13 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_34 $$ out.putNextEntry(new ZipEntry("properties"))[ FD ]
Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_35 $$ int readProperties = 0-->Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ CD ]
Line_32 $$ FileInputStream finProperties = new FileInputStream(propertiesFile)-->Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_33 $$ byte[] bufferProperties = new byte[4096]-->Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_37 $$ out.write(bufferProperties, 0, readProperties)[ CD ]
Line_13 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_37 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_33 $$ byte[] bufferProperties = new byte[4096]-->Line_37 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_37 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_35 $$ int readProperties = 0-->Line_37 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_32 $$ FileInputStream finProperties = new FileInputStream(propertiesFile)-->Line_39 $$ finProperties.close()[ FD ]
Line_13 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_42 $$ out.putNextEntry(new ZipEntry("xmlData"))[ FD ]
Line_44 $$ while ((read = fin.read(buffer)) > 0) -->Line_44 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_43 $$ int read = 0-->Line_44 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_44 $$ while ((read = fin.read(buffer)) > 0) -->Line_44 $$ while ((read = fin.read(buffer)) > 0) [ CD ]
Line_40 $$ FileInputStream fin = new FileInputStream(file)-->Line_44 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_41 $$ byte[] buffer = new byte[4096]-->Line_44 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_44 $$ while ((read = fin.read(buffer)) > 0) -->Line_45 $$ out.write(buffer, 0, read)[ CD ]
Line_13 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_45 $$ out.write(buffer, 0, read)[ FD ]
Line_41 $$ byte[] buffer = new byte[4096]-->Line_45 $$ out.write(buffer, 0, read)[ FD ]
Line_44 $$ while ((read = fin.read(buffer)) > 0) -->Line_45 $$ out.write(buffer, 0, read)[ FD ]
Line_43 $$ int read = 0-->Line_45 $$ out.write(buffer, 0, read)[ FD ]
Line_40 $$ FileInputStream fin = new FileInputStream(file)-->Line_47 $$ fin.close()[ FD ]
Line_13 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_48 $$ out.close()[ FD ]
Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) -->Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) [ FD ]
Line_52 $$ int readOut = 0-->Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) [ FD ]
Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) -->Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) [ CD ]
Line_50 $$ FileInputStream fisZipped = new FileInputStream(zipOutFilename)-->Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) [ FD ]
Line_51 $$ byte[] bufferOut = new byte[4096]-->Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) [ FD ]
Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) -->Line_54 $$ baos.write(bufferOut, 0, readOut)[ CD ]
Line_49 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_54 $$ baos.write(bufferOut, 0, readOut)[ FD ]
Line_51 $$ byte[] bufferOut = new byte[4096]-->Line_54 $$ baos.write(bufferOut, 0, readOut)[ FD ]
Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) -->Line_54 $$ baos.write(bufferOut, 0, readOut)[ FD ]
Line_52 $$ int readOut = 0-->Line_54 $$ baos.write(bufferOut, 0, readOut)[ FD ]
Line_56 $$ return baos.toByteArray()-->Line_56 $$ return baos.toByteArray()[ CD ]
Line_49 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_56 $$ return baos.toByteArray()[ FD ]
Line_58 $$ String errorMessage = "Error exporting backup data, for comunnity with id " + communityId-->Line_59 $$ log.error(errorMessage, e)[ FD ]
Line_36 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_37 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_44 $$ while ((read = fin.read(buffer)) > 0) -->Line_45 $$ out.write(buffer, 0, read)[ FD ]
Line_53 $$ while ((readOut = fisZipped.read(bufferOut)) > 0) -->Line_54 $$ baos.write(bufferOut, 0, readOut)[ FD ]
