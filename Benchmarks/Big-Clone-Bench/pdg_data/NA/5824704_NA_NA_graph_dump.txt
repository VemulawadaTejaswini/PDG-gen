Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception [ CD ]
Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception -->Line_3 $$ final String id = request.getParameter("id")[ CD ]
Line_3 $$ final String id = request.getParameter("id")-->Line_3 $$ final String id = request.getParameter("id")[ CD ]
Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception -->Line_3 $$ final String id = request.getParameter("id")[ FD ]
Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception -->Line_4 $$ if (id == null) [ CD ]
Line_3 $$ final String id = request.getParameter("id")-->Line_4 $$ if (id == null) [ FD ]
Line_4 $$ if (id == null) -->Line_5 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST)[ CD ]
Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception -->Line_5 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST)[ FD ]
Line_4 $$ if (id == null) -->Line_6 $$ return null[ CD ]
Line_9 $$ jaxrTemplate.execute(new JAXRCallback<Object>() -->Line_11 $$ RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id)[ CD ]
Line_11 $$ RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id)-->Line_11 $$ RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id)[ CD ]
Line_3 $$ final String id = request.getParameter("id")-->Line_11 $$ RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id)[ FD ]
Line_9 $$ jaxrTemplate.execute(new JAXRCallback<Object>() -->Line_11 $$ RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id)[ FD ]
Line_9 $$ jaxrTemplate.execute(new JAXRCallback<Object>() -->Line_12 $$ if (registryObject instanceof ExtrinsicObject) [ CD ]
Line_11 $$ RegistryObject registryObject = connection.getRegistryService().getBusinessQueryManager().getRegistryObject(id)-->Line_12 $$ if (registryObject instanceof ExtrinsicObject) [ FD ]
Line_12 $$ if (registryObject instanceof ExtrinsicObject) -->Line_13 $$ ExtrinsicObject extrinsicObject = (ExtrinsicObject) registryObject[ CD ]
Line_12 $$ if (registryObject instanceof ExtrinsicObject) -->Line_14 $$ DataHandler dataHandler = extrinsicObject.getRepositoryItem()[ CD ]
Line_14 $$ DataHandler dataHandler = extrinsicObject.getRepositoryItem()-->Line_14 $$ DataHandler dataHandler = extrinsicObject.getRepositoryItem()[ CD ]
Line_13 $$ ExtrinsicObject extrinsicObject = (ExtrinsicObject) registryObject-->Line_14 $$ DataHandler dataHandler = extrinsicObject.getRepositoryItem()[ FD ]
Line_12 $$ if (registryObject instanceof ExtrinsicObject) -->Line_15 $$ if (dataHandler != null) [ CD ]
Line_14 $$ DataHandler dataHandler = extrinsicObject.getRepositoryItem()-->Line_15 $$ if (dataHandler != null) [ FD ]
Line_15 $$ if (dataHandler != null) -->Line_16 $$ response.setContentType("text/html")[ CD ]
Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception -->Line_16 $$ response.setContentType("text/html")[ FD ]
Line_18 $$ PrintWriter out = response.getWriter()-->Line_18 $$ PrintWriter out = response.getWriter()[ CD ]
Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception -->Line_18 $$ PrintWriter out = response.getWriter()[ FD ]
Line_19 $$ InputStream is = dataHandler.getInputStream()-->Line_19 $$ InputStream is = dataHandler.getInputStream()[ CD ]
Line_14 $$ DataHandler dataHandler = extrinsicObject.getRepositoryItem()-->Line_19 $$ InputStream is = dataHandler.getInputStream()[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)[ CD ]
Line_18 $$ PrintWriter out = response.getWriter()-->Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_22 $$ xmlStreamWriter.writeStartDocument()[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_23 $$ xmlStreamWriter.writeStartElement("div")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_24 $$ xmlStreamWriter.writeStartElement("textarea")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_25 $$ xmlStreamWriter.writeAttribute("name", "repositoryItem")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_26 $$ xmlStreamWriter.writeAttribute("class", "xml")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_27 $$ xmlStreamWriter.writeAttribute("style", "display:none")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_29 $$ xmlStreamWriter.writeEndElement()[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_30 $$ xmlStreamWriter.writeStartElement("script")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_31 $$ xmlStreamWriter.writeAttribute("class", "javascript")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_32 $$ xmlStreamWriter.writeCharacters("dp.SyntaxHighlighter.HighlightAll('repositoryItem');")[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_33 $$ xmlStreamWriter.writeEndElement()[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_34 $$ xmlStreamWriter.writeEndElement()[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_35 $$ xmlStreamWriter.writeEndDocument()[ FD ]
Line_21 $$ final XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter(out)-->Line_36 $$ xmlStreamWriter.flush()[ FD ]
Line_19 $$ InputStream is = dataHandler.getInputStream()-->Line_38 $$ is.close()[ FD ]
Line_9 $$ jaxrTemplate.execute(new JAXRCallback<Object>() -->Line_47 $$ return null[ CD ]
Line_2 $$ protected ModelAndView handleRequestInternal(HttpServletRequest request, final HttpServletResponse response) throws Exception -->Line_53 $$ return null[ CD ]
