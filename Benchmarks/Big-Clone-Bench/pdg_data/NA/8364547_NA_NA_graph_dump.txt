Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void executeInterruptible() [ CD ]
Line_2 $$ public void executeInterruptible() -->Line_4 $$ File destinationFile = null[ CD ]
Line_6 $$ Runtime runtime = Runtime.getRuntime()-->Line_6 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_8 $$ while ((element = getNextFileElement()) != null) [ FD ]
Line_7 $$ IconAndFileListElement element-->Line_8 $$ while ((element = getNextFileElement()) != null) [ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_8 $$ while ((element = getNextFileElement()) != null) [ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_9 $$ File origFile = element.getFile()[ CD ]
Line_9 $$ File origFile = element.getFile()-->Line_9 $$ File origFile = element.getFile()[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_9 $$ File origFile = element.getFile()[ FD ]
Line_7 $$ IconAndFileListElement element-->Line_9 $$ File origFile = element.getFile()[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())[ CD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())[ FD ]
Line_4 $$ File destinationFile = null-->Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())[ FD ]
Line_9 $$ File origFile = element.getFile()-->Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_11 $$ if (!destinationFile.getParentFile().exists()) [ CD ]
Line_11 $$ if (!destinationFile.getParentFile().exists()) -->Line_11 $$ if (!destinationFile.getParentFile().exists()) [ CD ]
Line_11 $$ if (!destinationFile.getParentFile().exists()) -->Line_11 $$ if (!destinationFile.getParentFile().exists()) [ CD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_11 $$ if (!destinationFile.getParentFile().exists()) [ FD ]
Line_4 $$ File destinationFile = null-->Line_11 $$ if (!destinationFile.getParentFile().exists()) [ FD ]
Line_11 $$ if (!destinationFile.getParentFile().exists()) -->Line_12 $$ destinationFile.getParentFile().mkdirs()[ CD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_12 $$ destinationFile.getParentFile().mkdirs()[ FD ]
Line_4 $$ File destinationFile = null-->Line_12 $$ destinationFile.getParentFile().mkdirs()[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_14 $$ actualFileLabel.setText(origFile.getName())[ CD ]
Line_9 $$ File origFile = element.getFile()-->Line_14 $$ actualFileLabel.setText(origFile.getName())[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_15 $$ actualFileModel.setMaximum((int) origFile.length())[ CD ]
Line_9 $$ File origFile = element.getFile()-->Line_15 $$ actualFileModel.setMaximum((int) origFile.length())[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_16 $$ actualFileModel.setValue(0)[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_17 $$ int bitrate[ CD ]
Line_19 $$ Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue())-->Line_19 $$ Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue())[ CD ]
Line_19 $$ Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue())-->Line_20 $$ bitrateMatcher.find()[ FD ]
Line_17 $$ int bitrate-->Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))[ FD ]
Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))-->Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))[ FD ]
Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))-->Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))[ CD ]
Line_19 $$ Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue())-->Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_23 $$ List<String> command = new LinkedList<String>()[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_24 $$ command.add(encoderFile.getCanonicalPath())[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_24 $$ command.add(encoderFile.getCanonicalPath())[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_25 $$ command.add("--mp3input")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_25 $$ command.add("--mp3input")[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_26 $$ command.add("-m")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_26 $$ command.add("-m")[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_27 $$ command.add("j")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_27 $$ command.add("j")[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")[ CD ]
Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")-->Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_29 $$ if (Util.isNotEmpty(sampleFreq)) [ CD ]
Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")-->Line_29 $$ if (Util.isNotEmpty(sampleFreq)) [ FD ]
Line_29 $$ if (Util.isNotEmpty(sampleFreq)) -->Line_29 $$ if (Util.isNotEmpty(sampleFreq)) [ CD ]
Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")-->Line_29 $$ if (Util.isNotEmpty(sampleFreq)) [ FD ]
Line_29 $$ if (Util.isNotEmpty(sampleFreq)) -->Line_30 $$ command.add("--resample")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_30 $$ command.add("--resample")[ FD ]
Line_29 $$ if (Util.isNotEmpty(sampleFreq)) -->Line_31 $$ command.add(sampleFreq)[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_31 $$ command.add(sampleFreq)[ FD ]
Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")-->Line_31 $$ command.add(sampleFreq)[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_33 $$ QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem()[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_34 $$ command.add("-q")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_34 $$ command.add("-q")[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_35 $$ command.add(Integer.toString(quality.getValue()))[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_35 $$ command.add(Integer.toString(quality.getValue()))[ FD ]
Line_33 $$ QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem()-->Line_35 $$ command.add(Integer.toString(quality.getValue()))[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_36 $$ command.add("-b")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_36 $$ command.add("-b")[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_37 $$ command.add(Integer.toString(bitrate))[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_37 $$ command.add(Integer.toString(bitrate))[ FD ]
Line_17 $$ int bitrate-->Line_37 $$ command.add(Integer.toString(bitrate))[ FD ]
Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))-->Line_37 $$ command.add(Integer.toString(bitrate))[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_38 $$ command.add("--cbr")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_38 $$ command.add("--cbr")[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_39 $$ command.add("-")[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_39 $$ command.add("-")[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_40 $$ command.add(destinationFile.getCanonicalPath())[ CD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_40 $$ command.add(destinationFile.getCanonicalPath())[ FD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_40 $$ command.add(destinationFile.getCanonicalPath())[ FD ]
Line_4 $$ File destinationFile = null-->Line_40 $$ command.add(destinationFile.getCanonicalPath())[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_41 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_41 $$ if (LOG.isDebugEnabled()) -->Line_41 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_41 $$ if (LOG.isDebugEnabled()) -->Line_42 $$ StringBuilder commandLine = new StringBuilder()[ CD ]
Line_41 $$ if (LOG.isDebugEnabled()) -->Line_43 $$ boolean first = true[ CD ]
Line_43 $$ boolean first = true-->Line_45 $$ if (!first)[ FD ]
Line_45 $$ if (!first)-->Line_45 $$ if (!first)[ CD ]
Line_43 $$ boolean first = true-->Line_45 $$ if (!first)[ FD ]
Line_45 $$ if (!first)-->Line_45 $$ commandLine.append(" ")[ CD ]
Line_42 $$ StringBuilder commandLine = new StringBuilder()-->Line_45 $$ commandLine.append(" ")[ FD ]
Line_42 $$ StringBuilder commandLine = new StringBuilder()-->Line_46 $$ commandLine.append(part)[ FD ]
Line_44 $$ for (String part : command) -->Line_46 $$ commandLine.append(part)[ FD ]
Line_43 $$ boolean first = true-->Line_47 $$ first = false[ FD ]
Line_47 $$ first = false-->Line_47 $$ first = false[ FD ]
Line_41 $$ if (LOG.isDebugEnabled()) -->Line_49 $$ LOG.debug("Command line: " + commandLine.toString())[ CD ]
Line_42 $$ StringBuilder commandLine = new StringBuilder()-->Line_49 $$ LOG.debug("Command line: " + commandLine.toString())[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_51 $$ encodingProcess = runtime.exec(command.toArray(new String[0]))[ CD ]
Line_6 $$ Runtime runtime = Runtime.getRuntime()-->Line_51 $$ encodingProcess = runtime.exec(command.toArray(new String[0]))[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_51 $$ encodingProcess = runtime.exec(command.toArray(new String[0]))[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_53 $$ InputStream fileStream = null[ CD ]
Line_53 $$ InputStream fileStream = null-->Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)[ FD ]
Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)-->Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)[ FD ]
Line_9 $$ File origFile = element.getFile()-->Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)[ FD ]
Line_53 $$ InputStream fileStream = null-->Line_56 $$ IOUtils.copy(fileStream, encodingProcess.getOutputStream())[ FD ]
Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)-->Line_56 $$ IOUtils.copy(fileStream, encodingProcess.getOutputStream())[ FD ]
Line_53 $$ InputStream fileStream = null-->Line_59 $$ IOUtils.closeQuietly(fileStream)[ FD ]
Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)-->Line_59 $$ IOUtils.closeQuietly(fileStream)[ FD ]
Line_60 $$ if (LOG.isDebugEnabled()) -->Line_60 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_60 $$ if (LOG.isDebugEnabled()) -->Line_61 $$ InputStream processOut = null[ CD ]
Line_61 $$ InputStream processOut = null-->Line_63 $$ processOut = encodingProcess.getInputStream()[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_63 $$ processOut = encodingProcess.getInputStream()[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_63 $$ processOut = encodingProcess.getInputStream()[ CD ]
Line_61 $$ InputStream processOut = null-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_64 $$ StringWriter sw = new StringWriter()-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_61 $$ InputStream processOut = null-->Line_67 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_67 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_61 $$ InputStream processOut = null-->Line_68 $$ processOut = encodingProcess.getErrorStream()[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_68 $$ processOut = encodingProcess.getErrorStream()[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_68 $$ processOut = encodingProcess.getErrorStream()[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_68 $$ processOut = encodingProcess.getErrorStream()[ CD ]
Line_64 $$ StringWriter sw = new StringWriter()-->Line_69 $$ sw = new StringWriter()[ FD ]
Line_69 $$ sw = new StringWriter()-->Line_69 $$ sw = new StringWriter()[ FD ]
Line_61 $$ InputStream processOut = null-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_64 $$ StringWriter sw = new StringWriter()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_69 $$ sw = new StringWriter()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_61 $$ InputStream processOut = null-->Line_73 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_73 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_73 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_77 $$ int result = encodingProcess.waitFor()[ CD ]
Line_77 $$ int result = encodingProcess.waitFor()-->Line_77 $$ int result = encodingProcess.waitFor()[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_79 $$ if (result != 0) [ CD ]
Line_77 $$ int result = encodingProcess.waitFor()-->Line_79 $$ if (result != 0) [ FD ]
Line_79 $$ if (result != 0) -->Line_80 $$ LOG.warn("Encoder process returned error code " + result)[ CD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) [ CD ]
Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) -->Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) [ CD ]
Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) -->Line_83 $$ MP3File mp3Input = new MP3File(origFile)[ CD ]
Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) -->Line_84 $$ MP3File mp3Output = new MP3File(destinationFile)[ CD ]
Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) -->Line_85 $$ boolean write = false[ CD ]
Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) -->Line_86 $$ if (mp3Input.hasID3v2tag()) [ CD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_86 $$ if (mp3Input.hasID3v2tag()) [ FD ]
Line_86 $$ if (mp3Input.hasID3v2tag()) -->Line_86 $$ if (mp3Input.hasID3v2tag()) [ CD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_86 $$ if (mp3Input.hasID3v2tag()) [ FD ]
Line_86 $$ if (mp3Input.hasID3v2tag()) -->Line_87 $$ ID3v2Tag id3v2Tag = new ID3v2Tag()[ CD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_88 $$ for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) [ FD ]
Line_87 $$ ID3v2Tag id3v2Tag = new ID3v2Tag()-->Line_89 $$ id3v2Tag.addFrame(frame)[ FD ]
Line_88 $$ for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) -->Line_89 $$ id3v2Tag.addFrame(frame)[ FD ]
Line_86 $$ if (mp3Input.hasID3v2tag()) -->Line_91 $$ mp3Output.setID3v2tag(id3v2Tag)[ CD ]
Line_84 $$ MP3File mp3Output = new MP3File(destinationFile)-->Line_91 $$ mp3Output.setID3v2tag(id3v2Tag)[ FD ]
Line_87 $$ ID3v2Tag id3v2Tag = new ID3v2Tag()-->Line_91 $$ mp3Output.setID3v2tag(id3v2Tag)[ FD ]
Line_86 $$ if (mp3Input.hasID3v2tag()) -->Line_92 $$ write = true[ CD ]
Line_85 $$ boolean write = false-->Line_92 $$ write = true[ FD ]
Line_92 $$ write = true-->Line_92 $$ write = true[ FD ]
Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) -->Line_94 $$ if (mp3Input.hasID3v11tag()) [ CD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_94 $$ if (mp3Input.hasID3v11tag()) [ FD ]
Line_94 $$ if (mp3Input.hasID3v11tag()) -->Line_94 $$ if (mp3Input.hasID3v11tag()) [ CD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_94 $$ if (mp3Input.hasID3v11tag()) [ FD ]
Line_94 $$ if (mp3Input.hasID3v11tag()) -->Line_95 $$ mp3Output.setID3v11tag(mp3Input.getID3v11tag())[ CD ]
Line_84 $$ MP3File mp3Output = new MP3File(destinationFile)-->Line_95 $$ mp3Output.setID3v11tag(mp3Input.getID3v11tag())[ FD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_95 $$ mp3Output.setID3v11tag(mp3Input.getID3v11tag())[ FD ]
Line_94 $$ if (mp3Input.hasID3v11tag()) -->Line_96 $$ write = true[ CD ]
Line_85 $$ boolean write = false-->Line_96 $$ write = true[ FD ]
Line_92 $$ write = true-->Line_96 $$ write = true[ FD ]
Line_96 $$ write = true-->Line_96 $$ write = true[ FD ]
Line_82 $$ if (Boolean.parseBoolean(encodeFileCard.getCopyTag().getValue())) -->Line_98 $$ if (write)[ CD ]
Line_98 $$ if (write)-->Line_98 $$ mp3Output.write()[ CD ]
Line_84 $$ MP3File mp3Output = new MP3File(destinationFile)-->Line_98 $$ mp3Output.write()[ FD ]
Line_105 $$ if (!(e instanceof IOException && encodingTerminated))-->Line_105 $$ if (!(e instanceof IOException && encodingTerminated))[ CD ]
Line_105 $$ if (!(e instanceof IOException && encodingTerminated))-->Line_105 $$ MainWindowInterface.showError(e)[ CD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_106 $$ if (destinationFile != null)[ FD ]
Line_4 $$ File destinationFile = null-->Line_106 $$ if (destinationFile != null)[ FD ]
Line_106 $$ if (destinationFile != null)-->Line_106 $$ destinationFile.delete()[ CD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_106 $$ destinationFile.delete()[ FD ]
Line_4 $$ File destinationFile = null-->Line_106 $$ destinationFile.delete()[ FD ]
Line_8 $$ while ((element = getNextFileElement()) != null) -->Line_9 $$ File origFile = element.getFile()[ FD ]
Line_9 $$ File origFile = element.getFile()-->Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())[ FD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_11 $$ if (!destinationFile.getParentFile().exists()) [ FD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_12 $$ destinationFile.getParentFile().mkdirs()[ FD ]
Line_9 $$ File origFile = element.getFile()-->Line_14 $$ actualFileLabel.setText(origFile.getName())[ FD ]
Line_9 $$ File origFile = element.getFile()-->Line_15 $$ actualFileModel.setMaximum((int) origFile.length())[ FD ]
Line_19 $$ Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue())-->Line_20 $$ bitrateMatcher.find()[ FD ]
Line_19 $$ Matcher bitrateMatcher = bitratePattern.matcher(encodeFileCard.getBitrate().getValue())-->Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_24 $$ command.add(encoderFile.getCanonicalPath())[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_25 $$ command.add("--mp3input")[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_26 $$ command.add("-m")[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_27 $$ command.add("j")[ FD ]
Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")-->Line_29 $$ if (Util.isNotEmpty(sampleFreq)) [ FD ]
Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")-->Line_29 $$ if (Util.isNotEmpty(sampleFreq)) [ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_30 $$ command.add("--resample")[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_31 $$ command.add(sampleFreq)[ FD ]
Line_28 $$ String sampleFreq = Settings.getSetting("encode.sample.freq")-->Line_31 $$ command.add(sampleFreq)[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_34 $$ command.add("-q")[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_35 $$ command.add(Integer.toString(quality.getValue()))[ FD ]
Line_33 $$ QualityElement quality = (QualityElement) ((JComboBox) encodeFileCard.getQuality().getValueComponent()).getSelectedItem()-->Line_35 $$ command.add(Integer.toString(quality.getValue()))[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_36 $$ command.add("-b")[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_37 $$ command.add(Integer.toString(bitrate))[ FD ]
Line_17 $$ int bitrate-->Line_37 $$ command.add(Integer.toString(bitrate))[ FD ]
Line_21 $$ bitrate = Integer.parseInt(bitrateMatcher.group(1))-->Line_37 $$ command.add(Integer.toString(bitrate))[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_38 $$ command.add("--cbr")[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_39 $$ command.add("-")[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_40 $$ command.add(destinationFile.getCanonicalPath())[ FD ]
Line_10 $$ destinationFile = new File(encodeFileCard.getDestinationFolder().getValue(), origFile.getName())-->Line_40 $$ command.add(destinationFile.getCanonicalPath())[ FD ]
Line_43 $$ boolean first = true-->Line_45 $$ if (!first)[ FD ]
Line_47 $$ first = false-->Line_45 $$ if (!first)[ FD ]
Line_43 $$ boolean first = true-->Line_45 $$ if (!first)[ FD ]
Line_47 $$ first = false-->Line_45 $$ if (!first)[ FD ]
Line_42 $$ StringBuilder commandLine = new StringBuilder()-->Line_45 $$ commandLine.append(" ")[ FD ]
Line_42 $$ StringBuilder commandLine = new StringBuilder()-->Line_46 $$ commandLine.append(part)[ FD ]
Line_44 $$ for (String part : command) -->Line_46 $$ commandLine.append(part)[ FD ]
Line_42 $$ StringBuilder commandLine = new StringBuilder()-->Line_49 $$ LOG.debug("Command line: " + commandLine.toString())[ FD ]
Line_23 $$ List<String> command = new LinkedList<String>()-->Line_51 $$ encodingProcess = runtime.exec(command.toArray(new String[0]))[ FD ]
Line_9 $$ File origFile = element.getFile()-->Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)[ FD ]
Line_53 $$ InputStream fileStream = null-->Line_56 $$ IOUtils.copy(fileStream, encodingProcess.getOutputStream())[ FD ]
Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)-->Line_56 $$ IOUtils.copy(fileStream, encodingProcess.getOutputStream())[ FD ]
Line_53 $$ InputStream fileStream = null-->Line_59 $$ IOUtils.closeQuietly(fileStream)[ FD ]
Line_55 $$ fileStream = new PositionNotifierInputStream(new FileInputStream(origFile), origFile.length(), 2048, this)-->Line_59 $$ IOUtils.closeQuietly(fileStream)[ FD ]
Line_61 $$ InputStream processOut = null-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_64 $$ StringWriter sw = new StringWriter()-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_69 $$ sw = new StringWriter()-->Line_65 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_61 $$ InputStream processOut = null-->Line_67 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_67 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_67 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_61 $$ InputStream processOut = null-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_64 $$ StringWriter sw = new StringWriter()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_69 $$ sw = new StringWriter()-->Line_70 $$ IOUtils.copy(processOut, sw)[ FD ]
Line_61 $$ InputStream processOut = null-->Line_73 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_63 $$ processOut = encodingProcess.getInputStream()-->Line_73 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_68 $$ processOut = encodingProcess.getErrorStream()-->Line_73 $$ IOUtils.closeQuietly(processOut)[ FD ]
Line_77 $$ int result = encodingProcess.waitFor()-->Line_79 $$ if (result != 0) [ FD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_86 $$ if (mp3Input.hasID3v2tag()) [ FD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_86 $$ if (mp3Input.hasID3v2tag()) [ FD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_88 $$ for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) [ FD ]
Line_87 $$ ID3v2Tag id3v2Tag = new ID3v2Tag()-->Line_89 $$ id3v2Tag.addFrame(frame)[ FD ]
Line_88 $$ for (ID3v2Frame frame : mp3Input.getID3v2tag().getAllframes()) -->Line_89 $$ id3v2Tag.addFrame(frame)[ FD ]
Line_84 $$ MP3File mp3Output = new MP3File(destinationFile)-->Line_91 $$ mp3Output.setID3v2tag(id3v2Tag)[ FD ]
Line_87 $$ ID3v2Tag id3v2Tag = new ID3v2Tag()-->Line_91 $$ mp3Output.setID3v2tag(id3v2Tag)[ FD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_94 $$ if (mp3Input.hasID3v11tag()) [ FD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_94 $$ if (mp3Input.hasID3v11tag()) [ FD ]
Line_84 $$ MP3File mp3Output = new MP3File(destinationFile)-->Line_95 $$ mp3Output.setID3v11tag(mp3Input.getID3v11tag())[ FD ]
Line_83 $$ MP3File mp3Input = new MP3File(origFile)-->Line_95 $$ mp3Output.setID3v11tag(mp3Input.getID3v11tag())[ FD ]
Line_84 $$ MP3File mp3Output = new MP3File(destinationFile)-->Line_98 $$ mp3Output.write()[ FD ]
