Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void copyFile(File source, File target) throws Exception [ CD ]
Line_2 $$ public static void copyFile(File source, File target) throws Exception -->Line_3 $$ if (source.isDirectory()) [ CD ]
Line_2 $$ public static void copyFile(File source, File target) throws Exception -->Line_3 $$ if (source.isDirectory()) [ FD ]
Line_3 $$ if (source.isDirectory()) -->Line_3 $$ if (source.isDirectory()) [ CD ]
Line_2 $$ public static void copyFile(File source, File target) throws Exception -->Line_3 $$ if (source.isDirectory()) [ FD ]
Line_3 $$ if (source.isDirectory()) -->Line_4 $$ if (!target.isDirectory()) [ CD ]
Line_4 $$ if (!target.isDirectory()) -->Line_4 $$ if (!target.isDirectory()) [ CD ]
Line_4 $$ if (!target.isDirectory()) -->Line_4 $$ if (!target.isDirectory()) [ CD ]
Line_2 $$ public static void copyFile(File source, File target) throws Exception -->Line_4 $$ if (!target.isDirectory()) [ FD ]
Line_4 $$ if (!target.isDirectory()) -->Line_5 $$ target.mkdirs()[ CD ]
Line_2 $$ public static void copyFile(File source, File target) throws Exception -->Line_5 $$ target.mkdirs()[ FD ]
Line_3 $$ if (source.isDirectory()) -->Line_7 $$ String[] children = source.list()[ CD ]
Line_7 $$ String[] children = source.list()-->Line_7 $$ String[] children = source.list()[ CD ]
Line_2 $$ public static void copyFile(File source, File target) throws Exception -->Line_7 $$ String[] children = source.list()[ FD ]
Line_3 $$ if (source.isDirectory()) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ CD ]
Line_3 $$ if (source.isDirectory()) -->Line_3 $$ if (source.isDirectory()) [ CD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ CD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_9 $$ copyFile(new File(source, children[i]), new File(target, children[i]))[ CD ]
Line_3 $$ if (source.isDirectory()) -->Line_12 $$ FileChannel inChannel = new FileInputStream(source).getChannel()[ CD ]
Line_12 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_12 $$ FileChannel inChannel = new FileInputStream(source).getChannel()[ CD ]
Line_3 $$ if (source.isDirectory()) -->Line_13 $$ FileChannel outChannel = new FileOutputStream(target).getChannel()[ CD ]
Line_13 $$ FileChannel outChannel = new FileOutputStream(target).getChannel()-->Line_13 $$ FileChannel outChannel = new FileOutputStream(target).getChannel()[ CD ]
Line_16 $$ long size = inChannel.size()-->Line_16 $$ long size = inChannel.size()[ CD ]
Line_12 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_16 $$ long size = inChannel.size()[ FD ]
Line_17 $$ long position = 0-->Line_18 $$ while (position < size) [ FD ]
Line_16 $$ long size = inChannel.size()-->Line_18 $$ while (position < size) [ FD ]
Line_18 $$ while (position < size) -->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ CD ]
Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
Line_17 $$ long position = 0-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ CD ]
Line_12 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
Line_17 $$ long position = 0-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
Line_15 $$ int maxCount = (64 * 1024 * 1024) - (32 * 1024)-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
Line_13 $$ FileChannel outChannel = new FileOutputStream(target).getChannel()-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
Line_12 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_25 $$ if (inChannel != null)[ FD ]
Line_25 $$ if (inChannel != null)-->Line_25 $$ inChannel.close()[ CD ]
Line_12 $$ FileChannel inChannel = new FileInputStream(source).getChannel()-->Line_25 $$ inChannel.close()[ FD ]
Line_13 $$ FileChannel outChannel = new FileOutputStream(target).getChannel()-->Line_26 $$ if (outChannel != null)[ FD ]
Line_26 $$ if (outChannel != null)-->Line_26 $$ outChannel.close()[ CD ]
Line_13 $$ FileChannel outChannel = new FileOutputStream(target).getChannel()-->Line_26 $$ outChannel.close()[ FD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ FD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ FD ]
Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)-->Line_18 $$ while (position < size) [ FD ]
Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)-->Line_18 $$ while (position < size) [ FD ]
Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)-->Line_19 $$ position += inChannel.transferTo(position, maxCount, outChannel)[ FD ]
