Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) [ CD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) [ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) [ CD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) [ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_5 $$ File inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + "CompleteQualifyingDataInByteFormat.txt")[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()[ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()-->Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_7 $$ int filesize = (int) inC.size()[ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()-->Line_7 $$ int filesize = (int) inC.size()[ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ CD ]
Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()-->Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ FD ]
Line_7 $$ int filesize = (int) inC.size()-->Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_10 $$ while (qualmappedfile.hasRemaining()) [ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) [ CD ]
Line_10 $$ while (qualmappedfile.hasRemaining()) -->Line_10 $$ while (qualmappedfile.hasRemaining()) [ CD ]
Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_10 $$ while (qualmappedfile.hasRemaining()) [ FD ]
Line_10 $$ while (qualmappedfile.hasRemaining()) -->Line_11 $$ short movie = qualmappedfile.getShort()[ CD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_11 $$ short movie = qualmappedfile.getShort()[ CD ]
Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_11 $$ short movie = qualmappedfile.getShort()[ FD ]
Line_10 $$ while (qualmappedfile.hasRemaining()) -->Line_12 $$ int customer = qualmappedfile.getInt()[ CD ]
Line_12 $$ int customer = qualmappedfile.getInt()-->Line_12 $$ int customer = qualmappedfile.getInt()[ CD ]
Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_12 $$ int customer = qualmappedfile.getInt()[ FD ]
Line_10 $$ while (qualmappedfile.hasRemaining()) -->Line_13 $$ if (qualMap.containsKey(movie)) [ CD ]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)-->Line_13 $$ if (qualMap.containsKey(movie)) [ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_13 $$ if (qualMap.containsKey(movie)) [ FD ]
Line_13 $$ if (qualMap.containsKey(movie)) -->Line_13 $$ if (qualMap.containsKey(movie)) [ CD ]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)-->Line_13 $$ if (qualMap.containsKey(movie)) [ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_13 $$ if (qualMap.containsKey(movie)) [ FD ]
Line_13 $$ if (qualMap.containsKey(movie)) -->Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)[ CD ]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)-->Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)[ FD ]
Line_13 $$ if (qualMap.containsKey(movie)) -->Line_15 $$ arr.add(customer)[ CD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_15 $$ arr.add(customer)[ FD ]
Line_12 $$ int customer = qualmappedfile.getInt()-->Line_15 $$ arr.add(customer)[ FD ]
Line_13 $$ if (qualMap.containsKey(movie)) -->Line_16 $$ qualMap.put(movie, arr)[ CD ]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)-->Line_16 $$ qualMap.put(movie, arr)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_16 $$ qualMap.put(movie, arr)[ FD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_16 $$ qualMap.put(movie, arr)[ FD ]
Line_13 $$ if (qualMap.containsKey(movie)) -->Line_19 $$ arr.add(customer)[ CD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_19 $$ arr.add(customer)[ FD ]
Line_12 $$ int customer = qualmappedfile.getInt()-->Line_19 $$ arr.add(customer)[ FD ]
Line_13 $$ if (qualMap.containsKey(movie)) -->Line_20 $$ qualMap.put(movie, arr)[ CD ]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)-->Line_20 $$ qualMap.put(movie, arr)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_20 $$ qualMap.put(movie, arr)[ FD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_20 $$ qualMap.put(movie, arr)[ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_23 $$ System.out.println("Populated qualifying hashmap")[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_24 $$ File outFile = new File(completePath + fSep + "SmartGRAPE" + fSep + predictionOutputFileName)[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()[ CD ]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()-->Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_26 $$ ByteBuffer buf[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_27 $$ TShortObjectHashMap movieDiffStats[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_28 $$ double finalPrediction[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_29 $$ short[] movies = qualMap.keys()[ CD ]
Line_29 $$ short[] movies = qualMap.keys()-->Line_29 $$ short[] movies = qualMap.keys()[ CD ]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)-->Line_29 $$ short[] movies = qualMap.keys()[ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_30 $$ Arrays.sort(movies)[ CD ]
Line_29 $$ short[] movies = qualMap.keys()-->Line_30 $$ Arrays.sort(movies)[ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) [ CD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_32 $$ short movieToProcess = movies[i][ CD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ CD ]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_27 $$ TShortObjectHashMap movieDiffStats-->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ CD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_34 $$ System.out.println(movieDiffStats.size())[ CD ]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_34 $$ System.out.println(movieDiffStats.size())[ FD ]
Line_27 $$ TShortObjectHashMap movieDiffStats-->Line_34 $$ System.out.println(movieDiffStats.size())[ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)[ CD ]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1)-->Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)[ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ CD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ CD ]
Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)-->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ CD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ CD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)[ CD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)[ CD ]
Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)-->Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ CD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_28 $$ double finalPrediction-->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ CD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_27 $$ TShortObjectHashMap movieDiffStats-->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_39 $$ if (finalPrediction == finalPrediction) [ CD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_28 $$ double finalPrediction-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_28 $$ double finalPrediction-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_39 $$ if (finalPrediction == finalPrediction) -->Line_40 $$ if (finalPrediction < 1.0)[ CD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_40 $$ if (finalPrediction < 1.0)[ FD ]
Line_28 $$ double finalPrediction-->Line_40 $$ if (finalPrediction < 1.0)[ FD ]
Line_40 $$ if (finalPrediction < 1.0)-->Line_40 $$ finalPrediction = 1.0[ CD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_40 $$ finalPrediction = 1.0[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_40 $$ finalPrediction = 1.0[ FD ]
Line_28 $$ double finalPrediction-->Line_40 $$ finalPrediction = 1.0[ FD ]
Line_40 $$ if (finalPrediction < 1.0)-->Line_40 $$ if (finalPrediction > 5.0)[ CD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_40 $$ if (finalPrediction > 5.0)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_40 $$ if (finalPrediction > 5.0)[ FD ]
Line_28 $$ double finalPrediction-->Line_40 $$ if (finalPrediction > 5.0)[ FD ]
Line_40 $$ if (finalPrediction > 5.0)-->Line_40 $$ finalPrediction = 5.0[ CD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_40 $$ finalPrediction = 5.0[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_40 $$ finalPrediction = 5.0[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_40 $$ finalPrediction = 5.0[ FD ]
Line_28 $$ double finalPrediction-->Line_40 $$ finalPrediction = 5.0[ FD ]
Line_39 $$ if (finalPrediction == finalPrediction) -->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ CD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_28 $$ double finalPrediction-->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ CD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_42 $$ buf = ByteBuffer.allocate(10)[ CD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_42 $$ buf = ByteBuffer.allocate(10)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_42 $$ buf = ByteBuffer.allocate(10)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_42 $$ buf = ByteBuffer.allocate(10)[ CD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_43 $$ buf.putShort(movieToProcess)[ CD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_43 $$ buf.putShort(movieToProcess)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_43 $$ buf.putShort(movieToProcess)[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_43 $$ buf.putShort(movieToProcess)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_44 $$ buf.putInt(customerToProcess)[ CD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_44 $$ buf.putInt(customerToProcess)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_44 $$ buf.putInt(customerToProcess)[ FD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_44 $$ buf.putInt(customerToProcess)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_45 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ CD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_45 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ FD ]
Line_26 $$ ByteBuffer buf-->Line_45 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_46 $$ buf.flip()[ CD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_46 $$ buf.flip()[ FD ]
Line_26 $$ ByteBuffer buf-->Line_46 $$ buf.flip()[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_47 $$ outC.write(buf)[ CD ]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()-->Line_47 $$ outC.write(buf)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_47 $$ outC.write(buf)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_47 $$ outC.write(buf)[ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_50 $$ outC.close()[ CD ]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()-->Line_50 $$ outC.close()[ FD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_51 $$ return true[ CD ]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) -->Line_52 $$ if (Type.equalsIgnoreCase("Probe")) [ CD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_52 $$ if (Type.equalsIgnoreCase("Probe")) [ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_52 $$ if (Type.equalsIgnoreCase("Probe")) [ CD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_52 $$ if (Type.equalsIgnoreCase("Probe")) [ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_54 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()[ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()-->Line_55 $$ int filesize = (int) inC.size()[ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)[ CD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ CD ]
Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ CD ]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel()-->Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ FD ]
Line_7 $$ int filesize = (int) inC.size()-->Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)[ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_58 $$ while (probemappedfile.hasRemaining()) [ CD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_52 $$ if (Type.equalsIgnoreCase("Probe")) [ CD ]
Line_58 $$ while (probemappedfile.hasRemaining()) -->Line_58 $$ while (probemappedfile.hasRemaining()) [ CD ]
Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_58 $$ while (probemappedfile.hasRemaining()) [ FD ]
Line_58 $$ while (probemappedfile.hasRemaining()) -->Line_59 $$ short movie = probemappedfile.getShort()[ CD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_59 $$ short movie = probemappedfile.getShort()[ CD ]
Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_59 $$ short movie = probemappedfile.getShort()[ FD ]
Line_58 $$ while (probemappedfile.hasRemaining()) -->Line_60 $$ int customer = probemappedfile.getInt()[ CD ]
Line_60 $$ int customer = probemappedfile.getInt()-->Line_60 $$ int customer = probemappedfile.getInt()[ CD ]
Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_60 $$ int customer = probemappedfile.getInt()[ FD ]
Line_58 $$ while (probemappedfile.hasRemaining()) -->Line_61 $$ byte rating = probemappedfile.get()[ CD ]
Line_61 $$ byte rating = probemappedfile.get()-->Line_61 $$ byte rating = probemappedfile.get()[ CD ]
Line_57 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize)-->Line_61 $$ byte rating = probemappedfile.get()[ FD ]
Line_58 $$ while (probemappedfile.hasRemaining()) -->Line_62 $$ if (probeMap.containsKey(movie)) [ CD ]
Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_62 $$ if (probeMap.containsKey(movie)) -->Line_62 $$ if (probeMap.containsKey(movie)) [ CD ]
Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_62 $$ if (probeMap.containsKey(movie)) -->Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)[ CD ]
Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)-->Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)[ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)[ FD ]
Line_62 $$ if (probeMap.containsKey(movie)) -->Line_64 $$ actualRatings.put(customer, rating)[ CD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_64 $$ actualRatings.put(customer, rating)[ FD ]
Line_60 $$ int customer = probemappedfile.getInt()-->Line_64 $$ actualRatings.put(customer, rating)[ FD ]
Line_12 $$ int customer = qualmappedfile.getInt()-->Line_64 $$ actualRatings.put(customer, rating)[ FD ]
Line_61 $$ byte rating = probemappedfile.get()-->Line_64 $$ actualRatings.put(customer, rating)[ FD ]
Line_62 $$ if (probeMap.containsKey(movie)) -->Line_65 $$ probeMap.put(movie, actualRatings)[ CD ]
Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)-->Line_65 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_65 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_65 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_65 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_62 $$ if (probeMap.containsKey(movie)) -->Line_68 $$ actualRatings.put(customer, rating)[ CD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_68 $$ actualRatings.put(customer, rating)[ FD ]
Line_60 $$ int customer = probemappedfile.getInt()-->Line_68 $$ actualRatings.put(customer, rating)[ FD ]
Line_12 $$ int customer = qualmappedfile.getInt()-->Line_68 $$ actualRatings.put(customer, rating)[ FD ]
Line_61 $$ byte rating = probemappedfile.get()-->Line_68 $$ actualRatings.put(customer, rating)[ FD ]
Line_62 $$ if (probeMap.containsKey(movie)) -->Line_69 $$ probeMap.put(movie, actualRatings)[ CD ]
Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)-->Line_69 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_69 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_69 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_69 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_72 $$ System.out.println("Populated probe hashmap")[ CD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_74 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()[ CD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_78 $$ short[] movies = probeMap.keys()[ CD ]
Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)-->Line_78 $$ short[] movies = probeMap.keys()[ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_79 $$ Arrays.sort(movies)[ CD ]
Line_29 $$ short[] movies = qualMap.keys()-->Line_79 $$ Arrays.sort(movies)[ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_52 $$ if (Type.equalsIgnoreCase("Probe")) [ CD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_81 $$ short movieToProcess = movies[i][ CD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ CD ]
Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_27 $$ TShortObjectHashMap movieDiffStats-->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ CD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_81 $$ short movieToProcess = movies[i]-->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String slopeOneDataFolderName) -->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)[ CD ]
Line_56 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1)-->Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)[ FD ]
Line_81 $$ short movieToProcess = movies[i]-->Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)[ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_84 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys())[ CD ]
Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)-->Line_84 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys())[ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ CD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ CD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_84 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys())-->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)-->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ CD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ CD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)[ CD ]
Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)[ CD ]
Line_84 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys())-->Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)-->Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)[ CD ]
Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)-->Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)[ CD ]
Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)-->Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)[ FD ]
Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)[ FD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ CD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_28 $$ double finalPrediction-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ CD ]
Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_27 $$ TShortObjectHashMap movieDiffStats-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_89 $$ if (finalPrediction == finalPrediction) [ CD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_28 $$ double finalPrediction-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_28 $$ double finalPrediction-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_89 $$ if (finalPrediction == finalPrediction) -->Line_90 $$ if (finalPrediction < 1.0)[ CD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_28 $$ double finalPrediction-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_90 $$ if (finalPrediction < 1.0)-->Line_90 $$ finalPrediction = 1.0[ CD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ finalPrediction = 1.0[ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_90 $$ finalPrediction = 1.0[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ finalPrediction = 1.0[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_90 $$ finalPrediction = 1.0[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_90 $$ finalPrediction = 1.0[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_90 $$ finalPrediction = 1.0[ FD ]
Line_28 $$ double finalPrediction-->Line_90 $$ finalPrediction = 1.0[ FD ]
Line_90 $$ if (finalPrediction < 1.0)-->Line_90 $$ if (finalPrediction > 5.0)[ CD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_28 $$ double finalPrediction-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_90 $$ if (finalPrediction > 5.0)-->Line_90 $$ finalPrediction = 5.0[ CD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_90 $$ finalPrediction = 5.0-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_28 $$ double finalPrediction-->Line_90 $$ finalPrediction = 5.0[ FD ]
Line_89 $$ if (finalPrediction == finalPrediction) -->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ CD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_90 $$ finalPrediction = 5.0-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_28 $$ double finalPrediction-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ CD ]
Line_81 $$ short movieToProcess = movies[i]-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_92 $$ buf = ByteBuffer.allocate(11)[ CD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_92 $$ buf = ByteBuffer.allocate(11)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_92 $$ buf = ByteBuffer.allocate(11)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_92 $$ buf = ByteBuffer.allocate(11)[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_92 $$ buf = ByteBuffer.allocate(11)[ CD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_93 $$ buf.putShort(movieToProcess)[ CD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_93 $$ buf.putShort(movieToProcess)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_93 $$ buf.putShort(movieToProcess)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_93 $$ buf.putShort(movieToProcess)[ FD ]
Line_81 $$ short movieToProcess = movies[i]-->Line_93 $$ buf.putShort(movieToProcess)[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_93 $$ buf.putShort(movieToProcess)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_94 $$ buf.putInt(customerToProcess)[ CD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_94 $$ buf.putInt(customerToProcess)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_94 $$ buf.putInt(customerToProcess)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_94 $$ buf.putInt(customerToProcess)[ FD ]
Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_94 $$ buf.putInt(customerToProcess)[ FD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_94 $$ buf.putInt(customerToProcess)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_95 $$ buf.put(rating)[ CD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_95 $$ buf.put(rating)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_95 $$ buf.put(rating)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_95 $$ buf.put(rating)[ FD ]
Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)-->Line_95 $$ buf.put(rating)[ FD ]
Line_61 $$ byte rating = probemappedfile.get()-->Line_95 $$ buf.put(rating)[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_96 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ CD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_96 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_96 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ FD ]
Line_26 $$ ByteBuffer buf-->Line_96 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_97 $$ buf.flip()[ CD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_97 $$ buf.flip()[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_97 $$ buf.flip()[ FD ]
Line_26 $$ ByteBuffer buf-->Line_97 $$ buf.flip()[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_98 $$ outC.write(buf)[ CD ]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()-->Line_98 $$ outC.write(buf)[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_98 $$ outC.write(buf)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_98 $$ outC.write(buf)[ FD ]
Line_26 $$ ByteBuffer buf-->Line_98 $$ outC.write(buf)[ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_101 $$ outC.close()[ CD ]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel()-->Line_101 $$ outC.close()[ FD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_102 $$ return true[ CD ]
Line_52 $$ if (Type.equalsIgnoreCase("Probe")) -->Line_103 $$ return false[ CD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_13 $$ if (qualMap.containsKey(movie)) [ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_13 $$ if (qualMap.containsKey(movie)) [ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)[ FD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_15 $$ arr.add(customer)[ FD ]
Line_12 $$ int customer = qualmappedfile.getInt()-->Line_15 $$ arr.add(customer)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_16 $$ qualMap.put(movie, arr)[ FD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_16 $$ qualMap.put(movie, arr)[ FD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_19 $$ arr.add(customer)[ FD ]
Line_12 $$ int customer = qualmappedfile.getInt()-->Line_19 $$ arr.add(customer)[ FD ]
Line_11 $$ short movie = qualmappedfile.getShort()-->Line_20 $$ qualMap.put(movie, arr)[ FD ]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie)-->Line_20 $$ qualMap.put(movie, arr)[ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_31 $$ for (int i = 0; i < movies.length; i++) -->Line_31 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)-->Line_34 $$ System.out.println(movieDiffStats.size())[ FD ]
Line_32 $$ short movieToProcess = movies[i]-->Line_35 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess)[ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_36 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_39 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_40 $$ if (finalPrediction < 1.0)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_40 $$ if (finalPrediction < 1.0)[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_40 $$ if (finalPrediction < 1.0)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_40 $$ if (finalPrediction < 1.0)[ FD ]
Line_38 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_40 $$ if (finalPrediction > 5.0)[ FD ]
Line_40 $$ finalPrediction = 1.0-->Line_40 $$ if (finalPrediction > 5.0)[ FD ]
Line_40 $$ finalPrediction = 5.0-->Line_40 $$ if (finalPrediction > 5.0)[ FD ]
Line_41 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_40 $$ if (finalPrediction > 5.0)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_43 $$ buf.putShort(movieToProcess)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_44 $$ buf.putInt(customerToProcess)[ FD ]
Line_37 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_44 $$ buf.putInt(customerToProcess)[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_45 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_46 $$ buf.flip()[ FD ]
Line_42 $$ buf = ByteBuffer.allocate(10)-->Line_47 $$ outC.write(buf)[ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_62 $$ if (probeMap.containsKey(movie)) [ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)[ FD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_64 $$ actualRatings.put(customer, rating)[ FD ]
Line_60 $$ int customer = probemappedfile.getInt()-->Line_64 $$ actualRatings.put(customer, rating)[ FD ]
Line_61 $$ byte rating = probemappedfile.get()-->Line_64 $$ actualRatings.put(customer, rating)[ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_65 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_65 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_68 $$ actualRatings.put(customer, rating)[ FD ]
Line_60 $$ int customer = probemappedfile.getInt()-->Line_68 $$ actualRatings.put(customer, rating)[ FD ]
Line_61 $$ byte rating = probemappedfile.get()-->Line_68 $$ actualRatings.put(customer, rating)[ FD ]
Line_59 $$ short movie = probemappedfile.getShort()-->Line_69 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_63 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie)-->Line_69 $$ probeMap.put(movie, actualRatings)[ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_80 $$ for (int i = 0; i < movies.length; i++) -->Line_80 $$ for (int i = 0; i < movies.length; i++) [ FD ]
Line_81 $$ short movieToProcess = movies[i]-->Line_82 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, slopeOneDataFolderName)[ FD ]
Line_81 $$ short movieToProcess = movies[i]-->Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)[ FD ]
Line_83 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess)-->Line_84 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys())[ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) [ FD ]
Line_85 $$ for (int j = 0; j < customersToProcess.size(); j++) -->Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)[ FD ]
Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)[ FD ]
Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)[ FD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_90 $$ finalPrediction = 5.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_90 $$ finalPrediction = 5.0-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_89 $$ if (finalPrediction == finalPrediction) [ FD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_90 $$ finalPrediction = 5.0-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_90 $$ if (finalPrediction < 1.0)[ FD ]
Line_88 $$ finalPrediction = predictSlopeOneRating(customerToProcess, movieDiffStats)-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_90 $$ finalPrediction = 1.0-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_90 $$ finalPrediction = 5.0-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_91 $$ finalPrediction = GetAveragePrediction(movieToProcess)-->Line_90 $$ if (finalPrediction > 5.0)[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_93 $$ buf.putShort(movieToProcess)[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_94 $$ buf.putInt(customerToProcess)[ FD ]
Line_86 $$ int customerToProcess = customersToProcess.getQuick(j)-->Line_94 $$ buf.putInt(customerToProcess)[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_95 $$ buf.put(rating)[ FD ]
Line_87 $$ byte rating = custRatingsToProcess.get(customerToProcess)-->Line_95 $$ buf.put(rating)[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_96 $$ buf.putFloat(new Double(finalPrediction).floatValue())[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_97 $$ buf.flip()[ FD ]
Line_92 $$ buf = ByteBuffer.allocate(11)-->Line_98 $$ outC.write(buf)[ FD ]
