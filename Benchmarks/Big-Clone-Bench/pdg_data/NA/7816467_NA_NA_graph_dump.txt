Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException [ CD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_3 $$ CharBuffer charBuffer = null[ CD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_4 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, encoding))[ CD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_5 $$ File backingFile = new File(backingFilename)[ CD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_6 $$ this.decodedFile = File.createTempFile(backingFile.getName(), WRITE_ENCODING, backingFile.getParentFile())[ CD ]
Line_6 $$ this.decodedFile = File.createTempFile(backingFile.getName(), WRITE_ENCODING, backingFile.getParentFile())-->Line_6 $$ this.decodedFile = File.createTempFile(backingFile.getName(), WRITE_ENCODING, backingFile.getParentFile())[ CD ]
Line_5 $$ File backingFile = new File(backingFilename)-->Line_6 $$ this.decodedFile = File.createTempFile(backingFile.getName(), WRITE_ENCODING, backingFile.getParentFile())[ FD ]
Line_5 $$ File backingFile = new File(backingFilename)-->Line_6 $$ this.decodedFile = File.createTempFile(backingFile.getName(), WRITE_ENCODING, backingFile.getParentFile())[ FD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_7 $$ FileOutputStream fos[ CD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_8 $$ fos = new FileOutputStream(this.decodedFile)[ CD ]
Line_7 $$ FileOutputStream fos-->Line_8 $$ fos = new FileOutputStream(this.decodedFile)[ FD ]
Line_8 $$ fos = new FileOutputStream(this.decodedFile)-->Line_8 $$ fos = new FileOutputStream(this.decodedFile)[ FD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_9 $$ IOUtils.copy(reader, fos, WRITE_ENCODING)[ CD ]
Line_4 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inStream, encoding))-->Line_9 $$ IOUtils.copy(reader, fos, WRITE_ENCODING)[ FD ]
Line_7 $$ FileOutputStream fos-->Line_9 $$ IOUtils.copy(reader, fos, WRITE_ENCODING)[ FD ]
Line_8 $$ fos = new FileOutputStream(this.decodedFile)-->Line_9 $$ IOUtils.copy(reader, fos, WRITE_ENCODING)[ FD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_10 $$ fos.close()[ CD ]
Line_7 $$ FileOutputStream fos-->Line_10 $$ fos.close()[ FD ]
Line_8 $$ fos = new FileOutputStream(this.decodedFile)-->Line_10 $$ fos.close()[ FD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_11 $$ charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).asCharBuffer()[ CD ]
Line_3 $$ CharBuffer charBuffer = null-->Line_11 $$ charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).asCharBuffer()[ FD ]
Line_11 $$ charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).asCharBuffer()-->Line_11 $$ charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).asCharBuffer()[ FD ]
Line_11 $$ charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).asCharBuffer()-->Line_11 $$ charBuffer = getReadOnlyMemoryMappedBuffer(this.decodedFile).asCharBuffer()[ CD ]
Line_2 $$ private CharBuffer decodeToFile(ReplayInputStream inStream, String backingFilename, String encoding) throws IOException -->Line_12 $$ return charBuffer[ CD ]
