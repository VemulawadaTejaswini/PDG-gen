Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Node external_open_url(Node startAt) throws Exception [ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_3 $$ if (inUse) [ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_7 $$ startAt.isGoodArgsLength(false, 2)[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_7 $$ startAt.isGoodArgsLength(false, 2)[ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())[ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_9 $$ String protocol = url.getProtocol()[ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_9 $$ String protocol = url.getProtocol()[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_9 $$ String protocol = url.getProtocol()[ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_10 $$ String mode = null[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_11 $$ Node props = null[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_12 $$ Node datas = null[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_13 $$ byte[] buffer = null[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_14 $$ String old_c = null[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_15 $$ String old_r = null[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_16 $$ int max_i = startAt.size() - 1[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_16 $$ int max_i = startAt.size() - 1[ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_17 $$ if (startAt.elementAt(max_i).getSymbolicValue_undestructive().isVList()) [ CD ]
Line_17 $$ if (startAt.elementAt(max_i).getSymbolicValue_undestructive().isVList()) -->Line_17 $$ if (startAt.elementAt(max_i).getSymbolicValue_undestructive().isVList()) [ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_17 $$ if (startAt.elementAt(max_i).getSymbolicValue_undestructive().isVList()) [ FD ]
Line_16 $$ int max_i = startAt.size() - 1-->Line_17 $$ if (startAt.elementAt(max_i).getSymbolicValue_undestructive().isVList()) [ FD ]
Line_17 $$ if (startAt.elementAt(max_i).getSymbolicValue_undestructive().isVList()) -->Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)[ CD ]
Line_11 $$ Node props = null-->Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)[ FD ]
Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)-->Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)[ FD ]
Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)-->Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)[ FD ]
Line_16 $$ int max_i = startAt.size() - 1-->Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)[ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_20 $$ int i_ = 2[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_21 $$ if (i_ <= max_i) [ CD ]
Line_20 $$ int i_ = 2-->Line_21 $$ if (i_ <= max_i) [ FD ]
Line_16 $$ int max_i = startAt.size() - 1-->Line_21 $$ if (i_ <= max_i) [ FD ]
Line_21 $$ if (i_ <= max_i) -->Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()[ CD ]
Line_10 $$ String mode = null-->Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()[ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()[ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()[ FD ]
Line_20 $$ int i_ = 2-->Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()[ FD ]
Line_21 $$ if (i_ <= max_i) -->Line_23 $$ if (protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("https")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_23 $$ if (protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("https")) [ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_23 $$ if (protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("https")) [ FD ]
Line_23 $$ if (protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("https")) -->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ CD ]
Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) -->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ CD ]
Line_10 $$ String mode = null-->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_10 $$ String mode = null-->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_10 $$ String mode = null-->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_24 $$ if (!(mode.equals("GET") || mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_23 $$ if (protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("https")) -->Line_27 $$ if (protocol.equalsIgnoreCase("ftp") || protocol.equalsIgnoreCase("file")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_27 $$ if (protocol.equalsIgnoreCase("ftp") || protocol.equalsIgnoreCase("file")) [ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_27 $$ if (protocol.equalsIgnoreCase("ftp") || protocol.equalsIgnoreCase("file")) [ FD ]
Line_27 $$ if (protocol.equalsIgnoreCase("ftp") || protocol.equalsIgnoreCase("file")) -->Line_28 $$ if (!(mode.equalsIgnoreCase("r") || mode.equalsIgnoreCase("w"))) [ CD ]
Line_28 $$ if (!(mode.equalsIgnoreCase("r") || mode.equalsIgnoreCase("w"))) -->Line_28 $$ if (!(mode.equalsIgnoreCase("r") || mode.equalsIgnoreCase("w"))) [ CD ]
Line_10 $$ String mode = null-->Line_28 $$ if (!(mode.equalsIgnoreCase("r") || mode.equalsIgnoreCase("w"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_28 $$ if (!(mode.equalsIgnoreCase("r") || mode.equalsIgnoreCase("w"))) [ FD ]
Line_10 $$ String mode = null-->Line_28 $$ if (!(mode.equalsIgnoreCase("r") || mode.equalsIgnoreCase("w"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_28 $$ if (!(mode.equalsIgnoreCase("r") || mode.equalsIgnoreCase("w"))) [ FD ]
Line_27 $$ if (protocol.equalsIgnoreCase("ftp") || protocol.equalsIgnoreCase("file")) -->Line_31 $$ if (protocol.equalsIgnoreCase("jar") || protocol.equalsIgnoreCase("stdin")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_31 $$ if (protocol.equalsIgnoreCase("jar") || protocol.equalsIgnoreCase("stdin")) [ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_31 $$ if (protocol.equalsIgnoreCase("jar") || protocol.equalsIgnoreCase("stdin")) [ FD ]
Line_31 $$ if (protocol.equalsIgnoreCase("jar") || protocol.equalsIgnoreCase("stdin")) -->Line_32 $$ if (!(mode.equalsIgnoreCase("r"))) [ CD ]
Line_32 $$ if (!(mode.equalsIgnoreCase("r"))) -->Line_32 $$ if (!(mode.equalsIgnoreCase("r"))) [ CD ]
Line_10 $$ String mode = null-->Line_32 $$ if (!(mode.equalsIgnoreCase("r"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_32 $$ if (!(mode.equalsIgnoreCase("r"))) [ FD ]
Line_31 $$ if (protocol.equalsIgnoreCase("jar") || protocol.equalsIgnoreCase("stdin")) -->Line_35 $$ if (protocol.equalsIgnoreCase("tcp") || protocol.equalsIgnoreCase("ssl+tcp")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_35 $$ if (protocol.equalsIgnoreCase("tcp") || protocol.equalsIgnoreCase("ssl+tcp")) [ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_35 $$ if (protocol.equalsIgnoreCase("tcp") || protocol.equalsIgnoreCase("ssl+tcp")) [ FD ]
Line_35 $$ if (protocol.equalsIgnoreCase("tcp") || protocol.equalsIgnoreCase("ssl+tcp")) -->Line_36 $$ if (!(mode.equalsIgnoreCase("rw"))) [ CD ]
Line_36 $$ if (!(mode.equalsIgnoreCase("rw"))) -->Line_36 $$ if (!(mode.equalsIgnoreCase("rw"))) [ CD ]
Line_10 $$ String mode = null-->Line_36 $$ if (!(mode.equalsIgnoreCase("rw"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_36 $$ if (!(mode.equalsIgnoreCase("rw"))) [ FD ]
Line_35 $$ if (protocol.equalsIgnoreCase("tcp") || protocol.equalsIgnoreCase("ssl+tcp")) -->Line_39 $$ if (protocol.equalsIgnoreCase("stdout") || protocol.equalsIgnoreCase("stderr")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_39 $$ if (protocol.equalsIgnoreCase("stdout") || protocol.equalsIgnoreCase("stderr")) [ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_39 $$ if (protocol.equalsIgnoreCase("stdout") || protocol.equalsIgnoreCase("stderr")) [ FD ]
Line_39 $$ if (protocol.equalsIgnoreCase("stdout") || protocol.equalsIgnoreCase("stderr")) -->Line_40 $$ if (!(mode.equalsIgnoreCase("w"))) [ CD ]
Line_40 $$ if (!(mode.equalsIgnoreCase("w"))) -->Line_40 $$ if (!(mode.equalsIgnoreCase("w"))) [ CD ]
Line_10 $$ String mode = null-->Line_40 $$ if (!(mode.equalsIgnoreCase("w"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_40 $$ if (!(mode.equalsIgnoreCase("w"))) [ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_47 $$ if (i_ <= max_i) [ CD ]
Line_20 $$ int i_ = 2-->Line_47 $$ if (i_ <= max_i) [ FD ]
Line_16 $$ int max_i = startAt.size() - 1-->Line_47 $$ if (i_ <= max_i) [ FD ]
Line_47 $$ if (i_ <= max_i) -->Line_48 $$ if (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https")) [ CD ]
Line_48 $$ if (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https")) -->Line_48 $$ if (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_48 $$ if (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https")) [ FD ]
Line_48 $$ if (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https")) -->Line_48 $$ if (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_48 $$ if (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https")) [ FD ]
Line_47 $$ if (i_ <= max_i) -->Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)[ CD ]
Line_12 $$ Node datas = null-->Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)[ FD ]
Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)-->Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)[ FD ]
Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)-->Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)[ FD ]
Line_20 $$ int i_ = 2-->Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)[ FD ]
Line_47 $$ if (i_ <= max_i) -->Line_52 $$ if (datas.isVObject()) [ CD ]
Line_12 $$ Node datas = null-->Line_52 $$ if (datas.isVObject()) [ FD ]
Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)-->Line_52 $$ if (datas.isVObject()) [ FD ]
Line_52 $$ if (datas.isVObject()) -->Line_52 $$ if (datas.isVObject()) [ CD ]
Line_12 $$ Node datas = null-->Line_52 $$ if (datas.isVObject()) [ FD ]
Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)-->Line_52 $$ if (datas.isVObject()) [ FD ]
Line_52 $$ if (datas.isVObject()) -->Line_53 $$ Object obj = datas.getVObjectExternalInstance()[ CD ]
Line_53 $$ Object obj = datas.getVObjectExternalInstance()-->Line_53 $$ Object obj = datas.getVObjectExternalInstance()[ CD ]
Line_12 $$ Node datas = null-->Line_53 $$ Object obj = datas.getVObjectExternalInstance()[ FD ]
Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)-->Line_53 $$ Object obj = datas.getVObjectExternalInstance()[ FD ]
Line_52 $$ if (datas.isVObject()) -->Line_54 $$ if (External_Buffer.class.isInstance(obj)) [ CD ]
Line_53 $$ Object obj = datas.getVObjectExternalInstance()-->Line_54 $$ if (External_Buffer.class.isInstance(obj)) [ FD ]
Line_54 $$ if (External_Buffer.class.isInstance(obj)) -->Line_54 $$ if (External_Buffer.class.isInstance(obj)) [ CD ]
Line_53 $$ Object obj = datas.getVObjectExternalInstance()-->Line_54 $$ if (External_Buffer.class.isInstance(obj)) [ FD ]
Line_54 $$ if (External_Buffer.class.isInstance(obj)) -->Line_55 $$ Buffer bbuffer = ((External_Buffer) obj).getBuffer()[ CD ]
Line_55 $$ Buffer bbuffer = ((External_Buffer) obj).getBuffer()-->Line_55 $$ Buffer bbuffer = ((External_Buffer) obj).getBuffer()[ CD ]
Line_54 $$ if (External_Buffer.class.isInstance(obj)) -->Line_56 $$ buffer = bbuffer.read_bytes()[ CD ]
Line_13 $$ byte[] buffer = null-->Line_56 $$ buffer = bbuffer.read_bytes()[ FD ]
Line_56 $$ buffer = bbuffer.read_bytes()-->Line_56 $$ buffer = bbuffer.read_bytes()[ FD ]
Line_56 $$ buffer = bbuffer.read_bytes()-->Line_56 $$ buffer = bbuffer.read_bytes()[ CD ]
Line_55 $$ Buffer bbuffer = ((External_Buffer) obj).getBuffer()-->Line_56 $$ buffer = bbuffer.read_bytes()[ FD ]
Line_53 $$ Object obj = datas.getVObjectExternalInstance()-->Line_58 $$ throw new InterpreterException(StdErrors.extend(StdErrors.Invalid_parameter, "Object (" + obj.getClass().getName() + ") required " + External_Buffer.class.getName()))[ FD ]
Line_52 $$ if (datas.isVObject()) -->Line_61 $$ buffer = datas.getString().getBytes()[ CD ]
Line_13 $$ byte[] buffer = null-->Line_61 $$ buffer = datas.getString().getBytes()[ FD ]
Line_56 $$ buffer = bbuffer.read_bytes()-->Line_61 $$ buffer = datas.getString().getBytes()[ FD ]
Line_61 $$ buffer = datas.getString().getBytes()-->Line_61 $$ buffer = datas.getString().getBytes()[ FD ]
Line_61 $$ buffer = datas.getString().getBytes()-->Line_61 $$ buffer = datas.getString().getBytes()[ CD ]
Line_12 $$ Node datas = null-->Line_61 $$ buffer = datas.getString().getBytes()[ FD ]
Line_51 $$ datas = startAt.getSubNode(i_++, Node.TYPE_STRING | Node.TYPE_OBJECT)-->Line_61 $$ buffer = datas.getString().getBytes()[ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_64 $$ if (datas != null && mode != null && mode.equals("GET")) [ CD ]
Line_10 $$ String mode = null-->Line_64 $$ if (datas != null && mode != null && mode.equals("GET")) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_64 $$ if (datas != null && mode != null && mode.equals("GET")) [ FD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_67 $$ if (props != null && (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https"))) [ CD ]
Line_67 $$ if (props != null && (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https"))) -->Line_67 $$ if (props != null && (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https"))) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_67 $$ if (props != null && (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https"))) [ FD ]
Line_67 $$ if (props != null && (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https"))) -->Line_67 $$ if (props != null && (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https"))) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_67 $$ if (props != null && (!protocol.equalsIgnoreCase("http") && !protocol.equalsIgnoreCase("https"))) [ FD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_71 $$ if (protocol.equalsIgnoreCase("file") && mode != null && mode.equalsIgnoreCase("w")) [ FD ]
Line_10 $$ String mode = null-->Line_71 $$ if (protocol.equalsIgnoreCase("file") && mode != null && mode.equalsIgnoreCase("w")) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_71 $$ if (protocol.equalsIgnoreCase("file") && mode != null && mode.equalsIgnoreCase("w")) [ FD ]
Line_71 $$ if (protocol.equalsIgnoreCase("file") && mode != null && mode.equalsIgnoreCase("w")) -->Line_72 $$ File f = new File(url.toURI())[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_72 $$ File f = new File(url.toURI())[ FD ]
Line_71 $$ if (protocol.equalsIgnoreCase("file") && mode != null && mode.equalsIgnoreCase("w")) -->Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) [ FD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) [ FD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_77 $$ tcpHost = url.getHost()[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_77 $$ tcpHost = url.getHost()[ FD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_78 $$ tcpPort = url.getPort()[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_78 $$ tcpPort = url.getPort()[ FD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_79 $$ if (tcpPort < 0 || tcpPort > 65535) [ CD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_83 $$ if (readTimeOut > 0) [ CD ]
Line_83 $$ if (readTimeOut > 0) -->Line_84 $$ socket.setSoTimeout(readTimeOut)[ CD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_86 $$ inputStream = socket.getInputStream()[ CD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_89 $$ outputStream = socket.getOutputStream()[ CD ]
Line_76 $$ if (protocol.equalsIgnoreCase("tcp")) -->Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) [ FD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) [ FD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_93 $$ tcpHost = url.getHost()[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_93 $$ tcpHost = url.getHost()[ FD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_94 $$ tcpPort = url.getPort()[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_94 $$ tcpPort = url.getPort()[ FD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_95 $$ if (tcpPort < 0 || tcpPort > 65535) [ CD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_98 $$ SocketFactory socketFactory = SSLSocketFactory.getDefault()[ CD ]
Line_98 $$ SocketFactory socketFactory = SSLSocketFactory.getDefault()-->Line_98 $$ SocketFactory socketFactory = SSLSocketFactory.getDefault()[ CD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_99 $$ socket = socketFactory.createSocket(tcpHost, tcpPort)[ CD ]
Line_98 $$ SocketFactory socketFactory = SSLSocketFactory.getDefault()-->Line_99 $$ socket = socketFactory.createSocket(tcpHost, tcpPort)[ FD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_100 $$ if (readTimeOut > 0) [ CD ]
Line_100 $$ if (readTimeOut > 0) -->Line_101 $$ socket.setSoTimeout(readTimeOut)[ CD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_103 $$ inputStream = socket.getInputStream()[ CD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_106 $$ outputStream = socket.getOutputStream()[ CD ]
Line_92 $$ if (protocol.equalsIgnoreCase("ssl+tcp")) -->Line_109 $$ if (protocol.equalsIgnoreCase("stdout")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_109 $$ if (protocol.equalsIgnoreCase("stdout")) [ FD ]
Line_109 $$ if (protocol.equalsIgnoreCase("stdout")) -->Line_109 $$ if (protocol.equalsIgnoreCase("stdout")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_109 $$ if (protocol.equalsIgnoreCase("stdout")) [ FD ]
Line_109 $$ if (protocol.equalsIgnoreCase("stdout")) -->Line_110 $$ setBufOut(System.out)[ CD ]
Line_109 $$ if (protocol.equalsIgnoreCase("stdout")) -->Line_111 $$ if (protocol.equalsIgnoreCase("stderr")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_111 $$ if (protocol.equalsIgnoreCase("stderr")) [ FD ]
Line_111 $$ if (protocol.equalsIgnoreCase("stderr")) -->Line_111 $$ if (protocol.equalsIgnoreCase("stderr")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_111 $$ if (protocol.equalsIgnoreCase("stderr")) [ FD ]
Line_111 $$ if (protocol.equalsIgnoreCase("stderr")) -->Line_112 $$ setBufOut(System.err)[ CD ]
Line_111 $$ if (protocol.equalsIgnoreCase("stderr")) -->Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) [ FD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) [ CD ]
Line_9 $$ String protocol = url.getProtocol()-->Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) [ FD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_114 $$ setBufIn(System.in)[ CD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_116 $$ urlConnection = url.openConnection()[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_116 $$ urlConnection = url.openConnection()[ FD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_117 $$ if (connectTimeOut > 0) [ CD ]
Line_117 $$ if (connectTimeOut > 0) -->Line_118 $$ urlConnection.setConnectTimeout(connectTimeOut)[ CD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_120 $$ if (readTimeOut > 0) [ CD ]
Line_120 $$ if (readTimeOut > 0) -->Line_121 $$ urlConnection.setReadTimeout(readTimeOut)[ CD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_123 $$ urlConnection.setUseCaches(false)[ CD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_124 $$ urlConnection.setDoInput(true)[ CD ]
Line_113 $$ if (protocol.equalsIgnoreCase("stdin")) -->Line_125 $$ if (urlConnection instanceof HttpURLConnection) [ CD ]
Line_125 $$ if (urlConnection instanceof HttpURLConnection) -->Line_126 $$ HttpURLConnection httpCon = (HttpURLConnection) urlConnection[ CD ]
Line_125 $$ if (urlConnection instanceof HttpURLConnection) -->Line_127 $$ if (props != null) [ CD ]
Line_11 $$ Node props = null-->Line_127 $$ if (props != null) [ FD ]
Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)-->Line_127 $$ if (props != null) [ FD ]
Line_127 $$ if (props != null) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ CD ]
Line_127 $$ if (props != null) -->Line_127 $$ if (props != null) [ CD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ CD ]
Line_11 $$ Node props = null-->Line_128 $$ for (int i = 0; i < props.size(); i++) [ FD ]
Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)-->Line_128 $$ for (int i = 0; i < props.size(); i++) [ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ CD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ CD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)[ CD ]
Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)-->Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)[ CD ]
Line_11 $$ Node props = null-->Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)[ FD ]
Line_18 $$ props = startAt.getSubNode(max_i--, Node.TYPE_LIST)-->Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)[ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)[ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_130 $$ String header_s = Node.getPairKey(pnode)[ CD ]
Line_130 $$ String header_s = Node.getPairKey(pnode)-->Line_130 $$ String header_s = Node.getPairKey(pnode)[ CD ]
Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)-->Line_130 $$ String header_s = Node.getPairKey(pnode)[ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_131 $$ String value_s = Node.node2VString(Node.getPairValue(pnode)).getString()[ CD ]
Line_131 $$ String value_s = Node.node2VString(Node.getPairValue(pnode)).getString()-->Line_131 $$ String value_s = Node.node2VString(Node.getPairValue(pnode)).getString()[ CD ]
Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)-->Line_131 $$ String value_s = Node.node2VString(Node.getPairValue(pnode)).getString()[ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_132 $$ Interpreter.Log("   HTTP-Header: " + header_s + " : " + value_s)[ CD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_133 $$ httpCon.setRequestProperty(header_s, value_s)[ CD ]
Line_126 $$ HttpURLConnection httpCon = (HttpURLConnection) urlConnection-->Line_133 $$ httpCon.setRequestProperty(header_s, value_s)[ FD ]
Line_130 $$ String header_s = Node.getPairKey(pnode)-->Line_133 $$ httpCon.setRequestProperty(header_s, value_s)[ FD ]
Line_131 $$ String value_s = Node.node2VString(Node.getPairValue(pnode)).getString()-->Line_133 $$ httpCon.setRequestProperty(header_s, value_s)[ FD ]
Line_125 $$ if (urlConnection instanceof HttpURLConnection) -->Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) [ CD ]
Line_10 $$ String mode = null-->Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_10 $$ String mode = null-->Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) [ FD ]
Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) -->Line_137 $$ if (mode.equals("PUT")) [ CD ]
Line_10 $$ String mode = null-->Line_137 $$ if (mode.equals("PUT")) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_137 $$ if (mode.equals("PUT")) [ FD ]
Line_137 $$ if (mode.equals("PUT")) -->Line_137 $$ if (mode.equals("PUT")) [ CD ]
Line_10 $$ String mode = null-->Line_137 $$ if (mode.equals("PUT")) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_137 $$ if (mode.equals("PUT")) [ FD ]
Line_137 $$ if (mode.equals("PUT")) -->Line_138 $$ Interpreter.Log("   HTTP PUT: " + url.toString())[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_138 $$ Interpreter.Log("   HTTP PUT: " + url.toString())[ FD ]
Line_137 $$ if (mode.equals("PUT")) -->Line_140 $$ Interpreter.Log("   HTTP POST: " + url.toString())[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_140 $$ Interpreter.Log("   HTTP POST: " + url.toString())[ FD ]
Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) -->Line_142 $$ urlConnection.setDoOutput(true)[ CD ]
Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) -->Line_143 $$ httpCon.setRequestMethod(mode)[ CD ]
Line_126 $$ HttpURLConnection httpCon = (HttpURLConnection) urlConnection-->Line_143 $$ httpCon.setRequestMethod(mode)[ FD ]
Line_10 $$ String mode = null-->Line_143 $$ httpCon.setRequestMethod(mode)[ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_143 $$ httpCon.setRequestMethod(mode)[ FD ]
Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) -->Line_144 $$ outputStream = urlConnection.getOutputStream()[ CD ]
Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) -->Line_147 $$ output.write(buffer)[ CD ]
Line_13 $$ byte[] buffer = null-->Line_147 $$ output.write(buffer)[ FD ]
Line_56 $$ buffer = bbuffer.read_bytes()-->Line_147 $$ output.write(buffer)[ FD ]
Line_61 $$ buffer = datas.getString().getBytes()-->Line_147 $$ output.write(buffer)[ FD ]
Line_136 $$ if (mode != null && (mode.equals("POST") || mode.equals("PUT"))) -->Line_148 $$ output.flush()[ CD ]
Line_125 $$ if (urlConnection instanceof HttpURLConnection) -->Line_150 $$ inputStream = urlConnection.getInputStream()[ CD ]
Line_125 $$ if (urlConnection instanceof HttpURLConnection) -->Line_154 $$ if (mode == null || (mode != null && mode.equalsIgnoreCase("r"))) [ CD ]
Line_10 $$ String mode = null-->Line_154 $$ if (mode == null || (mode != null && mode.equalsIgnoreCase("r"))) [ FD ]
Line_22 $$ mode = startAt.getSubNode(i_++, Node.TYPE_STRING).getString().toUpperCase().trim()-->Line_154 $$ if (mode == null || (mode != null && mode.equalsIgnoreCase("r"))) [ FD ]
Line_154 $$ if (mode == null || (mode != null && mode.equalsIgnoreCase("r"))) -->Line_155 $$ Interpreter.Log("   " + protocol + " read : " + url.toString())[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_155 $$ Interpreter.Log("   " + protocol + " read : " + url.toString())[ FD ]
Line_154 $$ if (mode == null || (mode != null && mode.equalsIgnoreCase("r"))) -->Line_156 $$ inputStream = urlConnection.getInputStream()[ CD ]
Line_154 $$ if (mode == null || (mode != null && mode.equalsIgnoreCase("r"))) -->Line_160 $$ Interpreter.Log("   " + protocol + " write : " + url.toString())[ CD ]
Line_8 $$ ExtURL url = new ExtURL(startAt.getSubNode(1, Node.TYPE_STRING).getString())-->Line_160 $$ Interpreter.Log("   " + protocol + " write : " + url.toString())[ FD ]
Line_154 $$ if (mode == null || (mode != null && mode.equalsIgnoreCase("r"))) -->Line_161 $$ outputStream = urlConnection.getOutputStream()[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_171 $$ putHook()[ CD ]
Line_2 $$ public Node external_open_url(Node startAt) throws Exception -->Line_172 $$ return null[ CD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_128 $$ for (int i = 0; i < props.size(); i++) [ FD ]
Line_128 $$ for (int i = 0; i < props.size(); i++) -->Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)[ FD ]
Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)-->Line_130 $$ String header_s = Node.getPairKey(pnode)[ FD ]
Line_129 $$ Node pnode = props.getSubNode(i, Node.TYPE_DICO)-->Line_131 $$ String value_s = Node.node2VString(Node.getPairValue(pnode)).getString()[ FD ]
Line_130 $$ String header_s = Node.getPairKey(pnode)-->Line_133 $$ httpCon.setRequestProperty(header_s, value_s)[ FD ]
Line_131 $$ String value_s = Node.node2VString(Node.getPairValue(pnode)).getString()-->Line_133 $$ httpCon.setRequestProperty(header_s, value_s)[ FD ]
