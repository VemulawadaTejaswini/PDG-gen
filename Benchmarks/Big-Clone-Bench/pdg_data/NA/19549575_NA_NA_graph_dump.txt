Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected InputStream callApiGet(String apiUrl, int expected) [ CD ]
Line_4 $$ URL url = new URL(apiUrl)-->Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()[ FD ]
Line_6 $$ if (ApplicationConstants.CONNECT_TIMEOUT > -1) -->Line_7 $$ request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT)[ CD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_7 $$ request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT)[ FD ]
Line_9 $$ if (ApplicationConstants.READ_TIMEOUT > -1) -->Line_10 $$ request.setReadTimeout(ApplicationConstants.READ_TIMEOUT)[ CD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_10 $$ request.setReadTimeout(ApplicationConstants.READ_TIMEOUT)[ FD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_13 $$ request.setRequestProperty(headerName, requestHeaders.get(headerName))[ FD ]
Line_12 $$ for (String headerName : requestHeaders.keySet()) -->Line_13 $$ request.setRequestProperty(headerName, requestHeaders.get(headerName))[ FD ]
Line_12 $$ for (String headerName : requestHeaders.keySet()) -->Line_13 $$ request.setRequestProperty(headerName, requestHeaders.get(headerName))[ FD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_15 $$ request.connect()[ FD ]
Line_2 $$ protected InputStream callApiGet(String apiUrl, int expected) -->Line_16 $$ if (request.getResponseCode() != expected) [ FD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_16 $$ if (request.getResponseCode() != expected) [ FD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_17 $$ throw new BingMapsException(convertStreamToString(request.getErrorStream()))[ FD ]
Line_16 $$ if (request.getResponseCode() != expected) -->Line_19 $$ return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()))[ CD ]
Line_19 $$ return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()))-->Line_19 $$ return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()))[ CD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_19 $$ return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()))[ FD ]
Line_5 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_19 $$ return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()))[ FD ]
