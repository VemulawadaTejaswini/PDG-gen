Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception [ CD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_3 $$ boolean ok = true[ CD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_4 $$ Exception ee = null[ CD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_5 $$ Element rootElement = null[ CD ]
Line_7 $$ InputStream in = url.openStream()-->Line_7 $$ InputStream in = url.openStream()[ CD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_7 $$ InputStream in = url.openStream()[ FD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_8 $$ if (type.equals(Type.XOM)) [ FD ]
Line_8 $$ if (type.equals(Type.XOM)) -->Line_8 $$ if (type.equals(Type.XOM)) [ CD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_8 $$ if (type.equals(Type.XOM)) [ FD ]
Line_8 $$ if (type.equals(Type.XOM)) -->Line_9 $$ new Builder().build(in)[ CD ]
Line_7 $$ InputStream in = url.openStream()-->Line_9 $$ new Builder().build(in)[ FD ]
Line_8 $$ if (type.equals(Type.XOM)) -->Line_10 $$ if (type.equals(Type.CML)) [ CD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_10 $$ if (type.equals(Type.CML)) [ FD ]
Line_10 $$ if (type.equals(Type.CML)) -->Line_10 $$ if (type.equals(Type.CML)) [ CD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_10 $$ if (type.equals(Type.CML)) [ FD ]
Line_10 $$ if (type.equals(Type.CML)) -->Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()[ CD ]
Line_5 $$ Element rootElement = null-->Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()[ FD ]
Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()-->Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()[ FD ]
Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()-->Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()[ CD ]
Line_7 $$ InputStream in = url.openStream()-->Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()[ FD ]
Line_7 $$ InputStream in = url.openStream()-->Line_13 $$ in.close()[ FD ]
Line_4 $$ Exception ee = null-->Line_15 $$ ee = e[ FD ]
Line_15 $$ ee = e-->Line_15 $$ ee = e[ FD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_17 $$ if (ee != null) [ CD ]
Line_4 $$ Exception ee = null-->Line_17 $$ if (ee != null) [ FD ]
Line_15 $$ ee = e-->Line_17 $$ if (ee != null) [ FD ]
Line_17 $$ if (ee != null) -->Line_18 $$ logger.severe("failed to cmlParse: " + url + "\n..... because: [" + ee + "] [" + ee.getMessage() + "] in [" + url + "]")[ CD ]
Line_4 $$ Exception ee = null-->Line_18 $$ logger.severe("failed to cmlParse: " + url + "\n..... because: [" + ee + "] [" + ee.getMessage() + "] in [" + url + "]")[ FD ]
Line_15 $$ ee = e-->Line_18 $$ logger.severe("failed to cmlParse: " + url + "\n..... because: [" + ee + "] [" + ee.getMessage() + "] in [" + url + "]")[ FD ]
Line_17 $$ if (ee != null) -->Line_19 $$ ok = false[ CD ]
Line_3 $$ boolean ok = true-->Line_19 $$ ok = false[ FD ]
Line_19 $$ ok = false-->Line_19 $$ ok = false[ FD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_21 $$ if (ok && checkDict) [ CD ]
Line_3 $$ boolean ok = true-->Line_21 $$ if (ok && checkDict) [ FD ]
Line_19 $$ ok = false-->Line_21 $$ if (ok && checkDict) [ FD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_21 $$ if (ok && checkDict) [ FD ]
Line_21 $$ if (ok && checkDict) -->Line_22 $$ ok = checkDict(rootElement)[ CD ]
Line_3 $$ boolean ok = true-->Line_22 $$ ok = checkDict(rootElement)[ FD ]
Line_19 $$ ok = false-->Line_22 $$ ok = checkDict(rootElement)[ FD ]
Line_22 $$ ok = checkDict(rootElement)-->Line_22 $$ ok = checkDict(rootElement)[ FD ]
Line_22 $$ ok = checkDict(rootElement)-->Line_22 $$ ok = checkDict(rootElement)[ CD ]
Line_5 $$ Element rootElement = null-->Line_22 $$ ok = checkDict(rootElement)[ FD ]
Line_11 $$ rootElement = new CMLBuilder().build(in).getRootElement()-->Line_22 $$ ok = checkDict(rootElement)[ FD ]
Line_2 $$ private boolean parse(Type type, URL url, boolean checkDict) throws Exception -->Line_24 $$ return ok[ CD ]
