Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) [ CD ]
Line_4 $$ IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot()-->Line_4 $$ IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot()[ CD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_5 $$ IProject project = root.getProject(namePage.getProjectName())[ CD ]
Line_4 $$ IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot()-->Line_5 $$ IProject project = root.getProject(namePage.getProjectName())[ FD ]
Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())-->Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())[ CD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())[ FD ]
Line_7 $$ if (!Platform.getLocation().equals(namePage.getLocationPath()))-->Line_7 $$ if (!Platform.getLocation().equals(namePage.getLocationPath()))[ CD ]
Line_7 $$ if (!Platform.getLocation().equals(namePage.getLocationPath()))-->Line_7 $$ if (!Platform.getLocation().equals(namePage.getLocationPath()))[ CD ]
Line_7 $$ if (!Platform.getLocation().equals(namePage.getLocationPath()))-->Line_7 $$ description.setLocation(namePage.getLocationPath())[ CD ]
Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())-->Line_7 $$ description.setLocation(namePage.getLocationPath())[ FD ]
Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())-->Line_8 $$ description.setNatureIds(new String[] [ FD ]
Line_9 $$ ICommand buildCommand = description.newCommand()-->Line_9 $$ ICommand buildCommand = description.newCommand()[ CD ]
Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())-->Line_9 $$ ICommand buildCommand = description.newCommand()[ FD ]
Line_9 $$ ICommand buildCommand = description.newCommand()-->Line_10 $$ buildCommand.setBuilderName(JavaCore.BUILDER_ID)[ FD ]
Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())-->Line_11 $$ description.setBuildSpec(new ICommand[] [ FD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_12 $$ project.create(description, monitor)[ FD ]
Line_6 $$ IProjectDescription description = ResourcesPlugin.getWorkspace().newProjectDescription(project.getName())-->Line_12 $$ project.create(description, monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_12 $$ project.create(description, monitor)[ FD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_13 $$ project.open(monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_13 $$ project.open(monitor)[ FD ]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_14 $$ IJavaProject javaProject = JavaCore.create(project)[ CD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_14 $$ IJavaProject javaProject = JavaCore.create(project)[ FD ]
Line_15 $$ IFolder testFolder = project.getFolder("tests")-->Line_15 $$ IFolder testFolder = project.getFolder("tests")[ CD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_15 $$ IFolder testFolder = project.getFolder("tests")[ FD ]
Line_15 $$ IFolder testFolder = project.getFolder("tests")-->Line_16 $$ testFolder.create(false, true, monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_16 $$ testFolder.create(false, true, monitor)[ FD ]
Line_17 $$ IFolder srcFolder = project.getFolder("src")-->Line_17 $$ IFolder srcFolder = project.getFolder("src")[ CD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_17 $$ IFolder srcFolder = project.getFolder("src")[ FD ]
Line_17 $$ IFolder srcFolder = project.getFolder("src")-->Line_18 $$ srcFolder.create(false, true, monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_18 $$ srcFolder.create(false, true, monitor)[ FD ]
Line_19 $$ IFolder binFolder = project.getFolder("bin")-->Line_19 $$ IFolder binFolder = project.getFolder("bin")[ CD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_19 $$ IFolder binFolder = project.getFolder("bin")[ FD ]
Line_19 $$ IFolder binFolder = project.getFolder("bin")-->Line_20 $$ binFolder.create(false, true, monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_20 $$ binFolder.create(false, true, monitor)[ FD ]
Line_21 $$ IFolder libFolder = project.getFolder("lib")-->Line_21 $$ IFolder libFolder = project.getFolder("lib")[ CD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_21 $$ IFolder libFolder = project.getFolder("lib")[ FD ]
Line_21 $$ IFolder libFolder = project.getFolder("lib")-->Line_22 $$ libFolder.create(false, true, monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_22 $$ libFolder.create(false, true, monitor)[ FD ]
Line_21 $$ IFolder libFolder = project.getFolder("lib")-->Line_24 $$ FileUtils.copyFile(new Path(Platform.asLocalURL(CubicTestPlugin.getDefault().find(new Path("lib/CubicTestElementAPI.jar"))).getPath()).toFile(), libFolder.getFile("CubicTestElementAPI.jar").getLocation().toFile())[ FD ]
Line_21 $$ IFolder libFolder = project.getFolder("lib")-->Line_25 $$ FileUtils.copyFile(new Path(Platform.asLocalURL(CubicTestPlugin.getDefault().find(new Path("lib/CubicUnit.jar"))).getPath()).toFile(), libFolder.getFile("CubicUnit.jar").getLocation().toFile())[ FD ]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_29 $$ javaProject.setOutputLocation(binFolder.getFullPath(), monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_29 $$ javaProject.setOutputLocation(binFolder.getFullPath(), monitor)[ FD ]
Line_19 $$ IFolder binFolder = project.getFolder("bin")-->Line_29 $$ javaProject.setOutputLocation(binFolder.getFullPath(), monitor)[ FD ]
Line_30 $$ IClasspathEntry[] classpath-->Line_31 $$ classpath = new IClasspathEntry[] [ FD ]
Line_31 $$ classpath = new IClasspathEntry[] -->Line_31 $$ classpath = new IClasspathEntry[] [ FD ]
Line_17 $$ IFolder srcFolder = project.getFolder("src")-->Line_31 $$ classpath = new IClasspathEntry[] [ FD ]
Line_21 $$ IFolder libFolder = project.getFolder("lib")-->Line_31 $$ classpath = new IClasspathEntry[] [ FD ]
Line_21 $$ IFolder libFolder = project.getFolder("lib")-->Line_31 $$ classpath = new IClasspathEntry[] [ FD ]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_32 $$ javaProject.setRawClasspath(classpath, binFolder.getFullPath(), monitor)[ FD ]
Line_30 $$ IClasspathEntry[] classpath-->Line_32 $$ javaProject.setRawClasspath(classpath, binFolder.getFullPath(), monitor)[ FD ]
Line_31 $$ classpath = new IClasspathEntry[] -->Line_32 $$ javaProject.setRawClasspath(classpath, binFolder.getFullPath(), monitor)[ FD ]
Line_2 $$ private void createProject(IProgressMonitor monitor, boolean launchNewTestWizard) -->Line_32 $$ javaProject.setRawClasspath(classpath, binFolder.getFullPath(), monitor)[ FD ]
Line_19 $$ IFolder binFolder = project.getFolder("bin")-->Line_32 $$ javaProject.setRawClasspath(classpath, binFolder.getFullPath(), monitor)[ FD ]
Line_34 $$ IViewPart viewPart = workbench.getActiveWorkbenchWindow().getActivePage().getViewReferences()[0].getView(false)-->Line_34 $$ IViewPart viewPart = workbench.getActiveWorkbenchWindow().getActivePage().getViewReferences()[0].getView(false)[ CD ]
Line_34 $$ IViewPart viewPart = workbench.getActiveWorkbenchWindow().getActivePage().getViewReferences()[0].getView(false)-->Line_35 $$ if (viewPart instanceof ResourceNavigator) [ FD ]
Line_35 $$ if (viewPart instanceof ResourceNavigator) -->Line_36 $$ navigator = (ResourceNavigator) viewPart[ CD ]
Line_33 $$ ResourceNavigator navigator = null-->Line_36 $$ navigator = (ResourceNavigator) viewPart[ FD ]
Line_36 $$ navigator = (ResourceNavigator) viewPart-->Line_36 $$ navigator = (ResourceNavigator) viewPart[ FD ]
Line_38 $$ if (launchNewTestWizard) -->Line_39 $$ launchNewTestWizard(testFolder)[ CD ]
Line_15 $$ IFolder testFolder = project.getFolder("tests")-->Line_39 $$ launchNewTestWizard(testFolder)[ FD ]
Line_38 $$ if (launchNewTestWizard) -->Line_40 $$ if (navigator != null && testFolder.members().length > 0) [ CD ]
Line_15 $$ IFolder testFolder = project.getFolder("tests")-->Line_40 $$ if (navigator != null && testFolder.members().length > 0) [ FD ]
Line_40 $$ if (navigator != null && testFolder.members().length > 0) -->Line_41 $$ navigator.selectReveal(new StructuredSelection(testFolder.members()[0]))[ CD ]
Line_33 $$ ResourceNavigator navigator = null-->Line_41 $$ navigator.selectReveal(new StructuredSelection(testFolder.members()[0]))[ FD ]
Line_36 $$ navigator = (ResourceNavigator) viewPart-->Line_41 $$ navigator.selectReveal(new StructuredSelection(testFolder.members()[0]))[ FD ]
Line_15 $$ IFolder testFolder = project.getFolder("tests")-->Line_41 $$ navigator.selectReveal(new StructuredSelection(testFolder.members()[0]))[ FD ]
Line_5 $$ IProject project = root.getProject(namePage.getProjectName())-->Line_44 $$ project.refreshLocal(IResource.DEPTH_INFINITE, null)[ FD ]
