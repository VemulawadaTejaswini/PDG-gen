Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void find(final String pckgname, final boolean recursive) [ CD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_3 $$ URL url[ CD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_4 $$ String name = pckgname[ CD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_5 $$ name = name.replace('.', '/')[ CD ]
Line_4 $$ String name = pckgname-->Line_5 $$ name = name.replace('.', '/')[ FD ]
Line_5 $$ name = name.replace('.', '/')-->Line_5 $$ name = name.replace('.', '/')[ FD ]
Line_5 $$ name = name.replace('.', '/')-->Line_5 $$ name = name.replace('.', '/')[ CD ]
Line_4 $$ String name = pckgname-->Line_5 $$ name = name.replace('.', '/')[ FD ]
Line_5 $$ name = name.replace('.', '/')-->Line_5 $$ name = name.replace('.', '/')[ FD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)[ CD ]
Line_3 $$ URL url-->Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)[ FD ]
Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)-->Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)[ FD ]
Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)-->Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)[ CD ]
Line_4 $$ String name = pckgname-->Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)[ FD ]
Line_5 $$ name = name.replace('.', '/')-->Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)[ FD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_7 $$ File directory[ CD ]
Line_7 $$ File directory-->Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))[ FD ]
Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))-->Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))[ FD ]
Line_3 $$ URL url-->Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))[ FD ]
Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)-->Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))[ FD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_13 $$ if (directory.exists()) [ CD ]
Line_7 $$ File directory-->Line_13 $$ if (directory.exists()) [ FD ]
Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))-->Line_13 $$ if (directory.exists()) [ FD ]
Line_13 $$ if (directory.exists()) -->Line_13 $$ if (directory.exists()) [ CD ]
Line_7 $$ File directory-->Line_13 $$ if (directory.exists()) [ FD ]
Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))-->Line_13 $$ if (directory.exists()) [ FD ]
Line_13 $$ if (directory.exists()) -->Line_14 $$ logger.info("Searching for examples in \"" + directory.getPath() + "\".")[ CD ]
Line_7 $$ File directory-->Line_14 $$ logger.info("Searching for examples in \"" + directory.getPath() + "\".")[ FD ]
Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))-->Line_14 $$ logger.info("Searching for examples in \"" + directory.getPath() + "\".")[ FD ]
Line_13 $$ if (directory.exists()) -->Line_15 $$ addAllFilesInDirectory(directory, pckgname, recursive)[ CD ]
Line_7 $$ File directory-->Line_15 $$ addAllFilesInDirectory(directory, pckgname, recursive)[ FD ]
Line_9 $$ directory = new File(URLDecoder.decode(url.getFile(), "UTF-8"))-->Line_15 $$ addAllFilesInDirectory(directory, pckgname, recursive)[ FD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_15 $$ addAllFilesInDirectory(directory, pckgname, recursive)[ FD ]
Line_2 $$ protected void find(final String pckgname, final boolean recursive) -->Line_15 $$ addAllFilesInDirectory(directory, pckgname, recursive)[ FD ]
Line_19 $$ final URLConnection urlConnection = url.openConnection()-->Line_19 $$ final URLConnection urlConnection = url.openConnection()[ CD ]
Line_3 $$ URL url-->Line_19 $$ final URLConnection urlConnection = url.openConnection()[ FD ]
Line_6 $$ url = ResourceLocatorTool.getClassPathResource(ExampleRunner.class, name)-->Line_19 $$ final URLConnection urlConnection = url.openConnection()[ FD ]
Line_19 $$ final URLConnection urlConnection = url.openConnection()-->Line_20 $$ if (urlConnection instanceof JarURLConnection) [ FD ]
Line_20 $$ if (urlConnection instanceof JarURLConnection) -->Line_21 $$ final JarURLConnection conn = (JarURLConnection) urlConnection[ CD ]
Line_20 $$ if (urlConnection instanceof JarURLConnection) -->Line_22 $$ final JarFile jfile = conn.getJarFile()[ CD ]
Line_22 $$ final JarFile jfile = conn.getJarFile()-->Line_22 $$ final JarFile jfile = conn.getJarFile()[ CD ]
Line_21 $$ final JarURLConnection conn = (JarURLConnection) urlConnection-->Line_22 $$ final JarFile jfile = conn.getJarFile()[ FD ]
Line_20 $$ if (urlConnection instanceof JarURLConnection) -->Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()[ CD ]
Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()-->Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()[ CD ]
Line_22 $$ final JarFile jfile = conn.getJarFile()-->Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()[ FD ]
Line_20 $$ if (urlConnection instanceof JarURLConnection) -->Line_24 $$ while (e.hasMoreElements()) [ CD ]
Line_20 $$ if (urlConnection instanceof JarURLConnection) -->Line_20 $$ if (urlConnection instanceof JarURLConnection) [ CD ]
Line_24 $$ while (e.hasMoreElements()) -->Line_24 $$ while (e.hasMoreElements()) [ CD ]
Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()-->Line_24 $$ while (e.hasMoreElements()) [ FD ]
Line_24 $$ while (e.hasMoreElements()) -->Line_25 $$ final ZipEntry entry = e.nextElement()[ CD ]
Line_25 $$ final ZipEntry entry = e.nextElement()-->Line_25 $$ final ZipEntry entry = e.nextElement()[ CD ]
Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()-->Line_25 $$ final ZipEntry entry = e.nextElement()[ FD ]
Line_24 $$ while (e.hasMoreElements()) -->Line_26 $$ final Class<?> result = load(entry.getName())[ CD ]
Line_26 $$ final Class<?> result = load(entry.getName())-->Line_26 $$ final Class<?> result = load(entry.getName())[ CD ]
Line_25 $$ final ZipEntry entry = e.nextElement()-->Line_26 $$ final Class<?> result = load(entry.getName())[ FD ]
Line_24 $$ while (e.hasMoreElements()) -->Line_27 $$ if (result != null) [ CD ]
Line_26 $$ final Class<?> result = load(entry.getName())-->Line_27 $$ if (result != null) [ FD ]
Line_27 $$ if (result != null) -->Line_28 $$ addClassForPackage(result)[ CD ]
Line_26 $$ final Class<?> result = load(entry.getName())-->Line_28 $$ addClassForPackage(result)[ FD ]
Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()-->Line_33 $$ logger.logp(Level.SEVERE, this.getClass().toString(), "find(pckgname, recursive, classes)", "Exception", e)[ FD ]
Line_23 $$ final Enumeration<JarEntry> e = jfile.entries()-->Line_35 $$ logger.logp(Level.SEVERE, this.getClass().toString(), "find(pckgname, recursive, classes)", "Exception", e)[ FD ]
Line_25 $$ final ZipEntry entry = e.nextElement()-->Line_26 $$ final Class<?> result = load(entry.getName())[ FD ]
Line_26 $$ final Class<?> result = load(entry.getName())-->Line_27 $$ if (result != null) [ FD ]
Line_26 $$ final Class<?> result = load(entry.getName())-->Line_28 $$ addClassForPackage(result)[ FD ]
