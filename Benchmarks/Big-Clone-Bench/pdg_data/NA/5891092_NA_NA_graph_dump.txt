Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException [ CD ]
Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException -->Line_3 $$ IWorkspaceDescription desc = ResourcesPlugin.getWorkspace().getDescription()[ CD ]
Line_3 $$ IWorkspaceDescription desc = ResourcesPlugin.getWorkspace().getDescription()-->Line_3 $$ IWorkspaceDescription desc = ResourcesPlugin.getWorkspace().getDescription()[ CD ]
Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException -->Line_4 $$ desc.setAutoBuilding(false)[ CD ]
Line_3 $$ IWorkspaceDescription desc = ResourcesPlugin.getWorkspace().getDescription()-->Line_4 $$ desc.setAutoBuilding(false)[ FD ]
Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException -->Line_5 $$ ResourcesPlugin.getWorkspace().setDescription(desc)[ CD ]
Line_3 $$ IWorkspaceDescription desc = ResourcesPlugin.getWorkspace().getDescription()-->Line_5 $$ ResourcesPlugin.getWorkspace().setDescription(desc)[ FD ]
Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException -->Line_6 $$ String name = "TestProject"[ CD ]
Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException -->Line_7 $$ for (int i = 0; i < 1000; i++) [ CD ]
Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException -->Line_2 $$ public static IProject createSimplemodelEnabledJavaProject() throws CoreException [ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_7 $$ for (int i = 0; i < 1000; i++) [ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_7 $$ for (int i = 0; i < 1000; i++) [ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_7 $$ for (int i = 0; i < 1000; i++) [ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_9 $$ if (project.exists())[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_9 $$ if (project.exists())[ FD ]
Line_9 $$ if (project.exists())-->Line_9 $$ if (project.exists())[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_9 $$ if (project.exists())[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_10 $$ project.create(null)[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_10 $$ project.create(null)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_11 $$ project.open(null)[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_11 $$ project.open(null)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_12 $$ IProjectDescription description = project.getDescription()[ CD ]
Line_12 $$ IProjectDescription description = project.getDescription()-->Line_12 $$ IProjectDescription description = project.getDescription()[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_12 $$ IProjectDescription description = project.getDescription()[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_13 $$ String[] natures = description.getNatureIds()[ CD ]
Line_13 $$ String[] natures = description.getNatureIds()-->Line_13 $$ String[] natures = description.getNatureIds()[ CD ]
Line_12 $$ IProjectDescription description = project.getDescription()-->Line_13 $$ String[] natures = description.getNatureIds()[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_14 $$ String[] newNatures = new String[natures.length + 2][ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_15 $$ System.arraycopy(natures, 0, newNatures, 0, natures.length)[ CD ]
Line_13 $$ String[] natures = description.getNatureIds()-->Line_15 $$ System.arraycopy(natures, 0, newNatures, 0, natures.length)[ FD ]
Line_14 $$ String[] newNatures = new String[natures.length + 2]-->Line_15 $$ System.arraycopy(natures, 0, newNatures, 0, natures.length)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_16 $$ newNatures[natures.length] = JavaCore.NATURE_ID[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_17 $$ newNatures[natures.length + 1] = SimplemodelNature.NATURE_ID[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_18 $$ description.setNatureIds(newNatures)[ CD ]
Line_12 $$ IProjectDescription description = project.getDescription()-->Line_18 $$ description.setNatureIds(newNatures)[ FD ]
Line_14 $$ String[] newNatures = new String[natures.length + 2]-->Line_18 $$ description.setNatureIds(newNatures)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_19 $$ project.setDescription(description, null)[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_19 $$ project.setDescription(description, null)[ FD ]
Line_12 $$ IProjectDescription description = project.getDescription()-->Line_19 $$ project.setDescription(description, null)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_20 $$ IJavaProject javaProject = JavaCore.create(project)[ CD ]
Line_20 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_20 $$ IJavaProject javaProject = JavaCore.create(project)[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_20 $$ IJavaProject javaProject = JavaCore.create(project)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()[ CD ]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()-->Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_23 $$ Path containerPath = new Path(JavaRuntime.JRE_CONTAINER)[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ CD ]
Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())-->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ CD ]
Line_23 $$ Path containerPath = new Path(JavaRuntime.JRE_CONTAINER)-->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ FD ]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()-->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ FD ]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()-->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_25 $$ entries.add(JavaCore.newContainerEntry(vmPath))[ CD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_25 $$ entries.add(JavaCore.newContainerEntry(vmPath))[ FD ]
Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())-->Line_25 $$ entries.add(JavaCore.newContainerEntry(vmPath))[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_26 $$ LibraryLocation[] locations = JavaRuntime.getLibraryLocations(vmInstall)[ CD ]
Line_26 $$ LibraryLocation[] locations = JavaRuntime.getLibraryLocations(vmInstall)-->Line_26 $$ LibraryLocation[] locations = JavaRuntime.getLibraryLocations(vmInstall)[ CD ]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()-->Line_26 $$ LibraryLocation[] locations = JavaRuntime.getLibraryLocations(vmInstall)[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_28 $$ entries.add(JavaCore.newLibraryEntry(element.getSystemLibraryPath(), null, null))[ FD ]
Line_27 $$ for (LibraryLocation element : locations) -->Line_28 $$ entries.add(JavaCore.newLibraryEntry(element.getSystemLibraryPath(), null, null))[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_30 $$ final Path srcPath = new Path("src")[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_31 $$ final IFolder src = project.getFolder(srcPath)[ CD ]
Line_31 $$ final IFolder src = project.getFolder(srcPath)-->Line_31 $$ final IFolder src = project.getFolder(srcPath)[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_31 $$ final IFolder src = project.getFolder(srcPath)[ FD ]
Line_30 $$ final Path srcPath = new Path("src")-->Line_31 $$ final IFolder src = project.getFolder(srcPath)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_32 $$ final Path binPath = new Path("bin")[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_33 $$ final IFolder bin = project.getFolder(binPath)[ CD ]
Line_33 $$ final IFolder bin = project.getFolder(binPath)-->Line_33 $$ final IFolder bin = project.getFolder(binPath)[ CD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_33 $$ final IFolder bin = project.getFolder(binPath)[ FD ]
Line_32 $$ final Path binPath = new Path("bin")-->Line_33 $$ final IFolder bin = project.getFolder(binPath)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_34 $$ src.create(true, true, null)[ CD ]
Line_31 $$ final IFolder src = project.getFolder(srcPath)-->Line_34 $$ src.create(true, true, null)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_35 $$ bin.create(true, true, null)[ CD ]
Line_33 $$ final IFolder bin = project.getFolder(binPath)-->Line_35 $$ bin.create(true, true, null)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_36 $$ entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)))[ CD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_36 $$ entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)))[ FD ]
Line_30 $$ final Path srcPath = new Path("src")-->Line_36 $$ entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)))[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_36 $$ entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)))[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_37 $$ javaProject.setOutputLocation(project.getFullPath().append(binPath), null)[ CD ]
Line_20 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_37 $$ javaProject.setOutputLocation(project.getFullPath().append(binPath), null)[ FD ]
Line_32 $$ final Path binPath = new Path("bin")-->Line_37 $$ javaProject.setOutputLocation(project.getFullPath().append(binPath), null)[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_37 $$ javaProject.setOutputLocation(project.getFullPath().append(binPath), null)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_38 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null)[ CD ]
Line_20 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_38 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null)[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_38 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null)[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_38 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null)[ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_39 $$ return project[ CD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_7 $$ for (int i = 0; i < 1000; i++) [ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_7 $$ for (int i = 0; i < 1000; i++) [ FD ]
Line_7 $$ for (int i = 0; i < 1000; i++) -->Line_7 $$ for (int i = 0; i < 1000; i++) [ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_9 $$ if (project.exists())[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_9 $$ if (project.exists())[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_10 $$ project.create(null)[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_11 $$ project.open(null)[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_12 $$ IProjectDescription description = project.getDescription()[ FD ]
Line_12 $$ IProjectDescription description = project.getDescription()-->Line_13 $$ String[] natures = description.getNatureIds()[ FD ]
Line_13 $$ String[] natures = description.getNatureIds()-->Line_15 $$ System.arraycopy(natures, 0, newNatures, 0, natures.length)[ FD ]
Line_14 $$ String[] newNatures = new String[natures.length + 2]-->Line_15 $$ System.arraycopy(natures, 0, newNatures, 0, natures.length)[ FD ]
Line_12 $$ IProjectDescription description = project.getDescription()-->Line_18 $$ description.setNatureIds(newNatures)[ FD ]
Line_14 $$ String[] newNatures = new String[natures.length + 2]-->Line_18 $$ description.setNatureIds(newNatures)[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_19 $$ project.setDescription(description, null)[ FD ]
Line_12 $$ IProjectDescription description = project.getDescription()-->Line_19 $$ project.setDescription(description, null)[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_20 $$ IJavaProject javaProject = JavaCore.create(project)[ FD ]
Line_23 $$ Path containerPath = new Path(JavaRuntime.JRE_CONTAINER)-->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ FD ]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()-->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ FD ]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()-->Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_25 $$ entries.add(JavaCore.newContainerEntry(vmPath))[ FD ]
Line_24 $$ IPath vmPath = containerPath.append(vmInstall.getVMInstallType().getId()).append(vmInstall.getName())-->Line_25 $$ entries.add(JavaCore.newContainerEntry(vmPath))[ FD ]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall()-->Line_26 $$ LibraryLocation[] locations = JavaRuntime.getLibraryLocations(vmInstall)[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_28 $$ entries.add(JavaCore.newLibraryEntry(element.getSystemLibraryPath(), null, null))[ FD ]
Line_27 $$ for (LibraryLocation element : locations) -->Line_28 $$ entries.add(JavaCore.newLibraryEntry(element.getSystemLibraryPath(), null, null))[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_31 $$ final IFolder src = project.getFolder(srcPath)[ FD ]
Line_30 $$ final Path srcPath = new Path("src")-->Line_31 $$ final IFolder src = project.getFolder(srcPath)[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_33 $$ final IFolder bin = project.getFolder(binPath)[ FD ]
Line_32 $$ final Path binPath = new Path("bin")-->Line_33 $$ final IFolder bin = project.getFolder(binPath)[ FD ]
Line_31 $$ final IFolder src = project.getFolder(srcPath)-->Line_34 $$ src.create(true, true, null)[ FD ]
Line_33 $$ final IFolder bin = project.getFolder(binPath)-->Line_35 $$ bin.create(true, true, null)[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_36 $$ entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)))[ FD ]
Line_30 $$ final Path srcPath = new Path("src")-->Line_36 $$ entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)))[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_36 $$ entries.add(JavaCore.newSourceEntry(project.getFullPath().append(srcPath)))[ FD ]
Line_20 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_37 $$ javaProject.setOutputLocation(project.getFullPath().append(binPath), null)[ FD ]
Line_32 $$ final Path binPath = new Path("bin")-->Line_37 $$ javaProject.setOutputLocation(project.getFullPath().append(binPath), null)[ FD ]
Line_8 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name + i)-->Line_37 $$ javaProject.setOutputLocation(project.getFullPath().append(binPath), null)[ FD ]
Line_20 $$ IJavaProject javaProject = JavaCore.create(project)-->Line_38 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null)[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_38 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null)[ FD ]
Line_21 $$ Set<IClasspathEntry> entries = new HashSet<IClasspathEntry>()-->Line_38 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null)[ FD ]
