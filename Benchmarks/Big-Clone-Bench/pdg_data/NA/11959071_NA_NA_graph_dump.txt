Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception [ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_3 $$ URLConnection conn = new URL(url).openConnection()[ CD ]
Line_3 $$ URLConnection conn = new URL(url).openConnection()-->Line_3 $$ URLConnection conn = new URL(url).openConnection()[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_4 $$ progress.setMaximum(Math.max(0, conn.getContentLength()))[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_4 $$ progress.setMaximum(Math.max(0, conn.getContentLength()))[ FD ]
Line_3 $$ URLConnection conn = new URL(url).openConnection()-->Line_4 $$ progress.setMaximum(Math.max(0, conn.getContentLength()))[ FD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_5 $$ String path = MiscUtilities.constructPath(installDirectory, fileName)[ CD ]
Line_5 $$ String path = MiscUtilities.constructPath(installDirectory, fileName)-->Line_5 $$ String path = MiscUtilities.constructPath(installDirectory, fileName)[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_5 $$ String path = MiscUtilities.constructPath(installDirectory, fileName)[ FD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))[ CD ]
Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))-->Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))[ CD ]
Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))-->Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))[ FD ]
Line_3 $$ URLConnection conn = new URL(url).openConnection()-->Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))[ FD ]
Line_6 $$ if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true))-->Line_6 $$ return null[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_7 $$ if (archive_zip) [ CD ]
Line_7 $$ if (archive_zip) -->Line_8 $$ Enumeration entries[ CD ]
Line_7 $$ if (archive_zip) -->Line_9 $$ ZipFile zipFile[ CD ]
Line_9 $$ ZipFile zipFile-->Line_12 $$ zipFile = new ZipFile(tempFile)[ FD ]
Line_12 $$ zipFile = new ZipFile(tempFile)-->Line_12 $$ zipFile = new ZipFile(tempFile)[ FD ]
Line_8 $$ Enumeration entries-->Line_13 $$ entries = zipFile.entries()[ FD ]
Line_13 $$ entries = zipFile.entries()-->Line_13 $$ entries = zipFile.entries()[ FD ]
Line_13 $$ entries = zipFile.entries()-->Line_13 $$ entries = zipFile.entries()[ CD ]
Line_9 $$ ZipFile zipFile-->Line_13 $$ entries = zipFile.entries()[ FD ]
Line_12 $$ zipFile = new ZipFile(tempFile)-->Line_13 $$ entries = zipFile.entries()[ FD ]
Line_14 $$ while (entries.hasMoreElements()) -->Line_14 $$ while (entries.hasMoreElements()) [ CD ]
Line_8 $$ Enumeration entries-->Line_14 $$ while (entries.hasMoreElements()) [ FD ]
Line_13 $$ entries = zipFile.entries()-->Line_14 $$ while (entries.hasMoreElements()) [ FD ]
Line_14 $$ while (entries.hasMoreElements()) -->Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()[ CD ]
Line_8 $$ Enumeration entries-->Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()[ FD ]
Line_13 $$ entries = zipFile.entries()-->Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()[ FD ]
Line_14 $$ while (entries.hasMoreElements()) -->Line_16 $$ if (entry.isDirectory()) [ CD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_16 $$ if (entry.isDirectory()) [ FD ]
Line_16 $$ if (entry.isDirectory()) -->Line_16 $$ if (entry.isDirectory()) [ CD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_16 $$ if (entry.isDirectory()) [ FD ]
Line_16 $$ if (entry.isDirectory()) -->Line_17 $$ String dpath = MiscUtilities.constructPath(installDirectory, entry.getName())[ CD ]
Line_17 $$ String dpath = MiscUtilities.constructPath(installDirectory, entry.getName())-->Line_17 $$ String dpath = MiscUtilities.constructPath(installDirectory, entry.getName())[ CD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_17 $$ String dpath = MiscUtilities.constructPath(installDirectory, entry.getName())[ FD ]
Line_16 $$ if (entry.isDirectory()) -->Line_18 $$ (new File(dpath)).mkdir()[ CD ]
Line_14 $$ while (entries.hasMoreElements()) -->Line_21 $$ progress.setMaximum((int) entry.getSize())[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_21 $$ progress.setMaximum((int) entry.getSize())[ FD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_21 $$ progress.setMaximum((int) entry.getSize())[ FD ]
Line_14 $$ while (entries.hasMoreElements()) -->Line_22 $$ String ePath = MiscUtilities.constructPath(installDirectory, entry.getName())[ CD ]
Line_22 $$ String ePath = MiscUtilities.constructPath(installDirectory, entry.getName())-->Line_22 $$ String ePath = MiscUtilities.constructPath(installDirectory, entry.getName())[ CD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_22 $$ String ePath = MiscUtilities.constructPath(installDirectory, entry.getName())[ FD ]
Line_14 $$ while (entries.hasMoreElements()) -->Line_23 $$ copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true)[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_23 $$ copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true)[ FD ]
Line_9 $$ ZipFile zipFile-->Line_23 $$ copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true)[ FD ]
Line_12 $$ zipFile = new ZipFile(tempFile)-->Line_23 $$ copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true)[ FD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_23 $$ copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true)[ FD ]
Line_9 $$ ZipFile zipFile-->Line_25 $$ zipFile.close()[ FD ]
Line_12 $$ zipFile = new ZipFile(tempFile)-->Line_25 $$ zipFile.close()[ FD ]
Line_11 $$ File tempFile = new File(path)-->Line_26 $$ tempFile.delete()[ FD ]
Line_7 $$ if (archive_zip) -->Line_30 $$ if (archive_gzip) [ CD ]
Line_30 $$ if (archive_gzip) -->Line_31 $$ File srce = new File(path)[ CD ]
Line_30 $$ if (archive_gzip) -->Line_32 $$ GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce))[ CD ]
Line_30 $$ if (archive_gzip) -->Line_33 $$ File temp = File.createTempFile("macro", "mgr")[ CD ]
Line_33 $$ File temp = File.createTempFile("macro", "mgr")-->Line_33 $$ File temp = File.createTempFile("macro", "mgr")[ CD ]
Line_30 $$ if (archive_gzip) -->Line_34 $$ progress.setMaximum((int) srce.length())[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_34 $$ progress.setMaximum((int) srce.length())[ FD ]
Line_31 $$ File srce = new File(path)-->Line_34 $$ progress.setMaximum((int) srce.length())[ FD ]
Line_30 $$ if (archive_gzip) -->Line_35 $$ copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true)[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_35 $$ copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true)[ FD ]
Line_32 $$ GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce))-->Line_35 $$ copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true)[ FD ]
Line_30 $$ if (archive_gzip) -->Line_36 $$ TarArchive tarc = new TarArchive(new FileInputStream(temp))[ CD ]
Line_30 $$ if (archive_gzip) -->Line_37 $$ tarc.extractContents(new File(installDirectory))[ CD ]
Line_36 $$ TarArchive tarc = new TarArchive(new FileInputStream(temp))-->Line_37 $$ tarc.extractContents(new File(installDirectory))[ FD ]
Line_30 $$ if (archive_gzip) -->Line_38 $$ tarc.closeArchive()[ CD ]
Line_36 $$ TarArchive tarc = new TarArchive(new FileInputStream(temp))-->Line_38 $$ tarc.closeArchive()[ FD ]
Line_30 $$ if (archive_gzip) -->Line_39 $$ (new File(path)).delete()[ CD ]
Line_2 $$ private String download(MacroManagerProgress progress, String fileName, String url) throws Exception -->Line_41 $$ return path[ CD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_16 $$ if (entry.isDirectory()) [ FD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_16 $$ if (entry.isDirectory()) [ FD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_17 $$ String dpath = MiscUtilities.constructPath(installDirectory, entry.getName())[ FD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_21 $$ progress.setMaximum((int) entry.getSize())[ FD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_22 $$ String ePath = MiscUtilities.constructPath(installDirectory, entry.getName())[ FD ]
Line_15 $$ ZipEntry entry = (ZipEntry) entries.nextElement()-->Line_23 $$ copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true)[ FD ]
