Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) [ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_3 $$ BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel()[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_3 $$ BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_4 $$ if (!graph.isMechanistic())[ CD ]
Line_4 $$ if (!graph.isMechanistic())-->Line_4 $$ if (!graph.isMechanistic())[ CD ]
Line_4 $$ if (!graph.isMechanistic())-->Line_4 $$ if (!graph.isMechanistic())[ CD ]
Line_3 $$ BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel()-->Line_4 $$ if (!graph.isMechanistic())[ FD ]
Line_4 $$ if (!graph.isMechanistic())-->Line_4 $$ return[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()[ CD ]
Line_3 $$ BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel()-->Line_6 $$ for (Object o : graph.getNodes()) [ FD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_8 $$ if (node.isHighlighted()) [ FD ]
Line_8 $$ if (node.isHighlighted()) -->Line_8 $$ if (node.isHighlighted()) [ CD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_8 $$ if (node.isHighlighted()) [ FD ]
Line_8 $$ if (node.isHighlighted()) -->Line_9 $$ highlightMap.put(node.getIDHash(), node.getHighlightColor())[ CD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_9 $$ highlightMap.put(node.getIDHash(), node.getHighlightColor())[ FD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_9 $$ highlightMap.put(node.getIDHash(), node.getHighlightColor())[ FD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_9 $$ highlightMap.put(node.getIDHash(), node.getHighlightColor())[ FD ]
Line_3 $$ BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel()-->Line_12 $$ for (Object o : graph.getEdges()) [ FD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_14 $$ if (edge.isHighlighted()) [ FD ]
Line_14 $$ if (edge.isHighlighted()) -->Line_14 $$ if (edge.isHighlighted()) [ CD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_14 $$ if (edge.isHighlighted()) [ FD ]
Line_14 $$ if (edge.isHighlighted()) -->Line_15 $$ highlightMap.put(edge.getIDHash(), edge.getHighlightColor())[ CD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_15 $$ highlightMap.put(edge.getIDHash(), edge.getHighlightColor())[ FD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_15 $$ highlightMap.put(edge.getIDHash(), edge.getHighlightColor())[ FD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_15 $$ highlightMap.put(edge.getIDHash(), edge.getHighlightColor())[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_18 $$ HighlightLayer hLayer = (HighlightLayer) ((ChsScalableRootEditPart) viewer.getRootEditPart()).getLayer(HighlightLayer.HIGHLIGHT_LAYER)[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_18 $$ HighlightLayer hLayer = (HighlightLayer) ((ChsScalableRootEditPart) viewer.getRootEditPart()).getLayer(HighlightLayer.HIGHLIGHT_LAYER)[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_19 $$ hLayer.removeAll()[ CD ]
Line_18 $$ HighlightLayer hLayer = (HighlightLayer) ((ChsScalableRootEditPart) viewer.getRootEditPart()).getLayer(HighlightLayer.HIGHLIGHT_LAYER)-->Line_19 $$ hLayer.removeAll()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_20 $$ hLayer.highlighted.clear()[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_21 $$ viewer.deselectAll()[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_21 $$ viewer.deselectAll()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_22 $$ graph.recordLayout()[ CD ]
Line_3 $$ BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel()-->Line_22 $$ graph.recordLayout()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_23 $$ PathwayHolder p = graph.getPathway()[ CD ]
Line_23 $$ PathwayHolder p = graph.getPathway()-->Line_23 $$ PathwayHolder p = graph.getPathway()[ CD ]
Line_3 $$ BioPAXGraph graph = (BioPAXGraph) viewer.getContents().getModel()-->Line_23 $$ PathwayHolder p = graph.getPathway()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_24 $$ if (withContent != null) [ CD ]
Line_24 $$ if (withContent != null) -->Line_25 $$ p.updateContentWith(withContent)[ CD ]
Line_23 $$ PathwayHolder p = graph.getPathway()-->Line_25 $$ p.updateContentWith(withContent)[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)[ CD ]
Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)-->Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)[ CD ]
Line_23 $$ PathwayHolder p = graph.getPathway()-->Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_28 $$ newGraph.setAsRoot()[ CD ]
Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)-->Line_28 $$ newGraph.setAsRoot()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_29 $$ viewer.setContents(newGraph)[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_29 $$ viewer.setContents(newGraph)[ FD ]
Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)-->Line_29 $$ viewer.setContents(newGraph)[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_30 $$ boolean layedout = newGraph.fetchLayout()[ CD ]
Line_30 $$ boolean layedout = newGraph.fetchLayout()-->Line_30 $$ boolean layedout = newGraph.fetchLayout()[ CD ]
Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)-->Line_30 $$ boolean layedout = newGraph.fetchLayout()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_31 $$ if (!layedout) [ CD ]
Line_30 $$ boolean layedout = newGraph.fetchLayout()-->Line_31 $$ if (!layedout) [ FD ]
Line_31 $$ if (!layedout) -->Line_31 $$ if (!layedout) [ CD ]
Line_30 $$ boolean layedout = newGraph.fetchLayout()-->Line_31 $$ if (!layedout) [ FD ]
Line_31 $$ if (!layedout) -->Line_32 $$ new CoSELayoutAction(main).run()[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_34 $$ viewer.deselectAll()[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_34 $$ viewer.deselectAll()[ FD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_35 $$ GraphAnimation.run(viewer)[ CD ]
Line_2 $$ private void updateViewerContent(ScrollingGraphicalViewer viewer) -->Line_35 $$ GraphAnimation.run(viewer)[ FD ]
Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)-->Line_36 $$ for (Object o : newGraph.getNodes()) [ FD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_38 $$ if (highlightMap.containsKey(node.getIDHash())) [ FD ]
Line_38 $$ if (highlightMap.containsKey(node.getIDHash())) -->Line_38 $$ if (highlightMap.containsKey(node.getIDHash())) [ CD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_38 $$ if (highlightMap.containsKey(node.getIDHash())) [ FD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_38 $$ if (highlightMap.containsKey(node.getIDHash())) [ FD ]
Line_38 $$ if (highlightMap.containsKey(node.getIDHash())) -->Line_39 $$ node.setHighlightColor(highlightMap.get(node.getIDHash()))[ CD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_39 $$ node.setHighlightColor(highlightMap.get(node.getIDHash()))[ FD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_39 $$ node.setHighlightColor(highlightMap.get(node.getIDHash()))[ FD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_39 $$ node.setHighlightColor(highlightMap.get(node.getIDHash()))[ FD ]
Line_38 $$ if (highlightMap.containsKey(node.getIDHash())) -->Line_40 $$ node.setHighlight(true)[ CD ]
Line_7 $$ IBioPAXNode node = (IBioPAXNode) o-->Line_40 $$ node.setHighlight(true)[ FD ]
Line_27 $$ BioPAXGraph newGraph = main.getRootGraph().excise(p)-->Line_43 $$ for (Object o : newGraph.getEdges()) [ FD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_45 $$ if (highlightMap.containsKey(edge.getIDHash())) [ FD ]
Line_45 $$ if (highlightMap.containsKey(edge.getIDHash())) -->Line_45 $$ if (highlightMap.containsKey(edge.getIDHash())) [ CD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_45 $$ if (highlightMap.containsKey(edge.getIDHash())) [ FD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_45 $$ if (highlightMap.containsKey(edge.getIDHash())) [ FD ]
Line_45 $$ if (highlightMap.containsKey(edge.getIDHash())) -->Line_46 $$ edge.setHighlightColor(highlightMap.get(edge.getIDHash()))[ CD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_46 $$ edge.setHighlightColor(highlightMap.get(edge.getIDHash()))[ FD ]
Line_5 $$ Map<String, Color> highlightMap = new HashMap<String, Color>()-->Line_46 $$ edge.setHighlightColor(highlightMap.get(edge.getIDHash()))[ FD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_46 $$ edge.setHighlightColor(highlightMap.get(edge.getIDHash()))[ FD ]
Line_45 $$ if (highlightMap.containsKey(edge.getIDHash())) -->Line_47 $$ edge.setHighlight(true)[ CD ]
Line_13 $$ IBioPAXEdge edge = (IBioPAXEdge) o-->Line_47 $$ edge.setHighlight(true)[ FD ]
