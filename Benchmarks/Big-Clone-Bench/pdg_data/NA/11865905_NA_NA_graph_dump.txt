Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testRegister() [ CD ]
Line_6 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_6 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")[ CD ]
Line_6 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_7 $$ md5.update(password.getBytes())[ FD ]
Line_5 $$ String password = "123"-->Line_7 $$ md5.update(password.getBytes())[ FD ]
Line_6 $$ MessageDigest md5 = MessageDigest.getInstance("MD5")-->Line_8 $$ String passwordMd5 = new String(md5.digest())[ FD ]
Line_9 $$ LogService logServiceMock = EasyMock.createMock(LogService.class)-->Line_9 $$ LogService logServiceMock = EasyMock.createMock(LogService.class)[ CD ]
Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)-->Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)[ CD ]
Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)-->Line_11 $$ userServ.setDbServ(dbServiceMock)[ FD ]
Line_9 $$ LogService logServiceMock = EasyMock.createMock(LogService.class)-->Line_12 $$ userServ.setLogger(logServiceMock)[ FD ]
Line_13 $$ IFeelerUser user = new FeelerUserImpl()-->Line_14 $$ user.setUsername(username)[ FD ]
Line_4 $$ String username = "muchu"-->Line_14 $$ user.setUsername(username)[ FD ]
Line_13 $$ IFeelerUser user = new FeelerUserImpl()-->Line_15 $$ user.setPassword(passwordMd5)[ FD ]
Line_8 $$ String passwordMd5 = new String(md5.digest())-->Line_15 $$ user.setPassword(passwordMd5)[ FD ]
Line_9 $$ LogService logServiceMock = EasyMock.createMock(LogService.class)-->Line_16 $$ logServiceMock.info(DbUserServiceImpl.class, ">>>rigister " + username + "<<<")[ FD ]
Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)-->Line_17 $$ EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(null)[ FD ]
Line_4 $$ String username = "muchu"-->Line_17 $$ EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(null)[ FD ]
Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)-->Line_18 $$ dbServiceMock.addFeelerUser(username, passwordMd5)[ FD ]
Line_4 $$ String username = "muchu"-->Line_18 $$ dbServiceMock.addFeelerUser(username, passwordMd5)[ FD ]
Line_8 $$ String passwordMd5 = new String(md5.digest())-->Line_18 $$ dbServiceMock.addFeelerUser(username, passwordMd5)[ FD ]
Line_9 $$ LogService logServiceMock = EasyMock.createMock(LogService.class)-->Line_19 $$ logServiceMock.info(DbUserServiceImpl.class, ">>>identification " + username + "<<<")[ FD ]
Line_13 $$ IFeelerUser user = new FeelerUserImpl()-->Line_20 $$ EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user)[ FD ]
Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)-->Line_20 $$ EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user)[ FD ]
Line_4 $$ String username = "muchu"-->Line_20 $$ EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user)[ FD ]
Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)-->Line_21 $$ EasyMock.replay(dbServiceMock, logServiceMock)[ FD ]
Line_9 $$ LogService logServiceMock = EasyMock.createMock(LogService.class)-->Line_21 $$ EasyMock.replay(dbServiceMock, logServiceMock)[ FD ]
Line_4 $$ String username = "muchu"-->Line_22 $$ Assert.assertTrue(userServ.register(username, password))[ FD ]
Line_5 $$ String password = "123"-->Line_22 $$ Assert.assertTrue(userServ.register(username, password))[ FD ]
Line_10 $$ DbService dbServiceMock = EasyMock.createMock(DbService.class)-->Line_23 $$ EasyMock.verify(dbServiceMock, logServiceMock)[ FD ]
Line_9 $$ LogService logServiceMock = EasyMock.createMock(LogService.class)-->Line_23 $$ EasyMock.verify(dbServiceMock, logServiceMock)[ FD ]
