Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void unzip(final File outDir) throws IOException [ CD ]
Line_2 $$ public void unzip(final File outDir) throws IOException -->Line_3 $$ ZipInputStream input = new ZipInputStream(new ByteArrayInputStream(this.bytes))[ CD ]
Line_2 $$ public void unzip(final File outDir) throws IOException -->Line_4 $$ ZipEntry entry = input.getNextEntry()[ CD ]
Line_4 $$ ZipEntry entry = input.getNextEntry()-->Line_4 $$ ZipEntry entry = input.getNextEntry()[ CD ]
Line_3 $$ ZipInputStream input = new ZipInputStream(new ByteArrayInputStream(this.bytes))-->Line_4 $$ ZipEntry entry = input.getNextEntry()[ FD ]
Line_2 $$ public void unzip(final File outDir) throws IOException -->Line_5 $$ while (entry != null) [ CD ]
Line_2 $$ public void unzip(final File outDir) throws IOException -->Line_2 $$ public void unzip(final File outDir) throws IOException [ CD ]
Line_4 $$ ZipEntry entry = input.getNextEntry()-->Line_5 $$ while (entry != null) [ FD ]
Line_5 $$ while (entry != null) -->Line_6 $$ entry = input.getNextEntry()[ CD ]
Line_6 $$ entry = input.getNextEntry()-->Line_6 $$ entry = input.getNextEntry()[ FD ]
Line_4 $$ ZipEntry entry = input.getNextEntry()-->Line_6 $$ entry = input.getNextEntry()[ FD ]
Line_6 $$ entry = input.getNextEntry()-->Line_6 $$ entry = input.getNextEntry()[ CD ]
Line_3 $$ ZipInputStream input = new ZipInputStream(new ByteArrayInputStream(this.bytes))-->Line_6 $$ entry = input.getNextEntry()[ FD ]
Line_5 $$ while (entry != null) -->Line_7 $$ if (entry != null) [ CD ]
Line_6 $$ entry = input.getNextEntry()-->Line_7 $$ if (entry != null) [ FD ]
Line_4 $$ ZipEntry entry = input.getNextEntry()-->Line_7 $$ if (entry != null) [ FD ]
Line_7 $$ if (entry != null) -->Line_8 $$ File file = this.createFile(outDir, entry.getName())[ CD ]
Line_8 $$ File file = this.createFile(outDir, entry.getName())-->Line_8 $$ File file = this.createFile(outDir, entry.getName())[ CD ]
Line_2 $$ public void unzip(final File outDir) throws IOException -->Line_8 $$ File file = this.createFile(outDir, entry.getName())[ FD ]
Line_6 $$ entry = input.getNextEntry()-->Line_8 $$ File file = this.createFile(outDir, entry.getName())[ FD ]
Line_4 $$ ZipEntry entry = input.getNextEntry()-->Line_8 $$ File file = this.createFile(outDir, entry.getName())[ FD ]
Line_7 $$ if (entry != null) -->Line_9 $$ if (!entry.isDirectory()) [ CD ]
Line_9 $$ if (!entry.isDirectory()) -->Line_9 $$ if (!entry.isDirectory()) [ CD ]
Line_9 $$ if (!entry.isDirectory()) -->Line_9 $$ if (!entry.isDirectory()) [ CD ]
Line_6 $$ entry = input.getNextEntry()-->Line_9 $$ if (!entry.isDirectory()) [ FD ]
Line_4 $$ ZipEntry entry = input.getNextEntry()-->Line_9 $$ if (!entry.isDirectory()) [ FD ]
Line_9 $$ if (!entry.isDirectory()) -->Line_10 $$ FileOutputStream output = new FileOutputStream(file)[ CD ]
Line_9 $$ if (!entry.isDirectory()) -->Line_11 $$ IOUtils.copy(input, output)[ CD ]
Line_3 $$ ZipInputStream input = new ZipInputStream(new ByteArrayInputStream(this.bytes))-->Line_11 $$ IOUtils.copy(input, output)[ FD ]
Line_10 $$ FileOutputStream output = new FileOutputStream(file)-->Line_11 $$ IOUtils.copy(input, output)[ FD ]
Line_9 $$ if (!entry.isDirectory()) -->Line_12 $$ output.close()[ CD ]
Line_10 $$ FileOutputStream output = new FileOutputStream(file)-->Line_12 $$ output.close()[ FD ]
Line_2 $$ public void unzip(final File outDir) throws IOException -->Line_16 $$ input.close()[ CD ]
Line_3 $$ ZipInputStream input = new ZipInputStream(new ByteArrayInputStream(this.bytes))-->Line_16 $$ input.close()[ FD ]
Line_6 $$ entry = input.getNextEntry()-->Line_5 $$ while (entry != null) [ FD ]
Line_6 $$ entry = input.getNextEntry()-->Line_5 $$ while (entry != null) [ FD ]
Line_6 $$ entry = input.getNextEntry()-->Line_7 $$ if (entry != null) [ FD ]
Line_6 $$ entry = input.getNextEntry()-->Line_8 $$ File file = this.createFile(outDir, entry.getName())[ FD ]
Line_6 $$ entry = input.getNextEntry()-->Line_9 $$ if (!entry.isDirectory()) [ FD ]
Line_10 $$ FileOutputStream output = new FileOutputStream(file)-->Line_11 $$ IOUtils.copy(input, output)[ FD ]
Line_10 $$ FileOutputStream output = new FileOutputStream(file)-->Line_12 $$ output.close()[ FD ]
