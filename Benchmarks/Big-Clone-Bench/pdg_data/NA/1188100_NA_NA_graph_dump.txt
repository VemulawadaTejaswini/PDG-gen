Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void test() throws Exception [ CD ]
Line_2 $$ public void test() throws Exception -->Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")[ CD ]
Line_2 $$ public void test() throws Exception -->Line_4 $$ s.addText("Test")[ CD ]
Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")-->Line_4 $$ s.addText("Test")[ FD ]
Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")-->Line_6 $$ s.getOutputStream()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_10 $$ s.getWriter().write("ing is important")[ CD ]
Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")-->Line_10 $$ s.getWriter().write("ing is important")[ FD ]
Line_2 $$ public void test() throws Exception -->Line_11 $$ s.close(ResponseStateOk.getInstance())[ CD ]
Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")-->Line_11 $$ s.close(ResponseStateOk.getInstance())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_12 $$ assertEquals("Testing is important", s.getText())[ CD ]
Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")-->Line_12 $$ assertEquals("Testing is important", s.getText())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_13 $$ InputStream input = s.getInputStream()[ CD ]
Line_13 $$ InputStream input = s.getInputStream()-->Line_13 $$ InputStream input = s.getInputStream()[ CD ]
Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")-->Line_13 $$ InputStream input = s.getInputStream()[ FD ]
Line_2 $$ public void test() throws Exception -->Line_14 $$ StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ public void test() throws Exception -->Line_15 $$ IOUtils.copy(input, writer, "UTF-8")[ CD ]
Line_13 $$ InputStream input = s.getInputStream()-->Line_15 $$ IOUtils.copy(input, writer, "UTF-8")[ FD ]
Line_14 $$ StringWriter writer = new StringWriter()-->Line_15 $$ IOUtils.copy(input, writer, "UTF-8")[ FD ]
Line_2 $$ public void test() throws Exception -->Line_16 $$ assertEquals("Testing is important", writer.toString())[ CD ]
Line_14 $$ StringWriter writer = new StringWriter()-->Line_16 $$ assertEquals("Testing is important", writer.toString())[ FD ]
Line_3 $$ StorageStringWriter s = new StorageStringWriter(2048, "UTF-8")-->Line_18 $$ s.getWriter()[ FD ]
