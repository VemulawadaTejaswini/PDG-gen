Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) throws IOException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_3 $$ System.setProperty("java.protocol.xfile", "com.luzan.common.nfs")[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_4 $$ if (args.length < 1)[ CD ]
Line_4 $$ if (args.length < 1)-->Line_4 $$ usage()[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_5 $$ final String cmd = args[0][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) [ CD ]
Line_5 $$ final String cmd = args[0]-->Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) [ FD ]
Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) -->Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) [ CD ]
Line_5 $$ final String cmd = args[0]-->Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) [ FD ]
Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) -->Line_7 $$ final String path = getParameter(args, 1)[ CD ]
Line_7 $$ final String path = getParameter(args, 1)-->Line_7 $$ final String path = getParameter(args, 1)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_7 $$ final String path = getParameter(args, 1)[ FD ]
Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) -->Line_8 $$ XFile xfile = new XFile(path)[ CD ]
Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) -->Line_9 $$ if (!xfile.exists()) [ CD ]
Line_9 $$ if (!xfile.exists()) -->Line_9 $$ if (!xfile.exists()) [ CD ]
Line_9 $$ if (!xfile.exists()) -->Line_9 $$ if (!xfile.exists()) [ CD ]
Line_8 $$ XFile xfile = new XFile(path)-->Line_9 $$ if (!xfile.exists()) [ FD ]
Line_9 $$ if (!xfile.exists()) -->Line_10 $$ System.out.print("File doean't exist.\n")[ CD ]
Line_9 $$ if (!xfile.exists()) -->Line_11 $$ System.exit(1)[ CD ]
Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) -->Line_13 $$ xfile.delete()[ CD ]
Line_8 $$ XFile xfile = new XFile(path)-->Line_13 $$ xfile.delete()[ FD ]
Line_6 $$ if ("delete".equalsIgnoreCase(cmd)) -->Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) [ CD ]
Line_5 $$ final String cmd = args[0]-->Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) [ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) [ CD ]
Line_5 $$ final String cmd = args[0]-->Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) [ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_15 $$ final String pathFrom = getParameter(args, 1)[ CD ]
Line_15 $$ final String pathFrom = getParameter(args, 1)-->Line_15 $$ final String pathFrom = getParameter(args, 1)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_15 $$ final String pathFrom = getParameter(args, 1)[ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_16 $$ final String pathTo = getParameter(args, 2)[ CD ]
Line_16 $$ final String pathTo = getParameter(args, 2)-->Line_16 $$ final String pathTo = getParameter(args, 2)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_16 $$ final String pathTo = getParameter(args, 2)[ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_17 $$ final XFile xfileFrom = new XFile(pathFrom)[ CD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_18 $$ final XFile xfileTo = new XFile(pathTo)[ CD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_19 $$ if (!xfileFrom.exists()) [ CD ]
Line_19 $$ if (!xfileFrom.exists()) -->Line_19 $$ if (!xfileFrom.exists()) [ CD ]
Line_19 $$ if (!xfileFrom.exists()) -->Line_19 $$ if (!xfileFrom.exists()) [ CD ]
Line_17 $$ final XFile xfileFrom = new XFile(pathFrom)-->Line_19 $$ if (!xfileFrom.exists()) [ FD ]
Line_19 $$ if (!xfileFrom.exists()) -->Line_20 $$ System.out.print("File doesn't exist.\n")[ CD ]
Line_19 $$ if (!xfileFrom.exists()) -->Line_21 $$ System.exit(1)[ CD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_23 $$ final String mime = getParameter(args, 3, null)[ CD ]
Line_23 $$ final String mime = getParameter(args, 3, null)-->Line_23 $$ final String mime = getParameter(args, 3, null)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException -->Line_23 $$ final String mime = getParameter(args, 3, null)[ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_24 $$ final XFileInputStream in = new XFileInputStream(xfileFrom)[ CD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_25 $$ final XFileOutputStream xout = new XFileOutputStream(xfileTo)[ CD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_26 $$ if (!StringUtils.isEmpty(mime)) [ CD ]
Line_26 $$ if (!StringUtils.isEmpty(mime)) -->Line_26 $$ if (!StringUtils.isEmpty(mime)) [ CD ]
Line_26 $$ if (!StringUtils.isEmpty(mime)) -->Line_26 $$ if (!StringUtils.isEmpty(mime)) [ CD ]
Line_23 $$ final String mime = getParameter(args, 3, null)-->Line_26 $$ if (!StringUtils.isEmpty(mime)) [ FD ]
Line_26 $$ if (!StringUtils.isEmpty(mime)) -->Line_27 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfileTo.getExtensionAccessor())[ CD ]
Line_18 $$ final XFile xfileTo = new XFile(pathTo)-->Line_27 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfileTo.getExtensionAccessor())[ FD ]
Line_26 $$ if (!StringUtils.isEmpty(mime)) -->Line_28 $$ if (xfa != null) [ CD ]
Line_27 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfileTo.getExtensionAccessor())-->Line_28 $$ if (xfa != null) [ FD ]
Line_28 $$ if (xfa != null) -->Line_29 $$ xfa.setMimeType(mime)[ CD ]
Line_27 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfileTo.getExtensionAccessor())-->Line_29 $$ xfa.setMimeType(mime)[ FD ]
Line_23 $$ final String mime = getParameter(args, 3, null)-->Line_29 $$ xfa.setMimeType(mime)[ FD ]
Line_28 $$ if (xfa != null) -->Line_30 $$ xfa.setContentLength(xfileFrom.length())[ CD ]
Line_27 $$ final com.luzan.common.nfs.s3.XFileExtensionAccessor xfa = ((com.luzan.common.nfs.s3.XFileExtensionAccessor) xfileTo.getExtensionAccessor())-->Line_30 $$ xfa.setContentLength(xfileFrom.length())[ FD ]
Line_17 $$ final XFile xfileFrom = new XFile(pathFrom)-->Line_30 $$ xfa.setContentLength(xfileFrom.length())[ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_33 $$ IOUtils.copy(in, xout)[ CD ]
Line_24 $$ final XFileInputStream in = new XFileInputStream(xfileFrom)-->Line_33 $$ IOUtils.copy(in, xout)[ FD ]
Line_25 $$ final XFileOutputStream xout = new XFileOutputStream(xfileTo)-->Line_33 $$ IOUtils.copy(in, xout)[ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_34 $$ xout.flush()[ CD ]
Line_25 $$ final XFileOutputStream xout = new XFileOutputStream(xfileTo)-->Line_34 $$ xout.flush()[ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_35 $$ xout.close()[ CD ]
Line_25 $$ final XFileOutputStream xout = new XFileOutputStream(xfileTo)-->Line_35 $$ xout.close()[ FD ]
Line_14 $$ if ("copy".equalsIgnoreCase(cmd)) -->Line_36 $$ in.close()[ CD ]
Line_24 $$ final XFileInputStream in = new XFileInputStream(xfileFrom)-->Line_36 $$ in.close()[ FD ]
