Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException [ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_3 $$ String proto = url.getProtocol().toLowerCase(Locale.ENGLISH)[ CD ]
Line_3 $$ String proto = url.getProtocol().toLowerCase(Locale.ENGLISH)-->Line_3 $$ String proto = url.getProtocol().toLowerCase(Locale.ENGLISH)[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_3 $$ String proto = url.getProtocol().toLowerCase(Locale.ENGLISH)[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_4 $$ if (!("http".equals(proto) || "https".equals(proto)))[ CD ]
Line_4 $$ if (!("http".equals(proto) || "https".equals(proto)))-->Line_4 $$ if (!("http".equals(proto) || "https".equals(proto)))[ CD ]
Line_3 $$ String proto = url.getProtocol().toLowerCase(Locale.ENGLISH)-->Line_4 $$ if (!("http".equals(proto) || "https".equals(proto)))[ FD ]
Line_3 $$ String proto = url.getProtocol().toLowerCase(Locale.ENGLISH)-->Line_4 $$ if (!("http".equals(proto) || "https".equals(proto)))[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_6 $$ conn.setConnectTimeout(timeout * 1000)[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_6 $$ conn.setConnectTimeout(timeout * 1000)[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_7 $$ conn.setReadTimeout(timeout * 1000)[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_7 $$ conn.setReadTimeout(timeout * 1000)[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_8 $$ StringBuilder ua = new StringBuilder("Java/").append(System.getProperty("java.version")).append(" (").append(de.pangaea.metadataportal.Package.getProductName()).append('/').append(de.pangaea.metadataportal.Package.getVersion()).append("; OAI downloader)")[ CD ]
Line_8 $$ StringBuilder ua = new StringBuilder("Java/").append(System.getProperty("java.version")).append(" (").append(de.pangaea.metadataportal.Package.getProductName()).append('/').append(de.pangaea.metadataportal.Package.getVersion()).append("; OAI downloader)")-->Line_8 $$ StringBuilder ua = new StringBuilder("Java/").append(System.getProperty("java.version")).append(" (").append(de.pangaea.metadataportal.Package.getProductName()).append('/').append(de.pangaea.metadataportal.Package.getVersion()).append("; OAI downloader)")[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_9 $$ conn.setRequestProperty("User-Agent", ua.toString())[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_9 $$ conn.setRequestProperty("User-Agent", ua.toString())[ FD ]
Line_8 $$ StringBuilder ua = new StringBuilder("Java/").append(System.getProperty("java.version")).append(" (").append(de.pangaea.metadataportal.Package.getProductName()).append('/').append(de.pangaea.metadataportal.Package.getVersion()).append("; OAI downloader)")-->Line_9 $$ conn.setRequestProperty("User-Agent", ua.toString())[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_10 $$ conn.setRequestProperty("Accept-Encoding", "gzip, deflate, identity;q=0.3, *;q=0")[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_10 $$ conn.setRequestProperty("Accept-Encoding", "gzip, deflate, identity;q=0.3, *;q=0")[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_11 $$ conn.setRequestProperty("Accept-Charset", "utf-8, *;q=0.1")[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_11 $$ conn.setRequestProperty("Accept-Charset", "utf-8, *;q=0.1")[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_12 $$ conn.setRequestProperty("Accept", "text/xml, application/xml, *;q=0.1")[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_12 $$ conn.setRequestProperty("Accept", "text/xml, application/xml, *;q=0.1")[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_13 $$ if (checkModifiedDate != null && checkModifiedDate.get() != null)[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_13 $$ if (checkModifiedDate != null && checkModifiedDate.get() != null)[ FD ]
Line_13 $$ if (checkModifiedDate != null && checkModifiedDate.get() != null)-->Line_13 $$ conn.setIfModifiedSince(checkModifiedDate.get().getTime())[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_13 $$ conn.setIfModifiedSince(checkModifiedDate.get().getTime())[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_13 $$ conn.setIfModifiedSince(checkModifiedDate.get().getTime())[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_14 $$ conn.setUseCaches(false)[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_14 $$ conn.setUseCaches(false)[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_15 $$ conn.setFollowRedirects(true)[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_15 $$ conn.setFollowRedirects(true)[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_16 $$ log.debug("Opening connection...")[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_17 $$ InputStream in = null[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_19 $$ conn.connect()[ FD ]
Line_17 $$ InputStream in = null-->Line_20 $$ in = conn.getInputStream()[ FD ]
Line_20 $$ in = conn.getInputStream()-->Line_20 $$ in = conn.getInputStream()[ FD ]
Line_20 $$ in = conn.getInputStream()-->Line_20 $$ in = conn.getInputStream()[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_20 $$ in = conn.getInputStream()[ FD ]
Line_22 $$ int after, code-->Line_24 $$ after = conn.getHeaderFieldInt("Retry-After", -1)[ FD ]
Line_24 $$ after = conn.getHeaderFieldInt("Retry-After", -1)-->Line_24 $$ after = conn.getHeaderFieldInt("Retry-After", -1)[ FD ]
Line_24 $$ after = conn.getHeaderFieldInt("Retry-After", -1)-->Line_24 $$ after = conn.getHeaderFieldInt("Retry-After", -1)[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_24 $$ after = conn.getHeaderFieldInt("Retry-After", -1)[ FD ]
Line_22 $$ int after, code-->Line_25 $$ code = conn.getResponseCode()[ FD ]
Line_25 $$ code = conn.getResponseCode()-->Line_25 $$ code = conn.getResponseCode()[ FD ]
Line_25 $$ code = conn.getResponseCode()-->Line_25 $$ code = conn.getResponseCode()[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_25 $$ code = conn.getResponseCode()[ FD ]
Line_22 $$ int after, code-->Line_27 $$ after = -1[ FD ]
Line_24 $$ after = conn.getHeaderFieldInt("Retry-After", -1)-->Line_27 $$ after = -1[ FD ]
Line_27 $$ after = -1-->Line_27 $$ after = -1[ FD ]
Line_27 $$ after = -1-->Line_27 $$ after = -1[ CD ]
Line_22 $$ int after, code-->Line_28 $$ code = -1[ FD ]
Line_25 $$ code = conn.getResponseCode()-->Line_28 $$ code = -1[ FD ]
Line_28 $$ code = -1-->Line_28 $$ code = -1[ FD ]
Line_28 $$ code = -1-->Line_28 $$ code = -1[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_33 $$ if (checkModifiedDate != null) [ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_33 $$ if (checkModifiedDate != null) [ FD ]
Line_33 $$ if (checkModifiedDate != null) -->Line_34 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) [ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_34 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) [ FD ]
Line_34 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) -->Line_35 $$ log.debug("File not modified since " + checkModifiedDate.get())[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_35 $$ log.debug("File not modified since " + checkModifiedDate.get())[ FD ]
Line_34 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) -->Line_36 $$ if (in != null)[ CD ]
Line_17 $$ InputStream in = null-->Line_36 $$ if (in != null)[ FD ]
Line_20 $$ in = conn.getInputStream()-->Line_36 $$ if (in != null)[ FD ]
Line_36 $$ if (in != null)-->Line_36 $$ in.close()[ CD ]
Line_17 $$ InputStream in = null-->Line_36 $$ in.close()[ FD ]
Line_20 $$ in = conn.getInputStream()-->Line_36 $$ in.close()[ FD ]
Line_34 $$ if (conn.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) -->Line_37 $$ return null[ CD ]
Line_33 $$ if (checkModifiedDate != null) -->Line_39 $$ long d = conn.getLastModified()[ CD ]
Line_39 $$ long d = conn.getLastModified()-->Line_39 $$ long d = conn.getLastModified()[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_39 $$ long d = conn.getLastModified()[ FD ]
Line_33 $$ if (checkModifiedDate != null) -->Line_40 $$ checkModifiedDate.set((d == 0L) ? null : new Date(d))[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_40 $$ checkModifiedDate.set((d == 0L) ? null : new Date(d))[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_42 $$ String encoding = conn.getContentEncoding()[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_42 $$ String encoding = conn.getContentEncoding()[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_42 $$ String encoding = conn.getContentEncoding()[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_43 $$ if (encoding == null)[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_43 $$ if (encoding == null)[ FD ]
Line_43 $$ if (encoding == null)-->Line_43 $$ encoding = "identity"[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_43 $$ encoding = "identity"[ FD ]
Line_43 $$ encoding = "identity"-->Line_43 $$ encoding = "identity"[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ FD ]
Line_43 $$ encoding = "identity"-->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ FD ]
Line_43 $$ encoding = "identity"-->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_45 $$ log.debug("HTTP server uses " + encoding + " content encoding.")[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_46 $$ if ("gzip".equals(encoding))[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_46 $$ if ("gzip".equals(encoding))[ FD ]
Line_43 $$ encoding = "identity"-->Line_46 $$ if ("gzip".equals(encoding))[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_46 $$ if ("gzip".equals(encoding))[ FD ]
Line_46 $$ if ("gzip".equals(encoding))-->Line_46 $$ if ("gzip".equals(encoding))[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_46 $$ if ("gzip".equals(encoding))[ FD ]
Line_43 $$ encoding = "identity"-->Line_46 $$ if ("gzip".equals(encoding))[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_46 $$ if ("gzip".equals(encoding))[ FD ]
Line_46 $$ if ("gzip".equals(encoding))-->Line_46 $$ in = new GZIPInputStream(in)[ CD ]
Line_17 $$ InputStream in = null-->Line_46 $$ in = new GZIPInputStream(in)[ FD ]
Line_20 $$ in = conn.getInputStream()-->Line_46 $$ in = new GZIPInputStream(in)[ FD ]
Line_46 $$ in = new GZIPInputStream(in)-->Line_46 $$ in = new GZIPInputStream(in)[ FD ]
Line_46 $$ if ("gzip".equals(encoding))-->Line_46 $$ if ("deflate".equals(encoding))[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_46 $$ if ("deflate".equals(encoding))[ FD ]
Line_43 $$ encoding = "identity"-->Line_46 $$ if ("deflate".equals(encoding))[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_46 $$ if ("deflate".equals(encoding))[ FD ]
Line_46 $$ if ("deflate".equals(encoding))-->Line_46 $$ if ("deflate".equals(encoding))[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_46 $$ if ("deflate".equals(encoding))[ FD ]
Line_43 $$ encoding = "identity"-->Line_46 $$ if ("deflate".equals(encoding))[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_46 $$ if ("deflate".equals(encoding))[ FD ]
Line_46 $$ if ("deflate".equals(encoding))-->Line_46 $$ in = new InflaterInputStream(in)[ CD ]
Line_17 $$ InputStream in = null-->Line_46 $$ in = new InflaterInputStream(in)[ FD ]
Line_20 $$ in = conn.getInputStream()-->Line_46 $$ in = new InflaterInputStream(in)[ FD ]
Line_46 $$ in = new GZIPInputStream(in)-->Line_46 $$ in = new InflaterInputStream(in)[ FD ]
Line_46 $$ in = new InflaterInputStream(in)-->Line_46 $$ in = new InflaterInputStream(in)[ FD ]
Line_46 $$ if ("deflate".equals(encoding))-->Line_46 $$ if (!"identity".equals(encoding))[ CD ]
Line_46 $$ if (!"identity".equals(encoding))-->Line_46 $$ if (!"identity".equals(encoding))[ CD ]
Line_46 $$ if (!"identity".equals(encoding))-->Line_46 $$ if (!"identity".equals(encoding))[ CD ]
Line_42 $$ String encoding = conn.getContentEncoding()-->Line_46 $$ if (!"identity".equals(encoding))[ FD ]
Line_43 $$ encoding = "identity"-->Line_46 $$ if (!"identity".equals(encoding))[ FD ]
Line_44 $$ encoding = encoding.toLowerCase(Locale.ENGLISH)-->Line_46 $$ if (!"identity".equals(encoding))[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_47 $$ String contentType = conn.getContentType()[ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_47 $$ String contentType = conn.getContentType()[ CD ]
Line_5 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_47 $$ String contentType = conn.getContentType()[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_48 $$ String charset = null[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_49 $$ if (contentType != null) [ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_49 $$ if (contentType != null) [ FD ]
Line_49 $$ if (contentType != null) -->Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)[ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)[ FD ]
Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)-->Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)[ FD ]
Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)-->Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)[ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)[ FD ]
Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)-->Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)[ FD ]
Line_49 $$ if (contentType != null) -->Line_51 $$ int charsetStart = contentType.indexOf("charset=")[ CD ]
Line_51 $$ int charsetStart = contentType.indexOf("charset=")-->Line_51 $$ int charsetStart = contentType.indexOf("charset=")[ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_51 $$ int charsetStart = contentType.indexOf("charset=")[ FD ]
Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)-->Line_51 $$ int charsetStart = contentType.indexOf("charset=")[ FD ]
Line_49 $$ if (contentType != null) -->Line_52 $$ if (charsetStart >= 0) [ CD ]
Line_51 $$ int charsetStart = contentType.indexOf("charset=")-->Line_52 $$ if (charsetStart >= 0) [ FD ]
Line_52 $$ if (charsetStart >= 0) -->Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)[ CD ]
Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)-->Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)[ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)[ FD ]
Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)-->Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)[ FD ]
Line_51 $$ int charsetStart = contentType.indexOf("charset=")-->Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)[ FD ]
Line_52 $$ if (charsetStart >= 0) -->Line_54 $$ if (charsetEnd == -1)[ CD ]
Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)-->Line_54 $$ if (charsetEnd == -1)[ FD ]
Line_54 $$ if (charsetEnd == -1)-->Line_54 $$ charsetEnd = contentType.length()[ CD ]
Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)-->Line_54 $$ charsetEnd = contentType.length()[ FD ]
Line_54 $$ charsetEnd = contentType.length()-->Line_54 $$ charsetEnd = contentType.length()[ FD ]
Line_54 $$ charsetEnd = contentType.length()-->Line_54 $$ charsetEnd = contentType.length()[ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_54 $$ charsetEnd = contentType.length()[ FD ]
Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)-->Line_54 $$ charsetEnd = contentType.length()[ FD ]
Line_52 $$ if (charsetStart >= 0) -->Line_55 $$ charsetStart += "charset=".length()[ CD ]
Line_51 $$ int charsetStart = contentType.indexOf("charset=")-->Line_55 $$ charsetStart += "charset=".length()[ FD ]
Line_55 $$ charsetStart += "charset=".length()-->Line_55 $$ charsetStart += "charset=".length()[ FD ]
Line_55 $$ charsetStart += "charset=".length()-->Line_55 $$ charsetStart += "charset=".length()[ CD ]
Line_52 $$ if (charsetStart >= 0) -->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ CD ]
Line_48 $$ String charset = null-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ CD ]
Line_47 $$ String contentType = conn.getContentType()-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_50 $$ contentType = contentType.toLowerCase(Locale.ENGLISH)-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_51 $$ int charsetStart = contentType.indexOf("charset=")-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_55 $$ charsetStart += "charset=".length()-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_53 $$ int charsetEnd = contentType.indexOf(";", charsetStart)-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_54 $$ charsetEnd = contentType.length()-->Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_59 $$ log.debug("Charset from Content-Type: '" + charset + "'")[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_60 $$ InputSource src = new InputSource(in)[ CD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_61 $$ src.setSystemId(url.toString())[ CD ]
Line_60 $$ InputSource src = new InputSource(in)-->Line_61 $$ src.setSystemId(url.toString())[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_61 $$ src.setSystemId(url.toString())[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_62 $$ src.setEncoding(charset)[ CD ]
Line_60 $$ InputSource src = new InputSource(in)-->Line_62 $$ src.setEncoding(charset)[ FD ]
Line_48 $$ String charset = null-->Line_62 $$ src.setEncoding(charset)[ FD ]
Line_56 $$ charset = contentType.substring(charsetStart, charsetEnd).trim()-->Line_62 $$ src.setEncoding(charset)[ FD ]
Line_2 $$ protected InputSource getInputSource(URL url, AtomicReference<Date> checkModifiedDate) throws IOException -->Line_63 $$ return src[ CD ]
