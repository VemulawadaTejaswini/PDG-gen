Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testWriteAndRead() throws Exception [ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_3 $$ JCFS.configureLoopback(dir)[ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_4 $$ RFile file = new RFile("testreadwrite.txt")[ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_5 $$ RFileOutputStream out = new RFileOutputStream(file)[ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_6 $$ out.write("test".getBytes("utf-8"))[ CD ]
Line_5 $$ RFileOutputStream out = new RFileOutputStream(file)-->Line_6 $$ out.write("test".getBytes("utf-8"))[ FD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_7 $$ out.close()[ CD ]
Line_5 $$ RFileOutputStream out = new RFileOutputStream(file)-->Line_7 $$ out.close()[ FD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_8 $$ RFileInputStream in = new RFileInputStream(file)[ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_9 $$ byte[] buffer = new byte[4][ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_10 $$ int readCount = in.read(buffer)[ CD ]
Line_10 $$ int readCount = in.read(buffer)-->Line_10 $$ int readCount = in.read(buffer)[ CD ]
Line_8 $$ RFileInputStream in = new RFileInputStream(file)-->Line_10 $$ int readCount = in.read(buffer)[ FD ]
Line_9 $$ byte[] buffer = new byte[4]-->Line_10 $$ int readCount = in.read(buffer)[ FD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_11 $$ in.close()[ CD ]
Line_8 $$ RFileInputStream in = new RFileInputStream(file)-->Line_11 $$ in.close()[ FD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_12 $$ assertEquals(4, readCount)[ CD ]
Line_10 $$ int readCount = in.read(buffer)-->Line_12 $$ assertEquals(4, readCount)[ FD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_13 $$ String resultRead = new String(buffer, "utf-8")[ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_14 $$ assertEquals("test", resultRead)[ CD ]
Line_13 $$ String resultRead = new String(buffer, "utf-8")-->Line_14 $$ assertEquals("test", resultRead)[ FD ]
