Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException [ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_3 $$ long time = System.currentTimeMillis()[ CD ]
Line_3 $$ long time = System.currentTimeMillis()-->Line_3 $$ long time = System.currentTimeMillis()[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_4 $$ String text = request.getParameter("text")[ CD ]
Line_4 $$ String text = request.getParameter("text")-->Line_4 $$ String text = request.getParameter("text")[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_4 $$ String text = request.getParameter("text")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_5 $$ String parsedQueryString = request.getQueryString()[ CD ]
Line_5 $$ String parsedQueryString = request.getQueryString()-->Line_5 $$ String parsedQueryString = request.getQueryString()[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_5 $$ String parsedQueryString = request.getQueryString()[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_6 $$ if (text == null) [ CD ]
Line_4 $$ String text = request.getParameter("text")-->Line_6 $$ if (text == null) [ FD ]
Line_6 $$ if (text == null) -->Line_7 $$ String[] fonts = new File(ctx.getRealPath("/WEB-INF/fonts/")).list()[ CD ]
Line_7 $$ String[] fonts = new File(ctx.getRealPath("/WEB-INF/fonts/")).list()-->Line_7 $$ String[] fonts = new File(ctx.getRealPath("/WEB-INF/fonts/")).list()[ CD ]
Line_6 $$ if (text == null) -->Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"[ CD ]
Line_4 $$ String text = request.getParameter("text")-->Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"[ FD ]
Line_6 $$ if (text == null) -->Line_9 $$ response.setContentType("text/html")[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_9 $$ response.setContentType("text/html")[ FD ]
Line_6 $$ if (text == null) -->Line_10 $$ PrintWriter out = response.getWriter()[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_10 $$ PrintWriter out = response.getWriter()[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_10 $$ PrintWriter out = response.getWriter()[ FD ]
Line_6 $$ if (text == null) -->Line_11 $$ out.println("<html>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_11 $$ out.println("<html>")[ FD ]
Line_6 $$ if (text == null) -->Line_12 $$ out.println("<body>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_12 $$ out.println("<body>")[ FD ]
Line_6 $$ if (text == null) -->Line_13 $$ out.println("<p>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_13 $$ out.println("<p>")[ FD ]
Line_6 $$ if (text == null) -->Line_14 $$ out.println("Usage: " + request.getServletPath() + "?params[]<BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_14 $$ out.println("Usage: " + request.getServletPath() + "?params[]<BR>")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_14 $$ out.println("Usage: " + request.getServletPath() + "?params[]<BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_15 $$ out.println("Acceptable Params are: <UL>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_15 $$ out.println("Acceptable Params are: <UL>")[ FD ]
Line_6 $$ if (text == null) -->Line_16 $$ out.println("<LI><B>text</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_16 $$ out.println("<LI><B>text</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_17 $$ out.println("The body of the image")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_17 $$ out.println("The body of the image")[ FD ]
Line_6 $$ if (text == null) -->Line_18 $$ out.println("<LI><B>font</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_18 $$ out.println("<LI><B>font</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_19 $$ out.println("Available Fonts (in folder '/WEB-INF/fonts/') <UL>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_19 $$ out.println("Available Fonts (in folder '/WEB-INF/fonts/') <UL>")[ FD ]
Line_6 $$ if (text == null) -->Line_20 $$ for (int i = 0; i < fonts.length; i++) [ CD ]
Line_6 $$ if (text == null) -->Line_6 $$ if (text == null) [ CD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_20 $$ for (int i = 0; i < fonts.length; i++) [ CD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_20 $$ for (int i = 0; i < fonts.length; i++) [ CD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_20 $$ for (int i = 0; i < fonts.length; i++) [ FD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_21 $$ if (!"CVS".equals(fonts[i])) [ CD ]
Line_21 $$ if (!"CVS".equals(fonts[i])) -->Line_21 $$ if (!"CVS".equals(fonts[i])) [ CD ]
Line_21 $$ if (!"CVS".equals(fonts[i])) -->Line_21 $$ if (!"CVS".equals(fonts[i])) [ CD ]
Line_21 $$ if (!"CVS".equals(fonts[i])) -->Line_22 $$ out.println("<LI>" + fonts[i])[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_22 $$ out.println("<LI>" + fonts[i])[ FD ]
Line_6 $$ if (text == null) -->Line_25 $$ out.println("</UL>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_25 $$ out.println("</UL>")[ FD ]
Line_6 $$ if (text == null) -->Line_26 $$ out.println("<LI><B>size</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_26 $$ out.println("<LI><B>size</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_27 $$ out.println("An integer, i.e. size=100")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_27 $$ out.println("An integer, i.e. size=100")[ FD ]
Line_6 $$ if (text == null) -->Line_28 $$ out.println("<LI><B>color</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_28 $$ out.println("<LI><B>color</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_29 $$ out.println("in rgb, i.e. color=255,0,0")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_29 $$ out.println("in rgb, i.e. color=255,0,0")[ FD ]
Line_6 $$ if (text == null) -->Line_30 $$ out.println("<LI><B>background</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_30 $$ out.println("<LI><B>background</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_31 $$ out.println("in rgb, i.e. background=0,0,255")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_31 $$ out.println("in rgb, i.e. background=0,0,255")[ FD ]
Line_6 $$ if (text == null) -->Line_32 $$ out.println("transparent, i.e. background=''")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_32 $$ out.println("transparent, i.e. background=''")[ FD ]
Line_6 $$ if (text == null) -->Line_33 $$ out.println("<LI><B>aa</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_33 $$ out.println("<LI><B>aa</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_34 $$ out.println("antialias (does not seem to work), aa=true")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_34 $$ out.println("antialias (does not seem to work), aa=true")[ FD ]
Line_6 $$ if (text == null) -->Line_35 $$ out.println("<LI><B>nocache</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_35 $$ out.println("<LI><B>nocache</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_36 $$ out.println("if nocache is set, we will write out the image file every hit.  Otherwise, will write it the first time and then read the file")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_36 $$ out.println("if nocache is set, we will write out the image file every hit.  Otherwise, will write it the first time and then read the file")[ FD ]
Line_6 $$ if (text == null) -->Line_37 $$ out.println("<LI><B>break</B><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_37 $$ out.println("<LI><B>break</B><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_38 $$ out.println("An integer greater than 0 (zero), i.e. break=20")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_38 $$ out.println("An integer greater than 0 (zero), i.e. break=20")[ FD ]
Line_6 $$ if (text == null) -->Line_39 $$ out.println("</UL>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_39 $$ out.println("</UL>")[ FD ]
Line_6 $$ if (text == null) -->Line_40 $$ out.println("</UL>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_40 $$ out.println("</UL>")[ FD ]
Line_6 $$ if (text == null) -->Line_41 $$ out.println("Example:<BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_41 $$ out.println("Example:<BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_42 $$ out.println("&lt;img border=1  src=\"" + request.getServletPath() + "?font=arial.ttf&text=testing&color=255,0,0&size=100\"&gt;<BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_42 $$ out.println("&lt;img border=1  src=\"" + request.getServletPath() + "?font=arial.ttf&text=testing&color=255,0,0&size=100\"&gt;<BR>")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_42 $$ out.println("&lt;img border=1  src=\"" + request.getServletPath() + "?font=arial.ttf&text=testing&color=255,0,0&size=100\"&gt;<BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_43 $$ out.println("<img border=1 src='" + request.getServletPath() + "?font=arial.ttf&text=testing&color=255,0,0&size=100'><BR>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_43 $$ out.println("<img border=1 src='" + request.getServletPath() + "?font=arial.ttf&text=testing&color=255,0,0&size=100'><BR>")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_43 $$ out.println("<img border=1 src='" + request.getServletPath() + "?font=arial.ttf&text=testing&color=255,0,0&size=100'><BR>")[ FD ]
Line_6 $$ if (text == null) -->Line_44 $$ out.println("</body>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_44 $$ out.println("</body>")[ FD ]
Line_6 $$ if (text == null) -->Line_45 $$ out.println("</html>")[ CD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_45 $$ out.println("</html>")[ FD ]
Line_6 $$ if (text == null) -->Line_46 $$ return[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_48 $$ String myFile = (request.getQueryString() == null) ? "empty" : PublicEncryptionFactory.digestString(parsedQueryString).replace('\\', '_').replace('/', '_')[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_48 $$ String myFile = (request.getQueryString() == null) ? "empty" : PublicEncryptionFactory.digestString(parsedQueryString).replace('\\', '_').replace('/', '_')[ FD ]
Line_5 $$ String parsedQueryString = request.getQueryString()-->Line_48 $$ String myFile = (request.getQueryString() == null) ? "empty" : PublicEncryptionFactory.digestString(parsedQueryString).replace('\\', '_').replace('/', '_')[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_49 $$ myFile = Config.getStringProperty("PATH_TO_TITLE_IMAGES") + myFile + ".png"[ CD ]
Line_48 $$ String myFile = (request.getQueryString() == null) ? "empty" : PublicEncryptionFactory.digestString(parsedQueryString).replace('\\', '_').replace('/', '_')-->Line_49 $$ myFile = Config.getStringProperty("PATH_TO_TITLE_IMAGES") + myFile + ".png"[ FD ]
Line_49 $$ myFile = Config.getStringProperty("PATH_TO_TITLE_IMAGES") + myFile + ".png"-->Line_49 $$ myFile = Config.getStringProperty("PATH_TO_TITLE_IMAGES") + myFile + ".png"[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_50 $$ File file = new File(ctx.getRealPath(myFile))[ CD ]
Line_48 $$ String myFile = (request.getQueryString() == null) ? "empty" : PublicEncryptionFactory.digestString(parsedQueryString).replace('\\', '_').replace('/', '_')-->Line_50 $$ File file = new File(ctx.getRealPath(myFile))[ FD ]
Line_49 $$ myFile = Config.getStringProperty("PATH_TO_TITLE_IMAGES") + myFile + ".png"-->Line_50 $$ File file = new File(ctx.getRealPath(myFile))[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) [ CD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) [ CD ]
Line_50 $$ File file = new File(ctx.getRealPath(myFile))-->Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) [ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) [ FD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_52 $$ StringTokenizer st = null[ CD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_53 $$ Iterator i = hm.entrySet().iterator()[ CD ]
Line_53 $$ Iterator i = hm.entrySet().iterator()-->Line_53 $$ Iterator i = hm.entrySet().iterator()[ CD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_54 $$ while (i.hasNext()) [ CD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) [ CD ]
Line_54 $$ while (i.hasNext()) -->Line_54 $$ while (i.hasNext()) [ CD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_54 $$ while (i.hasNext()) [ FD ]
Line_53 $$ Iterator i = hm.entrySet().iterator()-->Line_54 $$ while (i.hasNext()) [ FD ]
Line_54 $$ while (i.hasNext()) -->Line_55 $$ Map.Entry entry = (Map.Entry) i.next()[ CD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_55 $$ Map.Entry entry = (Map.Entry) i.next()[ FD ]
Line_53 $$ Iterator i = hm.entrySet().iterator()-->Line_55 $$ Map.Entry entry = (Map.Entry) i.next()[ FD ]
Line_54 $$ while (i.hasNext()) -->Line_56 $$ String key = (String) entry.getKey()[ CD ]
Line_55 $$ Map.Entry entry = (Map.Entry) i.next()-->Line_56 $$ String key = (String) entry.getKey()[ FD ]
Line_54 $$ while (i.hasNext()) -->Line_57 $$ if (parsedQueryString.indexOf(key) > -1) [ CD ]
Line_5 $$ String parsedQueryString = request.getQueryString()-->Line_57 $$ if (parsedQueryString.indexOf(key) > -1) [ FD ]
Line_56 $$ String key = (String) entry.getKey()-->Line_57 $$ if (parsedQueryString.indexOf(key) > -1) [ FD ]
Line_57 $$ if (parsedQueryString.indexOf(key) > -1) -->Line_58 $$ String val = (String) entry.getValue()[ CD ]
Line_55 $$ Map.Entry entry = (Map.Entry) i.next()-->Line_58 $$ String val = (String) entry.getValue()[ FD ]
Line_57 $$ if (parsedQueryString.indexOf(key) > -1) -->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ CD ]
Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_5 $$ String parsedQueryString = request.getQueryString()-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ CD ]
Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_5 $$ String parsedQueryString = request.getQueryString()-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_56 $$ String key = (String) entry.getKey()-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_58 $$ String val = (String) entry.getValue()-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")[ CD ]
Line_52 $$ StringTokenizer st = null-->Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")[ FD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_63 $$ while (st.hasMoreTokens()) [ CD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) [ CD ]
Line_63 $$ while (st.hasMoreTokens()) -->Line_63 $$ while (st.hasMoreTokens()) [ CD ]
Line_52 $$ StringTokenizer st = null-->Line_63 $$ while (st.hasMoreTokens()) [ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_63 $$ while (st.hasMoreTokens()) [ FD ]
Line_65 $$ String x = st.nextToken()-->Line_65 $$ String x = st.nextToken()[ CD ]
Line_52 $$ StringTokenizer st = null-->Line_65 $$ String x = st.nextToken()[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_65 $$ String x = st.nextToken()[ FD ]
Line_65 $$ String x = st.nextToken()-->Line_66 $$ String key = x.split("=")[0][ FD ]
Line_65 $$ String x = st.nextToken()-->Line_67 $$ String val = x.split("=")[1][ FD ]
Line_66 $$ String key = x.split("=")[0]-->Line_68 $$ if ("text".equals(key)) [ FD ]
Line_56 $$ String key = (String) entry.getKey()-->Line_68 $$ if ("text".equals(key)) [ FD ]
Line_68 $$ if ("text".equals(key)) -->Line_68 $$ if ("text".equals(key)) [ CD ]
Line_66 $$ String key = x.split("=")[0]-->Line_68 $$ if ("text".equals(key)) [ FD ]
Line_56 $$ String key = (String) entry.getKey()-->Line_68 $$ if ("text".equals(key)) [ FD ]
Line_68 $$ if ("text".equals(key)) -->Line_69 $$ text = val[ CD ]
Line_69 $$ text = val-->Line_69 $$ text = val[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_69 $$ text = val[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_69 $$ text = val[ FD ]
Line_67 $$ String val = x.split("=")[1]-->Line_69 $$ text = val[ FD ]
Line_58 $$ String val = (String) entry.getValue()-->Line_69 $$ text = val[ FD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ CD ]
Line_69 $$ text = val-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ CD ]
Line_69 $$ text = val-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_74 $$ text = URLDecoder.decode(text, "UTF-8")[ FD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_75 $$ Logger.debug(this.getClass(), "building title image:" + file.getAbsolutePath())[ CD ]
Line_50 $$ File file = new File(ctx.getRealPath(myFile))-->Line_75 $$ Logger.debug(this.getClass(), "building title image:" + file.getAbsolutePath())[ FD ]
Line_51 $$ if (!file.exists() || (request.getParameter("nocache") != null)) -->Line_76 $$ file.createNewFile()[ CD ]
Line_50 $$ File file = new File(ctx.getRealPath(myFile))-->Line_76 $$ file.createNewFile()[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_79 $$ if (request.getParameter("font") != null) [ FD ]
Line_79 $$ if (request.getParameter("font") != null) -->Line_80 $$ font_file = "/WEB-INF/fonts/" + request.getParameter("font")[ CD ]
Line_78 $$ String font_file = "/WEB-INF/fonts/arial.ttf"-->Line_80 $$ font_file = "/WEB-INF/fonts/" + request.getParameter("font")[ FD ]
Line_80 $$ font_file = "/WEB-INF/fonts/" + request.getParameter("font")-->Line_80 $$ font_file = "/WEB-INF/fonts/" + request.getParameter("font")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_80 $$ font_file = "/WEB-INF/fonts/" + request.getParameter("font")[ FD ]
Line_78 $$ String font_file = "/WEB-INF/fonts/arial.ttf"-->Line_82 $$ font_file = ctx.getRealPath(font_file)[ FD ]
Line_80 $$ font_file = "/WEB-INF/fonts/" + request.getParameter("font")-->Line_82 $$ font_file = ctx.getRealPath(font_file)[ FD ]
Line_82 $$ font_file = ctx.getRealPath(font_file)-->Line_82 $$ font_file = ctx.getRealPath(font_file)[ FD ]
Line_82 $$ font_file = ctx.getRealPath(font_file)-->Line_82 $$ font_file = ctx.getRealPath(font_file)[ CD ]
Line_78 $$ String font_file = "/WEB-INF/fonts/arial.ttf"-->Line_82 $$ font_file = ctx.getRealPath(font_file)[ FD ]
Line_80 $$ font_file = "/WEB-INF/fonts/" + request.getParameter("font")-->Line_82 $$ font_file = ctx.getRealPath(font_file)[ FD ]
Line_82 $$ font_file = ctx.getRealPath(font_file)-->Line_82 $$ font_file = ctx.getRealPath(font_file)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_84 $$ if (request.getParameter("size") != null) [ FD ]
Line_84 $$ if (request.getParameter("size") != null) -->Line_85 $$ size = Float.parseFloat(request.getParameter("size"))[ CD ]
Line_83 $$ float size = 20.0f-->Line_85 $$ size = Float.parseFloat(request.getParameter("size"))[ FD ]
Line_85 $$ size = Float.parseFloat(request.getParameter("size"))-->Line_85 $$ size = Float.parseFloat(request.getParameter("size"))[ FD ]
Line_85 $$ size = Float.parseFloat(request.getParameter("size"))-->Line_85 $$ size = Float.parseFloat(request.getParameter("size"))[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_85 $$ size = Float.parseFloat(request.getParameter("size"))[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_88 $$ if (request.getParameter("background") != null) [ FD ]
Line_88 $$ if (request.getParameter("background") != null) -->Line_89 $$ if (request.getParameter("background").equals("transparent"))[ CD ]
Line_89 $$ if (request.getParameter("background").equals("transparent"))-->Line_89 $$ if (request.getParameter("background").equals("transparent"))[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_89 $$ if (request.getParameter("background").equals("transparent"))[ FD ]
Line_87 $$ Color background = Color.white-->Line_90 $$ background = new Color(Color.TRANSLUCENT)[ FD ]
Line_90 $$ background = new Color(Color.TRANSLUCENT)-->Line_90 $$ background = new Color(Color.TRANSLUCENT)[ FD ]
Line_52 $$ StringTokenizer st = null-->Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")[ FD ]
Line_94 $$ int x = Integer.parseInt(st.nextToken())-->Line_94 $$ int x = Integer.parseInt(st.nextToken())[ CD ]
Line_52 $$ StringTokenizer st = null-->Line_94 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_94 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_94 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_95 $$ int y = Integer.parseInt(st.nextToken())-->Line_95 $$ int y = Integer.parseInt(st.nextToken())[ CD ]
Line_52 $$ StringTokenizer st = null-->Line_95 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_95 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_95 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_96 $$ int z = Integer.parseInt(st.nextToken())-->Line_96 $$ int z = Integer.parseInt(st.nextToken())[ CD ]
Line_52 $$ StringTokenizer st = null-->Line_96 $$ int z = Integer.parseInt(st.nextToken())[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_96 $$ int z = Integer.parseInt(st.nextToken())[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_96 $$ int z = Integer.parseInt(st.nextToken())[ FD ]
Line_87 $$ Color background = Color.white-->Line_97 $$ background = new Color(x, y, z)[ FD ]
Line_90 $$ background = new Color(Color.TRANSLUCENT)-->Line_97 $$ background = new Color(x, y, z)[ FD ]
Line_97 $$ background = new Color(x, y, z)-->Line_97 $$ background = new Color(x, y, z)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_102 $$ if (request.getParameter("color") != null) [ FD ]
Line_52 $$ StringTokenizer st = null-->Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")[ FD ]
Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")-->Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")[ FD ]
Line_52 $$ StringTokenizer st = null-->Line_105 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_105 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_105 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")-->Line_105 $$ int x = Integer.parseInt(st.nextToken())[ FD ]
Line_52 $$ StringTokenizer st = null-->Line_106 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_106 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_106 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")-->Line_106 $$ int y = Integer.parseInt(st.nextToken())[ FD ]
Line_52 $$ StringTokenizer st = null-->Line_107 $$ int z = Integer.parseInt(st.nextToken())[ FD ]
Line_62 $$ st = new StringTokenizer(parsedQueryString, "&")-->Line_107 $$ int z = Integer.parseInt(st.nextToken())[ FD ]
Line_93 $$ st = new StringTokenizer(request.getParameter("background"), ",")-->Line_107 $$ int z = Integer.parseInt(st.nextToken())[ FD ]
Line_104 $$ st = new StringTokenizer(request.getParameter("color"), ",")-->Line_107 $$ int z = Integer.parseInt(st.nextToken())[ FD ]
Line_101 $$ Color color = Color.black-->Line_108 $$ color = new Color(x, y, z)[ FD ]
Line_108 $$ color = new Color(x, y, z)-->Line_108 $$ color = new Color(x, y, z)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_114 $$ if (request.getParameter("break") != null) [ FD ]
Line_113 $$ int intBreak = 0-->Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))[ FD ]
Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))-->Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))[ FD ]
Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))-->Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))[ FD ]
Line_113 $$ int intBreak = 0-->Line_121 $$ if (intBreak > 0) [ FD ]
Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))-->Line_121 $$ if (intBreak > 0) [ FD ]
Line_121 $$ if (intBreak > 0) -->Line_122 $$ lines = new java.util.ArrayList<String>(10)[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_122 $$ lines = new java.util.ArrayList<String>(10)[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_122 $$ lines = new java.util.ArrayList<String>(10)[ FD ]
Line_121 $$ if (intBreak > 0) -->Line_123 $$ lines.ensureCapacity(10)[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_123 $$ lines.ensureCapacity(10)[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_123 $$ lines.ensureCapacity(10)[ FD ]
Line_121 $$ if (intBreak > 0) -->Line_124 $$ int start = 0[ CD ]
Line_121 $$ if (intBreak > 0) -->Line_125 $$ String line = null[ CD ]
Line_121 $$ if (intBreak > 0) -->Line_126 $$ int offSet[ CD ]
Line_121 $$ if (intBreak > 0) -->Line_127 $$ for (; ; ) [ CD ]
Line_121 $$ if (intBreak > 0) -->Line_121 $$ if (intBreak > 0) [ CD ]
Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) -->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ CD ]
Line_69 $$ text = val-->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ FD ]
Line_124 $$ int start = 0-->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ FD ]
Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) -->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ CD ]
Line_124 $$ int start = 0-->Line_129 $$ for (; isWhitespace(text.charAt(start)); ++start) [ FD ]
Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) -->Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) [ CD ]
Line_69 $$ text = val-->Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) [ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) [ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) [ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) [ FD ]
Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) -->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_69 $$ text = val-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_124 $$ int start = 0-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) -->Line_132 $$ start += intBreak[ CD ]
Line_132 $$ start += intBreak-->Line_132 $$ start += intBreak[ FD ]
Line_124 $$ int start = 0-->Line_132 $$ start += intBreak[ FD ]
Line_113 $$ int intBreak = 0-->Line_132 $$ start += intBreak[ FD ]
Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))-->Line_132 $$ start += intBreak[ FD ]
Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ CD ]
Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) -->Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) [ CD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ CD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ CD ]
Line_69 $$ text = val-->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ CD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_126 $$ int offSet-->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ CD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ CD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_126 $$ int offSet-->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) -->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_69 $$ text = val-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_132 $$ start += intBreak-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_124 $$ int start = 0-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_130 $$ if (isWhitespace(text.charAt(start + intBreak - 1))) -->Line_136 $$ start += intBreak + offSet[ CD ]
Line_132 $$ start += intBreak-->Line_136 $$ start += intBreak + offSet[ FD ]
Line_136 $$ start += intBreak + offSet-->Line_136 $$ start += intBreak + offSet[ FD ]
Line_124 $$ int start = 0-->Line_136 $$ start += intBreak + offSet[ FD ]
Line_113 $$ int intBreak = 0-->Line_136 $$ start += intBreak + offSet[ FD ]
Line_116 $$ intBreak = Integer.parseInt(request.getParameter("break"))-->Line_136 $$ start += intBreak + offSet[ FD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_136 $$ start += intBreak + offSet[ FD ]
Line_126 $$ int offSet-->Line_136 $$ start += intBreak + offSet[ FD ]
Line_132 $$ start += intBreak-->Line_139 $$ if (text.length() > start)[ FD ]
Line_136 $$ start += intBreak + offSet-->Line_139 $$ if (text.length() > start)[ FD ]
Line_124 $$ int start = 0-->Line_139 $$ if (text.length() > start)[ FD ]
Line_69 $$ text = val-->Line_139 $$ if (text.length() > start)[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_139 $$ if (text.length() > start)[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_139 $$ if (text.length() > start)[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_139 $$ if (text.length() > start)[ FD ]
Line_139 $$ if (text.length() > start)-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_69 $$ text = val-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_132 $$ start += intBreak-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_136 $$ start += intBreak + offSet-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_124 $$ int start = 0-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_121 $$ if (intBreak > 0) -->Line_144 $$ java.util.StringTokenizer tokens = new java.util.StringTokenizer(text, "|")[ CD ]
Line_121 $$ if (intBreak > 0) -->Line_145 $$ if (tokens.hasMoreTokens()) [ CD ]
Line_144 $$ java.util.StringTokenizer tokens = new java.util.StringTokenizer(text, "|")-->Line_145 $$ if (tokens.hasMoreTokens()) [ FD ]
Line_145 $$ if (tokens.hasMoreTokens()) -->Line_145 $$ if (tokens.hasMoreTokens()) [ CD ]
Line_144 $$ java.util.StringTokenizer tokens = new java.util.StringTokenizer(text, "|")-->Line_145 $$ if (tokens.hasMoreTokens()) [ FD ]
Line_145 $$ if (tokens.hasMoreTokens()) -->Line_146 $$ lines = new java.util.ArrayList<String>(10)[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_146 $$ lines = new java.util.ArrayList<String>(10)[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_146 $$ lines = new java.util.ArrayList<String>(10)[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_146 $$ lines = new java.util.ArrayList<String>(10)[ FD ]
Line_145 $$ if (tokens.hasMoreTokens()) -->Line_147 $$ lines.ensureCapacity(10)[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_147 $$ lines.ensureCapacity(10)[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_147 $$ lines.ensureCapacity(10)[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_147 $$ lines.ensureCapacity(10)[ FD ]
Line_145 $$ if (tokens.hasMoreTokens()) -->Line_148 $$ for (; tokens.hasMoreTokens(); ) lines.add(leftTrim(tokens.nextToken()))[ CD ]
Line_145 $$ if (tokens.hasMoreTokens()) -->Line_145 $$ if (tokens.hasMoreTokens()) [ CD ]
Line_148 $$ for (; tokens.hasMoreTokens(); ) lines.add(leftTrim(tokens.nextToken()))-->Line_148 $$ for (; tokens.hasMoreTokens(); ) lines.add(leftTrim(tokens.nextToken()))[ CD ]
Line_144 $$ java.util.StringTokenizer tokens = new java.util.StringTokenizer(text, "|")-->Line_148 $$ for (; tokens.hasMoreTokens(); ) lines.add(leftTrim(tokens.nextToken()))[ FD ]
Line_148 $$ for (; tokens.hasMoreTokens(); ) lines.add(leftTrim(tokens.nextToken()))-->Line_148 $$ lines.add(leftTrim(tokens.nextToken()))[ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_148 $$ lines.add(leftTrim(tokens.nextToken()))[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_148 $$ lines.add(leftTrim(tokens.nextToken()))[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_148 $$ lines.add(leftTrim(tokens.nextToken()))[ FD ]
Line_144 $$ java.util.StringTokenizer tokens = new java.util.StringTokenizer(text, "|")-->Line_148 $$ lines.add(leftTrim(tokens.nextToken()))[ FD ]
Line_151 $$ Font font = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(font_file))-->Line_151 $$ Font font = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(font_file))[ CD ]
Line_151 $$ Font font = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(font_file))-->Line_152 $$ font = font.deriveFont(size)[ FD ]
Line_152 $$ font = font.deriveFont(size)-->Line_152 $$ font = font.deriveFont(size)[ FD ]
Line_152 $$ font = font.deriveFont(size)-->Line_152 $$ font = font.deriveFont(size)[ CD ]
Line_151 $$ Font font = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(font_file))-->Line_152 $$ font = font.deriveFont(size)[ FD ]
Line_152 $$ font = font.deriveFont(size)-->Line_152 $$ font = font.deriveFont(size)[ FD ]
Line_83 $$ float size = 20.0f-->Line_152 $$ font = font.deriveFont(size)[ FD ]
Line_85 $$ size = Float.parseFloat(request.getParameter("size"))-->Line_152 $$ font = font.deriveFont(size)[ FD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_154 $$ Graphics2D g2 = buffer.createGraphics()[ CD ]
Line_153 $$ BufferedImage buffer = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB)-->Line_154 $$ Graphics2D g2 = buffer.createGraphics()[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_155 $$ if (request.getParameter("aa") != null) [ FD ]
Line_155 $$ if (request.getParameter("aa") != null) -->Line_156 $$ g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)[ CD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_156 $$ g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)[ FD ]
Line_155 $$ if (request.getParameter("aa") != null) -->Line_158 $$ g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF)[ CD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_158 $$ g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF)[ FD ]
Line_160 $$ FontRenderContext fc = g2.getFontRenderContext()-->Line_160 $$ FontRenderContext fc = g2.getFontRenderContext()[ CD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_160 $$ FontRenderContext fc = g2.getFontRenderContext()[ FD ]
Line_164 $$ boolean useTextLayout = false-->Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))[ FD ]
Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))-->Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))[ FD ]
Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))-->Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))[ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_169 $$ if (1 < lines.size()) [ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_169 $$ if (1 < lines.size()) [ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_169 $$ if (1 < lines.size()) [ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_170 $$ int heightMultiplier = 0[ CD ]
Line_169 $$ if (1 < lines.size()) -->Line_171 $$ int maxWidth = 0[ CD ]
Line_169 $$ if (1 < lines.size()) -->Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) [ CD ]
Line_169 $$ if (1 < lines.size()) -->Line_169 $$ if (1 < lines.size()) [ CD ]
Line_170 $$ int heightMultiplier = 0-->Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) [ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) [ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) [ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) [ FD ]
Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) -->Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) [ CD ]
Line_170 $$ int heightMultiplier = 0-->Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) [ FD ]
Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) -->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ CD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ CD ]
Line_151 $$ Font font = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(font_file))-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_152 $$ font = font.deriveFont(size)-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_160 $$ FontRenderContext fc = g2.getFontRenderContext()-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_170 $$ int heightMultiplier = 0-->Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)[ FD ]
Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) -->Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)[ CD ]
Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)-->Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)[ FD ]
Line_163 $$ TextLayout tl = null-->Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)[ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)[ FD ]
Line_170 $$ int heightMultiplier = 0-->Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)[ FD ]
Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) -->Line_175 $$ textLayoutBounds = tl.getBounds()[ CD ]
Line_175 $$ textLayoutBounds = tl.getBounds()-->Line_175 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_162 $$ Rectangle2D textLayoutBounds = null-->Line_175 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_175 $$ textLayoutBounds = tl.getBounds()-->Line_175 $$ textLayoutBounds = tl.getBounds()[ CD ]
Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)-->Line_175 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_163 $$ TextLayout tl = null-->Line_175 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_172 $$ for (; heightMultiplier < lines.size(); ++heightMultiplier) -->Line_176 $$ if (maxWidth < Math.ceil(fontBounds.getWidth()))[ CD ]
Line_171 $$ int maxWidth = 0-->Line_176 $$ if (maxWidth < Math.ceil(fontBounds.getWidth()))[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_176 $$ if (maxWidth < Math.ceil(fontBounds.getWidth()))[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_176 $$ if (maxWidth < Math.ceil(fontBounds.getWidth()))[ FD ]
Line_176 $$ if (maxWidth < Math.ceil(fontBounds.getWidth()))-->Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())[ CD ]
Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())-->Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())[ FD ]
Line_171 $$ int maxWidth = 0-->Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_178 $$ width = maxWidth[ CD ]
Line_166 $$ int width = 0-->Line_178 $$ width = maxWidth[ FD ]
Line_178 $$ width = maxWidth-->Line_178 $$ width = maxWidth[ FD ]
Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())-->Line_178 $$ width = maxWidth[ FD ]
Line_171 $$ int maxWidth = 0-->Line_178 $$ width = maxWidth[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ CD ]
Line_164 $$ boolean useTextLayout = false-->Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))-->Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_175 $$ textLayoutBounds = tl.getBounds()-->Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_162 $$ Rectangle2D textLayoutBounds = null-->Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_180 $$ height = boundHeigh * lines.size()[ CD ]
Line_167 $$ int height = 0-->Line_180 $$ height = boundHeigh * lines.size()[ FD ]
Line_180 $$ height = boundHeigh * lines.size()-->Line_180 $$ height = boundHeigh * lines.size()[ FD ]
Line_179 $$ int boundHeigh = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))-->Line_180 $$ height = boundHeigh * lines.size()[ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_180 $$ height = boundHeigh * lines.size()[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_180 $$ height = boundHeigh * lines.size()[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_180 $$ height = boundHeigh * lines.size()[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)[ CD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)[ FD ]
Line_126 $$ int offSet-->Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)[ FD ]
Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)-->Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)[ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_181 $$ offSet = ((int) (boundHeigh * 0.2)) * (lines.size() - 1)[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ CD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_183 $$ fontBounds = font.getStringBounds(text, fc)-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_183 $$ fontBounds = font.getStringBounds(text, fc)-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ CD ]
Line_151 $$ Font font = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(font_file))-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_152 $$ font = font.deriveFont(size)-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_69 $$ text = val-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_160 $$ FontRenderContext fc = g2.getFontRenderContext()-->Line_183 $$ fontBounds = font.getStringBounds(text, fc)[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_184 $$ tl = new TextLayout(text, font, fc)[ CD ]
Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)-->Line_184 $$ tl = new TextLayout(text, font, fc)[ FD ]
Line_163 $$ TextLayout tl = null-->Line_184 $$ tl = new TextLayout(text, font, fc)[ FD ]
Line_184 $$ tl = new TextLayout(text, font, fc)-->Line_184 $$ tl = new TextLayout(text, font, fc)[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_185 $$ textLayoutBounds = tl.getBounds()[ CD ]
Line_175 $$ textLayoutBounds = tl.getBounds()-->Line_185 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_162 $$ Rectangle2D textLayoutBounds = null-->Line_185 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_185 $$ textLayoutBounds = tl.getBounds()-->Line_185 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_185 $$ textLayoutBounds = tl.getBounds()-->Line_185 $$ textLayoutBounds = tl.getBounds()[ CD ]
Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)-->Line_185 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_163 $$ TextLayout tl = null-->Line_185 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_184 $$ tl = new TextLayout(text, font, fc)-->Line_185 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_186 $$ width = (int) fontBounds.getWidth()[ CD ]
Line_166 $$ int width = 0-->Line_186 $$ width = (int) fontBounds.getWidth()[ FD ]
Line_178 $$ width = maxWidth-->Line_186 $$ width = (int) fontBounds.getWidth()[ FD ]
Line_186 $$ width = (int) fontBounds.getWidth()-->Line_186 $$ width = (int) fontBounds.getWidth()[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_186 $$ width = (int) fontBounds.getWidth()[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_186 $$ width = (int) fontBounds.getWidth()[ FD ]
Line_183 $$ fontBounds = font.getStringBounds(text, fc)-->Line_186 $$ width = (int) fontBounds.getWidth()[ FD ]
Line_169 $$ if (1 < lines.size()) -->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ CD ]
Line_167 $$ int height = 0-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_180 $$ height = boundHeigh * lines.size()-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_164 $$ boolean useTextLayout = false-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_183 $$ fontBounds = font.getStringBounds(text, fc)-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_175 $$ textLayoutBounds = tl.getBounds()-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_162 $$ Rectangle2D textLayoutBounds = null-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_185 $$ textLayoutBounds = tl.getBounds()-->Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))[ FD ]
Line_153 $$ BufferedImage buffer = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB)-->Line_189 $$ buffer = new BufferedImage(width, height - offSet, BufferedImage.TYPE_INT_ARGB)[ FD ]
Line_189 $$ buffer = new BufferedImage(width, height - offSet, BufferedImage.TYPE_INT_ARGB)-->Line_189 $$ buffer = new BufferedImage(width, height - offSet, BufferedImage.TYPE_INT_ARGB)[ FD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_190 $$ g2 = buffer.createGraphics()[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_190 $$ g2 = buffer.createGraphics()[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_190 $$ g2 = buffer.createGraphics()[ CD ]
Line_153 $$ BufferedImage buffer = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB)-->Line_190 $$ g2 = buffer.createGraphics()[ FD ]
Line_189 $$ buffer = new BufferedImage(width, height - offSet, BufferedImage.TYPE_INT_ARGB)-->Line_190 $$ g2 = buffer.createGraphics()[ FD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_191 $$ g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_191 $$ g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)[ FD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_192 $$ g2.setFont(font)[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_192 $$ g2.setFont(font)[ FD ]
Line_151 $$ Font font = Font.createFont(Font.TRUETYPE_FONT, new FileInputStream(font_file))-->Line_192 $$ g2.setFont(font)[ FD ]
Line_152 $$ font = font.deriveFont(size)-->Line_192 $$ g2.setFont(font)[ FD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_193 $$ g2.setColor(background)[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_193 $$ g2.setColor(background)[ FD ]
Line_87 $$ Color background = Color.white-->Line_193 $$ g2.setColor(background)[ FD ]
Line_90 $$ background = new Color(Color.TRANSLUCENT)-->Line_193 $$ g2.setColor(background)[ FD ]
Line_97 $$ background = new Color(x, y, z)-->Line_193 $$ g2.setColor(background)[ FD ]
Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))-->Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))[ CD ]
Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))-->Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))[ CD ]
Line_87 $$ Color background = Color.white-->Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))[ FD ]
Line_90 $$ background = new Color(Color.TRANSLUCENT)-->Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))[ FD ]
Line_97 $$ background = new Color(x, y, z)-->Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))[ FD ]
Line_194 $$ if (!background.equals(new Color(Color.TRANSLUCENT)))-->Line_194 $$ g2.fillRect(0, 0, width, height)[ CD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_166 $$ int width = 0-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_178 $$ width = maxWidth-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_186 $$ width = (int) fontBounds.getWidth()-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_167 $$ int height = 0-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_180 $$ height = boundHeigh * lines.size()-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_187 $$ height = (int) Math.ceil((!useTextLayout ? fontBounds.getHeight() : textLayoutBounds.getHeight()))-->Line_194 $$ g2.fillRect(0, 0, width, height)[ FD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_195 $$ g2.setColor(color)[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_195 $$ g2.setColor(color)[ FD ]
Line_101 $$ Color color = Color.black-->Line_195 $$ g2.setColor(color)[ FD ]
Line_108 $$ color = new Color(x, y, z)-->Line_195 $$ g2.setColor(color)[ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_196 $$ if (1 < lines.size()) [ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_196 $$ if (1 < lines.size()) [ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_196 $$ if (1 < lines.size()) [ FD ]
Line_196 $$ if (1 < lines.size()) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ CD ]
Line_196 $$ if (1 < lines.size()) -->Line_196 $$ if (1 < lines.size()) [ CD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ CD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ CD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ CD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ CD ]
Line_164 $$ boolean useTextLayout = false-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_183 $$ fontBounds = font.getStringBounds(text, fc)-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_175 $$ textLayoutBounds = tl.getBounds()-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_162 $$ Rectangle2D textLayoutBounds = null-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_185 $$ textLayoutBounds = tl.getBounds()-->Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ CD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_120 $$ java.util.ArrayList<String> lines = null-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_122 $$ lines = new java.util.ArrayList<String>(10)-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_146 $$ lines = new java.util.ArrayList<String>(10)-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_95 $$ int y = Integer.parseInt(st.nextToken())-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_164 $$ boolean useTextLayout = false-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_165 $$ useTextLayout = Boolean.parseBoolean(request.getParameter("textLayout"))-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_161 $$ Rectangle2D fontBounds = null-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_183 $$ fontBounds = font.getStringBounds(text, fc)-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_175 $$ textLayoutBounds = tl.getBounds()-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_162 $$ Rectangle2D textLayoutBounds = null-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_185 $$ textLayoutBounds = tl.getBounds()-->Line_202 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))[ FD ]
Line_196 $$ if (1 < lines.size()) -->Line_203 $$ g2.drawString(text, 0, -y)[ CD ]
Line_154 $$ Graphics2D g2 = buffer.createGraphics()-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_190 $$ g2 = buffer.createGraphics()-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_69 $$ text = val-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_4 $$ String text = request.getParameter("text")-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_8 $$ text = "accepted params: text,font,size,color,background,nocache,aa,break"-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_74 $$ text = URLDecoder.decode(text, "UTF-8")-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_95 $$ int y = Integer.parseInt(st.nextToken())-->Line_203 $$ g2.drawString(text, 0, -y)[ FD ]
Line_153 $$ BufferedImage buffer = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB)-->Line_206 $$ ImageIO.write(buffer, "png", out)[ FD ]
Line_189 $$ buffer = new BufferedImage(width, height - offSet, BufferedImage.TYPE_INT_ARGB)-->Line_206 $$ ImageIO.write(buffer, "png", out)[ FD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_206 $$ ImageIO.write(buffer, "png", out)[ FD ]
Line_10 $$ PrintWriter out = response.getWriter()-->Line_207 $$ out.close()[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_212 $$ response.setContentType("image/png")[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_212 $$ response.setContentType("image/png")[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_213 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file))[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_214 $$ OutputStream os = response.getOutputStream()[ CD ]
Line_214 $$ OutputStream os = response.getOutputStream()-->Line_214 $$ OutputStream os = response.getOutputStream()[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_214 $$ OutputStream os = response.getOutputStream()[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_215 $$ byte[] buf = new byte[4096][ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_217 $$ while ((i = bis.read(buf)) != -1) [ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException [ CD ]
Line_217 $$ while ((i = bis.read(buf)) != -1) -->Line_217 $$ while ((i = bis.read(buf)) != -1) [ FD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_217 $$ while ((i = bis.read(buf)) != -1) [ FD ]
Line_53 $$ Iterator i = hm.entrySet().iterator()-->Line_217 $$ while ((i = bis.read(buf)) != -1) [ FD ]
Line_217 $$ while ((i = bis.read(buf)) != -1) -->Line_217 $$ while ((i = bis.read(buf)) != -1) [ CD ]
Line_213 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file))-->Line_217 $$ while ((i = bis.read(buf)) != -1) [ FD ]
Line_215 $$ byte[] buf = new byte[4096]-->Line_217 $$ while ((i = bis.read(buf)) != -1) [ FD ]
Line_217 $$ while ((i = bis.read(buf)) != -1) -->Line_218 $$ os.write(buf, 0, i)[ CD ]
Line_214 $$ OutputStream os = response.getOutputStream()-->Line_218 $$ os.write(buf, 0, i)[ FD ]
Line_215 $$ byte[] buf = new byte[4096]-->Line_218 $$ os.write(buf, 0, i)[ FD ]
Line_217 $$ while ((i = bis.read(buf)) != -1) -->Line_218 $$ os.write(buf, 0, i)[ FD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_218 $$ os.write(buf, 0, i)[ FD ]
Line_53 $$ Iterator i = hm.entrySet().iterator()-->Line_218 $$ os.write(buf, 0, i)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_220 $$ os.close()[ CD ]
Line_214 $$ OutputStream os = response.getOutputStream()-->Line_220 $$ os.close()[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_221 $$ bis.close()[ CD ]
Line_213 $$ BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file))-->Line_221 $$ bis.close()[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_222 $$ Logger.debug(this.getClass(), "time to build title: " + (System.currentTimeMillis() - time) + "ms")[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException -->Line_223 $$ return[ CD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_20 $$ for (int i = 0; i < fonts.length; i++) [ FD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_20 $$ for (int i = 0; i < fonts.length; i++) [ FD ]
Line_20 $$ for (int i = 0; i < fonts.length; i++) -->Line_20 $$ for (int i = 0; i < fonts.length; i++) [ FD ]
Line_55 $$ Map.Entry entry = (Map.Entry) i.next()-->Line_56 $$ String key = (String) entry.getKey()[ FD ]
Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)-->Line_57 $$ if (parsedQueryString.indexOf(key) > -1) [ FD ]
Line_56 $$ String key = (String) entry.getKey()-->Line_57 $$ if (parsedQueryString.indexOf(key) > -1) [ FD ]
Line_55 $$ Map.Entry entry = (Map.Entry) i.next()-->Line_58 $$ String val = (String) entry.getValue()[ FD ]
Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_56 $$ String key = (String) entry.getKey()-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_58 $$ String val = (String) entry.getValue()-->Line_59 $$ parsedQueryString = UtilMethods.replace(parsedQueryString, key, val)[ FD ]
Line_65 $$ String x = st.nextToken()-->Line_66 $$ String key = x.split("=")[0][ FD ]
Line_65 $$ String x = st.nextToken()-->Line_67 $$ String val = x.split("=")[1][ FD ]
Line_66 $$ String key = x.split("=")[0]-->Line_68 $$ if ("text".equals(key)) [ FD ]
Line_66 $$ String key = x.split("=")[0]-->Line_68 $$ if ("text".equals(key)) [ FD ]
Line_67 $$ String val = x.split("=")[1]-->Line_69 $$ text = val[ FD ]
Line_132 $$ start += intBreak-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_136 $$ start += intBreak + offSet-->Line_131 $$ lines.add(text.substring(start, start + intBreak))[ FD ]
Line_132 $$ start += intBreak-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_136 $$ start += intBreak + offSet-->Line_135 $$ lines.add(text.substring(start, start + intBreak + offSet))[ FD ]
Line_132 $$ start += intBreak-->Line_139 $$ if (text.length() > start)[ FD ]
Line_136 $$ start += intBreak + offSet-->Line_139 $$ if (text.length() > start)[ FD ]
Line_132 $$ start += intBreak-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_136 $$ start += intBreak + offSet-->Line_139 $$ lines.add(leftTrim(text.substring(start)))[ FD ]
Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) -->Line_134 $$ for (offSet = -1; !isWhitespace(text.charAt(start + intBreak + offSet)); ++offSet) [ FD ]
Line_174 $$ tl = new TextLayout(lines.get(heightMultiplier), font, fc)-->Line_175 $$ textLayoutBounds = tl.getBounds()[ FD ]
Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())-->Line_176 $$ if (maxWidth < Math.ceil(fontBounds.getWidth()))[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_176 $$ if (maxWidth < Math.ceil(fontBounds.getWidth()))[ FD ]
Line_173 $$ fontBounds = font.getStringBounds(lines.get(heightMultiplier), fc)-->Line_176 $$ maxWidth = (int) Math.ceil(fontBounds.getWidth())[ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) [ FD ]
Line_197 $$ for (int numLine = 0; numLine < lines.size(); ++numLine) -->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_198 $$ int y = (int) Math.ceil((!useTextLayout ? fontBounds.getY() : textLayoutBounds.getY()))-->Line_199 $$ g2.drawString(lines.get(numLine), 0, -y * (numLine + 1))[ FD ]
Line_217 $$ while ((i = bis.read(buf)) != -1) -->Line_218 $$ os.write(buf, 0, i)[ FD ]
