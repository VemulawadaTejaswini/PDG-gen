Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) [ CD ]
Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) -->Line_3 $$ if (TESTING) [ CD ]
Line_3 $$ if (TESTING) -->Line_4 $$ HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>()[ CD ]
Line_3 $$ if (TESTING) -->Line_5 $$ ret.add(new Tuple<String, ArrayList<String>>("teste", new ArrayList<String>()))[ CD ]
Line_4 $$ HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>()-->Line_5 $$ ret.add(new Tuple<String, ArrayList<String>>("teste", new ArrayList<String>()))[ FD ]
Line_3 $$ if (TESTING) -->Line_6 $$ return ret[ CD ]
Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) -->Line_8 $$ int retries = 0[ CD ]
Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) -->Line_9 $$ while (retries < 3) [ CD ]
Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) -->Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) [ CD ]
Line_8 $$ int retries = 0-->Line_9 $$ while (retries < 3) [ FD ]
Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)-->Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)[ CD ]
Line_12 $$ String reqPre = "<?xml version=\"1.0\"?>\r\n" + (getGazeteerIds ? "<GetFeature" : "<GetParsing") + " xmlns=\"http://www.opengis.net/gp\" xmlns:wfs=\"http://www.opengis.net/wfs\"" + " xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\"" + " xsi:schemaLocation=\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\"\r\n" + " wfs:outputFormat=\"GML2\">" + "<wfs:Query wfs:TypeName=\"PlaceName\" />" + "<Resource mine=\"text/plain\">" + "<Contents></Contents>" + "</Resource>" + (getGazeteerIds ? "</GetFeature>" : "</GetParsing>")-->Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)[ FD ]
Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) -->Line_14 $$ doc.getRootElement().element("Resource").element("Contents").setText(recordContent)[ FD ]
Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)-->Line_14 $$ doc.getRootElement().element("Resource").element("Contents").setText(recordContent)[ FD ]
Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)-->Line_15 $$ URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"))[ FD ]
Line_15 $$ URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"))-->Line_16 $$ InputStreamReader reader = new InputStreamReader(url.openStream(), "UTF-8")[ FD ]
Line_20 $$ while ((line = buffered.readLine()) != null) -->Line_20 $$ while ((line = buffered.readLine()) != null) [ FD ]
Line_19 $$ String line-->Line_20 $$ while ((line = buffered.readLine()) != null) [ FD ]
Line_20 $$ while ((line = buffered.readLine()) != null) -->Line_20 $$ while ((line = buffered.readLine()) != null) [ CD ]
Line_17 $$ BufferedReader buffered = new BufferedReader(reader)-->Line_20 $$ while ((line = buffered.readLine()) != null) [ FD ]
Line_20 $$ while ((line = buffered.readLine()) != null) -->Line_21 $$ sb.append(line)[ CD ]
Line_18 $$ StringBuffer sb = new StringBuffer()-->Line_21 $$ sb.append(line)[ FD ]
Line_20 $$ while ((line = buffered.readLine()) != null) -->Line_21 $$ sb.append(line)[ FD ]
Line_19 $$ String line-->Line_21 $$ sb.append(line)[ FD ]
Line_18 $$ StringBuffer sb = new StringBuffer()-->Line_23 $$ Document d = DocumentHelper.parseText(sb.toString())[ FD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) [ CD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) [ CD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) [ CD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_26 $$ Element plcEl = it.next()[ CD ]
Line_26 $$ Element plcEl = it.next()-->Line_26 $$ Element plcEl = it.next()[ CD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_26 $$ Element plcEl = it.next()[ FD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_27 $$ String val = plcEl.elementTextTrim("TermName")[ CD ]
Line_27 $$ String val = plcEl.elementTextTrim("TermName")-->Line_27 $$ String val = plcEl.elementTextTrim("TermName")[ CD ]
Line_26 $$ Element plcEl = it.next()-->Line_27 $$ String val = plcEl.elementTextTrim("TermName")[ FD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ CD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ CD ]
Line_27 $$ String val = plcEl.elementTextTrim("TermName")-->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ FD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ CD ]
Line_27 $$ String val = plcEl.elementTextTrim("TermName")-->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ FD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_29 $$ places.add(val)[ CD ]
Line_27 $$ String val = plcEl.elementTextTrim("TermName")-->Line_29 $$ places.add(val)[ FD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_30 $$ String entryID = plcEl.attributeValue("entryID")[ CD ]
Line_30 $$ String entryID = plcEl.attributeValue("entryID")-->Line_30 $$ String entryID = plcEl.attributeValue("entryID")[ CD ]
Line_26 $$ Element plcEl = it.next()-->Line_30 $$ String entryID = plcEl.attributeValue("entryID")[ FD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_31 $$ Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>())[ CD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) [ CD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ CD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) [ CD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) [ CD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) [ CD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_33 $$ Element idEl = it2.next()[ CD ]
Line_33 $$ Element idEl = it2.next()-->Line_33 $$ Element idEl = it2.next()[ CD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_33 $$ Element idEl = it2.next()[ FD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))[ CD ]
Line_30 $$ String entryID = plcEl.attributeValue("entryID")-->Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))[ FD ]
Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))-->Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))[ CD ]
Line_30 $$ String entryID = plcEl.attributeValue("entryID")-->Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))[ FD ]
Line_33 $$ Element idEl = it2.next()-->Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))[ FD ]
Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))-->Line_34 $$ plc.getV2().add(idEl.attributeValue("id"))[ CD ]
Line_31 $$ Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>())-->Line_34 $$ plc.getV2().add(idEl.attributeValue("id"))[ FD ]
Line_33 $$ Element idEl = it2.next()-->Line_34 $$ plc.getV2().add(idEl.attributeValue("id"))[ FD ]
Line_28 $$ if (!val.equals("") && !places.contains(val)) -->Line_36 $$ ret.add(plc)[ CD ]
Line_11 $$ ArrayList<Tuple<String, ArrayList<String>>> ret = new ArrayList<Tuple<String, ArrayList<String>>>()-->Line_36 $$ ret.add(plc)[ FD ]
Line_4 $$ HashSet<Tuple<String, ArrayList<String>>> ret = new HashSet<Tuple<String, ArrayList<String>>>()-->Line_36 $$ ret.add(plc)[ FD ]
Line_31 $$ Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>())-->Line_36 $$ ret.add(plc)[ FD ]
Line_8 $$ int retries = 0-->Line_43 $$ retries++[ FD ]
Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) -->Line_46 $$ System.out.println("Too many retries. Giving up.")[ CD ]
Line_2 $$ public static Collection<Tuple<String, ArrayList<String>>> readGeoParserResult(String recordContent, boolean getGazeteerIds) -->Line_47 $$ return new HashSet<Tuple<String, ArrayList<String>>>()[ CD ]
Line_12 $$ String reqPre = "<?xml version=\"1.0\"?>\r\n" + (getGazeteerIds ? "<GetFeature" : "<GetParsing") + " xmlns=\"http://www.opengis.net/gp\" xmlns:wfs=\"http://www.opengis.net/wfs\"" + " xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\"" + " xsi:schemaLocation=\"http://www.opengis.net/gp ../gp/GetFeatureRequest.xsd http://www.opengis.net/wfs ../wfs/GetFeatureRequest.xsd\"\r\n" + " wfs:outputFormat=\"GML2\">" + "<wfs:Query wfs:TypeName=\"PlaceName\" />" + "<Resource mine=\"text/plain\">" + "<Contents></Contents>" + "</Resource>" + (getGazeteerIds ? "</GetFeature>" : "</GetParsing>")-->Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)[ FD ]
Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)-->Line_14 $$ doc.getRootElement().element("Resource").element("Contents").setText(recordContent)[ FD ]
Line_13 $$ Document doc = DocumentHelper.parseText(reqPre)-->Line_15 $$ URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"))[ FD ]
Line_15 $$ URL url = new URL(geoParserBaseUrl + "?request=" + URLEncoder.encode(doc.asXML(), "ISO8859-1"))-->Line_16 $$ InputStreamReader reader = new InputStreamReader(url.openStream(), "UTF-8")[ FD ]
Line_18 $$ StringBuffer sb = new StringBuffer()-->Line_23 $$ Document d = DocumentHelper.parseText(sb.toString())[ FD ]
Line_20 $$ while ((line = buffered.readLine()) != null) -->Line_21 $$ sb.append(line)[ FD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) [ FD ]
Line_25 $$ for (Iterator<Element> it = d.getRootElement().element("EntryCollection").elementIterator("PlaceName"); it.hasNext(); ) -->Line_26 $$ Element plcEl = it.next()[ FD ]
Line_26 $$ Element plcEl = it.next()-->Line_27 $$ String val = plcEl.elementTextTrim("TermName")[ FD ]
Line_27 $$ String val = plcEl.elementTextTrim("TermName")-->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ FD ]
Line_27 $$ String val = plcEl.elementTextTrim("TermName")-->Line_28 $$ if (!val.equals("") && !places.contains(val)) [ FD ]
Line_27 $$ String val = plcEl.elementTextTrim("TermName")-->Line_29 $$ places.add(val)[ FD ]
Line_26 $$ Element plcEl = it.next()-->Line_30 $$ String entryID = plcEl.attributeValue("entryID")[ FD ]
Line_31 $$ Tuple<String, ArrayList<String>> plc = new Tuple<String, ArrayList<String>>(val, new ArrayList<String>())-->Line_36 $$ ret.add(plc)[ FD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) [ FD ]
Line_32 $$ for (Iterator<Element> it2 = d.getRootElement().element("EntryCollection").elementIterator("GazetteerEntry"); it2.hasNext(); ) -->Line_33 $$ Element idEl = it2.next()[ FD ]
Line_33 $$ Element idEl = it2.next()-->Line_34 $$ if (idEl.attributeValue("entryID").equals(entryID))[ FD ]
Line_33 $$ Element idEl = it2.next()-->Line_34 $$ plc.getV2().add(idEl.attributeValue("id"))[ FD ]
