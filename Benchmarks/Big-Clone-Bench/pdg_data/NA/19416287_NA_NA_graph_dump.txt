Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String unzip(TupleInput input) [ CD ]
Line_2 $$ private String unzip(TupleInput input) -->Line_3 $$ boolean zipped = input.readBoolean()[ CD ]
Line_3 $$ boolean zipped = input.readBoolean()-->Line_3 $$ boolean zipped = input.readBoolean()[ CD ]
Line_2 $$ private String unzip(TupleInput input) -->Line_3 $$ boolean zipped = input.readBoolean()[ FD ]
Line_2 $$ private String unzip(TupleInput input) -->Line_4 $$ if (!zipped) [ CD ]
Line_3 $$ boolean zipped = input.readBoolean()-->Line_4 $$ if (!zipped) [ FD ]
Line_4 $$ if (!zipped) -->Line_4 $$ if (!zipped) [ CD ]
Line_3 $$ boolean zipped = input.readBoolean()-->Line_4 $$ if (!zipped) [ FD ]
Line_4 $$ if (!zipped) -->Line_5 $$ return input.readString()[ CD ]
Line_5 $$ return input.readString()-->Line_5 $$ return input.readString()[ CD ]
Line_2 $$ private String unzip(TupleInput input) -->Line_5 $$ return input.readString()[ FD ]
Line_2 $$ private String unzip(TupleInput input) -->Line_7 $$ int len = input.readInt()[ CD ]
Line_7 $$ int len = input.readInt()-->Line_7 $$ int len = input.readInt()[ CD ]
Line_2 $$ private String unzip(TupleInput input) -->Line_7 $$ int len = input.readInt()[ FD ]
Line_2 $$ private String unzip(TupleInput input) -->Line_10 $$ input.read(array)[ FD ]
Line_11 $$ GZIPInputStream in = new GZIPInputStream(new ByteArrayInputStream(array))-->Line_13 $$ IOUtils.copyTo(in, out)[ FD ]
Line_12 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_13 $$ IOUtils.copyTo(in, out)[ FD ]
Line_11 $$ GZIPInputStream in = new GZIPInputStream(new ByteArrayInputStream(array))-->Line_14 $$ in.close()[ FD ]
Line_12 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_15 $$ out.close()[ FD ]
Line_12 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_16 $$ return new String(out.toByteArray())[ FD ]
