Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_3 $$ if (algorithm.equalsIgnoreCase("crypt")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_3 $$ if (algorithm.equalsIgnoreCase("crypt")) [ FD ]
Line_3 $$ if (algorithm.equalsIgnoreCase("crypt")) -->Line_3 $$ if (algorithm.equalsIgnoreCase("crypt")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_3 $$ if (algorithm.equalsIgnoreCase("crypt")) [ FD ]
Line_3 $$ if (algorithm.equalsIgnoreCase("crypt")) -->Line_4 $$ return "[ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_4 $$ return "[ FD ]
Line_3 $$ if (algorithm.equalsIgnoreCase("crypt")) -->Line_5 $$ if (algorithm.equalsIgnoreCase("sha")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_5 $$ if (algorithm.equalsIgnoreCase("sha")) [ FD ]
Line_5 $$ if (algorithm.equalsIgnoreCase("sha")) -->Line_5 $$ if (algorithm.equalsIgnoreCase("sha")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_5 $$ if (algorithm.equalsIgnoreCase("sha")) [ FD ]
Line_5 $$ if (algorithm.equalsIgnoreCase("sha")) -->Line_6 $$ algorithm = "SHA-1"[ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_6 $$ algorithm = "SHA-1"[ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_6 $$ algorithm = "SHA-1"[ FD ]
Line_5 $$ if (algorithm.equalsIgnoreCase("sha")) -->Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) [ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) [ FD ]
Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) -->Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) [ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) [ FD ]
Line_7 $$ if (algorithm.equalsIgnoreCase("md5")) -->Line_8 $$ algorithm = "MD5"[ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_8 $$ algorithm = "MD5"[ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_8 $$ algorithm = "MD5"[ FD ]
Line_8 $$ algorithm = "MD5"-->Line_8 $$ algorithm = "MD5"[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)[ CD ]
Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)-->Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)[ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)[ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)[ FD ]
Line_8 $$ algorithm = "MD5"-->Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_11 $$ byte[] salt = [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_12 $$ if (saltHex != null) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_12 $$ if (saltHex != null) [ FD ]
Line_12 $$ if (saltHex != null) -->Line_13 $$ salt = fromHex(saltHex)[ CD ]
Line_11 $$ byte[] salt = -->Line_13 $$ salt = fromHex(saltHex)[ FD ]
Line_13 $$ salt = fromHex(saltHex)-->Line_13 $$ salt = fromHex(saltHex)[ FD ]
Line_13 $$ salt = fromHex(saltHex)-->Line_13 $$ salt = fromHex(saltHex)[ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_13 $$ salt = fromHex(saltHex)[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_15 $$ String label = null[ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_16 $$ if (algorithm.startsWith("SHA")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_16 $$ if (algorithm.startsWith("SHA")) [ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_16 $$ if (algorithm.startsWith("SHA")) [ FD ]
Line_8 $$ algorithm = "MD5"-->Line_16 $$ if (algorithm.startsWith("SHA")) [ FD ]
Line_16 $$ if (algorithm.startsWith("SHA")) -->Line_16 $$ if (algorithm.startsWith("SHA")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_16 $$ if (algorithm.startsWith("SHA")) [ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_16 $$ if (algorithm.startsWith("SHA")) [ FD ]
Line_8 $$ algorithm = "MD5"-->Line_16 $$ if (algorithm.startsWith("SHA")) [ FD ]
Line_16 $$ if (algorithm.startsWith("SHA")) -->Line_17 $$ label = (salt.length > 0) ? "[ CD ]
Line_15 $$ String label = null-->Line_17 $$ label = (salt.length > 0) ? "[ FD ]
Line_17 $$ label = (salt.length > 0) ? "-->Line_17 $$ label = (salt.length > 0) ? "[ FD ]
Line_16 $$ if (algorithm.startsWith("SHA")) -->Line_18 $$ if (algorithm.startsWith("MD5")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_18 $$ if (algorithm.startsWith("MD5")) [ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_18 $$ if (algorithm.startsWith("MD5")) [ FD ]
Line_8 $$ algorithm = "MD5"-->Line_18 $$ if (algorithm.startsWith("MD5")) [ FD ]
Line_18 $$ if (algorithm.startsWith("MD5")) -->Line_18 $$ if (algorithm.startsWith("MD5")) [ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_18 $$ if (algorithm.startsWith("MD5")) [ FD ]
Line_6 $$ algorithm = "SHA-1"-->Line_18 $$ if (algorithm.startsWith("MD5")) [ FD ]
Line_8 $$ algorithm = "MD5"-->Line_18 $$ if (algorithm.startsWith("MD5")) [ FD ]
Line_18 $$ if (algorithm.startsWith("MD5")) -->Line_19 $$ label = (salt.length > 0) ? "[ CD ]
Line_15 $$ String label = null-->Line_19 $$ label = (salt.length > 0) ? "[ FD ]
Line_17 $$ label = (salt.length > 0) ? "-->Line_19 $$ label = (salt.length > 0) ? "[ FD ]
Line_19 $$ label = (salt.length > 0) ? "-->Line_19 $$ label = (salt.length > 0) ? "[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_21 $$ msgDigest.reset()[ CD ]
Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)-->Line_21 $$ msgDigest.reset()[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_22 $$ msgDigest.update(password.getBytes())[ CD ]
Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)-->Line_22 $$ msgDigest.update(password.getBytes())[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_22 $$ msgDigest.update(password.getBytes())[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_23 $$ msgDigest.update(salt)[ CD ]
Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)-->Line_23 $$ msgDigest.update(salt)[ FD ]
Line_11 $$ byte[] salt = -->Line_23 $$ msgDigest.update(salt)[ FD ]
Line_13 $$ salt = fromHex(saltHex)-->Line_23 $$ msgDigest.update(salt)[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_24 $$ byte[] pwhash = msgDigest.digest()[ CD ]
Line_24 $$ byte[] pwhash = msgDigest.digest()-->Line_24 $$ byte[] pwhash = msgDigest.digest()[ CD ]
Line_10 $$ MessageDigest msgDigest = MessageDigest.getInstance(algorithm)-->Line_24 $$ byte[] pwhash = msgDigest.digest()[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_25 $$ StringBuffer digest = new StringBuffer(label)[ CD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_26 $$ digest.append(Base64.encode(concatenate(pwhash, salt)))[ CD ]
Line_25 $$ StringBuffer digest = new StringBuffer(label)-->Line_26 $$ digest.append(Base64.encode(concatenate(pwhash, salt)))[ FD ]
Line_24 $$ byte[] pwhash = msgDigest.digest()-->Line_26 $$ digest.append(Base64.encode(concatenate(pwhash, salt)))[ FD ]
Line_11 $$ byte[] salt = -->Line_26 $$ digest.append(Base64.encode(concatenate(pwhash, salt)))[ FD ]
Line_13 $$ salt = fromHex(saltHex)-->Line_26 $$ digest.append(Base64.encode(concatenate(pwhash, salt)))[ FD ]
Line_2 $$ public String generateDigest(String password, String saltHex, String algorithm) throws NoSuchAlgorithmException -->Line_27 $$ return digest.toString()[ CD ]
Line_27 $$ return digest.toString()-->Line_27 $$ return digest.toString()[ CD ]
Line_25 $$ StringBuffer digest = new StringBuffer(label)-->Line_27 $$ return digest.toString()[ FD ]
