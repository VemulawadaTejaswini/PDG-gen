Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] argv) throws IOException [ CD ]
Line_2 $$ public static void main(String[] argv) throws IOException -->Line_3 $$ int i[ CD ]
Line_2 $$ public static void main(String[] argv) throws IOException -->Line_4 $$ for (i = 0; i < argv.length; i++) [ CD ]
Line_2 $$ public static void main(String[] argv) throws IOException -->Line_2 $$ public static void main(String[] argv) throws IOException [ CD ]
Line_3 $$ int i-->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_4 $$ for (i = 0; i < argv.length; i++) [ CD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_3 $$ int i-->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_4 $$ for (i = 0; i < argv.length; i++) [ CD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_3 $$ int i-->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_5 $$ if (argv[i].charAt(0) != '-')[ CD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_6 $$ ++i[ CD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_6 $$ ++i[ FD ]
Line_3 $$ int i-->Line_6 $$ ++i[ FD ]
Line_2 $$ public static void main(String[] argv) throws IOException -->Line_21 $$ if (i >= argv.length || argv.length <= i + 2) [ CD ]
Line_21 $$ if (i >= argv.length || argv.length <= i + 2) -->Line_22 $$ exit_with_help()[ CD ]
Line_2 $$ public static void main(String[] argv) throws IOException -->Line_24 $$ BufferedReader reader = null[ CD ]
Line_2 $$ public static void main(String[] argv) throws IOException -->Line_25 $$ Writer writer = null[ CD ]
Line_24 $$ BufferedReader reader = null-->Line_27 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(argv[i]), Linear.FILE_CHARSET))[ FD ]
Line_27 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(argv[i]), Linear.FILE_CHARSET))-->Line_27 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(argv[i]), Linear.FILE_CHARSET))[ FD ]
Line_25 $$ Writer writer = null-->Line_28 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(argv[i + 2]), Linear.FILE_CHARSET))[ FD ]
Line_28 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(argv[i + 2]), Linear.FILE_CHARSET))-->Line_28 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(argv[i + 2]), Linear.FILE_CHARSET))[ FD ]
Line_29 $$ Model model = Linear.loadModel(new File(argv[i + 1]))-->Line_29 $$ Model model = Linear.loadModel(new File(argv[i + 1]))[ CD ]
Line_24 $$ BufferedReader reader = null-->Line_30 $$ doPredict(reader, writer, model)[ FD ]
Line_27 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(argv[i]), Linear.FILE_CHARSET))-->Line_30 $$ doPredict(reader, writer, model)[ FD ]
Line_25 $$ Writer writer = null-->Line_30 $$ doPredict(reader, writer, model)[ FD ]
Line_28 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(argv[i + 2]), Linear.FILE_CHARSET))-->Line_30 $$ doPredict(reader, writer, model)[ FD ]
Line_29 $$ Model model = Linear.loadModel(new File(argv[i + 1]))-->Line_30 $$ doPredict(reader, writer, model)[ FD ]
Line_24 $$ BufferedReader reader = null-->Line_32 $$ closeQuietly(reader)[ FD ]
Line_27 $$ reader = new BufferedReader(new InputStreamReader(new FileInputStream(argv[i]), Linear.FILE_CHARSET))-->Line_32 $$ closeQuietly(reader)[ FD ]
Line_25 $$ Writer writer = null-->Line_33 $$ closeQuietly(writer)[ FD ]
Line_28 $$ writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(argv[i + 2]), Linear.FILE_CHARSET))-->Line_33 $$ closeQuietly(writer)[ FD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_4 $$ for (i = 0; i < argv.length; i++) [ FD ]
Line_4 $$ for (i = 0; i < argv.length; i++) -->Line_6 $$ ++i[ FD ]
