Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException [ CD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_4 $$ final String providerNamePrefix = providerClass.getName() + "."[ FD ]
Line_5 $$ final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() -->Line_7 $$ return key1.compareTo(key2)[ CD ]
Line_7 $$ return key1.compareTo(key2)-->Line_7 $$ return key1.compareTo(key2)[ CD ]
Line_5 $$ final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() -->Line_7 $$ return key1.compareTo(key2)[ FD ]
Line_5 $$ final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() -->Line_7 $$ return key1.compareTo(key2)[ FD ]
Line_11 $$ if (platformProviders.exists()) -->Line_11 $$ if (platformProviders.exists()) [ CD ]
Line_18 $$ if (in != null) -->Line_19 $$ in.close()[ CD ]
Line_4 $$ final String providerNamePrefix = providerClass.getName() + "."-->Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) [ FD ]
Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) [ CD ]
Line_4 $$ final String providerNamePrefix = providerClass.getName() + "."-->Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) [ FD ]
Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_24 $$ final Class<?> provider = this.findClass(e.getValue().toString())[ CD ]
Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_25 $$ if (provider == null) [ CD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_26 $$ throw new BootstrapException(getMessage("implementationNotFound", providerClass.getName(), e.getValue().toString(), platformProviders.getAbsolutePath()))[ FD ]
Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_28 $$ if (!providerClass.isAssignableFrom(provider)) [ CD ]
Line_28 $$ if (!providerClass.isAssignableFrom(provider)) -->Line_28 $$ if (!providerClass.isAssignableFrom(provider)) [ CD ]
Line_28 $$ if (!providerClass.isAssignableFrom(provider)) -->Line_28 $$ if (!providerClass.isAssignableFrom(provider)) [ CD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_28 $$ if (!providerClass.isAssignableFrom(provider)) [ FD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_29 $$ throw new BootstrapException(getMessage("illegalImplementation", providerClass.getName(), e.getValue().toString(), platformProviders.getAbsolutePath()))[ FD ]
Line_23 $$ if (e.getKey().toString().startsWith(providerNamePrefix)) -->Line_31 $$ providers.put(e.getKey().toString(), provider.asSubclass(providerClass))[ CD ]
Line_5 $$ final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() -->Line_31 $$ providers.put(e.getKey().toString(), provider.asSubclass(providerClass))[ FD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_31 $$ providers.put(e.getKey().toString(), provider.asSubclass(providerClass))[ FD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_35 $$ final Enumeration<URL> classpathProviders = this.findResources(this.getProviderLocation() + '/' + providerClass.getName())[ FD ]
Line_36 $$ while (classpathProviders.hasMoreElements()) -->Line_36 $$ while (classpathProviders.hasMoreElements()) [ CD ]
Line_36 $$ while (classpathProviders.hasMoreElements()) -->Line_37 $$ final URL url = classpathProviders.nextElement()[ CD ]
Line_37 $$ final URL url = classpathProviders.nextElement()-->Line_37 $$ final URL url = classpathProviders.nextElement()[ CD ]
Line_36 $$ while (classpathProviders.hasMoreElements()) -->Line_38 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))[ CD ]
Line_37 $$ final URL url = classpathProviders.nextElement()-->Line_38 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))[ FD ]
Line_36 $$ while (classpathProviders.hasMoreElements()) -->Line_39 $$ String line = null[ CD ]
Line_36 $$ while (classpathProviders.hasMoreElements()) -->Line_40 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_36 $$ while (classpathProviders.hasMoreElements()) -->Line_36 $$ while (classpathProviders.hasMoreElements()) [ CD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_40 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_39 $$ String line = null-->Line_40 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_40 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_38 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_40 $$ while ((line = reader.readLine()) != null) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_41 $$ if (line.contains("#")) [ CD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_41 $$ if (line.contains("#")) [ FD ]
Line_39 $$ String line = null-->Line_41 $$ if (line.contains("#")) [ FD ]
Line_41 $$ if (line.contains("#")) -->Line_41 $$ if (line.contains("#")) [ CD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_41 $$ if (line.contains("#")) [ FD ]
Line_39 $$ String line = null-->Line_41 $$ if (line.contains("#")) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_44 $$ final Class<?> provider = this.findClass(line)[ CD ]
Line_44 $$ final Class<?> provider = this.findClass(line)-->Line_44 $$ final Class<?> provider = this.findClass(line)[ CD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_44 $$ final Class<?> provider = this.findClass(line)[ FD ]
Line_39 $$ String line = null-->Line_44 $$ final Class<?> provider = this.findClass(line)[ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_45 $$ if (provider == null) [ CD ]
Line_44 $$ final Class<?> provider = this.findClass(line)-->Line_45 $$ if (provider == null) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_46 $$ throw new BootstrapException(getMessage("implementationNotFound", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_39 $$ String line = null-->Line_46 $$ throw new BootstrapException(getMessage("implementationNotFound", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_46 $$ throw new BootstrapException(getMessage("implementationNotFound", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_37 $$ final URL url = classpathProviders.nextElement()-->Line_46 $$ throw new BootstrapException(getMessage("implementationNotFound", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_48 $$ if (!providerClass.isAssignableFrom(provider)) [ CD ]
Line_48 $$ if (!providerClass.isAssignableFrom(provider)) -->Line_48 $$ if (!providerClass.isAssignableFrom(provider)) [ CD ]
Line_48 $$ if (!providerClass.isAssignableFrom(provider)) -->Line_48 $$ if (!providerClass.isAssignableFrom(provider)) [ CD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_48 $$ if (!providerClass.isAssignableFrom(provider)) [ FD ]
Line_44 $$ final Class<?> provider = this.findClass(line)-->Line_48 $$ if (!providerClass.isAssignableFrom(provider)) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_49 $$ throw new BootstrapException(getMessage("illegalImplementation", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_39 $$ String line = null-->Line_49 $$ throw new BootstrapException(getMessage("illegalImplementation", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_49 $$ throw new BootstrapException(getMessage("illegalImplementation", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_37 $$ final URL url = classpathProviders.nextElement()-->Line_49 $$ throw new BootstrapException(getMessage("illegalImplementation", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_51 $$ providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass))[ CD ]
Line_5 $$ final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() -->Line_51 $$ providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass))[ FD ]
Line_5 $$ final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() -->Line_51 $$ providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass))[ FD ]
Line_44 $$ final Class<?> provider = this.findClass(line)-->Line_51 $$ providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass))[ FD ]
Line_2 $$ private <T> Collection<Class<? extends T>> loadProviders(final Class<T> providerClass) throws BootstrapException -->Line_51 $$ providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass))[ FD ]
Line_36 $$ while (classpathProviders.hasMoreElements()) -->Line_53 $$ reader.close()[ CD ]
Line_38 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_53 $$ reader.close()[ FD ]
Line_55 $$ return providers.values()-->Line_55 $$ return providers.values()[ CD ]
Line_5 $$ final Map<String, Class<? extends T>> providers = new TreeMap<String, Class<? extends T>>(new Comparator<String>() -->Line_55 $$ return providers.values()[ FD ]
Line_37 $$ final URL url = classpathProviders.nextElement()-->Line_38 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))[ FD ]
Line_38 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"))-->Line_53 $$ reader.close()[ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_41 $$ if (line.contains("#")) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_41 $$ if (line.contains("#")) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_44 $$ final Class<?> provider = this.findClass(line)[ FD ]
Line_44 $$ final Class<?> provider = this.findClass(line)-->Line_45 $$ if (provider == null) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_46 $$ throw new BootstrapException(getMessage("implementationNotFound", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_44 $$ final Class<?> provider = this.findClass(line)-->Line_48 $$ if (!providerClass.isAssignableFrom(provider)) [ FD ]
Line_40 $$ while ((line = reader.readLine()) != null) -->Line_49 $$ throw new BootstrapException(getMessage("illegalImplementation", providerClass.getName(), line, url.toExternalForm()))[ FD ]
Line_44 $$ final Class<?> provider = this.findClass(line)-->Line_51 $$ providers.put(providerNamePrefix + providers.size(), provider.asSubclass(providerClass))[ FD ]
