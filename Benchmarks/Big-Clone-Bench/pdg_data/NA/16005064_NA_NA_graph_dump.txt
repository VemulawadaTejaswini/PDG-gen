Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException [ CD ]
Line_2 $$ private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException -->Line_3 $$ String content[ CD ]
Line_2 $$ private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException -->Line_4 $$ if (m_obj.hasContentModel(Models.SERVICE_DEPLOYMENT_3_0) && (ds.DatastreamID.equals("SERVICE-PROFILE") || ds.DatastreamID.equals("WSDL"))) [ CD ]
Line_4 $$ if (m_obj.hasContentModel(Models.SERVICE_DEPLOYMENT_3_0) && (ds.DatastreamID.equals("SERVICE-PROFILE") || ds.DatastreamID.equals("WSDL"))) -->Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)[ CD ]
Line_3 $$ String content-->Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)[ FD ]
Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)-->Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)[ FD ]
Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)-->Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)[ CD ]
Line_4 $$ if (m_obj.hasContentModel(Models.SERVICE_DEPLOYMENT_3_0) && (ds.DatastreamID.equals("SERVICE-PROFILE") || ds.DatastreamID.equals("WSDL"))) -->Line_7 $$ content = new String(ds.xmlContent, m_encoding)[ CD ]
Line_3 $$ String content-->Line_7 $$ content = new String(ds.xmlContent, m_encoding)[ FD ]
Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)-->Line_7 $$ content = new String(ds.xmlContent, m_encoding)[ FD ]
Line_7 $$ content = new String(ds.xmlContent, m_encoding)-->Line_7 $$ content = new String(ds.xmlContent, m_encoding)[ FD ]
Line_2 $$ private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException -->Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) [ CD ]
Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) -->Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) [ CD ]
Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) -->Line_10 $$ String name = ds.DSVersionID + ".xml"[ CD ]
Line_3 $$ String content-->Line_13 $$ InputStream is = new ByteArrayInputStream(content.getBytes(m_encoding))[ FD ]
Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)-->Line_13 $$ InputStream is = new ByteArrayInputStream(content.getBytes(m_encoding))[ FD ]
Line_7 $$ content = new String(ds.xmlContent, m_encoding)-->Line_13 $$ InputStream is = new ByteArrayInputStream(content.getBytes(m_encoding))[ FD ]
Line_13 $$ InputStream is = new ByteArrayInputStream(content.getBytes(m_encoding))-->Line_14 $$ IOUtils.copy(is, m_zout)[ FD ]
Line_13 $$ InputStream is = new ByteArrayInputStream(content.getBytes(m_encoding))-->Line_16 $$ is.close()[ FD ]
Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) -->Line_20 $$ IRI iri = new IRI(name)[ CD ]
Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) -->Line_21 $$ entry.setSummary(ds.DSVersionID)[ CD ]
Line_2 $$ private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException -->Line_21 $$ entry.setSummary(ds.DSVersionID)[ FD ]
Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) -->Line_22 $$ entry.setContent(iri, ds.DSMIME)[ CD ]
Line_2 $$ private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException -->Line_22 $$ entry.setContent(iri, ds.DSMIME)[ FD ]
Line_20 $$ IRI iri = new IRI(name)-->Line_22 $$ entry.setContent(iri, ds.DSMIME)[ FD ]
Line_9 $$ if (m_format.equals(ATOM_ZIP1_1)) -->Line_24 $$ entry.setContent(content, ds.DSMIME)[ CD ]
Line_2 $$ private void setInlineXML(Entry entry, DatastreamXMLMetadata ds) throws UnsupportedEncodingException, StreamIOException -->Line_24 $$ entry.setContent(content, ds.DSMIME)[ FD ]
Line_3 $$ String content-->Line_24 $$ entry.setContent(content, ds.DSMIME)[ FD ]
Line_5 $$ content = DOTranslationUtility.normalizeInlineXML(new String(ds.xmlContent, m_encoding), m_transContext)-->Line_24 $$ entry.setContent(content, ds.DSMIME)[ FD ]
Line_7 $$ content = new String(ds.xmlContent, m_encoding)-->Line_24 $$ entry.setContent(content, ds.DSMIME)[ FD ]
