Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) [ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_3 $$ FileOutputStream fos = null[ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_4 $$ InputStream in = null[ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_5 $$ byte[] buffer = new byte[1024][ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_6 $$ int readLength = 0[ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_7 $$ boolean result = false[ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_10 $$ File f = new File(context.getFilesDir().getAbsolutePath() + File.separator + tempSavePath)[ FD ]
Line_10 $$ File f = new File(context.getFilesDir().getAbsolutePath() + File.separator + tempSavePath)-->Line_11 $$ if (f.exists()) [ FD ]
Line_11 $$ if (f.exists()) -->Line_11 $$ if (f.exists()) [ CD ]
Line_10 $$ File f = new File(context.getFilesDir().getAbsolutePath() + File.separator + tempSavePath)-->Line_11 $$ if (f.exists()) [ FD ]
Line_11 $$ if (f.exists()) -->Line_12 $$ context.deleteFile(tempSavePath)[ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_12 $$ context.deleteFile(tempSavePath)[ FD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_12 $$ context.deleteFile(tempSavePath)[ FD ]
Line_3 $$ FileOutputStream fos = null-->Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)[ FD ]
Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)-->Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)[ FD ]
Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)-->Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)[ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)[ FD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)[ FD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_19 $$ if (dirType == DirType.assets) [ FD ]
Line_19 $$ if (dirType == DirType.assets) -->Line_20 $$ AssetManager assetManager = context.getAssets()[ CD ]
Line_20 $$ AssetManager assetManager = context.getAssets()-->Line_20 $$ AssetManager assetManager = context.getAssets()[ CD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_20 $$ AssetManager assetManager = context.getAssets()[ FD ]
Line_19 $$ if (dirType == DirType.assets) -->Line_21 $$ in = assetManager.open(filePath)[ CD ]
Line_4 $$ InputStream in = null-->Line_21 $$ in = assetManager.open(filePath)[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_21 $$ in = assetManager.open(filePath)[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_21 $$ in = assetManager.open(filePath)[ CD ]
Line_20 $$ AssetManager assetManager = context.getAssets()-->Line_21 $$ in = assetManager.open(filePath)[ FD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_21 $$ in = assetManager.open(filePath)[ FD ]
Line_19 $$ if (dirType == DirType.assets) -->Line_22 $$ if (dirType == DirType.file && Constant.getUpdateDataPath() != null) [ CD ]
Line_22 $$ if (dirType == DirType.file && Constant.getUpdateDataPath() != null) -->Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)[ CD ]
Line_4 $$ InputStream in = null-->Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)[ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)[ FD ]
Line_22 $$ if (dirType == DirType.file && Constant.getUpdateDataPath() != null) -->Line_24 $$ if (dirType == DirType.sd && Constant.getSdPath() != null) [ CD ]
Line_24 $$ if (dirType == DirType.sd && Constant.getSdPath() != null) -->Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)[ CD ]
Line_4 $$ InputStream in = null-->Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)[ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)[ FD ]
Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)-->Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)[ FD ]
Line_24 $$ if (dirType == DirType.sd && Constant.getSdPath() != null) -->Line_26 $$ if (dirType == DirType.extSd && Constant.getExtSdPath() != null) [ CD ]
Line_26 $$ if (dirType == DirType.extSd && Constant.getExtSdPath() != null) -->Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)[ CD ]
Line_4 $$ InputStream in = null-->Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)[ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)[ FD ]
Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)-->Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)[ FD ]
Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)-->Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)[ FD ]
Line_4 $$ InputStream in = null-->Line_29 $$ if (in == null) [ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_29 $$ if (in == null) [ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_29 $$ if (in == null) [ FD ]
Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)-->Line_29 $$ if (in == null) [ FD ]
Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)-->Line_29 $$ if (in == null) [ FD ]
Line_29 $$ if (in == null) -->Line_30 $$ return false[ CD ]
Line_6 $$ int readLength = 0-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_32 $$ readLength = in.read(buffer)-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_32 $$ readLength = in.read(buffer)-->Line_32 $$ readLength = in.read(buffer)[ CD ]
Line_4 $$ InputStream in = null-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_5 $$ byte[] buffer = new byte[1024]-->Line_32 $$ readLength = in.read(buffer)[ FD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_33 $$ if (readLength >= ZipToFile.encrypLength && secrete) [ FD ]
Line_33 $$ if (readLength >= ZipToFile.encrypLength && secrete) -->Line_34 $$ byte[] encrypByte = new byte[ZipToFile.encrypLength][ CD ]
Line_33 $$ if (readLength >= ZipToFile.encrypLength && secrete) -->Line_35 $$ System.arraycopy(buffer, 0, encrypByte, 0, ZipToFile.encrypLength)[ CD ]
Line_5 $$ byte[] buffer = new byte[1024]-->Line_35 $$ System.arraycopy(buffer, 0, encrypByte, 0, ZipToFile.encrypLength)[ FD ]
Line_34 $$ byte[] encrypByte = new byte[ZipToFile.encrypLength]-->Line_35 $$ System.arraycopy(buffer, 0, encrypByte, 0, ZipToFile.encrypLength)[ FD ]
Line_33 $$ if (readLength >= ZipToFile.encrypLength && secrete) -->Line_36 $$ byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey)[ CD ]
Line_36 $$ byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey)-->Line_36 $$ byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey)[ CD ]
Line_34 $$ byte[] encrypByte = new byte[ZipToFile.encrypLength]-->Line_36 $$ byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey)[ FD ]
Line_33 $$ if (readLength >= ZipToFile.encrypLength && secrete) -->Line_37 $$ System.arraycopy(temp, 0, buffer, 0, ZipToFile.encrypLength)[ CD ]
Line_36 $$ byte[] temp = CryptionControl.getInstance().decryptECB(encrypByte, ZipToFile.rootKey)-->Line_37 $$ System.arraycopy(temp, 0, buffer, 0, ZipToFile.encrypLength)[ FD ]
Line_5 $$ byte[] buffer = new byte[1024]-->Line_37 $$ System.arraycopy(temp, 0, buffer, 0, ZipToFile.encrypLength)[ FD ]
Line_6 $$ int readLength = 0-->Line_39 $$ while (readLength > 0) [ FD ]
Line_32 $$ readLength = in.read(buffer)-->Line_39 $$ while (readLength > 0) [ FD ]
Line_39 $$ while (readLength > 0) -->Line_40 $$ fos.write(buffer, 0, readLength)[ CD ]
Line_3 $$ FileOutputStream fos = null-->Line_40 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)-->Line_40 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_5 $$ byte[] buffer = new byte[1024]-->Line_40 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_6 $$ int readLength = 0-->Line_40 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_32 $$ readLength = in.read(buffer)-->Line_40 $$ fos.write(buffer, 0, readLength)[ FD ]
Line_39 $$ while (readLength > 0) -->Line_41 $$ fos.flush()[ CD ]
Line_3 $$ FileOutputStream fos = null-->Line_41 $$ fos.flush()[ FD ]
Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)-->Line_41 $$ fos.flush()[ FD ]
Line_39 $$ while (readLength > 0) -->Line_42 $$ readLength = in.read(buffer)[ CD ]
Line_42 $$ readLength = in.read(buffer)-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_6 $$ int readLength = 0-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_32 $$ readLength = in.read(buffer)-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_42 $$ readLength = in.read(buffer)-->Line_42 $$ readLength = in.read(buffer)[ CD ]
Line_4 $$ InputStream in = null-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_5 $$ byte[] buffer = new byte[1024]-->Line_42 $$ readLength = in.read(buffer)[ FD ]
Line_7 $$ boolean result = false-->Line_44 $$ result = true[ FD ]
Line_44 $$ result = true-->Line_44 $$ result = true[ FD ]
Line_3 $$ FileOutputStream fos = null-->Line_48 $$ if (fos != null) [ FD ]
Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)-->Line_48 $$ if (fos != null) [ FD ]
Line_3 $$ FileOutputStream fos = null-->Line_50 $$ fos.flush()[ FD ]
Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)-->Line_50 $$ fos.flush()[ FD ]
Line_3 $$ FileOutputStream fos = null-->Line_51 $$ fos.close()[ FD ]
Line_17 $$ fos = context.openFileOutput(tempSavePath, Context.MODE_WORLD_READABLE)-->Line_51 $$ fos.close()[ FD ]
Line_4 $$ InputStream in = null-->Line_55 $$ if (in != null) [ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_55 $$ if (in != null) [ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_55 $$ if (in != null) [ FD ]
Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)-->Line_55 $$ if (in != null) [ FD ]
Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)-->Line_55 $$ if (in != null) [ FD ]
Line_4 $$ InputStream in = null-->Line_57 $$ in.close()[ FD ]
Line_21 $$ in = assetManager.open(filePath)-->Line_57 $$ in.close()[ FD ]
Line_23 $$ in = new FileInputStream(Constant.getUpdateDataPath() + File.separator + filePath)-->Line_57 $$ in.close()[ FD ]
Line_25 $$ in = new FileInputStream(Constant.getSdPath() + File.separator + filePath)-->Line_57 $$ in.close()[ FD ]
Line_27 $$ in = new FileInputStream(Constant.getExtSdPath() + File.separator + filePath)-->Line_57 $$ in.close()[ FD ]
Line_2 $$ public static boolean saveToTempFile(Context context, String filePath, DirType dirType, String tempSavePath, boolean secrete) -->Line_62 $$ return result[ CD ]
Line_42 $$ readLength = in.read(buffer)-->Line_39 $$ while (readLength > 0) [ FD ]
Line_42 $$ readLength = in.read(buffer)-->Line_39 $$ while (readLength > 0) [ FD ]
Line_42 $$ readLength = in.read(buffer)-->Line_40 $$ fos.write(buffer, 0, readLength)[ FD ]
