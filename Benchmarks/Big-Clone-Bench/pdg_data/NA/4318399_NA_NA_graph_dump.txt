Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) [ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()[ CD ]
Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()-->Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()[ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()[ FD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_4 $$ if (entry.isDirectory()) [ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_4 $$ if (entry.isDirectory()) [ FD ]
Line_4 $$ if (entry.isDirectory()) -->Line_4 $$ if (entry.isDirectory()) [ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_4 $$ if (entry.isDirectory()) [ FD ]
Line_4 $$ if (entry.isDirectory()) -->Line_5 $$ createDir(new File(outputDir, entry.getName()))[ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_5 $$ createDir(new File(outputDir, entry.getName()))[ FD ]
Line_4 $$ if (entry.isDirectory()) -->Line_6 $$ return[ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) [ CD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ CD ]
Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()-->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) [ CD ]
Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) -->Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) [ CD ]
Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()-->Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) [ FD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) [ FD ]
Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ CD ]
Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) -->Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) [ CD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ CD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ FD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ CD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ CD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ FD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ CD ]
Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) -->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ CD ]
Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()-->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ FD ]
Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()-->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ FD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ FD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ FD ]
Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) -->Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())[ CD ]
Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()-->Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())[ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())[ FD ]
Line_3 $$ LinkedList<BackUpInfoFile> fileList = fileGroup.getFileList()-->Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())[ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())[ FD ]
Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) -->Line_14 $$ if (!outputFile.getParentFile().exists()) [ CD ]
Line_14 $$ if (!outputFile.getParentFile().exists()) -->Line_14 $$ if (!outputFile.getParentFile().exists()) [ CD ]
Line_14 $$ if (!outputFile.getParentFile().exists()) -->Line_14 $$ if (!outputFile.getParentFile().exists()) [ CD ]
Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())-->Line_14 $$ if (!outputFile.getParentFile().exists()) [ FD ]
Line_14 $$ if (!outputFile.getParentFile().exists()) -->Line_15 $$ createDir(outputFile.getParentFile())[ CD ]
Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())-->Line_15 $$ createDir(outputFile.getParentFile())[ FD ]
Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) -->Line_17 $$ BufferedInputStream inputStream[ CD ]
Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) -->Line_18 $$ BufferedOutputStream outputStream[ CD ]
Line_17 $$ BufferedInputStream inputStream-->Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))[ FD ]
Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))-->Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))[ FD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))[ FD ]
Line_2 $$ private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir, BackUpInfoFileGroup fileGroup, LinkedList<String> restoreList) -->Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))[ FD ]
Line_18 $$ BufferedOutputStream outputStream-->Line_21 $$ outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))[ FD ]
Line_21 $$ outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))-->Line_21 $$ outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))[ FD ]
Line_17 $$ BufferedInputStream inputStream-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_18 $$ BufferedOutputStream outputStream-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_21 $$ outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_18 $$ BufferedOutputStream outputStream-->Line_23 $$ outputStream.close()[ FD ]
Line_21 $$ outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))-->Line_23 $$ outputStream.close()[ FD ]
Line_17 $$ BufferedInputStream inputStream-->Line_24 $$ inputStream.close()[ FD ]
Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))-->Line_24 $$ inputStream.close()[ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_8 $$ for (int i = 0; i < fileList.size(); i++) [ FD ]
Line_8 $$ for (int i = 0; i < fileList.size(); i++) -->Line_9 $$ if (fileList.get(i).getId().equals(entry.getName())) [ FD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ FD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ FD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_10 $$ for (int j = 0; j < restoreList.size(); j++) [ FD ]
Line_10 $$ for (int j = 0; j < restoreList.size(); j++) -->Line_11 $$ if ((fileList.get(i).getName() + "." + fileList.get(i).getType()).equals(restoreList.get(j))) [ FD ]
Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())-->Line_14 $$ if (!outputFile.getParentFile().exists()) [ FD ]
Line_13 $$ File outputFile = new File(outputDir, fileList.get(i).getName() + "." + fileList.get(i).getType())-->Line_15 $$ createDir(outputFile.getParentFile())[ FD ]
Line_17 $$ BufferedInputStream inputStream-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_18 $$ BufferedOutputStream outputStream-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_21 $$ outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))-->Line_22 $$ IOUtils.copy(inputStream, outputStream)[ FD ]
Line_18 $$ BufferedOutputStream outputStream-->Line_23 $$ outputStream.close()[ FD ]
Line_21 $$ outputStream = new BufferedOutputStream(new FileOutputStream(outputFile))-->Line_23 $$ outputStream.close()[ FD ]
Line_17 $$ BufferedInputStream inputStream-->Line_24 $$ inputStream.close()[ FD ]
Line_20 $$ inputStream = new BufferedInputStream(zipfile.getInputStream(entry))-->Line_24 $$ inputStream.close()[ FD ]
