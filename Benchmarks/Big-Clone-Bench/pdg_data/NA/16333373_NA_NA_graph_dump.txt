Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private boolean downloadBlacklist() [ CD ]
Line_2 $$ private boolean downloadBlacklist() -->Line_3 $$ boolean blacklist_updated = false[ CD ]
Line_6 $$ URL url = new URL(blacklistURL)-->Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ FD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ connection.setRequestProperty("User-Agent", "Mozilla/5.0")[ FD ]
Line_9 $$ if (this.lastModified != null) -->Line_10 $$ connection.setRequestProperty("If-Modified-Since", DateUtil.formatRfc822(this.lastModified))[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_10 $$ connection.setRequestProperty("If-Modified-Since", DateUtil.formatRfc822(this.lastModified))[ FD ]
Line_12 $$ int responseCode = connection.getResponseCode()-->Line_12 $$ int responseCode = connection.getResponseCode()[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_12 $$ int responseCode = connection.getResponseCode()[ FD ]
Line_12 $$ int responseCode = connection.getResponseCode()-->Line_14 $$ if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED) [ FD ]
Line_14 $$ if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED) -->Line_15 $$ mLogger.debug("MT blacklist site says we are current")[ CD ]
Line_14 $$ if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED) -->Line_16 $$ return false[ CD ]
Line_18 $$ long lastModifiedLong = connection.getHeaderFieldDate("Last-Modified", -1)-->Line_18 $$ long lastModifiedLong = connection.getHeaderFieldDate("Last-Modified", -1)[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_18 $$ long lastModifiedLong = connection.getHeaderFieldDate("Last-Modified", -1)[ FD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_20 $$ mLogger.debug("my last modified = " + this.lastModified.getTime())[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_21 $$ mLogger.debug("MT last modified = " + lastModifiedLong)[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_22 $$ InputStream instream = connection.getInputStream()[ CD ]
Line_22 $$ InputStream instream = connection.getInputStream()-->Line_22 $$ InputStream instream = connection.getInputStream()[ CD ]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_22 $$ InputStream instream = connection.getInputStream()[ FD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_23 $$ String uploadDir = RollerConfig.getProperty("uploads.dir")[ CD ]
Line_23 $$ String uploadDir = RollerConfig.getProperty("uploads.dir")-->Line_23 $$ String uploadDir = RollerConfig.getProperty("uploads.dir")[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_24 $$ String path = uploadDir + File.separator + blacklistFile[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_25 $$ FileOutputStream outstream = new FileOutputStream(path)[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_26 $$ mLogger.debug("writing updated MT blacklist to " + path)[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_27 $$ byte[] buf = new byte[4096][ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_28 $$ int length = 0[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) [ CD ]
Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)-->Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)[ FD ]
Line_28 $$ int length = 0-->Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)[ FD ]
Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)-->Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)[ CD ]
Line_22 $$ InputStream instream = connection.getInputStream()-->Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)[ FD ]
Line_27 $$ byte[] buf = new byte[4096]-->Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)[ FD ]
Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)-->Line_29 $$ outstream.write(buf, 0, length)[ CD ]
Line_25 $$ FileOutputStream outstream = new FileOutputStream(path)-->Line_29 $$ outstream.write(buf, 0, length)[ FD ]
Line_27 $$ byte[] buf = new byte[4096]-->Line_29 $$ outstream.write(buf, 0, length)[ FD ]
Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)-->Line_29 $$ outstream.write(buf, 0, length)[ FD ]
Line_28 $$ int length = 0-->Line_29 $$ outstream.write(buf, 0, length)[ FD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_30 $$ outstream.close()[ CD ]
Line_25 $$ FileOutputStream outstream = new FileOutputStream(path)-->Line_30 $$ outstream.close()[ FD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_31 $$ instream.close()[ CD ]
Line_22 $$ InputStream instream = connection.getInputStream()-->Line_31 $$ instream.close()[ FD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_32 $$ blacklist_updated = true[ CD ]
Line_3 $$ boolean blacklist_updated = false-->Line_32 $$ blacklist_updated = true[ FD ]
Line_32 $$ blacklist_updated = true-->Line_32 $$ blacklist_updated = true[ FD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_33 $$ mLogger.debug("MT blacklist download completed.")[ CD ]
Line_19 $$ if (responseCode == HttpURLConnection.HTTP_OK && (this.lastModified == null || this.lastModified.getTime() < lastModifiedLong)) -->Line_35 $$ mLogger.debug("blacklist *NOT* saved, assuming we are current")[ CD ]
Line_2 $$ private boolean downloadBlacklist() -->Line_40 $$ return blacklist_updated[ CD ]
Line_29 $$ while ((length = instream.read(buf)) > 0) outstream.write(buf, 0, length)-->Line_29 $$ outstream.write(buf, 0, length)[ FD ]
