Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void loadInitialDbState() throws IOException [ CD ]
Line_2 $$ private void loadInitialDbState() throws IOException -->Line_3 $$ InputStream in = SchemaAndDataPopulator.class.getClassLoader().getResourceAsStream(resourceName)[ CD ]
Line_3 $$ InputStream in = SchemaAndDataPopulator.class.getClassLoader().getResourceAsStream(resourceName)-->Line_3 $$ InputStream in = SchemaAndDataPopulator.class.getClassLoader().getResourceAsStream(resourceName)[ CD ]
Line_2 $$ private void loadInitialDbState() throws IOException -->Line_4 $$ StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ private void loadInitialDbState() throws IOException -->Line_5 $$ IOUtils.copy(in, writer)[ CD ]
Line_3 $$ InputStream in = SchemaAndDataPopulator.class.getClassLoader().getResourceAsStream(resourceName)-->Line_5 $$ IOUtils.copy(in, writer)[ FD ]
Line_4 $$ StringWriter writer = new StringWriter()-->Line_5 $$ IOUtils.copy(in, writer)[ FD ]
Line_4 $$ StringWriter writer = new StringWriter()-->Line_6 $$ for (String statement : writer.toString().split(SQL_STATEMENT_DELIMITER)) [ FD ]
Line_6 $$ for (String statement : writer.toString().split(SQL_STATEMENT_DELIMITER)) -->Line_7 $$ logger.info("Executing SQL Statement [ FD ]
Line_6 $$ for (String statement : writer.toString().split(SQL_STATEMENT_DELIMITER)) -->Line_8 $$ template.execute(statement)[ FD ]
