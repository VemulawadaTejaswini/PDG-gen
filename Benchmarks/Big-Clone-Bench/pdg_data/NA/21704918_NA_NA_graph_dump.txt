Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException [ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_3 $$ File archive = new File(EncoderPlugin.getDefault().getStateLocation().toFile(), "ffmpeg-0.5.zip")[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_4 $$ String message = "Downloading FFMpeg, contacting downloads.sourceforge.net"[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_5 $$ LOGGER.info(message)[ CD ]
Line_4 $$ String message = "Downloading FFMpeg, contacting downloads.sourceforge.net"-->Line_5 $$ LOGGER.info(message)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_6 $$ monitor.beginTask(message, 1)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_6 $$ monitor.beginTask(message, 1)[ FD ]
Line_4 $$ String message = "Downloading FFMpeg, contacting downloads.sourceforge.net"-->Line_6 $$ monitor.beginTask(message, 1)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_7 $$ HttpClient client = new HttpClient()[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_8 $$ HttpMethod method = new GetMethod(DOWNLOAD_URI)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_9 $$ int statusCode = HttpStatus.SC_SERVICE_UNAVAILABLE[ CD ]
Line_9 $$ int statusCode = HttpStatus.SC_SERVICE_UNAVAILABLE-->Line_11 $$ statusCode = client.executeMethod(method)[ FD ]
Line_11 $$ statusCode = client.executeMethod(method)-->Line_11 $$ statusCode = client.executeMethod(method)[ FD ]
Line_11 $$ statusCode = client.executeMethod(method)-->Line_11 $$ statusCode = client.executeMethod(method)[ CD ]
Line_7 $$ HttpClient client = new HttpClient()-->Line_11 $$ statusCode = client.executeMethod(method)[ FD ]
Line_8 $$ HttpMethod method = new GetMethod(DOWNLOAD_URI)-->Line_11 $$ statusCode = client.executeMethod(method)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_13 $$ monitor.setCanceled(true)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_16 $$ monitor.setCanceled(true)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_19 $$ if (statusCode != HttpStatus.SC_OK) [ CD ]
Line_9 $$ int statusCode = HttpStatus.SC_SERVICE_UNAVAILABLE-->Line_19 $$ if (statusCode != HttpStatus.SC_OK) [ FD ]
Line_11 $$ statusCode = client.executeMethod(method)-->Line_19 $$ if (statusCode != HttpStatus.SC_OK) [ FD ]
Line_19 $$ if (statusCode != HttpStatus.SC_OK) -->Line_20 $$ LOGGER.error(MessageFormat.format("Can't download ffmpeg.zip from zourceforge, " + "status = [[ CD ]
Line_9 $$ int statusCode = HttpStatus.SC_SERVICE_UNAVAILABLE-->Line_20 $$ LOGGER.error(MessageFormat.format("Can't download ffmpeg.zip from zourceforge, " + "status = [[ FD ]
Line_11 $$ statusCode = client.executeMethod(method)-->Line_20 $$ LOGGER.error(MessageFormat.format("Can't download ffmpeg.zip from zourceforge, " + "status = [[ FD ]
Line_19 $$ if (statusCode != HttpStatus.SC_OK) -->Line_21 $$ monitor.setCanceled(true)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_21 $$ monitor.setCanceled(true)[ FD ]
Line_19 $$ if (statusCode != HttpStatus.SC_OK) -->Line_22 $$ return[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_24 $$ monitor.worked(1)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_24 $$ monitor.worked(1)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_25 $$ Header header = method.getResponseHeader("Content-Length")[ CD ]
Line_25 $$ Header header = method.getResponseHeader("Content-Length")-->Line_25 $$ Header header = method.getResponseHeader("Content-Length")[ CD ]
Line_8 $$ HttpMethod method = new GetMethod(DOWNLOAD_URI)-->Line_25 $$ Header header = method.getResponseHeader("Content-Length")[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_26 $$ long contentLength = 3173544[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_27 $$ if (header != null) [ CD ]
Line_25 $$ Header header = method.getResponseHeader("Content-Length")-->Line_27 $$ if (header != null) [ FD ]
Line_26 $$ long contentLength = 3173544-->Line_29 $$ contentLength = Long.parseLong(header.getValue())[ FD ]
Line_29 $$ contentLength = Long.parseLong(header.getValue())-->Line_29 $$ contentLength = Long.parseLong(header.getValue())[ FD ]
Line_29 $$ contentLength = Long.parseLong(header.getValue())-->Line_29 $$ contentLength = Long.parseLong(header.getValue())[ CD ]
Line_25 $$ Header header = method.getResponseHeader("Content-Length")-->Line_29 $$ contentLength = Long.parseLong(header.getValue())[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_33 $$ monitor.beginTask("Downloading FFMpeg, " + DOWNLOAD_URI, (int) contentLength)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_33 $$ monitor.beginTask("Downloading FFMpeg, " + DOWNLOAD_URI, (int) contentLength)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_34 $$ OutputStream archiveOutput = null[ CD ]
Line_34 $$ OutputStream archiveOutput = null-->Line_36 $$ archiveOutput = new FileOutputStream(archive)[ FD ]
Line_36 $$ archiveOutput = new FileOutputStream(archive)-->Line_36 $$ archiveOutput = new FileOutputStream(archive)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_38 $$ monitor.setCanceled(true)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_41 $$ InputStream responseInput = null[ CD ]
Line_41 $$ InputStream responseInput = null-->Line_43 $$ responseInput = method.getResponseBodyAsStream()[ FD ]
Line_43 $$ responseInput = method.getResponseBodyAsStream()-->Line_43 $$ responseInput = method.getResponseBodyAsStream()[ FD ]
Line_43 $$ responseInput = method.getResponseBodyAsStream()-->Line_43 $$ responseInput = method.getResponseBodyAsStream()[ CD ]
Line_8 $$ HttpMethod method = new GetMethod(DOWNLOAD_URI)-->Line_43 $$ responseInput = method.getResponseBodyAsStream()[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_45 $$ monitor.setCanceled(true)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_48 $$ byte[] buffer = new byte[1024 * 4][ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_49 $$ int count = -1[ CD ]
Line_49 $$ int count = -1-->Line_49 $$ int count = -1[ CD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_51 $$ while ((count = responseInput.read(buffer)) != -1) [ FD ]
Line_49 $$ int count = -1-->Line_51 $$ while ((count = responseInput.read(buffer)) != -1) [ FD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_51 $$ while ((count = responseInput.read(buffer)) != -1) [ CD ]
Line_41 $$ InputStream responseInput = null-->Line_51 $$ while ((count = responseInput.read(buffer)) != -1) [ FD ]
Line_43 $$ responseInput = method.getResponseBodyAsStream()-->Line_51 $$ while ((count = responseInput.read(buffer)) != -1) [ FD ]
Line_48 $$ byte[] buffer = new byte[1024 * 4]-->Line_51 $$ while ((count = responseInput.read(buffer)) != -1) [ FD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_52 $$ if (monitor.isCanceled()) [ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_52 $$ if (monitor.isCanceled()) [ FD ]
Line_52 $$ if (monitor.isCanceled()) -->Line_52 $$ if (monitor.isCanceled()) [ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_52 $$ if (monitor.isCanceled()) [ FD ]
Line_52 $$ if (monitor.isCanceled()) -->Line_53 $$ return[ CD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_55 $$ archiveOutput.write(buffer, 0, count)[ CD ]
Line_34 $$ OutputStream archiveOutput = null-->Line_55 $$ archiveOutput.write(buffer, 0, count)[ FD ]
Line_36 $$ archiveOutput = new FileOutputStream(archive)-->Line_55 $$ archiveOutput.write(buffer, 0, count)[ FD ]
Line_48 $$ byte[] buffer = new byte[1024 * 4]-->Line_55 $$ archiveOutput.write(buffer, 0, count)[ FD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_55 $$ archiveOutput.write(buffer, 0, count)[ FD ]
Line_49 $$ int count = -1-->Line_55 $$ archiveOutput.write(buffer, 0, count)[ FD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_56 $$ monitor.worked(count)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_56 $$ monitor.worked(count)[ FD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_56 $$ monitor.worked(count)[ FD ]
Line_49 $$ int count = -1-->Line_56 $$ monitor.worked(count)[ FD ]
Line_34 $$ OutputStream archiveOutput = null-->Line_58 $$ archiveOutput.close()[ FD ]
Line_36 $$ archiveOutput = new FileOutputStream(archive)-->Line_58 $$ archiveOutput.close()[ FD ]
Line_41 $$ InputStream responseInput = null-->Line_59 $$ responseInput.close()[ FD ]
Line_43 $$ responseInput = method.getResponseBodyAsStream()-->Line_59 $$ responseInput.close()[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_61 $$ monitor.setCanceled(true)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_64 $$ monitor.beginTask("Downloading FFMpeg, extracting executable", 1)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_64 $$ monitor.beginTask("Downloading FFMpeg, extracting executable", 1)[ FD ]
Line_67 $$ ZipEntry entry = zipFile.getEntry("ffmpeg-0.5/ffmpeg.exe")-->Line_67 $$ ZipEntry entry = zipFile.getEntry("ffmpeg-0.5/ffmpeg.exe")[ CD ]
Line_66 $$ ZipFile zipFile = new ZipFile(archive)-->Line_67 $$ ZipEntry entry = zipFile.getEntry("ffmpeg-0.5/ffmpeg.exe")[ FD ]
Line_68 $$ InputStream input = zipFile.getInputStream(entry)-->Line_68 $$ InputStream input = zipFile.getInputStream(entry)[ CD ]
Line_66 $$ ZipFile zipFile = new ZipFile(archive)-->Line_68 $$ InputStream input = zipFile.getInputStream(entry)[ FD ]
Line_67 $$ ZipEntry entry = zipFile.getEntry("ffmpeg-0.5/ffmpeg.exe")-->Line_68 $$ InputStream input = zipFile.getInputStream(entry)[ FD ]
Line_68 $$ InputStream input = zipFile.getInputStream(entry)-->Line_70 $$ IOUtils.copy(input, output)[ FD ]
Line_69 $$ OutputStream output = new FileOutputStream(target)-->Line_70 $$ IOUtils.copy(input, output)[ FD ]
Line_68 $$ InputStream input = zipFile.getInputStream(entry)-->Line_71 $$ input.close()[ FD ]
Line_69 $$ OutputStream output = new FileOutputStream(target)-->Line_72 $$ output.close()[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_74 $$ monitor.setCanceled(true)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_77 $$ monitor.worked(1)[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_77 $$ monitor.worked(1)[ FD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_78 $$ monitor.done()[ CD ]
Line_2 $$ public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException -->Line_78 $$ monitor.done()[ FD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_55 $$ archiveOutput.write(buffer, 0, count)[ FD ]
Line_51 $$ while ((count = responseInput.read(buffer)) != -1) -->Line_56 $$ monitor.worked(count)[ FD ]
