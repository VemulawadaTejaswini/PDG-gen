Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String calculateHash(String data, String algorithm) [ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_3 $$ if (data == null) [ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_3 $$ if (data == null) [ FD ]
Line_3 $$ if (data == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())[ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())[ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())[ FD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())[ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())[ FD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_7 $$ if (algorithm.equals(PLAIN)) [ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_7 $$ if (algorithm.equals(PLAIN)) [ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_7 $$ if (algorithm.equals(PLAIN)) [ FD ]
Line_7 $$ if (algorithm.equals(PLAIN)) -->Line_7 $$ if (algorithm.equals(PLAIN)) [ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_7 $$ if (algorithm.equals(PLAIN)) [ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_7 $$ if (algorithm.equals(PLAIN)) [ FD ]
Line_7 $$ if (algorithm.equals(PLAIN)) -->Line_8 $$ return data[ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_10 $$ if (algorithm.startsWith("[ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_10 $$ if (algorithm.startsWith("[ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_10 $$ if (algorithm.startsWith("[ FD ]
Line_10 $$ if (algorithm.startsWith("-->Line_10 $$ if (algorithm.startsWith("[ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_10 $$ if (algorithm.startsWith("[ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_10 $$ if (algorithm.startsWith("[ FD ]
Line_10 $$ if (algorithm.startsWith("-->Line_11 $$ return encode(data, algorithm.substring(5), "RSA")[ CD ]
Line_11 $$ return encode(data, algorithm.substring(5), "RSA")-->Line_11 $$ return encode(data, algorithm.substring(5), "RSA")[ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_11 $$ return encode(data, algorithm.substring(5), "RSA")[ FD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_11 $$ return encode(data, algorithm.substring(5), "RSA")[ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_11 $$ return encode(data, algorithm.substring(5), "RSA")[ FD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ CD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ FD ]
Line_6 $$ algorithm = (algorithm == null ? INTERNAL : algorithm.toUpperCase())-->Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ FD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_15 $$ md.update(data.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String calculateHash(String data, String algorithm) -->Line_15 $$ md.update(data.getBytes("UTF-8"))[ FD ]
Line_16 $$ return getHashString(md.digest())-->Line_16 $$ return getHashString(md.digest())[ CD ]
Line_14 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_16 $$ return getHashString(md.digest())[ FD ]
