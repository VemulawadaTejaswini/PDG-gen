Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_3 $$ byte in_buf[] = new byte[20000][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_4 $$ if (args.length < 2) [ CD ]
Line_4 $$ if (args.length < 2) -->Line_5 $$ System.out.println("too few arguments")[ CD ]
Line_4 $$ if (args.length < 2) -->Line_6 $$ System.exit(0)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_8 $$ String inputName = args[0][ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_9 $$ InputStream in = new FileInputStream(inputName)[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_10 $$ int index = 0[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_11 $$ for (int i = 1; i < args.length; i++) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException [ CD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_11 $$ for (int i = 1; i < args.length; i++) [ CD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_11 $$ for (int i = 1; i < args.length; i++) [ CD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_11 $$ for (int i = 1; i < args.length; i++) [ FD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_12 $$ int size = Integer.parseInt(args[i])[ CD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_12 $$ int size = Integer.parseInt(args[i])[ CD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_13 $$ boolean copy = size >= 0[ CD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_14 $$ if (size < 0) [ CD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_14 $$ if (size < 0) [ FD ]
Line_14 $$ if (size < 0) -->Line_15 $$ size = -size[ CD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_15 $$ size = -size[ FD ]
Line_15 $$ size = -size-->Line_15 $$ size = -size[ FD ]
Line_15 $$ size = -size-->Line_15 $$ size = -size[ CD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_15 $$ size = -size[ FD ]
Line_15 $$ size = -size-->Line_15 $$ size = -size[ FD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_17 $$ OutputStream out = null[ CD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_18 $$ if (copy) [ CD ]
Line_18 $$ if (copy) -->Line_19 $$ index++[ CD ]
Line_10 $$ int index = 0-->Line_19 $$ index++[ FD ]
Line_18 $$ if (copy) -->Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")[ CD ]
Line_17 $$ OutputStream out = null-->Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")[ FD ]
Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")[ FD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_22 $$ while (size > 0) [ CD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_11 $$ for (int i = 1; i < args.length; i++) [ CD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_22 $$ while (size > 0) [ FD ]
Line_15 $$ size = -size-->Line_22 $$ while (size > 0) [ FD ]
Line_22 $$ while (size > 0) -->Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))[ CD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))[ CD ]
Line_9 $$ InputStream in = new FileInputStream(inputName)-->Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))[ FD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))[ FD ]
Line_15 $$ size = -size-->Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))[ FD ]
Line_22 $$ while (size > 0) -->Line_24 $$ if (read < 0) [ CD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_24 $$ if (read < 0) [ FD ]
Line_22 $$ while (size > 0) -->Line_27 $$ size -= read[ CD ]
Line_27 $$ size -= read-->Line_27 $$ size -= read[ FD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_27 $$ size -= read[ FD ]
Line_15 $$ size = -size-->Line_27 $$ size -= read[ FD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_27 $$ size -= read[ FD ]
Line_22 $$ while (size > 0) -->Line_28 $$ if (copy) [ CD ]
Line_28 $$ if (copy) -->Line_29 $$ out.write(in_buf, 0, read)[ CD ]
Line_17 $$ OutputStream out = null-->Line_29 $$ out.write(in_buf, 0, read)[ FD ]
Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_29 $$ out.write(in_buf, 0, read)[ FD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_29 $$ out.write(in_buf, 0, read)[ FD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_32 $$ if (copy) [ CD ]
Line_32 $$ if (copy) -->Line_33 $$ out.close()[ CD ]
Line_17 $$ OutputStream out = null-->Line_33 $$ out.close()[ FD ]
Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_33 $$ out.close()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_36 $$ index++[ CD ]
Line_10 $$ int index = 0-->Line_36 $$ index++[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_37 $$ OutputStream out = new FileOutputStream(inputName + "." + index + ".dat")[ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_38 $$ while (true) [ CD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException [ CD ]
Line_38 $$ while (true) -->Line_39 $$ int read = in.read(in_buf)[ CD ]
Line_39 $$ int read = in.read(in_buf)-->Line_39 $$ int read = in.read(in_buf)[ CD ]
Line_9 $$ InputStream in = new FileInputStream(inputName)-->Line_39 $$ int read = in.read(in_buf)[ FD ]
Line_38 $$ while (true) -->Line_40 $$ if (read < 0) [ CD ]
Line_39 $$ int read = in.read(in_buf)-->Line_40 $$ if (read < 0) [ FD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_40 $$ if (read < 0) [ FD ]
Line_38 $$ while (true) -->Line_43 $$ out.write(in_buf, 0, read)[ CD ]
Line_17 $$ OutputStream out = null-->Line_43 $$ out.write(in_buf, 0, read)[ FD ]
Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_43 $$ out.write(in_buf, 0, read)[ FD ]
Line_37 $$ OutputStream out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_43 $$ out.write(in_buf, 0, read)[ FD ]
Line_39 $$ int read = in.read(in_buf)-->Line_43 $$ out.write(in_buf, 0, read)[ FD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_43 $$ out.write(in_buf, 0, read)[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_45 $$ out.close()[ CD ]
Line_17 $$ OutputStream out = null-->Line_45 $$ out.close()[ FD ]
Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_45 $$ out.close()[ FD ]
Line_37 $$ OutputStream out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_45 $$ out.close()[ FD ]
Line_2 $$ public static void main(String[] args) throws IOException, DataFormatException -->Line_46 $$ in.close()[ CD ]
Line_9 $$ InputStream in = new FileInputStream(inputName)-->Line_46 $$ in.close()[ FD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_11 $$ for (int i = 1; i < args.length; i++) [ FD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_11 $$ for (int i = 1; i < args.length; i++) [ FD ]
Line_11 $$ for (int i = 1; i < args.length; i++) -->Line_11 $$ for (int i = 1; i < args.length; i++) [ FD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_14 $$ if (size < 0) [ FD ]
Line_15 $$ size = -size-->Line_14 $$ if (size < 0) [ FD ]
Line_12 $$ int size = Integer.parseInt(args[i])-->Line_15 $$ size = -size[ FD ]
Line_15 $$ size = -size-->Line_15 $$ size = -size[ FD ]
Line_17 $$ OutputStream out = null-->Line_33 $$ out.close()[ FD ]
Line_20 $$ out = new FileOutputStream(inputName + "." + index + ".dat")-->Line_33 $$ out.close()[ FD ]
Line_27 $$ size -= read-->Line_22 $$ while (size > 0) [ FD ]
Line_27 $$ size -= read-->Line_22 $$ while (size > 0) [ FD ]
Line_27 $$ size -= read-->Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))[ FD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_24 $$ if (read < 0) [ FD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_27 $$ size -= read[ FD ]
Line_23 $$ int read = in.read(in_buf, 0, Math.min(in_buf.length, size))-->Line_29 $$ out.write(in_buf, 0, read)[ FD ]
Line_39 $$ int read = in.read(in_buf)-->Line_40 $$ if (read < 0) [ FD ]
Line_39 $$ int read = in.read(in_buf)-->Line_43 $$ out.write(in_buf, 0, read)[ FD ]
