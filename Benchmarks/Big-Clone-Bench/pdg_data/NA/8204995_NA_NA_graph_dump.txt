Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) [ CD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_3 $$ String shared = fromPrivate ? "private" : "public"[ CD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_4 $$ List<Template> templates = new ArrayList<Template>()[ CD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_5 $$ String restURL = configuration.getBeehiveRESTRootUrl() + "account/" + userService.getAccount().getOid() + "/templates/" + shared[ CD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_6 $$ HttpGet httpGet = new HttpGet(restURL)[ CD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_7 $$ httpGet.setHeader("Accept", "application/json")[ CD ]
Line_6 $$ HttpGet httpGet = new HttpGet(restURL)-->Line_7 $$ httpGet.setHeader("Accept", "application/json")[ FD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_8 $$ this.addAuthentication(httpGet)[ CD ]
Line_6 $$ HttpGet httpGet = new HttpGet(restURL)-->Line_8 $$ this.addAuthentication(httpGet)[ FD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_9 $$ HttpClient httpClient = new DefaultHttpClient()[ CD ]
Line_11 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_11 $$ HttpResponse response = httpClient.execute(httpGet)[ CD ]
Line_9 $$ HttpClient httpClient = new DefaultHttpClient()-->Line_11 $$ HttpResponse response = httpClient.execute(httpGet)[ FD ]
Line_6 $$ HttpGet httpGet = new HttpGet(restURL)-->Line_11 $$ HttpResponse response = httpClient.execute(httpGet)[ FD ]
Line_11 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_12 $$ if (response.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) [ FD ]
Line_12 $$ if (response.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) -->Line_13 $$ if (response.getStatusLine().getStatusCode() == HttpServletResponse.SC_UNAUTHORIZED) [ CD ]
Line_11 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_13 $$ if (response.getStatusLine().getStatusCode() == HttpServletResponse.SC_UNAUTHORIZED) [ FD ]
Line_11 $$ HttpResponse response = httpClient.execute(httpGet)-->Line_18 $$ InputStreamReader reader = new InputStreamReader(response.getEntity().getContent())[ FD ]
Line_22 $$ while ((line = buffReader.readLine()) != null) -->Line_22 $$ while ((line = buffReader.readLine()) != null) [ FD ]
Line_21 $$ String line = ""-->Line_22 $$ while ((line = buffReader.readLine()) != null) [ FD ]
Line_22 $$ while ((line = buffReader.readLine()) != null) -->Line_22 $$ while ((line = buffReader.readLine()) != null) [ CD ]
Line_19 $$ BufferedReader buffReader = new BufferedReader(reader)-->Line_22 $$ while ((line = buffReader.readLine()) != null) [ FD ]
Line_22 $$ while ((line = buffReader.readLine()) != null) -->Line_23 $$ sb.append(line)[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(line)[ FD ]
Line_22 $$ while ((line = buffReader.readLine()) != null) -->Line_23 $$ sb.append(line)[ FD ]
Line_21 $$ String line = ""-->Line_23 $$ sb.append(line)[ FD ]
Line_22 $$ while ((line = buffReader.readLine()) != null) -->Line_24 $$ sb.append("\n")[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append("\n")[ FD ]
Line_26 $$ String result = sb.toString()-->Line_26 $$ String result = sb.toString()[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ String result = sb.toString()[ FD ]
Line_27 $$ TemplateList templateList = buildTemplateListFromJson(result)-->Line_27 $$ TemplateList templateList = buildTemplateListFromJson(result)[ CD ]
Line_26 $$ String result = sb.toString()-->Line_27 $$ TemplateList templateList = buildTemplateListFromJson(result)[ FD ]
Line_28 $$ List<TemplateDTO> dtoes = templateList.getTemplates()-->Line_28 $$ List<TemplateDTO> dtoes = templateList.getTemplates()[ CD ]
Line_27 $$ TemplateList templateList = buildTemplateListFromJson(result)-->Line_28 $$ List<TemplateDTO> dtoes = templateList.getTemplates()[ FD ]
Line_4 $$ List<Template> templates = new ArrayList<Template>()-->Line_30 $$ templates.add(dto.toTemplate())[ FD ]
Line_29 $$ for (TemplateDTO dto : dtoes) -->Line_30 $$ templates.add(dto.toTemplate())[ FD ]
Line_2 $$ public List<Template> getTemplates(boolean fromPrivate) -->Line_35 $$ return templates[ CD ]
Line_22 $$ while ((line = buffReader.readLine()) != null) -->Line_23 $$ sb.append(line)[ FD ]
