Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception [ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_3 $$ Pattern pattern = Pattern.compile("(?i)(?:.*(xmlns(?:\\:\\w+)?=\\\"http\\:\\/\\/www\\.ivoa\\.net\\/.*" + service + "[^\\\"]*\\\").*)")[ CD ]
Line_3 $$ Pattern pattern = Pattern.compile("(?i)(?:.*(xmlns(?:\\:\\w+)?=\\\"http\\:\\/\\/www\\.ivoa\\.net\\/.*" + service + "[^\\\"]*\\\").*)")-->Line_3 $$ Pattern pattern = Pattern.compile("(?i)(?:.*(xmlns(?:\\:\\w+)?=\\\"http\\:\\/\\/www\\.ivoa\\.net\\/.*" + service + "[^\\\"]*\\\").*)")[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_4 $$ pattern = Pattern.compile(".*xmlns(?::\\w+)?=(\"[^\"]*(?i)(?:" + service + ")[^\"]*\").*")[ CD ]
Line_3 $$ Pattern pattern = Pattern.compile("(?i)(?:.*(xmlns(?:\\:\\w+)?=\\\"http\\:\\/\\/www\\.ivoa\\.net\\/.*" + service + "[^\\\"]*\\\").*)")-->Line_4 $$ pattern = Pattern.compile(".*xmlns(?::\\w+)?=(\"[^\"]*(?i)(?:" + service + ")[^\"]*\").*")[ FD ]
Line_4 $$ pattern = Pattern.compile(".*xmlns(?::\\w+)?=(\"[^\"]*(?i)(?:" + service + ")[^\"]*\").*")-->Line_4 $$ pattern = Pattern.compile(".*xmlns(?::\\w+)?=(\"[^\"]*(?i)(?:" + service + ")[^\"]*\").*")[ FD ]
Line_4 $$ pattern = Pattern.compile(".*xmlns(?::\\w+)?=(\"[^\"]*(?i)(?:" + service + ")[^\"]*\").*")-->Line_4 $$ pattern = Pattern.compile(".*xmlns(?::\\w+)?=(\"[^\"]*(?i)(?:" + service + ")[^\"]*\").*")[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_5 $$ logger.debug("read " + this.url + service)[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader((new URL(this.url + service)).openStream()))[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_7 $$ String inputLine[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_8 $$ BufferedWriter bfw = new BufferedWriter(new FileWriter(this.baseDirectory + service + ".xml"))[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_9 $$ boolean found = false[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_10 $$ while ((inputLine = in.readLine()) != null) [ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception [ CD ]
Line_10 $$ while ((inputLine = in.readLine()) != null) -->Line_10 $$ while ((inputLine = in.readLine()) != null) [ FD ]
Line_7 $$ String inputLine-->Line_10 $$ while ((inputLine = in.readLine()) != null) [ FD ]
Line_10 $$ while ((inputLine = in.readLine()) != null) -->Line_10 $$ while ((inputLine = in.readLine()) != null) [ CD ]
Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader((new URL(this.url + service)).openStream()))-->Line_10 $$ while ((inputLine = in.readLine()) != null) [ FD ]
Line_10 $$ while ((inputLine = in.readLine()) != null) -->Line_11 $$ if (!found) [ CD ]
Line_9 $$ boolean found = false-->Line_11 $$ if (!found) [ FD ]
Line_11 $$ if (!found) -->Line_11 $$ if (!found) [ CD ]
Line_9 $$ boolean found = false-->Line_11 $$ if (!found) [ FD ]
Line_11 $$ if (!found) -->Line_12 $$ Matcher m = pattern.matcher(inputLine)[ CD ]
Line_12 $$ Matcher m = pattern.matcher(inputLine)-->Line_12 $$ Matcher m = pattern.matcher(inputLine)[ CD ]
Line_3 $$ Pattern pattern = Pattern.compile("(?i)(?:.*(xmlns(?:\\:\\w+)?=\\\"http\\:\\/\\/www\\.ivoa\\.net\\/.*" + service + "[^\\\"]*\\\").*)")-->Line_12 $$ Matcher m = pattern.matcher(inputLine)[ FD ]
Line_4 $$ pattern = Pattern.compile(".*xmlns(?::\\w+)?=(\"[^\"]*(?i)(?:" + service + ")[^\"]*\").*")-->Line_12 $$ Matcher m = pattern.matcher(inputLine)[ FD ]
Line_10 $$ while ((inputLine = in.readLine()) != null) -->Line_12 $$ Matcher m = pattern.matcher(inputLine)[ FD ]
Line_7 $$ String inputLine-->Line_12 $$ Matcher m = pattern.matcher(inputLine)[ FD ]
Line_11 $$ if (!found) -->Line_13 $$ if (m.matches()) [ CD ]
Line_12 $$ Matcher m = pattern.matcher(inputLine)-->Line_13 $$ if (m.matches()) [ FD ]
Line_13 $$ if (m.matches()) -->Line_13 $$ if (m.matches()) [ CD ]
Line_12 $$ Matcher m = pattern.matcher(inputLine)-->Line_13 $$ if (m.matches()) [ FD ]
Line_13 $$ if (m.matches()) -->Line_14 $$ nsDefinition.init("xmlns:vosi=" + m.group(1))[ CD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_14 $$ nsDefinition.init("xmlns:vosi=" + m.group(1))[ FD ]
Line_12 $$ Matcher m = pattern.matcher(inputLine)-->Line_14 $$ nsDefinition.init("xmlns:vosi=" + m.group(1))[ FD ]
Line_13 $$ if (m.matches()) -->Line_15 $$ found = true[ CD ]
Line_15 $$ found = true-->Line_15 $$ found = true[ FD ]
Line_9 $$ boolean found = false-->Line_15 $$ found = true[ FD ]
Line_10 $$ while ((inputLine = in.readLine()) != null) -->Line_18 $$ bfw.write(inputLine + "\n")[ CD ]
Line_8 $$ BufferedWriter bfw = new BufferedWriter(new FileWriter(this.baseDirectory + service + ".xml"))-->Line_18 $$ bfw.write(inputLine + "\n")[ FD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_20 $$ in.close()[ CD ]
Line_6 $$ BufferedReader in = new BufferedReader(new InputStreamReader((new URL(this.url + service)).openStream()))-->Line_20 $$ in.close()[ FD ]
Line_2 $$ private void getServiceReponse(String service, NameSpaceDefinition nsDefinition) throws Exception -->Line_21 $$ bfw.close()[ CD ]
Line_8 $$ BufferedWriter bfw = new BufferedWriter(new FileWriter(this.baseDirectory + service + ".xml"))-->Line_21 $$ bfw.close()[ FD ]
Line_15 $$ found = true-->Line_11 $$ if (!found) [ FD ]
Line_15 $$ found = true-->Line_11 $$ if (!found) [ FD ]
Line_10 $$ while ((inputLine = in.readLine()) != null) -->Line_12 $$ Matcher m = pattern.matcher(inputLine)[ FD ]
Line_12 $$ Matcher m = pattern.matcher(inputLine)-->Line_13 $$ if (m.matches()) [ FD ]
Line_12 $$ Matcher m = pattern.matcher(inputLine)-->Line_13 $$ if (m.matches()) [ FD ]
Line_12 $$ Matcher m = pattern.matcher(inputLine)-->Line_14 $$ nsDefinition.init("xmlns:vosi=" + m.group(1))[ FD ]
