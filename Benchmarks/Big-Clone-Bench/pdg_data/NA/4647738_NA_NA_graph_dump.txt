Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void tryToMerge(String url) [ CD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_3 $$ if ("none".equalsIgnoreCase(url))[ CD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_3 $$ if ("none".equalsIgnoreCase(url))[ FD ]
Line_3 $$ if ("none".equalsIgnoreCase(url))-->Line_3 $$ if ("none".equalsIgnoreCase(url))[ CD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_3 $$ if ("none".equalsIgnoreCase(url))[ FD ]
Line_3 $$ if ("none".equalsIgnoreCase(url))-->Line_3 $$ return[ CD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_4 $$ Properties nullProps = new Properties()[ CD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_5 $$ FileProperties propsIn = new FileProperties(nullProps, nullProps)[ CD ]
Line_5 $$ FileProperties propsIn = new FileProperties(nullProps, nullProps)-->Line_7 $$ propsIn.load(new URL(url).openStream())[ FD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_10 $$ if (propsIn.isEmpty())[ CD ]
Line_5 $$ FileProperties propsIn = new FileProperties(nullProps, nullProps)-->Line_10 $$ if (propsIn.isEmpty())[ FD ]
Line_10 $$ if (propsIn.isEmpty())-->Line_10 $$ if (propsIn.isEmpty())[ CD ]
Line_5 $$ FileProperties propsIn = new FileProperties(nullProps, nullProps)-->Line_10 $$ if (propsIn.isEmpty())[ FD ]
Line_10 $$ if (propsIn.isEmpty())-->Line_10 $$ return[ CD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) [ CD ]
Line_2 $$ private static void tryToMerge(String url) -->Line_2 $$ private static void tryToMerge(String url) [ CD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) [ CD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) [ CD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) [ CD ]
Line_5 $$ FileProperties propsIn = new FileProperties(nullProps, nullProps)-->Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) [ FD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_12 $$ Map.Entry e = (Map.Entry) i.next()[ CD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_12 $$ Map.Entry e = (Map.Entry) i.next()[ FD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_13 $$ String propKey = ((String) e.getKey()).trim()[ CD ]
Line_13 $$ String propKey = ((String) e.getKey()).trim()-->Line_13 $$ String propKey = ((String) e.getKey()).trim()[ CD ]
Line_12 $$ Map.Entry e = (Map.Entry) i.next()-->Line_13 $$ String propKey = ((String) e.getKey()).trim()[ FD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_14 $$ if (!propKey.startsWith(MERGE_PROP_PREFIX))[ CD ]
Line_14 $$ if (!propKey.startsWith(MERGE_PROP_PREFIX))-->Line_14 $$ if (!propKey.startsWith(MERGE_PROP_PREFIX))[ CD ]
Line_14 $$ if (!propKey.startsWith(MERGE_PROP_PREFIX))-->Line_14 $$ if (!propKey.startsWith(MERGE_PROP_PREFIX))[ CD ]
Line_13 $$ String propKey = ((String) e.getKey()).trim()-->Line_14 $$ if (!propKey.startsWith(MERGE_PROP_PREFIX))[ FD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())[ CD ]
Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())-->Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())[ CD ]
Line_13 $$ String propKey = ((String) e.getKey()).trim()-->Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())[ FD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_16 $$ if (getVal(settingName) == null) [ CD ]
Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())-->Line_16 $$ if (getVal(settingName) == null) [ FD ]
Line_16 $$ if (getVal(settingName) == null) -->Line_17 $$ String settingVal = ((String) e.getValue()).trim()[ CD ]
Line_17 $$ String settingVal = ((String) e.getValue()).trim()-->Line_17 $$ String settingVal = ((String) e.getValue()).trim()[ CD ]
Line_12 $$ Map.Entry e = (Map.Entry) i.next()-->Line_17 $$ String settingVal = ((String) e.getValue()).trim()[ FD ]
Line_16 $$ if (getVal(settingName) == null) -->Line_18 $$ set(settingName, settingVal)[ CD ]
Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())-->Line_18 $$ set(settingName, settingVal)[ FD ]
Line_17 $$ String settingVal = ((String) e.getValue()).trim()-->Line_18 $$ set(settingName, settingVal)[ FD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) [ FD ]
Line_11 $$ for (Iterator i = propsIn.entrySet().iterator(); i.hasNext(); ) -->Line_12 $$ Map.Entry e = (Map.Entry) i.next()[ FD ]
Line_12 $$ Map.Entry e = (Map.Entry) i.next()-->Line_13 $$ String propKey = ((String) e.getKey()).trim()[ FD ]
Line_13 $$ String propKey = ((String) e.getKey()).trim()-->Line_14 $$ if (!propKey.startsWith(MERGE_PROP_PREFIX))[ FD ]
Line_13 $$ String propKey = ((String) e.getKey()).trim()-->Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())[ FD ]
Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())-->Line_16 $$ if (getVal(settingName) == null) [ FD ]
Line_12 $$ Map.Entry e = (Map.Entry) i.next()-->Line_17 $$ String settingVal = ((String) e.getValue()).trim()[ FD ]
Line_15 $$ String settingName = propKey.substring(MERGE_PROP_PREFIX.length())-->Line_18 $$ set(settingName, settingVal)[ FD ]
Line_17 $$ String settingVal = ((String) e.getValue()).trim()-->Line_18 $$ set(settingName, settingVal)[ FD ]
