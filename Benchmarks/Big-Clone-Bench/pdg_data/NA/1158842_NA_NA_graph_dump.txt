Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static int unzipFile(File file_input, File dir_output) [ CD ]
Line_2 $$ public static int unzipFile(File file_input, File dir_output) -->Line_3 $$ ZipInputStream zip_in_stream[ CD ]
Line_3 $$ ZipInputStream zip_in_stream-->Line_7 $$ zip_in_stream = new ZipInputStream(source)[ FD ]
Line_7 $$ zip_in_stream = new ZipInputStream(source)-->Line_7 $$ zip_in_stream = new ZipInputStream(source)[ FD ]
Line_2 $$ public static int unzipFile(File file_input, File dir_output) -->Line_11 $$ byte[] input_buffer = new byte[BUF_SIZE][ CD ]
Line_2 $$ public static int unzipFile(File file_input, File dir_output) -->Line_12 $$ int len = 0[ CD ]
Line_2 $$ public static int unzipFile(File file_input, File dir_output) -->Line_13 $$ do [ CD ]
Line_2 $$ public static int unzipFile(File file_input, File dir_output) -->Line_2 $$ public static int unzipFile(File file_input, File dir_output) [ CD ]
Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()-->Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()[ CD ]
Line_3 $$ ZipInputStream zip_in_stream-->Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()[ FD ]
Line_7 $$ zip_in_stream = new ZipInputStream(source)-->Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()[ FD ]
Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()-->Line_16 $$ if (zip_entry == null)[ FD ]
Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()-->Line_17 $$ File output_file = new File(dir_output, zip_entry.getName())[ FD ]
Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)-->Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)[ FD ]
Line_12 $$ int len = 0-->Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)[ FD ]
Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)-->Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)[ CD ]
Line_3 $$ ZipInputStream zip_in_stream-->Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)[ FD ]
Line_7 $$ zip_in_stream = new ZipInputStream(source)-->Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)[ FD ]
Line_11 $$ byte[] input_buffer = new byte[BUF_SIZE]-->Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)[ FD ]
Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)-->Line_20 $$ destination.write(input_buffer, 0, len)[ CD ]
Line_19 $$ BufferedOutputStream destination = new BufferedOutputStream(out, BUF_SIZE)-->Line_20 $$ destination.write(input_buffer, 0, len)[ FD ]
Line_11 $$ byte[] input_buffer = new byte[BUF_SIZE]-->Line_20 $$ destination.write(input_buffer, 0, len)[ FD ]
Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)-->Line_20 $$ destination.write(input_buffer, 0, len)[ FD ]
Line_12 $$ int len = 0-->Line_20 $$ destination.write(input_buffer, 0, len)[ FD ]
Line_19 $$ BufferedOutputStream destination = new BufferedOutputStream(out, BUF_SIZE)-->Line_21 $$ destination.flush()[ FD ]
Line_18 $$ FileOutputStream out = new FileOutputStream(output_file)-->Line_22 $$ out.close()[ FD ]
Line_3 $$ ZipInputStream zip_in_stream-->Line_28 $$ zip_in_stream.close()[ FD ]
Line_7 $$ zip_in_stream = new ZipInputStream(source)-->Line_28 $$ zip_in_stream.close()[ FD ]
Line_2 $$ public static int unzipFile(File file_input, File dir_output) -->Line_31 $$ return STATUS_OK[ CD ]
Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()-->Line_16 $$ if (zip_entry == null)[ FD ]
Line_15 $$ ZipEntry zip_entry = zip_in_stream.getNextEntry()-->Line_17 $$ File output_file = new File(dir_output, zip_entry.getName())[ FD ]
Line_19 $$ BufferedOutputStream destination = new BufferedOutputStream(out, BUF_SIZE)-->Line_21 $$ destination.flush()[ FD ]
Line_18 $$ FileOutputStream out = new FileOutputStream(output_file)-->Line_22 $$ out.close()[ FD ]
Line_20 $$ while ((len = zip_in_stream.read(input_buffer, 0, BUF_SIZE)) != -1) destination.write(input_buffer, 0, len)-->Line_20 $$ destination.write(input_buffer, 0, len)[ FD ]
