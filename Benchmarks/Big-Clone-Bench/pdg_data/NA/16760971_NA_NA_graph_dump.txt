Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String generateHash(String key) [ CD ]
Line_2 $$ public static String generateHash(String key) -->Line_3 $$ key += "use_your_key_here"[ CD ]
Line_2 $$ public static String generateHash(String key) -->Line_3 $$ key += "use_your_key_here"[ FD ]
Line_3 $$ key += "use_your_key_here"-->Line_3 $$ key += "use_your_key_here"[ FD ]
Line_2 $$ public static String generateHash(String key) -->Line_4 $$ MessageDigest md[ CD ]
Line_4 $$ MessageDigest md-->Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")[ FD ]
Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")-->Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")[ FD ]
Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")-->Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")[ CD ]
Line_4 $$ MessageDigest md-->Line_7 $$ md.reset()[ FD ]
Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")-->Line_7 $$ md.reset()[ FD ]
Line_4 $$ MessageDigest md-->Line_8 $$ md.update(key.getBytes())[ FD ]
Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")-->Line_8 $$ md.update(key.getBytes())[ FD ]
Line_2 $$ public static String generateHash(String key) -->Line_8 $$ md.update(key.getBytes())[ FD ]
Line_3 $$ key += "use_your_key_here"-->Line_8 $$ md.update(key.getBytes())[ FD ]
Line_9 $$ byte[] bytes = md.digest()-->Line_9 $$ byte[] bytes = md.digest()[ CD ]
Line_4 $$ MessageDigest md-->Line_9 $$ byte[] bytes = md.digest()[ FD ]
Line_6 $$ md = java.security.MessageDigest.getInstance("MD5")-->Line_9 $$ byte[] bytes = md.digest()[ FD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_11 $$ for (int l = 0; l < bytes.length; l++) [ CD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_11 $$ for (int l = 0; l < bytes.length; l++) [ CD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_11 $$ for (int l = 0; l < bytes.length; l++) [ FD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_12 $$ String hx = Integer.toHexString(0xFF & bytes[l])[ CD ]
Line_12 $$ String hx = Integer.toHexString(0xFF & bytes[l])-->Line_12 $$ String hx = Integer.toHexString(0xFF & bytes[l])[ CD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_13 $$ if (hx.length() == 1)[ CD ]
Line_12 $$ String hx = Integer.toHexString(0xFF & bytes[l])-->Line_13 $$ if (hx.length() == 1)[ FD ]
Line_13 $$ if (hx.length() == 1)-->Line_13 $$ buff.append("0")[ CD ]
Line_10 $$ StringBuffer buff = new StringBuffer()-->Line_13 $$ buff.append("0")[ FD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_14 $$ buff.append(hx)[ CD ]
Line_10 $$ StringBuffer buff = new StringBuffer()-->Line_14 $$ buff.append(hx)[ FD ]
Line_12 $$ String hx = Integer.toHexString(0xFF & bytes[l])-->Line_14 $$ buff.append(hx)[ FD ]
Line_16 $$ return buff.toString().trim()-->Line_16 $$ return buff.toString().trim()[ CD ]
Line_10 $$ StringBuffer buff = new StringBuffer()-->Line_16 $$ return buff.toString().trim()[ FD ]
Line_2 $$ public static String generateHash(String key) -->Line_20 $$ return null[ CD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_11 $$ for (int l = 0; l < bytes.length; l++) [ FD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_11 $$ for (int l = 0; l < bytes.length; l++) [ FD ]
Line_11 $$ for (int l = 0; l < bytes.length; l++) -->Line_11 $$ for (int l = 0; l < bytes.length; l++) [ FD ]
Line_12 $$ String hx = Integer.toHexString(0xFF & bytes[l])-->Line_13 $$ if (hx.length() == 1)[ FD ]
Line_12 $$ String hx = Integer.toHexString(0xFF & bytes[l])-->Line_14 $$ buff.append(hx)[ FD ]
