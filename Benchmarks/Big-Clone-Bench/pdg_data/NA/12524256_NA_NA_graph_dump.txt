Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void actionPerformed(ActionEvent e) [ CD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_3 $$ final File inputFile = KeyboardHero.midiFile()[ CD ]
Line_3 $$ final File inputFile = KeyboardHero.midiFile()-->Line_3 $$ final File inputFile = KeyboardHero.midiFile()[ CD ]
Line_3 $$ final File inputFile = KeyboardHero.midiFile()-->Line_5 $$ if (inputFile == null)[ FD ]
Line_5 $$ if (inputFile == null)-->Line_5 $$ return[ CD ]
Line_6 $$ final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR))-->Line_7 $$ if (dir.exists()) [ FD ]
Line_7 $$ if (dir.exists()) -->Line_7 $$ if (dir.exists()) [ CD ]
Line_6 $$ final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR))-->Line_7 $$ if (dir.exists()) [ FD ]
Line_7 $$ if (dir.exists()) -->Line_8 $$ if (!dir.isDirectory()) [ CD ]
Line_8 $$ if (!dir.isDirectory()) -->Line_8 $$ if (!dir.isDirectory()) [ CD ]
Line_8 $$ if (!dir.isDirectory()) -->Line_8 $$ if (!dir.isDirectory()) [ CD ]
Line_6 $$ final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR))-->Line_8 $$ if (!dir.isDirectory()) [ FD ]
Line_8 $$ if (!dir.isDirectory()) -->Line_9 $$ Util.error(Util.getMsg("Err_MidiFilesDirNotDirectory"), dir.getParent())[ CD ]
Line_6 $$ final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR))-->Line_9 $$ Util.error(Util.getMsg("Err_MidiFilesDirNotDirectory"), dir.getParent())[ FD ]
Line_8 $$ if (!dir.isDirectory()) -->Line_10 $$ return[ CD ]
Line_7 $$ if (dir.exists()) -->Line_12 $$ if (!dir.mkdirs()) [ CD ]
Line_12 $$ if (!dir.mkdirs()) -->Line_12 $$ if (!dir.mkdirs()) [ CD ]
Line_12 $$ if (!dir.mkdirs()) -->Line_12 $$ if (!dir.mkdirs()) [ CD ]
Line_6 $$ final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR))-->Line_12 $$ if (!dir.mkdirs()) [ FD ]
Line_12 $$ if (!dir.mkdirs()) -->Line_13 $$ Util.error(Util.getMsg("Err_CouldntMkDir"), dir.getParent())[ CD ]
Line_6 $$ final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR))-->Line_13 $$ Util.error(Util.getMsg("Err_CouldntMkDir"), dir.getParent())[ FD ]
Line_12 $$ if (!dir.mkdirs()) -->Line_14 $$ return[ CD ]
Line_6 $$ final File dir = (new File(Util.DATA_FOLDER + MidiSong.MIDI_FILES_DIR))-->Line_16 $$ File outputFile = new File(dir.getPath() + File.separator + inputFile.getName())[ FD ]
Line_3 $$ final File inputFile = KeyboardHero.midiFile()-->Line_16 $$ File outputFile = new File(dir.getPath() + File.separator + inputFile.getName())[ FD ]
Line_17 $$ if (!outputFile.exists() || KeyboardHero.confirm("Que_FileExistsOverwrite")) -->Line_17 $$ if (!outputFile.exists() || KeyboardHero.confirm("Que_FileExistsOverwrite")) [ CD ]
Line_16 $$ File outputFile = new File(dir.getPath() + File.separator + inputFile.getName())-->Line_17 $$ if (!outputFile.exists() || KeyboardHero.confirm("Que_FileExistsOverwrite")) [ FD ]
Line_17 $$ if (!outputFile.exists() || KeyboardHero.confirm("Que_FileExistsOverwrite")) -->Line_18 $$ final FileChannel inChannel = new FileInputStream(inputFile).getChannel()[ CD ]
Line_18 $$ final FileChannel inChannel = new FileInputStream(inputFile).getChannel()-->Line_18 $$ final FileChannel inChannel = new FileInputStream(inputFile).getChannel()[ CD ]
Line_17 $$ if (!outputFile.exists() || KeyboardHero.confirm("Que_FileExistsOverwrite")) -->Line_19 $$ inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel())[ CD ]
Line_18 $$ final FileChannel inChannel = new FileInputStream(inputFile).getChannel()-->Line_19 $$ inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel())[ FD ]
Line_18 $$ final FileChannel inChannel = new FileInputStream(inputFile).getChannel()-->Line_19 $$ inChannel.transferTo(0, inChannel.size(), new FileOutputStream(outputFile).getChannel())[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent e) -->Line_24 $$ SongSelector.refresh()[ CD ]
