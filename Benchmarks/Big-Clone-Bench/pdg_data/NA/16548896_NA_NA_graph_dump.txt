Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String generateHash(String key, String data) throws ChiropteraException [ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance(Constants.Connection.Auth.MD5)-->Line_4 $$ MessageDigest md = MessageDigest.getInstance(Constants.Connection.Auth.MD5)[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance(Constants.Connection.Auth.MD5)-->Line_5 $$ md.update(key.getBytes())[ FD ]
Line_2 $$ private String generateHash(String key, String data) throws ChiropteraException -->Line_5 $$ md.update(key.getBytes())[ FD ]
Line_6 $$ byte[] raw = md.digest()-->Line_6 $$ byte[] raw = md.digest()[ CD ]
Line_4 $$ MessageDigest md = MessageDigest.getInstance(Constants.Connection.Auth.MD5)-->Line_6 $$ byte[] raw = md.digest()[ FD ]
Line_7 $$ String s = toHexString(raw)-->Line_7 $$ String s = toHexString(raw)[ CD ]
Line_6 $$ byte[] raw = md.digest()-->Line_7 $$ String s = toHexString(raw)[ FD ]
Line_7 $$ String s = toHexString(raw)-->Line_8 $$ SecretKey skey = new SecretKeySpec(s.getBytes(), Constants.Connection.Auth.HMACMD5)[ FD ]
Line_9 $$ Mac mac = Mac.getInstance(skey.getAlgorithm())-->Line_9 $$ Mac mac = Mac.getInstance(skey.getAlgorithm())[ CD ]
Line_8 $$ SecretKey skey = new SecretKeySpec(s.getBytes(), Constants.Connection.Auth.HMACMD5)-->Line_9 $$ Mac mac = Mac.getInstance(skey.getAlgorithm())[ FD ]
Line_9 $$ Mac mac = Mac.getInstance(skey.getAlgorithm())-->Line_10 $$ mac.init(skey)[ FD ]
Line_8 $$ SecretKey skey = new SecretKeySpec(s.getBytes(), Constants.Connection.Auth.HMACMD5)-->Line_10 $$ mac.init(skey)[ FD ]
Line_11 $$ byte digest[] = mac.doFinal(data.getBytes())-->Line_11 $$ byte digest[] = mac.doFinal(data.getBytes())[ CD ]
Line_9 $$ Mac mac = Mac.getInstance(skey.getAlgorithm())-->Line_11 $$ byte digest[] = mac.doFinal(data.getBytes())[ FD ]
Line_2 $$ private String generateHash(String key, String data) throws ChiropteraException -->Line_11 $$ byte digest[] = mac.doFinal(data.getBytes())[ FD ]
Line_12 $$ String digestB64 = BaculaBase64.binToBase64(digest)-->Line_12 $$ String digestB64 = BaculaBase64.binToBase64(digest)[ CD ]
Line_13 $$ return digestB64.substring(0, digestB64.length())-->Line_13 $$ return digestB64.substring(0, digestB64.length())[ CD ]
Line_12 $$ String digestB64 = BaculaBase64.binToBase64(digest)-->Line_13 $$ return digestB64.substring(0, digestB64.length())[ FD ]
Line_12 $$ String digestB64 = BaculaBase64.binToBase64(digest)-->Line_13 $$ return digestB64.substring(0, digestB64.length())[ FD ]
