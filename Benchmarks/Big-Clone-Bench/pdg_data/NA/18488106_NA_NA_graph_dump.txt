Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException [ CD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_3 $$ InputSource source = new InputSource(inputUrl.openStream())[ CD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_3 $$ InputSource source = new InputSource(inputUrl.openStream())[ FD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_4 $$ Document logDoc = DomUtil.getNewDom()[ CD ]
Line_4 $$ Document logDoc = DomUtil.getNewDom()-->Line_4 $$ Document logDoc = DomUtil.getNewDom()[ CD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_5 $$ XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs)[ CD ]
Line_5 $$ XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs)-->Line_5 $$ XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs)[ CD ]
Line_4 $$ Document logDoc = DomUtil.getNewDom()-->Line_5 $$ XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs)[ FD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_5 $$ XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs)[ FD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_6 $$ reader.parse(source)[ CD ]
Line_5 $$ XMLReader reader = SaxUtil.getXMLFormatLoggingXMLReader(log, logDoc, true, catalogs)-->Line_6 $$ reader.parse(source)[ FD ]
Line_3 $$ InputSource source = new InputSource(inputUrl.openStream())-->Line_6 $$ reader.parse(source)[ FD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_7 $$ InputStream logStream = DomUtil.serializeToInputStream(logDoc, "utf-8")[ CD ]
Line_7 $$ InputStream logStream = DomUtil.serializeToInputStream(logDoc, "utf-8")-->Line_7 $$ InputStream logStream = DomUtil.serializeToInputStream(logDoc, "utf-8")[ CD ]
Line_4 $$ Document logDoc = DomUtil.getNewDom()-->Line_7 $$ InputStream logStream = DomUtil.serializeToInputStream(logDoc, "utf-8")[ FD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_8 $$ System.out.println("Creating message file \"" + messageFile.getAbsolutePath() + "\"...")[ CD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_8 $$ System.out.println("Creating message file \"" + messageFile.getAbsolutePath() + "\"...")[ FD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_9 $$ OutputStream fos = new FileOutputStream(messageFile)[ CD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_10 $$ IOUtils.copy(logStream, fos)[ CD ]
Line_7 $$ InputStream logStream = DomUtil.serializeToInputStream(logDoc, "utf-8")-->Line_10 $$ IOUtils.copy(logStream, fos)[ FD ]
Line_9 $$ OutputStream fos = new FileOutputStream(messageFile)-->Line_10 $$ IOUtils.copy(logStream, fos)[ FD ]
Line_2 $$ public static Document validateXml(File messageFile, URL inputUrl, String[] catalogs) throws IOException, ParserConfigurationException, Exception, SAXException, FileNotFoundException -->Line_11 $$ return logDoc[ CD ]
