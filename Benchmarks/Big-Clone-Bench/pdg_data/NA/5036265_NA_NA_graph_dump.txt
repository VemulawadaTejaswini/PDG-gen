Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void save() throws IOException [ CD ]
Line_2 $$ public void save() throws IOException -->Line_3 $$ CodeTimer saveTimer[ CD ]
Line_2 $$ public void save() throws IOException -->Line_4 $$ if (!dirty) [ CD ]
Line_4 $$ if (!dirty) -->Line_5 $$ return[ CD ]
Line_2 $$ public void save() throws IOException -->Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")[ CD ]
Line_3 $$ CodeTimer saveTimer-->Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")[ FD ]
Line_2 $$ public void save() throws IOException -->Line_8 $$ saveTimer.setEnabled(log.isDebugEnabled())[ CD ]
Line_3 $$ CodeTimer saveTimer-->Line_8 $$ saveTimer.setEnabled(log.isDebugEnabled())[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_8 $$ saveTimer.setEnabled(log.isDebugEnabled())[ FD ]
Line_2 $$ public void save() throws IOException -->Line_9 $$ File newFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".pak")[ CD ]
Line_2 $$ public void save() throws IOException -->Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))[ CD ]
Line_2 $$ public void save() throws IOException -->Line_11 $$ zout.setLevel(1)[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_11 $$ zout.setLevel(1)[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_13 $$ saveTimer.start("contentFile")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_13 $$ saveTimer.start("contentFile")[ FD ]
Line_14 $$ if (hasFile(CONTENT_FILE)) -->Line_14 $$ if (hasFile(CONTENT_FILE)) [ CD ]
Line_14 $$ if (hasFile(CONTENT_FILE)) -->Line_15 $$ zout.putNextEntry(new ZipEntry(CONTENT_FILE))[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_15 $$ zout.putNextEntry(new ZipEntry(CONTENT_FILE))[ FD ]
Line_14 $$ if (hasFile(CONTENT_FILE)) -->Line_16 $$ InputStream is = getFileAsInputStream(CONTENT_FILE)[ CD ]
Line_16 $$ InputStream is = getFileAsInputStream(CONTENT_FILE)-->Line_16 $$ InputStream is = getFileAsInputStream(CONTENT_FILE)[ CD ]
Line_14 $$ if (hasFile(CONTENT_FILE)) -->Line_17 $$ IOUtils.copy(is, zout)[ CD ]
Line_16 $$ InputStream is = getFileAsInputStream(CONTENT_FILE)-->Line_17 $$ IOUtils.copy(is, zout)[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_17 $$ IOUtils.copy(is, zout)[ FD ]
Line_14 $$ if (hasFile(CONTENT_FILE)) -->Line_18 $$ zout.closeEntry()[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_18 $$ zout.closeEntry()[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_20 $$ saveTimer.stop("contentFile")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_20 $$ saveTimer.stop("contentFile")[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_21 $$ saveTimer.start("propertyFile")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_21 $$ saveTimer.start("propertyFile")[ FD ]
Line_22 $$ if (getPropertyMap().isEmpty()) -->Line_22 $$ if (getPropertyMap().isEmpty()) [ CD ]
Line_22 $$ if (getPropertyMap().isEmpty()) -->Line_23 $$ removeFile(PROPERTY_FILE)[ CD ]
Line_22 $$ if (getPropertyMap().isEmpty()) -->Line_25 $$ zout.putNextEntry(new ZipEntry(PROPERTY_FILE))[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_25 $$ zout.putNextEntry(new ZipEntry(PROPERTY_FILE))[ FD ]
Line_22 $$ if (getPropertyMap().isEmpty()) -->Line_26 $$ xstream.toXML(getPropertyMap(), zout)[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_26 $$ xstream.toXML(getPropertyMap(), zout)[ FD ]
Line_22 $$ if (getPropertyMap().isEmpty()) -->Line_27 $$ zout.closeEntry()[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_27 $$ zout.closeEntry()[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_29 $$ saveTimer.stop("propertyFile")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_29 $$ saveTimer.stop("propertyFile")[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_30 $$ saveTimer.start("addFiles")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_30 $$ saveTimer.start("addFiles")[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_33 $$ zout.putNextEntry(new ZipEntry(path))[ FD ]
Line_32 $$ for (String path : addedFileSet) -->Line_34 $$ InputStream is = getFileAsInputStream(path)[ FD ]
Line_16 $$ InputStream is = getFileAsInputStream(CONTENT_FILE)-->Line_35 $$ IOUtils.copy(is, zout)[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_35 $$ IOUtils.copy(is, zout)[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_36 $$ zout.closeEntry()[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_38 $$ saveTimer.stop("addFiles")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_38 $$ saveTimer.stop("addFiles")[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_39 $$ saveTimer.start("copyFiles")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_39 $$ saveTimer.start("copyFiles")[ FD ]
Line_40 $$ if (file.exists()) -->Line_40 $$ if (file.exists()) [ CD ]
Line_40 $$ if (file.exists()) -->Line_41 $$ Enumeration<? extends ZipEntry> entries = zFile.entries()[ CD ]
Line_41 $$ Enumeration<? extends ZipEntry> entries = zFile.entries()-->Line_41 $$ Enumeration<? extends ZipEntry> entries = zFile.entries()[ CD ]
Line_40 $$ if (file.exists()) -->Line_42 $$ while (entries.hasMoreElements()) [ CD ]
Line_40 $$ if (file.exists()) -->Line_40 $$ if (file.exists()) [ CD ]
Line_42 $$ while (entries.hasMoreElements()) -->Line_42 $$ while (entries.hasMoreElements()) [ CD ]
Line_41 $$ Enumeration<? extends ZipEntry> entries = zFile.entries()-->Line_42 $$ while (entries.hasMoreElements()) [ FD ]
Line_42 $$ while (entries.hasMoreElements()) -->Line_43 $$ ZipEntry entry = entries.nextElement()[ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_43 $$ ZipEntry entry = entries.nextElement()[ CD ]
Line_41 $$ Enumeration<? extends ZipEntry> entries = zFile.entries()-->Line_43 $$ ZipEntry entry = entries.nextElement()[ FD ]
Line_42 $$ while (entries.hasMoreElements()) -->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ CD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_45 $$ zout.putNextEntry(entry)[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_45 $$ zout.putNextEntry(entry)[ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_45 $$ zout.putNextEntry(entry)[ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_46 $$ InputStream is = getFileAsInputStream(entry.getName())[ CD ]
Line_46 $$ InputStream is = getFileAsInputStream(entry.getName())-->Line_46 $$ InputStream is = getFileAsInputStream(entry.getName())[ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_46 $$ InputStream is = getFileAsInputStream(entry.getName())[ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_47 $$ IOUtils.copy(is, zout)[ CD ]
Line_46 $$ InputStream is = getFileAsInputStream(entry.getName())-->Line_47 $$ IOUtils.copy(is, zout)[ FD ]
Line_16 $$ InputStream is = getFileAsInputStream(CONTENT_FILE)-->Line_47 $$ IOUtils.copy(is, zout)[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_47 $$ IOUtils.copy(is, zout)[ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_48 $$ zout.closeEntry()[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_48 $$ zout.closeEntry()[ FD ]
Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) -->Line_49 $$ if (entry.isDirectory()) [ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_49 $$ if (entry.isDirectory()) [ FD ]
Line_49 $$ if (entry.isDirectory()) -->Line_49 $$ if (entry.isDirectory()) [ CD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_49 $$ if (entry.isDirectory()) [ FD ]
Line_49 $$ if (entry.isDirectory()) -->Line_50 $$ zout.putNextEntry(entry)[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_50 $$ zout.putNextEntry(entry)[ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_50 $$ zout.putNextEntry(entry)[ FD ]
Line_49 $$ if (entry.isDirectory()) -->Line_51 $$ zout.closeEntry()[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_51 $$ zout.closeEntry()[ FD ]
Line_56 $$ if (zFile != null)-->Line_56 $$ zFile.close()[ CD ]
Line_3 $$ CodeTimer saveTimer-->Line_60 $$ saveTimer.stop("copyFiles")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_60 $$ saveTimer.stop("copyFiles")[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_61 $$ saveTimer.start("close")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_61 $$ saveTimer.start("close")[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_62 $$ zout.close()[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_63 $$ zout = null[ FD ]
Line_63 $$ zout = null-->Line_63 $$ zout = null[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_64 $$ saveTimer.stop("close")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_64 $$ saveTimer.stop("close")[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_65 $$ saveTimer.start("backup")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_65 $$ saveTimer.start("backup")[ FD ]
Line_67 $$ if (file.exists()) -->Line_67 $$ if (file.exists()) [ CD ]
Line_67 $$ if (file.exists()) -->Line_68 $$ backupFile.delete()[ CD ]
Line_66 $$ File backupFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".mv")-->Line_68 $$ backupFile.delete()[ FD ]
Line_67 $$ if (file.exists()) -->Line_69 $$ if (!file.renameTo(backupFile)) [ CD ]
Line_69 $$ if (!file.renameTo(backupFile)) -->Line_69 $$ if (!file.renameTo(backupFile)) [ CD ]
Line_69 $$ if (!file.renameTo(backupFile)) -->Line_69 $$ if (!file.renameTo(backupFile)) [ CD ]
Line_66 $$ File backupFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".mv")-->Line_69 $$ if (!file.renameTo(backupFile)) [ FD ]
Line_69 $$ if (!file.renameTo(backupFile)) -->Line_70 $$ FileUtil.copyFile(file, backupFile)[ CD ]
Line_66 $$ File backupFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".mv")-->Line_70 $$ FileUtil.copyFile(file, backupFile)[ FD ]
Line_69 $$ if (!file.renameTo(backupFile)) -->Line_71 $$ file.delete()[ CD ]
Line_3 $$ CodeTimer saveTimer-->Line_74 $$ saveTimer.stop("backup")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_74 $$ saveTimer.stop("backup")[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_75 $$ saveTimer.start("finalize")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_75 $$ saveTimer.start("finalize")[ FD ]
Line_76 $$ if (!newFile.renameTo(file))-->Line_76 $$ if (!newFile.renameTo(file))[ CD ]
Line_76 $$ if (!newFile.renameTo(file))-->Line_76 $$ if (!newFile.renameTo(file))[ CD ]
Line_9 $$ File newFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".pak")-->Line_76 $$ if (!newFile.renameTo(file))[ FD ]
Line_76 $$ if (!newFile.renameTo(file))-->Line_76 $$ FileUtil.copyFile(newFile, file)[ CD ]
Line_9 $$ File newFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".pak")-->Line_76 $$ FileUtil.copyFile(newFile, file)[ FD ]
Line_66 $$ File backupFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".mv")-->Line_77 $$ if (backupFile.exists())[ FD ]
Line_77 $$ if (backupFile.exists())-->Line_77 $$ if (backupFile.exists())[ CD ]
Line_66 $$ File backupFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".mv")-->Line_77 $$ if (backupFile.exists())[ FD ]
Line_77 $$ if (backupFile.exists())-->Line_77 $$ backupFile.delete()[ CD ]
Line_66 $$ File backupFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".mv")-->Line_77 $$ backupFile.delete()[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_78 $$ saveTimer.stop("finalize")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_78 $$ saveTimer.stop("finalize")[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_81 $$ saveTimer.start("cleanup")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_81 $$ saveTimer.start("cleanup")[ FD ]
Line_83 $$ if (zFile != null)-->Line_83 $$ zFile.close()[ CD ]
Line_9 $$ File newFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".pak")-->Line_86 $$ if (newFile.exists())[ FD ]
Line_86 $$ if (newFile.exists())-->Line_86 $$ if (newFile.exists())[ CD ]
Line_9 $$ File newFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".pak")-->Line_86 $$ if (newFile.exists())[ FD ]
Line_86 $$ if (newFile.exists())-->Line_86 $$ newFile.delete()[ CD ]
Line_9 $$ File newFile = new File(tmpDir.getAbsolutePath() + "/" + new GUID() + ".pak")-->Line_86 $$ newFile.delete()[ FD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_88 $$ if (zout != null)[ FD ]
Line_63 $$ zout = null-->Line_88 $$ if (zout != null)[ FD ]
Line_88 $$ if (zout != null)-->Line_88 $$ zout.close()[ CD ]
Line_10 $$ ZipOutputStream zout = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(newFile)))-->Line_88 $$ zout.close()[ FD ]
Line_63 $$ zout = null-->Line_88 $$ zout.close()[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_91 $$ saveTimer.stop("cleanup")[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_91 $$ saveTimer.stop("cleanup")[ FD ]
Line_92 $$ if (log.isDebugEnabled())-->Line_92 $$ if (log.isDebugEnabled())[ CD ]
Line_92 $$ if (log.isDebugEnabled())-->Line_92 $$ log.debug(saveTimer)[ CD ]
Line_3 $$ CodeTimer saveTimer-->Line_92 $$ log.debug(saveTimer)[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_92 $$ log.debug(saveTimer)[ FD ]
Line_3 $$ CodeTimer saveTimer-->Line_93 $$ saveTimer = null[ FD ]
Line_7 $$ saveTimer = new CodeTimer("PackedFile.save")-->Line_93 $$ saveTimer = null[ FD ]
Line_93 $$ saveTimer = null-->Line_93 $$ saveTimer = null[ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_44 $$ if (!entry.isDirectory() && !addedFileSet.contains(entry.getName()) && !removedFileSet.contains(entry.getName()) && !CONTENT_FILE.equals(entry.getName()) && !PROPERTY_FILE.equals(entry.getName())) [ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_45 $$ zout.putNextEntry(entry)[ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_46 $$ InputStream is = getFileAsInputStream(entry.getName())[ FD ]
Line_46 $$ InputStream is = getFileAsInputStream(entry.getName())-->Line_47 $$ IOUtils.copy(is, zout)[ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_49 $$ if (entry.isDirectory()) [ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_49 $$ if (entry.isDirectory()) [ FD ]
Line_43 $$ ZipEntry entry = entries.nextElement()-->Line_50 $$ zout.putNextEntry(entry)[ FD ]
