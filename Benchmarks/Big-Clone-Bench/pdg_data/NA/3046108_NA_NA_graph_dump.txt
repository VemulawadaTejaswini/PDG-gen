Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception [ CD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()[ CD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_4 $$ qparams.add(new BasicNameValuePair("method", "gg.photos.getInfo"))[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_4 $$ qparams.add(new BasicNameValuePair("method", "gg.photos.getInfo"))[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_5 $$ qparams.add(new BasicNameValuePair("key", this.key))[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_5 $$ qparams.add(new BasicNameValuePair("key", this.key))[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_6 $$ qparams.add(new BasicNameValuePair("photo_id", photoId))[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_6 $$ qparams.add(new BasicNameValuePair("photo_id", photoId))[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_7 $$ if (null != language) [ CD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_7 $$ if (null != language) [ FD ]
Line_7 $$ if (null != language) -->Line_8 $$ qparams.add(new BasicNameValuePair("language", language))[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_8 $$ qparams.add(new BasicNameValuePair("language", language))[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_10 $$ String url = REST_URL + "?" + URLEncodedUtils.format(qparams, "UTF-8")[ CD ]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>()-->Line_10 $$ String url = REST_URL + "?" + URLEncodedUtils.format(qparams, "UTF-8")[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_11 $$ URI uri = new URI(url)[ CD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_12 $$ HttpGet httpget = new HttpGet(uri)[ CD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_13 $$ HttpResponse response = httpClient.execute(httpget)[ CD ]
Line_13 $$ HttpResponse response = httpClient.execute(httpget)-->Line_13 $$ HttpResponse response = httpClient.execute(httpget)[ CD ]
Line_12 $$ HttpGet httpget = new HttpGet(uri)-->Line_13 $$ HttpResponse response = httpClient.execute(httpget)[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_14 $$ int status = response.getStatusLine().getStatusCode()[ CD ]
Line_14 $$ int status = response.getStatusLine().getStatusCode()-->Line_14 $$ int status = response.getStatusLine().getStatusCode()[ CD ]
Line_13 $$ HttpResponse response = httpClient.execute(httpget)-->Line_14 $$ int status = response.getStatusLine().getStatusCode()[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_15 $$ errorCheck(response, status)[ CD ]
Line_13 $$ HttpResponse response = httpClient.execute(httpget)-->Line_15 $$ errorCheck(response, status)[ FD ]
Line_14 $$ int status = response.getStatusLine().getStatusCode()-->Line_15 $$ errorCheck(response, status)[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_16 $$ InputStream content = response.getEntity().getContent()[ CD ]
Line_16 $$ InputStream content = response.getEntity().getContent()-->Line_16 $$ InputStream content = response.getEntity().getContent()[ CD ]
Line_13 $$ HttpResponse response = httpClient.execute(httpget)-->Line_16 $$ InputStream content = response.getEntity().getContent()[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_17 $$ GGPhotoInfo photo = JAXB.unmarshal(content, GGPhotoInfo.class)[ CD ]
Line_17 $$ GGPhotoInfo photo = JAXB.unmarshal(content, GGPhotoInfo.class)-->Line_17 $$ GGPhotoInfo photo = JAXB.unmarshal(content, GGPhotoInfo.class)[ CD ]
Line_16 $$ InputStream content = response.getEntity().getContent()-->Line_17 $$ GGPhotoInfo photo = JAXB.unmarshal(content, GGPhotoInfo.class)[ FD ]
Line_2 $$ public GGPhotoInfo getPhotoInfo(String photoId, String language) throws IllegalStateException, GGException, Exception -->Line_18 $$ return photo[ CD ]
