Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private String fetchHtml(URL url) throws IOException [ CD ]
Line_2 $$ private String fetchHtml(URL url) throws IOException -->Line_3 $$ URLConnection connection[ CD ]
Line_2 $$ private String fetchHtml(URL url) throws IOException -->Line_4 $$ if (StringUtils.isNotBlank(proxyHost) && proxyPort != null) [ CD ]
Line_4 $$ if (StringUtils.isNotBlank(proxyHost) && proxyPort != null) -->Line_5 $$ Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyHost, proxyPort))[ CD ]
Line_4 $$ if (StringUtils.isNotBlank(proxyHost) && proxyPort != null) -->Line_6 $$ connection = url.openConnection(proxy)[ CD ]
Line_3 $$ URLConnection connection-->Line_6 $$ connection = url.openConnection(proxy)[ FD ]
Line_6 $$ connection = url.openConnection(proxy)-->Line_6 $$ connection = url.openConnection(proxy)[ FD ]
Line_6 $$ connection = url.openConnection(proxy)-->Line_6 $$ connection = url.openConnection(proxy)[ CD ]
Line_2 $$ private String fetchHtml(URL url) throws IOException -->Line_6 $$ connection = url.openConnection(proxy)[ FD ]
Line_5 $$ Proxy proxy = new Proxy(Proxy.Type.HTTP, InetSocketAddress.createUnresolved(proxyHost, proxyPort))-->Line_6 $$ connection = url.openConnection(proxy)[ FD ]
Line_4 $$ if (StringUtils.isNotBlank(proxyHost) && proxyPort != null) -->Line_8 $$ connection = url.openConnection()[ CD ]
Line_3 $$ URLConnection connection-->Line_8 $$ connection = url.openConnection()[ FD ]
Line_6 $$ connection = url.openConnection(proxy)-->Line_8 $$ connection = url.openConnection()[ FD ]
Line_8 $$ connection = url.openConnection()-->Line_8 $$ connection = url.openConnection()[ FD ]
Line_8 $$ connection = url.openConnection()-->Line_8 $$ connection = url.openConnection()[ CD ]
Line_2 $$ private String fetchHtml(URL url) throws IOException -->Line_8 $$ connection = url.openConnection()[ FD ]
Line_2 $$ private String fetchHtml(URL url) throws IOException -->Line_10 $$ Object content = connection.getContent()[ CD ]
Line_10 $$ Object content = connection.getContent()-->Line_10 $$ Object content = connection.getContent()[ CD ]
Line_3 $$ URLConnection connection-->Line_10 $$ Object content = connection.getContent()[ FD ]
Line_6 $$ connection = url.openConnection(proxy)-->Line_10 $$ Object content = connection.getContent()[ FD ]
Line_8 $$ connection = url.openConnection()-->Line_10 $$ Object content = connection.getContent()[ FD ]
Line_2 $$ private String fetchHtml(URL url) throws IOException -->Line_11 $$ if (content instanceof InputStream) [ CD ]
Line_10 $$ Object content = connection.getContent()-->Line_11 $$ if (content instanceof InputStream) [ FD ]
Line_11 $$ if (content instanceof InputStream) -->Line_12 $$ return IOUtils.toString(InputStream.class.cast(content))[ CD ]
Line_12 $$ return IOUtils.toString(InputStream.class.cast(content))-->Line_12 $$ return IOUtils.toString(InputStream.class.cast(content))[ CD ]
Line_10 $$ Object content = connection.getContent()-->Line_12 $$ return IOUtils.toString(InputStream.class.cast(content))[ FD ]
Line_11 $$ if (content instanceof InputStream) -->Line_14 $$ String msg = "Bad content type! " + content.getClass()[ CD ]
Line_10 $$ Object content = connection.getContent()-->Line_14 $$ String msg = "Bad content type! " + content.getClass()[ FD ]
Line_11 $$ if (content instanceof InputStream) -->Line_15 $$ log.error(msg)[ CD ]
Line_14 $$ String msg = "Bad content type! " + content.getClass()-->Line_15 $$ log.error(msg)[ FD ]
