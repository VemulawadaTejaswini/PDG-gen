Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException [ CD ]
Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException -->Line_3 $$ File dest = new File(this.getRealFile(), name)[ CD ]
Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException -->Line_4 $$ LOGGER.debug("PUT?? - real file: " + this.getRealFile() + ",name: " + name)[ CD ]
Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException -->Line_5 $$ if (isOwner) [ CD ]
Line_5 $$ if (isOwner) -->Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) [ CD ]
Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) -->Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) [ CD ]
Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException -->Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) [ FD ]
Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) -->Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) [ CD ]
Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException -->Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) [ FD ]
Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) -->Line_7 $$ FileOutputStream out = null[ CD ]
Line_7 $$ FileOutputStream out = null-->Line_9 $$ out = new FileOutputStream(dest)[ FD ]
Line_9 $$ out = new FileOutputStream(dest)-->Line_9 $$ out = new FileOutputStream(dest)[ FD ]
Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException -->Line_10 $$ IOUtils.copy(in, out)[ FD ]
Line_7 $$ FileOutputStream out = null-->Line_10 $$ IOUtils.copy(in, out)[ FD ]
Line_9 $$ out = new FileOutputStream(dest)-->Line_10 $$ IOUtils.copy(in, out)[ FD ]
Line_7 $$ FileOutputStream out = null-->Line_12 $$ IOUtils.closeQuietly(out)[ FD ]
Line_9 $$ out = new FileOutputStream(dest)-->Line_12 $$ IOUtils.closeQuietly(out)[ FD ]
Line_6 $$ if (!".request".equals(name) && !".tokens".equals(name)) -->Line_15 $$ if (ServerConfiguration.isDynamicSEL()) [ CD ]
Line_15 $$ if (ServerConfiguration.isDynamicSEL()) -->Line_15 $$ if (ServerConfiguration.isDynamicSEL()) [ CD ]
Line_7 $$ FileOutputStream out = null-->Line_20 $$ out = new FileOutputStream(dest)[ FD ]
Line_9 $$ out = new FileOutputStream(dest)-->Line_20 $$ out = new FileOutputStream(dest)[ FD ]
Line_20 $$ out = new FileOutputStream(dest)-->Line_20 $$ out = new FileOutputStream(dest)[ FD ]
Line_2 $$ public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException -->Line_21 $$ IOUtils.copy(in, out)[ FD ]
Line_7 $$ FileOutputStream out = null-->Line_21 $$ IOUtils.copy(in, out)[ FD ]
Line_9 $$ out = new FileOutputStream(dest)-->Line_21 $$ IOUtils.copy(in, out)[ FD ]
Line_20 $$ out = new FileOutputStream(dest)-->Line_21 $$ IOUtils.copy(in, out)[ FD ]
Line_7 $$ FileOutputStream out = null-->Line_23 $$ IOUtils.closeQuietly(out)[ FD ]
Line_9 $$ out = new FileOutputStream(dest)-->Line_23 $$ IOUtils.closeQuietly(out)[ FD ]
Line_20 $$ out = new FileOutputStream(dest)-->Line_23 $$ IOUtils.closeQuietly(out)[ FD ]
Line_5 $$ if (isOwner) -->Line_26 $$ return factory.resolveFile(this.host, dest)[ CD ]
Line_26 $$ return factory.resolveFile(this.host, dest)-->Line_26 $$ return factory.resolveFile(this.host, dest)[ CD ]
Line_3 $$ File dest = new File(this.getRealFile(), name)-->Line_26 $$ return factory.resolveFile(this.host, dest)[ FD ]
Line_5 $$ if (isOwner) -->Line_28 $$ LOGGER.error("User isn't owner of this folder")[ CD ]
Line_5 $$ if (isOwner) -->Line_29 $$ return null[ CD ]
