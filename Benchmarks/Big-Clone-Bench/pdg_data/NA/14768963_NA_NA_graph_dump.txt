Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) [ CD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_3 $$ if (!urlpath.endsWith("/")) [ CD ]
Line_3 $$ if (!urlpath.endsWith("/")) -->Line_3 $$ if (!urlpath.endsWith("/")) [ CD ]
Line_3 $$ if (!urlpath.endsWith("/")) -->Line_3 $$ if (!urlpath.endsWith("/")) [ CD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_6 $$ if (!urlpath.startsWith("http://")) [ CD ]
Line_6 $$ if (!urlpath.startsWith("http://")) -->Line_6 $$ if (!urlpath.startsWith("http://")) [ CD ]
Line_6 $$ if (!urlpath.startsWith("http://")) -->Line_6 $$ if (!urlpath.startsWith("http://")) [ CD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_9 $$ String url = urlpath[ CD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_10 $$ if (fname.startsWith("dusty_")) [ CD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_10 $$ if (fname.startsWith("dusty_")) [ FD ]
Line_10 $$ if (fname.startsWith("dusty_")) -->Line_10 $$ if (fname.startsWith("dusty_")) [ CD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_10 $$ if (fname.startsWith("dusty_")) [ FD ]
Line_10 $$ if (fname.startsWith("dusty_")) -->Line_11 $$ url = url + "libraries/" + fname[ CD ]
Line_9 $$ String url = urlpath-->Line_11 $$ url = url + "libraries/" + fname[ FD ]
Line_11 $$ url = url + "libraries/" + fname-->Line_11 $$ url = url + "libraries/" + fname[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_11 $$ url = url + "libraries/" + fname[ FD ]
Line_10 $$ if (fname.startsWith("dusty_")) -->Line_13 $$ url = url + "users/" + fname[ CD ]
Line_9 $$ String url = urlpath-->Line_13 $$ url = url + "users/" + fname[ FD ]
Line_11 $$ url = url + "libraries/" + fname-->Line_13 $$ url = url + "users/" + fname[ FD ]
Line_13 $$ url = url + "users/" + fname-->Line_13 $$ url = url + "users/" + fname[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_13 $$ url = url + "users/" + fname[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_15 $$ StringBuffer src = new StringBuffer(2400)[ CD ]
Line_19 $$ while ((s = br.readLine()) != null) -->Line_19 $$ while ((s = br.readLine()) != null) [ FD ]
Line_17 $$ String s-->Line_19 $$ while ((s = br.readLine()) != null) [ FD ]
Line_19 $$ while ((s = br.readLine()) != null) -->Line_19 $$ while ((s = br.readLine()) != null) [ CD ]
Line_18 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new URL(url).openStream()))-->Line_19 $$ while ((s = br.readLine()) != null) [ FD ]
Line_19 $$ while ((s = br.readLine()) != null) -->Line_20 $$ src.append(s).append('\n')[ CD ]
Line_15 $$ StringBuffer src = new StringBuffer(2400)-->Line_20 $$ src.append(s).append('\n')[ FD ]
Line_19 $$ while ((s = br.readLine()) != null) -->Line_20 $$ src.append(s).append('\n')[ FD ]
Line_17 $$ String s-->Line_20 $$ src.append(s).append('\n')[ FD ]
Line_18 $$ BufferedReader br = new BufferedReader(new InputStreamReader(new URL(url).openStream()))-->Line_22 $$ br.close()[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_24 $$ OUT.println(new DSOut(DSOut.ERR_OUT, -1, "Dustyscript failed at reading the file'" + fname + "'\n\t...for 'use' statement"), vc, AT)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_24 $$ OUT.println(new DSOut(DSOut.ERR_OUT, -1, "Dustyscript failed at reading the file'" + fname + "'\n\t...for 'use' statement"), vc, AT)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_24 $$ OUT.println(new DSOut(DSOut.ERR_OUT, -1, "Dustyscript failed at reading the file'" + fname + "'\n\t...for 'use' statement"), vc, AT)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ CD ]
Line_15 $$ StringBuffer src = new StringBuffer(2400)-->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_27 $$ fork(src, vc, ac, ttc, OUT, IN, AT, state, arggies)[ FD ]
Line_2 $$ public static boolean exec_applet(String fname, VarContainer vc, ActionContainer ac, ThingTypeContainer ttc, Output OUT, InputStream IN, boolean AT, Statement state, String[] arggies) -->Line_28 $$ return true[ CD ]
Line_19 $$ while ((s = br.readLine()) != null) -->Line_20 $$ src.append(s).append('\n')[ FD ]
