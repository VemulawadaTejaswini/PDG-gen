Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public AssessmentItemType getAssessmentItemType(String filename) [ CD ]
Line_2 $$ public AssessmentItemType getAssessmentItemType(String filename) -->Line_3 $$ if (filename.contains(" ") && (System.getProperty("os.name").contains("Windows"))) [ CD ]
Line_2 $$ public AssessmentItemType getAssessmentItemType(String filename) -->Line_3 $$ if (filename.contains(" ") && (System.getProperty("os.name").contains("Windows"))) [ FD ]
Line_3 $$ if (filename.contains(" ") && (System.getProperty("os.name").contains("Windows"))) -->Line_4 $$ File source = new File(filename)[ CD ]
Line_3 $$ if (filename.contains(" ") && (System.getProperty("os.name").contains("Windows"))) -->Line_5 $$ String tempDir = System.getenv("TEMP")[ CD ]
Line_5 $$ String tempDir = System.getenv("TEMP")-->Line_5 $$ String tempDir = System.getenv("TEMP")[ CD ]
Line_3 $$ if (filename.contains(" ") && (System.getProperty("os.name").contains("Windows"))) -->Line_6 $$ File dest = new File(tempDir + "/temp.xml")[ CD ]
Line_3 $$ if (filename.contains(" ") && (System.getProperty("os.name").contains("Windows"))) -->Line_7 $$ MQMain.logger.info("Importing from " + dest.getAbsolutePath())[ CD ]
Line_6 $$ File dest = new File(tempDir + "/temp.xml")-->Line_7 $$ MQMain.logger.info("Importing from " + dest.getAbsolutePath())[ FD ]
Line_3 $$ if (filename.contains(" ") && (System.getProperty("os.name").contains("Windows"))) -->Line_8 $$ FileChannel in = null, out = null[ CD ]
Line_8 $$ FileChannel in = null, out = null-->Line_10 $$ in = new FileInputStream(source).getChannel()[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_10 $$ in = new FileInputStream(source).getChannel()[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_10 $$ in = new FileInputStream(source).getChannel()[ CD ]
Line_8 $$ FileChannel in = null, out = null-->Line_11 $$ out = new FileOutputStream(dest).getChannel()[ FD ]
Line_11 $$ out = new FileOutputStream(dest).getChannel()-->Line_11 $$ out = new FileOutputStream(dest).getChannel()[ FD ]
Line_11 $$ out = new FileOutputStream(dest).getChannel()-->Line_11 $$ out = new FileOutputStream(dest).getChannel()[ CD ]
Line_12 $$ long size = in.size()-->Line_12 $$ long size = in.size()[ CD ]
Line_8 $$ FileChannel in = null, out = null-->Line_12 $$ long size = in.size()[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_12 $$ long size = in.size()[ FD ]
Line_13 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_13 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ CD ]
Line_8 $$ FileChannel in = null, out = null-->Line_13 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_13 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_12 $$ long size = in.size()-->Line_13 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)[ FD ]
Line_8 $$ FileChannel in = null, out = null-->Line_14 $$ out.write(buf)[ FD ]
Line_11 $$ out = new FileOutputStream(dest).getChannel()-->Line_14 $$ out.write(buf)[ FD ]
Line_13 $$ MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size)-->Line_14 $$ out.write(buf)[ FD ]
Line_8 $$ FileChannel in = null, out = null-->Line_18 $$ if (in != null)[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_18 $$ if (in != null)[ FD ]
Line_8 $$ FileChannel in = null, out = null-->Line_19 $$ in.close()[ FD ]
Line_10 $$ in = new FileInputStream(source).getChannel()-->Line_19 $$ in.close()[ FD ]
Line_8 $$ FileChannel in = null, out = null-->Line_23 $$ if (out != null)[ FD ]
Line_11 $$ out = new FileOutputStream(dest).getChannel()-->Line_23 $$ if (out != null)[ FD ]
Line_8 $$ FileChannel in = null, out = null-->Line_24 $$ out.close()[ FD ]
Line_11 $$ out = new FileOutputStream(dest).getChannel()-->Line_24 $$ out.close()[ FD ]
Line_2 $$ public AssessmentItemType getAssessmentItemType(String filename) -->Line_28 $$ filename = tempDir + "/temp.xml"[ FD ]
Line_28 $$ filename = tempDir + "/temp.xml"-->Line_28 $$ filename = tempDir + "/temp.xml"[ FD ]
Line_5 $$ String tempDir = System.getenv("TEMP")-->Line_28 $$ filename = tempDir + "/temp.xml"[ FD ]
Line_2 $$ public AssessmentItemType getAssessmentItemType(String filename) -->Line_31 $$ AssessmentItemType assessmentItemType = null[ CD ]
Line_2 $$ public AssessmentItemType getAssessmentItemType(String filename) -->Line_32 $$ JAXBElement<?> jaxbe = null[ CD ]
Line_34 $$ XMLReader reader = XMLReaderFactory.createXMLReader()-->Line_34 $$ XMLReader reader = XMLReaderFactory.createXMLReader()[ CD ]
Line_39 $$ InputStreamReader isr = null-->Line_41 $$ isr = new InputStreamReader(fis, "UTF-8")[ FD ]
Line_41 $$ isr = new InputStreamReader(fis, "UTF-8")-->Line_41 $$ isr = new InputStreamReader(fis, "UTF-8")[ FD ]
Line_4 $$ File source = new File(filename)-->Line_45 $$ source = new SAXSource(convertfromv2p0tov2p1, is)[ FD ]
Line_45 $$ source = new SAXSource(convertfromv2p0tov2p1, is)-->Line_45 $$ source = new SAXSource(convertfromv2p0tov2p1, is)[ FD ]
Line_32 $$ JAXBElement<?> jaxbe = null-->Line_49 $$ jaxbe = (JAXBElement<?>) MQModel.qtiCf.unmarshal(MQModel.imsqtiUnmarshaller, source)[ FD ]
Line_49 $$ jaxbe = (JAXBElement<?>) MQModel.qtiCf.unmarshal(MQModel.imsqtiUnmarshaller, source)-->Line_49 $$ jaxbe = (JAXBElement<?>) MQModel.qtiCf.unmarshal(MQModel.imsqtiUnmarshaller, source)[ FD ]
Line_4 $$ File source = new File(filename)-->Line_49 $$ jaxbe = (JAXBElement<?>) MQModel.qtiCf.unmarshal(MQModel.imsqtiUnmarshaller, source)[ FD ]
Line_45 $$ source = new SAXSource(convertfromv2p0tov2p1, is)-->Line_49 $$ jaxbe = (JAXBElement<?>) MQModel.qtiCf.unmarshal(MQModel.imsqtiUnmarshaller, source)[ FD ]
Line_31 $$ AssessmentItemType assessmentItemType = null-->Line_50 $$ assessmentItemType = (AssessmentItemType) jaxbe.getValue()[ FD ]
Line_50 $$ assessmentItemType = (AssessmentItemType) jaxbe.getValue()-->Line_50 $$ assessmentItemType = (AssessmentItemType) jaxbe.getValue()[ FD ]
Line_32 $$ JAXBElement<?> jaxbe = null-->Line_50 $$ assessmentItemType = (AssessmentItemType) jaxbe.getValue()[ FD ]
Line_49 $$ jaxbe = (JAXBElement<?>) MQModel.qtiCf.unmarshal(MQModel.imsqtiUnmarshaller, source)-->Line_50 $$ assessmentItemType = (AssessmentItemType) jaxbe.getValue()[ FD ]
Line_2 $$ public AssessmentItemType getAssessmentItemType(String filename) -->Line_56 $$ return assessmentItemType[ CD ]
