Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException [ CD ]
Line_4 $$ String communityId = community.getId()-->Line_4 $$ String communityId = community.getId()[ CD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_4 $$ String communityId = community.getId()[ FD ]
Line_5 $$ if (!community.isActive()) -->Line_5 $$ if (!community.isActive()) [ CD ]
Line_5 $$ if (!community.isActive()) -->Line_5 $$ if (!community.isActive()) [ CD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_5 $$ if (!community.isActive()) [ FD ]
Line_5 $$ if (!community.isActive()) -->Line_6 $$ log.error("The community with id " + communityId + " is inactive")[ CD ]
Line_10 $$ String communityName = community.getName()-->Line_10 $$ String communityName = community.getName()[ CD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_10 $$ String communityName = community.getName()[ FD ]
Line_11 $$ String communityType = community.getType()-->Line_11 $$ String communityType = community.getType()[ CD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_11 $$ String communityType = community.getType()[ FD ]
Line_12 $$ String communityTitle = I18NUtils.localize(community.getTitle())-->Line_12 $$ String communityTitle = I18NUtils.localize(community.getTitle())[ CD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_12 $$ String communityTitle = I18NUtils.localize(community.getTitle())[ FD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_14 $$ if (community.isPersonalCommunity()) [ FD ]
Line_14 $$ if (community.isPersonalCommunity()) -->Line_14 $$ if (community.isPersonalCommunity()) [ CD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_14 $$ if (community.isPersonalCommunity()) [ FD ]
Line_14 $$ if (community.isPersonalCommunity()) -->Line_15 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + communityName + ".zip")[ CD ]
Line_13 $$ File zipOutFilename-->Line_15 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + communityName + ".zip")[ FD ]
Line_15 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + communityName + ".zip")-->Line_15 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + communityName + ".zip")[ FD ]
Line_14 $$ if (community.isPersonalCommunity()) -->Line_17 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + MANUAL_EXPORTED_COMMUNITY_PREFIX + communityTitle + ".zip")[ CD ]
Line_13 $$ File zipOutFilename-->Line_17 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + MANUAL_EXPORTED_COMMUNITY_PREFIX + communityTitle + ".zip")[ FD ]
Line_15 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + communityName + ".zip")-->Line_17 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + MANUAL_EXPORTED_COMMUNITY_PREFIX + communityTitle + ".zip")[ FD ]
Line_17 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + MANUAL_EXPORTED_COMMUNITY_PREFIX + communityTitle + ".zip")-->Line_17 $$ zipOutFilename = new File(CommunityManagerImpl.EXPORTED_COMMUNITIES_PATH + MANUAL_EXPORTED_COMMUNITY_PREFIX + communityTitle + ".zip")[ FD ]
Line_20 $$ File file = File.createTempFile("exported-community", null)-->Line_20 $$ File file = File.createTempFile("exported-community", null)[ CD ]
Line_20 $$ File file = File.createTempFile("exported-community", null)-->Line_21 $$ TemporaryFilesHandler.register(null, file)[ FD ]
Line_23 $$ String contentPath = JCRUtil.getNodeById(communityId).getPath()-->Line_23 $$ String contentPath = JCRUtil.getNodeById(communityId).getPath()[ CD ]
Line_4 $$ String communityId = community.getId()-->Line_23 $$ String contentPath = JCRUtil.getNodeById(communityId).getPath()[ FD ]
Line_23 $$ String contentPath = JCRUtil.getNodeById(communityId).getPath()-->Line_24 $$ JCRUtil.currentSession().exportSystemView(contentPath, fos, false, false)[ FD ]
Line_22 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_24 $$ JCRUtil.currentSession().exportSystemView(contentPath, fos, false, false)[ FD ]
Line_22 $$ FileOutputStream fos = new FileOutputStream(file)-->Line_25 $$ fos.close()[ FD ]
Line_26 $$ File propertiesFile = File.createTempFile("exported-community-properties", null)-->Line_26 $$ File propertiesFile = File.createTempFile("exported-community-properties", null)[ CD ]
Line_26 $$ File propertiesFile = File.createTempFile("exported-community-properties", null)-->Line_27 $$ TemporaryFilesHandler.register(null, propertiesFile)[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_29 $$ fosProperties.write(("communityId=" + communityId).getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_30 $$ fosProperties.write(";".getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_31 $$ fosProperties.write(("externalId=" + community.getExternalId()).getBytes())[ FD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_31 $$ fosProperties.write(("externalId=" + community.getExternalId()).getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_32 $$ fosProperties.write(";".getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_33 $$ fosProperties.write(("title=" + communityTitle).getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_34 $$ fosProperties.write(";".getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_35 $$ fosProperties.write(("communityType=" + communityType).getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_36 $$ fosProperties.write(";".getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_37 $$ fosProperties.write(("communityName=" + communityName).getBytes())[ FD ]
Line_28 $$ FileOutputStream fosProperties = new FileOutputStream(propertiesFile)-->Line_38 $$ fosProperties.close()[ FD ]
Line_19 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_41 $$ out.putNextEntry(new ZipEntry("properties"))[ FD ]
Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_42 $$ int readProperties = 0-->Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ CD ]
Line_39 $$ FileInputStream finProperties = new FileInputStream(propertiesFile)-->Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_40 $$ byte[] bufferProperties = new byte[4096]-->Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) [ FD ]
Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_44 $$ out.write(bufferProperties, 0, readProperties)[ CD ]
Line_19 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_44 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_40 $$ byte[] bufferProperties = new byte[4096]-->Line_44 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_44 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_42 $$ int readProperties = 0-->Line_44 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_39 $$ FileInputStream finProperties = new FileInputStream(propertiesFile)-->Line_46 $$ finProperties.close()[ FD ]
Line_19 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_49 $$ out.putNextEntry(new ZipEntry("xmlData"))[ FD ]
Line_51 $$ while ((read = fin.read(buffer)) > 0) -->Line_51 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_50 $$ int read = 0-->Line_51 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_51 $$ while ((read = fin.read(buffer)) > 0) -->Line_51 $$ while ((read = fin.read(buffer)) > 0) [ CD ]
Line_47 $$ FileInputStream fin = new FileInputStream(file)-->Line_51 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_48 $$ byte[] buffer = new byte[4096]-->Line_51 $$ while ((read = fin.read(buffer)) > 0) [ FD ]
Line_51 $$ while ((read = fin.read(buffer)) > 0) -->Line_52 $$ out.write(buffer, 0, read)[ CD ]
Line_19 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_52 $$ out.write(buffer, 0, read)[ FD ]
Line_48 $$ byte[] buffer = new byte[4096]-->Line_52 $$ out.write(buffer, 0, read)[ FD ]
Line_51 $$ while ((read = fin.read(buffer)) > 0) -->Line_52 $$ out.write(buffer, 0, read)[ FD ]
Line_50 $$ int read = 0-->Line_52 $$ out.write(buffer, 0, read)[ FD ]
Line_47 $$ FileInputStream fin = new FileInputStream(file)-->Line_54 $$ fin.close()[ FD ]
Line_19 $$ ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipOutFilename))-->Line_55 $$ out.close()[ FD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_56 $$ community.setActive(Boolean.FALSE)[ FD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_57 $$ communityPersister.saveCommunity(community)[ FD ]
Line_58 $$ Collection<Community> duplicatedPersonalCommunities = communityPersister.searchCommunitiesByName(communityName)-->Line_58 $$ Collection<Community> duplicatedPersonalCommunities = communityPersister.searchCommunitiesByName(communityName)[ CD ]
Line_10 $$ String communityName = community.getName()-->Line_58 $$ Collection<Community> duplicatedPersonalCommunities = communityPersister.searchCommunitiesByName(communityName)[ FD ]
Line_11 $$ String communityType = community.getType()-->Line_59 $$ if (CommunityManager.PERSONAL_COMMUNITY_TYPE.equals(communityType)) [ FD ]
Line_59 $$ if (CommunityManager.PERSONAL_COMMUNITY_TYPE.equals(communityType)) -->Line_59 $$ if (CommunityManager.PERSONAL_COMMUNITY_TYPE.equals(communityType)) [ CD ]
Line_11 $$ String communityType = community.getType()-->Line_59 $$ if (CommunityManager.PERSONAL_COMMUNITY_TYPE.equals(communityType)) [ FD ]
Line_60 $$ for (Community currentCommunity : duplicatedPersonalCommunities) -->Line_61 $$ if (currentCommunity.isActive()) [ FD ]
Line_61 $$ if (currentCommunity.isActive()) -->Line_61 $$ if (currentCommunity.isActive()) [ CD ]
Line_60 $$ for (Community currentCommunity : duplicatedPersonalCommunities) -->Line_61 $$ if (currentCommunity.isActive()) [ FD ]
Line_61 $$ if (currentCommunity.isActive()) -->Line_62 $$ currentCommunity.setActive(Boolean.FALSE)[ CD ]
Line_60 $$ for (Community currentCommunity : duplicatedPersonalCommunities) -->Line_62 $$ currentCommunity.setActive(Boolean.FALSE)[ FD ]
Line_61 $$ if (currentCommunity.isActive()) -->Line_63 $$ communityPersister.saveCommunity(currentCommunity)[ CD ]
Line_60 $$ for (Community currentCommunity : duplicatedPersonalCommunities) -->Line_63 $$ communityPersister.saveCommunity(currentCommunity)[ FD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_69 $$ log.error("Error getting community with id " + community.getId())[ FD ]
Line_2 $$ File exportCommunityData(Community community) throws CommunityNotActiveException, FileNotFoundException, IOException, CommunityNotFoundException -->Line_70 $$ throw new GroupwareRuntimeException("Error getting community with id " + community.getId(), e.getCause())[ FD ]
Line_43 $$ while ((readProperties = finProperties.read(bufferProperties)) > 0) -->Line_44 $$ out.write(bufferProperties, 0, readProperties)[ FD ]
Line_51 $$ while ((read = fin.read(buffer)) > 0) -->Line_52 $$ out.write(buffer, 0, read)[ FD ]
