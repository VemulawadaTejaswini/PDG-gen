Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void transform(CommandLine commandLine) throws IOException [ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_3 $$ Reader reader[ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_4 $$ if (commandLine.hasOption('i')) [ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_4 $$ if (commandLine.hasOption('i')) [ FD ]
Line_4 $$ if (commandLine.hasOption('i')) -->Line_4 $$ if (commandLine.hasOption('i')) [ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_4 $$ if (commandLine.hasOption('i')) [ FD ]
Line_4 $$ if (commandLine.hasOption('i')) -->Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))[ CD ]
Line_3 $$ Reader reader-->Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))[ FD ]
Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))-->Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))[ FD ]
Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))-->Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))[ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))[ FD ]
Line_4 $$ if (commandLine.hasOption('i')) -->Line_7 $$ reader = createStandardInputReader()[ CD ]
Line_3 $$ Reader reader-->Line_7 $$ reader = createStandardInputReader()[ FD ]
Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))-->Line_7 $$ reader = createStandardInputReader()[ FD ]
Line_7 $$ reader = createStandardInputReader()-->Line_7 $$ reader = createStandardInputReader()[ FD ]
Line_7 $$ reader = createStandardInputReader()-->Line_7 $$ reader = createStandardInputReader()[ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_9 $$ Writer writer[ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_10 $$ if (commandLine.hasOption('o')) [ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_10 $$ if (commandLine.hasOption('o')) [ FD ]
Line_10 $$ if (commandLine.hasOption('o')) -->Line_10 $$ if (commandLine.hasOption('o')) [ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_10 $$ if (commandLine.hasOption('o')) [ FD ]
Line_10 $$ if (commandLine.hasOption('o')) -->Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))[ CD ]
Line_9 $$ Writer writer-->Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))[ FD ]
Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))-->Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))[ FD ]
Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))-->Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))[ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))[ FD ]
Line_10 $$ if (commandLine.hasOption('o')) -->Line_13 $$ writer = createStandardOutputWriter()[ CD ]
Line_9 $$ Writer writer-->Line_13 $$ writer = createStandardOutputWriter()[ FD ]
Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))-->Line_13 $$ writer = createStandardOutputWriter()[ FD ]
Line_13 $$ writer = createStandardOutputWriter()-->Line_13 $$ writer = createStandardOutputWriter()[ FD ]
Line_13 $$ writer = createStandardOutputWriter()-->Line_13 $$ writer = createStandardOutputWriter()[ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_15 $$ String mapRule = commandLine.getOptionValue("m")[ CD ]
Line_15 $$ String mapRule = commandLine.getOptionValue("m")-->Line_15 $$ String mapRule = commandLine.getOptionValue("m")[ CD ]
Line_2 $$ private void transform(CommandLine commandLine) throws IOException -->Line_15 $$ String mapRule = commandLine.getOptionValue("m")[ FD ]
Line_15 $$ String mapRule = commandLine.getOptionValue("m")-->Line_19 $$ if (mapRule != null) [ FD ]
Line_19 $$ if (mapRule != null) -->Line_20 $$ parameterMap.put(Srx1Transformer.MAP_RULE_NAME, mapRule)[ CD ]
Line_18 $$ Map<String, Object> parameterMap = new HashMap<String, Object>()-->Line_20 $$ parameterMap.put(Srx1Transformer.MAP_RULE_NAME, mapRule)[ FD ]
Line_15 $$ String mapRule = commandLine.getOptionValue("m")-->Line_20 $$ parameterMap.put(Srx1Transformer.MAP_RULE_NAME, mapRule)[ FD ]
Line_17 $$ SrxTransformer transformer = new SrxAnyTransformer()-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_3 $$ Reader reader-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_7 $$ reader = createStandardInputReader()-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_9 $$ Writer writer-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_13 $$ writer = createStandardOutputWriter()-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_18 $$ Map<String, Object> parameterMap = new HashMap<String, Object>()-->Line_22 $$ transformer.transform(reader, writer, parameterMap)[ FD ]
Line_3 $$ Reader reader-->Line_24 $$ cleanupReader(reader)[ FD ]
Line_5 $$ reader = createFileReader(commandLine.getOptionValue('i'))-->Line_24 $$ cleanupReader(reader)[ FD ]
Line_7 $$ reader = createStandardInputReader()-->Line_24 $$ cleanupReader(reader)[ FD ]
Line_9 $$ Writer writer-->Line_25 $$ cleanupWriter(writer)[ FD ]
Line_11 $$ writer = createFileWriter(commandLine.getOptionValue('o'))-->Line_25 $$ cleanupWriter(writer)[ FD ]
Line_13 $$ writer = createStandardOutputWriter()-->Line_25 $$ cleanupWriter(writer)[ FD ]
