Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void uploadAsync(final ArrayList<RecordedGeoPoint> recordedGeoPoints) [ CD ]
Line_2 $$ public static void uploadAsync(final ArrayList<RecordedGeoPoint> recordedGeoPoints) -->Line_3 $$ new Thread(new Runnable() [ CD ]
Line_6 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints))-->Line_6 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints))[ CD ]
Line_6 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints))-->Line_6 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints))[ CD ]
Line_2 $$ public static void uploadAsync(final ArrayList<RecordedGeoPoint> recordedGeoPoints) -->Line_6 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints))[ FD ]
Line_6 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints))-->Line_6 $$ return[ CD ]
Line_2 $$ public static void uploadAsync(final ArrayList<RecordedGeoPoint> recordedGeoPoints) -->Line_7 $$ final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes())[ FD ]
Line_10 $$ final MultipartEntity requestEntity = new MultipartEntity()-->Line_11 $$ requestEntity.addPart("gpxfile", new InputStreamBody(gpxInputStream, "" + System.currentTimeMillis() + ".gpx"))[ FD ]
Line_8 $$ final HttpClient httpClient = new DefaultHttpClient()-->Line_12 $$ httpClient.getParams().setBooleanParameter("http.protocol.expect-continue", false)[ FD ]
Line_9 $$ final HttpPost request = new HttpPost(UPLOADSCRIPT_URL)-->Line_13 $$ request.setEntity(requestEntity)[ FD ]
Line_10 $$ final MultipartEntity requestEntity = new MultipartEntity()-->Line_13 $$ request.setEntity(requestEntity)[ FD ]
Line_14 $$ final HttpResponse response = httpClient.execute(request)-->Line_14 $$ final HttpResponse response = httpClient.execute(request)[ CD ]
Line_8 $$ final HttpClient httpClient = new DefaultHttpClient()-->Line_14 $$ final HttpResponse response = httpClient.execute(request)[ FD ]
Line_9 $$ final HttpPost request = new HttpPost(UPLOADSCRIPT_URL)-->Line_14 $$ final HttpResponse response = httpClient.execute(request)[ FD ]
Line_15 $$ final int status = response.getStatusLine().getStatusCode()-->Line_15 $$ final int status = response.getStatusLine().getStatusCode()[ CD ]
Line_14 $$ final HttpResponse response = httpClient.execute(request)-->Line_15 $$ final int status = response.getStatusLine().getStatusCode()[ FD ]
Line_15 $$ final int status = response.getStatusLine().getStatusCode()-->Line_16 $$ if (status != HttpStatus.SC_OK) [ FD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_17 $$ logger.error("GPXUploader", "status != HttpStatus.SC_OK")[ CD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_19 $$ final Reader r = new InputStreamReader(new BufferedInputStream(response.getEntity().getContent()))[ CD ]
Line_14 $$ final HttpResponse response = httpClient.execute(request)-->Line_19 $$ final Reader r = new InputStreamReader(new BufferedInputStream(response.getEntity().getContent()))[ FD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_20 $$ final char[] buf = new char[8 * 1024][ CD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_21 $$ int read[ CD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_22 $$ final StringBuilder sb = new StringBuilder()[ CD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)[ CD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_16 $$ if (status != HttpStatus.SC_OK) [ CD ]
Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)-->Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)[ FD ]
Line_21 $$ int read-->Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)[ FD ]
Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)-->Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)[ CD ]
Line_19 $$ final Reader r = new InputStreamReader(new BufferedInputStream(response.getEntity().getContent()))-->Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)[ FD ]
Line_20 $$ final char[] buf = new char[8 * 1024]-->Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)[ FD ]
Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)-->Line_23 $$ sb.append(buf, 0, read)[ CD ]
Line_22 $$ final StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(buf, 0, read)[ FD ]
Line_20 $$ final char[] buf = new char[8 * 1024]-->Line_23 $$ sb.append(buf, 0, read)[ FD ]
Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)-->Line_23 $$ sb.append(buf, 0, read)[ FD ]
Line_21 $$ int read-->Line_23 $$ sb.append(buf, 0, read)[ FD ]
Line_16 $$ if (status != HttpStatus.SC_OK) -->Line_24 $$ logger.debug("GPXUploader", "Response: " + sb.toString())[ CD ]
Line_22 $$ final StringBuilder sb = new StringBuilder()-->Line_24 $$ logger.debug("GPXUploader", "Response: " + sb.toString())[ FD ]
Line_23 $$ while ((read = r.read(buf)) != -1) sb.append(buf, 0, read)-->Line_23 $$ sb.append(buf, 0, read)[ FD ]
