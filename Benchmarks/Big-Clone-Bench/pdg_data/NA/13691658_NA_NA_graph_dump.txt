Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testOther() throws Exception [ CD ]
Line_2 $$ public void testOther() throws Exception -->Line_3 $$ filter.init(this.mockConfig)[ CD ]
Line_2 $$ public void testOther() throws Exception -->Line_4 $$ ByteArrayOutputStream jpg = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testOther() throws Exception -->Line_5 $$ IOUtils.copy(this.getClass().getResourceAsStream("Buffalo-Theory.jpg"), jpg)[ CD ]
Line_4 $$ ByteArrayOutputStream jpg = new ByteArrayOutputStream()-->Line_5 $$ IOUtils.copy(this.getClass().getResourceAsStream("Buffalo-Theory.jpg"), jpg)[ FD ]
Line_2 $$ public void testOther() throws Exception -->Line_6 $$ MockFilterChain mockChain = new MockFilterChain()[ CD ]
Line_2 $$ public void testOther() throws Exception -->Line_7 $$ mockChain.setContentType("image/jpg")[ CD ]
Line_6 $$ MockFilterChain mockChain = new MockFilterChain()-->Line_7 $$ mockChain.setContentType("image/jpg")[ FD ]
Line_2 $$ public void testOther() throws Exception -->Line_8 $$ mockChain.setOutputData(jpg.toByteArray())[ CD ]
Line_6 $$ MockFilterChain mockChain = new MockFilterChain()-->Line_8 $$ mockChain.setOutputData(jpg.toByteArray())[ FD ]
Line_4 $$ ByteArrayOutputStream jpg = new ByteArrayOutputStream()-->Line_8 $$ mockChain.setOutputData(jpg.toByteArray())[ FD ]
Line_2 $$ public void testOther() throws Exception -->Line_9 $$ MockResponse mockResponse = new MockResponse()[ CD ]
Line_2 $$ public void testOther() throws Exception -->Line_10 $$ filter.doFilter(this.mockRequest, mockResponse, mockChain)[ CD ]
Line_9 $$ MockResponse mockResponse = new MockResponse()-->Line_10 $$ filter.doFilter(this.mockRequest, mockResponse, mockChain)[ FD ]
Line_6 $$ MockFilterChain mockChain = new MockFilterChain()-->Line_10 $$ filter.doFilter(this.mockRequest, mockResponse, mockChain)[ FD ]
Line_2 $$ public void testOther() throws Exception -->Line_11 $$ Assert.assertTrue("Time stamp content type", "image/jpg".equals(mockResponse.getContentType()))[ CD ]
Line_9 $$ MockResponse mockResponse = new MockResponse()-->Line_11 $$ Assert.assertTrue("Time stamp content type", "image/jpg".equals(mockResponse.getContentType()))[ FD ]
Line_2 $$ public void testOther() throws Exception -->Line_12 $$ Assert.assertTrue("OutputStream as original", ArrayUtils.isEquals(jpg.toByteArray(), mockResponse.getMockServletOutputStream().getBytes()))[ CD ]
Line_4 $$ ByteArrayOutputStream jpg = new ByteArrayOutputStream()-->Line_12 $$ Assert.assertTrue("OutputStream as original", ArrayUtils.isEquals(jpg.toByteArray(), mockResponse.getMockServletOutputStream().getBytes()))[ FD ]
Line_9 $$ MockResponse mockResponse = new MockResponse()-->Line_12 $$ Assert.assertTrue("OutputStream as original", ArrayUtils.isEquals(jpg.toByteArray(), mockResponse.getMockServletOutputStream().getBytes()))[ FD ]
