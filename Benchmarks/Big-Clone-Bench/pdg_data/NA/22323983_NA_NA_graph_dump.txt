Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException [ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_3 $$ final Pattern p = Pattern.compile("\\s*deb\\s+(ftp://|http://)(\\S+)\\s+((\\S+\\s*)*)(./)[ CD ]
Line_3 $$ final Pattern p = Pattern.compile("\\s*deb\\s+(ftp://|http://)(\\S+)\\s+((\\S+\\s*)*)(./)-->Line_3 $$ final Pattern p = Pattern.compile("\\s*deb\\s+(ftp://|http://)(\\S+)\\s+((\\S+\\s*)*)(./)[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_4 $$ Matcher m[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_5 $$ if (updateUrlAndFile == null)[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_6 $$ BufferedReader f[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_7 $$ String protocol[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_8 $$ String host[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_9 $$ String shares[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_10 $$ String adress[ CD ]
Line_6 $$ BufferedReader f-->Line_12 $$ f = new BufferedReader(new FileReader(sourcesList))[ FD ]
Line_12 $$ f = new BufferedReader(new FileReader(sourcesList))-->Line_12 $$ f = new BufferedReader(new FileReader(sourcesList))[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_13 $$ while ((protocol = f.readLine()) != null) [ FD ]
Line_7 $$ String protocol-->Line_13 $$ while ((protocol = f.readLine()) != null) [ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_13 $$ while ((protocol = f.readLine()) != null) [ CD ]
Line_6 $$ BufferedReader f-->Line_13 $$ while ((protocol = f.readLine()) != null) [ FD ]
Line_12 $$ f = new BufferedReader(new FileReader(sourcesList))-->Line_13 $$ while ((protocol = f.readLine()) != null) [ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_14 $$ m = p.matcher(protocol)[ CD ]
Line_14 $$ m = p.matcher(protocol)-->Line_14 $$ m = p.matcher(protocol)[ FD ]
Line_4 $$ Matcher m-->Line_14 $$ m = p.matcher(protocol)[ FD ]
Line_14 $$ m = p.matcher(protocol)-->Line_14 $$ m = p.matcher(protocol)[ CD ]
Line_3 $$ final Pattern p = Pattern.compile("\\s*deb\\s+(ftp://|http://)(\\S+)\\s+((\\S+\\s*)*)(./)-->Line_14 $$ m = p.matcher(protocol)[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_14 $$ m = p.matcher(protocol)[ FD ]
Line_7 $$ String protocol-->Line_14 $$ m = p.matcher(protocol)[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_15 $$ if (m.matches()) [ CD ]
Line_14 $$ m = p.matcher(protocol)-->Line_15 $$ if (m.matches()) [ FD ]
Line_4 $$ Matcher m-->Line_15 $$ if (m.matches()) [ FD ]
Line_15 $$ if (m.matches()) -->Line_15 $$ if (m.matches()) [ CD ]
Line_14 $$ m = p.matcher(protocol)-->Line_15 $$ if (m.matches()) [ FD ]
Line_4 $$ Matcher m-->Line_15 $$ if (m.matches()) [ FD ]
Line_15 $$ if (m.matches()) -->Line_16 $$ protocol = m.group(1)[ CD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_16 $$ protocol = m.group(1)[ FD ]
Line_16 $$ protocol = m.group(1)-->Line_16 $$ protocol = m.group(1)[ FD ]
Line_7 $$ String protocol-->Line_16 $$ protocol = m.group(1)[ FD ]
Line_16 $$ protocol = m.group(1)-->Line_16 $$ protocol = m.group(1)[ CD ]
Line_14 $$ m = p.matcher(protocol)-->Line_16 $$ protocol = m.group(1)[ FD ]
Line_4 $$ Matcher m-->Line_16 $$ protocol = m.group(1)[ FD ]
Line_15 $$ if (m.matches()) -->Line_17 $$ host = m.group(2)[ CD ]
Line_17 $$ host = m.group(2)-->Line_17 $$ host = m.group(2)[ FD ]
Line_8 $$ String host-->Line_17 $$ host = m.group(2)[ FD ]
Line_17 $$ host = m.group(2)-->Line_17 $$ host = m.group(2)[ CD ]
Line_14 $$ m = p.matcher(protocol)-->Line_17 $$ host = m.group(2)[ FD ]
Line_4 $$ Matcher m-->Line_17 $$ host = m.group(2)[ FD ]
Line_15 $$ if (m.matches()) -->Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))[ CD ]
Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))-->Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))[ CD ]
Line_14 $$ m = p.matcher(protocol)-->Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))[ FD ]
Line_4 $$ Matcher m-->Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))[ FD ]
Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))-->Line_18 $$ shares = ""[ CD ]
Line_18 $$ shares = ""-->Line_18 $$ shares = ""[ FD ]
Line_9 $$ String shares-->Line_18 $$ shares = ""[ FD ]
Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))-->Line_18 $$ shares = m.group(3).trim()[ CD ]
Line_18 $$ shares = ""-->Line_18 $$ shares = m.group(3).trim()[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_18 $$ shares = m.group(3).trim()[ FD ]
Line_9 $$ String shares-->Line_18 $$ shares = m.group(3).trim()[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_18 $$ shares = m.group(3).trim()[ CD ]
Line_14 $$ m = p.matcher(protocol)-->Line_18 $$ shares = m.group(3).trim()[ FD ]
Line_4 $$ Matcher m-->Line_18 $$ shares = m.group(3).trim()[ FD ]
Line_15 $$ if (m.matches()) -->Line_19 $$ if (shares == null)[ CD ]
Line_18 $$ shares = ""-->Line_19 $$ if (shares == null)[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_19 $$ if (shares == null)[ FD ]
Line_9 $$ String shares-->Line_19 $$ if (shares == null)[ FD ]
Line_19 $$ if (shares == null)-->Line_19 $$ adress = protocol + host[ CD ]
Line_19 $$ adress = protocol + host-->Line_19 $$ adress = protocol + host[ FD ]
Line_10 $$ String adress-->Line_19 $$ adress = protocol + host[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_19 $$ adress = protocol + host[ FD ]
Line_16 $$ protocol = m.group(1)-->Line_19 $$ adress = protocol + host[ FD ]
Line_7 $$ String protocol-->Line_19 $$ adress = protocol + host[ FD ]
Line_17 $$ host = m.group(2)-->Line_19 $$ adress = protocol + host[ FD ]
Line_8 $$ String host-->Line_19 $$ adress = protocol + host[ FD ]
Line_19 $$ if (shares == null)-->Line_20 $$ shares = shares.replace(" ", "/")[ CD ]
Line_18 $$ shares = ""-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_9 $$ String shares-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_20 $$ shares = shares.replace(" ", "/")[ CD ]
Line_18 $$ shares = ""-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_9 $$ String shares-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_19 $$ if (shares == null)-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ CD ]
Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ CD ]
Line_17 $$ host = m.group(2)-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_8 $$ String host-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ CD ]
Line_18 $$ shares = ""-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_9 $$ String shares-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))-->Line_21 $$ host = host + "/"[ CD ]
Line_17 $$ host = m.group(2)-->Line_21 $$ host = host + "/"[ FD ]
Line_21 $$ host = host + "/"-->Line_21 $$ host = host + "/"[ FD ]
Line_8 $$ String host-->Line_21 $$ host = host + "/"[ FD ]
Line_17 $$ host = m.group(2)-->Line_21 $$ host = host + "/"[ FD ]
Line_21 $$ host = host + "/"-->Line_21 $$ host = host + "/"[ FD ]
Line_8 $$ String host-->Line_21 $$ host = host + "/"[ FD ]
Line_19 $$ if (shares == null)-->Line_22 $$ adress = host + shares[ CD ]
Line_19 $$ adress = protocol + host-->Line_22 $$ adress = host + shares[ FD ]
Line_22 $$ adress = host + shares-->Line_22 $$ adress = host + shares[ FD ]
Line_10 $$ String adress-->Line_22 $$ adress = host + shares[ FD ]
Line_17 $$ host = m.group(2)-->Line_22 $$ adress = host + shares[ FD ]
Line_21 $$ host = host + "/"-->Line_22 $$ adress = host + shares[ FD ]
Line_8 $$ String host-->Line_22 $$ adress = host + shares[ FD ]
Line_18 $$ shares = ""-->Line_22 $$ adress = host + shares[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_22 $$ adress = host + shares[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_22 $$ adress = host + shares[ FD ]
Line_9 $$ String shares-->Line_22 $$ adress = host + shares[ FD ]
Line_19 $$ if (shares == null)-->Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")[ CD ]
Line_19 $$ if (shares == null)-->Line_19 $$ if (shares == null)[ CD ]
Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")-->Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")[ CD ]
Line_19 $$ adress = protocol + host-->Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")[ FD ]
Line_22 $$ adress = host + shares-->Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")[ FD ]
Line_10 $$ String adress-->Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")[ FD ]
Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")-->Line_23 $$ adress = adress.replace("//", "/")[ CD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_19 $$ adress = protocol + host-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_22 $$ adress = host + shares-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_10 $$ String adress-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_23 $$ adress = adress.replace("//", "/")[ CD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_19 $$ adress = protocol + host-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_22 $$ adress = host + shares-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_10 $$ String adress-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
Line_19 $$ if (shares == null)-->Line_24 $$ adress = protocol + adress[ CD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_24 $$ adress = protocol + adress[ FD ]
Line_19 $$ adress = protocol + host-->Line_24 $$ adress = protocol + adress[ FD ]
Line_22 $$ adress = host + shares-->Line_24 $$ adress = protocol + adress[ FD ]
Line_24 $$ adress = protocol + adress-->Line_24 $$ adress = protocol + adress[ FD ]
Line_10 $$ String adress-->Line_24 $$ adress = protocol + adress[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_24 $$ adress = protocol + adress[ FD ]
Line_16 $$ protocol = m.group(1)-->Line_24 $$ adress = protocol + adress[ FD ]
Line_7 $$ String protocol-->Line_24 $$ adress = protocol + adress[ FD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_24 $$ adress = protocol + adress[ FD ]
Line_19 $$ adress = protocol + host-->Line_24 $$ adress = protocol + adress[ FD ]
Line_22 $$ adress = host + shares-->Line_24 $$ adress = protocol + adress[ FD ]
Line_24 $$ adress = protocol + adress-->Line_24 $$ adress = protocol + adress[ FD ]
Line_10 $$ String adress-->Line_24 $$ adress = protocol + adress[ FD ]
Line_15 $$ if (m.matches()) -->Line_26 $$ if (!adress.endsWith("/"))[ CD ]
Line_26 $$ if (!adress.endsWith("/"))-->Line_26 $$ if (!adress.endsWith("/"))[ CD ]
Line_26 $$ if (!adress.endsWith("/"))-->Line_26 $$ if (!adress.endsWith("/"))[ CD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_19 $$ adress = protocol + host-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_22 $$ adress = host + shares-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_24 $$ adress = protocol + adress-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_10 $$ String adress-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_26 $$ if (!adress.endsWith("/"))-->Line_26 $$ adress = adress + "/"[ CD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_26 $$ adress = adress + "/"[ FD ]
Line_19 $$ adress = protocol + host-->Line_26 $$ adress = adress + "/"[ FD ]
Line_22 $$ adress = host + shares-->Line_26 $$ adress = adress + "/"[ FD ]
Line_24 $$ adress = protocol + adress-->Line_26 $$ adress = adress + "/"[ FD ]
Line_26 $$ adress = adress + "/"-->Line_26 $$ adress = adress + "/"[ FD ]
Line_10 $$ String adress-->Line_26 $$ adress = adress + "/"[ FD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_26 $$ adress = adress + "/"[ FD ]
Line_19 $$ adress = protocol + host-->Line_26 $$ adress = adress + "/"[ FD ]
Line_22 $$ adress = host + shares-->Line_26 $$ adress = adress + "/"[ FD ]
Line_24 $$ adress = protocol + adress-->Line_26 $$ adress = adress + "/"[ FD ]
Line_26 $$ adress = adress + "/"-->Line_26 $$ adress = adress + "/"[ FD ]
Line_10 $$ String adress-->Line_26 $$ adress = adress + "/"[ FD ]
Line_15 $$ if (m.matches()) -->Line_28 $$ changelogdir = changelogdir.substring(changelogdir.indexOf("//") + 2)[ CD ]
Line_15 $$ if (m.matches()) -->Line_29 $$ if (changelogdir.endsWith("/"))[ CD ]
Line_29 $$ if (changelogdir.endsWith("/"))-->Line_29 $$ if (changelogdir.endsWith("/"))[ CD ]
Line_29 $$ if (changelogdir.endsWith("/"))-->Line_29 $$ changelogdir = changelogdir.substring(0, changelogdir.lastIndexOf("/"))[ CD ]
Line_15 $$ if (m.matches()) -->Line_30 $$ changelogdir = changelogdir.replace('/', '_')[ CD ]
Line_15 $$ if (m.matches()) -->Line_31 $$ changelogdir = changelogdir.replaceAll("\\.", "_")[ CD ]
Line_15 $$ if (m.matches()) -->Line_32 $$ changelogdir = changelogdir.replaceAll("-", "_")[ CD ]
Line_15 $$ if (m.matches()) -->Line_33 $$ changelogdir = changelogdir.replaceAll(":", "_COLON_")[ CD ]
Line_15 $$ if (m.matches()) -->Line_34 $$ adress = adress + "Packages.gz"[ CD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_19 $$ adress = protocol + host-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_22 $$ adress = host + shares-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_24 $$ adress = protocol + adress-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_26 $$ adress = adress + "/"-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_10 $$ String adress-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_19 $$ adress = protocol + host-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_22 $$ adress = host + shares-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_24 $$ adress = protocol + adress-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_26 $$ adress = adress + "/"-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_10 $$ String adress-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_15 $$ if (m.matches()) -->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ CD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_19 $$ adress = protocol + host-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_22 $$ adress = host + shares-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_24 $$ adress = protocol + adress-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_26 $$ adress = adress + "/"-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_10 $$ String adress-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_19 $$ adress = protocol + host-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_22 $$ adress = host + shares-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_24 $$ adress = protocol + adress-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_26 $$ adress = adress + "/"-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_10 $$ String adress-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_43 $$ while ((len = in.read(buf)) > 0) out.write(buf, 0, len)-->Line_43 $$ out.write(buf, 0, len)[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_51 $$ if (null != pm) [ FD ]
Line_51 $$ if (null != pm) -->Line_52 $$ logger.warn(message, e)[ CD ]
Line_51 $$ if (null != pm) -->Line_53 $$ pm.addWarning(message + "\n" + e.toString())[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_53 $$ pm.addWarning(message + "\n" + e.toString())[ FD ]
Line_51 $$ if (null != pm) -->Line_54 $$ logger.warn(message, e)[ CD ]
Line_6 $$ BufferedReader f-->Line_59 $$ f.close()[ FD ]
Line_12 $$ f = new BufferedReader(new FileReader(sourcesList))-->Line_59 $$ f.close()[ FD ]
Line_61 $$ final String message = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("sourcesList.corrupt", "Entry not found sourcesList.corrupt")-->Line_61 $$ final String message = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("sourcesList.corrupt", "Entry not found sourcesList.corrupt")[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_62 $$ if (null != pm) [ FD ]
Line_62 $$ if (null != pm) -->Line_63 $$ logger.warn(message, e)[ CD ]
Line_61 $$ final String message = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("sourcesList.corrupt", "Entry not found sourcesList.corrupt")-->Line_63 $$ logger.warn(message, e)[ FD ]
Line_62 $$ if (null != pm) -->Line_64 $$ pm.addWarning(message + "\n" + e.toString())[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_64 $$ pm.addWarning(message + "\n" + e.toString())[ FD ]
Line_62 $$ if (null != pm) -->Line_65 $$ logger.warn(message, e)[ CD ]
Line_61 $$ final String message = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("sourcesList.corrupt", "Entry not found sourcesList.corrupt")-->Line_65 $$ logger.warn(message, e)[ FD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_69 $$ if (null != pm) [ FD ]
Line_69 $$ if (null != pm) -->Line_70 $$ logger.warn(message, e)[ CD ]
Line_61 $$ final String message = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("sourcesList.corrupt", "Entry not found sourcesList.corrupt")-->Line_70 $$ logger.warn(message, e)[ FD ]
Line_69 $$ if (null != pm) -->Line_71 $$ pm.addWarning(message + "\n" + e.toString())[ CD ]
Line_2 $$ private void getLines(PackageManager pm) throws PackageManagerException -->Line_71 $$ pm.addWarning(message + "\n" + e.toString())[ FD ]
Line_69 $$ if (null != pm) -->Line_72 $$ logger.warn(message, e)[ CD ]
Line_61 $$ final String message = PreferenceStoreHolder.getPreferenceStoreByName("Screen").getPreferenceAsString("sourcesList.corrupt", "Entry not found sourcesList.corrupt")-->Line_72 $$ logger.warn(message, e)[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_14 $$ m = p.matcher(protocol)[ FD ]
Line_16 $$ protocol = m.group(1)-->Line_14 $$ m = p.matcher(protocol)[ FD ]
Line_14 $$ m = p.matcher(protocol)-->Line_15 $$ if (m.matches()) [ FD ]
Line_14 $$ m = p.matcher(protocol)-->Line_15 $$ if (m.matches()) [ FD ]
Line_14 $$ m = p.matcher(protocol)-->Line_16 $$ protocol = m.group(1)[ FD ]
Line_14 $$ m = p.matcher(protocol)-->Line_17 $$ host = m.group(2)[ FD ]
Line_14 $$ m = p.matcher(protocol)-->Line_18 $$ if (m.group(3).trim().equalsIgnoreCase("./"))[ FD ]
Line_14 $$ m = p.matcher(protocol)-->Line_18 $$ shares = m.group(3).trim()[ FD ]
Line_18 $$ shares = ""-->Line_19 $$ if (shares == null)[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_19 $$ if (shares == null)[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_19 $$ if (shares == null)[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_19 $$ adress = protocol + host[ FD ]
Line_16 $$ protocol = m.group(1)-->Line_19 $$ adress = protocol + host[ FD ]
Line_17 $$ host = m.group(2)-->Line_19 $$ adress = protocol + host[ FD ]
Line_21 $$ host = host + "/"-->Line_19 $$ adress = protocol + host[ FD ]
Line_18 $$ shares = ""-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_20 $$ shares = shares.replace(" ", "/")[ FD ]
Line_17 $$ host = m.group(2)-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_21 $$ host = host + "/"-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_18 $$ shares = ""-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_21 $$ if (!host.endsWith("/") && !shares.startsWith("/"))[ FD ]
Line_17 $$ host = m.group(2)-->Line_21 $$ host = host + "/"[ FD ]
Line_21 $$ host = host + "/"-->Line_21 $$ host = host + "/"[ FD ]
Line_17 $$ host = m.group(2)-->Line_22 $$ adress = host + shares[ FD ]
Line_21 $$ host = host + "/"-->Line_22 $$ adress = host + shares[ FD ]
Line_18 $$ shares = ""-->Line_22 $$ adress = host + shares[ FD ]
Line_18 $$ shares = m.group(3).trim()-->Line_22 $$ adress = host + shares[ FD ]
Line_20 $$ shares = shares.replace(" ", "/")-->Line_22 $$ adress = host + shares[ FD ]
Line_13 $$ while ((protocol = f.readLine()) != null) -->Line_24 $$ adress = protocol + adress[ FD ]
Line_16 $$ protocol = m.group(1)-->Line_24 $$ adress = protocol + adress[ FD ]
Line_19 $$ adress = protocol + host-->Line_24 $$ adress = protocol + adress[ FD ]
Line_22 $$ adress = host + shares-->Line_24 $$ adress = protocol + adress[ FD ]
Line_24 $$ adress = protocol + adress-->Line_24 $$ adress = protocol + adress[ FD ]
Line_26 $$ adress = adress + "/"-->Line_24 $$ adress = protocol + adress[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_24 $$ adress = protocol + adress[ FD ]
Line_19 $$ adress = protocol + host-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_22 $$ adress = host + shares-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_24 $$ adress = protocol + adress-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_26 $$ adress = adress + "/"-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_26 $$ if (!adress.endsWith("/"))[ FD ]
Line_19 $$ adress = protocol + host-->Line_26 $$ adress = adress + "/"[ FD ]
Line_22 $$ adress = host + shares-->Line_26 $$ adress = adress + "/"[ FD ]
Line_24 $$ adress = protocol + adress-->Line_26 $$ adress = adress + "/"[ FD ]
Line_26 $$ adress = adress + "/"-->Line_26 $$ adress = adress + "/"[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_26 $$ adress = adress + "/"[ FD ]
Line_19 $$ adress = protocol + host-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_22 $$ adress = host + shares-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_24 $$ adress = protocol + adress-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_26 $$ adress = adress + "/"-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_34 $$ adress = adress + "Packages.gz"[ FD ]
Line_19 $$ adress = protocol + host-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_22 $$ adress = host + shares-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_24 $$ adress = protocol + adress-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_26 $$ adress = adress + "/"-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_35 $$ final String serverFileLocation = adress.replaceAll(":", "_COLON_")[ FD ]
Line_19 $$ adress = protocol + host-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_22 $$ adress = host + shares-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_24 $$ adress = protocol + adress-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_26 $$ adress = adress + "/"-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_34 $$ adress = adress + "Packages.gz"-->Line_38 $$ final GZIPInputStream in = new GZIPInputStream(new ConnectToServer(pm).getInputStream(adress))[ FD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_23 $$ while (adress.contains("//")) adress = adress.replace("//", "/")[ FD ]
Line_23 $$ adress = adress.replace("//", "/")-->Line_23 $$ adress = adress.replace("//", "/")[ FD ]
