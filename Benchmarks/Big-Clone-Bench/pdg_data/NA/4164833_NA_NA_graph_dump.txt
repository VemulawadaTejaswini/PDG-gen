Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException [ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_3 $$ long now = new Date().getTime() / 1000[ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_4 $$ OutputStream deb = new FileOutputStream(debFile)[ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_5 $$ deb.write("!<arch>\n".getBytes())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_5 $$ deb.write("!<arch>\n".getBytes())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_6 $$ startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_6 $$ startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length())[ FD ]
Line_3 $$ long now = new Date().getTime() / 1000-->Line_6 $$ startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_7 $$ deb.write(DEBIAN_BINARY_CONTENT.getBytes())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_7 $$ deb.write(DEBIAN_BINARY_CONTENT.getBytes())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_8 $$ endFileEntry(deb, DEBIAN_BINARY_CONTENT.length())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_8 $$ endFileEntry(deb, DEBIAN_BINARY_CONTENT.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_9 $$ startFileEntry(deb, CONTROL_NAME, now, controlFile.length())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_9 $$ startFileEntry(deb, CONTROL_NAME, now, controlFile.length())[ FD ]
Line_3 $$ long now = new Date().getTime() / 1000-->Line_9 $$ startFileEntry(deb, CONTROL_NAME, now, controlFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_9 $$ startFileEntry(deb, CONTROL_NAME, now, controlFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_10 $$ FileInputStream control = new FileInputStream(controlFile)[ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_11 $$ byte[] buffer = new byte[1024][ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_12 $$ while (true) [ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException [ CD ]
Line_12 $$ while (true) -->Line_13 $$ int read = control.read(buffer)[ CD ]
Line_13 $$ int read = control.read(buffer)-->Line_13 $$ int read = control.read(buffer)[ CD ]
Line_10 $$ FileInputStream control = new FileInputStream(controlFile)-->Line_13 $$ int read = control.read(buffer)[ FD ]
Line_11 $$ byte[] buffer = new byte[1024]-->Line_13 $$ int read = control.read(buffer)[ FD ]
Line_12 $$ while (true) -->Line_14 $$ if (read == -1)[ CD ]
Line_13 $$ int read = control.read(buffer)-->Line_14 $$ if (read == -1)[ FD ]
Line_12 $$ while (true) -->Line_15 $$ deb.write(buffer, 0, read)[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_15 $$ deb.write(buffer, 0, read)[ FD ]
Line_11 $$ byte[] buffer = new byte[1024]-->Line_15 $$ deb.write(buffer, 0, read)[ FD ]
Line_13 $$ int read = control.read(buffer)-->Line_15 $$ deb.write(buffer, 0, read)[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_17 $$ control.close()[ CD ]
Line_10 $$ FileInputStream control = new FileInputStream(controlFile)-->Line_17 $$ control.close()[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_18 $$ endFileEntry(deb, controlFile.length())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_18 $$ endFileEntry(deb, controlFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_18 $$ endFileEntry(deb, controlFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_19 $$ startFileEntry(deb, DATA_NAME, now, dataFile.length())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_19 $$ startFileEntry(deb, DATA_NAME, now, dataFile.length())[ FD ]
Line_3 $$ long now = new Date().getTime() / 1000-->Line_19 $$ startFileEntry(deb, DATA_NAME, now, dataFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_19 $$ startFileEntry(deb, DATA_NAME, now, dataFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_20 $$ FileInputStream data = new FileInputStream(dataFile)[ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_21 $$ while (true) [ CD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException [ CD ]
Line_21 $$ while (true) -->Line_22 $$ int read = data.read(buffer)[ CD ]
Line_22 $$ int read = data.read(buffer)-->Line_22 $$ int read = data.read(buffer)[ CD ]
Line_20 $$ FileInputStream data = new FileInputStream(dataFile)-->Line_22 $$ int read = data.read(buffer)[ FD ]
Line_11 $$ byte[] buffer = new byte[1024]-->Line_22 $$ int read = data.read(buffer)[ FD ]
Line_21 $$ while (true) -->Line_23 $$ if (read == -1)[ CD ]
Line_22 $$ int read = data.read(buffer)-->Line_23 $$ if (read == -1)[ FD ]
Line_13 $$ int read = control.read(buffer)-->Line_23 $$ if (read == -1)[ FD ]
Line_21 $$ while (true) -->Line_24 $$ deb.write(buffer, 0, read)[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_24 $$ deb.write(buffer, 0, read)[ FD ]
Line_11 $$ byte[] buffer = new byte[1024]-->Line_24 $$ deb.write(buffer, 0, read)[ FD ]
Line_22 $$ int read = data.read(buffer)-->Line_24 $$ deb.write(buffer, 0, read)[ FD ]
Line_13 $$ int read = control.read(buffer)-->Line_24 $$ deb.write(buffer, 0, read)[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_26 $$ data.close()[ CD ]
Line_20 $$ FileInputStream data = new FileInputStream(dataFile)-->Line_26 $$ data.close()[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_27 $$ endFileEntry(deb, dataFile.length())[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_27 $$ endFileEntry(deb, dataFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_27 $$ endFileEntry(deb, dataFile.length())[ FD ]
Line_2 $$ public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException -->Line_28 $$ deb.close()[ CD ]
Line_4 $$ OutputStream deb = new FileOutputStream(debFile)-->Line_28 $$ deb.close()[ FD ]
Line_13 $$ int read = control.read(buffer)-->Line_14 $$ if (read == -1)[ FD ]
Line_13 $$ int read = control.read(buffer)-->Line_15 $$ deb.write(buffer, 0, read)[ FD ]
Line_22 $$ int read = data.read(buffer)-->Line_23 $$ if (read == -1)[ FD ]
Line_22 $$ int read = data.read(buffer)-->Line_24 $$ deb.write(buffer, 0, read)[ FD ]
