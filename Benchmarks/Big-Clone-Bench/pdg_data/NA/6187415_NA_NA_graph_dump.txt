Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException [ CD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_3 $$ Validate.notEmpty(filename)[ CD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_3 $$ Validate.notEmpty(filename)[ FD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_4 $$ File f = new File(filename)[ CD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_5 $$ if (f.exists()) [ CD ]
Line_4 $$ File f = new File(filename)-->Line_5 $$ if (f.exists()) [ FD ]
Line_5 $$ if (f.exists()) -->Line_5 $$ if (f.exists()) [ CD ]
Line_4 $$ File f = new File(filename)-->Line_5 $$ if (f.exists()) [ FD ]
Line_5 $$ if (f.exists()) -->Line_6 $$ this.originalFilename = f.getName()[ CD ]
Line_6 $$ this.originalFilename = f.getName()-->Line_6 $$ this.originalFilename = f.getName()[ CD ]
Line_4 $$ File f = new File(filename)-->Line_6 $$ this.originalFilename = f.getName()[ FD ]
Line_5 $$ if (f.exists()) -->Line_7 $$ return new FileInputStream(f)[ CD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)[ CD ]
Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)-->Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)[ CD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)[ FD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_10 $$ if (url == null) [ CD ]
Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)-->Line_10 $$ if (url == null) [ FD ]
Line_10 $$ if (url == null) -->Line_11 $$ if (!filename.startsWith("/")) [ CD ]
Line_11 $$ if (!filename.startsWith("/")) -->Line_11 $$ if (!filename.startsWith("/")) [ CD ]
Line_11 $$ if (!filename.startsWith("/")) -->Line_11 $$ if (!filename.startsWith("/")) [ CD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_11 $$ if (!filename.startsWith("/")) [ FD ]
Line_11 $$ if (!filename.startsWith("/")) -->Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)[ CD ]
Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)-->Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)[ FD ]
Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)-->Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)[ FD ]
Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)-->Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)[ CD ]
Line_11 $$ if (!filename.startsWith("/")) -->Line_13 $$ if (url == null) [ CD ]
Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)-->Line_13 $$ if (url == null) [ FD ]
Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)-->Line_13 $$ if (url == null) [ FD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_18 $$ this.originalFilename = filename[ CD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_18 $$ this.originalFilename = filename[ FD ]
Line_2 $$ protected InputStream acquireInputStream(String filename) throws IOException -->Line_19 $$ return url.openStream()[ CD ]
Line_19 $$ return url.openStream()-->Line_19 $$ return url.openStream()[ CD ]
Line_9 $$ URL url = getClass().getClassLoader().getResource(filename)-->Line_19 $$ return url.openStream()[ FD ]
Line_12 $$ url = getClass().getClassLoader().getResource("/" + filename)-->Line_19 $$ return url.openStream()[ FD ]
