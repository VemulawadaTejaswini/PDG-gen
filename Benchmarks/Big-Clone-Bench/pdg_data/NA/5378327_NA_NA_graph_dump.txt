Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException [ CD ]
Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException -->Line_3 $$ Map<String, Object> resultMap = new HashMap<String, Object>()[ CD ]
Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException -->Line_4 $$ URI uri = new URI(wwwurl)[ CD ]
Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException -->Line_5 $$ URL url = new URL(uri.toASCIIString())[ CD ]
Line_4 $$ URI uri = new URI(wwwurl)-->Line_5 $$ URL url = new URL(uri.toASCIIString())[ FD ]
Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException -->Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_5 $$ URL url = new URL(uri.toASCIIString())-->Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException -->Line_7 $$ conn.setReadTimeout(10 * 1000)[ CD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_7 $$ conn.setReadTimeout(10 * 1000)[ FD ]
Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException -->Line_8 $$ HttpURLConnection.setFollowRedirects(true)[ CD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_10 $$ conn.setRequestMethod("GET")[ FD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_11 $$ conn.setRequestProperty("User-Agent", "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.2.17) Gecko/20110421 Red Hat/3.6-1.el5_6 Firefox/3.6.17")[ FD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_12 $$ for (String key : conn.getHeaderFields().keySet()) [ FD ]
Line_13 $$ List<String> headerInfo = conn.getHeaderFields().get(key)-->Line_13 $$ List<String> headerInfo = conn.getHeaderFields().get(key)[ CD ]
Line_12 $$ for (String key : conn.getHeaderFields().keySet()) -->Line_13 $$ List<String> headerInfo = conn.getHeaderFields().get(key)[ FD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_13 $$ List<String> headerInfo = conn.getHeaderFields().get(key)[ FD ]
Line_13 $$ List<String> headerInfo = conn.getHeaderFields().get(key)-->Line_14 $$ if (headerInfo.size() > 0) [ FD ]
Line_14 $$ if (headerInfo.size() > 0) -->Line_15 $$ resultMap.put(key, headerInfo.get(0))[ CD ]
Line_3 $$ Map<String, Object> resultMap = new HashMap<String, Object>()-->Line_15 $$ resultMap.put(key, headerInfo.get(0))[ FD ]
Line_12 $$ for (String key : conn.getHeaderFields().keySet()) -->Line_15 $$ resultMap.put(key, headerInfo.get(0))[ FD ]
Line_13 $$ List<String> headerInfo = conn.getHeaderFields().get(key)-->Line_15 $$ resultMap.put(key, headerInfo.get(0))[ FD ]
Line_18 $$ String contentType = conn.getContentType()-->Line_18 $$ String contentType = conn.getContentType()[ CD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_18 $$ String contentType = conn.getContentType()[ FD ]
Line_19 $$ if (!(contentType == null || contentType.toLowerCase().contains("text") || contentType.toLowerCase().contains("html"))) -->Line_19 $$ if (!(contentType == null || contentType.toLowerCase().contains("text") || contentType.toLowerCase().contains("html"))) [ CD ]
Line_18 $$ String contentType = conn.getContentType()-->Line_19 $$ if (!(contentType == null || contentType.toLowerCase().contains("text") || contentType.toLowerCase().contains("html"))) [ FD ]
Line_18 $$ String contentType = conn.getContentType()-->Line_19 $$ if (!(contentType == null || contentType.toLowerCase().contains("text") || contentType.toLowerCase().contains("html"))) [ FD ]
Line_19 $$ if (!(contentType == null || contentType.toLowerCase().contains("text") || contentType.toLowerCase().contains("html"))) -->Line_20 $$ return resultMap[ CD ]
Line_23 $$ InputStream instream = conn.getInputStream()-->Line_23 $$ InputStream instream = conn.getInputStream()[ CD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_23 $$ InputStream instream = conn.getInputStream()[ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_29 $$ while ((readSize = instream.read(buffer)) > 0) [ FD ]
Line_25 $$ int readSize = 0-->Line_29 $$ while ((readSize = instream.read(buffer)) > 0) [ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_29 $$ while ((readSize = instream.read(buffer)) > 0) [ CD ]
Line_23 $$ InputStream instream = conn.getInputStream()-->Line_29 $$ while ((readSize = instream.read(buffer)) > 0) [ FD ]
Line_28 $$ byte[] buffer = new byte[1024]-->Line_29 $$ while ((readSize = instream.read(buffer)) > 0) [ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_30 $$ outstream.write(buffer, 0, readSize)[ CD ]
Line_22 $$ ByteArrayOutputStream outstream = new ByteArrayOutputStream()-->Line_30 $$ outstream.write(buffer, 0, readSize)[ FD ]
Line_28 $$ byte[] buffer = new byte[1024]-->Line_30 $$ outstream.write(buffer, 0, readSize)[ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_30 $$ outstream.write(buffer, 0, readSize)[ FD ]
Line_25 $$ int readSize = 0-->Line_30 $$ outstream.write(buffer, 0, readSize)[ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_31 $$ totalSize += readSize[ CD ]
Line_31 $$ totalSize += readSize-->Line_31 $$ totalSize += readSize[ FD ]
Line_26 $$ int totalSize = 0-->Line_31 $$ totalSize += readSize[ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_31 $$ totalSize += readSize[ FD ]
Line_25 $$ int readSize = 0-->Line_31 $$ totalSize += readSize[ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_32 $$ if (totalSize >= MAX_CONTENT_SIZE) [ CD ]
Line_31 $$ totalSize += readSize-->Line_32 $$ if (totalSize >= MAX_CONTENT_SIZE) [ FD ]
Line_26 $$ int totalSize = 0-->Line_32 $$ if (totalSize >= MAX_CONTENT_SIZE) [ FD ]
Line_32 $$ if (totalSize >= MAX_CONTENT_SIZE) -->Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()[ CD ]
Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()-->Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()[ FD ]
Line_27 $$ byte[] contentByte = null-->Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()[ FD ]
Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()-->Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()[ CD ]
Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()-->Line_36 $$ if (contentByte == null) [ FD ]
Line_27 $$ byte[] contentByte = null-->Line_36 $$ if (contentByte == null) [ FD ]
Line_36 $$ if (contentByte == null) -->Line_37 $$ contentByte = outstream.toByteArray()[ CD ]
Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()-->Line_37 $$ contentByte = outstream.toByteArray()[ FD ]
Line_27 $$ byte[] contentByte = null-->Line_37 $$ contentByte = outstream.toByteArray()[ FD ]
Line_37 $$ contentByte = outstream.toByteArray()-->Line_37 $$ contentByte = outstream.toByteArray()[ FD ]
Line_37 $$ contentByte = outstream.toByteArray()-->Line_37 $$ contentByte = outstream.toByteArray()[ CD ]
Line_22 $$ ByteArrayOutputStream outstream = new ByteArrayOutputStream()-->Line_37 $$ contentByte = outstream.toByteArray()[ FD ]
Line_23 $$ InputStream instream = conn.getInputStream()-->Line_39 $$ instream.close()[ FD ]
Line_22 $$ ByteArrayOutputStream outstream = new ByteArrayOutputStream()-->Line_40 $$ outstream.close()[ FD ]
Line_3 $$ Map<String, Object> resultMap = new HashMap<String, Object>()-->Line_41 $$ resultMap.put(contentByteField, contentByte)[ FD ]
Line_33 $$ contentByte = ("[FAILD] content size is larger than " + MAX_CONTENT_SIZE + " byte.").getBytes()-->Line_41 $$ resultMap.put(contentByteField, contentByte)[ FD ]
Line_27 $$ byte[] contentByte = null-->Line_41 $$ resultMap.put(contentByteField, contentByte)[ FD ]
Line_37 $$ contentByte = outstream.toByteArray()-->Line_41 $$ resultMap.put(contentByteField, contentByte)[ FD ]
Line_2 $$ public static synchronized Map<String, Object> getURLContentMap(String wwwurl) throws IOException, URISyntaxException -->Line_45 $$ return resultMap[ CD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_30 $$ outstream.write(buffer, 0, readSize)[ FD ]
Line_29 $$ while ((readSize = instream.read(buffer)) > 0) -->Line_31 $$ totalSize += readSize[ FD ]
Line_31 $$ totalSize += readSize-->Line_32 $$ if (totalSize >= MAX_CONTENT_SIZE) [ FD ]
