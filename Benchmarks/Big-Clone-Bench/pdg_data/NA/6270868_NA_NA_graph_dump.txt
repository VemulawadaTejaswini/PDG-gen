Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String shaEncrypt(final String txt) [ CD ]
Line_2 $$ public static String shaEncrypt(final String txt) -->Line_3 $$ String enTxt = txt[ CD ]
Line_2 $$ public static String shaEncrypt(final String txt) -->Line_4 $$ MessageDigest md = null[ CD ]
Line_4 $$ MessageDigest md = null-->Line_6 $$ md = MessageDigest.getInstance("SHA-1")[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_6 $$ md = MessageDigest.getInstance("SHA-1")[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_6 $$ md = MessageDigest.getInstance("SHA-1")[ CD ]
Line_2 $$ public static String shaEncrypt(final String txt) -->Line_10 $$ if (null != md) [ CD ]
Line_4 $$ MessageDigest md = null-->Line_10 $$ if (null != md) [ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_10 $$ if (null != md) [ FD ]
Line_10 $$ if (null != md) -->Line_11 $$ byte[] shahash = new byte[32][ CD ]
Line_4 $$ MessageDigest md = null-->Line_13 $$ md.update(txt.getBytes("UTF-8"), 0, txt.length())[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_13 $$ md.update(txt.getBytes("UTF-8"), 0, txt.length())[ FD ]
Line_2 $$ public static String shaEncrypt(final String txt) -->Line_13 $$ md.update(txt.getBytes("UTF-8"), 0, txt.length())[ FD ]
Line_2 $$ public static String shaEncrypt(final String txt) -->Line_13 $$ md.update(txt.getBytes("UTF-8"), 0, txt.length())[ FD ]
Line_10 $$ if (null != md) -->Line_17 $$ shahash = md.digest()[ CD ]
Line_11 $$ byte[] shahash = new byte[32]-->Line_17 $$ shahash = md.digest()[ FD ]
Line_17 $$ shahash = md.digest()-->Line_17 $$ shahash = md.digest()[ FD ]
Line_17 $$ shahash = md.digest()-->Line_17 $$ shahash = md.digest()[ CD ]
Line_4 $$ MessageDigest md = null-->Line_17 $$ shahash = md.digest()[ FD ]
Line_6 $$ md = MessageDigest.getInstance("SHA-1")-->Line_17 $$ shahash = md.digest()[ FD ]
Line_10 $$ if (null != md) -->Line_18 $$ StringBuffer md5StrBuff = new StringBuffer()[ CD ]
Line_10 $$ if (null != md) -->Line_19 $$ for (int i = 0; i < shahash.length; i++) [ CD ]
Line_10 $$ if (null != md) -->Line_10 $$ if (null != md) [ CD ]
Line_19 $$ for (int i = 0; i < shahash.length; i++) -->Line_19 $$ for (int i = 0; i < shahash.length; i++) [ CD ]
Line_19 $$ for (int i = 0; i < shahash.length; i++) -->Line_19 $$ for (int i = 0; i < shahash.length; i++) [ CD ]
Line_19 $$ for (int i = 0; i < shahash.length; i++) -->Line_19 $$ for (int i = 0; i < shahash.length; i++) [ FD ]
Line_19 $$ for (int i = 0; i < shahash.length; i++) -->Line_20 $$ if (Integer.toHexString(0xFF & shahash[i]).length() == 1) [ CD ]
Line_20 $$ if (Integer.toHexString(0xFF & shahash[i]).length() == 1) -->Line_21 $$ md5StrBuff.append("0").append(Integer.toHexString(0xFF & shahash[i]))[ CD ]
Line_18 $$ StringBuffer md5StrBuff = new StringBuffer()-->Line_21 $$ md5StrBuff.append("0").append(Integer.toHexString(0xFF & shahash[i]))[ FD ]
Line_20 $$ if (Integer.toHexString(0xFF & shahash[i]).length() == 1) -->Line_23 $$ md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]))[ CD ]
Line_18 $$ StringBuffer md5StrBuff = new StringBuffer()-->Line_23 $$ md5StrBuff.append(Integer.toHexString(0xFF & shahash[i]))[ FD ]
Line_10 $$ if (null != md) -->Line_26 $$ enTxt = md5StrBuff.toString()[ CD ]
Line_3 $$ String enTxt = txt-->Line_26 $$ enTxt = md5StrBuff.toString()[ FD ]
Line_26 $$ enTxt = md5StrBuff.toString()-->Line_26 $$ enTxt = md5StrBuff.toString()[ FD ]
Line_26 $$ enTxt = md5StrBuff.toString()-->Line_26 $$ enTxt = md5StrBuff.toString()[ CD ]
Line_18 $$ StringBuffer md5StrBuff = new StringBuffer()-->Line_26 $$ enTxt = md5StrBuff.toString()[ FD ]
Line_2 $$ public static String shaEncrypt(final String txt) -->Line_28 $$ return enTxt[ CD ]
Line_19 $$ for (int i = 0; i < shahash.length; i++) -->Line_19 $$ for (int i = 0; i < shahash.length; i++) [ FD ]
Line_19 $$ for (int i = 0; i < shahash.length; i++) -->Line_19 $$ for (int i = 0; i < shahash.length; i++) [ FD ]
Line_19 $$ for (int i = 0; i < shahash.length; i++) -->Line_19 $$ for (int i = 0; i < shahash.length; i++) [ FD ]
