Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException [ CD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_3 $$ ParametersImpl params = new ParametersImpl()[ CD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_4 $$ String query = null[ CD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_5 $$ if (http.getRequestMethod().equalsIgnoreCase("GET")) [ CD ]
Line_5 $$ if (http.getRequestMethod().equalsIgnoreCase("GET")) -->Line_5 $$ if (http.getRequestMethod().equalsIgnoreCase("GET")) [ CD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_5 $$ if (http.getRequestMethod().equalsIgnoreCase("GET")) [ FD ]
Line_5 $$ if (http.getRequestMethod().equalsIgnoreCase("GET")) -->Line_6 $$ query = http.getRequestURI().getRawQuery()[ CD ]
Line_4 $$ String query = null-->Line_6 $$ query = http.getRequestURI().getRawQuery()[ FD ]
Line_6 $$ query = http.getRequestURI().getRawQuery()-->Line_6 $$ query = http.getRequestURI().getRawQuery()[ FD ]
Line_6 $$ query = http.getRequestURI().getRawQuery()-->Line_6 $$ query = http.getRequestURI().getRawQuery()[ CD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_6 $$ query = http.getRequestURI().getRawQuery()[ FD ]
Line_5 $$ if (http.getRequestMethod().equalsIgnoreCase("GET")) -->Line_7 $$ if (http.getRequestMethod().equalsIgnoreCase("POST")) [ CD ]
Line_7 $$ if (http.getRequestMethod().equalsIgnoreCase("POST")) -->Line_7 $$ if (http.getRequestMethod().equalsIgnoreCase("POST")) [ CD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_7 $$ if (http.getRequestMethod().equalsIgnoreCase("POST")) [ FD ]
Line_7 $$ if (http.getRequestMethod().equalsIgnoreCase("POST")) -->Line_8 $$ InputStream in = new MaxInputStream(http.getRequestBody())[ CD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_8 $$ InputStream in = new MaxInputStream(http.getRequestBody())[ FD ]
Line_7 $$ if (http.getRequestMethod().equalsIgnoreCase("POST")) -->Line_9 $$ if (in != null) [ CD ]
Line_8 $$ InputStream in = new MaxInputStream(http.getRequestBody())-->Line_9 $$ if (in != null) [ FD ]
Line_9 $$ if (in != null) -->Line_10 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()[ CD ]
Line_9 $$ if (in != null) -->Line_11 $$ IOUtils.copyTo(in, bytes)[ CD ]
Line_8 $$ InputStream in = new MaxInputStream(http.getRequestBody())-->Line_11 $$ IOUtils.copyTo(in, bytes)[ FD ]
Line_10 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_11 $$ IOUtils.copyTo(in, bytes)[ FD ]
Line_9 $$ if (in != null) -->Line_12 $$ query = new String(bytes.toByteArray())[ CD ]
Line_4 $$ String query = null-->Line_12 $$ query = new String(bytes.toByteArray())[ FD ]
Line_6 $$ query = http.getRequestURI().getRawQuery()-->Line_12 $$ query = new String(bytes.toByteArray())[ FD ]
Line_12 $$ query = new String(bytes.toByteArray())-->Line_12 $$ query = new String(bytes.toByteArray())[ FD ]
Line_10 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_12 $$ query = new String(bytes.toByteArray())[ FD ]
Line_9 $$ if (in != null) -->Line_13 $$ in.close()[ CD ]
Line_8 $$ InputStream in = new MaxInputStream(http.getRequestBody())-->Line_13 $$ in.close()[ FD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_16 $$ throw new IOException("Method not supported " + http.getRequestMethod())[ FD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_18 $$ if (query != null) [ CD ]
Line_4 $$ String query = null-->Line_18 $$ if (query != null) [ FD ]
Line_6 $$ query = http.getRequestURI().getRawQuery()-->Line_18 $$ if (query != null) [ FD ]
Line_12 $$ query = new String(bytes.toByteArray())-->Line_18 $$ if (query != null) [ FD ]
Line_4 $$ String query = null-->Line_19 $$ for (String s : query.split("[&]")) [ FD ]
Line_6 $$ query = http.getRequestURI().getRawQuery()-->Line_19 $$ for (String s : query.split("[&]")) [ FD ]
Line_12 $$ query = new String(bytes.toByteArray())-->Line_19 $$ for (String s : query.split("[&]")) [ FD ]
Line_19 $$ for (String s : query.split("[&]")) -->Line_20 $$ s = s.replace('+', ' ')[ FD ]
Line_20 $$ s = s.replace('+', ' ')-->Line_20 $$ s = s.replace('+', ' ')[ FD ]
Line_20 $$ s = s.replace('+', ' ')-->Line_20 $$ s = s.replace('+', ' ')[ CD ]
Line_19 $$ for (String s : query.split("[&]")) -->Line_20 $$ s = s.replace('+', ' ')[ FD ]
Line_20 $$ s = s.replace('+', ' ')-->Line_20 $$ s = s.replace('+', ' ')[ FD ]
Line_21 $$ int eq = s.indexOf('=')-->Line_21 $$ int eq = s.indexOf('=')[ CD ]
Line_19 $$ for (String s : query.split("[&]")) -->Line_21 $$ int eq = s.indexOf('=')[ FD ]
Line_20 $$ s = s.replace('+', ' ')-->Line_21 $$ int eq = s.indexOf('=')[ FD ]
Line_21 $$ int eq = s.indexOf('=')-->Line_22 $$ if (eq > 0) [ FD ]
Line_22 $$ if (eq > 0) -->Line_23 $$ params.add(URLDecoder.decode(s.substring(0, eq), "UTF-8"), URLDecoder.decode(s.substring(eq + 1), "UTF-8"))[ CD ]
Line_3 $$ ParametersImpl params = new ParametersImpl()-->Line_23 $$ params.add(URLDecoder.decode(s.substring(0, eq), "UTF-8"), URLDecoder.decode(s.substring(eq + 1), "UTF-8"))[ FD ]
Line_19 $$ for (String s : query.split("[&]")) -->Line_23 $$ params.add(URLDecoder.decode(s.substring(0, eq), "UTF-8"), URLDecoder.decode(s.substring(eq + 1), "UTF-8"))[ FD ]
Line_20 $$ s = s.replace('+', ' ')-->Line_23 $$ params.add(URLDecoder.decode(s.substring(0, eq), "UTF-8"), URLDecoder.decode(s.substring(eq + 1), "UTF-8"))[ FD ]
Line_21 $$ int eq = s.indexOf('=')-->Line_23 $$ params.add(URLDecoder.decode(s.substring(0, eq), "UTF-8"), URLDecoder.decode(s.substring(eq + 1), "UTF-8"))[ FD ]
Line_19 $$ for (String s : query.split("[&]")) -->Line_23 $$ params.add(URLDecoder.decode(s.substring(0, eq), "UTF-8"), URLDecoder.decode(s.substring(eq + 1), "UTF-8"))[ FD ]
Line_20 $$ s = s.replace('+', ' ')-->Line_23 $$ params.add(URLDecoder.decode(s.substring(0, eq), "UTF-8"), URLDecoder.decode(s.substring(eq + 1), "UTF-8"))[ FD ]
Line_2 $$ public Parameters getParameters(HttpExchange http) throws IOException -->Line_27 $$ return params[ CD ]
