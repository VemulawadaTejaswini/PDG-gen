Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException [ CD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_3 $$ if (outputs == null) [ CD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_3 $$ if (outputs == null) [ FD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_6 $$ if (inputs == null) [ CD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_6 $$ if (inputs == null) [ FD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_9 $$ ZipOutputStream zipoutputs = null[ CD ]
Line_9 $$ ZipOutputStream zipoutputs = null-->Line_11 $$ zipoutputs = new ZipOutputStream(outputs)[ FD ]
Line_11 $$ zipoutputs = new ZipOutputStream(outputs)-->Line_11 $$ zipoutputs = new ZipOutputStream(outputs)[ FD ]
Line_9 $$ ZipOutputStream zipoutputs = null-->Line_12 $$ zipoutputs.putNextEntry(new ZipEntry("default"))[ FD ]
Line_11 $$ zipoutputs = new ZipOutputStream(outputs)-->Line_12 $$ zipoutputs.putNextEntry(new ZipEntry("default"))[ FD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_13 $$ IOUtils.copy(inputs, zipoutputs)[ FD ]
Line_9 $$ ZipOutputStream zipoutputs = null-->Line_13 $$ IOUtils.copy(inputs, zipoutputs)[ FD ]
Line_11 $$ zipoutputs = new ZipOutputStream(outputs)-->Line_13 $$ IOUtils.copy(inputs, zipoutputs)[ FD ]
Line_9 $$ ZipOutputStream zipoutputs = null-->Line_18 $$ if (zipoutputs != null) [ FD ]
Line_11 $$ zipoutputs = new ZipOutputStream(outputs)-->Line_18 $$ if (zipoutputs != null) [ FD ]
Line_18 $$ if (zipoutputs != null) -->Line_19 $$ zipoutputs.close()[ CD ]
Line_9 $$ ZipOutputStream zipoutputs = null-->Line_19 $$ zipoutputs.close()[ FD ]
Line_11 $$ zipoutputs = new ZipOutputStream(outputs)-->Line_19 $$ zipoutputs.close()[ FD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_21 $$ if (inputs != null) [ FD ]
Line_21 $$ if (inputs != null) -->Line_22 $$ inputs.close()[ CD ]
Line_2 $$ protected void copy(InputStream inputs, OutputStream outputs) throws IOException -->Line_22 $$ inputs.close()[ FD ]
