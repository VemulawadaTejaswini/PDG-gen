Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException [ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_3 $$ if (c_cache.containsKey(name))[ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_3 $$ if (c_cache.containsKey(name))[ FD ]
Line_3 $$ if (c_cache.containsKey(name))-->Line_3 $$ if (c_cache.containsKey(name))[ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_3 $$ if (c_cache.containsKey(name))[ FD ]
Line_3 $$ if (c_cache.containsKey(name))-->Line_3 $$ return[ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_4 $$ CustomHandler handler = null[ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_5 $$ URL url = null[ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_6 $$ String validatorFiles = (String) Config.getProperty(Config.PROP_RULES_ENGINE_VALIDATORS_URL_LIST, XML_FILE)[ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) [ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException [ CD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) [ CD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) [ CD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_8 $$ String validatorFile = strtknzr.nextToken()[ CD ]
Line_8 $$ String validatorFile = strtknzr.nextToken()-->Line_8 $$ String validatorFile = strtknzr.nextToken()[ CD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_8 $$ String validatorFile = strtknzr.nextToken()[ FD ]
Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)-->Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)[ FD ]
Line_5 $$ URL url = null-->Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)[ FD ]
Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)-->Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)[ CD ]
Line_8 $$ String validatorFile = strtknzr.nextToken()-->Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)[ FD ]
Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)-->Line_12 $$ url = null[ FD ]
Line_12 $$ url = null-->Line_12 $$ url = null[ FD ]
Line_5 $$ URL url = null-->Line_12 $$ url = null[ FD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_14 $$ if (url == null)[ CD ]
Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)-->Line_14 $$ if (url == null)[ FD ]
Line_12 $$ url = null-->Line_14 $$ if (url == null)[ FD ]
Line_5 $$ URL url = null-->Line_14 $$ if (url == null)[ FD ]
Line_16 $$ handler = new CustomHandler(name)-->Line_16 $$ handler = new CustomHandler(name)[ FD ]
Line_4 $$ CustomHandler handler = null-->Line_16 $$ handler = new CustomHandler(name)[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)[ CD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_18 $$ reader.setContentHandler(handler)[ FD ]
Line_16 $$ handler = new CustomHandler(name)-->Line_18 $$ reader.setContentHandler(handler)[ FD ]
Line_4 $$ CustomHandler handler = null-->Line_18 $$ reader.setContentHandler(handler)[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_19 $$ reader.setEntityResolver(new DefaultEntityResolver())[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_20 $$ reader.setErrorHandler(new DefaultErrorHandler())[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_21 $$ reader.parse(new InputSource(url.openStream()))[ FD ]
Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)-->Line_21 $$ reader.parse(new InputSource(url.openStream()))[ FD ]
Line_12 $$ url = null-->Line_21 $$ reader.parse(new InputSource(url.openStream()))[ FD ]
Line_5 $$ URL url = null-->Line_21 $$ reader.parse(new InputSource(url.openStream()))[ FD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_27 $$ if (handler.getFieldValidatorMetaData() != null)[ CD ]
Line_16 $$ handler = new CustomHandler(name)-->Line_27 $$ if (handler.getFieldValidatorMetaData() != null)[ FD ]
Line_4 $$ CustomHandler handler = null-->Line_27 $$ if (handler.getFieldValidatorMetaData() != null)[ FD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_29 $$ c_cache.put(name, handler != null ? handler.getFieldValidatorMetaData() : null)[ CD ]
Line_2 $$ private static synchronized void find(String name) throws SAXException, IOException -->Line_29 $$ c_cache.put(name, handler != null ? handler.getFieldValidatorMetaData() : null)[ FD ]
Line_16 $$ handler = new CustomHandler(name)-->Line_29 $$ c_cache.put(name, handler != null ? handler.getFieldValidatorMetaData() : null)[ FD ]
Line_4 $$ CustomHandler handler = null-->Line_29 $$ c_cache.put(name, handler != null ? handler.getFieldValidatorMetaData() : null)[ FD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) [ FD ]
Line_7 $$ for (StringTokenizer strtknzr = new StringTokenizer(validatorFiles, ","); strtknzr.hasMoreTokens(); ) -->Line_8 $$ String validatorFile = strtknzr.nextToken()[ FD ]
Line_8 $$ String validatorFile = strtknzr.nextToken()-->Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)[ FD ]
Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)-->Line_14 $$ if (url == null)[ FD ]
Line_12 $$ url = null-->Line_14 $$ if (url == null)[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_18 $$ reader.setContentHandler(handler)[ FD ]
Line_16 $$ handler = new CustomHandler(name)-->Line_18 $$ reader.setContentHandler(handler)[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_19 $$ reader.setEntityResolver(new DefaultEntityResolver())[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_20 $$ reader.setErrorHandler(new DefaultErrorHandler())[ FD ]
Line_17 $$ XMLReader reader = XMLReaderFactory.createXMLReader(PARSER_NAME)-->Line_21 $$ reader.parse(new InputSource(url.openStream()))[ FD ]
Line_10 $$ url = URLHelper.newExtendedURL(validatorFile)-->Line_21 $$ reader.parse(new InputSource(url.openStream()))[ FD ]
Line_12 $$ url = null-->Line_21 $$ reader.parse(new InputSource(url.openStream()))[ FD ]
Line_16 $$ handler = new CustomHandler(name)-->Line_27 $$ if (handler.getFieldValidatorMetaData() != null)[ FD ]
