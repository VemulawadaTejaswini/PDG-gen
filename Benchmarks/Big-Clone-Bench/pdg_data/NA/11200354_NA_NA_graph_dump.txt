Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private boolean authenticate(String reply) [ CD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_3 $$ String user = reply.substring(0, reply.indexOf(" "))[ CD ]
Line_3 $$ String user = reply.substring(0, reply.indexOf(" "))-->Line_3 $$ String user = reply.substring(0, reply.indexOf(" "))[ CD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_3 $$ String user = reply.substring(0, reply.indexOf(" "))[ FD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_3 $$ String user = reply.substring(0, reply.indexOf(" "))[ FD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_4 $$ String resp = reply.substring(reply.indexOf(" ") + 1)[ CD ]
Line_4 $$ String resp = reply.substring(reply.indexOf(" ") + 1)-->Line_4 $$ String resp = reply.substring(reply.indexOf(" ") + 1)[ CD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_4 $$ String resp = reply.substring(reply.indexOf(" ") + 1)[ FD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_4 $$ String resp = reply.substring(reply.indexOf(" ") + 1)[ FD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_5 $$ if (!module.users.contains(user)) [ CD ]
Line_5 $$ if (!module.users.contains(user)) -->Line_5 $$ if (!module.users.contains(user)) [ CD ]
Line_5 $$ if (!module.users.contains(user)) -->Line_5 $$ if (!module.users.contains(user)) [ CD ]
Line_3 $$ String user = reply.substring(0, reply.indexOf(" "))-->Line_5 $$ if (!module.users.contains(user)) [ FD ]
Line_5 $$ if (!module.users.contains(user)) -->Line_7 $$ return false[ CD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_12 $$ while ((line = secrets.readLine()) != null) [ FD ]
Line_11 $$ String line-->Line_12 $$ while ((line = secrets.readLine()) != null) [ FD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_12 $$ while ((line = secrets.readLine()) != null) [ CD ]
Line_10 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile))-->Line_12 $$ while ((line = secrets.readLine()) != null) [ FD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_13 $$ if (line.startsWith(user + ":")) [ CD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_13 $$ if (line.startsWith(user + ":")) [ FD ]
Line_11 $$ String line-->Line_13 $$ if (line.startsWith(user + ":")) [ FD ]
Line_13 $$ if (line.startsWith(user + ":")) -->Line_13 $$ if (line.startsWith(user + ":")) [ CD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_13 $$ if (line.startsWith(user + ":")) [ FD ]
Line_11 $$ String line-->Line_13 $$ if (line.startsWith(user + ":")) [ FD ]
Line_13 $$ if (line.startsWith(user + ":")) -->Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")[ CD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")[ CD ]
Line_13 $$ if (line.startsWith(user + ":")) -->Line_15 $$ md4.update(new byte[4])[ CD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_15 $$ md4.update(new byte[4])[ FD ]
Line_13 $$ if (line.startsWith(user + ":")) -->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ CD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_11 $$ String line-->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_11 $$ String line-->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_13 $$ if (line.startsWith(user + ":")) -->Line_17 $$ md4.update(challenge.getBytes("US-ASCII"))[ CD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_17 $$ md4.update(challenge.getBytes("US-ASCII"))[ FD ]
Line_13 $$ if (line.startsWith(user + ":")) -->Line_18 $$ String hash = Util.base64(md4.digest())[ CD ]
Line_18 $$ String hash = Util.base64(md4.digest())-->Line_18 $$ String hash = Util.base64(md4.digest())[ CD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_18 $$ String hash = Util.base64(md4.digest())[ FD ]
Line_13 $$ if (line.startsWith(user + ":")) -->Line_19 $$ if (hash.equals(resp)) [ CD ]
Line_18 $$ String hash = Util.base64(md4.digest())-->Line_19 $$ if (hash.equals(resp)) [ FD ]
Line_4 $$ String resp = reply.substring(reply.indexOf(" ") + 1)-->Line_19 $$ if (hash.equals(resp)) [ FD ]
Line_19 $$ if (hash.equals(resp)) -->Line_19 $$ if (hash.equals(resp)) [ CD ]
Line_18 $$ String hash = Util.base64(md4.digest())-->Line_19 $$ if (hash.equals(resp)) [ FD ]
Line_4 $$ String resp = reply.substring(reply.indexOf(" ") + 1)-->Line_19 $$ if (hash.equals(resp)) [ FD ]
Line_19 $$ if (hash.equals(resp)) -->Line_20 $$ secrets.close()[ CD ]
Line_10 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile))-->Line_20 $$ secrets.close()[ FD ]
Line_19 $$ if (hash.equals(resp)) -->Line_21 $$ return true[ CD ]
Line_10 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile))-->Line_25 $$ secrets.close()[ FD ]
Line_2 $$ private boolean authenticate(String reply) -->Line_32 $$ return false[ CD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_13 $$ if (line.startsWith(user + ":")) [ FD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_13 $$ if (line.startsWith(user + ":")) [ FD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_15 $$ md4.update(new byte[4])[ FD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_12 $$ while ((line = secrets.readLine()) != null) -->Line_16 $$ md4.update(line.substring(line.indexOf(":") + 1).getBytes("US-ASCII"))[ FD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_17 $$ md4.update(challenge.getBytes("US-ASCII"))[ FD ]
Line_14 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4")-->Line_18 $$ String hash = Util.base64(md4.digest())[ FD ]
Line_18 $$ String hash = Util.base64(md4.digest())-->Line_19 $$ if (hash.equals(resp)) [ FD ]
Line_18 $$ String hash = Util.base64(md4.digest())-->Line_19 $$ if (hash.equals(resp)) [ FD ]
