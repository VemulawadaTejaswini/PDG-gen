Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void copyFile(File sourceFile, File destFile) [ CD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_3 $$ FileChannel in = null[ CD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_4 $$ FileChannel out = null[ CD ]
Line_6 $$ if (!verifyOrCreateParentPath(destFile.getParentFile())) -->Line_6 $$ if (!verifyOrCreateParentPath(destFile.getParentFile())) [ CD ]
Line_6 $$ if (!verifyOrCreateParentPath(destFile.getParentFile())) -->Line_6 $$ if (!verifyOrCreateParentPath(destFile.getParentFile())) [ CD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_6 $$ if (!verifyOrCreateParentPath(destFile.getParentFile())) [ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_7 $$ throw new IOException("Parent directory path " + destFile.getAbsolutePath() + " did not exist and could not be created")[ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_9 $$ if (destFile.exists() || destFile.createNewFile()) [ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_9 $$ if (destFile.exists() || destFile.createNewFile()) [ FD ]
Line_9 $$ if (destFile.exists() || destFile.createNewFile()) -->Line_10 $$ in = new FileInputStream(sourceFile).getChannel()[ CD ]
Line_3 $$ FileChannel in = null-->Line_10 $$ in = new FileInputStream(sourceFile).getChannel()[ FD ]
Line_10 $$ in = new FileInputStream(sourceFile).getChannel()-->Line_10 $$ in = new FileInputStream(sourceFile).getChannel()[ FD ]
Line_10 $$ in = new FileInputStream(sourceFile).getChannel()-->Line_10 $$ in = new FileInputStream(sourceFile).getChannel()[ CD ]
Line_9 $$ if (destFile.exists() || destFile.createNewFile()) -->Line_11 $$ out = new FileOutputStream(destFile).getChannel()[ CD ]
Line_4 $$ FileChannel out = null-->Line_11 $$ out = new FileOutputStream(destFile).getChannel()[ FD ]
Line_11 $$ out = new FileOutputStream(destFile).getChannel()-->Line_11 $$ out = new FileOutputStream(destFile).getChannel()[ FD ]
Line_11 $$ out = new FileOutputStream(destFile).getChannel()-->Line_11 $$ out = new FileOutputStream(destFile).getChannel()[ CD ]
Line_9 $$ if (destFile.exists() || destFile.createNewFile()) -->Line_12 $$ in.transferTo(0, in.size(), out)[ CD ]
Line_3 $$ FileChannel in = null-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_10 $$ in = new FileInputStream(sourceFile).getChannel()-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_4 $$ FileChannel out = null-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_11 $$ out = new FileOutputStream(destFile).getChannel()-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_3 $$ FileChannel in = null-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_10 $$ in = new FileInputStream(sourceFile).getChannel()-->Line_12 $$ in.transferTo(0, in.size(), out)[ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_14 $$ throw new IOException("Couldn't create file for " + destFile.getAbsolutePath())[ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_17 $$ if (destFile.exists() && destFile.length() < sourceFile.length()) [ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_17 $$ if (destFile.exists() && destFile.length() < sourceFile.length()) [ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_17 $$ if (destFile.exists() && destFile.length() < sourceFile.length()) [ FD ]
Line_17 $$ if (destFile.exists() && destFile.length() < sourceFile.length()) -->Line_18 $$ destFile.delete()[ CD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_18 $$ destFile.delete()[ FD ]
Line_3 $$ FileChannel in = null-->Line_23 $$ in.close()[ FD ]
Line_10 $$ in = new FileInputStream(sourceFile).getChannel()-->Line_23 $$ in.close()[ FD ]
Line_4 $$ FileChannel out = null-->Line_27 $$ out.close()[ FD ]
Line_11 $$ out = new FileOutputStream(destFile).getChannel()-->Line_27 $$ out.close()[ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_30 $$ destFile.setLastModified(sourceFile.lastModified())[ FD ]
Line_2 $$ protected void copyFile(File sourceFile, File destFile) -->Line_30 $$ destFile.setLastModified(sourceFile.lastModified())[ FD ]
