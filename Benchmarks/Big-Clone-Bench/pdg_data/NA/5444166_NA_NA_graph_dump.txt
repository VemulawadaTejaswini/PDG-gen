Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException [ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_3 $$ if (type.javaNativeSupport()) [ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_3 $$ if (type.javaNativeSupport()) [ FD ]
Line_3 $$ if (type.javaNativeSupport()) -->Line_3 $$ if (type.javaNativeSupport()) [ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_3 $$ if (type.javaNativeSupport()) [ FD ]
Line_3 $$ if (type.javaNativeSupport()) -->Line_4 $$ return ImageIO.read(url.openStream())[ CD ]
Line_4 $$ return ImageIO.read(url.openStream())-->Line_4 $$ return ImageIO.read(url.openStream())[ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_4 $$ return ImageIO.read(url.openStream())[ FD ]
Line_3 $$ if (type.javaNativeSupport()) -->Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) [ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) [ FD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) [ FD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) [ FD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_6 $$ com.lizardtech.djvu.Document doc = new com.lizardtech.djvu.Document(url)[ CD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_7 $$ doc.setAsync(false)[ CD ]
Line_6 $$ com.lizardtech.djvu.Document doc = new com.lizardtech.djvu.Document(url)-->Line_7 $$ doc.setAsync(false)[ FD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_8 $$ DjVuPage[] p = new DjVuPage[1][ CD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_9 $$ int size = doc.size()[ CD ]
Line_9 $$ int size = doc.size()-->Line_9 $$ int size = doc.size()[ CD ]
Line_6 $$ com.lizardtech.djvu.Document doc = new com.lizardtech.djvu.Document(url)-->Line_9 $$ int size = doc.size()[ FD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_10 $$ if ((page != 0) && (page >= size)) [ CD ]
Line_10 $$ if ((page != 0) && (page >= size)) -->Line_11 $$ page = 0[ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_11 $$ page = 0[ FD ]
Line_11 $$ page = 0-->Line_11 $$ page = 0[ FD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_13 $$ p[0] = doc.getPage(page, 1, true)[ CD ]
Line_13 $$ p[0] = doc.getPage(page, 1, true)-->Line_13 $$ p[0] = doc.getPage(page, 1, true)[ CD ]
Line_6 $$ com.lizardtech.djvu.Document doc = new com.lizardtech.djvu.Document(url)-->Line_13 $$ p[0] = doc.getPage(page, 1, true)[ FD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_13 $$ p[0] = doc.getPage(page, 1, true)[ FD ]
Line_11 $$ page = 0-->Line_13 $$ p[0] = doc.getPage(page, 1, true)[ FD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_14 $$ p[0].setAsync(false)[ CD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_15 $$ DjVuImage djvuImage = new DjVuImage(p, true)[ CD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_16 $$ Rectangle pageBounds = djvuImage.getPageBounds(0)[ CD ]
Line_16 $$ Rectangle pageBounds = djvuImage.getPageBounds(0)-->Line_16 $$ Rectangle pageBounds = djvuImage.getPageBounds(0)[ CD ]
Line_15 $$ DjVuImage djvuImage = new DjVuImage(p, true)-->Line_16 $$ Rectangle pageBounds = djvuImage.getPageBounds(0)[ FD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_17 $$ Image[] images = djvuImage.getImage(new JPanel(), new Rectangle(pageBounds.width, pageBounds.height))[ CD ]
Line_17 $$ Image[] images = djvuImage.getImage(new JPanel(), new Rectangle(pageBounds.width, pageBounds.height))-->Line_17 $$ Image[] images = djvuImage.getImage(new JPanel(), new Rectangle(pageBounds.width, pageBounds.height))[ CD ]
Line_15 $$ DjVuImage djvuImage = new DjVuImage(p, true)-->Line_17 $$ Image[] images = djvuImage.getImage(new JPanel(), new Rectangle(pageBounds.width, pageBounds.height))[ FD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_18 $$ if (images.length == 1) [ CD ]
Line_18 $$ if (images.length == 1) -->Line_19 $$ Image img = images[0][ CD ]
Line_18 $$ if (images.length == 1) -->Line_20 $$ return img[ CD ]
Line_18 $$ if (images.length == 1) -->Line_21 $$ return null[ CD ]
Line_5 $$ if ((type.equals(ImageMimeType.DJVU)) || (type.equals(ImageMimeType.VNDDJVU)) || (type.equals(ImageMimeType.XDJVU))) -->Line_22 $$ if (type.equals(ImageMimeType.PDF)) [ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_22 $$ if (type.equals(ImageMimeType.PDF)) [ FD ]
Line_22 $$ if (type.equals(ImageMimeType.PDF)) -->Line_22 $$ if (type.equals(ImageMimeType.PDF)) [ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_22 $$ if (type.equals(ImageMimeType.PDF)) [ FD ]
Line_22 $$ if (type.equals(ImageMimeType.PDF)) -->Line_23 $$ PDDocument document = null[ CD ]
Line_23 $$ PDDocument document = null-->Line_25 $$ document = PDDocument.load(url.openStream())[ FD ]
Line_25 $$ document = PDDocument.load(url.openStream())-->Line_25 $$ document = PDDocument.load(url.openStream())[ FD ]
Line_25 $$ document = PDDocument.load(url.openStream())-->Line_25 $$ document = PDDocument.load(url.openStream())[ CD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_25 $$ document = PDDocument.load(url.openStream())[ FD ]
Line_27 $$ List<?> pages = document.getDocumentCatalog().getAllPages()-->Line_27 $$ List<?> pages = document.getDocumentCatalog().getAllPages()[ CD ]
Line_23 $$ PDDocument document = null-->Line_27 $$ List<?> pages = document.getDocumentCatalog().getAllPages()[ FD ]
Line_25 $$ document = PDDocument.load(url.openStream())-->Line_27 $$ List<?> pages = document.getDocumentCatalog().getAllPages()[ FD ]
Line_27 $$ List<?> pages = document.getDocumentCatalog().getAllPages()-->Line_28 $$ PDPage pdPage = (PDPage) pages.get(page)[ FD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_28 $$ PDPage pdPage = (PDPage) pages.get(page)[ FD ]
Line_11 $$ page = 0-->Line_28 $$ PDPage pdPage = (PDPage) pages.get(page)[ FD ]
Line_29 $$ BufferedImage image = pdPage.convertToImage(BufferedImage.TYPE_INT_RGB, resolution)-->Line_29 $$ BufferedImage image = pdPage.convertToImage(BufferedImage.TYPE_INT_RGB, resolution)[ CD ]
Line_28 $$ PDPage pdPage = (PDPage) pages.get(page)-->Line_29 $$ BufferedImage image = pdPage.convertToImage(BufferedImage.TYPE_INT_RGB, resolution)[ FD ]
Line_26 $$ int resolution = 96-->Line_29 $$ BufferedImage image = pdPage.convertToImage(BufferedImage.TYPE_INT_RGB, resolution)[ FD ]
Line_23 $$ PDDocument document = null-->Line_32 $$ if (document != null) [ FD ]
Line_25 $$ document = PDDocument.load(url.openStream())-->Line_32 $$ if (document != null) [ FD ]
Line_32 $$ if (document != null) -->Line_33 $$ document.close()[ CD ]
Line_23 $$ PDDocument document = null-->Line_33 $$ document.close()[ FD ]
Line_25 $$ document = PDDocument.load(url.openStream())-->Line_33 $$ document.close()[ FD ]
Line_2 $$ public static Image readImage(URL url, ImageMimeType type, int page) throws IOException -->Line_36 $$ throw new IllegalArgumentException("unsupported mimetype '" + type.getValue() + "'")[ FD ]
