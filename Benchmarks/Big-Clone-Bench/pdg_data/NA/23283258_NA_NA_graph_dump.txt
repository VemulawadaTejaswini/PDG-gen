Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public String login(HttpSession callingSession, String username, String password) [ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_3 $$ String token = null[ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_4 $$ String customer = null[ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_5 $$ int timeoutInSeconds = 0[ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_6 $$ HashSet<Integer> tileProviderIds = new HashSet<Integer>()[ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_7 $$ boolean bLoginOk = false[ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_8 $$ String dbPassword = (String) em.createNamedQuery("getCustomerPasswordByUsername").setParameter("username", username).getSingleResult()[ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_8 $$ String dbPassword = (String) em.createNamedQuery("getCustomerPasswordByUsername").setParameter("username", username).getSingleResult()[ FD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_9 $$ if (dbPassword.equals(password)) [ CD ]
Line_8 $$ String dbPassword = (String) em.createNamedQuery("getCustomerPasswordByUsername").setParameter("username", username).getSingleResult()-->Line_9 $$ if (dbPassword.equals(password)) [ FD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_9 $$ if (dbPassword.equals(password)) [ FD ]
Line_9 $$ if (dbPassword.equals(password)) -->Line_9 $$ if (dbPassword.equals(password)) [ CD ]
Line_8 $$ String dbPassword = (String) em.createNamedQuery("getCustomerPasswordByUsername").setParameter("username", username).getSingleResult()-->Line_9 $$ if (dbPassword.equals(password)) [ FD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_9 $$ if (dbPassword.equals(password)) [ FD ]
Line_9 $$ if (dbPassword.equals(password)) -->Line_10 $$ CustomerElement ce = (CustomerElement) em.createNamedQuery("getCustomerByUsername").setParameter("username", username).getSingleResult()[ CD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_10 $$ CustomerElement ce = (CustomerElement) em.createNamedQuery("getCustomerByUsername").setParameter("username", username).getSingleResult()[ FD ]
Line_9 $$ if (dbPassword.equals(password)) -->Line_11 $$ customer = ce.getName()[ CD ]
Line_4 $$ String customer = null-->Line_11 $$ customer = ce.getName()[ FD ]
Line_11 $$ customer = ce.getName()-->Line_11 $$ customer = ce.getName()[ FD ]
Line_11 $$ customer = ce.getName()-->Line_11 $$ customer = ce.getName()[ CD ]
Line_10 $$ CustomerElement ce = (CustomerElement) em.createNamedQuery("getCustomerByUsername").setParameter("username", username).getSingleResult()-->Line_11 $$ customer = ce.getName()[ FD ]
Line_9 $$ if (dbPassword.equals(password)) -->Line_12 $$ timeoutInSeconds = ce.getTimeout()[ CD ]
Line_5 $$ int timeoutInSeconds = 0-->Line_12 $$ timeoutInSeconds = ce.getTimeout()[ FD ]
Line_12 $$ timeoutInSeconds = ce.getTimeout()-->Line_12 $$ timeoutInSeconds = ce.getTimeout()[ FD ]
Line_12 $$ timeoutInSeconds = ce.getTimeout()-->Line_12 $$ timeoutInSeconds = ce.getTimeout()[ CD ]
Line_10 $$ CustomerElement ce = (CustomerElement) em.createNamedQuery("getCustomerByUsername").setParameter("username", username).getSingleResult()-->Line_12 $$ timeoutInSeconds = ce.getTimeout()[ FD ]
Line_9 $$ if (dbPassword.equals(password)) -->Line_13 $$ String[] tileProviderIdsArray = ce.getTileProvideridsArray()[ CD ]
Line_13 $$ String[] tileProviderIdsArray = ce.getTileProvideridsArray()-->Line_13 $$ String[] tileProviderIdsArray = ce.getTileProvideridsArray()[ CD ]
Line_10 $$ CustomerElement ce = (CustomerElement) em.createNamedQuery("getCustomerByUsername").setParameter("username", username).getSingleResult()-->Line_13 $$ String[] tileProviderIdsArray = ce.getTileProvideridsArray()[ FD ]
Line_6 $$ HashSet<Integer> tileProviderIds = new HashSet<Integer>()-->Line_14 $$ tileProviderIds.add(Integer.parseInt(tileProviderId))[ FD ]
Line_14 $$ for (String tileProviderId : tileProviderIdsArray) tileProviderIds.add(Integer.parseInt(tileProviderId))-->Line_14 $$ tileProviderIds.add(Integer.parseInt(tileProviderId))[ FD ]
Line_9 $$ if (dbPassword.equals(password)) -->Line_15 $$ bLoginOk = true[ CD ]
Line_7 $$ boolean bLoginOk = false-->Line_15 $$ bLoginOk = true[ FD ]
Line_15 $$ bLoginOk = true-->Line_15 $$ bLoginOk = true[ FD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_17 $$ if (bLoginOk) [ CD ]
Line_17 $$ if (bLoginOk) -->Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)[ CD ]
Line_3 $$ String token = null-->Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)[ FD ]
Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)-->Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)[ FD ]
Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)-->Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)[ CD ]
Line_4 $$ String customer = null-->Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)[ FD ]
Line_11 $$ customer = ce.getName()-->Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)[ FD ]
Line_17 $$ if (bLoginOk) -->Line_19 $$ if (token == null) [ CD ]
Line_3 $$ String token = null-->Line_19 $$ if (token == null) [ FD ]
Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)-->Line_19 $$ if (token == null) [ FD ]
Line_19 $$ if (token == null) -->Line_20 $$ Random random = new Random()[ CD ]
Line_19 $$ if (token == null) -->Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()[ CD ]
Line_3 $$ String token = null-->Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()[ FD ]
Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)-->Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()[ FD ]
Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()-->Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()[ FD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()[ FD ]
Line_20 $$ Random random = new Random()-->Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()[ FD ]
Line_19 $$ if (token == null) -->Line_22 $$ MessageDigest md5 = null[ CD ]
Line_22 $$ MessageDigest md5 = null-->Line_24 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_24 $$ md5 = MessageDigest.getInstance("MD5")-->Line_24 $$ md5 = MessageDigest.getInstance("MD5")[ FD ]
Line_24 $$ md5 = MessageDigest.getInstance("MD5")-->Line_24 $$ md5 = MessageDigest.getInstance("MD5")[ CD ]
Line_19 $$ if (token == null) -->Line_28 $$ md5.update(token.getBytes())[ CD ]
Line_22 $$ MessageDigest md5 = null-->Line_28 $$ md5.update(token.getBytes())[ FD ]
Line_24 $$ md5 = MessageDigest.getInstance("MD5")-->Line_28 $$ md5.update(token.getBytes())[ FD ]
Line_3 $$ String token = null-->Line_28 $$ md5.update(token.getBytes())[ FD ]
Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)-->Line_28 $$ md5.update(token.getBytes())[ FD ]
Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()-->Line_28 $$ md5.update(token.getBytes())[ FD ]
Line_19 $$ if (token == null) -->Line_29 $$ byte[] array = md5.digest()[ CD ]
Line_29 $$ byte[] array = md5.digest()-->Line_29 $$ byte[] array = md5.digest()[ CD ]
Line_22 $$ MessageDigest md5 = null-->Line_29 $$ byte[] array = md5.digest()[ FD ]
Line_24 $$ md5 = MessageDigest.getInstance("MD5")-->Line_29 $$ byte[] array = md5.digest()[ FD ]
Line_19 $$ if (token == null) -->Line_30 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_19 $$ if (token == null) -->Line_31 $$ for (int j = 0; j < array.length; ++j) [ CD ]
Line_19 $$ if (token == null) -->Line_19 $$ if (token == null) [ CD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_31 $$ for (int j = 0; j < array.length; ++j) [ CD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_31 $$ for (int j = 0; j < array.length; ++j) [ CD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_31 $$ for (int j = 0; j < array.length; ++j) [ FD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_32 $$ int b = array[j] & 0xFF[ CD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_33 $$ if (b < 0x10)[ CD ]
Line_32 $$ int b = array[j] & 0xFF-->Line_33 $$ if (b < 0x10)[ FD ]
Line_33 $$ if (b < 0x10)-->Line_33 $$ sb.append('0')[ CD ]
Line_30 $$ StringBuffer sb = new StringBuffer()-->Line_33 $$ sb.append('0')[ FD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_34 $$ sb.append(Integer.toHexString(b))[ CD ]
Line_30 $$ StringBuffer sb = new StringBuffer()-->Line_34 $$ sb.append(Integer.toHexString(b))[ FD ]
Line_32 $$ int b = array[j] & 0xFF-->Line_34 $$ sb.append(Integer.toHexString(b))[ FD ]
Line_19 $$ if (token == null) -->Line_36 $$ token = sb.toString()[ CD ]
Line_3 $$ String token = null-->Line_36 $$ token = sb.toString()[ FD ]
Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)-->Line_36 $$ token = sb.toString()[ FD ]
Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()-->Line_36 $$ token = sb.toString()[ FD ]
Line_36 $$ token = sb.toString()-->Line_36 $$ token = sb.toString()[ FD ]
Line_36 $$ token = sb.toString()-->Line_36 $$ token = sb.toString()[ CD ]
Line_30 $$ StringBuffer sb = new StringBuffer()-->Line_36 $$ token = sb.toString()[ FD ]
Line_19 $$ if (token == null) -->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ CD ]
Line_3 $$ String token = null-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_18 $$ token = SessionHandler.getInstance().alreadyGotValidSession(customer)-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_21 $$ token = callingSession.getId() + new Date().getTime() + random.nextLong()-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_36 $$ token = sb.toString()-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_4 $$ String customer = null-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_11 $$ customer = ce.getName()-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_5 $$ int timeoutInSeconds = 0-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_12 $$ timeoutInSeconds = ce.getTimeout()-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_6 $$ HashSet<Integer> tileProviderIds = new HashSet<Integer>()-->Line_37 $$ SessionHandler.getInstance().registerValidSession(token, customer, timeoutInSeconds, tileProviderIds)[ FD ]
Line_2 $$ public String login(HttpSession callingSession, String username, String password) -->Line_40 $$ return token[ CD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_31 $$ for (int j = 0; j < array.length; ++j) [ FD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_31 $$ for (int j = 0; j < array.length; ++j) [ FD ]
Line_31 $$ for (int j = 0; j < array.length; ++j) -->Line_31 $$ for (int j = 0; j < array.length; ++j) [ FD ]
Line_32 $$ int b = array[j] & 0xFF-->Line_33 $$ if (b < 0x10)[ FD ]
Line_32 $$ int b = array[j] & 0xFF-->Line_34 $$ sb.append(Integer.toHexString(b))[ FD ]
