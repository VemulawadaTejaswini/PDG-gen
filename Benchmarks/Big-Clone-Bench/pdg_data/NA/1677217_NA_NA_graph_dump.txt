Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException [ CD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_3 $$ if (beforeServingFile(req, resp)) [ CD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_3 $$ if (beforeServingFile(req, resp)) [ FD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_3 $$ if (beforeServingFile(req, resp)) [ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_3 $$ if (beforeServingFile(req, resp)) [ CD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_3 $$ if (beforeServingFile(req, resp)) [ FD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_3 $$ if (beforeServingFile(req, resp)) [ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_4 $$ String pathInfo = req.getPathInfo()[ CD ]
Line_4 $$ String pathInfo = req.getPathInfo()-->Line_4 $$ String pathInfo = req.getPathInfo()[ CD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_4 $$ String pathInfo = req.getPathInfo()[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_5 $$ Validate.notNull(pathInfo, "the path info is null -> the sevlet should be mapped with /<mapping>/*")[ CD ]
Line_4 $$ String pathInfo = req.getPathInfo()-->Line_5 $$ Validate.notNull(pathInfo, "the path info is null -> the sevlet should be mapped with /<mapping>/*")[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_6 $$ String resurouce = pathInfo.substring(1)[ CD ]
Line_6 $$ String resurouce = pathInfo.substring(1)-->Line_6 $$ String resurouce = pathInfo.substring(1)[ CD ]
Line_4 $$ String pathInfo = req.getPathInfo()-->Line_6 $$ String resurouce = pathInfo.substring(1)[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_7 $$ if (log.isDebugEnabled()) [ CD ]
Line_7 $$ if (log.isDebugEnabled()) -->Line_7 $$ if (log.isDebugEnabled()) [ CD ]
Line_7 $$ if (log.isDebugEnabled()) -->Line_8 $$ log.debug("resource to expose: " + resurouce)[ CD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_10 $$ String extension = resurouce.substring(resurouce.lastIndexOf('.') + 1)[ CD ]
Line_10 $$ String extension = resurouce.substring(resurouce.lastIndexOf('.') + 1)-->Line_10 $$ String extension = resurouce.substring(resurouce.lastIndexOf('.') + 1)[ CD ]
Line_6 $$ String resurouce = pathInfo.substring(1)-->Line_10 $$ String extension = resurouce.substring(resurouce.lastIndexOf('.') + 1)[ FD ]
Line_6 $$ String resurouce = pathInfo.substring(1)-->Line_10 $$ String extension = resurouce.substring(resurouce.lastIndexOf('.') + 1)[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_11 $$ MimeType mimeType = MimeTypeRegistry.getByExtension(extension)[ CD ]
Line_11 $$ MimeType mimeType = MimeTypeRegistry.getByExtension(extension)-->Line_11 $$ MimeType mimeType = MimeTypeRegistry.getByExtension(extension)[ CD ]
Line_10 $$ String extension = resurouce.substring(resurouce.lastIndexOf('.') + 1)-->Line_11 $$ MimeType mimeType = MimeTypeRegistry.getByExtension(extension)[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_12 $$ Validate.notNull(mimeType, "no mimetype found for extension: " + extension)[ CD ]
Line_11 $$ MimeType mimeType = MimeTypeRegistry.getByExtension(extension)-->Line_12 $$ Validate.notNull(mimeType, "no mimetype found for extension: " + extension)[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_13 $$ if (log.isDebugEnabled()) [ CD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_13 $$ if (log.isDebugEnabled()) [ CD ]
Line_13 $$ if (log.isDebugEnabled()) -->Line_14 $$ log.debug("the mime type to set: " + mimeType.getMimeType())[ CD ]
Line_11 $$ MimeType mimeType = MimeTypeRegistry.getByExtension(extension)-->Line_14 $$ log.debug("the mime type to set: " + mimeType.getMimeType())[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_16 $$ File f = new File(mappedFolder, resurouce)[ CD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_17 $$ Validate.isTrue(f.exists(), "file: " + f + " does not exist")[ CD ]
Line_16 $$ File f = new File(mappedFolder, resurouce)-->Line_17 $$ Validate.isTrue(f.exists(), "file: " + f + " does not exist")[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_18 $$ Validate.isTrue(f.canRead(), "can not read the file: " + f)[ CD ]
Line_16 $$ File f = new File(mappedFolder, resurouce)-->Line_18 $$ Validate.isTrue(f.canRead(), "can not read the file: " + f)[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_19 $$ if (log.isDebugEnabled()) [ CD ]
Line_19 $$ if (log.isDebugEnabled()) -->Line_19 $$ if (log.isDebugEnabled()) [ CD ]
Line_19 $$ if (log.isDebugEnabled()) -->Line_20 $$ log.debug("exposing the file: " + f)[ CD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_22 $$ resp.setContentType(mimeType.getMimeType())[ CD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_22 $$ resp.setContentType(mimeType.getMimeType())[ FD ]
Line_11 $$ MimeType mimeType = MimeTypeRegistry.getByExtension(extension)-->Line_22 $$ resp.setContentType(mimeType.getMimeType())[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_23 $$ FileInputStream fis = new FileInputStream(f)[ CD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_24 $$ ServletOutputStream os = resp.getOutputStream()[ CD ]
Line_24 $$ ServletOutputStream os = resp.getOutputStream()-->Line_24 $$ ServletOutputStream os = resp.getOutputStream()[ CD ]
Line_2 $$ protected final void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException -->Line_24 $$ ServletOutputStream os = resp.getOutputStream()[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_25 $$ IOUtils.copy(fis, os)[ CD ]
Line_23 $$ FileInputStream fis = new FileInputStream(f)-->Line_25 $$ IOUtils.copy(fis, os)[ FD ]
Line_24 $$ ServletOutputStream os = resp.getOutputStream()-->Line_25 $$ IOUtils.copy(fis, os)[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_26 $$ os.flush()[ CD ]
Line_24 $$ ServletOutputStream os = resp.getOutputStream()-->Line_26 $$ os.flush()[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_27 $$ IOUtils.closeQuietly(fis)[ CD ]
Line_23 $$ FileInputStream fis = new FileInputStream(f)-->Line_27 $$ IOUtils.closeQuietly(fis)[ FD ]
Line_3 $$ if (beforeServingFile(req, resp)) -->Line_28 $$ IOUtils.closeQuietly(os)[ CD ]
Line_24 $$ ServletOutputStream os = resp.getOutputStream()-->Line_28 $$ IOUtils.closeQuietly(os)[ FD ]
