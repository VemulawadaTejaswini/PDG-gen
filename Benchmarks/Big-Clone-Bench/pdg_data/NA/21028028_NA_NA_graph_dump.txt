Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) [ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_3 $$ if (newInventory == null || newInventory.equals(""))[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_3 $$ if (newInventory == null || newInventory.equals(""))[ FD ]
Line_3 $$ if (newInventory == null || newInventory.equals(""))-->Line_3 $$ return InventoryMonitor.CONFIGURATION_NOT_SAVED[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_4 $$ Category log = ThreadCategory.getInstance(getClass())[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_4 $$ Category log = ThreadCategory.getInstance(getClass())[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_6 $$ log.debug(newInventory)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_6 $$ log.debug(newInventory)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_7 $$ init(newInventory)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_9 $$ log.error("Unable to parse new Inventory.")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_10 $$ log.error(ve)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_13 $$ log.error("Unable to parse new Inventory.")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_14 $$ log.error(me)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_17 $$ InventoryConfiguration iConfig = InventoryConfigFactory.getInstance().getConfiguration()[ CD ]
Line_17 $$ InventoryConfiguration iConfig = InventoryConfigFactory.getInstance().getConfiguration()-->Line_17 $$ InventoryConfiguration iConfig = InventoryConfigFactory.getInstance().getConfiguration()[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_18 $$ String directory_repository = iConfig.getFileRepository()[ CD ]
Line_18 $$ String directory_repository = iConfig.getFileRepository()-->Line_18 $$ String directory_repository = iConfig.getFileRepository()[ CD ]
Line_17 $$ InventoryConfiguration iConfig = InventoryConfigFactory.getInstance().getConfiguration()-->Line_18 $$ String directory_repository = iConfig.getFileRepository()[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_19 $$ String path = (String) parameters.get("path")[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_20 $$ if (path == null) [ CD ]
Line_19 $$ String path = (String) parameters.get("path")-->Line_20 $$ if (path == null) [ FD ]
Line_20 $$ if (path == null) -->Line_21 $$ log.error("Parameter 'path' not found.")[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_21 $$ log.error("Parameter 'path' not found.")[ FD ]
Line_20 $$ if (path == null) -->Line_23 $$ return InventoryMonitor.CONFIGURATION_NOT_SAVED[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_25 $$ java.sql.Connection dbConn = null[ CD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()[ CD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_28 $$ dbConn.setAutoCommit(false)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_28 $$ dbConn.setAutoCommit(false)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_30 $$ log.error("Unable to connect to DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_34 $$ log.error("Unable to connect to DB")[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_38 $$ String nodeDirectory_repository = ""[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_39 $$ String file_repository = ""[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_40 $$ String oldPathToFile = ""[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_41 $$ String newPathToFile = ""[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_42 $$ boolean renameFile = false[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_43 $$ ResultSet rs = null[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)[ CD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_46 $$ stmt.setString(1, ipAddress)[ FD ]
Line_43 $$ ResultSet rs = null-->Line_47 $$ rs = stmt.executeQuery()[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_47 $$ rs = stmt.executeQuery()[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_47 $$ rs = stmt.executeQuery()[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_47 $$ rs = stmt.executeQuery()[ FD ]
Line_48 $$ while (rs.next()) -->Line_48 $$ while (rs.next()) [ CD ]
Line_43 $$ ResultSet rs = null-->Line_48 $$ while (rs.next()) [ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_48 $$ while (rs.next()) [ FD ]
Line_48 $$ while (rs.next()) -->Line_49 $$ nodeId = rs.getInt(1)[ CD ]
Line_43 $$ ResultSet rs = null-->Line_49 $$ nodeId = rs.getInt(1)[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_49 $$ nodeId = rs.getInt(1)[ FD ]
Line_18 $$ String directory_repository = iConfig.getFileRepository()-->Line_51 $$ if (directory_repository.endsWith("/") == false && directory_repository.endsWith(File.separator) == false) [ FD ]
Line_18 $$ String directory_repository = iConfig.getFileRepository()-->Line_51 $$ if (directory_repository.endsWith("/") == false && directory_repository.endsWith(File.separator) == false) [ FD ]
Line_51 $$ if (directory_repository.endsWith("/") == false && directory_repository.endsWith(File.separator) == false) -->Line_52 $$ directory_repository += File.separator[ CD ]
Line_18 $$ String directory_repository = iConfig.getFileRepository()-->Line_52 $$ directory_repository += File.separator[ FD ]
Line_52 $$ directory_repository += File.separator-->Line_52 $$ directory_repository += File.separator[ FD ]
Line_38 $$ String nodeDirectory_repository = ""-->Line_54 $$ nodeDirectory_repository = directory_repository + nodeId[ FD ]
Line_54 $$ nodeDirectory_repository = directory_repository + nodeId-->Line_54 $$ nodeDirectory_repository = directory_repository + nodeId[ FD ]
Line_18 $$ String directory_repository = iConfig.getFileRepository()-->Line_54 $$ nodeDirectory_repository = directory_repository + nodeId[ FD ]
Line_52 $$ directory_repository += File.separator-->Line_54 $$ nodeDirectory_repository = directory_repository + nodeId[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_57 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_57 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_59 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_61 $$ log.error("Unable to read from DB")[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_65 $$ rs = null[ CD ]
Line_43 $$ ResultSet rs = null-->Line_65 $$ rs = null[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_65 $$ rs = null[ FD ]
Line_65 $$ rs = null-->Line_65 $$ rs = null[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_67 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_PATHTOFILE)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_67 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_PATHTOFILE)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_68 $$ stmt.setInt(1, nodeId)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_69 $$ stmt.setString(2, inventoryType)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_69 $$ stmt.setString(2, inventoryType)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_70 $$ stmt.setString(3, "A")[ FD ]
Line_43 $$ ResultSet rs = null-->Line_71 $$ rs = stmt.executeQuery()[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_71 $$ rs = stmt.executeQuery()[ FD ]
Line_65 $$ rs = null-->Line_71 $$ rs = stmt.executeQuery()[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_71 $$ rs = stmt.executeQuery()[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_71 $$ rs = stmt.executeQuery()[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_71 $$ rs = stmt.executeQuery()[ FD ]
Line_72 $$ while (rs.next()) -->Line_72 $$ while (rs.next()) [ CD ]
Line_43 $$ ResultSet rs = null-->Line_72 $$ while (rs.next()) [ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_72 $$ while (rs.next()) [ FD ]
Line_65 $$ rs = null-->Line_72 $$ while (rs.next()) [ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_72 $$ while (rs.next()) [ FD ]
Line_72 $$ while (rs.next()) -->Line_73 $$ oldPathToFile = rs.getString(1)[ CD ]
Line_73 $$ oldPathToFile = rs.getString(1)-->Line_73 $$ oldPathToFile = rs.getString(1)[ FD ]
Line_40 $$ String oldPathToFile = ""-->Line_73 $$ oldPathToFile = rs.getString(1)[ FD ]
Line_73 $$ oldPathToFile = rs.getString(1)-->Line_73 $$ oldPathToFile = rs.getString(1)[ CD ]
Line_43 $$ ResultSet rs = null-->Line_73 $$ oldPathToFile = rs.getString(1)[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_73 $$ oldPathToFile = rs.getString(1)[ FD ]
Line_65 $$ rs = null-->Line_73 $$ oldPathToFile = rs.getString(1)[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_73 $$ oldPathToFile = rs.getString(1)[ FD ]
Line_19 $$ String path = (String) parameters.get("path")-->Line_76 $$ if (path.startsWith("/") == false && path.startsWith(File.separator) == false) [ FD ]
Line_19 $$ String path = (String) parameters.get("path")-->Line_76 $$ if (path.startsWith("/") == false && path.startsWith(File.separator) == false) [ FD ]
Line_76 $$ if (path.startsWith("/") == false && path.startsWith(File.separator) == false) -->Line_77 $$ newDirRep += File.separator[ CD ]
Line_75 $$ String newDirRep = nodeDirectory_repository-->Line_77 $$ newDirRep += File.separator[ FD ]
Line_77 $$ newDirRep += File.separator-->Line_77 $$ newDirRep += File.separator[ FD ]
Line_79 $$ long time = System.currentTimeMillis()-->Line_79 $$ long time = System.currentTimeMillis()[ CD ]
Line_80 $$ Timestamp currTime = new Timestamp(time)-->Line_81 $$ java.util.Date currTimeDate = new java.util.Date(currTime.getTime())[ FD ]
Line_41 $$ String newPathToFile = ""-->Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"[ FD ]
Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"-->Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"[ FD ]
Line_82 $$ SimpleDateFormat ObjectformatDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")-->Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"[ FD ]
Line_81 $$ java.util.Date currTimeDate = new java.util.Date(currTime.getTime())-->Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_85 $$ log.error("Unable to read from DB")[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_87 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_87 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_89 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_94 $$ int returnValue = InventoryMonitor.CONFIGURATION_SAVED[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_95 $$ rs = null[ CD ]
Line_43 $$ ResultSet rs = null-->Line_95 $$ rs = null[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_95 $$ rs = null[ FD ]
Line_65 $$ rs = null-->Line_95 $$ rs = null[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_95 $$ rs = null[ FD ]
Line_95 $$ rs = null-->Line_95 $$ rs = null[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_96 $$ int found = -1[ CD ]
Line_96 $$ int found = -1-->Line_96 $$ int found = -1[ CD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_98 $$ PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_CONFIGURATION_NAME)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_98 $$ PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_CONFIGURATION_NAME)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_99 $$ stmt.setInt(1, nodeId)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_100 $$ stmt.setString(2, inventoryType)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_100 $$ stmt.setString(2, inventoryType)[ FD ]
Line_43 $$ ResultSet rs = null-->Line_101 $$ rs = stmt.executeQuery()[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_101 $$ rs = stmt.executeQuery()[ FD ]
Line_65 $$ rs = null-->Line_101 $$ rs = stmt.executeQuery()[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_101 $$ rs = stmt.executeQuery()[ FD ]
Line_95 $$ rs = null-->Line_101 $$ rs = stmt.executeQuery()[ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_101 $$ rs = stmt.executeQuery()[ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_101 $$ rs = stmt.executeQuery()[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_101 $$ rs = stmt.executeQuery()[ FD ]
Line_102 $$ while (rs.next()) -->Line_102 $$ while (rs.next()) [ CD ]
Line_43 $$ ResultSet rs = null-->Line_102 $$ while (rs.next()) [ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_102 $$ while (rs.next()) [ FD ]
Line_65 $$ rs = null-->Line_102 $$ while (rs.next()) [ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_102 $$ while (rs.next()) [ FD ]
Line_95 $$ rs = null-->Line_102 $$ while (rs.next()) [ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_102 $$ while (rs.next()) [ FD ]
Line_102 $$ while (rs.next()) -->Line_103 $$ found = rs.getInt(1)[ CD ]
Line_103 $$ found = rs.getInt(1)-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_96 $$ int found = -1-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_103 $$ found = rs.getInt(1)-->Line_103 $$ found = rs.getInt(1)[ CD ]
Line_43 $$ ResultSet rs = null-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_65 $$ rs = null-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_95 $$ rs = null-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_103 $$ found = rs.getInt(1)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_106 $$ log.error("Unable to read from DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_107 $$ log.error(s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_109 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_109 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_111 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_116 $$ long time = System.currentTimeMillis()[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_117 $$ Timestamp currentTime = new Timestamp(time)[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_118 $$ if (found > 0) [ CD ]
Line_103 $$ found = rs.getInt(1)-->Line_118 $$ if (found > 0) [ FD ]
Line_96 $$ int found = -1-->Line_118 $$ if (found > 0) [ FD ]
Line_118 $$ if (found > 0) -->Line_119 $$ if (compareResult == InventoryMonitor.CONFIGURATION_CHANGED || compareResult == InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD) [ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_121 $$ log.debug("FOUND=" + found + " row/s in configuration, UPDATE it")[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_122 $$ PreparedStatement stmt = dbConn.prepareStatement(UPDATE_CONFIGURATION_TO_STATUS_N)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_122 $$ PreparedStatement stmt = dbConn.prepareStatement(UPDATE_CONFIGURATION_TO_STATUS_N)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_123 $$ stmt.setInt(1, nodeId)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_124 $$ stmt.setString(2, inventoryType)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_124 $$ stmt.setString(2, inventoryType)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_125 $$ stmt.executeUpdate()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_127 $$ log.error("Unable to update DB" + s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_129 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_129 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_131 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_137 $$ PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_137 $$ PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_138 $$ stmt.setInt(1, nodeId)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_139 $$ stmt.setTimestamp(2, currentTime)[ FD ]
Line_117 $$ Timestamp currentTime = new Timestamp(time)-->Line_139 $$ stmt.setTimestamp(2, currentTime)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_140 $$ stmt.setTimestamp(3, currentTime)[ FD ]
Line_117 $$ Timestamp currentTime = new Timestamp(time)-->Line_140 $$ stmt.setTimestamp(3, currentTime)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_141 $$ stmt.setString(4, inventoryType)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_141 $$ stmt.setString(4, inventoryType)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_142 $$ stmt.setString(5, newPathToFile)[ FD ]
Line_41 $$ String newPathToFile = ""-->Line_142 $$ stmt.setString(5, newPathToFile)[ FD ]
Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"-->Line_142 $$ stmt.setString(5, newPathToFile)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_143 $$ stmt.execute()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_145 $$ log.error("Unable to insert in DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_146 $$ log.error(s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_148 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_148 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_150 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_157 $$ log.debug("FOUND=" + found + " row/s in configuration, UPDATE it")[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_158 $$ PreparedStatement stmt = dbConn.prepareStatement(UPDATE_LASTPOLLTIME_PATHTOFILE)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_158 $$ PreparedStatement stmt = dbConn.prepareStatement(UPDATE_LASTPOLLTIME_PATHTOFILE)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_159 $$ stmt.setTimestamp(1, currentTime)[ FD ]
Line_117 $$ Timestamp currentTime = new Timestamp(time)-->Line_159 $$ stmt.setTimestamp(1, currentTime)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_160 $$ stmt.setString(2, newPathToFile)[ FD ]
Line_41 $$ String newPathToFile = ""-->Line_160 $$ stmt.setString(2, newPathToFile)[ FD ]
Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"-->Line_160 $$ stmt.setString(2, newPathToFile)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_161 $$ stmt.setInt(3, nodeId)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_162 $$ stmt.setString(4, inventoryType)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_162 $$ stmt.setString(4, inventoryType)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_163 $$ stmt.executeUpdate()[ FD ]
Line_42 $$ boolean renameFile = false-->Line_164 $$ renameFile = true[ FD ]
Line_164 $$ renameFile = true-->Line_164 $$ renameFile = true[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_166 $$ log.error("Unable to update DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_167 $$ log.error(s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_169 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_169 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_171 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_178 $$ dbConn.commit()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_178 $$ dbConn.commit()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_180 $$ log.error("Unable to commit to DB " + s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_182 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_182 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_184 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_190 $$ PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_190 $$ PreparedStatement stmt = dbConn.prepareStatement(INSERT_IN_CONFIGURATION)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_191 $$ stmt.setInt(1, nodeId)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_192 $$ stmt.setTimestamp(2, currentTime)[ FD ]
Line_117 $$ Timestamp currentTime = new Timestamp(time)-->Line_192 $$ stmt.setTimestamp(2, currentTime)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_193 $$ stmt.setTimestamp(3, currentTime)[ FD ]
Line_117 $$ Timestamp currentTime = new Timestamp(time)-->Line_193 $$ stmt.setTimestamp(3, currentTime)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_194 $$ stmt.setString(4, inventoryType)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_194 $$ stmt.setString(4, inventoryType)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_195 $$ stmt.setString(5, newPathToFile)[ FD ]
Line_41 $$ String newPathToFile = ""-->Line_195 $$ stmt.setString(5, newPathToFile)[ FD ]
Line_83 $$ newPathToFile = newDirRep + path + "[" + ObjectformatDate.format(currTimeDate) + "]"-->Line_195 $$ stmt.setString(5, newPathToFile)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_196 $$ stmt.execute()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_198 $$ log.error("Unable to insert in DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_199 $$ log.error(s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_201 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_201 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_203 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_209 $$ rs = null[ CD ]
Line_43 $$ ResultSet rs = null-->Line_209 $$ rs = null[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_209 $$ rs = null[ FD ]
Line_65 $$ rs = null-->Line_209 $$ rs = null[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_209 $$ rs = null[ FD ]
Line_95 $$ rs = null-->Line_209 $$ rs = null[ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_209 $$ rs = null[ FD ]
Line_209 $$ rs = null-->Line_209 $$ rs = null[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_210 $$ found = -1[ CD ]
Line_103 $$ found = rs.getInt(1)-->Line_210 $$ found = -1[ FD ]
Line_96 $$ int found = -1-->Line_210 $$ found = -1[ FD ]
Line_210 $$ found = -1-->Line_210 $$ found = -1[ FD ]
Line_210 $$ found = -1-->Line_210 $$ found = -1[ CD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_212 $$ PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_IN_ASSET)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_212 $$ PreparedStatement stmt = dbConn.prepareStatement(COUNT_NODEID_IN_ASSET)[ FD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_213 $$ stmt.setInt(1, nodeId)[ FD ]
Line_43 $$ ResultSet rs = null-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_65 $$ rs = null-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_95 $$ rs = null-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_209 $$ rs = null-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_214 $$ rs = stmt.executeQuery()-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_214 $$ rs = stmt.executeQuery()-->Line_214 $$ rs = stmt.executeQuery()[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_214 $$ rs = stmt.executeQuery()[ FD ]
Line_215 $$ while (rs.next()) -->Line_215 $$ while (rs.next()) [ CD ]
Line_43 $$ ResultSet rs = null-->Line_215 $$ while (rs.next()) [ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_215 $$ while (rs.next()) [ FD ]
Line_65 $$ rs = null-->Line_215 $$ while (rs.next()) [ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_215 $$ while (rs.next()) [ FD ]
Line_95 $$ rs = null-->Line_215 $$ while (rs.next()) [ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_215 $$ while (rs.next()) [ FD ]
Line_209 $$ rs = null-->Line_215 $$ while (rs.next()) [ FD ]
Line_214 $$ rs = stmt.executeQuery()-->Line_215 $$ while (rs.next()) [ FD ]
Line_215 $$ while (rs.next()) -->Line_216 $$ found = rs.getInt(1)[ CD ]
Line_216 $$ found = rs.getInt(1)-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_103 $$ found = rs.getInt(1)-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_96 $$ int found = -1-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_210 $$ found = -1-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_216 $$ found = rs.getInt(1)-->Line_216 $$ found = rs.getInt(1)[ CD ]
Line_43 $$ ResultSet rs = null-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_47 $$ rs = stmt.executeQuery()-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_65 $$ rs = null-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_71 $$ rs = stmt.executeQuery()-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_95 $$ rs = null-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_101 $$ rs = stmt.executeQuery()-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_209 $$ rs = null-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_214 $$ rs = stmt.executeQuery()-->Line_216 $$ found = rs.getInt(1)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_219 $$ log.error("Unable to write into DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_220 $$ log.error(s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_222 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_222 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_224 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_229 $$ time = System.currentTimeMillis()[ CD ]
Line_79 $$ long time = System.currentTimeMillis()-->Line_229 $$ time = System.currentTimeMillis()[ FD ]
Line_229 $$ time = System.currentTimeMillis()-->Line_229 $$ time = System.currentTimeMillis()[ FD ]
Line_229 $$ time = System.currentTimeMillis()-->Line_229 $$ time = System.currentTimeMillis()[ CD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_230 $$ currentTime = new Timestamp(time)[ CD ]
Line_117 $$ Timestamp currentTime = new Timestamp(time)-->Line_230 $$ currentTime = new Timestamp(time)[ FD ]
Line_230 $$ currentTime = new Timestamp(time)-->Line_230 $$ currentTime = new Timestamp(time)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_231 $$ if (found > 0) [ CD ]
Line_216 $$ found = rs.getInt(1)-->Line_231 $$ if (found > 0) [ FD ]
Line_103 $$ found = rs.getInt(1)-->Line_231 $$ if (found > 0) [ FD ]
Line_96 $$ int found = -1-->Line_231 $$ if (found > 0) [ FD ]
Line_210 $$ found = -1-->Line_231 $$ if (found > 0) [ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_233 $$ log.debug("Found " + found + " rows in table assets: UPDATE it")[ FD ]
Line_234 $$ Iterator dbColumnIter = asset.keySet().iterator()-->Line_234 $$ Iterator dbColumnIter = asset.keySet().iterator()[ CD ]
Line_237 $$ while (dbColumnIter.hasNext()) -->Line_237 $$ while (dbColumnIter.hasNext()) [ CD ]
Line_234 $$ Iterator dbColumnIter = asset.keySet().iterator()-->Line_237 $$ while (dbColumnIter.hasNext()) [ FD ]
Line_237 $$ while (dbColumnIter.hasNext()) -->Line_238 $$ counter++[ CD ]
Line_236 $$ int counter = 0-->Line_238 $$ counter++[ FD ]
Line_237 $$ while (dbColumnIter.hasNext()) -->Line_239 $$ String currDbColumn = (String) dbColumnIter.next()[ CD ]
Line_234 $$ Iterator dbColumnIter = asset.keySet().iterator()-->Line_239 $$ String currDbColumn = (String) dbColumnIter.next()[ FD ]
Line_237 $$ while (dbColumnIter.hasNext()) -->Line_240 $$ String dataItem = (String) asset.get(currDbColumn)[ CD ]
Line_239 $$ String currDbColumn = (String) dbColumnIter.next()-->Line_240 $$ String dataItem = (String) asset.get(currDbColumn)[ FD ]
Line_237 $$ while (dbColumnIter.hasNext()) -->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ CD ]
Line_240 $$ String dataItem = (String) asset.get(currDbColumn)-->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ FD ]
Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")-->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ FD ]
Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")-->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ CD ]
Line_240 $$ String dataItem = (String) asset.get(currDbColumn)-->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ FD ]
Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")-->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ FD ]
Line_237 $$ while (dbColumnIter.hasNext()) -->Line_242 $$ queryParam += currDbColumn + "='" + dataItem + "',"[ CD ]
Line_242 $$ queryParam += currDbColumn + "='" + dataItem + "',"-->Line_242 $$ queryParam += currDbColumn + "='" + dataItem + "',"[ FD ]
Line_235 $$ String queryParam = ""-->Line_242 $$ queryParam += currDbColumn + "='" + dataItem + "',"[ FD ]
Line_236 $$ int counter = 0-->Line_244 $$ if (counter > 0) [ FD ]
Line_244 $$ if (counter > 0) -->Line_245 $$ String updateAssets = "UPDATE assets SET  " + queryParam + " lastmodifieddate=? WHERE nodeID =?"[ CD ]
Line_244 $$ if (counter > 0) -->Line_246 $$ PreparedStatement stmt = dbConn.prepareStatement(updateAssets)[ CD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_246 $$ PreparedStatement stmt = dbConn.prepareStatement(updateAssets)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_246 $$ PreparedStatement stmt = dbConn.prepareStatement(updateAssets)[ FD ]
Line_245 $$ String updateAssets = "UPDATE assets SET  " + queryParam + " lastmodifieddate=? WHERE nodeID =?"-->Line_246 $$ PreparedStatement stmt = dbConn.prepareStatement(updateAssets)[ FD ]
Line_244 $$ if (counter > 0) -->Line_247 $$ stmt.setTimestamp(1, currentTime)[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_247 $$ stmt.setTimestamp(1, currentTime)[ FD ]
Line_117 $$ Timestamp currentTime = new Timestamp(time)-->Line_247 $$ stmt.setTimestamp(1, currentTime)[ FD ]
Line_230 $$ currentTime = new Timestamp(time)-->Line_247 $$ stmt.setTimestamp(1, currentTime)[ FD ]
Line_244 $$ if (counter > 0) -->Line_248 $$ stmt.setInt(2, nodeId)[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_248 $$ stmt.setInt(2, nodeId)[ FD ]
Line_244 $$ if (counter > 0) -->Line_249 $$ log.debug("UPDATEQUERY " + updateAssets)[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_249 $$ log.debug("UPDATEQUERY " + updateAssets)[ FD ]
Line_244 $$ if (counter > 0) -->Line_250 $$ stmt.executeUpdate()[ CD ]
Line_45 $$ PreparedStatement stmt = dbConn.prepareStatement(SELECT_NODEID_BY_INTERFACE)-->Line_250 $$ stmt.executeUpdate()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_253 $$ log.error("Unable to update DB" + s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_255 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_255 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_257 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_264 $$ log.debug("row not found. INSERT into assets")[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_265 $$ InsertIntoAssets(dbConn)[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_265 $$ InsertIntoAssets(dbConn)[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_267 $$ log.error("Unable to insert in DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_268 $$ log.error(s)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_270 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_270 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_272 $$ log.error("Unable to rollback on db. " + sqle)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_279 $$ dbConn.commit()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_279 $$ dbConn.commit()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_281 $$ log.error("Unable to save into DB" + sqle)[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_283 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_283 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_285 $$ log.error("Unable to rollback on db. " + sqlex)[ FD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_291 $$ boolean exists = (new File(directory_repository)).exists()[ CD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_292 $$ if (!exists) [ FD ]
Line_292 $$ if (!exists) -->Line_292 $$ if (!exists) [ CD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_292 $$ if (!exists) [ FD ]
Line_292 $$ if (!exists) -->Line_293 $$ log.warn("file-repository '" + directory_repository + "' not found: trying to create it.")[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_293 $$ log.warn("file-repository '" + directory_repository + "' not found: trying to create it.")[ FD ]
Line_292 $$ if (!exists) -->Line_294 $$ boolean success = (new File(directory_repository)).mkdir()[ CD ]
Line_294 $$ boolean success = (new File(directory_repository)).mkdir()-->Line_294 $$ boolean success = (new File(directory_repository)).mkdir()[ CD ]
Line_292 $$ if (!exists) -->Line_295 $$ if (!success) [ CD ]
Line_294 $$ boolean success = (new File(directory_repository)).mkdir()-->Line_295 $$ if (!success) [ FD ]
Line_295 $$ if (!success) -->Line_295 $$ if (!success) [ CD ]
Line_294 $$ boolean success = (new File(directory_repository)).mkdir()-->Line_295 $$ if (!success) [ FD ]
Line_295 $$ if (!success) -->Line_296 $$ log.error("Directory creation failed")[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_296 $$ log.error("Directory creation failed")[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_298 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_298 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_300 $$ log.error("Unable to rollback DB")[ FD ]
Line_295 $$ if (!success) -->Line_302 $$ return InventoryMonitor.CONFIGURATION_NOT_SAVED[ CD ]
Line_292 $$ if (!exists) -->Line_304 $$ log.warn("file-repository '" + directory_repository + "' created.")[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_304 $$ log.warn("file-repository '" + directory_repository + "' created.")[ FD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()[ FD ]
Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()-->Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()[ FD ]
Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()-->Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()[ CD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_307 $$ if (!exists) [ FD ]
Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()-->Line_307 $$ if (!exists) [ FD ]
Line_307 $$ if (!exists) -->Line_307 $$ if (!exists) [ CD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_307 $$ if (!exists) [ FD ]
Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()-->Line_307 $$ if (!exists) [ FD ]
Line_307 $$ if (!exists) -->Line_308 $$ boolean success = (new File(nodeDirectory_repository)).mkdir()[ CD ]
Line_307 $$ if (!exists) -->Line_309 $$ if (!success) [ CD ]
Line_294 $$ boolean success = (new File(directory_repository)).mkdir()-->Line_309 $$ if (!success) [ FD ]
Line_309 $$ if (!success) -->Line_309 $$ if (!success) [ CD ]
Line_294 $$ boolean success = (new File(directory_repository)).mkdir()-->Line_309 $$ if (!success) [ FD ]
Line_309 $$ if (!success) -->Line_310 $$ log.error("Node Directory '" + nodeDirectory_repository + "' creation failed.")[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_310 $$ log.error("Node Directory '" + nodeDirectory_repository + "' creation failed.")[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_313 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_313 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_315 $$ log.error("Unable to rollback DB")[ FD ]
Line_309 $$ if (!success) -->Line_317 $$ return InventoryMonitor.CONFIGURATION_NOT_SAVED[ CD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_320 $$ exists = (new File(oldPathToFile)).exists()[ FD ]
Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()-->Line_320 $$ exists = (new File(oldPathToFile)).exists()[ FD ]
Line_320 $$ exists = (new File(oldPathToFile)).exists()-->Line_320 $$ exists = (new File(oldPathToFile)).exists()[ FD ]
Line_320 $$ exists = (new File(oldPathToFile)).exists()-->Line_320 $$ exists = (new File(oldPathToFile)).exists()[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_321 $$ log.debug(oldPathToFile + " exists=" + exists)[ FD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_322 $$ if (!exists) [ FD ]
Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()-->Line_322 $$ if (!exists) [ FD ]
Line_320 $$ exists = (new File(oldPathToFile)).exists()-->Line_322 $$ if (!exists) [ FD ]
Line_322 $$ if (!exists) -->Line_322 $$ if (!exists) [ CD ]
Line_291 $$ boolean exists = (new File(directory_repository)).exists()-->Line_322 $$ if (!exists) [ FD ]
Line_306 $$ exists = (new File(nodeDirectory_repository)).exists()-->Line_322 $$ if (!exists) [ FD ]
Line_320 $$ exists = (new File(oldPathToFile)).exists()-->Line_322 $$ if (!exists) [ FD ]
Line_322 $$ if (!exists) -->Line_323 $$ if (renameCorruptedFile) [ CD ]
Line_323 $$ if (renameCorruptedFile) -->Line_324 $$ log.warn("renameCorruptedFile=true and old configuration doesn't exist.")[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_324 $$ log.warn("renameCorruptedFile=true and old configuration doesn't exist.")[ FD ]
Line_322 $$ if (!exists) -->Line_326 $$ returnValue = InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD[ CD ]
Line_94 $$ int returnValue = InventoryMonitor.CONFIGURATION_SAVED-->Line_326 $$ returnValue = InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD[ FD ]
Line_326 $$ returnValue = InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD-->Line_326 $$ returnValue = InventoryMonitor.FIRST_ACTIVE_CONFIGURATION_DOWNLOAD[ FD ]
Line_328 $$ if (renameCorruptedFile) -->Line_329 $$ File f = new File(oldPathToFile)[ CD ]
Line_328 $$ if (renameCorruptedFile) -->Line_330 $$ String oldConfigurationFileDestination = oldPathToFile + "_Corrupted"[ CD ]
Line_328 $$ if (renameCorruptedFile) -->Line_331 $$ File dest = new File(oldConfigurationFileDestination)[ CD ]
Line_328 $$ if (renameCorruptedFile) -->Line_332 $$ dest.createNewFile()[ CD ]
Line_331 $$ File dest = new File(oldConfigurationFileDestination)-->Line_332 $$ dest.createNewFile()[ FD ]
Line_328 $$ if (renameCorruptedFile) -->Line_333 $$ f.renameTo(dest)[ CD ]
Line_329 $$ File f = new File(oldPathToFile)-->Line_333 $$ f.renameTo(dest)[ FD ]
Line_331 $$ File dest = new File(oldConfigurationFileDestination)-->Line_333 $$ f.renameTo(dest)[ FD ]
Line_328 $$ if (renameCorruptedFile) -->Line_334 $$ FileWriter fileout = new FileWriter(newPathToFile)[ CD ]
Line_328 $$ if (renameCorruptedFile) -->Line_335 $$ BufferedWriter filebufwri = new BufferedWriter(fileout)[ CD ]
Line_328 $$ if (renameCorruptedFile) -->Line_336 $$ PrintWriter printout = new PrintWriter(filebufwri)[ CD ]
Line_328 $$ if (renameCorruptedFile) -->Line_337 $$ printout.println(newInventory)[ CD ]
Line_336 $$ PrintWriter printout = new PrintWriter(filebufwri)-->Line_337 $$ printout.println(newInventory)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_337 $$ printout.println(newInventory)[ FD ]
Line_328 $$ if (renameCorruptedFile) -->Line_338 $$ printout.close()[ CD ]
Line_336 $$ PrintWriter printout = new PrintWriter(filebufwri)-->Line_338 $$ printout.close()[ FD ]
Line_328 $$ if (renameCorruptedFile) -->Line_340 $$ if (renameFile) [ CD ]
Line_340 $$ if (renameFile) -->Line_343 $$ dest.createNewFile()[ CD ]
Line_331 $$ File dest = new File(oldConfigurationFileDestination)-->Line_343 $$ dest.createNewFile()[ FD ]
Line_340 $$ if (renameFile) -->Line_344 $$ f.renameTo(dest)[ CD ]
Line_329 $$ File f = new File(oldPathToFile)-->Line_344 $$ f.renameTo(dest)[ FD ]
Line_331 $$ File dest = new File(oldConfigurationFileDestination)-->Line_344 $$ f.renameTo(dest)[ FD ]
Line_340 $$ if (renameFile) -->Line_349 $$ printout.print(newInventory)[ CD ]
Line_336 $$ PrintWriter printout = new PrintWriter(filebufwri)-->Line_349 $$ printout.print(newInventory)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_349 $$ printout.print(newInventory)[ FD ]
Line_340 $$ if (renameFile) -->Line_350 $$ printout.close()[ CD ]
Line_336 $$ PrintWriter printout = new PrintWriter(filebufwri)-->Line_350 $$ printout.close()[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_355 $$ dbConn.rollback()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_355 $$ dbConn.rollback()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_357 $$ log.error("Unable to rollback DB")[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_359 $$ log.error("Failed writing to file '" + newPathToFile + "'.")[ FD ]
Line_25 $$ java.sql.Connection dbConn = null-->Line_364 $$ dbConn.close()[ FD ]
Line_27 $$ dbConn = DatabaseConnectionFactory.getInstance().getConnection()-->Line_364 $$ dbConn.close()[ FD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_366 $$ log.error("Unable to close connection to DB")[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_370 $$ log.debug("" + returnValue)[ CD ]
Line_4 $$ Category log = ThreadCategory.getInstance(getClass())-->Line_370 $$ log.debug("" + returnValue)[ FD ]
Line_2 $$ public int save(String newInventory, String inventoryType, int compareResult, boolean renameCorruptedFile) -->Line_371 $$ return returnValue[ CD ]
Line_239 $$ String currDbColumn = (String) dbColumnIter.next()-->Line_240 $$ String dataItem = (String) asset.get(currDbColumn)[ FD ]
Line_240 $$ String dataItem = (String) asset.get(currDbColumn)-->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ FD ]
Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")-->Line_241 $$ dataItem = dataItem.replaceAll("[ \t]+", " ")[ FD ]
