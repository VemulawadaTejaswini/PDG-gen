Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_2 $$ public static void main(String[] args) [ CD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ CD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ CD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ FD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) [ CD ]
Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) -->Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) [ CD ]
Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) -->Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) [ FD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) [ FD ]
Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) -->Line_5 $$ u.usage()[ CD ]
Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) -->Line_6 $$ System.exit(1)[ CD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_8 $$ if (CommonParameters.startArg > (i + 1))[ CD ]
Line_8 $$ if (CommonParameters.startArg > (i + 1))-->Line_8 $$ i = CommonParameters.startArg - 1[ CD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_8 $$ i = CommonParameters.startArg - 1[ FD ]
Line_8 $$ i = CommonParameters.startArg - 1-->Line_8 $$ i = CommonParameters.startArg - 1[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ if (args.length < CommonParameters.startArg + 2) [ CD ]
Line_10 $$ if (args.length < CommonParameters.startArg + 2) -->Line_11 $$ u.usage()[ CD ]
Line_10 $$ if (args.length < CommonParameters.startArg + 2) -->Line_12 $$ System.exit(1)[ CD ]
Line_16 $$ ContentName argName = ContentName.fromURI(args[CommonParameters.startArg])-->Line_16 $$ ContentName argName = ContentName.fromURI(args[CommonParameters.startArg])[ CD ]
Line_17 $$ CCNHandle handle = CCNHandle.open()-->Line_17 $$ CCNHandle handle = CCNHandle.open()[ CD ]
Line_18 $$ File theFile = new File(args[CommonParameters.startArg + 1])-->Line_19 $$ if (theFile.exists()) [ FD ]
Line_19 $$ if (theFile.exists()) -->Line_19 $$ if (theFile.exists()) [ CD ]
Line_18 $$ File theFile = new File(args[CommonParameters.startArg + 1])-->Line_19 $$ if (theFile.exists()) [ FD ]
Line_19 $$ if (theFile.exists()) -->Line_20 $$ System.out.println("Overwriting file: " + args[CommonParameters.startArg + 1])[ CD ]
Line_23 $$ long starttime = System.currentTimeMillis()-->Line_23 $$ long starttime = System.currentTimeMillis()[ CD ]
Line_25 $$ if (CommonParameters.unversioned)-->Line_25 $$ input = new CCNInputStream(argName, handle)[ CD ]
Line_24 $$ CCNInputStream input-->Line_25 $$ input = new CCNInputStream(argName, handle)[ FD ]
Line_25 $$ input = new CCNInputStream(argName, handle)-->Line_25 $$ input = new CCNInputStream(argName, handle)[ FD ]
Line_25 $$ if (CommonParameters.unversioned)-->Line_25 $$ input = new CCNFileInputStream(argName, handle)[ CD ]
Line_24 $$ CCNInputStream input-->Line_25 $$ input = new CCNFileInputStream(argName, handle)[ FD ]
Line_25 $$ input = new CCNInputStream(argName, handle)-->Line_25 $$ input = new CCNFileInputStream(argName, handle)[ FD ]
Line_25 $$ input = new CCNFileInputStream(argName, handle)-->Line_25 $$ input = new CCNFileInputStream(argName, handle)[ FD ]
Line_26 $$ if (CommonParameters.timeout != null) -->Line_27 $$ input.setTimeout(CommonParameters.timeout)[ CD ]
Line_24 $$ CCNInputStream input-->Line_27 $$ input.setTimeout(CommonParameters.timeout)[ FD ]
Line_25 $$ input = new CCNInputStream(argName, handle)-->Line_27 $$ input.setTimeout(CommonParameters.timeout)[ FD ]
Line_25 $$ input = new CCNFileInputStream(argName, handle)-->Line_27 $$ input.setTimeout(CommonParameters.timeout)[ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_32 $$ while ((readcount = input.read(buffer)) != -1) [ FD ]
Line_30 $$ int readcount = 0-->Line_32 $$ while ((readcount = input.read(buffer)) != -1) [ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_32 $$ while ((readcount = input.read(buffer)) != -1) [ CD ]
Line_24 $$ CCNInputStream input-->Line_32 $$ while ((readcount = input.read(buffer)) != -1) [ FD ]
Line_25 $$ input = new CCNInputStream(argName, handle)-->Line_32 $$ while ((readcount = input.read(buffer)) != -1) [ FD ]
Line_25 $$ input = new CCNFileInputStream(argName, handle)-->Line_32 $$ while ((readcount = input.read(buffer)) != -1) [ FD ]
Line_29 $$ byte[] buffer = new byte[readsize]-->Line_32 $$ while ((readcount = input.read(buffer)) != -1) [ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_33 $$ readtotal += readcount[ CD ]
Line_33 $$ readtotal += readcount-->Line_33 $$ readtotal += readcount[ FD ]
Line_31 $$ long readtotal = 0-->Line_33 $$ readtotal += readcount[ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_33 $$ readtotal += readcount[ FD ]
Line_30 $$ int readcount = 0-->Line_33 $$ readtotal += readcount[ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_34 $$ output.write(buffer, 0, readcount)[ CD ]
Line_22 $$ FileOutputStream output = new FileOutputStream(theFile)-->Line_34 $$ output.write(buffer, 0, readcount)[ FD ]
Line_29 $$ byte[] buffer = new byte[readsize]-->Line_34 $$ output.write(buffer, 0, readcount)[ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_34 $$ output.write(buffer, 0, readcount)[ FD ]
Line_30 $$ int readcount = 0-->Line_34 $$ output.write(buffer, 0, readcount)[ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_35 $$ output.flush()[ CD ]
Line_22 $$ FileOutputStream output = new FileOutputStream(theFile)-->Line_35 $$ output.flush()[ FD ]
Line_37 $$ if (CommonParameters.verbose)-->Line_37 $$ System.out.println("ccngetfile took: " + (System.currentTimeMillis() - starttime) + "ms")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_50 $$ System.exit(1)[ CD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ FD ]
Line_8 $$ i = CommonParameters.startArg - 1-->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ FD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ FD ]
Line_8 $$ i = CommonParameters.startArg - 1-->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ FD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ FD ]
Line_8 $$ i = CommonParameters.startArg - 1-->Line_3 $$ for (int i = 0; i < args.length - 2; i++) [ FD ]
Line_3 $$ for (int i = 0; i < args.length - 2; i++) -->Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) [ FD ]
Line_8 $$ i = CommonParameters.startArg - 1-->Line_4 $$ if (!CommonArguments.parseArguments(args, i, u)) [ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_33 $$ readtotal += readcount[ FD ]
Line_32 $$ while ((readcount = input.read(buffer)) != -1) -->Line_34 $$ output.write(buffer, 0, readcount)[ FD ]
