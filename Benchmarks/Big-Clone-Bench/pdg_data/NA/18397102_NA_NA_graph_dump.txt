Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void extractArchive(File archive) [ CD ]
Line_2 $$ protected void extractArchive(File archive) -->Line_3 $$ ZipInputStream zis = null[ CD ]
Line_2 $$ protected void extractArchive(File archive) -->Line_4 $$ FileOutputStream fos[ CD ]
Line_2 $$ protected void extractArchive(File archive) -->Line_5 $$ ZipEntry entry[ CD ]
Line_2 $$ protected void extractArchive(File archive) -->Line_6 $$ File curEntry[ CD ]
Line_2 $$ protected void extractArchive(File archive) -->Line_7 $$ int n[ CD ]
Line_3 $$ ZipInputStream zis = null-->Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))[ FD ]
Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))-->Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_10 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_5 $$ ZipEntry entry-->Line_10 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_10 $$ while ((entry = zis.getNextEntry()) != null) [ CD ]
Line_3 $$ ZipInputStream zis = null-->Line_10 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))-->Line_10 $$ while ((entry = zis.getNextEntry()) != null) [ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_11 $$ curEntry = new File(workingDir, entry.getName())[ CD ]
Line_11 $$ curEntry = new File(workingDir, entry.getName())-->Line_11 $$ curEntry = new File(workingDir, entry.getName())[ FD ]
Line_6 $$ File curEntry-->Line_11 $$ curEntry = new File(workingDir, entry.getName())[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_11 $$ curEntry = new File(workingDir, entry.getName())[ FD ]
Line_5 $$ ZipEntry entry-->Line_11 $$ curEntry = new File(workingDir, entry.getName())[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_12 $$ if (entry.isDirectory()) [ CD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_12 $$ if (entry.isDirectory()) [ FD ]
Line_5 $$ ZipEntry entry-->Line_12 $$ if (entry.isDirectory()) [ FD ]
Line_12 $$ if (entry.isDirectory()) -->Line_12 $$ if (entry.isDirectory()) [ CD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_12 $$ if (entry.isDirectory()) [ FD ]
Line_5 $$ ZipEntry entry-->Line_12 $$ if (entry.isDirectory()) [ FD ]
Line_12 $$ if (entry.isDirectory()) -->Line_13 $$ System.out.println("skip directory: " + entry.getName())[ CD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ System.out.println("skip directory: " + entry.getName())[ FD ]
Line_5 $$ ZipEntry entry-->Line_13 $$ System.out.println("skip directory: " + entry.getName())[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_16 $$ System.out.print("zip-entry (file): " + entry.getName())[ CD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_16 $$ System.out.print("zip-entry (file): " + entry.getName())[ FD ]
Line_5 $$ ZipEntry entry-->Line_16 $$ System.out.print("zip-entry (file): " + entry.getName())[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_17 $$ System.out.println(" ==> real path: " + curEntry.getAbsolutePath())[ CD ]
Line_11 $$ curEntry = new File(workingDir, entry.getName())-->Line_17 $$ System.out.println(" ==> real path: " + curEntry.getAbsolutePath())[ FD ]
Line_6 $$ File curEntry-->Line_17 $$ System.out.println(" ==> real path: " + curEntry.getAbsolutePath())[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_18 $$ if (!curEntry.getParentFile().exists())[ CD ]
Line_18 $$ if (!curEntry.getParentFile().exists())-->Line_18 $$ if (!curEntry.getParentFile().exists())[ CD ]
Line_18 $$ if (!curEntry.getParentFile().exists())-->Line_18 $$ if (!curEntry.getParentFile().exists())[ CD ]
Line_11 $$ curEntry = new File(workingDir, entry.getName())-->Line_18 $$ if (!curEntry.getParentFile().exists())[ FD ]
Line_6 $$ File curEntry-->Line_18 $$ if (!curEntry.getParentFile().exists())[ FD ]
Line_18 $$ if (!curEntry.getParentFile().exists())-->Line_18 $$ curEntry.getParentFile().mkdirs()[ CD ]
Line_11 $$ curEntry = new File(workingDir, entry.getName())-->Line_18 $$ curEntry.getParentFile().mkdirs()[ FD ]
Line_6 $$ File curEntry-->Line_18 $$ curEntry.getParentFile().mkdirs()[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_19 $$ fos = new FileOutputStream(curEntry)[ CD ]
Line_19 $$ fos = new FileOutputStream(curEntry)-->Line_19 $$ fos = new FileOutputStream(curEntry)[ FD ]
Line_4 $$ FileOutputStream fos-->Line_19 $$ fos = new FileOutputStream(curEntry)[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)[ CD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_10 $$ while ((entry = zis.getNextEntry()) != null) [ CD ]
Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)-->Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)[ FD ]
Line_7 $$ int n-->Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)[ FD ]
Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)-->Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)[ CD ]
Line_3 $$ ZipInputStream zis = null-->Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)[ FD ]
Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))-->Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)[ FD ]
Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)-->Line_20 $$ fos.write(buf, 0, n)[ CD ]
Line_19 $$ fos = new FileOutputStream(curEntry)-->Line_20 $$ fos.write(buf, 0, n)[ FD ]
Line_4 $$ FileOutputStream fos-->Line_20 $$ fos.write(buf, 0, n)[ FD ]
Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)-->Line_20 $$ fos.write(buf, 0, n)[ FD ]
Line_7 $$ int n-->Line_20 $$ fos.write(buf, 0, n)[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_21 $$ fos.close()[ CD ]
Line_19 $$ fos = new FileOutputStream(curEntry)-->Line_21 $$ fos.close()[ FD ]
Line_4 $$ FileOutputStream fos-->Line_21 $$ fos.close()[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_22 $$ zis.closeEntry()[ CD ]
Line_3 $$ ZipInputStream zis = null-->Line_22 $$ zis.closeEntry()[ FD ]
Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))-->Line_22 $$ zis.closeEntry()[ FD ]
Line_3 $$ ZipInputStream zis = null-->Line_28 $$ if (zis != null)[ FD ]
Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))-->Line_28 $$ if (zis != null)[ FD ]
Line_28 $$ if (zis != null)-->Line_28 $$ zis.close()[ CD ]
Line_3 $$ ZipInputStream zis = null-->Line_28 $$ zis.close()[ FD ]
Line_9 $$ zis = new ZipInputStream(new FileInputStream(archive))-->Line_28 $$ zis.close()[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_11 $$ curEntry = new File(workingDir, entry.getName())[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_12 $$ if (entry.isDirectory()) [ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_12 $$ if (entry.isDirectory()) [ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_13 $$ System.out.println("skip directory: " + entry.getName())[ FD ]
Line_10 $$ while ((entry = zis.getNextEntry()) != null) -->Line_16 $$ System.out.print("zip-entry (file): " + entry.getName())[ FD ]
Line_11 $$ curEntry = new File(workingDir, entry.getName())-->Line_17 $$ System.out.println(" ==> real path: " + curEntry.getAbsolutePath())[ FD ]
Line_11 $$ curEntry = new File(workingDir, entry.getName())-->Line_18 $$ if (!curEntry.getParentFile().exists())[ FD ]
Line_11 $$ curEntry = new File(workingDir, entry.getName())-->Line_18 $$ curEntry.getParentFile().mkdirs()[ FD ]
Line_19 $$ fos = new FileOutputStream(curEntry)-->Line_21 $$ fos.close()[ FD ]
Line_20 $$ while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n)-->Line_20 $$ fos.write(buf, 0, n)[ FD ]
