Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException [ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_3 $$ ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true)[ CD ]
Line_3 $$ ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true)-->Line_3 $$ ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true)[ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_3 $$ ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true)[ FD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_3 $$ ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true)[ FD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_4 $$ if (list.size() == 0) [ CD ]
Line_3 $$ ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true)-->Line_4 $$ if (list.size() == 0) [ FD ]
Line_4 $$ if (list.size() == 0) -->Line_5 $$ if (!quiet) [ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_5 $$ if (!quiet) [ FD ]
Line_5 $$ if (!quiet) -->Line_5 $$ if (!quiet) [ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_5 $$ if (!quiet) [ FD ]
Line_5 $$ if (!quiet) -->Line_6 $$ printNoDatabaseFilesFound(directory, db)[ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_6 $$ printNoDatabaseFilesFound(directory, db)[ FD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_6 $$ printNoDatabaseFilesFound(directory, db)[ FD ]
Line_4 $$ if (list.size() == 0) -->Line_8 $$ return[ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)[ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)[ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)[ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)[ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)[ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)[ FD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_11 $$ if (FileUtils.exists(zipFileName)) [ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_11 $$ if (FileUtils.exists(zipFileName)) [ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_11 $$ if (FileUtils.exists(zipFileName)) [ FD ]
Line_11 $$ if (FileUtils.exists(zipFileName)) -->Line_11 $$ if (FileUtils.exists(zipFileName)) [ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_11 $$ if (FileUtils.exists(zipFileName)) [ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_11 $$ if (FileUtils.exists(zipFileName)) [ FD ]
Line_11 $$ if (FileUtils.exists(zipFileName)) -->Line_12 $$ FileUtils.delete(zipFileName)[ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_12 $$ FileUtils.delete(zipFileName)[ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_12 $$ FileUtils.delete(zipFileName)[ FD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_14 $$ OutputStream fileOut = null[ CD ]
Line_14 $$ OutputStream fileOut = null-->Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)[ FD ]
Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)-->Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)[ FD ]
Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)-->Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)[ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)[ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)[ FD ]
Line_19 $$ for (String fileName : list) -->Line_20 $$ if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) [ FD ]
Line_20 $$ if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) -->Line_20 $$ if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) [ CD ]
Line_19 $$ for (String fileName : list) -->Line_20 $$ if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) [ FD ]
Line_20 $$ if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) -->Line_21 $$ base = FileUtils.getParent(fileName)[ CD ]
Line_18 $$ String base = ""-->Line_21 $$ base = FileUtils.getParent(fileName)[ FD ]
Line_21 $$ base = FileUtils.getParent(fileName)-->Line_21 $$ base = FileUtils.getParent(fileName)[ FD ]
Line_21 $$ base = FileUtils.getParent(fileName)-->Line_21 $$ base = FileUtils.getParent(fileName)[ CD ]
Line_19 $$ for (String fileName : list) -->Line_21 $$ base = FileUtils.getParent(fileName)[ FD ]
Line_20 $$ if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) -->Line_23 $$ if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) [ CD ]
Line_19 $$ for (String fileName : list) -->Line_23 $$ if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) [ FD ]
Line_23 $$ if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) -->Line_23 $$ if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) [ CD ]
Line_19 $$ for (String fileName : list) -->Line_23 $$ if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) [ FD ]
Line_23 $$ if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) -->Line_24 $$ base = FileUtils.getParent(fileName)[ CD ]
Line_18 $$ String base = ""-->Line_24 $$ base = FileUtils.getParent(fileName)[ FD ]
Line_21 $$ base = FileUtils.getParent(fileName)-->Line_24 $$ base = FileUtils.getParent(fileName)[ FD ]
Line_24 $$ base = FileUtils.getParent(fileName)-->Line_24 $$ base = FileUtils.getParent(fileName)[ FD ]
Line_24 $$ base = FileUtils.getParent(fileName)-->Line_24 $$ base = FileUtils.getParent(fileName)[ CD ]
Line_19 $$ for (String fileName : list) -->Line_24 $$ base = FileUtils.getParent(fileName)[ FD ]
Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)-->Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)[ CD ]
Line_19 $$ for (String fileName : list) -->Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)[ FD ]
Line_30 $$ if (!f.startsWith(base)) -->Line_30 $$ if (!f.startsWith(base)) [ CD ]
Line_30 $$ if (!f.startsWith(base)) -->Line_30 $$ if (!f.startsWith(base)) [ CD ]
Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)-->Line_30 $$ if (!f.startsWith(base)) [ FD ]
Line_18 $$ String base = ""-->Line_30 $$ if (!f.startsWith(base)) [ FD ]
Line_21 $$ base = FileUtils.getParent(fileName)-->Line_30 $$ if (!f.startsWith(base)) [ FD ]
Line_24 $$ base = FileUtils.getParent(fileName)-->Line_30 $$ if (!f.startsWith(base)) [ FD ]
Line_30 $$ if (!f.startsWith(base)) -->Line_31 $$ Message.throwInternalError(f + " does not start with " + base)[ CD ]
Line_19 $$ for (String fileName : list) -->Line_33 $$ if (FileUtils.isDirectory(fileName)) [ FD ]
Line_33 $$ if (FileUtils.isDirectory(fileName)) -->Line_33 $$ if (FileUtils.isDirectory(fileName)) [ CD ]
Line_19 $$ for (String fileName : list) -->Line_33 $$ if (FileUtils.isDirectory(fileName)) [ FD ]
Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)-->Line_36 $$ f = f.substring(base.length())[ FD ]
Line_36 $$ f = f.substring(base.length())-->Line_36 $$ f = f.substring(base.length())[ FD ]
Line_36 $$ f = f.substring(base.length())-->Line_36 $$ f = f.substring(base.length())[ CD ]
Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)-->Line_36 $$ f = f.substring(base.length())[ FD ]
Line_36 $$ f = f.substring(base.length())-->Line_36 $$ f = f.substring(base.length())[ FD ]
Line_18 $$ String base = ""-->Line_36 $$ f = f.substring(base.length())[ FD ]
Line_21 $$ base = FileUtils.getParent(fileName)-->Line_36 $$ f = f.substring(base.length())[ FD ]
Line_24 $$ base = FileUtils.getParent(fileName)-->Line_36 $$ f = f.substring(base.length())[ FD ]
Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)-->Line_37 $$ f = BackupCommand.correctFileName(f)[ FD ]
Line_36 $$ f = f.substring(base.length())-->Line_37 $$ f = BackupCommand.correctFileName(f)[ FD ]
Line_37 $$ f = BackupCommand.correctFileName(f)-->Line_37 $$ f = BackupCommand.correctFileName(f)[ FD ]
Line_37 $$ f = BackupCommand.correctFileName(f)-->Line_37 $$ f = BackupCommand.correctFileName(f)[ CD ]
Line_29 $$ String f = FileUtils.getAbsolutePath(fileName)-->Line_37 $$ f = BackupCommand.correctFileName(f)[ FD ]
Line_36 $$ f = f.substring(base.length())-->Line_37 $$ f = BackupCommand.correctFileName(f)[ FD ]
Line_37 $$ f = BackupCommand.correctFileName(f)-->Line_37 $$ f = BackupCommand.correctFileName(f)[ FD ]
Line_17 $$ ZipOutputStream zipOut = new ZipOutputStream(fileOut)-->Line_39 $$ zipOut.putNextEntry(entry)[ FD ]
Line_38 $$ ZipEntry entry = new ZipEntry(f)-->Line_39 $$ zipOut.putNextEntry(entry)[ FD ]
Line_40 $$ InputStream in = null-->Line_42 $$ in = FileUtils.openFileInputStream(fileName)[ FD ]
Line_42 $$ in = FileUtils.openFileInputStream(fileName)-->Line_42 $$ in = FileUtils.openFileInputStream(fileName)[ FD ]
Line_42 $$ in = FileUtils.openFileInputStream(fileName)-->Line_42 $$ in = FileUtils.openFileInputStream(fileName)[ CD ]
Line_19 $$ for (String fileName : list) -->Line_42 $$ in = FileUtils.openFileInputStream(fileName)[ FD ]
Line_40 $$ InputStream in = null-->Line_43 $$ IOUtils.copyAndCloseInput(in, zipOut)[ FD ]
Line_42 $$ in = FileUtils.openFileInputStream(fileName)-->Line_43 $$ IOUtils.copyAndCloseInput(in, zipOut)[ FD ]
Line_17 $$ ZipOutputStream zipOut = new ZipOutputStream(fileOut)-->Line_43 $$ IOUtils.copyAndCloseInput(in, zipOut)[ FD ]
Line_40 $$ InputStream in = null-->Line_46 $$ IOUtils.closeSilently(in)[ FD ]
Line_42 $$ in = FileUtils.openFileInputStream(fileName)-->Line_46 $$ IOUtils.closeSilently(in)[ FD ]
Line_17 $$ ZipOutputStream zipOut = new ZipOutputStream(fileOut)-->Line_48 $$ zipOut.closeEntry()[ FD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_49 $$ if (!quiet) [ FD ]
Line_49 $$ if (!quiet) -->Line_49 $$ if (!quiet) [ CD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_49 $$ if (!quiet) [ FD ]
Line_49 $$ if (!quiet) -->Line_50 $$ out.println("Processed: " + fileName)[ CD ]
Line_17 $$ ZipOutputStream zipOut = new ZipOutputStream(fileOut)-->Line_53 $$ zipOut.closeEntry()[ FD ]
Line_17 $$ ZipOutputStream zipOut = new ZipOutputStream(fileOut)-->Line_54 $$ zipOut.close()[ FD ]
Line_2 $$ private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException -->Line_56 $$ throw Message.convertIOException(e, zipFileName)[ FD ]
Line_10 $$ zipFileName = FileUtils.normalize(zipFileName)-->Line_56 $$ throw Message.convertIOException(e, zipFileName)[ FD ]
Line_14 $$ OutputStream fileOut = null-->Line_58 $$ IOUtils.closeSilently(fileOut)[ FD ]
Line_16 $$ fileOut = FileUtils.openFileOutputStream(zipFileName, false)-->Line_58 $$ IOUtils.closeSilently(fileOut)[ FD ]
