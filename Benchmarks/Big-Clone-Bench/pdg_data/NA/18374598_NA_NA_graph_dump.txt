Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private synchronized File download() throws AMSpacksException [ CD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_3 $$ String a = addr.url.toExternalForm()[ CD ]
Line_3 $$ String a = addr.url.toExternalForm()-->Line_3 $$ String a = addr.url.toExternalForm()[ CD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_4 $$ int p = a.lastIndexOf('/')[ CD ]
Line_4 $$ int p = a.lastIndexOf('/')-->Line_4 $$ int p = a.lastIndexOf('/')[ CD ]
Line_3 $$ String a = addr.url.toExternalForm()-->Line_4 $$ int p = a.lastIndexOf('/')[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_5 $$ if (p < 0) [ CD ]
Line_4 $$ int p = a.lastIndexOf('/')-->Line_5 $$ if (p < 0) [ FD ]
Line_5 $$ if (p < 0) -->Line_6 $$ p = a.lastIndexOf('\\')[ CD ]
Line_4 $$ int p = a.lastIndexOf('/')-->Line_6 $$ p = a.lastIndexOf('\\')[ FD ]
Line_6 $$ p = a.lastIndexOf('\\')-->Line_6 $$ p = a.lastIndexOf('\\')[ FD ]
Line_6 $$ p = a.lastIndexOf('\\')-->Line_6 $$ p = a.lastIndexOf('\\')[ CD ]
Line_3 $$ String a = addr.url.toExternalForm()-->Line_6 $$ p = a.lastIndexOf('\\')[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_8 $$ if (p < 0) [ CD ]
Line_4 $$ int p = a.lastIndexOf('/')-->Line_8 $$ if (p < 0) [ FD ]
Line_6 $$ p = a.lastIndexOf('\\')-->Line_8 $$ if (p < 0) [ FD ]
Line_8 $$ if (p < 0) -->Line_9 $$ a = "" + Math.random()[ CD ]
Line_3 $$ String a = addr.url.toExternalForm()-->Line_9 $$ a = "" + Math.random()[ FD ]
Line_9 $$ a = "" + Math.random()-->Line_9 $$ a = "" + Math.random()[ FD ]
Line_8 $$ if (p < 0) -->Line_11 $$ a = a.substring(p + 1)[ CD ]
Line_3 $$ String a = addr.url.toExternalForm()-->Line_11 $$ a = a.substring(p + 1)[ FD ]
Line_9 $$ a = "" + Math.random()-->Line_11 $$ a = a.substring(p + 1)[ FD ]
Line_11 $$ a = a.substring(p + 1)-->Line_11 $$ a = a.substring(p + 1)[ FD ]
Line_11 $$ a = a.substring(p + 1)-->Line_11 $$ a = a.substring(p + 1)[ CD ]
Line_3 $$ String a = addr.url.toExternalForm()-->Line_11 $$ a = a.substring(p + 1)[ FD ]
Line_9 $$ a = "" + Math.random()-->Line_11 $$ a = a.substring(p + 1)[ FD ]
Line_11 $$ a = a.substring(p + 1)-->Line_11 $$ a = a.substring(p + 1)[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_13 $$ File td = null[ CD ]
Line_13 $$ File td = null-->Line_15 $$ td = File.createTempFile(a, "").getParentFile()[ FD ]
Line_15 $$ td = File.createTempFile(a, "").getParentFile()-->Line_15 $$ td = File.createTempFile(a, "").getParentFile()[ FD ]
Line_15 $$ td = File.createTempFile(a, "").getParentFile()-->Line_15 $$ td = File.createTempFile(a, "").getParentFile()[ CD ]
Line_3 $$ String a = addr.url.toExternalForm()-->Line_15 $$ td = File.createTempFile(a, "").getParentFile()[ FD ]
Line_9 $$ a = "" + Math.random()-->Line_15 $$ td = File.createTempFile(a, "").getParentFile()[ FD ]
Line_11 $$ a = a.substring(p + 1)-->Line_15 $$ td = File.createTempFile(a, "").getParentFile()[ FD ]
Line_13 $$ File td = null-->Line_17 $$ td = new File(".")[ FD ]
Line_15 $$ td = File.createTempFile(a, "").getParentFile()-->Line_17 $$ td = new File(".")[ FD ]
Line_17 $$ td = new File(".")-->Line_17 $$ td = new File(".")[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_19 $$ File f = new File(td, a)[ CD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_20 $$ td.delete()[ CD ]
Line_13 $$ File td = null-->Line_20 $$ td.delete()[ FD ]
Line_15 $$ td = File.createTempFile(a, "").getParentFile()-->Line_20 $$ td.delete()[ FD ]
Line_17 $$ td = new File(".")-->Line_20 $$ td.delete()[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_21 $$ long total = addr.update.getSize()[ CD ]
Line_21 $$ long total = addr.update.getSize()-->Line_21 $$ long total = addr.update.getSize()[ CD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_22 $$ int progress = 0[ CD ]
Line_28 $$ long percentage = 0-->Line_29 $$ callback.updateProgress(percentage)[ FD ]
Line_27 $$ int n-->Line_30 $$ do [ FD ]
Line_30 $$ do -->Line_31 $$ n = in.read(buf)[ CD ]
Line_31 $$ n = in.read(buf)-->Line_31 $$ n = in.read(buf)[ FD ]
Line_27 $$ int n-->Line_31 $$ n = in.read(buf)[ FD ]
Line_31 $$ n = in.read(buf)-->Line_31 $$ n = in.read(buf)[ CD ]
Line_24 $$ InputStream in = new BufferedInputStream(addr.url.openStream())-->Line_31 $$ n = in.read(buf)[ FD ]
Line_26 $$ byte[] buf = new byte[500]-->Line_31 $$ n = in.read(buf)[ FD ]
Line_30 $$ do -->Line_32 $$ if (n > 0) [ CD ]
Line_31 $$ n = in.read(buf)-->Line_32 $$ if (n > 0) [ FD ]
Line_27 $$ int n-->Line_32 $$ if (n > 0) [ FD ]
Line_32 $$ if (n > 0) -->Line_33 $$ out.write(buf, 0, n)[ CD ]
Line_25 $$ FileOutputStream out = new FileOutputStream(f)-->Line_33 $$ out.write(buf, 0, n)[ FD ]
Line_26 $$ byte[] buf = new byte[500]-->Line_33 $$ out.write(buf, 0, n)[ FD ]
Line_31 $$ n = in.read(buf)-->Line_33 $$ out.write(buf, 0, n)[ FD ]
Line_27 $$ int n-->Line_33 $$ out.write(buf, 0, n)[ FD ]
Line_32 $$ if (n > 0) -->Line_34 $$ progress += n[ CD ]
Line_34 $$ progress += n-->Line_34 $$ progress += n[ FD ]
Line_22 $$ int progress = 0-->Line_34 $$ progress += n[ FD ]
Line_31 $$ n = in.read(buf)-->Line_34 $$ progress += n[ FD ]
Line_27 $$ int n-->Line_34 $$ progress += n[ FD ]
Line_32 $$ if (n > 0) -->Line_35 $$ long tmpPercentage = progress * 100 / total[ CD ]
Line_32 $$ if (n > 0) -->Line_36 $$ if (percentage != tmpPercentage) [ CD ]
Line_28 $$ long percentage = 0-->Line_36 $$ if (percentage != tmpPercentage) [ FD ]
Line_35 $$ long tmpPercentage = progress * 100 / total-->Line_36 $$ if (percentage != tmpPercentage) [ FD ]
Line_36 $$ if (percentage != tmpPercentage) -->Line_37 $$ percentage = tmpPercentage[ CD ]
Line_37 $$ percentage = tmpPercentage-->Line_37 $$ percentage = tmpPercentage[ FD ]
Line_28 $$ long percentage = 0-->Line_37 $$ percentage = tmpPercentage[ FD ]
Line_35 $$ long tmpPercentage = progress * 100 / total-->Line_37 $$ percentage = tmpPercentage[ FD ]
Line_36 $$ if (percentage != tmpPercentage) -->Line_38 $$ callback.updateProgress(percentage)[ CD ]
Line_37 $$ percentage = tmpPercentage-->Line_38 $$ callback.updateProgress(percentage)[ FD ]
Line_28 $$ long percentage = 0-->Line_38 $$ callback.updateProgress(percentage)[ FD ]
Line_24 $$ InputStream in = new BufferedInputStream(addr.url.openStream())-->Line_42 $$ in.close()[ FD ]
Line_25 $$ FileOutputStream out = new FileOutputStream(f)-->Line_43 $$ out.flush()[ FD ]
Line_25 $$ FileOutputStream out = new FileOutputStream(f)-->Line_44 $$ out.close()[ FD ]
Line_19 $$ File f = new File(td, a)-->Line_46 $$ f.delete()[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_49 $$ long size = f.length()[ CD ]
Line_49 $$ long size = f.length()-->Line_49 $$ long size = f.length()[ CD ]
Line_19 $$ File f = new File(td, a)-->Line_49 $$ long size = f.length()[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_50 $$ String checksum = CheckSumFinder.checkSum(f)[ CD ]
Line_50 $$ String checksum = CheckSumFinder.checkSum(f)-->Line_50 $$ String checksum = CheckSumFinder.checkSum(f)[ CD ]
Line_19 $$ File f = new File(td, a)-->Line_50 $$ String checksum = CheckSumFinder.checkSum(f)[ FD ]
Line_2 $$ private synchronized File download() throws AMSpacksException -->Line_51 $$ if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum()))[ CD ]
Line_19 $$ File f = new File(td, a)-->Line_51 $$ if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum()))[ FD ]
Line_50 $$ String checksum = CheckSumFinder.checkSum(f)-->Line_51 $$ if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum()))[ FD ]
Line_51 $$ if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum()))-->Line_51 $$ return f[ CD ]
Line_51 $$ if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum()))-->Line_52 $$ f.delete()[ CD ]
Line_19 $$ File f = new File(td, a)-->Line_52 $$ f.delete()[ FD ]
Line_31 $$ n = in.read(buf)-->Line_30 $$ do [ FD ]
Line_31 $$ n = in.read(buf)-->Line_30 $$ do [ FD ]
Line_31 $$ n = in.read(buf)-->Line_32 $$ if (n > 0) [ FD ]
Line_31 $$ n = in.read(buf)-->Line_33 $$ out.write(buf, 0, n)[ FD ]
Line_31 $$ n = in.read(buf)-->Line_34 $$ progress += n[ FD ]
Line_37 $$ percentage = tmpPercentage-->Line_36 $$ if (percentage != tmpPercentage) [ FD ]
Line_35 $$ long tmpPercentage = progress * 100 / total-->Line_36 $$ if (percentage != tmpPercentage) [ FD ]
Line_35 $$ long tmpPercentage = progress * 100 / total-->Line_37 $$ percentage = tmpPercentage[ FD ]
Line_37 $$ percentage = tmpPercentage-->Line_38 $$ callback.updateProgress(percentage)[ FD ]
