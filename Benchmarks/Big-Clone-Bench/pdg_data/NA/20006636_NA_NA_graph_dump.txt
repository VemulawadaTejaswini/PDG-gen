Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException [ CD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_3 $$ TrimParser trimmer = new TrimParser()[ CD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_4 $$ SffParser.parseSFF(untrimmedSffFile, trimmer)[ CD ]
Line_3 $$ TrimParser trimmer = new TrimParser()-->Line_4 $$ SffParser.parseSFF(untrimmedSffFile, trimmer)[ FD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_5 $$ tempOut.close()[ CD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_6 $$ headerBuilder.withNoIndex().numberOfReads(numberOfTrimmedReads)[ CD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_7 $$ SffWriter.writeCommonHeader(headerBuilder.build(), out)[ CD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_7 $$ SffWriter.writeCommonHeader(headerBuilder.build(), out)[ FD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_8 $$ InputStream in = null[ CD ]
Line_8 $$ InputStream in = null-->Line_10 $$ in = new FileInputStream(tempReadDataFile)[ FD ]
Line_10 $$ in = new FileInputStream(tempReadDataFile)-->Line_10 $$ in = new FileInputStream(tempReadDataFile)[ FD ]
Line_8 $$ InputStream in = null-->Line_11 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_10 $$ in = new FileInputStream(tempReadDataFile)-->Line_11 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_2 $$ public void trimAndWriteNewSff(OutputStream out) throws IOException -->Line_11 $$ IOUtils.copyLarge(in, out)[ FD ]
Line_8 $$ InputStream in = null-->Line_13 $$ IOUtil.closeAndIgnoreErrors(in)[ FD ]
Line_10 $$ in = new FileInputStream(tempReadDataFile)-->Line_13 $$ IOUtil.closeAndIgnoreErrors(in)[ FD ]
