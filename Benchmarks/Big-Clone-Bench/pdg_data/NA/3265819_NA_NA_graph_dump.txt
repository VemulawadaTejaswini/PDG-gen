Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testLargePut() throws Throwable [ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_3 $$ int size = CommonParameters.BLOCK_SIZE[ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_4 $$ InputStream is = new FileInputStream(_fileName)[ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_5 $$ RepositoryFileOutputStream ostream = new RepositoryFileOutputStream(_nodeName, _putHandle, CommonParameters.local)[ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_6 $$ int readLen = 0[ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_7 $$ int writeLen = 0[ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_8 $$ byte[] buffer = new byte[CommonParameters.BLOCK_SIZE][ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) [ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_2 $$ public void testLargePut() throws Throwable [ CD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) [ FD ]
Line_6 $$ int readLen = 0-->Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) [ FD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) [ CD ]
Line_4 $$ InputStream is = new FileInputStream(_fileName)-->Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) [ FD ]
Line_8 $$ byte[] buffer = new byte[CommonParameters.BLOCK_SIZE]-->Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) [ FD ]
Line_3 $$ int size = CommonParameters.BLOCK_SIZE-->Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) [ FD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_10 $$ ostream.write(buffer, 0, readLen)[ CD ]
Line_5 $$ RepositoryFileOutputStream ostream = new RepositoryFileOutputStream(_nodeName, _putHandle, CommonParameters.local)-->Line_10 $$ ostream.write(buffer, 0, readLen)[ FD ]
Line_8 $$ byte[] buffer = new byte[CommonParameters.BLOCK_SIZE]-->Line_10 $$ ostream.write(buffer, 0, readLen)[ FD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_10 $$ ostream.write(buffer, 0, readLen)[ FD ]
Line_6 $$ int readLen = 0-->Line_10 $$ ostream.write(buffer, 0, readLen)[ FD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_11 $$ writeLen += readLen[ CD ]
Line_11 $$ writeLen += readLen-->Line_11 $$ writeLen += readLen[ FD ]
Line_7 $$ int writeLen = 0-->Line_11 $$ writeLen += readLen[ FD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_11 $$ writeLen += readLen[ FD ]
Line_6 $$ int readLen = 0-->Line_11 $$ writeLen += readLen[ FD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_13 $$ ostream.close()[ CD ]
Line_5 $$ RepositoryFileOutputStream ostream = new RepositoryFileOutputStream(_nodeName, _putHandle, CommonParameters.local)-->Line_13 $$ ostream.close()[ FD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_14 $$ CCNStats stats = _putHandle.getNetworkManager().getStats()[ CD ]
Line_14 $$ CCNStats stats = _putHandle.getNetworkManager().getStats()-->Line_14 $$ CCNStats stats = _putHandle.getNetworkManager().getStats()[ CD ]
Line_2 $$ public void testLargePut() throws Throwable -->Line_15 $$ Assert.assertEquals(0, stats.getCounter("DeliverInterestFailed"))[ CD ]
Line_14 $$ CCNStats stats = _putHandle.getNetworkManager().getStats()-->Line_15 $$ Assert.assertEquals(0, stats.getCounter("DeliverInterestFailed"))[ FD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_10 $$ ostream.write(buffer, 0, readLen)[ FD ]
Line_9 $$ while ((readLen = is.read(buffer, 0, size)) != -1) -->Line_11 $$ writeLen += readLen[ FD ]
