Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void checkConnection(byte[] options) throws Throwable [ CD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)[ CD ]
Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)-->Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)[ CD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_4 $$ String server = opts.getProperty(TRANSFER_OPTION_SERVER)[ CD ]
Line_4 $$ String server = opts.getProperty(TRANSFER_OPTION_SERVER)-->Line_4 $$ String server = opts.getProperty(TRANSFER_OPTION_SERVER)[ CD ]
Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)-->Line_4 $$ String server = opts.getProperty(TRANSFER_OPTION_SERVER)[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_5 $$ String username = opts.getProperty(TRANSFER_OPTION_USERNAME)[ CD ]
Line_5 $$ String username = opts.getProperty(TRANSFER_OPTION_USERNAME)-->Line_5 $$ String username = opts.getProperty(TRANSFER_OPTION_USERNAME)[ CD ]
Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)-->Line_5 $$ String username = opts.getProperty(TRANSFER_OPTION_USERNAME)[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_6 $$ String password = opts.getProperty(TRANSFER_OPTION_PASSWORD)[ CD ]
Line_6 $$ String password = opts.getProperty(TRANSFER_OPTION_PASSWORD)-->Line_6 $$ String password = opts.getProperty(TRANSFER_OPTION_PASSWORD)[ CD ]
Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)-->Line_6 $$ String password = opts.getProperty(TRANSFER_OPTION_PASSWORD)[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_7 $$ String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH)[ CD ]
Line_7 $$ String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH)-->Line_7 $$ String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH)[ CD ]
Line_3 $$ Properties opts = PropertiesUtils.deserializeProperties(options)-->Line_7 $$ String filePath = opts.getProperty(TRANSFER_OPTION_FILEPATH)[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_8 $$ URL url = new URL(PROTOCOL_PREFIX + username + ":" + password + "@" + server + filePath + ";type=i")[ CD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_9 $$ URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS))[ CD ]
Line_9 $$ URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS))-->Line_9 $$ URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS))[ CD ]
Line_8 $$ URL url = new URL(PROTOCOL_PREFIX + username + ":" + password + "@" + server + filePath + ";type=i")-->Line_9 $$ URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS))[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_10 $$ urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000)[ CD ]
Line_9 $$ URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS))-->Line_10 $$ urlc.setConnectTimeout(Preferences.getInstance().preferredTimeOut * 1000)[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_11 $$ urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000)[ CD ]
Line_9 $$ URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS))-->Line_11 $$ urlc.setReadTimeout(Preferences.getInstance().preferredTimeOut * 1000)[ FD ]
Line_2 $$ public void checkConnection(byte[] options) throws Throwable -->Line_12 $$ urlc.connect()[ CD ]
Line_9 $$ URLConnection urlc = url.openConnection(BackEnd.getProxy(Proxy.Type.SOCKS))-->Line_12 $$ urlc.connect()[ FD ]
