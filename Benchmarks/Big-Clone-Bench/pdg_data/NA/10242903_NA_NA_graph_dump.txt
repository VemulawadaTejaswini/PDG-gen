Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private List<Feature> getFeatures(String source, EntryPoint e) throws MalformedURLException, SAXException, IOException, ParserConfigurationException, URISyntaxException [ CD ]
Line_2 $$ private List<Feature> getFeatures(String source, EntryPoint e) throws MalformedURLException, SAXException, IOException, ParserConfigurationException, URISyntaxException -->Line_3 $$ SAXParser parser = SAXParserFactory.newInstance().newSAXParser()[ CD ]
Line_3 $$ SAXParser parser = SAXParserFactory.newInstance().newSAXParser()-->Line_3 $$ SAXParser parser = SAXParserFactory.newInstance().newSAXParser()[ CD ]
Line_2 $$ private List<Feature> getFeatures(String source, EntryPoint e) throws MalformedURLException, SAXException, IOException, ParserConfigurationException, URISyntaxException -->Line_4 $$ FeatureParser featp = new FeatureParser()[ CD ]
Line_2 $$ private List<Feature> getFeatures(String source, EntryPoint e) throws MalformedURLException, SAXException, IOException, ParserConfigurationException, URISyntaxException -->Line_5 $$ parser.parse(URIFactory.url(serverPrefix + "/das/" + source + "/features?segment=" + e.id + ":" + e.start + "," + e.stop).openStream(), featp)[ CD ]
Line_3 $$ SAXParser parser = SAXParserFactory.newInstance().newSAXParser()-->Line_5 $$ parser.parse(URIFactory.url(serverPrefix + "/das/" + source + "/features?segment=" + e.id + ":" + e.start + "," + e.stop).openStream(), featp)[ FD ]
Line_4 $$ FeatureParser featp = new FeatureParser()-->Line_5 $$ parser.parse(URIFactory.url(serverPrefix + "/das/" + source + "/features?segment=" + e.id + ":" + e.start + "," + e.stop).openStream(), featp)[ FD ]
Line_2 $$ private List<Feature> getFeatures(String source, EntryPoint e) throws MalformedURLException, SAXException, IOException, ParserConfigurationException, URISyntaxException -->Line_6 $$ return featp.list[ CD ]
