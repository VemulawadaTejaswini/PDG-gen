Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void initialize() [ CD ]
Line_2 $$ public void initialize() -->Line_3 $$ logger.info("+++++ DashboardFManagedBean: postConstruct step: start ++++++++")[ CD ]
Line_2 $$ public void initialize() -->Line_4 $$ if (auSummaryList == null || auSummaryList.isEmpty()) [ CD ]
Line_4 $$ if (auSummaryList == null || auSummaryList.isEmpty()) -->Line_5 $$ auSummaryList = auOverviewTableFacade.getNewerVerifiedAus(N_AUS_FOR_CHART)[ CD ]
Line_4 $$ if (auSummaryList == null || auSummaryList.isEmpty()) -->Line_6 $$ if (auSummaryList == null) [ CD ]
Line_6 $$ if (auSummaryList == null) -->Line_7 $$ MySQLDAOFactory daof = (MySQLDAOFactory) DAOFactory.getDAOFactory(DAOFactory.DBvendor.MySQL)[ CD ]
Line_6 $$ if (auSummaryList == null) -->Line_8 $$ MySQLAuOverviewDAO maodao = (MySQLAuOverviewDAO) daof.getAuOverviewDAO()[ CD ]
Line_7 $$ MySQLDAOFactory daof = (MySQLDAOFactory) DAOFactory.getDAOFactory(DAOFactory.DBvendor.MySQL)-->Line_8 $$ MySQLAuOverviewDAO maodao = (MySQLAuOverviewDAO) daof.getAuOverviewDAO()[ FD ]
Line_6 $$ if (auSummaryList == null) -->Line_9 $$ maodao.createTable()[ CD ]
Line_8 $$ MySQLAuOverviewDAO maodao = (MySQLAuOverviewDAO) daof.getAuOverviewDAO()-->Line_9 $$ maodao.createTable()[ FD ]
Line_6 $$ if (auSummaryList == null) -->Line_10 $$ if (auOverviewTableFacade.isTableExistent("au_overview_table")) [ CD ]
Line_10 $$ if (auOverviewTableFacade.isTableExistent("au_overview_table")) -->Line_10 $$ if (auOverviewTableFacade.isTableExistent("au_overview_table")) [ CD ]
Line_10 $$ if (auOverviewTableFacade.isTableExistent("au_overview_table")) -->Line_11 $$ auSummaryList = auOverviewTableFacade.getNewerVerifiedAus(N_AUS_FOR_CHART)[ CD ]
Line_2 $$ public void initialize() -->Line_15 $$ geounitcodeToRegionCodeTable = geographicDataServiceBean.getGeounitcodeToRegionCodeTable()[ CD ]
Line_2 $$ public void initialize() -->Line_16 $$ regionCodeToLabeTable = geographicDataServiceBean.getRegionCodeToLabeTable()[ CD ]
Line_2 $$ public void initialize() -->Line_17 $$ auNameToAuShortNameTable = auAttributesFacade.getAuNameToAuShortNameTable()[ CD ]
Line_2 $$ public void initialize() -->Line_18 $$ ipAddressToRegionCodeTable = hostAttributesFacade.getIpAddressToRegionCodeTable()[ CD ]
Line_2 $$ public void initialize() -->Line_19 $$ lockssBoxList = lockssBoxTableFacade.findAll()[ CD ]
Line_2 $$ public void initialize() -->Line_20 $$ Map<String, String> regionCodeToLabeTableNew = new TreeMap<String, String>()[ CD ]
Line_21 $$ for (Map.Entry<String, String> entry : regionCodeToLabeTable.entrySet()) -->Line_22 $$ if (Integer.parseInt(entry.getKey()) < 90) [ FD ]
Line_22 $$ if (Integer.parseInt(entry.getKey()) < 90) -->Line_23 $$ regionCodeToLabeTableNew.put(entry.getKey(), entry.getValue())[ CD ]
Line_20 $$ Map<String, String> regionCodeToLabeTableNew = new TreeMap<String, String>()-->Line_23 $$ regionCodeToLabeTableNew.put(entry.getKey(), entry.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> entry : regionCodeToLabeTable.entrySet()) -->Line_23 $$ regionCodeToLabeTableNew.put(entry.getKey(), entry.getValue())[ FD ]
Line_21 $$ for (Map.Entry<String, String> entry : regionCodeToLabeTable.entrySet()) -->Line_23 $$ regionCodeToLabeTableNew.put(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public void initialize() -->Line_26 $$ Set<String> regionCodeSet = new TreeSet<String>(regionCodeToLabeTableNew.values())[ CD ]
Line_20 $$ Map<String, String> regionCodeToLabeTableNew = new TreeMap<String, String>()-->Line_26 $$ Set<String> regionCodeSet = new TreeSet<String>(regionCodeToLabeTableNew.values())[ FD ]
Line_2 $$ public void initialize() -->Line_27 $$ logger.fine("RegionCodelabelSet=" + regionCodeSet)[ CD ]
Line_2 $$ public void initialize() -->Line_28 $$ if (auSummaryList != null) [ CD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_30 $$ logger.fine("working on au name=" + auSummary.getAuName() + ":pollId=" + auSummary.getPollId())[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_30 $$ logger.fine("working on au name=" + auSummary.getAuName() + ":pollId=" + auSummary.getPollId())[ FD ]
Line_31 $$ Integer verifiedReplicas = auSummary.getAuNVerifiedReplicas()-->Line_31 $$ Integer verifiedReplicas = auSummary.getAuNVerifiedReplicas()[ CD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_31 $$ Integer verifiedReplicas = auSummary.getAuNVerifiedReplicas()[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_32 $$ if (auSummary.getAuNVerifiedReplicas() > 0) [ FD ]
Line_32 $$ if (auSummary.getAuNVerifiedReplicas() > 0) -->Line_33 $$ verifiedReplicas++[ CD ]
Line_31 $$ Integer verifiedReplicas = auSummary.getAuNVerifiedReplicas()-->Line_33 $$ verifiedReplicas++[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_35 $$ auSummaryDataList.add(new AUSummaryDataForChart(auSummary.getAuName(), auSummary.getAuNReplicas(), verifiedReplicas, auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_35 $$ auSummaryDataList.add(new AUSummaryDataForChart(auSummary.getAuName(), auSummary.getAuNReplicas(), verifiedReplicas, auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_35 $$ auSummaryDataList.add(new AUSummaryDataForChart(auSummary.getAuName(), auSummary.getAuNReplicas(), verifiedReplicas, auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_36 $$ if (auSummary.getPollId() == null) [ FD ]
Line_36 $$ if (auSummary.getPollId() == null) -->Line_37 $$ logger.fine("pollId is null")[ CD ]
Line_36 $$ if (auSummary.getPollId() == null) -->Line_38 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ CD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_38 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_38 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_41 $$ pollList = successfulPollReplicaIpFacade.findPollByPollId(auSummary.getPollId())[ FD ]
Line_43 $$ if (pollList == null || pollList.isEmpty()) -->Line_44 $$ logger.fine("pollList is null")[ CD ]
Line_43 $$ if (pollList == null || pollList.isEmpty()) -->Line_45 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ CD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_45 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_45 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_49 $$ for (SuccessfulPollReplicaIp row : pollList) -->Line_50 $$ logger.fine("current Ip=" + row.getIpAddress())[ FD ]
Line_51 $$ String regionCode = ipAddressToRegionCodeTable.get(row.getIpAddress())-->Line_51 $$ String regionCode = ipAddressToRegionCodeTable.get(row.getIpAddress())[ CD ]
Line_49 $$ for (SuccessfulPollReplicaIp row : pollList) -->Line_51 $$ String regionCode = ipAddressToRegionCodeTable.get(row.getIpAddress())[ FD ]
Line_53 $$ String regionLabel = regionCodeToLabeTable.get(regionCode)-->Line_53 $$ String regionLabel = regionCodeToLabeTable.get(regionCode)[ CD ]
Line_51 $$ String regionCode = ipAddressToRegionCodeTable.get(row.getIpAddress())-->Line_53 $$ String regionLabel = regionCodeToLabeTable.get(regionCode)[ FD ]
Line_53 $$ String regionLabel = regionCodeToLabeTable.get(regionCode)-->Line_55 $$ if (StringUtils.isBlank(regionLabel)) [ FD ]
Line_55 $$ if (StringUtils.isBlank(regionLabel)) -->Line_55 $$ if (StringUtils.isBlank(regionLabel)) [ CD ]
Line_53 $$ String regionLabel = regionCodeToLabeTable.get(regionCode)-->Line_55 $$ if (StringUtils.isBlank(regionLabel)) [ FD ]
Line_55 $$ if (StringUtils.isBlank(regionLabel)) -->Line_56 $$ regionLabel = "Others"[ CD ]
Line_53 $$ String regionLabel = regionCodeToLabeTable.get(regionCode)-->Line_56 $$ regionLabel = "Others"[ FD ]
Line_56 $$ regionLabel = "Others"-->Line_56 $$ regionLabel = "Others"[ FD ]
Line_48 $$ List<String> ipList = new ArrayList<String>()-->Line_58 $$ ipList.add(regionLabel)[ FD ]
Line_53 $$ String regionLabel = regionCodeToLabeTable.get(regionCode)-->Line_58 $$ ipList.add(regionLabel)[ FD ]
Line_56 $$ regionLabel = "Others"-->Line_58 $$ ipList.add(regionLabel)[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_60 $$ logger.fine("ipList" + ipList + " for au=" + auSummary.getAuName())[ FD ]
Line_48 $$ List<String> ipList = new ArrayList<String>()-->Line_61 $$ if (ipList == null || ipList.isEmpty()) [ FD ]
Line_61 $$ if (ipList == null || ipList.isEmpty()) -->Line_62 $$ logger.fine("ipList is null")[ CD ]
Line_61 $$ if (ipList == null || ipList.isEmpty()) -->Line_63 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ CD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_63 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_63 $$ replicaData.add(new AUReplicaData(0, 0, 0, 0, 0, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_68 $$ int count = Collections.frequency(ipList, label)-->Line_68 $$ int count = Collections.frequency(ipList, label)[ CD ]
Line_48 $$ List<String> ipList = new ArrayList<String>()-->Line_68 $$ int count = Collections.frequency(ipList, label)[ FD ]
Line_67 $$ for (String label : regionCodeSet) -->Line_68 $$ int count = Collections.frequency(ipList, label)[ FD ]
Line_67 $$ for (String label : regionCodeSet) -->Line_69 $$ if (label.equals("Others")) [ FD ]
Line_69 $$ if (label.equals("Others")) -->Line_69 $$ if (label.equals("Others")) [ CD ]
Line_67 $$ for (String label : regionCodeSet) -->Line_69 $$ if (label.equals("Others")) [ FD ]
Line_69 $$ if (label.equals("Others")) -->Line_70 $$ count += nonUS[ CD ]
Line_68 $$ int count = Collections.frequency(ipList, label)-->Line_70 $$ count += nonUS[ FD ]
Line_70 $$ count += nonUS-->Line_70 $$ count += nonUS[ FD ]
Line_66 $$ int nonUS = 0-->Line_70 $$ count += nonUS[ FD ]
Line_69 $$ if (label.equals("Others")) -->Line_71 $$ freqTable.put(label, count)[ CD ]
Line_67 $$ for (String label : regionCodeSet) -->Line_71 $$ freqTable.put(label, count)[ FD ]
Line_68 $$ int count = Collections.frequency(ipList, label)-->Line_71 $$ freqTable.put(label, count)[ FD ]
Line_70 $$ count += nonUS-->Line_71 $$ freqTable.put(label, count)[ FD ]
Line_69 $$ if (label.equals("Others")) -->Line_73 $$ freqTable.put(label, count)[ CD ]
Line_67 $$ for (String label : regionCodeSet) -->Line_73 $$ freqTable.put(label, count)[ FD ]
Line_68 $$ int count = Collections.frequency(ipList, label)-->Line_73 $$ freqTable.put(label, count)[ FD ]
Line_70 $$ count += nonUS-->Line_73 $$ freqTable.put(label, count)[ FD ]
Line_48 $$ List<String> ipList = new ArrayList<String>()-->Line_77 $$ auNameToLocationListTable.put(auSummary.getAuName(), ipList)[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_77 $$ auNameToLocationListTable.put(auSummary.getAuName(), ipList)[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_78 $$ auList.add(auSummary.getAuName())[ FD ]
Line_80 $$ if (freqTable.get("NORTHEAST") != null) -->Line_81 $$ northeast = freqTable.get("NORTHEAST")[ CD ]
Line_79 $$ Integer northeast = 0-->Line_81 $$ northeast = freqTable.get("NORTHEAST")[ FD ]
Line_81 $$ northeast = freqTable.get("NORTHEAST")-->Line_81 $$ northeast = freqTable.get("NORTHEAST")[ FD ]
Line_81 $$ northeast = freqTable.get("NORTHEAST")-->Line_81 $$ northeast = freqTable.get("NORTHEAST")[ CD ]
Line_84 $$ if (freqTable.get("MIDWEST") != null) -->Line_85 $$ midwest = freqTable.get("MIDWEST")[ CD ]
Line_83 $$ Integer midwest = 0-->Line_85 $$ midwest = freqTable.get("MIDWEST")[ FD ]
Line_85 $$ midwest = freqTable.get("MIDWEST")-->Line_85 $$ midwest = freqTable.get("MIDWEST")[ FD ]
Line_85 $$ midwest = freqTable.get("MIDWEST")-->Line_85 $$ midwest = freqTable.get("MIDWEST")[ CD ]
Line_88 $$ if (freqTable.get("SOUTH") != null) -->Line_89 $$ south = freqTable.get("SOUTH")[ CD ]
Line_87 $$ Integer south = 0-->Line_89 $$ south = freqTable.get("SOUTH")[ FD ]
Line_89 $$ south = freqTable.get("SOUTH")-->Line_89 $$ south = freqTable.get("SOUTH")[ FD ]
Line_89 $$ south = freqTable.get("SOUTH")-->Line_89 $$ south = freqTable.get("SOUTH")[ CD ]
Line_92 $$ if (freqTable.get("WEST") != null) -->Line_93 $$ west = freqTable.get("WEST")[ CD ]
Line_91 $$ Integer west = 0-->Line_93 $$ west = freqTable.get("WEST")[ FD ]
Line_93 $$ west = freqTable.get("WEST")-->Line_93 $$ west = freqTable.get("WEST")[ FD ]
Line_93 $$ west = freqTable.get("WEST")-->Line_93 $$ west = freqTable.get("WEST")[ CD ]
Line_96 $$ if (freqTable.get("Others") != null) -->Line_97 $$ others = freqTable.get("Others")[ CD ]
Line_95 $$ Integer others = 0-->Line_97 $$ others = freqTable.get("Others")[ FD ]
Line_97 $$ others = freqTable.get("Others")-->Line_97 $$ others = freqTable.get("Others")[ FD ]
Line_97 $$ others = freqTable.get("Others")-->Line_97 $$ others = freqTable.get("Others")[ CD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_99 $$ replicaData.add(new AUReplicaData(northeast, midwest, south, west, others, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_29 $$ for (AuOverviewTable auSummary : auSummaryList) -->Line_99 $$ replicaData.add(new AUReplicaData(northeast, midwest, south, west, others, auSummary.getAuName(), auNameToAuShortNameTable.get(auSummary.getAuName())))[ FD ]
Line_2 $$ public void initialize() -->Line_103 $$ URL url = DashboardManagedBean.class.getResource("us_map_template.svg")[ CD ]
Line_103 $$ URL url = DashboardManagedBean.class.getResource("us_map_template.svg")-->Line_103 $$ URL url = DashboardManagedBean.class.getResource("us_map_template.svg")[ CD ]
Line_103 $$ URL url = DashboardManagedBean.class.getResource("us_map_template.svg")-->Line_105 $$ safePLNMemberMap = new DefaultStreamedContent(url.openStream(), "image/svg+xml")[ FD ]
