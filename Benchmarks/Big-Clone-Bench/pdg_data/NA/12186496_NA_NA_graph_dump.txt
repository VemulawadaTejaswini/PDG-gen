Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException [ CD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_3 $$ MessageDigest md[ CD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_4 $$ String result[ CD ]
Line_6 $$ if (DIGEST_TYPE_PLAIN.equals(digestType.toLowerCase())) -->Line_6 $$ if (DIGEST_TYPE_PLAIN.equals(digestType.toLowerCase())) [ CD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_6 $$ if (DIGEST_TYPE_PLAIN.equals(digestType.toLowerCase())) [ FD ]
Line_6 $$ if (DIGEST_TYPE_PLAIN.equals(digestType.toLowerCase())) -->Line_7 $$ result = password[ CD ]
Line_4 $$ String result-->Line_7 $$ result = password[ FD ]
Line_7 $$ result = password-->Line_7 $$ result = password[ FD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_7 $$ result = password[ FD ]
Line_6 $$ if (DIGEST_TYPE_PLAIN.equals(digestType.toLowerCase())) -->Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) [ CD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) [ CD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) [ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_9 $$ byte[] salt = new byte[4][ CD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_10 $$ byte[] digest[ CD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_11 $$ byte[] total[ CD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_12 $$ if (m_secureRandom == null) [ CD ]
Line_12 $$ if (m_secureRandom == null) -->Line_13 $$ m_secureRandom = SecureRandom.getInstance("SHA1PRNG")[ CD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_15 $$ m_secureRandom.nextBytes(salt)[ CD ]
Line_9 $$ byte[] salt = new byte[4]-->Line_15 $$ m_secureRandom.nextBytes(salt)[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)[ CD ]
Line_3 $$ MessageDigest md-->Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)[ CD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_17 $$ md.reset()[ CD ]
Line_3 $$ MessageDigest md-->Line_17 $$ md.reset()[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_17 $$ md.reset()[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_18 $$ md.update(password.getBytes(inputEncoding))[ CD ]
Line_3 $$ MessageDigest md-->Line_18 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_18 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_18 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_18 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_19 $$ md.update(salt)[ CD ]
Line_3 $$ MessageDigest md-->Line_19 $$ md.update(salt)[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_19 $$ md.update(salt)[ FD ]
Line_9 $$ byte[] salt = new byte[4]-->Line_19 $$ md.update(salt)[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_20 $$ digest = md.digest()[ CD ]
Line_10 $$ byte[] digest-->Line_20 $$ digest = md.digest()[ FD ]
Line_20 $$ digest = md.digest()-->Line_20 $$ digest = md.digest()[ FD ]
Line_20 $$ digest = md.digest()-->Line_20 $$ digest = md.digest()[ CD ]
Line_3 $$ MessageDigest md-->Line_20 $$ digest = md.digest()[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_20 $$ digest = md.digest()[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_21 $$ total = new byte[digest.length + salt.length][ CD ]
Line_11 $$ byte[] total-->Line_21 $$ total = new byte[digest.length + salt.length][ FD ]
Line_21 $$ total = new byte[digest.length + salt.length]-->Line_21 $$ total = new byte[digest.length + salt.length][ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_22 $$ System.arraycopy(digest, 0, total, 0, digest.length)[ CD ]
Line_10 $$ byte[] digest-->Line_22 $$ System.arraycopy(digest, 0, total, 0, digest.length)[ FD ]
Line_20 $$ digest = md.digest()-->Line_22 $$ System.arraycopy(digest, 0, total, 0, digest.length)[ FD ]
Line_11 $$ byte[] total-->Line_22 $$ System.arraycopy(digest, 0, total, 0, digest.length)[ FD ]
Line_21 $$ total = new byte[digest.length + salt.length]-->Line_22 $$ System.arraycopy(digest, 0, total, 0, digest.length)[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_23 $$ System.arraycopy(salt, 0, total, digest.length, salt.length)[ CD ]
Line_9 $$ byte[] salt = new byte[4]-->Line_23 $$ System.arraycopy(salt, 0, total, digest.length, salt.length)[ FD ]
Line_11 $$ byte[] total-->Line_23 $$ System.arraycopy(salt, 0, total, digest.length, salt.length)[ FD ]
Line_21 $$ total = new byte[digest.length + salt.length]-->Line_23 $$ System.arraycopy(salt, 0, total, digest.length, salt.length)[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_24 $$ result = new String(Base64.encodeBase64(total))[ CD ]
Line_4 $$ String result-->Line_24 $$ result = new String(Base64.encodeBase64(total))[ FD ]
Line_7 $$ result = password-->Line_24 $$ result = new String(Base64.encodeBase64(total))[ FD ]
Line_24 $$ result = new String(Base64.encodeBase64(total))-->Line_24 $$ result = new String(Base64.encodeBase64(total))[ FD ]
Line_11 $$ byte[] total-->Line_24 $$ result = new String(Base64.encodeBase64(total))[ FD ]
Line_21 $$ total = new byte[digest.length + salt.length]-->Line_24 $$ result = new String(Base64.encodeBase64(total))[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_26 $$ md = MessageDigest.getInstance(digestType)[ CD ]
Line_3 $$ MessageDigest md-->Line_26 $$ md = MessageDigest.getInstance(digestType)[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_26 $$ md = MessageDigest.getInstance(digestType)[ FD ]
Line_26 $$ md = MessageDigest.getInstance(digestType)-->Line_26 $$ md = MessageDigest.getInstance(digestType)[ FD ]
Line_26 $$ md = MessageDigest.getInstance(digestType)-->Line_26 $$ md = MessageDigest.getInstance(digestType)[ CD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_26 $$ md = MessageDigest.getInstance(digestType)[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_27 $$ md.reset()[ CD ]
Line_3 $$ MessageDigest md-->Line_27 $$ md.reset()[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_27 $$ md.reset()[ FD ]
Line_26 $$ md = MessageDigest.getInstance(digestType)-->Line_27 $$ md.reset()[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_28 $$ md.update(password.getBytes(inputEncoding))[ CD ]
Line_3 $$ MessageDigest md-->Line_28 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_28 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_26 $$ md = MessageDigest.getInstance(digestType)-->Line_28 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_28 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_28 $$ md.update(password.getBytes(inputEncoding))[ FD ]
Line_8 $$ if (DIGEST_TYPE_SSHA.equals(digestType.toLowerCase())) -->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ CD ]
Line_4 $$ String result-->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ FD ]
Line_7 $$ result = password-->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ FD ]
Line_24 $$ result = new String(Base64.encodeBase64(total))-->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ FD ]
Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))-->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ FD ]
Line_3 $$ MessageDigest md-->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ FD ]
Line_16 $$ md = MessageDigest.getInstance(DIGEST_TYPE_SHA)-->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ FD ]
Line_26 $$ md = MessageDigest.getInstance(digestType)-->Line_29 $$ result = new String(Base64.encodeBase64(md.digest()))[ FD ]
Line_32 $$ CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_ALGORITHM_1, digestType)-->Line_32 $$ CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_ALGORITHM_1, digestType)[ CD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_32 $$ CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_ALGORITHM_1, digestType)[ FD ]
Line_33 $$ if (LOG.isErrorEnabled()) -->Line_33 $$ if (LOG.isErrorEnabled()) [ CD ]
Line_33 $$ if (LOG.isErrorEnabled()) -->Line_34 $$ LOG.error(message.key(), e)[ CD ]
Line_32 $$ CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_ALGORITHM_1, digestType)-->Line_34 $$ LOG.error(message.key(), e)[ FD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_38 $$ CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_PASSWORD_ENCODING_1, inputEncoding)[ FD ]
Line_39 $$ if (LOG.isErrorEnabled()) -->Line_39 $$ if (LOG.isErrorEnabled()) [ CD ]
Line_39 $$ if (LOG.isErrorEnabled()) -->Line_40 $$ LOG.error(message.key(), e)[ CD ]
Line_32 $$ CmsMessageContainer message = Messages.get().container(Messages.ERR_UNSUPPORTED_ALGORITHM_1, digestType)-->Line_40 $$ LOG.error(message.key(), e)[ FD ]
Line_2 $$ public String digest(String password, String digestType, String inputEncoding) throws CmsPasswordEncryptionException -->Line_44 $$ return result[ CD ]
