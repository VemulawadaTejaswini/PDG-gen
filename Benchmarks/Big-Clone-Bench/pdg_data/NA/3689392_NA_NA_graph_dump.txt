Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static String encrypt(String plaintext) throws Exception [ CD ]
Line_2 $$ public static String encrypt(String plaintext) throws Exception -->Line_3 $$ String algorithm = XML.get("security.algorithm")[ CD ]
Line_3 $$ String algorithm = XML.get("security.algorithm")-->Line_3 $$ String algorithm = XML.get("security.algorithm")[ CD ]
Line_2 $$ public static String encrypt(String plaintext) throws Exception -->Line_4 $$ if (algorithm == null)[ CD ]
Line_3 $$ String algorithm = XML.get("security.algorithm")-->Line_4 $$ if (algorithm == null)[ FD ]
Line_4 $$ if (algorithm == null)-->Line_4 $$ algorithm = "SHA-1"[ CD ]
Line_3 $$ String algorithm = XML.get("security.algorithm")-->Line_4 $$ algorithm = "SHA-1"[ FD ]
Line_4 $$ algorithm = "SHA-1"-->Line_4 $$ algorithm = "SHA-1"[ FD ]
Line_2 $$ public static String encrypt(String plaintext) throws Exception -->Line_5 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_5 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ CD ]
Line_3 $$ String algorithm = XML.get("security.algorithm")-->Line_5 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ FD ]
Line_4 $$ algorithm = "SHA-1"-->Line_5 $$ MessageDigest md = MessageDigest.getInstance(algorithm)[ FD ]
Line_2 $$ public static String encrypt(String plaintext) throws Exception -->Line_6 $$ md.update(plaintext.getBytes("UTF-8"))[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_6 $$ md.update(plaintext.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String encrypt(String plaintext) throws Exception -->Line_6 $$ md.update(plaintext.getBytes("UTF-8"))[ FD ]
Line_2 $$ public static String encrypt(String plaintext) throws Exception -->Line_7 $$ return new BASE64Encoder().encode(md.digest())[ CD ]
Line_7 $$ return new BASE64Encoder().encode(md.digest())-->Line_7 $$ return new BASE64Encoder().encode(md.digest())[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance(algorithm)-->Line_7 $$ return new BASE64Encoder().encode(md.digest())[ FD ]
