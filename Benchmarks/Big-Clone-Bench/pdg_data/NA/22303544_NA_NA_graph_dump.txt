Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testWriteAndRead() throws Exception [ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_3 $$ JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0)[ CD ]
Line_2 $$ public void testWriteAndRead() throws Exception -->Line_4 $$ JCFS.configureDiscovery(defaultUdpAddress, defaultUdpPort)[ CD ]
Line_3 $$ JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0)-->Line_6 $$ server.start()[ FD ]
Line_8 $$ RFileOutputStream out = new RFileOutputStream(file)-->Line_9 $$ out.write("test".getBytes("utf-8"))[ FD ]
Line_8 $$ RFileOutputStream out = new RFileOutputStream(file)-->Line_10 $$ out.close()[ FD ]
Line_13 $$ int readCount = in.read(buffer)-->Line_13 $$ int readCount = in.read(buffer)[ CD ]
Line_11 $$ RFileInputStream in = new RFileInputStream(file)-->Line_13 $$ int readCount = in.read(buffer)[ FD ]
Line_12 $$ byte[] buffer = new byte[4]-->Line_13 $$ int readCount = in.read(buffer)[ FD ]
Line_11 $$ RFileInputStream in = new RFileInputStream(file)-->Line_14 $$ in.close()[ FD ]
Line_13 $$ int readCount = in.read(buffer)-->Line_15 $$ assertEquals(4, readCount)[ FD ]
Line_16 $$ String resultRead = new String(buffer, "utf-8")-->Line_17 $$ assertEquals("test", resultRead)[ FD ]
Line_3 $$ JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0)-->Line_19 $$ server.stop()[ FD ]
