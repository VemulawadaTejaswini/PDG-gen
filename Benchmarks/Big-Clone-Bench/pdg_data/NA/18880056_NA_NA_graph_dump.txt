Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static File extract(File source, String filename, File target) [ CD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_3 $$ if (source.exists() == false || filename == null || filename.trim().length() < 1 || target == null)[ CD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_3 $$ if (source.exists() == false || filename == null || filename.trim().length() < 1 || target == null)[ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_3 $$ if (source.exists() == false || filename == null || filename.trim().length() < 1 || target == null)[ FD ]
Line_3 $$ if (source.exists() == false || filename == null || filename.trim().length() < 1 || target == null)-->Line_3 $$ return null[ CD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_4 $$ boolean isDirectory = (filename.lastIndexOf("/") == filename.length() - 1)[ CD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_4 $$ boolean isDirectory = (filename.lastIndexOf("/") == filename.length() - 1)[ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_4 $$ boolean isDirectory = (filename.lastIndexOf("/") == filename.length() - 1)[ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())[ FD ]
Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())-->Line_7 $$ if (contents == null) [ FD ]
Line_7 $$ if (contents == null) -->Line_8 $$ contents = new HashMap()[ CD ]
Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())-->Line_8 $$ contents = new HashMap()[ FD ]
Line_8 $$ contents = new HashMap()-->Line_8 $$ contents = new HashMap()[ FD ]
Line_7 $$ if (contents == null) -->Line_9 $$ jarContents.put(source.getPath(), contents)[ CD ]
Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())-->Line_9 $$ jarContents.put(source.getPath(), contents)[ FD ]
Line_8 $$ contents = new HashMap()-->Line_9 $$ jarContents.put(source.getPath(), contents)[ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_9 $$ jarContents.put(source.getPath(), contents)[ FD ]
Line_7 $$ if (contents == null) -->Line_10 $$ ZipInputStream input = new ZipInputStream(new FileInputStream(source))[ CD ]
Line_7 $$ if (contents == null) -->Line_11 $$ ZipEntry zipEntry = null[ CD ]
Line_7 $$ if (contents == null) -->Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) [ CD ]
Line_7 $$ if (contents == null) -->Line_7 $$ if (contents == null) [ CD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) [ FD ]
Line_11 $$ ZipEntry zipEntry = null-->Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) [ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) [ CD ]
Line_10 $$ ZipInputStream input = new ZipInputStream(new FileInputStream(source))-->Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) [ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_13 $$ if (zipEntry.isDirectory())[ CD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_13 $$ if (zipEntry.isDirectory())[ FD ]
Line_11 $$ ZipEntry zipEntry = null-->Line_13 $$ if (zipEntry.isDirectory())[ FD ]
Line_13 $$ if (zipEntry.isDirectory())-->Line_13 $$ if (zipEntry.isDirectory())[ CD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_13 $$ if (zipEntry.isDirectory())[ FD ]
Line_11 $$ ZipEntry zipEntry = null-->Line_13 $$ if (zipEntry.isDirectory())[ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ CD ]
Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())-->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_8 $$ contents = new HashMap()-->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_11 $$ ZipEntry zipEntry = null-->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_11 $$ ZipEntry zipEntry = null-->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_7 $$ if (contents == null) -->Line_16 $$ input.close()[ CD ]
Line_10 $$ ZipInputStream input = new ZipInputStream(new FileInputStream(source))-->Line_16 $$ input.close()[ FD ]
Line_18 $$ if (isDirectory) -->Line_19 $$ Iterator it = contents.keySet().iterator()[ CD ]
Line_19 $$ Iterator it = contents.keySet().iterator()-->Line_19 $$ Iterator it = contents.keySet().iterator()[ CD ]
Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())-->Line_19 $$ Iterator it = contents.keySet().iterator()[ FD ]
Line_8 $$ contents = new HashMap()-->Line_19 $$ Iterator it = contents.keySet().iterator()[ FD ]
Line_18 $$ if (isDirectory) -->Line_20 $$ while (it.hasNext()) [ CD ]
Line_18 $$ if (isDirectory) -->Line_18 $$ if (isDirectory) [ CD ]
Line_20 $$ while (it.hasNext()) -->Line_20 $$ while (it.hasNext()) [ CD ]
Line_19 $$ Iterator it = contents.keySet().iterator()-->Line_20 $$ while (it.hasNext()) [ FD ]
Line_20 $$ while (it.hasNext()) -->Line_21 $$ String next = (String) it.next()[ CD ]
Line_19 $$ Iterator it = contents.keySet().iterator()-->Line_21 $$ String next = (String) it.next()[ FD ]
Line_20 $$ while (it.hasNext()) -->Line_22 $$ if (next.startsWith(filename)) [ CD ]
Line_21 $$ String next = (String) it.next()-->Line_22 $$ if (next.startsWith(filename)) [ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_22 $$ if (next.startsWith(filename)) [ FD ]
Line_22 $$ if (next.startsWith(filename)) -->Line_22 $$ if (next.startsWith(filename)) [ CD ]
Line_21 $$ String next = (String) it.next()-->Line_22 $$ if (next.startsWith(filename)) [ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_22 $$ if (next.startsWith(filename)) [ FD ]
Line_22 $$ if (next.startsWith(filename)) -->Line_23 $$ ZipEntry zipEntry = (ZipEntry) contents.get(next)[ CD ]
Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())-->Line_23 $$ ZipEntry zipEntry = (ZipEntry) contents.get(next)[ FD ]
Line_8 $$ contents = new HashMap()-->Line_23 $$ ZipEntry zipEntry = (ZipEntry) contents.get(next)[ FD ]
Line_21 $$ String next = (String) it.next()-->Line_23 $$ ZipEntry zipEntry = (ZipEntry) contents.get(next)[ FD ]
Line_22 $$ if (next.startsWith(filename)) -->Line_24 $$ int n = filename.length()[ CD ]
Line_24 $$ int n = filename.length()-->Line_24 $$ int n = filename.length()[ CD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_24 $$ int n = filename.length()[ FD ]
Line_22 $$ if (next.startsWith(filename)) -->Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))[ CD ]
Line_24 $$ int n = filename.length()-->Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))[ FD ]
Line_23 $$ ZipEntry zipEntry = (ZipEntry) contents.get(next)-->Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))[ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))[ FD ]
Line_11 $$ ZipEntry zipEntry = null-->Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))[ FD ]
Line_22 $$ if (next.startsWith(filename)) -->Line_26 $$ extract(source, next, newTarget)[ CD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_26 $$ extract(source, next, newTarget)[ FD ]
Line_21 $$ String next = (String) it.next()-->Line_26 $$ extract(source, next, newTarget)[ FD ]
Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))-->Line_26 $$ extract(source, next, newTarget)[ FD ]
Line_18 $$ if (isDirectory) -->Line_29 $$ return target[ CD ]
Line_6 $$ Map contents = (Map) jarContents.get(source.getPath())-->Line_31 $$ ZipEntry entry = (ZipEntry) contents.get(filename)[ FD ]
Line_8 $$ contents = new HashMap()-->Line_31 $$ ZipEntry entry = (ZipEntry) contents.get(filename)[ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_31 $$ ZipEntry entry = (ZipEntry) contents.get(filename)[ FD ]
Line_33 $$ InputStream in = input.getInputStream(entry)-->Line_33 $$ InputStream in = input.getInputStream(entry)[ CD ]
Line_10 $$ ZipInputStream input = new ZipInputStream(new FileInputStream(source))-->Line_33 $$ InputStream in = input.getInputStream(entry)[ FD ]
Line_31 $$ ZipEntry entry = (ZipEntry) contents.get(filename)-->Line_33 $$ InputStream in = input.getInputStream(entry)[ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_34 $$ target.getParentFile().mkdirs()[ FD ]
Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_35 $$ int bytesRead-->Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ CD ]
Line_33 $$ InputStream in = input.getInputStream(entry)-->Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_36 $$ byte[] buffer = new byte[1024]-->Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)[ FD ]
Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_38 $$ output.write(buffer, 0, bytesRead)[ CD ]
Line_37 $$ FileOutputStream output = new FileOutputStream(target)-->Line_38 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_36 $$ byte[] buffer = new byte[1024]-->Line_38 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_38 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_35 $$ int bytesRead-->Line_38 $$ output.write(buffer, 0, bytesRead)[ FD ]
Line_37 $$ FileOutputStream output = new FileOutputStream(target)-->Line_39 $$ output.close()[ FD ]
Line_10 $$ ZipInputStream input = new ZipInputStream(new FileInputStream(source))-->Line_40 $$ input.close()[ FD ]
Line_2 $$ public static File extract(File source, String filename, File target) -->Line_45 $$ return null[ CD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_13 $$ if (zipEntry.isDirectory())[ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_13 $$ if (zipEntry.isDirectory())[ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_12 $$ while ((zipEntry = input.getNextEntry()) != null) -->Line_14 $$ contents.put(zipEntry.getName(), zipEntry)[ FD ]
Line_21 $$ String next = (String) it.next()-->Line_22 $$ if (next.startsWith(filename)) [ FD ]
Line_21 $$ String next = (String) it.next()-->Line_22 $$ if (next.startsWith(filename)) [ FD ]
Line_21 $$ String next = (String) it.next()-->Line_23 $$ ZipEntry zipEntry = (ZipEntry) contents.get(next)[ FD ]
Line_24 $$ int n = filename.length()-->Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))[ FD ]
Line_23 $$ ZipEntry zipEntry = (ZipEntry) contents.get(next)-->Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))[ FD ]
Line_21 $$ String next = (String) it.next()-->Line_26 $$ extract(source, next, newTarget)[ FD ]
Line_25 $$ File newTarget = new File(target, zipEntry.getName().substring(n))-->Line_26 $$ extract(source, next, newTarget)[ FD ]
Line_38 $$ while ((bytesRead = in.read(buffer)) != -1) output.write(buffer, 0, bytesRead)-->Line_38 $$ output.write(buffer, 0, bytesRead)[ FD ]
