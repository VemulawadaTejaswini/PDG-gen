Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public Void doInBackground() [ CD ]
Line_2 $$ public Void doInBackground() -->Line_3 $$ setProgress(0)[ CD ]
Line_2 $$ public Void doInBackground() -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ CD ]
Line_2 $$ public Void doInBackground() -->Line_2 $$ public Void doInBackground() [ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ FD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_5 $$ String filePath = uploadFiles.elementAt(i).getFilePath()[ CD ]
Line_5 $$ String filePath = uploadFiles.elementAt(i).getFilePath()-->Line_5 $$ String filePath = uploadFiles.elementAt(i).getFilePath()[ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_5 $$ String filePath = uploadFiles.elementAt(i).getFilePath()[ FD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_6 $$ String fileName = uploadFiles.elementAt(i).getFileName()[ CD ]
Line_6 $$ String fileName = uploadFiles.elementAt(i).getFileName()-->Line_6 $$ String fileName = uploadFiles.elementAt(i).getFileName()[ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_6 $$ String fileName = uploadFiles.elementAt(i).getFileName()[ FD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"[ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_8 $$ this.publish(fileMsg)[ CD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_8 $$ this.publish(fileMsg)[ FD ]
Line_10 $$ File inFile = new File(filePath)-->Line_14 $$ int maxCount = (int) (inFile.length() / chunkSize)[ FD ]
Line_10 $$ File inFile = new File(filePath)-->Line_15 $$ if (inFile.length() % chunkSize > 0) [ FD ]
Line_15 $$ if (inFile.length() % chunkSize > 0) -->Line_16 $$ maxCount++[ CD ]
Line_14 $$ int maxCount = (int) (inFile.length() / chunkSize)-->Line_16 $$ maxCount++[ FD ]
Line_18 $$ int readCount = 0-->Line_19 $$ readCount = in.read(inBytes)[ FD ]
Line_19 $$ readCount = in.read(inBytes)-->Line_19 $$ readCount = in.read(inBytes)[ FD ]
Line_19 $$ readCount = in.read(inBytes)-->Line_19 $$ readCount = in.read(inBytes)[ CD ]
Line_11 $$ FileInputStream in = new FileInputStream(inFile)-->Line_19 $$ readCount = in.read(inBytes)[ FD ]
Line_12 $$ byte[] inBytes = new byte[(int) chunkSize]-->Line_19 $$ readCount = in.read(inBytes)[ FD ]
Line_18 $$ int readCount = 0-->Line_20 $$ while (readCount > 0) [ FD ]
Line_19 $$ readCount = in.read(inBytes)-->Line_20 $$ while (readCount > 0) [ FD ]
Line_20 $$ while (readCount > 0) -->Line_21 $$ File splitFile = File.createTempFile("upl", null, null)[ CD ]
Line_21 $$ File splitFile = File.createTempFile("upl", null, null)-->Line_21 $$ File splitFile = File.createTempFile("upl", null, null)[ CD ]
Line_20 $$ while (readCount > 0) -->Line_22 $$ String splitName = splitFile.getPath()[ CD ]
Line_22 $$ String splitName = splitFile.getPath()-->Line_22 $$ String splitName = splitFile.getPath()[ CD ]
Line_21 $$ File splitFile = File.createTempFile("upl", null, null)-->Line_22 $$ String splitName = splitFile.getPath()[ FD ]
Line_20 $$ while (readCount > 0) -->Line_23 $$ FileOutputStream out = new FileOutputStream(splitFile)[ CD ]
Line_20 $$ while (readCount > 0) -->Line_24 $$ out.write(inBytes, 0, readCount)[ CD ]
Line_23 $$ FileOutputStream out = new FileOutputStream(splitFile)-->Line_24 $$ out.write(inBytes, 0, readCount)[ FD ]
Line_12 $$ byte[] inBytes = new byte[(int) chunkSize]-->Line_24 $$ out.write(inBytes, 0, readCount)[ FD ]
Line_18 $$ int readCount = 0-->Line_24 $$ out.write(inBytes, 0, readCount)[ FD ]
Line_19 $$ readCount = in.read(inBytes)-->Line_24 $$ out.write(inBytes, 0, readCount)[ FD ]
Line_20 $$ while (readCount > 0) -->Line_25 $$ out.close()[ CD ]
Line_23 $$ FileOutputStream out = new FileOutputStream(splitFile)-->Line_25 $$ out.close()[ FD ]
Line_20 $$ while (readCount > 0) -->Line_26 $$ boolean chunkFinal = (count == maxCount)[ CD ]
Line_20 $$ while (readCount > 0) -->Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "[ CD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "[ FD ]
Line_20 $$ while (readCount > 0) -->Line_28 $$ this.publish(fileMsg)[ CD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_28 $$ this.publish(fileMsg)[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_28 $$ this.publish(fileMsg)[ FD ]
Line_20 $$ while (readCount > 0) -->Line_29 $$ boolean uploadSuccess = false[ CD ]
Line_20 $$ while (readCount > 0) -->Line_30 $$ int uploadTries = 0[ CD ]
Line_20 $$ while (readCount > 0) -->Line_31 $$ while (!uploadSuccess && uploadTries <= 5) [ CD ]
Line_20 $$ while (readCount > 0) -->Line_20 $$ while (readCount > 0) [ CD ]
Line_29 $$ boolean uploadSuccess = false-->Line_31 $$ while (!uploadSuccess && uploadTries <= 5) [ FD ]
Line_31 $$ while (!uploadSuccess && uploadTries <= 5) -->Line_32 $$ uploadTries++[ CD ]
Line_30 $$ int uploadTries = 0-->Line_32 $$ uploadTries++[ FD ]
Line_31 $$ while (!uploadSuccess && uploadTries <= 5) -->Line_33 $$ boolean uploadStatus = upload(splitName, fileName, count, chunkFinal)[ CD ]
Line_33 $$ boolean uploadStatus = upload(splitName, fileName, count, chunkFinal)-->Line_33 $$ boolean uploadStatus = upload(splitName, fileName, count, chunkFinal)[ CD ]
Line_22 $$ String splitName = splitFile.getPath()-->Line_33 $$ boolean uploadStatus = upload(splitName, fileName, count, chunkFinal)[ FD ]
Line_6 $$ String fileName = uploadFiles.elementAt(i).getFileName()-->Line_33 $$ boolean uploadStatus = upload(splitName, fileName, count, chunkFinal)[ FD ]
Line_13 $$ int count = 1-->Line_33 $$ boolean uploadStatus = upload(splitName, fileName, count, chunkFinal)[ FD ]
Line_26 $$ boolean chunkFinal = (count == maxCount)-->Line_33 $$ boolean uploadStatus = upload(splitName, fileName, count, chunkFinal)[ FD ]
Line_31 $$ while (!uploadSuccess && uploadTries <= 5) -->Line_34 $$ if (uploadStatus) [ CD ]
Line_34 $$ if (uploadStatus) -->Line_35 $$ fileMsg = "OK\n"[ CD ]
Line_35 $$ fileMsg = "OK\n"-->Line_35 $$ fileMsg = "OK\n"[ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_35 $$ fileMsg = "OK\n"[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_35 $$ fileMsg = "OK\n"[ FD ]
Line_34 $$ if (uploadStatus) -->Line_36 $$ this.publish(fileMsg)[ CD ]
Line_35 $$ fileMsg = "OK\n"-->Line_36 $$ this.publish(fileMsg)[ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_36 $$ this.publish(fileMsg)[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_36 $$ this.publish(fileMsg)[ FD ]
Line_34 $$ if (uploadStatus) -->Line_37 $$ uploadSuccess = true[ CD ]
Line_37 $$ uploadSuccess = true-->Line_37 $$ uploadSuccess = true[ FD ]
Line_29 $$ boolean uploadSuccess = false-->Line_37 $$ uploadSuccess = true[ FD ]
Line_34 $$ if (uploadStatus) -->Line_39 $$ fileMsg = "ERROR\n"[ CD ]
Line_35 $$ fileMsg = "OK\n"-->Line_39 $$ fileMsg = "ERROR\n"[ FD ]
Line_39 $$ fileMsg = "ERROR\n"-->Line_39 $$ fileMsg = "ERROR\n"[ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_39 $$ fileMsg = "ERROR\n"[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_39 $$ fileMsg = "ERROR\n"[ FD ]
Line_34 $$ if (uploadStatus) -->Line_40 $$ this.publish(fileMsg)[ CD ]
Line_35 $$ fileMsg = "OK\n"-->Line_40 $$ this.publish(fileMsg)[ FD ]
Line_39 $$ fileMsg = "ERROR\n"-->Line_40 $$ this.publish(fileMsg)[ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_40 $$ this.publish(fileMsg)[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_40 $$ this.publish(fileMsg)[ FD ]
Line_34 $$ if (uploadStatus) -->Line_41 $$ uploadSuccess = false[ CD ]
Line_37 $$ uploadSuccess = true-->Line_41 $$ uploadSuccess = false[ FD ]
Line_41 $$ uploadSuccess = false-->Line_41 $$ uploadSuccess = false[ FD ]
Line_29 $$ boolean uploadSuccess = false-->Line_41 $$ uploadSuccess = false[ FD ]
Line_20 $$ while (readCount > 0) -->Line_44 $$ if (!uploadSuccess) [ CD ]
Line_37 $$ uploadSuccess = true-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_41 $$ uploadSuccess = false-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_29 $$ boolean uploadSuccess = false-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_44 $$ if (!uploadSuccess) -->Line_44 $$ if (!uploadSuccess) [ CD ]
Line_37 $$ uploadSuccess = true-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_41 $$ uploadSuccess = false-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_29 $$ boolean uploadSuccess = false-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_44 $$ if (!uploadSuccess) -->Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"[ CD ]
Line_35 $$ fileMsg = "OK\n"-->Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"[ FD ]
Line_39 $$ fileMsg = "ERROR\n"-->Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"[ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"[ FD ]
Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"-->Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"[ FD ]
Line_44 $$ if (!uploadSuccess) -->Line_46 $$ this.publish(fileMsg)[ CD ]
Line_35 $$ fileMsg = "OK\n"-->Line_46 $$ this.publish(fileMsg)[ FD ]
Line_39 $$ fileMsg = "ERROR\n"-->Line_46 $$ this.publish(fileMsg)[ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_46 $$ this.publish(fileMsg)[ FD ]
Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"-->Line_46 $$ this.publish(fileMsg)[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_46 $$ this.publish(fileMsg)[ FD ]
Line_44 $$ if (!uploadSuccess) -->Line_48 $$ return null[ CD ]
Line_20 $$ while (readCount > 0) -->Line_53 $$ setProgress((int) totalProgress)[ CD ]
Line_20 $$ while (readCount > 0) -->Line_54 $$ splitFile.delete()[ CD ]
Line_21 $$ File splitFile = File.createTempFile("upl", null, null)-->Line_54 $$ splitFile.delete()[ FD ]
Line_20 $$ while (readCount > 0) -->Line_55 $$ readCount = in.read(inBytes)[ CD ]
Line_55 $$ readCount = in.read(inBytes)-->Line_55 $$ readCount = in.read(inBytes)[ FD ]
Line_18 $$ int readCount = 0-->Line_55 $$ readCount = in.read(inBytes)[ FD ]
Line_19 $$ readCount = in.read(inBytes)-->Line_55 $$ readCount = in.read(inBytes)[ FD ]
Line_55 $$ readCount = in.read(inBytes)-->Line_55 $$ readCount = in.read(inBytes)[ CD ]
Line_11 $$ FileInputStream in = new FileInputStream(inFile)-->Line_55 $$ readCount = in.read(inBytes)[ FD ]
Line_12 $$ byte[] inBytes = new byte[(int) chunkSize]-->Line_55 $$ readCount = in.read(inBytes)[ FD ]
Line_20 $$ while (readCount > 0) -->Line_56 $$ count++[ CD ]
Line_13 $$ int count = 1-->Line_56 $$ count++[ FD ]
Line_2 $$ public Void doInBackground() -->Line_62 $$ return null[ CD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ FD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ FD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) [ FD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_5 $$ String filePath = uploadFiles.elementAt(i).getFilePath()[ FD ]
Line_4 $$ for (int i = 0; i < uploadFiles.size(); i++) -->Line_6 $$ String fileName = uploadFiles.elementAt(i).getFileName()[ FD ]
Line_7 $$ String fileMsg = "Uploading file " + (i + 1) + "/" + uploadFiles.size() + "\n"-->Line_8 $$ this.publish(fileMsg)[ FD ]
Line_10 $$ File inFile = new File(filePath)-->Line_14 $$ int maxCount = (int) (inFile.length() / chunkSize)[ FD ]
Line_10 $$ File inFile = new File(filePath)-->Line_15 $$ if (inFile.length() % chunkSize > 0) [ FD ]
Line_14 $$ int maxCount = (int) (inFile.length() / chunkSize)-->Line_16 $$ maxCount++[ FD ]
Line_11 $$ FileInputStream in = new FileInputStream(inFile)-->Line_19 $$ readCount = in.read(inBytes)[ FD ]
Line_12 $$ byte[] inBytes = new byte[(int) chunkSize]-->Line_19 $$ readCount = in.read(inBytes)[ FD ]
Line_55 $$ readCount = in.read(inBytes)-->Line_20 $$ while (readCount > 0) [ FD ]
Line_55 $$ readCount = in.read(inBytes)-->Line_20 $$ while (readCount > 0) [ FD ]
Line_21 $$ File splitFile = File.createTempFile("upl", null, null)-->Line_22 $$ String splitName = splitFile.getPath()[ FD ]
Line_23 $$ FileOutputStream out = new FileOutputStream(splitFile)-->Line_24 $$ out.write(inBytes, 0, readCount)[ FD ]
Line_55 $$ readCount = in.read(inBytes)-->Line_24 $$ out.write(inBytes, 0, readCount)[ FD ]
Line_23 $$ FileOutputStream out = new FileOutputStream(splitFile)-->Line_25 $$ out.close()[ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_28 $$ this.publish(fileMsg)[ FD ]
Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"-->Line_28 $$ this.publish(fileMsg)[ FD ]
Line_29 $$ boolean uploadSuccess = false-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_29 $$ boolean uploadSuccess = false-->Line_44 $$ if (!uploadSuccess) [ FD ]
Line_27 $$ fileMsg = " - Sending chunk " + count + "/" + maxCount + ": "-->Line_46 $$ this.publish(fileMsg)[ FD ]
Line_45 $$ fileMsg = "There was an error uploading your files. Please let the pipeline administrator know about this problem. Cut and paste the messages in this box, and supply them.\n"-->Line_46 $$ this.publish(fileMsg)[ FD ]
Line_21 $$ File splitFile = File.createTempFile("upl", null, null)-->Line_54 $$ splitFile.delete()[ FD ]
Line_37 $$ uploadSuccess = true-->Line_31 $$ while (!uploadSuccess && uploadTries <= 5) [ FD ]
Line_41 $$ uploadSuccess = false-->Line_31 $$ while (!uploadSuccess && uploadTries <= 5) [ FD ]
Line_35 $$ fileMsg = "OK\n"-->Line_36 $$ this.publish(fileMsg)[ FD ]
Line_39 $$ fileMsg = "ERROR\n"-->Line_36 $$ this.publish(fileMsg)[ FD ]
Line_35 $$ fileMsg = "OK\n"-->Line_40 $$ this.publish(fileMsg)[ FD ]
Line_39 $$ fileMsg = "ERROR\n"-->Line_40 $$ this.publish(fileMsg)[ FD ]
