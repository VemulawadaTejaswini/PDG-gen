Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static boolean copyFile(File soureFile, File destFile) [ CD ]
Line_2 $$ public static boolean copyFile(File soureFile, File destFile) -->Line_3 $$ boolean copySuccess = false[ CD ]
Line_2 $$ public static boolean copyFile(File soureFile, File destFile) -->Line_4 $$ if (soureFile != null && destFile != null && soureFile.exists()) [ CD ]
Line_2 $$ public static boolean copyFile(File soureFile, File destFile) -->Line_4 $$ if (soureFile != null && destFile != null && soureFile.exists()) [ FD ]
Line_2 $$ public static boolean copyFile(File soureFile, File destFile) -->Line_6 $$ new File(destFile.getParent()).mkdirs()[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ CD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ CD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ CD ]
Line_8 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(soureFile))-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ CD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ CD ]
Line_8 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(soureFile))-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ out.write(currentByte)[ CD ]
Line_7 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destFile))-->Line_9 $$ out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ out.write(currentByte)[ FD ]
Line_8 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(soureFile))-->Line_10 $$ in.close()[ FD ]
Line_7 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(destFile))-->Line_11 $$ out.close()[ FD ]
Line_3 $$ boolean copySuccess = false-->Line_12 $$ copySuccess = true[ FD ]
Line_12 $$ copySuccess = true-->Line_12 $$ copySuccess = true[ FD ]
Line_3 $$ boolean copySuccess = false-->Line_14 $$ copySuccess = false[ FD ]
Line_12 $$ copySuccess = true-->Line_14 $$ copySuccess = false[ FD ]
Line_14 $$ copySuccess = false-->Line_14 $$ copySuccess = false[ FD ]
Line_2 $$ public static boolean copyFile(File soureFile, File destFile) -->Line_17 $$ return copySuccess[ CD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ out.write(currentByte)[ FD ]
Line_9 $$ for (int currentByte = in.read(); currentByte != -1; currentByte = in.read()) out.write(currentByte)-->Line_9 $$ out.write(currentByte)[ FD ]
