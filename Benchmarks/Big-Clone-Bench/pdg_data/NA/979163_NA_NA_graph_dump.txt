Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException [ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_3 $$ List loaded_pis = new ArrayList()[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_4 $$ ClassLoader plugin_class_loader = root_class_loader[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_5 $$ if (!directory.isDirectory()) [ CD ]
Line_5 $$ if (!directory.isDirectory()) -->Line_5 $$ if (!directory.isDirectory()) [ CD ]
Line_5 $$ if (!directory.isDirectory()) -->Line_5 $$ if (!directory.isDirectory()) [ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_5 $$ if (!directory.isDirectory()) [ FD ]
Line_5 $$ if (!directory.isDirectory()) -->Line_6 $$ return (loaded_pis)[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_8 $$ String pluginName = directory.getName()[ CD ]
Line_8 $$ String pluginName = directory.getName()-->Line_8 $$ String pluginName = directory.getName()[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_8 $$ String pluginName = directory.getName()[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_9 $$ File[] pluginContents = directory.listFiles()[ CD ]
Line_9 $$ File[] pluginContents = directory.listFiles()-->Line_9 $$ File[] pluginContents = directory.listFiles()[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_9 $$ File[] pluginContents = directory.listFiles()[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_10 $$ if (pluginContents == null || pluginContents.length == 0) [ CD ]
Line_10 $$ if (pluginContents == null || pluginContents.length == 0) -->Line_11 $$ return (loaded_pis)[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_13 $$ boolean looks_like_plugin = false[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_14 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException [ CD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_14 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_14 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_14 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_15 $$ String name = pluginContents[i].getName().toLowerCase()[ CD ]
Line_15 $$ String name = pluginContents[i].getName().toLowerCase()-->Line_15 $$ String name = pluginContents[i].getName().toLowerCase()[ CD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_16 $$ if (name.endsWith(".jar") || name.equals("plugin.properties")) [ CD ]
Line_15 $$ String name = pluginContents[i].getName().toLowerCase()-->Line_16 $$ if (name.endsWith(".jar") || name.equals("plugin.properties")) [ FD ]
Line_15 $$ String name = pluginContents[i].getName().toLowerCase()-->Line_16 $$ if (name.endsWith(".jar") || name.equals("plugin.properties")) [ FD ]
Line_16 $$ if (name.endsWith(".jar") || name.equals("plugin.properties")) -->Line_17 $$ looks_like_plugin = true[ CD ]
Line_17 $$ looks_like_plugin = true-->Line_17 $$ looks_like_plugin = true[ FD ]
Line_13 $$ boolean looks_like_plugin = false-->Line_17 $$ looks_like_plugin = true[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_21 $$ if (!looks_like_plugin) [ CD ]
Line_17 $$ looks_like_plugin = true-->Line_21 $$ if (!looks_like_plugin) [ FD ]
Line_13 $$ boolean looks_like_plugin = false-->Line_21 $$ if (!looks_like_plugin) [ FD ]
Line_21 $$ if (!looks_like_plugin) -->Line_21 $$ if (!looks_like_plugin) [ CD ]
Line_17 $$ looks_like_plugin = true-->Line_21 $$ if (!looks_like_plugin) [ FD ]
Line_13 $$ boolean looks_like_plugin = false-->Line_21 $$ if (!looks_like_plugin) [ FD ]
Line_21 $$ if (!looks_like_plugin) -->Line_22 $$ if (Logger.isEnabled())[ CD ]
Line_22 $$ if (Logger.isEnabled())-->Line_22 $$ if (Logger.isEnabled())[ CD ]
Line_22 $$ if (Logger.isEnabled())-->Line_22 $$ Logger.log(new LogEvent(LOGID, LogEvent.LT_WARNING, "Plugin directory '" + directory + "' has no plugin.properties " + "or .jar files, skipping"))[ CD ]
Line_21 $$ if (!looks_like_plugin) -->Line_23 $$ return (loaded_pis)[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_25 $$ String[] plugin_version = [ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_26 $$ String[] plugin_id = [ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ CD ]
Line_9 $$ File[] pluginContents = directory.listFiles()-->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ FD ]
Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)-->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ FD ]
Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)-->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ CD ]
Line_9 $$ File[] pluginContents = directory.listFiles()-->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ FD ]
Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)-->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ FD ]
Line_25 $$ String[] plugin_version = -->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ FD ]
Line_26 $$ String[] plugin_id = -->Line_27 $$ pluginContents = PluginLauncherImpl.getHighestJarVersions(pluginContents, plugin_version, plugin_id, true)[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException [ CD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_29 $$ File jar_file = pluginContents[i][ CD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_30 $$ if (pluginContents.length > 1) [ CD ]
Line_30 $$ if (pluginContents.length > 1) -->Line_31 $$ String name = jar_file.getName()[ CD ]
Line_31 $$ String name = jar_file.getName()-->Line_31 $$ String name = jar_file.getName()[ CD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_31 $$ String name = jar_file.getName()[ FD ]
Line_30 $$ if (pluginContents.length > 1) -->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ CD ]
Line_31 $$ String name = jar_file.getName()-->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ FD ]
Line_15 $$ String name = pluginContents[i].getName().toLowerCase()-->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ FD ]
Line_32 $$ if (name.startsWith("i18nPlugin_")) -->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ CD ]
Line_31 $$ String name = jar_file.getName()-->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ FD ]
Line_15 $$ String name = pluginContents[i].getName().toLowerCase()-->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ FD ]
Line_32 $$ if (name.startsWith("i18nPlugin_")) -->Line_33 $$ if (Logger.isEnabled())[ CD ]
Line_33 $$ if (Logger.isEnabled())-->Line_33 $$ if (Logger.isEnabled())[ CD ]
Line_33 $$ if (Logger.isEnabled())-->Line_33 $$ Logger.log(new LogEvent(LOGID, "renaming '" + name + "' to conform with versioning system"))[ CD ]
Line_32 $$ if (name.startsWith("i18nPlugin_")) -->Line_34 $$ jar_file.renameTo(new File(jar_file.getParent(), "i18nAZ_0.1.jar  "))[ CD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_34 $$ jar_file.renameTo(new File(jar_file.getParent(), "i18nAZ_0.1.jar  "))[ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_34 $$ jar_file.renameTo(new File(jar_file.getParent(), "i18nAZ_0.1.jar  "))[ FD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ CD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ FD ]
Line_4 $$ ClassLoader plugin_class_loader = root_class_loader-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ FD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ CD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ FD ]
Line_4 $$ ClassLoader plugin_class_loader = root_class_loader-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_40 $$ String plugin_class_string = null[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_43 $$ File properties_file = new File(directory.toString() + File.separator + "plugin.properties")[ FD ]
Line_43 $$ File properties_file = new File(directory.toString() + File.separator + "plugin.properties")-->Line_45 $$ if (properties_file.exists()) [ FD ]
Line_45 $$ if (properties_file.exists()) -->Line_45 $$ if (properties_file.exists()) [ CD ]
Line_43 $$ File properties_file = new File(directory.toString() + File.separator + "plugin.properties")-->Line_45 $$ if (properties_file.exists()) [ FD ]
Line_45 $$ if (properties_file.exists()) -->Line_46 $$ FileInputStream fis = null[ CD ]
Line_46 $$ FileInputStream fis = null-->Line_48 $$ fis = new FileInputStream(properties_file)[ FD ]
Line_48 $$ fis = new FileInputStream(properties_file)-->Line_48 $$ fis = new FileInputStream(properties_file)[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_49 $$ props.load(fis)[ FD ]
Line_46 $$ FileInputStream fis = null-->Line_49 $$ props.load(fis)[ FD ]
Line_48 $$ fis = new FileInputStream(properties_file)-->Line_49 $$ props.load(fis)[ FD ]
Line_46 $$ FileInputStream fis = null-->Line_51 $$ if (fis != null) [ FD ]
Line_48 $$ fis = new FileInputStream(properties_file)-->Line_51 $$ if (fis != null) [ FD ]
Line_51 $$ if (fis != null) -->Line_52 $$ fis.close()[ CD ]
Line_46 $$ FileInputStream fis = null-->Line_52 $$ fis.close()[ FD ]
Line_48 $$ fis = new FileInputStream(properties_file)-->Line_52 $$ fis.close()[ FD ]
Line_45 $$ if (properties_file.exists()) -->Line_56 $$ if (plugin_class_loader instanceof URLClassLoader) [ CD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_56 $$ if (plugin_class_loader instanceof URLClassLoader) [ FD ]
Line_4 $$ ClassLoader plugin_class_loader = root_class_loader-->Line_56 $$ if (plugin_class_loader instanceof URLClassLoader) [ FD ]
Line_56 $$ if (plugin_class_loader instanceof URLClassLoader) -->Line_57 $$ URLClassLoader current = (URLClassLoader) plugin_class_loader[ CD ]
Line_56 $$ if (plugin_class_loader instanceof URLClassLoader) -->Line_58 $$ URL url = current.findResource("plugin.properties")[ CD ]
Line_58 $$ URL url = current.findResource("plugin.properties")-->Line_58 $$ URL url = current.findResource("plugin.properties")[ CD ]
Line_57 $$ URLClassLoader current = (URLClassLoader) plugin_class_loader-->Line_58 $$ URL url = current.findResource("plugin.properties")[ FD ]
Line_56 $$ if (plugin_class_loader instanceof URLClassLoader) -->Line_59 $$ if (url != null) [ CD ]
Line_58 $$ URL url = current.findResource("plugin.properties")-->Line_59 $$ if (url != null) [ FD ]
Line_59 $$ if (url != null) -->Line_60 $$ URLConnection connection = url.openConnection()[ CD ]
Line_60 $$ URLConnection connection = url.openConnection()-->Line_60 $$ URLConnection connection = url.openConnection()[ CD ]
Line_58 $$ URL url = current.findResource("plugin.properties")-->Line_60 $$ URLConnection connection = url.openConnection()[ FD ]
Line_59 $$ if (url != null) -->Line_61 $$ InputStream is = connection.getInputStream()[ CD ]
Line_61 $$ InputStream is = connection.getInputStream()-->Line_61 $$ InputStream is = connection.getInputStream()[ CD ]
Line_60 $$ URLConnection connection = url.openConnection()-->Line_61 $$ InputStream is = connection.getInputStream()[ FD ]
Line_59 $$ if (url != null) -->Line_62 $$ props.load(is)[ CD ]
Line_42 $$ Properties props = new Properties()-->Line_62 $$ props.load(is)[ FD ]
Line_61 $$ InputStream is = connection.getInputStream()-->Line_62 $$ props.load(is)[ FD ]
Line_72 $$ String msg = "Can't read 'plugin.properties' for plugin '" + pluginName + "': file may be missing"-->Line_74 $$ System.out.println(msg)[ FD ]
Line_8 $$ String pluginName = directory.getName()-->Line_77 $$ checkJDKVersion(pluginName, props, true)[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_77 $$ checkJDKVersion(pluginName, props, true)[ FD ]
Line_8 $$ String pluginName = directory.getName()-->Line_78 $$ checkAzureusVersion(pluginName, props, true)[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_78 $$ checkAzureusVersion(pluginName, props, true)[ FD ]
Line_40 $$ String plugin_class_string = null-->Line_79 $$ plugin_class_string = (String) props.get("plugin.class")[ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_79 $$ plugin_class_string = (String) props.get("plugin.class")[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_79 $$ plugin_class_string = (String) props.get("plugin.class")[ FD ]
Line_40 $$ String plugin_class_string = null-->Line_80 $$ if (plugin_class_string == null) [ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_80 $$ if (plugin_class_string == null) [ FD ]
Line_80 $$ if (plugin_class_string == null) -->Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")[ CD ]
Line_40 $$ String plugin_class_string = null-->Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")[ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")[ FD ]
Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")-->Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")[ FD ]
Line_80 $$ if (plugin_class_string == null) -->Line_82 $$ if (plugin_class_string == null) [ CD ]
Line_40 $$ String plugin_class_string = null-->Line_82 $$ if (plugin_class_string == null) [ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_82 $$ if (plugin_class_string == null) [ FD ]
Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")-->Line_82 $$ if (plugin_class_string == null) [ FD ]
Line_82 $$ if (plugin_class_string == null) -->Line_83 $$ plugin_class_string = ""[ CD ]
Line_40 $$ String plugin_class_string = null-->Line_83 $$ plugin_class_string = ""[ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_83 $$ plugin_class_string = ""[ FD ]
Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")-->Line_83 $$ plugin_class_string = ""[ FD ]
Line_83 $$ plugin_class_string = ""-->Line_83 $$ plugin_class_string = ""[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_86 $$ String plugin_name_string = (String) props.get("plugin.name")[ FD ]
Line_86 $$ String plugin_name_string = (String) props.get("plugin.name")-->Line_87 $$ if (plugin_name_string == null) [ FD ]
Line_87 $$ if (plugin_name_string == null) -->Line_88 $$ plugin_name_string = (String) props.get("plugin.names")[ CD ]
Line_86 $$ String plugin_name_string = (String) props.get("plugin.name")-->Line_88 $$ plugin_name_string = (String) props.get("plugin.names")[ FD ]
Line_88 $$ plugin_name_string = (String) props.get("plugin.names")-->Line_88 $$ plugin_name_string = (String) props.get("plugin.names")[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_88 $$ plugin_name_string = (String) props.get("plugin.names")[ FD ]
Line_92 $$ while (true) -->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ CD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ CD ]
Line_40 $$ String plugin_class_string = null-->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ FD ]
Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")-->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ FD ]
Line_83 $$ plugin_class_string = ""-->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ FD ]
Line_90 $$ int pos1 = 0-->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ FD ]
Line_92 $$ while (true) -->Line_94 $$ String plugin_class[ CD ]
Line_92 $$ while (true) -->Line_95 $$ if (p1 == -1) [ CD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_95 $$ if (p1 == -1) [ FD ]
Line_95 $$ if (p1 == -1) -->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ CD ]
Line_94 $$ String plugin_class-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ CD ]
Line_40 $$ String plugin_class_string = null-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_83 $$ plugin_class_string = ""-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_90 $$ int pos1 = 0-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_95 $$ if (p1 == -1) -->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ CD ]
Line_94 $$ String plugin_class-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ CD ]
Line_40 $$ String plugin_class_string = null-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_79 $$ plugin_class_string = (String) props.get("plugin.class")-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_81 $$ plugin_class_string = (String) props.get("plugin.classes")-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_83 $$ plugin_class_string = ""-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_90 $$ int pos1 = 0-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_95 $$ if (p1 == -1) -->Line_99 $$ pos1 = p1 + 1[ CD ]
Line_99 $$ pos1 = p1 + 1-->Line_99 $$ pos1 = p1 + 1[ FD ]
Line_90 $$ int pos1 = 0-->Line_99 $$ pos1 = p1 + 1[ FD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_99 $$ pos1 = p1 + 1[ FD ]
Line_92 $$ while (true) -->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ CD ]
Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)-->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ CD ]
Line_94 $$ String plugin_class-->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ FD ]
Line_92 $$ while (true) -->Line_102 $$ if (existing_pi != null) [ CD ]
Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)-->Line_102 $$ if (existing_pi != null) [ FD ]
Line_102 $$ if (existing_pi != null) -->Line_103 $$ if (bSkipAlreadyLoaded) [ CD ]
Line_102 $$ if (existing_pi != null) -->Line_106 $$ File this_parent = directory.getParentFile()[ CD ]
Line_106 $$ File this_parent = directory.getParentFile()-->Line_106 $$ File this_parent = directory.getParentFile()[ CD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_106 $$ File this_parent = directory.getParentFile()[ FD ]
Line_102 $$ if (existing_pi != null) -->Line_107 $$ File existing_parent = null[ CD ]
Line_102 $$ if (existing_pi != null) -->Line_108 $$ if (existing_pi.getInitializerKey() instanceof File) [ CD ]
Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)-->Line_108 $$ if (existing_pi.getInitializerKey() instanceof File) [ FD ]
Line_108 $$ if (existing_pi.getInitializerKey() instanceof File) -->Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()[ CD ]
Line_107 $$ File existing_parent = null-->Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()[ FD ]
Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()-->Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()[ FD ]
Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()-->Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()[ CD ]
Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)-->Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()[ FD ]
Line_102 $$ if (existing_pi != null) -->Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) [ CD ]
Line_106 $$ File this_parent = directory.getParentFile()-->Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) [ FD ]
Line_107 $$ File existing_parent = null-->Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) [ FD ]
Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()-->Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) [ FD ]
Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) -->Line_112 $$ if (Logger.isEnabled())[ CD ]
Line_112 $$ if (Logger.isEnabled())-->Line_112 $$ if (Logger.isEnabled())[ CD ]
Line_112 $$ if (Logger.isEnabled())-->Line_112 $$ Logger.log(new LogEvent(LOGID, "Plugin '" + plugin_name_string + "/" + plugin_class + ": shared version overridden by user-specific one"))[ CD ]
Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) -->Line_113 $$ return (new ArrayList())[ CD ]
Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) -->Line_115 $$ Logger.log(new LogAlert(LogAlert.UNREPEATABLE, LogAlert.AT_WARNING, "Error loading '" + plugin_name_string + "', plugin class '" + plugin_class + "' is already loaded"))[ CD ]
Line_102 $$ if (existing_pi != null) -->Line_118 $$ String plugin_name = null[ CD ]
Line_102 $$ if (existing_pi != null) -->Line_119 $$ if (plugin_name_string != null) [ CD ]
Line_86 $$ String plugin_name_string = (String) props.get("plugin.name")-->Line_119 $$ if (plugin_name_string != null) [ FD ]
Line_88 $$ plugin_name_string = (String) props.get("plugin.names")-->Line_119 $$ if (plugin_name_string != null) [ FD ]
Line_119 $$ if (plugin_name_string != null) -->Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)[ CD ]
Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)-->Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)[ CD ]
Line_86 $$ String plugin_name_string = (String) props.get("plugin.name")-->Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)[ FD ]
Line_88 $$ plugin_name_string = (String) props.get("plugin.names")-->Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)[ FD ]
Line_91 $$ int pos2 = 0-->Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)[ FD ]
Line_119 $$ if (plugin_name_string != null) -->Line_121 $$ if (p2 == -1) [ CD ]
Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)-->Line_121 $$ if (p2 == -1) [ FD ]
Line_121 $$ if (p2 == -1) -->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ CD ]
Line_118 $$ String plugin_name = null-->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ CD ]
Line_86 $$ String plugin_name_string = (String) props.get("plugin.name")-->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ FD ]
Line_88 $$ plugin_name_string = (String) props.get("plugin.names")-->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ FD ]
Line_91 $$ int pos2 = 0-->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ FD ]
Line_121 $$ if (p2 == -1) -->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ CD ]
Line_118 $$ String plugin_name = null-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ CD ]
Line_86 $$ String plugin_name_string = (String) props.get("plugin.name")-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_88 $$ plugin_name_string = (String) props.get("plugin.names")-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_91 $$ int pos2 = 0-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_121 $$ if (p2 == -1) -->Line_125 $$ pos2 = p2 + 1[ CD ]
Line_125 $$ pos2 = p2 + 1-->Line_125 $$ pos2 = p2 + 1[ FD ]
Line_91 $$ int pos2 = 0-->Line_125 $$ pos2 = p2 + 1[ FD ]
Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)-->Line_125 $$ pos2 = p2 + 1[ FD ]
Line_102 $$ if (existing_pi != null) -->Line_128 $$ Properties new_props = (Properties) props.clone()[ CD ]
Line_42 $$ Properties props = new Properties()-->Line_128 $$ Properties new_props = (Properties) props.clone()[ FD ]
Line_102 $$ if (existing_pi != null) -->Line_129 $$ for (int j = 0; j < default_version_details.length; j++) [ CD ]
Line_102 $$ if (existing_pi != null) -->Line_102 $$ if (existing_pi != null) [ CD ]
Line_129 $$ for (int j = 0; j < default_version_details.length; j++) -->Line_129 $$ for (int j = 0; j < default_version_details.length; j++) [ CD ]
Line_129 $$ for (int j = 0; j < default_version_details.length; j++) -->Line_129 $$ for (int j = 0; j < default_version_details.length; j++) [ CD ]
Line_129 $$ for (int j = 0; j < default_version_details.length; j++) -->Line_129 $$ for (int j = 0; j < default_version_details.length; j++) [ FD ]
Line_129 $$ for (int j = 0; j < default_version_details.length; j++) -->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ CD ]
Line_94 $$ String plugin_class-->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ FD ]
Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) -->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ CD ]
Line_94 $$ String plugin_class-->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) [ FD ]
Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) -->Line_131 $$ if (new_props.get("plugin.id") == null) [ CD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_131 $$ if (new_props.get("plugin.id") == null) [ FD ]
Line_131 $$ if (new_props.get("plugin.id") == null) -->Line_132 $$ new_props.put("plugin.id", default_version_details[j][1])[ CD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_132 $$ new_props.put("plugin.id", default_version_details[j][1])[ FD ]
Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) -->Line_134 $$ if (plugin_name == null) [ CD ]
Line_118 $$ String plugin_name = null-->Line_134 $$ if (plugin_name == null) [ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_134 $$ if (plugin_name == null) [ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_134 $$ if (plugin_name == null) [ FD ]
Line_134 $$ if (plugin_name == null) -->Line_135 $$ plugin_name = default_version_details[j][2][ CD ]
Line_135 $$ plugin_name = default_version_details[j][2]-->Line_135 $$ plugin_name = default_version_details[j][2][ FD ]
Line_118 $$ String plugin_name = null-->Line_135 $$ plugin_name = default_version_details[j][2][ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_135 $$ plugin_name = default_version_details[j][2][ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_135 $$ plugin_name = default_version_details[j][2][ FD ]
Line_130 $$ if (plugin_class.equals(default_version_details[j][0])) -->Line_137 $$ if (new_props.get("plugin.version") == null) [ CD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_137 $$ if (new_props.get("plugin.version") == null) [ FD ]
Line_137 $$ if (new_props.get("plugin.version") == null) -->Line_138 $$ if (plugin_version[0] != null) [ CD ]
Line_138 $$ if (plugin_version[0] != null) -->Line_139 $$ new_props.put("plugin.version", plugin_version[0])[ CD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_139 $$ new_props.put("plugin.version", plugin_version[0])[ FD ]
Line_138 $$ if (plugin_version[0] != null) -->Line_141 $$ new_props.put("plugin.version", default_version_details[j][3])[ CD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_141 $$ new_props.put("plugin.version", default_version_details[j][3])[ FD ]
Line_102 $$ if (existing_pi != null) -->Line_146 $$ new_props.put("plugin.class", plugin_class)[ CD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_94 $$ String plugin_class-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_102 $$ if (existing_pi != null) -->Line_147 $$ if (plugin_name != null) [ CD ]
Line_135 $$ plugin_name = default_version_details[j][2]-->Line_147 $$ if (plugin_name != null) [ FD ]
Line_118 $$ String plugin_name = null-->Line_147 $$ if (plugin_name != null) [ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_147 $$ if (plugin_name != null) [ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_147 $$ if (plugin_name != null) [ FD ]
Line_147 $$ if (plugin_name != null) -->Line_148 $$ new_props.put("plugin.name", plugin_name)[ CD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_135 $$ plugin_name = default_version_details[j][2]-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_118 $$ String plugin_name = null-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_151 $$ String pid = plugin_id[0] == null ? directory.getName() : plugin_id[0][ FD ]
Line_102 $$ if (existing_pi != null) -->Line_154 $$ if (vc_disabled_plugins.contains(pid)) [ CD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_154 $$ if (vc_disabled_plugins.contains(pid)) [ CD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_155 $$ log("Plugin '" + pid + "' has been administratively disabled")[ CD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_157 $$ if (pid.endsWith("_v")) [ CD ]
Line_157 $$ if (pid.endsWith("_v")) -->Line_157 $$ if (pid.endsWith("_v")) [ CD ]
Line_157 $$ if (pid.endsWith("_v")) -->Line_159 $$ log("Re-verifying " + pid)[ CD ]
Line_157 $$ if (pid.endsWith("_v")) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_157 $$ if (pid.endsWith("_v")) -->Line_157 $$ if (pid.endsWith("_v")) [ CD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ CD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_161 $$ File jar_file = pluginContents[i][ CD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_162 $$ if (jar_file.getName().endsWith(".jar")) [ CD ]
Line_162 $$ if (jar_file.getName().endsWith(".jar")) -->Line_162 $$ if (jar_file.getName().endsWith(".jar")) [ CD ]
Line_161 $$ File jar_file = pluginContents[i]-->Line_162 $$ if (jar_file.getName().endsWith(".jar")) [ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_162 $$ if (jar_file.getName().endsWith(".jar")) [ FD ]
Line_161 $$ File jar_file = pluginContents[i]-->Line_165 $$ AEVerifier.verifyData(jar_file)[ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_165 $$ AEVerifier.verifyData(jar_file)[ FD ]
Line_161 $$ File jar_file = pluginContents[i]-->Line_166 $$ verified_files.add(jar_file)[ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_166 $$ verified_files.add(jar_file)[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_171 $$ plugin = new FailedPlugin(plugin_name, directory.getAbsolutePath())[ FD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_176 $$ if (plugin == null) [ CD ]
Line_176 $$ if (plugin == null) -->Line_177 $$ plugin = PluginLauncherImpl.getPreloadedPlugin(plugin_class)[ CD ]
Line_94 $$ String plugin_class-->Line_177 $$ plugin = PluginLauncherImpl.getPreloadedPlugin(plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_177 $$ plugin = PluginLauncherImpl.getPreloadedPlugin(plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_177 $$ plugin = PluginLauncherImpl.getPreloadedPlugin(plugin_class)[ FD ]
Line_176 $$ if (plugin == null) -->Line_178 $$ if (plugin == null) [ CD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_4 $$ ClassLoader plugin_class_loader = root_class_loader-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_94 $$ String plugin_class-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_183 $$ plugin = new FailedPlugin(plugin_name, directory.getAbsolutePath())[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_186 $$ if (e instanceof ClassNotFoundException && props.getProperty("plugin.install_if_missing", "no").equalsIgnoreCase("yes")) [ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_190 $$ plugin = new FailedPlugin(plugin_name, directory.getAbsolutePath())[ FD ]
Line_178 $$ if (plugin == null) -->Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()[ CD ]
Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()-->Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()[ FD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()[ FD ]
Line_4 $$ ClassLoader plugin_class_loader = root_class_loader-->Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()[ FD ]
Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()-->Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()[ CD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_196 $$ MessageText.integratePluginMessages((String) props.get("plugin.langfile"), plugin_class_loader)[ CD ]
Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()-->Line_196 $$ MessageText.integratePluginMessages((String) props.get("plugin.langfile"), plugin_class_loader)[ FD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_196 $$ MessageText.integratePluginMessages((String) props.get("plugin.langfile"), plugin_class_loader)[ FD ]
Line_4 $$ ClassLoader plugin_class_loader = root_class_loader-->Line_196 $$ MessageText.integratePluginMessages((String) props.get("plugin.langfile"), plugin_class_loader)[ FD ]
Line_42 $$ Properties props = new Properties()-->Line_196 $$ MessageText.integratePluginMessages((String) props.get("plugin.langfile"), plugin_class_loader)[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_197 $$ PluginInterfaceImpl plugin_interface = new PluginInterfaceImpl(plugin, this, directory, plugin_class_loader, verified_files, directory.getName(), new_props, directory.getAbsolutePath(), pid, plugin_version[0])[ FD ]
Line_2 $$ private List loadPluginFromDir(File directory, boolean bSkipAlreadyLoaded, boolean loading_for_startup, boolean initialise) throws PluginException -->Line_197 $$ PluginInterfaceImpl plugin_interface = new PluginInterfaceImpl(plugin, this, directory, plugin_class_loader, verified_files, directory.getName(), new_props, directory.getAbsolutePath(), pid, plugin_version[0])[ FD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_199 $$ plugin_interface.getPluginState().setDisabled(!bEnabled)[ CD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_207 $$ loaded_pis.add(plugin_interface)[ CD ]
Line_3 $$ List loaded_pis = new ArrayList()-->Line_207 $$ loaded_pis.add(plugin_interface)[ FD ]
Line_154 $$ if (vc_disabled_plugins.contains(pid)) -->Line_208 $$ if (load_failure != null) [ CD ]
Line_208 $$ if (load_failure != null) -->Line_209 $$ plugin_interface.setAsFailed()[ CD ]
Line_208 $$ if (load_failure != null) -->Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) [ CD ]
Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) -->Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) [ CD ]
Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) -->Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) [ CD ]
Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) -->Line_213 $$ if (load_failure instanceof UnsupportedClassVersionError) [ CD ]
Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) -->Line_218 $$ Logger.log(la)[ CD ]
Line_210 $$ if (!pid.equals(UpdaterUpdateChecker.getPluginID())) -->Line_219 $$ System.out.println(msg + ": " + load_failure)[ CD ]
Line_92 $$ while (true) -->Line_224 $$ if (p1 == -1) [ CD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_224 $$ if (p1 == -1) [ FD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_14 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_14 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_14 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_15 $$ String name = pluginContents[i].getName().toLowerCase()-->Line_16 $$ if (name.endsWith(".jar") || name.equals("plugin.properties")) [ FD ]
Line_15 $$ String name = pluginContents[i].getName().toLowerCase()-->Line_16 $$ if (name.endsWith(".jar") || name.equals("plugin.properties")) [ FD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_28 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_28 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_31 $$ String name = jar_file.getName()[ FD ]
Line_31 $$ String name = jar_file.getName()-->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ FD ]
Line_31 $$ String name = jar_file.getName()-->Line_32 $$ if (name.startsWith("i18nPlugin_")) [ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_34 $$ jar_file.renameTo(new File(jar_file.getParent(), "i18nAZ_0.1.jar  "))[ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_34 $$ jar_file.renameTo(new File(jar_file.getParent(), "i18nAZ_0.1.jar  "))[ FD ]
Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ FD ]
Line_29 $$ File jar_file = pluginContents[i]-->Line_38 $$ plugin_class_loader = PluginLauncherImpl.addFileToClassPath(root_class_loader, plugin_class_loader, jar_file)[ FD ]
Line_99 $$ pos1 = p1 + 1-->Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)[ FD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_95 $$ if (p1 == -1) [ FD ]
Line_99 $$ pos1 = p1 + 1-->Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()[ FD ]
Line_99 $$ pos1 = p1 + 1-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()[ FD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_99 $$ pos1 = p1 + 1[ FD ]
Line_94 $$ String plugin_class-->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)[ FD ]
Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)-->Line_102 $$ if (existing_pi != null) [ FD ]
Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)-->Line_108 $$ if (existing_pi.getInitializerKey() instanceof File) [ FD ]
Line_101 $$ PluginInterfaceImpl existing_pi = getPluginFromClass(plugin_class)-->Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()[ FD ]
Line_106 $$ File this_parent = directory.getParentFile()-->Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) [ FD ]
Line_107 $$ File existing_parent = null-->Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) [ FD ]
Line_109 $$ existing_parent = ((File) existing_pi.getInitializerKey()).getParentFile()-->Line_111 $$ if (this_parent.equals(FileUtil.getApplicationFile("plugins")) && existing_parent != null && existing_parent.equals(FileUtil.getUserFile("plugins"))) [ FD ]
Line_125 $$ pos2 = p2 + 1-->Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)[ FD ]
Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)-->Line_121 $$ if (p2 == -1) [ FD ]
Line_125 $$ pos2 = p2 + 1-->Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()[ FD ]
Line_125 $$ pos2 = p2 + 1-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)-->Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()[ FD ]
Line_120 $$ int p2 = plugin_name_string.indexOf(";", pos2)-->Line_125 $$ pos2 = p2 + 1[ FD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_94 $$ String plugin_class-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_146 $$ new_props.put("plugin.class", plugin_class)[ FD ]
Line_118 $$ String plugin_name = null-->Line_147 $$ if (plugin_name != null) [ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_147 $$ if (plugin_name != null) [ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_147 $$ if (plugin_name != null) [ FD ]
Line_128 $$ Properties new_props = (Properties) props.clone()-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_118 $$ String plugin_name = null-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_122 $$ plugin_name = plugin_name_string.substring(pos2).trim()-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_124 $$ plugin_name = plugin_name_string.substring(pos2, p2).trim()-->Line_148 $$ new_props.put("plugin.name", plugin_name)[ FD ]
Line_94 $$ String plugin_class-->Line_177 $$ plugin = PluginLauncherImpl.getPreloadedPlugin(plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_177 $$ plugin = PluginLauncherImpl.getPreloadedPlugin(plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_177 $$ plugin = PluginLauncherImpl.getPreloadedPlugin(plugin_class)[ FD ]
Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_94 $$ String plugin_class-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_96 $$ plugin_class = plugin_class_string.substring(pos1).trim()-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_98 $$ plugin_class = plugin_class_string.substring(pos1, p1).trim()-->Line_180 $$ Class c = plugin_class_loader.loadClass(plugin_class)[ FD ]
Line_193 $$ plugin_class_loader = plugin.getClass().getClassLoader()-->Line_196 $$ MessageText.integratePluginMessages((String) props.get("plugin.langfile"), plugin_class_loader)[ FD ]
Line_93 $$ int p1 = plugin_class_string.indexOf(";", pos1)-->Line_224 $$ if (p1 == -1) [ FD ]
Line_129 $$ for (int j = 0; j < default_version_details.length; j++) -->Line_129 $$ for (int j = 0; j < default_version_details.length; j++) [ FD ]
Line_129 $$ for (int j = 0; j < default_version_details.length; j++) -->Line_129 $$ for (int j = 0; j < default_version_details.length; j++) [ FD ]
Line_129 $$ for (int j = 0; j < default_version_details.length; j++) -->Line_129 $$ for (int j = 0; j < default_version_details.length; j++) [ FD ]
Line_135 $$ plugin_name = default_version_details[j][2]-->Line_134 $$ if (plugin_name == null) [ FD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_160 $$ for (int i = 0; i < pluginContents.length; i++) -->Line_160 $$ for (int i = 0; i < pluginContents.length; i++) [ FD ]
Line_161 $$ File jar_file = pluginContents[i]-->Line_162 $$ if (jar_file.getName().endsWith(".jar")) [ FD ]
Line_161 $$ File jar_file = pluginContents[i]-->Line_165 $$ AEVerifier.verifyData(jar_file)[ FD ]
Line_161 $$ File jar_file = pluginContents[i]-->Line_166 $$ verified_files.add(jar_file)[ FD ]
