Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException [ CD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_3 $$ JCRNodeSource emptySource = loadTestSource()[ CD ]
Line_3 $$ JCRNodeSource emptySource = loadTestSource()-->Line_3 $$ JCRNodeSource emptySource = loadTestSource()[ CD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_4 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException [ CD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_4 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_4 $$ for (int i = 0; i < 3; i++) [ CD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_4 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()[ CD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()[ CD ]
Line_3 $$ JCRNodeSource emptySource = loadTestSource()-->Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()[ FD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_6 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)[ CD ]
Line_6 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_6 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)[ CD ]
Line_6 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_8 $$ IOUtils.copy(contentIn, sourceOut)[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_8 $$ IOUtils.copy(contentIn, sourceOut)[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_9 $$ sourceOut.flush()[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_11 $$ sourceOut.close()[ FD ]
Line_6 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_12 $$ contentIn.close()[ FD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_15 $$ String testSourceUri = BASE_URL + "users/lars.trieloff?revision=1.1"[ CD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_16 $$ JCRNodeSource secondSource = (JCRNodeSource) resolveSource(testSourceUri)[ CD ]
Line_15 $$ String testSourceUri = BASE_URL + "users/lars.trieloff?revision=1.1"-->Line_16 $$ JCRNodeSource secondSource = (JCRNodeSource) resolveSource(testSourceUri)[ FD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_17 $$ System.out.println("Read again at:" + secondSource.getSourceRevision())[ CD ]
Line_16 $$ JCRNodeSource secondSource = (JCRNodeSource) resolveSource(testSourceUri)-->Line_17 $$ System.out.println("Read again at:" + secondSource.getSourceRevision())[ FD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_18 $$ InputStream expected = emptySource.getInputStream()[ CD ]
Line_18 $$ InputStream expected = emptySource.getInputStream()-->Line_18 $$ InputStream expected = emptySource.getInputStream()[ CD ]
Line_3 $$ JCRNodeSource emptySource = loadTestSource()-->Line_18 $$ InputStream expected = emptySource.getInputStream()[ FD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_19 $$ InputStream actual = secondSource.getInputStream()[ CD ]
Line_19 $$ InputStream actual = secondSource.getInputStream()-->Line_19 $$ InputStream actual = secondSource.getInputStream()[ CD ]
Line_16 $$ JCRNodeSource secondSource = (JCRNodeSource) resolveSource(testSourceUri)-->Line_19 $$ InputStream actual = secondSource.getInputStream()[ FD ]
Line_2 $$ public void testGetOldVersion() throws ServiceException, IOException, SAXException, ParserConfigurationException -->Line_20 $$ assertTrue(isXmlEqual(expected, actual))[ CD ]
Line_18 $$ InputStream expected = emptySource.getInputStream()-->Line_20 $$ assertTrue(isXmlEqual(expected, actual))[ FD ]
Line_19 $$ InputStream actual = secondSource.getInputStream()-->Line_20 $$ assertTrue(isXmlEqual(expected, actual))[ FD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_4 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_4 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_4 $$ for (int i = 0; i < 3; i++) -->Line_4 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_6 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_8 $$ IOUtils.copy(contentIn, sourceOut)[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_8 $$ IOUtils.copy(contentIn, sourceOut)[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_9 $$ sourceOut.flush()[ FD ]
Line_5 $$ OutputStream sourceOut = emptySource.getOutputStream()-->Line_11 $$ sourceOut.close()[ FD ]
Line_6 $$ InputStream contentIn = getClass().getResourceAsStream(CONTENT_FILE)-->Line_12 $$ contentIn.close()[ FD ]
