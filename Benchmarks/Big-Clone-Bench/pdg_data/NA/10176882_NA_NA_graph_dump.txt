Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception [ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_3 $$ File transformationFile = new File(xslBase, "file-info.xsl")[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_5 $$ params.putAll(request.getParameterMap())[ CD ]
Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_5 $$ params.putAll(request.getParameterMap())[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_5 $$ params.putAll(request.getParameterMap())[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_6 $$ params.put("[ CD ]
Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_6 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_7 $$ params.put("[ CD ]
Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_7 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_7 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_8 $$ params.put("[ CD ]
Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_8 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_8 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_9 $$ params.put("[ CD ]
Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_9 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_9 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_10 $$ params.put("[ CD ]
Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_10 $$ params.put("[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_11 $$ Transformer transformer = new Transformer()[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_12 $$ transformer.setTransformationFile(transformationFile)[ CD ]
Line_11 $$ Transformer transformer = new Transformer()-->Line_12 $$ transformer.setTransformationFile(transformationFile)[ FD ]
Line_3 $$ File transformationFile = new File(xslBase, "file-info.xsl")-->Line_12 $$ transformer.setTransformationFile(transformationFile)[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_13 $$ transformer.setParams(params)[ CD ]
Line_11 $$ Transformer transformer = new Transformer()-->Line_13 $$ transformer.setParams(params)[ FD ]
Line_4 $$ HashMap<String, Object> params = new HashMap<String, Object>()-->Line_13 $$ transformer.setParams(params)[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_14 $$ transformer.setTransformMode(TransformMode.NORMAL)[ CD ]
Line_11 $$ Transformer transformer = new Transformer()-->Line_14 $$ transformer.setTransformMode(TransformMode.NORMAL)[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_15 $$ transformer.setConfiguration(configuration)[ CD ]
Line_11 $$ Transformer transformer = new Transformer()-->Line_15 $$ transformer.setConfiguration(configuration)[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_16 $$ transformer.setErrorListener(new TransformationErrorListener(response))[ CD ]
Line_11 $$ Transformer transformer = new Transformer()-->Line_16 $$ transformer.setErrorListener(new TransformationErrorListener(response))[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_17 $$ transformer.setLogInfo(false)[ CD ]
Line_11 $$ Transformer transformer = new Transformer()-->Line_17 $$ transformer.setLogInfo(false)[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_18 $$ DataSourceIf dataSource = new NullSource()[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_19 $$ Document fileInfoDoc = XmlUtils.getEmptyDOM()[ CD ]
Line_19 $$ Document fileInfoDoc = XmlUtils.getEmptyDOM()-->Line_19 $$ Document fileInfoDoc = XmlUtils.getEmptyDOM()[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_20 $$ DOMResult result = new DOMResult(fileInfoDoc)[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_21 $$ transformer.transform((Source) dataSource, result)[ CD ]
Line_11 $$ Transformer transformer = new Transformer()-->Line_21 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_20 $$ DOMResult result = new DOMResult(fileInfoDoc)-->Line_21 $$ transformer.transform((Source) dataSource, result)[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()[ CD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()[ CD ]
Line_19 $$ Document fileInfoDoc = XmlUtils.getEmptyDOM()-->Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_23 $$ if (documentElement.getLocalName().equals("null")) [ CD ]
Line_23 $$ if (documentElement.getLocalName().equals("null")) -->Line_23 $$ if (documentElement.getLocalName().equals("null")) [ CD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_23 $$ if (documentElement.getLocalName().equals("null")) [ FD ]
Line_23 $$ if (documentElement.getLocalName().equals("null")) -->Line_24 $$ response.sendError(HttpServletResponse.SC_UNAUTHORIZED)[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_24 $$ response.sendError(HttpServletResponse.SC_UNAUTHORIZED)[ FD ]
Line_23 $$ if (documentElement.getLocalName().equals("null")) -->Line_25 $$ return[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_27 $$ InputStream is = null[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()[ CD ]
Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)-->Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)[ FD ]
Line_31 $$ String location = XPathUtils.getStringValue(xpath, "location", documentElement, null)-->Line_31 $$ String location = XPathUtils.getStringValue(xpath, "location", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_31 $$ String location = XPathUtils.getStringValue(xpath, "location", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_31 $$ String location = XPathUtils.getStringValue(xpath, "location", documentElement, null)[ FD ]
Line_32 $$ String fileName = XPathUtils.getStringValue(xpath, "file-name", documentElement, null)-->Line_32 $$ String fileName = XPathUtils.getStringValue(xpath, "file-name", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_32 $$ String fileName = XPathUtils.getStringValue(xpath, "file-name", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_32 $$ String fileName = XPathUtils.getStringValue(xpath, "file-name", documentElement, null)[ FD ]
Line_33 $$ String mimeType = XPathUtils.getStringValue(xpath, "mime-type", documentElement, null)-->Line_33 $$ String mimeType = XPathUtils.getStringValue(xpath, "mime-type", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_33 $$ String mimeType = XPathUtils.getStringValue(xpath, "mime-type", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_33 $$ String mimeType = XPathUtils.getStringValue(xpath, "mime-type", documentElement, null)[ FD ]
Line_34 $$ String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null)-->Line_34 $$ String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_34 $$ String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_34 $$ String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null)[ FD ]
Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)-->Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) [ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) [ CD ]
Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)-->Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) [ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_36 $$ String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null)[ CD ]
Line_36 $$ String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null)-->Line_36 $$ String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_36 $$ String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_36 $$ String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null)[ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)[ CD ]
Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)-->Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)[ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)[ CD ]
Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)-->Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)[ CD ]
Line_29 $$ XPath xpath = XPathFactory.newInstance().newXPath()-->Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)[ FD ]
Line_22 $$ Element documentElement = fileInfoDoc.getDocumentElement()-->Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)[ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_39 $$ URI uri = new URI(location)[ CD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_40 $$ if (StringUtils.isNotBlank(userName)) [ CD ]
Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)-->Line_40 $$ if (StringUtils.isNotBlank(userName)) [ FD ]
Line_40 $$ if (StringUtils.isNotBlank(userName)) -->Line_40 $$ if (StringUtils.isNotBlank(userName)) [ CD ]
Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)-->Line_40 $$ if (StringUtils.isNotBlank(userName)) [ FD ]
Line_40 $$ if (StringUtils.isNotBlank(userName)) -->Line_41 $$ String userInfo = ""[ CD ]
Line_40 $$ if (StringUtils.isNotBlank(userName)) -->Line_42 $$ if (StringUtils.isNotBlank(domain)) [ CD ]
Line_36 $$ String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null)-->Line_42 $$ if (StringUtils.isNotBlank(domain)) [ FD ]
Line_42 $$ if (StringUtils.isNotBlank(domain)) -->Line_42 $$ if (StringUtils.isNotBlank(domain)) [ CD ]
Line_36 $$ String domain = XPathUtils.getStringValue(xpath, "domain", documentElement, null)-->Line_42 $$ if (StringUtils.isNotBlank(domain)) [ FD ]
Line_42 $$ if (StringUtils.isNotBlank(domain)) -->Line_43 $$ userInfo = userInfo + domain + ";"[ CD ]
Line_41 $$ String userInfo = ""-->Line_43 $$ userInfo = userInfo + domain + ";"[ FD ]
Line_43 $$ userInfo = userInfo + domain + ";"-->Line_43 $$ userInfo = userInfo + domain + ";"[ FD ]
Line_40 $$ if (StringUtils.isNotBlank(userName)) -->Line_45 $$ userInfo = userInfo + userName[ CD ]
Line_41 $$ String userInfo = ""-->Line_45 $$ userInfo = userInfo + userName[ FD ]
Line_43 $$ userInfo = userInfo + domain + ";"-->Line_45 $$ userInfo = userInfo + userName[ FD ]
Line_45 $$ userInfo = userInfo + userName-->Line_45 $$ userInfo = userInfo + userName[ FD ]
Line_41 $$ String userInfo = ""-->Line_45 $$ userInfo = userInfo + userName[ FD ]
Line_43 $$ userInfo = userInfo + domain + ";"-->Line_45 $$ userInfo = userInfo + userName[ FD ]
Line_45 $$ userInfo = userInfo + userName-->Line_45 $$ userInfo = userInfo + userName[ FD ]
Line_37 $$ String userName = XPathUtils.getStringValue(xpath, "username", documentElement, null)-->Line_45 $$ userInfo = userInfo + userName[ FD ]
Line_40 $$ if (StringUtils.isNotBlank(userName)) -->Line_46 $$ if (StringUtils.isNotBlank(password)) [ CD ]
Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)-->Line_46 $$ if (StringUtils.isNotBlank(password)) [ FD ]
Line_46 $$ if (StringUtils.isNotBlank(password)) -->Line_46 $$ if (StringUtils.isNotBlank(password)) [ CD ]
Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)-->Line_46 $$ if (StringUtils.isNotBlank(password)) [ FD ]
Line_46 $$ if (StringUtils.isNotBlank(password)) -->Line_47 $$ userInfo = userInfo + ":" + password[ CD ]
Line_41 $$ String userInfo = ""-->Line_47 $$ userInfo = userInfo + ":" + password[ FD ]
Line_43 $$ userInfo = userInfo + domain + ";"-->Line_47 $$ userInfo = userInfo + ":" + password[ FD ]
Line_45 $$ userInfo = userInfo + userName-->Line_47 $$ userInfo = userInfo + ":" + password[ FD ]
Line_47 $$ userInfo = userInfo + ":" + password-->Line_47 $$ userInfo = userInfo + ":" + password[ FD ]
Line_38 $$ String password = XPathUtils.getStringValue(xpath, "password", documentElement, null)-->Line_47 $$ userInfo = userInfo + ":" + password[ FD ]
Line_40 $$ if (StringUtils.isNotBlank(userName)) -->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ CD ]
Line_39 $$ URI uri = new URI(location)-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_39 $$ URI uri = new URI(location)-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_39 $$ URI uri = new URI(location)-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_39 $$ URI uri = new URI(location)-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_39 $$ URI uri = new URI(location)-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_39 $$ URI uri = new URI(location)-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_39 $$ URI uri = new URI(location)-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_51 $$ SmbFile smbFile = new SmbFile(uri.toURL())[ CD ]
Line_39 $$ URI uri = new URI(location)-->Line_51 $$ SmbFile smbFile = new SmbFile(uri.toURL())[ FD ]
Line_49 $$ uri = new URI(uri.getScheme(), userInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_51 $$ SmbFile smbFile = new SmbFile(uri.toURL())[ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_52 $$ is = new SmbFileInputStream(smbFile)[ CD ]
Line_27 $$ InputStream is = null-->Line_52 $$ is = new SmbFileInputStream(smbFile)[ FD ]
Line_52 $$ is = new SmbFileInputStream(smbFile)-->Line_52 $$ is = new SmbFileInputStream(smbFile)[ FD ]
Line_35 $$ if (StringUtils.equals(sourceType, "cifsSource")) -->Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) [ CD ]
Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)-->Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) [ FD ]
Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) -->Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) [ CD ]
Line_30 $$ String sourceType = XPathUtils.getStringValue(xpath, "source-type", documentElement, null)-->Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) [ FD ]
Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) -->Line_54 $$ File file = new File(location)[ CD ]
Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) -->Line_55 $$ is = new FileInputStream(file)[ CD ]
Line_27 $$ InputStream is = null-->Line_55 $$ is = new FileInputStream(file)[ FD ]
Line_52 $$ is = new SmbFileInputStream(smbFile)-->Line_55 $$ is = new FileInputStream(file)[ FD ]
Line_55 $$ is = new FileInputStream(file)-->Line_55 $$ is = new FileInputStream(file)[ FD ]
Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) -->Line_57 $$ logger.error("Source type \"" + ((sourceType != null) ? sourceType : "") + "\" not supported")[ CD ]
Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) -->Line_58 $$ response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_58 $$ response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)[ FD ]
Line_53 $$ if (StringUtils.equals(sourceType, "localFileSystemSource")) -->Line_59 $$ return[ CD ]
Line_33 $$ String mimeType = XPathUtils.getStringValue(xpath, "mime-type", documentElement, null)-->Line_61 $$ if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) [ FD ]
Line_34 $$ String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null)-->Line_61 $$ if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) [ FD ]
Line_61 $$ if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) -->Line_62 $$ response.setContentType(Definitions.MIMETYPE_BINARY)[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_62 $$ response.setContentType(Definitions.MIMETYPE_BINARY)[ FD ]
Line_61 $$ if (StringUtils.isBlank(mimeType) && StringUtils.isBlank(encoding)) -->Line_63 $$ if (StringUtils.isBlank(encoding)) [ CD ]
Line_34 $$ String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null)-->Line_63 $$ if (StringUtils.isBlank(encoding)) [ FD ]
Line_63 $$ if (StringUtils.isBlank(encoding)) -->Line_63 $$ if (StringUtils.isBlank(encoding)) [ CD ]
Line_34 $$ String encoding = XPathUtils.getStringValue(xpath, "encoding", documentElement, null)-->Line_63 $$ if (StringUtils.isBlank(encoding)) [ FD ]
Line_63 $$ if (StringUtils.isBlank(encoding)) -->Line_64 $$ response.setContentType(mimeType)[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_64 $$ response.setContentType(mimeType)[ FD ]
Line_33 $$ String mimeType = XPathUtils.getStringValue(xpath, "mime-type", documentElement, null)-->Line_64 $$ response.setContentType(mimeType)[ FD ]
Line_63 $$ if (StringUtils.isBlank(encoding)) -->Line_66 $$ response.setContentType(mimeType + ";charset=" + encoding)[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_66 $$ response.setContentType(mimeType + ";charset=" + encoding)[ FD ]
Line_68 $$ if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) -->Line_68 $$ if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) [ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_68 $$ if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) [ FD ]
Line_68 $$ if (request.getParameterMap().containsKey(Definitions.REQUEST_PARAMNAME_DOWNLOAD)) -->Line_69 $$ response.setHeader("Content-Disposition", "attachment; filename=" + fileName)[ CD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_69 $$ response.setHeader("Content-Disposition", "attachment; filename=" + fileName)[ FD ]
Line_2 $$ protected void processDownloadAction(HttpServletRequest request, HttpServletResponse response) throws Exception -->Line_71 $$ IOUtils.copy(new BufferedInputStream(is), response.getOutputStream())[ FD ]
Line_27 $$ InputStream is = null-->Line_73 $$ if (is != null) [ FD ]
Line_52 $$ is = new SmbFileInputStream(smbFile)-->Line_73 $$ if (is != null) [ FD ]
Line_55 $$ is = new FileInputStream(file)-->Line_73 $$ if (is != null) [ FD ]
Line_73 $$ if (is != null) -->Line_74 $$ is.close()[ CD ]
Line_27 $$ InputStream is = null-->Line_74 $$ is.close()[ FD ]
Line_52 $$ is = new SmbFileInputStream(smbFile)-->Line_74 $$ is.close()[ FD ]
Line_55 $$ is = new FileInputStream(file)-->Line_74 $$ is.close()[ FD ]
