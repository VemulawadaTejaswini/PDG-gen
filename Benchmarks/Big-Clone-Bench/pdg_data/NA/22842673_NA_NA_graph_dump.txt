Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException [ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_3 $$ String app = "1"[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_4 $$ String owner = "tx"[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_5 $$ String session = ""[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_6 $$ String sdk = "ad1.0"[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_7 $$ String version = "txLove1.0"[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_8 $$ String timestamp = String.valueOf(System.currentTimeMillis())[ CD ]
Line_8 $$ String timestamp = String.valueOf(System.currentTimeMillis())-->Line_8 $$ String timestamp = String.valueOf(System.currentTimeMillis())[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_9 $$ String sign = ""[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_10 $$ String appSecret = "test"[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_12 $$ protocal.put(AuthUtils.AUTH_APP, app)[ CD ]
Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()-->Line_12 $$ protocal.put(AuthUtils.AUTH_APP, app)[ FD ]
Line_3 $$ String app = "1"-->Line_12 $$ protocal.put(AuthUtils.AUTH_APP, app)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_13 $$ protocal.put(AuthUtils.AUTH_OWNER, owner)[ CD ]
Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()-->Line_13 $$ protocal.put(AuthUtils.AUTH_OWNER, owner)[ FD ]
Line_4 $$ String owner = "tx"-->Line_13 $$ protocal.put(AuthUtils.AUTH_OWNER, owner)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_14 $$ protocal.put(AuthUtils.AUTH_SESSION, session)[ CD ]
Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()-->Line_14 $$ protocal.put(AuthUtils.AUTH_SESSION, session)[ FD ]
Line_5 $$ String session = ""-->Line_14 $$ protocal.put(AuthUtils.AUTH_SESSION, session)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_15 $$ protocal.put(AuthUtils.SDK, sdk)[ CD ]
Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()-->Line_15 $$ protocal.put(AuthUtils.SDK, sdk)[ FD ]
Line_6 $$ String sdk = "ad1.0"-->Line_15 $$ protocal.put(AuthUtils.SDK, sdk)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_16 $$ protocal.put(AuthUtils.VERSION, version)[ CD ]
Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()-->Line_16 $$ protocal.put(AuthUtils.VERSION, version)[ FD ]
Line_7 $$ String version = "txLove1.0"-->Line_16 $$ protocal.put(AuthUtils.VERSION, version)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_17 $$ protocal.put(AuthUtils.TIMESTAMP, timestamp)[ CD ]
Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()-->Line_17 $$ protocal.put(AuthUtils.TIMESTAMP, timestamp)[ FD ]
Line_8 $$ String timestamp = String.valueOf(System.currentTimeMillis())-->Line_17 $$ protocal.put(AuthUtils.TIMESTAMP, timestamp)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_18 $$ Map<String, String> parameter = new HashMap<String, String>()[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_19 $$ parameter.put("uid", String.valueOf(user.getUserId()))[ CD ]
Line_18 $$ Map<String, String> parameter = new HashMap<String, String>()-->Line_19 $$ parameter.put("uid", String.valueOf(user.getUserId()))[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_20 $$ parameter.put("ip", "0")[ CD ]
Line_18 $$ Map<String, String> parameter = new HashMap<String, String>()-->Line_20 $$ parameter.put("ip", "0")[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_21 $$ parameter.put("imsi", imsi)[ CD ]
Line_18 $$ Map<String, String> parameter = new HashMap<String, String>()-->Line_21 $$ parameter.put("imsi", imsi)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_22 $$ parameter.put("width", "0")[ CD ]
Line_18 $$ Map<String, String> parameter = new HashMap<String, String>()-->Line_22 $$ parameter.put("width", "0")[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)[ CD ]
Line_9 $$ String sign = ""-->Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)[ FD ]
Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)-->Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)[ FD ]
Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)-->Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)[ CD ]
Line_11 $$ Map<String, String> protocal = new HashMap<String, String>()-->Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)[ FD ]
Line_18 $$ Map<String, String> parameter = new HashMap<String, String>()-->Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)[ FD ]
Line_10 $$ String appSecret = "test"-->Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_24 $$ HttpClient client = new DefaultHttpClient()[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_25 $$ HttpGet request = new HttpGet(url.toString())[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_25 $$ HttpGet request = new HttpGet(url.toString())[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_26 $$ request.setHeader(AuthUtils.AUTH_APP, app)[ CD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_26 $$ request.setHeader(AuthUtils.AUTH_APP, app)[ FD ]
Line_3 $$ String app = "1"-->Line_26 $$ request.setHeader(AuthUtils.AUTH_APP, app)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_27 $$ request.setHeader(AuthUtils.AUTH_OWNER, owner)[ CD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_27 $$ request.setHeader(AuthUtils.AUTH_OWNER, owner)[ FD ]
Line_4 $$ String owner = "tx"-->Line_27 $$ request.setHeader(AuthUtils.AUTH_OWNER, owner)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_28 $$ request.setHeader(AuthUtils.AUTH_SESSION, session)[ CD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_28 $$ request.setHeader(AuthUtils.AUTH_SESSION, session)[ FD ]
Line_5 $$ String session = ""-->Line_28 $$ request.setHeader(AuthUtils.AUTH_SESSION, session)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_29 $$ request.setHeader(AuthUtils.SDK, sdk)[ CD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_29 $$ request.setHeader(AuthUtils.SDK, sdk)[ FD ]
Line_6 $$ String sdk = "ad1.0"-->Line_29 $$ request.setHeader(AuthUtils.SDK, sdk)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_30 $$ request.setHeader(AuthUtils.VERSION, version)[ CD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_30 $$ request.setHeader(AuthUtils.VERSION, version)[ FD ]
Line_7 $$ String version = "txLove1.0"-->Line_30 $$ request.setHeader(AuthUtils.VERSION, version)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_31 $$ request.setHeader(AuthUtils.TIMESTAMP, timestamp)[ CD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_31 $$ request.setHeader(AuthUtils.TIMESTAMP, timestamp)[ FD ]
Line_8 $$ String timestamp = String.valueOf(System.currentTimeMillis())-->Line_31 $$ request.setHeader(AuthUtils.TIMESTAMP, timestamp)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_32 $$ request.setHeader(AuthUtils.SIGN, sign)[ CD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_32 $$ request.setHeader(AuthUtils.SIGN, sign)[ FD ]
Line_9 $$ String sign = ""-->Line_32 $$ request.setHeader(AuthUtils.SIGN, sign)[ FD ]
Line_23 $$ sign = AuthUtils.sign(protocal, parameter, appSecret)-->Line_32 $$ request.setHeader(AuthUtils.SIGN, sign)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_33 $$ HttpResponse response = client.execute(request)[ CD ]
Line_33 $$ HttpResponse response = client.execute(request)-->Line_33 $$ HttpResponse response = client.execute(request)[ CD ]
Line_24 $$ HttpClient client = new DefaultHttpClient()-->Line_33 $$ HttpResponse response = client.execute(request)[ FD ]
Line_25 $$ HttpGet request = new HttpGet(url.toString())-->Line_33 $$ HttpResponse response = client.execute(request)[ FD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_34 $$ if (response.getStatusLine().getStatusCode() == 200) [ CD ]
Line_33 $$ HttpResponse response = client.execute(request)-->Line_34 $$ if (response.getStatusLine().getStatusCode() == 200) [ FD ]
Line_34 $$ if (response.getStatusLine().getStatusCode() == 200) -->Line_35 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()))[ CD ]
Line_33 $$ HttpResponse response = client.execute(request)-->Line_35 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()))[ FD ]
Line_34 $$ if (response.getStatusLine().getStatusCode() == 200) -->Line_36 $$ String line = reader.readLine()[ CD ]
Line_36 $$ String line = reader.readLine()-->Line_36 $$ String line = reader.readLine()[ CD ]
Line_35 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(response.getEntity().getContent()))-->Line_36 $$ String line = reader.readLine()[ FD ]
Line_34 $$ if (response.getStatusLine().getStatusCode() == 200) -->Line_37 $$ JSONObject object[ CD ]
Line_34 $$ if (response.getStatusLine().getStatusCode() == 200) -->Line_38 $$ Map map = new HashMap()[ CD ]
Line_37 $$ JSONObject object-->Line_41 $$ object = new JSONObject(line)[ FD ]
Line_41 $$ object = new JSONObject(line)-->Line_41 $$ object = new JSONObject(line)[ FD ]
Line_37 $$ JSONObject object-->Line_42 $$ if (object != null) [ FD ]
Line_41 $$ object = new JSONObject(line)-->Line_42 $$ if (object != null) [ FD ]
Line_42 $$ if (object != null) -->Line_43 $$ System.out.println(object.toString())[ CD ]
Line_37 $$ JSONObject object-->Line_43 $$ System.out.println(object.toString())[ FD ]
Line_41 $$ object = new JSONObject(line)-->Line_43 $$ System.out.println(object.toString())[ FD ]
Line_42 $$ if (object != null) -->Line_44 $$ map.put("imgAddress", object.getString("imgurl"))[ CD ]
Line_38 $$ Map map = new HashMap()-->Line_44 $$ map.put("imgAddress", object.getString("imgurl"))[ FD ]
Line_37 $$ JSONObject object-->Line_44 $$ map.put("imgAddress", object.getString("imgurl"))[ FD ]
Line_41 $$ object = new JSONObject(line)-->Line_44 $$ map.put("imgAddress", object.getString("imgurl"))[ FD ]
Line_42 $$ if (object != null) -->Line_45 $$ map.put("imgUrl", object.getString("url"))[ CD ]
Line_38 $$ Map map = new HashMap()-->Line_45 $$ map.put("imgUrl", object.getString("url"))[ FD ]
Line_37 $$ JSONObject object-->Line_45 $$ map.put("imgUrl", object.getString("url"))[ FD ]
Line_41 $$ object = new JSONObject(line)-->Line_45 $$ map.put("imgUrl", object.getString("url"))[ FD ]
Line_42 $$ if (object != null) -->Line_46 $$ return map[ CD ]
Line_2 $$ private Map fetchAdData(String url) throws ClientProtocolException, IOException -->Line_52 $$ return null[ CD ]
