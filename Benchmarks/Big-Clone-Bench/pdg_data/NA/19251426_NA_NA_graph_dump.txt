Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException [ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_3 $$ if (file.isDirectory()) [ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_3 $$ if (file.isDirectory()) [ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_3 $$ if (file.isDirectory()) [ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_3 $$ if (file.isDirectory()) [ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_4 $$ File[] files = file.listFiles()[ CD ]
Line_4 $$ File[] files = file.listFiles()-->Line_4 $$ File[] files = file.listFiles()[ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_4 $$ File[] files = file.listFiles()[ FD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_6 $$ recurseFiles(root, file2, zaos, absolute)[ FD ]
Line_5 $$ for (File file2 : files) -->Line_6 $$ recurseFiles(root, file2, zaos, absolute)[ FD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_6 $$ recurseFiles(root, file2, zaos, absolute)[ FD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_6 $$ recurseFiles(root, file2, zaos, absolute)[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) [ CD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) [ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) [ FD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) [ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) [ FD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_9 $$ String filename = null[ CD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_10 $$ if (absolute) [ CD ]
Line_10 $$ if (absolute) -->Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())[ CD ]
Line_9 $$ String filename = null-->Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())[ FD ]
Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())-->Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())[ FD ]
Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())-->Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())[ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())[ FD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())[ FD ]
Line_10 $$ if (absolute) -->Line_13 $$ filename = file.getName()[ CD ]
Line_9 $$ String filename = null-->Line_13 $$ filename = file.getName()[ FD ]
Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length())-->Line_13 $$ filename = file.getName()[ FD ]
Line_13 $$ filename = file.getName()-->Line_13 $$ filename = file.getName()[ FD ]
Line_13 $$ filename = file.getName()-->Line_13 $$ filename = file.getName()[ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_13 $$ filename = file.getName()[ FD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_15 $$ ZipArchiveEntry zae = new ZipArchiveEntry(filename)[ CD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_16 $$ zae.setSize(file.length())[ CD ]
Line_15 $$ ZipArchiveEntry zae = new ZipArchiveEntry(filename)-->Line_16 $$ zae.setSize(file.length())[ FD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_16 $$ zae.setSize(file.length())[ FD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_17 $$ zaos.putArchiveEntry(zae)[ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_17 $$ zaos.putArchiveEntry(zae)[ FD ]
Line_15 $$ ZipArchiveEntry zae = new ZipArchiveEntry(filename)-->Line_17 $$ zaos.putArchiveEntry(zae)[ FD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_18 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_19 $$ IOUtils.copy(fis, zaos)[ CD ]
Line_18 $$ FileInputStream fis = new FileInputStream(file)-->Line_19 $$ IOUtils.copy(fis, zaos)[ FD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_19 $$ IOUtils.copy(fis, zaos)[ FD ]
Line_8 $$ if ((!file.getName().endsWith(".zip")) && (!file.getName().endsWith(".ZIP"))) -->Line_20 $$ zaos.closeArchiveEntry()[ CD ]
Line_2 $$ private static void recurseFiles(File root, File file, ZipArchiveOutputStream zaos, boolean absolute) throws IOException -->Line_20 $$ zaos.closeArchiveEntry()[ FD ]
