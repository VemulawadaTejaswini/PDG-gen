Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void run() [ CD ]
Line_4 $$ if (LOG.isDebugEnabled()) -->Line_4 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_4 $$ if (LOG.isDebugEnabled()) -->Line_5 $$ LOG.debug("Backupthread started")[ CD ]
Line_7 $$ if (_file.exists()) -->Line_7 $$ if (_file.exists()) [ CD ]
Line_7 $$ if (_file.exists()) -->Line_8 $$ _file.delete()[ CD ]
Line_10 $$ final ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(_file))-->Line_11 $$ zOut.setLevel(9)[ FD ]
Line_12 $$ final File xmlFile = File.createTempFile("mp3db", ".xml")-->Line_12 $$ final File xmlFile = File.createTempFile("mp3db", ".xml")[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")[ CD ]
Line_13 $$ final OutputStream ost = new FileOutputStream(xmlFile)-->Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")[ FD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_15 $$ writer.writeStartDocument("UTF-8", "1.0")[ FD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_16 $$ writer.writeCharacters("\n")[ FD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_17 $$ writer.writeStartElement("mp3db")[ FD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_18 $$ writer.writeAttribute("version", Integer.toString(Main.ENGINEVERSION))[ FD ]
Line_23 $$ int itemCount = 0-->Line_25 $$ itemCount += mfDAO.getCount()[ FD ]
Line_25 $$ itemCount += mfDAO.getCount()-->Line_25 $$ itemCount += mfDAO.getCount()[ FD ]
Line_25 $$ itemCount += mfDAO.getCount()-->Line_25 $$ itemCount += mfDAO.getCount()[ CD ]
Line_19 $$ final MediafileDAO mfDAO = new MediafileDAO()-->Line_25 $$ itemCount += mfDAO.getCount()[ FD ]
Line_23 $$ int itemCount = 0-->Line_26 $$ itemCount += aDAO.getCount()[ FD ]
Line_25 $$ itemCount += mfDAO.getCount()-->Line_26 $$ itemCount += aDAO.getCount()[ FD ]
Line_26 $$ itemCount += aDAO.getCount()-->Line_26 $$ itemCount += aDAO.getCount()[ FD ]
Line_26 $$ itemCount += aDAO.getCount()-->Line_26 $$ itemCount += aDAO.getCount()[ CD ]
Line_20 $$ final AlbumDAO aDAO = new AlbumDAO()-->Line_26 $$ itemCount += aDAO.getCount()[ FD ]
Line_23 $$ int itemCount = 0-->Line_27 $$ itemCount += cdDAO.getCount()[ FD ]
Line_25 $$ itemCount += mfDAO.getCount()-->Line_27 $$ itemCount += cdDAO.getCount()[ FD ]
Line_26 $$ itemCount += aDAO.getCount()-->Line_27 $$ itemCount += cdDAO.getCount()[ FD ]
Line_27 $$ itemCount += cdDAO.getCount()-->Line_27 $$ itemCount += cdDAO.getCount()[ FD ]
Line_27 $$ itemCount += cdDAO.getCount()-->Line_27 $$ itemCount += cdDAO.getCount()[ CD ]
Line_21 $$ final CdDAO cdDAO = new CdDAO()-->Line_27 $$ itemCount += cdDAO.getCount()[ FD ]
Line_23 $$ int itemCount = 0-->Line_28 $$ itemCount += ciDAO.getCount()[ FD ]
Line_25 $$ itemCount += mfDAO.getCount()-->Line_28 $$ itemCount += ciDAO.getCount()[ FD ]
Line_26 $$ itemCount += aDAO.getCount()-->Line_28 $$ itemCount += ciDAO.getCount()[ FD ]
Line_27 $$ itemCount += cdDAO.getCount()-->Line_28 $$ itemCount += ciDAO.getCount()[ FD ]
Line_28 $$ itemCount += ciDAO.getCount()-->Line_28 $$ itemCount += ciDAO.getCount()[ FD ]
Line_28 $$ itemCount += ciDAO.getCount()-->Line_28 $$ itemCount += ciDAO.getCount()[ CD ]
Line_22 $$ final CoveritemDAO ciDAO = new CoveritemDAO()-->Line_28 $$ itemCount += ciDAO.getCount()[ FD ]
Line_39 $$ final List<CdIf> data = cdDAO.getCdsOrderById()-->Line_39 $$ final List<CdIf> data = cdDAO.getCdsOrderById()[ CD ]
Line_21 $$ final CdDAO cdDAO = new CdDAO()-->Line_39 $$ final List<CdIf> data = cdDAO.getCdsOrderById()[ FD ]
Line_39 $$ final List<CdIf> data = cdDAO.getCdsOrderById()-->Line_40 $$ if (data.size() > 0) [ FD ]
Line_40 $$ if (data.size() > 0) -->Line_41 $$ final Map<Integer, Integer> albums = new HashMap<Integer, Integer>()[ CD ]
Line_40 $$ if (data.size() > 0) -->Line_42 $$ final Iterator<CdIf> it = data.iterator()[ CD ]
Line_42 $$ final Iterator<CdIf> it = data.iterator()-->Line_42 $$ final Iterator<CdIf> it = data.iterator()[ CD ]
Line_39 $$ final List<CdIf> data = cdDAO.getCdsOrderById()-->Line_42 $$ final Iterator<CdIf> it = data.iterator()[ FD ]
Line_40 $$ if (data.size() > 0) -->Line_43 $$ while (it.hasNext() && !_break) [ CD ]
Line_40 $$ if (data.size() > 0) -->Line_40 $$ if (data.size() > 0) [ CD ]
Line_42 $$ final Iterator<CdIf> it = data.iterator()-->Line_43 $$ while (it.hasNext() && !_break) [ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_44 $$ final CdIf cd = it.next()[ CD ]
Line_44 $$ final CdIf cd = it.next()-->Line_44 $$ final CdIf cd = it.next()[ CD ]
Line_42 $$ final Iterator<CdIf> it = data.iterator()-->Line_44 $$ final CdIf cd = it.next()[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_45 $$ final Integer cdId = Integer.valueOf(cdCounter++)[ CD ]
Line_45 $$ final Integer cdId = Integer.valueOf(cdCounter++)-->Line_45 $$ final Integer cdId = Integer.valueOf(cdCounter++)[ CD ]
Line_34 $$ int cdCounter = 0-->Line_45 $$ final Integer cdId = Integer.valueOf(cdCounter++)[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_46 $$ writer.writeStartElement(TypeConstants.XML_CD)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_46 $$ writer.writeStartElement(TypeConstants.XML_CD)[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_47 $$ exportCd(writer, cd, cdId)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_47 $$ exportCd(writer, cd, cdId)[ FD ]
Line_44 $$ final CdIf cd = it.next()-->Line_47 $$ exportCd(writer, cd, cdId)[ FD ]
Line_45 $$ final Integer cdId = Integer.valueOf(cdCounter++)-->Line_47 $$ exportCd(writer, cd, cdId)[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_48 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ CD ]
Line_38 $$ int counter = 0-->Line_48 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_49 $$ final List<MediafileIf> files = cd.getMediafiles()[ CD ]
Line_49 $$ final List<MediafileIf> files = cd.getMediafiles()-->Line_49 $$ final List<MediafileIf> files = cd.getMediafiles()[ CD ]
Line_44 $$ final CdIf cd = it.next()-->Line_49 $$ final List<MediafileIf> files = cd.getMediafiles()[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_50 $$ final Iterator<MediafileIf> mfit = files.iterator()[ CD ]
Line_50 $$ final Iterator<MediafileIf> mfit = files.iterator()-->Line_50 $$ final Iterator<MediafileIf> mfit = files.iterator()[ CD ]
Line_49 $$ final List<MediafileIf> files = cd.getMediafiles()-->Line_50 $$ final Iterator<MediafileIf> mfit = files.iterator()[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_51 $$ MediafileIf mf[ CD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_52 $$ while (mfit.hasNext() && !_break) [ CD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_43 $$ while (it.hasNext() && !_break) [ CD ]
Line_50 $$ final Iterator<MediafileIf> mfit = files.iterator()-->Line_52 $$ while (mfit.hasNext() && !_break) [ FD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_53 $$ mf = mfit.next()[ CD ]
Line_53 $$ mf = mfit.next()-->Line_53 $$ mf = mfit.next()[ FD ]
Line_51 $$ MediafileIf mf-->Line_53 $$ mf = mfit.next()[ FD ]
Line_53 $$ mf = mfit.next()-->Line_53 $$ mf = mfit.next()[ CD ]
Line_50 $$ final Iterator<MediafileIf> mfit = files.iterator()-->Line_53 $$ mf = mfit.next()[ FD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_54 $$ final Integer mfId = Integer.valueOf(mediafileCounter++)[ CD ]
Line_54 $$ final Integer mfId = Integer.valueOf(mediafileCounter++)-->Line_54 $$ final Integer mfId = Integer.valueOf(mediafileCounter++)[ CD ]
Line_35 $$ int mediafileCounter = 0-->Line_54 $$ final Integer mfId = Integer.valueOf(mediafileCounter++)[ FD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_55 $$ writer.writeStartElement(TypeConstants.XML_MEDIAFILE)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_55 $$ writer.writeStartElement(TypeConstants.XML_MEDIAFILE)[ FD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_56 $$ exportMediafile(writer, mf, mfId)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_56 $$ exportMediafile(writer, mf, mfId)[ FD ]
Line_53 $$ mf = mfit.next()-->Line_56 $$ exportMediafile(writer, mf, mfId)[ FD ]
Line_51 $$ MediafileIf mf-->Line_56 $$ exportMediafile(writer, mf, mfId)[ FD ]
Line_54 $$ final Integer mfId = Integer.valueOf(mediafileCounter++)-->Line_56 $$ exportMediafile(writer, mf, mfId)[ FD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_57 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ CD ]
Line_38 $$ int counter = 0-->Line_57 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ FD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_58 $$ final AlbumIf a = mf.getAlbum()[ CD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_58 $$ final AlbumIf a = mf.getAlbum()[ CD ]
Line_53 $$ mf = mfit.next()-->Line_58 $$ final AlbumIf a = mf.getAlbum()[ FD ]
Line_51 $$ MediafileIf mf-->Line_58 $$ final AlbumIf a = mf.getAlbum()[ FD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_59 $$ if (a != null) [ CD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_59 $$ if (a != null) [ FD ]
Line_59 $$ if (a != null) -->Line_60 $$ Integer inte[ CD ]
Line_59 $$ if (a != null) -->Line_61 $$ if (albums.containsKey(a.getAid())) [ CD ]
Line_41 $$ final Map<Integer, Integer> albums = new HashMap<Integer, Integer>()-->Line_61 $$ if (albums.containsKey(a.getAid())) [ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_61 $$ if (albums.containsKey(a.getAid())) [ CD ]
Line_41 $$ final Map<Integer, Integer> albums = new HashMap<Integer, Integer>()-->Line_61 $$ if (albums.containsKey(a.getAid())) [ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_61 $$ if (albums.containsKey(a.getAid())) [ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_62 $$ inte = albums.get(a.getAid())[ CD ]
Line_60 $$ Integer inte-->Line_62 $$ inte = albums.get(a.getAid())[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_62 $$ inte = albums.get(a.getAid())[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_62 $$ inte = albums.get(a.getAid())[ CD ]
Line_41 $$ final Map<Integer, Integer> albums = new HashMap<Integer, Integer>()-->Line_62 $$ inte = albums.get(a.getAid())[ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_62 $$ inte = albums.get(a.getAid())[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_63 $$ writeLink(writer, TypeConstants.XML_ALBUM, inte)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_63 $$ writeLink(writer, TypeConstants.XML_ALBUM, inte)[ FD ]
Line_60 $$ Integer inte-->Line_63 $$ writeLink(writer, TypeConstants.XML_ALBUM, inte)[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_63 $$ writeLink(writer, TypeConstants.XML_ALBUM, inte)[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_65 $$ inte = Integer.valueOf(albumCounter++)[ CD ]
Line_60 $$ Integer inte-->Line_65 $$ inte = Integer.valueOf(albumCounter++)[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_65 $$ inte = Integer.valueOf(albumCounter++)[ FD ]
Line_65 $$ inte = Integer.valueOf(albumCounter++)-->Line_65 $$ inte = Integer.valueOf(albumCounter++)[ FD ]
Line_65 $$ inte = Integer.valueOf(albumCounter++)-->Line_65 $$ inte = Integer.valueOf(albumCounter++)[ CD ]
Line_36 $$ int albumCounter = 0-->Line_65 $$ inte = Integer.valueOf(albumCounter++)[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_66 $$ writer.writeStartElement(TypeConstants.XML_ALBUM)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_66 $$ writer.writeStartElement(TypeConstants.XML_ALBUM)[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_67 $$ exportAlbum(writer, a, inte)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_60 $$ Integer inte-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_65 $$ inte = Integer.valueOf(albumCounter++)-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_68 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ CD ]
Line_38 $$ int counter = 0-->Line_68 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_69 $$ albums.put(a.getAid(), inte)[ CD ]
Line_41 $$ final Map<Integer, Integer> albums = new HashMap<Integer, Integer>()-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_60 $$ Integer inte-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_65 $$ inte = Integer.valueOf(albumCounter++)-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_70 $$ if (a.hasCoveritems() && !_break) [ CD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_70 $$ if (a.hasCoveritems() && !_break) [ FD ]
Line_70 $$ if (a.hasCoveritems() && !_break) -->Line_71 $$ final List<CoveritemIf> covers = a.getCoveritems()[ CD ]
Line_71 $$ final List<CoveritemIf> covers = a.getCoveritems()-->Line_71 $$ final List<CoveritemIf> covers = a.getCoveritems()[ CD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_71 $$ final List<CoveritemIf> covers = a.getCoveritems()[ FD ]
Line_70 $$ if (a.hasCoveritems() && !_break) -->Line_72 $$ final Iterator<CoveritemIf> coit = covers.iterator()[ CD ]
Line_72 $$ final Iterator<CoveritemIf> coit = covers.iterator()-->Line_72 $$ final Iterator<CoveritemIf> coit = covers.iterator()[ CD ]
Line_71 $$ final List<CoveritemIf> covers = a.getCoveritems()-->Line_72 $$ final Iterator<CoveritemIf> coit = covers.iterator()[ FD ]
Line_70 $$ if (a.hasCoveritems() && !_break) -->Line_73 $$ while (coit.hasNext() && !_break) [ CD ]
Line_70 $$ if (a.hasCoveritems() && !_break) -->Line_70 $$ if (a.hasCoveritems() && !_break) [ CD ]
Line_72 $$ final Iterator<CoveritemIf> coit = covers.iterator()-->Line_73 $$ while (coit.hasNext() && !_break) [ FD ]
Line_73 $$ while (coit.hasNext() && !_break) -->Line_74 $$ final Integer coveritemId = Integer.valueOf(coveritemCounter++)[ CD ]
Line_74 $$ final Integer coveritemId = Integer.valueOf(coveritemCounter++)-->Line_74 $$ final Integer coveritemId = Integer.valueOf(coveritemCounter++)[ CD ]
Line_37 $$ int coveritemCounter = 0-->Line_74 $$ final Integer coveritemId = Integer.valueOf(coveritemCounter++)[ FD ]
Line_73 $$ while (coit.hasNext() && !_break) -->Line_75 $$ exportCoveritem(writer, zOut, coit.next(), coveritemId)[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_75 $$ exportCoveritem(writer, zOut, coit.next(), coveritemId)[ FD ]
Line_10 $$ final ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(_file))-->Line_75 $$ exportCoveritem(writer, zOut, coit.next(), coveritemId)[ FD ]
Line_74 $$ final Integer coveritemId = Integer.valueOf(coveritemCounter++)-->Line_75 $$ exportCoveritem(writer, zOut, coit.next(), coveritemId)[ FD ]
Line_72 $$ final Iterator<CoveritemIf> coit = covers.iterator()-->Line_75 $$ exportCoveritem(writer, zOut, coit.next(), coveritemId)[ FD ]
Line_73 $$ while (coit.hasNext() && !_break) -->Line_76 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ CD ]
Line_38 $$ int counter = 0-->Line_76 $$ fireStatusEvent(new StatusEvent(this, StatusEventType.NEW_VALUE, ++counter))[ FD ]
Line_61 $$ if (albums.containsKey(a.getAid())) -->Line_79 $$ writer.writeEndElement()[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_79 $$ writer.writeEndElement()[ FD ]
Line_59 $$ if (a != null) -->Line_81 $$ GenericDAO.getEntityManager().close()[ CD ]
Line_52 $$ while (mfit.hasNext() && !_break) -->Line_83 $$ writer.writeEndElement()[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_83 $$ writer.writeEndElement()[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_85 $$ writer.writeEndElement()[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_85 $$ writer.writeEndElement()[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_86 $$ writer.flush()[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_86 $$ writer.flush()[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_87 $$ it.remove()[ CD ]
Line_42 $$ final Iterator<CdIf> it = data.iterator()-->Line_87 $$ it.remove()[ FD ]
Line_43 $$ while (it.hasNext() && !_break) -->Line_88 $$ GenericDAO.getEntityManager().close()[ CD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_91 $$ writer.writeEndElement()[ FD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_92 $$ writer.writeEndDocument()[ FD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_93 $$ writer.flush()[ FD ]
Line_14 $$ final XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter(ost, "UTF-8")-->Line_94 $$ writer.close()[ FD ]
Line_13 $$ final OutputStream ost = new FileOutputStream(xmlFile)-->Line_95 $$ ost.flush()[ FD ]
Line_13 $$ final OutputStream ost = new FileOutputStream(xmlFile)-->Line_96 $$ ost.close()[ FD ]
Line_97 $$ if (_break) -->Line_98 $$ zOut.close()[ CD ]
Line_10 $$ final ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(_file))-->Line_98 $$ zOut.close()[ FD ]
Line_97 $$ if (_break) -->Line_99 $$ _file.delete()[ CD ]
Line_97 $$ if (_break) -->Line_101 $$ zOut.putNextEntry(new ZipEntry("mp3.xml"))[ CD ]
Line_10 $$ final ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(_file))-->Line_101 $$ zOut.putNextEntry(new ZipEntry("mp3.xml"))[ FD ]
Line_97 $$ if (_break) -->Line_102 $$ final InputStream xmlIn = FileUtils.openInputStream(xmlFile)[ CD ]
Line_102 $$ final InputStream xmlIn = FileUtils.openInputStream(xmlFile)-->Line_102 $$ final InputStream xmlIn = FileUtils.openInputStream(xmlFile)[ CD ]
Line_12 $$ final File xmlFile = File.createTempFile("mp3db", ".xml")-->Line_102 $$ final InputStream xmlIn = FileUtils.openInputStream(xmlFile)[ FD ]
Line_97 $$ if (_break) -->Line_103 $$ IOUtils.copy(xmlIn, zOut)[ CD ]
Line_102 $$ final InputStream xmlIn = FileUtils.openInputStream(xmlFile)-->Line_103 $$ IOUtils.copy(xmlIn, zOut)[ FD ]
Line_10 $$ final ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(_file))-->Line_103 $$ IOUtils.copy(xmlIn, zOut)[ FD ]
Line_97 $$ if (_break) -->Line_104 $$ xmlIn.close()[ CD ]
Line_102 $$ final InputStream xmlIn = FileUtils.openInputStream(xmlFile)-->Line_104 $$ xmlIn.close()[ FD ]
Line_97 $$ if (_break) -->Line_105 $$ zOut.close()[ CD ]
Line_10 $$ final ZipOutputStream zOut = new ZipOutputStream(new FileOutputStream(_file))-->Line_105 $$ zOut.close()[ FD ]
Line_12 $$ final File xmlFile = File.createTempFile("mp3db", ".xml")-->Line_107 $$ xmlFile.delete()[ FD ]
Line_110 $$ if (LOG.isDebugEnabled()) -->Line_110 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_110 $$ if (LOG.isDebugEnabled()) -->Line_111 $$ LOG.debug("Error backup database", e)[ CD ]
Line_44 $$ final CdIf cd = it.next()-->Line_47 $$ exportCd(writer, cd, cdId)[ FD ]
Line_45 $$ final Integer cdId = Integer.valueOf(cdCounter++)-->Line_47 $$ exportCd(writer, cd, cdId)[ FD ]
Line_44 $$ final CdIf cd = it.next()-->Line_49 $$ final List<MediafileIf> files = cd.getMediafiles()[ FD ]
Line_49 $$ final List<MediafileIf> files = cd.getMediafiles()-->Line_50 $$ final Iterator<MediafileIf> mfit = files.iterator()[ FD ]
Line_53 $$ mf = mfit.next()-->Line_56 $$ exportMediafile(writer, mf, mfId)[ FD ]
Line_54 $$ final Integer mfId = Integer.valueOf(mediafileCounter++)-->Line_56 $$ exportMediafile(writer, mf, mfId)[ FD ]
Line_53 $$ mf = mfit.next()-->Line_58 $$ final AlbumIf a = mf.getAlbum()[ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_59 $$ if (a != null) [ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_61 $$ if (albums.containsKey(a.getAid())) [ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_62 $$ inte = albums.get(a.getAid())[ FD ]
Line_60 $$ Integer inte-->Line_63 $$ writeLink(writer, TypeConstants.XML_ALBUM, inte)[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_63 $$ writeLink(writer, TypeConstants.XML_ALBUM, inte)[ FD ]
Line_65 $$ inte = Integer.valueOf(albumCounter++)-->Line_63 $$ writeLink(writer, TypeConstants.XML_ALBUM, inte)[ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_60 $$ Integer inte-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_65 $$ inte = Integer.valueOf(albumCounter++)-->Line_67 $$ exportAlbum(writer, a, inte)[ FD ]
Line_60 $$ Integer inte-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_62 $$ inte = albums.get(a.getAid())-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_65 $$ inte = Integer.valueOf(albumCounter++)-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_69 $$ albums.put(a.getAid(), inte)[ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_70 $$ if (a.hasCoveritems() && !_break) [ FD ]
Line_58 $$ final AlbumIf a = mf.getAlbum()-->Line_71 $$ final List<CoveritemIf> covers = a.getCoveritems()[ FD ]
Line_71 $$ final List<CoveritemIf> covers = a.getCoveritems()-->Line_72 $$ final Iterator<CoveritemIf> coit = covers.iterator()[ FD ]
Line_74 $$ final Integer coveritemId = Integer.valueOf(coveritemCounter++)-->Line_75 $$ exportCoveritem(writer, zOut, coit.next(), coveritemId)[ FD ]
