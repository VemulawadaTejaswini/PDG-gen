Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private HashMap<String, GCVote> getVotes(ArrayList<String> waypoints, boolean blnSleepBeforeDownload) [ CD ]
Line_2 $$ private HashMap<String, GCVote> getVotes(ArrayList<String> waypoints, boolean blnSleepBeforeDownload) -->Line_3 $$ if (blnSleepBeforeDownload) [ CD ]
Line_2 $$ private HashMap<String, GCVote> getVotes(ArrayList<String> waypoints, boolean blnSleepBeforeDownload) -->Line_10 $$ final String strWaypoints = this.join(waypoints, ",")[ CD ]
Line_10 $$ final String strWaypoints = this.join(waypoints, ",")-->Line_10 $$ final String strWaypoints = this.join(waypoints, ",")[ CD ]
Line_2 $$ private HashMap<String, GCVote> getVotes(ArrayList<String> waypoints, boolean blnSleepBeforeDownload) -->Line_10 $$ final String strWaypoints = this.join(waypoints, ",")[ FD ]
Line_10 $$ final String strWaypoints = this.join(waypoints, ",")-->Line_12 $$ String strParameters = URLEncoder.encode("waypoints", "UTF-8") + "=" + URLEncoder.encode(strWaypoints, "UTF-8")[ FD ]
Line_13 $$ if (this.mstrUsername.length() > 0) -->Line_14 $$ strParameters += "&" + URLEncoder.encode("userName", "UTF-8") + "=" + URLEncoder.encode(this.mstrUsername, "UTF-8")[ CD ]
Line_12 $$ String strParameters = URLEncoder.encode("waypoints", "UTF-8") + "=" + URLEncoder.encode(strWaypoints, "UTF-8")-->Line_14 $$ strParameters += "&" + URLEncoder.encode("userName", "UTF-8") + "=" + URLEncoder.encode(this.mstrUsername, "UTF-8")[ FD ]
Line_14 $$ strParameters += "&" + URLEncoder.encode("userName", "UTF-8") + "=" + URLEncoder.encode(this.mstrUsername, "UTF-8")-->Line_14 $$ strParameters += "&" + URLEncoder.encode("userName", "UTF-8") + "=" + URLEncoder.encode(this.mstrUsername, "UTF-8")[ FD ]
Line_13 $$ if (this.mstrUsername.length() > 0) -->Line_15 $$ if (this.mstrPassword.length() > 0) [ CD ]
Line_15 $$ if (this.mstrPassword.length() > 0) -->Line_16 $$ strParameters += "&" + URLEncoder.encode("password", "UTF-8") + "=" + URLEncoder.encode(this.mstrPassword, "UTF-8")[ CD ]
Line_12 $$ String strParameters = URLEncoder.encode("waypoints", "UTF-8") + "=" + URLEncoder.encode(strWaypoints, "UTF-8")-->Line_16 $$ strParameters += "&" + URLEncoder.encode("password", "UTF-8") + "=" + URLEncoder.encode(this.mstrPassword, "UTF-8")[ FD ]
Line_14 $$ strParameters += "&" + URLEncoder.encode("userName", "UTF-8") + "=" + URLEncoder.encode(this.mstrUsername, "UTF-8")-->Line_16 $$ strParameters += "&" + URLEncoder.encode("password", "UTF-8") + "=" + URLEncoder.encode(this.mstrPassword, "UTF-8")[ FD ]
Line_16 $$ strParameters += "&" + URLEncoder.encode("password", "UTF-8") + "=" + URLEncoder.encode(this.mstrPassword, "UTF-8")-->Line_16 $$ strParameters += "&" + URLEncoder.encode("password", "UTF-8") + "=" + URLEncoder.encode(this.mstrPassword, "UTF-8")[ FD ]
Line_20 $$ URLConnection conn = url.openConnection()-->Line_20 $$ URLConnection conn = url.openConnection()[ CD ]
Line_19 $$ final URL url = new URL(BASE_URL_GET_VOTE)-->Line_20 $$ URLConnection conn = url.openConnection()[ FD ]
Line_20 $$ URLConnection conn = url.openConnection()-->Line_21 $$ conn.setDoOutput(true)[ FD ]
Line_20 $$ URLConnection conn = url.openConnection()-->Line_22 $$ final OutputStreamWriter osw = new OutputStreamWriter(conn.getOutputStream())[ FD ]
Line_22 $$ final OutputStreamWriter osw = new OutputStreamWriter(conn.getOutputStream())-->Line_23 $$ osw.write(strParameters)[ FD ]
Line_12 $$ String strParameters = URLEncoder.encode("waypoints", "UTF-8") + "=" + URLEncoder.encode(strWaypoints, "UTF-8")-->Line_23 $$ osw.write(strParameters)[ FD ]
Line_14 $$ strParameters += "&" + URLEncoder.encode("userName", "UTF-8") + "=" + URLEncoder.encode(this.mstrUsername, "UTF-8")-->Line_23 $$ osw.write(strParameters)[ FD ]
Line_16 $$ strParameters += "&" + URLEncoder.encode("password", "UTF-8") + "=" + URLEncoder.encode(this.mstrPassword, "UTF-8")-->Line_23 $$ osw.write(strParameters)[ FD ]
Line_22 $$ final OutputStreamWriter osw = new OutputStreamWriter(conn.getOutputStream())-->Line_24 $$ osw.flush()[ FD ]
Line_25 $$ final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance()-->Line_25 $$ final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance()[ CD ]
Line_25 $$ final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance()-->Line_26 $$ saxParserFactory.setValidating(false)[ FD ]
Line_25 $$ final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance()-->Line_27 $$ saxParserFactory.setNamespaceAware(true)[ FD ]
Line_28 $$ final SAXParser saxParser = saxParserFactory.newSAXParser()-->Line_28 $$ final SAXParser saxParser = saxParserFactory.newSAXParser()[ CD ]
Line_25 $$ final SAXParserFactory saxParserFactory = SAXParserFactory.newInstance()-->Line_28 $$ final SAXParser saxParser = saxParserFactory.newSAXParser()[ FD ]
Line_29 $$ final XMLReader xmlReader = saxParser.getXMLReader()-->Line_29 $$ final XMLReader xmlReader = saxParser.getXMLReader()[ CD ]
Line_28 $$ final SAXParser saxParser = saxParserFactory.newSAXParser()-->Line_29 $$ final XMLReader xmlReader = saxParser.getXMLReader()[ FD ]
Line_29 $$ final XMLReader xmlReader = saxParser.getXMLReader()-->Line_31 $$ xmlReader.setContentHandler(gcVoteHandler)[ FD ]
Line_30 $$ final GCVoteHandler gcVoteHandler = new GCVoteHandler()-->Line_31 $$ xmlReader.setContentHandler(gcVoteHandler)[ FD ]
Line_29 $$ final XMLReader xmlReader = saxParser.getXMLReader()-->Line_32 $$ xmlReader.parse(new InputSource(new InputStreamReader(conn.getInputStream())))[ FD ]
Line_20 $$ URLConnection conn = url.openConnection()-->Line_32 $$ xmlReader.parse(new InputSource(new InputStreamReader(conn.getInputStream())))[ FD ]
Line_33 $$ return gcVoteHandler.getVotes()-->Line_33 $$ return gcVoteHandler.getVotes()[ CD ]
Line_30 $$ final GCVoteHandler gcVoteHandler = new GCVoteHandler()-->Line_33 $$ return gcVoteHandler.getVotes()[ FD ]
