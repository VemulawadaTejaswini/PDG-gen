Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static int best(int r, int n, int s) [ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_3 $$ if ((n <= 0) || (r < 0) || (r > n) || (s < 0))[ CD ]
Line_3 $$ if ((n <= 0) || (r < 0) || (r > n) || (s < 0))-->Line_3 $$ return 0[ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_4 $$ int[] rolls = new int[n][ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_2 $$ public static int best(int r, int n, int s) [ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ FD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ CD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ CD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ FD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_5 $$ rolls[i] = d(s)[ CD ]
Line_5 $$ rolls[i] = d(s)-->Line_5 $$ rolls[i] = d(s)[ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_5 $$ rolls[i] = d(s)[ FD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_6 $$ boolean found[ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_7 $$ do [ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_2 $$ public static int best(int r, int n, int s) [ CD ]
Line_7 $$ do -->Line_8 $$ found = false[ CD ]
Line_8 $$ found = false-->Line_8 $$ found = false[ FD ]
Line_6 $$ boolean found-->Line_8 $$ found = false[ FD ]
Line_7 $$ do -->Line_9 $$ for (int x = 0; x < n - 1; x++) [ CD ]
Line_7 $$ do -->Line_7 $$ do [ CD ]
Line_9 $$ for (int x = 0; x < n - 1; x++) -->Line_9 $$ for (int x = 0; x < n - 1; x++) [ CD ]
Line_9 $$ for (int x = 0; x < n - 1; x++) -->Line_9 $$ for (int x = 0; x < n - 1; x++) [ CD ]
Line_9 $$ for (int x = 0; x < n - 1; x++) -->Line_9 $$ for (int x = 0; x < n - 1; x++) [ FD ]
Line_9 $$ for (int x = 0; x < n - 1; x++) -->Line_10 $$ if (rolls[x] < rolls[x + 1]) [ CD ]
Line_10 $$ if (rolls[x] < rolls[x + 1]) -->Line_11 $$ int t = rolls[x][ CD ]
Line_10 $$ if (rolls[x] < rolls[x + 1]) -->Line_12 $$ rolls[x] = rolls[x + 1][ CD ]
Line_10 $$ if (rolls[x] < rolls[x + 1]) -->Line_13 $$ rolls[x + 1] = t[ CD ]
Line_11 $$ int t = rolls[x]-->Line_13 $$ rolls[x + 1] = t[ FD ]
Line_10 $$ if (rolls[x] < rolls[x + 1]) -->Line_14 $$ found = true[ CD ]
Line_14 $$ found = true-->Line_14 $$ found = true[ FD ]
Line_8 $$ found = false-->Line_14 $$ found = true[ FD ]
Line_6 $$ boolean found-->Line_14 $$ found = true[ FD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_18 $$ int sum = 0[ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ CD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_2 $$ public static int best(int r, int n, int s) [ CD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ FD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ FD ]
Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i]-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ CD ]
Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i]-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ CD ]
Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i]-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ FD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ FD ]
Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i]-->Line_19 $$ sum += rolls[i][ CD ]
Line_19 $$ sum += rolls[i]-->Line_19 $$ sum += rolls[i][ FD ]
Line_18 $$ int sum = 0-->Line_19 $$ sum += rolls[i][ FD ]
Line_2 $$ public static int best(int r, int n, int s) -->Line_20 $$ return sum[ CD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ FD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ FD ]
Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)-->Line_5 $$ for (int i = 0; i < n; i++) rolls[i] = d(s)[ FD ]
Line_9 $$ for (int x = 0; x < n - 1; x++) -->Line_9 $$ for (int x = 0; x < n - 1; x++) [ FD ]
Line_9 $$ for (int x = 0; x < n - 1; x++) -->Line_9 $$ for (int x = 0; x < n - 1; x++) [ FD ]
Line_9 $$ for (int x = 0; x < n - 1; x++) -->Line_9 $$ for (int x = 0; x < n - 1; x++) [ FD ]
Line_11 $$ int t = rolls[x]-->Line_13 $$ rolls[x + 1] = t[ FD ]
Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i]-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ FD ]
Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i]-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ FD ]
Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i]-->Line_19 $$ for (int i = 0; i < r; i++) sum += rolls[i][ FD ]
