Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException [ CD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_3 $$ byte[] hash[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_6 $$ md.update(userName.getBytes("UTF-8"))[ FD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_6 $$ md.update(userName.getBytes("UTF-8"))[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_7 $$ md.update(":".getBytes("UTF-8"))[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_8 $$ md.update(realm.getBytes("UTF-8"))[ FD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_8 $$ md.update(realm.getBytes("UTF-8"))[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_9 $$ md.update(":".getBytes("UTF-8"))[ FD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_10 $$ md.update(password.getBytes("UTF-8"))[ FD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_10 $$ md.update(password.getBytes("UTF-8"))[ FD ]
Line_3 $$ byte[] hash-->Line_11 $$ hash = md.digest()[ FD ]
Line_11 $$ hash = md.digest()-->Line_11 $$ hash = md.digest()[ FD ]
Line_11 $$ hash = md.digest()-->Line_11 $$ hash = md.digest()[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_11 $$ hash = md.digest()[ FD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_12 $$ if ("md5-sess".equals(algorithm)) [ FD ]
Line_12 $$ if ("md5-sess".equals(algorithm)) -->Line_12 $$ if ("md5-sess".equals(algorithm)) [ CD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_12 $$ if ("md5-sess".equals(algorithm)) [ FD ]
Line_12 $$ if ("md5-sess".equals(algorithm)) -->Line_13 $$ md.update(hash)[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_13 $$ md.update(hash)[ FD ]
Line_3 $$ byte[] hash-->Line_13 $$ md.update(hash)[ FD ]
Line_11 $$ hash = md.digest()-->Line_13 $$ md.update(hash)[ FD ]
Line_12 $$ if ("md5-sess".equals(algorithm)) -->Line_14 $$ md.update(":".getBytes("UTF-8"))[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_14 $$ md.update(":".getBytes("UTF-8"))[ FD ]
Line_12 $$ if ("md5-sess".equals(algorithm)) -->Line_15 $$ md.update(nonce.getBytes("UTF-8"))[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_15 $$ md.update(nonce.getBytes("UTF-8"))[ FD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_15 $$ md.update(nonce.getBytes("UTF-8"))[ FD ]
Line_12 $$ if ("md5-sess".equals(algorithm)) -->Line_16 $$ md.update(":".getBytes("UTF-8"))[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_16 $$ md.update(":".getBytes("UTF-8"))[ FD ]
Line_12 $$ if ("md5-sess".equals(algorithm)) -->Line_17 $$ md.update(clientNonce.getBytes("UTF-8"))[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_17 $$ md.update(clientNonce.getBytes("UTF-8"))[ FD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_17 $$ md.update(clientNonce.getBytes("UTF-8"))[ FD ]
Line_12 $$ if ("md5-sess".equals(algorithm)) -->Line_18 $$ hash = md.digest()[ CD ]
Line_3 $$ byte[] hash-->Line_18 $$ hash = md.digest()[ FD ]
Line_11 $$ hash = md.digest()-->Line_18 $$ hash = md.digest()[ FD ]
Line_18 $$ hash = md.digest()-->Line_18 $$ hash = md.digest()[ FD ]
Line_18 $$ hash = md.digest()-->Line_18 $$ hash = md.digest()[ CD ]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5")-->Line_18 $$ hash = md.digest()[ FD ]
Line_2 $$ char[] DigestCalcHA1(String algorithm, String userName, String realm, String password, String nonce, String clientNonce) throws SaslException -->Line_25 $$ return convertToHex(hash)[ CD ]
Line_25 $$ return convertToHex(hash)-->Line_25 $$ return convertToHex(hash)[ CD ]
Line_3 $$ byte[] hash-->Line_25 $$ return convertToHex(hash)[ FD ]
Line_11 $$ hash = md.digest()-->Line_25 $$ return convertToHex(hash)[ FD ]
Line_18 $$ hash = md.digest()-->Line_25 $$ return convertToHex(hash)[ FD ]
