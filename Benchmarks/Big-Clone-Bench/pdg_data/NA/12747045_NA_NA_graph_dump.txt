Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void init() [ CD ]
Line_2 $$ public void init() -->Line_7 $$ Container c = getContentPane()[ CD ]
Line_7 $$ Container c = getContentPane()-->Line_7 $$ Container c = getContentPane()[ CD ]
Line_2 $$ public void init() -->Line_8 $$ c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS))[ CD ]
Line_7 $$ Container c = getContentPane()-->Line_8 $$ c.setLayout(new BoxLayout(c, BoxLayout.Y_AXIS))[ FD ]
Line_2 $$ public void init() -->Line_9 $$ String[] lines = getAppletInfo().split("\n")[ CD ]
Line_9 $$ String[] lines = getAppletInfo().split("\n")-->Line_9 $$ String[] lines = getAppletInfo().split("\n")[ CD ]
Line_2 $$ public void init() -->Line_10 $$ for (int i = 0; i < lines.length; i++) [ CD ]
Line_2 $$ public void init() -->Line_2 $$ public void init() [ CD ]
Line_10 $$ for (int i = 0; i < lines.length; i++) -->Line_10 $$ for (int i = 0; i < lines.length; i++) [ CD ]
Line_10 $$ for (int i = 0; i < lines.length; i++) -->Line_10 $$ for (int i = 0; i < lines.length; i++) [ CD ]
Line_10 $$ for (int i = 0; i < lines.length; i++) -->Line_10 $$ for (int i = 0; i < lines.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < lines.length; i++) -->Line_11 $$ c.add(new JLabel(lines[i]))[ CD ]
Line_7 $$ Container c = getContentPane()-->Line_11 $$ c.add(new JLabel(lines[i]))[ FD ]
Line_2 $$ public void init() -->Line_13 $$ new Worker() [ CD ]
Line_13 $$ new Worker() -->Line_15 $$ Object result[ CD ]
Line_17 $$ if (getParameter("data") != null && getParameter("data").length() > 0) -->Line_18 $$ NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), new StringReader(getParameter("data")))[ CD ]
Line_17 $$ if (getParameter("data") != null && getParameter("data").length() > 0) -->Line_19 $$ result = domi.readObject(0)[ CD ]
Line_15 $$ Object result-->Line_19 $$ result = domi.readObject(0)[ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_19 $$ result = domi.readObject(0)[ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_19 $$ result = domi.readObject(0)[ CD ]
Line_18 $$ NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), new StringReader(getParameter("data")))-->Line_19 $$ result = domi.readObject(0)[ FD ]
Line_17 $$ if (getParameter("data") != null && getParameter("data").length() > 0) -->Line_20 $$ if (getParameter("datafile") != null) [ CD ]
Line_20 $$ if (getParameter("datafile") != null) -->Line_21 $$ InputStream in = null[ CD ]
Line_21 $$ InputStream in = null-->Line_24 $$ in = url.openConnection().getInputStream()[ FD ]
Line_24 $$ in = url.openConnection().getInputStream()-->Line_24 $$ in = url.openConnection().getInputStream()[ FD ]
Line_24 $$ in = url.openConnection().getInputStream()-->Line_24 $$ in = url.openConnection().getInputStream()[ CD ]
Line_23 $$ URL url = new URL(getDocumentBase(), getParameter("datafile"))-->Line_24 $$ in = url.openConnection().getInputStream()[ FD ]
Line_15 $$ Object result-->Line_26 $$ result = domi.readObject(0)[ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_26 $$ result = domi.readObject(0)[ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_26 $$ result = domi.readObject(0)[ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_26 $$ result = domi.readObject(0)[ CD ]
Line_18 $$ NanoXMLDOMInput domi = new NanoXMLDOMInput(new UMLFigureFactory(), new StringReader(getParameter("data")))-->Line_26 $$ result = domi.readObject(0)[ FD ]
Line_21 $$ InputStream in = null-->Line_28 $$ if (in != null)[ FD ]
Line_24 $$ in = url.openConnection().getInputStream()-->Line_28 $$ if (in != null)[ FD ]
Line_28 $$ if (in != null)-->Line_28 $$ in.close()[ CD ]
Line_21 $$ InputStream in = null-->Line_28 $$ in.close()[ FD ]
Line_24 $$ in = url.openConnection().getInputStream()-->Line_28 $$ in.close()[ FD ]
Line_20 $$ if (getParameter("datafile") != null) -->Line_31 $$ result = null[ CD ]
Line_15 $$ Object result-->Line_31 $$ result = null[ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_31 $$ result = null[ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_31 $$ result = null[ FD ]
Line_31 $$ result = null-->Line_31 $$ result = null[ FD ]
Line_15 $$ Object result-->Line_34 $$ result = t[ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_34 $$ result = t[ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_34 $$ result = t[ FD ]
Line_31 $$ result = null-->Line_34 $$ result = t[ FD ]
Line_34 $$ result = t-->Line_34 $$ result = t[ FD ]
Line_13 $$ new Worker() -->Line_36 $$ return result[ CD ]
Line_13 $$ new Worker() -->Line_39 $$ Container c = getContentPane()[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_39 $$ Container c = getContentPane()[ CD ]
Line_13 $$ new Worker() -->Line_40 $$ c.setLayout(new BorderLayout())[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_40 $$ c.setLayout(new BorderLayout())[ FD ]
Line_7 $$ Container c = getContentPane()-->Line_40 $$ c.setLayout(new BorderLayout())[ FD ]
Line_13 $$ new Worker() -->Line_41 $$ c.removeAll()[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_41 $$ c.removeAll()[ FD ]
Line_7 $$ Container c = getContentPane()-->Line_41 $$ c.removeAll()[ FD ]
Line_13 $$ new Worker() -->Line_42 $$ initComponents()[ CD ]
Line_13 $$ new Worker() -->Line_43 $$ if (result != null) [ CD ]
Line_13 $$ new Worker() -->Line_43 $$ if (result != null) [ FD ]
Line_15 $$ Object result-->Line_43 $$ if (result != null) [ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_43 $$ if (result != null) [ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_43 $$ if (result != null) [ FD ]
Line_31 $$ result = null-->Line_43 $$ if (result != null) [ FD ]
Line_34 $$ result = t-->Line_43 $$ if (result != null) [ FD ]
Line_43 $$ if (result != null) -->Line_44 $$ if (result instanceof Drawing) [ CD ]
Line_13 $$ new Worker() -->Line_44 $$ if (result instanceof Drawing) [ FD ]
Line_15 $$ Object result-->Line_44 $$ if (result instanceof Drawing) [ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_44 $$ if (result instanceof Drawing) [ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_44 $$ if (result instanceof Drawing) [ FD ]
Line_31 $$ result = null-->Line_44 $$ if (result instanceof Drawing) [ FD ]
Line_34 $$ result = t-->Line_44 $$ if (result instanceof Drawing) [ FD ]
Line_44 $$ if (result instanceof Drawing) -->Line_45 $$ setDrawing((Drawing) result)[ CD ]
Line_44 $$ if (result instanceof Drawing) -->Line_46 $$ if (result instanceof Throwable) [ CD ]
Line_13 $$ new Worker() -->Line_46 $$ if (result instanceof Throwable) [ FD ]
Line_15 $$ Object result-->Line_46 $$ if (result instanceof Throwable) [ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_46 $$ if (result instanceof Throwable) [ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_46 $$ if (result instanceof Throwable) [ FD ]
Line_31 $$ result = null-->Line_46 $$ if (result instanceof Throwable) [ FD ]
Line_34 $$ result = t-->Line_46 $$ if (result instanceof Throwable) [ FD ]
Line_46 $$ if (result instanceof Throwable) -->Line_47 $$ getDrawing().add(new TextFigure(result.toString()))[ CD ]
Line_13 $$ new Worker() -->Line_47 $$ getDrawing().add(new TextFigure(result.toString()))[ FD ]
Line_15 $$ Object result-->Line_47 $$ getDrawing().add(new TextFigure(result.toString()))[ FD ]
Line_19 $$ result = domi.readObject(0)-->Line_47 $$ getDrawing().add(new TextFigure(result.toString()))[ FD ]
Line_26 $$ result = domi.readObject(0)-->Line_47 $$ getDrawing().add(new TextFigure(result.toString()))[ FD ]
Line_31 $$ result = null-->Line_47 $$ getDrawing().add(new TextFigure(result.toString()))[ FD ]
Line_34 $$ result = t-->Line_47 $$ getDrawing().add(new TextFigure(result.toString()))[ FD ]
Line_46 $$ if (result instanceof Throwable) -->Line_48 $$ ((Throwable) result).printStackTrace()[ CD ]
Line_13 $$ new Worker() -->Line_51 $$ boolean isLiveConnect[ CD ]
Line_51 $$ boolean isLiveConnect-->Line_54 $$ isLiveConnect = true[ FD ]
Line_54 $$ isLiveConnect = true-->Line_54 $$ isLiveConnect = true[ FD ]
Line_51 $$ boolean isLiveConnect-->Line_56 $$ isLiveConnect = false[ FD ]
Line_54 $$ isLiveConnect = true-->Line_56 $$ isLiveConnect = false[ FD ]
Line_56 $$ isLiveConnect = false-->Line_56 $$ isLiveConnect = false[ FD ]
Line_13 $$ new Worker() -->Line_58 $$ loadButton.setEnabled(isLiveConnect && getParameter("dataread") != null)[ CD ]
Line_13 $$ new Worker() -->Line_59 $$ saveButton.setEnabled(isLiveConnect && getParameter("datawrite") != null)[ CD ]
Line_13 $$ new Worker() -->Line_60 $$ if (isLiveConnect) [ CD ]
Line_60 $$ if (isLiveConnect) -->Line_61 $$ String methodName = getParameter("dataread")[ CD ]
Line_61 $$ String methodName = getParameter("dataread")-->Line_61 $$ String methodName = getParameter("dataread")[ CD ]
Line_60 $$ if (isLiveConnect) -->Line_62 $$ if (methodName.indexOf('(') > 0) [ CD ]
Line_61 $$ String methodName = getParameter("dataread")-->Line_62 $$ if (methodName.indexOf('(') > 0) [ FD ]
Line_62 $$ if (methodName.indexOf('(') > 0) -->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ CD ]
Line_61 $$ String methodName = getParameter("dataread")-->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ FD ]
Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)-->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ FD ]
Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)-->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ CD ]
Line_61 $$ String methodName = getParameter("dataread")-->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ FD ]
Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)-->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ FD ]
Line_61 $$ String methodName = getParameter("dataread")-->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ FD ]
Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)-->Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)[ FD ]
Line_60 $$ if (isLiveConnect) -->Line_65 $$ JSObject win = JSObject.getWindow(UMLLiveConnectApplet.this)[ CD ]
Line_65 $$ JSObject win = JSObject.getWindow(UMLLiveConnectApplet.this)-->Line_65 $$ JSObject win = JSObject.getWindow(UMLLiveConnectApplet.this)[ CD ]
Line_60 $$ if (isLiveConnect) -->Line_66 $$ Object data = win.call(methodName, new Object[0])[ CD ]
Line_66 $$ Object data = win.call(methodName, new Object[0])-->Line_66 $$ Object data = win.call(methodName, new Object[0])[ CD ]
Line_65 $$ JSObject win = JSObject.getWindow(UMLLiveConnectApplet.this)-->Line_66 $$ Object data = win.call(methodName, new Object[0])[ FD ]
Line_61 $$ String methodName = getParameter("dataread")-->Line_66 $$ Object data = win.call(methodName, new Object[0])[ FD ]
Line_63 $$ methodName = methodName.substring(0, methodName.indexOf('(') - 1)-->Line_66 $$ Object data = win.call(methodName, new Object[0])[ FD ]
Line_60 $$ if (isLiveConnect) -->Line_67 $$ if (data instanceof String) [ CD ]
Line_66 $$ Object data = win.call(methodName, new Object[0])-->Line_67 $$ if (data instanceof String) [ FD ]
Line_67 $$ if (data instanceof String) -->Line_68 $$ setData((String) data)[ CD ]
Line_13 $$ new Worker() -->Line_71 $$ c.validate()[ CD ]
Line_39 $$ Container c = getContentPane()-->Line_71 $$ c.validate()[ FD ]
Line_7 $$ Container c = getContentPane()-->Line_71 $$ c.validate()[ FD ]
Line_10 $$ for (int i = 0; i < lines.length; i++) -->Line_10 $$ for (int i = 0; i < lines.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < lines.length; i++) -->Line_10 $$ for (int i = 0; i < lines.length; i++) [ FD ]
Line_10 $$ for (int i = 0; i < lines.length; i++) -->Line_10 $$ for (int i = 0; i < lines.length; i++) [ FD ]
