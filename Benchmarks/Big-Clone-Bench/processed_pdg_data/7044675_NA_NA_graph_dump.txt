Line_2 $$ public Object run() --> Line_3 $$ List correctUsers = (List) JsonPath.query("select * from ? where name=?", usersTable(), username) [CD]
Line_2 $$ public Object run() --> Line_4 $$ if (correctUsers.size() == 0) [CD]
Line_3 $$ List correctUsers = (List) JsonPath.query("select * from ? where name=?", usersTable(), username) --> Line_4 $$ if (correctUsers.size() == 0) [FD]
Line_4 $$ if (correctUsers.size() == 0) --> Line_5 $$ return new LoginException("user " + username + " not found") [CD]
Line_2 $$ public Object run() --> Line_7 $$ Persistable userObject = (Persistable) correctUsers.get(0) [CD]
Line_3 $$ List correctUsers = (List) JsonPath.query("select * from ? where name=?", usersTable(), username) --> Line_7 $$ Persistable userObject = (Persistable) correctUsers.get(0) [FD]
Line_2 $$ public Object run() --> Line_8 $$ boolean alreadyHashed = false [CD]
Line_2 $$ public Object run() --> Line_9 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD)) [CD]
Line_7 $$ Persistable userObject = (Persistable) correctUsers.get(0) --> Line_9 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD)) [FD]
Line_2 $$ public Object run() --> Line_10 $$ if (!passwordMatch) [CD]
Line_9 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD)) --> Line_10 $$ if (!passwordMatch) [FD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance("SHA") --> Line_13 $$ md.update(((String) userObject.get(PASSWORD_FIELD)).getBytes()) [FD]
Line_7 $$ Persistable userObject = (Persistable) correctUsers.get(0) --> Line_13 $$ md.update(((String) userObject.get(PASSWORD_FIELD)).getBytes()) [FD]
Line_9 $$ boolean passwordMatch = password.equals(userObject.get(PASSWORD_FIELD)) --> Line_14 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest()))) [FD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance("SHA") --> Line_14 $$ passwordMatch = password.equals(new String(new Base64().encode(md.digest()))) [FD]
Line_10 $$ if (!passwordMatch) --> Line_18 $$ alreadyHashed = true [CD]
Line_8 $$ boolean alreadyHashed = false --> Line_18 $$ alreadyHashed = true [FD]
Line_2 $$ public Object run() --> Line_20 $$ if (passwordMatch) [CD]
Line_20 $$ if (passwordMatch) --> Line_21 $$ Logger.getLogger(User.class.toString()).info("User " + username + " has been authenticated") [CD]
Line_20 $$ if (passwordMatch) --> Line_22 $$ User user = (User) userObject [CD]
Line_24 $$ if (alreadyHashed) --> Line_25 $$ MessageDigest md = MessageDigest.getInstance("SHA") [CD]
Line_24 $$ if (alreadyHashed) --> Line_26 $$ md.update(password.getBytes()) [CD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance("SHA") --> Line_26 $$ md.update(password.getBytes()) [FD]
Line_24 $$ if (alreadyHashed) --> Line_27 $$ user.currentTicket = new String(new Base64().encode(md.digest())) [CD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance("SHA") --> Line_27 $$ user.currentTicket = new String(new Base64().encode(md.digest())) [FD]
Line_20 $$ if (passwordMatch) --> Line_32 $$ return user [CD]
Line_20 $$ if (passwordMatch) --> Line_34 $$ Logger.getLogger(User.class.toString()).info("The password was incorrect for " + username) [CD]
Line_20 $$ if (passwordMatch) --> Line_35 $$ return new LoginException("The password was incorrect for user " + username + ". ") [CD]
