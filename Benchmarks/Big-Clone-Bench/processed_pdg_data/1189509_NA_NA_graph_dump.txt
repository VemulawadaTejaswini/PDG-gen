Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_3 $$ long start1 = System.currentTimeMillis() [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_4 $$ File originalFile = File.createTempFile("RoundTripTest", "testRoundTrip_1") [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_5 $$ FileOutputStream fos = new FileOutputStream(originalFile) [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_6 $$ IOUtils.copy(getClass().getResourceAsStream(resource), fos) [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_6 $$ IOUtils.copy(getClass().getResourceAsStream(resource), fos) [FD]
Line_5 $$ FileOutputStream fos = new FileOutputStream(originalFile) --> Line_6 $$ IOUtils.copy(getClass().getResourceAsStream(resource), fos) [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_7 $$ fos.close() [CD]
Line_5 $$ FileOutputStream fos = new FileOutputStream(originalFile) --> Line_7 $$ fos.close() [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_8 $$ long start2 = System.currentTimeMillis() [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_9 $$ IsoFile isoFile = new IsoFile(new FileInputStream(originalFile).getChannel()) [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_10 $$ long start3 = System.currentTimeMillis() [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_12 $$ WritableByteChannel wbc = Channels.newChannel(baos) [CD]
Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_12 $$ WritableByteChannel wbc = Channels.newChannel(baos) [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_13 $$ long start4 = System.currentTimeMillis() [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_14 $$ Walk.through(isoFile) [CD]
Line_9 $$ IsoFile isoFile = new IsoFile(new FileInputStream(originalFile).getChannel()) --> Line_14 $$ Walk.through(isoFile) [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_15 $$ long start5 = System.currentTimeMillis() [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_16 $$ isoFile.getBox(wbc) [CD]
Line_9 $$ IsoFile isoFile = new IsoFile(new FileInputStream(originalFile).getChannel()) --> Line_16 $$ isoFile.getBox(wbc) [FD]
Line_12 $$ WritableByteChannel wbc = Channels.newChannel(baos) --> Line_16 $$ isoFile.getBox(wbc) [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_17 $$ wbc.close() [CD]
Line_12 $$ WritableByteChannel wbc = Channels.newChannel(baos) --> Line_17 $$ wbc.close() [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_18 $$ long start6 = System.currentTimeMillis() [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_19 $$ System.err.println("Preparing tmp copy took: " + (start2 - start1) + "ms") [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_20 $$ System.err.println("Parsing took           : " + (start3 - start2) + "ms") [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_21 $$ System.err.println("Writing took           : " + (start6 - start3) + "ms") [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_22 $$ System.err.println("Walking took           : " + (start5 - start4) + "ms") [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_23 $$ byte[] a = IOUtils.toByteArray(getClass().getResourceAsStream(resource)) [CD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_23 $$ byte[] a = IOUtils.toByteArray(getClass().getResourceAsStream(resource)) [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_24 $$ byte[] b = baos.toByteArray() [CD]
Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_24 $$ byte[] b = baos.toByteArray() [FD]
Line_2 $$ public void testRoundTrip_1(String resource) throws Exception --> Line_25 $$ Assert.assertArrayEquals(a, b) [CD]
Line_23 $$ byte[] a = IOUtils.toByteArray(getClass().getResourceAsStream(resource)) --> Line_25 $$ Assert.assertArrayEquals(a, b) [FD]
Line_24 $$ byte[] b = baos.toByteArray() --> Line_25 $$ Assert.assertArrayEquals(a, b) [FD]
