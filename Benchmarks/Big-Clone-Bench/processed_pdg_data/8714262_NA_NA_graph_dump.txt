Line_2 $$ public void readBooklist(String filename) --> Line_3 $$ Reader input = null [CD]
Line_2 $$ public void readBooklist(String filename) --> Line_5 $$ if (filename.startsWith("http:")) [FD]
Line_5 $$ if (filename.startsWith("http:")) --> Line_6 $$ URL url = new URL(filename) [CD]
Line_5 $$ if (filename.startsWith("http:")) --> Line_7 $$ URLConnection conn = url.openConnection() [CD]
Line_6 $$ URL url = new URL(filename) --> Line_7 $$ URLConnection conn = url.openConnection() [FD]
Line_5 $$ if (filename.startsWith("http:")) --> Line_8 $$ input = new InputStreamReader(conn.getInputStream()) [CD]
Line_3 $$ Reader input = null --> Line_8 $$ input = new InputStreamReader(conn.getInputStream()) [FD]
Line_7 $$ URLConnection conn = url.openConnection() --> Line_8 $$ input = new InputStreamReader(conn.getInputStream()) [FD]
Line_5 $$ if (filename.startsWith("http:")) --> Line_10 $$ String fileNameAll = filename [CD]
Line_10 $$ String fileNameAll = filename --> Line_12 $$ fileNameAll = new File(filename).getCanonicalPath() [FD]
Line_10 $$ String fileNameAll = filename --> Line_14 $$ fileNameAll = new File(filename).getAbsolutePath() [FD]
Line_12 $$ fileNameAll = new File(filename).getCanonicalPath() --> Line_14 $$ fileNameAll = new File(filename).getAbsolutePath() [FD]
Line_5 $$ if (filename.startsWith("http:")) --> Line_16 $$ input = new FileReader(new File(fileNameAll)) [CD]
Line_3 $$ Reader input = null --> Line_16 $$ input = new FileReader(new File(fileNameAll)) [FD]
Line_8 $$ input = new InputStreamReader(conn.getInputStream()) --> Line_16 $$ input = new FileReader(new File(fileNameAll)) [FD]
Line_19 $$ String line --> Line_21 $$ while ((line = reader.readLine()) != null) [FD]
Line_18 $$ BufferedReader reader = new BufferedReader(input) --> Line_21 $$ while ((line = reader.readLine()) != null) [FD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_22 $$ if (shuttingDown) [CD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_23 $$ String fields[] = line.split("\\|") [CD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_23 $$ String fields[] = line.split("\\|") [FD]
Line_19 $$ String line --> Line_23 $$ String fields[] = line.split("\\|") [FD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_24 $$ Map<String, String> valuesToAdd = new LinkedHashMap<String, String>() [CD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_25 $$ valuesToAdd.put("fund_code_facet", fields[11]) [CD]
Line_24 $$ Map<String, String> valuesToAdd = new LinkedHashMap<String, String>() --> Line_25 $$ valuesToAdd.put("fund_code_facet", fields[11]) [FD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_26 $$ valuesToAdd.put("date_received_facet", fields[0]) [CD]
Line_24 $$ Map<String, String> valuesToAdd = new LinkedHashMap<String, String>() --> Line_26 $$ valuesToAdd.put("date_received_facet", fields[0]) [FD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_27 $$ DateFormat format = new SimpleDateFormat("yyyyMMdd") [CD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_28 $$ Date dateReceived = format.parse(fields[0], new ParsePosition(0)) [CD]
Line_27 $$ DateFormat format = new SimpleDateFormat("yyyyMMdd") --> Line_28 $$ Date dateReceived = format.parse(fields[0], new ParsePosition(0)) [FD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_29 $$ if (dateReceived.after(today)) [CD]
Line_28 $$ Date dateReceived = format.parse(fields[0], new ParsePosition(0)) --> Line_29 $$ if (dateReceived.after(today)) [FD]
Line_20 $$ Date today = new Date() --> Line_29 $$ if (dateReceived.after(today)) [FD]
Line_21 $$ while ((line = reader.readLine()) != null) --> Line_30 $$ String docID = "u" + fields[9] [CD]
Line_30 $$ String docID = "u" + fields[9] --> Line_32 $$ Map<String, Object> docMap = getDocumentMap(docID) [FD]
Line_32 $$ Map<String, Object> docMap = getDocumentMap(docID) --> Line_33 $$ if (docMap != null) [FD]
Line_33 $$ if (docMap != null) --> Line_34 $$ addNewDataToRecord(docMap, valuesToAdd) [CD]
Line_32 $$ Map<String, Object> docMap = getDocumentMap(docID) --> Line_34 $$ addNewDataToRecord(docMap, valuesToAdd) [FD]
Line_24 $$ Map<String, String> valuesToAdd = new LinkedHashMap<String, String>() --> Line_34 $$ addNewDataToRecord(docMap, valuesToAdd) [FD]
Line_33 $$ if (docMap != null) --> Line_35 $$ documentCache.put(docID, docMap) [CD]
Line_30 $$ String docID = "u" + fields[9] --> Line_35 $$ documentCache.put(docID, docMap) [FD]
Line_32 $$ Map<String, Object> docMap = getDocumentMap(docID) --> Line_35 $$ documentCache.put(docID, docMap) [FD]
Line_33 $$ if (docMap != null) --> Line_36 $$ if (doUpdate && docMap != null && docMap.size() != 0) [CD]
Line_32 $$ Map<String, Object> docMap = getDocumentMap(docID) --> Line_36 $$ if (doUpdate && docMap != null && docMap.size() != 0) [FD]
Line_36 $$ if (doUpdate && docMap != null && docMap.size() != 0) --> Line_37 $$ update(docMap) [CD]
Line_32 $$ Map<String, Object> docMap = getDocumentMap(docID) --> Line_37 $$ update(docMap) [FD]
Line_41 $$ if (e.getLevel() == SolrMarcIndexerException.IGNORE) --> Line_42 $$ logger.error("Indexing routine says record " + docID + " should be ignored") [CD]
Line_41 $$ if (e.getLevel() == SolrMarcIndexerException.IGNORE) --> Line_43 $$ if (e.getLevel() == SolrMarcIndexerException.DELETE) [CD]
Line_43 $$ if (e.getLevel() == SolrMarcIndexerException.DELETE) --> Line_44 $$ logger.error("Indexing routine says record " + docID + " should be deleted") [CD]
Line_46 $$ if (e.getLevel() == SolrMarcIndexerException.EXIT) --> Line_47 $$ logger.error("Indexing routine says processing should be terminated by record " + docID) [CD]
