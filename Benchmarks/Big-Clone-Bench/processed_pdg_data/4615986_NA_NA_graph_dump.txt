Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_3 $$ PreparedStatement ps = null [CD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_5 $$ log.debug("db connect - " + db_.getClass().getName()) [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_6 $$ String seqName = DefinitionService.getString(parameters, "sequence_name", null) [FD]
Line_6 $$ String seqName = DefinitionService.getString(parameters, "sequence_name", null) --> Line_7 $$ if (seqName == null) [FD]
Line_7 $$ if (seqName == null) --> Line_8 $$ String errorString = "Name of sequnce not found" [CD]
Line_7 $$ if (seqName == null) --> Line_9 $$ log.error(errorString) [CD]
Line_8 $$ String errorString = "Name of sequnce not found" --> Line_9 $$ log.error(errorString) [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_12 $$ String tableName = DefinitionService.getString(parameters, "name_table", null) [FD]
Line_12 $$ String tableName = DefinitionService.getString(parameters, "name_table", null) --> Line_13 $$ if (tableName == null) [FD]
Line_13 $$ if (tableName == null) --> Line_15 $$ log.error(errorString) [CD]
Line_8 $$ String errorString = "Name of sequnce not found" --> Line_15 $$ log.error(errorString) [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_18 $$ String columnName = DefinitionService.getString(parameters, "name_pk_field", null) [FD]
Line_18 $$ String columnName = DefinitionService.getString(parameters, "name_pk_field", null) --> Line_19 $$ if (columnName == null) [FD]
Line_19 $$ if (columnName == null) --> Line_21 $$ log.error(errorString) [CD]
Line_8 $$ String errorString = "Name of sequnce not found" --> Line_21 $$ log.error(errorString) [FD]
Line_24 $$ CustomSequenceType seqSite = new CustomSequenceType() --> Line_25 $$ seqSite.setSequenceName(seqName) [FD]
Line_6 $$ String seqName = DefinitionService.getString(parameters, "sequence_name", null) --> Line_25 $$ seqSite.setSequenceName(seqName) [FD]
Line_24 $$ CustomSequenceType seqSite = new CustomSequenceType() --> Line_26 $$ seqSite.setTableName(tableName) [FD]
Line_12 $$ String tableName = DefinitionService.getString(parameters, "name_table", null) --> Line_26 $$ seqSite.setTableName(tableName) [FD]
Line_24 $$ CustomSequenceType seqSite = new CustomSequenceType() --> Line_27 $$ seqSite.setColumnName(columnName) [FD]
Line_18 $$ String columnName = DefinitionService.getString(parameters, "name_pk_field", null) --> Line_27 $$ seqSite.setColumnName(columnName) [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_28 $$ long seqValue = db_.getSequenceNextValue(seqSite) [FD]
Line_24 $$ CustomSequenceType seqSite = new CustomSequenceType() --> Line_28 $$ long seqValue = db_.getSequenceNextValue(seqSite) [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_29 $$ String valueColumnName = DefinitionService.getString(parameters, "name_value_field", null) [FD]
Line_18 $$ String columnName = DefinitionService.getString(parameters, "name_pk_field", null) --> Line_30 $$ if (columnName == null) [FD]
Line_30 $$ if (columnName == null) --> Line_32 $$ log.error(errorString) [CD]
Line_8 $$ String errorString = "Name of sequnce not found" --> Line_32 $$ log.error(errorString) [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_35 $$ String insertValue = DefinitionService.getString(parameters, "insert_value", null) [FD]
Line_18 $$ String columnName = DefinitionService.getString(parameters, "name_pk_field", null) --> Line_36 $$ if (columnName == null) [FD]
Line_36 $$ if (columnName == null) --> Line_38 $$ log.error(errorString) [CD]
Line_8 $$ String errorString = "Name of sequnce not found" --> Line_38 $$ log.error(errorString) [FD]
Line_42 $$ if (log.isDebugEnabled()) --> Line_43 $$ log.debug(sql) [CD]
Line_41 $$ String sql = "insert into " + tableName + " " + "(" + columnName + "," + valueColumnName + ")" + "values" + "(?,?)" --> Line_43 $$ log.debug(sql) [FD]
Line_42 $$ if (log.isDebugEnabled()) --> Line_44 $$ log.debug("pk " + seqValue) [CD]
Line_42 $$ if (log.isDebugEnabled()) --> Line_45 $$ log.debug("value " + insertValue) [CD]
Line_3 $$ PreparedStatement ps = null --> Line_47 $$ ps = db_.prepareStatement(sql) [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_47 $$ ps = db_.prepareStatement(sql) [FD]
Line_41 $$ String sql = "insert into " + tableName + " " + "(" + columnName + "," + valueColumnName + ")" + "values" + "(?,?)" --> Line_47 $$ ps = db_.prepareStatement(sql) [FD]
Line_3 $$ PreparedStatement ps = null --> Line_48 $$ ps.setLong(1, seqValue) [FD]
Line_47 $$ ps = db_.prepareStatement(sql) --> Line_48 $$ ps.setLong(1, seqValue) [FD]
Line_28 $$ long seqValue = db_.getSequenceNextValue(seqSite) --> Line_48 $$ ps.setLong(1, seqValue) [FD]
Line_3 $$ PreparedStatement ps = null --> Line_49 $$ ps.setString(2, insertValue) [FD]
Line_47 $$ ps = db_.prepareStatement(sql) --> Line_49 $$ ps.setString(2, insertValue) [FD]
Line_35 $$ String insertValue = DefinitionService.getString(parameters, "insert_value", null) --> Line_49 $$ ps.setString(2, insertValue) [FD]
Line_3 $$ PreparedStatement ps = null --> Line_50 $$ ps.executeUpdate() [FD]
Line_47 $$ ps = db_.prepareStatement(sql) --> Line_50 $$ ps.executeUpdate() [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_51 $$ db_.commit() [FD]
Line_2 $$ public void processAction(DatabaseAdapter db_, DataDefinitionActionDataListType parameters) throws Exception --> Line_54 $$ db_.rollback() [FD]
Line_3 $$ PreparedStatement ps = null --> Line_60 $$ org.riverock.generic.db.DatabaseManager.close(ps) [FD]
Line_47 $$ ps = db_.prepareStatement(sql) --> Line_60 $$ org.riverock.generic.db.DatabaseManager.close(ps) [FD]
Line_3 $$ PreparedStatement ps = null --> Line_61 $$ ps = null [FD]
Line_47 $$ ps = db_.prepareStatement(sql) --> Line_61 $$ ps = null [FD]
