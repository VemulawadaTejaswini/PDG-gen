Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_3 $$ String result = null [CD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_4 $$ Graph src [CD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_5 $$ Graph dest [CD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_6 $$ Path tmpDir [CD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_7 $$ System.out.println("##########>" + _dirMgr.getSeqNum() + " Choose the pivot vertex") [CD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_8 $$ src = new Graph(Graph.defaultGraph()) [CD]
Line_4 $$ Graph src --> Line_8 $$ src = new Graph(Graph.defaultGraph()) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_9 $$ src.setPath(_curr_path) [CD]
Line_4 $$ Graph src --> Line_9 $$ src.setPath(_curr_path) [FD]
Line_8 $$ src = new Graph(Graph.defaultGraph()) --> Line_9 $$ src.setPath(_curr_path) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_10 $$ dest = new Graph(Graph.defaultGraph()) [CD]
Line_5 $$ Graph dest --> Line_10 $$ dest = new Graph(Graph.defaultGraph()) [FD]
Line_6 $$ Path tmpDir --> Line_12 $$ tmpDir = _dirMgr.getTempDir() [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_16 $$ dest.setPath(tmpDir) [CD]
Line_5 $$ Graph dest --> Line_16 $$ dest.setPath(tmpDir) [FD]
Line_10 $$ dest = new Graph(Graph.defaultGraph()) --> Line_16 $$ dest.setPath(tmpDir) [FD]
Line_6 $$ Path tmpDir --> Line_16 $$ dest.setPath(tmpDir) [FD]
Line_12 $$ tmpDir = _dirMgr.getTempDir() --> Line_16 $$ dest.setPath(tmpDir) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_17 $$ GraphAlgorithm choose_pivot = new PivotChoose() [CD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_18 $$ choose_pivot.setConf(context) [CD]
Line_17 $$ GraphAlgorithm choose_pivot = new PivotChoose() --> Line_18 $$ choose_pivot.setConf(context) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_19 $$ choose_pivot.setSource(src) [CD]
Line_17 $$ GraphAlgorithm choose_pivot = new PivotChoose() --> Line_19 $$ choose_pivot.setSource(src) [FD]
Line_4 $$ Graph src --> Line_19 $$ choose_pivot.setSource(src) [FD]
Line_8 $$ src = new Graph(Graph.defaultGraph()) --> Line_19 $$ choose_pivot.setSource(src) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_20 $$ choose_pivot.setDestination(dest) [CD]
Line_17 $$ GraphAlgorithm choose_pivot = new PivotChoose() --> Line_20 $$ choose_pivot.setDestination(dest) [FD]
Line_5 $$ Graph dest --> Line_20 $$ choose_pivot.setDestination(dest) [FD]
Line_10 $$ dest = new Graph(Graph.defaultGraph()) --> Line_20 $$ choose_pivot.setDestination(dest) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_21 $$ choose_pivot.setMapperNum(getMapperNum()) [CD]
Line_17 $$ GraphAlgorithm choose_pivot = new PivotChoose() --> Line_21 $$ choose_pivot.setMapperNum(getMapperNum()) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_22 $$ choose_pivot.setReducerNum(getReducerNum()) [CD]
Line_17 $$ GraphAlgorithm choose_pivot = new PivotChoose() --> Line_22 $$ choose_pivot.setReducerNum(getReducerNum()) [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_23 $$ choose_pivot.execute() [CD]
Line_17 $$ GraphAlgorithm choose_pivot = new PivotChoose() --> Line_23 $$ choose_pivot.execute() [FD]
Line_6 $$ Path tmpDir --> Line_25 $$ Path the_file = new Path(tmpDir.toString() + "/part-00000") [FD]
Line_12 $$ tmpDir = _dirMgr.getTempDir() --> Line_25 $$ Path the_file = new Path(tmpDir.toString() + "/part-00000") [FD]
Line_26 $$ FileSystem client = FileSystem.get(context) --> Line_27 $$ if (!client.exists(the_file)) [FD]
Line_25 $$ Path the_file = new Path(tmpDir.toString() + "/part-00000") --> Line_27 $$ if (!client.exists(the_file)) [FD]
Line_25 $$ Path the_file = new Path(tmpDir.toString() + "/part-00000") --> Line_28 $$ throw new ProcessorExecutionException("Did not find the chosen vertex in " + the_file.toString()) [FD]
Line_26 $$ FileSystem client = FileSystem.get(context) --> Line_30 $$ FSDataInputStream input_stream = client.open(the_file) [FD]
Line_25 $$ Path the_file = new Path(tmpDir.toString() + "/part-00000") --> Line_30 $$ FSDataInputStream input_stream = client.open(the_file) [FD]
Line_30 $$ FSDataInputStream input_stream = client.open(the_file) --> Line_32 $$ IOUtils.copyBytes(input_stream, output_stream, context, false) [FD]
Line_31 $$ ByteArrayOutputStream output_stream = new ByteArrayOutputStream() --> Line_32 $$ IOUtils.copyBytes(input_stream, output_stream, context, false) [FD]
Line_31 $$ ByteArrayOutputStream output_stream = new ByteArrayOutputStream() --> Line_33 $$ String the_line = output_stream.toString() [FD]
Line_3 $$ String result = null --> Line_34 $$ result = the_line.substring(PivotChoose.KEY_PIVOT.length()).trim() [FD]
Line_33 $$ String the_line = output_stream.toString() --> Line_34 $$ result = the_line.substring(PivotChoose.KEY_PIVOT.length()).trim() [FD]
Line_30 $$ FSDataInputStream input_stream = client.open(the_file) --> Line_35 $$ input_stream.close() [FD]
Line_31 $$ ByteArrayOutputStream output_stream = new ByteArrayOutputStream() --> Line_36 $$ output_stream.close() [FD]
Line_2 $$ private String choosePivotVertex() throws ProcessorExecutionException --> Line_41 $$ return result [CD]
