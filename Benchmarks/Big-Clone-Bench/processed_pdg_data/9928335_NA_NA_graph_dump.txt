Line_4 $$ String safeUrl --> Line_6 $$ safeUrl = baseUrl + URLEncoder.encode(query, "UTF-8") [FD]
Line_2 $$ void search(String query, String display) --> Line_6 $$ safeUrl = baseUrl + URLEncoder.encode(query, "UTF-8") [FD]
Line_4 $$ String safeUrl --> Line_8 $$ safeUrl = baseUrl + query [FD]
Line_6 $$ safeUrl = baseUrl + URLEncoder.encode(query, "UTF-8") --> Line_8 $$ safeUrl = baseUrl + query [FD]
Line_2 $$ void search(String query, String display) --> Line_8 $$ safeUrl = baseUrl + query [FD]
Line_11 $$ URL url_connection = new URL(safeUrl) --> Line_12 $$ url_connection.openConnection() [FD]
Line_13 $$ DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance() --> Line_14 $$ DocumentBuilder builder = factory.newDocumentBuilder() [FD]
Line_14 $$ DocumentBuilder builder = factory.newDocumentBuilder() --> Line_15 $$ Document document = builder.parse(url_connection.openStream()) [FD]
Line_11 $$ URL url_connection = new URL(safeUrl) --> Line_15 $$ Document document = builder.parse(url_connection.openStream()) [FD]
Line_17 $$ Vector<String> path = new Vector<String>() --> Line_18 $$ path.add("Results") [FD]
Line_15 $$ Document document = builder.parse(url_connection.openStream()) --> Line_19 $$ for (Hashtable<String, String> field : DocumentManager.getSubTable(document, path, "Entry")) [FD]
Line_17 $$ Vector<String> path = new Vector<String>() --> Line_19 $$ for (Hashtable<String, String> field : DocumentManager.getSubTable(document, path, "Entry")) [FD]
Line_23 $$ ButtonTabComponent btc = new ButtonTabComponent(tpnResults) --> Line_24 $$ btc.setInheritsPopupMenu(true) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_26 $$ JLabel msg = new JLabel("No results found") [CD]
Line_25 $$ if (entries.isEmpty()) --> Line_27 $$ tpnResults.add(display, msg) [CD]
Line_2 $$ void search(String query, String display) --> Line_27 $$ tpnResults.add(display, msg) [FD]
Line_26 $$ JLabel msg = new JLabel("No results found") --> Line_27 $$ tpnResults.add(display, msg) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_28 $$ index = tpnResults.indexOfComponent(msg) [CD]
Line_22 $$ int index --> Line_28 $$ index = tpnResults.indexOfComponent(msg) [FD]
Line_26 $$ JLabel msg = new JLabel("No results found") --> Line_28 $$ index = tpnResults.indexOfComponent(msg) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_30 $$ Enumeration<String> iter = entries.firstElement().fields.keys() [CD]
Line_25 $$ if (entries.isEmpty()) --> Line_31 $$ while (iter.hasMoreElements()) [CD]
Line_30 $$ Enumeration<String> iter = entries.firstElement().fields.keys() --> Line_31 $$ while (iter.hasMoreElements()) [FD]
Line_31 $$ while (iter.hasMoreElements()) --> Line_32 $$ String field = iter.nextElement() [CD]
Line_30 $$ Enumeration<String> iter = entries.firstElement().fields.keys() --> Line_32 $$ String field = iter.nextElement() [FD]
Line_31 $$ while (iter.hasMoreElements()) --> Line_33 $$ if (!header.contains(field)) [CD]
Line_32 $$ String field = iter.nextElement() --> Line_33 $$ if (!header.contains(field)) [FD]
Line_33 $$ if (!header.contains(field)) --> Line_34 $$ header.addDefaultField(field) [CD]
Line_32 $$ String field = iter.nextElement() --> Line_34 $$ header.addDefaultField(field) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_37 $$ JTable result = new JTable() [CD]
Line_25 $$ if (entries.isEmpty()) --> Line_38 $$ Vector<String> fieldNames = header.getShownNames() [CD]
Line_25 $$ if (entries.isEmpty()) --> Line_39 $$ DefaultTableModel model = new DefaultTableModel(fieldNames, 0) [CD]
Line_39 $$ DefaultTableModel model = new DefaultTableModel(fieldNames, 0) --> Line_41 $$ model.addRow(entry.getShownFields(header.getShownNames())) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_43 $$ result.setModel(model) [CD]
Line_37 $$ JTable result = new JTable() --> Line_43 $$ result.setModel(model) [FD]
Line_39 $$ DefaultTableModel model = new DefaultTableModel(fieldNames, 0) --> Line_43 $$ result.setModel(model) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_44 $$ result.setColumnSelectionAllowed(false) [CD]
Line_37 $$ JTable result = new JTable() --> Line_44 $$ result.setColumnSelectionAllowed(false) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_45 $$ result.setSelectionMode(0) [CD]
Line_37 $$ JTable result = new JTable() --> Line_45 $$ result.setSelectionMode(0) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_46 $$ result.addMouseListener(new MouseAdapter() [CD]
Line_37 $$ JTable result = new JTable() --> Line_46 $$ result.addMouseListener(new MouseAdapter() [FD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_48 $$ ((JTable) e.getSource()).getComponentAt(e.getPoint()) [CD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_48 $$ ((JTable) e.getSource()).getComponentAt(e.getPoint()) [FD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_49 $$ int row = ((JTable) e.getSource()).rowAtPoint(e.getPoint()) [CD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_49 $$ int row = ((JTable) e.getSource()).rowAtPoint(e.getPoint()) [FD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_50 $$ SoundEntry entry = ((ButtonTabComponent) tpnResults.getTabComponentAt(tpnResults.getSelectedIndex())).records.get(row) [CD]
Line_49 $$ int row = ((JTable) e.getSource()).rowAtPoint(e.getPoint()) --> Line_50 $$ SoundEntry entry = ((ButtonTabComponent) tpnResults.getTabComponentAt(tpnResults.getSelectedIndex())).records.get(row) [FD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_51 $$ String file = entry.fields.get("FileName") [CD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_52 $$ String title = entry.fields.get("Title") [CD]
Line_46 $$ result.addMouseListener(new MouseAdapter() --> Line_53 $$ if (file != null && !file.isEmpty()) [CD]
Line_51 $$ String file = entry.fields.get("FileName") --> Line_53 $$ if (file != null && !file.isEmpty()) [FD]
Line_55 $$ AudioSource src = new AudioSource(new URL(file), title) --> Line_56 $$ src.attachAudioStateListener(new AudioStateListener() [FD]
Line_56 $$ src.attachAudioStateListener(new AudioStateListener() --> Line_58 $$ if (event.getAudioState() != AudioStateEvent.AudioState.CLOSED && event.getAudioState() != AudioStateEvent.AudioState.CLOSING) [CD]
Line_56 $$ src.attachAudioStateListener(new AudioStateListener() --> Line_58 $$ if (event.getAudioState() != AudioStateEvent.AudioState.CLOSED && event.getAudioState() != AudioStateEvent.AudioState.CLOSING) [FD]
Line_58 $$ if (event.getAudioState() != AudioStateEvent.AudioState.CLOSED && event.getAudioState() != AudioStateEvent.AudioState.CLOSING) --> Line_59 $$ llblStatus.setText(event.getAudioState() + ": " + ((AudioSource) event.getSource()).getTitle().toString()) [CD]
Line_56 $$ src.attachAudioStateListener(new AudioStateListener() --> Line_59 $$ llblStatus.setText(event.getAudioState() + ": " + ((AudioSource) event.getSource()).getTitle().toString()) [FD]
Line_55 $$ AudioSource src = new AudioSource(new URL(file), title) --> Line_63 $$ audioPlayer.open(src) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_70 $$ tpnResults.add(display, scrollPane) [CD]
Line_2 $$ void search(String query, String display) --> Line_70 $$ tpnResults.add(display, scrollPane) [FD]
Line_25 $$ if (entries.isEmpty()) --> Line_71 $$ index = tpnResults.indexOfComponent(scrollPane) [CD]
Line_22 $$ int index --> Line_74 $$ tpnResults.setTabComponentAt(index, btc) [FD]
Line_28 $$ index = tpnResults.indexOfComponent(msg) --> Line_74 $$ tpnResults.setTabComponentAt(index, btc) [FD]
Line_23 $$ ButtonTabComponent btc = new ButtonTabComponent(tpnResults) --> Line_74 $$ tpnResults.setTabComponentAt(index, btc) [FD]
Line_22 $$ int index --> Line_75 $$ tpnResults.setSelectedIndex(index) [FD]
Line_28 $$ index = tpnResults.indexOfComponent(msg) --> Line_75 $$ tpnResults.setSelectedIndex(index) [FD]
