Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_3 $$ CacheEntry entry = null [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_4 $$ Tenant tenant = null [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_5 $$ if (!tenantInfo.getTenants().isEmpty()) [CD]
Line_5 $$ if (!tenantInfo.getTenants().isEmpty()) --> Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) [CD]
Line_4 $$ Tenant tenant = null --> Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) [FD]
Line_5 $$ if (!tenantInfo.getTenants().isEmpty()) --> Line_7 $$ if (tenant == null) [CD]
Line_4 $$ Tenant tenant = null --> Line_7 $$ if (tenant == null) [FD]
Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) --> Line_7 $$ if (tenant == null) [FD]
Line_7 $$ if (tenant == null) --> Line_8 $$ tenant = tenantInfo.getTenants().get(0) [CD]
Line_4 $$ Tenant tenant = null --> Line_8 $$ tenant = tenantInfo.getTenants().get(0) [FD]
Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) --> Line_8 $$ tenant = tenantInfo.getTenants().get(0) [FD]
Line_5 $$ if (!tenantInfo.getTenants().isEmpty()) --> Line_10 $$ entry = tenantToCacheEntry.get(tenant.getName()) [CD]
Line_4 $$ Tenant tenant = null --> Line_10 $$ entry = tenantToCacheEntry.get(tenant.getName()) [FD]
Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) --> Line_10 $$ entry = tenantToCacheEntry.get(tenant.getName()) [FD]
Line_8 $$ tenant = tenantInfo.getTenants().get(0) --> Line_10 $$ entry = tenantToCacheEntry.get(tenant.getName()) [FD]
Line_5 $$ if (!tenantInfo.getTenants().isEmpty()) --> Line_12 $$ entry = cacheEntry [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_14 $$ if (entry == null) [CD]
Line_14 $$ if (entry == null) --> Line_15 $$ File tempDir = (File) servletContext.getAttribute("javax.servlet.context.tempdir") [CD]
Line_14 $$ if (entry == null) --> Line_16 $$ tempDir = new File(tempDir, "pustefix-sitemap-cache") [CD]
Line_15 $$ File tempDir = (File) servletContext.getAttribute("javax.servlet.context.tempdir") --> Line_16 $$ tempDir = new File(tempDir, "pustefix-sitemap-cache") [FD]
Line_14 $$ if (entry == null) --> Line_17 $$ if (!tempDir.exists()) [CD]
Line_15 $$ File tempDir = (File) servletContext.getAttribute("javax.servlet.context.tempdir") --> Line_17 $$ if (!tempDir.exists()) [FD]
Line_16 $$ tempDir = new File(tempDir, "pustefix-sitemap-cache") --> Line_17 $$ if (!tempDir.exists()) [FD]
Line_17 $$ if (!tempDir.exists()) --> Line_18 $$ tempDir.mkdirs() [CD]
Line_15 $$ File tempDir = (File) servletContext.getAttribute("javax.servlet.context.tempdir") --> Line_18 $$ tempDir.mkdirs() [FD]
Line_16 $$ tempDir = new File(tempDir, "pustefix-sitemap-cache") --> Line_18 $$ tempDir.mkdirs() [FD]
Line_14 $$ if (entry == null) --> Line_20 $$ entry = new CacheEntry() [CD]
Line_14 $$ if (entry == null) --> Line_21 $$ entry.file = new File(tempDir, "sitemap" + (tenant == null ? "" : "-" + tenant.getName()) + ".xml") [CD]
Line_4 $$ Tenant tenant = null --> Line_21 $$ entry.file = new File(tempDir, "sitemap" + (tenant == null ? "" : "-" + tenant.getName()) + ".xml") [FD]
Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) --> Line_21 $$ entry.file = new File(tempDir, "sitemap" + (tenant == null ? "" : "-" + tenant.getName()) + ".xml") [FD]
Line_8 $$ tenant = tenantInfo.getTenants().get(0) --> Line_21 $$ entry.file = new File(tempDir, "sitemap" + (tenant == null ? "" : "-" + tenant.getName()) + ".xml") [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_23 $$ String host = AbstractPustefixRequestHandler.getServerName(request) [FD]
Line_4 $$ Tenant tenant = null --> Line_24 $$ Document doc = getSearchEngineSitemap(tenant, host) [FD]
Line_6 $$ tenant = tenantInfo.getMatchingTenant(request) --> Line_24 $$ Document doc = getSearchEngineSitemap(tenant, host) [FD]
Line_8 $$ tenant = tenantInfo.getTenants().get(0) --> Line_24 $$ Document doc = getSearchEngineSitemap(tenant, host) [FD]
Line_23 $$ String host = AbstractPustefixRequestHandler.getServerName(request) --> Line_24 $$ Document doc = getSearchEngineSitemap(tenant, host) [FD]
Line_25 $$ Transformer trf = TransformerFactory.newInstance().newTransformer() --> Line_26 $$ trf.setOutputProperty(OutputKeys.INDENT, "yes") [FD]
Line_28 $$ MessageDigest digest --> Line_30 $$ digest = MessageDigest.getInstance("MD5") [FD]
Line_25 $$ Transformer trf = TransformerFactory.newInstance().newTransformer() --> Line_35 $$ trf.transform(new DOMSource(doc), new StreamResult(digestOutput)) [FD]
Line_34 $$ DigestOutputStream digestOutput = new DigestOutputStream(out, digest) --> Line_36 $$ digestOutput.close() [FD]
Line_28 $$ MessageDigest digest --> Line_37 $$ byte[] digestBytes = digest.digest() [FD]
Line_30 $$ digest = MessageDigest.getInstance("MD5") --> Line_37 $$ byte[] digestBytes = digest.digest() [FD]
Line_37 $$ byte[] digestBytes = digest.digest() --> Line_38 $$ entry.etag = MD5Utils.byteToHex(digestBytes) [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_43 $$ String reqETag = request.getHeader("If-None-Match") [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_43 $$ String reqETag = request.getHeader("If-None-Match") [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_44 $$ if (reqETag != null) [CD]
Line_43 $$ String reqETag = request.getHeader("If-None-Match") --> Line_44 $$ if (reqETag != null) [FD]
Line_44 $$ if (reqETag != null) --> Line_45 $$ if (entry.etag.equals(reqETag)) [CD]
Line_43 $$ String reqETag = request.getHeader("If-None-Match") --> Line_45 $$ if (entry.etag.equals(reqETag)) [FD]
Line_45 $$ if (entry.etag.equals(reqETag)) --> Line_46 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_46 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [FD]
Line_45 $$ if (entry.etag.equals(reqETag)) --> Line_47 $$ response.flushBuffer() [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_47 $$ response.flushBuffer() [FD]
Line_45 $$ if (entry.etag.equals(reqETag)) --> Line_48 $$ return [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_51 $$ long reqMod = request.getDateHeader("If-Modified-Since") [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_51 $$ long reqMod = request.getDateHeader("If-Modified-Since") [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_52 $$ if (reqMod != -1) [CD]
Line_51 $$ long reqMod = request.getDateHeader("If-Modified-Since") --> Line_52 $$ if (reqMod != -1) [FD]
Line_52 $$ if (reqMod != -1) --> Line_53 $$ if (entry.file.lastModified() < reqMod + 1000) [CD]
Line_53 $$ if (entry.file.lastModified() < reqMod + 1000) --> Line_54 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_54 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [FD]
Line_53 $$ if (entry.file.lastModified() < reqMod + 1000) --> Line_55 $$ response.flushBuffer() [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_55 $$ response.flushBuffer() [FD]
Line_53 $$ if (entry.file.lastModified() < reqMod + 1000) --> Line_56 $$ return [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_59 $$ response.setContentType("application/xml") [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_59 $$ response.setContentType("application/xml") [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_60 $$ response.setContentLength((int) entry.file.length()) [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_60 $$ response.setContentLength((int) entry.file.length()) [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_61 $$ response.setDateHeader("Last-Modified", entry.file.lastModified()) [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_61 $$ response.setDateHeader("Last-Modified", entry.file.lastModified()) [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_62 $$ response.setHeader("ETag", entry.etag) [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_62 $$ response.setHeader("ETag", entry.etag) [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_63 $$ OutputStream out = new BufferedOutputStream(response.getOutputStream()) [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_64 $$ InputStream in = new FileInputStream(entry.file) [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_65 $$ int bytes_read [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_66 $$ byte[] buffer = new byte[8] [CD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_67 $$ while ((bytes_read = in.read(buffer)) != -1) [CD]
Line_65 $$ int bytes_read --> Line_67 $$ while ((bytes_read = in.read(buffer)) != -1) [FD]
Line_64 $$ InputStream in = new FileInputStream(entry.file) --> Line_67 $$ while ((bytes_read = in.read(buffer)) != -1) [FD]
Line_66 $$ byte[] buffer = new byte[8] --> Line_67 $$ while ((bytes_read = in.read(buffer)) != -1) [FD]
Line_67 $$ while ((bytes_read = in.read(buffer)) != -1) --> Line_68 $$ out.write(buffer, 0, bytes_read) [CD]
Line_67 $$ while ((bytes_read = in.read(buffer)) != -1) --> Line_68 $$ out.write(buffer, 0, bytes_read) [FD]
Line_27 $$ FileOutputStream out = new FileOutputStream(entry.file) --> Line_68 $$ out.write(buffer, 0, bytes_read) [FD]
Line_66 $$ byte[] buffer = new byte[8] --> Line_68 $$ out.write(buffer, 0, bytes_read) [FD]
Line_65 $$ int bytes_read --> Line_68 $$ out.write(buffer, 0, bytes_read) [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_70 $$ out.flush() [CD]
Line_27 $$ FileOutputStream out = new FileOutputStream(entry.file) --> Line_70 $$ out.flush() [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_71 $$ in.close() [CD]
Line_64 $$ InputStream in = new FileInputStream(entry.file) --> Line_71 $$ in.close() [FD]
Line_2 $$ public synchronized void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_72 $$ out.close() [CD]
Line_27 $$ FileOutputStream out = new FileOutputStream(entry.file) --> Line_72 $$ out.close() [FD]
