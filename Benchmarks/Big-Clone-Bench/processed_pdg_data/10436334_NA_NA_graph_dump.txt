Line_4 $$ SecurityManager securityManager = System.getSecurityManager() --> Line_5 $$ if (securityManager != null) [FD]
Line_5 $$ if (securityManager != null) --> Line_6 $$ securityManager.checkPermission(new AdminPermission(new StringBuilder("(location=").append(location).append(")").toString(), org.osgi.framework.AdminPermission.EXTENSIONLIFECYCLE)) [CD]
Line_4 $$ SecurityManager securityManager = System.getSecurityManager() --> Line_6 $$ securityManager.checkPermission(new AdminPermission(new StringBuilder("(location=").append(location).append(")").toString(), org.osgi.framework.AdminPermission.EXTENSIONLIFECYCLE)) [FD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_6 $$ securityManager.checkPermission(new AdminPermission(new StringBuilder("(location=").append(location).append(")").toString(), org.osgi.framework.AdminPermission.EXTENSIONLIFECYCLE)) [FD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_11 $$ if (is == null) [FD]
Line_11 $$ if (is == null) --> Line_12 $$ URL url = new URL(location) [CD]
Line_11 $$ if (is == null) --> Line_13 $$ is = url.openStream() [CD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_13 $$ is = url.openStream() [FD]
Line_12 $$ URL url = new URL(location) --> Line_13 $$ is = url.openStream() [FD]
Line_16 $$ OutputStream os --> Line_17 $$ os = new FileOutputStream(temp) [FD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_18 $$ IOUtil.copy(is, os) [FD]
Line_13 $$ is = url.openStream() --> Line_18 $$ IOUtil.copy(is, os) [FD]
Line_16 $$ OutputStream os --> Line_18 $$ IOUtil.copy(is, os) [FD]
Line_17 $$ os = new FileOutputStream(temp) --> Line_18 $$ IOUtil.copy(is, os) [FD]
Line_16 $$ OutputStream os --> Line_19 $$ os.close() [FD]
Line_17 $$ os = new FileOutputStream(temp) --> Line_19 $$ os.close() [FD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_20 $$ is.close() [FD]
Line_13 $$ is = url.openStream() --> Line_20 $$ is.close() [FD]
Line_21 $$ Manifest manifest = ManifestUtil.getJarManifest(new FileInputStream(temp)) --> Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) [FD]
Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) --> Line_23 $$ Version version = Version.parseVersion((String) headers.get(Constants.BUNDLE_VERSION)) [FD]
Line_8 $$ long bundleId = getNextBundleId() --> Line_24 $$ File cache = createNewCache(bundleId, version) [FD]
Line_23 $$ Version version = Version.parseVersion((String) headers.get(Constants.BUNDLE_VERSION)) --> Line_24 $$ File cache = createNewCache(bundleId, version) [FD]
Line_16 $$ OutputStream os --> Line_26 $$ os = new FileOutputStream(manifestFile) [FD]
Line_17 $$ os = new FileOutputStream(temp) --> Line_26 $$ os = new FileOutputStream(manifestFile) [FD]
Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) --> Line_27 $$ ManifestUtil.storeManifest(headers, os) [FD]
Line_16 $$ OutputStream os --> Line_27 $$ ManifestUtil.storeManifest(headers, os) [FD]
Line_17 $$ os = new FileOutputStream(temp) --> Line_27 $$ ManifestUtil.storeManifest(headers, os) [FD]
Line_26 $$ os = new FileOutputStream(manifestFile) --> Line_27 $$ ManifestUtil.storeManifest(headers, os) [FD]
Line_16 $$ OutputStream os --> Line_28 $$ os.close() [FD]
Line_17 $$ os = new FileOutputStream(temp) --> Line_28 $$ os.close() [FD]
Line_26 $$ os = new FileOutputStream(manifestFile) --> Line_28 $$ os.close() [FD]
Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) --> Line_29 $$ if (isBundleInstalled((String) headers.get(Constants.BUNDLE_SYMBOLICNAME))) [FD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_30 $$ throw new BundleException(new StringBuilder("Bundle(location=").append(location).append(") already installed.").toString()) [FD]
Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) --> Line_32 $$ ManifestEntry[] entries = ManifestEntry.parse(headers.get(Constants.FRAGMENT_HOST)) [FD]
Line_33 $$ if (entries != null) --> Line_34 $$ if (entries[0].hasAttribute("extension")) [CD]
Line_34 $$ if (entries[0].hasAttribute("extension")) --> Line_35 $$ String extension = entries[0].getAttributeValue("extension") [CD]
Line_34 $$ if (entries[0].hasAttribute("extension")) --> Line_36 $$ if (extension.equals("bootclasspath")) [CD]
Line_35 $$ String extension = entries[0].getAttributeValue("extension") --> Line_36 $$ if (extension.equals("bootclasspath")) [FD]
Line_37 $$ String symbolicName = entries[0].getName() --> Line_38 $$ if (!symbolicName.equals(framework.getSymbolicName()) && !symbolicName.equals(Constants.SYSTEM_BUNDLE_SYMBOLICNAME)) [FD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_39 $$ throw new BundleException(new StringBuilder("Trying to install a fragment Bundle(location=").append(location).append(") with extension 'bootclasspath' but host is not System Bundle.").toString(), new UnsupportedOperationException()) [FD]
Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) --> Line_44 $$ String requiredEE = (String) headers.get(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT) [FD]
Line_44 $$ String requiredEE = (String) headers.get(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT) --> Line_45 $$ if (requiredEE != null) [FD]
Line_45 $$ if (requiredEE != null) --> Line_46 $$ BundleContext context = framework.getBundleContext() [CD]
Line_45 $$ if (requiredEE != null) --> Line_47 $$ String ee = context.getProperty(Constants.FRAMEWORK_EXECUTIONENVIRONMENT) [CD]
Line_46 $$ BundleContext context = framework.getBundleContext() --> Line_47 $$ String ee = context.getProperty(Constants.FRAMEWORK_EXECUTIONENVIRONMENT) [FD]
Line_45 $$ if (requiredEE != null) --> Line_48 $$ if (!ee.contains(requiredEE)) [CD]
Line_47 $$ String ee = context.getProperty(Constants.FRAMEWORK_EXECUTIONENVIRONMENT) --> Line_48 $$ if (!ee.contains(requiredEE)) [FD]
Line_44 $$ String requiredEE = (String) headers.get(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT) --> Line_48 $$ if (!ee.contains(requiredEE)) [FD]
Line_44 $$ String requiredEE = (String) headers.get(Constants.BUNDLE_REQUIREDEXECUTIONENVIRONMENT) --> Line_49 $$ throw new BundleException(new StringBuilder("Bundle(location=").append(location).append(")  requires an unsopperted execution environment (=").append(requiredEE).append(").").toString()) [FD]
Line_2 $$ Bundle install(String location, InputStream is) throws BundleException --> Line_49 $$ throw new BundleException(new StringBuilder("Bundle(location=").append(location).append(")  requires an unsopperted execution environment (=").append(requiredEE).append(").").toString()) [FD]
Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) --> Line_52 $$ if (FrameworkUtil.isFragmentHost(headers)) [FD]
Line_52 $$ if (FrameworkUtil.isFragmentHost(headers)) --> Line_53 $$ bundle = new FragmentBundle(framework) [CD]
Line_9 $$ AbstractBundle bundle = null --> Line_53 $$ bundle = new FragmentBundle(framework) [FD]
Line_52 $$ if (FrameworkUtil.isFragmentHost(headers)) --> Line_55 $$ bundle = new HostBundle(framework) [CD]
Line_9 $$ AbstractBundle bundle = null --> Line_55 $$ bundle = new HostBundle(framework) [FD]
Line_53 $$ bundle = new FragmentBundle(framework) --> Line_55 $$ bundle = new HostBundle(framework) [FD]
Line_15 $$ File temp = new File(getTempFolder(), Long.toString(System.currentTimeMillis())) --> Line_58 $$ temp.renameTo(bundlefile) [FD]
Line_57 $$ File bundlefile = new File(cache, Storage.BUNDLE_FILE) --> Line_58 $$ temp.renameTo(bundlefile) [FD]
Line_57 $$ File bundlefile = new File(cache, Storage.BUNDLE_FILE) --> Line_59 $$ long lastModified = bundlefile.lastModified() [FD]
Line_60 $$ BundleInfo info = new BundleInfo(bundleId, location, lastModified, framework.getInitialBundleStartLevel()) --> Line_61 $$ info.setHeaders(headers) [FD]
Line_22 $$ Dictionary headers = ManifestUtil.toDictionary(manifest) --> Line_61 $$ info.setHeaders(headers) [FD]
Line_60 $$ BundleInfo info = new BundleInfo(bundleId, location, lastModified, framework.getInitialBundleStartLevel()) --> Line_62 $$ info.setCache(cache) [FD]
Line_24 $$ File cache = createNewCache(bundleId, version) --> Line_62 $$ info.setCache(cache) [FD]
Line_60 $$ BundleInfo info = new BundleInfo(bundleId, location, lastModified, framework.getInitialBundleStartLevel()) --> Line_63 $$ storeBundleInfo(info) [FD]
Line_9 $$ AbstractBundle bundle = null --> Line_64 $$ bundleInfosByBundle.put(bundle, info) [FD]
Line_53 $$ bundle = new FragmentBundle(framework) --> Line_64 $$ bundleInfosByBundle.put(bundle, info) [FD]
Line_55 $$ bundle = new HostBundle(framework) --> Line_64 $$ bundleInfosByBundle.put(bundle, info) [FD]
Line_60 $$ BundleInfo info = new BundleInfo(bundleId, location, lastModified, framework.getInitialBundleStartLevel()) --> Line_64 $$ bundleInfosByBundle.put(bundle, info) [FD]
Line_9 $$ AbstractBundle bundle = null --> Line_65 $$ BundleURLClassPath classPath = createBundleURLClassPath(bundle, version, bundlefile, cache, false) [FD]
Line_53 $$ bundle = new FragmentBundle(framework) --> Line_65 $$ BundleURLClassPath classPath = createBundleURLClassPath(bundle, version, bundlefile, cache, false) [FD]
Line_55 $$ bundle = new HostBundle(framework) --> Line_65 $$ BundleURLClassPath classPath = createBundleURLClassPath(bundle, version, bundlefile, cache, false) [FD]
Line_23 $$ Version version = Version.parseVersion((String) headers.get(Constants.BUNDLE_VERSION)) --> Line_65 $$ BundleURLClassPath classPath = createBundleURLClassPath(bundle, version, bundlefile, cache, false) [FD]
Line_57 $$ File bundlefile = new File(cache, Storage.BUNDLE_FILE) --> Line_65 $$ BundleURLClassPath classPath = createBundleURLClassPath(bundle, version, bundlefile, cache, false) [FD]
Line_24 $$ File cache = createNewCache(bundleId, version) --> Line_65 $$ BundleURLClassPath classPath = createBundleURLClassPath(bundle, version, bundlefile, cache, false) [FD]
Line_9 $$ AbstractBundle bundle = null --> Line_66 $$ classPathsByBundle.put(bundle, new BundleURLClassPath[] [FD]
Line_53 $$ bundle = new FragmentBundle(framework) --> Line_66 $$ classPathsByBundle.put(bundle, new BundleURLClassPath[] [FD]
Line_55 $$ bundle = new HostBundle(framework) --> Line_66 $$ classPathsByBundle.put(bundle, new BundleURLClassPath[] [FD]
Line_9 $$ AbstractBundle bundle = null --> Line_68 $$ bundles = (Bundle[]) ArrayUtil.add(bundles, bundle) [FD]
Line_53 $$ bundle = new FragmentBundle(framework) --> Line_68 $$ bundles = (Bundle[]) ArrayUtil.add(bundles, bundle) [FD]
Line_55 $$ bundle = new HostBundle(framework) --> Line_68 $$ bundles = (Bundle[]) ArrayUtil.add(bundles, bundle) [FD]
Line_9 $$ AbstractBundle bundle = null --> Line_72 $$ if (bundle != null) [FD]
Line_53 $$ bundle = new FragmentBundle(framework) --> Line_72 $$ if (bundle != null) [FD]
Line_55 $$ bundle = new HostBundle(framework) --> Line_72 $$ if (bundle != null) [FD]
Line_72 $$ if (bundle != null) --> Line_73 $$ File bundleFolder = getBundleFolder(bundleId) [CD]
Line_8 $$ long bundleId = getNextBundleId() --> Line_73 $$ File bundleFolder = getBundleFolder(bundleId) [FD]
Line_73 $$ File bundleFolder = getBundleFolder(bundleId) --> Line_75 $$ IOUtil.delete(bundleFolder) [FD]
