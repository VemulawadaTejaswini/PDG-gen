Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_3 $$ S3OperationParameters opParams = pOpParams [CD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_4 $$ opParams = new S3OperationParameters() [CD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_4 $$ opParams = new S3OperationParameters() [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_5 $$ HttpURLConnection result = null [CD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_6 $$ URL url = getURL(pBucket, pObject, opParams.getQueryParameters()) [CD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_6 $$ URL url = getURL(pBucket, pObject, opParams.getQueryParameters()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_6 $$ URL url = getURL(pBucket, pObject, opParams.getQueryParameters()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_6 $$ URL url = getURL(pBucket, pObject, opParams.getQueryParameters()) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_7 $$ mLogger.log(Level.FINEST, "URL: " + url.toString()) [CD]
Line_6 $$ URL url = getURL(pBucket, pObject, opParams.getQueryParameters()) --> Line_7 $$ mLogger.log(Level.FINEST, "URL: " + url.toString()) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_8 $$ opParams.addDateHeader() [CD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_8 $$ opParams.addDateHeader() [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_8 $$ opParams.addDateHeader() [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_11 $$ opParams.addHostHeader(BASE_DOMAIN) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_11 $$ opParams.addHostHeader(BASE_DOMAIN) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_14 $$ opParams.addHostHeader(pBucket.getName() + "." + BASE_DOMAIN) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_14 $$ opParams.addHostHeader(pBucket.getName() + "." + BASE_DOMAIN) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_14 $$ opParams.addHostHeader(pBucket.getName() + "." + BASE_DOMAIN) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_17 $$ opParams.addHostHeader(pBucket.getName()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_17 $$ opParams.addHostHeader(pBucket.getName()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_17 $$ opParams.addHostHeader(pBucket.getName()) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_20 $$ if (opParams.isSign()) [CD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_20 $$ if (opParams.isSign()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_20 $$ if (opParams.isSign()) [FD]
Line_20 $$ if (opParams.isSign()) --> Line_21 $$ StringBuilder sb = new StringBuilder() [CD]
Line_20 $$ if (opParams.isSign()) --> Line_22 $$ sb.append(opParams.getVerb().toString()) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_22 $$ sb.append(opParams.getVerb().toString()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_22 $$ sb.append(opParams.getVerb().toString()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_22 $$ sb.append(opParams.getVerb().toString()) [FD]
Line_20 $$ if (opParams.isSign()) --> Line_23 $$ sb.append(NEWLINE) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_23 $$ sb.append(NEWLINE) [FD]
Line_20 $$ if (opParams.isSign()) --> Line_24 $$ sb.append(posHeader(MD5, opParams.getRequestHeaders())) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_24 $$ sb.append(posHeader(MD5, opParams.getRequestHeaders())) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_24 $$ sb.append(posHeader(MD5, opParams.getRequestHeaders())) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_24 $$ sb.append(posHeader(MD5, opParams.getRequestHeaders())) [FD]
Line_20 $$ if (opParams.isSign()) --> Line_25 $$ sb.append(posHeader(TYPE, opParams.getRequestHeaders())) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_25 $$ sb.append(posHeader(TYPE, opParams.getRequestHeaders())) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_25 $$ sb.append(posHeader(TYPE, opParams.getRequestHeaders())) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_25 $$ sb.append(posHeader(TYPE, opParams.getRequestHeaders())) [FD]
Line_20 $$ if (opParams.isSign()) --> Line_26 $$ if (opParams.getQueryParameters().has(EXPIRES)) [CD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_26 $$ if (opParams.getQueryParameters().has(EXPIRES)) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_26 $$ if (opParams.getQueryParameters().has(EXPIRES)) [FD]
Line_26 $$ if (opParams.getQueryParameters().has(EXPIRES)) --> Line_27 $$ sb.append(opParams.getQueryParameters().get(EXPIRES).getValue()) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_27 $$ sb.append(opParams.getQueryParameters().get(EXPIRES).getValue()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_27 $$ sb.append(opParams.getQueryParameters().get(EXPIRES).getValue()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_27 $$ sb.append(opParams.getQueryParameters().get(EXPIRES).getValue()) [FD]
Line_26 $$ if (opParams.getQueryParameters().has(EXPIRES)) --> Line_28 $$ sb.append(NEWLINE) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_28 $$ sb.append(NEWLINE) [FD]
Line_26 $$ if (opParams.getQueryParameters().has(EXPIRES)) --> Line_30 $$ sb.append(posHeader(DATE, opParams.getRequestHeaders())) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_30 $$ sb.append(posHeader(DATE, opParams.getRequestHeaders())) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_30 $$ sb.append(posHeader(DATE, opParams.getRequestHeaders())) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_30 $$ sb.append(posHeader(DATE, opParams.getRequestHeaders())) [FD]
Line_20 $$ if (opParams.isSign()) --> Line_32 $$ sb.append(canonicalizeAmazonHeaders(opParams.getRequestHeaders())) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_32 $$ sb.append(canonicalizeAmazonHeaders(opParams.getRequestHeaders())) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_32 $$ sb.append(canonicalizeAmazonHeaders(opParams.getRequestHeaders())) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_32 $$ sb.append(canonicalizeAmazonHeaders(opParams.getRequestHeaders())) [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_34 $$ sb.append("/") [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_35 $$ if (pBucket != null) [FD]
Line_35 $$ if (pBucket != null) --> Line_36 $$ sb.append(URLEncoder.encode(pBucket.getName(), URL_ENCODING)) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_36 $$ sb.append(URLEncoder.encode(pBucket.getName(), URL_ENCODING)) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_36 $$ sb.append(URLEncoder.encode(pBucket.getName(), URL_ENCODING)) [FD]
Line_35 $$ if (pBucket != null) --> Line_37 $$ sb.append("/") [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_37 $$ sb.append("/") [FD]
Line_35 $$ if (pBucket != null) --> Line_38 $$ if (pObject != null) [CD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_38 $$ if (pObject != null) [FD]
Line_38 $$ if (pObject != null) --> Line_39 $$ sb.append(URLEncoder.encode(pObject.getKey(), URL_ENCODING)) [CD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_39 $$ sb.append(URLEncoder.encode(pObject.getKey(), URL_ENCODING)) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_39 $$ sb.append(URLEncoder.encode(pObject.getKey(), URL_ENCODING)) [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_42 $$ sb.append(opParams.getQueryParameters().getAmazonSubresources().toQueryString()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_42 $$ sb.append(opParams.getQueryParameters().getAmazonSubresources().toQueryString()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_42 $$ sb.append(opParams.getQueryParameters().getAmazonSubresources().toQueryString()) [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_43 $$ String signThis = sb.toString() [FD]
Line_43 $$ String signThis = sb.toString() --> Line_45 $$ String sig = encode(mCredential.getMSecretAccessKey(), signThis, false) [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_46 $$ sb = new StringBuilder() [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_47 $$ sb.append("AWS ") [FD]
Line_46 $$ sb = new StringBuilder() --> Line_47 $$ sb.append("AWS ") [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_48 $$ sb.append(mCredential.getMAccessKeyID()) [FD]
Line_46 $$ sb = new StringBuilder() --> Line_48 $$ sb.append(mCredential.getMAccessKeyID()) [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_49 $$ sb.append(":") [FD]
Line_46 $$ sb = new StringBuilder() --> Line_49 $$ sb.append(":") [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_50 $$ sb.append(sig) [FD]
Line_46 $$ sb = new StringBuilder() --> Line_50 $$ sb.append(sig) [FD]
Line_45 $$ String sig = encode(mCredential.getMSecretAccessKey(), signThis, false) --> Line_50 $$ sb.append(sig) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_51 $$ opParams.addAuthorizationHeader(sb.toString()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_51 $$ opParams.addAuthorizationHeader(sb.toString()) [FD]
Line_21 $$ StringBuilder sb = new StringBuilder() --> Line_51 $$ opParams.addAuthorizationHeader(sb.toString()) [FD]
Line_46 $$ sb = new StringBuilder() --> Line_51 $$ opParams.addAuthorizationHeader(sb.toString()) [FD]
Line_6 $$ URL url = getURL(pBucket, pObject, opParams.getQueryParameters()) --> Line_58 $$ URLConnection urlConn = url.openConnection() [FD]
Line_5 $$ HttpURLConnection result = null --> Line_60 $$ result = (HttpURLConnection) urlConn [FD]
Line_5 $$ HttpURLConnection result = null --> Line_61 $$ result.setRequestMethod(opParams.getVerb().toString()) [FD]
Line_60 $$ result = (HttpURLConnection) urlConn --> Line_61 $$ result.setRequestMethod(opParams.getVerb().toString()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_61 $$ result.setRequestMethod(opParams.getVerb().toString()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_61 $$ result.setRequestMethod(opParams.getVerb().toString()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_62 $$ mLogger.log(Level.FINEST, "HTTP Operation: " + opParams.getVerb().toString()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_62 $$ mLogger.log(Level.FINEST, "HTTP Operation: " + opParams.getVerb().toString()) [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_63 $$ if (opParams.getVerb() == HttpVerb.PUT) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_63 $$ if (opParams.getVerb() == HttpVerb.PUT) [FD]
Line_63 $$ if (opParams.getVerb() == HttpVerb.PUT) --> Line_64 $$ result.setDoOutput(true) [CD]
Line_5 $$ HttpURLConnection result = null --> Line_64 $$ result.setDoOutput(true) [FD]
Line_60 $$ result = (HttpURLConnection) urlConn --> Line_64 $$ result.setDoOutput(true) [FD]
Line_5 $$ HttpURLConnection result = null --> Line_66 $$ result.setRequestProperty(TYPE, "") [FD]
Line_60 $$ result = (HttpURLConnection) urlConn --> Line_66 $$ result.setRequestProperty(TYPE, "") [FD]
Line_3 $$ S3OperationParameters opParams = pOpParams --> Line_67 $$ for (AWSParameter param : opParams.getRequestHeaders()) [FD]
Line_4 $$ opParams = new S3OperationParameters() --> Line_67 $$ for (AWSParameter param : opParams.getRequestHeaders()) [FD]
Line_5 $$ HttpURLConnection result = null --> Line_68 $$ result.setRequestProperty(param.getName(), param.getValue()) [FD]
Line_60 $$ result = (HttpURLConnection) urlConn --> Line_68 $$ result.setRequestProperty(param.getName(), param.getValue()) [FD]
Line_67 $$ for (AWSParameter param : opParams.getRequestHeaders()) --> Line_68 $$ result.setRequestProperty(param.getName(), param.getValue()) [FD]
Line_67 $$ for (AWSParameter param : opParams.getRequestHeaders()) --> Line_69 $$ mLogger.log(Level.FINEST, "Header " + param.getName() + ": " + param.getValue()) [FD]
Line_6 $$ URL url = getURL(pBucket, pObject, opParams.getQueryParameters()) --> Line_72 $$ throw new S3Exception("Problem opening connection to URL: " + url.toString(), e) [FD]
Line_2 $$ public HttpURLConnection execute(S3Bucket pBucket, S3Object pObject, S3OperationParameters pOpParams) throws S3Exception --> Line_74 $$ return result [CD]
