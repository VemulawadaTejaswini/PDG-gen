Line_2 $$ private void zip(FileHolder fileHolder, int zipCompressionLevel) --> Line_3 $$ byte[] buffer = new byte[BUFFER_SIZE] [CD]
Line_2 $$ private void zip(FileHolder fileHolder, int zipCompressionLevel) --> Line_4 $$ int bytes_read [CD]
Line_2 $$ private void zip(FileHolder fileHolder, int zipCompressionLevel) --> Line_5 $$ if (fileHolder.selectedFileList.size() == 0) [CD]
Line_5 $$ if (fileHolder.selectedFileList.size() == 0) --> Line_6 $$ return [CD]
Line_2 $$ private void zip(FileHolder fileHolder, int zipCompressionLevel) --> Line_8 $$ File zipDestFile = new File(fileHolder.destFiles[0]) [CD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_12 $$ File selectedFile = fileHolder.selectedFileList.get(i) [CD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_12 $$ File selectedFile = fileHolder.selectedFileList.get(i) [FD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_13 $$ super.currentObjBeingProcessed = selectedFile [CD]
Line_12 $$ File selectedFile = fileHolder.selectedFileList.get(i) --> Line_13 $$ super.currentObjBeingProcessed = selectedFile [FD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_14 $$ this.inStream = new FileInputStream(selectedFile) [CD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_15 $$ ZipEntry entry = new ZipEntry(selectedFile.getName()) [CD]
Line_12 $$ File selectedFile = fileHolder.selectedFileList.get(i) --> Line_15 $$ ZipEntry entry = new ZipEntry(selectedFile.getName()) [FD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_16 $$ outStream.setLevel(zipCompressionLevel) [CD]
Line_10 $$ ZipOutputStream outStream = new ZipOutputStream(new FileOutputStream(zipDestFile)) --> Line_16 $$ outStream.setLevel(zipCompressionLevel) [FD]
Line_2 $$ private void zip(FileHolder fileHolder, int zipCompressionLevel) --> Line_16 $$ outStream.setLevel(zipCompressionLevel) [FD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_17 $$ outStream.putNextEntry(entry) [CD]
Line_10 $$ ZipOutputStream outStream = new ZipOutputStream(new FileOutputStream(zipDestFile)) --> Line_17 $$ outStream.putNextEntry(entry) [FD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_18 $$ while ((bytes_read = this.inStream.read(buffer)) != -1) [CD]
Line_4 $$ int bytes_read --> Line_18 $$ while ((bytes_read = this.inStream.read(buffer)) != -1) [FD]
Line_3 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_18 $$ while ((bytes_read = this.inStream.read(buffer)) != -1) [FD]
Line_18 $$ while ((bytes_read = this.inStream.read(buffer)) != -1) --> Line_19 $$ outStream.write(buffer, 0, bytes_read) [CD]
Line_18 $$ while ((bytes_read = this.inStream.read(buffer)) != -1) --> Line_19 $$ outStream.write(buffer, 0, bytes_read) [FD]
Line_10 $$ ZipOutputStream outStream = new ZipOutputStream(new FileOutputStream(zipDestFile)) --> Line_19 $$ outStream.write(buffer, 0, bytes_read) [FD]
Line_3 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_19 $$ outStream.write(buffer, 0, bytes_read) [FD]
Line_4 $$ int bytes_read --> Line_19 $$ outStream.write(buffer, 0, bytes_read) [FD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_21 $$ outStream.closeEntry() [CD]
Line_10 $$ ZipOutputStream outStream = new ZipOutputStream(new FileOutputStream(zipDestFile)) --> Line_21 $$ outStream.closeEntry() [FD]
Line_11 $$ for (int i = 0; i < fileHolder.selectedFileList.size(); i++) --> Line_22 $$ this.inStream.close() [CD]
Line_10 $$ ZipOutputStream outStream = new ZipOutputStream(new FileOutputStream(zipDestFile)) --> Line_24 $$ outStream.close() [FD]
Line_2 $$ private void zip(FileHolder fileHolder, int zipCompressionLevel) --> Line_31 $$ return [CD]
