Line_2 $$ public boolean createProject(String projectName, String export) --> Line_3 $$ IProgressMonitor progressMonitor = new NullProgressMonitor() [CD]
Line_2 $$ public boolean createProject(String projectName, String export) --> Line_4 $$ IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot() [CD]
Line_2 $$ public boolean createProject(String projectName, String export) --> Line_5 $$ IProject project = root.getProject(projectName) [CD]
Line_2 $$ public boolean createProject(String projectName, String export) --> Line_5 $$ IProject project = root.getProject(projectName) [FD]
Line_4 $$ IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot() --> Line_5 $$ IProject project = root.getProject(projectName) [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_7 $$ if (!project.exists()) [FD]
Line_7 $$ if (!project.exists()) --> Line_8 $$ project.create(progressMonitor) [CD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_8 $$ project.create(progressMonitor) [FD]
Line_3 $$ IProgressMonitor progressMonitor = new NullProgressMonitor() --> Line_8 $$ project.create(progressMonitor) [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_10 $$ project.open(progressMonitor) [FD]
Line_3 $$ IProgressMonitor progressMonitor = new NullProgressMonitor() --> Line_10 $$ project.open(progressMonitor) [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_11 $$ IProjectDescription description = project.getDescription() [FD]
Line_11 $$ IProjectDescription description = project.getDescription() --> Line_12 $$ description.setNatureIds(new String[] [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_13 $$ project.setDescription(description, progressMonitor) [FD]
Line_11 $$ IProjectDescription description = project.getDescription() --> Line_13 $$ project.setDescription(description, progressMonitor) [FD]
Line_3 $$ IProgressMonitor progressMonitor = new NullProgressMonitor() --> Line_13 $$ project.setDescription(description, progressMonitor) [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_14 $$ IJavaProject javaProject = JavaCore.create(project) [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_15 $$ IFolder binFolder = project.getFolder("bin") [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_16 $$ IFolder outputFolder = project.getFolder(export) [FD]
Line_2 $$ public boolean createProject(String projectName, String export) --> Line_16 $$ IFolder outputFolder = project.getFolder(export) [FD]
Line_15 $$ IFolder binFolder = project.getFolder("bin") --> Line_17 $$ if (!binFolder.exists()) [FD]
Line_17 $$ if (!binFolder.exists()) --> Line_18 $$ binFolder.create(false, true, null) [CD]
Line_15 $$ IFolder binFolder = project.getFolder("bin") --> Line_18 $$ binFolder.create(false, true, null) [FD]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_20 $$ javaProject.setOutputLocation(outputFolder.getFullPath(), progressMonitor) [FD]
Line_3 $$ IProgressMonitor progressMonitor = new NullProgressMonitor() --> Line_20 $$ javaProject.setOutputLocation(outputFolder.getFullPath(), progressMonitor) [FD]
Line_16 $$ IFolder outputFolder = project.getFolder(export) --> Line_20 $$ javaProject.setOutputLocation(outputFolder.getFullPath(), progressMonitor) [FD]
Line_22 $$ IVMInstall vmInstall = JavaRuntime.getDefaultVMInstall() --> Line_23 $$ LibraryLocation[] locations = JavaRuntime.getLibraryLocations(vmInstall) [FD]
Line_24 $$ for (LibraryLocation element : locations) --> Line_25 $$ entries.add(JavaCore.newLibraryEntry(element.getSystemLibraryPath(), null, null)) [FD]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_27 $$ javaProject.setRawClasspath(entries.toArray(new IClasspathEntry[entries.size()]), null) [FD]
Line_5 $$ IProject project = root.getProject(projectName) --> Line_28 $$ IFolder sourceFolder = project.getFolder("src") [FD]
Line_28 $$ IFolder sourceFolder = project.getFolder("src") --> Line_29 $$ if (!sourceFolder.exists()) [FD]
Line_29 $$ if (!sourceFolder.exists()) --> Line_30 $$ sourceFolder.create(false, true, null) [CD]
Line_28 $$ IFolder sourceFolder = project.getFolder("src") --> Line_30 $$ sourceFolder.create(false, true, null) [FD]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_32 $$ IPackageFragmentRoot rootfolder = javaProject.getPackageFragmentRoot(sourceFolder) [FD]
Line_28 $$ IFolder sourceFolder = project.getFolder("src") --> Line_32 $$ IPackageFragmentRoot rootfolder = javaProject.getPackageFragmentRoot(sourceFolder) [FD]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_33 $$ IClasspathEntry[] oldEntries = javaProject.getRawClasspath() [FD]
Line_32 $$ IPackageFragmentRoot rootfolder = javaProject.getPackageFragmentRoot(sourceFolder) --> Line_36 $$ newEntries[oldEntries.length] = JavaCore.newSourceEntry(rootfolder.getPath()) [FD]
Line_14 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_37 $$ javaProject.setRawClasspath(newEntries, null) [FD]
Line_32 $$ IPackageFragmentRoot rootfolder = javaProject.getPackageFragmentRoot(sourceFolder) --> Line_39 $$ if (rootfolder.getPackageFragment("") == null) [FD]
Line_39 $$ if (rootfolder.getPackageFragment("") == null) --> Line_40 $$ pack = rootfolder.createPackageFragment("", true, progressMonitor) [CD]
Line_38 $$ IPackageFragment pack --> Line_40 $$ pack = rootfolder.createPackageFragment("", true, progressMonitor) [FD]
Line_32 $$ IPackageFragmentRoot rootfolder = javaProject.getPackageFragmentRoot(sourceFolder) --> Line_40 $$ pack = rootfolder.createPackageFragment("", true, progressMonitor) [FD]
Line_3 $$ IProgressMonitor progressMonitor = new NullProgressMonitor() --> Line_40 $$ pack = rootfolder.createPackageFragment("", true, progressMonitor) [FD]
Line_39 $$ if (rootfolder.getPackageFragment("") == null) --> Line_42 $$ pack = rootfolder.getPackageFragment("") [CD]
Line_38 $$ IPackageFragment pack --> Line_42 $$ pack = rootfolder.getPackageFragment("") [FD]
Line_40 $$ pack = rootfolder.createPackageFragment("", true, progressMonitor) --> Line_42 $$ pack = rootfolder.getPackageFragment("") [FD]
Line_32 $$ IPackageFragmentRoot rootfolder = javaProject.getPackageFragmentRoot(sourceFolder) --> Line_42 $$ pack = rootfolder.getPackageFragment("") [FD]
Line_44 $$ StringBuffer buffer = new StringBuffer() --> Line_45 $$ buffer.append("\n") [FD]
Line_44 $$ StringBuffer buffer = new StringBuffer() --> Line_46 $$ buffer.append(source) [FD]
Line_38 $$ IPackageFragment pack --> Line_47 $$ ICompilationUnit cu = pack.createCompilationUnit("ProcessingApplet.java", buffer.toString(), false, null) [FD]
Line_40 $$ pack = rootfolder.createPackageFragment("", true, progressMonitor) --> Line_47 $$ ICompilationUnit cu = pack.createCompilationUnit("ProcessingApplet.java", buffer.toString(), false, null) [FD]
Line_42 $$ pack = rootfolder.getPackageFragment("") --> Line_47 $$ ICompilationUnit cu = pack.createCompilationUnit("ProcessingApplet.java", buffer.toString(), false, null) [FD]
Line_44 $$ StringBuffer buffer = new StringBuffer() --> Line_47 $$ ICompilationUnit cu = pack.createCompilationUnit("ProcessingApplet.java", buffer.toString(), false, null) [FD]
Line_2 $$ public boolean createProject(String projectName, String export) --> Line_52 $$ return false [CD]
