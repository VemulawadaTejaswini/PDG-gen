Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_3 $$ ActionMessages resultMsg = new ActionMessages() [CD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_4 $$ ActionForward forward = mapping.findForward("weblogEdit.page") [CD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_4 $$ ActionForward forward = mapping.findForward("weblogEdit.page") [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_5 $$ ActionErrors errors = new ActionErrors() [CD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_6 $$ WeblogEntryData entry = null [CD]
Line_9 $$ String entryid = form.getId() --> Line_10 $$ if (entryid == null) [FD]
Line_10 $$ if (entryid == null) --> Line_11 $$ entryid = request.getParameter(RollerRequest.WEBLOGENTRYID_KEY) [CD]
Line_9 $$ String entryid = form.getId() --> Line_11 $$ entryid = request.getParameter(RollerRequest.WEBLOGENTRYID_KEY) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_11 $$ entryid = request.getParameter(RollerRequest.WEBLOGENTRYID_KEY) [FD]
Line_13 $$ Roller roller = RollerFactory.getRoller() --> Line_15 $$ WeblogManager wmgr = roller.getWeblogManager() [FD]
Line_15 $$ WeblogManager wmgr = roller.getWeblogManager() --> Line_16 $$ entry = wmgr.getWeblogEntry(entryid) [FD]
Line_9 $$ String entryid = form.getId() --> Line_16 $$ entry = wmgr.getWeblogEntry(entryid) [FD]
Line_11 $$ entryid = request.getParameter(RollerRequest.WEBLOGENTRYID_KEY) --> Line_16 $$ entry = wmgr.getWeblogEntry(entryid) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_17 $$ RollerSession rses = RollerSession.getRollerSession(request) [FD]
Line_17 $$ RollerSession rses = RollerSession.getRollerSession(request) --> Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_19 $$ PagePluginManager ppmgr = roller.getPagePluginManager() [CD]
Line_13 $$ Roller roller = RollerFactory.getRoller() --> Line_19 $$ PagePluginManager ppmgr = roller.getPagePluginManager() [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_20 $$ Map plugins = ppmgr.createAndInitPagePlugins(entry.getWebsite(), RollerContext.getRollerContext().getServletContext(), RollerContext.getRollerContext().getAbsoluteContextUrl(request), new VelocityContext()) [CD]
Line_19 $$ PagePluginManager ppmgr = roller.getPagePluginManager() --> Line_20 $$ Map plugins = ppmgr.createAndInitPagePlugins(entry.getWebsite(), RollerContext.getRollerContext().getServletContext(), RollerContext.getRollerContext().getAbsoluteContextUrl(request), new VelocityContext()) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_20 $$ Map plugins = ppmgr.createAndInitPagePlugins(entry.getWebsite(), RollerContext.getRollerContext().getServletContext(), RollerContext.getRollerContext().getAbsoluteContextUrl(request), new VelocityContext()) [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_21 $$ String content = "" [CD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_22 $$ if (!StringUtils.isEmpty(entry.getText())) [CD]
Line_22 $$ if (!StringUtils.isEmpty(entry.getText())) --> Line_23 $$ content = entry.getText() [CD]
Line_21 $$ String content = "" --> Line_23 $$ content = entry.getText() [FD]
Line_22 $$ if (!StringUtils.isEmpty(entry.getText())) --> Line_25 $$ content = entry.getSummary() [CD]
Line_21 $$ String content = "" --> Line_25 $$ content = entry.getSummary() [FD]
Line_23 $$ content = entry.getText() --> Line_25 $$ content = entry.getSummary() [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_27 $$ content = ppmgr.applyPagePlugins(entry, plugins, content, true) [CD]
Line_21 $$ String content = "" --> Line_27 $$ content = ppmgr.applyPagePlugins(entry, plugins, content, true) [FD]
Line_23 $$ content = entry.getText() --> Line_27 $$ content = ppmgr.applyPagePlugins(entry, plugins, content, true) [FD]
Line_25 $$ content = entry.getSummary() --> Line_27 $$ content = ppmgr.applyPagePlugins(entry, plugins, content, true) [FD]
Line_19 $$ PagePluginManager ppmgr = roller.getPagePluginManager() --> Line_27 $$ content = ppmgr.applyPagePlugins(entry, plugins, content, true) [FD]
Line_20 $$ Map plugins = ppmgr.createAndInitPagePlugins(entry.getWebsite(), RollerContext.getRollerContext().getServletContext(), RollerContext.getRollerContext().getAbsoluteContextUrl(request), new VelocityContext()) --> Line_27 $$ content = ppmgr.applyPagePlugins(entry, plugins, content, true) [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_28 $$ String title = entry.getTitle() [CD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_29 $$ String excerpt = StringUtils.left(Utilities.removeHTML(content), 255) [CD]
Line_21 $$ String content = "" --> Line_29 $$ String excerpt = StringUtils.left(Utilities.removeHTML(content), 255) [FD]
Line_23 $$ content = entry.getText() --> Line_29 $$ String excerpt = StringUtils.left(Utilities.removeHTML(content), 255) [FD]
Line_25 $$ content = entry.getSummary() --> Line_29 $$ String excerpt = StringUtils.left(Utilities.removeHTML(content), 255) [FD]
Line_27 $$ content = ppmgr.applyPagePlugins(entry, plugins, content, true) --> Line_29 $$ String excerpt = StringUtils.left(Utilities.removeHTML(content), 255) [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_30 $$ String url = rctx.createEntryPermalink(entry, request, true) [CD]
Line_14 $$ RollerContext rctx = RollerContext.getRollerContext() --> Line_30 $$ String url = rctx.createEntryPermalink(entry, request, true) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_30 $$ String url = rctx.createEntryPermalink(entry, request, true) [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_31 $$ String blog_name = entry.getWebsite().getName() [CD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_32 $$ if (form.getTrackbackUrl() != null) [CD]
Line_32 $$ if (form.getTrackbackUrl() != null) --> Line_33 $$ boolean allowTrackback = true [CD]
Line_32 $$ if (form.getTrackbackUrl() != null) --> Line_34 $$ String allowedURLs = RollerConfig.getProperty("trackback.allowedURLs") [CD]
Line_32 $$ if (form.getTrackbackUrl() != null) --> Line_35 $$ if (allowedURLs != null && allowedURLs.trim().length() > 0) [CD]
Line_34 $$ String allowedURLs = RollerConfig.getProperty("trackback.allowedURLs") --> Line_35 $$ if (allowedURLs != null && allowedURLs.trim().length() > 0) [FD]
Line_35 $$ if (allowedURLs != null && allowedURLs.trim().length() > 0) --> Line_36 $$ allowTrackback = false [CD]
Line_33 $$ boolean allowTrackback = true --> Line_36 $$ allowTrackback = false [FD]
Line_35 $$ if (allowedURLs != null && allowedURLs.trim().length() > 0) --> Line_37 $$ String[] splitURLs = allowedURLs.split("\\|\\|") [CD]
Line_34 $$ String allowedURLs = RollerConfig.getProperty("trackback.allowedURLs") --> Line_37 $$ String[] splitURLs = allowedURLs.split("\\|\\|") [FD]
Line_35 $$ if (allowedURLs != null && allowedURLs.trim().length() > 0) --> Line_38 $$ for (int i = 0; i < splitURLs.length; i++) [CD]
Line_38 $$ for (int i = 0; i < splitURLs.length; i++) --> Line_39 $$ Matcher m = Pattern.compile(splitURLs[i]).matcher(form.getTrackbackUrl()) [CD]
Line_38 $$ for (int i = 0; i < splitURLs.length; i++) --> Line_40 $$ if (m.matches()) [CD]
Line_39 $$ Matcher m = Pattern.compile(splitURLs[i]).matcher(form.getTrackbackUrl()) --> Line_40 $$ if (m.matches()) [FD]
Line_40 $$ if (m.matches()) --> Line_41 $$ allowTrackback = true [CD]
Line_33 $$ boolean allowTrackback = true --> Line_41 $$ allowTrackback = true [FD]
Line_36 $$ allowTrackback = false --> Line_41 $$ allowTrackback = true [FD]
Line_32 $$ if (form.getTrackbackUrl() != null) --> Line_46 $$ if (!allowTrackback) [CD]
Line_41 $$ allowTrackback = true --> Line_46 $$ if (!allowTrackback) [FD]
Line_33 $$ boolean allowTrackback = true --> Line_46 $$ if (!allowTrackback) [FD]
Line_36 $$ allowTrackback = false --> Line_46 $$ if (!allowTrackback) [FD]
Line_46 $$ if (!allowTrackback) --> Line_47 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.trackbackNotAllowed")) [CD]
Line_5 $$ ActionErrors errors = new ActionErrors() --> Line_47 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.trackbackNotAllowed")) [FD]
Line_28 $$ String title = entry.getTitle() --> Line_50 $$ String data = URLEncoder.encode("title", "UTF-8") + "=" + URLEncoder.encode(title, "UTF-8") [FD]
Line_50 $$ String data = URLEncoder.encode("title", "UTF-8") + "=" + URLEncoder.encode(title, "UTF-8") --> Line_51 $$ data += ("&" + URLEncoder.encode("excerpt", "UTF-8") + "=" + URLEncoder.encode(excerpt, "UTF-8")) [FD]
Line_29 $$ String excerpt = StringUtils.left(Utilities.removeHTML(content), 255) --> Line_51 $$ data += ("&" + URLEncoder.encode("excerpt", "UTF-8") + "=" + URLEncoder.encode(excerpt, "UTF-8")) [FD]
Line_50 $$ String data = URLEncoder.encode("title", "UTF-8") + "=" + URLEncoder.encode(title, "UTF-8") --> Line_52 $$ data += ("&" + URLEncoder.encode("url", "UTF-8") + "=" + URLEncoder.encode(url, "UTF-8")) [FD]
Line_51 $$ data += ("&" + URLEncoder.encode("excerpt", "UTF-8") + "=" + URLEncoder.encode(excerpt, "UTF-8")) --> Line_52 $$ data += ("&" + URLEncoder.encode("url", "UTF-8") + "=" + URLEncoder.encode(url, "UTF-8")) [FD]
Line_50 $$ String data = URLEncoder.encode("title", "UTF-8") + "=" + URLEncoder.encode(title, "UTF-8") --> Line_53 $$ data += ("&" + URLEncoder.encode("blog_name", "UTF-8") + "=" + URLEncoder.encode(blog_name, "UTF-8")) [FD]
Line_51 $$ data += ("&" + URLEncoder.encode("excerpt", "UTF-8") + "=" + URLEncoder.encode(excerpt, "UTF-8")) --> Line_53 $$ data += ("&" + URLEncoder.encode("blog_name", "UTF-8") + "=" + URLEncoder.encode(blog_name, "UTF-8")) [FD]
Line_52 $$ data += ("&" + URLEncoder.encode("url", "UTF-8") + "=" + URLEncoder.encode(url, "UTF-8")) --> Line_53 $$ data += ("&" + URLEncoder.encode("blog_name", "UTF-8") + "=" + URLEncoder.encode(blog_name, "UTF-8")) [FD]
Line_31 $$ String blog_name = entry.getWebsite().getName() --> Line_53 $$ data += ("&" + URLEncoder.encode("blog_name", "UTF-8") + "=" + URLEncoder.encode(blog_name, "UTF-8")) [FD]
Line_54 $$ URL tburl = new URL(form.getTrackbackUrl()) --> Line_55 $$ HttpURLConnection conn = (HttpURLConnection) tburl.openConnection() [FD]
Line_55 $$ HttpURLConnection conn = (HttpURLConnection) tburl.openConnection() --> Line_56 $$ conn.setDoOutput(true) [FD]
Line_55 $$ HttpURLConnection conn = (HttpURLConnection) tburl.openConnection() --> Line_57 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) [FD]
Line_57 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) --> Line_60 $$ wr.write(data) [FD]
Line_50 $$ String data = URLEncoder.encode("title", "UTF-8") + "=" + URLEncoder.encode(title, "UTF-8") --> Line_60 $$ wr.write(data) [FD]
Line_51 $$ data += ("&" + URLEncoder.encode("excerpt", "UTF-8") + "=" + URLEncoder.encode(excerpt, "UTF-8")) --> Line_60 $$ wr.write(data) [FD]
Line_52 $$ data += ("&" + URLEncoder.encode("url", "UTF-8") + "=" + URLEncoder.encode(url, "UTF-8")) --> Line_60 $$ wr.write(data) [FD]
Line_53 $$ data += ("&" + URLEncoder.encode("blog_name", "UTF-8") + "=" + URLEncoder.encode(blog_name, "UTF-8")) --> Line_60 $$ wr.write(data) [FD]
Line_57 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) --> Line_61 $$ wr.flush() [FD]
Line_58 $$ BufferedReader rd = null --> Line_64 $$ rd = new BufferedReader(new InputStreamReader(conn.getInputStream())) [FD]
Line_55 $$ HttpURLConnection conn = (HttpURLConnection) tburl.openConnection() --> Line_64 $$ rd = new BufferedReader(new InputStreamReader(conn.getInputStream())) [FD]
Line_62 $$ boolean inputAvailable = false --> Line_65 $$ inputAvailable = true [FD]
Line_69 $$ if (inputAvailable) --> Line_70 $$ String line [CD]
Line_69 $$ if (inputAvailable) --> Line_71 $$ StringBuffer resultBuff = new StringBuffer() [CD]
Line_69 $$ if (inputAvailable) --> Line_72 $$ while ((line = rd.readLine()) != null) [CD]
Line_70 $$ String line --> Line_72 $$ while ((line = rd.readLine()) != null) [FD]
Line_58 $$ BufferedReader rd = null --> Line_72 $$ while ((line = rd.readLine()) != null) [FD]
Line_64 $$ rd = new BufferedReader(new InputStreamReader(conn.getInputStream())) --> Line_72 $$ while ((line = rd.readLine()) != null) [FD]
Line_72 $$ while ((line = rd.readLine()) != null) --> Line_73 $$ resultBuff.append(Utilities.escapeHTML(line, true)) [CD]
Line_72 $$ while ((line = rd.readLine()) != null) --> Line_73 $$ resultBuff.append(Utilities.escapeHTML(line, true)) [FD]
Line_71 $$ StringBuffer resultBuff = new StringBuffer() --> Line_73 $$ resultBuff.append(Utilities.escapeHTML(line, true)) [FD]
Line_70 $$ String line --> Line_73 $$ resultBuff.append(Utilities.escapeHTML(line, true)) [FD]
Line_72 $$ while ((line = rd.readLine()) != null) --> Line_74 $$ resultBuff.append("<br />") [CD]
Line_71 $$ StringBuffer resultBuff = new StringBuffer() --> Line_74 $$ resultBuff.append("<br />") [FD]
Line_69 $$ if (inputAvailable) --> Line_76 $$ resultMsg.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("weblogEdit.trackbackResults", resultBuff)) [CD]
Line_3 $$ ActionMessages resultMsg = new ActionMessages() --> Line_76 $$ resultMsg.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("weblogEdit.trackbackResults", resultBuff)) [FD]
Line_55 $$ HttpURLConnection conn = (HttpURLConnection) tburl.openConnection() --> Line_78 $$ if (conn.getResponseCode() > 399) [FD]
Line_78 $$ if (conn.getResponseCode() > 399) --> Line_79 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("weblogEdit.trackbackStatusCodeBad", new Integer(conn.getResponseCode()))) [CD]
Line_5 $$ ActionErrors errors = new ActionErrors() --> Line_79 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("weblogEdit.trackbackStatusCodeBad", new Integer(conn.getResponseCode()))) [FD]
Line_55 $$ HttpURLConnection conn = (HttpURLConnection) tburl.openConnection() --> Line_79 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("weblogEdit.trackbackStatusCodeBad", new Integer(conn.getResponseCode()))) [FD]
Line_78 $$ if (conn.getResponseCode() > 399) --> Line_81 $$ resultMsg.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("weblogEdit.trackbackStatusCodeGood", new Integer(conn.getResponseCode()))) [CD]
Line_3 $$ ActionMessages resultMsg = new ActionMessages() --> Line_81 $$ resultMsg.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("weblogEdit.trackbackStatusCodeGood", new Integer(conn.getResponseCode()))) [FD]
Line_55 $$ HttpURLConnection conn = (HttpURLConnection) tburl.openConnection() --> Line_81 $$ resultMsg.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("weblogEdit.trackbackStatusCodeGood", new Integer(conn.getResponseCode()))) [FD]
Line_57 $$ OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream()) --> Line_84 $$ if (wr != null) [FD]
Line_58 $$ BufferedReader rd = null --> Line_85 $$ if (rd != null) [FD]
Line_64 $$ rd = new BufferedReader(new InputStreamReader(conn.getInputStream())) --> Line_85 $$ if (rd != null) [FD]
Line_5 $$ ActionErrors errors = new ActionErrors() --> Line_88 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.trackback", e)) [FD]
Line_32 $$ if (form.getTrackbackUrl() != null) --> Line_92 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.noTrackbackUrlSpecified")) [CD]
Line_5 $$ ActionErrors errors = new ActionErrors() --> Line_92 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.noTrackbackUrlSpecified")) [FD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_94 $$ form.setTrackbackUrl(null) [CD]
Line_18 $$ if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) --> Line_96 $$ forward = mapping.findForward("access-denied") [CD]
Line_4 $$ ActionForward forward = mapping.findForward("weblogEdit.page") --> Line_96 $$ forward = mapping.findForward("access-denied") [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_96 $$ forward = mapping.findForward("access-denied") [FD]
Line_100 $$ String msg = e.getMessage() --> Line_101 $$ if (msg == null) [FD]
Line_101 $$ if (msg == null) --> Line_102 $$ msg = e.getClass().getName() [CD]
Line_100 $$ String msg = e.getMessage() --> Line_102 $$ msg = e.getClass().getName() [FD]
Line_5 $$ ActionErrors errors = new ActionErrors() --> Line_104 $$ errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.general", msg)) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_106 $$ saveErrors(request, errors) [CD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_106 $$ saveErrors(request, errors) [FD]
Line_5 $$ ActionErrors errors = new ActionErrors() --> Line_106 $$ saveErrors(request, errors) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_107 $$ saveMessages(request, resultMsg) [CD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_107 $$ saveMessages(request, resultMsg) [FD]
Line_3 $$ ActionMessages resultMsg = new ActionMessages() --> Line_107 $$ saveMessages(request, resultMsg) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_108 $$ request.setAttribute("model", new WeblogEntryPageModel(request, response, mapping, (WeblogEntryFormEx) actionForm, WeblogEntryPageModel.EDIT_MODE)) [CD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_108 $$ request.setAttribute("model", new WeblogEntryPageModel(request, response, mapping, (WeblogEntryFormEx) actionForm, WeblogEntryPageModel.EDIT_MODE)) [FD]
Line_2 $$ public ActionForward sendTrackback(ActionMapping mapping, ActionForm actionForm, HttpServletRequest request, HttpServletResponse response) throws RollerException --> Line_109 $$ return forward [CD]
