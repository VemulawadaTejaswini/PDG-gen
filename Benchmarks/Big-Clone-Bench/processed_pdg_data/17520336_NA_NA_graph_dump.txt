Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_3 $$ logger.debug("Beginning document validation ...") [CD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_6 $$ String[] segments = url.split("/") [FD]
Line_5 $$ PropertyMapBuilder builder = new PropertyMapBuilder() --> Line_8 $$ ValidateProperty.ERROR_HANDLER.put(builder, h) [FD]
Line_7 $$ CommentatingErrorHandler h = new CommentatingErrorHandler(commentary, segments[segments.length - 1]) --> Line_8 $$ ValidateProperty.ERROR_HANDLER.put(builder, h) [FD]
Line_5 $$ PropertyMapBuilder builder = new PropertyMapBuilder() --> Line_9 $$ ValidationDriver driver = new ValidationDriver(builder.toPropertyMap()) [FD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_13 $$ byte[] schemaBytes = getSchemaForVersion(ver) [FD]
Line_9 $$ ValidationDriver driver = new ValidationDriver(builder.toPropertyMap()) --> Line_14 $$ driver.loadSchema(new InputSource(new ByteArrayInputStream(schemaBytes))) [FD]
Line_10 $$ InputStream candidateStream = null --> Line_16 $$ candidateStream = conn.getInputStream() [FD]
Line_15 $$ URLConnection conn = new URL(url).openConnection() --> Line_16 $$ candidateStream = conn.getInputStream() [FD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_18 $$ commentary.incIndent() [FD]
Line_9 $$ ValidationDriver driver = new ValidationDriver(builder.toPropertyMap()) --> Line_19 $$ boolean isValid = driver.validate(new InputSource(candidateStream)) [FD]
Line_7 $$ CommentatingErrorHandler h = new CommentatingErrorHandler(commentary, segments[segments.length - 1]) --> Line_20 $$ logger.debug("Errors in instance:" + h.getInstanceErrCount()) [FD]
Line_7 $$ CommentatingErrorHandler h = new CommentatingErrorHandler(commentary, segments[segments.length - 1]) --> Line_21 $$ if (h.getInstanceErrCount() > CommentatingErrorHandler.THRESHOLD) [FD]
Line_21 $$ if (h.getInstanceErrCount() > CommentatingErrorHandler.THRESHOLD) --> Line_22 $$ commentary.addComment("(<i>" + (h.getInstanceErrCount() - CommentatingErrorHandler.THRESHOLD) + " error(s) omitted for the sake of brevity</i>)") [CD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_22 $$ commentary.addComment("(<i>" + (h.getInstanceErrCount() - CommentatingErrorHandler.THRESHOLD) + " error(s) omitted for the sake of brevity</i>)") [FD]
Line_7 $$ CommentatingErrorHandler h = new CommentatingErrorHandler(commentary, segments[segments.length - 1]) --> Line_22 $$ commentary.addComment("(<i>" + (h.getInstanceErrCount() - CommentatingErrorHandler.THRESHOLD) + " error(s) omitted for the sake of brevity</i>)") [FD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_24 $$ commentary.decIndent() [FD]
Line_25 $$ if (isValid) --> Line_26 $$ commentary.addComment("The document is valid") [CD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_26 $$ commentary.addComment("The document is valid") [FD]
Line_25 $$ if (isValid) --> Line_28 $$ commentary.addComment("ERROR", "The document is invalid") [CD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_28 $$ commentary.addComment("ERROR", "The document is invalid") [FD]
Line_2 $$ private void validateODFDoc(String url, String ver, ValidationReport commentary) throws IOException, MalformedURLException --> Line_31 $$ commentary.addComment("FATAL", "The resource is not conformant XML: " + e.getMessage()) [FD]
Line_10 $$ InputStream candidateStream = null --> Line_34 $$ Utils.streamClose(candidateStream) [FD]
Line_16 $$ candidateStream = conn.getInputStream() --> Line_34 $$ Utils.streamClose(candidateStream) [FD]
