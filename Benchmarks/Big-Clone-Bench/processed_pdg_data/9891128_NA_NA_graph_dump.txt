Line_2 $$ private static void readIzvestiyaArticles() throws IOException --> Line_3 $$ CsvReader reader = new CsvReader(new InputStreamReader(IzvestiyaUtil.class.getClassLoader().getResourceAsStream("mathnet_izvestiya.csv")), ';') [CD]
Line_2 $$ private static void readIzvestiyaArticles() throws IOException --> Line_4 $$ reader.setTrimWhitespace(true) [CD]
Line_6 $$ while (reader.readRecord()) --> Line_7 $$ String id = reader.get(0) [CD]
Line_6 $$ while (reader.readRecord()) --> Line_8 $$ String filename = reader.get(1) [CD]
Line_6 $$ while (reader.readRecord()) --> Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.") [CD]
Line_6 $$ while (reader.readRecord()) --> Line_10 $$ String name = st.nextToken() [CD]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.") --> Line_10 $$ String name = st.nextToken() [FD]
Line_6 $$ while (reader.readRecord()) --> Line_11 $$ String volume = st.nextToken() [CD]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.") --> Line_11 $$ String volume = st.nextToken() [FD]
Line_6 $$ while (reader.readRecord()) --> Line_12 $$ String year = st.nextToken() [CD]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.") --> Line_12 $$ String year = st.nextToken() [FD]
Line_6 $$ while (reader.readRecord()) --> Line_13 $$ String extension = st.nextToken() [CD]
Line_9 $$ StringTokenizer st = new StringTokenizer(filename, "-.") --> Line_13 $$ String extension = st.nextToken() [FD]
Line_6 $$ while (reader.readRecord()) --> Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension) [CD]
Line_12 $$ String year = st.nextToken() --> Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension) [FD]
Line_10 $$ String name = st.nextToken() --> Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension) [FD]
Line_11 $$ String volume = st.nextToken() --> Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension) [FD]
Line_13 $$ String extension = st.nextToken() --> Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension) [FD]
Line_6 $$ while (reader.readRecord()) --> Line_15 $$ id2filename.put(id, filepath) [CD]
Line_7 $$ String id = reader.get(0) --> Line_15 $$ id2filename.put(id, filepath) [FD]
Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension) --> Line_15 $$ id2filename.put(id, filepath) [FD]
Line_14 $$ String filepath = String.format("%s/%s/%s-%s.%s", year, volume.length() == 1 ? "0" + volume : volume, name, volume, extension) --> Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX") [FD]
Line_21 $$ String filepath = String.format("%s/%s", INPUT_DIR, entry.getValue()) --> Line_22 $$ filepath = new File(filepath).exists() ? filepath : filepath.replace(".tex", ".TEX") [FD]
Line_23 $$ if (new File(filepath).exists()) --> Line_24 $$ InputStream in = new FileInputStream(filepath) [CD]
Line_23 $$ if (new File(filepath).exists()) --> Line_25 $$ FileOutputStream out = new FileOutputStream(String.format("%s/%s.tex", OUTPUT_DIR, entry.getKey()), false) [CD]
Line_24 $$ InputStream in = new FileInputStream(filepath) --> Line_27 $$ org.apache.commons.io.IOUtils.copy(in, out) [FD]
Line_25 $$ FileOutputStream out = new FileOutputStream(String.format("%s/%s.tex", OUTPUT_DIR, entry.getKey()), false) --> Line_27 $$ org.apache.commons.io.IOUtils.copy(in, out) [FD]
Line_24 $$ InputStream in = new FileInputStream(filepath) --> Line_29 $$ org.apache.commons.io.IOUtils.closeQuietly(in) [FD]
Line_25 $$ FileOutputStream out = new FileOutputStream(String.format("%s/%s.tex", OUTPUT_DIR, entry.getKey()), false) --> Line_30 $$ org.apache.commons.io.IOUtils.closeQuietly(out) [FD]
Line_23 $$ if (new File(filepath).exists()) --> Line_33 $$ logger.log(Level.INFO, "File with the path=" + filepath + " doesn't exist") [CD]
