Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_3 $$ this.urlPath = urlPath [CD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_3 $$ this.urlPath = urlPath [FD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_4 $$ this.type = type [CD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_4 $$ this.type = type [FD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_5 $$ JmeBinaryReader jbr = new JmeBinaryReader() [CD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_6 $$ setProperties(jbr, parentAttributes) [CD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_6 $$ setProperties(jbr, parentAttributes) [FD]
Line_5 $$ JmeBinaryReader jbr = new JmeBinaryReader() --> Line_6 $$ setProperties(jbr, parentAttributes) [FD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_7 $$ InputStream loaderInput = urlPath.openStream() [CD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_7 $$ InputStream loaderInput = urlPath.openStream() [FD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_8 $$ if (type.equals("xml")) [CD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_8 $$ if (type.equals("xml")) [FD]
Line_8 $$ if (type.equals("xml")) --> Line_9 $$ XMLtoBinary xtb = new XMLtoBinary() [CD]
Line_8 $$ if (type.equals("xml")) --> Line_10 $$ ByteArrayOutputStream BO = new ByteArrayOutputStream() [CD]
Line_8 $$ if (type.equals("xml")) --> Line_11 $$ xtb.sendXMLtoBinary(loaderInput, BO) [CD]
Line_9 $$ XMLtoBinary xtb = new XMLtoBinary() --> Line_11 $$ xtb.sendXMLtoBinary(loaderInput, BO) [FD]
Line_7 $$ InputStream loaderInput = urlPath.openStream() --> Line_11 $$ xtb.sendXMLtoBinary(loaderInput, BO) [FD]
Line_10 $$ ByteArrayOutputStream BO = new ByteArrayOutputStream() --> Line_11 $$ xtb.sendXMLtoBinary(loaderInput, BO) [FD]
Line_8 $$ if (type.equals("xml")) --> Line_12 $$ loaderInput = new ByteArrayInputStream(BO.toByteArray()) [CD]
Line_7 $$ InputStream loaderInput = urlPath.openStream() --> Line_12 $$ loaderInput = new ByteArrayInputStream(BO.toByteArray()) [FD]
Line_10 $$ ByteArrayOutputStream BO = new ByteArrayOutputStream() --> Line_12 $$ loaderInput = new ByteArrayInputStream(BO.toByteArray()) [FD]
Line_8 $$ if (type.equals("xml")) --> Line_13 $$ if (!type.equals("binary")) [CD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_13 $$ if (!type.equals("binary")) [FD]
Line_2 $$ public void loadFromURLPath(String type, URL urlPath, HashMap parentAttributes) throws IOException --> Line_14 $$ jbr.loadBinaryFormat(this, loaderInput) [CD]
Line_5 $$ JmeBinaryReader jbr = new JmeBinaryReader() --> Line_14 $$ jbr.loadBinaryFormat(this, loaderInput) [FD]
Line_7 $$ InputStream loaderInput = urlPath.openStream() --> Line_14 $$ jbr.loadBinaryFormat(this, loaderInput) [FD]
Line_12 $$ loaderInput = new ByteArrayInputStream(BO.toByteArray()) --> Line_14 $$ jbr.loadBinaryFormat(this, loaderInput) [FD]
