Line_2 $$ public void createZip(String baseDir, String objFileName) throws Exception --> Line_3 $$ logger.info("createZip: [ " + baseDir + "]   [" + objFileName + "]") [CD]
Line_2 $$ public void createZip(String baseDir, String objFileName) throws Exception --> Line_4 $$ baseDir = baseDir + "/" + timesmpt [CD]
Line_2 $$ public void createZip(String baseDir, String objFileName) throws Exception --> Line_4 $$ baseDir = baseDir + "/" + timesmpt [FD]
Line_2 $$ public void createZip(String baseDir, String objFileName) throws Exception --> Line_5 $$ File folderObject = new File(baseDir) [CD]
Line_2 $$ public void createZip(String baseDir, String objFileName) throws Exception --> Line_6 $$ if (folderObject.exists()) [CD]
Line_5 $$ File folderObject = new File(baseDir) --> Line_6 $$ if (folderObject.exists()) [FD]
Line_6 $$ if (folderObject.exists()) --> Line_7 $$ List<?> fileList = getSubFiles(new File(baseDir)) [CD]
Line_6 $$ if (folderObject.exists()) --> Line_8 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(objFileName)) [CD]
Line_6 $$ if (folderObject.exists()) --> Line_9 $$ ZipEntry ze = null [CD]
Line_6 $$ if (folderObject.exists()) --> Line_10 $$ byte[] buf = new byte[1024] [CD]
Line_6 $$ if (folderObject.exists()) --> Line_11 $$ int readLen = 0 [CD]
Line_6 $$ if (folderObject.exists()) --> Line_12 $$ for (int i = 0; i < fileList.size(); i++) [CD]
Line_7 $$ List<?> fileList = getSubFiles(new File(baseDir)) --> Line_12 $$ for (int i = 0; i < fileList.size(); i++) [FD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_13 $$ File f = (File) fileList.get(i) [CD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_13 $$ File f = (File) fileList.get(i) [FD]
Line_7 $$ List<?> fileList = getSubFiles(new File(baseDir)) --> Line_13 $$ File f = (File) fileList.get(i) [FD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_14 $$ ze = new ZipEntry(getAbsFileName(baseDir, f)) [CD]
Line_2 $$ public void createZip(String baseDir, String objFileName) throws Exception --> Line_14 $$ ze = new ZipEntry(getAbsFileName(baseDir, f)) [FD]
Line_4 $$ baseDir = baseDir + "/" + timesmpt --> Line_14 $$ ze = new ZipEntry(getAbsFileName(baseDir, f)) [FD]
Line_13 $$ File f = (File) fileList.get(i) --> Line_14 $$ ze = new ZipEntry(getAbsFileName(baseDir, f)) [FD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_15 $$ ze.setSize(f.length()) [CD]
Line_13 $$ File f = (File) fileList.get(i) --> Line_15 $$ ze.setSize(f.length()) [FD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_16 $$ ze.setTime(f.lastModified()) [CD]
Line_13 $$ File f = (File) fileList.get(i) --> Line_16 $$ ze.setTime(f.lastModified()) [FD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_17 $$ zos.putNextEntry(ze) [CD]
Line_8 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(objFileName)) --> Line_17 $$ zos.putNextEntry(ze) [FD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_18 $$ InputStream is = new BufferedInputStream(new FileInputStream(f)) [CD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_19 $$ while ((readLen = is.read(buf, 0, 1024)) != -1) [CD]
Line_11 $$ int readLen = 0 --> Line_19 $$ while ((readLen = is.read(buf, 0, 1024)) != -1) [FD]
Line_18 $$ InputStream is = new BufferedInputStream(new FileInputStream(f)) --> Line_19 $$ while ((readLen = is.read(buf, 0, 1024)) != -1) [FD]
Line_10 $$ byte[] buf = new byte[1024] --> Line_19 $$ while ((readLen = is.read(buf, 0, 1024)) != -1) [FD]
Line_19 $$ while ((readLen = is.read(buf, 0, 1024)) != -1) --> Line_20 $$ zos.write(buf, 0, readLen) [CD]
Line_19 $$ while ((readLen = is.read(buf, 0, 1024)) != -1) --> Line_20 $$ zos.write(buf, 0, readLen) [FD]
Line_8 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(objFileName)) --> Line_20 $$ zos.write(buf, 0, readLen) [FD]
Line_10 $$ byte[] buf = new byte[1024] --> Line_20 $$ zos.write(buf, 0, readLen) [FD]
Line_11 $$ int readLen = 0 --> Line_20 $$ zos.write(buf, 0, readLen) [FD]
Line_12 $$ for (int i = 0; i < fileList.size(); i++) --> Line_22 $$ is.close() [CD]
Line_18 $$ InputStream is = new BufferedInputStream(new FileInputStream(f)) --> Line_22 $$ is.close() [FD]
Line_6 $$ if (folderObject.exists()) --> Line_24 $$ zos.close() [CD]
Line_8 $$ ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(objFileName)) --> Line_24 $$ zos.close() [FD]
