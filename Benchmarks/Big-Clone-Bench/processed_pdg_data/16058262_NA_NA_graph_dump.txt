Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_3 $$ boolean result = false [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_4 $$ if (LOGGER.isLoggable(Level.FINE)) [CD]
Line_4 $$ if (LOGGER.isLoggable(Level.FINE)) --> Line_5 $$ LOGGER.fine("Copying file " + src + " to " + dest + " extent " + extent + " exists " + dest.exists()) [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_5 $$ LOGGER.fine("Copying file " + src + " to " + dest + " extent " + extent + " exists " + dest.exists()) [FD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_7 $$ if (dest.exists()) [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_7 $$ if (dest.exists()) [FD]
Line_7 $$ if (dest.exists()) --> Line_8 $$ if (overwrite) [CD]
Line_8 $$ if (overwrite) --> Line_9 $$ dest.delete() [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_9 $$ dest.delete() [FD]
Line_8 $$ if (overwrite) --> Line_10 $$ LOGGER.finer(dest.getAbsolutePath() + " removed before copy.") [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_10 $$ LOGGER.finer(dest.getAbsolutePath() + " removed before copy.") [FD]
Line_8 $$ if (overwrite) --> Line_12 $$ return result [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_15 $$ FileInputStream fis = null [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_16 $$ FileOutputStream fos = null [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_17 $$ FileChannel fcin = null [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_18 $$ FileChannel fcout = null [CD]
Line_15 $$ FileInputStream fis = null --> Line_20 $$ fis = new FileInputStream(src) [FD]
Line_16 $$ FileOutputStream fos = null --> Line_21 $$ fos = new FileOutputStream(dest) [FD]
Line_17 $$ FileChannel fcin = null --> Line_22 $$ fcin = fis.getChannel() [FD]
Line_15 $$ FileInputStream fis = null --> Line_22 $$ fcin = fis.getChannel() [FD]
Line_20 $$ fis = new FileInputStream(src) --> Line_22 $$ fcin = fis.getChannel() [FD]
Line_18 $$ FileChannel fcout = null --> Line_23 $$ fcout = fos.getChannel() [FD]
Line_16 $$ FileOutputStream fos = null --> Line_23 $$ fcout = fos.getChannel() [FD]
Line_21 $$ fos = new FileOutputStream(dest) --> Line_23 $$ fcout = fos.getChannel() [FD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_24 $$ if (extent < 0) [FD]
Line_24 $$ if (extent < 0) --> Line_25 $$ extent = fcin.size() [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_25 $$ extent = fcin.size() [FD]
Line_17 $$ FileChannel fcin = null --> Line_25 $$ extent = fcin.size() [FD]
Line_22 $$ fcin = fis.getChannel() --> Line_25 $$ extent = fcin.size() [FD]
Line_17 $$ FileChannel fcin = null --> Line_27 $$ long trans = fcin.transferTo(0, extent, fcout) [FD]
Line_22 $$ fcin = fis.getChannel() --> Line_27 $$ long trans = fcin.transferTo(0, extent, fcout) [FD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_27 $$ long trans = fcin.transferTo(0, extent, fcout) [FD]
Line_25 $$ extent = fcin.size() --> Line_27 $$ long trans = fcin.transferTo(0, extent, fcout) [FD]
Line_18 $$ FileChannel fcout = null --> Line_27 $$ long trans = fcin.transferTo(0, extent, fcout) [FD]
Line_23 $$ fcout = fos.getChannel() --> Line_27 $$ long trans = fcin.transferTo(0, extent, fcout) [FD]
Line_27 $$ long trans = fcin.transferTo(0, extent, fcout) --> Line_28 $$ if (trans < extent) [FD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_28 $$ if (trans < extent) [FD]
Line_25 $$ extent = fcin.size() --> Line_28 $$ if (trans < extent) [FD]
Line_28 $$ if (trans < extent) --> Line_29 $$ result = false [CD]
Line_3 $$ boolean result = false --> Line_29 $$ result = false [FD]
Line_3 $$ boolean result = false --> Line_31 $$ result = true [FD]
Line_29 $$ result = false --> Line_31 $$ result = true [FD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_33 $$ String message = "Copying " + src.getAbsolutePath() + " to " + dest.getAbsolutePath() + " with extent " + extent + " got IOE: " + e.getMessage() [FD]
Line_34 $$ if (e.getMessage().equals("Invalid argument")) --> Line_35 $$ LOGGER.severe("Failed copy, trying workaround: " + message) [CD]
Line_34 $$ if (e.getMessage().equals("Invalid argument")) --> Line_36 $$ workaroundCopyFile(src, dest) [CD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_36 $$ workaroundCopyFile(src, dest) [FD]
Line_34 $$ if (e.getMessage().equals("Invalid argument")) --> Line_38 $$ IOException newE = new IOException(message) [CD]
Line_34 $$ if (e.getMessage().equals("Invalid argument")) --> Line_39 $$ newE.setStackTrace(e.getStackTrace()) [CD]
Line_38 $$ IOException newE = new IOException(message) --> Line_39 $$ newE.setStackTrace(e.getStackTrace()) [FD]
Line_17 $$ FileChannel fcin = null --> Line_43 $$ if (fcin != null) [FD]
Line_22 $$ fcin = fis.getChannel() --> Line_43 $$ if (fcin != null) [FD]
Line_43 $$ if (fcin != null) --> Line_44 $$ fcin.close() [CD]
Line_17 $$ FileChannel fcin = null --> Line_44 $$ fcin.close() [FD]
Line_22 $$ fcin = fis.getChannel() --> Line_44 $$ fcin.close() [FD]
Line_18 $$ FileChannel fcout = null --> Line_46 $$ if (fcout != null) [FD]
Line_23 $$ fcout = fos.getChannel() --> Line_46 $$ if (fcout != null) [FD]
Line_46 $$ if (fcout != null) --> Line_47 $$ fcout.close() [CD]
Line_18 $$ FileChannel fcout = null --> Line_47 $$ fcout.close() [FD]
Line_23 $$ fcout = fos.getChannel() --> Line_47 $$ fcout.close() [FD]
Line_15 $$ FileInputStream fis = null --> Line_49 $$ if (fis != null) [FD]
Line_20 $$ fis = new FileInputStream(src) --> Line_49 $$ if (fis != null) [FD]
Line_49 $$ if (fis != null) --> Line_50 $$ fis.close() [CD]
Line_15 $$ FileInputStream fis = null --> Line_50 $$ fis.close() [FD]
Line_20 $$ fis = new FileInputStream(src) --> Line_50 $$ fis.close() [FD]
Line_16 $$ FileOutputStream fos = null --> Line_52 $$ if (fos != null) [FD]
Line_21 $$ fos = new FileOutputStream(dest) --> Line_52 $$ if (fos != null) [FD]
Line_52 $$ if (fos != null) --> Line_53 $$ fos.close() [CD]
Line_16 $$ FileOutputStream fos = null --> Line_53 $$ fos.close() [FD]
Line_21 $$ fos = new FileOutputStream(dest) --> Line_53 $$ fos.close() [FD]
Line_2 $$ public static boolean copyFile(final File src, final File dest, long extent, final boolean overwrite) throws FileNotFoundException, IOException --> Line_56 $$ return result [CD]
