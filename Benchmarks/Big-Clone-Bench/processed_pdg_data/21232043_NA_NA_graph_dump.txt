Line_2 $$ public File call() throws IOException --> Line_3 $$ HttpURLConnection conn = null [CD]
Line_2 $$ public File call() throws IOException --> Line_4 $$ ReadableByteChannel fileDownloading = null [CD]
Line_2 $$ public File call() throws IOException --> Line_5 $$ FileChannel fileWriting = null [CD]
Line_3 $$ HttpURLConnection conn = null --> Line_7 $$ conn = (HttpURLConnection) url.openConnection() [FD]
Line_8 $$ if (size == -1) --> Line_9 $$ size = conn.getContentLength() [CD]
Line_3 $$ HttpURLConnection conn = null --> Line_9 $$ size = conn.getContentLength() [FD]
Line_7 $$ conn = (HttpURLConnection) url.openConnection() --> Line_9 $$ size = conn.getContentLength() [FD]
Line_4 $$ ReadableByteChannel fileDownloading = null --> Line_11 $$ fileDownloading = Channels.newChannel(conn.getInputStream()) [FD]
Line_3 $$ HttpURLConnection conn = null --> Line_11 $$ fileDownloading = Channels.newChannel(conn.getInputStream()) [FD]
Line_7 $$ conn = (HttpURLConnection) url.openConnection() --> Line_11 $$ fileDownloading = Channels.newChannel(conn.getInputStream()) [FD]
Line_5 $$ FileChannel fileWriting = null --> Line_12 $$ fileWriting = new FileOutputStream(file).getChannel() [FD]
Line_13 $$ long left = size --> Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) [FD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_16 $$ if (left < BLOCK_SIZE) [CD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_16 $$ if (left < BLOCK_SIZE) [FD]
Line_13 $$ long left = size --> Line_16 $$ if (left < BLOCK_SIZE) [FD]
Line_16 $$ if (left < BLOCK_SIZE) --> Line_17 $$ chunkSize = left [CD]
Line_14 $$ long chunkSize = BLOCK_SIZE --> Line_17 $$ chunkSize = left [FD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_17 $$ chunkSize = left [FD]
Line_13 $$ long left = size --> Line_17 $$ chunkSize = left [FD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [CD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
Line_5 $$ FileChannel fileWriting = null --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
Line_12 $$ fileWriting = new FileOutputStream(file).getChannel() --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
Line_4 $$ ReadableByteChannel fileDownloading = null --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
Line_11 $$ fileDownloading = Channels.newChannel(conn.getInputStream()) --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
Line_17 $$ chunkSize = left --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
Line_14 $$ long chunkSize = BLOCK_SIZE --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_20 $$ downloaded += chunkSize [CD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_20 $$ downloaded += chunkSize [FD]
Line_17 $$ chunkSize = left --> Line_20 $$ downloaded += chunkSize [FD]
Line_14 $$ long chunkSize = BLOCK_SIZE --> Line_20 $$ downloaded += chunkSize [FD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_21 $$ setProgress(downloaded) [CD]
Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) --> Line_21 $$ setProgress(downloaded) [FD]
Line_20 $$ downloaded += chunkSize --> Line_21 $$ setProgress(downloaded) [FD]
Line_24 $$ if (file != null) --> Line_25 $$ file.deleteOnExit() [CD]
Line_3 $$ HttpURLConnection conn = null --> Line_27 $$ if (conn != null) [FD]
Line_7 $$ conn = (HttpURLConnection) url.openConnection() --> Line_27 $$ if (conn != null) [FD]
Line_27 $$ if (conn != null) --> Line_28 $$ conn.disconnect() [CD]
Line_3 $$ HttpURLConnection conn = null --> Line_28 $$ conn.disconnect() [FD]
Line_7 $$ conn = (HttpURLConnection) url.openConnection() --> Line_28 $$ conn.disconnect() [FD]
Line_4 $$ ReadableByteChannel fileDownloading = null --> Line_30 $$ if (fileDownloading != null) [FD]
Line_11 $$ fileDownloading = Channels.newChannel(conn.getInputStream()) --> Line_30 $$ if (fileDownloading != null) [FD]
Line_4 $$ ReadableByteChannel fileDownloading = null --> Line_32 $$ fileDownloading.close() [FD]
Line_11 $$ fileDownloading = Channels.newChannel(conn.getInputStream()) --> Line_32 $$ fileDownloading.close() [FD]
Line_5 $$ FileChannel fileWriting = null --> Line_37 $$ if (fileWriting != null) [FD]
Line_12 $$ fileWriting = new FileOutputStream(file).getChannel() --> Line_37 $$ if (fileWriting != null) [FD]
Line_5 $$ FileChannel fileWriting = null --> Line_39 $$ fileWriting.close() [FD]
Line_12 $$ fileWriting = new FileOutputStream(file).getChannel() --> Line_39 $$ fileWriting.close() [FD]
Line_2 $$ public File call() throws IOException --> Line_45 $$ return file [CD]
Line_20 $$ downloaded += chunkSize --> Line_15 $$ for (long downloaded = 0; downloaded < size; left = size - downloaded) [FD]
Line_20 $$ downloaded += chunkSize --> Line_19 $$ fileWriting.transferFrom(fileDownloading, downloaded, chunkSize) [FD]
