Line_2 $$ public static String encrypt32(String plainText) --> Line_3 $$ String str = "" [CD]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_6 $$ md.update(plainText.getBytes()) [FD]
Line_2 $$ public static String encrypt32(String plainText) --> Line_6 $$ md.update(plainText.getBytes()) [FD]
Line_5 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_7 $$ byte b[] = md.digest() [FD]
Line_10 $$ for (int offset = 0; offset < b.length; offset++) --> Line_11 $$ i = b[offset] [CD]
Line_8 $$ int i --> Line_11 $$ i = b[offset] [FD]
Line_10 $$ for (int offset = 0; offset < b.length; offset++) --> Line_12 $$ if (i < 0) [CD]
Line_11 $$ i = b[offset] --> Line_12 $$ if (i < 0) [FD]
Line_8 $$ int i --> Line_12 $$ if (i < 0) [FD]
Line_10 $$ for (int offset = 0; offset < b.length; offset++) --> Line_13 $$ buf.append("0") [CD]
Line_11 $$ i = b[offset] --> Line_13 $$ buf.append("0") [FD]
Line_12 $$ if (i < 0) --> Line_13 $$ buf.append("0") [FD]
Line_8 $$ int i --> Line_13 $$ buf.append("0") [FD]
Line_9 $$ StringBuffer buf = new StringBuffer("") --> Line_13 $$ buf.append("0") [FD]
Line_10 $$ for (int offset = 0; offset < b.length; offset++) --> Line_14 $$ buf.append(Integer.toHexString(i)) [CD]
Line_9 $$ StringBuffer buf = new StringBuffer("") --> Line_14 $$ buf.append(Integer.toHexString(i)) [FD]
Line_11 $$ i = b[offset] --> Line_14 $$ buf.append(Integer.toHexString(i)) [FD]
Line_12 $$ if (i < 0) --> Line_14 $$ buf.append(Integer.toHexString(i)) [FD]
Line_8 $$ int i --> Line_14 $$ buf.append(Integer.toHexString(i)) [FD]
Line_3 $$ String str = "" --> Line_16 $$ str = buf.toString() [FD]
Line_9 $$ StringBuffer buf = new StringBuffer("") --> Line_16 $$ str = buf.toString() [FD]
Line_9 $$ StringBuffer buf = new StringBuffer("") --> Line_17 $$ System.out.println("result: " + buf.toString()) [FD]
Line_9 $$ StringBuffer buf = new StringBuffer("") --> Line_18 $$ System.out.println("result: " + buf.toString().substring(8, 24)) [FD]
Line_2 $$ public static String encrypt32(String plainText) --> Line_23 $$ return str [CD]
