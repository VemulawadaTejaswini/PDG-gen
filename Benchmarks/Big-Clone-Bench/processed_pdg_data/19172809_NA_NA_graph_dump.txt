Line_2 $$ public static Document parseDocument(Object toParse, boolean isFile, List<ErrorMessage> errorMessages) --> Line_3 $$ Document document = null [CD]
Line_5 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance() --> Line_6 $$ docBuilderFactory.setValidating(true) [FD]
Line_5 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance() --> Line_7 $$ docBuilderFactory.setNamespaceAware(true) [FD]
Line_5 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance() --> Line_8 $$ docBuilderFactory.setAttribute("http://java.sun.com/xml/jaxp/properties/schemaLanguage", "http://www.w3.org/2001/XMLSchema") [FD]
Line_5 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance() --> Line_9 $$ docBuilderFactory.setAttribute("http://java.sun.com/xml/jaxp/properties/schemaSource", "BPMN20.xsd") [FD]
Line_5 $$ DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance() --> Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() [FD]
Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() --> Line_12 $$ docBuilder.setErrorHandler(pErrors) [FD]
Line_11 $$ BPMNModelParsingErrors pErrors = new BPMNModelParsingErrors() --> Line_12 $$ docBuilder.setErrorHandler(pErrors) [FD]
Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() --> Line_13 $$ docBuilder.setEntityResolver(new BPMNModelEntityResolver()) [FD]
Line_14 $$ if (isFile) --> Line_15 $$ String filepath = toParse.toString() [CD]
Line_2 $$ public static Document parseDocument(Object toParse, boolean isFile, List<ErrorMessage> errorMessages) --> Line_15 $$ String filepath = toParse.toString() [FD]
Line_14 $$ if (isFile) --> Line_16 $$ File f = new File(filepath) [CD]
Line_14 $$ if (isFile) --> Line_17 $$ if (!f.exists()) [CD]
Line_16 $$ File f = new File(filepath) --> Line_17 $$ if (!f.exists()) [FD]
Line_17 $$ if (!f.exists()) --> Line_18 $$ URL url = BPMNModelUtils.class.getResource(filepath) [CD]
Line_15 $$ String filepath = toParse.toString() --> Line_18 $$ URL url = BPMNModelUtils.class.getResource(filepath) [FD]
Line_17 $$ if (!f.exists()) --> Line_19 $$ if (url == null) [CD]
Line_19 $$ if (url == null) --> Line_20 $$ if (filepath.startsWith("http") || filepath.startsWith("ftp")) [CD]
Line_15 $$ String filepath = toParse.toString() --> Line_20 $$ if (filepath.startsWith("http") || filepath.startsWith("ftp")) [FD]
Line_20 $$ if (filepath.startsWith("http") || filepath.startsWith("ftp")) --> Line_21 $$ url = new URL(filepath) [CD]
Line_17 $$ if (!f.exists()) --> Line_24 $$ if (url != null) [CD]
Line_21 $$ url = new URL(filepath) --> Line_24 $$ if (url != null) [FD]
Line_24 $$ if (url != null) --> Line_25 $$ document = docBuilder.parse(url.openStream()) [CD]
Line_3 $$ Document document = null --> Line_25 $$ document = docBuilder.parse(url.openStream()) [FD]
Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() --> Line_25 $$ document = docBuilder.parse(url.openStream()) [FD]
Line_21 $$ url = new URL(filepath) --> Line_25 $$ document = docBuilder.parse(url.openStream()) [FD]
Line_17 $$ if (!f.exists()) --> Line_28 $$ if (filepath.endsWith(".gz")) [CD]
Line_15 $$ String filepath = toParse.toString() --> Line_28 $$ if (filepath.endsWith(".gz")) [FD]
Line_28 $$ if (filepath.endsWith(".gz")) --> Line_29 $$ document = docBuilder.parse(new GZIPInputStream(new FileInputStream(f))) [CD]
Line_3 $$ Document document = null --> Line_29 $$ document = docBuilder.parse(new GZIPInputStream(new FileInputStream(f))) [FD]
Line_25 $$ document = docBuilder.parse(url.openStream()) --> Line_29 $$ document = docBuilder.parse(new GZIPInputStream(new FileInputStream(f))) [FD]
Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() --> Line_29 $$ document = docBuilder.parse(new GZIPInputStream(new FileInputStream(f))) [FD]
Line_28 $$ if (filepath.endsWith(".gz")) --> Line_31 $$ document = docBuilder.parse(new FileInputStream(f)) [CD]
Line_3 $$ Document document = null --> Line_31 $$ document = docBuilder.parse(new FileInputStream(f)) [FD]
Line_25 $$ document = docBuilder.parse(url.openStream()) --> Line_31 $$ document = docBuilder.parse(new FileInputStream(f)) [FD]
Line_29 $$ document = docBuilder.parse(new GZIPInputStream(new FileInputStream(f))) --> Line_31 $$ document = docBuilder.parse(new FileInputStream(f)) [FD]
Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() --> Line_31 $$ document = docBuilder.parse(new FileInputStream(f)) [FD]
Line_14 $$ if (isFile) --> Line_35 $$ if (toParse instanceof String) [CD]
Line_2 $$ public static Document parseDocument(Object toParse, boolean isFile, List<ErrorMessage> errorMessages) --> Line_35 $$ if (toParse instanceof String) [FD]
Line_35 $$ if (toParse instanceof String) --> Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) [CD]
Line_3 $$ Document document = null --> Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) [FD]
Line_25 $$ document = docBuilder.parse(url.openStream()) --> Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) [FD]
Line_29 $$ document = docBuilder.parse(new GZIPInputStream(new FileInputStream(f))) --> Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) [FD]
Line_31 $$ document = docBuilder.parse(new FileInputStream(f)) --> Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) [FD]
Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() --> Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) [FD]
Line_2 $$ public static Document parseDocument(Object toParse, boolean isFile, List<ErrorMessage> errorMessages) --> Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) [FD]
Line_35 $$ if (toParse instanceof String) --> Line_37 $$ if (toParse instanceof InputStream) [CD]
Line_2 $$ public static Document parseDocument(Object toParse, boolean isFile, List<ErrorMessage> errorMessages) --> Line_37 $$ if (toParse instanceof InputStream) [FD]
Line_37 $$ if (toParse instanceof InputStream) --> Line_38 $$ document = docBuilder.parse((InputStream) toParse) [CD]
Line_3 $$ Document document = null --> Line_38 $$ document = docBuilder.parse((InputStream) toParse) [FD]
Line_25 $$ document = docBuilder.parse(url.openStream()) --> Line_38 $$ document = docBuilder.parse((InputStream) toParse) [FD]
Line_29 $$ document = docBuilder.parse(new GZIPInputStream(new FileInputStream(f))) --> Line_38 $$ document = docBuilder.parse((InputStream) toParse) [FD]
Line_31 $$ document = docBuilder.parse(new FileInputStream(f)) --> Line_38 $$ document = docBuilder.parse((InputStream) toParse) [FD]
Line_36 $$ document = docBuilder.parse(new InputSource(new StringReader(toParse.toString()))) --> Line_38 $$ document = docBuilder.parse((InputStream) toParse) [FD]
Line_10 $$ DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder() --> Line_38 $$ document = docBuilder.parse((InputStream) toParse) [FD]
Line_2 $$ public static Document parseDocument(Object toParse, boolean isFile, List<ErrorMessage> errorMessages) --> Line_41 $$ errorMessages.addAll(pErrors.getErrorMessages()) [FD]
Line_11 $$ BPMNModelParsingErrors pErrors = new BPMNModelParsingErrors() --> Line_41 $$ errorMessages.addAll(pErrors.getErrorMessages()) [FD]
Line_2 $$ public static Document parseDocument(Object toParse, boolean isFile, List<ErrorMessage> errorMessages) --> Line_49 $$ return document [CD]
