Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_3 $$ boolean closeStream = false [CD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_4 $$ if (aOutputStream == null) [CD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_4 $$ if (aOutputStream == null) [FD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_5 $$ aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive)) [FD]
Line_3 $$ boolean closeStream = false --> Line_6 $$ closeStream = true [FD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_13 $$ aOutputStream.putNextEntry(new ZipEntry(URLDecoder.decode(aRootURI.relativize(curFile.toURI()).toASCIIString(), "UTF-8"))) [FD]
Line_5 $$ aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive)) --> Line_13 $$ aOutputStream.putNextEntry(new ZipEntry(URLDecoder.decode(aRootURI.relativize(curFile.toURI()).toASCIIString(), "UTF-8"))) [FD]
Line_12 $$ for (final File curFile : aFiles) --> Line_13 $$ aOutputStream.putNextEntry(new ZipEntry(URLDecoder.decode(aRootURI.relativize(curFile.toURI()).toASCIIString(), "UTF-8"))) [FD]
Line_12 $$ for (final File curFile : aFiles) --> Line_14 $$ if (curFile.isDirectory()) [FD]
Line_14 $$ if (curFile.isDirectory()) --> Line_15 $$ aOutputStream.closeEntry() [CD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_15 $$ aOutputStream.closeEntry() [FD]
Line_5 $$ aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive)) --> Line_15 $$ aOutputStream.closeEntry() [FD]
Line_14 $$ if (curFile.isDirectory()) --> Line_16 $$ FileUtils.zip(aOutputStream, FileUtils.getFiles(curFile, sFilter), sArchive, aRootURI, sFilter) [CD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_16 $$ FileUtils.zip(aOutputStream, FileUtils.getFiles(curFile, sFilter), sArchive, aRootURI, sFilter) [FD]
Line_5 $$ aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive)) --> Line_16 $$ FileUtils.zip(aOutputStream, FileUtils.getFiles(curFile, sFilter), sArchive, aRootURI, sFilter) [FD]
Line_12 $$ for (final File curFile : aFiles) --> Line_16 $$ FileUtils.zip(aOutputStream, FileUtils.getFiles(curFile, sFilter), sArchive, aRootURI, sFilter) [FD]
Line_19 $$ final FileInputStream inputStream = new FileInputStream(curFile) --> Line_20 $$ for (int i; (i = inputStream.read(FileUtils.BUFFER)) != -1; ) aOutputStream.write(FileUtils.BUFFER, 0, i) [FD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_20 $$ for (int i; (i = inputStream.read(FileUtils.BUFFER)) != -1; ) aOutputStream.write(FileUtils.BUFFER, 0, i) [FD]
Line_5 $$ aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive)) --> Line_20 $$ for (int i; (i = inputStream.read(FileUtils.BUFFER)) != -1; ) aOutputStream.write(FileUtils.BUFFER, 0, i) [FD]
Line_19 $$ final FileInputStream inputStream = new FileInputStream(curFile) --> Line_21 $$ inputStream.close() [FD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_22 $$ aOutputStream.closeEntry() [FD]
Line_5 $$ aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive)) --> Line_22 $$ aOutputStream.closeEntry() [FD]
Line_3 $$ boolean closeStream = false --> Line_25 $$ if (closeStream && aOutputStream != null) [FD]
Line_6 $$ closeStream = true --> Line_25 $$ if (closeStream && aOutputStream != null) [FD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_25 $$ if (closeStream && aOutputStream != null) [FD]
Line_5 $$ aOutputStream = new ZipOutputStream(new FileOutputStream(sArchive)) --> Line_25 $$ if (closeStream && aOutputStream != null) [FD]
Line_2 $$ private static void zip(ZipOutputStream aOutputStream, final File[] aFiles, final String sArchive, final URI aRootURI, final String sFilter) throws FileError --> Line_30 $$ DocumentController.getStaticLogger().fine(aFiles.length + " files and folders zipped as " + sArchive) [CD]
