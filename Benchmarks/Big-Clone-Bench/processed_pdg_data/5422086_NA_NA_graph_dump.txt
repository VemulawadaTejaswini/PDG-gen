Line_2 $$ public void writeOutput(String directory) throws IOException --> Line_3 $$ File f = new File(directory) [CD]
Line_2 $$ public void writeOutput(String directory) throws IOException --> Line_4 $$ int i = 0 [CD]
Line_2 $$ public void writeOutput(String directory) throws IOException --> Line_5 $$ if (f.isDirectory()) [CD]
Line_3 $$ File f = new File(directory) --> Line_5 $$ if (f.isDirectory()) [FD]
Line_6 $$ for (AppInventorScreen screen : screens.values()) --> Line_7 $$ File screenFile = new File(getScreenFilePath(f.getAbsolutePath(), screen)) [FD]
Line_3 $$ File f = new File(directory) --> Line_7 $$ File screenFile = new File(getScreenFilePath(f.getAbsolutePath(), screen)) [FD]
Line_7 $$ File screenFile = new File(getScreenFilePath(f.getAbsolutePath(), screen)) --> Line_8 $$ screenFile.getParentFile().mkdirs() [FD]
Line_7 $$ File screenFile = new File(getScreenFilePath(f.getAbsolutePath(), screen)) --> Line_9 $$ screenFile.createNewFile() [FD]
Line_4 $$ int i = 0 --> Line_11 $$ String initial = files.get(i).toString() [FD]
Line_6 $$ for (AppInventorScreen screen : screens.values()) --> Line_12 $$ Map<String, String> types = screen.getTypes() [FD]
Line_11 $$ String initial = files.get(i).toString() --> Line_13 $$ String[] lines = initial.split("\n") [FD]
Line_12 $$ Map<String, String> types = screen.getTypes() --> Line_14 $$ for (String key : types.keySet()) [FD]
Line_14 $$ for (String key : types.keySet()) --> Line_15 $$ if (!key.trim().equals(screen.getName().trim())) [FD]
Line_6 $$ for (AppInventorScreen screen : screens.values()) --> Line_15 $$ if (!key.trim().equals(screen.getName().trim())) [FD]
Line_15 $$ if (!key.trim().equals(screen.getName().trim())) --> Line_16 $$ String value = types.get(key) [CD]
Line_12 $$ Map<String, String> types = screen.getTypes() --> Line_16 $$ String value = types.get(key) [FD]
Line_14 $$ for (String key : types.keySet()) --> Line_16 $$ String value = types.get(key) [FD]
Line_15 $$ if (!key.trim().equals(screen.getName().trim())) --> Line_17 $$ boolean varFound = false [CD]
Line_15 $$ if (!key.trim().equals(screen.getName().trim())) --> Line_18 $$ boolean importFound = false [CD]
Line_19 $$ for (String line : lines) --> Line_20 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*=.*;$")) [FD]
Line_17 $$ boolean varFound = false --> Line_20 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*=.*;$")) [FD]
Line_19 $$ for (String line : lines) --> Line_21 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*;$")) [FD]
Line_17 $$ boolean varFound = false --> Line_21 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*;$")) [FD]
Line_20 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*=.*;$")) --> Line_21 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*;$")) [FD]
Line_19 $$ for (String line : lines) --> Line_22 $$ if (line.matches("^\\s*import\\s+.*" + value + "\\s*;$")) [FD]
Line_18 $$ boolean importFound = false --> Line_22 $$ if (line.matches("^\\s*import\\s+.*" + value + "\\s*;$")) [FD]
Line_15 $$ if (!key.trim().equals(screen.getName().trim())) --> Line_24 $$ initial = initial.replaceFirst("(?s)(?<=\\ [CD]
Line_17 $$ boolean varFound = false --> Line_24 $$ initial = initial.replaceFirst("(?s)(?<=\\ [FD]
Line_20 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*=.*;$")) --> Line_24 $$ initial = initial.replaceFirst("(?s)(?<=\\ [FD]
Line_21 $$ if (line.matches("^\\s*(public|private)\\s+" + value + "\\s+" + key + "\\s*;$")) --> Line_24 $$ initial = initial.replaceFirst("(?s)(?<=\\ [FD]
Line_11 $$ String initial = files.get(i).toString() --> Line_24 $$ initial = initial.replaceFirst("(?s)(?<=\\ [FD]
Line_15 $$ if (!key.trim().equals(screen.getName().trim())) --> Line_25 $$ initial = initial.replaceFirst("(?=import)", "import com.google.devtools.simple.runtime.components.android." + value + ";\n") [CD]
Line_18 $$ boolean importFound = false --> Line_25 $$ initial = initial.replaceFirst("(?=import)", "import com.google.devtools.simple.runtime.components.android." + value + ";\n") [FD]
Line_22 $$ if (line.matches("^\\s*import\\s+.*" + value + "\\s*;$")) --> Line_25 $$ initial = initial.replaceFirst("(?=import)", "import com.google.devtools.simple.runtime.components.android." + value + ";\n") [FD]
Line_11 $$ String initial = files.get(i).toString() --> Line_25 $$ initial = initial.replaceFirst("(?=import)", "import com.google.devtools.simple.runtime.components.android." + value + ";\n") [FD]
Line_24 $$ initial = initial.replaceFirst("(?s)(?<=\\ --> Line_25 $$ initial = initial.replaceFirst("(?=import)", "import com.google.devtools.simple.runtime.components.android." + value + ";\n") [FD]
Line_10 $$ FileWriter out = new FileWriter(screenFile) --> Line_28 $$ out.write(initial) [FD]
Line_11 $$ String initial = files.get(i).toString() --> Line_28 $$ out.write(initial) [FD]
Line_24 $$ initial = initial.replaceFirst("(?s)(?<=\\ --> Line_28 $$ out.write(initial) [FD]
Line_25 $$ initial = initial.replaceFirst("(?=import)", "import com.google.devtools.simple.runtime.components.android." + value + ";\n") --> Line_28 $$ out.write(initial) [FD]
Line_10 $$ FileWriter out = new FileWriter(screenFile) --> Line_29 $$ out.close() [FD]
Line_4 $$ int i = 0 --> Line_30 $$ i++ [FD]
Line_5 $$ if (f.isDirectory()) --> Line_32 $$ File manifestFile = new File(getManifestFilePath(f.getAbsolutePath(), manifest)) [CD]
Line_3 $$ File f = new File(directory) --> Line_32 $$ File manifestFile = new File(getManifestFilePath(f.getAbsolutePath(), manifest)) [FD]
Line_5 $$ if (f.isDirectory()) --> Line_33 $$ manifestFile.getParentFile().mkdirs() [CD]
Line_32 $$ File manifestFile = new File(getManifestFilePath(f.getAbsolutePath(), manifest)) --> Line_33 $$ manifestFile.getParentFile().mkdirs() [FD]
Line_5 $$ if (f.isDirectory()) --> Line_34 $$ manifestFile.createNewFile() [CD]
Line_32 $$ File manifestFile = new File(getManifestFilePath(f.getAbsolutePath(), manifest)) --> Line_34 $$ manifestFile.createNewFile() [FD]
Line_5 $$ if (f.isDirectory()) --> Line_36 $$ out.write(manifest.toString()) [CD]
Line_10 $$ FileWriter out = new FileWriter(screenFile) --> Line_36 $$ out.write(manifest.toString()) [FD]
Line_5 $$ if (f.isDirectory()) --> Line_37 $$ out.close() [CD]
Line_10 $$ FileWriter out = new FileWriter(screenFile) --> Line_37 $$ out.close() [FD]
Line_5 $$ if (f.isDirectory()) --> Line_38 $$ File projectFile = new File(getProjectFilePath(f.getAbsolutePath(), project)) [CD]
Line_3 $$ File f = new File(directory) --> Line_38 $$ File projectFile = new File(getProjectFilePath(f.getAbsolutePath(), project)) [FD]
Line_5 $$ if (f.isDirectory()) --> Line_39 $$ projectFile.getParentFile().mkdirs() [CD]
Line_38 $$ File projectFile = new File(getProjectFilePath(f.getAbsolutePath(), project)) --> Line_39 $$ projectFile.getParentFile().mkdirs() [FD]
Line_5 $$ if (f.isDirectory()) --> Line_40 $$ projectFile.createNewFile() [CD]
Line_38 $$ File projectFile = new File(getProjectFilePath(f.getAbsolutePath(), project)) --> Line_40 $$ projectFile.createNewFile() [FD]
Line_5 $$ if (f.isDirectory()) --> Line_41 $$ out = new FileWriter(projectFile) [CD]
Line_10 $$ FileWriter out = new FileWriter(screenFile) --> Line_41 $$ out = new FileWriter(projectFile) [FD]
Line_5 $$ if (f.isDirectory()) --> Line_42 $$ out.write(project.toString()) [CD]
Line_10 $$ FileWriter out = new FileWriter(screenFile) --> Line_42 $$ out.write(project.toString()) [FD]
Line_41 $$ out = new FileWriter(projectFile) --> Line_42 $$ out.write(project.toString()) [FD]
Line_5 $$ if (f.isDirectory()) --> Line_43 $$ out.close() [CD]
Line_10 $$ FileWriter out = new FileWriter(screenFile) --> Line_43 $$ out.close() [FD]
Line_41 $$ out = new FileWriter(projectFile) --> Line_43 $$ out.close() [FD]
Line_5 $$ if (f.isDirectory()) --> Line_44 $$ String[] copyResourceFilenames = [CD]
Line_45 $$ for (String copyResourceFilename : copyResourceFilenames) --> Line_46 $$ InputStream is = getClass().getResourceAsStream("/resources/" + copyResourceFilename.replace("\\.", "")) [FD]
Line_3 $$ File f = new File(directory) --> Line_47 $$ File outputFile = new File(f.getAbsoluteFile() + File.separator + copyResourceFilename.replace("\\.", ".")) [FD]
Line_45 $$ for (String copyResourceFilename : copyResourceFilenames) --> Line_47 $$ File outputFile = new File(f.getAbsoluteFile() + File.separator + copyResourceFilename.replace("\\.", ".")) [FD]
Line_47 $$ File outputFile = new File(f.getAbsoluteFile() + File.separator + copyResourceFilename.replace("\\.", ".")) --> Line_48 $$ outputFile.getParentFile().mkdirs() [FD]
Line_46 $$ InputStream is = getClass().getResourceAsStream("/resources/" + copyResourceFilename.replace("\\.", "")) --> Line_52 $$ System.out.println("/resources/" + copyResourceFilename.replace("\\.", "")) [FD]
Line_45 $$ for (String copyResourceFilename : copyResourceFilenames) --> Line_52 $$ System.out.println("/resources/" + copyResourceFilename.replace("\\.", "")) [FD]
Line_49 $$ OutputStream os = new FileOutputStream(outputFile) --> Line_53 $$ System.out.println(f.getAbsolutePath() + File.separator + copyResourceFilename.replace("\\.", ".")) [FD]
Line_3 $$ File f = new File(directory) --> Line_53 $$ System.out.println(f.getAbsolutePath() + File.separator + copyResourceFilename.replace("\\.", ".")) [FD]
Line_45 $$ for (String copyResourceFilename : copyResourceFilenames) --> Line_53 $$ System.out.println(f.getAbsolutePath() + File.separator + copyResourceFilename.replace("\\.", ".")) [FD]
Line_51 $$ int readBytes --> Line_54 $$ while ((readBytes = is.read(buf)) > 0) [FD]
Line_46 $$ InputStream is = getClass().getResourceAsStream("/resources/" + copyResourceFilename.replace("\\.", "")) --> Line_54 $$ while ((readBytes = is.read(buf)) > 0) [FD]
Line_50 $$ byte[] buf = new byte[1024] --> Line_54 $$ while ((readBytes = is.read(buf)) > 0) [FD]
Line_54 $$ while ((readBytes = is.read(buf)) > 0) --> Line_55 $$ os.write(buf, 0, readBytes) [CD]
Line_54 $$ while ((readBytes = is.read(buf)) > 0) --> Line_55 $$ os.write(buf, 0, readBytes) [FD]
Line_49 $$ OutputStream os = new FileOutputStream(outputFile) --> Line_55 $$ os.write(buf, 0, readBytes) [FD]
Line_50 $$ byte[] buf = new byte[1024] --> Line_55 $$ os.write(buf, 0, readBytes) [FD]
Line_51 $$ int readBytes --> Line_55 $$ os.write(buf, 0, readBytes) [FD]
Line_3 $$ File f = new File(directory) --> Line_60 $$ File outputFile = new File(f.getAbsoluteFile() + File.separator + assetName) [FD]
Line_47 $$ File outputFile = new File(f.getAbsoluteFile() + File.separator + copyResourceFilename.replace("\\.", ".")) --> Line_61 $$ outputFile.getParentFile().mkdirs() [FD]
Line_54 $$ while ((readBytes = is.read(buf)) > 0) --> Line_65 $$ while ((readBytes = is.read(buf)) > 0) [FD]
Line_51 $$ int readBytes --> Line_65 $$ while ((readBytes = is.read(buf)) > 0) [FD]
Line_46 $$ InputStream is = getClass().getResourceAsStream("/resources/" + copyResourceFilename.replace("\\.", "")) --> Line_65 $$ while ((readBytes = is.read(buf)) > 0) [FD]
Line_50 $$ byte[] buf = new byte[1024] --> Line_65 $$ while ((readBytes = is.read(buf)) > 0) [FD]
Line_65 $$ while ((readBytes = is.read(buf)) > 0) --> Line_66 $$ os.write(buf, 0, readBytes) [CD]
Line_65 $$ while ((readBytes = is.read(buf)) > 0) --> Line_66 $$ os.write(buf, 0, readBytes) [FD]
Line_49 $$ OutputStream os = new FileOutputStream(outputFile) --> Line_66 $$ os.write(buf, 0, readBytes) [FD]
Line_50 $$ byte[] buf = new byte[1024] --> Line_66 $$ os.write(buf, 0, readBytes) [FD]
Line_54 $$ while ((readBytes = is.read(buf)) > 0) --> Line_66 $$ os.write(buf, 0, readBytes) [FD]
Line_51 $$ int readBytes --> Line_66 $$ os.write(buf, 0, readBytes) [FD]
Line_5 $$ if (f.isDirectory()) --> Line_69 $$ File assetsOutput = new File(getAssetsFilePath(f.getAbsolutePath())) [CD]
Line_3 $$ File f = new File(directory) --> Line_69 $$ File assetsOutput = new File(getAssetsFilePath(f.getAbsolutePath())) [FD]
Line_5 $$ if (f.isDirectory()) --> Line_70 $$ new File(assetsDir.getAbsoluteFile() + File.separator + "assets").renameTo(assetsOutput) [CD]
Line_69 $$ File assetsOutput = new File(getAssetsFilePath(f.getAbsolutePath())) --> Line_70 $$ new File(assetsDir.getAbsoluteFile() + File.separator + "assets").renameTo(assetsOutput) [FD]
