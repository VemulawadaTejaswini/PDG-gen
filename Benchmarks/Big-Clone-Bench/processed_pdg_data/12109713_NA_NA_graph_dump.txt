Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_3 $$ long startTime = System.currentTimeMillis() [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_4 $$ QuoteDataSourceDescriptor quoteDataSourceDescriptor = (QuoteDataSourceDescriptor) dataSourceDescriptor [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_5 $$ List<Quote> dataPool = dataPools.get(quoteDataSourceDescriptor.sourceSymbol) [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_6 $$ Calendar calendar = Calendar.getInstance() [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_7 $$ calendar.clear() [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_7 $$ calendar.clear() [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_8 $$ SimpleDateFormat sdf = new SimpleDateFormat(quoteDataSourceDescriptor.dateFormat, Locale.US) [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_9 $$ Date fromDate = new Date() [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_10 $$ Date toDate = new Date() [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_11 $$ if (afterThisTime == FIRST_TIME_LOAD) [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_11 $$ if (afterThisTime == FIRST_TIME_LOAD) [FD]
Line_11 $$ if (afterThisTime == FIRST_TIME_LOAD) --> Line_12 $$ fromDate = quoteDataSourceDescriptor.fromDate [CD]
Line_9 $$ Date fromDate = new Date() --> Line_12 $$ fromDate = quoteDataSourceDescriptor.fromDate [FD]
Line_11 $$ if (afterThisTime == FIRST_TIME_LOAD) --> Line_13 $$ toDate = quoteDataSourceDescriptor.toDate [CD]
Line_10 $$ Date toDate = new Date() --> Line_13 $$ toDate = quoteDataSourceDescriptor.toDate [FD]
Line_11 $$ if (afterThisTime == FIRST_TIME_LOAD) --> Line_15 $$ calendar.setTimeInMillis(afterThisTime) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_15 $$ calendar.setTimeInMillis(afterThisTime) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_15 $$ calendar.setTimeInMillis(afterThisTime) [FD]
Line_11 $$ if (afterThisTime == FIRST_TIME_LOAD) --> Line_16 $$ fromDate = calendar.getTime() [CD]
Line_9 $$ Date fromDate = new Date() --> Line_16 $$ fromDate = calendar.getTime() [FD]
Line_12 $$ fromDate = quoteDataSourceDescriptor.fromDate --> Line_16 $$ fromDate = calendar.getTime() [FD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_16 $$ fromDate = calendar.getTime() [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_18 $$ calendar.setTime(fromDate) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_18 $$ calendar.setTime(fromDate) [FD]
Line_9 $$ Date fromDate = new Date() --> Line_18 $$ calendar.setTime(fromDate) [FD]
Line_12 $$ fromDate = quoteDataSourceDescriptor.fromDate --> Line_18 $$ calendar.setTime(fromDate) [FD]
Line_16 $$ fromDate = calendar.getTime() --> Line_18 $$ calendar.setTime(fromDate) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_19 $$ int a = calendar.get(Calendar.MONTH) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_19 $$ int a = calendar.get(Calendar.MONTH) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_20 $$ int b = calendar.get(Calendar.DAY_OF_MONTH) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_20 $$ int b = calendar.get(Calendar.DAY_OF_MONTH) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_21 $$ int c = calendar.get(Calendar.YEAR) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_21 $$ int c = calendar.get(Calendar.YEAR) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_22 $$ calendar.setTime(toDate) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_22 $$ calendar.setTime(toDate) [FD]
Line_10 $$ Date toDate = new Date() --> Line_22 $$ calendar.setTime(toDate) [FD]
Line_13 $$ toDate = quoteDataSourceDescriptor.toDate --> Line_22 $$ calendar.setTime(toDate) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_23 $$ int d = calendar.get(Calendar.MONTH) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_23 $$ int d = calendar.get(Calendar.MONTH) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_24 $$ int e = calendar.get(Calendar.DAY_OF_MONTH) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_24 $$ int e = calendar.get(Calendar.DAY_OF_MONTH) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_25 $$ int f = calendar.get(Calendar.YEAR) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_25 $$ int f = calendar.get(Calendar.YEAR) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_26 $$ BufferedReader dis [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_27 $$ StringBuffer urlStr = new StringBuffer() [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_28 $$ urlStr.append("http://table.finance.yahoo.com/table.csv").append("?s=") [CD]
Line_27 $$ StringBuffer urlStr = new StringBuffer() --> Line_28 $$ urlStr.append("http://table.finance.yahoo.com/table.csv").append("?s=") [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_29 $$ urlStr.append(quoteDataSourceDescriptor.sourceSymbol) [CD]
Line_27 $$ StringBuffer urlStr = new StringBuffer() --> Line_29 $$ urlStr.append(quoteDataSourceDescriptor.sourceSymbol) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_30 $$ urlStr.append("&a=" + a + "&b=" + b + "&c=" + c + "&d=" + d + "&e=" + e + "&f=" + f) [CD]
Line_27 $$ StringBuffer urlStr = new StringBuffer() --> Line_30 $$ urlStr.append("&a=" + a + "&b=" + b + "&c=" + c + "&d=" + d + "&e=" + e + "&f=" + f) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_31 $$ urlStr.append("&g=d&ignore=.csv") [CD]
Line_27 $$ StringBuffer urlStr = new StringBuffer() --> Line_31 $$ urlStr.append("&g=d&ignore=.csv") [FD]
Line_27 $$ StringBuffer urlStr = new StringBuffer() --> Line_33 $$ URL url = new URL(urlStr.toString()) [FD]
Line_33 $$ URL url = new URL(urlStr.toString()) --> Line_34 $$ System.out.println(url) [FD]
Line_33 $$ URL url = new URL(urlStr.toString()) --> Line_35 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() [FD]
Line_35 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_36 $$ conn.setAllowUserInteraction(true) [FD]
Line_35 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_37 $$ conn.setRequestMethod("GET") [FD]
Line_35 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_38 $$ conn.setInstanceFollowRedirects(true) [FD]
Line_35 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_39 $$ InputStreamReader isr = new InputStreamReader(conn.getInputStream()) [FD]
Line_26 $$ BufferedReader dis --> Line_40 $$ dis = new BufferedReader(isr) [FD]
Line_26 $$ BufferedReader dis --> Line_41 $$ String s = dis.readLine() [FD]
Line_40 $$ dis = new BufferedReader(isr) --> Line_41 $$ String s = dis.readLine() [FD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_50 $$ calendar.clear() [FD]
Line_41 $$ String s = dis.readLine() --> Line_51 $$ while ((s = dis.readLine()) != null) [FD]
Line_26 $$ BufferedReader dis --> Line_51 $$ while ((s = dis.readLine()) != null) [FD]
Line_40 $$ dis = new BufferedReader(isr) --> Line_51 $$ while ((s = dis.readLine()) != null) [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_52 $$ String[] items [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_53 $$ items = s.split(",") [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_53 $$ items = s.split(",") [FD]
Line_52 $$ String[] items --> Line_53 $$ items = s.split(",") [FD]
Line_41 $$ String s = dis.readLine() --> Line_53 $$ items = s.split(",") [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_54 $$ if (items.length < 6) [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_57 $$ Date date = null [CD]
Line_57 $$ Date date = null --> Line_59 $$ date = sdf.parse(items[iDateTime].trim()) [FD]
Line_8 $$ SimpleDateFormat sdf = new SimpleDateFormat(quoteDataSourceDescriptor.dateFormat, Locale.US) --> Line_59 $$ date = sdf.parse(items[iDateTime].trim()) [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_64 $$ calendar.clear() [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_64 $$ calendar.clear() [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_65 $$ calendar.setTime(date) [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_65 $$ calendar.setTime(date) [FD]
Line_57 $$ Date date = null --> Line_65 $$ calendar.setTime(date) [FD]
Line_59 $$ date = sdf.parse(items[iDateTime].trim()) --> Line_65 $$ calendar.setTime(date) [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_66 $$ long time = calendar.getTimeInMillis() [CD]
Line_6 $$ Calendar calendar = Calendar.getInstance() --> Line_66 $$ long time = calendar.getTimeInMillis() [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_67 $$ if (time <= afterThisTime) [CD]
Line_66 $$ long time = calendar.getTimeInMillis() --> Line_67 $$ if (time <= afterThisTime) [FD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_67 $$ if (time <= afterThisTime) [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_70 $$ Quote quote = new Quote() [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_71 $$ quote.time = time [CD]
Line_66 $$ long time = calendar.getTimeInMillis() --> Line_71 $$ quote.time = time [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_72 $$ quote.open = Float.parseFloat(items[iOpen].trim()) [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_73 $$ quote.high = Float.parseFloat(items[iHigh].trim()) [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_74 $$ quote.low = Float.parseFloat(items[iLow].trim()) [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_75 $$ quote.close = Float.parseFloat(items[iClose].trim()) [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_76 $$ quote.volume = Float.parseFloat(items[iVolume].trim()) / 100f [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_77 $$ quote.amount = -1 [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_78 $$ quote.close_adj = Float.parseFloat(items[iAdjClose].trim()) [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_79 $$ if (quote.high * quote.low * quote.close == 0) [CD]
Line_79 $$ if (quote.high * quote.low * quote.close == 0) --> Line_80 $$ quote = null [CD]
Line_70 $$ Quote quote = new Quote() --> Line_80 $$ quote = null [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_83 $$ dataPool.add(quote) [CD]
Line_5 $$ List<Quote> dataPool = dataPools.get(quoteDataSourceDescriptor.sourceSymbol) --> Line_83 $$ dataPool.add(quote) [FD]
Line_70 $$ Quote quote = new Quote() --> Line_83 $$ dataPool.add(quote) [FD]
Line_80 $$ quote = null --> Line_83 $$ dataPool.add(quote) [FD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_84 $$ if (count == 0) [CD]
Line_51 $$ while ((s = dis.readLine()) != null) --> Line_88 $$ setAscending((lastTime >= firstTime) ? true : false) [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_94 $$ long newestTime = (lastTime >= firstTime) ? lastTime : firstTime [CD]
Line_2 $$ protected long loadFromSource(long afterThisTime) --> Line_95 $$ return newestTime [CD]
