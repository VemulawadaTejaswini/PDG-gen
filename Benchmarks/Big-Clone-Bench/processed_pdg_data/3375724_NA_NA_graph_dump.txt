Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_3 $$ int numeroDoRegistro = -1 [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_4 $$ Scanner in = null [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_5 $$ Statement stmtLimpezaInicialDestino = conDestino.createStatement() [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_6 $$ String sql = "TRUNCATE TABLE TMP_TB_EMISSOR_TITULO" [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_7 $$ stmtLimpezaInicialDestino.executeUpdate(sql) [CD]
Line_5 $$ Statement stmtLimpezaInicialDestino = conDestino.createStatement() --> Line_7 $$ stmtLimpezaInicialDestino.executeUpdate(sql) [FD]
Line_6 $$ String sql = "TRUNCATE TABLE TMP_TB_EMISSOR_TITULO" --> Line_7 $$ stmtLimpezaInicialDestino.executeUpdate(sql) [FD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_8 $$ sql = "INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)" [CD]
Line_6 $$ String sql = "TRUNCATE TABLE TMP_TB_EMISSOR_TITULO" --> Line_8 $$ sql = "INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)" [FD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) [CD]
Line_6 $$ String sql = "TRUNCATE TABLE TMP_TB_EMISSOR_TITULO" --> Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) [FD]
Line_8 $$ sql = "INSERT INTO TMP_TB_EMISSOR_TITULO(SIGLA, NOME, CNPJ, DATA_CRIACAO) VALUES(:SIGLA, :NOME, :CNPJ, :DATA_CRIACAO)" --> Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) [FD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_10 $$ stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE) [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_10 $$ stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE) [FD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_11 $$ final int TAMANHO_DO_CABECALHO_DO_ARQUIVO = 0 [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_12 $$ final int TAMANHO_DO_RODAPE_DO_ARQUIVO = 0 [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_13 $$ final int TAMANHO_DOS_METADADOS_DO_ARQUIVO = TAMANHO_DO_CABECALHO_DO_ARQUIVO + TAMANHO_DO_RODAPE_DO_ARQUIVO [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_14 $$ final int TAMANHO_MEDIO_POR_REGISTRO = 81 [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_15 $$ long tamanhoDosArquivos = pArquivoTXT.length() [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_15 $$ long tamanhoDosArquivos = pArquivoTXT.length() [FD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_16 $$ int quantidadeDeRegistrosEstimada = (int) (tamanhoDosArquivos - TAMANHO_DOS_METADADOS_DO_ARQUIVO) / TAMANHO_MEDIO_POR_REGISTRO [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_17 $$ String registro [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_18 $$ String[] campos [CD]
Line_4 $$ Scanner in = null --> Line_20 $$ in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name()) [FD]
Line_3 $$ int numeroDoRegistro = -1 --> Line_22 $$ numeroDoRegistro = 0 [FD]
Line_4 $$ Scanner in = null --> Line_29 $$ while (in.hasNextLine()) [FD]
Line_20 $$ in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name()) --> Line_29 $$ while (in.hasNextLine()) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_30 $$ ++numeroDoRegistro [CD]
Line_3 $$ int numeroDoRegistro = -1 --> Line_30 $$ ++numeroDoRegistro [FD]
Line_22 $$ numeroDoRegistro = 0 --> Line_30 $$ ++numeroDoRegistro [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_31 $$ registro = in.nextLine() [CD]
Line_17 $$ String registro --> Line_31 $$ registro = in.nextLine() [FD]
Line_4 $$ Scanner in = null --> Line_31 $$ registro = in.nextLine() [FD]
Line_20 $$ in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name()) --> Line_31 $$ registro = in.nextLine() [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_32 $$ stmtDestino.clearParameters() [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_32 $$ stmtDestino.clearParameters() [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_33 $$ registro = registro.substring(1, registro.length() - 1) [CD]
Line_31 $$ registro = in.nextLine() --> Line_33 $$ registro = registro.substring(1, registro.length() - 1) [FD]
Line_17 $$ String registro --> Line_33 $$ registro = registro.substring(1, registro.length() - 1) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_34 $$ if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) [CD]
Line_31 $$ registro = in.nextLine() --> Line_34 $$ if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) [FD]
Line_33 $$ registro = registro.substring(1, registro.length() - 1) --> Line_34 $$ if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) [FD]
Line_17 $$ String registro --> Line_34 $$ if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) [FD]
Line_28 $$ final String DELIMITADOR_DE_CAMPOS_DO_REGISTRO = "\"" --> Line_34 $$ if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) [FD]
Line_34 $$ if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) --> Line_35 $$ registro = registro + " " [CD]
Line_31 $$ registro = in.nextLine() --> Line_35 $$ registro = registro + " " [FD]
Line_33 $$ registro = registro.substring(1, registro.length() - 1) --> Line_35 $$ registro = registro + " " [FD]
Line_17 $$ String registro --> Line_35 $$ registro = registro + " " [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_37 $$ campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO) [CD]
Line_18 $$ String[] campos --> Line_37 $$ campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO) [FD]
Line_31 $$ registro = in.nextLine() --> Line_37 $$ campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO) [FD]
Line_33 $$ registro = registro.substring(1, registro.length() - 1) --> Line_37 $$ campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO) [FD]
Line_35 $$ registro = registro + " " --> Line_37 $$ campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO) [FD]
Line_17 $$ String registro --> Line_37 $$ campos = registro.split(DELIMITADOR_DE_CAMPOS_DO_REGISTRO + SEPARADOR_DE_CAMPOS_DO_REGISTRO + DELIMITADOR_DE_CAMPOS_DO_REGISTRO) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_38 $$ int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length [CD]
Line_29 $$ while (in.hasNextLine()) --> Line_39 $$ if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) [CD]
Line_38 $$ int quantidadeDeCamposEncontradosIncluindoOsVazios = campos.length --> Line_39 $$ if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) [FD]
Line_26 $$ final int QTDE_CAMPOS = CampoDoArquivoDosEmissoresDeTitulosFinanceiros.values().length --> Line_39 $$ if (quantidadeDeCamposEncontradosIncluindoOsVazios != QTDE_CAMPOS) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_42 $$ vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()] [CD]
Line_23 $$ String vSIGLA, vNOME --> Line_42 $$ vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()] [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_43 $$ vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()] [CD]
Line_23 $$ String vSIGLA, vNOME --> Line_43 $$ vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()] [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_44 $$ String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()] [CD]
Line_29 $$ while (in.hasNextLine()) --> Line_45 $$ if (cnpjTmp != null && cnpjTmp.trim().length() > 0) [CD]
Line_44 $$ String cnpjTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.CNPJ.ordinal()] --> Line_45 $$ if (cnpjTmp != null && cnpjTmp.trim().length() > 0) [FD]
Line_45 $$ if (cnpjTmp != null && cnpjTmp.trim().length() > 0) --> Line_46 $$ vCNPJ = new BigDecimal(cnpjTmp) [CD]
Line_24 $$ BigDecimal vCNPJ --> Line_46 $$ vCNPJ = new BigDecimal(cnpjTmp) [FD]
Line_45 $$ if (cnpjTmp != null && cnpjTmp.trim().length() > 0) --> Line_48 $$ vCNPJ = null [CD]
Line_46 $$ vCNPJ = new BigDecimal(cnpjTmp) --> Line_48 $$ vCNPJ = null [FD]
Line_24 $$ BigDecimal vCNPJ --> Line_48 $$ vCNPJ = null [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_50 $$ String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()] [CD]
Line_29 $$ while (in.hasNextLine()) --> Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) [CD]
Line_50 $$ String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()] --> Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) [FD]
Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) --> Line_52 $$ int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4)) [CD]
Line_50 $$ String dataDaCriacaoTmp = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.DATA_CRIACAO.ordinal()] --> Line_52 $$ int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4)) [FD]
Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) --> Line_53 $$ Calendar calendario = Calendar.getInstance() [CD]
Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) --> Line_54 $$ calendario.clear() [CD]
Line_53 $$ Calendar calendario = Calendar.getInstance() --> Line_54 $$ calendario.clear() [FD]
Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) --> Line_55 $$ calendario.set(ano, mes, dia) [CD]
Line_53 $$ Calendar calendario = Calendar.getInstance() --> Line_55 $$ calendario.set(ano, mes, dia) [FD]
Line_52 $$ int dia = Integer.parseInt(dataDaCriacaoTmp.substring(6, 8)), mes = Integer.parseInt(dataDaCriacaoTmp.substring(4, 6)) - 1, ano = Integer.parseInt(dataDaCriacaoTmp.substring(0, 4)) --> Line_55 $$ calendario.set(ano, mes, dia) [FD]
Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) --> Line_56 $$ vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis()) [CD]
Line_25 $$ java.sql.Date vDATA_CRIACAO --> Line_56 $$ vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis()) [FD]
Line_53 $$ Calendar calendario = Calendar.getInstance() --> Line_56 $$ vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis()) [FD]
Line_51 $$ if (dataDaCriacaoTmp != null && dataDaCriacaoTmp.trim().length() > 0) --> Line_58 $$ vDATA_CRIACAO = null [CD]
Line_56 $$ vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis()) --> Line_58 $$ vDATA_CRIACAO = null [FD]
Line_25 $$ java.sql.Date vDATA_CRIACAO --> Line_58 $$ vDATA_CRIACAO = null [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_60 $$ stmtDestino.setStringAtName("SIGLA", vSIGLA) [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_60 $$ stmtDestino.setStringAtName("SIGLA", vSIGLA) [FD]
Line_42 $$ vSIGLA = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.SIGLA.ordinal()] --> Line_60 $$ stmtDestino.setStringAtName("SIGLA", vSIGLA) [FD]
Line_23 $$ String vSIGLA, vNOME --> Line_60 $$ stmtDestino.setStringAtName("SIGLA", vSIGLA) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_61 $$ stmtDestino.setStringAtName("NOME", vNOME) [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_61 $$ stmtDestino.setStringAtName("NOME", vNOME) [FD]
Line_43 $$ vNOME = campos[CampoDoArquivoDosEmissoresDeTitulosFinanceiros.NOME.ordinal()] --> Line_61 $$ stmtDestino.setStringAtName("NOME", vNOME) [FD]
Line_23 $$ String vSIGLA, vNOME --> Line_61 $$ stmtDestino.setStringAtName("NOME", vNOME) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_62 $$ stmtDestino.setBigDecimalAtName("CNPJ", vCNPJ) [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_62 $$ stmtDestino.setBigDecimalAtName("CNPJ", vCNPJ) [FD]
Line_46 $$ vCNPJ = new BigDecimal(cnpjTmp) --> Line_62 $$ stmtDestino.setBigDecimalAtName("CNPJ", vCNPJ) [FD]
Line_48 $$ vCNPJ = null --> Line_62 $$ stmtDestino.setBigDecimalAtName("CNPJ", vCNPJ) [FD]
Line_24 $$ BigDecimal vCNPJ --> Line_62 $$ stmtDestino.setBigDecimalAtName("CNPJ", vCNPJ) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_63 $$ stmtDestino.setDateAtName("DATA_CRIACAO", vDATA_CRIACAO) [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_63 $$ stmtDestino.setDateAtName("DATA_CRIACAO", vDATA_CRIACAO) [FD]
Line_56 $$ vDATA_CRIACAO = new java.sql.Date(calendario.getTimeInMillis()) --> Line_63 $$ stmtDestino.setDateAtName("DATA_CRIACAO", vDATA_CRIACAO) [FD]
Line_58 $$ vDATA_CRIACAO = null --> Line_63 $$ stmtDestino.setDateAtName("DATA_CRIACAO", vDATA_CRIACAO) [FD]
Line_25 $$ java.sql.Date vDATA_CRIACAO --> Line_63 $$ stmtDestino.setDateAtName("DATA_CRIACAO", vDATA_CRIACAO) [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_64 $$ int contagemDasInsercoes = stmtDestino.executeUpdate() [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_64 $$ int contagemDasInsercoes = stmtDestino.executeUpdate() [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_65 $$ quantidadeDeRegistrosImportada++ [CD]
Line_21 $$ int quantidadeDeRegistrosImportada = 0 --> Line_65 $$ quantidadeDeRegistrosImportada++ [FD]
Line_29 $$ while (in.hasNextLine()) --> Line_66 $$ double percentualCompleto = (double) quantidadeDeRegistrosImportada / quantidadeDeRegistrosEstimada * 100 [CD]
Line_29 $$ while (in.hasNextLine()) --> Line_67 $$ pAndamento.setPercentualCompleto((int) percentualCompleto) [CD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_67 $$ pAndamento.setPercentualCompleto((int) percentualCompleto) [FD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_73 $$ problemaDetalhado.nomeDoArquivo = pArquivoTXT.getName() [FD]
Line_3 $$ int numeroDoRegistro = -1 --> Line_74 $$ problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro [FD]
Line_22 $$ numeroDoRegistro = 0 --> Line_74 $$ problemaDetalhado.linhaProblematicaDoArquivo = numeroDoRegistro [FD]
Line_2 $$ public void importarEmissoresDosTitulosFinanceiros(File pArquivoTXT, Andamento pAndamento) throws FileNotFoundException, SQLException --> Line_78 $$ pAndamento.setPercentualCompleto(100) [FD]
Line_4 $$ Scanner in = null --> Line_79 $$ in.close() [FD]
Line_20 $$ in = new Scanner(new FileInputStream(pArquivoTXT), Constantes.CONJUNTO_DE_CARACTERES_DOS_ARQUIVOS_TEXTO_DA_BOVESPA.name()) --> Line_79 $$ in.close() [FD]
Line_5 $$ Statement stmtLimpezaInicialDestino = conDestino.createStatement() --> Line_80 $$ if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) [FD]
Line_80 $$ if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) --> Line_81 $$ stmtLimpezaInicialDestino.close() [CD]
Line_5 $$ Statement stmtLimpezaInicialDestino = conDestino.createStatement() --> Line_81 $$ stmtLimpezaInicialDestino.close() [FD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_83 $$ if (stmtDestino != null && (!stmtDestino.isClosed())) [FD]
Line_83 $$ if (stmtDestino != null && (!stmtDestino.isClosed())) --> Line_84 $$ stmtDestino.close() [CD]
Line_9 $$ OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql) --> Line_84 $$ stmtDestino.close() [FD]
Line_35 $$ registro = registro + " " --> Line_33 $$ registro = registro.substring(1, registro.length() - 1) [FD]
Line_35 $$ registro = registro + " " --> Line_34 $$ if (registro.endsWith(DELIMITADOR_DE_CAMPOS_DO_REGISTRO)) [FD]
