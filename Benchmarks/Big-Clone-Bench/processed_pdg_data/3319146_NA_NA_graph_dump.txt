Line_2 $$ public void create(Session session) --> Line_3 $$ Connection conn = session.getConnection(this) [CD]
Line_2 $$ public void create(Session session) --> Line_3 $$ Connection conn = session.getConnection(this) [FD]
Line_2 $$ public void create(Session session) --> Line_4 $$ Statement stat = null [CD]
Line_2 $$ public void create(Session session) --> Line_5 $$ StringBuilder out = new StringBuilder(256) [CD]
Line_2 $$ public void create(Session session) --> Line_6 $$ Appendable sql = out [CD]
Line_2 $$ public void create(Session session) --> Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() [CD]
Line_2 $$ public void create(Session session) --> Line_8 $$ List<MetaColumn> newColumns = new ArrayList<MetaColumn>() [CD]
Line_2 $$ public void create(Session session) --> Line_9 $$ List<MetaColumn> foreignColumns = new ArrayList<MetaColumn>() [CD]
Line_2 $$ public void create(Session session) --> Line_10 $$ List<MetaIndex> indexes = new ArrayList<MetaIndex>() [CD]
Line_2 $$ public void create(Session session) --> Line_11 $$ boolean createSequenceTable = false [CD]
Line_2 $$ public void create(Session session) --> Line_12 $$ int tableTotalCount = getTableTotalCount() [CD]
Line_4 $$ Statement stat = null --> Line_14 $$ stat = conn.createStatement() [FD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_14 $$ stat = conn.createStatement() [FD]
Line_15 $$ if (isSequenceTableRequired()) --> Line_16 $$ PreparedStatement ps = null [CD]
Line_15 $$ if (isSequenceTableRequired()) --> Line_17 $$ ResultSet rs = null [CD]
Line_15 $$ if (isSequenceTableRequired()) --> Line_18 $$ Throwable exception = null [CD]
Line_15 $$ if (isSequenceTableRequired()) --> Line_19 $$ String logMsg = "" [CD]
Line_6 $$ Appendable sql = out --> Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) [FD]
Line_16 $$ PreparedStatement ps = null --> Line_22 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_22 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_6 $$ Appendable sql = out --> Line_22 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_22 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_16 $$ PreparedStatement ps = null --> Line_23 $$ ps.setString(1, "-") [FD]
Line_22 $$ ps = conn.prepareStatement(sql.toString()) --> Line_23 $$ ps.setString(1, "-") [FD]
Line_17 $$ ResultSet rs = null --> Line_24 $$ rs = ps.executeQuery() [FD]
Line_16 $$ PreparedStatement ps = null --> Line_24 $$ rs = ps.executeQuery() [FD]
Line_22 $$ ps = conn.prepareStatement(sql.toString()) --> Line_24 $$ rs = ps.executeQuery() [FD]
Line_18 $$ Throwable exception = null --> Line_26 $$ exception = e [FD]
Line_15 $$ if (isSequenceTableRequired()) --> Line_28 $$ if (exception != null) [CD]
Line_18 $$ Throwable exception = null --> Line_28 $$ if (exception != null) [FD]
Line_26 $$ exception = e --> Line_28 $$ if (exception != null) [FD]
Line_11 $$ boolean createSequenceTable = false --> Line_34 $$ createSequenceTable = true [FD]
Line_15 $$ if (isSequenceTableRequired()) --> Line_37 $$ if (LOGGER.isLoggable(Level.INFO)) [CD]
Line_37 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_38 $$ logMsg = "Table '" + SqlDialect.COMMON_SEQ_TABLE_NAME + "' [CD]
Line_19 $$ String logMsg = "" --> Line_38 $$ logMsg = "Table '" + SqlDialect.COMMON_SEQ_TABLE_NAME + "' [FD]
Line_37 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_39 $$ logMsg = MessageFormat.format(logMsg, exception != null ? "is not" : "is", getId()) [CD]
Line_19 $$ String logMsg = "" --> Line_39 $$ logMsg = MessageFormat.format(logMsg, exception != null ? "is not" : "is", getId()) [FD]
Line_38 $$ logMsg = "Table '" + SqlDialect.COMMON_SEQ_TABLE_NAME + "' --> Line_39 $$ logMsg = MessageFormat.format(logMsg, exception != null ? "is not" : "is", getId()) [FD]
Line_37 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_40 $$ LOGGER.log(Level.INFO, logMsg) [CD]
Line_19 $$ String logMsg = "" --> Line_40 $$ LOGGER.log(Level.INFO, logMsg) [FD]
Line_38 $$ logMsg = "Table '" + SqlDialect.COMMON_SEQ_TABLE_NAME + "' --> Line_40 $$ LOGGER.log(Level.INFO, logMsg) [FD]
Line_39 $$ logMsg = MessageFormat.format(logMsg, exception != null ? "is not" : "is", getId()) --> Line_40 $$ LOGGER.log(Level.INFO, logMsg) [FD]
Line_18 $$ Throwable exception = null --> Line_43 $$ if (exception != null) [FD]
Line_26 $$ exception = e --> Line_43 $$ if (exception != null) [FD]
Line_43 $$ if (exception != null) --> Line_44 $$ conn.rollback() [CD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_44 $$ conn.rollback() [FD]
Line_16 $$ PreparedStatement ps = null --> Line_47 $$ close(null, ps, rs, false) [FD]
Line_22 $$ ps = conn.prepareStatement(sql.toString()) --> Line_47 $$ close(null, ps, rs, false) [FD]
Line_17 $$ ResultSet rs = null --> Line_47 $$ close(null, ps, rs, false) [FD]
Line_24 $$ rs = ps.executeQuery() --> Line_47 $$ close(null, ps, rs, false) [FD]
Line_50 $$ boolean ddlOnly = false --> Line_53 $$ ddlOnly = true [FD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_56 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() --> Line_56 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_8 $$ List<MetaColumn> newColumns = new ArrayList<MetaColumn>() --> Line_56 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_10 $$ List<MetaIndex> indexes = new ArrayList<MetaIndex>() --> Line_56 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_56 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) --> Line_57 $$ if (change && ddlOnly) [FD]
Line_50 $$ boolean ddlOnly = false --> Line_57 $$ if (change && ddlOnly) [FD]
Line_53 $$ ddlOnly = true --> Line_57 $$ if (change && ddlOnly) [FD]
Line_57 $$ if (change && ddlOnly) --> Line_58 $$ if (tables.size() < tableTotalCount) [CD]
Line_12 $$ int tableTotalCount = getTableTotalCount() --> Line_58 $$ if (tables.size() < tableTotalCount) [FD]
Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() --> Line_58 $$ if (tables.size() < tableTotalCount) [FD]
Line_58 $$ if (tables.size() < tableTotalCount) --> Line_59 $$ return [CD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_70 $$ Set<String> keywords = getDialect().getKeywordSet(conn) [FD]
Line_71 $$ for (MetaTable table : tables) --> Line_72 $$ if (table.isTable()) [FD]
Line_72 $$ if (table.isTable()) --> Line_73 $$ checkKeyWord(MetaTable.NAME.of(table), table, keywords) [CD]
Line_71 $$ for (MetaTable table : tables) --> Line_73 $$ checkKeyWord(MetaTable.NAME.of(table), table, keywords) [FD]
Line_70 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_73 $$ checkKeyWord(MetaTable.NAME.of(table), table, keywords) [FD]
Line_71 $$ for (MetaTable table : tables) --> Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) [FD]
Line_71 $$ for (MetaTable table : tables) --> Line_75 $$ checkKeyWord(MetaColumn.NAME.of(column), table, keywords) [FD]
Line_70 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_75 $$ checkKeyWord(MetaColumn.NAME.of(column), table, keywords) [FD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_75 $$ checkKeyWord(MetaColumn.NAME.of(column), table, keywords) [FD]
Line_70 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_80 $$ checkKeyWord(MetaColumn.NAME.of(column), column.getTable(), keywords) [FD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_80 $$ checkKeyWord(MetaColumn.NAME.of(column), column.getTable(), keywords) [FD]
Line_70 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_83 $$ checkKeyWord(MetaIndex.NAME.of(index), MetaIndex.TABLE.of(index), keywords) [FD]
Line_82 $$ for (MetaIndex index : indexes) --> Line_83 $$ checkKeyWord(MetaIndex.NAME.of(index), MetaIndex.TABLE.of(index), keywords) [FD]
Line_12 $$ int tableTotalCount = getTableTotalCount() --> Line_86 $$ for (String schema : getSchemas(tables)) [FD]
Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() --> Line_86 $$ for (String schema : getSchemas(tables)) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_87 $$ out.setLength(0) [FD]
Line_6 $$ Appendable sql = out --> Line_88 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_88 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_86 $$ for (String schema : getSchemas(tables)) --> Line_88 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_88 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_6 $$ Appendable sql = out --> Line_89 $$ if (isUsable(sql)) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_89 $$ if (isUsable(sql)) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_89 $$ if (isUsable(sql)) [FD]
Line_4 $$ Statement stat = null --> Line_91 $$ stat.executeUpdate(sql.toString()) [FD]
Line_14 $$ stat = conn.createStatement() --> Line_91 $$ stat.executeUpdate(sql.toString()) [FD]
Line_6 $$ Appendable sql = out --> Line_91 $$ stat.executeUpdate(sql.toString()) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_91 $$ stat.executeUpdate(sql.toString()) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_91 $$ stat.executeUpdate(sql.toString()) [FD]
Line_6 $$ Appendable sql = out --> Line_93 $$ LOGGER.log(Level.INFO, " [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_93 $$ LOGGER.log(Level.INFO, " [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_93 $$ LOGGER.log(Level.INFO, " [FD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_94 $$ conn.rollback() [FD]
Line_71 $$ for (MetaTable table : tables) --> Line_100 $$ if (table.isTable()) [FD]
Line_100 $$ if (table.isTable()) --> Line_101 $$ tableCount++ [CD]
Line_98 $$ int tableCount = 0 --> Line_101 $$ tableCount++ [FD]
Line_100 $$ if (table.isTable()) --> Line_102 $$ out.setLength(0) [CD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_102 $$ out.setLength(0) [FD]
Line_100 $$ if (table.isTable()) --> Line_103 $$ sql = getDialect().printTable(table, out) [CD]
Line_6 $$ Appendable sql = out --> Line_103 $$ sql = getDialect().printTable(table, out) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_103 $$ sql = getDialect().printTable(table, out) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_103 $$ sql = getDialect().printTable(table, out) [FD]
Line_71 $$ for (MetaTable table : tables) --> Line_103 $$ sql = getDialect().printTable(table, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_103 $$ sql = getDialect().printTable(table, out) [FD]
Line_100 $$ if (table.isTable()) --> Line_104 $$ executeUpdate(sql, stat) [CD]
Line_6 $$ Appendable sql = out --> Line_104 $$ executeUpdate(sql, stat) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_104 $$ executeUpdate(sql, stat) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_104 $$ executeUpdate(sql, stat) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_104 $$ executeUpdate(sql, stat) [FD]
Line_4 $$ Statement stat = null --> Line_104 $$ executeUpdate(sql, stat) [FD]
Line_14 $$ stat = conn.createStatement() --> Line_104 $$ executeUpdate(sql, stat) [FD]
Line_100 $$ if (table.isTable()) --> Line_105 $$ foreignColumns.addAll(table.getForeignColumns()) [CD]
Line_9 $$ List<MetaColumn> foreignColumns = new ArrayList<MetaColumn>() --> Line_105 $$ foreignColumns.addAll(table.getForeignColumns()) [FD]
Line_71 $$ for (MetaTable table : tables) --> Line_105 $$ foreignColumns.addAll(table.getForeignColumns()) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_109 $$ out.setLength(0) [FD]
Line_6 $$ Appendable sql = out --> Line_110 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_110 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_110 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_110 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_110 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_110 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_6 $$ Appendable sql = out --> Line_111 $$ executeUpdate(sql, stat) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_111 $$ executeUpdate(sql, stat) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_111 $$ executeUpdate(sql, stat) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_111 $$ executeUpdate(sql, stat) [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_111 $$ executeUpdate(sql, stat) [FD]
Line_4 $$ Statement stat = null --> Line_111 $$ executeUpdate(sql, stat) [FD]
Line_14 $$ stat = conn.createStatement() --> Line_111 $$ executeUpdate(sql, stat) [FD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_112 $$ if (column.isForeignKey()) [FD]
Line_112 $$ if (column.isForeignKey()) --> Line_113 $$ foreignColumns.add(column) [CD]
Line_9 $$ List<MetaColumn> foreignColumns = new ArrayList<MetaColumn>() --> Line_113 $$ foreignColumns.add(column) [FD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_113 $$ foreignColumns.add(column) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_117 $$ out.setLength(0) [FD]
Line_6 $$ Appendable sql = out --> Line_118 $$ sql = getDialect().printIndex(index, out) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_118 $$ sql = getDialect().printIndex(index, out) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_118 $$ sql = getDialect().printIndex(index, out) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_118 $$ sql = getDialect().printIndex(index, out) [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_118 $$ sql = getDialect().printIndex(index, out) [FD]
Line_82 $$ for (MetaIndex index : indexes) --> Line_118 $$ sql = getDialect().printIndex(index, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_118 $$ sql = getDialect().printIndex(index, out) [FD]
Line_6 $$ Appendable sql = out --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_118 $$ sql = getDialect().printIndex(index, out) --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_4 $$ Statement stat = null --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_14 $$ stat = conn.createStatement() --> Line_119 $$ executeUpdate(sql, stat) [FD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_122 $$ if (column.isForeignKey()) [FD]
Line_122 $$ if (column.isForeignKey()) --> Line_123 $$ out.setLength(0) [CD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_123 $$ out.setLength(0) [FD]
Line_122 $$ if (column.isForeignKey()) --> Line_124 $$ MetaTable table = MetaColumn.TABLE.of(column) [CD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_124 $$ MetaTable table = MetaColumn.TABLE.of(column) [FD]
Line_122 $$ if (column.isForeignKey()) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [CD]
Line_6 $$ Appendable sql = out --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_118 $$ sql = getDialect().printIndex(index, out) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_74 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_71 $$ for (MetaTable table : tables) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_125 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_122 $$ if (column.isForeignKey()) --> Line_126 $$ executeUpdate(sql, stat) [CD]
Line_6 $$ Appendable sql = out --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_118 $$ sql = getDialect().printIndex(index, out) --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_125 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_4 $$ Statement stat = null --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_14 $$ stat = conn.createStatement() --> Line_126 $$ executeUpdate(sql, stat) [FD]
Line_129 $$ if (createSequenceTable) --> Line_130 $$ out.setLength(0) [CD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_130 $$ out.setLength(0) [FD]
Line_129 $$ if (createSequenceTable) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [CD]
Line_6 $$ Appendable sql = out --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_118 $$ sql = getDialect().printIndex(index, out) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_125 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_131 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_129 $$ if (createSequenceTable) --> Line_132 $$ executeUpdate(sql, stat) [CD]
Line_6 $$ Appendable sql = out --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_118 $$ sql = getDialect().printIndex(index, out) --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_125 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_131 $$ sql = getDialect().printSequenceTable(this, out) --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_4 $$ Statement stat = null --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_14 $$ stat = conn.createStatement() --> Line_132 $$ executeUpdate(sql, stat) [FD]
Line_134 $$ List<MetaTable> cTables = null --> Line_137 $$ cTables = tables [FD]
Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() --> Line_137 $$ cTables = tables [FD]
Line_134 $$ List<MetaTable> cTables = null --> Line_141 $$ cTables = TABLES.getList(this) [FD]
Line_137 $$ cTables = tables --> Line_141 $$ cTables = TABLES.getList(this) [FD]
Line_134 $$ List<MetaTable> cTables = null --> Line_144 $$ cTables = Collections.emptyList() [FD]
Line_137 $$ cTables = tables --> Line_144 $$ cTables = Collections.emptyList() [FD]
Line_141 $$ cTables = TABLES.getList(this) --> Line_144 $$ cTables = Collections.emptyList() [FD]
Line_134 $$ List<MetaTable> cTables = null --> Line_149 $$ if (!cTables.isEmpty()) [FD]
Line_137 $$ cTables = tables --> Line_149 $$ if (!cTables.isEmpty()) [FD]
Line_141 $$ cTables = TABLES.getList(this) --> Line_149 $$ if (!cTables.isEmpty()) [FD]
Line_144 $$ cTables = Collections.emptyList() --> Line_149 $$ if (!cTables.isEmpty()) [FD]
Line_149 $$ if (!cTables.isEmpty()) --> Line_150 $$ sql = out [CD]
Line_6 $$ Appendable sql = out --> Line_150 $$ sql = out [FD]
Line_21 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_150 $$ sql = out [FD]
Line_88 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_150 $$ sql = out [FD]
Line_103 $$ sql = getDialect().printTable(table, out) --> Line_150 $$ sql = out [FD]
Line_110 $$ sql = getDialect().printAlterTable(column, out) --> Line_150 $$ sql = out [FD]
Line_118 $$ sql = getDialect().printIndex(index, out) --> Line_150 $$ sql = out [FD]
Line_125 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_150 $$ sql = out [FD]
Line_131 $$ sql = getDialect().printSequenceTable(this, out) --> Line_150 $$ sql = out [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_150 $$ sql = out [FD]
Line_149 $$ if (!cTables.isEmpty()) --> Line_151 $$ createTableComments(cTables, stat, out) [CD]
Line_134 $$ List<MetaTable> cTables = null --> Line_151 $$ createTableComments(cTables, stat, out) [FD]
Line_137 $$ cTables = tables --> Line_151 $$ createTableComments(cTables, stat, out) [FD]
Line_141 $$ cTables = TABLES.getList(this) --> Line_151 $$ createTableComments(cTables, stat, out) [FD]
Line_144 $$ cTables = Collections.emptyList() --> Line_151 $$ createTableComments(cTables, stat, out) [FD]
Line_4 $$ Statement stat = null --> Line_151 $$ createTableComments(cTables, stat, out) [FD]
Line_14 $$ stat = conn.createStatement() --> Line_151 $$ createTableComments(cTables, stat, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_151 $$ createTableComments(cTables, stat, out) [FD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_153 $$ conn.commit() [FD]
Line_3 $$ Connection conn = session.getConnection(this) --> Line_156 $$ conn.rollback() [FD]
