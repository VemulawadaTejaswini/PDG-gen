Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_3 $$ if (Val.chkStr(profileTag).equals("")) [CD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_3 $$ if (Val.chkStr(profileTag).equals("")) [FD]
Line_3 $$ if (Val.chkStr(profileTag).equals("")) --> Line_4 $$ profileTag = "Profile" [CD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_4 $$ profileTag = "Profile" [FD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_6 $$ String configuration_folder_path = this.getConfigurationFolderPath() [CD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_7 $$ if (configuration_folder_path == null || configuration_folder_path.length() == 0) [CD]
Line_6 $$ String configuration_folder_path = this.getConfigurationFolderPath() --> Line_7 $$ if (configuration_folder_path == null || configuration_folder_path.length() == 0) [FD]
Line_7 $$ if (configuration_folder_path == null || configuration_folder_path.length() == 0) --> Line_8 $$ Properties properties = new Properties() [CD]
Line_7 $$ if (configuration_folder_path == null || configuration_folder_path.length() == 0) --> Line_9 $$ final URL url = CswProfiles.class.getResource("CswCommon.properties") [CD]
Line_7 $$ if (configuration_folder_path == null || configuration_folder_path.length() == 0) --> Line_10 $$ properties.load(url.openStream()) [CD]
Line_8 $$ Properties properties = new Properties() --> Line_10 $$ properties.load(url.openStream()) [FD]
Line_7 $$ if (configuration_folder_path == null || configuration_folder_path.length() == 0) --> Line_11 $$ configuration_folder_path = properties.getProperty("DEFAULT_CONFIGURATION_FOLDER_PATH") [CD]
Line_6 $$ String configuration_folder_path = this.getConfigurationFolderPath() --> Line_11 $$ configuration_folder_path = properties.getProperty("DEFAULT_CONFIGURATION_FOLDER_PATH") [FD]
Line_8 $$ Properties properties = new Properties() --> Line_11 $$ configuration_folder_path = properties.getProperty("DEFAULT_CONFIGURATION_FOLDER_PATH") [FD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_13 $$ DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder() [CD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_14 $$ ResourcePath rscPath = new ResourcePath() [CD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_15 $$ InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename) [CD]
Line_14 $$ ResourcePath rscPath = new ResourcePath() --> Line_15 $$ InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename) [FD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_16 $$ if (configFile == null) [CD]
Line_15 $$ InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename) --> Line_16 $$ if (configFile == null) [FD]
Line_16 $$ if (configFile == null) --> Line_17 $$ configFile = rscPath.makeInputSource("/" + configuration_folder_path + filename) [CD]
Line_15 $$ InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename) --> Line_17 $$ configFile = rscPath.makeInputSource("/" + configuration_folder_path + filename) [FD]
Line_14 $$ ResourcePath rscPath = new ResourcePath() --> Line_17 $$ configFile = rscPath.makeInputSource("/" + configuration_folder_path + filename) [FD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_19 $$ Document doc = builder.parse(configFile) [CD]
Line_13 $$ DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder() --> Line_19 $$ Document doc = builder.parse(configFile) [FD]
Line_15 $$ InputSource configFile = rscPath.makeInputSource(configuration_folder_path + filename) --> Line_19 $$ Document doc = builder.parse(configFile) [FD]
Line_17 $$ configFile = rscPath.makeInputSource("/" + configuration_folder_path + filename) --> Line_19 $$ Document doc = builder.parse(configFile) [FD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_20 $$ NodeList profileNodes = doc.getElementsByTagName(profileTag) [CD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_20 $$ NodeList profileNodes = doc.getElementsByTagName(profileTag) [FD]
Line_19 $$ Document doc = builder.parse(configFile) --> Line_20 $$ NodeList profileNodes = doc.getElementsByTagName(profileTag) [FD]
Line_4 $$ profileTag = "Profile" --> Line_20 $$ NodeList profileNodes = doc.getElementsByTagName(profileTag) [FD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) [CD]
Line_20 $$ NodeList profileNodes = doc.getElementsByTagName(profileTag) --> Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_22 $$ Node currProfile = profileNodes.item(i) [CD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_22 $$ Node currProfile = profileNodes.item(i) [FD]
Line_20 $$ NodeList profileNodes = doc.getElementsByTagName(profileTag) --> Line_22 $$ Node currProfile = profileNodes.item(i) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() [CD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_24 $$ String id = Val.chkStr(xpath.evaluate("ID", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_24 $$ String id = Val.chkStr(xpath.evaluate("ID", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_24 $$ String id = Val.chkStr(xpath.evaluate("ID", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_25 $$ String name = Val.chkStr(xpath.evaluate("Name", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_25 $$ String name = Val.chkStr(xpath.evaluate("Name", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_25 $$ String name = Val.chkStr(xpath.evaluate("Name", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_26 $$ String description = Val.chkStr(xpath.evaluate("Description", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_26 $$ String description = Val.chkStr(xpath.evaluate("Description", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_26 $$ String description = Val.chkStr(xpath.evaluate("Description", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_27 $$ String requestXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_27 $$ String requestXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_27 $$ String requestXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_28 $$ String expectedGptXmlOutput = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request/@expectedGptXmlOutput", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_28 $$ String expectedGptXmlOutput = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request/@expectedGptXmlOutput", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_28 $$ String expectedGptXmlOutput = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request/@expectedGptXmlOutput", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_29 $$ if (expectedGptXmlOutput.equals("")) [CD]
Line_28 $$ String expectedGptXmlOutput = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request/@expectedGptXmlOutput", currProfile)) --> Line_29 $$ if (expectedGptXmlOutput.equals("")) [FD]
Line_29 $$ if (expectedGptXmlOutput.equals("")) --> Line_30 $$ expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString() [CD]
Line_28 $$ String expectedGptXmlOutput = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request/@expectedGptXmlOutput", currProfile)) --> Line_30 $$ expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString() [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_32 $$ String responseXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Response", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_32 $$ String responseXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Response", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_32 $$ String responseXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Response", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_33 $$ String requestKVPs = Val.chkStr(xpath.evaluate("GetRecordByID/RequestKVPs", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_33 $$ String requestKVPs = Val.chkStr(xpath.evaluate("GetRecordByID/RequestKVPs", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_33 $$ String requestKVPs = Val.chkStr(xpath.evaluate("GetRecordByID/RequestKVPs", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_34 $$ String metadataXslt = Val.chkStr(xpath.evaluate("GetRecordByID/XSLTransformations/Response", currProfile)) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_34 $$ String metadataXslt = Val.chkStr(xpath.evaluate("GetRecordByID/XSLTransformations/Response", currProfile)) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_34 $$ String metadataXslt = Val.chkStr(xpath.evaluate("GetRecordByID/XSLTransformations/Response", currProfile)) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_35 $$ boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialQuery", currProfile))) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_35 $$ boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialQuery", currProfile))) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_35 $$ boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialQuery", currProfile))) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_36 $$ boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportContentTypeQuery", currProfile))) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_36 $$ boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportContentTypeQuery", currProfile))) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_36 $$ boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportContentTypeQuery", currProfile))) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_37 $$ boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialBoundary", currProfile))) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_37 $$ boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialBoundary", currProfile))) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_37 $$ boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialBoundary", currProfile))) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_38 $$ boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("Harvestable", currProfile))) [CD]
Line_23 $$ XPath xpath = XPathFactory.newInstance().newXPath() --> Line_38 $$ boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("Harvestable", currProfile))) [FD]
Line_22 $$ Node currProfile = profileNodes.item(i) --> Line_38 $$ boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("Harvestable", currProfile))) [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_39 $$ requestXslt = configuration_folder_path + requestXslt [CD]
Line_27 $$ String requestXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request", currProfile)) --> Line_39 $$ requestXslt = configuration_folder_path + requestXslt [FD]
Line_6 $$ String configuration_folder_path = this.getConfigurationFolderPath() --> Line_39 $$ requestXslt = configuration_folder_path + requestXslt [FD]
Line_11 $$ configuration_folder_path = properties.getProperty("DEFAULT_CONFIGURATION_FOLDER_PATH") --> Line_39 $$ requestXslt = configuration_folder_path + requestXslt [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_40 $$ responseXslt = configuration_folder_path + responseXslt [CD]
Line_32 $$ String responseXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Response", currProfile)) --> Line_40 $$ responseXslt = configuration_folder_path + responseXslt [FD]
Line_6 $$ String configuration_folder_path = this.getConfigurationFolderPath() --> Line_40 $$ responseXslt = configuration_folder_path + responseXslt [FD]
Line_11 $$ configuration_folder_path = properties.getProperty("DEFAULT_CONFIGURATION_FOLDER_PATH") --> Line_40 $$ responseXslt = configuration_folder_path + responseXslt [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_41 $$ metadataXslt = configuration_folder_path + metadataXslt [CD]
Line_34 $$ String metadataXslt = Val.chkStr(xpath.evaluate("GetRecordByID/XSLTransformations/Response", currProfile)) --> Line_41 $$ metadataXslt = configuration_folder_path + metadataXslt [FD]
Line_6 $$ String configuration_folder_path = this.getConfigurationFolderPath() --> Line_41 $$ metadataXslt = configuration_folder_path + metadataXslt [FD]
Line_11 $$ configuration_folder_path = properties.getProperty("DEFAULT_CONFIGURATION_FOLDER_PATH") --> Line_41 $$ metadataXslt = configuration_folder_path + metadataXslt [FD]
Line_21 $$ for (int i = 0; i < profileNodes.getLength(); i++) --> Line_42 $$ SearchXslProfile profile = null [CD]
Line_42 $$ SearchXslProfile profile = null --> Line_44 $$ profile = xslProfileClass.getClass().newInstance() [FD]
Line_2 $$ public void loadProfilefromConfig(String filename, P xslProfileClass, String profileTag) throws ParserConfigurationException, SAXException, IOException, XPathExpressionException --> Line_44 $$ profile = xslProfileClass.getClass().newInstance() [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_45 $$ profile.setId(id) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_45 $$ profile.setId(id) [FD]
Line_24 $$ String id = Val.chkStr(xpath.evaluate("ID", currProfile)) --> Line_45 $$ profile.setId(id) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_46 $$ profile.setName(name) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_46 $$ profile.setName(name) [FD]
Line_25 $$ String name = Val.chkStr(xpath.evaluate("Name", currProfile)) --> Line_46 $$ profile.setName(name) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_47 $$ profile.setDescription(description) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_47 $$ profile.setDescription(description) [FD]
Line_26 $$ String description = Val.chkStr(xpath.evaluate("Description", currProfile)) --> Line_47 $$ profile.setDescription(description) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_48 $$ profile.setRequestxslt(requestXslt) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_48 $$ profile.setRequestxslt(requestXslt) [FD]
Line_27 $$ String requestXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request", currProfile)) --> Line_48 $$ profile.setRequestxslt(requestXslt) [FD]
Line_39 $$ requestXslt = configuration_folder_path + requestXslt --> Line_48 $$ profile.setRequestxslt(requestXslt) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_49 $$ profile.setResponsexslt(responseXslt) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_49 $$ profile.setResponsexslt(responseXslt) [FD]
Line_32 $$ String responseXslt = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Response", currProfile)) --> Line_49 $$ profile.setResponsexslt(responseXslt) [FD]
Line_40 $$ responseXslt = configuration_folder_path + responseXslt --> Line_49 $$ profile.setResponsexslt(responseXslt) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_50 $$ profile.setMetadataxslt(metadataXslt) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_50 $$ profile.setMetadataxslt(metadataXslt) [FD]
Line_34 $$ String metadataXslt = Val.chkStr(xpath.evaluate("GetRecordByID/XSLTransformations/Response", currProfile)) --> Line_50 $$ profile.setMetadataxslt(metadataXslt) [FD]
Line_41 $$ metadataXslt = configuration_folder_path + metadataXslt --> Line_50 $$ profile.setMetadataxslt(metadataXslt) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_51 $$ profile.setSupportsContentTypeQuery(liveDataMaps) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_51 $$ profile.setSupportsContentTypeQuery(liveDataMaps) [FD]
Line_36 $$ boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportContentTypeQuery", currProfile))) --> Line_51 $$ profile.setSupportsContentTypeQuery(liveDataMaps) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_52 $$ profile.setSupportsSpatialBoundary(extentDisplay) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_52 $$ profile.setSupportsSpatialBoundary(extentDisplay) [FD]
Line_37 $$ boolean extentDisplay = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialBoundary", currProfile))) --> Line_52 $$ profile.setSupportsSpatialBoundary(extentDisplay) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_53 $$ profile.setSupportsSpatialQuery(extentSearch) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_53 $$ profile.setSupportsSpatialQuery(extentSearch) [FD]
Line_35 $$ boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialQuery", currProfile))) --> Line_53 $$ profile.setSupportsSpatialQuery(extentSearch) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_54 $$ profile.setKvp(requestKVPs) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_54 $$ profile.setKvp(requestKVPs) [FD]
Line_33 $$ String requestKVPs = Val.chkStr(xpath.evaluate("GetRecordByID/RequestKVPs", currProfile)) --> Line_54 $$ profile.setKvp(requestKVPs) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_55 $$ profile.setHarvestable(harvestable) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_55 $$ profile.setHarvestable(harvestable) [FD]
Line_38 $$ boolean harvestable = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("Harvestable", currProfile))) --> Line_55 $$ profile.setHarvestable(harvestable) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_56 $$ profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput)) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_56 $$ profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput)) [FD]
Line_28 $$ String expectedGptXmlOutput = Val.chkStr(xpath.evaluate("GetRecords/XSLTransformations/Request/@expectedGptXmlOutput", currProfile)) --> Line_56 $$ profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput)) [FD]
Line_30 $$ expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString() --> Line_56 $$ profile.setFormatRequestToXsl(SearchXslProfile.FORMAT_SEARCH_TO_XSL.valueOf(expectedGptXmlOutput)) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_57 $$ profile.setFilter_extentsearch(extentSearch) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_57 $$ profile.setFilter_extentsearch(extentSearch) [FD]
Line_35 $$ boolean extentSearch = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportSpatialQuery", currProfile))) --> Line_57 $$ profile.setFilter_extentsearch(extentSearch) [FD]
Line_42 $$ SearchXslProfile profile = null --> Line_58 $$ profile.setFilter_livedatamap(liveDataMaps) [FD]
Line_44 $$ profile = xslProfileClass.getClass().newInstance() --> Line_58 $$ profile.setFilter_livedatamap(liveDataMaps) [FD]
Line_36 $$ boolean liveDataMaps = Boolean.parseBoolean(Val.chkStr(xpath.evaluate("SupportContentTypeQuery", currProfile))) --> Line_58 $$ profile.setFilter_livedatamap(liveDataMaps) [FD]
Line_30 $$ expectedGptXmlOutput = FORMAT_SEARCH_TO_XSL.MINIMAL_LEGACY_CSWCLIENT.toString() --> Line_29 $$ if (expectedGptXmlOutput.equals("")) [FD]
