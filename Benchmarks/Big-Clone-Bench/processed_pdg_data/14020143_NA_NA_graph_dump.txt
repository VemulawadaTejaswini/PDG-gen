Line_2 $$ public byte[] evaluateResponse(byte[] responseBytes) throws SaslException --> Line_3 $$ if (firstEvaluation) [CD]
Line_3 $$ if (firstEvaluation) --> Line_5 $$ StringBuilder challenge = new StringBuilder(100) [CD]
Line_3 $$ if (firstEvaluation) --> Line_6 $$ Iterator iter = configurationManager.getRealms().values().iterator() [CD]
Line_3 $$ if (firstEvaluation) --> Line_7 $$ Realm aRealm [CD]
Line_3 $$ if (firstEvaluation) --> Line_8 $$ while (iter.hasNext()) [CD]
Line_6 $$ Iterator iter = configurationManager.getRealms().values().iterator() --> Line_8 $$ while (iter.hasNext()) [FD]
Line_8 $$ while (iter.hasNext()) --> Line_9 $$ aRealm = (Realm) iter.next() [CD]
Line_7 $$ Realm aRealm --> Line_9 $$ aRealm = (Realm) iter.next() [FD]
Line_6 $$ Iterator iter = configurationManager.getRealms().values().iterator() --> Line_9 $$ aRealm = (Realm) iter.next() [FD]
Line_8 $$ while (iter.hasNext()) --> Line_10 $$ if (aRealm.getFullRealmName().equals("null")) [CD]
Line_9 $$ aRealm = (Realm) iter.next() --> Line_10 $$ if (aRealm.getFullRealmName().equals("null")) [FD]
Line_7 $$ Realm aRealm --> Line_10 $$ if (aRealm.getFullRealmName().equals("null")) [FD]
Line_8 $$ while (iter.hasNext()) --> Line_11 $$ challenge.append("realm=\"" + aRealm.getFullRealmName() + "\"") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_11 $$ challenge.append("realm=\"" + aRealm.getFullRealmName() + "\"") [FD]
Line_9 $$ aRealm = (Realm) iter.next() --> Line_11 $$ challenge.append("realm=\"" + aRealm.getFullRealmName() + "\"") [FD]
Line_7 $$ Realm aRealm --> Line_11 $$ challenge.append("realm=\"" + aRealm.getFullRealmName() + "\"") [FD]
Line_8 $$ while (iter.hasNext()) --> Line_12 $$ challenge.append(",") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_12 $$ challenge.append(",") [FD]
Line_3 $$ if (firstEvaluation) --> Line_14 $$ String nonceUUID = UUID.randomUUID().toString() [CD]
Line_3 $$ if (firstEvaluation) --> Line_15 $$ String nonce = null [CD]
Line_15 $$ String nonce = null --> Line_17 $$ nonce = new String(Base64.encodeBase64(MD5Digest(String.valueOf(System.nanoTime() + ":" + nonceUUID))), "US-ASCII") [FD]
Line_3 $$ if (firstEvaluation) --> Line_23 $$ nonces.put(nonce, new ArrayList()) [CD]
Line_15 $$ String nonce = null --> Line_23 $$ nonces.put(nonce, new ArrayList()) [FD]
Line_17 $$ nonce = new String(Base64.encodeBase64(MD5Digest(String.valueOf(System.nanoTime() + ":" + nonceUUID))), "US-ASCII") --> Line_23 $$ nonces.put(nonce, new ArrayList()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_24 $$ nonces.get(nonce).add(Integer.valueOf(1)) [CD]
Line_15 $$ String nonce = null --> Line_24 $$ nonces.get(nonce).add(Integer.valueOf(1)) [FD]
Line_17 $$ nonce = new String(Base64.encodeBase64(MD5Digest(String.valueOf(System.nanoTime() + ":" + nonceUUID))), "US-ASCII") --> Line_24 $$ nonces.get(nonce).add(Integer.valueOf(1)) [FD]
Line_3 $$ if (firstEvaluation) --> Line_25 $$ challenge.append("nonce=\"" + nonce + "\"") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_25 $$ challenge.append("nonce=\"" + nonce + "\"") [FD]
Line_3 $$ if (firstEvaluation) --> Line_26 $$ challenge.append(",") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_26 $$ challenge.append(",") [FD]
Line_3 $$ if (firstEvaluation) --> Line_27 $$ challenge.append("qop=\"" + configurationManager.getSaslQOP() + "\"") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_27 $$ challenge.append("qop=\"" + configurationManager.getSaslQOP() + "\"") [FD]
Line_3 $$ if (firstEvaluation) --> Line_28 $$ challenge.append(",") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_28 $$ challenge.append(",") [FD]
Line_3 $$ if (firstEvaluation) --> Line_29 $$ challenge.append("charset=\"utf-8\"") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_29 $$ challenge.append("charset=\"utf-8\"") [FD]
Line_3 $$ if (firstEvaluation) --> Line_30 $$ challenge.append(",") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_30 $$ challenge.append(",") [FD]
Line_3 $$ if (firstEvaluation) --> Line_31 $$ challenge.append("algorithm=\"md5-sess\"") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_31 $$ challenge.append("algorithm=\"md5-sess\"") [FD]
Line_3 $$ if (firstEvaluation) --> Line_32 $$ if (configurationManager.getSaslQOP().indexOf("auth-conf") != -1) [CD]
Line_32 $$ if (configurationManager.getSaslQOP().indexOf("auth-conf") != -1) --> Line_33 $$ challenge.append(",") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_33 $$ challenge.append(",") [FD]
Line_32 $$ if (configurationManager.getSaslQOP().indexOf("auth-conf") != -1) --> Line_34 $$ challenge.append("cipher-opts=\"" + configurationManager.getDigestMD5Ciphers() + "\"") [CD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_34 $$ challenge.append("cipher-opts=\"" + configurationManager.getDigestMD5Ciphers() + "\"") [FD]
Line_5 $$ StringBuilder challenge = new StringBuilder(100) --> Line_37 $$ return Base64.encodeBase64(challenge.toString().getBytes("US-ASCII")) [FD]
Line_3 $$ if (firstEvaluation) --> Line_43 $$ if (!Base64.isArrayByteBase64(responseBytes)) [CD]
Line_2 $$ public byte[] evaluateResponse(byte[] responseBytes) throws SaslException --> Line_43 $$ if (!Base64.isArrayByteBase64(responseBytes)) [FD]
Line_3 $$ if (firstEvaluation) --> Line_46 $$ responseBytes = Base64.decodeBase64(responseBytes) [CD]
Line_2 $$ public byte[] evaluateResponse(byte[] responseBytes) throws SaslException --> Line_46 $$ responseBytes = Base64.decodeBase64(responseBytes) [FD]
Line_3 $$ if (firstEvaluation) --> Line_47 $$ List<byte[]> splittedBytes = splitByteArray(responseBytes, (byte) 0x3d) [CD]
Line_2 $$ public byte[] evaluateResponse(byte[] responseBytes) throws SaslException --> Line_47 $$ List<byte[]> splittedBytes = splitByteArray(responseBytes, (byte) 0x3d) [FD]
Line_46 $$ responseBytes = Base64.decodeBase64(responseBytes) --> Line_47 $$ List<byte[]> splittedBytes = splitByteArray(responseBytes, (byte) 0x3d) [FD]
Line_3 $$ if (firstEvaluation) --> Line_48 $$ int tokenCountMinus1 = splittedBytes.size() - 1, lastCommaPos [CD]
Line_47 $$ List<byte[]> splittedBytes = splitByteArray(responseBytes, (byte) 0x3d) --> Line_48 $$ int tokenCountMinus1 = splittedBytes.size() - 1, lastCommaPos [FD]
Line_3 $$ if (firstEvaluation) --> Line_49 $$ Map rawDirectives = new HashMap() [CD]
Line_3 $$ if (firstEvaluation) --> Line_50 $$ String key = null [CD]
Line_3 $$ if (firstEvaluation) --> Line_51 $$ Map<String, String> directives [CD]
Line_50 $$ String key = null --> Line_53 $$ key = new String(splittedBytes.get(0), "US-ASCII") [FD]
Line_47 $$ List<byte[]> splittedBytes = splitByteArray(responseBytes, (byte) 0x3d) --> Line_53 $$ key = new String(splittedBytes.get(0), "US-ASCII") [FD]
Line_48 $$ int tokenCountMinus1 = splittedBytes.size() - 1, lastCommaPos --> Line_54 $$ for (int i = 1; i < tokenCountMinus1; i++) [FD]
Line_54 $$ for (int i = 1; i < tokenCountMinus1; i++) --> Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) [CD]
Line_54 $$ for (int i = 1; i < tokenCountMinus1; i++) --> Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) [FD]
Line_50 $$ String key = null --> Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) [FD]
Line_53 $$ key = new String(splittedBytes.get(0), "US-ASCII") --> Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) [FD]
Line_47 $$ List<byte[]> splittedBytes = splitByteArray(responseBytes, (byte) 0x3d) --> Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) [FD]
Line_49 $$ Map rawDirectives = new HashMap() --> Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) [FD]
Line_48 $$ int tokenCountMinus1 = splittedBytes.size() - 1, lastCommaPos --> Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) [FD]
Line_47 $$ List<byte[]> splittedBytes = splitByteArray(responseBytes, (byte) 0x3d) --> Line_57 $$ responseTokenProcessor(splittedBytes, rawDirectives, key, tokenCountMinus1, tokenCountMinus1) [FD]
Line_49 $$ Map rawDirectives = new HashMap() --> Line_57 $$ responseTokenProcessor(splittedBytes, rawDirectives, key, tokenCountMinus1, tokenCountMinus1) [FD]
Line_55 $$ key = responseTokenProcessor(splittedBytes, rawDirectives, key, i, tokenCountMinus1) --> Line_57 $$ responseTokenProcessor(splittedBytes, rawDirectives, key, tokenCountMinus1, tokenCountMinus1) [FD]
Line_50 $$ String key = null --> Line_57 $$ responseTokenProcessor(splittedBytes, rawDirectives, key, tokenCountMinus1, tokenCountMinus1) [FD]
Line_53 $$ key = new String(splittedBytes.get(0), "US-ASCII") --> Line_57 $$ responseTokenProcessor(splittedBytes, rawDirectives, key, tokenCountMinus1, tokenCountMinus1) [FD]
Line_48 $$ int tokenCountMinus1 = splittedBytes.size() - 1, lastCommaPos --> Line_57 $$ responseTokenProcessor(splittedBytes, rawDirectives, key, tokenCountMinus1, tokenCountMinus1) [FD]
Line_49 $$ Map rawDirectives = new HashMap() --> Line_58 $$ if (rawDirectives.containsKey("charset")) [FD]
Line_58 $$ if (rawDirectives.containsKey("charset")) --> Line_59 $$ String value = new String((byte[]) rawDirectives.get("charset"), "US-ASCII").toLowerCase(locale) [CD]
Line_49 $$ Map rawDirectives = new HashMap() --> Line_59 $$ String value = new String((byte[]) rawDirectives.get("charset"), "US-ASCII").toLowerCase(locale) [FD]
Line_58 $$ if (rawDirectives.containsKey("charset")) --> Line_60 $$ if (value.equals("utf-8")) [CD]
Line_59 $$ String value = new String((byte[]) rawDirectives.get("charset"), "US-ASCII").toLowerCase(locale) --> Line_60 $$ if (value.equals("utf-8")) [FD]
Line_64 $$ if (encoding.equals("ISO-8859-1")) --> Line_65 $$ decodeAllAs8859(rawDirectives) [CD]
Line_49 $$ Map rawDirectives = new HashMap() --> Line_65 $$ decodeAllAs8859(rawDirectives) [FD]
Line_64 $$ if (encoding.equals("ISO-8859-1")) --> Line_67 $$ decodeMixed(rawDirectives) [CD]
Line_49 $$ Map rawDirectives = new HashMap() --> Line_67 $$ decodeMixed(rawDirectives) [FD]
Line_51 $$ Map<String, String> directives --> Line_69 $$ directives = rawDirectives [FD]
Line_49 $$ Map rawDirectives = new HashMap() --> Line_69 $$ directives = rawDirectives [FD]
Line_3 $$ if (firstEvaluation) --> Line_73 $$ if (!directives.containsKey("username") || !directives.containsKey("nonce") || !directives.containsKey("nc") || !directives.containsKey("cnonce") || !directives.containsKey("response")) [CD]
Line_51 $$ Map<String, String> directives --> Line_73 $$ if (!directives.containsKey("username") || !directives.containsKey("nonce") || !directives.containsKey("nc") || !directives.containsKey("cnonce") || !directives.containsKey("response")) [FD]
Line_69 $$ directives = rawDirectives --> Line_73 $$ if (!directives.containsKey("username") || !directives.containsKey("nonce") || !directives.containsKey("nc") || !directives.containsKey("cnonce") || !directives.containsKey("response")) [FD]
Line_3 $$ if (firstEvaluation) --> Line_76 $$ if (directives.get("username").indexOf('@') != -1) [CD]
Line_51 $$ Map<String, String> directives --> Line_76 $$ if (directives.get("username").indexOf('@') != -1) [FD]
Line_69 $$ directives = rawDirectives --> Line_76 $$ if (directives.get("username").indexOf('@') != -1) [FD]
Line_3 $$ if (firstEvaluation) --> Line_79 $$ if (!directives.containsKey("qop")) [CD]
Line_51 $$ Map<String, String> directives --> Line_79 $$ if (!directives.containsKey("qop")) [FD]
Line_69 $$ directives = rawDirectives --> Line_79 $$ if (!directives.containsKey("qop")) [FD]
Line_79 $$ if (!directives.containsKey("qop")) --> Line_80 $$ directives.put("qop", QOP_AUTH) [CD]
Line_51 $$ Map<String, String> directives --> Line_80 $$ directives.put("qop", QOP_AUTH) [FD]
Line_69 $$ directives = rawDirectives --> Line_80 $$ directives.put("qop", QOP_AUTH) [FD]
Line_3 $$ if (firstEvaluation) --> Line_82 $$ if (!directives.containsKey("realm") || ((String) directives.get("realm")).equals("")) [CD]
Line_51 $$ Map<String, String> directives --> Line_82 $$ if (!directives.containsKey("realm") || ((String) directives.get("realm")).equals("")) [FD]
Line_69 $$ directives = rawDirectives --> Line_82 $$ if (!directives.containsKey("realm") || ((String) directives.get("realm")).equals("")) [FD]
Line_82 $$ if (!directives.containsKey("realm") || ((String) directives.get("realm")).equals("")) --> Line_83 $$ directives.put("realm", "null") [CD]
Line_51 $$ Map<String, String> directives --> Line_83 $$ directives.put("realm", "null") [FD]
Line_69 $$ directives = rawDirectives --> Line_83 $$ directives.put("realm", "null") [FD]
Line_3 $$ if (firstEvaluation) --> Line_85 $$ nonce = (String) directives.get("nonce") [CD]
Line_15 $$ String nonce = null --> Line_85 $$ nonce = (String) directives.get("nonce") [FD]
Line_17 $$ nonce = new String(Base64.encodeBase64(MD5Digest(String.valueOf(System.nanoTime() + ":" + nonceUUID))), "US-ASCII") --> Line_85 $$ nonce = (String) directives.get("nonce") [FD]
Line_51 $$ Map<String, String> directives --> Line_85 $$ nonce = (String) directives.get("nonce") [FD]
Line_69 $$ directives = rawDirectives --> Line_85 $$ nonce = (String) directives.get("nonce") [FD]
Line_3 $$ if (firstEvaluation) --> Line_86 $$ if (!nonces.containsKey(nonce)) [CD]
Line_15 $$ String nonce = null --> Line_86 $$ if (!nonces.containsKey(nonce)) [FD]
Line_17 $$ nonce = new String(Base64.encodeBase64(MD5Digest(String.valueOf(System.nanoTime() + ":" + nonceUUID))), "US-ASCII") --> Line_86 $$ if (!nonces.containsKey(nonce)) [FD]
Line_85 $$ nonce = (String) directives.get("nonce") --> Line_86 $$ if (!nonces.containsKey(nonce)) [FD]
Line_3 $$ if (firstEvaluation) --> Line_89 $$ List<Integer> nonceListInMap = nonces.get(nonce) [CD]
Line_15 $$ String nonce = null --> Line_89 $$ List<Integer> nonceListInMap = nonces.get(nonce) [FD]
Line_17 $$ nonce = new String(Base64.encodeBase64(MD5Digest(String.valueOf(System.nanoTime() + ":" + nonceUUID))), "US-ASCII") --> Line_89 $$ List<Integer> nonceListInMap = nonces.get(nonce) [FD]
Line_85 $$ nonce = (String) directives.get("nonce") --> Line_89 $$ List<Integer> nonceListInMap = nonces.get(nonce) [FD]
Line_3 $$ if (firstEvaluation) --> Line_90 $$ int nc = Integer.parseInt((String) directives.get("nc"), 16) [CD]
Line_51 $$ Map<String, String> directives --> Line_90 $$ int nc = Integer.parseInt((String) directives.get("nc"), 16) [FD]
Line_69 $$ directives = rawDirectives --> Line_90 $$ int nc = Integer.parseInt((String) directives.get("nc"), 16) [FD]
Line_3 $$ if (firstEvaluation) --> Line_91 $$ if (nonceListInMap.get(nonceListInMap.size() - 1).equals(Integer.valueOf(nc))) [CD]
Line_89 $$ List<Integer> nonceListInMap = nonces.get(nonce) --> Line_91 $$ if (nonceListInMap.get(nonceListInMap.size() - 1).equals(Integer.valueOf(nc))) [FD]
Line_90 $$ int nc = Integer.parseInt((String) directives.get("nc"), 16) --> Line_91 $$ if (nonceListInMap.get(nonceListInMap.size() - 1).equals(Integer.valueOf(nc))) [FD]
Line_91 $$ if (nonceListInMap.get(nonceListInMap.size() - 1).equals(Integer.valueOf(nc))) --> Line_92 $$ nonceListInMap.add(Integer.valueOf(++nc)) [CD]
Line_89 $$ List<Integer> nonceListInMap = nonces.get(nonce) --> Line_92 $$ nonceListInMap.add(Integer.valueOf(++nc)) [FD]
Line_90 $$ int nc = Integer.parseInt((String) directives.get("nc"), 16) --> Line_92 $$ nonceListInMap.add(Integer.valueOf(++nc)) [FD]
Line_3 $$ if (firstEvaluation) --> Line_96 $$ nonceListInMap = null [CD]
Line_89 $$ List<Integer> nonceListInMap = nonces.get(nonce) --> Line_96 $$ nonceListInMap = null [FD]
Line_3 $$ if (firstEvaluation) --> Line_97 $$ if (directives.get("qop").equals(QOP_AUTH_CONF)) [CD]
Line_51 $$ Map<String, String> directives --> Line_97 $$ if (directives.get("qop").equals(QOP_AUTH_CONF)) [FD]
Line_69 $$ directives = rawDirectives --> Line_97 $$ if (directives.get("qop").equals(QOP_AUTH_CONF)) [FD]
Line_3 $$ if (firstEvaluation) --> Line_98 $$ if (privacy) [CD]
Line_98 $$ if (privacy) --> Line_99 $$ if (!directives.containsKey("cipher")) [CD]
Line_51 $$ Map<String, String> directives --> Line_99 $$ if (!directives.containsKey("cipher")) [FD]
Line_69 $$ directives = rawDirectives --> Line_99 $$ if (!directives.containsKey("cipher")) [FD]
Line_98 $$ if (privacy) --> Line_102 $$ sessionCipher = directives.get("cipher").toLowerCase(locale) [CD]
Line_51 $$ Map<String, String> directives --> Line_102 $$ sessionCipher = directives.get("cipher").toLowerCase(locale) [FD]
Line_69 $$ directives = rawDirectives --> Line_102 $$ sessionCipher = directives.get("cipher").toLowerCase(locale) [FD]
Line_98 $$ if (privacy) --> Line_103 $$ if ("3des,des,rc4-40,rc4,rc4-56".indexOf(sessionCipher) == -1) [CD]
Line_3 $$ if (firstEvaluation) --> Line_107 $$ String realm = directives.get("realm").toLowerCase(Locale.getDefault()) [CD]
Line_51 $$ Map<String, String> directives --> Line_107 $$ String realm = directives.get("realm").toLowerCase(Locale.getDefault()) [FD]
Line_69 $$ directives = rawDirectives --> Line_107 $$ String realm = directives.get("realm").toLowerCase(Locale.getDefault()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_108 $$ String username = directives.get("username").toLowerCase(locale) [CD]
Line_51 $$ Map<String, String> directives --> Line_108 $$ String username = directives.get("username").toLowerCase(locale) [FD]
Line_69 $$ directives = rawDirectives --> Line_108 $$ String username = directives.get("username").toLowerCase(locale) [FD]
Line_3 $$ if (firstEvaluation) --> Line_109 $$ if (username.indexOf('@') == -1) [CD]
Line_108 $$ String username = directives.get("username").toLowerCase(locale) --> Line_109 $$ if (username.indexOf('@') == -1) [FD]
Line_109 $$ if (username.indexOf('@') == -1) --> Line_110 $$ if (!directives.get("realm").equals("null")) [CD]
Line_51 $$ Map<String, String> directives --> Line_110 $$ if (!directives.get("realm").equals("null")) [FD]
Line_69 $$ directives = rawDirectives --> Line_110 $$ if (!directives.get("realm").equals("null")) [FD]
Line_110 $$ if (!directives.get("realm").equals("null")) --> Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) [CD]
Line_108 $$ String username = directives.get("username").toLowerCase(locale) --> Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) [FD]
Line_51 $$ Map<String, String> directives --> Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) [FD]
Line_69 $$ directives = rawDirectives --> Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) [FD]
Line_110 $$ if (!directives.get("realm").equals("null")) --> Line_112 $$ if (directives.get("authzid").indexOf('@') != -1) [CD]
Line_51 $$ Map<String, String> directives --> Line_112 $$ if (directives.get("authzid").indexOf('@') != -1) [FD]
Line_69 $$ directives = rawDirectives --> Line_112 $$ if (directives.get("authzid").indexOf('@') != -1) [FD]
Line_112 $$ if (directives.get("authzid").indexOf('@') != -1) --> Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) [CD]
Line_108 $$ String username = directives.get("username").toLowerCase(locale) --> Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) [FD]
Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) --> Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) [FD]
Line_51 $$ Map<String, String> directives --> Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) [FD]
Line_69 $$ directives = rawDirectives --> Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) [FD]
Line_3 $$ if (firstEvaluation) --> Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) [CD]
Line_107 $$ String realm = directives.get("realm").toLowerCase(Locale.getDefault()) --> Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) [FD]
Line_108 $$ String username = directives.get("username").toLowerCase(locale) --> Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) [FD]
Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) --> Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) [FD]
Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) --> Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) [FD]
Line_3 $$ if (firstEvaluation) --> Line_117 $$ if (domainWithPassword == null || domainWithPassword.getPassword() == null) [CD]
Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) --> Line_117 $$ if (domainWithPassword == null || domainWithPassword.getPassword() == null) [FD]
Line_117 $$ if (domainWithPassword == null || domainWithPassword.getPassword() == null) --> Line_118 $$ log.warn("The supplied username and/or realm do(es) not match a registered entry") [CD]
Line_117 $$ if (domainWithPassword == null || domainWithPassword.getPassword() == null) --> Line_119 $$ return null [CD]
Line_3 $$ if (firstEvaluation) --> Line_121 $$ if (realm.equals("null") && username.indexOf('@') == -1) [CD]
Line_107 $$ String realm = directives.get("realm").toLowerCase(Locale.getDefault()) --> Line_121 $$ if (realm.equals("null") && username.indexOf('@') == -1) [FD]
Line_108 $$ String username = directives.get("username").toLowerCase(locale) --> Line_121 $$ if (realm.equals("null") && username.indexOf('@') == -1) [FD]
Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) --> Line_121 $$ if (realm.equals("null") && username.indexOf('@') == -1) [FD]
Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) --> Line_121 $$ if (realm.equals("null") && username.indexOf('@') == -1) [FD]
Line_121 $$ if (realm.equals("null") && username.indexOf('@') == -1) --> Line_122 $$ username += "@" + domainWithPassword.getDomain() [CD]
Line_108 $$ String username = directives.get("username").toLowerCase(locale) --> Line_122 $$ username += "@" + domainWithPassword.getDomain() [FD]
Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) --> Line_122 $$ username += "@" + domainWithPassword.getDomain() [FD]
Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) --> Line_122 $$ username += "@" + domainWithPassword.getDomain() [FD]
Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) --> Line_122 $$ username += "@" + domainWithPassword.getDomain() [FD]
Line_3 $$ if (firstEvaluation) --> Line_124 $$ byte[] HA1 = toByteArray(domainWithPassword.getPassword()) [CD]
Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) --> Line_124 $$ byte[] HA1 = toByteArray(domainWithPassword.getPassword()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_125 $$ for (int i = domainWithPassword.getPassword().length - 1; i >= 0; i--) [CD]
Line_54 $$ for (int i = 1; i < tokenCountMinus1; i++) --> Line_125 $$ for (int i = domainWithPassword.getPassword().length - 1; i >= 0; i--) [FD]
Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) --> Line_125 $$ for (int i = domainWithPassword.getPassword().length - 1; i >= 0; i--) [FD]
Line_125 $$ for (int i = domainWithPassword.getPassword().length - 1; i >= 0; i--) --> Line_126 $$ domainWithPassword.getPassword()[i] = 0xff [CD]
Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) --> Line_126 $$ domainWithPassword.getPassword()[i] = 0xff [FD]
Line_3 $$ if (firstEvaluation) --> Line_128 $$ domainWithPassword = null [CD]
Line_116 $$ DomainWithPassword domainWithPassword = configurationManager.getRealmPassword(realm, username) --> Line_128 $$ domainWithPassword = null [FD]
Line_3 $$ if (firstEvaluation) --> Line_129 $$ MessageDigest md = null [CD]
Line_129 $$ MessageDigest md = null --> Line_131 $$ md = MessageDigest.getInstance("MD5") [FD]
Line_3 $$ if (firstEvaluation) --> Line_135 $$ md.update(HA1) [CD]
Line_129 $$ MessageDigest md = null --> Line_135 $$ md.update(HA1) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_135 $$ md.update(HA1) [FD]
Line_124 $$ byte[] HA1 = toByteArray(domainWithPassword.getPassword()) --> Line_135 $$ md.update(HA1) [FD]
Line_3 $$ if (firstEvaluation) --> Line_136 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_136 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_136 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_137 $$ md.update((directives.get("nonce")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_137 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_137 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_137 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_137 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_138 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_138 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_138 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_139 $$ md.update((directives.get("cnonce")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_139 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_139 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_139 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_139 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_140 $$ if (directives.containsKey("authzid")) [CD]
Line_51 $$ Map<String, String> directives --> Line_140 $$ if (directives.containsKey("authzid")) [FD]
Line_69 $$ directives = rawDirectives --> Line_140 $$ if (directives.containsKey("authzid")) [FD]
Line_140 $$ if (directives.containsKey("authzid")) --> Line_141 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_141 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_141 $$ md.update(":".getBytes()) [FD]
Line_140 $$ if (directives.containsKey("authzid")) --> Line_142 $$ md.update((directives.get("authzid")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_142 $$ md.update((directives.get("authzid")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_142 $$ md.update((directives.get("authzid")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_142 $$ md.update((directives.get("authzid")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_142 $$ md.update((directives.get("authzid")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_144 $$ MD5DigestSessionKey = HA1 = md.digest() [CD]
Line_124 $$ byte[] HA1 = toByteArray(domainWithPassword.getPassword()) --> Line_144 $$ MD5DigestSessionKey = HA1 = md.digest() [FD]
Line_129 $$ MessageDigest md = null --> Line_144 $$ MD5DigestSessionKey = HA1 = md.digest() [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_144 $$ MD5DigestSessionKey = HA1 = md.digest() [FD]
Line_3 $$ if (firstEvaluation) --> Line_145 $$ String MD5DigestSessionKeyToHex = toHex(HA1, HA1.length) [CD]
Line_124 $$ byte[] HA1 = toByteArray(domainWithPassword.getPassword()) --> Line_145 $$ String MD5DigestSessionKeyToHex = toHex(HA1, HA1.length) [FD]
Line_144 $$ MD5DigestSessionKey = HA1 = md.digest() --> Line_145 $$ String MD5DigestSessionKeyToHex = toHex(HA1, HA1.length) [FD]
Line_3 $$ if (firstEvaluation) --> Line_146 $$ md.update("AUTHENTICATE".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_146 $$ md.update("AUTHENTICATE".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_146 $$ md.update("AUTHENTICATE".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_147 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_147 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_147 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_148 $$ md.update((directives.get("digest-uri")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_148 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_148 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_148 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_148 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_149 $$ if (!directives.get("qop").equals(QOP_AUTH)) [CD]
Line_51 $$ Map<String, String> directives --> Line_149 $$ if (!directives.get("qop").equals(QOP_AUTH)) [FD]
Line_69 $$ directives = rawDirectives --> Line_149 $$ if (!directives.get("qop").equals(QOP_AUTH)) [FD]
Line_149 $$ if (!directives.get("qop").equals(QOP_AUTH)) --> Line_150 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_150 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_150 $$ md.update(":".getBytes()) [FD]
Line_149 $$ if (!directives.get("qop").equals(QOP_AUTH)) --> Line_151 $$ md.update("00000000000000000000000000000000".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_151 $$ md.update("00000000000000000000000000000000".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_151 $$ md.update("00000000000000000000000000000000".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_153 $$ byte[] HA2 = md.digest() [CD]
Line_129 $$ MessageDigest md = null --> Line_153 $$ byte[] HA2 = md.digest() [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_153 $$ byte[] HA2 = md.digest() [FD]
Line_3 $$ if (firstEvaluation) --> Line_154 $$ String HA2HEX = toHex(HA2, HA2.length) [CD]
Line_153 $$ byte[] HA2 = md.digest() --> Line_154 $$ String HA2HEX = toHex(HA2, HA2.length) [FD]
Line_3 $$ if (firstEvaluation) --> Line_155 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_155 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_155 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [FD]
Line_145 $$ String MD5DigestSessionKeyToHex = toHex(HA1, HA1.length) --> Line_155 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_156 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_156 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_156 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_157 $$ md.update((directives.get("nonce")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_157 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_157 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_157 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_157 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_158 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_158 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_158 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_159 $$ md.update((directives.get("nc")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_159 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_159 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_159 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_159 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_160 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_160 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_160 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_161 $$ md.update((directives.get("cnonce")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_161 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_161 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_161 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_161 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_162 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_162 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_162 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_163 $$ md.update((directives.get("qop")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_163 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_163 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_163 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_163 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_164 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_164 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_164 $$ md.update(":".getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_165 $$ md.update(HA2HEX.getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_165 $$ md.update(HA2HEX.getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_165 $$ md.update(HA2HEX.getBytes()) [FD]
Line_154 $$ String HA2HEX = toHex(HA2, HA2.length) --> Line_165 $$ md.update(HA2HEX.getBytes()) [FD]
Line_3 $$ if (firstEvaluation) --> Line_166 $$ byte[] responseHash = md.digest() [CD]
Line_129 $$ MessageDigest md = null --> Line_166 $$ byte[] responseHash = md.digest() [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_166 $$ byte[] responseHash = md.digest() [FD]
Line_3 $$ if (firstEvaluation) --> Line_167 $$ String HexResponseHash = toHex(responseHash, responseHash.length) [CD]
Line_166 $$ byte[] responseHash = md.digest() --> Line_167 $$ String HexResponseHash = toHex(responseHash, responseHash.length) [FD]
Line_3 $$ if (firstEvaluation) --> Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) [CD]
Line_167 $$ String HexResponseHash = toHex(responseHash, responseHash.length) --> Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) [FD]
Line_51 $$ Map<String, String> directives --> Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) [FD]
Line_69 $$ directives = rawDirectives --> Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_169 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_169 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_169 $$ md.update(":".getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_170 $$ md.update((directives.get("digest-uri")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_170 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_170 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_170 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_170 $$ md.update((directives.get("digest-uri")).getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_171 $$ if (!directives.get("qop").equals(QOP_AUTH)) [CD]
Line_51 $$ Map<String, String> directives --> Line_171 $$ if (!directives.get("qop").equals(QOP_AUTH)) [FD]
Line_69 $$ directives = rawDirectives --> Line_171 $$ if (!directives.get("qop").equals(QOP_AUTH)) [FD]
Line_171 $$ if (!directives.get("qop").equals(QOP_AUTH)) --> Line_172 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_172 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_172 $$ md.update(":".getBytes()) [FD]
Line_171 $$ if (!directives.get("qop").equals(QOP_AUTH)) --> Line_173 $$ md.update("00000000000000000000000000000000".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_173 $$ md.update("00000000000000000000000000000000".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_173 $$ md.update("00000000000000000000000000000000".getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_175 $$ HA2 = md.digest() [CD]
Line_153 $$ byte[] HA2 = md.digest() --> Line_175 $$ HA2 = md.digest() [FD]
Line_129 $$ MessageDigest md = null --> Line_175 $$ HA2 = md.digest() [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_175 $$ HA2 = md.digest() [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_176 $$ HA2HEX = toHex(HA2, HA2.length) [CD]
Line_154 $$ String HA2HEX = toHex(HA2, HA2.length) --> Line_176 $$ HA2HEX = toHex(HA2, HA2.length) [FD]
Line_153 $$ byte[] HA2 = md.digest() --> Line_176 $$ HA2HEX = toHex(HA2, HA2.length) [FD]
Line_175 $$ HA2 = md.digest() --> Line_176 $$ HA2HEX = toHex(HA2, HA2.length) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_177 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_177 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_177 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [FD]
Line_145 $$ String MD5DigestSessionKeyToHex = toHex(HA1, HA1.length) --> Line_177 $$ md.update(MD5DigestSessionKeyToHex.getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_178 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_178 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_178 $$ md.update(":".getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_179 $$ md.update((directives.get("nonce")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_179 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_179 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_179 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_179 $$ md.update((directives.get("nonce")).getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_180 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_180 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_180 $$ md.update(":".getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_181 $$ md.update((directives.get("nc")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_181 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_181 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_181 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_181 $$ md.update((directives.get("nc")).getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_182 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_182 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_182 $$ md.update(":".getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_183 $$ md.update((directives.get("cnonce")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_183 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_183 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_183 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_183 $$ md.update((directives.get("cnonce")).getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_184 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_184 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_184 $$ md.update(":".getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_185 $$ md.update((directives.get("qop")).getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_185 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_185 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_51 $$ Map<String, String> directives --> Line_185 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_69 $$ directives = rawDirectives --> Line_185 $$ md.update((directives.get("qop")).getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_186 $$ md.update(":".getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_186 $$ md.update(":".getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_186 $$ md.update(":".getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_187 $$ md.update(HA2HEX.getBytes()) [CD]
Line_129 $$ MessageDigest md = null --> Line_187 $$ md.update(HA2HEX.getBytes()) [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_187 $$ md.update(HA2HEX.getBytes()) [FD]
Line_154 $$ String HA2HEX = toHex(HA2, HA2.length) --> Line_187 $$ md.update(HA2HEX.getBytes()) [FD]
Line_176 $$ HA2HEX = toHex(HA2, HA2.length) --> Line_187 $$ md.update(HA2HEX.getBytes()) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_188 $$ responseHash = md.digest() [CD]
Line_166 $$ byte[] responseHash = md.digest() --> Line_188 $$ responseHash = md.digest() [FD]
Line_129 $$ MessageDigest md = null --> Line_188 $$ responseHash = md.digest() [FD]
Line_131 $$ md = MessageDigest.getInstance("MD5") --> Line_188 $$ responseHash = md.digest() [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_189 $$ return finalizeAuthentication.finalize(responseHash, username) [CD]
Line_166 $$ byte[] responseHash = md.digest() --> Line_189 $$ return finalizeAuthentication.finalize(responseHash, username) [FD]
Line_188 $$ responseHash = md.digest() --> Line_189 $$ return finalizeAuthentication.finalize(responseHash, username) [FD]
Line_108 $$ String username = directives.get("username").toLowerCase(locale) --> Line_189 $$ return finalizeAuthentication.finalize(responseHash, username) [FD]
Line_111 $$ username += directives.get("realm").substring(directives.get("realm").indexOf('@')) --> Line_189 $$ return finalizeAuthentication.finalize(responseHash, username) [FD]
Line_113 $$ username += directives.get("authzid").substring(directives.get("authzid").indexOf('@')) --> Line_189 $$ return finalizeAuthentication.finalize(responseHash, username) [FD]
Line_122 $$ username += "@" + domainWithPassword.getDomain() --> Line_189 $$ return finalizeAuthentication.finalize(responseHash, username) [FD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_191 $$ log.warn("Improper credentials") [CD]
Line_168 $$ if (HexResponseHash.equals(directives.get("response"))) --> Line_192 $$ return null [CD]
