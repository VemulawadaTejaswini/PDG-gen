Line_2 $$ public void testScenario() throws Exception --> Line_3 $$ String expression = "SELECT id, name, address, phone FROM " + TABLE + " where id > 2 and id < 12 order by id" [CD]
Line_2 $$ public void testScenario() throws Exception --> Line_4 $$ SQLQuery query = new SQLQuery() [CD]
Line_2 $$ public void testScenario() throws Exception --> Line_5 $$ query.setResourceID(mResourceID) [CD]
Line_4 $$ SQLQuery query = new SQLQuery() --> Line_5 $$ query.setResourceID(mResourceID) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_6 $$ query.addExpression(expression) [CD]
Line_4 $$ SQLQuery query = new SQLQuery() --> Line_6 $$ query.addExpression(expression) [FD]
Line_3 $$ String expression = "SELECT id, name, address, phone FROM " + TABLE + " where id > 2 and id < 12 order by id" --> Line_6 $$ query.addExpression(expression) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_7 $$ TupleToWebRowSetCharArrays tupleToWebRowSet = new TupleToWebRowSetCharArrays() [CD]
Line_2 $$ public void testScenario() throws Exception --> Line_8 $$ tupleToWebRowSet.connectDataInput(query.getDataOutput()) [CD]
Line_7 $$ TupleToWebRowSetCharArrays tupleToWebRowSet = new TupleToWebRowSetCharArrays() --> Line_8 $$ tupleToWebRowSet.connectDataInput(query.getDataOutput()) [FD]
Line_4 $$ SQLQuery query = new SQLQuery() --> Line_8 $$ tupleToWebRowSet.connectDataInput(query.getDataOutput()) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_9 $$ DeliverToFTP deliverToFTP = new DeliverToFTP() [CD]
Line_2 $$ public void testScenario() throws Exception --> Line_10 $$ deliverToFTP.connectDataInput(tupleToWebRowSet.getResultOutput()) [CD]
Line_9 $$ DeliverToFTP deliverToFTP = new DeliverToFTP() --> Line_10 $$ deliverToFTP.connectDataInput(tupleToWebRowSet.getResultOutput()) [FD]
Line_7 $$ TupleToWebRowSetCharArrays tupleToWebRowSet = new TupleToWebRowSetCharArrays() --> Line_10 $$ deliverToFTP.connectDataInput(tupleToWebRowSet.getResultOutput()) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_11 $$ deliverToFTP.addFilename(FILE) [CD]
Line_9 $$ DeliverToFTP deliverToFTP = new DeliverToFTP() --> Line_11 $$ deliverToFTP.addFilename(FILE) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_12 $$ deliverToFTP.addHost(mURL) [CD]
Line_9 $$ DeliverToFTP deliverToFTP = new DeliverToFTP() --> Line_12 $$ deliverToFTP.addHost(mURL) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_13 $$ PipelineWorkflow pipeline = new PipelineWorkflow() [CD]
Line_2 $$ public void testScenario() throws Exception --> Line_14 $$ pipeline.add(query) [CD]
Line_13 $$ PipelineWorkflow pipeline = new PipelineWorkflow() --> Line_14 $$ pipeline.add(query) [FD]
Line_4 $$ SQLQuery query = new SQLQuery() --> Line_14 $$ pipeline.add(query) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_15 $$ pipeline.add(tupleToWebRowSet) [CD]
Line_13 $$ PipelineWorkflow pipeline = new PipelineWorkflow() --> Line_15 $$ pipeline.add(tupleToWebRowSet) [FD]
Line_7 $$ TupleToWebRowSetCharArrays tupleToWebRowSet = new TupleToWebRowSetCharArrays() --> Line_15 $$ pipeline.add(tupleToWebRowSet) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_16 $$ pipeline.add(deliverToFTP) [CD]
Line_13 $$ PipelineWorkflow pipeline = new PipelineWorkflow() --> Line_16 $$ pipeline.add(deliverToFTP) [FD]
Line_9 $$ DeliverToFTP deliverToFTP = new DeliverToFTP() --> Line_16 $$ pipeline.add(deliverToFTP) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_17 $$ mDRER.execute(pipeline, RequestExecutionType.SYNCHRONOUS) [CD]
Line_13 $$ PipelineWorkflow pipeline = new PipelineWorkflow() --> Line_17 $$ mDRER.execute(pipeline, RequestExecutionType.SYNCHRONOUS) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_18 $$ final URL url = new URL("ftp://" + mURL + "/" + FILE) [CD]
Line_2 $$ public void testScenario() throws Exception --> Line_19 $$ final URLConnection connection = url.openConnection() [CD]
Line_18 $$ final URL url = new URL("ftp://" + mURL + "/" + FILE) --> Line_19 $$ final URLConnection connection = url.openConnection() [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_20 $$ connection.setDoInput(true) [CD]
Line_19 $$ final URLConnection connection = url.openConnection() --> Line_20 $$ connection.setDoInput(true) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_21 $$ connection.setDoOutput(false) [CD]
Line_19 $$ final URLConnection connection = url.openConnection() --> Line_21 $$ connection.setDoOutput(false) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_22 $$ InputStream is = connection.getInputStream() [CD]
Line_19 $$ final URLConnection connection = url.openConnection() --> Line_22 $$ InputStream is = connection.getInputStream() [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_23 $$ WebRowSetToResultSet converter = new WebRowSetToResultSet(new InputStreamReader(is)) [CD]
Line_2 $$ public void testScenario() throws Exception --> Line_24 $$ converter.setResultSetType(ResultSet.TYPE_FORWARD_ONLY) [CD]
Line_23 $$ WebRowSetToResultSet converter = new WebRowSetToResultSet(new InputStreamReader(is)) --> Line_24 $$ converter.setResultSetType(ResultSet.TYPE_FORWARD_ONLY) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_25 $$ ResultSet rs = converter.getResultSet() [CD]
Line_23 $$ WebRowSetToResultSet converter = new WebRowSetToResultSet(new InputStreamReader(is)) --> Line_25 $$ ResultSet rs = converter.getResultSet() [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_26 $$ JDBCTestHelper.validateResultSet(mConnection, expression, rs, 1) [CD]
Line_3 $$ String expression = "SELECT id, name, address, phone FROM " + TABLE + " where id > 2 and id < 12 order by id" --> Line_26 $$ JDBCTestHelper.validateResultSet(mConnection, expression, rs, 1) [FD]
Line_25 $$ ResultSet rs = converter.getResultSet() --> Line_26 $$ JDBCTestHelper.validateResultSet(mConnection, expression, rs, 1) [FD]
Line_2 $$ public void testScenario() throws Exception --> Line_27 $$ rs.close() [CD]
Line_25 $$ ResultSet rs = converter.getResultSet() --> Line_27 $$ rs.close() [FD]
