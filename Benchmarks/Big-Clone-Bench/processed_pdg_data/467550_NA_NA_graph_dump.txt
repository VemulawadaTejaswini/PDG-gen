Line_2 $$ public void convert(File src, File dest) throws IOException --> Line_3 $$ InputStream in = new BufferedInputStream(new FileInputStream(src)) [CD]
Line_2 $$ public void convert(File src, File dest) throws IOException --> Line_4 $$ DcmParser p = pfact.newDcmParser(in) [CD]
Line_3 $$ InputStream in = new BufferedInputStream(new FileInputStream(src)) --> Line_4 $$ DcmParser p = pfact.newDcmParser(in) [FD]
Line_2 $$ public void convert(File src, File dest) throws IOException --> Line_5 $$ Dataset ds = fact.newDataset() [CD]
Line_2 $$ public void convert(File src, File dest) throws IOException --> Line_6 $$ p.setDcmHandler(ds.getDcmHandler()) [CD]
Line_4 $$ DcmParser p = pfact.newDcmParser(in) --> Line_6 $$ p.setDcmHandler(ds.getDcmHandler()) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_6 $$ p.setDcmHandler(ds.getDcmHandler()) [FD]
Line_4 $$ DcmParser p = pfact.newDcmParser(in) --> Line_8 $$ FileFormat format = p.detectFileFormat() [FD]
Line_8 $$ FileFormat format = p.detectFileFormat() --> Line_9 $$ if (format != FileFormat.ACRNEMA_STREAM) [FD]
Line_9 $$ if (format != FileFormat.ACRNEMA_STREAM) --> Line_10 $$ System.out.println("\n" + src + ": not an ACRNEMA stream!") [CD]
Line_9 $$ if (format != FileFormat.ACRNEMA_STREAM) --> Line_11 $$ return [CD]
Line_4 $$ DcmParser p = pfact.newDcmParser(in) --> Line_13 $$ p.parseDcmFile(format, Tags.PixelData) [FD]
Line_8 $$ FileFormat format = p.detectFileFormat() --> Line_13 $$ p.parseDcmFile(format, Tags.PixelData) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_14 $$ if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) [FD]
Line_14 $$ if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) --> Line_15 $$ System.out.println("\n" + src + ": contains UIDs!" + " => probable already DICOM - do not convert") [CD]
Line_14 $$ if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) --> Line_16 $$ return [CD]
Line_4 $$ DcmParser p = pfact.newDcmParser(in) --> Line_18 $$ boolean hasPixelData = p.getReadTag() == Tags.PixelData [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_19 $$ boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12 [FD]
Line_4 $$ DcmParser p = pfact.newDcmParser(in) --> Line_20 $$ int pxlen = p.getReadLength() [FD]
Line_21 $$ if (hasPixelData) --> Line_22 $$ if (inflate) [CD]
Line_22 $$ if (inflate) --> Line_23 $$ ds.putUS(Tags.BitsAllocated, 16) [CD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_23 $$ ds.putUS(Tags.BitsAllocated, 16) [FD]
Line_22 $$ if (inflate) --> Line_24 $$ pxlen = pxlen * 4 / 3 [CD]
Line_20 $$ int pxlen = p.getReadLength() --> Line_24 $$ pxlen = pxlen * 4 / 3 [FD]
Line_21 $$ if (hasPixelData) --> Line_26 $$ if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) [CD]
Line_20 $$ int pxlen = p.getReadLength() --> Line_26 $$ if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) [FD]
Line_24 $$ pxlen = pxlen * 4 / 3 --> Line_26 $$ if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_26 $$ if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) [FD]
Line_26 $$ if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) --> Line_27 $$ System.out.println("\n" + src + ": mismatch pixel data length!" + " => do not convert") [CD]
Line_26 $$ if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) --> Line_28 $$ return [CD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_31 $$ ds.putUI(Tags.StudyInstanceUID, uid(studyUID)) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_32 $$ ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID)) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_33 $$ ds.putUI(Tags.SOPInstanceUID, uid(instUID)) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_34 $$ ds.putUI(Tags.SOPClassUID, classUID) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_35 $$ if (!ds.contains(Tags.NumberOfSamples)) [FD]
Line_35 $$ if (!ds.contains(Tags.NumberOfSamples)) --> Line_36 $$ ds.putUS(Tags.NumberOfSamples, 1) [CD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_36 $$ ds.putUS(Tags.NumberOfSamples, 1) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_38 $$ if (!ds.contains(Tags.PhotometricInterpretation)) [FD]
Line_38 $$ if (!ds.contains(Tags.PhotometricInterpretation)) --> Line_39 $$ ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2") [CD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_39 $$ ds.putCS(Tags.PhotometricInterpretation, "MONOCHROME2") [FD]
Line_41 $$ if (fmi) --> Line_42 $$ ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian)) [CD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_42 $$ ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian)) [FD]
Line_5 $$ Dataset ds = fact.newDataset() --> Line_47 $$ ds.writeFile(out, encodeParam()) [FD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_47 $$ ds.writeFile(out, encodeParam()) [FD]
Line_48 $$ if (hasPixelData) --> Line_49 $$ if (!skipGroupLen) [CD]
Line_49 $$ if (!skipGroupLen) --> Line_50 $$ out.write(PXDATA_GROUPLEN) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_50 $$ out.write(PXDATA_GROUPLEN) [FD]
Line_49 $$ if (!skipGroupLen) --> Line_51 $$ int grlen = pxlen + 8 [CD]
Line_49 $$ if (!skipGroupLen) --> Line_52 $$ out.write((byte) grlen) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_52 $$ out.write((byte) grlen) [FD]
Line_49 $$ if (!skipGroupLen) --> Line_53 $$ out.write((byte) (grlen >> 8)) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_53 $$ out.write((byte) (grlen >> 8)) [FD]
Line_49 $$ if (!skipGroupLen) --> Line_54 $$ out.write((byte) (grlen >> 16)) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_54 $$ out.write((byte) (grlen >> 16)) [FD]
Line_49 $$ if (!skipGroupLen) --> Line_55 $$ out.write((byte) (grlen >> 24)) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_55 $$ out.write((byte) (grlen >> 24)) [FD]
Line_48 $$ if (hasPixelData) --> Line_57 $$ out.write(PXDATA_TAG) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_57 $$ out.write(PXDATA_TAG) [FD]
Line_48 $$ if (hasPixelData) --> Line_58 $$ out.write((byte) pxlen) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_58 $$ out.write((byte) pxlen) [FD]
Line_48 $$ if (hasPixelData) --> Line_59 $$ out.write((byte) (pxlen >> 8)) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_59 $$ out.write((byte) (pxlen >> 8)) [FD]
Line_48 $$ if (hasPixelData) --> Line_60 $$ out.write((byte) (pxlen >> 16)) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_60 $$ out.write((byte) (pxlen >> 16)) [FD]
Line_48 $$ if (hasPixelData) --> Line_61 $$ out.write((byte) (pxlen >> 24)) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_61 $$ out.write((byte) (pxlen >> 24)) [FD]
Line_63 $$ if (inflate) --> Line_64 $$ int b2, b3 [CD]
Line_63 $$ if (inflate) --> Line_65 $$ for (; pxlen > 0; pxlen -= 3) [CD]
Line_20 $$ int pxlen = p.getReadLength() --> Line_65 $$ for (; pxlen > 0; pxlen -= 3) [FD]
Line_24 $$ pxlen = pxlen * 4 / 3 --> Line_65 $$ for (; pxlen > 0; pxlen -= 3) [FD]
Line_65 $$ for (; pxlen > 0; pxlen -= 3) --> Line_66 $$ out.write(in.read()) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_66 $$ out.write(in.read()) [FD]
Line_3 $$ InputStream in = new BufferedInputStream(new FileInputStream(src)) --> Line_66 $$ out.write(in.read()) [FD]
Line_65 $$ for (; pxlen > 0; pxlen -= 3) --> Line_67 $$ b2 = in.read() [CD]
Line_64 $$ int b2, b3 --> Line_67 $$ b2 = in.read() [FD]
Line_3 $$ InputStream in = new BufferedInputStream(new FileInputStream(src)) --> Line_67 $$ b2 = in.read() [FD]
Line_65 $$ for (; pxlen > 0; pxlen -= 3) --> Line_68 $$ b3 = in.read() [CD]
Line_64 $$ int b2, b3 --> Line_68 $$ b3 = in.read() [FD]
Line_3 $$ InputStream in = new BufferedInputStream(new FileInputStream(src)) --> Line_68 $$ b3 = in.read() [FD]
Line_65 $$ for (; pxlen > 0; pxlen -= 3) --> Line_69 $$ out.write(b2 & 0x0f) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_69 $$ out.write(b2 & 0x0f) [FD]
Line_65 $$ for (; pxlen > 0; pxlen -= 3) --> Line_70 $$ out.write(b2 >> 4 | ((b3 & 0x0f) << 4)) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_70 $$ out.write(b2 >> 4 | ((b3 & 0x0f) << 4)) [FD]
Line_65 $$ for (; pxlen > 0; pxlen -= 3) --> Line_71 $$ out.write(b3 >> 4) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_71 $$ out.write(b3 >> 4) [FD]
Line_63 $$ if (inflate) --> Line_74 $$ for (; pxlen > 0; --pxlen) [CD]
Line_65 $$ for (; pxlen > 0; pxlen -= 3) --> Line_74 $$ for (; pxlen > 0; --pxlen) [FD]
Line_20 $$ int pxlen = p.getReadLength() --> Line_74 $$ for (; pxlen > 0; --pxlen) [FD]
Line_24 $$ pxlen = pxlen * 4 / 3 --> Line_74 $$ for (; pxlen > 0; --pxlen) [FD]
Line_74 $$ for (; pxlen > 0; --pxlen) --> Line_75 $$ out.write(in.read()) [CD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_75 $$ out.write(in.read()) [FD]
Line_3 $$ InputStream in = new BufferedInputStream(new FileInputStream(src)) --> Line_75 $$ out.write(in.read()) [FD]
Line_44 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(dest)) --> Line_78 $$ out.close() [FD]
Line_3 $$ InputStream in = new BufferedInputStream(new FileInputStream(src)) --> Line_82 $$ in.close() [FD]
