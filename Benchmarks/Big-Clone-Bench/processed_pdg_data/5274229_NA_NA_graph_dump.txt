Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_3 $$ HttpClient httpClient = new DefaultHttpClient() [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_4 $$ httpClient.getParams().setParameter("http.useragent", "sla@soi OCCI Client v0.2") [CD]
Line_3 $$ HttpClient httpClient = new DefaultHttpClient() --> Line_4 $$ httpClient.getParams().setParameter("http.useragent", "sla@soi OCCI Client v0.2") [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_5 $$ HttpPost httpPost = new HttpPost("http://" + hostname + ":" + port + resource) [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap) [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap) [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [CD]
Line_6 $$ List<Header> headersList = this.convert2Headers(headersMap) --> Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) [FD]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) --> Line_8 $$ httpPost.addHeader(iterator.next()) [CD]
Line_7 $$ for (Iterator<Header> iterator = headersList.iterator(); iterator.hasNext(); ) --> Line_8 $$ httpPost.addHeader(iterator.next()) [FD]
Line_5 $$ HttpPost httpPost = new HttpPost("http://" + hostname + ":" + port + resource) --> Line_8 $$ httpPost.addHeader(iterator.next()) [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_10 $$ if (monitoringRequest == null) [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_10 $$ if (monitoringRequest == null) [FD]
Line_10 $$ if (monitoringRequest == null) --> Line_11 $$ logger.info("Monitoring Request has not been specified - ") [CD]
Line_10 $$ if (monitoringRequest == null) --> Line_12 $$ monitoringRequest = Terms.MONITORING_NOT_CONFIGURED [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_12 $$ monitoringRequest = Terms.MONITORING_NOT_CONFIGURED [FD]
Line_10 $$ if (monitoringRequest == null) --> Line_13 $$ logger.info("Monitoring Request has not been specified - " + monitoringRequest) [CD]
Line_10 $$ if (monitoringRequest == null) --> Line_15 $$ logger.info("Monitoring Request is - " + monitoringRequest) [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_17 $$ logger.info(httpPost.getRequestLine()) [CD]
Line_5 $$ HttpPost httpPost = new HttpPost("http://" + hostname + ":" + port + resource) --> Line_17 $$ logger.info(httpPost.getRequestLine()) [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_18 $$ logger.info(httpPost.getAllHeaders()) [CD]
Line_5 $$ HttpPost httpPost = new HttpPost("http://" + hostname + ":" + port + resource) --> Line_18 $$ logger.info(httpPost.getAllHeaders()) [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_19 $$ Header[] headersArray = httpPost.getAllHeaders() [CD]
Line_5 $$ HttpPost httpPost = new HttpPost("http://" + hostname + ":" + port + resource) --> Line_19 $$ Header[] headersArray = httpPost.getAllHeaders() [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_20 $$ String[] fields = [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_21 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>() [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_22 $$ for (int H = 0; H < headersArray.length; H++) [CD]
Line_22 $$ for (int H = 0; H < headersArray.length; H++) --> Line_23 $$ Header header = headersArray[H] [CD]
Line_22 $$ for (int H = 0; H < headersArray.length; H++) --> Line_24 $$ logger.info("header - request  -" + header.toString()) [CD]
Line_23 $$ Header header = headersArray[H] --> Line_24 $$ logger.info("header - request  -" + header.toString()) [FD]
Line_22 $$ for (int H = 0; H < headersArray.length; H++) --> Line_25 $$ logger.info("	headerName - " + header.getName()) [CD]
Line_23 $$ Header header = headersArray[H] --> Line_25 $$ logger.info("	headerName - " + header.getName()) [FD]
Line_22 $$ for (int H = 0; H < headersArray.length; H++) --> Line_26 $$ logger.info("	headerValue - " + header.getValue()) [CD]
Line_23 $$ Header header = headersArray[H] --> Line_26 $$ logger.info("	headerValue - " + header.getValue()) [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_28 $$ String statusLine = null [CD]
Line_3 $$ HttpClient httpClient = new DefaultHttpClient() --> Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) [FD]
Line_5 $$ HttpPost httpPost = new HttpPost("http://" + hostname + ":" + port + resource) --> Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) [FD]
Line_28 $$ String statusLine = null --> Line_31 $$ statusLine = httpResponse.getStatusLine().toString() [FD]
Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) --> Line_31 $$ statusLine = httpResponse.getStatusLine().toString() [FD]
Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) --> Line_32 $$ int statusCode = httpResponse.getStatusLine().getStatusCode() [FD]
Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) --> Line_34 $$ logger.info("StatusLine - (full) - " + httpResponse.getStatusLine()) [FD]
Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) --> Line_36 $$ logger.info("	Reason - " + httpResponse.getStatusLine().getReasonPhrase()) [FD]
Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) --> Line_37 $$ logger.info("	Protocol - " + httpResponse.getStatusLine().getProtocolVersion().toString()) [FD]
Line_32 $$ int statusCode = httpResponse.getStatusLine().getStatusCode() --> Line_39 $$ if (StatusCode.validate(statusCode)) [FD]
Line_39 $$ if (StatusCode.validate(statusCode)) --> Line_40 $$ logger.info("Response Validated") [CD]
Line_39 $$ if (StatusCode.validate(statusCode)) --> Line_42 $$ logger.error("Response NOT Validated") [CD]
Line_30 $$ HttpResponse httpResponse = httpClient.execute(httpPost) --> Line_44 $$ Header[] headers = httpResponse.getAllHeaders() [FD]
Line_45 $$ for (int i = 0; i < headers.length; i++) --> Line_46 $$ Header header = headers[i] [CD]
Line_45 $$ for (int i = 0; i < headers.length; i++) --> Line_47 $$ logger.info("header - response - " + header.toString()) [CD]
Line_46 $$ Header header = headers[i] --> Line_47 $$ logger.info("header - response - " + header.toString()) [FD]
Line_23 $$ Header header = headersArray[H] --> Line_47 $$ logger.info("header - response - " + header.toString()) [FD]
Line_45 $$ for (int i = 0; i < headers.length; i++) --> Line_48 $$ logger.info("	headerName - " + header.getName()) [CD]
Line_46 $$ Header header = headers[i] --> Line_48 $$ logger.info("	headerName - " + header.getName()) [FD]
Line_23 $$ Header header = headersArray[H] --> Line_48 $$ logger.info("	headerName - " + header.getName()) [FD]
Line_45 $$ for (int i = 0; i < headers.length; i++) --> Line_49 $$ logger.info("	headerValue - " + header.getValue()) [CD]
Line_46 $$ Header header = headers[i] --> Line_49 $$ logger.info("	headerValue - " + header.getValue()) [FD]
Line_23 $$ Header header = headersArray[H] --> Line_49 $$ logger.info("	headerValue - " + header.getValue()) [FD]
Line_45 $$ for (int i = 0; i < headers.length; i++) --> Line_50 $$ for (int h = 0; h < fields.length; h++) [CD]
Line_50 $$ for (int h = 0; h < fields.length; h++) --> Line_51 $$ logger.info("	Looking for  - " + fields[h]) [CD]
Line_50 $$ for (int h = 0; h < fields.length; h++) --> Line_52 $$ if (fields[h].equals(header.getName().toString())) [CD]
Line_46 $$ Header header = headers[i] --> Line_52 $$ if (fields[h].equals(header.getName().toString())) [FD]
Line_23 $$ Header header = headersArray[H] --> Line_52 $$ if (fields[h].equals(header.getName().toString())) [FD]
Line_52 $$ if (fields[h].equals(header.getName().toString())) --> Line_53 $$ logger.info("	Found an OCCI Header - " + header.getName()) [CD]
Line_46 $$ Header header = headers[i] --> Line_53 $$ logger.info("	Found an OCCI Header - " + header.getName()) [FD]
Line_23 $$ Header header = headersArray[H] --> Line_53 $$ logger.info("	Found an OCCI Header - " + header.getName()) [FD]
Line_52 $$ if (fields[h].equals(header.getName().toString())) --> Line_54 $$ occiHeaders.put(header.getName(), header.getValue()) [CD]
Line_21 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>() --> Line_54 $$ occiHeaders.put(header.getName(), header.getValue()) [FD]
Line_46 $$ Header header = headers[i] --> Line_54 $$ occiHeaders.put(header.getName(), header.getValue()) [FD]
Line_23 $$ Header header = headersArray[H] --> Line_54 $$ occiHeaders.put(header.getName(), header.getValue()) [FD]
Line_3 $$ HttpClient httpClient = new DefaultHttpClient() --> Line_71 $$ httpClient.getConnectionManager().shutdown() [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_73 $$ logger.info("occiHeaders - " + occiHeaders) [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_74 $$ if (occiHeaders.containsKey(Response.Location)) [CD]
Line_21 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>() --> Line_74 $$ if (occiHeaders.containsKey(Response.Location)) [FD]
Line_74 $$ if (occiHeaders.containsKey(Response.Location)) --> Line_75 $$ logger.info("Valid Provision") [CD]
Line_74 $$ if (occiHeaders.containsKey(Response.Location)) --> Line_76 $$ return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, "") [CD]
Line_21 $$ HashMap<String, String> occiHeaders = new HashMap<String, String>() --> Line_76 $$ return occiHeaders.get(Response.Location).toString().replaceAll(Response.jobs, "") [FD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_78 $$ logger.info("NOT a Valid Provision" + statusLine) [CD]
Line_2 $$ public String post(Map<String, String> headersMap, String monitoringRequest) --> Line_79 $$ return null [CD]
