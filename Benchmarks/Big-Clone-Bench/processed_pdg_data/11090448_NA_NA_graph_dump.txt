Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_3 $$ String cacheName = md5(address) [CD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_3 $$ String cacheName = md5(address) [FD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_4 $$ checkAndCreateDirectoryIfNeeded() [CD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_5 $$ File r = new File(CACHELOCATION + cacheName) [CD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_6 $$ Date d = new Date() [CD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_7 $$ long limit = d.getTime() - (1000 * 60 * 60 * hours) [CD]
Line_6 $$ Date d = new Date() --> Line_7 $$ long limit = d.getTime() - (1000 * 60 * 60 * hours) [FD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_8 $$ if (!r.exists() || (hours != -1 && r.lastModified() < limit)) [CD]
Line_5 $$ File r = new File(CACHELOCATION + cacheName) --> Line_8 $$ if (!r.exists() || (hours != -1 && r.lastModified() < limit)) [FD]
Line_8 $$ if (!r.exists() || (hours != -1 && r.lastModified() < limit)) --> Line_9 $$ InputStream is = (InputStream) fetch(address) [CD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_9 $$ InputStream is = (InputStream) fetch(address) [FD]
Line_8 $$ if (!r.exists() || (hours != -1 && r.lastModified() < limit)) --> Line_10 $$ FileOutputStream fos = new FileOutputStream(CACHELOCATION + cacheName) [CD]
Line_8 $$ if (!r.exists() || (hours != -1 && r.lastModified() < limit)) --> Line_11 $$ int nextChar [CD]
Line_8 $$ if (!r.exists() || (hours != -1 && r.lastModified() < limit)) --> Line_12 $$ while ((nextChar = is.read()) != -1) fos.write((char) nextChar) [CD]
Line_11 $$ int nextChar --> Line_12 $$ while ((nextChar = is.read()) != -1) fos.write((char) nextChar) [FD]
Line_9 $$ InputStream is = (InputStream) fetch(address) --> Line_12 $$ while ((nextChar = is.read()) != -1) fos.write((char) nextChar) [FD]
Line_10 $$ FileOutputStream fos = new FileOutputStream(CACHELOCATION + cacheName) --> Line_12 $$ while ((nextChar = is.read()) != -1) fos.write((char) nextChar) [FD]
Line_8 $$ if (!r.exists() || (hours != -1 && r.lastModified() < limit)) --> Line_13 $$ fos.flush() [CD]
Line_10 $$ FileOutputStream fos = new FileOutputStream(CACHELOCATION + cacheName) --> Line_13 $$ fos.flush() [FD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_15 $$ FileInputStream fis = new FileInputStream(CACHELOCATION + cacheName) [CD]
Line_2 $$ public static Object fetchCached(String address, int hours) throws MalformedURLException, IOException --> Line_16 $$ return fis [CD]
