Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_3 $$ if (po == null) [CD]
Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_3 $$ if (po == null) [FD]
Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_4 $$ if (availables == null) [CD]
Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_5 $$ if (installed == null) [CD]
Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_6 $$ File home = SpellCheckPlugin.getHomeDir(jEdit.getActiveView()) [CD]
Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_7 $$ File target = new File(home, "available.lst") [CD]
Line_7 $$ File target = new File(home, "available.lst") --> Line_10 $$ if (target.exists()) [FD]
Line_10 $$ if (target.exists()) --> Line_11 $$ long modifiedDate = target.lastModified() [CD]
Line_7 $$ File target = new File(home, "available.lst") --> Line_11 $$ long modifiedDate = target.lastModified() [FD]
Line_10 $$ if (target.exists()) --> Line_12 $$ Calendar c = Calendar.getInstance() [CD]
Line_10 $$ if (target.exists()) --> Line_13 $$ c.setTimeInMillis(modifiedDate) [CD]
Line_12 $$ Calendar c = Calendar.getInstance() --> Line_13 $$ c.setTimeInMillis(modifiedDate) [FD]
Line_11 $$ long modifiedDate = target.lastModified() --> Line_13 $$ c.setTimeInMillis(modifiedDate) [FD]
Line_10 $$ if (target.exists()) --> Line_14 $$ Calendar yesterday = Calendar.getInstance() [CD]
Line_10 $$ if (target.exists()) --> Line_15 $$ yesterday.add(Calendar.HOUR, -1) [CD]
Line_14 $$ Calendar yesterday = Calendar.getInstance() --> Line_15 $$ yesterday.add(Calendar.HOUR, -1) [FD]
Line_10 $$ if (target.exists()) --> Line_16 $$ skipDownload = yesterday.before(c) [CD]
Line_9 $$ boolean skipDownload = false --> Line_16 $$ skipDownload = yesterday.before(c) [FD]
Line_14 $$ Calendar yesterday = Calendar.getInstance() --> Line_16 $$ skipDownload = yesterday.before(c) [FD]
Line_12 $$ Calendar c = Calendar.getInstance() --> Line_16 $$ skipDownload = yesterday.before(c) [FD]
Line_9 $$ boolean skipDownload = false --> Line_19 $$ if (!skipDownload) [FD]
Line_16 $$ skipDownload = yesterday.before(c) --> Line_19 $$ if (!skipDownload) [FD]
Line_19 $$ if (!skipDownload) --> Line_20 $$ URL available_url = new URL(jEdit.getProperty(OOO_DICTS_PROP) + "available.lst") [CD]
Line_19 $$ if (!skipDownload) --> Line_21 $$ URLConnection connect = available_url.openConnection() [CD]
Line_20 $$ URL available_url = new URL(jEdit.getProperty(OOO_DICTS_PROP) + "available.lst") --> Line_21 $$ URLConnection connect = available_url.openConnection() [FD]
Line_19 $$ if (!skipDownload) --> Line_22 $$ connect.connect() [CD]
Line_21 $$ URLConnection connect = available_url.openConnection() --> Line_22 $$ connect.connect() [FD]
Line_19 $$ if (!skipDownload) --> Line_23 $$ InputStream is = connect.getInputStream() [CD]
Line_21 $$ URLConnection connect = available_url.openConnection() --> Line_23 $$ InputStream is = connect.getInputStream() [FD]
Line_19 $$ if (!skipDownload) --> Line_24 $$ po.setMaximum(connect.getContentLength()) [CD]
Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_24 $$ po.setMaximum(connect.getContentLength()) [FD]
Line_21 $$ URLConnection connect = available_url.openConnection() --> Line_24 $$ po.setMaximum(connect.getContentLength()) [FD]
Line_19 $$ if (!skipDownload) --> Line_25 $$ OutputStream os = new FileOutputStream(target) [CD]
Line_19 $$ if (!skipDownload) --> Line_26 $$ boolean copied = IOUtilities.copyStream(po, is, os, true) [CD]
Line_2 $$ private void fetchAvailable(ProgressObserver po) --> Line_26 $$ boolean copied = IOUtilities.copyStream(po, is, os, true) [FD]
Line_23 $$ InputStream is = connect.getInputStream() --> Line_26 $$ boolean copied = IOUtilities.copyStream(po, is, os, true) [FD]
Line_25 $$ OutputStream os = new FileOutputStream(target) --> Line_26 $$ boolean copied = IOUtilities.copyStream(po, is, os, true) [FD]
Line_19 $$ if (!skipDownload) --> Line_27 $$ if (!copied) [CD]
Line_26 $$ boolean copied = IOUtilities.copyStream(po, is, os, true) --> Line_27 $$ if (!copied) [FD]
Line_27 $$ if (!copied) --> Line_28 $$ Log.log(Log.ERROR, HunspellDictsManager.class, "Unable to download " + available_url.toString()) [CD]
Line_20 $$ URL available_url = new URL(jEdit.getProperty(OOO_DICTS_PROP) + "available.lst") --> Line_28 $$ Log.log(Log.ERROR, HunspellDictsManager.class, "Unable to download " + available_url.toString()) [FD]
Line_27 $$ if (!copied) --> Line_29 $$ GUIUtilities.error(null, "spell-check-hunspell-error-fetch", new String[] [CD]
Line_20 $$ URL available_url = new URL(jEdit.getProperty(OOO_DICTS_PROP) + "available.lst") --> Line_29 $$ GUIUtilities.error(null, "spell-check-hunspell-error-fetch", new String[] [FD]
Line_27 $$ if (!copied) --> Line_31 $$ if (target.exists()) [CD]
Line_7 $$ File target = new File(home, "available.lst") --> Line_31 $$ if (target.exists()) [FD]
Line_27 $$ if (!copied) --> Line_32 $$ return [CD]
Line_19 $$ if (!skipDownload) --> Line_34 $$ IOUtilities.closeQuietly(os) [CD]
Line_25 $$ OutputStream os = new FileOutputStream(target) --> Line_34 $$ IOUtilities.closeQuietly(os) [FD]
Line_19 $$ if (!skipDownload) --> Line_35 $$ enc = connect.getContentEncoding() [CD]
Line_18 $$ String enc = null --> Line_35 $$ enc = connect.getContentEncoding() [FD]
Line_21 $$ URLConnection connect = available_url.openConnection() --> Line_35 $$ enc = connect.getContentEncoding() [FD]
Line_18 $$ String enc = null --> Line_39 $$ if (enc != null) [FD]
Line_35 $$ enc = connect.getContentEncoding() --> Line_39 $$ if (enc != null) [FD]
Line_38 $$ Reader r --> Line_41 $$ r = new InputStreamReader(fis, enc) [FD]
Line_38 $$ Reader r --> Line_43 $$ r = new InputStreamReader(fis, "UTF-8") [FD]
Line_41 $$ r = new InputStreamReader(fis, enc) --> Line_43 $$ r = new InputStreamReader(fis, "UTF-8") [FD]
Line_39 $$ if (enc != null) --> Line_46 $$ r = new InputStreamReader(fis, "UTF-8") [CD]
Line_38 $$ Reader r --> Line_46 $$ r = new InputStreamReader(fis, "UTF-8") [FD]
Line_41 $$ r = new InputStreamReader(fis, enc) --> Line_46 $$ r = new InputStreamReader(fis, "UTF-8") [FD]
Line_43 $$ r = new InputStreamReader(fis, "UTF-8") --> Line_46 $$ r = new InputStreamReader(fis, "UTF-8") [FD]
Line_48 $$ BufferedReader br = new BufferedReader(r) --> Line_49 $$ for (String line = br.readLine(); line != null; line = br.readLine()) [FD]
Line_49 $$ for (String line = br.readLine(); line != null; line = br.readLine()) --> Line_50 $$ Dictionary d = parseLine(line) [CD]
Line_49 $$ for (String line = br.readLine(); line != null; line = br.readLine()) --> Line_50 $$ Dictionary d = parseLine(line) [FD]
Line_49 $$ for (String line = br.readLine(); line != null; line = br.readLine()) --> Line_51 $$ if (d != null) [CD]
Line_50 $$ Dictionary d = parseLine(line) --> Line_51 $$ if (d != null) [FD]
Line_51 $$ if (d != null) --> Line_52 $$ int ind = installed.indexOf(d) [CD]
Line_50 $$ Dictionary d = parseLine(line) --> Line_52 $$ int ind = installed.indexOf(d) [FD]
Line_51 $$ if (d != null) --> Line_53 $$ if (ind == -1) [CD]
Line_52 $$ int ind = installed.indexOf(d) --> Line_53 $$ if (ind == -1) [FD]
Line_53 $$ if (ind == -1) --> Line_54 $$ d.installed = false [CD]
Line_53 $$ if (ind == -1) --> Line_55 $$ availables.add(d) [CD]
Line_50 $$ Dictionary d = parseLine(line) --> Line_55 $$ availables.add(d) [FD]
Line_53 $$ if (ind == -1) --> Line_57 $$ Dictionary id = installed.get(ind) [CD]
Line_52 $$ int ind = installed.indexOf(d) --> Line_57 $$ Dictionary id = installed.get(ind) [FD]
Line_53 $$ if (ind == -1) --> Line_58 $$ if (!skipDownload) [CD]
Line_9 $$ boolean skipDownload = false --> Line_58 $$ if (!skipDownload) [FD]
Line_16 $$ skipDownload = yesterday.before(c) --> Line_58 $$ if (!skipDownload) [FD]
Line_58 $$ if (!skipDownload) --> Line_59 $$ Date lmd = fetchLastModifiedDate(id.archiveName) [CD]
Line_58 $$ if (!skipDownload) --> Line_60 $$ if (lmd != null) [CD]
Line_59 $$ Date lmd = fetchLastModifiedDate(id.archiveName) --> Line_60 $$ if (lmd != null) [FD]
Line_60 $$ if (lmd != null) --> Line_61 $$ id.lastModified = lmd [CD]
Line_59 $$ Date lmd = fetchLastModifiedDate(id.archiveName) --> Line_61 $$ id.lastModified = lmd [FD]
Line_37 $$ FileInputStream fis = new FileInputStream(target) --> Line_67 $$ IOUtilities.closeQuietly(fis) [FD]
Line_69 $$ if (ioe instanceof UnknownHostException) --> Line_70 $$ GUIUtilities.error(null, "spell-check-hunspell-error-unknownhost", new String[] [CD]
Line_69 $$ if (ioe instanceof UnknownHostException) --> Line_72 $$ GUIUtilities.error(null, "spell-check-hunspell-error-fetch", new String[] [CD]
Line_7 $$ File target = new File(home, "available.lst") --> Line_75 $$ if (target.exists()) [FD]
