Line_2 $$ public ReturnValue do_run() --> Line_3 $$ int bufLen = 500 * 1024 [CD]
Line_2 $$ public ReturnValue do_run() --> Line_4 $$ ReturnValue ret = new ReturnValue() [CD]
Line_2 $$ public ReturnValue do_run() --> Line_5 $$ ret.setExitStatus(ReturnValue.SUCCESS) [CD]
Line_4 $$ ReturnValue ret = new ReturnValue() --> Line_5 $$ ret.setExitStatus(ReturnValue.SUCCESS) [FD]
Line_2 $$ public ReturnValue do_run() --> Line_6 $$ File output = null [CD]
Line_2 $$ public ReturnValue do_run() --> Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) [CD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_8 $$ Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)") [CD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) [CD]
Line_8 $$ Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)") --> Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) [FD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_10 $$ boolean result = m.find() [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_10 $$ boolean result = m.find() [FD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_11 $$ String accessKey = null [CD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_12 $$ String secretKey = null [CD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_13 $$ String URL = (String) options.valueOf("input-file") [CD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_14 $$ if (result) [CD]
Line_14 $$ if (result) --> Line_15 $$ accessKey = m.group(1) [CD]
Line_11 $$ String accessKey = null --> Line_15 $$ accessKey = m.group(1) [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_15 $$ accessKey = m.group(1) [FD]
Line_14 $$ if (result) --> Line_16 $$ secretKey = m.group(2) [CD]
Line_12 $$ String secretKey = null --> Line_16 $$ secretKey = m.group(2) [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_16 $$ secretKey = m.group(2) [FD]
Line_14 $$ if (result) --> Line_17 $$ URL = "s3://" + m.group(3) [CD]
Line_13 $$ String URL = (String) options.valueOf("input-file") --> Line_17 $$ URL = "s3://" + m.group(3) [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_17 $$ URL = "s3://" + m.group(3) [FD]
Line_11 $$ String accessKey = null --> Line_21 $$ accessKey = settings.get("AWS_ACCESS_KEY") [FD]
Line_15 $$ accessKey = m.group(1) --> Line_21 $$ accessKey = settings.get("AWS_ACCESS_KEY") [FD]
Line_20 $$ HashMap<String, String> settings = (HashMap<String, String>) ConfigTools.getSettings() --> Line_21 $$ accessKey = settings.get("AWS_ACCESS_KEY") [FD]
Line_12 $$ String secretKey = null --> Line_22 $$ secretKey = settings.get("AWS_SECRET_KEY") [FD]
Line_16 $$ secretKey = m.group(2) --> Line_22 $$ secretKey = settings.get("AWS_SECRET_KEY") [FD]
Line_20 $$ HashMap<String, String> settings = (HashMap<String, String>) ConfigTools.getSettings() --> Line_22 $$ secretKey = settings.get("AWS_SECRET_KEY") [FD]
Line_4 $$ ReturnValue ret = new ReturnValue() --> Line_24 $$ ret.setExitStatus(ReturnValue.SETTINGSFILENOTFOUND) [FD]
Line_4 $$ ReturnValue ret = new ReturnValue() --> Line_25 $$ ret.setProcessExitStatus(ReturnValue.SETTINGSFILENOTFOUND) [FD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_29 $$ if (accessKey == null || secretKey == null) [CD]
Line_29 $$ if (accessKey == null || secretKey == null) --> Line_30 $$ ret.setExitStatus(ReturnValue.ENVVARNOTFOUND) [CD]
Line_4 $$ ReturnValue ret = new ReturnValue() --> Line_30 $$ ret.setExitStatus(ReturnValue.ENVVARNOTFOUND) [FD]
Line_29 $$ if (accessKey == null || secretKey == null) --> Line_31 $$ ret.setProcessExitStatus(ReturnValue.ENVVARNOTFOUND) [CD]
Line_4 $$ ReturnValue ret = new ReturnValue() --> Line_31 $$ ret.setProcessExitStatus(ReturnValue.ENVVARNOTFOUND) [FD]
Line_29 $$ if (accessKey == null || secretKey == null) --> Line_32 $$ return (ret) [CD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_34 $$ AmazonS3 s3 = new AmazonS3Client(new BasicAWSCredentials(accessKey, secretKey)) [CD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_35 $$ p = Pattern.compile("s3://([^/]+)/(\\S+)") [CD]
Line_8 $$ Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)") --> Line_35 $$ p = Pattern.compile("s3://([^/]+)/(\\S+)") [FD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_36 $$ m = p.matcher(URL) [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_36 $$ m = p.matcher(URL) [FD]
Line_8 $$ Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)") --> Line_36 $$ m = p.matcher(URL) [FD]
Line_35 $$ p = Pattern.compile("s3://([^/]+)/(\\S+)") --> Line_36 $$ m = p.matcher(URL) [FD]
Line_13 $$ String URL = (String) options.valueOf("input-file") --> Line_36 $$ m = p.matcher(URL) [FD]
Line_17 $$ URL = "s3://" + m.group(3) --> Line_36 $$ m = p.matcher(URL) [FD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_37 $$ result = m.find() [CD]
Line_10 $$ boolean result = m.find() --> Line_37 $$ result = m.find() [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_37 $$ result = m.find() [FD]
Line_36 $$ m = p.matcher(URL) --> Line_37 $$ result = m.find() [FD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_38 $$ if (result) [CD]
Line_38 $$ if (result) --> Line_39 $$ String bucket = m.group(1) [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_39 $$ String bucket = m.group(1) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_39 $$ String bucket = m.group(1) [FD]
Line_38 $$ if (result) --> Line_40 $$ String key = m.group(2) [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_40 $$ String key = m.group(2) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_40 $$ String key = m.group(2) [FD]
Line_38 $$ if (result) --> Line_41 $$ S3Object object = s3.getObject(new GetObjectRequest(bucket, key)) [CD]
Line_34 $$ AmazonS3 s3 = new AmazonS3Client(new BasicAWSCredentials(accessKey, secretKey)) --> Line_41 $$ S3Object object = s3.getObject(new GetObjectRequest(bucket, key)) [FD]
Line_38 $$ if (result) --> Line_42 $$ System.out.println("Content-Type: " + object.getObjectMetadata().getContentType()) [CD]
Line_41 $$ S3Object object = s3.getObject(new GetObjectRequest(bucket, key)) --> Line_42 $$ System.out.println("Content-Type: " + object.getObjectMetadata().getContentType()) [FD]
Line_38 $$ if (result) --> Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) [CD]
Line_6 $$ File output = null --> Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) [FD]
Line_38 $$ if (result) --> Line_44 $$ output.getParentFile().mkdirs() [CD]
Line_6 $$ File output = null --> Line_44 $$ output.getParentFile().mkdirs() [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_44 $$ output.getParentFile().mkdirs() [FD]
Line_38 $$ if (result) --> Line_45 $$ if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) [CD]
Line_6 $$ File output = null --> Line_45 $$ if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_45 $$ if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) [FD]
Line_41 $$ S3Object object = s3.getObject(new GetObjectRequest(bucket, key)) --> Line_45 $$ if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) [FD]
Line_45 $$ if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) --> Line_46 $$ System.out.println("Downloading an S3 object from bucket: " + bucket + " with key: " + key) [CD]
Line_45 $$ if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) --> Line_47 $$ BufferedInputStream reader = new BufferedInputStream(object.getObjectContent(), bufLen) [CD]
Line_41 $$ S3Object object = s3.getObject(new GetObjectRequest(bucket, key)) --> Line_47 $$ BufferedInputStream reader = new BufferedInputStream(object.getObjectContent(), bufLen) [FD]
Line_50 $$ while (true) --> Line_51 $$ int data = reader.read() [CD]
Line_47 $$ BufferedInputStream reader = new BufferedInputStream(object.getObjectContent(), bufLen) --> Line_51 $$ int data = reader.read() [FD]
Line_50 $$ while (true) --> Line_52 $$ if (data == -1) [CD]
Line_51 $$ int data = reader.read() --> Line_52 $$ if (data == -1) [FD]
Line_50 $$ while (true) --> Line_55 $$ writer.write(data) [CD]
Line_49 $$ BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(output), bufLen) --> Line_55 $$ writer.write(data) [FD]
Line_51 $$ int data = reader.read() --> Line_55 $$ writer.write(data) [FD]
Line_47 $$ BufferedInputStream reader = new BufferedInputStream(object.getObjectContent(), bufLen) --> Line_57 $$ reader.close() [FD]
Line_49 $$ BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(output), bufLen) --> Line_58 $$ writer.close() [FD]
Line_45 $$ if (!output.exists() || output.length() != object.getObjectMetadata().getContentLength()) --> Line_65 $$ System.out.println("Skipping download of S3 object from bucket: " + bucket + " with key: " + key + " since local output exists: " + output.getAbsolutePath()) [CD]
Line_6 $$ File output = null --> Line_65 $$ System.out.println("Skipping download of S3 object from bucket: " + bucket + " with key: " + key + " since local output exists: " + output.getAbsolutePath()) [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_65 $$ System.out.println("Skipping download of S3 object from bucket: " + bucket + " with key: " + key + " since local output exists: " + output.getAbsolutePath()) [FD]
Line_7 $$ if (((String) options.valueOf("input-file")).startsWith("s3://")) --> Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) [CD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_69 $$ Pattern p = Pattern.compile("(https*)://(\\S+):(\\S+)@(\\S+)") [CD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_70 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) [CD]
Line_8 $$ Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)") --> Line_70 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) [FD]
Line_35 $$ p = Pattern.compile("s3://([^/]+)/(\\S+)") --> Line_70 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) [FD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_71 $$ boolean result = m.find() [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_71 $$ boolean result = m.find() [FD]
Line_36 $$ m = p.matcher(URL) --> Line_71 $$ boolean result = m.find() [FD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_72 $$ String protocol = null [CD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_73 $$ String user = null [CD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_74 $$ String pass = null [CD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_76 $$ if (result) [CD]
Line_76 $$ if (result) --> Line_77 $$ protocol = m.group(1) [CD]
Line_72 $$ String protocol = null --> Line_77 $$ protocol = m.group(1) [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_77 $$ protocol = m.group(1) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_77 $$ protocol = m.group(1) [FD]
Line_76 $$ if (result) --> Line_78 $$ user = m.group(2) [CD]
Line_73 $$ String user = null --> Line_78 $$ user = m.group(2) [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_78 $$ user = m.group(2) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_78 $$ user = m.group(2) [FD]
Line_76 $$ if (result) --> Line_79 $$ pass = m.group(3) [CD]
Line_74 $$ String pass = null --> Line_79 $$ pass = m.group(3) [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_79 $$ pass = m.group(3) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_79 $$ pass = m.group(3) [FD]
Line_76 $$ if (result) --> Line_80 $$ URL = protocol + "://" + m.group(4) [CD]
Line_13 $$ String URL = (String) options.valueOf("input-file") --> Line_80 $$ URL = protocol + "://" + m.group(4) [FD]
Line_17 $$ URL = "s3://" + m.group(3) --> Line_80 $$ URL = protocol + "://" + m.group(4) [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_80 $$ URL = protocol + "://" + m.group(4) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_80 $$ URL = protocol + "://" + m.group(4) [FD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_82 $$ URL urlObj = null [CD]
Line_82 $$ URL urlObj = null --> Line_84 $$ urlObj = new URL(URL) [FD]
Line_82 $$ URL urlObj = null --> Line_85 $$ if (urlObj != null) [FD]
Line_84 $$ urlObj = new URL(URL) --> Line_85 $$ if (urlObj != null) [FD]
Line_85 $$ if (urlObj != null) --> Line_86 $$ URLConnection urlConn = urlObj.openConnection() [CD]
Line_82 $$ URL urlObj = null --> Line_86 $$ URLConnection urlConn = urlObj.openConnection() [FD]
Line_84 $$ urlObj = new URL(URL) --> Line_86 $$ URLConnection urlConn = urlObj.openConnection() [FD]
Line_85 $$ if (urlObj != null) --> Line_87 $$ if (user != null && pass != null) [CD]
Line_87 $$ if (user != null && pass != null) --> Line_88 $$ String userPassword = user + ":" + pass [CD]
Line_87 $$ if (user != null && pass != null) --> Line_89 $$ String encoding = new Base64().encodeBase64String(userPassword.getBytes()) [CD]
Line_88 $$ String userPassword = user + ":" + pass --> Line_89 $$ String encoding = new Base64().encodeBase64String(userPassword.getBytes()) [FD]
Line_87 $$ if (user != null && pass != null) --> Line_90 $$ urlConn.setRequestProperty("Authorization", "Basic " + encoding) [CD]
Line_86 $$ URLConnection urlConn = urlObj.openConnection() --> Line_90 $$ urlConn.setRequestProperty("Authorization", "Basic " + encoding) [FD]
Line_85 $$ if (urlObj != null) --> Line_92 $$ p = Pattern.compile("://([^/]+)/(\\S+)") [CD]
Line_8 $$ Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)") --> Line_92 $$ p = Pattern.compile("://([^/]+)/(\\S+)") [FD]
Line_35 $$ p = Pattern.compile("s3://([^/]+)/(\\S+)") --> Line_92 $$ p = Pattern.compile("://([^/]+)/(\\S+)") [FD]
Line_85 $$ if (urlObj != null) --> Line_93 $$ m = p.matcher(URL) [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_93 $$ m = p.matcher(URL) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_93 $$ m = p.matcher(URL) [FD]
Line_8 $$ Pattern p = Pattern.compile("s3://(\\S+):(\\S+)@(\\S+)") --> Line_93 $$ m = p.matcher(URL) [FD]
Line_35 $$ p = Pattern.compile("s3://([^/]+)/(\\S+)") --> Line_93 $$ m = p.matcher(URL) [FD]
Line_92 $$ p = Pattern.compile("://([^/]+)/(\\S+)") --> Line_93 $$ m = p.matcher(URL) [FD]
Line_13 $$ String URL = (String) options.valueOf("input-file") --> Line_93 $$ m = p.matcher(URL) [FD]
Line_17 $$ URL = "s3://" + m.group(3) --> Line_93 $$ m = p.matcher(URL) [FD]
Line_80 $$ URL = protocol + "://" + m.group(4) --> Line_93 $$ m = p.matcher(URL) [FD]
Line_85 $$ if (urlObj != null) --> Line_94 $$ result = m.find() [CD]
Line_10 $$ boolean result = m.find() --> Line_94 $$ result = m.find() [FD]
Line_37 $$ result = m.find() --> Line_94 $$ result = m.find() [FD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_94 $$ result = m.find() [FD]
Line_36 $$ m = p.matcher(URL) --> Line_94 $$ result = m.find() [FD]
Line_93 $$ m = p.matcher(URL) --> Line_94 $$ result = m.find() [FD]
Line_85 $$ if (urlObj != null) --> Line_95 $$ if (result) [CD]
Line_95 $$ if (result) --> Line_96 $$ String host = m.group(1) [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_96 $$ String host = m.group(1) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_96 $$ String host = m.group(1) [FD]
Line_93 $$ m = p.matcher(URL) --> Line_96 $$ String host = m.group(1) [FD]
Line_95 $$ if (result) --> Line_97 $$ String path = m.group(2) [CD]
Line_9 $$ Matcher m = p.matcher((String) options.valueOf("input-file")) --> Line_97 $$ String path = m.group(2) [FD]
Line_36 $$ m = p.matcher(URL) --> Line_97 $$ String path = m.group(2) [FD]
Line_93 $$ m = p.matcher(URL) --> Line_97 $$ String path = m.group(2) [FD]
Line_95 $$ if (result) --> Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) [CD]
Line_6 $$ File output = null --> Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) [FD]
Line_95 $$ if (result) --> Line_99 $$ output.getParentFile().mkdirs() [CD]
Line_6 $$ File output = null --> Line_99 $$ output.getParentFile().mkdirs() [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_99 $$ output.getParentFile().mkdirs() [FD]
Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) --> Line_99 $$ output.getParentFile().mkdirs() [FD]
Line_95 $$ if (result) --> Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) [CD]
Line_6 $$ File output = null --> Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) [FD]
Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) --> Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) [FD]
Line_86 $$ URLConnection urlConn = urlObj.openConnection() --> Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) [FD]
Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) --> Line_101 $$ System.out.println("Downloading an http object from URL: " + URL) [CD]
Line_86 $$ URLConnection urlConn = urlObj.openConnection() --> Line_102 $$ BufferedInputStream reader = new BufferedInputStream(urlConn.getInputStream(), bufLen) [FD]
Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) --> Line_104 $$ while (true) [CD]
Line_104 $$ while (true) --> Line_105 $$ int data = reader.read() [CD]
Line_47 $$ BufferedInputStream reader = new BufferedInputStream(object.getObjectContent(), bufLen) --> Line_105 $$ int data = reader.read() [FD]
Line_104 $$ while (true) --> Line_106 $$ if (data == -1) [CD]
Line_105 $$ int data = reader.read() --> Line_106 $$ if (data == -1) [FD]
Line_51 $$ int data = reader.read() --> Line_106 $$ if (data == -1) [FD]
Line_104 $$ while (true) --> Line_109 $$ writer.write(data) [CD]
Line_49 $$ BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(output), bufLen) --> Line_109 $$ writer.write(data) [FD]
Line_105 $$ int data = reader.read() --> Line_109 $$ writer.write(data) [FD]
Line_51 $$ int data = reader.read() --> Line_109 $$ writer.write(data) [FD]
Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) --> Line_111 $$ reader.close() [CD]
Line_47 $$ BufferedInputStream reader = new BufferedInputStream(object.getObjectContent(), bufLen) --> Line_111 $$ reader.close() [FD]
Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) --> Line_112 $$ writer.close() [CD]
Line_49 $$ BufferedOutputStream writer = new BufferedOutputStream(new FileOutputStream(output), bufLen) --> Line_112 $$ writer.close() [FD]
Line_100 $$ if (!output.exists() || output.length() != urlConn.getContentLength()) --> Line_114 $$ System.out.println("Skipping download of http object from URL: " + URL + " since local output exists: " + output.getAbsolutePath()) [CD]
Line_6 $$ File output = null --> Line_114 $$ System.out.println("Skipping download of http object from URL: " + URL + " since local output exists: " + output.getAbsolutePath()) [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_114 $$ System.out.println("Skipping download of http object from URL: " + URL + " since local output exists: " + output.getAbsolutePath()) [FD]
Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) --> Line_114 $$ System.out.println("Skipping download of http object from URL: " + URL + " since local output exists: " + output.getAbsolutePath()) [FD]
Line_68 $$ if (((String) options.valueOf("input-file")).startsWith("http://") || ((String) options.valueOf("input-file")).startsWith("https://")) --> Line_124 $$ output = new File((String) options.valueOf("input-file")) [CD]
Line_6 $$ File output = null --> Line_124 $$ output = new File((String) options.valueOf("input-file")) [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_124 $$ output = new File((String) options.valueOf("input-file")) [FD]
Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) --> Line_124 $$ output = new File((String) options.valueOf("input-file")) [FD]
Line_2 $$ public ReturnValue do_run() --> Line_126 $$ boolean result = FileTools.unzipFile(output, new File((String) options.valueOf("output-dir"))) [CD]
Line_6 $$ File output = null --> Line_126 $$ boolean result = FileTools.unzipFile(output, new File((String) options.valueOf("output-dir"))) [FD]
Line_43 $$ output = new File((String) options.valueOf("output-dir") + File.separator + key) --> Line_126 $$ boolean result = FileTools.unzipFile(output, new File((String) options.valueOf("output-dir"))) [FD]
Line_98 $$ output = new File((String) options.valueOf("output-dir") + path) --> Line_126 $$ boolean result = FileTools.unzipFile(output, new File((String) options.valueOf("output-dir"))) [FD]
Line_124 $$ output = new File((String) options.valueOf("input-file")) --> Line_126 $$ boolean result = FileTools.unzipFile(output, new File((String) options.valueOf("output-dir"))) [FD]
Line_2 $$ public ReturnValue do_run() --> Line_127 $$ if (!result) [CD]
Line_10 $$ boolean result = m.find() --> Line_127 $$ if (!result) [FD]
Line_37 $$ result = m.find() --> Line_127 $$ if (!result) [FD]
Line_94 $$ result = m.find() --> Line_127 $$ if (!result) [FD]
Line_127 $$ if (!result) --> Line_128 $$ ret.setStderr("Can't unzip software bundle " + options.valueOf("input-file") + " to directory " + options.valueOf("output-dir")) [CD]
Line_4 $$ ReturnValue ret = new ReturnValue() --> Line_128 $$ ret.setStderr("Can't unzip software bundle " + options.valueOf("input-file") + " to directory " + options.valueOf("output-dir")) [FD]
Line_127 $$ if (!result) --> Line_129 $$ ret.setExitStatus(ReturnValue.RUNTIMEEXCEPTION) [CD]
Line_4 $$ ReturnValue ret = new ReturnValue() --> Line_129 $$ ret.setExitStatus(ReturnValue.RUNTIMEEXCEPTION) [FD]
Line_2 $$ public ReturnValue do_run() --> Line_131 $$ return (ret) [CD]
