Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_3 $$ long plussQuotaSize = 0 [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_4 $$ if (!baseDirStr.endsWith(sep)) [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_4 $$ if (!baseDirStr.endsWith(sep)) [FD]
Line_4 $$ if (!baseDirStr.endsWith(sep)) --> Line_5 $$ baseDirStr += sep [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_5 $$ baseDirStr += sep [FD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_7 $$ BufferedInputStream in = null [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_8 $$ BufferedOutputStream out = null [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_9 $$ byte dataBuff[] = new byte[bufferSize] [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_10 $$ String file1FullPath = new String(baseDirStr + fileName) [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_11 $$ if (!file1FullPath.equalsIgnoreCase(file2FullPath)) [CD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_11 $$ if (!file1FullPath.equalsIgnoreCase(file2FullPath)) [FD]
Line_10 $$ String file1FullPath = new String(baseDirStr + fileName) --> Line_11 $$ if (!file1FullPath.equalsIgnoreCase(file2FullPath)) [FD]
Line_11 $$ if (!file1FullPath.equalsIgnoreCase(file2FullPath)) --> Line_12 $$ File file1 = new File(file1FullPath) [CD]
Line_11 $$ if (!file1FullPath.equalsIgnoreCase(file2FullPath)) --> Line_13 $$ if (file1.exists() && (file1.isFile())) [CD]
Line_12 $$ File file1 = new File(file1FullPath) --> Line_13 $$ if (file1.exists() && (file1.isFile())) [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_14 $$ File file2 = new File(file2FullPath) [CD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_15 $$ if (file2.exists()) [CD]
Line_14 $$ File file2 = new File(file2FullPath) --> Line_15 $$ if (file2.exists()) [FD]
Line_15 $$ if (file2.exists()) --> Line_16 $$ plussQuotaSize -= file2.length() [CD]
Line_3 $$ long plussQuotaSize = 0 --> Line_16 $$ plussQuotaSize -= file2.length() [FD]
Line_14 $$ File file2 = new File(file2FullPath) --> Line_16 $$ plussQuotaSize -= file2.length() [FD]
Line_15 $$ if (file2.exists()) --> Line_17 $$ file2.delete() [CD]
Line_14 $$ File file2 = new File(file2FullPath) --> Line_17 $$ file2.delete() [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_19 $$ FileUtils.getInstance().createDirectory(file2.getParent()) [CD]
Line_14 $$ File file2 = new File(file2FullPath) --> Line_19 $$ FileUtils.getInstance().createDirectory(file2.getParent()) [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_20 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) [CD]
Line_7 $$ BufferedInputStream in = null --> Line_20 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_21 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) [CD]
Line_8 $$ BufferedOutputStream out = null --> Line_21 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_22 $$ int readLen [CD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) [CD]
Line_22 $$ int readLen --> Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_7 $$ BufferedInputStream in = null --> Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_20 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) --> Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_24 $$ out.write(dataBuff, 0, readLen) [CD]
Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_24 $$ out.write(dataBuff, 0, readLen) [FD]
Line_8 $$ BufferedOutputStream out = null --> Line_24 $$ out.write(dataBuff, 0, readLen) [FD]
Line_21 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_24 $$ out.write(dataBuff, 0, readLen) [FD]
Line_22 $$ int readLen --> Line_24 $$ out.write(dataBuff, 0, readLen) [FD]
Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_25 $$ plussQuotaSize += readLen [CD]
Line_23 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_25 $$ plussQuotaSize += readLen [FD]
Line_3 $$ long plussQuotaSize = 0 --> Line_25 $$ plussQuotaSize += readLen [FD]
Line_16 $$ plussQuotaSize -= file2.length() --> Line_25 $$ plussQuotaSize += readLen [FD]
Line_22 $$ int readLen --> Line_25 $$ plussQuotaSize += readLen [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_27 $$ out.flush() [CD]
Line_8 $$ BufferedOutputStream out = null --> Line_27 $$ out.flush() [FD]
Line_21 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_27 $$ out.flush() [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_28 $$ in.close() [CD]
Line_7 $$ BufferedInputStream in = null --> Line_28 $$ in.close() [FD]
Line_20 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) --> Line_28 $$ in.close() [FD]
Line_13 $$ if (file1.exists() && (file1.isFile())) --> Line_29 $$ out.close() [CD]
Line_8 $$ BufferedOutputStream out = null --> Line_29 $$ out.close() [FD]
Line_21 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_29 $$ out.close() [FD]
Line_2 $$ public long copyFile(String baseDirStr, String fileName, String file2FullPath) throws Exception --> Line_34 $$ return plussQuotaSize [CD]
