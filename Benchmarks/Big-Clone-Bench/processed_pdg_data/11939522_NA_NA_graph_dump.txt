Line_2 $$ public static String[] bubbleSort(String[] unsortedString, boolean ascending) --> Line_3 $$ if (unsortedString.length < 2) [CD]
Line_2 $$ public static String[] bubbleSort(String[] unsortedString, boolean ascending) --> Line_3 $$ if (unsortedString.length < 2) [FD]
Line_2 $$ public static String[] bubbleSort(String[] unsortedString, boolean ascending) --> Line_4 $$ String[] sortedString = new String[unsortedString.length] [CD]
Line_2 $$ public static String[] bubbleSort(String[] unsortedString, boolean ascending) --> Line_5 $$ for (int i = 0; i < unsortedString.length; i++) [CD]
Line_5 $$ for (int i = 0; i < unsortedString.length; i++) --> Line_6 $$ sortedString[i] = unsortedString[i] [CD]
Line_2 $$ public static String[] bubbleSort(String[] unsortedString, boolean ascending) --> Line_8 $$ if (ascending) [CD]
Line_8 $$ if (ascending) --> Line_9 $$ for (int i = 0; i < sortedString.length - 1; i++) [CD]
Line_5 $$ for (int i = 0; i < unsortedString.length; i++) --> Line_9 $$ for (int i = 0; i < sortedString.length - 1; i++) [FD]
Line_9 $$ for (int i = 0; i < sortedString.length - 1; i++) --> Line_10 $$ for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) [CD]
Line_10 $$ for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) --> Line_11 $$ String swap = sortedString[j] [CD]
Line_10 $$ for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) --> Line_12 $$ sortedString[j] = sortedString[j + 1] [CD]
Line_10 $$ for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) --> Line_13 $$ sortedString[j + 1] = swap [CD]
Line_11 $$ String swap = sortedString[j] --> Line_13 $$ sortedString[j + 1] = swap [FD]
Line_8 $$ if (ascending) --> Line_17 $$ for (int i = sortedString.length - 2; i >= 0; i--) [CD]
Line_9 $$ for (int i = 0; i < sortedString.length - 1; i++) --> Line_17 $$ for (int i = sortedString.length - 2; i >= 0; i--) [FD]
Line_5 $$ for (int i = 0; i < unsortedString.length; i++) --> Line_17 $$ for (int i = sortedString.length - 2; i >= 0; i--) [FD]
Line_17 $$ for (int i = sortedString.length - 2; i >= 0; i--) --> Line_18 $$ for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) [CD]
Line_10 $$ for (int j = 1; j < sortedString.length - 1 - i; j++) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) < 0) --> Line_18 $$ for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) [FD]
Line_18 $$ for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) --> Line_19 $$ String swap = sortedString[j] [CD]
Line_18 $$ for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) --> Line_20 $$ sortedString[j] = sortedString[j + 1] [CD]
Line_18 $$ for (int j = sortedString.length - 2 - i; j >= 0; j--) if (sortedString[j + 1].compareToIgnoreCase(sortedString[j]) > 0) --> Line_21 $$ sortedString[j + 1] = swap [CD]
Line_19 $$ String swap = sortedString[j] --> Line_21 $$ sortedString[j + 1] = swap [FD]
Line_11 $$ String swap = sortedString[j] --> Line_21 $$ sortedString[j + 1] = swap [FD]
Line_2 $$ public static String[] bubbleSort(String[] unsortedString, boolean ascending) --> Line_25 $$ return sortedString [CD]
