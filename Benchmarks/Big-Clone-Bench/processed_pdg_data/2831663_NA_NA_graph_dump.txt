Line_2 $$ public void onMessage(Message message) --> Line_3 $$ LOG.debug("onMessage") [CD]
Line_2 $$ public void onMessage(Message message) --> Line_4 $$ DownloadMessage downloadMessage [CD]
Line_4 $$ DownloadMessage downloadMessage --> Line_6 $$ downloadMessage = new DownloadMessage(message) [FD]
Line_2 $$ public void onMessage(Message message) --> Line_11 $$ String caName = downloadMessage.getCaName() [CD]
Line_4 $$ DownloadMessage downloadMessage --> Line_11 $$ String caName = downloadMessage.getCaName() [FD]
Line_6 $$ downloadMessage = new DownloadMessage(message) --> Line_11 $$ String caName = downloadMessage.getCaName() [FD]
Line_2 $$ public void onMessage(Message message) --> Line_12 $$ boolean update = downloadMessage.isUpdate() [CD]
Line_4 $$ DownloadMessage downloadMessage --> Line_12 $$ boolean update = downloadMessage.isUpdate() [FD]
Line_6 $$ downloadMessage = new DownloadMessage(message) --> Line_12 $$ boolean update = downloadMessage.isUpdate() [FD]
Line_2 $$ public void onMessage(Message message) --> Line_13 $$ LOG.debug("issuer: " + caName) [CD]
Line_2 $$ public void onMessage(Message message) --> Line_14 $$ CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName) [CD]
Line_11 $$ String caName = downloadMessage.getCaName() --> Line_14 $$ CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName) [FD]
Line_2 $$ public void onMessage(Message message) --> Line_15 $$ if (null == certificateAuthority) [CD]
Line_14 $$ CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName) --> Line_15 $$ if (null == certificateAuthority) [FD]
Line_15 $$ if (null == certificateAuthority) --> Line_16 $$ LOG.error("unknown certificate authority: " + caName) [CD]
Line_15 $$ if (null == certificateAuthority) --> Line_17 $$ return [CD]
Line_2 $$ public void onMessage(Message message) --> Line_19 $$ if (!update && Status.PROCESSING != certificateAuthority.getStatus()) [CD]
Line_12 $$ boolean update = downloadMessage.isUpdate() --> Line_19 $$ if (!update && Status.PROCESSING != certificateAuthority.getStatus()) [FD]
Line_14 $$ CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName) --> Line_19 $$ if (!update && Status.PROCESSING != certificateAuthority.getStatus()) [FD]
Line_19 $$ if (!update && Status.PROCESSING != certificateAuthority.getStatus()) --> Line_20 $$ LOG.debug("CA status not marked for processing") [CD]
Line_19 $$ if (!update && Status.PROCESSING != certificateAuthority.getStatus()) --> Line_21 $$ return [CD]
Line_2 $$ public void onMessage(Message message) --> Line_23 $$ String crlUrl = certificateAuthority.getCrlUrl() [CD]
Line_14 $$ CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName) --> Line_23 $$ String crlUrl = certificateAuthority.getCrlUrl() [FD]
Line_2 $$ public void onMessage(Message message) --> Line_24 $$ if (null == crlUrl) [CD]
Line_23 $$ String crlUrl = certificateAuthority.getCrlUrl() --> Line_24 $$ if (null == crlUrl) [FD]
Line_24 $$ if (null == crlUrl) --> Line_25 $$ LOG.warn("No CRL url for CA " + certificateAuthority.getName()) [CD]
Line_14 $$ CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName) --> Line_25 $$ LOG.warn("No CRL url for CA " + certificateAuthority.getName()) [FD]
Line_24 $$ if (null == crlUrl) --> Line_26 $$ certificateAuthority.setStatus(Status.NONE) [CD]
Line_14 $$ CertificateAuthorityEntity certificateAuthority = this.certificateAuthorityDAO.findCertificateAuthority(caName) --> Line_26 $$ certificateAuthority.setStatus(Status.NONE) [FD]
Line_24 $$ if (null == crlUrl) --> Line_27 $$ return [CD]
Line_2 $$ public void onMessage(Message message) --> Line_29 $$ NetworkConfig networkConfig = this.configurationDAO.getNetworkConfig() [CD]
Line_2 $$ public void onMessage(Message message) --> Line_30 $$ HttpClient httpClient = new HttpClient() [CD]
Line_2 $$ public void onMessage(Message message) --> Line_31 $$ if (null != networkConfig) [CD]
Line_29 $$ NetworkConfig networkConfig = this.configurationDAO.getNetworkConfig() --> Line_31 $$ if (null != networkConfig) [FD]
Line_31 $$ if (null != networkConfig) --> Line_32 $$ httpClient.getHostConfiguration().setProxy(networkConfig.getProxyHost(), networkConfig.getProxyPort()) [CD]
Line_30 $$ HttpClient httpClient = new HttpClient() --> Line_32 $$ httpClient.getHostConfiguration().setProxy(networkConfig.getProxyHost(), networkConfig.getProxyPort()) [FD]
Line_29 $$ NetworkConfig networkConfig = this.configurationDAO.getNetworkConfig() --> Line_32 $$ httpClient.getHostConfiguration().setProxy(networkConfig.getProxyHost(), networkConfig.getProxyPort()) [FD]
Line_2 $$ public void onMessage(Message message) --> Line_34 $$ HttpClientParams httpClientParams = httpClient.getParams() [CD]
Line_30 $$ HttpClient httpClient = new HttpClient() --> Line_34 $$ HttpClientParams httpClientParams = httpClient.getParams() [FD]
Line_2 $$ public void onMessage(Message message) --> Line_35 $$ httpClientParams.setParameter("http.socket.timeout", new Integer(1000 * 20)) [CD]
Line_34 $$ HttpClientParams httpClientParams = httpClient.getParams() --> Line_35 $$ httpClientParams.setParameter("http.socket.timeout", new Integer(1000 * 20)) [FD]
Line_2 $$ public void onMessage(Message message) --> Line_36 $$ LOG.debug("downloading CRL from: " + crlUrl) [CD]
Line_2 $$ public void onMessage(Message message) --> Line_37 $$ GetMethod getMethod = new GetMethod(crlUrl) [CD]
Line_2 $$ public void onMessage(Message message) --> Line_38 $$ getMethod.addRequestHeader("User-Agent", "jTrust CRL Client") [CD]
Line_37 $$ GetMethod getMethod = new GetMethod(crlUrl) --> Line_38 $$ getMethod.addRequestHeader("User-Agent", "jTrust CRL Client") [FD]
Line_2 $$ public void onMessage(Message message) --> Line_39 $$ int statusCode [CD]
Line_39 $$ int statusCode --> Line_41 $$ statusCode = httpClient.executeMethod(getMethod) [FD]
Line_30 $$ HttpClient httpClient = new HttpClient() --> Line_41 $$ statusCode = httpClient.executeMethod(getMethod) [FD]
Line_37 $$ GetMethod getMethod = new GetMethod(crlUrl) --> Line_41 $$ statusCode = httpClient.executeMethod(getMethod) [FD]
Line_11 $$ String caName = downloadMessage.getCaName() --> Line_43 $$ downloadFailed(caName, crlUrl) [FD]
Line_23 $$ String crlUrl = certificateAuthority.getCrlUrl() --> Line_43 $$ downloadFailed(caName, crlUrl) [FD]
Line_2 $$ public void onMessage(Message message) --> Line_46 $$ if (HttpURLConnection.HTTP_OK != statusCode) [CD]
Line_39 $$ int statusCode --> Line_46 $$ if (HttpURLConnection.HTTP_OK != statusCode) [FD]
Line_41 $$ statusCode = httpClient.executeMethod(getMethod) --> Line_46 $$ if (HttpURLConnection.HTTP_OK != statusCode) [FD]
Line_46 $$ if (HttpURLConnection.HTTP_OK != statusCode) --> Line_47 $$ LOG.debug("HTTP status code: " + statusCode) [CD]
Line_46 $$ if (HttpURLConnection.HTTP_OK != statusCode) --> Line_48 $$ downloadFailed(caName, crlUrl) [CD]
Line_11 $$ String caName = downloadMessage.getCaName() --> Line_48 $$ downloadFailed(caName, crlUrl) [FD]
Line_23 $$ String crlUrl = certificateAuthority.getCrlUrl() --> Line_48 $$ downloadFailed(caName, crlUrl) [FD]
Line_2 $$ public void onMessage(Message message) --> Line_51 $$ String crlFilePath [CD]
Line_2 $$ public void onMessage(Message message) --> Line_52 $$ File crlFile = null [CD]
Line_52 $$ File crlFile = null --> Line_54 $$ crlFile = File.createTempFile("crl-", ".der") [FD]
Line_37 $$ GetMethod getMethod = new GetMethod(crlUrl) --> Line_55 $$ InputStream crlInputStream = getMethod.getResponseBodyAsStream() [FD]
Line_55 $$ InputStream crlInputStream = getMethod.getResponseBodyAsStream() --> Line_57 $$ IOUtils.copy(crlInputStream, crlOutputStream) [FD]
Line_56 $$ OutputStream crlOutputStream = new FileOutputStream(crlFile) --> Line_57 $$ IOUtils.copy(crlInputStream, crlOutputStream) [FD]
Line_55 $$ InputStream crlInputStream = getMethod.getResponseBodyAsStream() --> Line_58 $$ IOUtils.closeQuietly(crlInputStream) [FD]
Line_56 $$ OutputStream crlOutputStream = new FileOutputStream(crlFile) --> Line_59 $$ IOUtils.closeQuietly(crlOutputStream) [FD]
Line_51 $$ String crlFilePath --> Line_60 $$ crlFilePath = crlFile.getAbsolutePath() [FD]
Line_52 $$ File crlFile = null --> Line_60 $$ crlFilePath = crlFile.getAbsolutePath() [FD]
Line_54 $$ crlFile = File.createTempFile("crl-", ".der") --> Line_60 $$ crlFilePath = crlFile.getAbsolutePath() [FD]
Line_11 $$ String caName = downloadMessage.getCaName() --> Line_63 $$ downloadFailed(caName, crlUrl) [FD]
Line_23 $$ String crlUrl = certificateAuthority.getCrlUrl() --> Line_63 $$ downloadFailed(caName, crlUrl) [FD]
Line_52 $$ File crlFile = null --> Line_64 $$ if (null != crlFile) [FD]
Line_54 $$ crlFile = File.createTempFile("crl-", ".der") --> Line_64 $$ if (null != crlFile) [FD]
Line_64 $$ if (null != crlFile) --> Line_65 $$ crlFile.delete() [CD]
Line_52 $$ File crlFile = null --> Line_65 $$ crlFile.delete() [FD]
Line_54 $$ crlFile = File.createTempFile("crl-", ".der") --> Line_65 $$ crlFile.delete() [FD]
Line_11 $$ String caName = downloadMessage.getCaName() --> Line_70 $$ this.notificationService.notifyHarvester(caName, crlFilePath, update) [FD]
Line_51 $$ String crlFilePath --> Line_70 $$ this.notificationService.notifyHarvester(caName, crlFilePath, update) [FD]
Line_60 $$ crlFilePath = crlFile.getAbsolutePath() --> Line_70 $$ this.notificationService.notifyHarvester(caName, crlFilePath, update) [FD]
Line_12 $$ boolean update = downloadMessage.isUpdate() --> Line_70 $$ this.notificationService.notifyHarvester(caName, crlFilePath, update) [FD]
Line_52 $$ File crlFile = null --> Line_72 $$ crlFile.delete() [FD]
Line_54 $$ crlFile = File.createTempFile("crl-", ".der") --> Line_72 $$ crlFile.delete() [FD]
