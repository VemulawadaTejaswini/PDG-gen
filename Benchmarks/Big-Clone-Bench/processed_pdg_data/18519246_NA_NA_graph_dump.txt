Line_2 $$ public List<PathObject> fetchPath(BoardObject board) throws NetworkException --> Line_3 $$ if (boardPathMap.containsKey(board.getId())) [CD]
Line_2 $$ public List<PathObject> fetchPath(BoardObject board) throws NetworkException --> Line_3 $$ if (boardPathMap.containsKey(board.getId())) [FD]
Line_3 $$ if (boardPathMap.containsKey(board.getId())) --> Line_4 $$ return boardPathMap.get(board.getId()).getChildren() [CD]
Line_2 $$ public List<PathObject> fetchPath(BoardObject board) throws NetworkException --> Line_4 $$ return boardPathMap.get(board.getId()).getChildren() [FD]
Line_2 $$ public List<PathObject> fetchPath(BoardObject board) throws NetworkException --> Line_6 $$ HttpClient client = HttpConfig.newInstance() [CD]
Line_2 $$ public List<PathObject> fetchPath(BoardObject board) throws NetworkException --> Line_7 $$ HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN_BOARD + board.getId()) [CD]
Line_2 $$ public List<PathObject> fetchPath(BoardObject board) throws NetworkException --> Line_7 $$ HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN_BOARD + board.getId()) [FD]
Line_6 $$ HttpClient client = HttpConfig.newInstance() --> Line_9 $$ HttpResponse response = client.execute(get) [FD]
Line_7 $$ HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN_BOARD + board.getId()) --> Line_9 $$ HttpResponse response = client.execute(get) [FD]
Line_9 $$ HttpResponse response = client.execute(get) --> Line_10 $$ HttpEntity entity = response.getEntity() [FD]
Line_10 $$ HttpEntity entity = response.getEntity() --> Line_11 $$ Document doc = XmlOperator.readDocument(entity.getContent()) [FD]
Line_11 $$ Document doc = XmlOperator.readDocument(entity.getContent()) --> Line_13 $$ BBSBodyParseHelper.parsePathList(doc, parent) [FD]
Line_12 $$ PathObject parent = new PathObject() --> Line_13 $$ BBSBodyParseHelper.parsePathList(doc, parent) [FD]
Line_12 $$ PathObject parent = new PathObject() --> Line_14 $$ parent = searchAndCreatePathFromRoot(parent) [FD]
Line_12 $$ PathObject parent = new PathObject() --> Line_15 $$ boardPathMap.put(board.getId(), parent) [FD]
Line_14 $$ parent = searchAndCreatePathFromRoot(parent) --> Line_15 $$ boardPathMap.put(board.getId(), parent) [FD]
Line_2 $$ public List<PathObject> fetchPath(BoardObject board) throws NetworkException --> Line_15 $$ boardPathMap.put(board.getId(), parent) [FD]
Line_12 $$ PathObject parent = new PathObject() --> Line_16 $$ return parent.getChildren() [FD]
Line_14 $$ parent = searchAndCreatePathFromRoot(parent) --> Line_16 $$ return parent.getChildren() [FD]
