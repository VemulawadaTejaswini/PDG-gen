Line_2 $$ private void generateSchema() --> Line_3 $$ ConsoleOutputWindow console = DefaultXPontusWindowImpl.getInstance().getConsole() [CD]
Line_2 $$ private void generateSchema() --> Line_4 $$ MessagesWindowDockable mconsole = (MessagesWindowDockable) console.getDockableById(MessagesWindowDockable.DOCKABLE_ID) [CD]
Line_3 $$ ConsoleOutputWindow console = DefaultXPontusWindowImpl.getInstance().getConsole() --> Line_4 $$ MessagesWindowDockable mconsole = (MessagesWindowDockable) console.getDockableById(MessagesWindowDockable.DOCKABLE_ID) [FD]
Line_2 $$ private void generateSchema() --> Line_5 $$ ByteArrayOutputStream bao = new ByteArrayOutputStream() [CD]
Line_2 $$ private void generateSchema() --> Line_6 $$ IDocumentContainer container = (IDocumentContainer) DefaultXPontusWindowImpl.getInstance().getDocumentTabContainer().getCurrentDockable() [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_9 $$ boolean isValid = transformationIsValid(model) [FD]
Line_9 $$ boolean isValid = transformationIsValid(model) --> Line_10 $$ if (!isValid) [FD]
Line_10 $$ if (!isValid) --> Line_11 $$ return [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_17 $$ if (model.getInputType().equalsIgnoreCase("RELAX NG Grammar")) [FD]
Line_17 $$ if (model.getInputType().equalsIgnoreCase("RELAX NG Grammar")) --> Line_18 $$ inFormat = new SAXParseInputFormat() [CD]
Line_15 $$ InputFormat inFormat = null --> Line_18 $$ inFormat = new SAXParseInputFormat() [FD]
Line_17 $$ if (model.getInputType().equalsIgnoreCase("RELAX NG Grammar")) --> Line_19 $$ if (model.getInputType().equalsIgnoreCase("RELAX NG Compact Grammar")) [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_19 $$ if (model.getInputType().equalsIgnoreCase("RELAX NG Compact Grammar")) [FD]
Line_19 $$ if (model.getInputType().equalsIgnoreCase("RELAX NG Compact Grammar")) --> Line_20 $$ inFormat = new CompactParseInputFormat() [CD]
Line_15 $$ InputFormat inFormat = null --> Line_20 $$ inFormat = new CompactParseInputFormat() [FD]
Line_18 $$ inFormat = new SAXParseInputFormat() --> Line_20 $$ inFormat = new CompactParseInputFormat() [FD]
Line_19 $$ if (model.getInputType().equalsIgnoreCase("RELAX NG Compact Grammar")) --> Line_21 $$ if (model.getInputType().equalsIgnoreCase("DTD")) [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_21 $$ if (model.getInputType().equalsIgnoreCase("DTD")) [FD]
Line_21 $$ if (model.getInputType().equalsIgnoreCase("DTD")) --> Line_22 $$ inFormat = new DtdInputFormat() [CD]
Line_15 $$ InputFormat inFormat = null --> Line_22 $$ inFormat = new DtdInputFormat() [FD]
Line_18 $$ inFormat = new SAXParseInputFormat() --> Line_22 $$ inFormat = new DtdInputFormat() [FD]
Line_20 $$ inFormat = new CompactParseInputFormat() --> Line_22 $$ inFormat = new DtdInputFormat() [FD]
Line_21 $$ if (model.getInputType().equalsIgnoreCase("DTD")) --> Line_23 $$ if (model.getInputType().equalsIgnoreCase("XML")) [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_23 $$ if (model.getInputType().equalsIgnoreCase("XML")) [FD]
Line_23 $$ if (model.getInputType().equalsIgnoreCase("XML")) --> Line_24 $$ inFormat = new XmlInputFormat() [CD]
Line_15 $$ InputFormat inFormat = null --> Line_24 $$ inFormat = new XmlInputFormat() [FD]
Line_18 $$ inFormat = new SAXParseInputFormat() --> Line_24 $$ inFormat = new XmlInputFormat() [FD]
Line_20 $$ inFormat = new CompactParseInputFormat() --> Line_24 $$ inFormat = new XmlInputFormat() [FD]
Line_22 $$ inFormat = new DtdInputFormat() --> Line_24 $$ inFormat = new XmlInputFormat() [FD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_26 $$ if (model.getOutputType().equalsIgnoreCase("DTD")) [FD]
Line_26 $$ if (model.getOutputType().equalsIgnoreCase("DTD")) --> Line_27 $$ of = new DtdOutputFormat() [CD]
Line_16 $$ OutputFormat of = null --> Line_27 $$ of = new DtdOutputFormat() [FD]
Line_26 $$ if (model.getOutputType().equalsIgnoreCase("DTD")) --> Line_28 $$ if (model.getOutputType().equalsIgnoreCase("Relax NG Grammar")) [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_28 $$ if (model.getOutputType().equalsIgnoreCase("Relax NG Grammar")) [FD]
Line_28 $$ if (model.getOutputType().equalsIgnoreCase("Relax NG Grammar")) --> Line_29 $$ of = new RngOutputFormat() [CD]
Line_16 $$ OutputFormat of = null --> Line_29 $$ of = new RngOutputFormat() [FD]
Line_27 $$ of = new DtdOutputFormat() --> Line_29 $$ of = new RngOutputFormat() [FD]
Line_28 $$ if (model.getOutputType().equalsIgnoreCase("Relax NG Grammar")) --> Line_30 $$ if (model.getOutputType().equalsIgnoreCase("XML Schema")) [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_30 $$ if (model.getOutputType().equalsIgnoreCase("XML Schema")) [FD]
Line_30 $$ if (model.getOutputType().equalsIgnoreCase("XML Schema")) --> Line_31 $$ of = new XsdOutputFormat() [CD]
Line_16 $$ OutputFormat of = null --> Line_31 $$ of = new XsdOutputFormat() [FD]
Line_27 $$ of = new DtdOutputFormat() --> Line_31 $$ of = new XsdOutputFormat() [FD]
Line_29 $$ of = new RngOutputFormat() --> Line_31 $$ of = new XsdOutputFormat() [FD]
Line_30 $$ if (model.getOutputType().equalsIgnoreCase("XML Schema")) --> Line_32 $$ if (model.getOutputType().equalsIgnoreCase("Relax NG Compact Grammar")) [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_32 $$ if (model.getOutputType().equalsIgnoreCase("Relax NG Compact Grammar")) [FD]
Line_32 $$ if (model.getOutputType().equalsIgnoreCase("Relax NG Compact Grammar")) --> Line_33 $$ of = new RncOutputFormat() [CD]
Line_16 $$ OutputFormat of = null --> Line_33 $$ of = new RncOutputFormat() [FD]
Line_27 $$ of = new DtdOutputFormat() --> Line_33 $$ of = new RncOutputFormat() [FD]
Line_29 $$ of = new RngOutputFormat() --> Line_33 $$ of = new RncOutputFormat() [FD]
Line_31 $$ of = new XsdOutputFormat() --> Line_33 $$ of = new RncOutputFormat() [FD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_38 $$ JTextComponent jtc = DefaultXPontusWindowImpl.getInstance().getDocumentTabContainer().getCurrentEditor() [CD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_39 $$ if (jtc == null) [CD]
Line_38 $$ JTextComponent jtc = DefaultXPontusWindowImpl.getInstance().getDocumentTabContainer().getCurrentEditor() --> Line_39 $$ if (jtc == null) [FD]
Line_39 $$ if (jtc == null) --> Line_40 $$ XPontusComponentsUtils.showErrorMessage("No document opened!!!") [CD]
Line_39 $$ if (jtc == null) --> Line_41 $$ DefaultXPontusWindowImpl.getInstance().getStatusBar().setMessage("Error generating schema, Please see the messages window!") [CD]
Line_39 $$ if (jtc == null) --> Line_42 $$ return [CD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_44 $$ String suffixe = model.getOutputType().toLowerCase() [CD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_44 $$ String suffixe = model.getOutputType().toLowerCase() [FD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_45 $$ File tmp = File.createTempFile("schemageneratorhandler", +System.currentTimeMillis() + "." + suffixe) [CD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_46 $$ OutputStream m_outputStream = new FileOutputStream(tmp) [CD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_47 $$ CharsetDetector detector = new CharsetDetector() [CD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_48 $$ detector.setText(jtc.getText().getBytes()) [CD]
Line_47 $$ CharsetDetector detector = new CharsetDetector() --> Line_48 $$ detector.setText(jtc.getText().getBytes()) [FD]
Line_38 $$ JTextComponent jtc = DefaultXPontusWindowImpl.getInstance().getDocumentTabContainer().getCurrentEditor() --> Line_48 $$ detector.setText(jtc.getText().getBytes()) [FD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_49 $$ Writer m_writer = new OutputStreamWriter(m_outputStream, "UTF-8") [CD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_50 $$ IOUtils.copy(detector.detect().getReader(), m_writer) [CD]
Line_49 $$ Writer m_writer = new OutputStreamWriter(m_outputStream, "UTF-8") --> Line_50 $$ IOUtils.copy(detector.detect().getReader(), m_writer) [FD]
Line_47 $$ CharsetDetector detector = new CharsetDetector() --> Line_50 $$ IOUtils.copy(detector.detect().getReader(), m_writer) [FD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_51 $$ IOUtils.closeQuietly(m_writer) [CD]
Line_49 $$ Writer m_writer = new OutputStreamWriter(m_outputStream, "UTF-8") --> Line_51 $$ IOUtils.closeQuietly(m_writer) [FD]
Line_36 $$ SchemaCollection sc = null --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_15 $$ InputFormat inFormat = null --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_18 $$ inFormat = new SAXParseInputFormat() --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_20 $$ inFormat = new CompactParseInputFormat() --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_22 $$ inFormat = new DtdInputFormat() --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_24 $$ inFormat = new XmlInputFormat() --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_35 $$ ErrorHandlerImpl eh = new ErrorHandlerImpl(bao) --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_45 $$ File tmp = File.createTempFile("schemageneratorhandler", +System.currentTimeMillis() + "." + suffixe) --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_57 $$ stb.append("\nError loading input document!\n") [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_58 $$ stb.append("Maybe the input type is invalid?\n") [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_59 $$ stb.append("Please check again the input type list or trying validating your document\n") [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_60 $$ throw new Exception(stb.toString()) [FD]
Line_37 $$ if (!view.getModel().isUseExternalDocument()) --> Line_62 $$ tmp.deleteOnExit() [CD]
Line_45 $$ File tmp = File.createTempFile("schemageneratorhandler", +System.currentTimeMillis() + "." + suffixe) --> Line_62 $$ tmp.deleteOnExit() [FD]
Line_36 $$ SchemaCollection sc = null --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_15 $$ InputFormat inFormat = null --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_18 $$ inFormat = new SAXParseInputFormat() --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_20 $$ inFormat = new CompactParseInputFormat() --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_22 $$ inFormat = new DtdInputFormat() --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_24 $$ inFormat = new XmlInputFormat() --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_35 $$ ErrorHandlerImpl eh = new ErrorHandlerImpl(bao) --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_68 $$ stb.append("\nError loading input document!\n") [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_69 $$ stb.append("Maybe the input type is invalid?\n") [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_70 $$ stb.append("Please check again the input type list or trying validating your document\n") [FD]
Line_56 $$ StrBuilder stb = new StrBuilder() --> Line_71 $$ throw new Exception(stb.toString()) [FD]
Line_36 $$ SchemaCollection sc = null --> Line_74 $$ OutputDirectory od = new LocalOutputDirectory(sc.getMainUri(), new File(view.getModel().getOutputURI()), model.getOutputType().toLowerCase(), DEFAULT_OUTPUT_ENCODING, DEFAULT_LINE_LENGTH, DEFAULT_INDENT) [FD]
Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) --> Line_74 $$ OutputDirectory od = new LocalOutputDirectory(sc.getMainUri(), new File(view.getModel().getOutputURI()), model.getOutputType().toLowerCase(), DEFAULT_OUTPUT_ENCODING, DEFAULT_LINE_LENGTH, DEFAULT_INDENT) [FD]
Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) --> Line_74 $$ OutputDirectory od = new LocalOutputDirectory(sc.getMainUri(), new File(view.getModel().getOutputURI()), model.getOutputType().toLowerCase(), DEFAULT_OUTPUT_ENCODING, DEFAULT_LINE_LENGTH, DEFAULT_INDENT) [FD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_74 $$ OutputDirectory od = new LocalOutputDirectory(sc.getMainUri(), new File(view.getModel().getOutputURI()), model.getOutputType().toLowerCase(), DEFAULT_OUTPUT_ENCODING, DEFAULT_LINE_LENGTH, DEFAULT_INDENT) [FD]
Line_16 $$ OutputFormat of = null --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_27 $$ of = new DtdOutputFormat() --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_29 $$ of = new RngOutputFormat() --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_31 $$ of = new XsdOutputFormat() --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_33 $$ of = new RncOutputFormat() --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_36 $$ SchemaCollection sc = null --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_53 $$ sc = inFormat.load(UriOrFile.toUri(tmp.getAbsolutePath()), new String[0], model.getOutputType().toLowerCase(), eh) --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_65 $$ sc = inFormat.load(UriOrFile.toUri(view.getModel().getInputURI()), new String[0], model.getOutputType().toLowerCase(), eh) --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_74 $$ OutputDirectory od = new LocalOutputDirectory(sc.getMainUri(), new File(view.getModel().getOutputURI()), model.getOutputType().toLowerCase(), DEFAULT_OUTPUT_ENCODING, DEFAULT_LINE_LENGTH, DEFAULT_INDENT) --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_35 $$ ErrorHandlerImpl eh = new ErrorHandlerImpl(bao) --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_75 $$ of.output(sc, od, new String[0], model.getInputType().toLowerCase(), eh) [FD]
Line_4 $$ MessagesWindowDockable mconsole = (MessagesWindowDockable) console.getDockableById(MessagesWindowDockable.DOCKABLE_ID) --> Line_76 $$ mconsole.println("Schema generated sucessfully!") [FD]
Line_8 $$ SchemaGenerationModel model = view.getModel() --> Line_78 $$ if (model.isOpenInEditor()) [FD]
Line_78 $$ if (model.isOpenInEditor()) --> Line_79 $$ XPontusComponentsUtils.showWarningMessage("The document will NOT be opened in the editor sorry for that!\n You need to open it yourself.") [CD]
Line_84 $$ PrintWriter ps = new PrintWriter(sw) --> Line_85 $$ ex.printStackTrace(ps) [FD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_87 $$ sb.append("Error generating schema") [FD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_88 $$ sb.appendNewLine() [FD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_89 $$ sb.append(new String(bao.toByteArray())) [FD]
Line_5 $$ ByteArrayOutputStream bao = new ByteArrayOutputStream() --> Line_89 $$ sb.append(new String(bao.toByteArray())) [FD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_90 $$ sb.appendNewLine() [FD]
Line_91 $$ if (ex instanceof SAXParseException) --> Line_92 $$ SAXParseException spe = (SAXParseException) ex [CD]
Line_91 $$ if (ex instanceof SAXParseException) --> Line_93 $$ sb.append("Error around line " + spe.getLineNumber()) [CD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_93 $$ sb.append("Error around line " + spe.getLineNumber()) [FD]
Line_92 $$ SAXParseException spe = (SAXParseException) ex --> Line_93 $$ sb.append("Error around line " + spe.getLineNumber()) [FD]
Line_91 $$ if (ex instanceof SAXParseException) --> Line_94 $$ sb.append(", column " + spe.getColumnNumber()) [CD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_94 $$ sb.append(", column " + spe.getColumnNumber()) [FD]
Line_92 $$ SAXParseException spe = (SAXParseException) ex --> Line_94 $$ sb.append(", column " + spe.getColumnNumber()) [FD]
Line_91 $$ if (ex instanceof SAXParseException) --> Line_95 $$ sb.appendNewLine() [CD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_95 $$ sb.appendNewLine() [FD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_97 $$ sb.append(sw.toString()) [FD]
Line_83 $$ StringWriter sw = new StringWriter() --> Line_97 $$ sb.append(sw.toString()) [FD]
Line_4 $$ MessagesWindowDockable mconsole = (MessagesWindowDockable) console.getDockableById(MessagesWindowDockable.DOCKABLE_ID) --> Line_98 $$ mconsole.println(sb.toString(), OutputDockable.RED_STYLE) [FD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_98 $$ mconsole.println(sb.toString(), OutputDockable.RED_STYLE) [FD]
Line_86 $$ StrBuilder sb = new StrBuilder() --> Line_99 $$ logger.error(sb.toString()) [FD]
Line_84 $$ PrintWriter ps = new PrintWriter(sw) --> Line_101 $$ ps.flush() [FD]
Line_84 $$ PrintWriter ps = new PrintWriter(sw) --> Line_102 $$ ps.close() [FD]
Line_83 $$ StringWriter sw = new StringWriter() --> Line_103 $$ sw.flush() [FD]
Line_83 $$ StringWriter sw = new StringWriter() --> Line_104 $$ sw.close() [FD]
Line_3 $$ ConsoleOutputWindow console = DefaultXPontusWindowImpl.getInstance().getConsole() --> Line_109 $$ console.setFocus(MessagesWindowDockable.DOCKABLE_ID) [FD]
