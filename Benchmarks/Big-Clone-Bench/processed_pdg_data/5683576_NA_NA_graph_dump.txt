Line_2 $$ public String shorten(String url) --> Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() [CD]
Line_2 $$ public String shorten(String url) --> Line_4 $$ qparams.add(new BasicNameValuePair("version", "2.0.1")) [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_4 $$ qparams.add(new BasicNameValuePair("version", "2.0.1")) [FD]
Line_2 $$ public String shorten(String url) --> Line_5 $$ qparams.add(new BasicNameValuePair("longUrl", url)) [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_5 $$ qparams.add(new BasicNameValuePair("longUrl", url)) [FD]
Line_2 $$ public String shorten(String url) --> Line_6 $$ if (login != null) [CD]
Line_6 $$ if (login != null) --> Line_7 $$ qparams.add(new BasicNameValuePair("login", login)) [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_7 $$ qparams.add(new BasicNameValuePair("login", login)) [FD]
Line_6 $$ if (login != null) --> Line_8 $$ qparams.add(new BasicNameValuePair("apiKey", apiKey)) [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_8 $$ qparams.add(new BasicNameValuePair("apiKey", apiKey)) [FD]
Line_6 $$ if (login != null) --> Line_9 $$ qparams.add(new BasicNameValuePair("history", "1")) [CD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_9 $$ qparams.add(new BasicNameValuePair("history", "1")) [FD]
Line_3 $$ List<NameValuePair> qparams = new ArrayList<NameValuePair>() --> Line_14 $$ URI uri = URIUtils.createURI("http", "api.j.mp", -1, "/shorten", URLEncodedUtils.format(qparams, "UTF-8"), null) [FD]
Line_15 $$ HttpGet httpget = new HttpGet(uri) --> Line_16 $$ if (logger.isDebugEnabled()) [FD]
Line_13 $$ DefaultHttpClient httpclient = new DefaultHttpClient(params) --> Line_17 $$ HttpResponse response = httpclient.execute(httpget) [FD]
Line_15 $$ HttpGet httpget = new HttpGet(uri) --> Line_17 $$ HttpResponse response = httpclient.execute(httpget) [FD]
Line_17 $$ HttpResponse response = httpclient.execute(httpget) --> Line_18 $$ HttpEntity entity = response.getEntity() [FD]
Line_18 $$ HttpEntity entity = response.getEntity() --> Line_19 $$ if (entity != null) [FD]
Line_19 $$ if (entity != null) --> Line_20 $$ InputStream instream = entity.getContent() [CD]
Line_18 $$ HttpEntity entity = response.getEntity() --> Line_20 $$ InputStream instream = entity.getContent() [FD]
Line_19 $$ if (entity != null) --> Line_21 $$ JsonFactory f = new JsonFactory() [CD]
Line_19 $$ if (entity != null) --> Line_22 $$ JsonParser jp = f.createJsonParser(instream) [CD]
Line_21 $$ JsonFactory f = new JsonFactory() --> Line_22 $$ JsonParser jp = f.createJsonParser(instream) [FD]
Line_20 $$ InputStream instream = entity.getContent() --> Line_22 $$ JsonParser jp = f.createJsonParser(instream) [FD]
Line_19 $$ if (entity != null) --> Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() [CD]
Line_19 $$ if (entity != null) --> Line_24 $$ for (; ; ) [CD]
Line_24 $$ for (; ; ) --> Line_25 $$ JsonToken token = jp.nextToken() [CD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_25 $$ JsonToken token = jp.nextToken() [FD]
Line_24 $$ for (; ; ) --> Line_26 $$ String fieldname = jp.getCurrentName() [CD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_26 $$ String fieldname = jp.getCurrentName() [FD]
Line_24 $$ for (; ; ) --> Line_27 $$ if (logger.isDebugEnabled()) [CD]
Line_25 $$ JsonToken token = jp.nextToken() --> Line_27 $$ if (logger.isDebugEnabled()) [FD]
Line_26 $$ String fieldname = jp.getCurrentName() --> Line_27 $$ if (logger.isDebugEnabled()) [FD]
Line_24 $$ for (; ; ) --> Line_28 $$ if (token == JsonToken.START_OBJECT) [CD]
Line_25 $$ JsonToken token = jp.nextToken() --> Line_28 $$ if (token == JsonToken.START_OBJECT) [FD]
Line_24 $$ for (; ; ) --> Line_31 $$ if (token == JsonToken.END_OBJECT) [CD]
Line_25 $$ JsonToken token = jp.nextToken() --> Line_31 $$ if (token == JsonToken.END_OBJECT) [FD]
Line_24 $$ for (; ; ) --> Line_34 $$ if ("errorCode".equals(fieldname)) [CD]
Line_26 $$ String fieldname = jp.getCurrentName() --> Line_34 $$ if ("errorCode".equals(fieldname)) [FD]
Line_34 $$ if ("errorCode".equals(fieldname)) --> Line_35 $$ token = jp.nextToken() [CD]
Line_25 $$ JsonToken token = jp.nextToken() --> Line_35 $$ token = jp.nextToken() [FD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_35 $$ token = jp.nextToken() [FD]
Line_34 $$ if ("errorCode".equals(fieldname)) --> Line_36 $$ responseObj.setErrorCode(jp.getIntValue()) [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_36 $$ responseObj.setErrorCode(jp.getIntValue()) [FD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_36 $$ responseObj.setErrorCode(jp.getIntValue()) [FD]
Line_34 $$ if ("errorCode".equals(fieldname)) --> Line_37 $$ if ("errorMessage".equals(fieldname)) [CD]
Line_26 $$ String fieldname = jp.getCurrentName() --> Line_37 $$ if ("errorMessage".equals(fieldname)) [FD]
Line_37 $$ if ("errorMessage".equals(fieldname)) --> Line_38 $$ token = jp.nextToken() [CD]
Line_25 $$ JsonToken token = jp.nextToken() --> Line_38 $$ token = jp.nextToken() [FD]
Line_35 $$ token = jp.nextToken() --> Line_38 $$ token = jp.nextToken() [FD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_38 $$ token = jp.nextToken() [FD]
Line_37 $$ if ("errorMessage".equals(fieldname)) --> Line_39 $$ responseObj.setErrorMessage(jp.getText()) [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_39 $$ responseObj.setErrorMessage(jp.getText()) [FD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_39 $$ responseObj.setErrorMessage(jp.getText()) [FD]
Line_37 $$ if ("errorMessage".equals(fieldname)) --> Line_40 $$ if ("statusCode".equals(fieldname)) [CD]
Line_26 $$ String fieldname = jp.getCurrentName() --> Line_40 $$ if ("statusCode".equals(fieldname)) [FD]
Line_40 $$ if ("statusCode".equals(fieldname)) --> Line_41 $$ token = jp.nextToken() [CD]
Line_25 $$ JsonToken token = jp.nextToken() --> Line_41 $$ token = jp.nextToken() [FD]
Line_35 $$ token = jp.nextToken() --> Line_41 $$ token = jp.nextToken() [FD]
Line_38 $$ token = jp.nextToken() --> Line_41 $$ token = jp.nextToken() [FD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_41 $$ token = jp.nextToken() [FD]
Line_40 $$ if ("statusCode".equals(fieldname)) --> Line_42 $$ responseObj.setStatusCode(jp.getText()) [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_42 $$ responseObj.setStatusCode(jp.getText()) [FD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_42 $$ responseObj.setStatusCode(jp.getText()) [FD]
Line_40 $$ if ("statusCode".equals(fieldname)) --> Line_43 $$ if ("results".equals(fieldname)) [CD]
Line_26 $$ String fieldname = jp.getCurrentName() --> Line_43 $$ if ("results".equals(fieldname)) [FD]
Line_43 $$ if ("results".equals(fieldname)) --> Line_44 $$ Map<String, ShortenedUrl> results = parseResults(jp) [CD]
Line_22 $$ JsonParser jp = f.createJsonParser(instream) --> Line_44 $$ Map<String, ShortenedUrl> results = parseResults(jp) [FD]
Line_43 $$ if ("results".equals(fieldname)) --> Line_45 $$ responseObj.setResults(results) [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_45 $$ responseObj.setResults(results) [FD]
Line_44 $$ Map<String, ShortenedUrl> results = parseResults(jp) --> Line_45 $$ responseObj.setResults(results) [FD]
Line_19 $$ if (entity != null) --> Line_50 $$ Map<String, ShortenedUrl> results = responseObj.getResults() [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_50 $$ Map<String, ShortenedUrl> results = responseObj.getResults() [FD]
Line_19 $$ if (entity != null) --> Line_51 $$ if (results == null) [CD]
Line_44 $$ Map<String, ShortenedUrl> results = parseResults(jp) --> Line_51 $$ if (results == null) [FD]
Line_50 $$ Map<String, ShortenedUrl> results = responseObj.getResults() --> Line_51 $$ if (results == null) [FD]
Line_51 $$ if (results == null) --> Line_52 $$ return null [CD]
Line_19 $$ if (entity != null) --> Line_54 $$ ShortenedUrl shortened = results.get(url) [CD]
Line_44 $$ Map<String, ShortenedUrl> results = parseResults(jp) --> Line_54 $$ ShortenedUrl shortened = results.get(url) [FD]
Line_50 $$ Map<String, ShortenedUrl> results = responseObj.getResults() --> Line_54 $$ ShortenedUrl shortened = results.get(url) [FD]
Line_2 $$ public String shorten(String url) --> Line_54 $$ ShortenedUrl shortened = results.get(url) [FD]
Line_19 $$ if (entity != null) --> Line_55 $$ if (shortened == null) [CD]
Line_54 $$ ShortenedUrl shortened = results.get(url) --> Line_55 $$ if (shortened == null) [FD]
Line_55 $$ if (shortened == null) --> Line_56 $$ return null [CD]
Line_19 $$ if (entity != null) --> Line_58 $$ logger.debug("JmpShortenResponse: [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_58 $$ logger.debug("JmpShortenResponse: [FD]
Line_19 $$ if (entity != null) --> Line_59 $$ if ("OK".equals(responseObj.getStatusCode())) [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_59 $$ if ("OK".equals(responseObj.getStatusCode())) [FD]
Line_59 $$ if ("OK".equals(responseObj.getStatusCode())) --> Line_60 $$ return shortened.getShortUrl() [CD]
Line_54 $$ ShortenedUrl shortened = results.get(url) --> Line_60 $$ return shortened.getShortUrl() [FD]
Line_19 $$ if (entity != null) --> Line_62 $$ logger.warn("JmpShortenResponse: [CD]
Line_23 $$ JmpShortenResponse responseObj = new JmpShortenResponse() --> Line_62 $$ logger.warn("JmpShortenResponse: [FD]
Line_2 $$ public String shorten(String url) --> Line_69 $$ return null [CD]
Line_35 $$ token = jp.nextToken() --> Line_27 $$ if (logger.isDebugEnabled()) [FD]
Line_38 $$ token = jp.nextToken() --> Line_27 $$ if (logger.isDebugEnabled()) [FD]
Line_41 $$ token = jp.nextToken() --> Line_27 $$ if (logger.isDebugEnabled()) [FD]
Line_35 $$ token = jp.nextToken() --> Line_28 $$ if (token == JsonToken.START_OBJECT) [FD]
Line_38 $$ token = jp.nextToken() --> Line_28 $$ if (token == JsonToken.START_OBJECT) [FD]
Line_41 $$ token = jp.nextToken() --> Line_28 $$ if (token == JsonToken.START_OBJECT) [FD]
Line_35 $$ token = jp.nextToken() --> Line_31 $$ if (token == JsonToken.END_OBJECT) [FD]
Line_38 $$ token = jp.nextToken() --> Line_31 $$ if (token == JsonToken.END_OBJECT) [FD]
Line_41 $$ token = jp.nextToken() --> Line_31 $$ if (token == JsonToken.END_OBJECT) [FD]
