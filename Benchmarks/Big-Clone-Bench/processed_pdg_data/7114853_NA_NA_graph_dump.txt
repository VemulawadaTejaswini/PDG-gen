Line_2 $$ private MailBox authenticate() throws Exception --> Line_3 $$ String line = "POP3 Server Ready" + ((mChallenge == null) ? "" : (" " + mChallenge)) [CD]
Line_2 $$ private MailBox authenticate() throws Exception --> Line_4 $$ MailBox mailbox = null [CD]
Line_2 $$ private MailBox authenticate() throws Exception --> Line_5 $$ mStream.writeOk(line) [CD]
Line_3 $$ String line = "POP3 Server Ready" + ((mChallenge == null) ? "" : (" " + mChallenge)) --> Line_5 $$ mStream.writeOk(line) [FD]
Line_2 $$ private MailBox authenticate() throws Exception --> Line_6 $$ while (mailbox == null) [CD]
Line_4 $$ MailBox mailbox = null --> Line_6 $$ while (mailbox == null) [FD]
Line_6 $$ while (mailbox == null) --> Line_7 $$ line = mStream.readLine() [CD]
Line_3 $$ String line = "POP3 Server Ready" + ((mChallenge == null) ? "" : (" " + mChallenge)) --> Line_7 $$ line = mStream.readLine() [FD]
Line_6 $$ while (mailbox == null) --> Line_8 $$ if (isQuit(line)) [CD]
Line_7 $$ line = mStream.readLine() --> Line_8 $$ if (isQuit(line)) [FD]
Line_3 $$ String line = "POP3 Server Ready" + ((mChallenge == null) ? "" : (" " + mChallenge)) --> Line_8 $$ if (isQuit(line)) [FD]
Line_6 $$ while (mailbox == null) --> Line_9 $$ String body [CD]
Line_6 $$ while (mailbox == null) --> Line_10 $$ if ((body = isCommand(line, "USER")) != null) [CD]
Line_9 $$ String body --> Line_10 $$ if ((body = isCommand(line, "USER")) != null) [FD]
Line_7 $$ line = mStream.readLine() --> Line_10 $$ if ((body = isCommand(line, "USER")) != null) [FD]
Line_3 $$ String line = "POP3 Server Ready" + ((mChallenge == null) ? "" : (" " + mChallenge)) --> Line_10 $$ if ((body = isCommand(line, "USER")) != null) [FD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_11 $$ String user = body [CD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_12 $$ MailBox mb = mRepository.getMailBox(user) [CD]
Line_11 $$ String user = body --> Line_12 $$ MailBox mb = mRepository.getMailBox(user) [FD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_13 $$ mStream.writeErr("No mailbox for: " + line) [CD]
Line_12 $$ MailBox mb = mRepository.getMailBox(user) --> Line_13 $$ mStream.writeErr("No mailbox for: " + line) [FD]
Line_13 $$ mStream.writeErr("No mailbox for: " + line) --> Line_14 $$ mStream.writeOk() [CD]
Line_13 $$ mStream.writeErr("No mailbox for: " + line) --> Line_15 $$ String pswd, line2 = mStream.readLine() [CD]
Line_13 $$ mStream.writeErr("No mailbox for: " + line) --> Line_16 $$ if (isQuit(line2)) [CD]
Line_15 $$ String pswd, line2 = mStream.readLine() --> Line_16 $$ if (isQuit(line2)) [FD]
Line_13 $$ mStream.writeErr("No mailbox for: " + line) --> Line_17 $$ if ((pswd = isCommand(line2, "PASS")) == null) [CD]
Line_15 $$ String pswd, line2 = mStream.readLine() --> Line_17 $$ if ((pswd = isCommand(line2, "PASS")) == null) [FD]
Line_17 $$ if ((pswd = isCommand(line2, "PASS")) == null) --> Line_18 $$ String realPswd = mb.getPassword() [CD]
Line_12 $$ MailBox mb = mRepository.getMailBox(user) --> Line_18 $$ String realPswd = mb.getPassword() [FD]
Line_17 $$ if ((pswd = isCommand(line2, "PASS")) == null) --> Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) [CD]
Line_17 $$ if ((pswd = isCommand(line2, "PASS")) == null) --> Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) [FD]
Line_15 $$ String pswd, line2 = mStream.readLine() --> Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) [FD]
Line_18 $$ String realPswd = mb.getPassword() --> Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) [FD]
Line_12 $$ MailBox mb = mRepository.getMailBox(user) --> Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) [FD]
Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) --> Line_20 $$ mailbox = mb [CD]
Line_4 $$ MailBox mailbox = null --> Line_20 $$ mailbox = mb [FD]
Line_12 $$ MailBox mb = mRepository.getMailBox(user) --> Line_20 $$ mailbox = mb [FD]
Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) --> Line_21 $$ mStream.writeOk() [CD]
Line_19 $$ if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) --> Line_22 $$ mStream.writeErr("Bad password for " + user) [CD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_25 $$ if ((body = isCommand(line, "APOP")) != null) [CD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_25 $$ if ((body = isCommand(line, "APOP")) != null) [FD]
Line_9 $$ String body --> Line_25 $$ if ((body = isCommand(line, "APOP")) != null) [FD]
Line_7 $$ line = mStream.readLine() --> Line_25 $$ if ((body = isCommand(line, "APOP")) != null) [FD]
Line_3 $$ String line = "POP3 Server Ready" + ((mChallenge == null) ? "" : (" " + mChallenge)) --> Line_25 $$ if ((body = isCommand(line, "APOP")) != null) [FD]
Line_25 $$ if ((body = isCommand(line, "APOP")) != null) --> Line_26 $$ mStream.writeErr("APOP Not Supported") [CD]
Line_26 $$ mStream.writeErr("APOP Not Supported") --> Line_27 $$ int space = body.indexOf(' ') [CD]
Line_9 $$ String body --> Line_27 $$ int space = body.indexOf(' ') [FD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_27 $$ int space = body.indexOf(' ') [FD]
Line_25 $$ if ((body = isCommand(line, "APOP")) != null) --> Line_27 $$ int space = body.indexOf(' ') [FD]
Line_26 $$ mStream.writeErr("APOP Not Supported") --> Line_28 $$ mStream.writeErr("Bad APOP command [CD]
Line_27 $$ int space = body.indexOf(' ') --> Line_28 $$ mStream.writeErr("Bad APOP command [FD]
Line_28 $$ mStream.writeErr("Bad APOP command --> Line_29 $$ String user = body.substring(0, space) [CD]
Line_9 $$ String body --> Line_29 $$ String user = body.substring(0, space) [FD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_29 $$ String user = body.substring(0, space) [FD]
Line_25 $$ if ((body = isCommand(line, "APOP")) != null) --> Line_29 $$ String user = body.substring(0, space) [FD]
Line_27 $$ int space = body.indexOf(' ') --> Line_29 $$ String user = body.substring(0, space) [FD]
Line_28 $$ mStream.writeErr("Bad APOP command --> Line_30 $$ String hash = body.substring(space + 1) [CD]
Line_9 $$ String body --> Line_30 $$ String hash = body.substring(space + 1) [FD]
Line_10 $$ if ((body = isCommand(line, "USER")) != null) --> Line_30 $$ String hash = body.substring(space + 1) [FD]
Line_25 $$ if ((body = isCommand(line, "APOP")) != null) --> Line_30 $$ String hash = body.substring(space + 1) [FD]
Line_28 $$ mStream.writeErr("Bad APOP command --> Line_31 $$ MailBox mb = mRepository.getMailBox(user) [CD]
Line_11 $$ String user = body --> Line_31 $$ MailBox mb = mRepository.getMailBox(user) [FD]
Line_28 $$ mStream.writeErr("Bad APOP command --> Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") [CD]
Line_12 $$ MailBox mb = mRepository.getMailBox(user) --> Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") [FD]
Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") --> Line_33 $$ String secret = mChallenge + mb.getPassword() [CD]
Line_12 $$ MailBox mb = mRepository.getMailBox(user) --> Line_33 $$ String secret = mChallenge + mb.getPassword() [FD]
Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") --> Line_34 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") [CD]
Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") --> Line_35 $$ md5.update(secret.getBytes("UTF-8")) [CD]
Line_34 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_35 $$ md5.update(secret.getBytes("UTF-8")) [FD]
Line_33 $$ String secret = mChallenge + mb.getPassword() --> Line_35 $$ md5.update(secret.getBytes("UTF-8")) [FD]
Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") --> Line_36 $$ byte[] digest = md5.digest() [CD]
Line_34 $$ MessageDigest md5 = MessageDigest.getInstance("MD5") --> Line_36 $$ byte[] digest = md5.digest() [FD]
Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") --> Line_37 $$ String digestStr = new String(Hex.encodeHex(digest)) [CD]
Line_36 $$ byte[] digest = md5.digest() --> Line_37 $$ String digestStr = new String(Hex.encodeHex(digest)) [FD]
Line_32 $$ mStream.writeErr("User(" + user + ") cannot login using APOP") --> Line_38 $$ if (hash.equalsIgnoreCase(digestStr)) [CD]
Line_30 $$ String hash = body.substring(space + 1) --> Line_38 $$ if (hash.equalsIgnoreCase(digestStr)) [FD]
Line_37 $$ String digestStr = new String(Hex.encodeHex(digest)) --> Line_38 $$ if (hash.equalsIgnoreCase(digestStr)) [FD]
Line_38 $$ if (hash.equalsIgnoreCase(digestStr)) --> Line_39 $$ mailbox = mb [CD]
Line_20 $$ mailbox = mb --> Line_39 $$ mailbox = mb [FD]
Line_4 $$ MailBox mailbox = null --> Line_39 $$ mailbox = mb [FD]
Line_12 $$ MailBox mb = mRepository.getMailBox(user) --> Line_39 $$ mailbox = mb [FD]
Line_38 $$ if (hash.equalsIgnoreCase(digestStr)) --> Line_40 $$ mStream.writeOk() [CD]
Line_38 $$ if (hash.equalsIgnoreCase(digestStr)) --> Line_41 $$ mStream.writeErr("Bad password for " + user) [CD]
Line_25 $$ if ((body = isCommand(line, "APOP")) != null) --> Line_45 $$ mStream.writeErr("Authentication required (got '" + line + "')") [CD]
Line_2 $$ private MailBox authenticate() throws Exception --> Line_47 $$ return mailbox [CD]
Line_20 $$ mailbox = mb --> Line_6 $$ while (mailbox == null) [FD]
Line_39 $$ mailbox = mb --> Line_6 $$ while (mailbox == null) [FD]
