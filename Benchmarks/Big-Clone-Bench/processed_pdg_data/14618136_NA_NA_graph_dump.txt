Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_3 $$ LOG.debug("Merging content of group : " + group.getName()) [CD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_3 $$ LOG.debug("Merging content of group : " + group.getName()) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) [CD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) [FD]
Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) --> Line_5 $$ Group subGroup = (Group) iterator.next() [CD]
Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) --> Line_5 $$ Group subGroup = (Group) iterator.next() [FD]
Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) --> Line_6 $$ String subLocation = subGroup.getBestLocation(location) [CD]
Line_5 $$ Group subGroup = (Group) iterator.next() --> Line_6 $$ String subLocation = subGroup.getBestLocation(location) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_6 $$ String subLocation = subGroup.getBestLocation(location) [FD]
Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) --> Line_7 $$ ResourcesProcessor subGroupProcessor = null [CD]
Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) --> Line_8 $$ subGroupProcessor = subGroup.getJSProcessor() [CD]
Line_5 $$ Group subGroup = (Group) iterator.next() --> Line_8 $$ subGroupProcessor = subGroup.getJSProcessor() [FD]
Line_7 $$ ResourcesProcessor subGroupProcessor = null --> Line_8 $$ subGroupProcessor = subGroup.getJSProcessor() [FD]
Line_4 $$ for (Iterator iterator = group.getSubgroups().iterator(); iterator.hasNext(); ) --> Line_9 $$ subGroupProcessor.process(subGroup, subGroup.getJsNames(), excludeResources, servletContext, out, subLocation) [CD]
Line_7 $$ ResourcesProcessor subGroupProcessor = null --> Line_9 $$ subGroupProcessor.process(subGroup, subGroup.getJsNames(), excludeResources, servletContext, out, subLocation) [FD]
Line_8 $$ subGroupProcessor = subGroup.getJSProcessor() --> Line_9 $$ subGroupProcessor.process(subGroup, subGroup.getJsNames(), excludeResources, servletContext, out, subLocation) [FD]
Line_5 $$ Group subGroup = (Group) iterator.next() --> Line_9 $$ subGroupProcessor.process(subGroup, subGroup.getJsNames(), excludeResources, servletContext, out, subLocation) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_9 $$ subGroupProcessor.process(subGroup, subGroup.getJsNames(), excludeResources, servletContext, out, subLocation) [FD]
Line_6 $$ String subLocation = subGroup.getBestLocation(location) --> Line_9 $$ subGroupProcessor.process(subGroup, subGroup.getJsNames(), excludeResources, servletContext, out, subLocation) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_11 $$ for (Iterator it = resourcesName.iterator(); it.hasNext(); ) [CD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_11 $$ for (Iterator it = resourcesName.iterator(); it.hasNext(); ) [FD]
Line_11 $$ for (Iterator it = resourcesName.iterator(); it.hasNext(); ) --> Line_12 $$ URL url = null [CD]
Line_11 $$ for (Iterator it = resourcesName.iterator(); it.hasNext(); ) --> Line_13 $$ String path = (String) it.next() [CD]
Line_11 $$ for (Iterator it = resourcesName.iterator(); it.hasNext(); ) --> Line_13 $$ String path = (String) it.next() [FD]
Line_11 $$ for (Iterator it = resourcesName.iterator(); it.hasNext(); ) --> Line_14 $$ if (!excludeResources.contains(path)) [CD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_14 $$ if (!excludeResources.contains(path)) [FD]
Line_13 $$ String path = (String) it.next() --> Line_14 $$ if (!excludeResources.contains(path)) [FD]
Line_14 $$ if (!excludeResources.contains(path)) --> Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) [CD]
Line_12 $$ URL url = null --> Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) [FD]
Line_13 $$ String path = (String) it.next() --> Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) [FD]
Line_14 $$ if (!excludeResources.contains(path)) --> Line_16 $$ if (url == null) [CD]
Line_12 $$ URL url = null --> Line_16 $$ if (url == null) [FD]
Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) --> Line_16 $$ if (url == null) [FD]
Line_16 $$ if (url == null) --> Line_17 $$ String webPath = URLUtils.concatUrlWithSlaches(group.getBestLocation(location), path) [CD]
Line_13 $$ String path = (String) it.next() --> Line_17 $$ String webPath = URLUtils.concatUrlWithSlaches(group.getBestLocation(location), path) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_17 $$ String webPath = URLUtils.concatUrlWithSlaches(group.getBestLocation(location), path) [FD]
Line_16 $$ if (url == null) --> Line_18 $$ url = URLUtils.getWebUrlResource(webPath) [CD]
Line_12 $$ URL url = null --> Line_18 $$ url = URLUtils.getWebUrlResource(webPath) [FD]
Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) --> Line_18 $$ url = URLUtils.getWebUrlResource(webPath) [FD]
Line_17 $$ String webPath = URLUtils.concatUrlWithSlaches(group.getBestLocation(location), path) --> Line_18 $$ url = URLUtils.getWebUrlResource(webPath) [FD]
Line_14 $$ if (!excludeResources.contains(path)) --> Line_20 $$ if (url == null) [CD]
Line_12 $$ URL url = null --> Line_20 $$ if (url == null) [FD]
Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) --> Line_20 $$ if (url == null) [FD]
Line_18 $$ url = URLUtils.getWebUrlResource(webPath) --> Line_20 $$ if (url == null) [FD]
Line_14 $$ if (!excludeResources.contains(path)) --> Line_23 $$ InputStream in = null [CD]
Line_23 $$ InputStream in = null --> Line_25 $$ in = url.openStream() [FD]
Line_12 $$ URL url = null --> Line_25 $$ in = url.openStream() [FD]
Line_15 $$ url = URLUtils.getLocalURL(path, servletContext) --> Line_25 $$ in = url.openStream() [FD]
Line_18 $$ url = URLUtils.getWebUrlResource(webPath) --> Line_25 $$ in = url.openStream() [FD]
Line_23 $$ InputStream in = null --> Line_26 $$ IOUtils.copy(in, out, URLUtils.DEFAULT_ENCODING) [FD]
Line_25 $$ in = url.openStream() --> Line_26 $$ IOUtils.copy(in, out, URLUtils.DEFAULT_ENCODING) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_26 $$ IOUtils.copy(in, out, URLUtils.DEFAULT_ENCODING) [FD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_27 $$ out.write("\n\n") [FD]
Line_23 $$ InputStream in = null --> Line_31 $$ if (in != null) [FD]
Line_25 $$ in = url.openStream() --> Line_31 $$ if (in != null) [FD]
Line_14 $$ if (!excludeResources.contains(path)) --> Line_33 $$ excludeResources.add(path) [CD]
Line_2 $$ public void process(Group group, List resourcesName, List excludeResources, ServletContext servletContext, Writer out, String location) throws IOException --> Line_33 $$ excludeResources.add(path) [FD]
Line_13 $$ String path = (String) it.next() --> Line_33 $$ excludeResources.add(path) [FD]
Line_18 $$ url = URLUtils.getWebUrlResource(webPath) --> Line_16 $$ if (url == null) [FD]
