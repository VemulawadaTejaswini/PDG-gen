Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String CFDataFolderName) --> Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_5 $$ File inputFile = new File(completePath + fSep + "SmartGRAPE" + fSep + "CompleteQualifyingDataInByteFormat.txt") [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_7 $$ int filesize = (int) inC.size() [CD]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_7 $$ int filesize = (int) inC.size() [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1) [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [CD]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_7 $$ int filesize = (int) inC.size() --> Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_10 $$ while (qualmappedfile.hasRemaining()) [CD]
Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_10 $$ while (qualmappedfile.hasRemaining()) [FD]
Line_10 $$ while (qualmappedfile.hasRemaining()) --> Line_11 $$ short movie = qualmappedfile.getShort() [CD]
Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_11 $$ short movie = qualmappedfile.getShort() [FD]
Line_10 $$ while (qualmappedfile.hasRemaining()) --> Line_12 $$ int customer = qualmappedfile.getInt() [CD]
Line_9 $$ ByteBuffer qualmappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_12 $$ int customer = qualmappedfile.getInt() [FD]
Line_10 $$ while (qualmappedfile.hasRemaining()) --> Line_13 $$ if (qualMap.containsKey(movie)) [CD]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1) --> Line_13 $$ if (qualMap.containsKey(movie)) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_13 $$ if (qualMap.containsKey(movie)) [FD]
Line_13 $$ if (qualMap.containsKey(movie)) --> Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie) [CD]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1) --> Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie) [FD]
Line_13 $$ if (qualMap.containsKey(movie)) --> Line_15 $$ arr.add(customer) [CD]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie) --> Line_15 $$ arr.add(customer) [FD]
Line_12 $$ int customer = qualmappedfile.getInt() --> Line_15 $$ arr.add(customer) [FD]
Line_13 $$ if (qualMap.containsKey(movie)) --> Line_16 $$ qualMap.put(movie, arr) [CD]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1) --> Line_16 $$ qualMap.put(movie, arr) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_16 $$ qualMap.put(movie, arr) [FD]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie) --> Line_16 $$ qualMap.put(movie, arr) [FD]
Line_13 $$ if (qualMap.containsKey(movie)) --> Line_19 $$ arr.add(customer) [CD]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie) --> Line_19 $$ arr.add(customer) [FD]
Line_12 $$ int customer = qualmappedfile.getInt() --> Line_19 $$ arr.add(customer) [FD]
Line_13 $$ if (qualMap.containsKey(movie)) --> Line_20 $$ qualMap.put(movie, arr) [CD]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1) --> Line_20 $$ qualMap.put(movie, arr) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_20 $$ qualMap.put(movie, arr) [FD]
Line_14 $$ TIntArrayList arr = (TIntArrayList) qualMap.get(movie) --> Line_20 $$ qualMap.put(movie, arr) [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_23 $$ System.out.println("Populated qualifying hashmap") [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_24 $$ File outFile = new File(completePath + fSep + "SmartGRAPE" + fSep + predictionOutputFileName) [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel() [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_26 $$ ByteBuffer buf [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_27 $$ TShortObjectHashMap movieDiffStats [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_28 $$ double finalPrediction [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_29 $$ short[] movies = qualMap.keys() [CD]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1) --> Line_29 $$ short[] movies = qualMap.keys() [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_30 $$ Arrays.sort(movies) [CD]
Line_29 $$ short[] movies = qualMap.keys() --> Line_30 $$ Arrays.sort(movies) [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_31 $$ for (int i = 0; i < movies.length; i++) [CD]
Line_31 $$ for (int i = 0; i < movies.length; i++) --> Line_32 $$ short movieToProcess = movies[i] [CD]
Line_31 $$ for (int i = 0; i < movies.length; i++) --> Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [CD]
Line_27 $$ TShortObjectHashMap movieDiffStats --> Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String CFDataFolderName) --> Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_31 $$ for (int i = 0; i < movies.length; i++) --> Line_34 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess) [CD]
Line_8 $$ TShortObjectHashMap qualMap = new TShortObjectHashMap(17770, 1) --> Line_34 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_34 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess) [FD]
Line_31 $$ for (int i = 0; i < movies.length; i++) --> Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) [CD]
Line_34 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess) --> Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) [CD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) [FD]
Line_34 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess) --> Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [CD]
Line_28 $$ double finalPrediction --> Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) --> Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_27 $$ TShortObjectHashMap movieDiffStats --> Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_38 $$ if (finalPrediction == finalPrediction) [CD]
Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_38 $$ if (finalPrediction == finalPrediction) [FD]
Line_28 $$ double finalPrediction --> Line_38 $$ if (finalPrediction == finalPrediction) [FD]
Line_38 $$ if (finalPrediction == finalPrediction) --> Line_39 $$ if (finalPrediction < 1.0) [CD]
Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_39 $$ if (finalPrediction < 1.0) [FD]
Line_28 $$ double finalPrediction --> Line_39 $$ if (finalPrediction < 1.0) [FD]
Line_38 $$ if (finalPrediction == finalPrediction) --> Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) [CD]
Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_39 $$ if (finalPrediction < 1.0) --> Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_28 $$ double finalPrediction --> Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_41 $$ buf = ByteBuffer.allocate(10) [CD]
Line_26 $$ ByteBuffer buf --> Line_41 $$ buf = ByteBuffer.allocate(10) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_42 $$ buf.putShort(movieToProcess) [CD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_42 $$ buf.putShort(movieToProcess) [FD]
Line_26 $$ ByteBuffer buf --> Line_42 $$ buf.putShort(movieToProcess) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_42 $$ buf.putShort(movieToProcess) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_43 $$ buf.putInt(customerToProcess) [CD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_43 $$ buf.putInt(customerToProcess) [FD]
Line_26 $$ ByteBuffer buf --> Line_43 $$ buf.putInt(customerToProcess) [FD]
Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_43 $$ buf.putInt(customerToProcess) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_44 $$ buf.putFloat(new Double(finalPrediction).floatValue()) [CD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_44 $$ buf.putFloat(new Double(finalPrediction).floatValue()) [FD]
Line_26 $$ ByteBuffer buf --> Line_44 $$ buf.putFloat(new Double(finalPrediction).floatValue()) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_45 $$ buf.flip() [CD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_45 $$ buf.flip() [FD]
Line_26 $$ ByteBuffer buf --> Line_45 $$ buf.flip() [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_46 $$ outC.write(buf) [CD]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel() --> Line_46 $$ outC.write(buf) [FD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_46 $$ outC.write(buf) [FD]
Line_26 $$ ByteBuffer buf --> Line_46 $$ outC.write(buf) [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_49 $$ outC.close() [CD]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel() --> Line_49 $$ outC.close() [FD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_50 $$ return true [CD]
Line_4 $$ if (Type.equalsIgnoreCase("Qualifying")) --> Line_51 $$ if (Type.equalsIgnoreCase("Probe")) [CD]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String CFDataFolderName) --> Line_51 $$ if (Type.equalsIgnoreCase("Probe")) [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_53 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() [CD]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_54 $$ int filesize = (int) inC.size() [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_55 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1) [CD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_56 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [CD]
Line_6 $$ FileChannel inC = new FileInputStream(inputFile).getChannel() --> Line_56 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_7 $$ int filesize = (int) inC.size() --> Line_56 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_57 $$ while (probemappedfile.hasRemaining()) [CD]
Line_56 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_57 $$ while (probemappedfile.hasRemaining()) [FD]
Line_57 $$ while (probemappedfile.hasRemaining()) --> Line_58 $$ short movie = probemappedfile.getShort() [CD]
Line_56 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_58 $$ short movie = probemappedfile.getShort() [FD]
Line_57 $$ while (probemappedfile.hasRemaining()) --> Line_59 $$ int customer = probemappedfile.getInt() [CD]
Line_56 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_59 $$ int customer = probemappedfile.getInt() [FD]
Line_57 $$ while (probemappedfile.hasRemaining()) --> Line_60 $$ byte rating = probemappedfile.get() [CD]
Line_56 $$ ByteBuffer probemappedfile = inC.map(FileChannel.MapMode.READ_ONLY, 0, filesize) --> Line_60 $$ byte rating = probemappedfile.get() [FD]
Line_57 $$ while (probemappedfile.hasRemaining()) --> Line_61 $$ if (probeMap.containsKey(movie)) [CD]
Line_55 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1) --> Line_61 $$ if (probeMap.containsKey(movie)) [FD]
Line_58 $$ short movie = probemappedfile.getShort() --> Line_61 $$ if (probeMap.containsKey(movie)) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_61 $$ if (probeMap.containsKey(movie)) [FD]
Line_61 $$ if (probeMap.containsKey(movie)) --> Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) [CD]
Line_55 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1) --> Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) [FD]
Line_58 $$ short movie = probemappedfile.getShort() --> Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) [FD]
Line_61 $$ if (probeMap.containsKey(movie)) --> Line_63 $$ actualRatings.put(customer, rating) [CD]
Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) --> Line_63 $$ actualRatings.put(customer, rating) [FD]
Line_59 $$ int customer = probemappedfile.getInt() --> Line_63 $$ actualRatings.put(customer, rating) [FD]
Line_12 $$ int customer = qualmappedfile.getInt() --> Line_63 $$ actualRatings.put(customer, rating) [FD]
Line_60 $$ byte rating = probemappedfile.get() --> Line_63 $$ actualRatings.put(customer, rating) [FD]
Line_61 $$ if (probeMap.containsKey(movie)) --> Line_64 $$ probeMap.put(movie, actualRatings) [CD]
Line_55 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1) --> Line_64 $$ probeMap.put(movie, actualRatings) [FD]
Line_58 $$ short movie = probemappedfile.getShort() --> Line_64 $$ probeMap.put(movie, actualRatings) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_64 $$ probeMap.put(movie, actualRatings) [FD]
Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) --> Line_64 $$ probeMap.put(movie, actualRatings) [FD]
Line_61 $$ if (probeMap.containsKey(movie)) --> Line_67 $$ actualRatings.put(customer, rating) [CD]
Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) --> Line_67 $$ actualRatings.put(customer, rating) [FD]
Line_59 $$ int customer = probemappedfile.getInt() --> Line_67 $$ actualRatings.put(customer, rating) [FD]
Line_12 $$ int customer = qualmappedfile.getInt() --> Line_67 $$ actualRatings.put(customer, rating) [FD]
Line_60 $$ byte rating = probemappedfile.get() --> Line_67 $$ actualRatings.put(customer, rating) [FD]
Line_61 $$ if (probeMap.containsKey(movie)) --> Line_68 $$ probeMap.put(movie, actualRatings) [CD]
Line_55 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1) --> Line_68 $$ probeMap.put(movie, actualRatings) [FD]
Line_58 $$ short movie = probemappedfile.getShort() --> Line_68 $$ probeMap.put(movie, actualRatings) [FD]
Line_11 $$ short movie = qualmappedfile.getShort() --> Line_68 $$ probeMap.put(movie, actualRatings) [FD]
Line_62 $$ TIntByteHashMap actualRatings = (TIntByteHashMap) probeMap.get(movie) --> Line_68 $$ probeMap.put(movie, actualRatings) [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_71 $$ System.out.println("Populated probe hashmap") [CD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_73 $$ FileChannel outC = new FileOutputStream(outFile).getChannel() [CD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_77 $$ short[] movies = probeMap.keys() [CD]
Line_55 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1) --> Line_77 $$ short[] movies = probeMap.keys() [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_78 $$ Arrays.sort(movies) [CD]
Line_29 $$ short[] movies = qualMap.keys() --> Line_78 $$ Arrays.sort(movies) [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_79 $$ for (int i = 0; i < movies.length; i++) [CD]
Line_31 $$ for (int i = 0; i < movies.length; i++) --> Line_79 $$ for (int i = 0; i < movies.length; i++) [FD]
Line_79 $$ for (int i = 0; i < movies.length; i++) --> Line_80 $$ short movieToProcess = movies[i] [CD]
Line_79 $$ for (int i = 0; i < movies.length; i++) --> Line_81 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [CD]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) --> Line_81 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_27 $$ TShortObjectHashMap movieDiffStats --> Line_81 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_2 $$ public static boolean predictDataSet(String completePath, String Type, String predictionOutputFileName, String CFDataFolderName) --> Line_81 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_80 $$ short movieToProcess = movies[i] --> Line_81 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_81 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) [FD]
Line_79 $$ for (int i = 0; i < movies.length; i++) --> Line_82 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess) [CD]
Line_55 $$ TShortObjectHashMap probeMap = new TShortObjectHashMap(17770, 1) --> Line_82 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess) [FD]
Line_80 $$ short movieToProcess = movies[i] --> Line_82 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_82 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess) [FD]
Line_79 $$ for (int i = 0; i < movies.length; i++) --> Line_83 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys()) [CD]
Line_82 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess) --> Line_83 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys()) [FD]
Line_79 $$ for (int i = 0; i < movies.length; i++) --> Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) [CD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) [FD]
Line_83 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys()) --> Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) [FD]
Line_34 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess) --> Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) [CD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) [FD]
Line_83 $$ TIntArrayList customersToProcess = new TIntArrayList(custRatingsToProcess.keys()) --> Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) [FD]
Line_34 $$ TIntArrayList customersToProcess = (TIntArrayList) qualMap.get(movieToProcess) --> Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) [FD]
Line_35 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_86 $$ byte rating = custRatingsToProcess.get(customerToProcess) [CD]
Line_82 $$ TIntByteHashMap custRatingsToProcess = (TIntByteHashMap) probeMap.get(movieToProcess) --> Line_86 $$ byte rating = custRatingsToProcess.get(customerToProcess) [FD]
Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_86 $$ byte rating = custRatingsToProcess.get(customerToProcess) [FD]
Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_86 $$ byte rating = custRatingsToProcess.get(customerToProcess) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [CD]
Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_39 $$ if (finalPrediction < 1.0) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_28 $$ double finalPrediction --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_80 $$ short movieToProcess = movies[i] --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_81 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_33 $$ movieDiffStats = loadMovieDiffStats(completePath, movieToProcess, CFDataFolderName) --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_27 $$ TShortObjectHashMap movieDiffStats --> Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_88 $$ if (finalPrediction == finalPrediction) [CD]
Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_88 $$ if (finalPrediction == finalPrediction) [FD]
Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_88 $$ if (finalPrediction == finalPrediction) [FD]
Line_39 $$ if (finalPrediction < 1.0) --> Line_88 $$ if (finalPrediction == finalPrediction) [FD]
Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_88 $$ if (finalPrediction == finalPrediction) [FD]
Line_28 $$ double finalPrediction --> Line_88 $$ if (finalPrediction == finalPrediction) [FD]
Line_88 $$ if (finalPrediction == finalPrediction) --> Line_89 $$ if (finalPrediction < 1.0) [CD]
Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_89 $$ if (finalPrediction < 1.0) [FD]
Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_89 $$ if (finalPrediction < 1.0) [FD]
Line_39 $$ if (finalPrediction < 1.0) --> Line_89 $$ if (finalPrediction < 1.0) [FD]
Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_89 $$ if (finalPrediction < 1.0) [FD]
Line_28 $$ double finalPrediction --> Line_89 $$ if (finalPrediction < 1.0) [FD]
Line_88 $$ if (finalPrediction == finalPrediction) --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [CD]
Line_87 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_89 $$ if (finalPrediction < 1.0) --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_37 $$ finalPrediction = predictPearsonWeightedSlopeOneRating(knn, movieToProcess, customerToProcess, movieDiffStats) --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_39 $$ if (finalPrediction < 1.0) --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_28 $$ double finalPrediction --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_80 $$ short movieToProcess = movies[i] --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) [FD]
Line_88 $$ if (finalPrediction == finalPrediction) --> Line_92 $$ System.out.println("NaN Prediction") [CD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_94 $$ buf = ByteBuffer.allocate(11) [CD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_94 $$ buf = ByteBuffer.allocate(11) [FD]
Line_26 $$ ByteBuffer buf --> Line_94 $$ buf = ByteBuffer.allocate(11) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_95 $$ buf.putShort(movieToProcess) [CD]
Line_94 $$ buf = ByteBuffer.allocate(11) --> Line_95 $$ buf.putShort(movieToProcess) [FD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_95 $$ buf.putShort(movieToProcess) [FD]
Line_26 $$ ByteBuffer buf --> Line_95 $$ buf.putShort(movieToProcess) [FD]
Line_80 $$ short movieToProcess = movies[i] --> Line_95 $$ buf.putShort(movieToProcess) [FD]
Line_32 $$ short movieToProcess = movies[i] --> Line_95 $$ buf.putShort(movieToProcess) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_96 $$ buf.putInt(customerToProcess) [CD]
Line_94 $$ buf = ByteBuffer.allocate(11) --> Line_96 $$ buf.putInt(customerToProcess) [FD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_96 $$ buf.putInt(customerToProcess) [FD]
Line_26 $$ ByteBuffer buf --> Line_96 $$ buf.putInt(customerToProcess) [FD]
Line_85 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_96 $$ buf.putInt(customerToProcess) [FD]
Line_36 $$ int customerToProcess = customersToProcess.getQuick(j) --> Line_96 $$ buf.putInt(customerToProcess) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_97 $$ buf.put(rating) [CD]
Line_94 $$ buf = ByteBuffer.allocate(11) --> Line_97 $$ buf.put(rating) [FD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_97 $$ buf.put(rating) [FD]
Line_26 $$ ByteBuffer buf --> Line_97 $$ buf.put(rating) [FD]
Line_86 $$ byte rating = custRatingsToProcess.get(customerToProcess) --> Line_97 $$ buf.put(rating) [FD]
Line_60 $$ byte rating = probemappedfile.get() --> Line_97 $$ buf.put(rating) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_98 $$ buf.putFloat(new Double(finalPrediction).floatValue()) [CD]
Line_94 $$ buf = ByteBuffer.allocate(11) --> Line_98 $$ buf.putFloat(new Double(finalPrediction).floatValue()) [FD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_98 $$ buf.putFloat(new Double(finalPrediction).floatValue()) [FD]
Line_26 $$ ByteBuffer buf --> Line_98 $$ buf.putFloat(new Double(finalPrediction).floatValue()) [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_99 $$ buf.flip() [CD]
Line_94 $$ buf = ByteBuffer.allocate(11) --> Line_99 $$ buf.flip() [FD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_99 $$ buf.flip() [FD]
Line_26 $$ ByteBuffer buf --> Line_99 $$ buf.flip() [FD]
Line_84 $$ for (int j = 0; j < customersToProcess.size(); j++) --> Line_100 $$ outC.write(buf) [CD]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel() --> Line_100 $$ outC.write(buf) [FD]
Line_94 $$ buf = ByteBuffer.allocate(11) --> Line_100 $$ outC.write(buf) [FD]
Line_41 $$ buf = ByteBuffer.allocate(10) --> Line_100 $$ outC.write(buf) [FD]
Line_26 $$ ByteBuffer buf --> Line_100 $$ outC.write(buf) [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_103 $$ outC.close() [CD]
Line_25 $$ FileChannel outC = new FileOutputStream(outFile).getChannel() --> Line_103 $$ outC.close() [FD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_104 $$ return true [CD]
Line_51 $$ if (Type.equalsIgnoreCase("Probe")) --> Line_105 $$ return false [CD]
Line_39 $$ if (finalPrediction < 1.0) --> Line_38 $$ if (finalPrediction == finalPrediction) [FD]
Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_38 $$ if (finalPrediction == finalPrediction) [FD]
Line_40 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_39 $$ if (finalPrediction < 1.0) [FD]
Line_89 $$ if (finalPrediction < 1.0) --> Line_88 $$ if (finalPrediction == finalPrediction) [FD]
Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_88 $$ if (finalPrediction == finalPrediction) [FD]
Line_91 $$ finalPrediction = movieAverages.get(movieToProcess) --> Line_89 $$ if (finalPrediction < 1.0) [FD]
