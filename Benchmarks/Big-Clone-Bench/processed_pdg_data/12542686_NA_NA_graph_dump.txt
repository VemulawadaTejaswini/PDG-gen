Line_2 $$ public static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException --> Line_4 $$ SCNodeInterface node = (SCNodeInterface) Naming.lookup(scNodeRmiName) [FD]
Line_4 $$ SCNodeInterface node = (SCNodeInterface) Naming.lookup(scNodeRmiName) --> Line_5 $$ String session = node.login(userName, password) [FD]
Line_2 $$ public static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException --> Line_5 $$ String session = node.login(userName, password) [FD]
Line_6 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_7 $$ IOUtils.copy(new FileInputStream(jarName), baos) [FD]
Line_4 $$ SCNodeInterface node = (SCNodeInterface) Naming.lookup(scNodeRmiName) --> Line_8 $$ ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface) [FD]
Line_5 $$ String session = node.login(userName, password) --> Line_8 $$ ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface) [FD]
Line_2 $$ public static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException --> Line_8 $$ ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface) [FD]
Line_6 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_8 $$ ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface) [FD]
Line_8 $$ ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface) --> Line_9 $$ if (adapter != null) [FD]
Line_9 $$ if (adapter != null) --> Line_10 $$ return new ExternalDomain(node, adapter, adapter.getUri(), log).getProxy(Thread.currentThread().getContextClassLoader()) [CD]
Line_8 $$ ServiceAdapterIfc adapter = node.deploy(session, name, baos.toByteArray(), jarName, serviceClass, serviceInterface) --> Line_10 $$ return new ExternalDomain(node, adapter, adapter.getUri(), log).getProxy(Thread.currentThread().getContextClassLoader()) [FD]
Line_2 $$ public static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException --> Line_13 $$ log.warn("Could not send deploy command: " + e.getMessage(), e) [FD]
Line_2 $$ public static Object deployNewService(String scNodeRmiName, String userName, String password, String name, String jarName, String serviceClass, String serviceInterface, Logger log) throws RemoteException, MalformedURLException, StartServiceException, NotBoundException, IllegalArgumentException, SecurityException, InstantiationException, IllegalAccessException, InvocationTargetException, SessionException --> Line_15 $$ return null [CD]
