Line_2 $$ public void create(Session session) --> Line_3 $$ Connection conn = session.getConnection(this, true) [CD]
Line_2 $$ public void create(Session session) --> Line_3 $$ Connection conn = session.getConnection(this, true) [FD]
Line_2 $$ public void create(Session session) --> Line_4 $$ Statement stat = null [CD]
Line_2 $$ public void create(Session session) --> Line_5 $$ StringBuilder out = new StringBuilder(256) [CD]
Line_2 $$ public void create(Session session) --> Line_6 $$ Appendable sql = out [CD]
Line_2 $$ public void create(Session session) --> Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() [CD]
Line_2 $$ public void create(Session session) --> Line_8 $$ List<MetaColumn> newColumns = new ArrayList<MetaColumn>() [CD]
Line_2 $$ public void create(Session session) --> Line_9 $$ List<MetaColumn> foreignColumns = new ArrayList<MetaColumn>() [CD]
Line_2 $$ public void create(Session session) --> Line_10 $$ List<MetaIndex> indexes = new ArrayList<MetaIndex>() [CD]
Line_2 $$ public void create(Session session) --> Line_11 $$ boolean createSequenceTable = false [CD]
Line_2 $$ public void create(Session session) --> Line_12 $$ int tableTotalCount = getTableTotalCount() [CD]
Line_2 $$ public void create(Session session) --> Line_13 $$ boolean anyChange = false [CD]
Line_4 $$ Statement stat = null --> Line_15 $$ stat = conn.createStatement() [FD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_15 $$ stat = conn.createStatement() [FD]
Line_16 $$ if (isSequenceTableRequired()) --> Line_17 $$ PreparedStatement ps = null [CD]
Line_16 $$ if (isSequenceTableRequired()) --> Line_18 $$ ResultSet rs = null [CD]
Line_16 $$ if (isSequenceTableRequired()) --> Line_19 $$ Throwable exception = null [CD]
Line_16 $$ if (isSequenceTableRequired()) --> Line_20 $$ String logMsg = "" [CD]
Line_6 $$ Appendable sql = out --> Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) [FD]
Line_17 $$ PreparedStatement ps = null --> Line_23 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_23 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_6 $$ Appendable sql = out --> Line_23 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_23 $$ ps = conn.prepareStatement(sql.toString()) [FD]
Line_17 $$ PreparedStatement ps = null --> Line_24 $$ ps.setString(1, "-") [FD]
Line_23 $$ ps = conn.prepareStatement(sql.toString()) --> Line_24 $$ ps.setString(1, "-") [FD]
Line_18 $$ ResultSet rs = null --> Line_25 $$ rs = ps.executeQuery() [FD]
Line_17 $$ PreparedStatement ps = null --> Line_25 $$ rs = ps.executeQuery() [FD]
Line_23 $$ ps = conn.prepareStatement(sql.toString()) --> Line_25 $$ rs = ps.executeQuery() [FD]
Line_19 $$ Throwable exception = null --> Line_27 $$ exception = e [FD]
Line_16 $$ if (isSequenceTableRequired()) --> Line_29 $$ if (exception != null) [CD]
Line_19 $$ Throwable exception = null --> Line_29 $$ if (exception != null) [FD]
Line_27 $$ exception = e --> Line_29 $$ if (exception != null) [FD]
Line_11 $$ boolean createSequenceTable = false --> Line_37 $$ createSequenceTable = true [FD]
Line_16 $$ if (isSequenceTableRequired()) --> Line_40 $$ if (LOGGER.isLoggable(Level.INFO)) [CD]
Line_40 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_41 $$ logMsg = "Table '' [CD]
Line_20 $$ String logMsg = "" --> Line_41 $$ logMsg = "Table '' [FD]
Line_40 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_42 $$ logMsg = MessageFormat.format(logMsg, getDialect().getSeqTableModel().getTableName(), exception != null ? "is not" : "is", getId()) [CD]
Line_20 $$ String logMsg = "" --> Line_42 $$ logMsg = MessageFormat.format(logMsg, getDialect().getSeqTableModel().getTableName(), exception != null ? "is not" : "is", getId()) [FD]
Line_41 $$ logMsg = "Table '' --> Line_42 $$ logMsg = MessageFormat.format(logMsg, getDialect().getSeqTableModel().getTableName(), exception != null ? "is not" : "is", getId()) [FD]
Line_40 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_43 $$ LOGGER.log(Level.INFO, logMsg) [CD]
Line_20 $$ String logMsg = "" --> Line_43 $$ LOGGER.log(Level.INFO, logMsg) [FD]
Line_41 $$ logMsg = "Table '' --> Line_43 $$ LOGGER.log(Level.INFO, logMsg) [FD]
Line_42 $$ logMsg = MessageFormat.format(logMsg, getDialect().getSeqTableModel().getTableName(), exception != null ? "is not" : "is", getId()) --> Line_43 $$ LOGGER.log(Level.INFO, logMsg) [FD]
Line_19 $$ Throwable exception = null --> Line_46 $$ if (exception != null) [FD]
Line_27 $$ exception = e --> Line_46 $$ if (exception != null) [FD]
Line_46 $$ if (exception != null) --> Line_47 $$ conn.rollback() [CD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_47 $$ conn.rollback() [FD]
Line_17 $$ PreparedStatement ps = null --> Line_50 $$ close(null, ps, rs, false) [FD]
Line_23 $$ ps = conn.prepareStatement(sql.toString()) --> Line_50 $$ close(null, ps, rs, false) [FD]
Line_18 $$ ResultSet rs = null --> Line_50 $$ close(null, ps, rs, false) [FD]
Line_25 $$ rs = ps.executeQuery() --> Line_50 $$ close(null, ps, rs, false) [FD]
Line_53 $$ boolean ddlOnly = false --> Line_56 $$ ddlOnly = true [FD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_61 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() --> Line_61 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_8 $$ List<MetaColumn> newColumns = new ArrayList<MetaColumn>() --> Line_61 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_10 $$ List<MetaIndex> indexes = new ArrayList<MetaIndex>() --> Line_61 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) [FD]
Line_61 $$ boolean change = isModelChanged(conn, tables, newColumns, indexes) --> Line_62 $$ if (change && ddlOnly) [FD]
Line_53 $$ boolean ddlOnly = false --> Line_62 $$ if (change && ddlOnly) [FD]
Line_56 $$ ddlOnly = true --> Line_62 $$ if (change && ddlOnly) [FD]
Line_62 $$ if (change && ddlOnly) --> Line_63 $$ if (tables.size() < tableTotalCount) [CD]
Line_12 $$ int tableTotalCount = getTableTotalCount() --> Line_63 $$ if (tables.size() < tableTotalCount) [FD]
Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() --> Line_63 $$ if (tables.size() < tableTotalCount) [FD]
Line_63 $$ if (tables.size() < tableTotalCount) --> Line_64 $$ return [CD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_75 $$ Set<String> keywords = getDialect().getKeywordSet(conn) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_77 $$ if (table.isTable()) [FD]
Line_77 $$ if (table.isTable()) --> Line_78 $$ checkKeyWord(MetaTable.NAME.of(table), table, keywords) [CD]
Line_76 $$ for (MetaTable table : tables) --> Line_78 $$ checkKeyWord(MetaTable.NAME.of(table), table, keywords) [FD]
Line_75 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_78 $$ checkKeyWord(MetaTable.NAME.of(table), table, keywords) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_80 $$ checkKeyWord(MetaColumn.NAME.of(column), table, keywords) [FD]
Line_75 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_80 $$ checkKeyWord(MetaColumn.NAME.of(column), table, keywords) [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_80 $$ checkKeyWord(MetaColumn.NAME.of(column), table, keywords) [FD]
Line_75 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_85 $$ checkKeyWord(MetaColumn.NAME.of(column), column.getTable(), keywords) [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_85 $$ checkKeyWord(MetaColumn.NAME.of(column), column.getTable(), keywords) [FD]
Line_75 $$ Set<String> keywords = getDialect().getKeywordSet(conn) --> Line_88 $$ checkKeyWord(MetaIndex.NAME.of(index), MetaIndex.TABLE.of(index), keywords) [FD]
Line_87 $$ for (MetaIndex index : indexes) --> Line_88 $$ checkKeyWord(MetaIndex.NAME.of(index), MetaIndex.TABLE.of(index), keywords) [FD]
Line_12 $$ int tableTotalCount = getTableTotalCount() --> Line_91 $$ for (String schema : getSchemas(tables)) [FD]
Line_7 $$ List<MetaTable> tables = new ArrayList<MetaTable>() --> Line_91 $$ for (String schema : getSchemas(tables)) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_92 $$ out.setLength(0) [FD]
Line_6 $$ Appendable sql = out --> Line_93 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_93 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_91 $$ for (String schema : getSchemas(tables)) --> Line_93 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_93 $$ sql = getDialect().printCreateSchema(schema, out) [FD]
Line_6 $$ Appendable sql = out --> Line_94 $$ if (isFilled(sql)) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_94 $$ if (isFilled(sql)) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_94 $$ if (isFilled(sql)) [FD]
Line_4 $$ Statement stat = null --> Line_96 $$ stat.executeUpdate(sql.toString()) [FD]
Line_15 $$ stat = conn.createStatement() --> Line_96 $$ stat.executeUpdate(sql.toString()) [FD]
Line_6 $$ Appendable sql = out --> Line_96 $$ stat.executeUpdate(sql.toString()) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_96 $$ stat.executeUpdate(sql.toString()) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_96 $$ stat.executeUpdate(sql.toString()) [FD]
Line_6 $$ Appendable sql = out --> Line_98 $$ LOGGER.log(Level.INFO, " [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_98 $$ LOGGER.log(Level.INFO, " [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_98 $$ LOGGER.log(Level.INFO, " [FD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_99 $$ conn.rollback() [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_105 $$ if (table.isTable()) [FD]
Line_105 $$ if (table.isTable()) --> Line_106 $$ tableCount++ [CD]
Line_103 $$ int tableCount = 0 --> Line_106 $$ tableCount++ [FD]
Line_105 $$ if (table.isTable()) --> Line_107 $$ out.setLength(0) [CD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_107 $$ out.setLength(0) [FD]
Line_105 $$ if (table.isTable()) --> Line_108 $$ sql = getDialect().printTable(table, out) [CD]
Line_6 $$ Appendable sql = out --> Line_108 $$ sql = getDialect().printTable(table, out) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_108 $$ sql = getDialect().printTable(table, out) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_108 $$ sql = getDialect().printTable(table, out) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_108 $$ sql = getDialect().printTable(table, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_108 $$ sql = getDialect().printTable(table, out) [FD]
Line_105 $$ if (table.isTable()) --> Line_109 $$ executeUpdate(sql, stat, table) [CD]
Line_6 $$ Appendable sql = out --> Line_109 $$ executeUpdate(sql, stat, table) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_109 $$ executeUpdate(sql, stat, table) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_109 $$ executeUpdate(sql, stat, table) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_109 $$ executeUpdate(sql, stat, table) [FD]
Line_4 $$ Statement stat = null --> Line_109 $$ executeUpdate(sql, stat, table) [FD]
Line_15 $$ stat = conn.createStatement() --> Line_109 $$ executeUpdate(sql, stat, table) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_109 $$ executeUpdate(sql, stat, table) [FD]
Line_105 $$ if (table.isTable()) --> Line_110 $$ foreignColumns.addAll(table.getForeignColumns()) [CD]
Line_9 $$ List<MetaColumn> foreignColumns = new ArrayList<MetaColumn>() --> Line_110 $$ foreignColumns.addAll(table.getForeignColumns()) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_110 $$ foreignColumns.addAll(table.getForeignColumns()) [FD]
Line_105 $$ if (table.isTable()) --> Line_111 $$ anyChange = true [CD]
Line_13 $$ boolean anyChange = false --> Line_111 $$ anyChange = true [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_115 $$ out.setLength(0) [FD]
Line_6 $$ Appendable sql = out --> Line_116 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_116 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_116 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_116 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_116 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_116 $$ sql = getDialect().printAlterTable(column, out) [FD]
Line_6 $$ Appendable sql = out --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_4 $$ Statement stat = null --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_15 $$ stat = conn.createStatement() --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_117 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_13 $$ boolean anyChange = false --> Line_118 $$ anyChange = true [FD]
Line_111 $$ anyChange = true --> Line_118 $$ anyChange = true [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_119 $$ if (column.isForeignKey()) [FD]
Line_119 $$ if (column.isForeignKey()) --> Line_120 $$ foreignColumns.add(column) [CD]
Line_9 $$ List<MetaColumn> foreignColumns = new ArrayList<MetaColumn>() --> Line_120 $$ foreignColumns.add(column) [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_120 $$ foreignColumns.add(column) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_124 $$ out.setLength(0) [FD]
Line_6 $$ Appendable sql = out --> Line_125 $$ sql = getDialect().printIndex(index, out) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_125 $$ sql = getDialect().printIndex(index, out) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_125 $$ sql = getDialect().printIndex(index, out) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_125 $$ sql = getDialect().printIndex(index, out) [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_125 $$ sql = getDialect().printIndex(index, out) [FD]
Line_87 $$ for (MetaIndex index : indexes) --> Line_125 $$ sql = getDialect().printIndex(index, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_125 $$ sql = getDialect().printIndex(index, out) [FD]
Line_6 $$ Appendable sql = out --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_125 $$ sql = getDialect().printIndex(index, out) --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_4 $$ Statement stat = null --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_15 $$ stat = conn.createStatement() --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_87 $$ for (MetaIndex index : indexes) --> Line_126 $$ executeUpdate(sql, stat, MetaIndex.TABLE.of(index)) [FD]
Line_13 $$ boolean anyChange = false --> Line_127 $$ anyChange = true [FD]
Line_111 $$ anyChange = true --> Line_127 $$ anyChange = true [FD]
Line_118 $$ anyChange = true --> Line_127 $$ anyChange = true [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_130 $$ if (column.isForeignKey()) [FD]
Line_130 $$ if (column.isForeignKey()) --> Line_131 $$ out.setLength(0) [CD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_131 $$ out.setLength(0) [FD]
Line_130 $$ if (column.isForeignKey()) --> Line_132 $$ MetaTable table = MetaColumn.TABLE.of(column) [CD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_132 $$ MetaTable table = MetaColumn.TABLE.of(column) [FD]
Line_130 $$ if (column.isForeignKey()) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [CD]
Line_6 $$ Appendable sql = out --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_125 $$ sql = getDialect().printIndex(index, out) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_133 $$ sql = getDialect().printForeignKey(column, table, out) [FD]
Line_130 $$ if (column.isForeignKey()) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [CD]
Line_6 $$ Appendable sql = out --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_125 $$ sql = getDialect().printIndex(index, out) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_133 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_4 $$ Statement stat = null --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_15 $$ stat = conn.createStatement() --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_79 $$ for (MetaColumn column : MetaTable.COLUMNS.of(table)) --> Line_134 $$ executeUpdate(sql, stat, column.getTable()) [FD]
Line_130 $$ if (column.isForeignKey()) --> Line_135 $$ anyChange = true [CD]
Line_13 $$ boolean anyChange = false --> Line_135 $$ anyChange = true [FD]
Line_111 $$ anyChange = true --> Line_135 $$ anyChange = true [FD]
Line_118 $$ anyChange = true --> Line_135 $$ anyChange = true [FD]
Line_127 $$ anyChange = true --> Line_135 $$ anyChange = true [FD]
Line_138 $$ if (createSequenceTable) --> Line_139 $$ out.setLength(0) [CD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_139 $$ out.setLength(0) [FD]
Line_138 $$ if (createSequenceTable) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [CD]
Line_6 $$ Appendable sql = out --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_125 $$ sql = getDialect().printIndex(index, out) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_133 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_140 $$ sql = getDialect().printSequenceTable(this, out) [FD]
Line_138 $$ if (createSequenceTable) --> Line_142 $$ MetaTable.ORM2DLL_POLICY.setValue(table, MetaParams.ORM2DLL_POLICY.getDefault()) [CD]
Line_76 $$ for (MetaTable table : tables) --> Line_142 $$ MetaTable.ORM2DLL_POLICY.setValue(table, MetaParams.ORM2DLL_POLICY.getDefault()) [FD]
Line_138 $$ if (createSequenceTable) --> Line_143 $$ executeUpdate(sql, stat, table) [CD]
Line_6 $$ Appendable sql = out --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_125 $$ sql = getDialect().printIndex(index, out) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_133 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_140 $$ sql = getDialect().printSequenceTable(this, out) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_4 $$ Statement stat = null --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_15 $$ stat = conn.createStatement() --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_76 $$ for (MetaTable table : tables) --> Line_143 $$ executeUpdate(sql, stat, table) [FD]
Line_161 $$ if (!cTables.isEmpty()) --> Line_162 $$ sql = out [CD]
Line_6 $$ Appendable sql = out --> Line_162 $$ sql = out [FD]
Line_22 $$ sql = getDialect().printSequenceCurrentValue(findFirstSequencer(), out) --> Line_162 $$ sql = out [FD]
Line_93 $$ sql = getDialect().printCreateSchema(schema, out) --> Line_162 $$ sql = out [FD]
Line_108 $$ sql = getDialect().printTable(table, out) --> Line_162 $$ sql = out [FD]
Line_116 $$ sql = getDialect().printAlterTable(column, out) --> Line_162 $$ sql = out [FD]
Line_125 $$ sql = getDialect().printIndex(index, out) --> Line_162 $$ sql = out [FD]
Line_133 $$ sql = getDialect().printForeignKey(column, table, out) --> Line_162 $$ sql = out [FD]
Line_140 $$ sql = getDialect().printSequenceTable(this, out) --> Line_162 $$ sql = out [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_162 $$ sql = out [FD]
Line_161 $$ if (!cTables.isEmpty()) --> Line_163 $$ createTableComments(cTables, stat, out) [CD]
Line_4 $$ Statement stat = null --> Line_163 $$ createTableComments(cTables, stat, out) [FD]
Line_15 $$ stat = conn.createStatement() --> Line_163 $$ createTableComments(cTables, stat, out) [FD]
Line_5 $$ StringBuilder out = new StringBuilder(256) --> Line_163 $$ createTableComments(cTables, stat, out) [FD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_165 $$ conn.commit() [FD]
Line_3 $$ Connection conn = session.getConnection(this, true) --> Line_168 $$ conn.rollback() [FD]
