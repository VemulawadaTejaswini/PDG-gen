Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_3 $$ String fileName = file.getFileName() [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_3 $$ String fileName = file.getFileName() [FD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_4 $$ String assetsPath = FileFactory.getRealAssetsRootPath() [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_5 $$ new java.io.File(assetsPath).mkdir() [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_6 $$ java.io.File workingFile = getAssetIOFile(file) [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_6 $$ java.io.File workingFile = getAssetIOFile(file) [FD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_7 $$ DotResourceCache vc = CacheLocator.getVeloctyResourceCache() [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_8 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath()) [CD]
Line_7 $$ DotResourceCache vc = CacheLocator.getVeloctyResourceCache() --> Line_8 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath()) [FD]
Line_6 $$ java.io.File workingFile = getAssetIOFile(file) --> Line_8 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath()) [FD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_9 $$ if (destination != null && destination.getInode() > 0) [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_9 $$ if (destination != null && destination.getInode() > 0) [FD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_10 $$ FileInputStream is = new FileInputStream(workingFile) [CD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_11 $$ FileChannel channelFrom = is.getChannel() [CD]
Line_10 $$ FileInputStream is = new FileInputStream(workingFile) --> Line_11 $$ FileChannel channelFrom = is.getChannel() [FD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_12 $$ java.io.File newVersionFile = getAssetIOFile(destination) [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_12 $$ java.io.File newVersionFile = getAssetIOFile(destination) [FD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_13 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() [CD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_14 $$ channelFrom.transferTo(0, channelFrom.size(), channelTo) [CD]
Line_11 $$ FileChannel channelFrom = is.getChannel() --> Line_14 $$ channelFrom.transferTo(0, channelFrom.size(), channelTo) [FD]
Line_13 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() --> Line_14 $$ channelFrom.transferTo(0, channelFrom.size(), channelTo) [FD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_15 $$ channelTo.force(false) [CD]
Line_13 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() --> Line_15 $$ channelTo.force(false) [FD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_16 $$ channelTo.close() [CD]
Line_13 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() --> Line_16 $$ channelTo.close() [FD]
Line_9 $$ if (destination != null && destination.getInode() > 0) --> Line_17 $$ channelFrom.close() [CD]
Line_11 $$ FileChannel channelFrom = is.getChannel() --> Line_17 $$ channelFrom.close() [FD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_19 $$ if (newDataFile != null) [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_19 $$ if (newDataFile != null) [FD]
Line_19 $$ if (newDataFile != null) --> Line_20 $$ FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel() [CD]
Line_19 $$ if (newDataFile != null) --> Line_21 $$ writeCurrentChannel.truncate(0) [CD]
Line_20 $$ FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel() --> Line_21 $$ writeCurrentChannel.truncate(0) [FD]
Line_19 $$ if (newDataFile != null) --> Line_22 $$ FileChannel fromChannel = new FileInputStream(newDataFile).getChannel() [CD]
Line_19 $$ if (newDataFile != null) --> Line_23 $$ fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel) [CD]
Line_22 $$ FileChannel fromChannel = new FileInputStream(newDataFile).getChannel() --> Line_23 $$ fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel) [FD]
Line_20 $$ FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel() --> Line_23 $$ fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel) [FD]
Line_19 $$ if (newDataFile != null) --> Line_24 $$ writeCurrentChannel.force(false) [CD]
Line_20 $$ FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel() --> Line_24 $$ writeCurrentChannel.force(false) [FD]
Line_19 $$ if (newDataFile != null) --> Line_25 $$ writeCurrentChannel.close() [CD]
Line_20 $$ FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel() --> Line_25 $$ writeCurrentChannel.close() [FD]
Line_19 $$ if (newDataFile != null) --> Line_26 $$ fromChannel.close() [CD]
Line_22 $$ FileChannel fromChannel = new FileInputStream(newDataFile).getChannel() --> Line_26 $$ fromChannel.close() [FD]
Line_19 $$ if (newDataFile != null) --> Line_27 $$ if (UtilMethods.isImage(fileName)) [CD]
Line_3 $$ String fileName = file.getFileName() --> Line_27 $$ if (UtilMethods.isImage(fileName)) [FD]
Line_27 $$ if (UtilMethods.isImage(fileName)) --> Line_28 $$ BufferedImage img = javax.imageio.ImageIO.read(workingFile) [CD]
Line_6 $$ java.io.File workingFile = getAssetIOFile(file) --> Line_28 $$ BufferedImage img = javax.imageio.ImageIO.read(workingFile) [FD]
Line_27 $$ if (UtilMethods.isImage(fileName)) --> Line_29 $$ int height = img.getHeight() [CD]
Line_28 $$ BufferedImage img = javax.imageio.ImageIO.read(workingFile) --> Line_29 $$ int height = img.getHeight() [FD]
Line_27 $$ if (UtilMethods.isImage(fileName)) --> Line_30 $$ file.setHeight(height) [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_30 $$ file.setHeight(height) [FD]
Line_29 $$ int height = img.getHeight() --> Line_30 $$ file.setHeight(height) [FD]
Line_27 $$ if (UtilMethods.isImage(fileName)) --> Line_31 $$ int width = img.getWidth() [CD]
Line_28 $$ BufferedImage img = javax.imageio.ImageIO.read(workingFile) --> Line_31 $$ int width = img.getWidth() [FD]
Line_27 $$ if (UtilMethods.isImage(fileName)) --> Line_32 $$ file.setWidth(width) [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_32 $$ file.setWidth(width) [FD]
Line_31 $$ int width = img.getWidth() --> Line_32 $$ file.setWidth(width) [FD]
Line_19 $$ if (newDataFile != null) --> Line_34 $$ String folderPath = workingFile.getParentFile().getAbsolutePath() [CD]
Line_6 $$ java.io.File workingFile = getAssetIOFile(file) --> Line_34 $$ String folderPath = workingFile.getParentFile().getAbsolutePath() [FD]
Line_19 $$ if (newDataFile != null) --> Line_35 $$ Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) [CD]
Line_2 $$ public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception --> Line_35 $$ Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) [FD]
Line_19 $$ if (newDataFile != null) --> Line_36 $$ java.io.File directory = new java.io.File(folderPath) [CD]
Line_19 $$ if (newDataFile != null) --> Line_37 $$ java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier)) [CD]
Line_36 $$ java.io.File directory = new java.io.File(folderPath) --> Line_37 $$ java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier)) [FD]
Line_38 $$ for (java.io.File iofile : files) --> Line_40 $$ iofile.delete() [FD]
Line_38 $$ for (java.io.File iofile : files) --> Line_42 $$ Logger.error(FileFactory.class, "EditFileAction._saveWorkingFileData(): " + iofile.getName() + " cannot be erased. Please check the file permissions.") [FD]
