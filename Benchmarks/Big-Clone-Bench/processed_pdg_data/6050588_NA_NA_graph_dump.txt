Line_2 $$ public static String getKeyWithRightLength(final String key, int keyLength) --> Line_3 $$ if (keyLength > 0) [CD]
Line_2 $$ public static String getKeyWithRightLength(final String key, int keyLength) --> Line_3 $$ if (keyLength > 0) [FD]
Line_3 $$ if (keyLength > 0) --> Line_4 $$ if (key.length() == keyLength) [CD]
Line_2 $$ public static String getKeyWithRightLength(final String key, int keyLength) --> Line_4 $$ if (key.length() == keyLength) [FD]
Line_4 $$ if (key.length() == keyLength) --> Line_5 $$ return key [CD]
Line_4 $$ if (key.length() == keyLength) --> Line_7 $$ MessageDigest md = null [CD]
Line_7 $$ MessageDigest md = null --> Line_9 $$ md = MessageDigest.getInstance("SHA-1") [FD]
Line_4 $$ if (key.length() == keyLength) --> Line_13 $$ md.update(key.getBytes()) [CD]
Line_7 $$ MessageDigest md = null --> Line_13 $$ md.update(key.getBytes()) [FD]
Line_9 $$ md = MessageDigest.getInstance("SHA-1") --> Line_13 $$ md.update(key.getBytes()) [FD]
Line_2 $$ public static String getKeyWithRightLength(final String key, int keyLength) --> Line_13 $$ md.update(key.getBytes()) [FD]
Line_4 $$ if (key.length() == keyLength) --> Line_14 $$ byte[] hash = md.digest() [CD]
Line_7 $$ MessageDigest md = null --> Line_14 $$ byte[] hash = md.digest() [FD]
Line_9 $$ md = MessageDigest.getInstance("SHA-1") --> Line_14 $$ byte[] hash = md.digest() [FD]
Line_4 $$ if (key.length() == keyLength) --> Line_15 $$ if (keyLength > 20) [CD]
Line_2 $$ public static String getKeyWithRightLength(final String key, int keyLength) --> Line_15 $$ if (keyLength > 20) [FD]
Line_15 $$ if (keyLength > 20) --> Line_16 $$ byte nhash[] = new byte[keyLength] [CD]
Line_15 $$ if (keyLength > 20) --> Line_17 $$ for (int i = 0; i < keyLength; i++) [CD]
Line_2 $$ public static String getKeyWithRightLength(final String key, int keyLength) --> Line_17 $$ for (int i = 0; i < keyLength; i++) [FD]
Line_17 $$ for (int i = 0; i < keyLength; i++) --> Line_18 $$ nhash[i] = hash[i % 20] [CD]
Line_15 $$ if (keyLength > 20) --> Line_20 $$ hash = nhash [CD]
Line_14 $$ byte[] hash = md.digest() --> Line_20 $$ hash = nhash [FD]
Line_4 $$ if (key.length() == keyLength) --> Line_22 $$ return new String(hash).substring(0, keyLength) [CD]
Line_2 $$ public static String getKeyWithRightLength(final String key, int keyLength) --> Line_22 $$ return new String(hash).substring(0, keyLength) [FD]
Line_3 $$ if (keyLength > 0) --> Line_25 $$ return key [CD]
