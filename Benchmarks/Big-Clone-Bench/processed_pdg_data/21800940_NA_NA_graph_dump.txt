Line_4 $$ URL url = new java.net.URL(curLocation, this.url) --> Line_5 $$ if ("file".equals(url.getProtocol())) [FD]
Line_5 $$ if ("file".equals(url.getProtocol())) --> Line_6 $$ if (PUT_METHOD.equals(method)) [CD]
Line_6 $$ if (PUT_METHOD.equals(method)) --> Line_7 $$ String text = "" [CD]
Line_6 $$ if (PUT_METHOD.equals(method)) --> Line_8 $$ text = data.toString() [CD]
Line_2 $$ private void makeRequest(String data) --> Line_8 $$ text = data.toString() [FD]
Line_7 $$ String text = "" --> Line_8 $$ text = data.toString() [FD]
Line_6 $$ if (PUT_METHOD.equals(method)) --> Line_9 $$ FileWriter out = new FileWriter(new java.io.File(new java.net.URI(url.toString()))) [CD]
Line_4 $$ URL url = new java.net.URL(curLocation, this.url) --> Line_9 $$ FileWriter out = new FileWriter(new java.io.File(new java.net.URI(url.toString()))) [FD]
Line_6 $$ if (PUT_METHOD.equals(method)) --> Line_10 $$ out.write(text, 0, text.length()) [CD]
Line_9 $$ FileWriter out = new FileWriter(new java.io.File(new java.net.URI(url.toString()))) --> Line_10 $$ out.write(text, 0, text.length()) [FD]
Line_7 $$ String text = "" --> Line_10 $$ out.write(text, 0, text.length()) [FD]
Line_8 $$ text = data.toString() --> Line_10 $$ out.write(text, 0, text.length()) [FD]
Line_6 $$ if (PUT_METHOD.equals(method)) --> Line_11 $$ out.flush() [CD]
Line_9 $$ FileWriter out = new FileWriter(new java.io.File(new java.net.URI(url.toString()))) --> Line_11 $$ out.flush() [FD]
Line_6 $$ if (PUT_METHOD.equals(method)) --> Line_12 $$ out.close() [CD]
Line_9 $$ FileWriter out = new FileWriter(new java.io.File(new java.net.URI(url.toString()))) --> Line_12 $$ out.close() [FD]
Line_6 $$ if (PUT_METHOD.equals(method)) --> Line_13 $$ if (DELETE_METHOD.equals(method)) [CD]
Line_13 $$ if (DELETE_METHOD.equals(method)) --> Line_14 $$ File file = new java.io.File(new java.net.URI(url.toString())) [CD]
Line_4 $$ URL url = new java.net.URL(curLocation, this.url) --> Line_14 $$ File file = new java.io.File(new java.net.URI(url.toString())) [FD]
Line_13 $$ if (DELETE_METHOD.equals(method)) --> Line_15 $$ file.delete() [CD]
Line_14 $$ File file = new java.io.File(new java.net.URI(url.toString())) --> Line_15 $$ file.delete() [FD]
Line_13 $$ if (DELETE_METHOD.equals(method)) --> Line_17 $$ URLConnection connection = url.openConnection() [CD]
Line_4 $$ URL url = new java.net.URL(curLocation, this.url) --> Line_17 $$ URLConnection connection = url.openConnection() [FD]
Line_13 $$ if (DELETE_METHOD.equals(method)) --> Line_18 $$ connection.connect() [CD]
Line_17 $$ URLConnection connection = url.openConnection() --> Line_18 $$ connection.connect() [FD]
Line_13 $$ if (DELETE_METHOD.equals(method)) --> Line_19 $$ handleResponse(connection) [CD]
Line_17 $$ URLConnection connection = url.openConnection() --> Line_19 $$ handleResponse(connection) [FD]
Line_4 $$ URL url = new java.net.URL(curLocation, this.url) --> Line_22 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [FD]
Line_5 $$ if ("file".equals(url.getProtocol())) --> Line_23 $$ connection.setRequestMethod(method) [CD]
Line_17 $$ URLConnection connection = url.openConnection() --> Line_23 $$ connection.setRequestMethod(method) [FD]
Line_5 $$ if ("file".equals(url.getProtocol())) --> Line_24 $$ for (Iterator iterator = headers.entrySet().iterator(); iterator.hasNext(); ) [CD]
Line_24 $$ for (Iterator iterator = headers.entrySet().iterator(); iterator.hasNext(); ) --> Line_25 $$ Map.Entry entry = (Map.Entry) iterator.next() [CD]
Line_24 $$ for (Iterator iterator = headers.entrySet().iterator(); iterator.hasNext(); ) --> Line_25 $$ Map.Entry entry = (Map.Entry) iterator.next() [FD]
Line_24 $$ for (Iterator iterator = headers.entrySet().iterator(); iterator.hasNext(); ) --> Line_26 $$ String property = (String) entry.getKey() [CD]
Line_24 $$ for (Iterator iterator = headers.entrySet().iterator(); iterator.hasNext(); ) --> Line_27 $$ String value = (String) entry.getValue() [CD]
Line_24 $$ for (Iterator iterator = headers.entrySet().iterator(); iterator.hasNext(); ) --> Line_28 $$ connection.addRequestProperty(property, value) [CD]
Line_17 $$ URLConnection connection = url.openConnection() --> Line_28 $$ connection.addRequestProperty(property, value) [FD]
Line_26 $$ String property = (String) entry.getKey() --> Line_28 $$ connection.addRequestProperty(property, value) [FD]
Line_27 $$ String value = (String) entry.getValue() --> Line_28 $$ connection.addRequestProperty(property, value) [FD]
Line_5 $$ if ("file".equals(url.getProtocol())) --> Line_30 $$ connection.connect() [CD]
Line_17 $$ URLConnection connection = url.openConnection() --> Line_30 $$ connection.connect() [FD]
Line_5 $$ if ("file".equals(url.getProtocol())) --> Line_31 $$ handleResponse(connection) [CD]
Line_17 $$ URLConnection connection = url.openConnection() --> Line_31 $$ handleResponse(connection) [FD]
