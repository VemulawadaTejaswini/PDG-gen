Line_2 $$ public URI normalize(final URI uri) --> Line_3 $$ URI normalizedUri = super.normalize(uri) [CD]
Line_2 $$ public URI normalize(final URI uri) --> Line_3 $$ URI normalizedUri = super.normalize(uri) [FD]
Line_2 $$ public URI normalize(final URI uri) --> Line_4 $$ if (normalizedUri.equals(uri)) [CD]
Line_2 $$ public URI normalize(final URI uri) --> Line_4 $$ if (normalizedUri.equals(uri)) [FD]
Line_3 $$ URI normalizedUri = super.normalize(uri) --> Line_4 $$ if (normalizedUri.equals(uri)) [FD]
Line_4 $$ if (normalizedUri.equals(uri)) --> Line_5 $$ String resourceName = uri.toString().replaceAll(".*(\\\\+|/)", "") [CD]
Line_2 $$ public URI normalize(final URI uri) --> Line_5 $$ String resourceName = uri.toString().replaceAll(".*(\\\\+|/)", "") [FD]
Line_4 $$ if (normalizedUri.equals(uri)) --> Line_6 $$ if (!containsNormalizedUriKey(uri)) [CD]
Line_2 $$ public URI normalize(final URI uri) --> Line_6 $$ if (!containsNormalizedUriKey(uri)) [FD]
Line_6 $$ if (!containsNormalizedUriKey(uri)) --> Line_7 $$ for (Iterator<Path> iterator = this.iteratorModulePaths(); iterator.hasNext(); ) [CD]
Line_7 $$ for (Iterator<Path> iterator = this.iteratorModulePaths(); iterator.hasNext(); ) --> Line_8 $$ String searchPath = iterator.next().getPath() [CD]
Line_7 $$ for (Iterator<Path> iterator = this.iteratorModulePaths(); iterator.hasNext(); ) --> Line_8 $$ String searchPath = iterator.next().getPath() [FD]
Line_7 $$ for (Iterator<Path> iterator = this.iteratorModulePaths(); iterator.hasNext(); ) --> Line_9 $$ String completePath = this.normalizePath(searchPath + '/' + resourceName) [CD]
Line_9 $$ String completePath = this.normalizePath(searchPath + '/' + resourceName) --> Line_12 $$ URL url = toURL(completePath) [FD]
Line_12 $$ URL url = toURL(completePath) --> Line_13 $$ if (url != null) [FD]
Line_11 $$ InputStream stream = null --> Line_15 $$ stream = url.openStream() [FD]
Line_12 $$ URL url = toURL(completePath) --> Line_15 $$ stream = url.openStream() [FD]
Line_11 $$ InputStream stream = null --> Line_16 $$ stream.close() [FD]
Line_15 $$ stream = url.openStream() --> Line_16 $$ stream.close() [FD]
Line_12 $$ URL url = toURL(completePath) --> Line_18 $$ url = null [FD]
Line_11 $$ InputStream stream = null --> Line_20 $$ stream = null [FD]
Line_15 $$ stream = url.openStream() --> Line_20 $$ stream = null [FD]
Line_13 $$ if (url != null) --> Line_22 $$ if (url != null) [CD]
Line_12 $$ URL url = toURL(completePath) --> Line_22 $$ if (url != null) [FD]
Line_18 $$ url = null --> Line_22 $$ if (url != null) [FD]
Line_22 $$ if (url != null) --> Line_23 $$ normalizedUri = URIUtil.createUri(url.toString()) [CD]
Line_3 $$ URI normalizedUri = super.normalize(uri) --> Line_23 $$ normalizedUri = URIUtil.createUri(url.toString()) [FD]
Line_12 $$ URL url = toURL(completePath) --> Line_23 $$ normalizedUri = URIUtil.createUri(url.toString()) [FD]
Line_18 $$ url = null --> Line_23 $$ normalizedUri = URIUtil.createUri(url.toString()) [FD]
Line_22 $$ if (url != null) --> Line_24 $$ this.putNormalizedUri(uri, normalizedUri) [CD]
Line_2 $$ public URI normalize(final URI uri) --> Line_24 $$ this.putNormalizedUri(uri, normalizedUri) [FD]
Line_23 $$ normalizedUri = URIUtil.createUri(url.toString()) --> Line_24 $$ this.putNormalizedUri(uri, normalizedUri) [FD]
Line_3 $$ URI normalizedUri = super.normalize(uri) --> Line_24 $$ this.putNormalizedUri(uri, normalizedUri) [FD]
Line_6 $$ if (!containsNormalizedUriKey(uri)) --> Line_32 $$ normalizedUri = getNormalizedUri(uri) [CD]
Line_23 $$ normalizedUri = URIUtil.createUri(url.toString()) --> Line_32 $$ normalizedUri = getNormalizedUri(uri) [FD]
Line_3 $$ URI normalizedUri = super.normalize(uri) --> Line_32 $$ normalizedUri = getNormalizedUri(uri) [FD]
Line_2 $$ public URI normalize(final URI uri) --> Line_32 $$ normalizedUri = getNormalizedUri(uri) [FD]
Line_2 $$ public URI normalize(final URI uri) --> Line_35 $$ return normalizedUri [CD]
Line_18 $$ url = null --> Line_13 $$ if (url != null) [FD]
Line_18 $$ url = null --> Line_15 $$ stream = url.openStream() [FD]
Line_20 $$ stream = null --> Line_16 $$ stream.close() [FD]
