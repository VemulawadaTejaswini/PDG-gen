Line_2 $$ public void run() --> Line_3 $$ if (mMode == 0) [CD]
Line_3 $$ if (mMode == 0) --> Line_4 $$ long currentVersion = Version.extractVersion(App.getVersion()) [CD]
Line_3 $$ if (mMode == 0) --> Line_5 $$ if (currentVersion == 0) [CD]
Line_4 $$ long currentVersion = Version.extractVersion(App.getVersion()) --> Line_5 $$ if (currentVersion == 0) [FD]
Line_5 $$ if (currentVersion == 0) --> Line_8 $$ return [CD]
Line_3 $$ if (mMode == 0) --> Line_10 $$ long versionAvailable = currentVersion [CD]
Line_15 $$ NetworkInterface ni = NetworkInterface.getByInetAddress(InetAddress.getLocalHost()) --> Line_16 $$ if (!ni.isLoopback()) [FD]
Line_16 $$ if (!ni.isLoopback()) --> Line_17 $$ if (ni.isUp()) [CD]
Line_15 $$ NetworkInterface ni = NetworkInterface.getByInetAddress(InetAddress.getLocalHost()) --> Line_17 $$ if (ni.isUp()) [FD]
Line_17 $$ if (ni.isUp()) --> Line_18 $$ if (!ni.isVirtual()) [CD]
Line_15 $$ NetworkInterface ni = NetworkInterface.getByInetAddress(InetAddress.getLocalHost()) --> Line_18 $$ if (!ni.isVirtual()) [FD]
Line_18 $$ if (!ni.isVirtual()) --> Line_19 $$ buffer.append('?') [CD]
Line_13 $$ StringBuilder buffer = new StringBuilder(mCheckURL) --> Line_19 $$ buffer.append('?') [FD]
Line_18 $$ if (!ni.isVirtual()) --> Line_20 $$ byte[] macAddress = ni.getHardwareAddress() [CD]
Line_15 $$ NetworkInterface ni = NetworkInterface.getByInetAddress(InetAddress.getLocalHost()) --> Line_20 $$ byte[] macAddress = ni.getHardwareAddress() [FD]
Line_13 $$ StringBuilder buffer = new StringBuilder(mCheckURL) --> Line_22 $$ buffer.append(Integer.toHexString(one >>> 4 & 0xF)) [FD]
Line_13 $$ StringBuilder buffer = new StringBuilder(mCheckURL) --> Line_23 $$ buffer.append(Integer.toHexString(one & 0xF)) [FD]
Line_13 $$ StringBuilder buffer = new StringBuilder(mCheckURL) --> Line_30 $$ URL url = new URL(buffer.toString()) [FD]
Line_30 $$ URL url = new URL(buffer.toString()) --> Line_31 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_31 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_32 $$ String line = in.readLine() [FD]
Line_32 $$ String line = in.readLine() --> Line_33 $$ while (line != null) [FD]
Line_33 $$ while (line != null) --> Line_34 $$ StringTokenizer tokenizer = new StringTokenizer(line, "\t") [CD]
Line_33 $$ while (line != null) --> Line_35 $$ if (tokenizer.hasMoreTokens()) [CD]
Line_34 $$ StringTokenizer tokenizer = new StringTokenizer(line, "\t") --> Line_35 $$ if (tokenizer.hasMoreTokens()) [FD]
Line_34 $$ StringTokenizer tokenizer = new StringTokenizer(line, "\t") --> Line_37 $$ if (tokenizer.nextToken().equalsIgnoreCase(mProductKey)) [FD]
Line_37 $$ if (tokenizer.nextToken().equalsIgnoreCase(mProductKey)) --> Line_38 $$ String token = tokenizer.nextToken() [CD]
Line_34 $$ StringTokenizer tokenizer = new StringTokenizer(line, "\t") --> Line_38 $$ String token = tokenizer.nextToken() [FD]
Line_37 $$ if (tokenizer.nextToken().equalsIgnoreCase(mProductKey)) --> Line_39 $$ long version = Version.extractVersion(token) [CD]
Line_38 $$ String token = tokenizer.nextToken() --> Line_39 $$ long version = Version.extractVersion(token) [FD]
Line_37 $$ if (tokenizer.nextToken().equalsIgnoreCase(mProductKey)) --> Line_40 $$ if (version > versionAvailable) [CD]
Line_39 $$ long version = Version.extractVersion(token) --> Line_40 $$ if (version > versionAvailable) [FD]
Line_10 $$ long versionAvailable = currentVersion --> Line_40 $$ if (version > versionAvailable) [FD]
Line_40 $$ if (version > versionAvailable) --> Line_41 $$ versionAvailable = version [CD]
Line_10 $$ long versionAvailable = currentVersion --> Line_41 $$ versionAvailable = version [FD]
Line_39 $$ long version = Version.extractVersion(token) --> Line_41 $$ versionAvailable = version [FD]
Line_33 $$ while (line != null) --> Line_47 $$ line = in.readLine() [CD]
Line_32 $$ String line = in.readLine() --> Line_47 $$ line = in.readLine() [FD]
Line_31 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_47 $$ line = in.readLine() [FD]
Line_3 $$ if (mMode == 0) --> Line_51 $$ if (versionAvailable > currentVersion) [CD]
Line_41 $$ versionAvailable = version --> Line_51 $$ if (versionAvailable > currentVersion) [FD]
Line_10 $$ long versionAvailable = currentVersion --> Line_51 $$ if (versionAvailable > currentVersion) [FD]
Line_4 $$ long currentVersion = Version.extractVersion(App.getVersion()) --> Line_51 $$ if (versionAvailable > currentVersion) [FD]
Line_51 $$ if (versionAvailable > currentVersion) --> Line_52 $$ Preferences prefs = Preferences.getInstance() [CD]
Line_51 $$ if (versionAvailable > currentVersion) --> Line_53 $$ String humanReadableVersion = Version.getHumanReadableVersion(versionAvailable) [CD]
Line_41 $$ versionAvailable = version --> Line_53 $$ String humanReadableVersion = Version.getHumanReadableVersion(versionAvailable) [FD]
Line_10 $$ long versionAvailable = currentVersion --> Line_53 $$ String humanReadableVersion = Version.getHumanReadableVersion(versionAvailable) [FD]
Line_51 $$ if (versionAvailable > currentVersion) --> Line_55 $$ RESULT = MessageFormat.format(MSG_OUT_OF_DATE, humanReadableVersion) [CD]
Line_53 $$ String humanReadableVersion = Version.getHumanReadableVersion(versionAvailable) --> Line_55 $$ RESULT = MessageFormat.format(MSG_OUT_OF_DATE, humanReadableVersion) [FD]
Line_51 $$ if (versionAvailable > currentVersion) --> Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) [CD]
Line_41 $$ versionAvailable = version --> Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) [FD]
Line_10 $$ long versionAvailable = currentVersion --> Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) [FD]
Line_52 $$ Preferences prefs = Preferences.getInstance() --> Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) [FD]
Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) --> Line_57 $$ prefs.setValue(MODULE, LAST_VERSION_KEY, humanReadableVersion) [CD]
Line_52 $$ Preferences prefs = Preferences.getInstance() --> Line_57 $$ prefs.setValue(MODULE, LAST_VERSION_KEY, humanReadableVersion) [FD]
Line_53 $$ String humanReadableVersion = Version.getHumanReadableVersion(versionAvailable) --> Line_57 $$ prefs.setValue(MODULE, LAST_VERSION_KEY, humanReadableVersion) [FD]
Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) --> Line_58 $$ prefs.save() [CD]
Line_52 $$ Preferences prefs = Preferences.getInstance() --> Line_58 $$ prefs.save() [FD]
Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) --> Line_60 $$ EventQueue.invokeLater(this) [CD]
Line_56 $$ if (versionAvailable > Version.extractVersion(prefs.getStringValue(MODULE, LAST_VERSION_KEY, App.getVersion()))) --> Line_61 $$ return [CD]
Line_3 $$ if (mMode == 0) --> Line_66 $$ if (mMode == 1) [CD]
Line_66 $$ if (mMode == 1) --> Line_67 $$ if (App.isNotificationAllowed()) [CD]
Line_67 $$ if (App.isNotificationAllowed()) --> Line_68 $$ String result = getResult() [CD]
Line_67 $$ if (App.isNotificationAllowed()) --> Line_70 $$ if (WindowUtils.showConfirmDialog(null, result, MSG_UPDATE_TITLE, JOptionPane.OK_CANCEL_OPTION, new String[] [CD]
Line_68 $$ String result = getResult() --> Line_70 $$ if (WindowUtils.showConfirmDialog(null, result, MSG_UPDATE_TITLE, JOptionPane.OK_CANCEL_OPTION, new String[] [FD]
Line_70 $$ if (WindowUtils.showConfirmDialog(null, result, MSG_UPDATE_TITLE, JOptionPane.OK_CANCEL_OPTION, new String[] --> Line_71 $$ goToUpdate() [CD]
Line_67 $$ if (App.isNotificationAllowed()) --> Line_74 $$ DelayedTask.schedule(this, 250) [CD]
Line_47 $$ line = in.readLine() --> Line_33 $$ while (line != null) [FD]
Line_41 $$ versionAvailable = version --> Line_40 $$ if (version > versionAvailable) [FD]
