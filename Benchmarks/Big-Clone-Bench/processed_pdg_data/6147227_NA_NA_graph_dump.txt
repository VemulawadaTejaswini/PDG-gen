Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_3 $$ FcpFECUtils fecutils = null [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_4 $$ Vector segmentHeaders = null [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_5 $$ Vector segmentFileMaps = new Vector() [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_6 $$ Vector checkFileMaps = new Vector() [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_7 $$ Vector segmentKeyMaps = new Vector() [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_8 $$ Vector checkKeyMaps = new Vector() [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_9 $$ int fileLength = (int) file.length() [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_9 $$ int fileLength = (int) file.length() [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_10 $$ String output = new String() [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_11 $$ int maxThreads = frame1.frostSettings.getIntValue("splitfileUploadThreads") [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_12 $$ Thread[] chunkThreads = null [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_13 $$ String[][] chunkResults = null [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_14 $$ Thread[] checkThreads = null [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_15 $$ String[][] checkResults = null [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_16 $$ int threadCount = 0 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_17 $$ String board = getBoard(file) [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_17 $$ String board = getBoard(file) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) [CD]
Line_3 $$ FcpFECUtils fecutils = null --> Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) [FD]
Line_3 $$ FcpFECUtils fecutils = null --> Line_20 $$ synchronized (fecutils.getClass()) [FD]
Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) --> Line_20 $$ synchronized (fecutils.getClass()) [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) [FD]
Line_3 $$ FcpFECUtils fecutils = null --> Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) [FD]
Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) --> Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) [FD]
Line_9 $$ int fileLength = (int) file.length() --> Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_26 $$ int chunkCnt = 0 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_27 $$ int checkCnt = 0 [CD]
Line_3 $$ FcpFECUtils fecutils = null --> Line_28 $$ synchronized (fecutils.getClass()) [FD]
Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) --> Line_28 $$ synchronized (fecutils.getClass()) [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_34 $$ int blockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_34 $$ int blockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_34 $$ int blockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_34 $$ int blockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_35 $$ int blockNo = 0 [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_36 $$ fcpSock = new Socket(InetAddress.getByName(frame1.frostSettings.getValue("nodeAddress")), frame1.frostSettings.getIntValue("nodePort")) [CD]
Line_30 $$ Socket fcpSock --> Line_36 $$ fcpSock = new Socket(InetAddress.getByName(frame1.frostSettings.getValue("nodeAddress")), frame1.frostSettings.getIntValue("nodePort")) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_37 $$ fcpSock.setSoTimeout(1800000) [CD]
Line_36 $$ fcpSock = new Socket(InetAddress.getByName(frame1.frostSettings.getValue("nodeAddress")), frame1.frostSettings.getIntValue("nodePort")) --> Line_37 $$ fcpSock.setSoTimeout(1800000) [FD]
Line_30 $$ Socket fcpSock --> Line_37 $$ fcpSock.setSoTimeout(1800000) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) [CD]
Line_32 $$ PrintStream fcpOut --> Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) [FD]
Line_36 $$ fcpSock = new Socket(InetAddress.getByName(frame1.frostSettings.getValue("nodeAddress")), frame1.frostSettings.getIntValue("nodePort")) --> Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) [FD]
Line_30 $$ Socket fcpSock --> Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) [CD]
Line_31 $$ BufferedInputStream fcpIn --> Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) [FD]
Line_36 $$ fcpSock = new Socket(InetAddress.getByName(frame1.frostSettings.getValue("nodeAddress")), frame1.frostSettings.getIntValue("nodePort")) --> Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) [FD]
Line_30 $$ Socket fcpSock --> Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_40 $$ FileInputStream fileIn = new FileInputStream(file) [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_41 $$ File[] chunkFiles = new File[blockCount] [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_43 $$ System.out.println("Processing segment " + i) [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_44 $$ fileIn.skip(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset) [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_44 $$ fileIn.skip(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset) [FD]
Line_40 $$ FileInputStream fileIn = new FileInputStream(file) --> Line_44 $$ fileIn.skip(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset) [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_44 $$ fileIn.skip(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset) [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_44 $$ fileIn.skip(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_45 $$ long segLength = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount * ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_45 $$ long segLength = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount * ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_45 $$ long segLength = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount * ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_45 $$ long segLength = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount * ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_46 $$ System.out.println("segLength = " + Long.toHexString(segLength)) [CD]
Line_45 $$ long segLength = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount * ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize --> Line_46 $$ System.out.println("segLength = " + Long.toHexString(segLength)) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_47 $$ String headerString = "SegmentHeader\n" + ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).reconstruct() + "EndMessage\n" [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_47 $$ String headerString = "SegmentHeader\n" + ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).reconstruct() + "EndMessage\n" [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_47 $$ String headerString = "SegmentHeader\n" + ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).reconstruct() + "EndMessage\n" [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_47 $$ String headerString = "SegmentHeader\n" + ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).reconstruct() + "EndMessage\n" [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_48 $$ String dataHeaderString = "\0\0\0\2FECEncodeSegment\nMetadataLength=" + Long.toHexString(headerString.length()) + "\nDataLength=" + Long.toHexString(headerString.length() + segLength) + "\nData\n" + headerString [CD]
Line_47 $$ String headerString = "SegmentHeader\n" + ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).reconstruct() + "EndMessage\n" --> Line_48 $$ String dataHeaderString = "\0\0\0\2FECEncodeSegment\nMetadataLength=" + Long.toHexString(headerString.length()) + "\nDataLength=" + Long.toHexString(headerString.length() + segLength) + "\nData\n" + headerString [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_49 $$ System.out.print(dataHeaderString) [CD]
Line_48 $$ String dataHeaderString = "\0\0\0\2FECEncodeSegment\nMetadataLength=" + Long.toHexString(headerString.length()) + "\nDataLength=" + Long.toHexString(headerString.length() + segLength) + "\nData\n" + headerString --> Line_49 $$ System.out.print(dataHeaderString) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_50 $$ fcpOut.print(dataHeaderString) [CD]
Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) --> Line_50 $$ fcpOut.print(dataHeaderString) [FD]
Line_32 $$ PrintStream fcpOut --> Line_50 $$ fcpOut.print(dataHeaderString) [FD]
Line_48 $$ String dataHeaderString = "\0\0\0\2FECEncodeSegment\nMetadataLength=" + Long.toHexString(headerString.length()) + "\nDataLength=" + Long.toHexString(headerString.length() + segLength) + "\nData\n" + headerString --> Line_50 $$ fcpOut.print(dataHeaderString) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_51 $$ long count = 0 [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_52 $$ while (count < segLength) [CD]
Line_51 $$ long count = 0 --> Line_52 $$ while (count < segLength) [FD]
Line_45 $$ long segLength = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount * ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize --> Line_52 $$ while (count < segLength) [FD]
Line_52 $$ while (count < segLength) --> Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] [CD]
Line_4 $$ Vector segmentHeaders = null --> Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] [FD]
Line_52 $$ while (count < segLength) --> Line_54 $$ System.out.println(Long.toHexString(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset + count)) [CD]
Line_4 $$ Vector segmentHeaders = null --> Line_54 $$ System.out.println(Long.toHexString(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset + count)) [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_54 $$ System.out.println(Long.toHexString(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset + count)) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_54 $$ System.out.println(Long.toHexString(((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).Offset + count)) [FD]
Line_52 $$ while (count < segLength) --> Line_55 $$ int inbytes = fileIn.read(buffer) [CD]
Line_40 $$ FileInputStream fileIn = new FileInputStream(file) --> Line_55 $$ int inbytes = fileIn.read(buffer) [FD]
Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] --> Line_55 $$ int inbytes = fileIn.read(buffer) [FD]
Line_52 $$ while (count < segLength) --> Line_56 $$ if (inbytes < 0) [CD]
Line_55 $$ int inbytes = fileIn.read(buffer) --> Line_56 $$ if (inbytes < 0) [FD]
Line_56 $$ if (inbytes < 0) --> Line_57 $$ System.out.println("End of input file - no data") [CD]
Line_56 $$ if (inbytes < 0) --> Line_58 $$ for (int j = 0; j < buffer.length; j++) buffer[j] = 0 [CD]
Line_56 $$ if (inbytes < 0) --> Line_59 $$ inbytes = buffer.length [CD]
Line_55 $$ int inbytes = fileIn.read(buffer) --> Line_59 $$ inbytes = buffer.length [FD]
Line_52 $$ while (count < segLength) --> Line_61 $$ if (inbytes < buffer.length) [CD]
Line_55 $$ int inbytes = fileIn.read(buffer) --> Line_61 $$ if (inbytes < buffer.length) [FD]
Line_59 $$ inbytes = buffer.length --> Line_61 $$ if (inbytes < buffer.length) [FD]
Line_61 $$ if (inbytes < buffer.length) --> Line_62 $$ System.out.println("End of input file - not enough data") [CD]
Line_61 $$ if (inbytes < buffer.length) --> Line_63 $$ for (int j = inbytes; j < buffer.length; j++) buffer[j] = 0 [CD]
Line_58 $$ for (int j = 0; j < buffer.length; j++) buffer[j] = 0 --> Line_63 $$ for (int j = inbytes; j < buffer.length; j++) buffer[j] = 0 [FD]
Line_61 $$ if (inbytes < buffer.length) --> Line_64 $$ inbytes = buffer.length [CD]
Line_55 $$ int inbytes = fileIn.read(buffer) --> Line_64 $$ inbytes = buffer.length [FD]
Line_59 $$ inbytes = buffer.length --> Line_64 $$ inbytes = buffer.length [FD]
Line_52 $$ while (count < segLength) --> Line_66 $$ inbytes = (int) (segLength - count) [CD]
Line_55 $$ int inbytes = fileIn.read(buffer) --> Line_66 $$ inbytes = (int) (segLength - count) [FD]
Line_59 $$ inbytes = buffer.length --> Line_66 $$ inbytes = (int) (segLength - count) [FD]
Line_64 $$ inbytes = buffer.length --> Line_66 $$ inbytes = (int) (segLength - count) [FD]
Line_52 $$ while (count < segLength) --> Line_67 $$ fcpOut.write(buffer) [CD]
Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) --> Line_67 $$ fcpOut.write(buffer) [FD]
Line_32 $$ PrintStream fcpOut --> Line_67 $$ fcpOut.write(buffer) [FD]
Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] --> Line_67 $$ fcpOut.write(buffer) [FD]
Line_52 $$ while (count < segLength) --> Line_70 $$ uploadMe.deleteOnExit() [CD]
Line_52 $$ while (count < segLength) --> Line_72 $$ fileOut.write(buffer, 0, (int) inbytes) [CD]
Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] --> Line_72 $$ fileOut.write(buffer, 0, (int) inbytes) [FD]
Line_52 $$ while (count < segLength) --> Line_73 $$ fileOut.close() [CD]
Line_52 $$ while (count < segLength) --> Line_74 $$ count += inbytes [CD]
Line_51 $$ long count = 0 --> Line_74 $$ count += inbytes [FD]
Line_55 $$ int inbytes = fileIn.read(buffer) --> Line_74 $$ count += inbytes [FD]
Line_59 $$ inbytes = buffer.length --> Line_74 $$ count += inbytes [FD]
Line_64 $$ inbytes = buffer.length --> Line_74 $$ count += inbytes [FD]
Line_66 $$ inbytes = (int) (segLength - count) --> Line_74 $$ count += inbytes [FD]
Line_52 $$ while (count < segLength) --> Line_75 $$ chunkCnt++ [CD]
Line_26 $$ int chunkCnt = 0 --> Line_75 $$ chunkCnt++ [FD]
Line_52 $$ while (count < segLength) --> Line_77 $$ blockNo++ [CD]
Line_35 $$ int blockNo = 0 --> Line_77 $$ blockNo++ [FD]
Line_52 $$ while (count < segLength) --> Line_78 $$ if (blockNo >= blockCount) [CD]
Line_35 $$ int blockNo = 0 --> Line_78 $$ if (blockNo >= blockCount) [FD]
Line_34 $$ int blockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockCount --> Line_78 $$ if (blockNo >= blockCount) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_80 $$ segmentFileMaps.add(chunkFiles) [CD]
Line_5 $$ Vector segmentFileMaps = new Vector() --> Line_80 $$ segmentFileMaps.add(chunkFiles) [FD]
Line_41 $$ File[] chunkFiles = new File[blockCount] --> Line_80 $$ segmentFileMaps.add(chunkFiles) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_81 $$ fcpOut.flush() [CD]
Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) --> Line_81 $$ fcpOut.flush() [FD]
Line_32 $$ PrintStream fcpOut --> Line_81 $$ fcpOut.flush() [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_82 $$ fileIn.close() [CD]
Line_40 $$ FileInputStream fileIn = new FileInputStream(file) --> Line_82 $$ fileIn.close() [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_85 $$ int checkBlockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockCount [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_85 $$ int checkBlockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockCount [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_85 $$ int checkBlockCount = (int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockCount [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_91 $$ long checkBlockSize = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockSize [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_91 $$ long checkBlockSize = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockSize [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_91 $$ long checkBlockSize = ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).CheckBlockSize [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_94 $$ do [CD]
Line_94 $$ do --> Line_95 $$ boolean started = false [CD]
Line_94 $$ do --> Line_96 $$ currentLine = fecutils.getLine(fcpIn).trim() [CD]
Line_3 $$ FcpFECUtils fecutils = null --> Line_96 $$ currentLine = fecutils.getLine(fcpIn).trim() [FD]
Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) --> Line_96 $$ currentLine = fecutils.getLine(fcpIn).trim() [FD]
Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) --> Line_96 $$ currentLine = fecutils.getLine(fcpIn).trim() [FD]
Line_31 $$ BufferedInputStream fcpIn --> Line_96 $$ currentLine = fecutils.getLine(fcpIn).trim() [FD]
Line_94 $$ do --> Line_97 $$ if (currentLine.equals("DataChunk")) [CD]
Line_97 $$ if (currentLine.equals("DataChunk")) --> Line_98 $$ started = true [CD]
Line_95 $$ boolean started = false --> Line_98 $$ started = true [FD]
Line_94 $$ do --> Line_100 $$ if (currentLine.startsWith("Length=")) [CD]
Line_100 $$ if (currentLine.startsWith("Length=")) --> Line_101 $$ length = Integer.parseInt((currentLine.split("="))[1], 16) [CD]
Line_94 $$ do --> Line_103 $$ if (currentLine.equals("Data")) [CD]
Line_103 $$ if (currentLine.equals("Data")) --> Line_104 $$ int currentRead [CD]
Line_103 $$ if (currentLine.equals("Data")) --> Line_105 $$ byte[] buffer = new byte[(int) length] [CD]
Line_103 $$ if (currentLine.equals("Data")) --> Line_106 $$ if (uploadMe == null) [CD]
Line_106 $$ if (uploadMe == null) --> Line_108 $$ uploadMe.deleteOnExit() [CD]
Line_103 $$ if (currentLine.equals("Data")) --> Line_111 $$ currentRead = fcpIn.read(buffer) [CD]
Line_104 $$ int currentRead --> Line_111 $$ currentRead = fcpIn.read(buffer) [FD]
Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) --> Line_111 $$ currentRead = fcpIn.read(buffer) [FD]
Line_31 $$ BufferedInputStream fcpIn --> Line_111 $$ currentRead = fcpIn.read(buffer) [FD]
Line_105 $$ byte[] buffer = new byte[(int) length] --> Line_111 $$ currentRead = fcpIn.read(buffer) [FD]
Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] --> Line_111 $$ currentRead = fcpIn.read(buffer) [FD]
Line_103 $$ if (currentLine.equals("Data")) --> Line_112 $$ while (currentRead < length) [CD]
Line_104 $$ int currentRead --> Line_112 $$ while (currentRead < length) [FD]
Line_111 $$ currentRead = fcpIn.read(buffer) --> Line_112 $$ while (currentRead < length) [FD]
Line_112 $$ while (currentRead < length) --> Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) [CD]
Line_104 $$ int currentRead --> Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) [FD]
Line_111 $$ currentRead = fcpIn.read(buffer) --> Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) [FD]
Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) --> Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) [FD]
Line_31 $$ BufferedInputStream fcpIn --> Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) [FD]
Line_105 $$ byte[] buffer = new byte[(int) length] --> Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) [FD]
Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] --> Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) [FD]
Line_103 $$ if (currentLine.equals("Data")) --> Line_115 $$ outFile.write(buffer) [CD]
Line_105 $$ byte[] buffer = new byte[(int) length] --> Line_115 $$ outFile.write(buffer) [FD]
Line_53 $$ byte[] buffer = new byte[(int) ((FcpFECUtilsSegmentHeader) segmentHeaders.get(i)).BlockSize] --> Line_115 $$ outFile.write(buffer) [FD]
Line_103 $$ if (currentLine.equals("Data")) --> Line_117 $$ if (checkPtr == checkBlockSize) [CD]
Line_117 $$ if (checkPtr == checkBlockSize) --> Line_118 $$ outFile.close() [CD]
Line_117 $$ if (checkPtr == checkBlockSize) --> Line_122 $$ checkCnt++ [CD]
Line_27 $$ int checkCnt = 0 --> Line_122 $$ checkCnt++ [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_127 $$ checkFileMaps.add(checkFiles) [CD]
Line_6 $$ Vector checkFileMaps = new Vector() --> Line_127 $$ checkFileMaps.add(checkFiles) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_129 $$ fcpOut.close() [CD]
Line_38 $$ fcpOut = new PrintStream(fcpSock.getOutputStream()) --> Line_129 $$ fcpOut.close() [FD]
Line_32 $$ PrintStream fcpOut --> Line_129 $$ fcpOut.close() [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_130 $$ fcpIn.close() [CD]
Line_39 $$ fcpIn = new BufferedInputStream(fcpSock.getInputStream()) --> Line_130 $$ fcpIn.close() [FD]
Line_31 $$ BufferedInputStream fcpIn --> Line_130 $$ fcpIn.close() [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_131 $$ fcpSock.close() [CD]
Line_36 $$ fcpSock = new Socket(InetAddress.getByName(frame1.frostSettings.getValue("nodeAddress")), frame1.frostSettings.getIntValue("nodePort")) --> Line_131 $$ fcpSock.close() [FD]
Line_30 $$ Socket fcpSock --> Line_131 $$ fcpSock.close() [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_137 $$ int chunkNo = 0 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_138 $$ int uploadedBytes = 0 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) [CD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) [FD]
Line_5 $$ Vector segmentFileMaps = new Vector() --> Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) [FD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_140 $$ File[] currentFileMap = (File[]) segmentFileMaps.get(i) [CD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_140 $$ File[] currentFileMap = (File[]) segmentFileMaps.get(i) [FD]
Line_5 $$ Vector segmentFileMaps = new Vector() --> Line_140 $$ File[] currentFileMap = (File[]) segmentFileMaps.get(i) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_140 $$ File[] currentFileMap = (File[]) segmentFileMaps.get(i) [FD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_141 $$ chunkThreads = new Thread[currentFileMap.length] [CD]
Line_12 $$ Thread[] chunkThreads = null --> Line_141 $$ chunkThreads = new Thread[currentFileMap.length] [FD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_142 $$ chunkResults = new String[currentFileMap.length][2] [CD]
Line_13 $$ String[][] chunkResults = null --> Line_142 $$ chunkResults = new String[currentFileMap.length][2] [FD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_143 $$ threadCount = 0 [CD]
Line_16 $$ int threadCount = 0 --> Line_143 $$ threadCount = 0 [FD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) [CD]
Line_63 $$ for (int j = inbytes; j < buffer.length; j++) buffer[j] = 0 --> Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) [FD]
Line_58 $$ for (int j = 0; j < buffer.length; j++) buffer[j] = 0 --> Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) [FD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_145 $$ System.out.println("Chunk: " + chunkNo) [CD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_146 $$ while (getActiveThreads(chunkThreads) >= maxThreads) mixed.wait(5000) [CD]
Line_11 $$ int maxThreads = frame1.frostSettings.getIntValue("splitfileUploadThreads") --> Line_146 $$ while (getActiveThreads(chunkThreads) >= maxThreads) mixed.wait(5000) [FD]
Line_141 $$ chunkThreads = new Thread[currentFileMap.length] --> Line_146 $$ while (getActiveThreads(chunkThreads) >= maxThreads) mixed.wait(5000) [FD]
Line_12 $$ Thread[] chunkThreads = null --> Line_146 $$ while (getActiveThreads(chunkThreads) >= maxThreads) mixed.wait(5000) [FD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_147 $$ chunkThreads[threadCount] = new putKeyThread("CHK@", currentFileMap[j], htl, chunkResults, threadCount, mode) [CD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_148 $$ chunkThreads[threadCount].start() [CD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_149 $$ threadCount++ [CD]
Line_143 $$ threadCount = 0 --> Line_149 $$ threadCount++ [FD]
Line_16 $$ int threadCount = 0 --> Line_149 $$ threadCount++ [FD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_150 $$ uploadedBytes += currentFileMap[j].length() [CD]
Line_138 $$ int uploadedBytes = 0 --> Line_150 $$ uploadedBytes += currentFileMap[j].length() [FD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_151 $$ updateUploadTable(file, uploadedBytes, mode) [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_151 $$ updateUploadTable(file, uploadedBytes, mode) [FD]
Line_150 $$ uploadedBytes += currentFileMap[j].length() --> Line_151 $$ updateUploadTable(file, uploadedBytes, mode) [FD]
Line_138 $$ int uploadedBytes = 0 --> Line_151 $$ updateUploadTable(file, uploadedBytes, mode) [FD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_152 $$ mixed.wait(1000) [CD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_153 $$ chunkNo++ [CD]
Line_137 $$ int chunkNo = 0 --> Line_153 $$ chunkNo++ [FD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_155 $$ while (getActiveThreads(chunkThreads) > 0) [CD]
Line_141 $$ chunkThreads = new Thread[currentFileMap.length] --> Line_155 $$ while (getActiveThreads(chunkThreads) > 0) [FD]
Line_12 $$ Thread[] chunkThreads = null --> Line_155 $$ while (getActiveThreads(chunkThreads) > 0) [FD]
Line_155 $$ while (getActiveThreads(chunkThreads) > 0) --> Line_156 $$ System.out.println("Active Splitfile inserts remaining: " + getActiveThreads(chunkThreads)) [CD]
Line_141 $$ chunkThreads = new Thread[currentFileMap.length] --> Line_156 $$ System.out.println("Active Splitfile inserts remaining: " + getActiveThreads(chunkThreads)) [FD]
Line_12 $$ Thread[] chunkThreads = null --> Line_156 $$ System.out.println("Active Splitfile inserts remaining: " + getActiveThreads(chunkThreads)) [FD]
Line_155 $$ while (getActiveThreads(chunkThreads) > 0) --> Line_157 $$ mixed.wait(3000) [CD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_159 $$ segmentKeyMaps.add(chunkResults) [CD]
Line_7 $$ Vector segmentKeyMaps = new Vector() --> Line_159 $$ segmentKeyMaps.add(chunkResults) [FD]
Line_142 $$ chunkResults = new String[currentFileMap.length][2] --> Line_159 $$ segmentKeyMaps.add(chunkResults) [FD]
Line_13 $$ String[][] chunkResults = null --> Line_159 $$ segmentKeyMaps.add(chunkResults) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_161 $$ int checkNo = 0 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) [CD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) [FD]
Line_6 $$ Vector checkFileMaps = new Vector() --> Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) [FD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_163 $$ File[] currentFileMap = (File[]) checkFileMaps.get(i) [CD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_163 $$ File[] currentFileMap = (File[]) checkFileMaps.get(i) [FD]
Line_6 $$ Vector checkFileMaps = new Vector() --> Line_163 $$ File[] currentFileMap = (File[]) checkFileMaps.get(i) [FD]
Line_139 $$ for (int i = 0; i < segmentFileMaps.size(); i++) --> Line_163 $$ File[] currentFileMap = (File[]) checkFileMaps.get(i) [FD]
Line_33 $$ for (int i = 0; i < segmentHeaders.size(); i++) --> Line_163 $$ File[] currentFileMap = (File[]) checkFileMaps.get(i) [FD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_164 $$ checkThreads = new Thread[currentFileMap.length] [CD]
Line_14 $$ Thread[] checkThreads = null --> Line_164 $$ checkThreads = new Thread[currentFileMap.length] [FD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_165 $$ checkResults = new String[currentFileMap.length][2] [CD]
Line_15 $$ String[][] checkResults = null --> Line_165 $$ checkResults = new String[currentFileMap.length][2] [FD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_166 $$ threadCount = 0 [CD]
Line_143 $$ threadCount = 0 --> Line_166 $$ threadCount = 0 [FD]
Line_16 $$ int threadCount = 0 --> Line_166 $$ threadCount = 0 [FD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) [CD]
Line_144 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) [FD]
Line_63 $$ for (int j = inbytes; j < buffer.length; j++) buffer[j] = 0 --> Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) [FD]
Line_58 $$ for (int j = 0; j < buffer.length; j++) buffer[j] = 0 --> Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) [FD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_168 $$ System.out.println("Check: " + checkNo) [CD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_169 $$ while (getActiveThreads(checkThreads) >= maxThreads) mixed.wait(5000) [CD]
Line_11 $$ int maxThreads = frame1.frostSettings.getIntValue("splitfileUploadThreads") --> Line_169 $$ while (getActiveThreads(checkThreads) >= maxThreads) mixed.wait(5000) [FD]
Line_164 $$ checkThreads = new Thread[currentFileMap.length] --> Line_169 $$ while (getActiveThreads(checkThreads) >= maxThreads) mixed.wait(5000) [FD]
Line_14 $$ Thread[] checkThreads = null --> Line_169 $$ while (getActiveThreads(checkThreads) >= maxThreads) mixed.wait(5000) [FD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_170 $$ checkThreads[threadCount] = new putKeyThread("CHK@", currentFileMap[j], htl, checkResults, threadCount, mode) [CD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_171 $$ checkThreads[threadCount].start() [CD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_172 $$ threadCount++ [CD]
Line_166 $$ threadCount = 0 --> Line_172 $$ threadCount++ [FD]
Line_143 $$ threadCount = 0 --> Line_172 $$ threadCount++ [FD]
Line_16 $$ int threadCount = 0 --> Line_172 $$ threadCount++ [FD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_173 $$ uploadedBytes += currentFileMap[j].length() [CD]
Line_150 $$ uploadedBytes += currentFileMap[j].length() --> Line_173 $$ uploadedBytes += currentFileMap[j].length() [FD]
Line_138 $$ int uploadedBytes = 0 --> Line_173 $$ uploadedBytes += currentFileMap[j].length() [FD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_174 $$ updateUploadTable(file, uploadedBytes, mode) [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_174 $$ updateUploadTable(file, uploadedBytes, mode) [FD]
Line_173 $$ uploadedBytes += currentFileMap[j].length() --> Line_174 $$ updateUploadTable(file, uploadedBytes, mode) [FD]
Line_150 $$ uploadedBytes += currentFileMap[j].length() --> Line_174 $$ updateUploadTable(file, uploadedBytes, mode) [FD]
Line_138 $$ int uploadedBytes = 0 --> Line_174 $$ updateUploadTable(file, uploadedBytes, mode) [FD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_175 $$ mixed.wait(1000) [CD]
Line_167 $$ for (int j = 0; j < currentFileMap.length; j++) --> Line_176 $$ checkNo++ [CD]
Line_161 $$ int checkNo = 0 --> Line_176 $$ checkNo++ [FD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_178 $$ while (getActiveThreads(checkThreads) > 0) [CD]
Line_164 $$ checkThreads = new Thread[currentFileMap.length] --> Line_178 $$ while (getActiveThreads(checkThreads) > 0) [FD]
Line_14 $$ Thread[] checkThreads = null --> Line_178 $$ while (getActiveThreads(checkThreads) > 0) [FD]
Line_178 $$ while (getActiveThreads(checkThreads) > 0) --> Line_179 $$ System.out.println("Active Checkblock inserts remaining: " + getActiveThreads(checkThreads)) [CD]
Line_164 $$ checkThreads = new Thread[currentFileMap.length] --> Line_179 $$ System.out.println("Active Checkblock inserts remaining: " + getActiveThreads(checkThreads)) [FD]
Line_14 $$ Thread[] checkThreads = null --> Line_179 $$ System.out.println("Active Checkblock inserts remaining: " + getActiveThreads(checkThreads)) [FD]
Line_178 $$ while (getActiveThreads(checkThreads) > 0) --> Line_180 $$ mixed.wait(3000) [CD]
Line_162 $$ for (int i = 0; i < checkFileMaps.size(); i++) --> Line_182 $$ checkKeyMaps.add(checkResults) [CD]
Line_8 $$ Vector checkKeyMaps = new Vector() --> Line_182 $$ checkKeyMaps.add(checkResults) [FD]
Line_165 $$ checkResults = new String[currentFileMap.length][2] --> Line_182 $$ checkKeyMaps.add(checkResults) [FD]
Line_15 $$ String[][] checkResults = null --> Line_182 $$ checkKeyMaps.add(checkResults) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_184 $$ checkThreads = null [CD]
Line_164 $$ checkThreads = new Thread[currentFileMap.length] --> Line_184 $$ checkThreads = null [FD]
Line_14 $$ Thread[] checkThreads = null --> Line_184 $$ checkThreads = null [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_186 $$ String redirect = null [CD]
Line_3 $$ FcpFECUtils fecutils = null --> Line_188 $$ synchronized (fecutils.getClass()) [FD]
Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) --> Line_188 $$ synchronized (fecutils.getClass()) [FD]
Line_186 $$ String redirect = null --> Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") [FD]
Line_3 $$ FcpFECUtils fecutils = null --> Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") [FD]
Line_19 $$ fecutils = new FcpFECUtils(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getIntValue("nodePort")) --> Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") [FD]
Line_4 $$ Vector segmentHeaders = null --> Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") [FD]
Line_22 $$ segmentHeaders = fecutils.FECSegmentFile("OnionFEC_a_1_2", fileLength) --> Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") [FD]
Line_7 $$ Vector segmentKeyMaps = new Vector() --> Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") [FD]
Line_8 $$ Vector checkKeyMaps = new Vector() --> Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_195 $$ String[] sortedRedirect = redirect.split("\n") [CD]
Line_186 $$ String redirect = null --> Line_195 $$ String[] sortedRedirect = redirect.split("\n") [FD]
Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") --> Line_195 $$ String[] sortedRedirect = redirect.split("\n") [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_196 $$ for (int z = 0; z < sortedRedirect.length; z++) System.out.println(sortedRedirect[z]) [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_197 $$ int sortStart = -1 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_198 $$ int sortEnd = -1 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_199 $$ for (int line = 0; line < sortedRedirect.length; line++) [CD]
Line_199 $$ for (int line = 0; line < sortedRedirect.length; line++) --> Line_200 $$ if (sortedRedirect[line].equals("Document")) [CD]
Line_200 $$ if (sortedRedirect[line].equals("Document")) --> Line_201 $$ sortStart = line + 1 [CD]
Line_197 $$ int sortStart = -1 --> Line_201 $$ sortStart = line + 1 [FD]
Line_199 $$ for (int line = 0; line < sortedRedirect.length; line++) --> Line_201 $$ sortStart = line + 1 [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_205 $$ for (int line = sortStart; line < sortedRedirect.length; line++) [CD]
Line_199 $$ for (int line = 0; line < sortedRedirect.length; line++) --> Line_205 $$ for (int line = sortStart; line < sortedRedirect.length; line++) [FD]
Line_205 $$ for (int line = sortStart; line < sortedRedirect.length; line++) --> Line_206 $$ if (sortedRedirect[line].equals("End")) [CD]
Line_206 $$ if (sortedRedirect[line].equals("End")) --> Line_207 $$ sortEnd = line [CD]
Line_198 $$ int sortEnd = -1 --> Line_207 $$ sortEnd = line [FD]
Line_205 $$ for (int line = sortStart; line < sortedRedirect.length; line++) --> Line_207 $$ sortEnd = line [FD]
Line_199 $$ for (int line = 0; line < sortedRedirect.length; line++) --> Line_207 $$ sortEnd = line [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_211 $$ System.out.println("sortStart " + sortStart + " sortEnd " + sortEnd) [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_212 $$ Arrays.sort(sortedRedirect, sortStart, sortEnd) [CD]
Line_201 $$ sortStart = line + 1 --> Line_212 $$ Arrays.sort(sortedRedirect, sortStart, sortEnd) [FD]
Line_197 $$ int sortStart = -1 --> Line_212 $$ Arrays.sort(sortedRedirect, sortStart, sortEnd) [FD]
Line_207 $$ sortEnd = line --> Line_212 $$ Arrays.sort(sortedRedirect, sortStart, sortEnd) [FD]
Line_198 $$ int sortEnd = -1 --> Line_212 $$ Arrays.sort(sortedRedirect, sortStart, sortEnd) [FD]
Line_195 $$ String[] sortedRedirect = redirect.split("\n") --> Line_212 $$ Arrays.sort(sortedRedirect, sortStart, sortEnd) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_213 $$ redirect = new String() [CD]
Line_186 $$ String redirect = null --> Line_213 $$ redirect = new String() [FD]
Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") --> Line_213 $$ redirect = new String() [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" [CD]
Line_205 $$ for (int line = sortStart; line < sortedRedirect.length; line++) --> Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" [FD]
Line_199 $$ for (int line = 0; line < sortedRedirect.length; line++) --> Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" [FD]
Line_186 $$ String redirect = null --> Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" [FD]
Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") --> Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" [FD]
Line_213 $$ redirect = new String() --> Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_215 $$ System.out.println(redirect) [CD]
Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" --> Line_215 $$ System.out.println(redirect) [FD]
Line_186 $$ String redirect = null --> Line_215 $$ System.out.println(redirect) [FD]
Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") --> Line_215 $$ System.out.println(redirect) [FD]
Line_213 $$ redirect = new String() --> Line_215 $$ System.out.println(redirect) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_217 $$ int tries = 0 [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_218 $$ String[] result = [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_219 $$ while (!result[0].equals("Success") && !result[0].equals("KeyCollision") && tries < 8) [CD]
Line_219 $$ while (!result[0].equals("Success") && !result[0].equals("KeyCollision") && tries < 8) --> Line_220 $$ tries++ [CD]
Line_217 $$ int tries = 0 --> Line_220 $$ tries++ [FD]
Line_10 $$ String output = new String() --> Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) [FD]
Line_222 $$ FcpConnection connection = new FcpConnection(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getValue("nodePort")) --> Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) [FD]
Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" --> Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) [FD]
Line_186 $$ String redirect = null --> Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) [FD]
Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") --> Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) [FD]
Line_213 $$ redirect = new String() --> Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) [FD]
Line_219 $$ while (!result[0].equals("Success") && !result[0].equals("KeyCollision") && tries < 8) --> Line_234 $$ result = result(output) [CD]
Line_218 $$ String[] result = --> Line_234 $$ result = result(output) [FD]
Line_223 $$ output = connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, mode) --> Line_234 $$ result = result(output) [FD]
Line_10 $$ String output = new String() --> Line_234 $$ result = result(output) [FD]
Line_219 $$ while (!result[0].equals("Success") && !result[0].equals("KeyCollision") && tries < 8) --> Line_235 $$ mixed.wait(3000) [CD]
Line_219 $$ while (!result[0].equals("Success") && !result[0].equals("KeyCollision") && tries < 8) --> Line_236 $$ System.out.println("*****" + result[0] + " " + result[1] + " ") [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_238 $$ if ((result[0].equals("Success") || result[0].equals("KeyCollision")) && mode) [CD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_238 $$ if ((result[0].equals("Success") || result[0].equals("KeyCollision")) && mode) [FD]
Line_240 $$ GregorianCalendar cal = new GregorianCalendar() --> Line_241 $$ cal.setTimeZone(TimeZone.getTimeZone("GMT")) [FD]
Line_240 $$ GregorianCalendar cal = new GregorianCalendar() --> Line_242 $$ String dirdate = cal.get(Calendar.YEAR) + "." [FD]
Line_242 $$ String dirdate = cal.get(Calendar.YEAR) + "." --> Line_243 $$ dirdate += cal.get(Calendar.MONTH) + 1 + "." [FD]
Line_240 $$ GregorianCalendar cal = new GregorianCalendar() --> Line_243 $$ dirdate += cal.get(Calendar.MONTH) + 1 + "." [FD]
Line_242 $$ String dirdate = cal.get(Calendar.YEAR) + "." --> Line_244 $$ dirdate += cal.get(Calendar.DATE) [FD]
Line_243 $$ dirdate += cal.get(Calendar.MONTH) + 1 + "." --> Line_244 $$ dirdate += cal.get(Calendar.DATE) [FD]
Line_240 $$ GregorianCalendar cal = new GregorianCalendar() --> Line_244 $$ dirdate += cal.get(Calendar.DATE) [FD]
Line_222 $$ FcpConnection connection = new FcpConnection(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getValue("nodePort")) --> Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] [FD]
Line_247 $$ FcpConnection connection = new FcpConnection(frame1.frostSettings.getValue("nodeAddress"), frame1.frostSettings.getValue("nodePort")) --> Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] [FD]
Line_214 $$ for (int line = 0; line < sortedRedirect.length; line++) redirect += sortedRedirect[line] + "\n" --> Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] [FD]
Line_186 $$ String redirect = null --> Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] [FD]
Line_190 $$ redirect = fecutils.FECMakeMetadata(segmentHeaders, segmentKeyMaps, checkKeyMaps, "Frost") --> Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] [FD]
Line_213 $$ redirect = new String() --> Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] [FD]
Line_248 $$ String contentKey = result(connection.putKeyFromFile(uri, null, redirect.getBytes(), htl, false))[1] --> Line_250 $$ contentKey = contentKey.substring(prefix.length()) [FD]
Line_249 $$ String prefix = new String("freenet:") --> Line_250 $$ contentKey = contentKey.substring(prefix.length()) [FD]
Line_2 $$ public static String[] putFECSplitFile(String uri, File file, int htl, boolean mode) --> Line_255 $$ return result [CD]
Line_74 $$ count += inbytes --> Line_52 $$ while (count < segLength) [FD]
Line_59 $$ inbytes = buffer.length --> Line_56 $$ if (inbytes < 0) [FD]
Line_64 $$ inbytes = buffer.length --> Line_56 $$ if (inbytes < 0) [FD]
Line_66 $$ inbytes = (int) (segLength - count) --> Line_56 $$ if (inbytes < 0) [FD]
Line_64 $$ inbytes = buffer.length --> Line_61 $$ if (inbytes < buffer.length) [FD]
Line_66 $$ inbytes = (int) (segLength - count) --> Line_61 $$ if (inbytes < buffer.length) [FD]
Line_113 $$ currentRead += fcpIn.read(buffer, currentRead, length - currentRead) --> Line_112 $$ while (currentRead < length) [FD]
