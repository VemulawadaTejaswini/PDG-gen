Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_3 $$ KeyPair keyPair = MiscTestUtils.generateKeyPair() [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_4 $$ DateTime notBefore = new DateTime() [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_5 $$ DateTime notAfter = notBefore.plusYears(1) [CD]
Line_4 $$ DateTime notBefore = new DateTime() --> Line_5 $$ DateTime notAfter = notBefore.plusYears(1) [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_6 $$ X509Certificate certificate = MiscTestUtils.generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null) [CD]
Line_4 $$ DateTime notBefore = new DateTime() --> Line_6 $$ X509Certificate certificate = MiscTestUtils.generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null) [FD]
Line_5 $$ DateTime notAfter = notBefore.plusYears(1) --> Line_6 $$ X509Certificate certificate = MiscTestUtils.generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null) [FD]
Line_3 $$ KeyPair keyPair = MiscTestUtils.generateKeyPair() --> Line_6 $$ X509Certificate certificate = MiscTestUtils.generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null) [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_7 $$ ServletConfig mockServletConfig = EasyMock.createMock(ServletConfig.class) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_8 $$ Map<String, String> httpHeaders = new HashMap<String, String>() [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_9 $$ HttpSession mockHttpSession = EasyMock.createMock(HttpSession.class) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_10 $$ HttpServletRequest mockServletRequest = EasyMock.createMock(HttpServletRequest.class) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_11 $$ EasyMock.expect(mockServletConfig.getInitParameter("AuditService")).andStubReturn(null) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_12 $$ EasyMock.expect(mockServletConfig.getInitParameter("AuditServiceClass")).andStubReturn(AuditTestService.class.getName()) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_13 $$ EasyMock.expect(mockServletConfig.getInitParameter("SignatureService")).andStubReturn(null) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_14 $$ EasyMock.expect(mockServletConfig.getInitParameter("SignatureServiceClass")).andStubReturn(SignatureTestService.class.getName()) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_15 $$ EasyMock.expect(mockServletRequest.getRemoteAddr()).andStubReturn("remote-address") [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_16 $$ MessageDigest messageDigest = MessageDigest.getInstance("SHA1") [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_17 $$ byte[] document = "hello world".getBytes() [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_18 $$ byte[] digestValue = messageDigest.digest(document) [CD]
Line_16 $$ MessageDigest messageDigest = MessageDigest.getInstance("SHA1") --> Line_18 $$ byte[] digestValue = messageDigest.digest(document) [FD]
Line_17 $$ byte[] document = "hello world".getBytes() --> Line_18 $$ byte[] digestValue = messageDigest.digest(document) [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_19 $$ EasyMock.expect(mockHttpSession.getAttribute(SignatureDataMessageHandler.DIGEST_VALUE_SESSION_ATTRIBUTE)).andStubReturn(digestValue) [CD]
Line_18 $$ byte[] digestValue = messageDigest.digest(document) --> Line_19 $$ EasyMock.expect(mockHttpSession.getAttribute(SignatureDataMessageHandler.DIGEST_VALUE_SESSION_ATTRIBUTE)).andStubReturn(digestValue) [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_20 $$ EasyMock.expect(mockHttpSession.getAttribute(SignatureDataMessageHandler.DIGEST_ALGO_SESSION_ATTRIBUTE)).andStubReturn("SHA-1") [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_21 $$ SignatureDataMessage message = new SignatureDataMessage() [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_22 $$ message.certificateChain = new LinkedList<X509Certificate>() [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_23 $$ message.certificateChain.add(certificate) [CD]
Line_6 $$ X509Certificate certificate = MiscTestUtils.generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null) --> Line_23 $$ message.certificateChain.add(certificate) [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_24 $$ Signature signature = Signature.getInstance("SHA1withRSA") [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_25 $$ signature.initSign(keyPair.getPrivate()) [CD]
Line_24 $$ Signature signature = Signature.getInstance("SHA1withRSA") --> Line_25 $$ signature.initSign(keyPair.getPrivate()) [FD]
Line_3 $$ KeyPair keyPair = MiscTestUtils.generateKeyPair() --> Line_25 $$ signature.initSign(keyPair.getPrivate()) [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_26 $$ signature.update("foobar-document".getBytes()) [CD]
Line_24 $$ Signature signature = Signature.getInstance("SHA1withRSA") --> Line_26 $$ signature.update("foobar-document".getBytes()) [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_27 $$ byte[] signatureValue = signature.sign() [CD]
Line_24 $$ Signature signature = Signature.getInstance("SHA1withRSA") --> Line_27 $$ byte[] signatureValue = signature.sign() [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_28 $$ message.signatureValue = signatureValue [CD]
Line_27 $$ byte[] signatureValue = signature.sign() --> Line_28 $$ message.signatureValue = signatureValue [FD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_29 $$ EasyMock.replay(mockServletConfig, mockHttpSession, mockServletRequest) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_30 $$ AppletServiceServlet.injectInitParams(mockServletConfig, this.testedInstance) [CD]
Line_2 $$ public void testHandleMessageInvalidSignature() throws Exception --> Line_31 $$ this.testedInstance.init(mockServletConfig) [CD]
Line_21 $$ SignatureDataMessage message = new SignatureDataMessage() --> Line_33 $$ this.testedInstance.handleMessage(message, httpHeaders, mockServletRequest, mockHttpSession) [FD]
Line_8 $$ Map<String, String> httpHeaders = new HashMap<String, String>() --> Line_33 $$ this.testedInstance.handleMessage(message, httpHeaders, mockServletRequest, mockHttpSession) [FD]
Line_6 $$ X509Certificate certificate = MiscTestUtils.generateCertificate(keyPair.getPublic(), "CN=Test", notBefore, notAfter, null, keyPair.getPrivate(), true, 0, null, null) --> Line_40 $$ assertEquals(certificate, AuditTestService.getAuditSignatureClientCertificate()) [FD]
