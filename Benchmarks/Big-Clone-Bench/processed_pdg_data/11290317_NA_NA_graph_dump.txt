Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_3 $$ AbstractSRLParser labeler = null [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_4 $$ AbstractDecoder[] decoder = null [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_5 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_5 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) [FD]
Line_5 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) --> Line_6 $$ System.out.println("\n* Save lexica") [CD]
Line_5 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) --> Line_7 $$ labeler = new SRLParser(flag, s_featureXml) [CD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_7 $$ labeler = new SRLParser(flag, s_featureXml) [FD]
Line_5 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) --> Line_8 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_8 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [FD]
Line_8 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) --> Line_9 $$ System.out.println("\n* Print training instances") [CD]
Line_8 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) --> Line_10 $$ System.out.println("- loading lexica") [CD]
Line_8 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) --> Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) [CD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) [FD]
Line_7 $$ labeler = new SRLParser(flag, s_featureXml) --> Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) [FD]
Line_8 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) --> Line_12 $$ if (flag == SRLParser.FLAG_TRAIN_BOOST) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_12 $$ if (flag == SRLParser.FLAG_TRAIN_BOOST) [FD]
Line_12 $$ if (flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_13 $$ System.out.println("\n* Train boost") [CD]
Line_12 $$ if (flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_14 $$ decoder = new AbstractDecoder[m_model.length] [CD]
Line_4 $$ AbstractDecoder[] decoder = null --> Line_14 $$ decoder = new AbstractDecoder[m_model.length] [FD]
Line_12 $$ if (flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_15 $$ for (int i = 0; i < decoder.length; i++) decoder[i] = new OneVsAllDecoder((OneVsAllModel) m_model[i]) [CD]
Line_12 $$ if (flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) [CD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) [FD]
Line_7 $$ labeler = new SRLParser(flag, s_featureXml) --> Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) [FD]
Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) --> Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) [FD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_18 $$ AbstractReader<DepNode, DepTree> reader = new SRLReader(s_trainFile, true) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_19 $$ DepTree tree [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_20 $$ int n [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_21 $$ labeler.setLanguage(s_language) [CD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_21 $$ labeler.setLanguage(s_language) [FD]
Line_7 $$ labeler = new SRLParser(flag, s_featureXml) --> Line_21 $$ labeler.setLanguage(s_language) [FD]
Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) --> Line_21 $$ labeler.setLanguage(s_language) [FD]
Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) --> Line_21 $$ labeler.setLanguage(s_language) [FD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_22 $$ reader.setLanguage(s_language) [CD]
Line_18 $$ AbstractReader<DepNode, DepTree> reader = new SRLReader(s_trainFile, true) --> Line_22 $$ reader.setLanguage(s_language) [FD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [CD]
Line_19 $$ DepTree tree --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [FD]
Line_18 $$ AbstractReader<DepNode, DepTree> reader = new SRLReader(s_trainFile, true) --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [FD]
Line_20 $$ int n --> Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) [FD]
Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) --> Line_24 $$ labeler.parse(tree) [CD]
Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) --> Line_24 $$ labeler.parse(tree) [FD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_24 $$ labeler.parse(tree) [FD]
Line_7 $$ labeler = new SRLParser(flag, s_featureXml) --> Line_24 $$ labeler.parse(tree) [FD]
Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) --> Line_24 $$ labeler.parse(tree) [FD]
Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) --> Line_24 $$ labeler.parse(tree) [FD]
Line_19 $$ DepTree tree --> Line_24 $$ labeler.parse(tree) [FD]
Line_23 $$ for (n = 0; (tree = reader.nextTree()) != null; n++) --> Line_25 $$ System.out.printf("\r- parsing: %dK", n / 1000) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_27 $$ System.out.println("\r- labeling: " + n) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_28 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_28 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) [FD]
Line_28 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) --> Line_29 $$ System.out.println("- labeling") [CD]
Line_28 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) --> Line_30 $$ labeler.saveTags(s_lexiconFiles) [CD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_30 $$ labeler.saveTags(s_lexiconFiles) [FD]
Line_7 $$ labeler = new SRLParser(flag, s_featureXml) --> Line_30 $$ labeler.saveTags(s_lexiconFiles) [FD]
Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) --> Line_30 $$ labeler.saveTags(s_lexiconFiles) [FD]
Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) --> Line_30 $$ labeler.saveTags(s_lexiconFiles) [FD]
Line_28 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) --> Line_31 $$ t_xml = labeler.getSRLFtrXml() [CD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_31 $$ t_xml = labeler.getSRLFtrXml() [FD]
Line_7 $$ labeler = new SRLParser(flag, s_featureXml) --> Line_31 $$ t_xml = labeler.getSRLFtrXml() [FD]
Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) --> Line_31 $$ t_xml = labeler.getSRLFtrXml() [FD]
Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) --> Line_31 $$ t_xml = labeler.getSRLFtrXml() [FD]
Line_28 $$ if (flag == SRLParser.FLAG_TRAIN_LEXICON) --> Line_32 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE || flag == SRLParser.FLAG_TRAIN_BOOST) [CD]
Line_32 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE || flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_34 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_FEATURE)) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_34 $$ zout.putArchiveEntry(new JarArchiveEntry(ENTRY_FEATURE)) [FD]
Line_32 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE || flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_35 $$ IOUtils.copy(new FileInputStream(s_featureXml), zout) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_35 $$ IOUtils.copy(new FileInputStream(s_featureXml), zout) [FD]
Line_32 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE || flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_36 $$ zout.closeArchiveEntry() [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_36 $$ zout.closeArchiveEntry() [FD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_38 $$ zout.putArchiveEntry(new JarArchiveEntry(lexicaFile)) [FD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_39 $$ IOUtils.copy(new FileInputStream(lexicaFile), zout) [FD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_40 $$ zout.closeArchiveEntry() [FD]
Line_32 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE || flag == SRLParser.FLAG_TRAIN_BOOST) --> Line_42 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [CD]
Line_2 $$ private void trainSRLParser(byte flag, JarArchiveOutputStream zout) throws Exception --> Line_42 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [FD]
Line_3 $$ AbstractSRLParser labeler = null --> Line_42 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [FD]
Line_7 $$ labeler = new SRLParser(flag, s_featureXml) --> Line_42 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [FD]
Line_11 $$ labeler = new SRLParser(flag, t_xml, s_lexiconFiles) --> Line_42 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [FD]
Line_16 $$ labeler = new SRLParser(flag, t_xml, t_map, decoder) --> Line_42 $$ if (flag == SRLParser.FLAG_TRAIN_INSTANCE) [FD]
