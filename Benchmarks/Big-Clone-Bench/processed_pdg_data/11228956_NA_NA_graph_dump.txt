Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) [CD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_6 $$ AC3DPrototypeLoader.load(url.openStream(), baseURL, appFactory, geomFactory, nodeFactory, true, model, siHandler) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_9 $$ AseReader.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_9 $$ AseReader.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_12 $$ BSPPrototypeLoader.load(url.openStream(), filenameBase, baseURL, geomFactory, true, 0.03f, appFactory, nodeFactory, model, GroupType.BSP_TREE, siHandler) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_17 $$ convertZup2Yup = true [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_18 $$ COLLADALoader.load(baseURL, url.openStream(), appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_18 $$ COLLADALoader.load(baseURL, url.openStream(), appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_17 $$ convertZup2Yup = true --> Line_18 $$ COLLADALoader.load(baseURL, url.openStream(), appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_21 $$ MD2File.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_21 $$ MD2File.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_17 $$ convertZup2Yup = true --> Line_21 $$ MD2File.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_24 $$ MD3File.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_24 $$ MD3File.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_17 $$ convertZup2Yup = true --> Line_24 $$ MD3File.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_28 $$ Object[][][] boneWeights = MD5MeshReader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_28 $$ Object[][][] boneWeights = MD5MeshReader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_17 $$ convertZup2Yup = true --> Line_28 $$ Object[][][] boneWeights = MD5MeshReader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) [FD]
Line_31 $$ for (URL animURL : animResources) --> Line_32 $$ String filename = LoaderUtils.extractFilenameWithoutExt(animURL) [FD]
Line_32 $$ String filename = LoaderUtils.extractFilenameWithoutExt(animURL) --> Line_33 $$ MD5AnimationReader.load(animURL.openStream(), filename, baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, model.getShapes(), boneWeights, animFactory, siHandler, model) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_33 $$ MD5AnimationReader.load(animURL.openStream(), filename, baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, model.getShapes(), boneWeights, animFactory, siHandler, model) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_33 $$ MD5AnimationReader.load(animURL.openStream(), filename, baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, model.getShapes(), boneWeights, animFactory, siHandler, model) [FD]
Line_17 $$ convertZup2Yup = true --> Line_33 $$ MD5AnimationReader.load(animURL.openStream(), filename, baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, model.getShapes(), boneWeights, animFactory, siHandler, model) [FD]
Line_28 $$ Object[][][] boneWeights = MD5MeshReader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, animFactory, siHandler, model) --> Line_33 $$ MD5AnimationReader.load(animURL.openStream(), filename, baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, model.getShapes(), boneWeights, animFactory, siHandler, model) [FD]
Line_31 $$ for (URL animURL : animResources) --> Line_33 $$ MD5AnimationReader.load(animURL.openStream(), filename, baseURL, appFactory, geomFactory, convertZup2Yup, scale, nodeFactory, model.getShapes(), boneWeights, animFactory, siHandler, model) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_41 $$ if (scale != 1.0f) [FD]
Line_41 $$ if (scale != 1.0f) --> Line_42 $$ TransformGroup scaleGroup = new TransformGroup() [CD]
Line_41 $$ if (scale != 1.0f) --> Line_43 $$ scaleGroup.getTransform().setScale(scale) [CD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_43 $$ scaleGroup.getTransform().setScale(scale) [FD]
Line_42 $$ TransformGroup scaleGroup = new TransformGroup() --> Line_43 $$ scaleGroup.getTransform().setScale(scale) [FD]
Line_41 $$ if (scale != 1.0f) --> Line_44 $$ model.addChild(scaleGroup) [CD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_44 $$ model.addChild(scaleGroup) [FD]
Line_42 $$ TransformGroup scaleGroup = new TransformGroup() --> Line_44 $$ model.addChild(scaleGroup) [FD]
Line_41 $$ if (scale != 1.0f) --> Line_45 $$ model.setMainGroup(scaleGroup) [CD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_45 $$ model.setMainGroup(scaleGroup) [FD]
Line_42 $$ TransformGroup scaleGroup = new TransformGroup() --> Line_45 $$ model.setMainGroup(scaleGroup) [FD]
Line_41 $$ if (scale != 1.0f) --> Line_46 $$ rootGroup = scaleGroup [CD]
Line_40 $$ GroupNode rootGroup = model --> Line_46 $$ rootGroup = scaleGroup [FD]
Line_42 $$ TransformGroup scaleGroup = new TransformGroup() --> Line_46 $$ rootGroup = scaleGroup [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_48 $$ OBJPrototypeLoader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, siHandler, rootGroup) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_48 $$ OBJPrototypeLoader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, siHandler, rootGroup) [FD]
Line_17 $$ convertZup2Yup = true --> Line_48 $$ OBJPrototypeLoader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, siHandler, rootGroup) [FD]
Line_40 $$ GroupNode rootGroup = model --> Line_48 $$ OBJPrototypeLoader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, siHandler, rootGroup) [FD]
Line_46 $$ rootGroup = scaleGroup --> Line_48 $$ OBJPrototypeLoader.load(url.openStream(), baseURL, appFactory, skin, geomFactory, convertZup2Yup, scale, nodeFactory, siHandler, rootGroup) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_51 $$ TDSFile.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, nodeFactory, animFactory, siHandler, model) [FD]
Line_3 $$ boolean convertZup2Yup = modelType.getConvertFlag(flags) --> Line_51 $$ TDSFile.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, nodeFactory, animFactory, siHandler, model) [FD]
Line_17 $$ convertZup2Yup = true --> Line_51 $$ TDSFile.load(url.openStream(), baseURL, appFactory, geomFactory, convertZup2Yup, nodeFactory, animFactory, siHandler, model) [FD]
Line_2 $$ protected Model loadModel(URL url, String filenameBase, SourceModelType modelType, URL baseURL, String skin, float scale, int flags, AppearanceFactory appFactory, GeometryFactory geomFactory, NodeFactory nodeFactory, AnimationFactory animFactory, SpecialItemsHandler siHandler, Model model) throws IOException, IncorrectFormatException, ParsingException --> Line_53 $$ return (model) [CD]
