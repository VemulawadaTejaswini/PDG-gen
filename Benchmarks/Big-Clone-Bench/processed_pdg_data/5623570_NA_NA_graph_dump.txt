Line_2 $$ public static void load(String path) --> Line_3 $$ if (path.length() < 1) [CD]
Line_2 $$ public static void load(String path) --> Line_3 $$ if (path.length() < 1) [FD]
Line_3 $$ if (path.length() < 1) --> Line_4 $$ Log.userinfo("Cannot open a file whose name has zero length.", Log.ERROR) [CD]
Line_2 $$ public static void load(String path) --> Line_6 $$ if (!loadtime) [CD]
Line_6 $$ if (!loadtime) --> Line_7 $$ if (path.equals(Globals.getStartupFilePath())) [CD]
Line_2 $$ public static void load(String path) --> Line_7 $$ if (path.equals(Globals.getStartupFilePath())) [FD]
Line_7 $$ if (path.equals(Globals.getStartupFilePath())) --> Line_8 $$ Log.userinfo("Cannot reload startup file.", Log.ERROR) [CD]
Line_2 $$ public static void load(String path) --> Line_11 $$ BufferedReader buffReader = null [CD]
Line_2 $$ public static void load(String path) --> Line_12 $$ if (path.indexOf("://") != -1) [CD]
Line_2 $$ public static void load(String path) --> Line_12 $$ if (path.indexOf("://") != -1) [FD]
Line_12 $$ if (path.indexOf("://") != -1) --> Line_13 $$ URL url = null [CD]
Line_13 $$ URL url = null --> Line_15 $$ url = new URL(path) [FD]
Line_13 $$ URL url = null --> Line_20 $$ String encoding = Toolkit.getDeclaredXMLEncoding(url.openStream()) [FD]
Line_15 $$ url = new URL(path) --> Line_20 $$ String encoding = Toolkit.getDeclaredXMLEncoding(url.openStream()) [FD]
Line_11 $$ BufferedReader buffReader = null --> Line_21 $$ buffReader = new BufferedReader(new InputStreamReader(url.openStream(), encoding)) [FD]
Line_13 $$ URL url = null --> Line_21 $$ buffReader = new BufferedReader(new InputStreamReader(url.openStream(), encoding)) [FD]
Line_15 $$ url = new URL(path) --> Line_21 $$ buffReader = new BufferedReader(new InputStreamReader(url.openStream(), encoding)) [FD]
Line_12 $$ if (path.indexOf("://") != -1) --> Line_26 $$ if (path.indexOf(ASTERISK) != -1) [CD]
Line_2 $$ public static void load(String path) --> Line_26 $$ if (path.indexOf(ASTERISK) != -1) [FD]
Line_26 $$ if (path.indexOf(ASTERISK) != -1) --> Line_27 $$ String[] files = null [CD]
Line_27 $$ String[] files = null --> Line_29 $$ files = Toolkit.glob(path, workingDirectory) [FD]
Line_2 $$ public static void load(String path) --> Line_29 $$ files = Toolkit.glob(path, workingDirectory) [FD]
Line_26 $$ if (path.indexOf(ASTERISK) != -1) --> Line_33 $$ if (files != null) [CD]
Line_27 $$ String[] files = null --> Line_33 $$ if (files != null) [FD]
Line_29 $$ files = Toolkit.glob(path, workingDirectory) --> Line_33 $$ if (files != null) [FD]
Line_33 $$ if (files != null) --> Line_34 $$ for (int index = 0; index < files.length; index++) [CD]
Line_34 $$ for (int index = 0; index < files.length; index++) --> Line_35 $$ load(files[index]) [CD]
Line_33 $$ if (files != null) --> Line_37 $$ return [CD]
Line_12 $$ if (path.indexOf("://") != -1) --> Line_40 $$ File toRead = new File(path) [CD]
Line_12 $$ if (path.indexOf("://") != -1) --> Line_41 $$ if (toRead.isAbsolute()) [CD]
Line_40 $$ File toRead = new File(path) --> Line_41 $$ if (toRead.isAbsolute()) [FD]
Line_41 $$ if (toRead.isAbsolute()) --> Line_42 $$ workingDirectory = toRead.getParent() [CD]
Line_40 $$ File toRead = new File(path) --> Line_42 $$ workingDirectory = toRead.getParent() [FD]
Line_12 $$ if (path.indexOf("://") != -1) --> Line_44 $$ if (loadedFiles.contains(toRead)) [CD]
Line_40 $$ File toRead = new File(path) --> Line_44 $$ if (loadedFiles.contains(toRead)) [FD]
Line_44 $$ if (loadedFiles.contains(toRead)) --> Line_45 $$ if (loadtime) [CD]
Line_45 $$ if (loadtime) --> Line_46 $$ return [CD]
Line_44 $$ if (loadedFiles.contains(toRead)) --> Line_49 $$ loadedFiles.add(toRead) [CD]
Line_40 $$ File toRead = new File(path) --> Line_49 $$ loadedFiles.add(toRead) [FD]
Line_12 $$ if (path.indexOf("://") != -1) --> Line_51 $$ if (toRead.exists() && !toRead.isDirectory()) [CD]
Line_40 $$ File toRead = new File(path) --> Line_51 $$ if (toRead.exists() && !toRead.isDirectory()) [FD]
Line_11 $$ BufferedReader buffReader = null --> Line_54 $$ buffReader = new BufferedReader(new InputStreamReader(new FileInputStream(path), encoding)) [FD]
Line_21 $$ buffReader = new BufferedReader(new InputStreamReader(url.openStream(), encoding)) --> Line_54 $$ buffReader = new BufferedReader(new InputStreamReader(new FileInputStream(path), encoding)) [FD]
Line_51 $$ if (toRead.exists() && !toRead.isDirectory()) --> Line_59 $$ if (Globals.isWatcherActive()) [CD]
Line_59 $$ if (Globals.isWatcherActive()) --> Line_60 $$ AIMLWatcher.addWatchFile(path) [CD]
Line_2 $$ public static void load(String path) --> Line_60 $$ AIMLWatcher.addWatchFile(path) [FD]
Line_51 $$ if (toRead.exists() && !toRead.isDirectory()) --> Line_63 $$ if (!toRead.exists()) [CD]
Line_40 $$ File toRead = new File(path) --> Line_63 $$ if (!toRead.exists()) [FD]
Line_63 $$ if (!toRead.exists()) --> Line_64 $$ Log.userinfo("\"" + path + "\" does not exist!", Log.ERROR) [CD]
Line_51 $$ if (toRead.exists() && !toRead.isDirectory()) --> Line_66 $$ if (toRead.isDirectory()) [CD]
Line_40 $$ File toRead = new File(path) --> Line_66 $$ if (toRead.isDirectory()) [FD]
Line_66 $$ if (toRead.isDirectory()) --> Line_67 $$ Log.userinfo("\"" + path + "\" is a directory!", Log.ERROR) [CD]
Line_2 $$ public static void load(String path) --> Line_71 $$ new AIMLReader(path, buffReader, new AIMLLoader(path)).read() [CD]
