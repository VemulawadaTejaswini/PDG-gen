Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_15 $$ String oai_pmhRequest = request.getParameter("verb") [FD]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_16 $$ String oai_pmhQuery = request.getQueryString() [FD]
Line_17 $$ String urlStr = "" --> Line_18 $$ urlStr = "http://" + request.getServerName() + ":" + request.getServerPort() + "/newgenlibctxt/HarvestServlet" [FD]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_18 $$ urlStr = "http://" + request.getServerName() + ":" + request.getServerPort() + "/newgenlibctxt/HarvestServlet" [FD]
Line_19 $$ String attribute = oai_pmhQuery --> Line_20 $$ String arguments = attribute.substring(attribute.indexOf("?") + 1) [FD]
Line_21 $$ StringTokenizer st = new StringTokenizer(arguments, "&") --> Line_27 $$ while (st.hasMoreTokens()) [FD]
Line_27 $$ while (st.hasMoreTokens()) --> Line_28 $$ arr[i] = st.nextToken() [CD]
Line_21 $$ StringTokenizer st = new StringTokenizer(arguments, "&") --> Line_28 $$ arr[i] = st.nextToken() [FD]
Line_27 $$ while (st.hasMoreTokens()) --> Line_29 $$ StringTokenizer subst = new StringTokenizer(arr[i], "=") [CD]
Line_27 $$ while (st.hasMoreTokens()) --> Line_30 $$ while (subst.hasMoreTokens()) [CD]
Line_29 $$ StringTokenizer subst = new StringTokenizer(arr[i], "=") --> Line_30 $$ while (subst.hasMoreTokens()) [FD]
Line_30 $$ while (subst.hasMoreTokens()) --> Line_31 $$ subarr[j] = subst.nextToken() [CD]
Line_29 $$ StringTokenizer subst = new StringTokenizer(arr[i], "=") --> Line_31 $$ subarr[j] = subst.nextToken() [FD]
Line_30 $$ while (subst.hasMoreTokens()) --> Line_32 $$ j++ [CD]
Line_23 $$ int j = 0 --> Line_32 $$ j++ [FD]
Line_27 $$ while (st.hasMoreTokens()) --> Line_34 $$ i++ [CD]
Line_22 $$ int i = 0 --> Line_34 $$ i++ [FD]
Line_27 $$ while (st.hasMoreTokens()) --> Line_35 $$ count++ [CD]
Line_25 $$ int count = 0 --> Line_35 $$ count++ [FD]
Line_23 $$ int j = 0 --> Line_39 $$ for (int k = 0; k < j; k += 2) [FD]
Line_39 $$ for (int k = 0; k < j; k += 2) --> Line_40 $$ if (subarr[k].equals("from")) [CD]
Line_40 $$ if (subarr[k].equals("from")) --> Line_41 $$ from = "from" [CD]
Line_12 $$ String from = "", fromValue = "" --> Line_41 $$ from = "from" [FD]
Line_40 $$ if (subarr[k].equals("from")) --> Line_42 $$ fromCount++ [CD]
Line_37 $$ int mdfCount = 0, fromCount = 0, untilCount = 0, setCount = 0 --> Line_42 $$ fromCount++ [FD]
Line_40 $$ if (subarr[k].equals("from")) --> Line_43 $$ fromValue = subarr[k + 1] [CD]
Line_12 $$ String from = "", fromValue = "" --> Line_43 $$ fromValue = subarr[k + 1] [FD]
Line_40 $$ if (subarr[k].equals("from")) --> Line_44 $$ fromValue = lr.validateDate(fromValue) [CD]
Line_43 $$ fromValue = subarr[k + 1] --> Line_44 $$ fromValue = lr.validateDate(fromValue) [FD]
Line_12 $$ String from = "", fromValue = "" --> Line_44 $$ fromValue = lr.validateDate(fromValue) [FD]
Line_38 $$ ListRecords lr = new ListRecords() --> Line_44 $$ fromValue = lr.validateDate(fromValue) [FD]
Line_40 $$ if (subarr[k].equals("from")) --> Line_45 $$ if (subarr[k].equals("until")) [CD]
Line_45 $$ if (subarr[k].equals("until")) --> Line_46 $$ until = "until" [CD]
Line_13 $$ String until = "", untilValue = "" --> Line_46 $$ until = "until" [FD]
Line_45 $$ if (subarr[k].equals("until")) --> Line_47 $$ untilCount++ [CD]
Line_37 $$ int mdfCount = 0, fromCount = 0, untilCount = 0, setCount = 0 --> Line_47 $$ untilCount++ [FD]
Line_45 $$ if (subarr[k].equals("until")) --> Line_48 $$ untilValue = subarr[k + 1] [CD]
Line_13 $$ String until = "", untilValue = "" --> Line_48 $$ untilValue = subarr[k + 1] [FD]
Line_45 $$ if (subarr[k].equals("until")) --> Line_49 $$ untilValue = lr.validateDate(untilValue) [CD]
Line_48 $$ untilValue = subarr[k + 1] --> Line_49 $$ untilValue = lr.validateDate(untilValue) [FD]
Line_13 $$ String until = "", untilValue = "" --> Line_49 $$ untilValue = lr.validateDate(untilValue) [FD]
Line_38 $$ ListRecords lr = new ListRecords() --> Line_49 $$ untilValue = lr.validateDate(untilValue) [FD]
Line_43 $$ fromValue = subarr[k + 1] --> Line_52 $$ if (fromValue.equals("") && untilCount == 1) [FD]
Line_44 $$ fromValue = lr.validateDate(fromValue) --> Line_52 $$ if (fromValue.equals("") && untilCount == 1) [FD]
Line_12 $$ String from = "", fromValue = "" --> Line_52 $$ if (fromValue.equals("") && untilCount == 1) [FD]
Line_52 $$ if (fromValue.equals("") && untilCount == 1) --> Line_53 $$ fromValue = lr.validateDate("0001-01-01") [CD]
Line_43 $$ fromValue = subarr[k + 1] --> Line_53 $$ fromValue = lr.validateDate("0001-01-01") [FD]
Line_44 $$ fromValue = lr.validateDate(fromValue) --> Line_53 $$ fromValue = lr.validateDate("0001-01-01") [FD]
Line_12 $$ String from = "", fromValue = "" --> Line_53 $$ fromValue = lr.validateDate("0001-01-01") [FD]
Line_38 $$ ListRecords lr = new ListRecords() --> Line_53 $$ fromValue = lr.validateDate("0001-01-01") [FD]
Line_52 $$ if (fromValue.equals("") && untilCount == 1) --> Line_54 $$ if (untilValue.equals("") && fromCount == 1) [CD]
Line_48 $$ untilValue = subarr[k + 1] --> Line_54 $$ if (untilValue.equals("") && fromCount == 1) [FD]
Line_49 $$ untilValue = lr.validateDate(untilValue) --> Line_54 $$ if (untilValue.equals("") && fromCount == 1) [FD]
Line_13 $$ String until = "", untilValue = "" --> Line_54 $$ if (untilValue.equals("") && fromCount == 1) [FD]
Line_54 $$ if (untilValue.equals("") && fromCount == 1) --> Line_55 $$ String a = (new Resdate()).getDate() [CD]
Line_54 $$ if (untilValue.equals("") && fromCount == 1) --> Line_56 $$ untilValue = a.substring(0, a.indexOf("T")) [CD]
Line_48 $$ untilValue = subarr[k + 1] --> Line_56 $$ untilValue = a.substring(0, a.indexOf("T")) [FD]
Line_49 $$ untilValue = lr.validateDate(untilValue) --> Line_56 $$ untilValue = a.substring(0, a.indexOf("T")) [FD]
Line_13 $$ String until = "", untilValue = "" --> Line_56 $$ untilValue = a.substring(0, a.indexOf("T")) [FD]
Line_55 $$ String a = (new Resdate()).getDate() --> Line_56 $$ untilValue = a.substring(0, a.indexOf("T")) [FD]
Line_5 $$ java.util.Vector vector = new java.util.Vector(1, 1) --> Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) [FD]
Line_4 $$ ejb.bprocess.OAIPMH.AutoHarvesterSession ahSession = home.create() --> Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) [FD]
Line_6 $$ Integer libraryId = new Integer(1) --> Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) [FD]
Line_5 $$ java.util.Vector vector = new java.util.Vector(1, 1) --> Line_62 $$ if (vector.size() > 0) [FD]
Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) --> Line_62 $$ if (vector.size() > 0) [FD]
Line_62 $$ if (vector.size() > 0) --> Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) [CD]
Line_39 $$ for (int k = 0; k < j; k += 2) --> Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) [FD]
Line_5 $$ java.util.Vector vector = new java.util.Vector(1, 1) --> Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) [FD]
Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) --> Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) [FD]
Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) --> Line_64 $$ harlibraryId = vector.elementAt(k).toString() [CD]
Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) --> Line_64 $$ harlibraryId = vector.elementAt(k).toString() [FD]
Line_61 $$ String harlibraryId = "" --> Line_64 $$ harlibraryId = vector.elementAt(k).toString() [FD]
Line_5 $$ java.util.Vector vector = new java.util.Vector(1, 1) --> Line_64 $$ harlibraryId = vector.elementAt(k).toString() [FD]
Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) --> Line_64 $$ harlibraryId = vector.elementAt(k).toString() [FD]
Line_39 $$ for (int k = 0; k < j; k += 2) --> Line_64 $$ harlibraryId = vector.elementAt(k).toString() [FD]
Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) --> Line_65 $$ String harvesturl = vector.elementAt(k + 1).toString() [CD]
Line_5 $$ java.util.Vector vector = new java.util.Vector(1, 1) --> Line_65 $$ String harvesturl = vector.elementAt(k + 1).toString() [FD]
Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) --> Line_65 $$ String harvesturl = vector.elementAt(k + 1).toString() [FD]
Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) --> Line_66 $$ String status = vector.elementAt(k + 2).toString() [CD]
Line_5 $$ java.util.Vector vector = new java.util.Vector(1, 1) --> Line_66 $$ String status = vector.elementAt(k + 2).toString() [FD]
Line_60 $$ vector = ahSession.getHarvestLibrary(null, libraryId) --> Line_66 $$ String status = vector.elementAt(k + 2).toString() [FD]
Line_63 $$ for (int k = 0; k < vector.size(); k = k + 3) --> Line_67 $$ if (status.equals("A")) [CD]
Line_66 $$ String status = vector.elementAt(k + 2).toString() --> Line_67 $$ if (status.equals("A")) [FD]
Line_67 $$ if (status.equals("A")) --> Line_68 $$ String oai_pmhRequest1 = request.getParameter("verb") [CD]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_68 $$ String oai_pmhRequest1 = request.getParameter("verb") [FD]
Line_67 $$ if (status.equals("A")) --> Line_69 $$ String oai_pmhQuery1 = request.getQueryString() [CD]
Line_2 $$ protected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException --> Line_69 $$ String oai_pmhQuery1 = request.getQueryString() [FD]
Line_67 $$ if (status.equals("A")) --> Line_70 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&metadataPrefix=marc21&from=" + fromValue + "&until=" + untilValue + "" [CD]
Line_17 $$ String urlStr = "" --> Line_70 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&metadataPrefix=marc21&from=" + fromValue + "&until=" + untilValue + "" [FD]
Line_18 $$ urlStr = "http://" + request.getServerName() + ":" + request.getServerPort() + "/newgenlibctxt/HarvestServlet" --> Line_70 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&metadataPrefix=marc21&from=" + fromValue + "&until=" + untilValue + "" [FD]
Line_67 $$ if (status.equals("A")) --> Line_71 $$ boolean resExists = true [CD]
Line_67 $$ if (status.equals("A")) --> Line_72 $$ for (int n = 0; resExists == true; n++) [CD]
Line_71 $$ boolean resExists = true --> Line_72 $$ for (int n = 0; resExists == true; n++) [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_73 $$ java.net.URL url = new java.net.URL(urlStr) [CD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_74 $$ java.net.URLConnection urlCon = url.openConnection() [CD]
Line_73 $$ java.net.URL url = new java.net.URL(urlStr) --> Line_74 $$ java.net.URLConnection urlCon = url.openConnection() [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_75 $$ urlCon.setDoInput(true) [CD]
Line_74 $$ java.net.URLConnection urlCon = url.openConnection() --> Line_75 $$ urlCon.setDoInput(true) [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_76 $$ urlCon.connect() [CD]
Line_74 $$ java.net.URLConnection urlCon = url.openConnection() --> Line_76 $$ urlCon.connect() [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_77 $$ InputStream is = urlCon.getInputStream() [CD]
Line_74 $$ java.net.URLConnection urlCon = url.openConnection() --> Line_77 $$ InputStream is = urlCon.getInputStream() [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_78 $$ System.out.println("input" + is.available()) [CD]
Line_77 $$ InputStream is = urlCon.getInputStream() --> Line_78 $$ System.out.println("input" + is.available()) [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_79 $$ org.jdom.input.SAXBuilder sb = new org.jdom.input.SAXBuilder() [CD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_80 $$ org.jdom.Document doc = sb.build(is) [CD]
Line_79 $$ org.jdom.input.SAXBuilder sb = new org.jdom.input.SAXBuilder() --> Line_80 $$ org.jdom.Document doc = sb.build(is) [FD]
Line_77 $$ InputStream is = urlCon.getInputStream() --> Line_80 $$ org.jdom.Document doc = sb.build(is) [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_81 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc) [CD]
Line_7 $$ String xmlstr = "" --> Line_81 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc) [FD]
Line_80 $$ org.jdom.Document doc = sb.build(is) --> Line_81 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc) [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_82 $$ System.out.println("xmlStr:" + xmlstr) [CD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_83 $$ doc = null [CD]
Line_80 $$ org.jdom.Document doc = sb.build(is) --> Line_83 $$ doc = null [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_84 $$ sb = null [CD]
Line_79 $$ org.jdom.input.SAXBuilder sb = new org.jdom.input.SAXBuilder() --> Line_84 $$ sb = null [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_85 $$ java.util.Vector vec = new java.util.Vector() [CD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [CD]
Line_85 $$ java.util.Vector vec = new java.util.Vector() --> Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_4 $$ ejb.bprocess.OAIPMH.AutoHarvesterSession ahSession = home.create() --> Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_81 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc) --> Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_7 $$ String xmlstr = "" --> Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_64 $$ harlibraryId = vector.elementAt(k).toString() --> Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_61 $$ String harlibraryId = "" --> Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_87 $$ String resT = doc.getRootElement().getChildText("resumptionToken", doc.getRootElement().getNamespace()) [CD]
Line_80 $$ org.jdom.Document doc = sb.build(is) --> Line_87 $$ String resT = doc.getRootElement().getChildText("resumptionToken", doc.getRootElement().getNamespace()) [FD]
Line_83 $$ doc = null --> Line_87 $$ String resT = doc.getRootElement().getChildText("resumptionToken", doc.getRootElement().getNamespace()) [FD]
Line_72 $$ for (int n = 0; resExists == true; n++) --> Line_88 $$ if (!(resT == null)) [CD]
Line_88 $$ if (!(resT == null)) --> Line_89 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&resumptionToken=" + resT [CD]
Line_70 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&metadataPrefix=marc21&from=" + fromValue + "&until=" + untilValue + "" --> Line_89 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&resumptionToken=" + resT [FD]
Line_17 $$ String urlStr = "" --> Line_89 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&resumptionToken=" + resT [FD]
Line_18 $$ urlStr = "http://" + request.getServerName() + ":" + request.getServerPort() + "/newgenlibctxt/HarvestServlet" --> Line_89 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&resumptionToken=" + resT [FD]
Line_87 $$ String resT = doc.getRootElement().getChildText("resumptionToken", doc.getRootElement().getNamespace()) --> Line_89 $$ urlStr = "http://" + harvesturl + ":8080/newgenlibctxt/oai2.0?verb=ListRecords&resumptionToken=" + resT [FD]
Line_88 $$ if (!(resT == null)) --> Line_91 $$ resExists = false [CD]
Line_71 $$ boolean resExists = true --> Line_91 $$ resExists = false [FD]
Line_67 $$ if (status.equals("A")) --> Line_94 $$ if (status.equals("B")) [CD]
Line_66 $$ String status = vector.elementAt(k + 2).toString() --> Line_94 $$ if (status.equals("B")) [FD]
Line_94 $$ if (status.equals("B")) --> Line_96 $$ java.io.File[] file1 = file.listFiles() [CD]
Line_94 $$ if (status.equals("B")) --> Line_97 $$ for (int b = 0; b < file1.length; b++) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_98 $$ File file2 = (File) file1[b] [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_99 $$ System.out.println("File2:" + file2) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_100 $$ long lastmodifed = file2.lastModified() [CD]
Line_98 $$ File file2 = (File) file1[b] --> Line_100 $$ long lastmodifed = file2.lastModified() [FD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_101 $$ StringTokenizer st1 = new StringTokenizer(fromValue, "-") [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_102 $$ String dar[] = new String[3] [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_103 $$ java.util.Calendar c1 = java.util.Calendar.getInstance() [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_104 $$ int g = 0 [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_105 $$ while (st1.hasMoreElements()) [CD]
Line_101 $$ StringTokenizer st1 = new StringTokenizer(fromValue, "-") --> Line_105 $$ while (st1.hasMoreElements()) [FD]
Line_105 $$ while (st1.hasMoreElements()) --> Line_106 $$ dar[g] = st1.nextToken() [CD]
Line_101 $$ StringTokenizer st1 = new StringTokenizer(fromValue, "-") --> Line_106 $$ dar[g] = st1.nextToken() [FD]
Line_105 $$ while (st1.hasMoreElements()) --> Line_107 $$ g++ [CD]
Line_104 $$ int g = 0 --> Line_107 $$ g++ [FD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_109 $$ c1.set(Integer.parseInt(dar[0]), Integer.parseInt(dar[1]), Integer.parseInt(dar[2])) [CD]
Line_103 $$ java.util.Calendar c1 = java.util.Calendar.getInstance() --> Line_109 $$ c1.set(Integer.parseInt(dar[0]), Integer.parseInt(dar[1]), Integer.parseInt(dar[2])) [FD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_112 $$ java.util.Calendar c2 = java.util.Calendar.getInstance() [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_114 $$ while (st2.hasMoreElements()) [CD]
Line_114 $$ while (st2.hasMoreElements()) --> Line_115 $$ dar1[d] = st2.nextToken() [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_118 $$ c2.set(Integer.parseInt(dar1[0]), Integer.parseInt(dar1[1]), Integer.parseInt(dar1[2])) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_119 $$ java.util.Calendar c3 = java.util.Calendar.getInstance() [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_120 $$ c3.setTimeInMillis(lastmodifed) [CD]
Line_100 $$ long lastmodifed = file2.lastModified() --> Line_120 $$ c3.setTimeInMillis(lastmodifed) [FD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_121 $$ c3.set(java.util.Calendar.HOUR, 0) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_122 $$ c3.set(java.util.Calendar.AM_PM, java.util.Calendar.AM) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_123 $$ c3.set(java.util.Calendar.MINUTE, 0) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_124 $$ c3.set(java.util.Calendar.SECOND, 0) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_125 $$ c3.set(java.util.Calendar.MILLISECOND, 0) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_126 $$ java.util.Date d1 = c1.getTime() [CD]
Line_103 $$ java.util.Calendar c1 = java.util.Calendar.getInstance() --> Line_126 $$ java.util.Date d1 = c1.getTime() [FD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_127 $$ java.util.Date d2 = c2.getTime() [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_128 $$ java.util.Date d3 = c3.getTime() [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_129 $$ System.out.println("This is d1:" + d1) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_130 $$ System.out.println("This is d2:" + d2) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_131 $$ System.out.println("This is d3:" + d3) [CD]
Line_97 $$ for (int b = 0; b < file1.length; b++) --> Line_132 $$ if (d3.after(d1) && d3.before(d2)) [CD]
Line_132 $$ if (d3.after(d1) && d3.before(d2)) --> Line_134 $$ org.jdom.Document doc1 = sb1.build(new java.io.FileInputStream(file2)) [CD]
Line_132 $$ if (d3.after(d1) && d3.before(d2)) --> Line_135 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc1) [CD]
Line_81 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc) --> Line_135 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc1) [FD]
Line_7 $$ String xmlstr = "" --> Line_135 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc1) [FD]
Line_132 $$ if (d3.after(d1) && d3.before(d2)) --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [CD]
Line_85 $$ java.util.Vector vec = new java.util.Vector() --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_86 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_4 $$ ejb.bprocess.OAIPMH.AutoHarvesterSession ahSession = home.create() --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_135 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc1) --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_81 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc) --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_7 $$ String xmlstr = "" --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_64 $$ harlibraryId = vector.elementAt(k).toString() --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_61 $$ String harlibraryId = "" --> Line_137 $$ vec = ahSession.autoInitialHarvest(null, xmlstr, harlibraryId) [FD]
Line_91 $$ resExists = false --> Line_72 $$ for (int n = 0; resExists == true; n++) [FD]
Line_84 $$ sb = null --> Line_80 $$ org.jdom.Document doc = sb.build(is) [FD]
Line_83 $$ doc = null --> Line_81 $$ xmlstr = (new org.jdom.output.XMLOutputter()).outputString(doc) [FD]
