Line_4 $$ File outJar = new File(currentProjectDir + DEPLOYDIR + fileSeparator + currentProjectName + ".jar") --> Line_5 $$ jarSize = (int) outJar.length() [FD]
Line_6 $$ File tempJar = File.createTempFile("hipergps" + currentProjectName, ".jar") --> Line_7 $$ tempJar.deleteOnExit() [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_10 $$ Manifest mFest = preJarInStream.getManifest() [FD]
Line_10 $$ Manifest mFest = preJarInStream.getManifest() --> Line_11 $$ java.util.jar.Attributes atts = mFest.getMainAttributes() [FD]
Line_12 $$ if (hiperGeoId != null) --> Line_13 $$ atts.putValue("hiperGeoId", hiperGeoId) [CD]
Line_11 $$ java.util.jar.Attributes atts = mFest.getMainAttributes() --> Line_13 $$ atts.putValue("hiperGeoId", hiperGeoId) [FD]
Line_11 $$ java.util.jar.Attributes atts = mFest.getMainAttributes() --> Line_15 $$ jad.updateAttributes(atts) [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_19 $$ while ((jarEntry = preJarInStream.getNextJarEntry()) != null) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_22 $$ jarOutStream.putNextEntry(jarEntry) [FD]
Line_26 $$ int read --> Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_28 $$ jarOutStream.write(buffer, 0, read) [CD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_28 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_28 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_28 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_26 $$ int read --> Line_28 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_30 $$ jarOutStream.closeEntry() [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_35 $$ jarEntry = new JarEntry("img/" + icons[i].getName()) [CD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_37 $$ jarOutStream.putNextEntry(jarEntry) [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) [CD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_42 $$ while (true) [CD]
Line_42 $$ while (true) --> Line_43 $$ int read = in.read(buffer, 0, buffer.length) [CD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_43 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_43 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_42 $$ while (true) --> Line_44 $$ if (read <= 0) [CD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_44 $$ if (read <= 0) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_44 $$ if (read <= 0) [FD]
Line_26 $$ int read --> Line_44 $$ if (read <= 0) [FD]
Line_42 $$ while (true) --> Line_47 $$ jarOutStream.write(buffer, 0, read) [CD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_47 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_47 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_47 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_47 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_26 $$ int read --> Line_47 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_49 $$ in.close() [CD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_49 $$ in.close() [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) [FD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_52 $$ jarEntry = new JarEntry("img/" + imageFiles.get(i).getName()) [CD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_52 $$ jarEntry = new JarEntry("img/" + imageFiles.get(i).getName()) [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_52 $$ jarEntry = new JarEntry("img/" + imageFiles.get(i).getName()) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_54 $$ jarOutStream.putNextEntry(jarEntry) [FD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) [CD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) [FD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_59 $$ while (true) [CD]
Line_59 $$ while (true) --> Line_60 $$ int read = in.read(buffer, 0, buffer.length) [CD]
Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) --> Line_60 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_60 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_60 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_59 $$ while (true) --> Line_61 $$ if (read <= 0) [CD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_61 $$ if (read <= 0) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_61 $$ if (read <= 0) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_61 $$ if (read <= 0) [FD]
Line_26 $$ int read --> Line_61 $$ if (read <= 0) [FD]
Line_59 $$ while (true) --> Line_64 $$ jarOutStream.write(buffer, 0, read) [CD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_64 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_64 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_64 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_64 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_64 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_26 $$ int read --> Line_64 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_66 $$ in.close() [CD]
Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) --> Line_66 $$ in.close() [FD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_66 $$ in.close() [FD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) [FD]
Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) --> Line_69 $$ jarEntry = new JarEntry("audio/" + audioFiles.get(i).getName()) [CD]
Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) --> Line_69 $$ jarEntry = new JarEntry("audio/" + audioFiles.get(i).getName()) [FD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_69 $$ jarEntry = new JarEntry("audio/" + audioFiles.get(i).getName()) [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_69 $$ jarEntry = new JarEntry("audio/" + audioFiles.get(i).getName()) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_71 $$ jarOutStream.putNextEntry(jarEntry) [FD]
Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) --> Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) [CD]
Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) --> Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) [FD]
Line_51 $$ for (int i = 0; i < imageFiles.size(); i++) --> Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) [FD]
Line_34 $$ for (int i = 0; i < icons.length; i++) --> Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) [FD]
Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) --> Line_76 $$ while (true) [CD]
Line_76 $$ while (true) --> Line_77 $$ int read = in.read(buffer, 0, buffer.length) [CD]
Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) --> Line_77 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) --> Line_77 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_77 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_77 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_76 $$ while (true) --> Line_78 $$ if (read <= 0) [CD]
Line_77 $$ int read = in.read(buffer, 0, buffer.length) --> Line_78 $$ if (read <= 0) [FD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_78 $$ if (read <= 0) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_78 $$ if (read <= 0) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_78 $$ if (read <= 0) [FD]
Line_26 $$ int read --> Line_78 $$ if (read <= 0) [FD]
Line_76 $$ while (true) --> Line_81 $$ jarOutStream.write(buffer, 0, read) [CD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_81 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_81 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_77 $$ int read = in.read(buffer, 0, buffer.length) --> Line_81 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_81 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_81 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_81 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_26 $$ int read --> Line_81 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_68 $$ for (int i = 0; i < audioFiles.size(); i++) --> Line_83 $$ in.close() [CD]
Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) --> Line_83 $$ in.close() [FD]
Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) --> Line_83 $$ in.close() [FD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_83 $$ in.close() [FD]
Line_85 $$ File gpx = new File(currentProjectDir + WalkingtoolsInformation.GPXDIR + "/hipergps.gpx") --> Line_86 $$ jarEntry = new JarEntry("gpx/" + gpx.getName()) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_87 $$ jarOutStream.putNextEntry(jarEntry) [FD]
Line_89 $$ while (true) --> Line_90 $$ int read = in.read(buffer, 0, buffer.length) [CD]
Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) --> Line_90 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) --> Line_90 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_90 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_88 $$ FileInputStream in = new FileInputStream(gpx) --> Line_90 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_90 $$ int read = in.read(buffer, 0, buffer.length) [FD]
Line_89 $$ while (true) --> Line_91 $$ if (read <= 0) [CD]
Line_90 $$ int read = in.read(buffer, 0, buffer.length) --> Line_91 $$ if (read <= 0) [FD]
Line_77 $$ int read = in.read(buffer, 0, buffer.length) --> Line_91 $$ if (read <= 0) [FD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_91 $$ if (read <= 0) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_91 $$ if (read <= 0) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_91 $$ if (read <= 0) [FD]
Line_26 $$ int read --> Line_91 $$ if (read <= 0) [FD]
Line_89 $$ while (true) --> Line_94 $$ jarOutStream.write(buffer, 0, read) [CD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_90 $$ int read = in.read(buffer, 0, buffer.length) --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_77 $$ int read = in.read(buffer, 0, buffer.length) --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_26 $$ int read --> Line_94 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_75 $$ FileInputStream in = new FileInputStream(audioFiles.get(i)) --> Line_96 $$ in.close() [FD]
Line_58 $$ FileInputStream in = new FileInputStream(imageFiles.get(i)) --> Line_96 $$ in.close() [FD]
Line_41 $$ FileInputStream in = new FileInputStream(icons[i]) --> Line_96 $$ in.close() [FD]
Line_88 $$ FileInputStream in = new FileInputStream(gpx) --> Line_96 $$ in.close() [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_97 $$ jarOutStream.flush() [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_98 $$ jarOutStream.close() [FD]
Line_6 $$ File tempJar = File.createTempFile("hipergps" + currentProjectName, ".jar") --> Line_99 $$ jarSize = (int) tempJar.length() [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_100 $$ preJarInStream = new JarInputStream(new FileInputStream(tempJar)) [FD]
Line_10 $$ Manifest mFest = preJarInStream.getManifest() --> Line_101 $$ mFest = preJarInStream.getManifest() [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_101 $$ mFest = preJarInStream.getManifest() [FD]
Line_100 $$ preJarInStream = new JarInputStream(new FileInputStream(tempJar)) --> Line_101 $$ mFest = preJarInStream.getManifest() [FD]
Line_11 $$ java.util.jar.Attributes atts = mFest.getMainAttributes() --> Line_102 $$ atts = mFest.getMainAttributes() [FD]
Line_10 $$ Manifest mFest = preJarInStream.getManifest() --> Line_102 $$ atts = mFest.getMainAttributes() [FD]
Line_101 $$ mFest = preJarInStream.getManifest() --> Line_102 $$ atts = mFest.getMainAttributes() [FD]
Line_11 $$ java.util.jar.Attributes atts = mFest.getMainAttributes() --> Line_103 $$ atts.putValue("MIDlet-Jar-Size", "" + jarSize + 1) [FD]
Line_102 $$ atts = mFest.getMainAttributes() --> Line_103 $$ atts.putValue("MIDlet-Jar-Size", "" + jarSize + 1) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_104 $$ jarOutStream = new JarOutputStream(new FileOutputStream(outJar), mFest) [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_105 $$ while ((jarEntry = preJarInStream.getNextJarEntry()) != null) [FD]
Line_100 $$ preJarInStream = new JarInputStream(new FileInputStream(tempJar)) --> Line_105 $$ while ((jarEntry = preJarInStream.getNextJarEntry()) != null) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_107 $$ jarOutStream.putNextEntry(jarEntry) [FD]
Line_104 $$ jarOutStream = new JarOutputStream(new FileOutputStream(outJar), mFest) --> Line_107 $$ jarOutStream.putNextEntry(jarEntry) [FD]
Line_111 $$ int read --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_90 $$ int read = in.read(buffer, 0, buffer.length) --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_77 $$ int read = in.read(buffer, 0, buffer.length) --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_26 $$ int read --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_100 $$ preJarInStream = new JarInputStream(new FileInputStream(tempJar)) --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) [FD]
Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [CD]
Line_112 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_104 $$ jarOutStream = new JarOutputStream(new FileOutputStream(outJar), mFest) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_17 $$ byte[] buffer = new byte[WalkingtoolsInformation.BUFFERSIZE] --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_111 $$ int read --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_90 $$ int read = in.read(buffer, 0, buffer.length) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_77 $$ int read = in.read(buffer, 0, buffer.length) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_60 $$ int read = in.read(buffer, 0, buffer.length) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_43 $$ int read = in.read(buffer, 0, buffer.length) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_27 $$ while ((read = preJarInStream.read(buffer)) != -1) --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_26 $$ int read --> Line_113 $$ jarOutStream.write(buffer, 0, read) [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_115 $$ jarOutStream.closeEntry() [FD]
Line_104 $$ jarOutStream = new JarOutputStream(new FileOutputStream(outJar), mFest) --> Line_115 $$ jarOutStream.closeEntry() [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_117 $$ jarOutStream.flush() [FD]
Line_104 $$ jarOutStream = new JarOutputStream(new FileOutputStream(outJar), mFest) --> Line_117 $$ jarOutStream.flush() [FD]
Line_9 $$ JarInputStream preJarInStream = new JarInputStream(new FileInputStream(preJar)) --> Line_118 $$ preJarInStream.close() [FD]
Line_100 $$ preJarInStream = new JarInputStream(new FileInputStream(tempJar)) --> Line_118 $$ preJarInStream.close() [FD]
Line_16 $$ JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(tempJar), mFest) --> Line_119 $$ jarOutStream.close() [FD]
Line_104 $$ jarOutStream = new JarOutputStream(new FileOutputStream(outJar), mFest) --> Line_119 $$ jarOutStream.close() [FD]
