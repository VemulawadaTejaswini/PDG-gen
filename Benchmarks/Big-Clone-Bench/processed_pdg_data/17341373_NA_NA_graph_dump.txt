Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_3 $$ DataPacketIterator iter = serverPacket.getDataPacketIterator() [CD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_3 $$ DataPacketIterator iter = serverPacket.getDataPacketIterator() [FD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_4 $$ String version = iter.nextString() [CD]
Line_3 $$ DataPacketIterator iter = serverPacket.getDataPacketIterator() --> Line_4 $$ String version = iter.nextString() [FD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_5 $$ int serverReportedUDPPort = iter.nextUByte2() [CD]
Line_3 $$ DataPacketIterator iter = serverPacket.getDataPacketIterator() --> Line_5 $$ int serverReportedUDPPort = iter.nextUByte2() [FD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_6 $$ _authKey = iter.nextUByte4() [CD]
Line_3 $$ DataPacketIterator iter = serverPacket.getDataPacketIterator() --> Line_6 $$ _authKey = iter.nextUByte4() [FD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_7 $$ _introKey = iter.nextUByte4() [CD]
Line_3 $$ DataPacketIterator iter = serverPacket.getDataPacketIterator() --> Line_7 $$ _introKey = iter.nextUByte4() [FD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_8 $$ _clientKey = makeClientKey(_authKey, _introKey) [CD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_9 $$ String passwordKey = iter.nextString() [CD]
Line_3 $$ DataPacketIterator iter = serverPacket.getDataPacketIterator() --> Line_9 $$ String passwordKey = iter.nextString() [FD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_10 $$ _logger.log(Level.INFO, "Connection to version " + version + " with udp port " + serverReportedUDPPort) [CD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_11 $$ DataPacket packet = null [CD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) [CD]
Line_5 $$ int serverReportedUDPPort = iter.nextUByte2() --> Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_13 $$ ParameterBuilder builder = new ParameterBuilder() [CD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_14 $$ builder.appendUByte2(_udpSocket.getLocalPort()) [CD]
Line_13 $$ ParameterBuilder builder = new ParameterBuilder() --> Line_14 $$ builder.appendUByte2(_udpSocket.getLocalPort()) [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_15 $$ builder.appendString(_user) [CD]
Line_13 $$ ParameterBuilder builder = new ParameterBuilder() --> Line_15 $$ builder.appendString(_user) [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_16 $$ MessageDigest md5 = null [CD]
Line_16 $$ MessageDigest md5 = null --> Line_18 $$ md5 = MessageDigest.getInstance("MD5") [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_21 $$ md5.update(_serverKey.getBytes()) [CD]
Line_16 $$ MessageDigest md5 = null --> Line_21 $$ md5.update(_serverKey.getBytes()) [FD]
Line_18 $$ md5 = MessageDigest.getInstance("MD5") --> Line_21 $$ md5.update(_serverKey.getBytes()) [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_22 $$ md5.update(passwordKey.getBytes()) [CD]
Line_16 $$ MessageDigest md5 = null --> Line_22 $$ md5.update(passwordKey.getBytes()) [FD]
Line_18 $$ md5 = MessageDigest.getInstance("MD5") --> Line_22 $$ md5.update(passwordKey.getBytes()) [FD]
Line_9 $$ String passwordKey = iter.nextString() --> Line_22 $$ md5.update(passwordKey.getBytes()) [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_23 $$ md5.update(_password.getBytes()) [CD]
Line_16 $$ MessageDigest md5 = null --> Line_23 $$ md5.update(_password.getBytes()) [FD]
Line_18 $$ md5 = MessageDigest.getInstance("MD5") --> Line_23 $$ md5.update(_password.getBytes()) [FD]
Line_16 $$ MessageDigest md5 = null --> Line_24 $$ for (byte b : md5.digest()) [FD]
Line_18 $$ md5 = MessageDigest.getInstance("MD5") --> Line_24 $$ for (byte b : md5.digest()) [FD]
Line_13 $$ ParameterBuilder builder = new ParameterBuilder() --> Line_25 $$ builder.appendByte(b) [FD]
Line_24 $$ for (byte b : md5.digest()) --> Line_25 $$ builder.appendByte(b) [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_27 $$ packet = new DataPacketImpl(ClientCommandConstants.INTRODUCTION, builder.toParameter()) [CD]
Line_11 $$ DataPacket packet = null --> Line_27 $$ packet = new DataPacketImpl(ClientCommandConstants.INTRODUCTION, builder.toParameter()) [FD]
Line_13 $$ ParameterBuilder builder = new ParameterBuilder() --> Line_27 $$ packet = new DataPacketImpl(ClientCommandConstants.INTRODUCTION, builder.toParameter()) [FD]
Line_12 $$ if (initUDPSocketAndStartPacketReader(_tcpSocket.getInetAddress(), serverReportedUDPPort)) --> Line_29 $$ packet = new DataPacketImpl(ClientCommandConstants.TCP_ONLY) [CD]
Line_11 $$ DataPacket packet = null --> Line_29 $$ packet = new DataPacketImpl(ClientCommandConstants.TCP_ONLY) [FD]
Line_27 $$ packet = new DataPacketImpl(ClientCommandConstants.INTRODUCTION, builder.toParameter()) --> Line_29 $$ packet = new DataPacketImpl(ClientCommandConstants.TCP_ONLY) [FD]
Line_2 $$ private void handleServerIntroduction(DataPacket serverPacket) --> Line_31 $$ sendTCPPacket(packet) [CD]
Line_11 $$ DataPacket packet = null --> Line_31 $$ sendTCPPacket(packet) [FD]
Line_27 $$ packet = new DataPacketImpl(ClientCommandConstants.INTRODUCTION, builder.toParameter()) --> Line_31 $$ sendTCPPacket(packet) [FD]
Line_29 $$ packet = new DataPacketImpl(ClientCommandConstants.TCP_ONLY) --> Line_31 $$ sendTCPPacket(packet) [FD]
