Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_3 $$ final List<InformationUnit> informationUnitsFromExecutionEvent = InformationHandlerUtil.getInformationUnitsFromExecutionEvent(event) [CD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_3 $$ final List<InformationUnit> informationUnitsFromExecutionEvent = InformationHandlerUtil.getInformationUnitsFromExecutionEvent(event) [FD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_4 $$ Shell activeShell = HandlerUtil.getActiveShell(event) [CD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_4 $$ Shell activeShell = HandlerUtil.getActiveShell(event) [FD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_5 $$ DirectoryDialog fd = new DirectoryDialog(activeShell, SWT.SAVE) [CD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_6 $$ String section = Activator.getDefault().getDialogSettings().get("lastExportSection") [CD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_7 $$ fd.setFilterPath(section) [CD]
Line_5 $$ DirectoryDialog fd = new DirectoryDialog(activeShell, SWT.SAVE) --> Line_7 $$ fd.setFilterPath(section) [FD]
Line_6 $$ String section = Activator.getDefault().getDialogSettings().get("lastExportSection") --> Line_7 $$ fd.setFilterPath(section) [FD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_8 $$ final String open = fd.open() [CD]
Line_5 $$ DirectoryDialog fd = new DirectoryDialog(activeShell, SWT.SAVE) --> Line_8 $$ final String open = fd.open() [FD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_9 $$ if (open != null) [CD]
Line_8 $$ final String open = fd.open() --> Line_9 $$ if (open != null) [FD]
Line_9 $$ if (open != null) --> Line_10 $$ Activator.getDefault().getDialogSettings().put("lastExportSection", open) [CD]
Line_8 $$ final String open = fd.open() --> Line_10 $$ Activator.getDefault().getDialogSettings().put("lastExportSection", open) [FD]
Line_9 $$ if (open != null) --> Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() [CD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_13 $$ IStatus returnValue = Status.OK_STATUS [CD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_14 $$ monitor.beginTask(NLS.bind(Messages.SaveFileOnDiskHandler_SavingFiles, open), informationUnitsFromExecutionEvent.size()) [CD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_14 $$ monitor.beginTask(NLS.bind(Messages.SaveFileOnDiskHandler_SavingFiles, open), informationUnitsFromExecutionEvent.size()) [FD]
Line_8 $$ final String open = fd.open() --> Line_14 $$ monitor.beginTask(NLS.bind(Messages.SaveFileOnDiskHandler_SavingFiles, open), informationUnitsFromExecutionEvent.size()) [FD]
Line_3 $$ final List<InformationUnit> informationUnitsFromExecutionEvent = InformationHandlerUtil.getInformationUnitsFromExecutionEvent(event) --> Line_14 $$ monitor.beginTask(NLS.bind(Messages.SaveFileOnDiskHandler_SavingFiles, open), informationUnitsFromExecutionEvent.size()) [FD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_16 $$ if (!monitor.isCanceled()) [FD]
Line_16 $$ if (!monitor.isCanceled()) --> Line_17 $$ monitor.setTaskName(NLS.bind(Messages.SaveFileOnDiskHandler_Saving, informationUnit.getLabel())) [CD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_17 $$ monitor.setTaskName(NLS.bind(Messages.SaveFileOnDiskHandler_Saving, informationUnit.getLabel())) [FD]
Line_15 $$ for (InformationUnit informationUnit : informationUnitsFromExecutionEvent) --> Line_17 $$ monitor.setTaskName(NLS.bind(Messages.SaveFileOnDiskHandler_Saving, informationUnit.getLabel())) [FD]
Line_16 $$ if (!monitor.isCanceled()) --> Line_18 $$ InformationStructureRead read = InformationStructureRead.newSession(informationUnit) [CD]
Line_15 $$ for (InformationUnit informationUnit : informationUnitsFromExecutionEvent) --> Line_18 $$ InformationStructureRead read = InformationStructureRead.newSession(informationUnit) [FD]
Line_16 $$ if (!monitor.isCanceled()) --> Line_19 $$ read.getValueByNodeId(Activator.FILENAME) [CD]
Line_18 $$ InformationStructureRead read = InformationStructureRead.newSession(informationUnit) --> Line_19 $$ read.getValueByNodeId(Activator.FILENAME) [FD]
Line_16 $$ if (!monitor.isCanceled()) --> Line_20 $$ IFile binaryReferenceFile = InformationUtil.getBinaryReferenceFile(informationUnit) [CD]
Line_15 $$ for (InformationUnit informationUnit : informationUnitsFromExecutionEvent) --> Line_20 $$ IFile binaryReferenceFile = InformationUtil.getBinaryReferenceFile(informationUnit) [FD]
Line_16 $$ if (!monitor.isCanceled()) --> Line_21 $$ FileWriter writer = null [CD]
Line_20 $$ IFile binaryReferenceFile = InformationUtil.getBinaryReferenceFile(informationUnit) --> Line_23 $$ if (binaryReferenceFile != null) [FD]
Line_23 $$ if (binaryReferenceFile != null) --> Line_24 $$ File file = new File(open, (String) read.getValueByNodeId(Activator.FILENAME)) [CD]
Line_18 $$ InformationStructureRead read = InformationStructureRead.newSession(informationUnit) --> Line_24 $$ File file = new File(open, (String) read.getValueByNodeId(Activator.FILENAME)) [FD]
Line_23 $$ if (binaryReferenceFile != null) --> Line_25 $$ InputStream contents = binaryReferenceFile.getContents() [CD]
Line_20 $$ IFile binaryReferenceFile = InformationUtil.getBinaryReferenceFile(informationUnit) --> Line_25 $$ InputStream contents = binaryReferenceFile.getContents() [FD]
Line_23 $$ if (binaryReferenceFile != null) --> Line_26 $$ writer = new FileWriter(file) [CD]
Line_21 $$ FileWriter writer = null --> Line_26 $$ writer = new FileWriter(file) [FD]
Line_23 $$ if (binaryReferenceFile != null) --> Line_27 $$ IOUtils.copy(contents, writer) [CD]
Line_25 $$ InputStream contents = binaryReferenceFile.getContents() --> Line_27 $$ IOUtils.copy(contents, writer) [FD]
Line_21 $$ FileWriter writer = null --> Line_27 $$ IOUtils.copy(contents, writer) [FD]
Line_26 $$ writer = new FileWriter(file) --> Line_27 $$ IOUtils.copy(contents, writer) [FD]
Line_23 $$ if (binaryReferenceFile != null) --> Line_28 $$ monitor.worked(1) [CD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_28 $$ monitor.worked(1) [FD]
Line_13 $$ IStatus returnValue = Status.OK_STATUS --> Line_31 $$ returnValue = StatusCreator.newStatus(NLS.bind(Messages.SaveFileOnDiskHandler_ErrorSaving, informationUnit.getLabel(), e)) [FD]
Line_15 $$ for (InformationUnit informationUnit : informationUnitsFromExecutionEvent) --> Line_31 $$ returnValue = StatusCreator.newStatus(NLS.bind(Messages.SaveFileOnDiskHandler_ErrorSaving, informationUnit.getLabel(), e)) [FD]
Line_21 $$ FileWriter writer = null --> Line_34 $$ if (writer != null) [FD]
Line_26 $$ writer = new FileWriter(file) --> Line_34 $$ if (writer != null) [FD]
Line_21 $$ FileWriter writer = null --> Line_36 $$ writer.flush() [FD]
Line_26 $$ writer = new FileWriter(file) --> Line_36 $$ writer.flush() [FD]
Line_21 $$ FileWriter writer = null --> Line_37 $$ writer.close() [FD]
Line_26 $$ writer = new FileWriter(file) --> Line_37 $$ writer.close() [FD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_44 $$ return returnValue [CD]
Line_11 $$ CancelableRunnable runnable = new CancelableRunnable() --> Line_49 $$ progressMonitorDialog.run(true, true, runnable) [FD]
Line_51 $$ if (e.getCause() instanceof CoreException) --> Line_52 $$ ErrorDialog.openError(activeShell, Messages.SaveFileOnDiskHandler_ErrorSaving2, Messages.SaveFileOnDiskHandler_ErrorSaving2, ((CoreException) e.getCause()).getStatus()) [CD]
Line_4 $$ Shell activeShell = HandlerUtil.getActiveShell(event) --> Line_52 $$ ErrorDialog.openError(activeShell, Messages.SaveFileOnDiskHandler_ErrorSaving2, Messages.SaveFileOnDiskHandler_ErrorSaving2, ((CoreException) e.getCause()).getStatus()) [FD]
Line_51 $$ if (e.getCause() instanceof CoreException) --> Line_54 $$ ErrorDialog.openError(activeShell, Messages.SaveFileOnDiskHandler_ErrorSaving2, Messages.SaveFileOnDiskHandler_ErrorSaving2, StatusCreator.newStatus(Messages.SaveFileOnDiskHandler_ErrorSaving3, e)) [CD]
Line_4 $$ Shell activeShell = HandlerUtil.getActiveShell(event) --> Line_54 $$ ErrorDialog.openError(activeShell, Messages.SaveFileOnDiskHandler_ErrorSaving2, Messages.SaveFileOnDiskHandler_ErrorSaving2, StatusCreator.newStatus(Messages.SaveFileOnDiskHandler_ErrorSaving3, e)) [FD]
Line_2 $$ public Object execute(ExecutionEvent event) throws ExecutionException --> Line_59 $$ return null [CD]
