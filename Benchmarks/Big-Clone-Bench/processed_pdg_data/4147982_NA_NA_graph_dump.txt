Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_3 $$ File fout = File.createTempFile(fin.getName(), ".fixEol", fin.getParentFile()) [CD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_3 $$ File fout = File.createTempFile(fin.getName(), ".fixEol", fin.getParentFile()) [FD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_4 $$ FileChannel in = new FileInputStream(fin).getChannel() [CD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_5 $$ if (0 != in.size()) [CD]
Line_4 $$ FileChannel in = new FileInputStream(fin).getChannel() --> Line_5 $$ if (0 != in.size()) [FD]
Line_5 $$ if (0 != in.size()) --> Line_6 $$ FileChannel out = new FileOutputStream(fout).getChannel() [CD]
Line_5 $$ if (0 != in.size()) --> Line_7 $$ byte[] eol = AStringUtilities.systemNewLine.getBytes() [CD]
Line_5 $$ if (0 != in.size()) --> Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) [CD]
Line_5 $$ if (0 != in.size()) --> Line_9 $$ boolean previousIsCr = false [CD]
Line_5 $$ if (0 != in.size()) --> Line_10 $$ ByteBuffer buf = ByteBuffer.allocateDirect(1024) [CD]
Line_5 $$ if (0 != in.size()) --> Line_11 $$ while (in.read(buf) > 0) [CD]
Line_4 $$ FileChannel in = new FileInputStream(fin).getChannel() --> Line_11 $$ while (in.read(buf) > 0) [FD]
Line_10 $$ ByteBuffer buf = ByteBuffer.allocateDirect(1024) --> Line_11 $$ while (in.read(buf) > 0) [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_12 $$ buf.limit(buf.position()) [CD]
Line_10 $$ ByteBuffer buf = ByteBuffer.allocateDirect(1024) --> Line_12 $$ buf.limit(buf.position()) [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_13 $$ buf.position(0) [CD]
Line_10 $$ ByteBuffer buf = ByteBuffer.allocateDirect(1024) --> Line_13 $$ buf.position(0) [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_14 $$ while (buf.remaining() > 0) [CD]
Line_10 $$ ByteBuffer buf = ByteBuffer.allocateDirect(1024) --> Line_14 $$ while (buf.remaining() > 0) [FD]
Line_14 $$ while (buf.remaining() > 0) --> Line_15 $$ byte b = buf.get() [CD]
Line_10 $$ ByteBuffer buf = ByteBuffer.allocateDirect(1024) --> Line_15 $$ byte b = buf.get() [FD]
Line_14 $$ while (buf.remaining() > 0) --> Line_16 $$ if (b == '\r') [CD]
Line_15 $$ byte b = buf.get() --> Line_16 $$ if (b == '\r') [FD]
Line_16 $$ if (b == '\r') --> Line_17 $$ previousIsCr = true [CD]
Line_9 $$ boolean previousIsCr = false --> Line_17 $$ previousIsCr = true [FD]
Line_16 $$ if (b == '\r') --> Line_18 $$ bufOut.put(eol) [CD]
Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) --> Line_18 $$ bufOut.put(eol) [FD]
Line_7 $$ byte[] eol = AStringUtilities.systemNewLine.getBytes() --> Line_18 $$ bufOut.put(eol) [FD]
Line_16 $$ if (b == '\r') --> Line_20 $$ if (b == '\n') [CD]
Line_15 $$ byte b = buf.get() --> Line_20 $$ if (b == '\n') [FD]
Line_20 $$ if (b == '\n') --> Line_21 $$ if (!previousIsCr) [CD]
Line_17 $$ previousIsCr = true --> Line_21 $$ if (!previousIsCr) [FD]
Line_9 $$ boolean previousIsCr = false --> Line_21 $$ if (!previousIsCr) [FD]
Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) --> Line_21 $$ if (!previousIsCr) [FD]
Line_7 $$ byte[] eol = AStringUtilities.systemNewLine.getBytes() --> Line_21 $$ if (!previousIsCr) [FD]
Line_20 $$ if (b == '\n') --> Line_22 $$ bufOut.put(b) [CD]
Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) --> Line_22 $$ bufOut.put(b) [FD]
Line_15 $$ byte b = buf.get() --> Line_22 $$ bufOut.put(b) [FD]
Line_16 $$ if (b == '\r') --> Line_23 $$ previousIsCr = false [CD]
Line_17 $$ previousIsCr = true --> Line_23 $$ previousIsCr = false [FD]
Line_9 $$ boolean previousIsCr = false --> Line_23 $$ previousIsCr = false [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_26 $$ bufOut.limit(bufOut.position()) [CD]
Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) --> Line_26 $$ bufOut.limit(bufOut.position()) [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_27 $$ bufOut.position(0) [CD]
Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) --> Line_27 $$ bufOut.position(0) [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_28 $$ out.write(bufOut) [CD]
Line_6 $$ FileChannel out = new FileOutputStream(fout).getChannel() --> Line_28 $$ out.write(bufOut) [FD]
Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) --> Line_28 $$ out.write(bufOut) [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_29 $$ bufOut.clear() [CD]
Line_8 $$ ByteBuffer bufOut = ByteBuffer.allocateDirect(1024 * eol.length) --> Line_29 $$ bufOut.clear() [FD]
Line_11 $$ while (in.read(buf) > 0) --> Line_30 $$ buf.clear() [CD]
Line_10 $$ ByteBuffer buf = ByteBuffer.allocateDirect(1024) --> Line_30 $$ buf.clear() [FD]
Line_5 $$ if (0 != in.size()) --> Line_32 $$ out.close() [CD]
Line_6 $$ FileChannel out = new FileOutputStream(fout).getChannel() --> Line_32 $$ out.close() [FD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_34 $$ in.close() [CD]
Line_4 $$ FileChannel in = new FileInputStream(fin).getChannel() --> Line_34 $$ in.close() [FD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_35 $$ fin.delete() [CD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_35 $$ fin.delete() [FD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_36 $$ fout.renameTo(fin) [CD]
Line_2 $$ public static void fixEol(File fin) throws IOException --> Line_36 $$ fout.renameTo(fin) [FD]
Line_3 $$ File fout = File.createTempFile(fin.getName(), ".fixEol", fin.getParentFile()) --> Line_36 $$ fout.renameTo(fin) [FD]
Line_23 $$ previousIsCr = false --> Line_21 $$ if (!previousIsCr) [FD]
