Line_2 $$ private ArrayList execAtParentServer(ArrayList paramList) throws Exception --> Line_3 $$ ArrayList outputList = null [CD]
Line_2 $$ private ArrayList execAtParentServer(ArrayList paramList) throws Exception --> Line_4 $$ String message = "" [CD]
Line_6 $$ HashMap serverUrlMap = InitXml.getInstance().getServerMap() --> Line_7 $$ Iterator it = serverUrlMap.keySet().iterator() [FD]
Line_7 $$ Iterator it = serverUrlMap.keySet().iterator() --> Line_8 $$ while (it.hasNext()) [FD]
Line_8 $$ while (it.hasNext()) --> Line_9 $$ String server = (String) it.next() [CD]
Line_7 $$ Iterator it = serverUrlMap.keySet().iterator() --> Line_9 $$ String server = (String) it.next() [FD]
Line_8 $$ while (it.hasNext()) --> Line_10 $$ String serverUrl = (String) serverUrlMap.get(server) [CD]
Line_6 $$ HashMap serverUrlMap = InitXml.getInstance().getServerMap() --> Line_10 $$ String serverUrl = (String) serverUrlMap.get(server) [FD]
Line_9 $$ String server = (String) it.next() --> Line_10 $$ String serverUrl = (String) serverUrlMap.get(server) [FD]
Line_8 $$ while (it.hasNext()) --> Line_11 $$ serverUrl = serverUrl + Primer3Manager.servletName [CD]
Line_10 $$ String serverUrl = (String) serverUrlMap.get(server) --> Line_11 $$ serverUrl = serverUrl + Primer3Manager.servletName [FD]
Line_8 $$ while (it.hasNext()) --> Line_12 $$ URL url = new URL(serverUrl) [CD]
Line_8 $$ while (it.hasNext()) --> Line_13 $$ URLConnection uc = url.openConnection() [CD]
Line_12 $$ URL url = new URL(serverUrl) --> Line_13 $$ URLConnection uc = url.openConnection() [FD]
Line_8 $$ while (it.hasNext()) --> Line_14 $$ uc.setDoOutput(true) [CD]
Line_13 $$ URLConnection uc = url.openConnection() --> Line_14 $$ uc.setDoOutput(true) [FD]
Line_8 $$ while (it.hasNext()) --> Line_15 $$ OutputStream os = uc.getOutputStream() [CD]
Line_13 $$ URLConnection uc = url.openConnection() --> Line_15 $$ OutputStream os = uc.getOutputStream() [FD]
Line_8 $$ while (it.hasNext()) --> Line_16 $$ StringBuffer buf = new StringBuffer() [CD]
Line_8 $$ while (it.hasNext()) --> Line_17 $$ buf.append("actionType=designparent") [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_17 $$ buf.append("actionType=designparent") [FD]
Line_8 $$ while (it.hasNext()) --> Line_18 $$ for (int i = 0; i < paramList.size(); i++) [CD]
Line_2 $$ private ArrayList execAtParentServer(ArrayList paramList) throws Exception --> Line_18 $$ for (int i = 0; i < paramList.size(); i++) [FD]
Line_18 $$ for (int i = 0; i < paramList.size(); i++) --> Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) [CD]
Line_18 $$ for (int i = 0; i < paramList.size(); i++) --> Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) [FD]
Line_2 $$ private ArrayList execAtParentServer(ArrayList paramList) throws Exception --> Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) [FD]
Line_18 $$ for (int i = 0; i < paramList.size(); i++) --> Line_20 $$ if (i == 0) [CD]
Line_18 $$ for (int i = 0; i < paramList.size(); i++) --> Line_20 $$ if (i == 0) [FD]
Line_20 $$ if (i == 0) --> Line_21 $$ buf.append("&sequence=" + param.getSequence()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_21 $$ buf.append("&sequence=" + param.getSequence()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_21 $$ buf.append("&sequence=" + param.getSequence()) [FD]
Line_20 $$ if (i == 0) --> Line_22 $$ buf.append("&upstream_size" + upstreamSize) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_22 $$ buf.append("&upstream_size" + upstreamSize) [FD]
Line_20 $$ if (i == 0) --> Line_23 $$ buf.append("&downstreamSize" + downstreamSize) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_23 $$ buf.append("&downstreamSize" + downstreamSize) [FD]
Line_20 $$ if (i == 0) --> Line_24 $$ buf.append("&MARGIN_LENGTH=" + marginLength) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_24 $$ buf.append("&MARGIN_LENGTH=" + marginLength) [FD]
Line_20 $$ if (i == 0) --> Line_25 $$ buf.append("&OVERLAP_LENGTH=" + overlapLength) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_25 $$ buf.append("&OVERLAP_LENGTH=" + overlapLength) [FD]
Line_20 $$ if (i == 0) --> Line_26 $$ buf.append("&MUST_XLATE_PRODUCT_MIN_SIZE=" + param.getPrimerProductMinSize()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_26 $$ buf.append("&MUST_XLATE_PRODUCT_MIN_SIZE=" + param.getPrimerProductMinSize()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_26 $$ buf.append("&MUST_XLATE_PRODUCT_MIN_SIZE=" + param.getPrimerProductMinSize()) [FD]
Line_20 $$ if (i == 0) --> Line_27 $$ buf.append("&MUST_XLATE_PRODUCT_MAX_SIZE=" + param.getPrimerProductMaxSize()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_27 $$ buf.append("&MUST_XLATE_PRODUCT_MAX_SIZE=" + param.getPrimerProductMaxSize()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_27 $$ buf.append("&MUST_XLATE_PRODUCT_MAX_SIZE=" + param.getPrimerProductMaxSize()) [FD]
Line_20 $$ if (i == 0) --> Line_28 $$ buf.append("&PRIMER_PRODUCT_OPT_SIZE=" + param.getPrimerProductOptSize()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_28 $$ buf.append("&PRIMER_PRODUCT_OPT_SIZE=" + param.getPrimerProductOptSize()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_28 $$ buf.append("&PRIMER_PRODUCT_OPT_SIZE=" + param.getPrimerProductOptSize()) [FD]
Line_20 $$ if (i == 0) --> Line_29 $$ buf.append("&PRIMER_MAX_END_STABILITY=" + param.getPrimerMaxEndStability()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_29 $$ buf.append("&PRIMER_MAX_END_STABILITY=" + param.getPrimerMaxEndStability()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_29 $$ buf.append("&PRIMER_MAX_END_STABILITY=" + param.getPrimerMaxEndStability()) [FD]
Line_20 $$ if (i == 0) --> Line_30 $$ buf.append("&PRIMER_MAX_MISPRIMING=" + param.getPrimerMaxMispriming()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_30 $$ buf.append("&PRIMER_MAX_MISPRIMING=" + param.getPrimerMaxMispriming()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_30 $$ buf.append("&PRIMER_MAX_MISPRIMING=" + param.getPrimerMaxMispriming()) [FD]
Line_20 $$ if (i == 0) --> Line_31 $$ buf.append("&PRIMER_PAIR_MAX_MISPRIMING=" + param.getPrimerPairMaxMispriming()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_31 $$ buf.append("&PRIMER_PAIR_MAX_MISPRIMING=" + param.getPrimerPairMaxMispriming()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_31 $$ buf.append("&PRIMER_PAIR_MAX_MISPRIMING=" + param.getPrimerPairMaxMispriming()) [FD]
Line_20 $$ if (i == 0) --> Line_32 $$ buf.append("&PRIMER_MIN_SIZE=" + param.getPrimerMinSize()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_32 $$ buf.append("&PRIMER_MIN_SIZE=" + param.getPrimerMinSize()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_32 $$ buf.append("&PRIMER_MIN_SIZE=" + param.getPrimerMinSize()) [FD]
Line_20 $$ if (i == 0) --> Line_33 $$ buf.append("&PRIMER_OPT_SIZE=" + param.getPrimerOptSize()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_33 $$ buf.append("&PRIMER_OPT_SIZE=" + param.getPrimerOptSize()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_33 $$ buf.append("&PRIMER_OPT_SIZE=" + param.getPrimerOptSize()) [FD]
Line_20 $$ if (i == 0) --> Line_34 $$ buf.append("&PRIMER_MAX_SIZE=" + param.getPrimerMaxSize()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_34 $$ buf.append("&PRIMER_MAX_SIZE=" + param.getPrimerMaxSize()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_34 $$ buf.append("&PRIMER_MAX_SIZE=" + param.getPrimerMaxSize()) [FD]
Line_20 $$ if (i == 0) --> Line_35 $$ buf.append("&PRIMER_MIN_TM=" + param.getPrimerMinTm()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_35 $$ buf.append("&PRIMER_MIN_TM=" + param.getPrimerMinTm()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_35 $$ buf.append("&PRIMER_MIN_TM=" + param.getPrimerMinTm()) [FD]
Line_20 $$ if (i == 0) --> Line_36 $$ buf.append("&PRIMER_OPT_TM=" + param.getPrimerOptTm()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_36 $$ buf.append("&PRIMER_OPT_TM=" + param.getPrimerOptTm()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_36 $$ buf.append("&PRIMER_OPT_TM=" + param.getPrimerOptTm()) [FD]
Line_20 $$ if (i == 0) --> Line_37 $$ buf.append("&PRIMER_MAX_TM=" + param.getPrimerMaxTm()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_37 $$ buf.append("&PRIMER_MAX_TM=" + param.getPrimerMaxTm()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_37 $$ buf.append("&PRIMER_MAX_TM=" + param.getPrimerMaxTm()) [FD]
Line_20 $$ if (i == 0) --> Line_38 $$ buf.append("&PRIMER_MAX_DIFF_TM=" + param.getPrimerMaxDiffTm()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_38 $$ buf.append("&PRIMER_MAX_DIFF_TM=" + param.getPrimerMaxDiffTm()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_38 $$ buf.append("&PRIMER_MAX_DIFF_TM=" + param.getPrimerMaxDiffTm()) [FD]
Line_20 $$ if (i == 0) --> Line_39 $$ buf.append("&PRIMER_MIN_GC=" + param.getPrimerMinGc()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_39 $$ buf.append("&PRIMER_MIN_GC=" + param.getPrimerMinGc()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_39 $$ buf.append("&PRIMER_MIN_GC=" + param.getPrimerMinGc()) [FD]
Line_20 $$ if (i == 0) --> Line_40 $$ buf.append("&PRIMER_OPT_GC_PERCENT=" + param.getPrimerOptGcPercent()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_40 $$ buf.append("&PRIMER_OPT_GC_PERCENT=" + param.getPrimerOptGcPercent()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_40 $$ buf.append("&PRIMER_OPT_GC_PERCENT=" + param.getPrimerOptGcPercent()) [FD]
Line_20 $$ if (i == 0) --> Line_41 $$ buf.append("&PRIMER_MAX_GC=" + param.getPrimerMaxGc()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_41 $$ buf.append("&PRIMER_MAX_GC=" + param.getPrimerMaxGc()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_41 $$ buf.append("&PRIMER_MAX_GC=" + param.getPrimerMaxGc()) [FD]
Line_20 $$ if (i == 0) --> Line_42 $$ buf.append("&PRIMER_SELF_ANY=" + param.getPrimerSelfAny()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_42 $$ buf.append("&PRIMER_SELF_ANY=" + param.getPrimerSelfAny()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_42 $$ buf.append("&PRIMER_SELF_ANY=" + param.getPrimerSelfAny()) [FD]
Line_20 $$ if (i == 0) --> Line_43 $$ buf.append("&PRIMER_SELF_END=" + param.getPrimerSelfEnd()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_43 $$ buf.append("&PRIMER_SELF_END=" + param.getPrimerSelfEnd()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_43 $$ buf.append("&PRIMER_SELF_END=" + param.getPrimerSelfEnd()) [FD]
Line_20 $$ if (i == 0) --> Line_44 $$ buf.append("&PRIMER_NUM_NS_ACCEPTED=" + param.getPrimerNumNsAccepted()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_44 $$ buf.append("&PRIMER_NUM_NS_ACCEPTED=" + param.getPrimerNumNsAccepted()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_44 $$ buf.append("&PRIMER_NUM_NS_ACCEPTED=" + param.getPrimerNumNsAccepted()) [FD]
Line_20 $$ if (i == 0) --> Line_45 $$ buf.append("&PRIMER_MAX_POLY_X=" + param.getPrimerMaxPolyX()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_45 $$ buf.append("&PRIMER_MAX_POLY_X=" + param.getPrimerMaxPolyX()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_45 $$ buf.append("&PRIMER_MAX_POLY_X=" + param.getPrimerMaxPolyX()) [FD]
Line_20 $$ if (i == 0) --> Line_46 $$ buf.append("&PRIMER_GC_CLAMP=" + param.getPrimerGcClamp()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_46 $$ buf.append("&PRIMER_GC_CLAMP=" + param.getPrimerGcClamp()) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_46 $$ buf.append("&PRIMER_GC_CLAMP=" + param.getPrimerGcClamp()) [FD]
Line_18 $$ for (int i = 0; i < paramList.size(); i++) --> Line_48 $$ buf.append("&target=" + param.getPrimerSequenceId() + "," + (param.getTarget())[0] + "," + (param.getTarget())[1]) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_48 $$ buf.append("&target=" + param.getPrimerSequenceId() + "," + (param.getTarget())[0] + "," + (param.getTarget())[1]) [FD]
Line_19 $$ Primer3Param param = (Primer3Param) paramList.get(i) --> Line_48 $$ buf.append("&target=" + param.getPrimerSequenceId() + "," + (param.getTarget())[0] + "," + (param.getTarget())[1]) [FD]
Line_8 $$ while (it.hasNext()) --> Line_51 $$ ps.print(buf.toString()) [CD]
Line_16 $$ StringBuffer buf = new StringBuffer() --> Line_51 $$ ps.print(buf.toString()) [FD]
Line_8 $$ while (it.hasNext()) --> Line_52 $$ ps.close() [CD]
Line_13 $$ URLConnection uc = url.openConnection() --> Line_53 $$ ObjectInputStream ois = new ObjectInputStream(uc.getInputStream()) [FD]
Line_8 $$ while (it.hasNext()) --> Line_54 $$ outputList = (ArrayList) ois.readObject() [CD]
Line_3 $$ ArrayList outputList = null --> Line_54 $$ outputList = (ArrayList) ois.readObject() [FD]
Line_8 $$ while (it.hasNext()) --> Line_55 $$ ois.close() [CD]
Line_2 $$ private ArrayList execAtParentServer(ArrayList paramList) throws Exception --> Line_60 $$ if ((outputList == null || outputList.size() == 0) && message != null && message.length() > 0) [CD]
Line_54 $$ outputList = (ArrayList) ois.readObject() --> Line_60 $$ if ((outputList == null || outputList.size() == 0) && message != null && message.length() > 0) [FD]
Line_3 $$ ArrayList outputList = null --> Line_60 $$ if ((outputList == null || outputList.size() == 0) && message != null && message.length() > 0) [FD]
Line_4 $$ String message = "" --> Line_60 $$ if ((outputList == null || outputList.size() == 0) && message != null && message.length() > 0) [FD]
Line_2 $$ private ArrayList execAtParentServer(ArrayList paramList) throws Exception --> Line_63 $$ return outputList [CD]
