Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_3 $$ if (file.isDirectory()) [CD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_3 $$ if (file.isDirectory()) [FD]
Line_3 $$ if (file.isDirectory()) --> Line_4 $$ File[] files = file.listFiles() [CD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_4 $$ File[] files = file.listFiles() [FD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_6 $$ recurseFiles(root, file2, taos, absolute) [FD]
Line_5 $$ for (File file2 : files) --> Line_6 $$ recurseFiles(root, file2, taos, absolute) [FD]
Line_3 $$ if (file.isDirectory()) --> Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) [CD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) [FD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_9 $$ String filename = null [CD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_10 $$ if (absolute) [CD]
Line_10 $$ if (absolute) --> Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length()) [CD]
Line_9 $$ String filename = null --> Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length()) [FD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length()) [FD]
Line_10 $$ if (absolute) --> Line_13 $$ filename = file.getName() [CD]
Line_9 $$ String filename = null --> Line_13 $$ filename = file.getName() [FD]
Line_11 $$ filename = file.getAbsolutePath().substring(root.getAbsolutePath().length()) --> Line_13 $$ filename = file.getName() [FD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_13 $$ filename = file.getName() [FD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_15 $$ TarArchiveEntry tae = new TarArchiveEntry(filename) [CD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_16 $$ tae.setSize(file.length()) [CD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_16 $$ tae.setSize(file.length()) [FD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_17 $$ taos.putArchiveEntry(tae) [CD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_17 $$ taos.putArchiveEntry(tae) [FD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_18 $$ FileInputStream fis = new FileInputStream(file) [CD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_19 $$ IOUtils.copy(fis, taos) [CD]
Line_18 $$ FileInputStream fis = new FileInputStream(file) --> Line_19 $$ IOUtils.copy(fis, taos) [FD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_19 $$ IOUtils.copy(fis, taos) [FD]
Line_8 $$ if ((!file.getName().endsWith(".tar")) && (!file.getName().endsWith(".TAR"))) --> Line_20 $$ taos.closeArchiveEntry() [CD]
Line_2 $$ private static void recurseFiles(File root, File file, TarArchiveOutputStream taos, boolean absolute) throws IOException --> Line_20 $$ taos.closeArchiveEntry() [FD]
