Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_3 $$ validateUserIsSignedOn(authToken) [CD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_3 $$ validateUserIsSignedOn(authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() [CD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_5 $$ HttpSession session = getSession() [CD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_6 $$ if (record != null) [CD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_6 $$ if (record != null) [FD]
Line_6 $$ if (record != null) --> Line_7 $$ Connection connection = null [CD]
Line_6 $$ if (record != null) --> Line_8 $$ boolean updated = false [CD]
Line_7 $$ Connection connection = null --> Line_10 $$ connection = DatabaseConnector.getConnection() [FD]
Line_7 $$ Connection connection = null --> Line_11 $$ connection.setAutoCommit(false) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_11 $$ connection.setAutoCommit(false) [FD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_12 $$ recordUpdateResult.setMessage(messages.server_record_update_success("")) [FD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_13 $$ recordUpdateResult.setSuccessful(true) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_14 $$ long userId = getSignedOnUser(authToken).getUserId() [FD]
Line_7 $$ Connection connection = null --> Line_15 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_15 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_15 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_5 $$ HttpSession session = getSession() --> Line_15 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_14 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_15 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_16 $$ if (record.isTopicsChanged()) [FD]
Line_16 $$ if (record.isTopicsChanged()) --> Line_17 $$ ArrayList<Topic> currentTopics = TopicRetrievalServiceImpl.getTopics(record.getRecordid(), getSession(), authToken) [CD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_17 $$ ArrayList<Topic> currentTopics = TopicRetrievalServiceImpl.getTopics(record.getRecordid(), getSession(), authToken) [FD]
Line_16 $$ if (record.isTopicsChanged()) --> Line_18 $$ TopicUpdateServiceImpl.removeRecordTopics(connection, currentTopics, record.getRecordid()) [CD]
Line_7 $$ Connection connection = null --> Line_18 $$ TopicUpdateServiceImpl.removeRecordTopics(connection, currentTopics, record.getRecordid()) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_18 $$ TopicUpdateServiceImpl.removeRecordTopics(connection, currentTopics, record.getRecordid()) [FD]
Line_17 $$ ArrayList<Topic> currentTopics = TopicRetrievalServiceImpl.getTopics(record.getRecordid(), getSession(), authToken) --> Line_18 $$ TopicUpdateServiceImpl.removeRecordTopics(connection, currentTopics, record.getRecordid()) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_18 $$ TopicUpdateServiceImpl.removeRecordTopics(connection, currentTopics, record.getRecordid()) [FD]
Line_16 $$ if (record.isTopicsChanged()) --> Line_19 $$ TopicUpdateServiceImpl.insertRecordTopics(connection, record.getTopics(), record.getRecordid()) [CD]
Line_7 $$ Connection connection = null --> Line_19 $$ TopicUpdateServiceImpl.insertRecordTopics(connection, record.getTopics(), record.getRecordid()) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_19 $$ TopicUpdateServiceImpl.insertRecordTopics(connection, record.getTopics(), record.getRecordid()) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_19 $$ TopicUpdateServiceImpl.insertRecordTopics(connection, record.getTopics(), record.getRecordid()) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_21 $$ ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes() [FD]
Line_21 $$ ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes() --> Line_22 $$ if (recordAttributes != null && recordAttributes.size() > 0) [FD]
Line_22 $$ if (recordAttributes != null && recordAttributes.size() > 0) --> Line_23 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() [CD]
Line_21 $$ ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes() --> Line_23 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() [FD]
Line_22 $$ if (recordAttributes != null && recordAttributes.size() > 0) --> Line_24 $$ while (rItr.hasNext()) [CD]
Line_23 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() --> Line_24 $$ while (rItr.hasNext()) [FD]
Line_24 $$ while (rItr.hasNext()) --> Line_25 $$ RecordAttribute r = rItr.next() [CD]
Line_23 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() --> Line_25 $$ RecordAttribute r = rItr.next() [FD]
Line_24 $$ while (rItr.hasNext()) --> Line_26 $$ if (r.getRecordattributeid() > 0) [CD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_26 $$ if (r.getRecordattributeid() > 0) [FD]
Line_26 $$ if (r.getRecordattributeid() > 0) --> Line_27 $$ if (r.getArchivedtimestamp() == null) [CD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_27 $$ if (r.getArchivedtimestamp() == null) [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_28 $$ String rAtSql = "update tms.recordattributes set chardata = ? " + "where recordattributeid = ?" [CD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [CD]
Line_7 $$ Connection connection = null --> Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_28 $$ String rAtSql = "update tms.recordattributes set chardata = ? " + "where recordattributeid = ?" --> Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_30 $$ updateRecordAttribute.setString(1, r.getChardata()) [CD]
Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) --> Line_30 $$ updateRecordAttribute.setString(1, r.getChardata()) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_30 $$ updateRecordAttribute.setString(1, r.getChardata()) [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_31 $$ updateRecordAttribute.setLong(2, r.getRecordattributeid()) [CD]
Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) --> Line_31 $$ updateRecordAttribute.setLong(2, r.getRecordattributeid()) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_31 $$ updateRecordAttribute.setLong(2, r.getRecordattributeid()) [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_32 $$ updateRecordAttribute.executeUpdate() [CD]
Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) --> Line_32 $$ updateRecordAttribute.executeUpdate() [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_33 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [CD]
Line_7 $$ Connection connection = null --> Line_33 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_33 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_33 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_5 $$ HttpSession session = getSession() --> Line_33 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_33 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_14 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_33 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_UPDATE), authToken, session) [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_36 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [CD]
Line_7 $$ Connection connection = null --> Line_36 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_36 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_28 $$ String rAtSql = "update tms.recordattributes set chardata = ? " + "where recordattributeid = ?" --> Line_36 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_37 $$ updateRecordAttribute.setLong(1, r.getRecordattributeid()) [CD]
Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) --> Line_37 $$ updateRecordAttribute.setLong(1, r.getRecordattributeid()) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_37 $$ updateRecordAttribute.setLong(1, r.getRecordattributeid()) [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_38 $$ updateRecordAttribute.executeUpdate() [CD]
Line_29 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) --> Line_38 $$ updateRecordAttribute.executeUpdate() [FD]
Line_27 $$ if (r.getArchivedtimestamp() == null) --> Line_39 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session) [CD]
Line_7 $$ Connection connection = null --> Line_39 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_39 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_39 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session) [FD]
Line_5 $$ HttpSession session = getSession() --> Line_39 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_39 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session) [FD]
Line_14 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_39 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, session) [FD]
Line_26 $$ if (r.getRecordattributeid() > 0) --> Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) [CD]
Line_7 $$ Connection connection = null --> Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_28 $$ String rAtSql = "update tms.recordattributes set chardata = ? " + "where recordattributeid = ?" --> Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_26 $$ if (r.getRecordattributeid() > 0) --> Line_44 $$ insertRecordAttribute.setLong(1, r.getInputmodelfieldid()) [CD]
Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) --> Line_44 $$ insertRecordAttribute.setLong(1, r.getInputmodelfieldid()) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_44 $$ insertRecordAttribute.setLong(1, r.getInputmodelfieldid()) [FD]
Line_26 $$ if (r.getRecordattributeid() > 0) --> Line_45 $$ insertRecordAttribute.setString(2, r.getChardata()) [CD]
Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) --> Line_45 $$ insertRecordAttribute.setString(2, r.getChardata()) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_45 $$ insertRecordAttribute.setString(2, r.getChardata()) [FD]
Line_26 $$ if (r.getRecordattributeid() > 0) --> Line_46 $$ insertRecordAttribute.setLong(3, record.getRecordid()) [CD]
Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) --> Line_46 $$ insertRecordAttribute.setLong(3, record.getRecordid()) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_46 $$ insertRecordAttribute.setLong(3, record.getRecordid()) [FD]
Line_26 $$ if (r.getRecordattributeid() > 0) --> Line_47 $$ ResultSet result = insertRecordAttribute.executeQuery() [CD]
Line_43 $$ PreparedStatement insertRecordAttribute = connection.prepareStatement(rAtSql) --> Line_47 $$ ResultSet result = insertRecordAttribute.executeQuery() [FD]
Line_26 $$ if (r.getRecordattributeid() > 0) --> Line_48 $$ if (result.next()) [CD]
Line_47 $$ ResultSet result = insertRecordAttribute.executeQuery() --> Line_48 $$ if (result.next()) [FD]
Line_48 $$ if (result.next()) --> Line_49 $$ long recordattributeid = result.getLong("recordattributeid") [CD]
Line_47 $$ ResultSet result = insertRecordAttribute.executeQuery() --> Line_49 $$ long recordattributeid = result.getLong("recordattributeid") [FD]
Line_48 $$ if (result.next()) --> Line_50 $$ r.setRecordattributeid(recordattributeid) [CD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_50 $$ r.setRecordattributeid(recordattributeid) [FD]
Line_49 $$ long recordattributeid = result.getLong("recordattributeid") --> Line_50 $$ r.setRecordattributeid(recordattributeid) [FD]
Line_48 $$ if (result.next()) --> Line_51 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session) [CD]
Line_7 $$ Connection connection = null --> Line_51 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_51 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_51 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session) [FD]
Line_5 $$ HttpSession session = getSession() --> Line_51 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session) [FD]
Line_25 $$ RecordAttribute r = rItr.next() --> Line_51 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session) [FD]
Line_14 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_51 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_CREATE), authToken, session) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_56 $$ ArrayList<Term> terms = record.getTerms() [FD]
Line_56 $$ ArrayList<Term> terms = record.getTerms() --> Line_57 $$ Iterator<Term> termsItr = terms.iterator() [FD]
Line_57 $$ Iterator<Term> termsItr = terms.iterator() --> Line_58 $$ while (termsItr.hasNext()) [FD]
Line_58 $$ while (termsItr.hasNext()) --> Line_59 $$ Term term = termsItr.next() [CD]
Line_57 $$ Iterator<Term> termsItr = terms.iterator() --> Line_59 $$ Term term = termsItr.next() [FD]
Line_58 $$ while (termsItr.hasNext()) --> Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) [CD]
Line_59 $$ Term term = termsItr.next() --> Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) [FD]
Line_7 $$ Connection connection = null --> Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) [FD]
Line_14 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) [FD]
Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) --> Line_61 $$ TermAdditionServiceImpl termAdder = new TermAdditionServiceImpl() [CD]
Line_60 $$ TermUpdater.updateTerm(connection, term, userId, authToken, getSession()) --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [CD]
Line_61 $$ TermAdditionServiceImpl termAdder = new TermAdditionServiceImpl() --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [FD]
Line_7 $$ Connection connection = null --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [FD]
Line_59 $$ Term term = termsItr.next() --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [FD]
Line_14 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [FD]
Line_5 $$ HttpSession session = getSession() --> Line_62 $$ termAdder.addTerm(connection, term, userId, authToken, session) [FD]
Line_7 $$ Connection connection = null --> Line_65 $$ connection.commit() [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_65 $$ connection.commit() [FD]
Line_8 $$ boolean updated = false --> Line_66 $$ updated = true [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_67 $$ RecordIdTracker.refreshRecordIdsInSessionByFilter(session, connection, true, filter, sourceField, authToken) [FD]
Line_5 $$ HttpSession session = getSession() --> Line_67 $$ RecordIdTracker.refreshRecordIdsInSessionByFilter(session, connection, true, filter, sourceField, authToken) [FD]
Line_7 $$ Connection connection = null --> Line_67 $$ RecordIdTracker.refreshRecordIdsInSessionByFilter(session, connection, true, filter, sourceField, authToken) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_67 $$ RecordIdTracker.refreshRecordIdsInSessionByFilter(session, connection, true, filter, sourceField, authToken) [FD]
Line_68 $$ RecordRetrievalServiceImpl retriever = new RecordRetrievalServiceImpl() --> Line_69 $$ Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), session, false, inputmodel, authToken) [FD]
Line_5 $$ HttpSession session = getSession() --> Line_69 $$ Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), session, false, inputmodel, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_69 $$ Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), session, false, inputmodel, authToken) [FD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_70 $$ recordUpdateResult.setResult(updatedRecord) [FD]
Line_69 $$ Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), session, false, inputmodel, authToken) --> Line_70 $$ recordUpdateResult.setResult(updatedRecord) [FD]
Line_8 $$ boolean updated = false --> Line_72 $$ if (!updated && connection != null) [FD]
Line_66 $$ updated = true --> Line_72 $$ if (!updated && connection != null) [FD]
Line_7 $$ Connection connection = null --> Line_74 $$ connection.rollback() [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_74 $$ connection.rollback() [FD]
Line_5 $$ HttpSession session = getSession() --> Line_76 $$ LogUtility.log(Level.SEVERE, session, messages.log_db_rollback(""), e1, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_76 $$ LogUtility.log(Level.SEVERE, session, messages.log_db_rollback(""), e1, authToken) [FD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_80 $$ recordUpdateResult.setFailed(true) [FD]
Line_81 $$ if (updated) --> Line_82 $$ recordUpdateResult.setMessage(messages.server_record_update_retrieve("")) [CD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_82 $$ recordUpdateResult.setMessage(messages.server_record_update_retrieve("")) [FD]
Line_81 $$ if (updated) --> Line_83 $$ recordUpdateResult.setException(e) [CD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_83 $$ recordUpdateResult.setException(e) [FD]
Line_81 $$ if (updated) --> Line_84 $$ LogUtility.log(Level.SEVERE, session, messages.server_record_update_retrieve(""), e, authToken) [CD]
Line_5 $$ HttpSession session = getSession() --> Line_84 $$ LogUtility.log(Level.SEVERE, session, messages.server_record_update_retrieve(""), e, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_84 $$ LogUtility.log(Level.SEVERE, session, messages.server_record_update_retrieve(""), e, authToken) [FD]
Line_81 $$ if (updated) --> Line_86 $$ recordUpdateResult.setMessage(messages.server_record_update_fail("")) [CD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_86 $$ recordUpdateResult.setMessage(messages.server_record_update_fail("")) [FD]
Line_81 $$ if (updated) --> Line_87 $$ recordUpdateResult.setException(new PersistenceException(e)) [CD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_87 $$ recordUpdateResult.setException(new PersistenceException(e)) [FD]
Line_81 $$ if (updated) --> Line_88 $$ LogUtility.log(Level.SEVERE, session, messages.server_record_update_fail(""), e, authToken) [CD]
Line_5 $$ HttpSession session = getSession() --> Line_88 $$ LogUtility.log(Level.SEVERE, session, messages.server_record_update_fail(""), e, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_88 $$ LogUtility.log(Level.SEVERE, session, messages.server_record_update_fail(""), e, authToken) [FD]
Line_4 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_90 $$ GWT.log(recordUpdateResult.getMessage(), e) [FD]
Line_7 $$ Connection connection = null --> Line_93 $$ if (connection != null) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_93 $$ if (connection != null) [FD]
Line_93 $$ if (connection != null) --> Line_94 $$ connection.setAutoCommit(true) [CD]
Line_7 $$ Connection connection = null --> Line_94 $$ connection.setAutoCommit(true) [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_94 $$ connection.setAutoCommit(true) [FD]
Line_93 $$ if (connection != null) --> Line_95 $$ connection.close() [CD]
Line_7 $$ Connection connection = null --> Line_95 $$ connection.close() [FD]
Line_10 $$ connection = DatabaseConnector.getConnection() --> Line_95 $$ connection.close() [FD]
Line_5 $$ HttpSession session = getSession() --> Line_98 $$ LogUtility.log(Level.SEVERE, session, messages.log_db_close(""), e, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_98 $$ LogUtility.log(Level.SEVERE, session, messages.log_db_close(""), e, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> updateRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_102 $$ return recordUpdateResult [CD]
