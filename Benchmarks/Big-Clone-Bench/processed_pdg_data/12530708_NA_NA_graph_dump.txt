Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_3 $$ String encoding = DEFAULT_ENCODING [CD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_4 $$ if (merge.getEncoding() != null && merge.getEncoding().length() > 0) [CD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_4 $$ if (merge.getEncoding() != null && merge.getEncoding().length() > 0) [FD]
Line_4 $$ if (merge.getEncoding() != null && merge.getEncoding().length() > 0) --> Line_5 $$ encoding = merge.getEncoding() [CD]
Line_3 $$ String encoding = DEFAULT_ENCODING --> Line_5 $$ encoding = merge.getEncoding() [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_5 $$ encoding = merge.getEncoding() [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_7 $$ int numMergedFiles = 0 [CD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_8 $$ Writer ostream = null [CD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_9 $$ FileOutputStream fos = null [CD]
Line_9 $$ FileOutputStream fos = null --> Line_11 $$ fos = new FileOutputStream(merge.getTargetFile(), true) [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_11 $$ fos = new FileOutputStream(merge.getTargetFile(), true) [FD]
Line_8 $$ Writer ostream = null --> Line_12 $$ ostream = new OutputStreamWriter(fos, encoding) [FD]
Line_14 $$ for (String orderingName : this.orderingNames) --> Line_15 $$ List<File> files = this.orderedFiles.get(orderingName) [FD]
Line_15 $$ List<File> files = this.orderedFiles.get(orderingName) --> Line_16 $$ if (files != null) [FD]
Line_16 $$ if (files != null) --> Line_17 $$ getLog().info("Appending: " + files.size() + " files that matched the name: " + orderingName + " to the target file: " + merge.getTargetFile().getAbsolutePath() + "...") [CD]
Line_15 $$ List<File> files = this.orderedFiles.get(orderingName) --> Line_17 $$ getLog().info("Appending: " + files.size() + " files that matched the name: " + orderingName + " to the target file: " + merge.getTargetFile().getAbsolutePath() + "...") [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_17 $$ getLog().info("Appending: " + files.size() + " files that matched the name: " + orderingName + " to the target file: " + merge.getTargetFile().getAbsolutePath() + "...") [FD]
Line_18 $$ for (File file : files) --> Line_19 $$ String fileName = file.getName() [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_20 $$ getLog().info("Appending file: " + fileName + " to the target file: " + merge.getTargetFile().getAbsolutePath() + "...") [FD]
Line_21 $$ InputStream input = null --> Line_23 $$ input = new FileInputStream(file) [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_25 $$ String replaced = merge.getSeparator().trim() [CD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_25 $$ String replaced = merge.getSeparator().trim() [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_26 $$ replaced = replaced.replace("\n", "") [CD]
Line_25 $$ String replaced = merge.getSeparator().trim() --> Line_26 $$ replaced = replaced.replace("\n", "") [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_27 $$ replaced = replaced.replace("\t", "") [CD]
Line_25 $$ String replaced = merge.getSeparator().trim() --> Line_27 $$ replaced = replaced.replace("\t", "") [FD]
Line_26 $$ replaced = replaced.replace("\n", "") --> Line_27 $$ replaced = replaced.replace("\t", "") [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_28 $$ replaced = replaced.replace("# [CD]
Line_25 $$ String replaced = merge.getSeparator().trim() --> Line_28 $$ replaced = replaced.replace("# [FD]
Line_26 $$ replaced = replaced.replace("\n", "") --> Line_28 $$ replaced = replaced.replace("# [FD]
Line_27 $$ replaced = replaced.replace("\t", "") --> Line_28 $$ replaced = replaced.replace("# [FD]
Line_19 $$ String fileName = file.getName() --> Line_28 $$ replaced = replaced.replace("# [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_29 $$ replaced = replaced.replace("# [CD]
Line_25 $$ String replaced = merge.getSeparator().trim() --> Line_29 $$ replaced = replaced.replace("# [FD]
Line_26 $$ replaced = replaced.replace("\n", "") --> Line_29 $$ replaced = replaced.replace("# [FD]
Line_27 $$ replaced = replaced.replace("\t", "") --> Line_29 $$ replaced = replaced.replace("# [FD]
Line_28 $$ replaced = replaced.replace("# --> Line_29 $$ replaced = replaced.replace("# [FD]
Line_18 $$ for (File file : files) --> Line_29 $$ replaced = replaced.replace("# [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_30 $$ replaced = replaced.replace("\\n", "\n") [CD]
Line_25 $$ String replaced = merge.getSeparator().trim() --> Line_30 $$ replaced = replaced.replace("\\n", "\n") [FD]
Line_26 $$ replaced = replaced.replace("\n", "") --> Line_30 $$ replaced = replaced.replace("\\n", "\n") [FD]
Line_27 $$ replaced = replaced.replace("\t", "") --> Line_30 $$ replaced = replaced.replace("\\n", "\n") [FD]
Line_28 $$ replaced = replaced.replace("# --> Line_30 $$ replaced = replaced.replace("\\n", "\n") [FD]
Line_29 $$ replaced = replaced.replace("# --> Line_30 $$ replaced = replaced.replace("\\n", "\n") [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_31 $$ replaced = replaced.replace("\\t", "\t") [CD]
Line_25 $$ String replaced = merge.getSeparator().trim() --> Line_31 $$ replaced = replaced.replace("\\t", "\t") [FD]
Line_26 $$ replaced = replaced.replace("\n", "") --> Line_31 $$ replaced = replaced.replace("\\t", "\t") [FD]
Line_27 $$ replaced = replaced.replace("\t", "") --> Line_31 $$ replaced = replaced.replace("\\t", "\t") [FD]
Line_28 $$ replaced = replaced.replace("# --> Line_31 $$ replaced = replaced.replace("\\t", "\t") [FD]
Line_29 $$ replaced = replaced.replace("# --> Line_31 $$ replaced = replaced.replace("\\t", "\t") [FD]
Line_30 $$ replaced = replaced.replace("\\n", "\n") --> Line_31 $$ replaced = replaced.replace("\\t", "\t") [FD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_32 $$ getLog().debug("Appending separator: " + replaced) [CD]
Line_24 $$ if (merge.getSeparator() != null && merge.getSeparator().trim().length() > 0) --> Line_33 $$ IOUtils.copy(new StringReader(replaced), output) [CD]
Line_13 $$ BufferedWriter output = new BufferedWriter(ostream) --> Line_33 $$ IOUtils.copy(new StringReader(replaced), output) [FD]
Line_21 $$ InputStream input = null --> Line_35 $$ IOUtils.copy(input, output, encoding) [FD]
Line_23 $$ input = new FileInputStream(file) --> Line_35 $$ IOUtils.copy(input, output, encoding) [FD]
Line_13 $$ BufferedWriter output = new BufferedWriter(ostream) --> Line_35 $$ IOUtils.copy(input, output, encoding) [FD]
Line_3 $$ String encoding = DEFAULT_ENCODING --> Line_35 $$ IOUtils.copy(input, output, encoding) [FD]
Line_5 $$ encoding = merge.getEncoding() --> Line_35 $$ IOUtils.copy(input, output, encoding) [FD]
Line_21 $$ InputStream input = null --> Line_39 $$ IOUtils.closeQuietly(input) [FD]
Line_23 $$ input = new FileInputStream(file) --> Line_39 $$ IOUtils.closeQuietly(input) [FD]
Line_7 $$ int numMergedFiles = 0 --> Line_41 $$ numMergedFiles++ [FD]
Line_13 $$ BufferedWriter output = new BufferedWriter(ostream) --> Line_45 $$ output.flush() [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_47 $$ throw new MojoExecutionException("Failed to open stream file to output file: " + merge.getTargetFile().getAbsolutePath(), ioe) [FD]
Line_9 $$ FileOutputStream fos = null --> Line_49 $$ if (fos != null) [FD]
Line_11 $$ fos = new FileOutputStream(merge.getTargetFile(), true) --> Line_49 $$ if (fos != null) [FD]
Line_49 $$ if (fos != null) --> Line_50 $$ IOUtils.closeQuietly(fos) [CD]
Line_9 $$ FileOutputStream fos = null --> Line_50 $$ IOUtils.closeQuietly(fos) [FD]
Line_11 $$ fos = new FileOutputStream(merge.getTargetFile(), true) --> Line_50 $$ IOUtils.closeQuietly(fos) [FD]
Line_8 $$ Writer ostream = null --> Line_52 $$ if (ostream != null) [FD]
Line_12 $$ ostream = new OutputStreamWriter(fos, encoding) --> Line_52 $$ if (ostream != null) [FD]
Line_52 $$ if (ostream != null) --> Line_53 $$ IOUtils.closeQuietly(ostream) [CD]
Line_8 $$ Writer ostream = null --> Line_53 $$ IOUtils.closeQuietly(ostream) [FD]
Line_12 $$ ostream = new OutputStreamWriter(fos, encoding) --> Line_53 $$ IOUtils.closeQuietly(ostream) [FD]
Line_2 $$ private int mergeFiles(Merge merge) throws MojoExecutionException --> Line_56 $$ return numMergedFiles [CD]
