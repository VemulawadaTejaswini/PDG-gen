Line_2 $$ public static void main(String[] args) --> Line_3 $$ if (args.length <= 0) [CD]
Line_3 $$ if (args.length <= 0) --> Line_4 $$ System.out.println(" *** SQL script generator and executor ***") [CD]
Line_3 $$ if (args.length <= 0) --> Line_5 $$ System.out.println(" You must specify name of the file with SQL script data") [CD]
Line_3 $$ if (args.length <= 0) --> Line_6 $$ System.out.println(" Fisrt rows of this file must be:") [CD]
Line_3 $$ if (args.length <= 0) --> Line_7 $$ System.out.println(" 1) JDBC driver class for your DBMS") [CD]
Line_3 $$ if (args.length <= 0) --> Line_8 $$ System.out.println(" 2) URL for your database instance") [CD]
Line_3 $$ if (args.length <= 0) --> Line_9 $$ System.out.println(" 3) user in that database (with administrator priviliges)") [CD]
Line_3 $$ if (args.length <= 0) --> Line_10 $$ System.out.println(" 4) password of that user") [CD]
Line_3 $$ if (args.length <= 0) --> Line_11 $$ System.out.println(" Next rows can have: '@' before schema to create,") [CD]
Line_3 $$ if (args.length <= 0) --> Line_12 $$ System.out.println("   '#' before table to create, '&' before table to insert,") [CD]
Line_3 $$ if (args.length <= 0) --> Line_13 $$ System.out.println("   '$' before trigger (inverse 'FK on delete cascade') to create,") [CD]
Line_3 $$ if (args.length <= 0) --> Line_14 $$ System.out.println("   '>' before table to drop, '<' before schema to drop.") [CD]
Line_3 $$ if (args.length <= 0) --> Line_15 $$ System.out.println(" Other rows contain parameters of these actions:") [CD]
Line_3 $$ if (args.length <= 0) --> Line_16 $$ System.out.println("   for & action each parameter is a list of values,") [CD]
Line_3 $$ if (args.length <= 0) --> Line_17 $$ System.out.println("   for @ -//- is # acrion, for # -//- is column/constraint ") [CD]
Line_3 $$ if (args.length <= 0) --> Line_18 $$ System.out.println("    definition or $ action. $ syntax to delete from table:") [CD]
Line_3 $$ if (args.length <= 0) --> Line_19 $$ System.out.println("    fullNameOfTable:itsColInWhereClause=matchingColOfThisTable") [CD]
Line_3 $$ if (args.length <= 0) --> Line_20 $$ System.out.println(" '!' before row means that it is a comment.") [CD]
Line_3 $$ if (args.length <= 0) --> Line_21 $$ System.out.println(" If some exception is occured, all script is rolled back.") [CD]
Line_3 $$ if (args.length <= 0) --> Line_22 $$ System.out.println(" If you specify 2nd command line argument - file name too -") [CD]
Line_3 $$ if (args.length <= 0) --> Line_23 $$ System.out.println("   connection will be established but all statements will") [CD]
Line_3 $$ if (args.length <= 0) --> Line_24 $$ System.out.println("   be saved in that output file and not transmitted to DB") [CD]
Line_3 $$ if (args.length <= 0) --> Line_25 $$ System.out.println(" If you specify 3nd command line argument - connect_string -") [CD]
Line_3 $$ if (args.length <= 0) --> Line_26 $$ System.out.println("   connect information will be added to output file") [CD]
Line_3 $$ if (args.length <= 0) --> Line_27 $$ System.out.println("   in the form 'connect user/password@connect_string'") [CD]
Line_3 $$ if (args.length <= 0) --> Line_28 $$ System.exit(0) [CD]
Line_32 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_35 $$ for (int i = 0; i < 4; i++) info[i] = reader.readLine() [FD]
Line_40 $$ if (args.length > 1) --> Line_41 $$ writer = new FileWriter(args[1]) [CD]
Line_33 $$ Writer writer = null --> Line_41 $$ writer = new FileWriter(args[1]) [FD]
Line_40 $$ if (args.length > 1) --> Line_42 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + args[2] + script.statementTerminator) [CD]
Line_33 $$ Writer writer = null --> Line_42 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + args[2] + script.statementTerminator) [FD]
Line_41 $$ writer = new FileWriter(args[1]) --> Line_42 $$ writer.write("connect " + info[2] + "/" + info[3] + "@" + args[2] + script.statementTerminator) [FD]
Line_39 $$ SQLScript script = new SQLScript(connection) --> Line_45 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution") [FD]
Line_32 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_45 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution") [FD]
Line_33 $$ Writer writer = null --> Line_45 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution") [FD]
Line_41 $$ writer = new FileWriter(args[1]) --> Line_45 $$ System.out.println(script.executeScript(reader, writer) + " updates has been performed during script execution") [FD]
Line_32 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_47 $$ reader.close() [FD]
Line_33 $$ Writer writer = null --> Line_48 $$ if (writer != null) [FD]
Line_41 $$ writer = new FileWriter(args[1]) --> Line_48 $$ if (writer != null) [FD]
Line_38 $$ Connection connection = DriverManager.getConnection(info[1], info[2], info[3]) --> Line_51 $$ connection.close() [FD]
Line_32 $$ BufferedReader reader = new BufferedReader(new FileReader(new File(args[0]))) --> Line_53 $$ reader.close() [FD]
Line_33 $$ Writer writer = null --> Line_54 $$ if (writer != null) [FD]
Line_41 $$ writer = new FileWriter(args[1]) --> Line_54 $$ if (writer != null) [FD]
