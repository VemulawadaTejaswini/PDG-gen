Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_3 $$ URLConnection connection = url.openConnection() [CD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_3 $$ URLConnection connection = url.openConnection() [FD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_4 $$ JarFile jarFile [CD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_5 $$ if (connection instanceof JarURLConnection) [CD]
Line_3 $$ URLConnection connection = url.openConnection() --> Line_5 $$ if (connection instanceof JarURLConnection) [FD]
Line_5 $$ if (connection instanceof JarURLConnection) --> Line_6 $$ jarFile = ((JarURLConnection) connection).getJarFile() [CD]
Line_4 $$ JarFile jarFile --> Line_6 $$ jarFile = ((JarURLConnection) connection).getJarFile() [FD]
Line_5 $$ if (connection instanceof JarURLConnection) --> Line_8 $$ jarFile = getAlternativeJarFile(url) [CD]
Line_4 $$ JarFile jarFile --> Line_8 $$ jarFile = getAlternativeJarFile(url) [FD]
Line_6 $$ jarFile = ((JarURLConnection) connection).getJarFile() --> Line_8 $$ jarFile = getAlternativeJarFile(url) [FD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_8 $$ jarFile = getAlternativeJarFile(url) [FD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_10 $$ if (jarFile != null) [CD]
Line_4 $$ JarFile jarFile --> Line_10 $$ if (jarFile != null) [FD]
Line_6 $$ jarFile = ((JarURLConnection) connection).getJarFile() --> Line_10 $$ if (jarFile != null) [FD]
Line_8 $$ jarFile = getAlternativeJarFile(url) --> Line_10 $$ if (jarFile != null) [FD]
Line_10 $$ if (jarFile != null) --> Line_11 $$ scanJarFile(packagePath, componentClassNames, jarFile) [CD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_11 $$ scanJarFile(packagePath, componentClassNames, jarFile) [FD]
Line_4 $$ JarFile jarFile --> Line_11 $$ scanJarFile(packagePath, componentClassNames, jarFile) [FD]
Line_6 $$ jarFile = ((JarURLConnection) connection).getJarFile() --> Line_11 $$ scanJarFile(packagePath, componentClassNames, jarFile) [FD]
Line_8 $$ jarFile = getAlternativeJarFile(url) --> Line_11 $$ scanJarFile(packagePath, componentClassNames, jarFile) [FD]
Line_10 $$ if (jarFile != null) --> Line_12 $$ if (supportsDirStream(url)) [CD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_12 $$ if (supportsDirStream(url)) [FD]
Line_12 $$ if (supportsDirStream(url)) --> Line_13 $$ Stack<Queued> queue = new Stack<Queued>() [CD]
Line_12 $$ if (supportsDirStream(url)) --> Line_14 $$ queue.push(new Queued(url, packagePath)) [CD]
Line_13 $$ Stack<Queued> queue = new Stack<Queued>() --> Line_14 $$ queue.push(new Queued(url, packagePath)) [FD]
Line_12 $$ if (supportsDirStream(url)) --> Line_15 $$ while (!queue.isEmpty()) [CD]
Line_13 $$ Stack<Queued> queue = new Stack<Queued>() --> Line_15 $$ while (!queue.isEmpty()) [FD]
Line_15 $$ while (!queue.isEmpty()) --> Line_16 $$ Queued queued = queue.pop() [CD]
Line_13 $$ Stack<Queued> queue = new Stack<Queued>() --> Line_16 $$ Queued queued = queue.pop() [FD]
Line_15 $$ while (!queue.isEmpty()) --> Line_17 $$ scanDirStream(queued.packagePath, queued.packageURL, componentClassNames, queue) [CD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_17 $$ scanDirStream(queued.packagePath, queued.packageURL, componentClassNames, queue) [FD]
Line_13 $$ Stack<Queued> queue = new Stack<Queued>() --> Line_17 $$ scanDirStream(queued.packagePath, queued.packageURL, componentClassNames, queue) [FD]
Line_12 $$ if (supportsDirStream(url)) --> Line_20 $$ String packageName = packagePath.replace("/", ".") [CD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_20 $$ String packageName = packagePath.replace("/", ".") [FD]
Line_12 $$ if (supportsDirStream(url)) --> Line_21 $$ if (packageName.endsWith(".")) [CD]
Line_20 $$ String packageName = packagePath.replace("/", ".") --> Line_21 $$ if (packageName.endsWith(".")) [FD]
Line_21 $$ if (packageName.endsWith(".")) --> Line_22 $$ packageName = packageName.substring(0, packageName.length() - 1) [CD]
Line_20 $$ String packageName = packagePath.replace("/", ".") --> Line_22 $$ packageName = packageName.substring(0, packageName.length() - 1) [FD]
Line_12 $$ if (supportsDirStream(url)) --> Line_24 $$ scanDir(packageName, new File(url.getFile()), componentClassNames) [CD]
Line_20 $$ String packageName = packagePath.replace("/", ".") --> Line_24 $$ scanDir(packageName, new File(url.getFile()), componentClassNames) [FD]
Line_22 $$ packageName = packageName.substring(0, packageName.length() - 1) --> Line_24 $$ scanDir(packageName, new File(url.getFile()), componentClassNames) [FD]
Line_2 $$ private void scanURL(String packagePath, Collection<String> componentClassNames, URL url) throws IOException --> Line_24 $$ scanDir(packageName, new File(url.getFile()), componentClassNames) [FD]
