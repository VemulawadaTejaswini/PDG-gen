Line_2 $$ public static boolean compress(File source, File target, Manifest manifest) --> Line_4 $$ if (!(source.exists() & source.isDirectory())) [FD]
Line_2 $$ public static boolean compress(File source, File target, Manifest manifest) --> Line_5 $$ if (target.exists()) [FD]
Line_2 $$ public static boolean compress(File source, File target, Manifest manifest) --> Line_7 $$ boolean isJar = target.getName().toLowerCase().endsWith(".jar") [FD]
Line_8 $$ if (isJar) --> Line_9 $$ File manifestDir = new File(source, "META-INF") [CD]
Line_8 $$ if (isJar) --> Line_10 $$ remove(manifestDir) [CD]
Line_9 $$ File manifestDir = new File(source, "META-INF") --> Line_10 $$ remove(manifestDir) [FD]
Line_8 $$ if (isJar) --> Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) [CD]
Line_2 $$ public static boolean compress(File source, File target, Manifest manifest) --> Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) [FD]
Line_6 $$ ZipOutputStream output = null --> Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) [FD]
Line_8 $$ if (isJar) --> Line_12 $$ output = new ZipOutputStream(new FileOutputStream(target)) [CD]
Line_6 $$ ZipOutputStream output = null --> Line_12 $$ output = new ZipOutputStream(new FileOutputStream(target)) [FD]
Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) --> Line_12 $$ output = new ZipOutputStream(new FileOutputStream(target)) [FD]
Line_2 $$ public static boolean compress(File source, File target, Manifest manifest) --> Line_13 $$ ArrayList list = getContents(source) [FD]
Line_2 $$ public static boolean compress(File source, File target, Manifest manifest) --> Line_14 $$ String baseDir = source.getAbsolutePath().replace('\\', '/') [FD]
Line_14 $$ String baseDir = source.getAbsolutePath().replace('\\', '/') --> Line_15 $$ if (!baseDir.endsWith("/")) [FD]
Line_14 $$ String baseDir = source.getAbsolutePath().replace('\\', '/') --> Line_16 $$ int baseDirLength = baseDir.length() [FD]
Line_15 $$ if (!baseDir.endsWith("/")) --> Line_16 $$ int baseDirLength = baseDir.length() [FD]
Line_13 $$ ArrayList list = getContents(source) --> Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) [FD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_20 $$ File file = (File) list.get(i) [CD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_20 $$ File file = (File) list.get(i) [FD]
Line_13 $$ ArrayList list = getContents(source) --> Line_20 $$ File file = (File) list.get(i) [FD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_21 $$ FileInputStream f_in = new FileInputStream(file) [CD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_22 $$ String filename = file.getAbsolutePath().replace('\\', '/') [CD]
Line_20 $$ File file = (File) list.get(i) --> Line_22 $$ String filename = file.getAbsolutePath().replace('\\', '/') [FD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_23 $$ filename = filename.substring(baseDirLength) [CD]
Line_22 $$ String filename = file.getAbsolutePath().replace('\\', '/') --> Line_23 $$ filename = filename.substring(baseDirLength) [FD]
Line_14 $$ String baseDir = source.getAbsolutePath().replace('\\', '/') --> Line_23 $$ filename = filename.substring(baseDirLength) [FD]
Line_15 $$ if (!baseDir.endsWith("/")) --> Line_23 $$ filename = filename.substring(baseDirLength) [FD]
Line_16 $$ int baseDirLength = baseDir.length() --> Line_23 $$ filename = filename.substring(baseDirLength) [FD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_24 $$ output.putNextEntry(new JarEntry(filename)) [CD]
Line_6 $$ ZipOutputStream output = null --> Line_24 $$ output.putNextEntry(new JarEntry(filename)) [FD]
Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) --> Line_24 $$ output.putNextEntry(new JarEntry(filename)) [FD]
Line_12 $$ output = new ZipOutputStream(new FileOutputStream(target)) --> Line_24 $$ output.putNextEntry(new JarEntry(filename)) [FD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_25 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [CD]
Line_18 $$ int bytesRead --> Line_25 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_21 $$ FileInputStream f_in = new FileInputStream(file) --> Line_25 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_17 $$ byte[] buffer = new byte[1024] --> Line_25 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_6 $$ ZipOutputStream output = null --> Line_25 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) --> Line_25 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_12 $$ output = new ZipOutputStream(new FileOutputStream(target)) --> Line_25 $$ while ((bytesRead = f_in.read(buffer)) != -1) output.write(buffer, 0, bytesRead) [FD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_26 $$ f_in.close() [CD]
Line_21 $$ FileInputStream f_in = new FileInputStream(file) --> Line_26 $$ f_in.close() [FD]
Line_19 $$ for (int i = 0, n = list.size(); i < n; i++) --> Line_27 $$ output.closeEntry() [CD]
Line_6 $$ ZipOutputStream output = null --> Line_27 $$ output.closeEntry() [FD]
Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) --> Line_27 $$ output.closeEntry() [FD]
Line_12 $$ output = new ZipOutputStream(new FileOutputStream(target)) --> Line_27 $$ output.closeEntry() [FD]
Line_6 $$ ZipOutputStream output = null --> Line_29 $$ output.close() [FD]
Line_11 $$ output = new JarOutputStream(new FileOutputStream(target), manifest) --> Line_29 $$ output.close() [FD]
Line_12 $$ output = new ZipOutputStream(new FileOutputStream(target)) --> Line_29 $$ output.close() [FD]
Line_2 $$ public static boolean compress(File source, File target, Manifest manifest) --> Line_34 $$ return true [CD]
