Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException --> Line_3 $$ List<Class<?>> classes = new LinkedList<Class<?>>() [CD]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) --> Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) [FD]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) --> Line_8 $$ JarInputStream jis = new JarInputStream(url.openStream()) [FD]
Line_8 $$ JarInputStream jis = new JarInputStream(url.openStream()) --> Line_10 $$ while ((je = jis.getNextJarEntry()) != null) [FD]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException --> Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [FD]
Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) --> Line_16 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName()) [CD]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException --> Line_16 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName()) [FD]
Line_15 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) --> Line_17 $$ classes.add(c) [CD]
Line_6 $$ if (!url.getPath().toLowerCase().endsWith("/")) --> Line_28 $$ if (url.getPath().endsWith("/")) [CD]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) --> Line_28 $$ if (url.getPath().endsWith("/")) [FD]
Line_28 $$ if (url.getPath().endsWith("/")) --> Line_29 $$ File root = new File(url.getPath()) [CD]
Line_4 $$ for (URL url : (searchAllClasspath ? getURLs() : getAddedURLs())) --> Line_29 $$ File root = new File(url.getPath()) [FD]
Line_29 $$ File root = new File(url.getPath()) --> Line_30 $$ for (File file : FileFunctions.getFileTree(root)) [FD]
Line_30 $$ for (File file : FileFunctions.getFileTree(root)) --> Line_32 $$ if (file.getName().toLowerCase().endsWith(".class")) [FD]
Line_30 $$ for (File file : FileFunctions.getFileTree(root)) --> Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", "")) [FD]
Line_29 $$ File root = new File(url.getPath()) --> Line_33 $$ Class<?> c = this.loadClass(file.getAbsolutePath().replaceAll("^" + root.getAbsolutePath() + "/", "").replaceAll("/", ".").replaceAll(".class$", "")) [FD]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException --> Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) [FD]
Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) --> Line_35 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName()) [CD]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException --> Line_35 $$ Log.verbose("Found class " + c.getCanonicalName() + " which implements class " + ancestor.getCanonicalName()) [FD]
Line_34 $$ if (!Modifier.isAbstract(c.getModifiers()) && !Modifier.isInterface(c.getModifiers()) && ancestor.isAssignableFrom(c)) --> Line_36 $$ classes.add(c) [CD]
Line_2 $$ public List<Class<?>> getImplementingClasses(Class<?> ancestor, boolean searchAllClasspath) throws MutableClassLoaderException --> Line_45 $$ return classes [CD]
