Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_3 $$ ActionMessages errors = new ActionMessages() [CD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_4 $$ ActionMessages messages = new ActionMessages() [CD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_5 $$ String returnPage = "submitPocketSampleInformationPage" [CD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_6 $$ UploadForm form = (UploadForm) actForm [CD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_7 $$ Integer shippingId = null [CD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_15 $$ if (request != null) [FD]
Line_15 $$ if (request != null) --> Line_16 $$ proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE) [CD]
Line_10 $$ String proposalCode --> Line_16 $$ proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE) [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_16 $$ proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE) [FD]
Line_15 $$ if (request != null) --> Line_17 $$ proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER)) [CD]
Line_11 $$ String proposalNumber --> Line_17 $$ proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER)) [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_17 $$ proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER)) [FD]
Line_15 $$ if (request != null) --> Line_18 $$ proposalName = proposalCode + proposalNumber.toString() [CD]
Line_12 $$ String proposalName --> Line_18 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_10 $$ String proposalCode --> Line_18 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_16 $$ proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE) --> Line_18 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_11 $$ String proposalNumber --> Line_18 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_17 $$ proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER)) --> Line_18 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_15 $$ if (request != null) --> Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() [CD]
Line_13 $$ String uploadedFileName --> Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() [FD]
Line_6 $$ UploadForm form = (UploadForm) actForm --> Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() [FD]
Line_15 $$ if (request != null) --> Line_20 $$ String fileName = proposalName + "_" + uploadedFileName [CD]
Line_15 $$ if (request != null) --> Line_21 $$ realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName [CD]
Line_14 $$ String realXLSPath --> Line_21 $$ realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName [FD]
Line_20 $$ String fileName = proposalName + "_" + uploadedFileName --> Line_21 $$ realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_21 $$ realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName [FD]
Line_15 $$ if (request != null) --> Line_22 $$ FormFile f = form.getRequestFile() [CD]
Line_6 $$ UploadForm form = (UploadForm) actForm --> Line_22 $$ FormFile f = form.getRequestFile() [FD]
Line_15 $$ if (request != null) --> Line_23 $$ InputStream in = f.getInputStream() [CD]
Line_22 $$ FormFile f = form.getRequestFile() --> Line_23 $$ InputStream in = f.getInputStream() [FD]
Line_15 $$ if (request != null) --> Line_24 $$ File outputFile = new File(realXLSPath) [CD]
Line_15 $$ if (request != null) --> Line_25 $$ if (outputFile.exists()) [CD]
Line_24 $$ File outputFile = new File(realXLSPath) --> Line_25 $$ if (outputFile.exists()) [FD]
Line_15 $$ if (request != null) --> Line_26 $$ FileOutputStream out = new FileOutputStream(outputFile) [CD]
Line_15 $$ if (request != null) --> Line_27 $$ while (in.available() != 0) [CD]
Line_23 $$ InputStream in = f.getInputStream() --> Line_27 $$ while (in.available() != 0) [FD]
Line_27 $$ while (in.available() != 0) --> Line_28 $$ out.write(in.read()) [CD]
Line_26 $$ FileOutputStream out = new FileOutputStream(outputFile) --> Line_28 $$ out.write(in.read()) [FD]
Line_23 $$ InputStream in = f.getInputStream() --> Line_28 $$ out.write(in.read()) [FD]
Line_27 $$ while (in.available() != 0) --> Line_29 $$ out.flush() [CD]
Line_26 $$ FileOutputStream out = new FileOutputStream(outputFile) --> Line_29 $$ out.flush() [FD]
Line_15 $$ if (request != null) --> Line_31 $$ out.flush() [CD]
Line_26 $$ FileOutputStream out = new FileOutputStream(outputFile) --> Line_31 $$ out.flush() [FD]
Line_15 $$ if (request != null) --> Line_32 $$ out.close() [CD]
Line_26 $$ FileOutputStream out = new FileOutputStream(outputFile) --> Line_32 $$ out.close() [FD]
Line_15 $$ if (request != null) --> Line_34 $$ proposalCode = "ehtpx" [CD]
Line_10 $$ String proposalCode --> Line_34 $$ proposalCode = "ehtpx" [FD]
Line_16 $$ proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE) --> Line_34 $$ proposalCode = "ehtpx" [FD]
Line_15 $$ if (request != null) --> Line_35 $$ proposalNumber = "1" [CD]
Line_11 $$ String proposalNumber --> Line_35 $$ proposalNumber = "1" [FD]
Line_17 $$ proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER)) --> Line_35 $$ proposalNumber = "1" [FD]
Line_15 $$ if (request != null) --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [CD]
Line_12 $$ String proposalName --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_18 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_10 $$ String proposalCode --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_16 $$ proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE) --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_34 $$ proposalCode = "ehtpx" --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_11 $$ String proposalNumber --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_17 $$ proposalNumber = String.valueOf(request.getSession().getAttribute(Constants.PROPOSAL_NUMBER)) --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_35 $$ proposalNumber = "1" --> Line_36 $$ proposalName = proposalCode + proposalNumber.toString() [FD]
Line_15 $$ if (request != null) --> Line_37 $$ uploadedFileName = "ispyb-template41.xls" [CD]
Line_13 $$ String uploadedFileName --> Line_37 $$ uploadedFileName = "ispyb-template41.xls" [FD]
Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() --> Line_37 $$ uploadedFileName = "ispyb-template41.xls" [FD]
Line_15 $$ if (request != null) --> Line_38 $$ realXLSPath = "D:\\" + uploadedFileName [CD]
Line_14 $$ String realXLSPath --> Line_38 $$ realXLSPath = "D:\\" + uploadedFileName [FD]
Line_21 $$ realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName --> Line_38 $$ realXLSPath = "D:\\" + uploadedFileName [FD]
Line_13 $$ String uploadedFileName --> Line_38 $$ realXLSPath = "D:\\" + uploadedFileName [FD]
Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() --> Line_38 $$ realXLSPath = "D:\\" + uploadedFileName [FD]
Line_37 $$ uploadedFileName = "ispyb-template41.xls" --> Line_38 $$ realXLSPath = "D:\\" + uploadedFileName [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_41 $$ parser.retrieveShippingId(realXLSPath) [FD]
Line_14 $$ String realXLSPath --> Line_41 $$ parser.retrieveShippingId(realXLSPath) [FD]
Line_21 $$ realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName --> Line_41 $$ parser.retrieveShippingId(realXLSPath) [FD]
Line_38 $$ realXLSPath = "D:\\" + uploadedFileName --> Line_41 $$ parser.retrieveShippingId(realXLSPath) [FD]
Line_7 $$ Integer shippingId = null --> Line_42 $$ shippingId = parser.getShippingId() [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_42 $$ shippingId = parser.getShippingId() [FD]
Line_6 $$ UploadForm form = (UploadForm) actForm --> Line_43 $$ String requestShippingId = form.getShippingId() [FD]
Line_43 $$ String requestShippingId = form.getShippingId() --> Line_44 $$ if (requestShippingId != null && !requestShippingId.equals("")) [FD]
Line_44 $$ if (requestShippingId != null && !requestShippingId.equals("")) --> Line_45 $$ shippingId = new Integer(requestShippingId) [CD]
Line_7 $$ Integer shippingId = null --> Line_45 $$ shippingId = new Integer(requestShippingId) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_45 $$ shippingId = new Integer(requestShippingId) [FD]
Line_7 $$ Integer shippingId = null --> Line_48 $$ if (shippingId != null) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_48 $$ if (shippingId != null) [FD]
Line_45 $$ shippingId = new Integer(requestShippingId) --> Line_48 $$ if (shippingId != null) [FD]
Line_48 $$ if (shippingId != null) --> Line_49 $$ Log.debug(" ---[uploadFile] Upload for Existing Shipment (DewarTRacking): Deleting Samples from Shipment :") [CD]
Line_48 $$ if (shippingId != null) --> Line_50 $$ double nbSamplesContainers = DBAccess_EJB.DeleteAllSamplesAndContainersForShipping(shippingId) [CD]
Line_7 $$ Integer shippingId = null --> Line_50 $$ double nbSamplesContainers = DBAccess_EJB.DeleteAllSamplesAndContainersForShipping(shippingId) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_50 $$ double nbSamplesContainers = DBAccess_EJB.DeleteAllSamplesAndContainersForShipping(shippingId) [FD]
Line_45 $$ shippingId = new Integer(requestShippingId) --> Line_50 $$ double nbSamplesContainers = DBAccess_EJB.DeleteAllSamplesAndContainersForShipping(shippingId) [FD]
Line_48 $$ if (shippingId != null) --> Line_51 $$ parser.getValidationWarnings().add(new XlsUploadException("Shipment contained Samples and/or Containers", "Previous Samples and/or Containers have been deleted and replaced by new ones.")) [CD]
Line_50 $$ double nbSamplesContainers = DBAccess_EJB.DeleteAllSamplesAndContainersForShipping(shippingId) --> Line_51 $$ parser.getValidationWarnings().add(new XlsUploadException("Shipment contained Samples and/or Containers", "Previous Samples and/or Containers have been deleted and replaced by new ones.")) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_51 $$ parser.getValidationWarnings().add(new XlsUploadException("Shipment contained Samples and/or Containers", "Previous Samples and/or Containers have been deleted and replaced by new ones.")) [FD]
Line_54 $$ ProposalFacadeLocal proposal = ProposalFacadeUtil.getLocalHome().create() --> Line_57 $$ ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0)) [FD]
Line_10 $$ String proposalCode --> Line_57 $$ ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0)) [FD]
Line_16 $$ proposalCode = (String) request.getSession().getAttribute(Constants.PROPOSAL_CODE) --> Line_57 $$ ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0)) [FD]
Line_34 $$ proposalCode = "ehtpx" --> Line_57 $$ ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0)) [FD]
Line_55 $$ ProteinFacadeLocal protein = ProteinFacadeUtil.getLocalHome().create() --> Line_58 $$ ArrayList listProteins = (ArrayList) protein.findByProposalId(targetProposal.getProposalId()) [FD]
Line_57 $$ ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0)) --> Line_58 $$ ArrayList listProteins = (ArrayList) protein.findByProposalId(targetProposal.getProposalId()) [FD]
Line_58 $$ ArrayList listProteins = (ArrayList) protein.findByProposalId(targetProposal.getProposalId()) --> Line_59 $$ for (int p = 0; p < listProteins.size(); p++) [FD]
Line_59 $$ for (int p = 0; p < listProteins.size(); p++) --> Line_60 $$ ProteinValue prot = (ProteinValue) listProteins.get(p) [CD]
Line_59 $$ for (int p = 0; p < listProteins.size(); p++) --> Line_60 $$ ProteinValue prot = (ProteinValue) listProteins.get(p) [FD]
Line_58 $$ ArrayList listProteins = (ArrayList) protein.findByProposalId(targetProposal.getProposalId()) --> Line_60 $$ ProteinValue prot = (ProteinValue) listProteins.get(p) [FD]
Line_59 $$ for (int p = 0; p < listProteins.size(); p++) --> Line_61 $$ Hashtable<String, Integer> listSampleName = new Hashtable<String, Integer>() [CD]
Line_59 $$ for (int p = 0; p < listProteins.size(); p++) --> Line_62 $$ CrystalLightValue listCrystals[] = prot.getCrystals() [CD]
Line_60 $$ ProteinValue prot = (ProteinValue) listProteins.get(p) --> Line_62 $$ CrystalLightValue listCrystals[] = prot.getCrystals() [FD]
Line_59 $$ for (int p = 0; p < listProteins.size(); p++) --> Line_63 $$ for (int c = 0; c < listCrystals.length; c++) [CD]
Line_63 $$ for (int c = 0; c < listCrystals.length; c++) --> Line_64 $$ CrystalLightValue _xtal = (CrystalLightValue) listCrystals[c] [CD]
Line_63 $$ for (int c = 0; c < listCrystals.length; c++) --> Line_65 $$ CrystalValue xtal = crystal.findByPrimaryKey(_xtal.getPrimaryKey()) [CD]
Line_56 $$ CrystalFacadeLocal crystal = CrystalFacadeUtil.getLocalHome().create() --> Line_65 $$ CrystalValue xtal = crystal.findByPrimaryKey(_xtal.getPrimaryKey()) [FD]
Line_64 $$ CrystalLightValue _xtal = (CrystalLightValue) listCrystals[c] --> Line_65 $$ CrystalValue xtal = crystal.findByPrimaryKey(_xtal.getPrimaryKey()) [FD]
Line_63 $$ for (int c = 0; c < listCrystals.length; c++) --> Line_66 $$ BlsampleLightValue listSamples[] = xtal.getBlsamples() [CD]
Line_65 $$ CrystalValue xtal = crystal.findByPrimaryKey(_xtal.getPrimaryKey()) --> Line_66 $$ BlsampleLightValue listSamples[] = xtal.getBlsamples() [FD]
Line_63 $$ for (int c = 0; c < listCrystals.length; c++) --> Line_67 $$ for (int s = 0; s < listSamples.length; s++) [CD]
Line_67 $$ for (int s = 0; s < listSamples.length; s++) --> Line_68 $$ BlsampleLightValue sample = listSamples[s] [CD]
Line_67 $$ for (int s = 0; s < listSamples.length; s++) --> Line_69 $$ listSampleName.put(sample.getName(), sample.getBlSampleId()) [CD]
Line_61 $$ Hashtable<String, Integer> listSampleName = new Hashtable<String, Integer>() --> Line_69 $$ listSampleName.put(sample.getName(), sample.getBlSampleId()) [FD]
Line_68 $$ BlsampleLightValue sample = listSamples[s] --> Line_69 $$ listSampleName.put(sample.getName(), sample.getBlSampleId()) [FD]
Line_59 $$ for (int p = 0; p < listProteins.size(); p++) --> Line_72 $$ listProteinAcronym_SampleName.put(prot.getAcronym(), listSampleName) [CD]
Line_53 $$ Hashtable<String, Hashtable<String, Integer>> listProteinAcronym_SampleName = new Hashtable<String, Hashtable<String, Integer>>() --> Line_72 $$ listProteinAcronym_SampleName.put(prot.getAcronym(), listSampleName) [FD]
Line_61 $$ Hashtable<String, Integer> listSampleName = new Hashtable<String, Integer>() --> Line_72 $$ listProteinAcronym_SampleName.put(prot.getAcronym(), listSampleName) [FD]
Line_60 $$ ProteinValue prot = (ProteinValue) listProteins.get(p) --> Line_72 $$ listProteinAcronym_SampleName.put(prot.getAcronym(), listSampleName) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_74 $$ parser.validate(inFile, listProteinAcronym_SampleName, targetProposal.getProposalId()) [FD]
Line_40 $$ FileInputStream inFile = new FileInputStream(realXLSPath) --> Line_74 $$ parser.validate(inFile, listProteinAcronym_SampleName, targetProposal.getProposalId()) [FD]
Line_53 $$ Hashtable<String, Hashtable<String, Integer>> listProteinAcronym_SampleName = new Hashtable<String, Hashtable<String, Integer>>() --> Line_74 $$ parser.validate(inFile, listProteinAcronym_SampleName, targetProposal.getProposalId()) [FD]
Line_57 $$ ProposalLightValue targetProposal = (ProposalLightValue) (((ArrayList) proposal.findByCodeAndNumber(proposalCode, new Integer(proposalNumber))).get(0)) --> Line_74 $$ parser.validate(inFile, listProteinAcronym_SampleName, targetProposal.getProposalId()) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_75 $$ List listErrors = parser.getValidationErrors() [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_76 $$ List listWarnings = parser.getValidationWarnings() [FD]
Line_75 $$ List listErrors = parser.getValidationErrors() --> Line_77 $$ if (listErrors.size() == 0) [FD]
Line_77 $$ if (listErrors.size() == 0) --> Line_78 $$ parser.open(realXLSPath) [CD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_78 $$ parser.open(realXLSPath) [FD]
Line_14 $$ String realXLSPath --> Line_78 $$ parser.open(realXLSPath) [FD]
Line_21 $$ realXLSPath = request.getRealPath("\\tmp\\") + "\\" + fileName --> Line_78 $$ parser.open(realXLSPath) [FD]
Line_38 $$ realXLSPath = "D:\\" + uploadedFileName --> Line_78 $$ parser.open(realXLSPath) [FD]
Line_77 $$ if (listErrors.size() == 0) --> Line_79 $$ if (parser.getCrystals().size() == 0) [CD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_79 $$ if (parser.getCrystals().size() == 0) [FD]
Line_79 $$ if (parser.getCrystals().size() == 0) --> Line_80 $$ parser.getValidationErrors().add(new XlsUploadException("No crystals have been found", "Empty shipment")) [CD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_80 $$ parser.getValidationErrors().add(new XlsUploadException("No crystals have been found", "Empty shipment")) [FD]
Line_75 $$ List listErrors = parser.getValidationErrors() --> Line_83 $$ Iterator errIt = listErrors.iterator() [FD]
Line_83 $$ Iterator errIt = listErrors.iterator() --> Line_84 $$ while (errIt.hasNext()) [FD]
Line_84 $$ while (errIt.hasNext()) --> Line_85 $$ XlsUploadException xlsEx = (XlsUploadException) errIt.next() [CD]
Line_83 $$ Iterator errIt = listErrors.iterator() --> Line_85 $$ XlsUploadException xlsEx = (XlsUploadException) errIt.next() [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_89 $$ saveErrors(request, errors) [FD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_89 $$ saveErrors(request, errors) [FD]
Line_76 $$ List listWarnings = parser.getValidationWarnings() --> Line_92 $$ Iterator warnIt = listWarnings.iterator() [FD]
Line_92 $$ Iterator warnIt = listWarnings.iterator() --> Line_93 $$ while (warnIt.hasNext()) [FD]
Line_93 $$ while (warnIt.hasNext()) --> Line_94 $$ XlsUploadException xlsEx = (XlsUploadException) warnIt.next() [CD]
Line_92 $$ Iterator warnIt = listWarnings.iterator() --> Line_94 $$ XlsUploadException xlsEx = (XlsUploadException) warnIt.next() [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_98 $$ saveMessages(request, messages) [FD]
Line_4 $$ ActionMessages messages = new ActionMessages() --> Line_98 $$ saveMessages(request, messages) [FD]
Line_75 $$ List listErrors = parser.getValidationErrors() --> Line_101 $$ if (listErrors.size() > 0) [FD]
Line_101 $$ if (listErrors.size() > 0) --> Line_102 $$ resetCounts(shippingId) [CD]
Line_7 $$ Integer shippingId = null --> Line_102 $$ resetCounts(shippingId) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_102 $$ resetCounts(shippingId) [FD]
Line_45 $$ shippingId = new Integer(requestShippingId) --> Line_102 $$ resetCounts(shippingId) [FD]
Line_101 $$ if (listErrors.size() > 0) --> Line_103 $$ return mapping.findForward("submitPocketSampleInformationPage") [CD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_103 $$ return mapping.findForward("submitPocketSampleInformationPage") [FD]
Line_76 $$ List listWarnings = parser.getValidationWarnings() --> Line_105 $$ returnPage = "submitPocketSampleInformationPage" [FD]
Line_5 $$ String returnPage = "submitPocketSampleInformationPage" --> Line_105 $$ returnPage = "submitPocketSampleInformationPage" [FD]
Line_108 $$ CrystalDetailsBuilder cDE = new CrystalDetailsBuilder() --> Line_109 $$ CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals()) [FD]
Line_12 $$ String proposalName --> Line_109 $$ CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals()) [FD]
Line_18 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_109 $$ CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals()) [FD]
Line_36 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_109 $$ CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals()) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_109 $$ CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals()) [FD]
Line_108 $$ CrystalDetailsBuilder cDE = new CrystalDetailsBuilder() --> Line_110 $$ cDE.validateJAXBObject(cd) [FD]
Line_109 $$ CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals()) --> Line_110 $$ cDE.validateJAXBObject(cd) [FD]
Line_106 $$ String crystalDetailsXML --> Line_111 $$ crystalDetailsXML = cDE.marshallJaxBObjToString(cd) [FD]
Line_108 $$ CrystalDetailsBuilder cDE = new CrystalDetailsBuilder() --> Line_111 $$ crystalDetailsXML = cDE.marshallJaxBObjToString(cd) [FD]
Line_109 $$ CrystalDetailsElement cd = cDE.createCrystalDetailsElement(proposalName, parser.getCrystals()) --> Line_111 $$ crystalDetailsXML = cDE.marshallJaxBObjToString(cd) [FD]
Line_107 $$ XtalDetails xtalDetailsWebService = new XtalDetails() --> Line_112 $$ xtalDetailsWebService.submitCrystalDetails(crystalDetailsXML) [FD]
Line_106 $$ String crystalDetailsXML --> Line_112 $$ xtalDetailsWebService.submitCrystalDetails(crystalDetailsXML) [FD]
Line_111 $$ crystalDetailsXML = cDE.marshallJaxBObjToString(cd) --> Line_112 $$ xtalDetailsWebService.submitCrystalDetails(crystalDetailsXML) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_116 $$ Iterator it = parser.getDiffractionPlans().iterator() [FD]
Line_116 $$ Iterator it = parser.getDiffractionPlans().iterator() --> Line_117 $$ while (it.hasNext()) [FD]
Line_117 $$ while (it.hasNext()) --> Line_118 $$ DiffractionPlanElement dpe = (DiffractionPlanElement) it.next() [CD]
Line_116 $$ Iterator it = parser.getDiffractionPlans().iterator() --> Line_118 $$ DiffractionPlanElement dpe = (DiffractionPlanElement) it.next() [FD]
Line_117 $$ while (it.hasNext()) --> Line_119 $$ dpe.setProjectUUID(proposalName) [CD]
Line_118 $$ DiffractionPlanElement dpe = (DiffractionPlanElement) it.next() --> Line_119 $$ dpe.setProjectUUID(proposalName) [FD]
Line_12 $$ String proposalName --> Line_119 $$ dpe.setProjectUUID(proposalName) [FD]
Line_18 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_119 $$ dpe.setProjectUUID(proposalName) [FD]
Line_36 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_119 $$ dpe.setProjectUUID(proposalName) [FD]
Line_117 $$ while (it.hasNext()) --> Line_120 $$ diffractionPlan = dPB.marshallJaxBObjToString(dpe) [CD]
Line_113 $$ String diffractionPlan --> Line_120 $$ diffractionPlan = dPB.marshallJaxBObjToString(dpe) [FD]
Line_115 $$ DiffractionPlanBuilder dPB = new DiffractionPlanBuilder() --> Line_120 $$ diffractionPlan = dPB.marshallJaxBObjToString(dpe) [FD]
Line_118 $$ DiffractionPlanElement dpe = (DiffractionPlanElement) it.next() --> Line_120 $$ diffractionPlan = dPB.marshallJaxBObjToString(dpe) [FD]
Line_117 $$ while (it.hasNext()) --> Line_121 $$ diffractionPlanWebService.submitDiffractionPlan(diffractionPlan) [CD]
Line_114 $$ DiffractionPlan diffractionPlanWebService = new DiffractionPlan() --> Line_121 $$ diffractionPlanWebService.submitDiffractionPlan(diffractionPlan) [FD]
Line_120 $$ diffractionPlan = dPB.marshallJaxBObjToString(dpe) --> Line_121 $$ diffractionPlanWebService.submitDiffractionPlan(diffractionPlan) [FD]
Line_113 $$ String diffractionPlan --> Line_121 $$ diffractionPlanWebService.submitDiffractionPlan(diffractionPlan) [FD]
Line_125 $$ CrystalShippingBuilder cSB = new CrystalShippingBuilder() --> Line_126 $$ Person person = cSB.createPerson("XLS Upload", null, "ISPyB", null, null, "ISPyB", null, "ispyb@esrf.fr", "0000", "0000", null, null) [FD]
Line_125 $$ CrystalShippingBuilder cSB = new CrystalShippingBuilder() --> Line_127 $$ Laboratory laboratory = cSB.createLaboratory("Generic Laboratory", "ISPyB Lab", "Sandwich", "Somewhere", "UK", "ISPyB", "ispyb.esrf.fr", person) [FD]
Line_126 $$ Person person = cSB.createPerson("XLS Upload", null, "ISPyB", null, null, "ISPyB", null, "ispyb@esrf.fr", "0000", "0000", null, null) --> Line_127 $$ Laboratory laboratory = cSB.createLaboratory("Generic Laboratory", "ISPyB Lab", "Sandwich", "Somewhere", "UK", "ISPyB", "ispyb.esrf.fr", person) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_128 $$ DeliveryAgent deliveryAgent = parser.getDeliveryAgent() [FD]
Line_125 $$ CrystalShippingBuilder cSB = new CrystalShippingBuilder() --> Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) [FD]
Line_12 $$ String proposalName --> Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) [FD]
Line_18 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) [FD]
Line_36 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) [FD]
Line_127 $$ Laboratory laboratory = cSB.createLaboratory("Generic Laboratory", "ISPyB Lab", "Sandwich", "Somewhere", "UK", "ISPyB", "ispyb.esrf.fr", person) --> Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) [FD]
Line_128 $$ DeliveryAgent deliveryAgent = parser.getDeliveryAgent() --> Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) [FD]
Line_130 $$ String shippingName --> Line_131 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xls")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xls") : 0) [FD]
Line_13 $$ String uploadedFileName --> Line_131 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xls")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xls") : 0) [FD]
Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() --> Line_131 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xls")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xls") : 0) [FD]
Line_37 $$ uploadedFileName = "ispyb-template41.xls" --> Line_131 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xls")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xls") : 0) [FD]
Line_130 $$ String shippingName --> Line_132 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xlt")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xlt") : 0) [FD]
Line_131 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xls")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xls") : 0) --> Line_132 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xlt")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xlt") : 0) [FD]
Line_13 $$ String uploadedFileName --> Line_132 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xlt")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xlt") : 0) [FD]
Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() --> Line_132 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xlt")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xlt") : 0) [FD]
Line_37 $$ uploadedFileName = "ispyb-template41.xls" --> Line_132 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xlt")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xlt") : 0) [FD]
Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) --> Line_133 $$ cs.setName(shippingName) [FD]
Line_130 $$ String shippingName --> Line_133 $$ cs.setName(shippingName) [FD]
Line_131 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xls")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xls") : 0) --> Line_133 $$ cs.setName(shippingName) [FD]
Line_132 $$ shippingName = uploadedFileName.substring(0, ((uploadedFileName.toLowerCase().lastIndexOf(".xlt")) > 0) ? uploadedFileName.toLowerCase().lastIndexOf(".xlt") : 0) --> Line_133 $$ cs.setName(shippingName) [FD]
Line_123 $$ String crystalShipping --> Line_134 $$ crystalShipping = cSB.marshallJaxBObjToString(cs) [FD]
Line_125 $$ CrystalShippingBuilder cSB = new CrystalShippingBuilder() --> Line_134 $$ crystalShipping = cSB.marshallJaxBObjToString(cs) [FD]
Line_129 $$ CrystalShipping cs = cSB.createCrystalShipping(proposalName, laboratory, deliveryAgent, parser.getDewars()) --> Line_134 $$ crystalShipping = cSB.marshallJaxBObjToString(cs) [FD]
Line_124 $$ Shipping shippingWebService = new Shipping() --> Line_135 $$ shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId) [FD]
Line_123 $$ String crystalShipping --> Line_135 $$ shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId) [FD]
Line_134 $$ crystalShipping = cSB.marshallJaxBObjToString(cs) --> Line_135 $$ shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId) [FD]
Line_7 $$ Integer shippingId = null --> Line_135 $$ shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_135 $$ shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId) [FD]
Line_45 $$ shippingId = new Integer(requestShippingId) --> Line_135 $$ shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId) [FD]
Line_9 $$ eHTPXXLSParser parser = new eHTPXXLSParser() --> Line_135 $$ shippingWebService.submitCrystalShipping(crystalShipping, (ArrayList) parser.getDiffractionPlans(), shippingId) [FD]
Line_12 $$ String proposalName --> Line_136 $$ ServerLogger.Log4Stat("XLS_UPLOAD", proposalName, uploadedFileName) [FD]
Line_18 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_136 $$ ServerLogger.Log4Stat("XLS_UPLOAD", proposalName, uploadedFileName) [FD]
Line_36 $$ proposalName = proposalCode + proposalNumber.toString() --> Line_136 $$ ServerLogger.Log4Stat("XLS_UPLOAD", proposalName, uploadedFileName) [FD]
Line_13 $$ String uploadedFileName --> Line_136 $$ ServerLogger.Log4Stat("XLS_UPLOAD", proposalName, uploadedFileName) [FD]
Line_19 $$ uploadedFileName = form.getRequestFile().getFileName() --> Line_136 $$ ServerLogger.Log4Stat("XLS_UPLOAD", proposalName, uploadedFileName) [FD]
Line_37 $$ uploadedFileName = "ispyb-template41.xls" --> Line_136 $$ ServerLogger.Log4Stat("XLS_UPLOAD", proposalName, uploadedFileName) [FD]
Line_7 $$ Integer shippingId = null --> Line_138 $$ resetCounts(shippingId) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_138 $$ resetCounts(shippingId) [FD]
Line_45 $$ shippingId = new Integer(requestShippingId) --> Line_138 $$ resetCounts(shippingId) [FD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_139 $$ errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.detail", e.getMessage())) [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_141 $$ saveErrors(request, errors) [FD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_141 $$ saveErrors(request, errors) [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_142 $$ return mapping.findForward("error") [FD]
Line_7 $$ Integer shippingId = null --> Line_144 $$ resetCounts(shippingId) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_144 $$ resetCounts(shippingId) [FD]
Line_45 $$ shippingId = new Integer(requestShippingId) --> Line_144 $$ resetCounts(shippingId) [FD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_145 $$ errors.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("errors.detail", e.toString())) [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_148 $$ saveErrors(request, errors) [FD]
Line_3 $$ ActionMessages errors = new ActionMessages() --> Line_148 $$ saveErrors(request, errors) [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_149 $$ return mapping.findForward("error") [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_151 $$ setCounts(shippingId) [CD]
Line_7 $$ Integer shippingId = null --> Line_151 $$ setCounts(shippingId) [FD]
Line_42 $$ shippingId = parser.getShippingId() --> Line_151 $$ setCounts(shippingId) [FD]
Line_45 $$ shippingId = new Integer(requestShippingId) --> Line_151 $$ setCounts(shippingId) [FD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_152 $$ return mapping.findForward(returnPage) [CD]
Line_2 $$ public ActionForward uploadFile(ActionMapping mapping, ActionForm actForm, HttpServletRequest request, HttpServletResponse in_response) --> Line_152 $$ return mapping.findForward(returnPage) [FD]
Line_5 $$ String returnPage = "submitPocketSampleInformationPage" --> Line_152 $$ return mapping.findForward(returnPage) [FD]
Line_105 $$ returnPage = "submitPocketSampleInformationPage" --> Line_152 $$ return mapping.findForward(returnPage) [FD]
