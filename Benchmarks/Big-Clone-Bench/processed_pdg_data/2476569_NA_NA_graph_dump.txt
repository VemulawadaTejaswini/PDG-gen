Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_3 $$ OutputStream out = fout [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_4 $$ OutputStream out2 = fout [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_5 $$ boolean signed = false [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_6 $$ OutputStream oldOut = null [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_7 $$ File tmp = null [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_8 $$ File tmp2 = null [CD]
Line_7 $$ File tmp = null --> Line_10 $$ tmp = File.createTempFile("yahp", "pdf") [FD]
Line_8 $$ File tmp2 = null --> Line_11 $$ tmp2 = File.createTempFile("yahp", "pdf") [FD]
Line_6 $$ OutputStream oldOut = null --> Line_12 $$ oldOut = out [FD]
Line_3 $$ OutputStream out = fout --> Line_12 $$ oldOut = out [FD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_13 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SIGNING))) [FD]
Line_13 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SIGNING))) --> Line_14 $$ signed = true [CD]
Line_5 $$ boolean signed = false --> Line_14 $$ signed = true [FD]
Line_13 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SIGNING))) --> Line_15 $$ out2 = new FileOutputStream(tmp2) [CD]
Line_4 $$ OutputStream out2 = fout --> Line_15 $$ out2 = new FileOutputStream(tmp2) [FD]
Line_13 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SIGNING))) --> Line_17 $$ out2 = oldOut [CD]
Line_4 $$ OutputStream out2 = fout --> Line_17 $$ out2 = oldOut [FD]
Line_15 $$ out2 = new FileOutputStream(tmp2) --> Line_17 $$ out2 = oldOut [FD]
Line_6 $$ OutputStream oldOut = null --> Line_17 $$ out2 = oldOut [FD]
Line_12 $$ oldOut = out --> Line_17 $$ out2 = oldOut [FD]
Line_3 $$ OutputStream out = fout --> Line_19 $$ out = new FileOutputStream(tmp) [FD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_25 $$ for (int i = 0; i < files.size(); i++) [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_26 $$ final File fPDF = (File) files.get(i) [CD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_26 $$ final File fPDF = (File) files.get(i) [FD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_26 $$ final File fPDF = (File) files.get(i) [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) [CD]
Line_26 $$ final File fPDF = (File) files.get(i) --> Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_28 $$ reader.consolidateNamedDestinations() [CD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_28 $$ reader.consolidateNamedDestinations() [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_29 $$ final int n = reader.getNumberOfPages() [CD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_29 $$ final int n = reader.getNumberOfPages() [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_30 $$ if (first) [CD]
Line_30 $$ if (first) --> Line_31 $$ first = false [CD]
Line_22 $$ boolean first = true --> Line_31 $$ first = false [FD]
Line_30 $$ if (first) --> Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) [CD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) [FD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) [FD]
Line_30 $$ if (first) --> Line_33 $$ writer = new PdfCopy(document, out) [CD]
Line_21 $$ PdfCopy writer = null --> Line_33 $$ writer = new PdfCopy(document, out) [FD]
Line_30 $$ if (first) --> Line_34 $$ writer.setPdfVersion(PdfWriter.VERSION_1_3) [CD]
Line_33 $$ writer = new PdfCopy(document, out) --> Line_34 $$ writer.setPdfVersion(PdfWriter.VERSION_1_3) [FD]
Line_21 $$ PdfCopy writer = null --> Line_34 $$ writer.setPdfVersion(PdfWriter.VERSION_1_3) [FD]
Line_30 $$ if (first) --> Line_35 $$ writer.setFullCompression() [CD]
Line_33 $$ writer = new PdfCopy(document, out) --> Line_35 $$ writer.setFullCompression() [FD]
Line_21 $$ PdfCopy writer = null --> Line_35 $$ writer.setFullCompression() [FD]
Line_30 $$ if (first) --> Line_36 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_36 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) [FD]
Line_36 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) --> Line_37 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_37 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) [FD]
Line_36 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) --> Line_38 $$ final int securityType = CDocumentReconstructor.getSecurityFlags(properties) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_38 $$ final int securityType = CDocumentReconstructor.getSecurityFlags(properties) [FD]
Line_36 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) --> Line_39 $$ writer.setEncryption(PdfWriter.STRENGTH128BITS, password, null, securityType) [CD]
Line_33 $$ writer = new PdfCopy(document, out) --> Line_39 $$ writer.setEncryption(PdfWriter.STRENGTH128BITS, password, null, securityType) [FD]
Line_21 $$ PdfCopy writer = null --> Line_39 $$ writer.setEncryption(PdfWriter.STRENGTH128BITS, password, null, securityType) [FD]
Line_37 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) --> Line_39 $$ writer.setEncryption(PdfWriter.STRENGTH128BITS, password, null, securityType) [FD]
Line_38 $$ final int securityType = CDocumentReconstructor.getSecurityFlags(properties) --> Line_39 $$ writer.setEncryption(PdfWriter.STRENGTH128BITS, password, null, securityType) [FD]
Line_30 $$ if (first) --> Line_41 $$ final String title = (String) properties.get(IHtmlToPdfTransformer.PDF_TITLE) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_41 $$ final String title = (String) properties.get(IHtmlToPdfTransformer.PDF_TITLE) [FD]
Line_30 $$ if (first) --> Line_42 $$ if (title != null) [CD]
Line_41 $$ final String title = (String) properties.get(IHtmlToPdfTransformer.PDF_TITLE) --> Line_42 $$ if (title != null) [FD]
Line_42 $$ if (title != null) --> Line_43 $$ document.addTitle(title) [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_43 $$ document.addTitle(title) [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_43 $$ document.addTitle(title) [FD]
Line_41 $$ final String title = (String) properties.get(IHtmlToPdfTransformer.PDF_TITLE) --> Line_43 $$ document.addTitle(title) [FD]
Line_42 $$ if (title != null) --> Line_44 $$ if (base_url != null) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_44 $$ if (base_url != null) [FD]
Line_44 $$ if (base_url != null) --> Line_45 $$ document.addTitle(base_url) [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_45 $$ document.addTitle(base_url) [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_45 $$ document.addTitle(base_url) [FD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_45 $$ document.addTitle(base_url) [FD]
Line_30 $$ if (first) --> Line_47 $$ final String creator = (String) properties.get(IHtmlToPdfTransformer.PDF_CREATOR) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_47 $$ final String creator = (String) properties.get(IHtmlToPdfTransformer.PDF_CREATOR) [FD]
Line_30 $$ if (first) --> Line_48 $$ if (creator != null) [CD]
Line_47 $$ final String creator = (String) properties.get(IHtmlToPdfTransformer.PDF_CREATOR) --> Line_48 $$ if (creator != null) [FD]
Line_48 $$ if (creator != null) --> Line_49 $$ document.addCreator(creator) [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_49 $$ document.addCreator(creator) [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_49 $$ document.addCreator(creator) [FD]
Line_47 $$ final String creator = (String) properties.get(IHtmlToPdfTransformer.PDF_CREATOR) --> Line_49 $$ document.addCreator(creator) [FD]
Line_48 $$ if (creator != null) --> Line_51 $$ document.addCreator(IHtmlToPdfTransformer.VERSION) [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_51 $$ document.addCreator(IHtmlToPdfTransformer.VERSION) [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_51 $$ document.addCreator(IHtmlToPdfTransformer.VERSION) [FD]
Line_30 $$ if (first) --> Line_53 $$ final String author = (String) properties.get(IHtmlToPdfTransformer.PDF_AUTHOR) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_53 $$ final String author = (String) properties.get(IHtmlToPdfTransformer.PDF_AUTHOR) [FD]
Line_30 $$ if (first) --> Line_54 $$ if (author != null) [CD]
Line_53 $$ final String author = (String) properties.get(IHtmlToPdfTransformer.PDF_AUTHOR) --> Line_54 $$ if (author != null) [FD]
Line_54 $$ if (author != null) --> Line_55 $$ document.addAuthor(author) [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_55 $$ document.addAuthor(author) [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_55 $$ document.addAuthor(author) [FD]
Line_53 $$ final String author = (String) properties.get(IHtmlToPdfTransformer.PDF_AUTHOR) --> Line_55 $$ document.addAuthor(author) [FD]
Line_30 $$ if (first) --> Line_57 $$ final String sproducer = (String) properties.get(IHtmlToPdfTransformer.PDF_PRODUCER) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_57 $$ final String sproducer = (String) properties.get(IHtmlToPdfTransformer.PDF_PRODUCER) [FD]
Line_30 $$ if (first) --> Line_58 $$ if (sproducer != null) [CD]
Line_57 $$ final String sproducer = (String) properties.get(IHtmlToPdfTransformer.PDF_PRODUCER) --> Line_58 $$ if (sproducer != null) [FD]
Line_58 $$ if (sproducer != null) --> Line_59 $$ document.addProducer(sproducer) [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_59 $$ document.addProducer(sproducer) [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_59 $$ document.addProducer(sproducer) [FD]
Line_57 $$ final String sproducer = (String) properties.get(IHtmlToPdfTransformer.PDF_PRODUCER) --> Line_59 $$ document.addProducer(sproducer) [FD]
Line_58 $$ if (sproducer != null) --> Line_61 $$ document.addProducer(IHtmlToPdfTransformer.VERSION + " - http://www.allcolor.org/YaHPConverter/ - " + producer) [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_61 $$ document.addProducer(IHtmlToPdfTransformer.VERSION + " - http://www.allcolor.org/YaHPConverter/ - " + producer) [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_61 $$ document.addProducer(IHtmlToPdfTransformer.VERSION + " - http://www.allcolor.org/YaHPConverter/ - " + producer) [FD]
Line_30 $$ if (first) --> Line_63 $$ document.open() [CD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_63 $$ document.open() [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_63 $$ document.open() [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_65 $$ PdfImportedPage page [CD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_66 $$ for (int j = 0; j < n; ) [CD]
Line_29 $$ final int n = reader.getNumberOfPages() --> Line_66 $$ for (int j = 0; j < n; ) [FD]
Line_66 $$ for (int j = 0; j < n; ) --> Line_67 $$ ++j [CD]
Line_66 $$ for (int j = 0; j < n; ) --> Line_67 $$ ++j [FD]
Line_66 $$ for (int j = 0; j < n; ) --> Line_68 $$ totalPage++ [CD]
Line_24 $$ int totalPage = 0 --> Line_68 $$ totalPage++ [FD]
Line_66 $$ for (int j = 0; j < n; ) --> Line_69 $$ mapSizeDoc.put("" + totalPage, "" + i) [CD]
Line_23 $$ Map mapSizeDoc = new HashMap() --> Line_69 $$ mapSizeDoc.put("" + totalPage, "" + i) [FD]
Line_66 $$ for (int j = 0; j < n; ) --> Line_70 $$ page = writer.getImportedPage(reader, j) [CD]
Line_66 $$ for (int j = 0; j < n; ) --> Line_70 $$ page = writer.getImportedPage(reader, j) [FD]
Line_65 $$ PdfImportedPage page --> Line_70 $$ page = writer.getImportedPage(reader, j) [FD]
Line_33 $$ writer = new PdfCopy(document, out) --> Line_70 $$ page = writer.getImportedPage(reader, j) [FD]
Line_21 $$ PdfCopy writer = null --> Line_70 $$ page = writer.getImportedPage(reader, j) [FD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_70 $$ page = writer.getImportedPage(reader, j) [FD]
Line_66 $$ for (int j = 0; j < n; ) --> Line_71 $$ writer.addPage(page) [CD]
Line_33 $$ writer = new PdfCopy(document, out) --> Line_71 $$ writer.addPage(page) [FD]
Line_21 $$ PdfCopy writer = null --> Line_71 $$ writer.addPage(page) [FD]
Line_70 $$ page = writer.getImportedPage(reader, j) --> Line_71 $$ writer.addPage(page) [FD]
Line_65 $$ PdfImportedPage page --> Line_71 $$ writer.addPage(page) [FD]
Line_32 $$ document = new com.lowagie.text.Document(reader.getPageSizeWithRotation(1)) --> Line_74 $$ document.close() [FD]
Line_20 $$ com.lowagie.text.Document document = null --> Line_74 $$ document.close() [FD]
Line_3 $$ OutputStream out = fout --> Line_75 $$ out.flush() [FD]
Line_19 $$ out = new FileOutputStream(tmp) --> Line_75 $$ out.flush() [FD]
Line_3 $$ OutputStream out = fout --> Line_76 $$ out.close() [FD]
Line_19 $$ out = new FileOutputStream(tmp) --> Line_76 $$ out.close() [FD]
Line_7 $$ File tmp = null --> Line_78 $$ final PdfReader reader = new PdfReader(tmp.getAbsolutePath()) [FD]
Line_10 $$ tmp = File.createTempFile("yahp", "pdf") --> Line_78 $$ final PdfReader reader = new PdfReader(tmp.getAbsolutePath()) [FD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_80 $$ final int n = reader.getNumberOfPages() [FD]
Line_78 $$ final PdfReader reader = new PdfReader(tmp.getAbsolutePath()) --> Line_80 $$ final int n = reader.getNumberOfPages() [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_85 $$ while (i < n) [FD]
Line_82 $$ int i = 0 --> Line_85 $$ while (i < n) [FD]
Line_29 $$ final int n = reader.getNumberOfPages() --> Line_85 $$ while (i < n) [FD]
Line_80 $$ final int n = reader.getNumberOfPages() --> Line_85 $$ while (i < n) [FD]
Line_85 $$ while (i < n) --> Line_86 $$ i++ [CD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_86 $$ i++ [FD]
Line_82 $$ int i = 0 --> Line_86 $$ i++ [FD]
Line_85 $$ while (i < n) --> Line_87 $$ int indexSize = Integer.parseInt((String) mapSizeDoc.get("" + i)) [CD]
Line_23 $$ Map mapSizeDoc = new HashMap() --> Line_87 $$ int indexSize = Integer.parseInt((String) mapSizeDoc.get("" + i)) [FD]
Line_85 $$ while (i < n) --> Line_88 $$ final int[] dsize = size[indexSize].getSize() [CD]
Line_85 $$ while (i < n) --> Line_89 $$ final int[] dmargin = size[indexSize].getMargin() [CD]
Line_85 $$ while (i < n) --> Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() [CD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_92 $$ if (chf.getSfor().equals(CHeaderFooter.ODD_PAGES) && (i % 2 == 0)) [CD]
Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() --> Line_92 $$ if (chf.getSfor().equals(CHeaderFooter.ODD_PAGES) && (i % 2 == 0)) [FD]
Line_92 $$ if (chf.getSfor().equals(CHeaderFooter.ODD_PAGES) && (i % 2 == 0)) --> Line_94 $$ if (chf.getSfor().equals(CHeaderFooter.EVEN_PAGES) && (i % 2 != 0)) [CD]
Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() --> Line_94 $$ if (chf.getSfor().equals(CHeaderFooter.EVEN_PAGES) && (i % 2 != 0)) [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_97 $$ final String text = chf.getContent().replaceAll("<pagenumber>", "" + i).replaceAll("<pagecount>", "" + n) [CD]
Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() --> Line_97 $$ final String text = chf.getContent().replaceAll("<pagenumber>", "" + i).replaceAll("<pagecount>", "" + n) [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_98 $$ final PdfContentByte over = stp.getOverContent(i) [CD]
Line_81 $$ final PdfStamper stp = new PdfStamper(reader, out2) --> Line_98 $$ final PdfContentByte over = stp.getOverContent(i) [FD]
Line_25 $$ for (int i = 0; i < files.size(); i++) --> Line_98 $$ final PdfContentByte over = stp.getOverContent(i) [FD]
Line_82 $$ int i = 0 --> Line_98 $$ final PdfContentByte over = stp.getOverContent(i) [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_99 $$ final ByteArrayOutputStream bbout = new ByteArrayOutputStream() [CD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_100 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) [CD]
Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() --> Line_100 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) [FD]
Line_100 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) --> Line_101 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[3]), new ArrayList(), properties, bbout) [CD]
Line_84 $$ final CHtmlToPdfFlyingSaucerTransformer trans = new CHtmlToPdfFlyingSaucerTransformer() --> Line_101 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[3]), new ArrayList(), properties, bbout) [FD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_101 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[3]), new ArrayList(), properties, bbout) [FD]
Line_99 $$ final ByteArrayOutputStream bbout = new ByteArrayOutputStream() --> Line_101 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[3]), new ArrayList(), properties, bbout) [FD]
Line_97 $$ final String text = chf.getContent().replaceAll("<pagenumber>", "" + i).replaceAll("<pagecount>", "" + n) --> Line_101 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[3]), new ArrayList(), properties, bbout) [FD]
Line_100 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) --> Line_102 $$ if (chf.getType().equals(CHeaderFooter.FOOTER)) [CD]
Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() --> Line_102 $$ if (chf.getType().equals(CHeaderFooter.FOOTER)) [FD]
Line_102 $$ if (chf.getType().equals(CHeaderFooter.FOOTER)) --> Line_103 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[2]), new ArrayList(), properties, bbout) [CD]
Line_84 $$ final CHtmlToPdfFlyingSaucerTransformer trans = new CHtmlToPdfFlyingSaucerTransformer() --> Line_103 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[2]), new ArrayList(), properties, bbout) [FD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_103 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[2]), new ArrayList(), properties, bbout) [FD]
Line_99 $$ final ByteArrayOutputStream bbout = new ByteArrayOutputStream() --> Line_103 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[2]), new ArrayList(), properties, bbout) [FD]
Line_97 $$ final String text = chf.getContent().replaceAll("<pagenumber>", "" + i).replaceAll("<pagecount>", "" + n) --> Line_103 $$ trans.transform(new ByteArrayInputStream(text.getBytes("utf-8")), base_url, new PageSize(dsize[0] - (dmargin[0] + dmargin[1]), dmargin[2]), new ArrayList(), properties, bbout) [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_105 $$ final PdfReader readerHF = new PdfReader(bbout.toByteArray()) [CD]
Line_99 $$ final ByteArrayOutputStream bbout = new ByteArrayOutputStream() --> Line_105 $$ final PdfReader readerHF = new PdfReader(bbout.toByteArray()) [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_106 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) [CD]
Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() --> Line_106 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) [FD]
Line_106 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) --> Line_107 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], dsize[1] - dmargin[3]) [CD]
Line_98 $$ final PdfContentByte over = stp.getOverContent(i) --> Line_107 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], dsize[1] - dmargin[3]) [FD]
Line_81 $$ final PdfStamper stp = new PdfStamper(reader, out2) --> Line_107 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], dsize[1] - dmargin[3]) [FD]
Line_105 $$ final PdfReader readerHF = new PdfReader(bbout.toByteArray()) --> Line_107 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], dsize[1] - dmargin[3]) [FD]
Line_106 $$ if (chf.getType().equals(CHeaderFooter.HEADER)) --> Line_108 $$ if (chf.getType().equals(CHeaderFooter.FOOTER)) [CD]
Line_91 $$ final CHeaderFooter chf = (CHeaderFooter) it.next() --> Line_108 $$ if (chf.getType().equals(CHeaderFooter.FOOTER)) [FD]
Line_108 $$ if (chf.getType().equals(CHeaderFooter.FOOTER)) --> Line_109 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], 0) [CD]
Line_98 $$ final PdfContentByte over = stp.getOverContent(i) --> Line_109 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], 0) [FD]
Line_81 $$ final PdfStamper stp = new PdfStamper(reader, out2) --> Line_109 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], 0) [FD]
Line_105 $$ final PdfReader readerHF = new PdfReader(bbout.toByteArray()) --> Line_109 $$ over.addTemplate(stp.getImportedPage(readerHF, 1), dmargin[0], 0) [FD]
Line_90 $$ for (final Iterator it = hf.iterator(); it.hasNext(); ) --> Line_111 $$ readerHF.close() [CD]
Line_105 $$ final PdfReader readerHF = new PdfReader(bbout.toByteArray()) --> Line_111 $$ readerHF.close() [FD]
Line_81 $$ final PdfStamper stp = new PdfStamper(reader, out2) --> Line_114 $$ stp.close() [FD]
Line_4 $$ OutputStream out2 = fout --> Line_117 $$ out2.flush() [FD]
Line_15 $$ out2 = new FileOutputStream(tmp2) --> Line_117 $$ out2.flush() [FD]
Line_17 $$ out2 = oldOut --> Line_117 $$ out2.flush() [FD]
Line_4 $$ OutputStream out2 = fout --> Line_121 $$ out2.close() [FD]
Line_15 $$ out2 = new FileOutputStream(tmp2) --> Line_121 $$ out2.close() [FD]
Line_17 $$ out2 = oldOut --> Line_121 $$ out2.close() [FD]
Line_125 $$ if (signed) --> Line_126 $$ final String keypassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_PRIVATE_KEY_PASSWORD) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_126 $$ final String keypassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_PRIVATE_KEY_PASSWORD) [FD]
Line_125 $$ if (signed) --> Line_127 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_127 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) [FD]
Line_125 $$ if (signed) --> Line_128 $$ final String keyStorepassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_KEYSTORE_PASSWORD) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_128 $$ final String keyStorepassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_KEYSTORE_PASSWORD) [FD]
Line_125 $$ if (signed) --> Line_129 $$ final String privateKeyFile = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_PRIVATE_KEY_FILE) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_129 $$ final String privateKeyFile = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_PRIVATE_KEY_FILE) [FD]
Line_125 $$ if (signed) --> Line_130 $$ final String reason = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_REASON) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_130 $$ final String reason = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_REASON) [FD]
Line_125 $$ if (signed) --> Line_131 $$ final String location = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_LOCATION) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_131 $$ final String location = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_LOCATION) [FD]
Line_125 $$ if (signed) --> Line_132 $$ final boolean selfSigned = !"false".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SELF_SIGNING)) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_132 $$ final boolean selfSigned = !"false".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_SELF_SIGNING)) [FD]
Line_125 $$ if (signed) --> Line_134 $$ if (password != null) [CD]
Line_37 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) --> Line_134 $$ if (password != null) [FD]
Line_127 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) --> Line_134 $$ if (password != null) [FD]
Line_134 $$ if (password != null) --> Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) [CD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) [FD]
Line_78 $$ final PdfReader reader = new PdfReader(tmp.getAbsolutePath()) --> Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) [FD]
Line_8 $$ File tmp2 = null --> Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) [FD]
Line_11 $$ tmp2 = File.createTempFile("yahp", "pdf") --> Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) [FD]
Line_37 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) --> Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) [FD]
Line_127 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) --> Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) [FD]
Line_134 $$ if (password != null) --> Line_137 $$ reader = new PdfReader(tmp2.getAbsolutePath()) [CD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_137 $$ reader = new PdfReader(tmp2.getAbsolutePath()) [FD]
Line_78 $$ final PdfReader reader = new PdfReader(tmp.getAbsolutePath()) --> Line_137 $$ reader = new PdfReader(tmp2.getAbsolutePath()) [FD]
Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) --> Line_137 $$ reader = new PdfReader(tmp2.getAbsolutePath()) [FD]
Line_8 $$ File tmp2 = null --> Line_137 $$ reader = new PdfReader(tmp2.getAbsolutePath()) [FD]
Line_11 $$ tmp2 = File.createTempFile("yahp", "pdf") --> Line_137 $$ reader = new PdfReader(tmp2.getAbsolutePath()) [FD]
Line_125 $$ if (signed) --> Line_139 $$ final KeyStore ks = selfSigned ? KeyStore.getInstance(KeyStore.getDefaultType()) : KeyStore.getInstance("pkcs12") [CD]
Line_125 $$ if (signed) --> Line_140 $$ ks.load(new FileInputStream(privateKeyFile), keyStorepassword.toCharArray()) [CD]
Line_139 $$ final KeyStore ks = selfSigned ? KeyStore.getInstance(KeyStore.getDefaultType()) : KeyStore.getInstance("pkcs12") --> Line_140 $$ ks.load(new FileInputStream(privateKeyFile), keyStorepassword.toCharArray()) [FD]
Line_128 $$ final String keyStorepassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_KEYSTORE_PASSWORD) --> Line_140 $$ ks.load(new FileInputStream(privateKeyFile), keyStorepassword.toCharArray()) [FD]
Line_125 $$ if (signed) --> Line_141 $$ final String alias = (String) ks.aliases().nextElement() [CD]
Line_139 $$ final KeyStore ks = selfSigned ? KeyStore.getInstance(KeyStore.getDefaultType()) : KeyStore.getInstance("pkcs12") --> Line_141 $$ final String alias = (String) ks.aliases().nextElement() [FD]
Line_125 $$ if (signed) --> Line_142 $$ final PrivateKey key = (PrivateKey) ks.getKey(alias, keypassword.toCharArray()) [CD]
Line_139 $$ final KeyStore ks = selfSigned ? KeyStore.getInstance(KeyStore.getDefaultType()) : KeyStore.getInstance("pkcs12") --> Line_142 $$ final PrivateKey key = (PrivateKey) ks.getKey(alias, keypassword.toCharArray()) [FD]
Line_141 $$ final String alias = (String) ks.aliases().nextElement() --> Line_142 $$ final PrivateKey key = (PrivateKey) ks.getKey(alias, keypassword.toCharArray()) [FD]
Line_126 $$ final String keypassword = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_PRIVATE_KEY_PASSWORD) --> Line_142 $$ final PrivateKey key = (PrivateKey) ks.getKey(alias, keypassword.toCharArray()) [FD]
Line_125 $$ if (signed) --> Line_143 $$ final Certificate chain[] = ks.getCertificateChain(alias) [CD]
Line_139 $$ final KeyStore ks = selfSigned ? KeyStore.getInstance(KeyStore.getDefaultType()) : KeyStore.getInstance("pkcs12") --> Line_143 $$ final Certificate chain[] = ks.getCertificateChain(alias) [FD]
Line_141 $$ final String alias = (String) ks.aliases().nextElement() --> Line_143 $$ final Certificate chain[] = ks.getCertificateChain(alias) [FD]
Line_125 $$ if (signed) --> Line_144 $$ final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0') [CD]
Line_27 $$ final PdfReader reader = new PdfReader(fPDF.getAbsolutePath()) --> Line_144 $$ final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0') [FD]
Line_78 $$ final PdfReader reader = new PdfReader(tmp.getAbsolutePath()) --> Line_144 $$ final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0') [FD]
Line_135 $$ reader = new PdfReader(tmp2.getAbsolutePath(), password.getBytes()) --> Line_144 $$ final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0') [FD]
Line_137 $$ reader = new PdfReader(tmp2.getAbsolutePath()) --> Line_144 $$ final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0') [FD]
Line_6 $$ OutputStream oldOut = null --> Line_144 $$ final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0') [FD]
Line_12 $$ oldOut = out --> Line_144 $$ final PdfStamper stp = PdfStamper.createSignature(reader, oldOut, '\0') [FD]
Line_125 $$ if (signed) --> Line_145 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) [CD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_145 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) [FD]
Line_145 $$ if ("true".equals(properties.get(IHtmlToPdfTransformer.USE_PDF_ENCRYPTION))) --> Line_146 $$ stp.setEncryption(PdfWriter.STRENGTH128BITS, password, null, CDocumentReconstructor.getSecurityFlags(properties)) [CD]
Line_81 $$ final PdfStamper stp = new PdfStamper(reader, out2) --> Line_146 $$ stp.setEncryption(PdfWriter.STRENGTH128BITS, password, null, CDocumentReconstructor.getSecurityFlags(properties)) [FD]
Line_37 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) --> Line_146 $$ stp.setEncryption(PdfWriter.STRENGTH128BITS, password, null, CDocumentReconstructor.getSecurityFlags(properties)) [FD]
Line_127 $$ final String password = (String) properties.get(IHtmlToPdfTransformer.PDF_ENCRYPTION_PASSWORD) --> Line_146 $$ stp.setEncryption(PdfWriter.STRENGTH128BITS, password, null, CDocumentReconstructor.getSecurityFlags(properties)) [FD]
Line_2 $$ public static void reconstruct(final List files, final Map properties, final OutputStream fout, final String base_url, final String producer, final PageSize[] size, final List hf) throws CConvertException --> Line_146 $$ stp.setEncryption(PdfWriter.STRENGTH128BITS, password, null, CDocumentReconstructor.getSecurityFlags(properties)) [FD]
Line_125 $$ if (signed) --> Line_148 $$ final PdfSignatureAppearance sap = stp.getSignatureAppearance() [CD]
Line_81 $$ final PdfStamper stp = new PdfStamper(reader, out2) --> Line_148 $$ final PdfSignatureAppearance sap = stp.getSignatureAppearance() [FD]
Line_125 $$ if (signed) --> Line_149 $$ if (selfSigned) [CD]
Line_149 $$ if (selfSigned) --> Line_150 $$ sap.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED) [CD]
Line_148 $$ final PdfSignatureAppearance sap = stp.getSignatureAppearance() --> Line_150 $$ sap.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED) [FD]
Line_142 $$ final PrivateKey key = (PrivateKey) ks.getKey(alias, keypassword.toCharArray()) --> Line_150 $$ sap.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED) [FD]
Line_149 $$ if (selfSigned) --> Line_152 $$ sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED) [CD]
Line_148 $$ final PdfSignatureAppearance sap = stp.getSignatureAppearance() --> Line_152 $$ sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED) [FD]
Line_142 $$ final PrivateKey key = (PrivateKey) ks.getKey(alias, keypassword.toCharArray()) --> Line_152 $$ sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED) [FD]
Line_125 $$ if (signed) --> Line_154 $$ if (reason != null) [CD]
Line_130 $$ final String reason = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_REASON) --> Line_154 $$ if (reason != null) [FD]
Line_154 $$ if (reason != null) --> Line_155 $$ sap.setReason(reason) [CD]
Line_148 $$ final PdfSignatureAppearance sap = stp.getSignatureAppearance() --> Line_155 $$ sap.setReason(reason) [FD]
Line_130 $$ final String reason = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_REASON) --> Line_155 $$ sap.setReason(reason) [FD]
Line_125 $$ if (signed) --> Line_157 $$ if (location != null) [CD]
Line_131 $$ final String location = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_LOCATION) --> Line_157 $$ if (location != null) [FD]
Line_157 $$ if (location != null) --> Line_158 $$ sap.setLocation(location) [CD]
Line_148 $$ final PdfSignatureAppearance sap = stp.getSignatureAppearance() --> Line_158 $$ sap.setLocation(location) [FD]
Line_131 $$ final String location = (String) properties.get(IHtmlToPdfTransformer.PDF_SIGNING_LOCATION) --> Line_158 $$ sap.setLocation(location) [FD]
Line_125 $$ if (signed) --> Line_160 $$ stp.close() [CD]
Line_81 $$ final PdfStamper stp = new PdfStamper(reader, out2) --> Line_160 $$ stp.close() [FD]
Line_125 $$ if (signed) --> Line_161 $$ oldOut.flush() [CD]
Line_6 $$ OutputStream oldOut = null --> Line_161 $$ oldOut.flush() [FD]
Line_12 $$ oldOut = out --> Line_161 $$ oldOut.flush() [FD]
Line_7 $$ File tmp = null --> Line_167 $$ tmp.delete() [FD]
Line_10 $$ tmp = File.createTempFile("yahp", "pdf") --> Line_167 $$ tmp.delete() [FD]
Line_8 $$ File tmp2 = null --> Line_171 $$ tmp2.delete() [FD]
Line_11 $$ tmp2 = File.createTempFile("yahp", "pdf") --> Line_171 $$ tmp2.delete() [FD]
