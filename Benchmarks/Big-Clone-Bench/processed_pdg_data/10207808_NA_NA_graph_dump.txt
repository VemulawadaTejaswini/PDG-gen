Line_2 $$ private void compress(File src) throws IOException --> Line_4 $$ if (this.switches.contains(Switch.test)) [CD]
Line_4 $$ if (this.switches.contains(Switch.test)) --> Line_5 $$ return [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_6 $$ checkSourceFile(src) [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_6 $$ checkSourceFile(src) [FD]
Line_2 $$ private void compress(File src) throws IOException --> Line_7 $$ if (src.getPath().endsWith(".bz2")) [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_7 $$ if (src.getPath().endsWith(".bz2")) [FD]
Line_7 $$ if (src.getPath().endsWith(".bz2")) --> Line_9 $$ this.log.println("WARNING: skipping file because it already has .bz2 suffix:").println(src) [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_9 $$ this.log.println("WARNING: skipping file because it already has .bz2 suffix:").println(src) [FD]
Line_7 $$ if (src.getPath().endsWith(".bz2")) --> Line_10 $$ return [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_12 $$ final File dst = new File(src.getPath() + ".bz2").getAbsoluteFile() [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_12 $$ final File dst = new File(src.getPath() + ".bz2").getAbsoluteFile() [FD]
Line_2 $$ private void compress(File src) throws IOException --> Line_13 $$ if (!checkDestFile(dst)) [CD]
Line_12 $$ final File dst = new File(src.getPath() + ".bz2").getAbsoluteFile() --> Line_13 $$ if (!checkDestFile(dst)) [FD]
Line_13 $$ if (!checkDestFile(dst)) --> Line_14 $$ return [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_15 $$ FileChannel inChannel = null [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_16 $$ FileChannel outChannel = null [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_17 $$ FileOutputStream fileOut = null [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_18 $$ BZip2OutputStream bzOut = null [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_19 $$ FileLock inLock = null [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_20 $$ FileLock outLock = null [CD]
Line_15 $$ FileChannel inChannel = null --> Line_23 $$ inChannel = new FileInputStream(src).getChannel() [FD]
Line_15 $$ FileChannel inChannel = null --> Line_24 $$ final long inSize = inChannel.size() [FD]
Line_23 $$ inChannel = new FileInputStream(src).getChannel() --> Line_24 $$ final long inSize = inChannel.size() [FD]
Line_19 $$ FileLock inLock = null --> Line_25 $$ inLock = inChannel.tryLock(0, inSize, true) [FD]
Line_15 $$ FileChannel inChannel = null --> Line_25 $$ inLock = inChannel.tryLock(0, inSize, true) [FD]
Line_23 $$ inChannel = new FileInputStream(src).getChannel() --> Line_25 $$ inLock = inChannel.tryLock(0, inSize, true) [FD]
Line_24 $$ final long inSize = inChannel.size() --> Line_25 $$ inLock = inChannel.tryLock(0, inSize, true) [FD]
Line_19 $$ FileLock inLock = null --> Line_26 $$ if (inLock == null) [FD]
Line_25 $$ inLock = inChannel.tryLock(0, inSize, true) --> Line_26 $$ if (inLock == null) [FD]
Line_17 $$ FileOutputStream fileOut = null --> Line_28 $$ fileOut = new FileOutputStream(dst) [FD]
Line_16 $$ FileChannel outChannel = null --> Line_29 $$ outChannel = fileOut.getChannel() [FD]
Line_17 $$ FileOutputStream fileOut = null --> Line_29 $$ outChannel = fileOut.getChannel() [FD]
Line_28 $$ fileOut = new FileOutputStream(dst) --> Line_29 $$ outChannel = fileOut.getChannel() [FD]
Line_18 $$ BZip2OutputStream bzOut = null --> Line_30 $$ bzOut = new BZip2OutputStream(new BufferedXOutputStream(fileOut, 8192), Math.min((this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize, BZip2OutputStream.chooseBlockSize(inSize))) [FD]
Line_24 $$ final long inSize = inChannel.size() --> Line_30 $$ bzOut = new BZip2OutputStream(new BufferedXOutputStream(fileOut, 8192), Math.min((this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize, BZip2OutputStream.chooseBlockSize(inSize))) [FD]
Line_20 $$ FileLock outLock = null --> Line_37 $$ outLock = outChannel.tryLock() [FD]
Line_16 $$ FileChannel outChannel = null --> Line_37 $$ outLock = outChannel.tryLock() [FD]
Line_29 $$ outChannel = fileOut.getChannel() --> Line_37 $$ outLock = outChannel.tryLock() [FD]
Line_20 $$ FileLock outLock = null --> Line_38 $$ if (outLock == null) [FD]
Line_37 $$ outLock = outChannel.tryLock() --> Line_38 $$ if (outLock == null) [FD]
Line_40 $$ final boolean showProgress = this.switches.contains(Switch.showProgress) --> Line_43 $$ if (showProgress || this.verbose) [FD]
Line_43 $$ if (showProgress || this.verbose) --> Line_45 $$ this.log.print("source: " + src).print(": size=").println(inSize) [CD]
Line_24 $$ final long inSize = inChannel.size() --> Line_45 $$ this.log.print("source: " + src).print(": size=").println(inSize) [FD]
Line_43 $$ if (showProgress || this.verbose) --> Line_46 $$ this.log.println("target: " + dst) [CD]
Line_48 $$ while (true) --> Line_50 $$ final long maxStep = showProgress ? Math.max(8192, (inSize - pos) / MAX_PROGRESS) : (inSize - pos) [CD]
Line_48 $$ while (true) --> Line_51 $$ if (maxStep <= 0) [CD]
Line_50 $$ final long maxStep = showProgress ? Math.max(8192, (inSize - pos) / MAX_PROGRESS) : (inSize - pos) --> Line_51 $$ if (maxStep <= 0) [FD]
Line_51 $$ if (maxStep <= 0) --> Line_53 $$ if (showProgress) [CD]
Line_53 $$ if (showProgress) --> Line_55 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#') [CD]
Line_55 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#') --> Line_56 $$ this.log.print('#') [CD]
Line_53 $$ if (showProgress) --> Line_57 $$ this.log.println(" done") [CD]
Line_51 $$ if (maxStep <= 0) --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [CD]
Line_15 $$ FileChannel inChannel = null --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [FD]
Line_23 $$ inChannel = new FileInputStream(src).getChannel() --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [FD]
Line_41 $$ long pos = 0 --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [FD]
Line_50 $$ final long maxStep = showProgress ? Math.max(8192, (inSize - pos) / MAX_PROGRESS) : (inSize - pos) --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [FD]
Line_18 $$ BZip2OutputStream bzOut = null --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [FD]
Line_30 $$ bzOut = new BZip2OutputStream(new BufferedXOutputStream(fileOut, 8192), Math.min((this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize, BZip2OutputStream.chooseBlockSize(inSize))) --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [FD]
Line_51 $$ if (maxStep <= 0) --> Line_64 $$ if ((step == 0) && (inChannel.size() != inSize)) [CD]
Line_15 $$ FileChannel inChannel = null --> Line_64 $$ if ((step == 0) && (inChannel.size() != inSize)) [FD]
Line_23 $$ inChannel = new FileInputStream(src).getChannel() --> Line_64 $$ if ((step == 0) && (inChannel.size() != inSize)) [FD]
Line_51 $$ if (maxStep <= 0) --> Line_66 $$ pos += step [CD]
Line_41 $$ long pos = 0 --> Line_66 $$ pos += step [FD]
Line_51 $$ if (maxStep <= 0) --> Line_67 $$ if (showProgress) [CD]
Line_67 $$ if (showProgress) --> Line_71 $$ for (int i = progress; i < newProgress; i++) this.log.print('#') [CD]
Line_55 $$ for (int i = progress; i < MAX_PROGRESS; i++) this.log.print('#') --> Line_71 $$ for (int i = progress; i < newProgress; i++) this.log.print('#') [FD]
Line_71 $$ for (int i = progress; i < newProgress; i++) this.log.print('#') --> Line_72 $$ this.log.print('#') [CD]
Line_67 $$ if (showProgress) --> Line_73 $$ progress = newProgress [CD]
Line_42 $$ int progress = 0 --> Line_73 $$ progress = newProgress [FD]
Line_19 $$ FileLock inLock = null --> Line_77 $$ inLock.release() [FD]
Line_25 $$ inLock = inChannel.tryLock(0, inSize, true) --> Line_77 $$ inLock.release() [FD]
Line_15 $$ FileChannel inChannel = null --> Line_78 $$ inChannel.close() [FD]
Line_23 $$ inChannel = new FileInputStream(src).getChannel() --> Line_78 $$ inChannel.close() [FD]
Line_18 $$ BZip2OutputStream bzOut = null --> Line_79 $$ bzOut.closeInstance() [FD]
Line_30 $$ bzOut = new BZip2OutputStream(new BufferedXOutputStream(fileOut, 8192), Math.min((this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize, BZip2OutputStream.chooseBlockSize(inSize))) --> Line_79 $$ bzOut.closeInstance() [FD]
Line_16 $$ FileChannel outChannel = null --> Line_80 $$ final long outSize = outChannel.position() [FD]
Line_29 $$ outChannel = fileOut.getChannel() --> Line_80 $$ final long outSize = outChannel.position() [FD]
Line_16 $$ FileChannel outChannel = null --> Line_81 $$ outChannel.truncate(outSize) [FD]
Line_29 $$ outChannel = fileOut.getChannel() --> Line_81 $$ outChannel.truncate(outSize) [FD]
Line_80 $$ final long outSize = outChannel.position() --> Line_81 $$ outChannel.truncate(outSize) [FD]
Line_20 $$ FileLock outLock = null --> Line_82 $$ outLock.release() [FD]
Line_37 $$ outLock = outChannel.tryLock() --> Line_82 $$ outLock.release() [FD]
Line_17 $$ FileOutputStream fileOut = null --> Line_83 $$ fileOut.close() [FD]
Line_28 $$ fileOut = new FileOutputStream(dst) --> Line_83 $$ fileOut.close() [FD]
Line_84 $$ if (this.verbose) --> Line_86 $$ final double ratio = (inSize == 0) ? (outSize * 100) : ((double) outSize / (double) inSize) [CD]
Line_84 $$ if (this.verbose) --> Line_87 $$ this.log.print("raw size: ").print(inSize).print("; compressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%') [CD]
Line_86 $$ final double ratio = (inSize == 0) ? (outSize * 100) : ((double) outSize / (double) inSize) --> Line_87 $$ this.log.print("raw size: ").print(inSize).print("; compressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%') [FD]
Line_80 $$ final long outSize = outChannel.position() --> Line_87 $$ this.log.print("raw size: ").print(inSize).print("; compressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%') [FD]
Line_24 $$ final long inSize = inChannel.size() --> Line_87 $$ this.log.print("raw size: ").print(inSize).print("; compressed size: ").print(outSize).print("; compression ratio: ").print(ratio).println('%') [FD]
Line_91 $$ if (!this.switches.contains(Switch.keep)) --> Line_93 $$ if (!src.delete()) [CD]
Line_2 $$ private void compress(File src) throws IOException --> Line_93 $$ if (!src.delete()) [FD]
Line_15 $$ FileChannel inChannel = null --> Line_99 $$ IO.tryClose(inChannel) [FD]
Line_23 $$ inChannel = new FileInputStream(src).getChannel() --> Line_99 $$ IO.tryClose(inChannel) [FD]
Line_18 $$ BZip2OutputStream bzOut = null --> Line_100 $$ IO.tryClose(bzOut) [FD]
Line_30 $$ bzOut = new BZip2OutputStream(new BufferedXOutputStream(fileOut, 8192), Math.min((this.blockSize == -1) ? BZip2OutputStream.MAX_BLOCK_SIZE : this.blockSize, BZip2OutputStream.chooseBlockSize(inSize))) --> Line_100 $$ IO.tryClose(bzOut) [FD]
Line_17 $$ FileOutputStream fileOut = null --> Line_101 $$ IO.tryClose(fileOut) [FD]
Line_28 $$ fileOut = new FileOutputStream(dst) --> Line_101 $$ IO.tryClose(fileOut) [FD]
Line_19 $$ FileLock inLock = null --> Line_102 $$ IO.tryRelease(inLock) [FD]
Line_25 $$ inLock = inChannel.tryLock(0, inSize, true) --> Line_102 $$ IO.tryRelease(inLock) [FD]
Line_20 $$ FileLock outLock = null --> Line_103 $$ IO.tryRelease(outLock) [FD]
Line_37 $$ outLock = outChannel.tryLock() --> Line_103 $$ IO.tryRelease(outLock) [FD]
Line_66 $$ pos += step --> Line_63 $$ final long step = inChannel.transferTo(pos, maxStep, bzOut) [FD]
