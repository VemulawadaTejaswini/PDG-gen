Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_3 $$ if (precompCache.containsKey(url.toExternalForm())) [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_3 $$ if (precompCache.containsKey(url.toExternalForm())) [FD]
Line_3 $$ if (precompCache.containsKey(url.toExternalForm())) --> Line_4 $$ return (precompCache.get(url.toExternalForm()).copy()) [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_4 $$ return (precompCache.get(url.toExternalForm()).copy()) [FD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_6 $$ TextureLoader.getInstance().getTexture("") [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_7 $$ List<SharedGroup> frames = new ArrayList<SharedGroup>() [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_8 $$ Map<String, Animation> animations = new Hashtable<String, Animation>() [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_9 $$ if (url.toExternalForm().endsWith(".amo")) [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_9 $$ if (url.toExternalForm().endsWith(".amo")) [FD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_11 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_11 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_12 $$ String objFileName = reader.readLine() [FD]
Line_12 $$ String objFileName = reader.readLine() --> Line_13 $$ objFileName = url.toExternalForm().substring(0, url.toExternalForm().lastIndexOf("/")) + "/" + objFileName [FD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_13 $$ objFileName = url.toExternalForm().substring(0, url.toExternalForm().lastIndexOf("/")) + "/" + objFileName [FD]
Line_7 $$ List<SharedGroup> frames = new ArrayList<SharedGroup>() --> Line_14 $$ frames = loadOBJFrames(objFileName) [FD]
Line_12 $$ String objFileName = reader.readLine() --> Line_14 $$ frames = loadOBJFrames(objFileName) [FD]
Line_13 $$ objFileName = url.toExternalForm().substring(0, url.toExternalForm().lastIndexOf("/")) + "/" + objFileName --> Line_14 $$ frames = loadOBJFrames(objFileName) [FD]
Line_15 $$ String line --> Line_16 $$ while ((line = reader.readLine()) != null) [FD]
Line_11 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_16 $$ while ((line = reader.readLine()) != null) [FD]
Line_16 $$ while ((line = reader.readLine()) != null) --> Line_17 $$ StringTokenizer tokenizer = new StringTokenizer(line) [CD]
Line_16 $$ while ((line = reader.readLine()) != null) --> Line_18 $$ String animName = tokenizer.nextToken() [CD]
Line_17 $$ StringTokenizer tokenizer = new StringTokenizer(line) --> Line_18 $$ String animName = tokenizer.nextToken() [FD]
Line_16 $$ while ((line = reader.readLine()) != null) --> Line_19 $$ int from = Integer.valueOf(tokenizer.nextToken()) [CD]
Line_17 $$ StringTokenizer tokenizer = new StringTokenizer(line) --> Line_19 $$ int from = Integer.valueOf(tokenizer.nextToken()) [FD]
Line_16 $$ while ((line = reader.readLine()) != null) --> Line_20 $$ int to = Integer.valueOf(tokenizer.nextToken()) [CD]
Line_17 $$ StringTokenizer tokenizer = new StringTokenizer(line) --> Line_20 $$ int to = Integer.valueOf(tokenizer.nextToken()) [FD]
Line_16 $$ while ((line = reader.readLine()) != null) --> Line_21 $$ tokenizer.nextToken() [CD]
Line_17 $$ StringTokenizer tokenizer = new StringTokenizer(line) --> Line_21 $$ tokenizer.nextToken() [FD]
Line_16 $$ while ((line = reader.readLine()) != null) --> Line_22 $$ animations.put(animName, new Animation(animName, from, to)) [CD]
Line_8 $$ Map<String, Animation> animations = new Hashtable<String, Animation>() --> Line_22 $$ animations.put(animName, new Animation(animName, from, to)) [FD]
Line_18 $$ String animName = tokenizer.nextToken() --> Line_22 $$ animations.put(animName, new Animation(animName, from, to)) [FD]
Line_9 $$ if (url.toExternalForm().endsWith(".amo")) --> Line_30 $$ frames = loadOBJFrames(url.toExternalForm()) [CD]
Line_7 $$ List<SharedGroup> frames = new ArrayList<SharedGroup>() --> Line_30 $$ frames = loadOBJFrames(url.toExternalForm()) [FD]
Line_14 $$ frames = loadOBJFrames(objFileName) --> Line_30 $$ frames = loadOBJFrames(url.toExternalForm()) [FD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_30 $$ frames = loadOBJFrames(url.toExternalForm()) [FD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_32 $$ PrecomputedAnimatedModel precompModel = new PrecomputedAnimatedModel(frames, animations) [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_33 $$ precompCache.put(url.toExternalForm(), precompModel) [CD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_33 $$ precompCache.put(url.toExternalForm(), precompModel) [FD]
Line_32 $$ PrecomputedAnimatedModel precompModel = new PrecomputedAnimatedModel(frames, animations) --> Line_33 $$ precompCache.put(url.toExternalForm(), precompModel) [FD]
Line_2 $$ private PrecomputedAnimatedModel loadPrecomputedModel_(URL url) --> Line_34 $$ return (precompModel) [CD]
