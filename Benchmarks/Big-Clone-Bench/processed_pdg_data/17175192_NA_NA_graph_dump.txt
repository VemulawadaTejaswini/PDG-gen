Line_2 $$ public void update() --> Line_3 $$ new Thread(new Runnable() [CD]
Line_8 $$ URL url = new URL(updatePath + "currentVersion.txt") --> Line_9 $$ URLConnection con = url.openConnection() [FD]
Line_9 $$ URLConnection con = url.openConnection() --> Line_10 $$ con.connect() [FD]
Line_9 $$ URLConnection con = url.openConnection() --> Line_11 $$ BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream())) [FD]
Line_12 $$ String line --> Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) [FD]
Line_11 $$ BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream())) --> Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) [FD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_14 $$ URL fileUrl = new URL(updatePath + line) [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_15 $$ URLConnection filecon = fileUrl.openConnection() [CD]
Line_14 $$ URL fileUrl = new URL(updatePath + line) --> Line_15 $$ URLConnection filecon = fileUrl.openConnection() [FD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_16 $$ InputStream stream = fileUrl.openStream() [CD]
Line_14 $$ URL fileUrl = new URL(updatePath + line) --> Line_16 $$ InputStream stream = fileUrl.openStream() [FD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_17 $$ int oneChar, count = 0 [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_18 $$ int size = filecon.getContentLength() [CD]
Line_15 $$ URLConnection filecon = fileUrl.openConnection() --> Line_18 $$ int size = filecon.getContentLength() [FD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_19 $$ jProgressBar1.setMaximum(size) [CD]
Line_18 $$ int size = filecon.getContentLength() --> Line_19 $$ jProgressBar1.setMaximum(size) [FD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_20 $$ jProgressBar1.setValue(0) [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_21 $$ File testFile = new File(line) [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_22 $$ String build = "" [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_23 $$ for (String dirtest : line.split("/")) [FD]
Line_12 $$ String line --> Line_23 $$ for (String dirtest : line.split("/")) [FD]
Line_22 $$ String build = "" --> Line_24 $$ build += dirtest [FD]
Line_23 $$ for (String dirtest : line.split("/")) --> Line_24 $$ build += dirtest [FD]
Line_22 $$ String build = "" --> Line_25 $$ if (!build.contains(".")) [FD]
Line_24 $$ build += dirtest --> Line_25 $$ if (!build.contains(".")) [FD]
Line_25 $$ if (!build.contains(".")) --> Line_26 $$ File dirfile = new File(build) [CD]
Line_25 $$ if (!build.contains(".")) --> Line_27 $$ if (!dirfile.exists()) [CD]
Line_26 $$ File dirfile = new File(build) --> Line_27 $$ if (!dirfile.exists()) [FD]
Line_27 $$ if (!dirfile.exists()) --> Line_28 $$ dirfile.mkdir() [CD]
Line_26 $$ File dirfile = new File(build) --> Line_28 $$ dirfile.mkdir() [FD]
Line_22 $$ String build = "" --> Line_31 $$ build += "/" [FD]
Line_24 $$ build += dirtest --> Line_31 $$ build += "/" [FD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_33 $$ if (testFile.length() == size) [CD]
Line_18 $$ int size = filecon.getContentLength() --> Line_33 $$ if (testFile.length() == size) [FD]
Line_21 $$ File testFile = new File(line) --> Line_33 $$ if (testFile.length() == size) [FD]
Line_33 $$ if (testFile.length() == size) --> Line_35 $$ transferFile(line, fileUrl, size) [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_35 $$ transferFile(line, fileUrl, size) [FD]
Line_12 $$ String line --> Line_35 $$ transferFile(line, fileUrl, size) [FD]
Line_14 $$ URL fileUrl = new URL(updatePath + line) --> Line_35 $$ transferFile(line, fileUrl, size) [FD]
Line_18 $$ int size = filecon.getContentLength() --> Line_35 $$ transferFile(line, fileUrl, size) [FD]
Line_33 $$ if (testFile.length() == size) --> Line_36 $$ if (line.endsWith("documents.zip")) [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_36 $$ if (line.endsWith("documents.zip")) [FD]
Line_12 $$ String line --> Line_36 $$ if (line.endsWith("documents.zip")) [FD]
Line_36 $$ if (line.endsWith("documents.zip")) --> Line_37 $$ ZipInputStream in2 = new ZipInputStream(new FileInputStream(line)) [CD]
Line_36 $$ if (line.endsWith("documents.zip")) --> Line_38 $$ ZipEntry entry [CD]
Line_36 $$ if (line.endsWith("documents.zip")) --> Line_39 $$ String pathDoc = line.split("documents.zip")[0] [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_39 $$ String pathDoc = line.split("documents.zip")[0] [FD]
Line_12 $$ String line --> Line_39 $$ String pathDoc = line.split("documents.zip")[0] [FD]
Line_36 $$ if (line.endsWith("documents.zip")) --> Line_40 $$ File docDir = new File(pathDoc + "documents") [CD]
Line_36 $$ if (line.endsWith("documents.zip")) --> Line_41 $$ if (!docDir.exists()) [CD]
Line_40 $$ File docDir = new File(pathDoc + "documents") --> Line_41 $$ if (!docDir.exists()) [FD]
Line_41 $$ if (!docDir.exists()) --> Line_42 $$ docDir.mkdir() [CD]
Line_40 $$ File docDir = new File(pathDoc + "documents") --> Line_42 $$ docDir.mkdir() [FD]
Line_36 $$ if (line.endsWith("documents.zip")) --> Line_44 $$ while ((entry = in2.getNextEntry()) != null) [CD]
Line_37 $$ ZipInputStream in2 = new ZipInputStream(new FileInputStream(line)) --> Line_44 $$ while ((entry = in2.getNextEntry()) != null) [FD]
Line_48 $$ int len --> Line_49 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_37 $$ ZipInputStream in2 = new ZipInputStream(new FileInputStream(line)) --> Line_49 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_47 $$ byte[] buf = new byte[1024] --> Line_49 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_49 $$ while ((len = in2.read(buf)) > 0) --> Line_50 $$ out.write(buf, 0, len) [CD]
Line_49 $$ while ((len = in2.read(buf)) > 0) --> Line_50 $$ out.write(buf, 0, len) [FD]
Line_46 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(outFilename)) --> Line_50 $$ out.write(buf, 0, len) [FD]
Line_47 $$ byte[] buf = new byte[1024] --> Line_50 $$ out.write(buf, 0, len) [FD]
Line_48 $$ int len --> Line_50 $$ out.write(buf, 0, len) [FD]
Line_46 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(outFilename)) --> Line_52 $$ out.close() [FD]
Line_36 $$ if (line.endsWith("documents.zip")) --> Line_54 $$ in2.close() [CD]
Line_37 $$ ZipInputStream in2 = new ZipInputStream(new FileInputStream(line)) --> Line_54 $$ in2.close() [FD]
Line_33 $$ if (testFile.length() == size) --> Line_56 $$ if (line.endsWith("mysql.zip")) [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_56 $$ if (line.endsWith("mysql.zip")) [FD]
Line_12 $$ String line --> Line_56 $$ if (line.endsWith("mysql.zip")) [FD]
Line_56 $$ if (line.endsWith("mysql.zip")) --> Line_58 $$ Enumeration entries = zipfile.entries() [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_59 $$ String pathDoc = line.split("mysql.zip")[0] [FD]
Line_12 $$ String line --> Line_59 $$ String pathDoc = line.split("mysql.zip")[0] [FD]
Line_56 $$ if (line.endsWith("mysql.zip")) --> Line_61 $$ if (!docDir.exists()) [CD]
Line_40 $$ File docDir = new File(pathDoc + "documents") --> Line_61 $$ if (!docDir.exists()) [FD]
Line_61 $$ if (!docDir.exists()) --> Line_62 $$ docDir.mkdir() [CD]
Line_40 $$ File docDir = new File(pathDoc + "documents") --> Line_62 $$ docDir.mkdir() [FD]
Line_56 $$ if (line.endsWith("mysql.zip")) --> Line_64 $$ while (entries.hasMoreElements()) [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_65 $$ ZipEntry entry = (ZipEntry) entries.nextElement() [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_66 $$ if (entry.isDirectory()) [CD]
Line_66 $$ if (entry.isDirectory()) --> Line_67 $$ System.err.println("Extracting directory: " + entry.getName()) [CD]
Line_66 $$ if (entry.isDirectory()) --> Line_68 $$ (new File(pathDoc + "mysql/" + entry.getName())).mkdir() [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_71 $$ System.err.println("Extracting file: " + entry.getName()) [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_72 $$ InputStream in2 = zipfile.getInputStream(entry) [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_73 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(pathDoc + "mysql/" + entry.getName())) [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_74 $$ byte[] buf = new byte[1024] [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_75 $$ int len [CD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_76 $$ while ((len = in2.read(buf)) > 0) [CD]
Line_75 $$ int len --> Line_76 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_49 $$ while ((len = in2.read(buf)) > 0) --> Line_76 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_48 $$ int len --> Line_76 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_72 $$ InputStream in2 = zipfile.getInputStream(entry) --> Line_76 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_37 $$ ZipInputStream in2 = new ZipInputStream(new FileInputStream(line)) --> Line_76 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_74 $$ byte[] buf = new byte[1024] --> Line_76 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_47 $$ byte[] buf = new byte[1024] --> Line_76 $$ while ((len = in2.read(buf)) > 0) [FD]
Line_76 $$ while ((len = in2.read(buf)) > 0) --> Line_77 $$ out.write(buf, 0, len) [CD]
Line_76 $$ while ((len = in2.read(buf)) > 0) --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_73 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(pathDoc + "mysql/" + entry.getName())) --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_46 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(outFilename)) --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_74 $$ byte[] buf = new byte[1024] --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_47 $$ byte[] buf = new byte[1024] --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_75 $$ int len --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_49 $$ while ((len = in2.read(buf)) > 0) --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_48 $$ int len --> Line_77 $$ out.write(buf, 0, len) [FD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_79 $$ in2.close() [CD]
Line_72 $$ InputStream in2 = zipfile.getInputStream(entry) --> Line_79 $$ in2.close() [FD]
Line_37 $$ ZipInputStream in2 = new ZipInputStream(new FileInputStream(line)) --> Line_79 $$ in2.close() [FD]
Line_64 $$ while (entries.hasMoreElements()) --> Line_80 $$ out.close() [CD]
Line_73 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(pathDoc + "mysql/" + entry.getName())) --> Line_80 $$ out.close() [FD]
Line_46 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(outFilename)) --> Line_80 $$ out.close() [FD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_84 $$ jProgressBar2.setValue(i + 1) [CD]
Line_13 $$ for (int i = 0; (line = in.readLine()) != null; i++) --> Line_85 $$ labelFileProgress.setText((i + 1) + "/" + numberFiles) [CD]
Line_31 $$ build += "/" --> Line_25 $$ if (!build.contains(".")) [FD]
