Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_3 $$ pl.setName(fileName) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_3 $$ pl.setName(fileName) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_4 $$ pl.setProgress(0) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_4 $$ pl.setProgress(0) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_5 $$ pl.setFinished(false) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_5 $$ pl.setFinished(false) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_6 $$ pl.setStarted(true) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_6 $$ pl.setStarted(true) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_7 $$ String installDirName = extDir + File.separator + extName [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_8 $$ Log.log("extension installation directory: " + installDirName) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_9 $$ File installDir = new File(installDirName) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_10 $$ if (!installDir.exists()) [CD]
Line_9 $$ File installDir = new File(installDirName) --> Line_10 $$ if (!installDir.exists()) [FD]
Line_10 $$ if (!installDir.exists()) --> Line_11 $$ if (!installDir.mkdirs()) [CD]
Line_9 $$ File installDir = new File(installDirName) --> Line_11 $$ if (!installDir.mkdirs()) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_15 $$ URL downloadURL = new URL(url + fileName) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_16 $$ File jarFile = new File(installDirName, fileName) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_17 $$ File indexFile = null [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_18 $$ long urlTimeStamp = downloadURL.openConnection().getLastModified() [CD]
Line_15 $$ URL downloadURL = new URL(url + fileName) --> Line_18 $$ long urlTimeStamp = downloadURL.openConnection().getLastModified() [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_19 $$ String indexFileName = "" [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_20 $$ int idx = fileName.lastIndexOf(".") [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_20 $$ int idx = fileName.lastIndexOf(".") [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_21 $$ if (idx > 0) [CD]
Line_20 $$ int idx = fileName.lastIndexOf(".") --> Line_21 $$ if (idx > 0) [FD]
Line_21 $$ if (idx > 0) --> Line_22 $$ indexFileName = fileName.substring(0, idx) [CD]
Line_19 $$ String indexFileName = "" --> Line_22 $$ indexFileName = fileName.substring(0, idx) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_22 $$ indexFileName = fileName.substring(0, idx) [FD]
Line_20 $$ int idx = fileName.lastIndexOf(".") --> Line_22 $$ indexFileName = fileName.substring(0, idx) [FD]
Line_21 $$ if (idx > 0) --> Line_24 $$ indexFileName = fileName [CD]
Line_19 $$ String indexFileName = "" --> Line_24 $$ indexFileName = fileName [FD]
Line_22 $$ indexFileName = fileName.substring(0, idx) --> Line_24 $$ indexFileName = fileName [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_24 $$ indexFileName = fileName [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_26 $$ indexFileName = indexFileName + ".idx" [CD]
Line_19 $$ String indexFileName = "" --> Line_26 $$ indexFileName = indexFileName + ".idx" [FD]
Line_22 $$ indexFileName = fileName.substring(0, idx) --> Line_26 $$ indexFileName = indexFileName + ".idx" [FD]
Line_24 $$ indexFileName = fileName --> Line_26 $$ indexFileName = indexFileName + ".idx" [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_27 $$ Log.log("index filename: " + indexFileName) [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_28 $$ boolean isDirty = true [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_29 $$ if (jarFile.exists()) [CD]
Line_16 $$ File jarFile = new File(installDirName, fileName) --> Line_29 $$ if (jarFile.exists()) [FD]
Line_29 $$ if (jarFile.exists()) --> Line_30 $$ Log.log("extensionfile already exists: " + fileName) [CD]
Line_29 $$ if (jarFile.exists()) --> Line_31 $$ indexFile = new File(installDir, indexFileName) [CD]
Line_17 $$ File indexFile = null --> Line_31 $$ indexFile = new File(installDir, indexFileName) [FD]
Line_29 $$ if (jarFile.exists()) --> Line_32 $$ if (indexFile.exists()) [CD]
Line_17 $$ File indexFile = null --> Line_32 $$ if (indexFile.exists()) [FD]
Line_31 $$ indexFile = new File(installDir, indexFileName) --> Line_32 $$ if (indexFile.exists()) [FD]
Line_32 $$ if (indexFile.exists()) --> Line_33 $$ Log.log("indexfile already exists") [CD]
Line_32 $$ if (indexFile.exists()) --> Line_34 $$ long cachedTimeStamp = readTimeStamp(indexFile) [CD]
Line_17 $$ File indexFile = null --> Line_34 $$ long cachedTimeStamp = readTimeStamp(indexFile) [FD]
Line_31 $$ indexFile = new File(installDir, indexFileName) --> Line_34 $$ long cachedTimeStamp = readTimeStamp(indexFile) [FD]
Line_32 $$ if (indexFile.exists()) --> Line_35 $$ isDirty = !(cachedTimeStamp == urlTimeStamp) [CD]
Line_28 $$ boolean isDirty = true --> Line_35 $$ isDirty = !(cachedTimeStamp == urlTimeStamp) [FD]
Line_32 $$ if (indexFile.exists()) --> Line_36 $$ Log.log("cached file dirty: " + isDirty + ", url timestamp: " + urlTimeStamp + " cache stamp: " + cachedTimeStamp) [CD]
Line_32 $$ if (indexFile.exists()) --> Line_38 $$ Log.log("indexfile doesn't exist, assume cache is dirty") [CD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_41 $$ if (isDirty) [CD]
Line_41 $$ if (isDirty) --> Line_42 $$ if (jarFile.exists()) [CD]
Line_16 $$ File jarFile = new File(installDirName, fileName) --> Line_42 $$ if (jarFile.exists()) [FD]
Line_42 $$ if (jarFile.exists()) --> Line_43 $$ if (indexFile != null && indexFile.exists()) [CD]
Line_17 $$ File indexFile = null --> Line_43 $$ if (indexFile != null && indexFile.exists()) [FD]
Line_31 $$ indexFile = new File(installDir, indexFileName) --> Line_43 $$ if (indexFile != null && indexFile.exists()) [FD]
Line_43 $$ if (indexFile != null && indexFile.exists()) --> Line_44 $$ Log.log("deleting old index file") [CD]
Line_43 $$ if (indexFile != null && indexFile.exists()) --> Line_45 $$ indexFile.delete() [CD]
Line_17 $$ File indexFile = null --> Line_45 $$ indexFile.delete() [FD]
Line_31 $$ indexFile = new File(installDir, indexFileName) --> Line_45 $$ indexFile.delete() [FD]
Line_42 $$ if (jarFile.exists()) --> Line_47 $$ indexFile = new File(installDirName, indexFileName) [CD]
Line_17 $$ File indexFile = null --> Line_47 $$ indexFile = new File(installDirName, indexFileName) [FD]
Line_31 $$ indexFile = new File(installDir, indexFileName) --> Line_47 $$ indexFile = new File(installDirName, indexFileName) [FD]
Line_42 $$ if (jarFile.exists()) --> Line_48 $$ Log.log("deleting old cached file") [CD]
Line_42 $$ if (jarFile.exists()) --> Line_49 $$ jarFile.delete() [CD]
Line_16 $$ File jarFile = new File(installDirName, fileName) --> Line_49 $$ jarFile.delete() [FD]
Line_41 $$ if (isDirty) --> Line_51 $$ downloadJar(downloadURL, jarFile, pl) [CD]
Line_15 $$ URL downloadURL = new URL(url + fileName) --> Line_51 $$ downloadJar(downloadURL, jarFile, pl) [FD]
Line_16 $$ File jarFile = new File(installDirName, fileName) --> Line_51 $$ downloadJar(downloadURL, jarFile, pl) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_51 $$ downloadJar(downloadURL, jarFile, pl) [FD]
Line_41 $$ if (isDirty) --> Line_52 $$ indexFile = new File(installDir, indexFileName) [CD]
Line_17 $$ File indexFile = null --> Line_52 $$ indexFile = new File(installDir, indexFileName) [FD]
Line_31 $$ indexFile = new File(installDir, indexFileName) --> Line_52 $$ indexFile = new File(installDir, indexFileName) [FD]
Line_47 $$ indexFile = new File(installDirName, indexFileName) --> Line_52 $$ indexFile = new File(installDir, indexFileName) [FD]
Line_41 $$ if (isDirty) --> Line_53 $$ Log.log("writing timestamp to index file") [CD]
Line_41 $$ if (isDirty) --> Line_54 $$ writeTimeStamp(indexFile, urlTimeStamp) [CD]
Line_17 $$ File indexFile = null --> Line_54 $$ writeTimeStamp(indexFile, urlTimeStamp) [FD]
Line_31 $$ indexFile = new File(installDir, indexFileName) --> Line_54 $$ writeTimeStamp(indexFile, urlTimeStamp) [FD]
Line_47 $$ indexFile = new File(installDirName, indexFileName) --> Line_54 $$ writeTimeStamp(indexFile, urlTimeStamp) [FD]
Line_52 $$ indexFile = new File(installDir, indexFileName) --> Line_54 $$ writeTimeStamp(indexFile, urlTimeStamp) [FD]
Line_18 $$ long urlTimeStamp = downloadURL.openConnection().getLastModified() --> Line_54 $$ writeTimeStamp(indexFile, urlTimeStamp) [FD]
Line_2 $$ public void loadJar(final String extName, final String url, final String fileName, final IProgressListener pl) throws Exception --> Line_56 $$ addJar(jarFile) [CD]
Line_16 $$ File jarFile = new File(installDirName, fileName) --> Line_56 $$ addJar(jarFile) [FD]
