Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_3 $$ Log.d(TAG, String.format("started request(remote=%s)", remoteUrl)) [CD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_3 $$ Log.d(TAG, String.format("started request(remote=%s)", remoteUrl)) [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_4 $$ Process.setThreadPriority(Process.THREAD_PRIORITY_LOWEST) [CD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_5 $$ byte[] buffer = new byte[1024] [CD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_6 $$ URL url = new URL(remoteUrl) [CD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [CD]
Line_6 $$ URL url = new URL(remoteUrl) --> Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_8 $$ connection.setAllowUserInteraction(false) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_8 $$ connection.setAllowUserInteraction(false) [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_9 $$ connection.setRequestProperty("Viewer-Only-Client", "1") [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_9 $$ connection.setRequestProperty("Viewer-Only-Client", "1") [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_10 $$ connection.setRequestProperty("Client-Daap-Version", "3.10") [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_10 $$ connection.setRequestProperty("Client-Daap-Version", "3.10") [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_11 $$ connection.setRequestProperty("Accept-Encoding", "gzip, deflate") [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_11 $$ connection.setRequestProperty("Accept-Encoding", "gzip, deflate") [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_12 $$ if (!keepalive) [CD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_12 $$ if (!keepalive) [FD]
Line_12 $$ if (!keepalive) --> Line_13 $$ connection.setConnectTimeout(1200000) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_13 $$ connection.setConnectTimeout(1200000) [FD]
Line_12 $$ if (!keepalive) --> Line_14 $$ connection.setReadTimeout(1200000) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_14 $$ connection.setReadTimeout(1200000) [FD]
Line_12 $$ if (!keepalive) --> Line_16 $$ connection.setReadTimeout(0) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_16 $$ connection.setReadTimeout(0) [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_18 $$ connection.connect() [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_18 $$ connection.connect() [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_19 $$ throw new RequestException("HTTP Error Response Code: " + connection.getResponseCode(), connection.getResponseCode()) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_19 $$ throw new RequestException("HTTP Error Response Code: " + connection.getResponseCode(), connection.getResponseCode()) [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_20 $$ String encoding = connection.getContentEncoding() [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_20 $$ String encoding = connection.getContentEncoding() [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_21 $$ InputStream inputStream = null [CD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_22 $$ if (encoding != null && encoding.equalsIgnoreCase("gzip")) [CD]
Line_20 $$ String encoding = connection.getContentEncoding() --> Line_22 $$ if (encoding != null && encoding.equalsIgnoreCase("gzip")) [FD]
Line_22 $$ if (encoding != null && encoding.equalsIgnoreCase("gzip")) --> Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) [CD]
Line_21 $$ InputStream inputStream = null --> Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) [FD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) [FD]
Line_22 $$ if (encoding != null && encoding.equalsIgnoreCase("gzip")) --> Line_24 $$ if (encoding != null && encoding.equalsIgnoreCase("deflate")) [CD]
Line_20 $$ String encoding = connection.getContentEncoding() --> Line_24 $$ if (encoding != null && encoding.equalsIgnoreCase("deflate")) [FD]
Line_24 $$ if (encoding != null && encoding.equalsIgnoreCase("deflate")) --> Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) [CD]
Line_21 $$ InputStream inputStream = null --> Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) [FD]
Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) --> Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) [FD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) [FD]
Line_24 $$ if (encoding != null && encoding.equalsIgnoreCase("deflate")) --> Line_27 $$ inputStream = connection.getInputStream() [CD]
Line_21 $$ InputStream inputStream = null --> Line_27 $$ inputStream = connection.getInputStream() [FD]
Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) --> Line_27 $$ inputStream = connection.getInputStream() [FD]
Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) --> Line_27 $$ inputStream = connection.getInputStream() [FD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_27 $$ inputStream = connection.getInputStream() [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_29 $$ ByteArrayOutputStream os = new ByteArrayOutputStream() [CD]
Line_31 $$ int bytesRead --> Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) [FD]
Line_21 $$ InputStream inputStream = null --> Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) [FD]
Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) --> Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) [FD]
Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) --> Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) [FD]
Line_27 $$ inputStream = connection.getInputStream() --> Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) [FD]
Line_5 $$ byte[] buffer = new byte[1024] --> Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) [FD]
Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) --> Line_33 $$ os.write(buffer, 0, bytesRead) [CD]
Line_32 $$ while ((bytesRead = inputStream.read(buffer)) != -1) --> Line_33 $$ os.write(buffer, 0, bytesRead) [FD]
Line_29 $$ ByteArrayOutputStream os = new ByteArrayOutputStream() --> Line_33 $$ os.write(buffer, 0, bytesRead) [FD]
Line_5 $$ byte[] buffer = new byte[1024] --> Line_33 $$ os.write(buffer, 0, bytesRead) [FD]
Line_31 $$ int bytesRead --> Line_33 $$ os.write(buffer, 0, bytesRead) [FD]
Line_29 $$ ByteArrayOutputStream os = new ByteArrayOutputStream() --> Line_36 $$ if (os != null) [FD]
Line_36 $$ if (os != null) --> Line_37 $$ os.flush() [CD]
Line_29 $$ ByteArrayOutputStream os = new ByteArrayOutputStream() --> Line_37 $$ os.flush() [FD]
Line_36 $$ if (os != null) --> Line_38 $$ os.close() [CD]
Line_29 $$ ByteArrayOutputStream os = new ByteArrayOutputStream() --> Line_38 $$ os.close() [FD]
Line_21 $$ InputStream inputStream = null --> Line_40 $$ if (inputStream != null) [FD]
Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) --> Line_40 $$ if (inputStream != null) [FD]
Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) --> Line_40 $$ if (inputStream != null) [FD]
Line_27 $$ inputStream = connection.getInputStream() --> Line_40 $$ if (inputStream != null) [FD]
Line_40 $$ if (inputStream != null) --> Line_41 $$ inputStream.close() [CD]
Line_21 $$ InputStream inputStream = null --> Line_41 $$ inputStream.close() [FD]
Line_23 $$ inputStream = new GZIPInputStream(connection.getInputStream()) --> Line_41 $$ inputStream.close() [FD]
Line_25 $$ inputStream = new InflaterInputStream(connection.getInputStream(), new Inflater(true)) --> Line_41 $$ inputStream.close() [FD]
Line_27 $$ inputStream = connection.getInputStream() --> Line_41 $$ inputStream.close() [FD]
Line_2 $$ public static byte[] request(String remoteUrl, boolean keepalive) throws Exception --> Line_44 $$ return os.toByteArray() [CD]
Line_29 $$ ByteArrayOutputStream os = new ByteArrayOutputStream() --> Line_44 $$ return os.toByteArray() [FD]
