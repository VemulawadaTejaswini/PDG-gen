Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_3 $$ NumberFormat numformat = NumberFormat.getInstance() [CD]
Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_4 $$ if (this.headers.size() != this.types.size()) [CD]
Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_7 $$ DataSet out = null [CD]
Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_8 $$ if (!this.dryrun) [CD]
Line_8 $$ if (!this.dryrun) --> Line_9 $$ out = new DataSet() [CD]
Line_7 $$ DataSet out = null --> Line_9 $$ out = new DataSet() [FD]
Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_11 $$ BufferedReader r = null [CD]
Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_12 $$ StreamTokenizer tokenizer = null [CD]
Line_14 $$ if (this.isURL) --> Line_15 $$ if (this.url2goto == null) [CD]
Line_15 $$ if (this.url2goto == null) --> Line_16 $$ return (null) [CD]
Line_14 $$ if (this.isURL) --> Line_18 $$ DataInputStream in = null [CD]
Line_18 $$ DataInputStream in = null --> Line_20 $$ in = new DataInputStream(this.url2goto.openStream()) [FD]
Line_11 $$ BufferedReader r = null --> Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) [FD]
Line_14 $$ if (this.isURL) --> Line_27 $$ if (this.file == null) [CD]
Line_14 $$ if (this.isURL) --> Line_30 $$ if (!this.file.exists()) [CD]
Line_14 $$ if (this.isURL) --> Line_33 $$ r = new BufferedReader(new FileReader(this.file)) [CD]
Line_11 $$ BufferedReader r = null --> Line_33 $$ r = new BufferedReader(new FileReader(this.file)) [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_33 $$ r = new BufferedReader(new FileReader(this.file)) [FD]
Line_35 $$ if (this.ignorePreHeaderLines > 0) --> Line_36 $$ String strLine [CD]
Line_35 $$ if (this.ignorePreHeaderLines > 0) --> Line_37 $$ int k = 0 [CD]
Line_35 $$ if (this.ignorePreHeaderLines > 0) --> Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [CD]
Line_36 $$ String strLine --> Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_11 $$ BufferedReader r = null --> Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_33 $$ r = new BufferedReader(new FileReader(this.file)) --> Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) --> Line_39 $$ k++ [CD]
Line_37 $$ int k = 0 --> Line_39 $$ k++ [FD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_42 $$ tokenizer = new StreamTokenizer(r) [FD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_43 $$ tokenizer.resetSyntax() [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_43 $$ tokenizer.resetSyntax() [FD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_44 $$ tokenizer.eolIsSignificant(true) [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_44 $$ tokenizer.eolIsSignificant(true) [FD]
Line_37 $$ int k = 0 --> Line_46 $$ for (int k = 0; k < this.types.size(); k++) [FD]
Line_46 $$ for (int k = 0; k < this.types.size(); k++) --> Line_47 $$ Class type = (Class) this.types.get(k) [CD]
Line_46 $$ for (int k = 0; k < this.types.size(); k++) --> Line_47 $$ Class type = (Class) this.types.get(k) [FD]
Line_37 $$ int k = 0 --> Line_47 $$ Class type = (Class) this.types.get(k) [FD]
Line_46 $$ for (int k = 0; k < this.types.size(); k++) --> Line_48 $$ if (Number.class.isAssignableFrom(type)) [CD]
Line_47 $$ Class type = (Class) this.types.get(k) --> Line_48 $$ if (Number.class.isAssignableFrom(type)) [FD]
Line_45 $$ boolean parseNumbers = false --> Line_49 $$ parseNumbers = true [FD]
Line_53 $$ if (parseNumbers) --> Line_54 $$ tokenizer.parseNumbers() [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_54 $$ tokenizer.parseNumbers() [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_54 $$ tokenizer.parseNumbers() [FD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_56 $$ tokenizer.eolIsSignificant(true) [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_56 $$ tokenizer.eolIsSignificant(true) [FD]
Line_57 $$ if (this.delimiter.equals("\\t")) --> Line_58 $$ tokenizer.whitespaceChars('\t', '\t') [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_58 $$ tokenizer.whitespaceChars('\t', '\t') [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_58 $$ tokenizer.whitespaceChars('\t', '\t') [FD]
Line_57 $$ if (this.delimiter.equals("\\t")) --> Line_59 $$ tokenizer.quoteChar('"') [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_59 $$ tokenizer.quoteChar('"') [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_59 $$ tokenizer.quoteChar('"') [FD]
Line_57 $$ if (this.delimiter.equals("\\t")) --> Line_60 $$ tokenizer.whitespaceChars(' ', ' ') [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_60 $$ tokenizer.whitespaceChars(' ', ' ') [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_60 $$ tokenizer.whitespaceChars(' ', ' ') [FD]
Line_57 $$ if (this.delimiter.equals("\\t")) --> Line_61 $$ if (this.delimiter.equals(",")) [CD]
Line_61 $$ if (this.delimiter.equals(",")) --> Line_62 $$ tokenizer.quoteChar('"') [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_62 $$ tokenizer.quoteChar('"') [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_62 $$ tokenizer.quoteChar('"') [FD]
Line_61 $$ if (this.delimiter.equals(",")) --> Line_63 $$ tokenizer.whitespaceChars(',', ',') [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_63 $$ tokenizer.whitespaceChars(',', ',') [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_63 $$ tokenizer.whitespaceChars(',', ',') [FD]
Line_61 $$ if (this.delimiter.equals(",")) --> Line_64 $$ tokenizer.whitespaceChars(' ', ' ') [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_64 $$ tokenizer.whitespaceChars(' ', ' ') [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_64 $$ tokenizer.whitespaceChars(' ', ' ') [FD]
Line_61 $$ if (this.delimiter.equals(",")) --> Line_66 $$ if (this.delimiter.length() > 1) [CD]
Line_61 $$ if (this.delimiter.equals(",")) --> Line_69 $$ if (this.delimiter.length() > 0) [CD]
Line_69 $$ if (this.delimiter.length() > 0) --> Line_70 $$ tokenizer.whitespaceChars(this.delimiter.charAt(0), this.delimiter.charAt(0)) [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_70 $$ tokenizer.whitespaceChars(this.delimiter.charAt(0), this.delimiter.charAt(0)) [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_70 $$ tokenizer.whitespaceChars(this.delimiter.charAt(0), this.delimiter.charAt(0)) [FD]
Line_69 $$ if (this.delimiter.length() > 0) --> Line_72 $$ tokenizer.wordChars(Character.MIN_VALUE, Character.MAX_VALUE) [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_72 $$ tokenizer.wordChars(Character.MIN_VALUE, Character.MAX_VALUE) [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_72 $$ tokenizer.wordChars(Character.MIN_VALUE, Character.MAX_VALUE) [FD]
Line_69 $$ if (this.delimiter.length() > 0) --> Line_73 $$ tokenizer.eolIsSignificant(true) [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_73 $$ tokenizer.eolIsSignificant(true) [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_73 $$ tokenizer.eolIsSignificant(true) [FD]
Line_69 $$ if (this.delimiter.length() > 0) --> Line_74 $$ tokenizer.ordinaryChar('\n') [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_74 $$ tokenizer.ordinaryChar('\n') [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_74 $$ tokenizer.ordinaryChar('\n') [FD]
Line_81 $$ if (this.headers.size() > 0) --> Line_82 $$ readingHeaders = false [CD]
Line_77 $$ boolean readingHeaders = true --> Line_82 $$ readingHeaders = false [FD]
Line_81 $$ if (this.headers.size() > 0) --> Line_83 $$ readingInitialValues = true [CD]
Line_78 $$ boolean readingInitialValues = false --> Line_83 $$ readingInitialValues = true [FD]
Line_85 $$ if (this.types.size() > 0) --> Line_86 $$ readingInitialValues = false [CD]
Line_78 $$ boolean readingInitialValues = false --> Line_86 $$ readingInitialValues = false [FD]
Line_83 $$ readingInitialValues = true --> Line_86 $$ readingInitialValues = false [FD]
Line_85 $$ if (this.types.size() > 0) --> Line_87 $$ Class targetclass [CD]
Line_85 $$ if (this.types.size() > 0) --> Line_88 $$ for (int j = 0; j < this.types.size(); j++) [CD]
Line_88 $$ for (int j = 0; j < this.types.size(); j++) --> Line_89 $$ targetclass = (Class) this.types.get(j) [CD]
Line_88 $$ for (int j = 0; j < this.types.size(); j++) --> Line_89 $$ targetclass = (Class) this.types.get(j) [FD]
Line_85 $$ if (this.types.size() > 0) --> Line_96 $$ readingData = true [CD]
Line_79 $$ boolean readingData = false --> Line_96 $$ readingData = true [FD]
Line_102 $$ while (true) --> Line_103 $$ tokenizer.nextToken() [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_103 $$ tokenizer.nextToken() [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_103 $$ tokenizer.nextToken() [FD]
Line_101 $$ boolean advanceField = true --> Line_107 $$ advanceField = true [FD]
Line_111 $$ if (readingHeaders) --> Line_112 $$ this.headers.add(tokenizer.sval) [CD]
Line_111 $$ if (readingHeaders) --> Line_114 $$ if (readingInitialValues) [CD]
Line_114 $$ if (readingInitialValues) --> Line_115 $$ this.types.add(String.class) [CD]
Line_111 $$ if (readingHeaders) --> Line_117 $$ if (!this.dryrun) [CD]
Line_117 $$ if (!this.dryrun) --> Line_118 $$ if (out.getColumnCount() <= currentColumn) [CD]
Line_98 $$ int currentColumn = 0 --> Line_118 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_7 $$ DataSet out = null --> Line_118 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_9 $$ out = new DataSet() --> Line_118 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_118 $$ if (out.getColumnCount() <= currentColumn) --> Line_119 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [CD]
Line_7 $$ DataSet out = null --> Line_119 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_9 $$ out = new DataSet() --> Line_119 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_98 $$ int currentColumn = 0 --> Line_119 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_98 $$ int currentColumn = 0 --> Line_124 $$ if (currentColumn < this.constructors.size()) [FD]
Line_124 $$ if (currentColumn < this.constructors.size()) --> Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) [CD]
Line_123 $$ Constructor construct --> Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_124 $$ if (currentColumn < this.constructors.size()) --> Line_127 $$ Class targetclass = (Class) this.types.get(currentColumn) [CD]
Line_98 $$ int currentColumn = 0 --> Line_127 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_124 $$ if (currentColumn < this.constructors.size()) --> Line_128 $$ construct = targetclass.getConstructor(String.class) [CD]
Line_123 $$ Constructor construct --> Line_128 $$ construct = targetclass.getConstructor(String.class) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_128 $$ construct = targetclass.getConstructor(String.class) [FD]
Line_124 $$ if (currentColumn < this.constructors.size()) --> Line_129 $$ this.constructors.add(construct) [CD]
Line_123 $$ Constructor construct --> Line_129 $$ this.constructors.add(construct) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_129 $$ this.constructors.add(construct) [FD]
Line_134 $$ if (!this.dryrun) --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [CD]
Line_7 $$ DataSet out = null --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_9 $$ out = new DataSet() --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_99 $$ int currentRow = 0 --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_123 $$ Constructor construct --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_134 $$ if (!this.dryrun) --> Line_136 $$ if (this.findingTargetValue) [CD]
Line_136 $$ if (this.findingTargetValue) --> Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [CD]
Line_123 $$ Constructor construct --> Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_136 $$ if (this.findingTargetValue) --> Line_138 $$ this.valueQueue.push(vvv) [CD]
Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) --> Line_138 $$ this.valueQueue.push(vvv) [FD]
Line_136 $$ if (this.findingTargetValue) --> Line_139 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [CD]
Line_139 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_140 $$ this.targetValue = vvv [CD]
Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) --> Line_140 $$ this.targetValue = vvv [FD]
Line_139 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_141 $$ r.close() [CD]
Line_11 $$ BufferedReader r = null --> Line_141 $$ r.close() [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_141 $$ r.close() [FD]
Line_33 $$ r = new BufferedReader(new FileReader(this.file)) --> Line_141 $$ r.close() [FD]
Line_139 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_142 $$ return (null) [CD]
Line_107 $$ advanceField = true --> Line_162 $$ advanceField = true [FD]
Line_101 $$ boolean advanceField = true --> Line_162 $$ advanceField = true [FD]
Line_163 $$ if (readingHeaders) --> Line_166 $$ if (readingInitialValues) [CD]
Line_166 $$ if (readingInitialValues) --> Line_167 $$ this.types.add(Double.class) [CD]
Line_163 $$ if (readingHeaders) --> Line_169 $$ if (!this.dryrun) [CD]
Line_169 $$ if (!this.dryrun) --> Line_170 $$ if (out.getColumnCount() <= currentColumn) [CD]
Line_98 $$ int currentColumn = 0 --> Line_170 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_7 $$ DataSet out = null --> Line_170 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_9 $$ out = new DataSet() --> Line_170 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_170 $$ if (out.getColumnCount() <= currentColumn) --> Line_171 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [CD]
Line_7 $$ DataSet out = null --> Line_171 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_9 $$ out = new DataSet() --> Line_171 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_98 $$ int currentColumn = 0 --> Line_171 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_98 $$ int currentColumn = 0 --> Line_176 $$ if (currentColumn < this.constructors.size()) [FD]
Line_176 $$ if (currentColumn < this.constructors.size()) --> Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) [CD]
Line_123 $$ Constructor construct --> Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_179 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_176 $$ if (currentColumn < this.constructors.size()) --> Line_180 $$ construct = targetclass.getConstructor(double.class) [CD]
Line_123 $$ Constructor construct --> Line_180 $$ construct = targetclass.getConstructor(double.class) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_180 $$ construct = targetclass.getConstructor(double.class) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_180 $$ construct = targetclass.getConstructor(double.class) [FD]
Line_176 $$ if (currentColumn < this.constructors.size()) --> Line_181 $$ this.constructors.add(construct) [CD]
Line_123 $$ Constructor construct --> Line_181 $$ this.constructors.add(construct) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_181 $$ this.constructors.add(construct) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_181 $$ this.constructors.add(construct) [FD]
Line_183 $$ if (readingScientificNotation) --> Line_184 $$ Double val = this.scientificNumber [CD]
Line_183 $$ if (readingScientificNotation) --> Line_185 $$ if (!this.dryrun) [CD]
Line_7 $$ DataSet out = null --> Line_187 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn) [FD]
Line_9 $$ out = new DataSet() --> Line_187 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn) [FD]
Line_99 $$ int currentRow = 0 --> Line_187 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_187 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn) [FD]
Line_184 $$ Double val = this.scientificNumber --> Line_187 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn) [FD]
Line_123 $$ Constructor construct --> Line_189 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_189 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_189 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_185 $$ if (!this.dryrun) --> Line_191 $$ if (this.findingTargetValue) [CD]
Line_191 $$ if (this.findingTargetValue) --> Line_192 $$ Double NVAL = new Double(tokenizer.nval) [CD]
Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) --> Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) [FD]
Line_192 $$ Double NVAL = new Double(tokenizer.nval) --> Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) [FD]
Line_191 $$ if (this.findingTargetValue) --> Line_199 $$ tokenizer.nextToken() [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_199 $$ tokenizer.nextToken() [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_199 $$ tokenizer.nextToken() [FD]
Line_191 $$ if (this.findingTargetValue) --> Line_200 $$ if (tokenizer.ttype != 'e') [CD]
Line_200 $$ if (tokenizer.ttype != 'e') --> Line_201 $$ this.valueQueue.push(vvv) [CD]
Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) --> Line_201 $$ this.valueQueue.push(vvv) [FD]
Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) --> Line_201 $$ this.valueQueue.push(vvv) [FD]
Line_200 $$ if (tokenizer.ttype != 'e') --> Line_202 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [CD]
Line_202 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_203 $$ this.targetValue = vvv [CD]
Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) --> Line_203 $$ this.targetValue = vvv [FD]
Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) --> Line_203 $$ this.targetValue = vvv [FD]
Line_202 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_204 $$ r.close() [CD]
Line_11 $$ BufferedReader r = null --> Line_204 $$ r.close() [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_204 $$ r.close() [FD]
Line_33 $$ r = new BufferedReader(new FileReader(this.file)) --> Line_204 $$ r.close() [FD]
Line_202 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_205 $$ return (null) [CD]
Line_200 $$ if (tokenizer.ttype != 'e') --> Line_207 $$ currentColumn++ [CD]
Line_98 $$ int currentColumn = 0 --> Line_207 $$ currentColumn++ [FD]
Line_200 $$ if (tokenizer.ttype != 'e') --> Line_209 $$ tokenizer.pushBack() [CD]
Line_12 $$ StreamTokenizer tokenizer = null --> Line_209 $$ tokenizer.pushBack() [FD]
Line_42 $$ tokenizer = new StreamTokenizer(r) --> Line_209 $$ tokenizer.pushBack() [FD]
Line_183 $$ if (readingScientificNotation) --> Line_212 $$ readingScientificNotation = false [CD]
Line_80 $$ boolean readingScientificNotation = false --> Line_212 $$ readingScientificNotation = false [FD]
Line_216 $$ if (!this.dryrun) --> Line_217 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn) [CD]
Line_7 $$ DataSet out = null --> Line_217 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn) [FD]
Line_9 $$ out = new DataSet() --> Line_217 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn) [FD]
Line_99 $$ int currentRow = 0 --> Line_217 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_217 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn) [FD]
Line_216 $$ if (!this.dryrun) --> Line_218 $$ if (this.findingTargetValue) [CD]
Line_218 $$ if (this.findingTargetValue) --> Line_219 $$ this.valueQueue.push(this.scientificNumber) [CD]
Line_218 $$ if (this.findingTargetValue) --> Line_220 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [CD]
Line_220 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_221 $$ this.targetValue = this.scientificNumber [CD]
Line_220 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_222 $$ r.close() [CD]
Line_11 $$ BufferedReader r = null --> Line_222 $$ r.close() [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_222 $$ r.close() [FD]
Line_33 $$ r = new BufferedReader(new FileReader(this.file)) --> Line_222 $$ r.close() [FD]
Line_220 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_223 $$ return (null) [CD]
Line_123 $$ Constructor construct --> Line_227 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_227 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_227 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_238 $$ if (readingHeaders) --> Line_239 $$ readingHeaders = false [CD]
Line_77 $$ boolean readingHeaders = true --> Line_239 $$ readingHeaders = false [FD]
Line_82 $$ readingHeaders = false --> Line_239 $$ readingHeaders = false [FD]
Line_238 $$ if (readingHeaders) --> Line_240 $$ readingInitialValues = true [CD]
Line_78 $$ boolean readingInitialValues = false --> Line_240 $$ readingInitialValues = true [FD]
Line_83 $$ readingInitialValues = true --> Line_240 $$ readingInitialValues = true [FD]
Line_86 $$ readingInitialValues = false --> Line_240 $$ readingInitialValues = true [FD]
Line_238 $$ if (readingHeaders) --> Line_242 $$ if (readingInitialValues) [CD]
Line_242 $$ if (readingInitialValues) --> Line_243 $$ readingInitialValues = false [CD]
Line_240 $$ readingInitialValues = true --> Line_243 $$ readingInitialValues = false [FD]
Line_78 $$ boolean readingInitialValues = false --> Line_243 $$ readingInitialValues = false [FD]
Line_83 $$ readingInitialValues = true --> Line_243 $$ readingInitialValues = false [FD]
Line_86 $$ readingInitialValues = false --> Line_243 $$ readingInitialValues = false [FD]
Line_242 $$ if (readingInitialValues) --> Line_244 $$ readingData = true [CD]
Line_79 $$ boolean readingData = false --> Line_244 $$ readingData = true [FD]
Line_96 $$ readingData = true --> Line_244 $$ readingData = true [FD]
Line_247 $$ if (readingData) --> Line_248 $$ if (valueQueue.getUpperIndex() < currentRow) [CD]
Line_99 $$ int currentRow = 0 --> Line_248 $$ if (valueQueue.getUpperIndex() < currentRow) [FD]
Line_248 $$ if (valueQueue.getUpperIndex() < currentRow) --> Line_249 $$ valueQueue.push("") [CD]
Line_247 $$ if (readingData) --> Line_251 $$ currentRow++ [CD]
Line_99 $$ int currentRow = 0 --> Line_251 $$ currentRow++ [FD]
Line_263 $$ if (readingData) --> Line_264 $$ readingData = false [CD]
Line_244 $$ readingData = true --> Line_264 $$ readingData = false [FD]
Line_79 $$ boolean readingData = false --> Line_264 $$ readingData = false [FD]
Line_96 $$ readingData = true --> Line_264 $$ readingData = false [FD]
Line_270 $$ if (tokenizer.ttype == '"') --> Line_271 $$ advanceField = true [CD]
Line_107 $$ advanceField = true --> Line_271 $$ advanceField = true [FD]
Line_162 $$ advanceField = true --> Line_271 $$ advanceField = true [FD]
Line_101 $$ boolean advanceField = true --> Line_271 $$ advanceField = true [FD]
Line_270 $$ if (tokenizer.ttype == '"') --> Line_272 $$ if (readingHeaders) [CD]
Line_272 $$ if (readingHeaders) --> Line_273 $$ this.headers.add(tokenizer.sval) [CD]
Line_272 $$ if (readingHeaders) --> Line_275 $$ if (readingInitialValues) [CD]
Line_275 $$ if (readingInitialValues) --> Line_276 $$ this.types.add(String.class) [CD]
Line_272 $$ if (readingHeaders) --> Line_278 $$ if (!this.dryrun) [CD]
Line_278 $$ if (!this.dryrun) --> Line_279 $$ if (out.getColumnCount() <= currentColumn) [CD]
Line_98 $$ int currentColumn = 0 --> Line_279 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_7 $$ DataSet out = null --> Line_279 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_9 $$ out = new DataSet() --> Line_279 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_279 $$ if (out.getColumnCount() <= currentColumn) --> Line_280 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [CD]
Line_7 $$ DataSet out = null --> Line_280 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_9 $$ out = new DataSet() --> Line_280 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_98 $$ int currentColumn = 0 --> Line_280 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_98 $$ int currentColumn = 0 --> Line_285 $$ if (currentColumn < this.constructors.size()) [FD]
Line_285 $$ if (currentColumn < this.constructors.size()) --> Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) [CD]
Line_123 $$ Constructor construct --> Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_288 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_285 $$ if (currentColumn < this.constructors.size()) --> Line_289 $$ construct = targetclass.getConstructor(String.class) [CD]
Line_123 $$ Constructor construct --> Line_289 $$ construct = targetclass.getConstructor(String.class) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_289 $$ construct = targetclass.getConstructor(String.class) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_289 $$ construct = targetclass.getConstructor(String.class) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_289 $$ construct = targetclass.getConstructor(String.class) [FD]
Line_285 $$ if (currentColumn < this.constructors.size()) --> Line_290 $$ this.constructors.add(construct) [CD]
Line_123 $$ Constructor construct --> Line_290 $$ this.constructors.add(construct) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_290 $$ this.constructors.add(construct) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_290 $$ this.constructors.add(construct) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_290 $$ this.constructors.add(construct) [FD]
Line_295 $$ if (!this.dryrun) --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [CD]
Line_7 $$ DataSet out = null --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_9 $$ out = new DataSet() --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_99 $$ int currentRow = 0 --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_98 $$ int currentColumn = 0 --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_123 $$ Constructor construct --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_295 $$ if (!this.dryrun) --> Line_297 $$ if (this.findingTargetValue) [CD]
Line_297 $$ if (this.findingTargetValue) --> Line_298 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [CD]
Line_123 $$ Constructor construct --> Line_298 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_298 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_298 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_298 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_297 $$ if (this.findingTargetValue) --> Line_299 $$ this.valueQueue.push(vvv) [CD]
Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) --> Line_299 $$ this.valueQueue.push(vvv) [FD]
Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) --> Line_299 $$ this.valueQueue.push(vvv) [FD]
Line_297 $$ if (this.findingTargetValue) --> Line_300 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) [CD]
Line_300 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_301 $$ this.targetValue = vvv [CD]
Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) --> Line_301 $$ this.targetValue = vvv [FD]
Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) --> Line_301 $$ this.targetValue = vvv [FD]
Line_300 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_302 $$ r.close() [CD]
Line_11 $$ BufferedReader r = null --> Line_302 $$ r.close() [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_302 $$ r.close() [FD]
Line_33 $$ r = new BufferedReader(new FileReader(this.file)) --> Line_302 $$ r.close() [FD]
Line_300 $$ if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) --> Line_303 $$ return (null) [CD]
Line_270 $$ if (tokenizer.ttype == '"') --> Line_319 $$ if (tokenizer.ttype == 'e') [CD]
Line_98 $$ int currentColumn = 0 --> Line_320 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_319 $$ if (tokenizer.ttype == 'e') --> Line_321 $$ if (Number.class.isAssignableFrom(targetclass)) [CD]
Line_98 $$ int currentColumn = 0 --> Line_322 $$ currentColumn-- [FD]
Line_212 $$ readingScientificNotation = false --> Line_323 $$ readingScientificNotation = true [FD]
Line_80 $$ boolean readingScientificNotation = false --> Line_323 $$ readingScientificNotation = true [FD]
Line_107 $$ advanceField = true --> Line_324 $$ advanceField = false [FD]
Line_162 $$ advanceField = true --> Line_324 $$ advanceField = false [FD]
Line_271 $$ advanceField = true --> Line_324 $$ advanceField = false [FD]
Line_101 $$ boolean advanceField = true --> Line_324 $$ advanceField = false [FD]
Line_319 $$ if (tokenizer.ttype == 'e') --> Line_327 $$ advanceField = false [CD]
Line_107 $$ advanceField = true --> Line_327 $$ advanceField = false [FD]
Line_162 $$ advanceField = true --> Line_327 $$ advanceField = false [FD]
Line_271 $$ advanceField = true --> Line_327 $$ advanceField = false [FD]
Line_324 $$ advanceField = false --> Line_327 $$ advanceField = false [FD]
Line_101 $$ boolean advanceField = true --> Line_327 $$ advanceField = false [FD]
Line_102 $$ while (true) --> Line_332 $$ if (tokenizer.ttype == StreamTokenizer.TT_EOF) [CD]
Line_332 $$ if (tokenizer.ttype == StreamTokenizer.TT_EOF) --> Line_333 $$ advanceField = false [CD]
Line_107 $$ advanceField = true --> Line_333 $$ advanceField = false [FD]
Line_162 $$ advanceField = true --> Line_333 $$ advanceField = false [FD]
Line_271 $$ advanceField = true --> Line_333 $$ advanceField = false [FD]
Line_324 $$ advanceField = false --> Line_333 $$ advanceField = false [FD]
Line_327 $$ advanceField = false --> Line_333 $$ advanceField = false [FD]
Line_101 $$ boolean advanceField = true --> Line_333 $$ advanceField = false [FD]
Line_102 $$ while (true) --> Line_336 $$ if (advanceField) [CD]
Line_336 $$ if (advanceField) --> Line_337 $$ currentColumn++ [CD]
Line_98 $$ int currentColumn = 0 --> Line_337 $$ currentColumn++ [FD]
Line_336 $$ if (advanceField) --> Line_338 $$ if (!readingHeaders) [CD]
Line_239 $$ readingHeaders = false --> Line_338 $$ if (!readingHeaders) [FD]
Line_77 $$ boolean readingHeaders = true --> Line_338 $$ if (!readingHeaders) [FD]
Line_82 $$ readingHeaders = false --> Line_338 $$ if (!readingHeaders) [FD]
Line_338 $$ if (!readingHeaders) --> Line_339 $$ if (currentColumn >= this.headers.size()) [CD]
Line_98 $$ int currentColumn = 0 --> Line_339 $$ if (currentColumn >= this.headers.size()) [FD]
Line_339 $$ if (currentColumn >= this.headers.size()) --> Line_340 $$ currentColumn = 0 [CD]
Line_98 $$ int currentColumn = 0 --> Line_340 $$ currentColumn = 0 [FD]
Line_239 $$ readingHeaders = false --> Line_345 $$ if (!readingHeaders) [FD]
Line_77 $$ boolean readingHeaders = true --> Line_345 $$ if (!readingHeaders) [FD]
Line_82 $$ readingHeaders = false --> Line_345 $$ if (!readingHeaders) [FD]
Line_345 $$ if (!readingHeaders) --> Line_346 $$ this.rowcount = currentRow [CD]
Line_99 $$ int currentRow = 0 --> Line_346 $$ this.rowcount = currentRow [FD]
Line_345 $$ if (!readingHeaders) --> Line_348 $$ this.rowcount = 0 [CD]
Line_345 $$ if (!readingHeaders) --> Line_349 $$ readingHeaders = false [CD]
Line_239 $$ readingHeaders = false --> Line_349 $$ readingHeaders = false [FD]
Line_77 $$ boolean readingHeaders = true --> Line_349 $$ readingHeaders = false [FD]
Line_82 $$ readingHeaders = false --> Line_349 $$ readingHeaders = false [FD]
Line_345 $$ if (!readingHeaders) --> Line_350 $$ if (this.ignorePostHeaderLines > 0) [CD]
Line_350 $$ if (this.ignorePostHeaderLines > 0) --> Line_353 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [CD]
Line_38 $$ while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) --> Line_353 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_36 $$ String strLine --> Line_353 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_11 $$ BufferedReader r = null --> Line_353 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_353 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_33 $$ r = new BufferedReader(new FileReader(this.file)) --> Line_353 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) [FD]
Line_353 $$ while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) --> Line_354 $$ k++ [CD]
Line_46 $$ for (int k = 0; k < this.types.size(); k++) --> Line_354 $$ k++ [FD]
Line_37 $$ int k = 0 --> Line_354 $$ k++ [FD]
Line_11 $$ BufferedReader r = null --> Line_358 $$ r.close() [FD]
Line_22 $$ r = new BufferedReader(new InputStreamReader(in)) --> Line_358 $$ r.close() [FD]
Line_33 $$ r = new BufferedReader(new FileReader(this.file)) --> Line_358 $$ r.close() [FD]
Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_362 $$ if (!this.dryrun) [CD]
Line_362 $$ if (!this.dryrun) --> Line_363 $$ for (int j = 0; j < this.headers.size(); j++) [CD]
Line_88 $$ for (int j = 0; j < this.types.size(); j++) --> Line_363 $$ for (int j = 0; j < this.headers.size(); j++) [FD]
Line_363 $$ for (int j = 0; j < this.headers.size(); j++) --> Line_364 $$ out.setColumnName(j, (String) this.headers.get(j)) [CD]
Line_363 $$ for (int j = 0; j < this.headers.size(); j++) --> Line_364 $$ out.setColumnName(j, (String) this.headers.get(j)) [FD]
Line_7 $$ DataSet out = null --> Line_364 $$ out.setColumnName(j, (String) this.headers.get(j)) [FD]
Line_9 $$ out = new DataSet() --> Line_364 $$ out.setColumnName(j, (String) this.headers.get(j)) [FD]
Line_88 $$ for (int j = 0; j < this.types.size(); j++) --> Line_364 $$ out.setColumnName(j, (String) this.headers.get(j)) [FD]
Line_2 $$ public DataSet newparse() throws SnifflibDatatypeException --> Line_367 $$ return (out) [CD]
Line_340 $$ currentColumn = 0 --> Line_118 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_119 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_340 $$ currentColumn = 0 --> Line_124 $$ if (currentColumn < this.constructors.size()) [FD]
Line_340 $$ currentColumn = 0 --> Line_125 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_127 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_129 $$ this.constructors.add(construct) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_129 $$ this.constructors.add(construct) [FD]
Line_340 $$ currentColumn = 0 --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_135 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_137 $$ Object vvv = construct.newInstance((String) tokenizer.sval) [FD]
Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) --> Line_138 $$ this.valueQueue.push(vvv) [FD]
Line_195 $$ vvv = Double.parseDouble(val + "E" + NVAL.intValue()) --> Line_140 $$ this.targetValue = vvv [FD]
Line_340 $$ currentColumn = 0 --> Line_170 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_171 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_340 $$ currentColumn = 0 --> Line_176 $$ if (currentColumn < this.constructors.size()) [FD]
Line_340 $$ currentColumn = 0 --> Line_177 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_179 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_181 $$ this.constructors.add(construct) [FD]
Line_340 $$ currentColumn = 0 --> Line_187 $$ out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_189 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_340 $$ currentColumn = 0 --> Line_207 $$ currentColumn++ [FD]
Line_340 $$ currentColumn = 0 --> Line_217 $$ out.setValueAt(this.scientificNumber, currentRow, currentColumn) [FD]
Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) --> Line_227 $$ throw new SnifflibDatatypeException("Problem constructing " + construct.getDeclaringClass() + "at row " + currentRow + " column " + currentColumn + ".", err) [FD]
Line_340 $$ currentColumn = 0 --> Line_279 $$ if (out.getColumnCount() <= currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_280 $$ out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn)) [FD]
Line_340 $$ currentColumn = 0 --> Line_285 $$ if (currentColumn < this.constructors.size()) [FD]
Line_340 $$ currentColumn = 0 --> Line_286 $$ construct = (Constructor) this.constructors.get(currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_288 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_296 $$ out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_320 $$ Class targetclass = (Class) this.types.get(currentColumn) [FD]
Line_340 $$ currentColumn = 0 --> Line_322 $$ currentColumn-- [FD]
Line_340 $$ currentColumn = 0 --> Line_337 $$ currentColumn++ [FD]
Line_340 $$ currentColumn = 0 --> Line_339 $$ if (currentColumn >= this.headers.size()) [FD]
