Line_2 $$ public void copyContent(long mailId1, long mailId2) throws Exception --> Line_3 $$ File file1 = new File(this.getMailDir(mailId1) + "/") [CD]
Line_2 $$ public void copyContent(long mailId1, long mailId2) throws Exception --> Line_3 $$ File file1 = new File(this.getMailDir(mailId1) + "/") [FD]
Line_2 $$ public void copyContent(long mailId1, long mailId2) throws Exception --> Line_4 $$ File file2 = new File(this.getMailDir(mailId2) + "/") [CD]
Line_2 $$ public void copyContent(long mailId1, long mailId2) throws Exception --> Line_4 $$ File file2 = new File(this.getMailDir(mailId2) + "/") [FD]
Line_2 $$ public void copyContent(long mailId1, long mailId2) throws Exception --> Line_5 $$ this.recursiveDir(file2) [CD]
Line_4 $$ File file2 = new File(this.getMailDir(mailId2) + "/") --> Line_5 $$ this.recursiveDir(file2) [FD]
Line_2 $$ public void copyContent(long mailId1, long mailId2) throws Exception --> Line_6 $$ if (file1.isDirectory()) [CD]
Line_3 $$ File file1 = new File(this.getMailDir(mailId1) + "/") --> Line_6 $$ if (file1.isDirectory()) [FD]
Line_6 $$ if (file1.isDirectory()) --> Line_7 $$ File[] files = file1.listFiles() [CD]
Line_3 $$ File file1 = new File(this.getMailDir(mailId1) + "/") --> Line_7 $$ File[] files = file1.listFiles() [FD]
Line_6 $$ if (file1.isDirectory()) --> Line_8 $$ if (files != null) [CD]
Line_7 $$ File[] files = file1.listFiles() --> Line_8 $$ if (files != null) [FD]
Line_8 $$ if (files != null) --> Line_9 $$ for (int i = 0; i < files.length; i++) [CD]
Line_9 $$ for (int i = 0; i < files.length; i++) --> Line_10 $$ if (files[i].isFile()) [CD]
Line_10 $$ if (files[i].isFile()) --> Line_11 $$ File file2s = new File(file2.getAbsolutePath() + "/" + files[i].getName()) [CD]
Line_4 $$ File file2 = new File(this.getMailDir(mailId2) + "/") --> Line_11 $$ File file2s = new File(file2.getAbsolutePath() + "/" + files[i].getName()) [FD]
Line_10 $$ if (files[i].isFile()) --> Line_12 $$ if (!file2s.exists()) [CD]
Line_11 $$ File file2s = new File(file2.getAbsolutePath() + "/" + files[i].getName()) --> Line_12 $$ if (!file2s.exists()) [FD]
Line_12 $$ if (!file2s.exists()) --> Line_13 $$ file2s.createNewFile() [CD]
Line_11 $$ File file2s = new File(file2.getAbsolutePath() + "/" + files[i].getName()) --> Line_13 $$ file2s.createNewFile() [FD]
Line_12 $$ if (!file2s.exists()) --> Line_14 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s)) [CD]
Line_12 $$ if (!file2s.exists()) --> Line_15 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i])) [CD]
Line_12 $$ if (!file2s.exists()) --> Line_16 $$ int read [CD]
Line_12 $$ if (!file2s.exists()) --> Line_17 $$ while ((read = in.read()) != -1) [CD]
Line_16 $$ int read --> Line_17 $$ while ((read = in.read()) != -1) [FD]
Line_15 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i])) --> Line_17 $$ while ((read = in.read()) != -1) [FD]
Line_17 $$ while ((read = in.read()) != -1) --> Line_18 $$ out.write(read) [CD]
Line_17 $$ while ((read = in.read()) != -1) --> Line_18 $$ out.write(read) [FD]
Line_14 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s)) --> Line_18 $$ out.write(read) [FD]
Line_16 $$ int read --> Line_18 $$ out.write(read) [FD]
Line_12 $$ if (!file2s.exists()) --> Line_20 $$ out.flush() [CD]
Line_14 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s)) --> Line_20 $$ out.flush() [FD]
Line_12 $$ if (!file2s.exists()) --> Line_21 $$ if (in != null) [CD]
Line_15 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i])) --> Line_21 $$ if (in != null) [FD]
Line_15 $$ BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i])) --> Line_23 $$ in.close() [FD]
Line_12 $$ if (!file2s.exists()) --> Line_28 $$ if (out != null) [CD]
Line_14 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s)) --> Line_28 $$ if (out != null) [FD]
Line_14 $$ BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s)) --> Line_30 $$ out.close() [FD]
