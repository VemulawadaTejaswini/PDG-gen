Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_4 $$ return super.select(keyInfo, purpose, method, context) [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_8 $$ LOG.debug("signature resource name: " + this.signatureResourceName) [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_9 $$ String signatureSegment = this.signatureResourceName.substring(0, this.signatureResourceName.lastIndexOf("/")) [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_10 $$ LOG.debug("signature segment: " + signatureSegment) [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_11 $$ String signatureBase = this.signatureResourceName.substring(this.signatureResourceName.lastIndexOf("/") + 1) [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_12 $$ LOG.debug("signature base: " + signatureBase) [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_13 $$ String signatureRelationshipResourceName = signatureSegment + "/_rels/" + signatureBase + ".rels" [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_14 $$ LOG.debug("signature relationship resource name: " + signatureRelationshipResourceName) [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_15 $$ ZipArchiveInputStream zipInputStream [CD]
Line_15 $$ ZipArchiveInputStream zipInputStream --> Line_17 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_21 $$ ZipArchiveEntry zipEntry [CD]
Line_15 $$ ZipArchiveInputStream zipInputStream --> Line_23 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_17 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) --> Line_23 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_13 $$ String signatureRelationshipResourceName = signatureSegment + "/_rels/" + signatureBase + ".rels" --> Line_24 $$ if (signatureRelationshipResourceName.equals(zipEntry.getName())) [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_31 $$ if (null == zipEntry) [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_35 $$ LOG.debug("signature relationship part found") [CD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_36 $$ JAXBElement<CTRelationships> signatureRelationshipsElement [CD]
Line_36 $$ JAXBElement<CTRelationships> signatureRelationshipsElement --> Line_38 $$ signatureRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [FD]
Line_15 $$ ZipArchiveInputStream zipInputStream --> Line_38 $$ signatureRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [FD]
Line_17 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) --> Line_38 $$ signatureRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_42 $$ CTRelationships signatureRelationships = signatureRelationshipsElement.getValue() [CD]
Line_36 $$ JAXBElement<CTRelationships> signatureRelationshipsElement --> Line_42 $$ CTRelationships signatureRelationships = signatureRelationshipsElement.getValue() [FD]
Line_38 $$ signatureRelationshipsElement = (JAXBElement<CTRelationships>) this.relationshipsUnmarshaller.unmarshal(zipInputStream) --> Line_42 $$ CTRelationships signatureRelationships = signatureRelationshipsElement.getValue() [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_43 $$ List<CTRelationship> signatureRelationshipList = signatureRelationships.getRelationship() [CD]
Line_42 $$ CTRelationships signatureRelationships = signatureRelationshipsElement.getValue() --> Line_43 $$ List<CTRelationship> signatureRelationshipList = signatureRelationships.getRelationship() [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_44 $$ List<String> certificateResourceNames = new LinkedList<String>() [CD]
Line_45 $$ for (CTRelationship signatureRelationship : signatureRelationshipList) --> Line_46 $$ if (DIGITAL_SIGNATURE_CERTIFICATE_REL_TYPE.equals(signatureRelationship.getType())) [FD]
Line_46 $$ if (DIGITAL_SIGNATURE_CERTIFICATE_REL_TYPE.equals(signatureRelationship.getType())) --> Line_47 $$ String certificateResourceName = signatureRelationship.getTarget().substring(1) [CD]
Line_45 $$ for (CTRelationship signatureRelationship : signatureRelationshipList) --> Line_47 $$ String certificateResourceName = signatureRelationship.getTarget().substring(1) [FD]
Line_46 $$ if (DIGITAL_SIGNATURE_CERTIFICATE_REL_TYPE.equals(signatureRelationship.getType())) --> Line_48 $$ certificateResourceNames.add(certificateResourceName) [CD]
Line_44 $$ List<String> certificateResourceNames = new LinkedList<String>() --> Line_48 $$ certificateResourceNames.add(certificateResourceName) [FD]
Line_47 $$ String certificateResourceName = signatureRelationship.getTarget().substring(1) --> Line_48 $$ certificateResourceNames.add(certificateResourceName) [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_51 $$ X509Certificate endEntityCertificate = null [CD]
Line_15 $$ ZipArchiveInputStream zipInputStream --> Line_54 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) [FD]
Line_17 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) --> Line_54 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) [FD]
Line_15 $$ ZipArchiveInputStream zipInputStream --> Line_59 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_17 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) --> Line_59 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_54 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) --> Line_59 $$ while (null != (zipEntry = zipInputStream.getNextZipEntry())) [FD]
Line_47 $$ String certificateResourceName = signatureRelationship.getTarget().substring(1) --> Line_60 $$ if (certificateResourceName.equals(zipEntry.getName())) [FD]
Line_71 $$ X509Certificate certificate --> Line_73 $$ certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream) [FD]
Line_15 $$ ZipArchiveInputStream zipInputStream --> Line_73 $$ certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream) [FD]
Line_17 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) --> Line_73 $$ certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream) [FD]
Line_54 $$ zipInputStream = new ZipArchiveInputStream(this.opcUrl.openStream(), "UTF8", true, true) --> Line_73 $$ certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream) [FD]
Line_71 $$ X509Certificate certificate --> Line_77 $$ LOG.debug("certificate subject: " + certificate.getSubjectX500Principal()) [FD]
Line_73 $$ certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream) --> Line_77 $$ LOG.debug("certificate subject: " + certificate.getSubjectX500Principal()) [FD]
Line_71 $$ X509Certificate certificate --> Line_78 $$ if (-1 != certificate.getBasicConstraints()) [FD]
Line_73 $$ certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream) --> Line_78 $$ if (-1 != certificate.getBasicConstraints()) [FD]
Line_78 $$ if (-1 != certificate.getBasicConstraints()) --> Line_79 $$ LOG.debug("skipping CA certificate") [CD]
Line_51 $$ X509Certificate endEntityCertificate = null --> Line_82 $$ if (null != endEntityCertificate) [FD]
Line_51 $$ X509Certificate endEntityCertificate = null --> Line_85 $$ endEntityCertificate = certificate [FD]
Line_71 $$ X509Certificate certificate --> Line_85 $$ endEntityCertificate = certificate [FD]
Line_73 $$ certificate = (X509Certificate) this.certificateFactory.generateCertificate(zipInputStream) --> Line_85 $$ endEntityCertificate = certificate [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_87 $$ if (null == endEntityCertificate) [CD]
Line_51 $$ X509Certificate endEntityCertificate = null --> Line_87 $$ if (null == endEntityCertificate) [FD]
Line_85 $$ endEntityCertificate = certificate --> Line_87 $$ if (null == endEntityCertificate) [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_90 $$ this.certificate = endEntityCertificate [CD]
Line_51 $$ X509Certificate endEntityCertificate = null --> Line_90 $$ this.certificate = endEntityCertificate [FD]
Line_85 $$ endEntityCertificate = certificate --> Line_90 $$ this.certificate = endEntityCertificate [FD]
Line_2 $$ public KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException --> Line_91 $$ return this [CD]
