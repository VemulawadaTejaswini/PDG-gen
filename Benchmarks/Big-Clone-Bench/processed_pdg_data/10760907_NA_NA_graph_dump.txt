Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_3 $$ ByteArrayInputStream bais = null [CD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_4 $$ FileOutputStream fos = null [CD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_6 $$ if ((files == null) || (files.size() <= 0)) [FD]
Line_6 $$ if ((files == null) || (files.size() <= 0)) --> Line_7 $$ return [CD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_9 $$ if (charset == null) [FD]
Line_9 $$ if (charset == null) --> Line_10 $$ charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName()) [CD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_10 $$ charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName()) [FD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_12 $$ Users user = getUser(hsession, repositoryName) [FD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_13 $$ Identity identity = getDefaultIdentity(hsession, user) [FD]
Line_12 $$ Users user = getUser(hsession, repositoryName) --> Line_13 $$ Identity identity = getDefaultIdentity(hsession, user) [FD]
Line_13 $$ Identity identity = getDefaultIdentity(hsession, user) --> Line_14 $$ InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) [FD]
Line_13 $$ Identity identity = getDefaultIdentity(hsession, user) --> Line_15 $$ InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) [FD]
Line_13 $$ Identity identity = getDefaultIdentity(hsession, user) --> Line_16 $$ InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName()) [FD]
Line_13 $$ Identity identity = getDefaultIdentity(hsession, user) --> Line_17 $$ InternetAddress _to = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) [FD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_18 $$ for (int i = 0; i < files.size(); i++) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() [CD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_20 $$ email.setCharset(charset) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_20 $$ email.setCharset(charset) [FD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_20 $$ email.setCharset(charset) [FD]
Line_10 $$ charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName()) --> Line_20 $$ email.setCharset(charset) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_21 $$ if (_from != null) [CD]
Line_15 $$ InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_21 $$ if (_from != null) [FD]
Line_21 $$ if (_from != null) --> Line_22 $$ email.setFrom(_from.getAddress(), _from.getPersonal()) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_22 $$ email.setFrom(_from.getAddress(), _from.getPersonal()) [FD]
Line_15 $$ InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_22 $$ email.setFrom(_from.getAddress(), _from.getPersonal()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_24 $$ if (_returnPath != null) [CD]
Line_14 $$ InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_24 $$ if (_returnPath != null) [FD]
Line_24 $$ if (_returnPath != null) --> Line_25 $$ email.addHeader("Return-Path", _returnPath.getAddress()) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_25 $$ email.addHeader("Return-Path", _returnPath.getAddress()) [FD]
Line_14 $$ InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_25 $$ email.addHeader("Return-Path", _returnPath.getAddress()) [FD]
Line_24 $$ if (_returnPath != null) --> Line_26 $$ email.addHeader("Errors-To", _returnPath.getAddress()) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_26 $$ email.addHeader("Errors-To", _returnPath.getAddress()) [FD]
Line_14 $$ InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_26 $$ email.addHeader("Errors-To", _returnPath.getAddress()) [FD]
Line_24 $$ if (_returnPath != null) --> Line_27 $$ email.addHeader("X-Errors-To", _returnPath.getAddress()) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_27 $$ email.addHeader("X-Errors-To", _returnPath.getAddress()) [FD]
Line_14 $$ InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_27 $$ email.addHeader("X-Errors-To", _returnPath.getAddress()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_29 $$ if (_replyTo != null) [CD]
Line_16 $$ InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName()) --> Line_29 $$ if (_replyTo != null) [FD]
Line_29 $$ if (_replyTo != null) --> Line_30 $$ email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal()) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_30 $$ email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal()) [FD]
Line_16 $$ InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName()) --> Line_30 $$ email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_32 $$ if (_to != null) [CD]
Line_17 $$ InternetAddress _to = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_32 $$ if (_to != null) [FD]
Line_32 $$ if (_to != null) --> Line_33 $$ email.addTo(_to.getAddress(), _to.getPersonal()) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_33 $$ email.addTo(_to.getAddress(), _to.getPersonal()) [FD]
Line_17 $$ InternetAddress _to = new InternetAddress(identity.getIdeEmail(), identity.getIdeName()) --> Line_33 $$ email.addTo(_to.getAddress(), _to.getPersonal()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_35 $$ MailPartObj obj = (MailPartObj) files.get(i) [CD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_35 $$ MailPartObj obj = (MailPartObj) files.get(i) [FD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_35 $$ MailPartObj obj = (MailPartObj) files.get(i) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_36 $$ email.setSubject("Files-System " + obj.getName()) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_36 $$ email.setSubject("Files-System " + obj.getName()) [FD]
Line_35 $$ MailPartObj obj = (MailPartObj) files.get(i) --> Line_36 $$ email.setSubject("Files-System " + obj.getName()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_37 $$ Date now = new Date() [CD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_38 $$ email.setSentDate(now) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_38 $$ email.setSentDate(now) [FD]
Line_37 $$ Date now = new Date() --> Line_38 $$ email.setSentDate(now) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_39 $$ File dir = new File(System.getProperty("user.home") + File.separator + "tmp") [CD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_40 $$ if (!dir.exists()) [CD]
Line_39 $$ File dir = new File(System.getProperty("user.home") + File.separator + "tmp") --> Line_40 $$ if (!dir.exists()) [FD]
Line_40 $$ if (!dir.exists()) --> Line_41 $$ dir.mkdir() [CD]
Line_39 $$ File dir = new File(System.getProperty("user.home") + File.separator + "tmp") --> Line_41 $$ dir.mkdir() [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_43 $$ File file = new File(dir, obj.getName()) [CD]
Line_35 $$ MailPartObj obj = (MailPartObj) files.get(i) --> Line_43 $$ File file = new File(dir, obj.getName()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_44 $$ bais = new ByteArrayInputStream(obj.getAttachent()) [CD]
Line_3 $$ ByteArrayInputStream bais = null --> Line_44 $$ bais = new ByteArrayInputStream(obj.getAttachent()) [FD]
Line_35 $$ MailPartObj obj = (MailPartObj) files.get(i) --> Line_44 $$ bais = new ByteArrayInputStream(obj.getAttachent()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_45 $$ fos = new FileOutputStream(file) [CD]
Line_4 $$ FileOutputStream fos = null --> Line_45 $$ fos = new FileOutputStream(file) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_46 $$ IOUtils.copy(bais, fos) [CD]
Line_44 $$ bais = new ByteArrayInputStream(obj.getAttachent()) --> Line_46 $$ IOUtils.copy(bais, fos) [FD]
Line_3 $$ ByteArrayInputStream bais = null --> Line_46 $$ IOUtils.copy(bais, fos) [FD]
Line_45 $$ fos = new FileOutputStream(file) --> Line_46 $$ IOUtils.copy(bais, fos) [FD]
Line_4 $$ FileOutputStream fos = null --> Line_46 $$ IOUtils.copy(bais, fos) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_47 $$ IOUtils.closeQuietly(bais) [CD]
Line_44 $$ bais = new ByteArrayInputStream(obj.getAttachent()) --> Line_47 $$ IOUtils.closeQuietly(bais) [FD]
Line_3 $$ ByteArrayInputStream bais = null --> Line_47 $$ IOUtils.closeQuietly(bais) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_48 $$ IOUtils.closeQuietly(fos) [CD]
Line_45 $$ fos = new FileOutputStream(file) --> Line_48 $$ IOUtils.closeQuietly(fos) [FD]
Line_4 $$ FileOutputStream fos = null --> Line_48 $$ IOUtils.closeQuietly(fos) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_49 $$ EmailAttachment attachment = new EmailAttachment() [CD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_50 $$ attachment.setPath(file.getPath()) [CD]
Line_49 $$ EmailAttachment attachment = new EmailAttachment() --> Line_50 $$ attachment.setPath(file.getPath()) [FD]
Line_43 $$ File file = new File(dir, obj.getName()) --> Line_50 $$ attachment.setPath(file.getPath()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_51 $$ attachment.setDisposition(EmailAttachment.ATTACHMENT) [CD]
Line_49 $$ EmailAttachment attachment = new EmailAttachment() --> Line_51 $$ attachment.setDisposition(EmailAttachment.ATTACHMENT) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_52 $$ attachment.setDescription("File Attachment: " + file.getName()) [CD]
Line_49 $$ EmailAttachment attachment = new EmailAttachment() --> Line_52 $$ attachment.setDescription("File Attachment: " + file.getName()) [FD]
Line_43 $$ File file = new File(dir, obj.getName()) --> Line_52 $$ attachment.setDescription("File Attachment: " + file.getName()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_53 $$ attachment.setName(file.getName()) [CD]
Line_49 $$ EmailAttachment attachment = new EmailAttachment() --> Line_53 $$ attachment.setName(file.getName()) [FD]
Line_43 $$ File file = new File(dir, obj.getName()) --> Line_53 $$ attachment.setName(file.getName()) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_54 $$ email.attach(attachment) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_54 $$ email.attach(attachment) [FD]
Line_49 $$ EmailAttachment attachment = new EmailAttachment() --> Line_54 $$ email.attach(attachment) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_55 $$ String mid = getId() [CD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_56 $$ email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">") [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_56 $$ email.addHeader(RFC2822Headers.IN_REPLY_TO, "<" + mid + ".JavaMail.duroty@duroty" + ">") [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_57 $$ email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">") [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_57 $$ email.addHeader(RFC2822Headers.REFERENCES, "<" + mid + ".JavaMail.duroty@duroty" + ">") [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_58 $$ email.addHeader("X-DBox", "FILES") [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_58 $$ email.addHeader("X-DBox", "FILES") [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_59 $$ email.addHeader("X-DRecent", "false") [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_59 $$ email.addHeader("X-DRecent", "false") [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_60 $$ email.setMailSession(session) [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_60 $$ email.setMailSession(session) [FD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_60 $$ email.setMailSession(session) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_61 $$ email.buildMimeMessage() [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_61 $$ email.buildMimeMessage() [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_62 $$ MimeMessage mime = email.getMimeMessage() [CD]
Line_19 $$ MultiPartEmail email = email = new MultiPartEmail() --> Line_62 $$ MimeMessage mime = email.getMimeMessage() [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_63 $$ int size = MessageUtilities.getMessageSize(mime) [CD]
Line_62 $$ MimeMessage mime = email.getMimeMessage() --> Line_63 $$ int size = MessageUtilities.getMessageSize(mime) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_64 $$ if (!controlQuota(hsession, user, size)) [CD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_64 $$ if (!controlQuota(hsession, user, size)) [FD]
Line_12 $$ Users user = getUser(hsession, repositoryName) --> Line_64 $$ if (!controlQuota(hsession, user, size)) [FD]
Line_63 $$ int size = MessageUtilities.getMessageSize(mime) --> Line_64 $$ if (!controlQuota(hsession, user, size)) [FD]
Line_18 $$ for (int i = 0; i < files.size(); i++) --> Line_67 $$ messageable.storeMessage(mid, mime, user) [CD]
Line_55 $$ String mid = getId() --> Line_67 $$ messageable.storeMessage(mid, mime, user) [FD]
Line_62 $$ MimeMessage mime = email.getMimeMessage() --> Line_67 $$ messageable.storeMessage(mid, mime, user) [FD]
Line_12 $$ Users user = getUser(hsession, repositoryName) --> Line_67 $$ messageable.storeMessage(mid, mime, user) [FD]
Line_2 $$ public void send(org.hibernate.Session hsession, Session session, String repositoryName, Vector files, int label, String charset) throws FilesException --> Line_79 $$ GeneralOperations.closeHibernateSession(hsession) [FD]
Line_44 $$ bais = new ByteArrayInputStream(obj.getAttachent()) --> Line_80 $$ IOUtils.closeQuietly(bais) [FD]
Line_3 $$ ByteArrayInputStream bais = null --> Line_80 $$ IOUtils.closeQuietly(bais) [FD]
Line_45 $$ fos = new FileOutputStream(file) --> Line_81 $$ IOUtils.closeQuietly(fos) [FD]
Line_4 $$ FileOutputStream fos = null --> Line_81 $$ IOUtils.closeQuietly(fos) [FD]
