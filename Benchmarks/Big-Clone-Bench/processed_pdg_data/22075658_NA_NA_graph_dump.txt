Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_3 $$ BufferedInputStream bis = null [CD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_4 $$ BufferedOutputStream bos = null [CD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_5 $$ URL url = new URL(pURL) [CD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_6 $$ int port = url.getPort() [CD]
Line_5 $$ URL url = new URL(pURL) --> Line_6 $$ int port = url.getPort() [FD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_7 $$ if (-1 == port) [CD]
Line_6 $$ int port = url.getPort() --> Line_7 $$ if (-1 == port) [FD]
Line_7 $$ if (-1 == port) --> Line_8 $$ port = url.getDefaultPort() [CD]
Line_6 $$ int port = url.getPort() --> Line_8 $$ port = url.getDefaultPort() [FD]
Line_5 $$ URL url = new URL(pURL) --> Line_8 $$ port = url.getDefaultPort() [FD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_10 $$ if (url.getProtocol().equals(HTTPS_PROTOCOL)) [CD]
Line_5 $$ URL url = new URL(pURL) --> Line_10 $$ if (url.getProtocol().equals(HTTPS_PROTOCOL)) [FD]
Line_10 $$ if (url.getProtocol().equals(HTTPS_PROTOCOL)) --> Line_11 $$ Protocol httpsProtocol = new Protocol(HTTPS_PROTOCOL, new EasySSLProtocolSocketFactory(), port) [CD]
Line_10 $$ if (url.getProtocol().equals(HTTPS_PROTOCOL)) --> Line_12 $$ Protocol.registerProtocol(HTTPS_PROTOCOL, httpsProtocol) [CD]
Line_11 $$ Protocol httpsProtocol = new Protocol(HTTPS_PROTOCOL, new EasySSLProtocolSocketFactory(), port) --> Line_12 $$ Protocol.registerProtocol(HTTPS_PROTOCOL, httpsProtocol) [FD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_14 $$ HttpClient httpClient = new HttpClient() [CD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_15 $$ httpClient.getParams().setParameter("http.socket.timeout", HTTP_SOCKET_TIMEOUT) [CD]
Line_14 $$ HttpClient httpClient = new HttpClient() --> Line_15 $$ httpClient.getParams().setParameter("http.socket.timeout", HTTP_SOCKET_TIMEOUT) [FD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_16 $$ HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL) [CD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_16 $$ HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL) [FD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_17 $$ if (null != pUserName && null != pPassword) [CD]
Line_17 $$ if (null != pUserName && null != pPassword) --> Line_18 $$ httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(pUserName, pPassword)) [CD]
Line_14 $$ HttpClient httpClient = new HttpClient() --> Line_18 $$ httpClient.getState().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(pUserName, pPassword)) [FD]
Line_14 $$ HttpClient httpClient = new HttpClient() --> Line_21 $$ httpClient.executeMethod(httpMethod) [FD]
Line_16 $$ HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL) --> Line_21 $$ httpClient.executeMethod(httpMethod) [FD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_22 $$ if (null != pResponseOutputStream) [FD]
Line_22 $$ if (null != pResponseOutputStream) --> Line_23 $$ IOUtils.copy(httpMethod.getResponseBodyAsStream(), pResponseOutputStream) [CD]
Line_2 $$ public static InputStream getResponse(String pURL, String pUserName, String pPassword, OutputStream pResponseOutputStream, String pHttpMethodType) throws Exception --> Line_23 $$ IOUtils.copy(httpMethod.getResponseBodyAsStream(), pResponseOutputStream) [FD]
Line_16 $$ HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL) --> Line_23 $$ IOUtils.copy(httpMethod.getResponseBodyAsStream(), pResponseOutputStream) [FD]
Line_16 $$ HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL) --> Line_25 $$ return httpMethod.getResponseBodyAsStream() [FD]
Line_16 $$ HttpMethod httpMethod = getHttpMethod(pHttpMethodType, pURL) --> Line_29 $$ httpMethod.releaseConnection() [FD]
