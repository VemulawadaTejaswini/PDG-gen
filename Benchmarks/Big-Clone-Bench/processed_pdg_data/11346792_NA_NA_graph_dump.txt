Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_3 $$ if (!generatedOutputDirectory.exists()) [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_3 $$ if (!generatedOutputDirectory.exists()) [FD]
Line_3 $$ if (!generatedOutputDirectory.exists()) --> Line_4 $$ generatedOutputDirectory.createFolder() [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_4 $$ generatedOutputDirectory.createFolder() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_6 $$ if (outputDirectory.exists()) [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_6 $$ if (outputDirectory.exists()) [FD]
Line_6 $$ if (outputDirectory.exists()) --> Line_7 $$ outputDirectory.createFolder() [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_7 $$ outputDirectory.createFolder() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_9 $$ ZipUtils.extractZip(new ClasspathResource(classResolver, "/com/erinors/tapestry/tapdoc/service/xdoc/resources.zip"), outputDirectory) [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_9 $$ ZipUtils.extractZip(new ClasspathResource(classResolver, "/com/erinors/tapestry/tapdoc/service/xdoc/resources.zip"), outputDirectory) [FD]
Line_10 $$ for (Library library : libraryModels) --> Line_11 $$ String libraryName = library.getName() [FD]
Line_10 $$ for (Library library : libraryModels) --> Line_12 $$ String libraryLocation = library.getLocation() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_13 $$ generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder() [FD]
Line_12 $$ String libraryLocation = library.getLocation() --> Line_13 $$ generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).createFolder() [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_15 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) [FD]
Line_11 $$ String libraryName = library.getName() --> Line_15 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_16 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.xml") [FD]
Line_12 $$ String libraryLocation = library.getLocation() --> Line_16 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.xml") [FD]
Line_16 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.xml") --> Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_18 $$ out.write(result) [FD]
Line_15 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_18 $$ out.write(result) [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_19 $$ out.close() [FD]
Line_10 $$ for (Library library : libraryModels) --> Line_23 $$ for (Component component : library.getComponents()) [FD]
Line_23 $$ for (Component component : library.getComponents()) --> Line_24 $$ String componentName = component.getName() [FD]
Line_26 $$ Map<String, String> parameters = new HashMap<String, String>() --> Line_27 $$ parameters.put("libraryName", libraryName) [FD]
Line_11 $$ String libraryName = library.getName() --> Line_27 $$ parameters.put("libraryName", libraryName) [FD]
Line_26 $$ Map<String, String> parameters = new HashMap<String, String>() --> Line_28 $$ parameters.put("componentName", componentName) [FD]
Line_24 $$ String componentName = component.getName() --> Line_28 $$ parameters.put("componentName", componentName) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_29 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Component.xsl"), parameters) [FD]
Line_26 $$ Map<String, String> parameters = new HashMap<String, String>() --> Line_29 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Component.xsl"), parameters) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_32 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true)) [FD]
Line_12 $$ String libraryLocation = library.getLocation() --> Line_32 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true)) [FD]
Line_24 $$ String componentName = component.getName() --> Line_32 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getComponentIndexFile(libraryLocation, componentName, true)) [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_16 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.xml") --> Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_34 $$ out.write(result) [FD]
Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_34 $$ out.write(result) [FD]
Line_15 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_34 $$ out.write(result) [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_35 $$ out.close() [FD]
Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_35 $$ out.close() [FD]
Line_23 $$ for (Component component : library.getComponents()) --> Line_36 $$ Resource specificationLocation = component.getSpecificationLocation() [FD]
Line_36 $$ Resource specificationLocation = component.getSpecificationLocation() --> Line_37 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) [FD]
Line_37 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) --> Line_38 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) [CD]
Line_36 $$ Resource specificationLocation = component.getSpecificationLocation() --> Line_38 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) [FD]
Line_37 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) --> Line_39 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [CD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_39 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [FD]
Line_12 $$ String libraryLocation = library.getLocation() --> Line_39 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [FD]
Line_24 $$ String componentName = component.getName() --> Line_39 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") [FD]
Line_37 $$ if (specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL() != null) --> Line_40 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) [CD]
Line_38 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) --> Line_40 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) [FD]
Line_40 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) --> Line_41 $$ File[] files = srcResourcesDirectory.listFiles() [CD]
Line_38 $$ File srcResourcesDirectory = new File(specificationLocation.getRelativeResource(componentName + "_tapdoc/resource").getResourceURL().toURI()) --> Line_41 $$ File[] files = srcResourcesDirectory.listFiles() [FD]
Line_40 $$ if (srcResourcesDirectory.exists() && srcResourcesDirectory.isDirectory()) --> Line_42 $$ if (files != null) [CD]
Line_41 $$ File[] files = srcResourcesDirectory.listFiles() --> Line_42 $$ if (files != null) [FD]
Line_43 $$ for (File resource : files) --> Line_44 $$ if (resource.isFile() && !resource.isHidden()) [FD]
Line_44 $$ if (resource.isFile() && !resource.isHidden()) --> Line_45 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) [CD]
Line_39 $$ FileObject dstResourcesFileObject = outputDirectory.resolveFile(fileNameGenerator.getComponentDirectory(libraryLocation, componentName)).resolveFile("resource") --> Line_45 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) [FD]
Line_43 $$ for (File resource : files) --> Line_45 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) [FD]
Line_44 $$ if (resource.isFile() && !resource.isHidden()) --> Line_46 $$ resourceFileObject.createFile() [CD]
Line_45 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) --> Line_46 $$ resourceFileObject.createFile() [FD]
Line_44 $$ if (resource.isFile() && !resource.isHidden()) --> Line_47 $$ InputStream inResource = null [CD]
Line_44 $$ if (resource.isFile() && !resource.isHidden()) --> Line_48 $$ OutputStream outResource = null [CD]
Line_47 $$ InputStream inResource = null --> Line_50 $$ inResource = new FileInputStream(resource) [FD]
Line_48 $$ OutputStream outResource = null --> Line_51 $$ outResource = resourceFileObject.getContent().getOutputStream() [FD]
Line_45 $$ FileObject resourceFileObject = dstResourcesFileObject.resolveFile(resource.getName()) --> Line_51 $$ outResource = resourceFileObject.getContent().getOutputStream() [FD]
Line_47 $$ InputStream inResource = null --> Line_52 $$ IOUtils.copy(inResource, outResource) [FD]
Line_50 $$ inResource = new FileInputStream(resource) --> Line_52 $$ IOUtils.copy(inResource, outResource) [FD]
Line_48 $$ OutputStream outResource = null --> Line_52 $$ IOUtils.copy(inResource, outResource) [FD]
Line_51 $$ outResource = resourceFileObject.getContent().getOutputStream() --> Line_52 $$ IOUtils.copy(inResource, outResource) [FD]
Line_47 $$ InputStream inResource = null --> Line_54 $$ IOUtils.closeQuietly(inResource) [FD]
Line_50 $$ inResource = new FileInputStream(resource) --> Line_54 $$ IOUtils.closeQuietly(inResource) [FD]
Line_48 $$ OutputStream outResource = null --> Line_55 $$ IOUtils.closeQuietly(outResource) [FD]
Line_51 $$ outResource = resourceFileObject.getContent().getOutputStream() --> Line_55 $$ IOUtils.closeQuietly(outResource) [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_65 $$ IOUtils.closeQuietly(out) [FD]
Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_65 $$ IOUtils.closeQuietly(out) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_72 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Overview.xsl")) [FD]
Line_2 $$ public void generate(FileObject outputDirectory, FileObject generatedOutputDirectory, List<Library> libraryModels, String tapdocXml) throws FileSystemException --> Line_73 $$ FileObject index = generatedOutputDirectory.resolveFile("index.xml") [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_74 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_74 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_16 $$ FileObject index = generatedOutputDirectory.resolveFile(fileNameGenerator.getLibraryDirectory(libraryLocation)).resolveFile("index.xml") --> Line_74 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_75 $$ out.write(result) [FD]
Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_75 $$ out.write(result) [FD]
Line_74 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_75 $$ out.write(result) [FD]
Line_15 $$ String result = XsltUtils.xsltTransform(tapdocXml, getClass().getResourceAsStream("Library.xsl"), "libraryName", libraryName) --> Line_75 $$ out.write(result) [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_76 $$ out.close() [FD]
Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_76 $$ out.close() [FD]
Line_74 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_76 $$ out.close() [FD]
Line_17 $$ Writer out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_80 $$ IOUtils.closeQuietly(out) [FD]
Line_33 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_80 $$ IOUtils.closeQuietly(out) [FD]
Line_74 $$ out = new OutputStreamWriter(index.getContent().getOutputStream(), "UTF-8") --> Line_80 $$ IOUtils.closeQuietly(out) [FD]
