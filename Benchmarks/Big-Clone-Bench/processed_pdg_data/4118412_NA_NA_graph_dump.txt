Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_3 $$ String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath() [CD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_4 $$ log.println("Concat files into: " + outputFile) [CD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_4 $$ log.println("Concat files into: " + outputFile) [FD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_5 $$ OutputStream out = new FileOutputStream(absPath + outputFile) [CD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_6 $$ byte[] buffer = new byte[4096] [CD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_7 $$ int readBytes [CD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_9 $$ log.println(" Read: " + file) [FD]
Line_7 $$ int readBytes --> Line_11 $$ while ((readBytes = in.read(buffer)) != -1) [FD]
Line_10 $$ InputStream in = new FileInputStream(absPath + file) --> Line_11 $$ while ((readBytes = in.read(buffer)) != -1) [FD]
Line_6 $$ byte[] buffer = new byte[4096] --> Line_11 $$ while ((readBytes = in.read(buffer)) != -1) [FD]
Line_11 $$ while ((readBytes = in.read(buffer)) != -1) --> Line_12 $$ out.write(buffer, 0, readBytes) [CD]
Line_11 $$ while ((readBytes = in.read(buffer)) != -1) --> Line_12 $$ out.write(buffer, 0, readBytes) [FD]
Line_5 $$ OutputStream out = new FileOutputStream(absPath + outputFile) --> Line_12 $$ out.write(buffer, 0, readBytes) [FD]
Line_6 $$ byte[] buffer = new byte[4096] --> Line_12 $$ out.write(buffer, 0, readBytes) [FD]
Line_7 $$ int readBytes --> Line_12 $$ out.write(buffer, 0, readBytes) [FD]
Line_10 $$ InputStream in = new FileInputStream(absPath + file) --> Line_14 $$ in.close() [FD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_16 $$ out.close() [CD]
Line_5 $$ OutputStream out = new FileOutputStream(absPath + outputFile) --> Line_16 $$ out.close() [FD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_17 $$ if (compress) [CD]
Line_17 $$ if (compress) --> Line_18 $$ long normalSize = new File(absPath + outputFile).length() [CD]
Line_17 $$ if (compress) --> Line_19 $$ ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000") [CD]
Line_17 $$ if (compress) --> Line_20 $$ builder.directory(new File(absPath)) [CD]
Line_19 $$ ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000") --> Line_20 $$ builder.directory(new File(absPath)) [FD]
Line_17 $$ if (compress) --> Line_21 $$ Process process = builder.start() [CD]
Line_19 $$ ProcessBuilder builder = new ProcessBuilder("java", "-jar", "WEB-INF/yuicompressor.jar", outputFile, "-o", outputFile, "--line-break", "4000") --> Line_21 $$ Process process = builder.start() [FD]
Line_17 $$ if (compress) --> Line_22 $$ process.waitFor() [CD]
Line_21 $$ Process process = builder.start() --> Line_22 $$ process.waitFor() [FD]
Line_17 $$ if (compress) --> Line_23 $$ long minSize = new File(absPath + outputFile).length() [CD]
Line_17 $$ if (compress) --> Line_24 $$ long diff = normalSize - minSize [CD]
Line_17 $$ if (compress) --> Line_25 $$ double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0 [CD]
Line_17 $$ if (compress) --> Line_26 $$ double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0) [CD]
Line_17 $$ if (compress) --> Line_27 $$ log.println("Result: " + percentage + " % (" + diffSize + " KB)") [CD]
Line_2 $$ private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception --> Line_27 $$ log.println("Result: " + percentage + " % (" + diffSize + " KB)") [FD]
