Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_3 $$ Connection conexion = null [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_4 $$ PreparedStatement select = null [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_5 $$ PreparedStatement update = null [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_6 $$ ResultSet rs = null [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_7 $$ boolean exito = false [CD]
Line_3 $$ Connection conexion = null --> Line_9 $$ conexion = pool.getConnection() [FD]
Line_3 $$ Connection conexion = null --> Line_10 $$ conexion.setAutoCommit(false) [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_10 $$ conexion.setAutoCommit(false) [FD]
Line_4 $$ PreparedStatement select = null --> Line_11 $$ select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?") [FD]
Line_3 $$ Connection conexion = null --> Line_11 $$ select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?") [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_11 $$ select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?") [FD]
Line_5 $$ PreparedStatement update = null --> Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") [FD]
Line_3 $$ Connection conexion = null --> Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") [FD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_15 $$ Iterator<String> iterador = carro.keySet().iterator() [FD]
Line_15 $$ Iterator<String> iterador = carro.keySet().iterator() --> Line_16 $$ while (iterador.hasNext()) [FD]
Line_16 $$ while (iterador.hasNext()) --> Line_17 $$ codigoProd = iterador.next() [CD]
Line_13 $$ String codigoProd --> Line_17 $$ codigoProd = iterador.next() [FD]
Line_15 $$ Iterator<String> iterador = carro.keySet().iterator() --> Line_17 $$ codigoProd = iterador.next() [FD]
Line_16 $$ while (iterador.hasNext()) --> Line_18 $$ select.setString(1, codigoProd) [CD]
Line_4 $$ PreparedStatement select = null --> Line_18 $$ select.setString(1, codigoProd) [FD]
Line_11 $$ select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?") --> Line_18 $$ select.setString(1, codigoProd) [FD]
Line_17 $$ codigoProd = iterador.next() --> Line_18 $$ select.setString(1, codigoProd) [FD]
Line_13 $$ String codigoProd --> Line_18 $$ select.setString(1, codigoProd) [FD]
Line_16 $$ while (iterador.hasNext()) --> Line_19 $$ rs = select.executeQuery() [CD]
Line_6 $$ ResultSet rs = null --> Line_19 $$ rs = select.executeQuery() [FD]
Line_4 $$ PreparedStatement select = null --> Line_19 $$ rs = select.executeQuery() [FD]
Line_11 $$ select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?") --> Line_19 $$ rs = select.executeQuery() [FD]
Line_16 $$ while (iterador.hasNext()) --> Line_20 $$ if (rs.next() == false) [CD]
Line_19 $$ rs = select.executeQuery() --> Line_20 $$ if (rs.next() == false) [FD]
Line_6 $$ ResultSet rs = null --> Line_20 $$ if (rs.next() == false) [FD]
Line_20 $$ if (rs.next() == false) --> Line_21 $$ Tools.anadirMensaje(request, "No existe el producto con codigo: " + codigoProd + "(producto eliminado de la cesta)") [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_21 $$ Tools.anadirMensaje(request, "No existe el producto con codigo: " + codigoProd + "(producto eliminado de la cesta)") [FD]
Line_20 $$ if (rs.next() == false) --> Line_22 $$ iterador.remove() [CD]
Line_15 $$ Iterator<String> iterador = carro.keySet().iterator() --> Line_22 $$ iterador.remove() [FD]
Line_20 $$ if (rs.next() == false) --> Line_23 $$ conexion.rollback() [CD]
Line_3 $$ Connection conexion = null --> Line_23 $$ conexion.rollback() [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_23 $$ conexion.rollback() [FD]
Line_20 $$ if (rs.next() == false) --> Line_25 $$ Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles")) [CD]
Line_19 $$ rs = select.executeQuery() --> Line_25 $$ Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles")) [FD]
Line_6 $$ ResultSet rs = null --> Line_25 $$ Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles")) [FD]
Line_20 $$ if (rs.next() == false) --> Line_26 $$ select.clearParameters() [CD]
Line_4 $$ PreparedStatement select = null --> Line_26 $$ select.clearParameters() [FD]
Line_11 $$ select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?") --> Line_26 $$ select.clearParameters() [FD]
Line_20 $$ if (rs.next() == false) --> Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) [FD]
Line_17 $$ codigoProd = iterador.next() --> Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) [FD]
Line_13 $$ String codigoProd --> Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) [FD]
Line_25 $$ Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles")) --> Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_28 $$ Tools.anadirMensaje(request, "No hay unidades suficientes de: " + prod.getNombre() + "(producto eliminado de la cesta)") [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_28 $$ Tools.anadirMensaje(request, "No hay unidades suficientes de: " + prod.getNombre() + "(producto eliminado de la cesta)") [FD]
Line_25 $$ Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles")) --> Line_28 $$ Tools.anadirMensaje(request, "No hay unidades suficientes de: " + prod.getNombre() + "(producto eliminado de la cesta)") [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_29 $$ iterador.remove() [CD]
Line_15 $$ Iterator<String> iterador = carro.keySet().iterator() --> Line_29 $$ iterador.remove() [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_30 $$ conexion.rollback() [CD]
Line_3 $$ Connection conexion = null --> Line_30 $$ conexion.rollback() [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_30 $$ conexion.rollback() [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_32 $$ update.setInt(1, prod.getStock() - carro.get(codigoProd)) [CD]
Line_5 $$ PreparedStatement update = null --> Line_32 $$ update.setInt(1, prod.getStock() - carro.get(codigoProd)) [FD]
Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") --> Line_32 $$ update.setInt(1, prod.getStock() - carro.get(codigoProd)) [FD]
Line_25 $$ Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles")) --> Line_32 $$ update.setInt(1, prod.getStock() - carro.get(codigoProd)) [FD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_32 $$ update.setInt(1, prod.getStock() - carro.get(codigoProd)) [FD]
Line_17 $$ codigoProd = iterador.next() --> Line_32 $$ update.setInt(1, prod.getStock() - carro.get(codigoProd)) [FD]
Line_13 $$ String codigoProd --> Line_32 $$ update.setInt(1, prod.getStock() - carro.get(codigoProd)) [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_33 $$ update.setString(2, codigoProd) [CD]
Line_5 $$ PreparedStatement update = null --> Line_33 $$ update.setString(2, codigoProd) [FD]
Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") --> Line_33 $$ update.setString(2, codigoProd) [FD]
Line_17 $$ codigoProd = iterador.next() --> Line_33 $$ update.setString(2, codigoProd) [FD]
Line_13 $$ String codigoProd --> Line_33 $$ update.setString(2, codigoProd) [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_34 $$ filasAfectadas = update.executeUpdate() [CD]
Line_14 $$ int filasAfectadas = 0 --> Line_34 $$ filasAfectadas = update.executeUpdate() [FD]
Line_5 $$ PreparedStatement update = null --> Line_34 $$ filasAfectadas = update.executeUpdate() [FD]
Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") --> Line_34 $$ filasAfectadas = update.executeUpdate() [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_35 $$ if (filasAfectadas != 1) [CD]
Line_34 $$ filasAfectadas = update.executeUpdate() --> Line_35 $$ if (filasAfectadas != 1) [FD]
Line_14 $$ int filasAfectadas = 0 --> Line_35 $$ if (filasAfectadas != 1) [FD]
Line_35 $$ if (filasAfectadas != 1) --> Line_36 $$ Tools.anadirMensaje(request, "Ocurrio un error en el catalogo") [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_36 $$ Tools.anadirMensaje(request, "Ocurrio un error en el catalogo") [FD]
Line_35 $$ if (filasAfectadas != 1) --> Line_37 $$ conexion.rollback() [CD]
Line_3 $$ Connection conexion = null --> Line_37 $$ conexion.rollback() [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_37 $$ conexion.rollback() [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_39 $$ update.clearParameters() [CD]
Line_5 $$ PreparedStatement update = null --> Line_39 $$ update.clearParameters() [FD]
Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") --> Line_39 $$ update.clearParameters() [FD]
Line_27 $$ if (carro.get(codigoProd) > prod.getStock()) --> Line_40 $$ listado.put(prod, carro.get(codigoProd)) [CD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_40 $$ listado.put(prod, carro.get(codigoProd)) [FD]
Line_25 $$ Producto prod = new Producto(rs.getString("Codigo"), rs.getString("Nombre"), rs.getDouble("Precio"), rs.getInt("Stock"), rs.getString("Descripcion"), rs.getString("Detalles")) --> Line_40 $$ listado.put(prod, carro.get(codigoProd)) [FD]
Line_17 $$ codigoProd = iterador.next() --> Line_40 $$ listado.put(prod, carro.get(codigoProd)) [FD]
Line_13 $$ String codigoProd --> Line_40 $$ listado.put(prod, carro.get(codigoProd)) [FD]
Line_3 $$ Connection conexion = null --> Line_44 $$ conexion.commit() [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_44 $$ conexion.commit() [FD]
Line_7 $$ boolean exito = false --> Line_45 $$ exito = true [FD]
Line_3 $$ Connection conexion = null --> Line_49 $$ conexion.rollback() [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_49 $$ conexion.rollback() [FD]
Line_3 $$ Connection conexion = null --> Line_54 $$ cerrarConexionYStatement(conexion, select, update) [FD]
Line_9 $$ conexion = pool.getConnection() --> Line_54 $$ cerrarConexionYStatement(conexion, select, update) [FD]
Line_4 $$ PreparedStatement select = null --> Line_54 $$ cerrarConexionYStatement(conexion, select, update) [FD]
Line_11 $$ select = conexion.prepareStatement("SELECT* FROM " + nameBD + ".Productos WHERE Codigo=?") --> Line_54 $$ cerrarConexionYStatement(conexion, select, update) [FD]
Line_5 $$ PreparedStatement update = null --> Line_54 $$ cerrarConexionYStatement(conexion, select, update) [FD]
Line_12 $$ update = conexion.prepareStatement("UPDATE " + nameBD + ".Productos SET Stock=? WHERE Codigo=?") --> Line_54 $$ cerrarConexionYStatement(conexion, select, update) [FD]
Line_19 $$ rs = select.executeQuery() --> Line_55 $$ cerrarResultSet(rs) [FD]
Line_6 $$ ResultSet rs = null --> Line_55 $$ cerrarResultSet(rs) [FD]
Line_2 $$ public boolean updateProductIfAvailable(Map<String, Integer> carro, HttpServletRequest request, Map<Producto, Integer> listado) --> Line_57 $$ return exito [CD]
