Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_3 $$ HttpPost httpPost = new HttpPost(mRpcUrl) [CD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_4 $$ JSONObject requestJson = new JSONObject() [CD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_5 $$ JSONArray callsJson = new JSONArray() [CD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_7 $$ for (int i = 0; i < calls.size(); i++) [FD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_8 $$ JsonRpcClient.Call call = calls.get(i) [CD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_8 $$ JsonRpcClient.Call call = calls.get(i) [FD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_8 $$ JsonRpcClient.Call call = calls.get(i) [FD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_9 $$ JSONObject callJson = new JSONObject() [CD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_10 $$ callJson.put("method", call.getMethodName()) [CD]
Line_9 $$ JSONObject callJson = new JSONObject() --> Line_10 $$ callJson.put("method", call.getMethodName()) [FD]
Line_8 $$ JsonRpcClient.Call call = calls.get(i) --> Line_10 $$ callJson.put("method", call.getMethodName()) [FD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_11 $$ if (call.getParams() != null) [CD]
Line_8 $$ JsonRpcClient.Call call = calls.get(i) --> Line_11 $$ if (call.getParams() != null) [FD]
Line_11 $$ if (call.getParams() != null) --> Line_12 $$ JSONObject callParams = (JSONObject) call.getParams() [CD]
Line_8 $$ JsonRpcClient.Call call = calls.get(i) --> Line_12 $$ JSONObject callParams = (JSONObject) call.getParams() [FD]
Line_11 $$ if (call.getParams() != null) --> Line_13 $$ String key [CD]
Line_11 $$ if (call.getParams() != null) --> Line_14 $$ while (keysIterator.hasNext()) [CD]
Line_14 $$ while (keysIterator.hasNext()) --> Line_15 $$ key = keysIterator.next() [CD]
Line_13 $$ String key --> Line_15 $$ key = keysIterator.next() [FD]
Line_14 $$ while (keysIterator.hasNext()) --> Line_16 $$ callJson.put(key, callParams.get(key)) [CD]
Line_9 $$ JSONObject callJson = new JSONObject() --> Line_16 $$ callJson.put(key, callParams.get(key)) [FD]
Line_15 $$ key = keysIterator.next() --> Line_16 $$ callJson.put(key, callParams.get(key)) [FD]
Line_13 $$ String key --> Line_16 $$ callJson.put(key, callParams.get(key)) [FD]
Line_12 $$ JSONObject callParams = (JSONObject) call.getParams() --> Line_16 $$ callJson.put(key, callParams.get(key)) [FD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_19 $$ callsJson.put(i, callJson) [CD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_19 $$ callsJson.put(i, callJson) [FD]
Line_5 $$ JSONArray callsJson = new JSONArray() --> Line_19 $$ callsJson.put(i, callJson) [FD]
Line_9 $$ JSONObject callJson = new JSONObject() --> Line_19 $$ callsJson.put(i, callJson) [FD]
Line_4 $$ JSONObject requestJson = new JSONObject() --> Line_21 $$ requestJson.put("calls", callsJson) [FD]
Line_5 $$ JSONArray callsJson = new JSONArray() --> Line_21 $$ requestJson.put("calls", callsJson) [FD]
Line_3 $$ HttpPost httpPost = new HttpPost(mRpcUrl) --> Line_22 $$ httpPost.setEntity(new StringEntity(requestJson.toString(), "UTF-8")) [FD]
Line_4 $$ JSONObject requestJson = new JSONObject() --> Line_22 $$ httpPost.setEntity(new StringEntity(requestJson.toString(), "UTF-8")) [FD]
Line_23 $$ if (Log.isLoggable(TAG, Log.VERBOSE)) --> Line_24 $$ Log.v(TAG, "POST request: " + requestJson.toString()) [CD]
Line_4 $$ JSONObject requestJson = new JSONObject() --> Line_24 $$ Log.v(TAG, "POST request: " + requestJson.toString()) [FD]
Line_3 $$ HttpPost httpPost = new HttpPost(mRpcUrl) --> Line_30 $$ HttpResponse httpResponse = mHttpClient.execute(httpPost) [FD]
Line_30 $$ HttpResponse httpResponse = mHttpClient.execute(httpPost) --> Line_31 $$ final int responseStatusCode = httpResponse.getStatusLine().getStatusCode() [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_33 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), "UTF-8"), 8 * 1024) [CD]
Line_30 $$ HttpResponse httpResponse = mHttpClient.execute(httpPost) --> Line_33 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), "UTF-8"), 8 * 1024) [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_34 $$ StringBuilder sb = new StringBuilder() [CD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_35 $$ String line [CD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_36 $$ while ((line = reader.readLine()) != null) [CD]
Line_35 $$ String line --> Line_36 $$ while ((line = reader.readLine()) != null) [FD]
Line_33 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent(), "UTF-8"), 8 * 1024) --> Line_36 $$ while ((line = reader.readLine()) != null) [FD]
Line_36 $$ while ((line = reader.readLine()) != null) --> Line_37 $$ sb.append(line).append("\n") [CD]
Line_36 $$ while ((line = reader.readLine()) != null) --> Line_37 $$ sb.append(line).append("\n") [FD]
Line_34 $$ StringBuilder sb = new StringBuilder() --> Line_37 $$ sb.append(line).append("\n") [FD]
Line_35 $$ String line --> Line_37 $$ sb.append(line).append("\n") [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_39 $$ if (Log.isLoggable(TAG, Log.VERBOSE)) [CD]
Line_39 $$ if (Log.isLoggable(TAG, Log.VERBOSE)) --> Line_40 $$ Log.v(TAG, "POST response: " + sb.toString()) [CD]
Line_34 $$ StringBuilder sb = new StringBuilder() --> Line_40 $$ Log.v(TAG, "POST response: " + sb.toString()) [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_42 $$ JSONTokener tokener = new JSONTokener(sb.toString()) [CD]
Line_34 $$ StringBuilder sb = new StringBuilder() --> Line_42 $$ JSONTokener tokener = new JSONTokener(sb.toString()) [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_43 $$ JSONObject responseJson = new JSONObject(tokener) [CD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_44 $$ JSONArray resultsJson = responseJson.getJSONArray("results") [CD]
Line_43 $$ JSONObject responseJson = new JSONObject(tokener) --> Line_44 $$ JSONArray resultsJson = responseJson.getJSONArray("results") [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_45 $$ Object[] resultData = new Object[calls.size()] [CD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_45 $$ Object[] resultData = new Object[calls.size()] [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_46 $$ for (int i = 0; i < calls.size(); i++) [CD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_46 $$ for (int i = 0; i < calls.size(); i++) [FD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_46 $$ for (int i = 0; i < calls.size(); i++) [FD]
Line_46 $$ for (int i = 0; i < calls.size(); i++) --> Line_47 $$ JSONObject result = resultsJson.getJSONObject(i) [CD]
Line_46 $$ for (int i = 0; i < calls.size(); i++) --> Line_47 $$ JSONObject result = resultsJson.getJSONObject(i) [FD]
Line_44 $$ JSONArray resultsJson = responseJson.getJSONArray("results") --> Line_47 $$ JSONObject result = resultsJson.getJSONObject(i) [FD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_47 $$ JSONObject result = resultsJson.getJSONObject(i) [FD]
Line_46 $$ for (int i = 0; i < calls.size(); i++) --> Line_48 $$ if (result.has("error")) [CD]
Line_47 $$ JSONObject result = resultsJson.getJSONObject(i) --> Line_48 $$ if (result.has("error")) [FD]
Line_48 $$ if (result.has("error")) --> Line_49 $$ callback.onError(i, new JsonRpcException((int) result.getInt("error"), calls.get(i).getMethodName(), result.getString("message"), null)) [CD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_49 $$ callback.onError(i, new JsonRpcException((int) result.getInt("error"), calls.get(i).getMethodName(), result.getString("message"), null)) [FD]
Line_46 $$ for (int i = 0; i < calls.size(); i++) --> Line_49 $$ callback.onError(i, new JsonRpcException((int) result.getInt("error"), calls.get(i).getMethodName(), result.getString("message"), null)) [FD]
Line_7 $$ for (int i = 0; i < calls.size(); i++) --> Line_49 $$ callback.onError(i, new JsonRpcException((int) result.getInt("error"), calls.get(i).getMethodName(), result.getString("message"), null)) [FD]
Line_47 $$ JSONObject result = resultsJson.getJSONObject(i) --> Line_49 $$ callback.onError(i, new JsonRpcException((int) result.getInt("error"), calls.get(i).getMethodName(), result.getString("message"), null)) [FD]
Line_48 $$ if (result.has("error")) --> Line_50 $$ resultData[i] = null [CD]
Line_48 $$ if (result.has("error")) --> Line_52 $$ resultData[i] = result.get("data") [CD]
Line_47 $$ JSONObject result = resultsJson.getJSONObject(i) --> Line_52 $$ resultData[i] = result.get("data") [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_55 $$ callback.onData(resultData) [CD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_55 $$ callback.onData(resultData) [FD]
Line_45 $$ Object[] resultData = new Object[calls.size()] --> Line_55 $$ callback.onData(resultData) [FD]
Line_32 $$ if (200 <= responseStatusCode && responseStatusCode < 300) --> Line_57 $$ callback.onError(-1, new JsonRpcException(-1, "Received HTTP status code other than HTTP 2xx: " + httpResponse.getStatusLine().getReasonPhrase())) [CD]
Line_2 $$ public void callBatch(final List<JsonRpcClient.Call> calls, final JsonRpcClient.BatchCallback callback) --> Line_57 $$ callback.onError(-1, new JsonRpcException(-1, "Received HTTP status code other than HTTP 2xx: " + httpResponse.getStatusLine().getReasonPhrase())) [FD]
Line_30 $$ HttpResponse httpResponse = mHttpClient.execute(httpPost) --> Line_57 $$ callback.onError(-1, new JsonRpcException(-1, "Received HTTP status code other than HTTP 2xx: " + httpResponse.getStatusLine().getReasonPhrase())) [FD]
