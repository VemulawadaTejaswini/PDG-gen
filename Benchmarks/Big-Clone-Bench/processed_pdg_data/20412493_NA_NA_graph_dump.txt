Line_2 $$ void readData(URL url) throws IOException --> Line_3 $$ int i = 0, j = 0, k = 0 [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_4 $$ double xvalue, yvalue [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_5 $$ double xindex, yindex [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_6 $$ InputStream is = url.openStream() [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_6 $$ InputStream is = url.openStream() [FD]
Line_2 $$ void readData(URL url) throws IOException --> Line_7 $$ is.mark(0) [CD]
Line_6 $$ InputStream is = url.openStream() --> Line_7 $$ is.mark(0) [FD]
Line_2 $$ void readData(URL url) throws IOException --> Line_8 $$ InputStreamReader isr = new InputStreamReader(is) [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_9 $$ BufferedReader br = new BufferedReader(isr) [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_10 $$ int columnsize = 0 [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_11 $$ double temp_prev = 0 [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_12 $$ double temp_new = 0 [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_13 $$ int first = 0 [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_14 $$ s = br.readLine() [CD]
Line_9 $$ BufferedReader br = new BufferedReader(isr) --> Line_14 $$ s = br.readLine() [FD]
Line_2 $$ void readData(URL url) throws IOException --> Line_15 $$ StringTokenizer st = new StringTokenizer(s) [CD]
Line_2 $$ void readData(URL url) throws IOException --> Line_16 $$ columnsize = Integer.parseInt(st.nextToken()) [CD]
Line_10 $$ int columnsize = 0 --> Line_16 $$ columnsize = Integer.parseInt(st.nextToken()) [FD]
Line_15 $$ StringTokenizer st = new StringTokenizer(s) --> Line_16 $$ columnsize = Integer.parseInt(st.nextToken()) [FD]
Line_2 $$ void readData(URL url) throws IOException --> Line_20 $$ while ((s = br.readLine()) != null) [CD]
Line_9 $$ BufferedReader br = new BufferedReader(isr) --> Line_20 $$ while ((s = br.readLine()) != null) [FD]
Line_20 $$ while ((s = br.readLine()) != null) --> Line_21 $$ st = new StringTokenizer(s) [CD]
Line_15 $$ StringTokenizer st = new StringTokenizer(s) --> Line_21 $$ st = new StringTokenizer(s) [FD]
Line_20 $$ while ((s = br.readLine()) != null) --> Line_22 $$ for (k = 0; k < columnsize; k++) [CD]
Line_3 $$ int i = 0, j = 0, k = 0 --> Line_22 $$ for (k = 0; k < columnsize; k++) [FD]
Line_10 $$ int columnsize = 0 --> Line_22 $$ for (k = 0; k < columnsize; k++) [FD]
Line_16 $$ columnsize = Integer.parseInt(st.nextToken()) --> Line_22 $$ for (k = 0; k < columnsize; k++) [FD]
Line_22 $$ for (k = 0; k < columnsize; k++) --> Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) [CD]
Line_12 $$ double temp_new = 0 --> Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) [FD]
Line_21 $$ st = new StringTokenizer(s) --> Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) [FD]
Line_15 $$ StringTokenizer st = new StringTokenizer(s) --> Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) [FD]
Line_22 $$ for (k = 0; k < columnsize; k++) --> Line_24 $$ if (first == 0) [CD]
Line_13 $$ int first = 0 --> Line_24 $$ if (first == 0) [FD]
Line_24 $$ if (first == 0) --> Line_25 $$ temp_prev = temp_new [CD]
Line_11 $$ double temp_prev = 0 --> Line_25 $$ temp_prev = temp_new [FD]
Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) --> Line_25 $$ temp_prev = temp_new [FD]
Line_12 $$ double temp_new = 0 --> Line_25 $$ temp_prev = temp_new [FD]
Line_24 $$ if (first == 0) --> Line_26 $$ first = 1 [CD]
Line_13 $$ int first = 0 --> Line_26 $$ first = 1 [FD]
Line_22 $$ for (k = 0; k < columnsize; k++) --> Line_28 $$ if (k == 0) [CD]
Line_22 $$ for (k = 0; k < columnsize; k++) --> Line_28 $$ if (k == 0) [FD]
Line_3 $$ int i = 0, j = 0, k = 0 --> Line_28 $$ if (k == 0) [FD]
Line_28 $$ if (k == 0) --> Line_29 $$ if (temp_new != temp_prev) [CD]
Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) --> Line_29 $$ if (temp_new != temp_prev) [FD]
Line_12 $$ double temp_new = 0 --> Line_29 $$ if (temp_new != temp_prev) [FD]
Line_25 $$ temp_prev = temp_new --> Line_29 $$ if (temp_new != temp_prev) [FD]
Line_11 $$ double temp_prev = 0 --> Line_29 $$ if (temp_new != temp_prev) [FD]
Line_29 $$ if (temp_new != temp_prev) --> Line_30 $$ temp_prev = temp_new [CD]
Line_25 $$ temp_prev = temp_new --> Line_30 $$ temp_prev = temp_new [FD]
Line_11 $$ double temp_prev = 0 --> Line_30 $$ temp_prev = temp_new [FD]
Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) --> Line_30 $$ temp_prev = temp_new [FD]
Line_12 $$ double temp_new = 0 --> Line_30 $$ temp_prev = temp_new [FD]
Line_29 $$ if (temp_new != temp_prev) --> Line_31 $$ i++ [CD]
Line_3 $$ int i = 0, j = 0, k = 0 --> Line_31 $$ i++ [FD]
Line_29 $$ if (temp_new != temp_prev) --> Line_32 $$ j = 0 [CD]
Line_3 $$ int i = 0, j = 0, k = 0 --> Line_32 $$ j = 0 [FD]
Line_22 $$ for (k = 0; k < columnsize; k++) --> Line_35 $$ data[k][i][j] = temp_new [CD]
Line_23 $$ temp_new = Double.parseDouble(st.nextToken()) --> Line_35 $$ data[k][i][j] = temp_new [FD]
Line_12 $$ double temp_new = 0 --> Line_35 $$ data[k][i][j] = temp_new [FD]
Line_20 $$ while ((s = br.readLine()) != null) --> Line_37 $$ j++ [CD]
Line_32 $$ j = 0 --> Line_37 $$ j++ [FD]
Line_3 $$ int i = 0, j = 0, k = 0 --> Line_37 $$ j++ [FD]
Line_26 $$ first = 1 --> Line_24 $$ if (first == 0) [FD]
Line_30 $$ temp_prev = temp_new --> Line_29 $$ if (temp_new != temp_prev) [FD]
