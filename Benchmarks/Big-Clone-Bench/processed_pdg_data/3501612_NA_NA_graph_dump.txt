Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_3 $$ byte[] HA2 [CD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_4 $$ byte[] respHash [CD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_5 $$ char[] HA2Hex [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_8 $$ md.update(method.getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_8 $$ md.update(method.getBytes("UTF-8")) [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_9 $$ md.update(":".getBytes("UTF-8")) [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_10 $$ md.update(digestUri.getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_10 $$ md.update(digestUri.getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_11 $$ if ("auth-int".equals(qop)) [FD]
Line_11 $$ if ("auth-int".equals(qop)) --> Line_12 $$ md.update(":".getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_12 $$ md.update(":".getBytes("UTF-8")) [FD]
Line_11 $$ if ("auth-int".equals(qop)) --> Line_13 $$ md.update("00000000000000000000000000000000".getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_13 $$ md.update("00000000000000000000000000000000".getBytes("UTF-8")) [FD]
Line_3 $$ byte[] HA2 --> Line_15 $$ HA2 = md.digest() [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_15 $$ HA2 = md.digest() [FD]
Line_5 $$ char[] HA2Hex --> Line_16 $$ HA2Hex = convertToHex(HA2) [FD]
Line_3 $$ byte[] HA2 --> Line_16 $$ HA2Hex = convertToHex(HA2) [FD]
Line_15 $$ HA2 = md.digest() --> Line_16 $$ HA2Hex = convertToHex(HA2) [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_17 $$ md.update(new String(HA1).getBytes("UTF-8")) [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_18 $$ md.update(":".getBytes("UTF-8")) [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_19 $$ md.update(serverNonce.getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_19 $$ md.update(serverNonce.getBytes("UTF-8")) [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_20 $$ md.update(":".getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_21 $$ if (qop.length() > 0) [FD]
Line_21 $$ if (qop.length() > 0) --> Line_22 $$ md.update(nonceCount.getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_22 $$ md.update(nonceCount.getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_22 $$ md.update(nonceCount.getBytes("UTF-8")) [FD]
Line_21 $$ if (qop.length() > 0) --> Line_23 $$ md.update(":".getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_23 $$ md.update(":".getBytes("UTF-8")) [FD]
Line_21 $$ if (qop.length() > 0) --> Line_24 $$ md.update(clientNonce.getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_24 $$ md.update(clientNonce.getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_24 $$ md.update(clientNonce.getBytes("UTF-8")) [FD]
Line_21 $$ if (qop.length() > 0) --> Line_25 $$ md.update(":".getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_25 $$ md.update(":".getBytes("UTF-8")) [FD]
Line_21 $$ if (qop.length() > 0) --> Line_26 $$ md.update(qop.getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_26 $$ md.update(qop.getBytes("UTF-8")) [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_26 $$ md.update(qop.getBytes("UTF-8")) [FD]
Line_21 $$ if (qop.length() > 0) --> Line_27 $$ md.update(":".getBytes("UTF-8")) [CD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_27 $$ md.update(":".getBytes("UTF-8")) [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_29 $$ md.update(new String(HA2Hex).getBytes("UTF-8")) [FD]
Line_4 $$ byte[] respHash --> Line_30 $$ respHash = md.digest() [FD]
Line_7 $$ MessageDigest md = MessageDigest.getInstance("MD5") --> Line_30 $$ respHash = md.digest() [FD]
Line_2 $$ char[] DigestCalcResponse(char[] HA1, String serverNonce, String nonceCount, String clientNonce, String qop, String method, String digestUri, boolean clientResponseFlag) throws SaslException --> Line_36 $$ return convertToHex(respHash) [CD]
Line_4 $$ byte[] respHash --> Line_36 $$ return convertToHex(respHash) [FD]
Line_30 $$ respHash = md.digest() --> Line_36 $$ return convertToHex(respHash) [FD]
