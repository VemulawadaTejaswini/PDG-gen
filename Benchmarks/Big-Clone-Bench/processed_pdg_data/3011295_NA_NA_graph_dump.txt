Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_3 $$ Options options = new Options() [CD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_4 $$ options.addOption(new CommandLineOptionBuilder("ace", "path to ace file").isRequired(true).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_4 $$ options.addOption(new CommandLineOptionBuilder("ace", "path to ace file").isRequired(true).build()) [FD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_5 $$ options.addOption(new CommandLineOptionBuilder("phd", "path to phd file").isRequired(true).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_5 $$ options.addOption(new CommandLineOptionBuilder("phd", "path to phd file").isRequired(true).build()) [FD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_6 $$ options.addOption(new CommandLineOptionBuilder("out", "path to new ace file").isRequired(true).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_6 $$ options.addOption(new CommandLineOptionBuilder("out", "path to new ace file").isRequired(true).build()) [FD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_7 $$ options.addOption(new CommandLineOptionBuilder("min_sanger", "min sanger end coveage default =" + DEFAULT_MIN_SANGER_END_CLONE_CVG).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_7 $$ options.addOption(new CommandLineOptionBuilder("min_sanger", "min sanger end coveage default =" + DEFAULT_MIN_SANGER_END_CLONE_CVG).build()) [FD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_8 $$ options.addOption(new CommandLineOptionBuilder("min_biDriection", "min bi directional end coveage default =" + DEFAULT_MIN_BI_DIRECTIONAL_END_COVERAGE).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_8 $$ options.addOption(new CommandLineOptionBuilder("min_biDriection", "min bi directional end coveage default =" + DEFAULT_MIN_BI_DIRECTIONAL_END_COVERAGE).build()) [FD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_9 $$ options.addOption(new CommandLineOptionBuilder("ignore_threshold", "min end coveage threshold to stop trying to trim default =" + DEFAULT_IGNORE_END_CVG_THRESHOLD).build()) [CD]
Line_3 $$ Options options = new Options() --> Line_9 $$ options.addOption(new CommandLineOptionBuilder("ignore_threshold", "min end coveage threshold to stop trying to trim default =" + DEFAULT_IGNORE_END_CVG_THRESHOLD).build()) [FD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_10 $$ CommandLine commandLine [CD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_11 $$ PhdDataStore phdDataStore = null [CD]
Line_2 $$ public static void main(String args[]) throws IOException, TrimmerException, DataStoreException --> Line_12 $$ AceContigDataStore datastore = null [CD]
Line_10 $$ CommandLine commandLine --> Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) [FD]
Line_3 $$ Options options = new Options() --> Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) [FD]
Line_10 $$ CommandLine commandLine --> Line_15 $$ int minSangerEndCloneCoverage = commandLine.hasOption("min_sanger") ? Integer.parseInt(commandLine.getOptionValue("min_sanger")) : DEFAULT_MIN_SANGER_END_CLONE_CVG [FD]
Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_15 $$ int minSangerEndCloneCoverage = commandLine.hasOption("min_sanger") ? Integer.parseInt(commandLine.getOptionValue("min_sanger")) : DEFAULT_MIN_SANGER_END_CLONE_CVG [FD]
Line_10 $$ CommandLine commandLine --> Line_16 $$ int minBiDirectionalEndCoverage = commandLine.hasOption("min_biDriection") ? Integer.parseInt(commandLine.getOptionValue("min_biDriection")) : DEFAULT_MIN_BI_DIRECTIONAL_END_COVERAGE [FD]
Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_16 $$ int minBiDirectionalEndCoverage = commandLine.hasOption("min_biDriection") ? Integer.parseInt(commandLine.getOptionValue("min_biDriection")) : DEFAULT_MIN_BI_DIRECTIONAL_END_COVERAGE [FD]
Line_10 $$ CommandLine commandLine --> Line_17 $$ int ignoreThresholdEndCoverage = commandLine.hasOption("ignore_threshold") ? Integer.parseInt(commandLine.getOptionValue("ignore_threshold")) : DEFAULT_IGNORE_END_CVG_THRESHOLD [FD]
Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_17 $$ int ignoreThresholdEndCoverage = commandLine.hasOption("ignore_threshold") ? Integer.parseInt(commandLine.getOptionValue("ignore_threshold")) : DEFAULT_IGNORE_END_CVG_THRESHOLD [FD]
Line_10 $$ CommandLine commandLine --> Line_19 $$ File aceFile = new File(commandLine.getOptionValue("ace")) [FD]
Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_19 $$ File aceFile = new File(commandLine.getOptionValue("ace")) [FD]
Line_10 $$ CommandLine commandLine --> Line_20 $$ File phdFile = new File(commandLine.getOptionValue("phd")) [FD]
Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_20 $$ File phdFile = new File(commandLine.getOptionValue("phd")) [FD]
Line_11 $$ PhdDataStore phdDataStore = null --> Line_21 $$ phdDataStore = new DefaultPhdFileDataStore(phdFile) [FD]
Line_12 $$ AceContigDataStore datastore = null --> Line_22 $$ datastore = new IndexedAceFileDataStore(aceFile) [FD]
Line_23 $$ File tempFile = File.createTempFile("nextGenClosureAceTrimmer", ".ace") --> Line_24 $$ tempFile.deleteOnExit() [FD]
Line_18 $$ AceContigTrimmer trimmer = new NextGenClosureAceContigTrimmer(minSangerEndCloneCoverage, minBiDirectionalEndCoverage, ignoreThresholdEndCoverage) --> Line_29 $$ AceContig trimmedAceContig = trimmer.trimContig(contig) [FD]
Line_28 $$ for (AceContig contig : datastore) --> Line_29 $$ AceContig trimmedAceContig = trimmer.trimContig(contig) [FD]
Line_29 $$ AceContig trimmedAceContig = trimmer.trimContig(contig) --> Line_30 $$ if (trimmedAceContig != null) [FD]
Line_30 $$ if (trimmedAceContig != null) --> Line_31 $$ numberOfContigs++ [CD]
Line_26 $$ int numberOfContigs = 0 --> Line_31 $$ numberOfContigs++ [FD]
Line_30 $$ if (trimmedAceContig != null) --> Line_32 $$ numberOfTotalReads += trimmedAceContig.getNumberOfReads() [CD]
Line_27 $$ int numberOfTotalReads = 0 --> Line_32 $$ numberOfTotalReads += trimmedAceContig.getNumberOfReads() [FD]
Line_29 $$ AceContig trimmedAceContig = trimmer.trimContig(contig) --> Line_32 $$ numberOfTotalReads += trimmedAceContig.getNumberOfReads() [FD]
Line_30 $$ if (trimmedAceContig != null) --> Line_33 $$ AceFileWriter.writeAceFile(trimmedAceContig, phdDataStore, tempOut) [CD]
Line_29 $$ AceContig trimmedAceContig = trimmer.trimContig(contig) --> Line_33 $$ AceFileWriter.writeAceFile(trimmedAceContig, phdDataStore, tempOut) [FD]
Line_11 $$ PhdDataStore phdDataStore = null --> Line_33 $$ AceFileWriter.writeAceFile(trimmedAceContig, phdDataStore, tempOut) [FD]
Line_21 $$ phdDataStore = new DefaultPhdFileDataStore(phdFile) --> Line_33 $$ AceFileWriter.writeAceFile(trimmedAceContig, phdDataStore, tempOut) [FD]
Line_25 $$ OutputStream tempOut = new FileOutputStream(tempFile) --> Line_33 $$ AceFileWriter.writeAceFile(trimmedAceContig, phdDataStore, tempOut) [FD]
Line_25 $$ OutputStream tempOut = new FileOutputStream(tempFile) --> Line_36 $$ IOUtil.closeAndIgnoreErrors(tempOut) [FD]
Line_10 $$ CommandLine commandLine --> Line_37 $$ OutputStream masterAceOut = new FileOutputStream(new File(commandLine.getOptionValue("out"))) [FD]
Line_14 $$ commandLine = CommandLineUtils.parseCommandLine(options, args) --> Line_37 $$ OutputStream masterAceOut = new FileOutputStream(new File(commandLine.getOptionValue("out"))) [FD]
Line_37 $$ OutputStream masterAceOut = new FileOutputStream(new File(commandLine.getOptionValue("out"))) --> Line_38 $$ masterAceOut.write(String.format("AS %d %d%n", numberOfContigs, numberOfTotalReads).getBytes()) [FD]
Line_26 $$ int numberOfContigs = 0 --> Line_38 $$ masterAceOut.write(String.format("AS %d %d%n", numberOfContigs, numberOfTotalReads).getBytes()) [FD]
Line_27 $$ int numberOfTotalReads = 0 --> Line_38 $$ masterAceOut.write(String.format("AS %d %d%n", numberOfContigs, numberOfTotalReads).getBytes()) [FD]
Line_32 $$ numberOfTotalReads += trimmedAceContig.getNumberOfReads() --> Line_38 $$ masterAceOut.write(String.format("AS %d %d%n", numberOfContigs, numberOfTotalReads).getBytes()) [FD]
Line_39 $$ InputStream tempInput = new FileInputStream(tempFile) --> Line_40 $$ IOUtils.copy(tempInput, masterAceOut) [FD]
Line_37 $$ OutputStream masterAceOut = new FileOutputStream(new File(commandLine.getOptionValue("out"))) --> Line_40 $$ IOUtils.copy(tempInput, masterAceOut) [FD]
Line_3 $$ Options options = new Options() --> Line_43 $$ printHelp(options) [FD]
Line_11 $$ PhdDataStore phdDataStore = null --> Line_45 $$ IOUtil.closeAndIgnoreErrors(phdDataStore, datastore) [FD]
Line_21 $$ phdDataStore = new DefaultPhdFileDataStore(phdFile) --> Line_45 $$ IOUtil.closeAndIgnoreErrors(phdDataStore, datastore) [FD]
Line_12 $$ AceContigDataStore datastore = null --> Line_45 $$ IOUtil.closeAndIgnoreErrors(phdDataStore, datastore) [FD]
Line_22 $$ datastore = new IndexedAceFileDataStore(aceFile) --> Line_45 $$ IOUtil.closeAndIgnoreErrors(phdDataStore, datastore) [FD]
