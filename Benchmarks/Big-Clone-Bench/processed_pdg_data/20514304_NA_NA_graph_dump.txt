Line_2 $$ private Map<String, Object> _request(String method, String path, Map<String, Object> body, JSONRecognizer... recognizers) throws IOException, TwinException --> Line_3 $$ String uri = url + path [CD]
Line_2 $$ private Map<String, Object> _request(String method, String path, Map<String, Object> body, JSONRecognizer... recognizers) throws IOException, TwinException --> Line_4 $$ HttpRequest request [CD]
Line_2 $$ private Map<String, Object> _request(String method, String path, Map<String, Object> body, JSONRecognizer... recognizers) throws IOException, TwinException --> Line_5 $$ if (body == null) [CD]
Line_2 $$ private Map<String, Object> _request(String method, String path, Map<String, Object> body, JSONRecognizer... recognizers) throws IOException, TwinException --> Line_5 $$ if (body == null) [FD]
Line_5 $$ if (body == null) --> Line_6 $$ BasicHttpRequest r = new BasicHttpRequest(method, uri) [CD]
Line_5 $$ if (body == null) --> Line_7 $$ request = r [CD]
Line_4 $$ HttpRequest request --> Line_7 $$ request = r [FD]
Line_6 $$ BasicHttpRequest r = new BasicHttpRequest(method, uri) --> Line_7 $$ request = r [FD]
Line_5 $$ if (body == null) --> Line_10 $$ StringEntity entity [CD]
Line_10 $$ StringEntity entity --> Line_12 $$ entity = new StringEntity(JSON.encode(body), "utf-8") [FD]
Line_2 $$ private Map<String, Object> _request(String method, String path, Map<String, Object> body, JSONRecognizer... recognizers) throws IOException, TwinException --> Line_12 $$ entity = new StringEntity(JSON.encode(body), "utf-8") [FD]
Line_5 $$ if (body == null) --> Line_16 $$ entity.setContentType("application/json; charset=utf-8") [CD]
Line_10 $$ StringEntity entity --> Line_16 $$ entity.setContentType("application/json; charset=utf-8") [FD]
Line_12 $$ entity = new StringEntity(JSON.encode(body), "utf-8") --> Line_16 $$ entity.setContentType("application/json; charset=utf-8") [FD]
Line_5 $$ if (body == null) --> Line_17 $$ r.setEntity(entity) [CD]
Line_6 $$ BasicHttpRequest r = new BasicHttpRequest(method, uri) --> Line_17 $$ r.setEntity(entity) [FD]
Line_10 $$ StringEntity entity --> Line_17 $$ r.setEntity(entity) [FD]
Line_12 $$ entity = new StringEntity(JSON.encode(body), "utf-8") --> Line_17 $$ r.setEntity(entity) [FD]
Line_5 $$ if (body == null) --> Line_18 $$ request = r [CD]
Line_4 $$ HttpRequest request --> Line_18 $$ request = r [FD]
Line_7 $$ request = r --> Line_18 $$ request = r [FD]
Line_6 $$ BasicHttpRequest r = new BasicHttpRequest(method, uri) --> Line_18 $$ request = r [FD]
Line_2 $$ private Map<String, Object> _request(String method, String path, Map<String, Object> body, JSONRecognizer... recognizers) throws IOException, TwinException --> Line_20 $$ HttpClient client = getClient() [CD]
Line_20 $$ HttpClient client = getClient() --> Line_22 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request) [FD]
Line_4 $$ HttpRequest request --> Line_22 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request) [FD]
Line_7 $$ request = r --> Line_22 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request) [FD]
Line_18 $$ request = r --> Line_22 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request) [FD]
Line_22 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request) --> Line_23 $$ HttpEntity entity = response.getEntity() [FD]
Line_10 $$ StringEntity entity --> Line_24 $$ if (entity == null) [FD]
Line_12 $$ entity = new StringEntity(JSON.encode(body), "utf-8") --> Line_24 $$ if (entity == null) [FD]
Line_10 $$ StringEntity entity --> Line_25 $$ String contentType = entity.getContentType().getValue() [FD]
Line_12 $$ entity = new StringEntity(JSON.encode(body), "utf-8") --> Line_25 $$ String contentType = entity.getContentType().getValue() [FD]
Line_25 $$ String contentType = entity.getContentType().getValue() --> Line_26 $$ boolean isJson = (contentType != null) && ("application/json".equals(contentType) || contentType.startsWith("application/json;")) [FD]
Line_10 $$ StringEntity entity --> Line_28 $$ InputStream in = entity.getContent() [FD]
Line_12 $$ entity = new StringEntity(JSON.encode(body), "utf-8") --> Line_28 $$ InputStream in = entity.getContent() [FD]
Line_33 $$ int read --> Line_34 $$ while ((read = r.read(buf, 0, buf.length)) >= 0) sb.append(buf, 0, read) [FD]
Line_6 $$ BasicHttpRequest r = new BasicHttpRequest(method, uri) --> Line_34 $$ while ((read = r.read(buf, 0, buf.length)) >= 0) sb.append(buf, 0, read) [FD]
Line_32 $$ char[] buf = new char[256] --> Line_34 $$ while ((read = r.read(buf, 0, buf.length)) >= 0) sb.append(buf, 0, read) [FD]
Line_31 $$ StringBuilder sb = new StringBuilder() --> Line_34 $$ while ((read = r.read(buf, 0, buf.length)) >= 0) sb.append(buf, 0, read) [FD]
Line_6 $$ BasicHttpRequest r = new BasicHttpRequest(method, uri) --> Line_35 $$ r.close() [FD]
Line_27 $$ String result = null --> Line_36 $$ result = sb.toString() [FD]
Line_31 $$ StringBuilder sb = new StringBuilder() --> Line_36 $$ result = sb.toString() [FD]
Line_28 $$ InputStream in = entity.getContent() --> Line_39 $$ in.close() [FD]
Line_22 $$ HttpResponse response = client.execute(new HttpHost(url.getHost(), url.getPort()), request) --> Line_43 $$ int code = response.getStatusLine().getStatusCode() [FD]
Line_43 $$ int code = response.getStatusLine().getStatusCode() --> Line_44 $$ if (code >= 400) [FD]
Line_44 $$ if (code >= 400) --> Line_45 $$ if (isJson) [CD]
Line_27 $$ String result = null --> Line_47 $$ throw deserializeException((Map<String, Object>) JSON.decode(result)) [FD]
Line_36 $$ result = sb.toString() --> Line_47 $$ throw deserializeException((Map<String, Object>) JSON.decode(result)) [FD]
Line_44 $$ if (code >= 400) --> Line_52 $$ if (code == 404) [CD]
Line_43 $$ int code = response.getStatusLine().getStatusCode() --> Line_52 $$ if (code == 404) [FD]
Line_26 $$ boolean isJson = (contentType != null) && ("application/json".equals(contentType) || contentType.startsWith("application/json;")) --> Line_54 $$ if (!isJson) [FD]
Line_27 $$ String result = null --> Line_56 $$ return (Map<String, Object>) JSON.decode(result, recognizers) [FD]
Line_36 $$ result = sb.toString() --> Line_56 $$ return (Map<String, Object>) JSON.decode(result, recognizers) [FD]
Line_2 $$ private Map<String, Object> _request(String method, String path, Map<String, Object> body, JSONRecognizer... recognizers) throws IOException, TwinException --> Line_56 $$ return (Map<String, Object>) JSON.decode(result, recognizers) [FD]
