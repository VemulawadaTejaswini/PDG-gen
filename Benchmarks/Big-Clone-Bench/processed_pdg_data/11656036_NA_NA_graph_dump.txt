Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_3 $$ ExternProtoDeclareImport epdi = new ExternProtoDeclareImport() [CD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_4 $$ HashMap<String, ProtoDeclareImport> protoMap = X3DImport.getTheImport().getCurrentParser().getProtoMap() [CD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_5 $$ boolean loadedFromWeb = false [CD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_6 $$ File f = null [CD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_7 $$ URL url = null [CD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_8 $$ List<String> urls = externProtoDeclare.getUrl() [CD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_8 $$ List<String> urls = externProtoDeclare.getUrl() [FD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_9 $$ String tmpUrls = urls.toString() [CD]
Line_8 $$ List<String> urls = externProtoDeclare.getUrl() --> Line_9 $$ String tmpUrls = urls.toString() [FD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_10 $$ urls = Util.splitStringToListOfStrings(tmpUrls) [CD]
Line_8 $$ List<String> urls = externProtoDeclare.getUrl() --> Line_10 $$ urls = Util.splitStringToListOfStrings(tmpUrls) [FD]
Line_9 $$ String tmpUrls = urls.toString() --> Line_10 $$ urls = Util.splitStringToListOfStrings(tmpUrls) [FD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_11 $$ String protoName = null [CD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_12 $$ int urlCount = urls.size() [CD]
Line_8 $$ List<String> urls = externProtoDeclare.getUrl() --> Line_12 $$ int urlCount = urls.size() [FD]
Line_10 $$ urls = Util.splitStringToListOfStrings(tmpUrls) --> Line_12 $$ int urlCount = urls.size() [FD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_13 $$ for (int urlIndex = 0; urlIndex < urlCount; urlIndex++) [CD]
Line_12 $$ int urlCount = urls.size() --> Line_13 $$ for (int urlIndex = 0; urlIndex < urlCount; urlIndex++) [FD]
Line_8 $$ List<String> urls = externProtoDeclare.getUrl() --> Line_15 $$ String path = urls.get(urlIndex) [FD]
Line_10 $$ urls = Util.splitStringToListOfStrings(tmpUrls) --> Line_15 $$ String path = urls.get(urlIndex) [FD]
Line_13 $$ for (int urlIndex = 0; urlIndex < urlCount; urlIndex++) --> Line_15 $$ String path = urls.get(urlIndex) [FD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) [FD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_17 $$ int hashMarkPos = path.indexOf("#") [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_17 $$ int hashMarkPos = path.indexOf("#") [FD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_18 $$ int urlLength = path.length() [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_18 $$ int urlLength = path.length() [FD]
Line_17 $$ int hashMarkPos = path.indexOf("#") --> Line_19 $$ path = path.substring(0, urlLength) [FD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_19 $$ path = path.substring(0, urlLength) [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_19 $$ path = path.substring(0, urlLength) [FD]
Line_18 $$ int urlLength = path.length() --> Line_19 $$ path = path.substring(0, urlLength) [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [CD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [FD]
Line_11 $$ String protoName = null --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [FD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [FD]
Line_18 $$ int urlLength = path.length() --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_21 $$ path = path.substring(0, hashMarkPos) [CD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_21 $$ path = path.substring(0, hashMarkPos) [FD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_21 $$ path = path.substring(0, hashMarkPos) [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_21 $$ path = path.substring(0, hashMarkPos) [FD]
Line_17 $$ int hashMarkPos = path.indexOf("#") --> Line_21 $$ path = path.substring(0, hashMarkPos) [FD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_23 $$ if (path.toLowerCase().startsWith("http://")) [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_23 $$ if (path.toLowerCase().startsWith("http://")) [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_23 $$ if (path.toLowerCase().startsWith("http://")) [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_23 $$ if (path.toLowerCase().startsWith("http://")) [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_24 $$ String filename = path.substring(path.lastIndexOf("/") + 1, path.lastIndexOf(".")) [CD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_24 $$ String filename = path.substring(path.lastIndexOf("/") + 1, path.lastIndexOf(".")) [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_24 $$ String filename = path.substring(path.lastIndexOf("/") + 1, path.lastIndexOf(".")) [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_24 $$ String filename = path.substring(path.lastIndexOf("/") + 1, path.lastIndexOf(".")) [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_24 $$ String filename = path.substring(path.lastIndexOf("/") + 1, path.lastIndexOf(".")) [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_25 $$ String fileext = path.substring(path.lastIndexOf("."), path.length()) [CD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_25 $$ String fileext = path.substring(path.lastIndexOf("."), path.length()) [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_25 $$ String fileext = path.substring(path.lastIndexOf("."), path.length()) [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_25 $$ String fileext = path.substring(path.lastIndexOf("."), path.length()) [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_25 $$ String fileext = path.substring(path.lastIndexOf("."), path.length()) [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_26 $$ f = File.createTempFile(filename, fileext) [CD]
Line_6 $$ File f = null --> Line_26 $$ f = File.createTempFile(filename, fileext) [FD]
Line_24 $$ String filename = path.substring(path.lastIndexOf("/") + 1, path.lastIndexOf(".")) --> Line_26 $$ f = File.createTempFile(filename, fileext) [FD]
Line_25 $$ String fileext = path.substring(path.lastIndexOf("."), path.length()) --> Line_26 $$ f = File.createTempFile(filename, fileext) [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_27 $$ url = new URL(path) [CD]
Line_7 $$ URL url = null --> Line_27 $$ url = new URL(path) [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_28 $$ InputStream is = url.openStream() [CD]
Line_27 $$ url = new URL(path) --> Line_28 $$ InputStream is = url.openStream() [FD]
Line_7 $$ URL url = null --> Line_28 $$ InputStream is = url.openStream() [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_29 $$ FileOutputStream os = new FileOutputStream(f) [CD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_30 $$ byte[] buffer = new byte[0xFFFF] [CD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_31 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len) [CD]
Line_28 $$ InputStream is = url.openStream() --> Line_31 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len) [FD]
Line_30 $$ byte[] buffer = new byte[0xFFFF] --> Line_31 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len) [FD]
Line_29 $$ FileOutputStream os = new FileOutputStream(f) --> Line_31 $$ for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len) [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_32 $$ is.close() [CD]
Line_28 $$ InputStream is = url.openStream() --> Line_32 $$ is.close() [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_33 $$ os.close() [CD]
Line_29 $$ FileOutputStream os = new FileOutputStream(f) --> Line_33 $$ os.close() [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_34 $$ url = f.toURI().toURL() [CD]
Line_27 $$ url = new URL(path) --> Line_34 $$ url = f.toURI().toURL() [FD]
Line_7 $$ URL url = null --> Line_34 $$ url = f.toURI().toURL() [FD]
Line_26 $$ f = File.createTempFile(filename, fileext) --> Line_34 $$ url = f.toURI().toURL() [FD]
Line_6 $$ File f = null --> Line_34 $$ url = f.toURI().toURL() [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_35 $$ loadedFromWeb = true [CD]
Line_5 $$ boolean loadedFromWeb = false --> Line_35 $$ loadedFromWeb = true [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) [CD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) [FD]
Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) --> Line_39 $$ File x3dfile = X3DImport.getTheImport().getCurrentParser().getFile() [CD]
Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) --> Line_40 $$ path = Util.getRealPath(x3dfile) + path [CD]
Line_15 $$ String path = urls.get(urlIndex) --> Line_40 $$ path = Util.getRealPath(x3dfile) + path [FD]
Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) --> Line_40 $$ path = Util.getRealPath(x3dfile) + path [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_40 $$ path = Util.getRealPath(x3dfile) + path [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_40 $$ path = Util.getRealPath(x3dfile) + path [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_42 $$ f = new File(path) [CD]
Line_26 $$ f = File.createTempFile(filename, fileext) --> Line_42 $$ f = new File(path) [FD]
Line_6 $$ File f = null --> Line_42 $$ f = new File(path) [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_43 $$ url = f.toURI().toURL() [CD]
Line_27 $$ url = new URL(path) --> Line_43 $$ url = f.toURI().toURL() [FD]
Line_34 $$ url = f.toURI().toURL() --> Line_43 $$ url = f.toURI().toURL() [FD]
Line_7 $$ URL url = null --> Line_43 $$ url = f.toURI().toURL() [FD]
Line_26 $$ f = File.createTempFile(filename, fileext) --> Line_43 $$ url = f.toURI().toURL() [FD]
Line_42 $$ f = new File(path) --> Line_43 $$ url = f.toURI().toURL() [FD]
Line_6 $$ File f = null --> Line_43 $$ url = f.toURI().toURL() [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_44 $$ Object testContent = url.getContent() [CD]
Line_27 $$ url = new URL(path) --> Line_44 $$ Object testContent = url.getContent() [FD]
Line_34 $$ url = f.toURI().toURL() --> Line_44 $$ Object testContent = url.getContent() [FD]
Line_43 $$ url = f.toURI().toURL() --> Line_44 $$ Object testContent = url.getContent() [FD]
Line_7 $$ URL url = null --> Line_44 $$ Object testContent = url.getContent() [FD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_45 $$ if (testContent == null) [CD]
Line_23 $$ if (path.toLowerCase().startsWith("http://")) --> Line_46 $$ loadedFromWeb = false [CD]
Line_35 $$ loadedFromWeb = true --> Line_46 $$ loadedFromWeb = false [FD]
Line_5 $$ boolean loadedFromWeb = false --> Line_46 $$ loadedFromWeb = false [FD]
Line_26 $$ f = File.createTempFile(filename, fileext) --> Line_50 $$ x3dDocument = X3DDocument.Factory.parse(f) [FD]
Line_42 $$ f = new File(path) --> Line_50 $$ x3dDocument = X3DDocument.Factory.parse(f) [FD]
Line_6 $$ File f = null --> Line_50 $$ x3dDocument = X3DDocument.Factory.parse(f) [FD]
Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) --> Line_61 $$ if (protoName == null) [FD]
Line_11 $$ String protoName = null --> Line_61 $$ if (protoName == null) [FD]
Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) --> Line_65 $$ if (proto.getName().equals(protoName)) [FD]
Line_11 $$ String protoName = null --> Line_65 $$ if (proto.getName().equals(protoName)) [FD]
Line_4 $$ HashMap<String, ProtoDeclareImport> protoMap = X3DImport.getTheImport().getCurrentParser().getProtoMap() --> Line_74 $$ protoMap.put(externProtoDeclare.getName(), epdi) [FD]
Line_3 $$ ExternProtoDeclareImport epdi = new ExternProtoDeclareImport() --> Line_74 $$ protoMap.put(externProtoDeclare.getName(), epdi) [FD]
Line_2 $$ public static void createInstance(ExternProtoDeclare externProtoDeclare) --> Line_74 $$ protoMap.put(externProtoDeclare.getName(), epdi) [FD]
Line_35 $$ loadedFromWeb = true --> Line_79 $$ if (loadedFromWeb && f != null) [FD]
Line_46 $$ loadedFromWeb = false --> Line_79 $$ if (loadedFromWeb && f != null) [FD]
Line_5 $$ boolean loadedFromWeb = false --> Line_79 $$ if (loadedFromWeb && f != null) [FD]
Line_79 $$ if (loadedFromWeb && f != null) --> Line_80 $$ f.delete() [CD]
Line_26 $$ f = File.createTempFile(filename, fileext) --> Line_80 $$ f.delete() [FD]
Line_42 $$ f = new File(path) --> Line_80 $$ f.delete() [FD]
Line_6 $$ File f = null --> Line_80 $$ f.delete() [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_16 $$ if (path.startsWith("\"") && path.endsWith("\"")) [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_17 $$ int hashMarkPos = path.indexOf("#") [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_17 $$ int hashMarkPos = path.indexOf("#") [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_17 $$ int hashMarkPos = path.indexOf("#") [FD]
Line_19 $$ path = path.substring(0, urlLength) --> Line_18 $$ int urlLength = path.length() [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_18 $$ int urlLength = path.length() [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_18 $$ int urlLength = path.length() [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_19 $$ path = path.substring(0, urlLength) [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_19 $$ path = path.substring(0, urlLength) [FD]
Line_21 $$ path = path.substring(0, hashMarkPos) --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_20 $$ protoName = path.substring(hashMarkPos + 1, urlLength) [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_21 $$ path = path.substring(0, hashMarkPos) [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_23 $$ if (path.toLowerCase().startsWith("http://")) [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_24 $$ String filename = path.substring(path.lastIndexOf("/") + 1, path.lastIndexOf(".")) [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_25 $$ String fileext = path.substring(path.lastIndexOf("."), path.length()) [FD]
Line_34 $$ url = f.toURI().toURL() --> Line_28 $$ InputStream is = url.openStream() [FD]
Line_43 $$ url = f.toURI().toURL() --> Line_28 $$ InputStream is = url.openStream() [FD]
Line_42 $$ f = new File(path) --> Line_34 $$ url = f.toURI().toURL() [FD]
Line_40 $$ path = Util.getRealPath(x3dfile) + path --> Line_37 $$ if (path.startsWith("/") || (path.charAt(1) == ':')) [FD]
