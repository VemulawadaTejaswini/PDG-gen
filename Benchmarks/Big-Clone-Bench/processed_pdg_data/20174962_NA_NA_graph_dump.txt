Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_3 $$ Assert.notNull(callback, "callback cant be null") [CD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_3 $$ Assert.notNull(callback, "callback cant be null") [FD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_4 $$ URL url = new URL(path) [CD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [CD]
Line_4 $$ URL url = new URL(path) --> Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_6 $$ connection.setDoInput(true) [CD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_6 $$ connection.setDoInput(true) [FD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_7 $$ connection.setDoOutput(true) [CD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_7 $$ connection.setDoOutput(true) [FD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_8 $$ connection.setDefaultUseCaches(false) [CD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_8 $$ connection.setDefaultUseCaches(false) [FD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_9 $$ connection.setRequestMethod("POST") [CD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_9 $$ connection.setRequestMethod("POST") [FD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_10 $$ connection.connect() [CD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_10 $$ connection.connect() [FD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_12 $$ ObjectOutputStream output = new ObjectOutputStream(connection.getOutputStream()) [FD]
Line_12 $$ ObjectOutputStream output = new ObjectOutputStream(connection.getOutputStream()) --> Line_14 $$ output.writeObject(request) [FD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_14 $$ output.writeObject(request) [FD]
Line_12 $$ ObjectOutputStream output = new ObjectOutputStream(connection.getOutputStream()) --> Line_15 $$ output.flush() [FD]
Line_12 $$ ObjectOutputStream output = new ObjectOutputStream(connection.getOutputStream()) --> Line_17 $$ output.close() [FD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_19 $$ ObjectInputStream input = new ObjectInputStream(connection.getInputStream()) [FD]
Line_21 $$ for (; ; ) --> Line_22 $$ Object result = input.readObject() [CD]
Line_19 $$ ObjectInputStream input = new ObjectInputStream(connection.getInputStream()) --> Line_22 $$ Object result = input.readObject() [FD]
Line_21 $$ for (; ; ) --> Line_23 $$ if (result == null) [CD]
Line_22 $$ Object result = input.readObject() --> Line_23 $$ if (result == null) [FD]
Line_21 $$ for (; ; ) --> Line_26 $$ callback.onSuccess(result) [CD]
Line_2 $$ protected void invoke(String path, Object request, Callback<Object> callback) throws IOException, ClassNotFoundException --> Line_26 $$ callback.onSuccess(result) [FD]
Line_22 $$ Object result = input.readObject() --> Line_26 $$ callback.onSuccess(result) [FD]
Line_19 $$ ObjectInputStream input = new ObjectInputStream(connection.getInputStream()) --> Line_29 $$ input.close() [FD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_32 $$ connection.disconnect() [FD]
