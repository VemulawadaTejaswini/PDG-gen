Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_3 $$ logger.finer("Need to move audio file to accomodate tag") [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_4 $$ FileChannel fcIn [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_5 $$ FileChannel fcOut [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_6 $$ ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize]) [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_7 $$ File paddedFile = File.createTempFile("temp", ".mp3", file.getParentFile()) [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_7 $$ File paddedFile = File.createTempFile("temp", ".mp3", file.getParentFile()) [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_8 $$ fcOut = new FileOutputStream(paddedFile).getChannel() [CD]
Line_5 $$ FileChannel fcOut --> Line_8 $$ fcOut = new FileOutputStream(paddedFile).getChannel() [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_9 $$ fcIn = new FileInputStream(file).getChannel() [CD]
Line_4 $$ FileChannel fcIn --> Line_9 $$ fcIn = new FileInputStream(file).getChannel() [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_10 $$ long written = (long) fcOut.write(paddingBuffer) [CD]
Line_5 $$ FileChannel fcOut --> Line_10 $$ long written = (long) fcOut.write(paddingBuffer) [FD]
Line_8 $$ fcOut = new FileOutputStream(paddedFile).getChannel() --> Line_10 $$ long written = (long) fcOut.write(paddingBuffer) [FD]
Line_6 $$ ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize]) --> Line_10 $$ long written = (long) fcOut.write(paddingBuffer) [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_11 $$ logger.finer("Copying:" + (file.length() - audioStart) + "bytes") [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_11 $$ logger.finer("Copying:" + (file.length() - audioStart) + "bytes") [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_12 $$ long audiolength = file.length() - audioStart [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_12 $$ long audiolength = file.length() - audioStart [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) [CD]
Line_12 $$ long audiolength = file.length() - audioStart --> Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) [FD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) [CD]
Line_4 $$ FileChannel fcIn --> Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) [FD]
Line_9 $$ fcIn = new FileInputStream(file).getChannel() --> Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) [FD]
Line_12 $$ long audiolength = file.length() - audioStart --> Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) [FD]
Line_5 $$ FileChannel fcOut --> Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) [FD]
Line_8 $$ fcOut = new FileOutputStream(paddedFile).getChannel() --> Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) [FD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_15 $$ logger.finer("Written padding:" + written + " Data:" + written2) [CD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_16 $$ if (written2 != audiolength) [CD]
Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) --> Line_16 $$ if (written2 != audiolength) [FD]
Line_12 $$ long audiolength = file.length() - audioStart --> Line_16 $$ if (written2 != audiolength) [FD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_20 $$ long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE [CD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_21 $$ long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE [CD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_23 $$ for (int i = 0; i < noOfChunks; i++) [CD]
Line_20 $$ long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE --> Line_23 $$ for (int i = 0; i < noOfChunks; i++) [FD]
Line_23 $$ for (int i = 0; i < noOfChunks; i++) --> Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) [CD]
Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) --> Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) [FD]
Line_4 $$ FileChannel fcIn --> Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) [FD]
Line_9 $$ fcIn = new FileInputStream(file).getChannel() --> Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) [FD]
Line_5 $$ FileChannel fcOut --> Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) [FD]
Line_8 $$ fcOut = new FileOutputStream(paddedFile).getChannel() --> Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) [FD]
Line_23 $$ for (int i = 0; i < noOfChunks; i++) --> Line_25 $$ Runtime.getRuntime().gc() [CD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [CD]
Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [FD]
Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [FD]
Line_4 $$ FileChannel fcIn --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [FD]
Line_9 $$ fcIn = new FileInputStream(file).getChannel() --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [FD]
Line_21 $$ long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [FD]
Line_5 $$ FileChannel fcOut --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [FD]
Line_8 $$ fcOut = new FileOutputStream(paddedFile).getChannel() --> Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) [FD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_28 $$ logger.finer("Written padding:" + written + " Data:" + written2) [CD]
Line_13 $$ if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) --> Line_29 $$ if (written2 != audiolength) [CD]
Line_24 $$ written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut) --> Line_29 $$ if (written2 != audiolength) [FD]
Line_14 $$ long written2 = fcIn.transferTo(audioStart, audiolength, fcOut) --> Line_29 $$ if (written2 != audiolength) [FD]
Line_27 $$ written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut) --> Line_29 $$ if (written2 != audiolength) [FD]
Line_12 $$ long audiolength = file.length() - audioStart --> Line_29 $$ if (written2 != audiolength) [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_33 $$ long lastModified = file.lastModified() [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_33 $$ long lastModified = file.lastModified() [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_34 $$ fcIn.close() [CD]
Line_4 $$ FileChannel fcIn --> Line_34 $$ fcIn.close() [FD]
Line_9 $$ fcIn = new FileInputStream(file).getChannel() --> Line_34 $$ fcIn.close() [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_35 $$ fcOut.close() [CD]
Line_5 $$ FileChannel fcOut --> Line_35 $$ fcOut.close() [FD]
Line_8 $$ fcOut = new FileOutputStream(paddedFile).getChannel() --> Line_35 $$ fcOut.close() [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_36 $$ file.delete() [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_36 $$ file.delete() [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_37 $$ paddedFile.renameTo(file) [CD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_37 $$ paddedFile.renameTo(file) [FD]
Line_7 $$ File paddedFile = File.createTempFile("temp", ".mp3", file.getParentFile()) --> Line_37 $$ paddedFile.renameTo(file) [FD]
Line_2 $$ public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException --> Line_38 $$ paddedFile.setLastModified(lastModified) [CD]
Line_7 $$ File paddedFile = File.createTempFile("temp", ".mp3", file.getParentFile()) --> Line_38 $$ paddedFile.setLastModified(lastModified) [FD]
Line_33 $$ long lastModified = file.lastModified() --> Line_38 $$ paddedFile.setLastModified(lastModified) [FD]
