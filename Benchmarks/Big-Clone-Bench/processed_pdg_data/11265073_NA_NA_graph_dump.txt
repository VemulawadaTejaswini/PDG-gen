Line_2 $$ public static void zip(File srcDir, File destFile, FileFilter filter) throws IOException --> Line_3 $$ ZipOutputStream out = null [CD]
Line_3 $$ ZipOutputStream out = null --> Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) [FD]
Line_2 $$ public static void zip(File srcDir, File destFile, FileFilter filter) throws IOException --> Line_6 $$ Collection<File> files = FileUtils.listFiles(srcDir, TrueFileFilter.TRUE, TrueFileFilter.TRUE) [FD]
Line_2 $$ public static void zip(File srcDir, File destFile, FileFilter filter) throws IOException --> Line_8 $$ if (filter == null || filter.accept(f)) [FD]
Line_7 $$ for (File f : files) --> Line_8 $$ if (filter == null || filter.accept(f)) [FD]
Line_8 $$ if (filter == null || filter.accept(f)) --> Line_9 $$ FileInputStream in = FileUtils.openInputStream(f) [CD]
Line_7 $$ for (File f : files) --> Line_9 $$ FileInputStream in = FileUtils.openInputStream(f) [FD]
Line_8 $$ if (filter == null || filter.accept(f)) --> Line_10 $$ out.putNextEntry(new ZipEntry(Util.relativePath(srcDir, f).replace('\\', '/'))) [CD]
Line_3 $$ ZipOutputStream out = null --> Line_10 $$ out.putNextEntry(new ZipEntry(Util.relativePath(srcDir, f).replace('\\', '/'))) [FD]
Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) --> Line_10 $$ out.putNextEntry(new ZipEntry(Util.relativePath(srcDir, f).replace('\\', '/'))) [FD]
Line_2 $$ public static void zip(File srcDir, File destFile, FileFilter filter) throws IOException --> Line_10 $$ out.putNextEntry(new ZipEntry(Util.relativePath(srcDir, f).replace('\\', '/'))) [FD]
Line_7 $$ for (File f : files) --> Line_10 $$ out.putNextEntry(new ZipEntry(Util.relativePath(srcDir, f).replace('\\', '/'))) [FD]
Line_8 $$ if (filter == null || filter.accept(f)) --> Line_11 $$ IOUtils.copyLarge(in, out) [CD]
Line_9 $$ FileInputStream in = FileUtils.openInputStream(f) --> Line_11 $$ IOUtils.copyLarge(in, out) [FD]
Line_3 $$ ZipOutputStream out = null --> Line_11 $$ IOUtils.copyLarge(in, out) [FD]
Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) --> Line_11 $$ IOUtils.copyLarge(in, out) [FD]
Line_8 $$ if (filter == null || filter.accept(f)) --> Line_12 $$ out.closeEntry() [CD]
Line_3 $$ ZipOutputStream out = null --> Line_12 $$ out.closeEntry() [FD]
Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) --> Line_12 $$ out.closeEntry() [FD]
Line_8 $$ if (filter == null || filter.accept(f)) --> Line_13 $$ IOUtils.closeQuietly(in) [CD]
Line_9 $$ FileInputStream in = FileUtils.openInputStream(f) --> Line_13 $$ IOUtils.closeQuietly(in) [FD]
Line_3 $$ ZipOutputStream out = null --> Line_16 $$ IOUtils.closeQuietly(out) [FD]
Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) --> Line_16 $$ IOUtils.closeQuietly(out) [FD]
Line_3 $$ ZipOutputStream out = null --> Line_20 $$ if (out != null) [FD]
Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) --> Line_20 $$ if (out != null) [FD]
Line_20 $$ if (out != null) --> Line_21 $$ out.flush() [CD]
Line_3 $$ ZipOutputStream out = null --> Line_21 $$ out.flush() [FD]
Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) --> Line_21 $$ out.flush() [FD]
Line_20 $$ if (out != null) --> Line_22 $$ IOUtils.closeQuietly(out) [CD]
Line_3 $$ ZipOutputStream out = null --> Line_22 $$ IOUtils.closeQuietly(out) [FD]
Line_5 $$ out = new ZipOutputStream(new FileOutputStream(destFile)) --> Line_22 $$ IOUtils.closeQuietly(out) [FD]
