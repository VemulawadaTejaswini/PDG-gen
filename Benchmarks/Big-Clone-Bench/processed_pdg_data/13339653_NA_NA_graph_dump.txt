Line_2 $$ public void write(String resource, String destinationPath) throws IOException, CoreException --> Line_3 $$ OutputStream output = null [CD]
Line_2 $$ public void write(String resource, String destinationPath) throws IOException, CoreException --> Line_4 $$ InputStream contentStream = null [CD]
Line_4 $$ InputStream contentStream = null --> Line_6 $$ contentStream = new BufferedInputStream(new FileInputStream(resource)) [FD]
Line_3 $$ OutputStream output = null --> Line_7 $$ output = new BufferedOutputStream(new FileOutputStream(destinationPath)) [FD]
Line_4 $$ InputStream contentStream = null --> Line_8 $$ int available = contentStream.available() [FD]
Line_6 $$ contentStream = new BufferedInputStream(new FileInputStream(resource)) --> Line_8 $$ int available = contentStream.available() [FD]
Line_8 $$ int available = contentStream.available() --> Line_9 $$ available = available <= 0 ? DEFAULT_BUFFER_SIZE : available [FD]
Line_8 $$ int available = contentStream.available() --> Line_10 $$ int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available) [FD]
Line_9 $$ available = available <= 0 ? DEFAULT_BUFFER_SIZE : available --> Line_10 $$ int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available) [FD]
Line_4 $$ InputStream contentStream = null --> Line_12 $$ int n = contentStream.read(readBuffer) [FD]
Line_6 $$ contentStream = new BufferedInputStream(new FileInputStream(resource)) --> Line_12 $$ int n = contentStream.read(readBuffer) [FD]
Line_11 $$ byte[] readBuffer = new byte[chunkSize] --> Line_12 $$ int n = contentStream.read(readBuffer) [FD]
Line_12 $$ int n = contentStream.read(readBuffer) --> Line_13 $$ while (n > 0) [FD]
Line_13 $$ while (n > 0) --> Line_14 $$ output.write(readBuffer, 0, n) [CD]
Line_3 $$ OutputStream output = null --> Line_14 $$ output.write(readBuffer, 0, n) [FD]
Line_7 $$ output = new BufferedOutputStream(new FileOutputStream(destinationPath)) --> Line_14 $$ output.write(readBuffer, 0, n) [FD]
Line_11 $$ byte[] readBuffer = new byte[chunkSize] --> Line_14 $$ output.write(readBuffer, 0, n) [FD]
Line_12 $$ int n = contentStream.read(readBuffer) --> Line_14 $$ output.write(readBuffer, 0, n) [FD]
Line_13 $$ while (n > 0) --> Line_15 $$ n = contentStream.read(readBuffer) [CD]
Line_12 $$ int n = contentStream.read(readBuffer) --> Line_15 $$ n = contentStream.read(readBuffer) [FD]
Line_4 $$ InputStream contentStream = null --> Line_15 $$ n = contentStream.read(readBuffer) [FD]
Line_6 $$ contentStream = new BufferedInputStream(new FileInputStream(resource)) --> Line_15 $$ n = contentStream.read(readBuffer) [FD]
Line_11 $$ byte[] readBuffer = new byte[chunkSize] --> Line_15 $$ n = contentStream.read(readBuffer) [FD]
Line_4 $$ InputStream contentStream = null --> Line_18 $$ if (contentStream != null) [FD]
Line_6 $$ contentStream = new BufferedInputStream(new FileInputStream(resource)) --> Line_18 $$ if (contentStream != null) [FD]
Line_4 $$ InputStream contentStream = null --> Line_20 $$ contentStream.close() [FD]
Line_6 $$ contentStream = new BufferedInputStream(new FileInputStream(resource)) --> Line_20 $$ contentStream.close() [FD]
Line_3 $$ OutputStream output = null --> Line_25 $$ if (output != null) [FD]
Line_7 $$ output = new BufferedOutputStream(new FileOutputStream(destinationPath)) --> Line_25 $$ if (output != null) [FD]
Line_25 $$ if (output != null) --> Line_26 $$ output.close() [CD]
Line_3 $$ OutputStream output = null --> Line_26 $$ output.close() [FD]
Line_7 $$ output = new BufferedOutputStream(new FileOutputStream(destinationPath)) --> Line_26 $$ output.close() [FD]
Line_15 $$ n = contentStream.read(readBuffer) --> Line_13 $$ while (n > 0) [FD]
Line_15 $$ n = contentStream.read(readBuffer) --> Line_14 $$ output.write(readBuffer, 0, n) [FD]
