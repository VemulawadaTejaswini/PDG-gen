Line_2 $$ private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) --> Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) [CD]
Line_2 $$ private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) --> Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) [FD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_4 $$ File selectedFolder = folderFileChooser.getSelectedFile() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_5 $$ File collectionCopyFile [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_6 $$ String newDocumentName [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_7 $$ Document newDocument [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_8 $$ StringBuilder distinguisherReplacer = new StringBuilder() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_9 $$ int matchingFilenameDistinguisher [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_10 $$ String nextToken [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_11 $$ Term newTerm [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_12 $$ String userHome [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_13 $$ String fileSeparator [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_14 $$ int userOption [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_15 $$ ArrayList<File> folderTextFiles = new ArrayList<File>() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_16 $$ ArrayList<File> folderRejectedFiles = new ArrayList<File>() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_17 $$ HashSet<File> ignoredFiles = new HashSet<File>() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_18 $$ FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter("Text Files", "txt") [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_19 $$ Scanner tokenizer = null [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_20 $$ FileChannel fileSource = null [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_21 $$ FileChannel collectionDestination = null [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_22 $$ HashMap<String, Integer> termHashMap = null [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_23 $$ Index collectionIndex = activeCollection.getIndex() [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_24 $$ int documentTermMaxFrequency [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_25 $$ int currentTermFrequency [CD]
Line_4 $$ File selectedFolder = folderFileChooser.getSelectedFile() --> Line_26 $$ for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) [FD]
Line_18 $$ FileNameExtensionFilter textFileFilter = new FileNameExtensionFilter("Text Files", "txt") --> Line_26 $$ for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) [FD]
Line_15 $$ ArrayList<File> folderTextFiles = new ArrayList<File>() --> Line_26 $$ for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) [FD]
Line_16 $$ ArrayList<File> folderRejectedFiles = new ArrayList<File>() --> Line_26 $$ for (File folderFile : selectedFolder.listFiles()) if (textFileFilter.accept(folderFile)) [FD]
Line_6 $$ String newDocumentName --> Line_28 $$ newDocumentName = selectedFile.getName() [FD]
Line_27 $$ for (File selectedFile : folderTextFiles) --> Line_28 $$ newDocumentName = selectedFile.getName() [FD]
Line_7 $$ Document newDocument --> Line_29 $$ newDocument = new Document(newDocumentName) [FD]
Line_7 $$ Document newDocument --> Line_30 $$ if (activeCollection.containsDocument(newDocument)) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_30 $$ if (activeCollection.containsDocument(newDocument)) [FD]
Line_30 $$ if (activeCollection.containsDocument(newDocument)) --> Line_31 $$ matchingFilenameDistinguisher = 1 [CD]
Line_9 $$ int matchingFilenameDistinguisher --> Line_31 $$ matchingFilenameDistinguisher = 1 [FD]
Line_30 $$ if (activeCollection.containsDocument(newDocument)) --> Line_32 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") [CD]
Line_6 $$ String newDocumentName --> Line_32 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") [FD]
Line_28 $$ newDocumentName = selectedFile.getName() --> Line_32 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") [FD]
Line_30 $$ if (activeCollection.containsDocument(newDocument)) --> Line_33 $$ newDocument.setDocumentName(newDocumentName) [CD]
Line_7 $$ Document newDocument --> Line_33 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_33 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_6 $$ String newDocumentName --> Line_33 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_28 $$ newDocumentName = selectedFile.getName() --> Line_33 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_32 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") --> Line_33 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_30 $$ if (activeCollection.containsDocument(newDocument)) --> Line_34 $$ while (activeCollection.containsDocument(newDocument)) [CD]
Line_7 $$ Document newDocument --> Line_34 $$ while (activeCollection.containsDocument(newDocument)) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_34 $$ while (activeCollection.containsDocument(newDocument)) [FD]
Line_34 $$ while (activeCollection.containsDocument(newDocument)) --> Line_35 $$ matchingFilenameDistinguisher++ [CD]
Line_9 $$ int matchingFilenameDistinguisher --> Line_35 $$ matchingFilenameDistinguisher++ [FD]
Line_31 $$ matchingFilenameDistinguisher = 1 --> Line_35 $$ matchingFilenameDistinguisher++ [FD]
Line_34 $$ while (activeCollection.containsDocument(newDocument)) --> Line_36 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [CD]
Line_6 $$ String newDocumentName --> Line_36 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [FD]
Line_28 $$ newDocumentName = selectedFile.getName() --> Line_36 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [FD]
Line_32 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") --> Line_36 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [FD]
Line_8 $$ StringBuilder distinguisherReplacer = new StringBuilder() --> Line_36 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() [FD]
Line_34 $$ while (activeCollection.containsDocument(newDocument)) --> Line_37 $$ newDocument.setDocumentName(newDocumentName) [CD]
Line_7 $$ Document newDocument --> Line_37 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_37 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_36 $$ newDocumentName = distinguisherReplacer.replace(newDocumentName.length() - 2, newDocumentName.length() - 1, new Integer(matchingFilenameDistinguisher).toString()).toString() --> Line_37 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_6 $$ String newDocumentName --> Line_37 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_28 $$ newDocumentName = selectedFile.getName() --> Line_37 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_32 $$ newDocumentName = newDocumentName.concat("(" + matchingFilenameDistinguisher + ")") --> Line_37 $$ newDocument.setDocumentName(newDocumentName) [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = null --> Line_40 $$ termHashMap = new HashMap<String, Integer>() [FD]
Line_19 $$ Scanner tokenizer = null --> Line_42 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) [FD]
Line_19 $$ Scanner tokenizer = null --> Line_43 $$ tokenizer.useDelimiter(Pattern.compile("\\p [FD]
Line_42 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_43 $$ tokenizer.useDelimiter(Pattern.compile("\\p [FD]
Line_19 $$ Scanner tokenizer = null --> Line_44 $$ while (tokenizer.hasNext()) [FD]
Line_42 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_44 $$ while (tokenizer.hasNext()) [FD]
Line_44 $$ while (tokenizer.hasNext()) --> Line_45 $$ nextToken = tokenizer.next().toLowerCase() [CD]
Line_10 $$ String nextToken --> Line_45 $$ nextToken = tokenizer.next().toLowerCase() [FD]
Line_19 $$ Scanner tokenizer = null --> Line_45 $$ nextToken = tokenizer.next().toLowerCase() [FD]
Line_42 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_45 $$ nextToken = tokenizer.next().toLowerCase() [FD]
Line_44 $$ while (tokenizer.hasNext()) --> Line_46 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [CD]
Line_45 $$ nextToken = tokenizer.next().toLowerCase() --> Line_46 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [FD]
Line_10 $$ String nextToken --> Line_46 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = null --> Line_46 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [FD]
Line_40 $$ termHashMap = new HashMap<String, Integer>() --> Line_46 $$ termHashMap.put(nextToken, termHashMap.get(nextToken) + 1) [FD]
Line_24 $$ int documentTermMaxFrequency --> Line_48 $$ documentTermMaxFrequency = 0 [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = null --> Line_49 $$ for (String term : termHashMap.keySet()) [FD]
Line_40 $$ termHashMap = new HashMap<String, Integer>() --> Line_49 $$ for (String term : termHashMap.keySet()) [FD]
Line_11 $$ Term newTerm --> Line_50 $$ newTerm = new Term(term) [FD]
Line_23 $$ Index collectionIndex = activeCollection.getIndex() --> Line_51 $$ if (!collectionIndex.termExists(newTerm)) [FD]
Line_11 $$ Term newTerm --> Line_51 $$ if (!collectionIndex.termExists(newTerm)) [FD]
Line_50 $$ newTerm = new Term(term) --> Line_51 $$ if (!collectionIndex.termExists(newTerm)) [FD]
Line_25 $$ int currentTermFrequency --> Line_52 $$ currentTermFrequency = termHashMap.get(term) [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = null --> Line_52 $$ currentTermFrequency = termHashMap.get(term) [FD]
Line_40 $$ termHashMap = new HashMap<String, Integer>() --> Line_52 $$ currentTermFrequency = termHashMap.get(term) [FD]
Line_49 $$ for (String term : termHashMap.keySet()) --> Line_52 $$ currentTermFrequency = termHashMap.get(term) [FD]
Line_25 $$ int currentTermFrequency --> Line_53 $$ if (currentTermFrequency > documentTermMaxFrequency) [FD]
Line_52 $$ currentTermFrequency = termHashMap.get(term) --> Line_53 $$ if (currentTermFrequency > documentTermMaxFrequency) [FD]
Line_24 $$ int documentTermMaxFrequency --> Line_53 $$ if (currentTermFrequency > documentTermMaxFrequency) [FD]
Line_48 $$ documentTermMaxFrequency = 0 --> Line_53 $$ if (currentTermFrequency > documentTermMaxFrequency) [FD]
Line_23 $$ Index collectionIndex = activeCollection.getIndex() --> Line_54 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_11 $$ Term newTerm --> Line_54 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_50 $$ newTerm = new Term(term) --> Line_54 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_7 $$ Document newDocument --> Line_54 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_54 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_25 $$ int currentTermFrequency --> Line_54 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_52 $$ currentTermFrequency = termHashMap.get(term) --> Line_54 $$ collectionIndex.addOccurence(newTerm, newDocument, currentTermFrequency) [FD]
Line_7 $$ Document newDocument --> Line_56 $$ newDocument.setTermMaxFrequency(documentTermMaxFrequency) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_56 $$ newDocument.setTermMaxFrequency(documentTermMaxFrequency) [FD]
Line_24 $$ int documentTermMaxFrequency --> Line_56 $$ newDocument.setTermMaxFrequency(documentTermMaxFrequency) [FD]
Line_48 $$ documentTermMaxFrequency = 0 --> Line_56 $$ newDocument.setTermMaxFrequency(documentTermMaxFrequency) [FD]
Line_53 $$ if (currentTermFrequency > documentTermMaxFrequency) --> Line_56 $$ newDocument.setTermMaxFrequency(documentTermMaxFrequency) [FD]
Line_7 $$ Document newDocument --> Line_57 $$ activeCollection.addDocument(newDocument) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_57 $$ activeCollection.addDocument(newDocument) [FD]
Line_12 $$ String userHome --> Line_58 $$ userHome = System.getProperty("user.home") [FD]
Line_13 $$ String fileSeparator --> Line_59 $$ fileSeparator = System.getProperty("file.separator") [FD]
Line_5 $$ File collectionCopyFile --> Line_60 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName) [FD]
Line_5 $$ File collectionCopyFile --> Line_61 $$ collectionCopyFile.createNewFile() [FD]
Line_60 $$ collectionCopyFile = new File(userHome + fileSeparator + "Infrared" + fileSeparator + activeCollection.getDocumentCollectionName() + fileSeparator + newDocumentName) --> Line_61 $$ collectionCopyFile.createNewFile() [FD]
Line_20 $$ FileChannel fileSource = null --> Line_62 $$ fileSource = new FileInputStream(selectedFile).getChannel() [FD]
Line_21 $$ FileChannel collectionDestination = null --> Line_63 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel() [FD]
Line_21 $$ FileChannel collectionDestination = null --> Line_64 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_63 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel() --> Line_64 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_20 $$ FileChannel fileSource = null --> Line_64 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_62 $$ fileSource = new FileInputStream(selectedFile).getChannel() --> Line_64 $$ collectionDestination.transferFrom(fileSource, 0, fileSource.size()) [FD]
Line_14 $$ int userOption --> Line_69 $$ userOption = JOptionPane.showConfirmDialog(this, "A file insertion has failed. If you want it to ignore this" + "file, press YES, else press NO to repeat the insertion", "FileInsertionFailure", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) [FD]
Line_14 $$ int userOption --> Line_70 $$ if (userOption == JOptionPane.NO_OPTION) [FD]
Line_69 $$ userOption = JOptionPane.showConfirmDialog(this, "A file insertion has failed. If you want it to ignore this" + "file, press YES, else press NO to repeat the insertion", "FileInsertionFailure", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) --> Line_70 $$ if (userOption == JOptionPane.NO_OPTION) [FD]
Line_70 $$ if (userOption == JOptionPane.NO_OPTION) --> Line_71 $$ activeCollection.removeDocument(newDocument) [CD]
Line_7 $$ Document newDocument --> Line_71 $$ activeCollection.removeDocument(newDocument) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_71 $$ activeCollection.removeDocument(newDocument) [FD]
Line_22 $$ HashMap<String, Integer> termHashMap = null --> Line_72 $$ for (String term : termHashMap.keySet()) [FD]
Line_40 $$ termHashMap = new HashMap<String, Integer>() --> Line_72 $$ for (String term : termHashMap.keySet()) [FD]
Line_23 $$ Index collectionIndex = activeCollection.getIndex() --> Line_73 $$ collectionIndex.removeAllOccurences(new Term(term), newDocument) [FD]
Line_7 $$ Document newDocument --> Line_73 $$ collectionIndex.removeAllOccurences(new Term(term), newDocument) [FD]
Line_29 $$ newDocument = new Document(newDocumentName) --> Line_73 $$ collectionIndex.removeAllOccurences(new Term(term), newDocument) [FD]
Line_70 $$ if (userOption == JOptionPane.NO_OPTION) --> Line_75 $$ folderTextFiles.add(selectedFile) [CD]
Line_15 $$ ArrayList<File> folderTextFiles = new ArrayList<File>() --> Line_75 $$ folderTextFiles.add(selectedFile) [FD]
Line_27 $$ for (File selectedFile : folderTextFiles) --> Line_75 $$ folderTextFiles.add(selectedFile) [FD]
Line_70 $$ if (userOption == JOptionPane.NO_OPTION) --> Line_76 $$ ignoredFiles.add(selectedFile) [CD]
Line_17 $$ HashSet<File> ignoredFiles = new HashSet<File>() --> Line_76 $$ ignoredFiles.add(selectedFile) [FD]
Line_27 $$ for (File selectedFile : folderTextFiles) --> Line_76 $$ ignoredFiles.add(selectedFile) [FD]
Line_19 $$ Scanner tokenizer = null --> Line_79 $$ if (tokenizer != null) [FD]
Line_42 $$ tokenizer = new Scanner(new BufferedReader(new FileReader(selectedFile))) --> Line_79 $$ if (tokenizer != null) [FD]
Line_20 $$ FileChannel fileSource = null --> Line_80 $$ if (fileSource != null) [FD]
Line_62 $$ fileSource = new FileInputStream(selectedFile).getChannel() --> Line_80 $$ if (fileSource != null) [FD]
Line_21 $$ FileChannel collectionDestination = null --> Line_81 $$ if (collectionDestination != null) [FD]
Line_63 $$ collectionDestination = new FileOutputStream(collectionCopyFile).getChannel() --> Line_81 $$ if (collectionDestination != null) [FD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_87 $$ if (ignoredFiles.size() > 0) [CD]
Line_17 $$ HashSet<File> ignoredFiles = new HashSet<File>() --> Line_87 $$ if (ignoredFiles.size() > 0) [FD]
Line_87 $$ if (ignoredFiles.size() > 0) --> Line_88 $$ IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this) [CD]
Line_87 $$ if (ignoredFiles.size() > 0) --> Line_89 $$ ignoredFilesDialog.setVisible(true) [CD]
Line_88 $$ IgnoredFilesDialog ignoredFilesDialog = new IgnoredFilesDialog(ignoredFiles, this) --> Line_89 $$ ignoredFilesDialog.setVisible(true) [FD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_91 $$ processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING)) [CD]
Line_3 $$ if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION)) --> Line_92 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) [CD]
Line_2 $$ private void folderFileChooserActionPerformed(java.awt.event.ActionEvent evt) --> Line_92 $$ if (evt.getActionCommand().equalsIgnoreCase(JFileChooser.CANCEL_SELECTION)) [FD]
