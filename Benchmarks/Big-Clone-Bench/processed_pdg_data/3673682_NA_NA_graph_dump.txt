Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_3 $$ int px[] = new int[3] [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_4 $$ int py[] = new int[3] [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_5 $$ int count = 0 [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_6 $$ int tmp[] = new int[fc_num] [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_7 $$ double tmp_depth[] = new double[fc_num] [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_8 $$ rotate(vt_num) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_8 $$ rotate(vt_num) [FD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_9 $$ offg.setColor(Color.black) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_9 $$ offg.setColor(Color.black) [FD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_10 $$ for (int i = 0; i < fc_num; i++) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_10 $$ for (int i = 0; i < fc_num; i++) [FD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_11 $$ double a1 = fc[i].vt1.x - fc[i].vt0.x [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_12 $$ double a2 = fc[i].vt1.y - fc[i].vt0.y [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_13 $$ double a3 = fc[i].vt1.z - fc[i].vt0.z [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_14 $$ double b1 = fc[i].vt2.x - fc[i].vt1.x [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_15 $$ double b2 = fc[i].vt2.y - fc[i].vt1.y [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_16 $$ double b3 = fc[i].vt2.z - fc[i].vt1.z [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_17 $$ fc[i].nx = a2 * b3 - a3 * b2 [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_18 $$ fc[i].ny = a3 * b1 - a1 * b3 [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_19 $$ fc[i].nz = a1 * b2 - a2 * b1 [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_20 $$ if (fc[i].nz < 0) [CD]
Line_20 $$ if (fc[i].nz < 0) --> Line_21 $$ fc[i].nx = a2 * b3 - a3 * b2 [CD]
Line_20 $$ if (fc[i].nz < 0) --> Line_22 $$ fc[i].ny = a3 * b1 - a1 * b3 [CD]
Line_20 $$ if (fc[i].nz < 0) --> Line_23 $$ tmp[count] = i [CD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_23 $$ tmp[count] = i [FD]
Line_20 $$ if (fc[i].nz < 0) --> Line_24 $$ tmp_depth[count] = fc[i].getDepth() [CD]
Line_20 $$ if (fc[i].nz < 0) --> Line_25 $$ count++ [CD]
Line_5 $$ int count = 0 --> Line_25 $$ count++ [FD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_28 $$ int lim = count - 1 [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_29 $$ do [CD]
Line_28 $$ int lim = count - 1 --> Line_29 $$ do [FD]
Line_29 $$ do --> Line_30 $$ int m = 0 [CD]
Line_29 $$ do --> Line_31 $$ for (int n = 0; n <= lim - 1; n++) [CD]
Line_31 $$ for (int n = 0; n <= lim - 1; n++) --> Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) [CD]
Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) --> Line_33 $$ double t = tmp_depth[n] [CD]
Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) --> Line_34 $$ tmp_depth[n] = tmp_depth[n + 1] [CD]
Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) --> Line_35 $$ tmp_depth[n + 1] = t [CD]
Line_33 $$ double t = tmp_depth[n] --> Line_35 $$ tmp_depth[n + 1] = t [FD]
Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) --> Line_36 $$ int ti = tmp[n] [CD]
Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) --> Line_37 $$ tmp[n] = tmp[n + 1] [CD]
Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) --> Line_38 $$ tmp[n + 1] = ti [CD]
Line_36 $$ int ti = tmp[n] --> Line_38 $$ tmp[n + 1] = ti [FD]
Line_32 $$ if (tmp_depth[n] < tmp_depth[n + 1]) --> Line_39 $$ m = n [CD]
Line_30 $$ int m = 0 --> Line_39 $$ m = n [FD]
Line_31 $$ for (int n = 0; n <= lim - 1; n++) --> Line_39 $$ m = n [FD]
Line_29 $$ do --> Line_42 $$ lim = m [CD]
Line_28 $$ int lim = count - 1 --> Line_42 $$ lim = m [FD]
Line_39 $$ m = n --> Line_42 $$ lim = m [FD]
Line_30 $$ int m = 0 --> Line_42 $$ lim = m [FD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_44 $$ for (int m = 0; m < count; m++) [CD]
Line_39 $$ m = n --> Line_44 $$ for (int m = 0; m < count; m++) [FD]
Line_30 $$ int m = 0 --> Line_44 $$ for (int m = 0; m < count; m++) [FD]
Line_5 $$ int count = 0 --> Line_44 $$ for (int m = 0; m < count; m++) [FD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_45 $$ int i = tmp[m] [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_46 $$ double l = Math.sqrt(fc[i].nx * fc[i].nx + fc[i].ny * fc[i].ny + fc[i].nz * fc[i].nz) [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_47 $$ test(offg, i, l, h, s) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_47 $$ test(offg, i, l, h, s) [FD]
Line_45 $$ int i = tmp[m] --> Line_47 $$ test(offg, i, l, h, s) [FD]
Line_10 $$ for (int i = 0; i < fc_num; i++) --> Line_47 $$ test(offg, i, l, h, s) [FD]
Line_46 $$ double l = Math.sqrt(fc[i].nx * fc[i].nx + fc[i].ny * fc[i].ny + fc[i].nz * fc[i].nz) --> Line_47 $$ test(offg, i, l, h, s) [FD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_48 $$ px[0] = (int) (fc[i].vt0.x * m_Scale + centerp.x) [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_49 $$ py[0] = (int) (-fc[i].vt0.y * m_Scale + centerp.y) [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_50 $$ px[1] = (int) (fc[i].vt1.x * m_Scale + centerp.x) [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_51 $$ py[1] = (int) (-fc[i].vt1.y * m_Scale + centerp.y) [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_52 $$ px[2] = (int) (fc[i].vt2.x * m_Scale + centerp.x) [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_53 $$ py[2] = (int) (-fc[i].vt2.y * m_Scale + centerp.y) [CD]
Line_44 $$ for (int m = 0; m < count; m++) --> Line_54 $$ offg.fillPolygon(px, py, 3) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_54 $$ offg.fillPolygon(px, py, 3) [FD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_56 $$ if (labelFlag && object) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_56 $$ if (labelFlag && object) [FD]
Line_56 $$ if (labelFlag && object) --> Line_57 $$ offg.setFont(Fonts.FONT_REAL) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_57 $$ offg.setFont(Fonts.FONT_REAL) [FD]
Line_56 $$ if (labelFlag && object) --> Line_58 $$ offg.drawString(d_con.getPointerData().getRealObjName(obj_num), (int) ((fc[0].vt0.x + 10) * m_Scale + centerp.x), (int) (-(fc[0].vt0.y + 10) * m_Scale + centerp.y)) [CD]
Line_2 $$ private void DrawModel(Graphics offg, int obj_num, boolean object, float h, float s, int vt_num, int fc_num) --> Line_58 $$ offg.drawString(d_con.getPointerData().getRealObjName(obj_num), (int) ((fc[0].vt0.x + 10) * m_Scale + centerp.x), (int) (-(fc[0].vt0.y + 10) * m_Scale + centerp.y)) [FD]
Line_42 $$ lim = m --> Line_29 $$ do [FD]
