Line_2 $$ protected void truncate(final File file) --> Line_3 $$ LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.") [CD]
Line_2 $$ protected void truncate(final File file) --> Line_3 $$ LogLog.debug("Compression of file: " + file.getAbsolutePath() + " started.") [FD]
Line_2 $$ protected void truncate(final File file) --> Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) [CD]
Line_2 $$ protected void truncate(final File file) --> Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) [FD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_5 $$ final File backupRoot = new File(this.getBackupDir()) [CD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_6 $$ if (!backupRoot.exists() && !backupRoot.mkdirs()) [CD]
Line_5 $$ final File backupRoot = new File(this.getBackupDir()) --> Line_6 $$ if (!backupRoot.exists() && !backupRoot.mkdirs()) [FD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_9 $$ SimpleDateFormat df [CD]
Line_9 $$ SimpleDateFormat df --> Line_11 $$ df = new SimpleDateFormat(this.getBackupDateFormat()) [FD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_15 $$ final String date = df.format(new Date(file.lastModified())) [CD]
Line_9 $$ SimpleDateFormat df --> Line_15 $$ final String date = df.format(new Date(file.lastModified())) [FD]
Line_11 $$ df = new SimpleDateFormat(this.getBackupDateFormat()) --> Line_15 $$ final String date = df.format(new Date(file.lastModified())) [FD]
Line_2 $$ protected void truncate(final File file) --> Line_15 $$ final String date = df.format(new Date(file.lastModified())) [FD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_16 $$ final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip") [CD]
Line_2 $$ protected void truncate(final File file) --> Line_16 $$ final File zipFile = new File(backupRoot, file.getName() + "." + date + ".zip") [FD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_17 $$ ZipOutputStream zos = null [CD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_18 $$ FileInputStream fis = null [CD]
Line_17 $$ ZipOutputStream zos = null --> Line_20 $$ zos = new ZipOutputStream(new FileOutputStream(zipFile)) [FD]
Line_2 $$ protected void truncate(final File file) --> Line_21 $$ final ZipEntry entry = new ZipEntry(file.getName()) [FD]
Line_2 $$ protected void truncate(final File file) --> Line_23 $$ entry.setCrc(FileUtils.checksumCRC32(file)) [FD]
Line_17 $$ ZipOutputStream zos = null --> Line_24 $$ zos.putNextEntry(entry) [FD]
Line_20 $$ zos = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_24 $$ zos.putNextEntry(entry) [FD]
Line_18 $$ FileInputStream fis = null --> Line_25 $$ fis = FileUtils.openInputStream(file) [FD]
Line_2 $$ protected void truncate(final File file) --> Line_25 $$ fis = FileUtils.openInputStream(file) [FD]
Line_27 $$ int readed --> Line_28 $$ while ((readed = fis.read(buffer)) != -1) [FD]
Line_18 $$ FileInputStream fis = null --> Line_28 $$ while ((readed = fis.read(buffer)) != -1) [FD]
Line_25 $$ fis = FileUtils.openInputStream(file) --> Line_28 $$ while ((readed = fis.read(buffer)) != -1) [FD]
Line_26 $$ final byte[] buffer = new byte[1024] --> Line_28 $$ while ((readed = fis.read(buffer)) != -1) [FD]
Line_28 $$ while ((readed = fis.read(buffer)) != -1) --> Line_29 $$ zos.write(buffer, 0, readed) [CD]
Line_28 $$ while ((readed = fis.read(buffer)) != -1) --> Line_29 $$ zos.write(buffer, 0, readed) [FD]
Line_17 $$ ZipOutputStream zos = null --> Line_29 $$ zos.write(buffer, 0, readed) [FD]
Line_20 $$ zos = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_29 $$ zos.write(buffer, 0, readed) [FD]
Line_26 $$ final byte[] buffer = new byte[1024] --> Line_29 $$ zos.write(buffer, 0, readed) [FD]
Line_27 $$ int readed --> Line_29 $$ zos.write(buffer, 0, readed) [FD]
Line_17 $$ ZipOutputStream zos = null --> Line_34 $$ if (zos != null) [FD]
Line_20 $$ zos = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_34 $$ if (zos != null) [FD]
Line_17 $$ ZipOutputStream zos = null --> Line_36 $$ zos.close() [FD]
Line_20 $$ zos = new ZipOutputStream(new FileOutputStream(zipFile)) --> Line_36 $$ zos.close() [FD]
Line_18 $$ FileInputStream fis = null --> Line_41 $$ if (fis != null) [FD]
Line_25 $$ fis = FileUtils.openInputStream(file) --> Line_41 $$ if (fis != null) [FD]
Line_18 $$ FileInputStream fis = null --> Line_43 $$ fis.close() [FD]
Line_25 $$ fis = FileUtils.openInputStream(file) --> Line_43 $$ fis.close() [FD]
Line_4 $$ if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) --> Line_49 $$ if (!file.delete()) [CD]
Line_2 $$ protected void truncate(final File file) --> Line_49 $$ if (!file.delete()) [FD]
Line_2 $$ protected void truncate(final File file) --> Line_50 $$ throw new AppenderInitializationError("Can't delete old log file " + file.getAbsolutePath()) [FD]
