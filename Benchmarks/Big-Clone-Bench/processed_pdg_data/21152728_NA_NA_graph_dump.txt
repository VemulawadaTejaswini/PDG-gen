Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_3 $$ SecureRandom rand = SecureRandom.getInstance("SHA1PRNG") [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_4 $$ rand.setSeed(System.currentTimeMillis()) [CD]
Line_3 $$ SecureRandom rand = SecureRandom.getInstance("SHA1PRNG") --> Line_4 $$ rand.setSeed(System.currentTimeMillis()) [FD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_5 $$ byte[] challenge = new byte[16] [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_6 $$ rand.nextBytes(challenge) [CD]
Line_3 $$ SecureRandom rand = SecureRandom.getInstance("SHA1PRNG") --> Line_6 $$ rand.nextBytes(challenge) [FD]
Line_5 $$ byte[] challenge = new byte[16] --> Line_6 $$ rand.nextBytes(challenge) [FD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_7 $$ String b64 = Util.base64(challenge) [CD]
Line_5 $$ byte[] challenge = new byte[16] --> Line_7 $$ String b64 = Util.base64(challenge) [FD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_8 $$ Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + "\n") [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_9 $$ String reply = Util.readLine(in) [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_10 $$ if (reply.indexOf(" ") < 0) [CD]
Line_9 $$ String reply = Util.readLine(in) --> Line_10 $$ if (reply.indexOf(" ") < 0) [FD]
Line_10 $$ if (reply.indexOf(" ") < 0) --> Line_11 $$ Util.writeASCII(out, AT_ERROR + ": bad response\n") [CD]
Line_10 $$ if (reply.indexOf(" ") < 0) --> Line_12 $$ Util.writeASCII(out, RSYNCD_EXIT + "\n") [CD]
Line_10 $$ if (reply.indexOf(" ") < 0) --> Line_13 $$ socket.close() [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_16 $$ String user = reply.substring(0, reply.indexOf(" ")) [CD]
Line_9 $$ String reply = Util.readLine(in) --> Line_16 $$ String user = reply.substring(0, reply.indexOf(" ")) [FD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_17 $$ String response = reply.substring(reply.indexOf(" ") + 1) [CD]
Line_9 $$ String reply = Util.readLine(in) --> Line_17 $$ String response = reply.substring(reply.indexOf(" ") + 1) [FD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_18 $$ if (!module.users.contains(user)) [CD]
Line_16 $$ String user = reply.substring(0, reply.indexOf(" ")) --> Line_18 $$ if (!module.users.contains(user)) [FD]
Line_18 $$ if (!module.users.contains(user)) --> Line_19 $$ Util.writeASCII(out, AT_ERROR + ": user " + user + " not allowed\n") [CD]
Line_18 $$ if (!module.users.contains(user)) --> Line_20 $$ Util.writeASCII(out, RSYNCD_EXIT + "\n") [CD]
Line_18 $$ if (!module.users.contains(user)) --> Line_21 $$ socket.close() [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_24 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile)) [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_25 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4") [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_26 $$ String line [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_27 $$ while ((line = secrets.readLine()) != null) [CD]
Line_26 $$ String line --> Line_27 $$ while ((line = secrets.readLine()) != null) [FD]
Line_24 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile)) --> Line_27 $$ while ((line = secrets.readLine()) != null) [FD]
Line_27 $$ while ((line = secrets.readLine()) != null) --> Line_28 $$ if (line.startsWith(user + ":")) [CD]
Line_27 $$ while ((line = secrets.readLine()) != null) --> Line_28 $$ if (line.startsWith(user + ":")) [FD]
Line_26 $$ String line --> Line_28 $$ if (line.startsWith(user + ":")) [FD]
Line_28 $$ if (line.startsWith(user + ":")) --> Line_29 $$ String passwd = line.substring(line.lastIndexOf(":") + 1) [CD]
Line_27 $$ while ((line = secrets.readLine()) != null) --> Line_29 $$ String passwd = line.substring(line.lastIndexOf(":") + 1) [FD]
Line_26 $$ String line --> Line_29 $$ String passwd = line.substring(line.lastIndexOf(":") + 1) [FD]
Line_28 $$ if (line.startsWith(user + ":")) --> Line_30 $$ md4.update(new byte[4]) [CD]
Line_25 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4") --> Line_30 $$ md4.update(new byte[4]) [FD]
Line_28 $$ if (line.startsWith(user + ":")) --> Line_31 $$ md4.update(passwd.getBytes("US-ASCII")) [CD]
Line_25 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4") --> Line_31 $$ md4.update(passwd.getBytes("US-ASCII")) [FD]
Line_29 $$ String passwd = line.substring(line.lastIndexOf(":") + 1) --> Line_31 $$ md4.update(passwd.getBytes("US-ASCII")) [FD]
Line_28 $$ if (line.startsWith(user + ":")) --> Line_32 $$ md4.update(b64.getBytes("US-ASCII")) [CD]
Line_25 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4") --> Line_32 $$ md4.update(b64.getBytes("US-ASCII")) [FD]
Line_7 $$ String b64 = Util.base64(challenge) --> Line_32 $$ md4.update(b64.getBytes("US-ASCII")) [FD]
Line_28 $$ if (line.startsWith(user + ":")) --> Line_33 $$ String hash = Util.base64(md4.digest()) [CD]
Line_25 $$ MessageDigest md4 = MessageDigest.getInstance("BrokenMD4") --> Line_33 $$ String hash = Util.base64(md4.digest()) [FD]
Line_28 $$ if (line.startsWith(user + ":")) --> Line_34 $$ if (hash.equals(response)) [CD]
Line_33 $$ String hash = Util.base64(md4.digest()) --> Line_34 $$ if (hash.equals(response)) [FD]
Line_17 $$ String response = reply.substring(reply.indexOf(" ") + 1) --> Line_34 $$ if (hash.equals(response)) [FD]
Line_34 $$ if (hash.equals(response)) --> Line_35 $$ secrets.close() [CD]
Line_24 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile)) --> Line_35 $$ secrets.close() [FD]
Line_34 $$ if (hash.equals(response)) --> Line_36 $$ return true [CD]
Line_34 $$ if (hash.equals(response)) --> Line_38 $$ Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n") [CD]
Line_34 $$ if (hash.equals(response)) --> Line_39 $$ Util.writeASCII(out, RSYNCD_EXIT + "\n") [CD]
Line_34 $$ if (hash.equals(response)) --> Line_40 $$ socket.close() [CD]
Line_34 $$ if (hash.equals(response)) --> Line_41 $$ secrets.close() [CD]
Line_24 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile)) --> Line_41 $$ secrets.close() [FD]
Line_34 $$ if (hash.equals(response)) --> Line_42 $$ logger.error("auth failed on module " + module.name) [CD]
Line_34 $$ if (hash.equals(response)) --> Line_43 $$ return false [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_47 $$ Util.writeASCII(out, AT_ERROR + ": auth failed on module " + module.name + "\n") [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_48 $$ Util.writeASCII(out, RSYNCD_EXIT + "\n") [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_49 $$ socket.close() [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_50 $$ secrets.close() [CD]
Line_24 $$ LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile)) --> Line_50 $$ secrets.close() [FD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_51 $$ logger.error("auth failed on module " + module.name) [CD]
Line_2 $$ private boolean authenticate(Module module) throws Exception --> Line_52 $$ return false [CD]
