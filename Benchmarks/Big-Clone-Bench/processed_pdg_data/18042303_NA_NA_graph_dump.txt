Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_3 $$ boolean found = false [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_4 $$ String name = getArgument(request.getPathInfo()) [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_4 $$ String name = getArgument(request.getPathInfo()) [FD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_5 $$ if (StringUtils.contains(name, '/')) [CD]
Line_4 $$ String name = getArgument(request.getPathInfo()) --> Line_5 $$ if (StringUtils.contains(name, '/')) [FD]
Line_5 $$ if (StringUtils.contains(name, '/')) --> Line_6 $$ File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name) [CD]
Line_5 $$ if (StringUtils.contains(name, '/')) --> Line_7 $$ if (file.exists() && file.isFile()) [CD]
Line_6 $$ File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name) --> Line_7 $$ if (file.exists() && file.isFile()) [FD]
Line_7 $$ if (file.exists() && file.isFile()) --> Line_8 $$ found = true [CD]
Line_3 $$ boolean found = false --> Line_8 $$ found = true [FD]
Line_7 $$ if (file.exists() && file.isFile()) --> Line_9 $$ MagicMatch match = Magic.getMagicMatch(file, true) [CD]
Line_6 $$ File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name) --> Line_9 $$ MagicMatch match = Magic.getMagicMatch(file, true) [FD]
Line_7 $$ if (file.exists() && file.isFile()) --> Line_10 $$ response.setContentType(match.getMimeType()) [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_10 $$ response.setContentType(match.getMimeType()) [FD]
Line_9 $$ MagicMatch match = Magic.getMagicMatch(file, true) --> Line_10 $$ response.setContentType(match.getMimeType()) [FD]
Line_7 $$ if (file.exists() && file.isFile()) --> Line_11 $$ FileInputStream in = new FileInputStream(file) [CD]
Line_7 $$ if (file.exists() && file.isFile()) --> Line_12 $$ IOUtils.copyLarge(in, response.getOutputStream()) [CD]
Line_11 $$ FileInputStream in = new FileInputStream(file) --> Line_12 $$ IOUtils.copyLarge(in, response.getOutputStream()) [FD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_12 $$ IOUtils.copyLarge(in, response.getOutputStream()) [FD]
Line_7 $$ if (file.exists() && file.isFile()) --> Line_13 $$ in.close() [CD]
Line_11 $$ FileInputStream in = new FileInputStream(file) --> Line_13 $$ in.close() [FD]
Line_5 $$ if (StringUtils.contains(name, '/')) --> Line_15 $$ if (!StringUtils.isBlank(name)) [CD]
Line_4 $$ String name = getArgument(request.getPathInfo()) --> Line_15 $$ if (!StringUtils.isBlank(name)) [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_16 $$ int articleId = NumberUtils.toInt(name) [CD]
Line_4 $$ String name = getArgument(request.getPathInfo()) --> Line_16 $$ int articleId = NumberUtils.toInt(name) [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_17 $$ if (articleId > 0) [CD]
Line_16 $$ int articleId = NumberUtils.toInt(name) --> Line_17 $$ if (articleId > 0) [FD]
Line_17 $$ if (articleId > 0) --> Line_18 $$ Article article = articleDao.load(articleId) [CD]
Line_16 $$ int articleId = NumberUtils.toInt(name) --> Line_18 $$ Article article = articleDao.load(articleId) [FD]
Line_17 $$ if (articleId > 0) --> Line_19 $$ if (article != null) [CD]
Line_18 $$ Article article = articleDao.load(articleId) --> Line_19 $$ if (article != null) [FD]
Line_19 $$ if (article != null) --> Line_20 $$ found = true [CD]
Line_3 $$ boolean found = false --> Line_20 $$ found = true [FD]
Line_8 $$ found = true --> Line_20 $$ found = true [FD]
Line_19 $$ if (article != null) --> Line_21 $$ sendArticle(request, response, article) [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_21 $$ sendArticle(request, response, article) [FD]
Line_18 $$ Article article = articleDao.load(articleId) --> Line_21 $$ sendArticle(request, response, article) [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_25 $$ int page = NumberUtils.toInt(request.getParameter("page"), 0) [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_25 $$ int page = NumberUtils.toInt(request.getParameter("page"), 0) [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_26 $$ Date fromDate = null [CD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_27 $$ String from = request.getParameter("from") [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_27 $$ String from = request.getParameter("from") [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_28 $$ if (StringUtils.isNotBlank(from)) [CD]
Line_27 $$ String from = request.getParameter("from") --> Line_28 $$ if (StringUtils.isNotBlank(from)) [FD]
Line_26 $$ Date fromDate = null --> Line_30 $$ fromDate = dayMonthYearEn.parse(from) [FD]
Line_27 $$ String from = request.getParameter("from") --> Line_30 $$ fromDate = dayMonthYearEn.parse(from) [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_34 $$ Date untilDate = null [CD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_35 $$ String until = request.getParameter("until") [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_35 $$ String until = request.getParameter("until") [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_36 $$ if (StringUtils.isNotBlank(until)) [CD]
Line_35 $$ String until = request.getParameter("until") --> Line_36 $$ if (StringUtils.isNotBlank(until)) [FD]
Line_34 $$ Date untilDate = null --> Line_38 $$ untilDate = dayMonthYearEn.parse(until) [FD]
Line_35 $$ String until = request.getParameter("until") --> Line_38 $$ untilDate = dayMonthYearEn.parse(until) [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_42 $$ sendArticleList(request, response, articleDao.list(request.getParameter("query"), request.getParameter("author"), request.getParameter("tags"), request.getParameterValues("types"), fromDate, untilDate, page, HITS_PER_PAGE, null)) [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_42 $$ sendArticleList(request, response, articleDao.list(request.getParameter("query"), request.getParameter("author"), request.getParameter("tags"), request.getParameterValues("types"), fromDate, untilDate, page, HITS_PER_PAGE, null)) [FD]
Line_26 $$ Date fromDate = null --> Line_42 $$ sendArticleList(request, response, articleDao.list(request.getParameter("query"), request.getParameter("author"), request.getParameter("tags"), request.getParameterValues("types"), fromDate, untilDate, page, HITS_PER_PAGE, null)) [FD]
Line_30 $$ fromDate = dayMonthYearEn.parse(from) --> Line_42 $$ sendArticleList(request, response, articleDao.list(request.getParameter("query"), request.getParameter("author"), request.getParameter("tags"), request.getParameterValues("types"), fromDate, untilDate, page, HITS_PER_PAGE, null)) [FD]
Line_34 $$ Date untilDate = null --> Line_42 $$ sendArticleList(request, response, articleDao.list(request.getParameter("query"), request.getParameter("author"), request.getParameter("tags"), request.getParameterValues("types"), fromDate, untilDate, page, HITS_PER_PAGE, null)) [FD]
Line_38 $$ untilDate = dayMonthYearEn.parse(until) --> Line_42 $$ sendArticleList(request, response, articleDao.list(request.getParameter("query"), request.getParameter("author"), request.getParameter("tags"), request.getParameterValues("types"), fromDate, untilDate, page, HITS_PER_PAGE, null)) [FD]
Line_25 $$ int page = NumberUtils.toInt(request.getParameter("page"), 0) --> Line_42 $$ sendArticleList(request, response, articleDao.list(request.getParameter("query"), request.getParameter("author"), request.getParameter("tags"), request.getParameterValues("types"), fromDate, untilDate, page, HITS_PER_PAGE, null)) [FD]
Line_15 $$ if (!StringUtils.isBlank(name)) --> Line_43 $$ found = true [CD]
Line_3 $$ boolean found = false --> Line_43 $$ found = true [FD]
Line_8 $$ found = true --> Line_43 $$ found = true [FD]
Line_20 $$ found = true --> Line_43 $$ found = true [FD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_45 $$ if (found != true) [CD]
Line_3 $$ boolean found = false --> Line_45 $$ if (found != true) [FD]
Line_8 $$ found = true --> Line_45 $$ if (found != true) [FD]
Line_20 $$ found = true --> Line_45 $$ if (found != true) [FD]
Line_43 $$ found = true --> Line_45 $$ if (found != true) [FD]
Line_45 $$ if (found != true) --> Line_46 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND) [CD]
Line_2 $$ public void view(HttpServletRequest request, HttpServletResponse response) throws Exception --> Line_46 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND) [FD]
