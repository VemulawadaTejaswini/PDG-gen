Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_3 $$ Session session = HibernateUtil.getInstance().getSession() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_4 $$ response.setBufferSize(65536) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_4 $$ response.setBufferSize(65536) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_5 $$ ServletOutputStream outStream = response.getOutputStream() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_5 $$ ServletOutputStream outStream = response.getOutputStream() [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_6 $$ File file = null [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_7 $$ FileData fileData = null [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_9 $$ String fileParameter = request.getParameter("file") [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_10 $$ String disposition = request.getParameter("disposition") [FD]
Line_9 $$ String fileParameter = request.getParameter("file") --> Line_11 $$ if (fileParameter == null || fileParameter.equals("")) [FD]
Line_11 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_12 $$ String pi = request.getPathInfo() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_12 $$ String pi = request.getPathInfo() [FD]
Line_11 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_13 $$ int lastSlashIndex = pi.lastIndexOf("/") + 1 [CD]
Line_12 $$ String pi = request.getPathInfo() --> Line_13 $$ int lastSlashIndex = pi.lastIndexOf("/") + 1 [FD]
Line_11 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_14 $$ fileParameter = pi.substring(lastSlashIndex, pi.indexOf("_", pi.lastIndexOf("/"))) [CD]
Line_9 $$ String fileParameter = request.getParameter("file") --> Line_14 $$ fileParameter = pi.substring(lastSlashIndex, pi.indexOf("_", pi.lastIndexOf("/"))) [FD]
Line_12 $$ String pi = request.getPathInfo() --> Line_14 $$ fileParameter = pi.substring(lastSlashIndex, pi.indexOf("_", pi.lastIndexOf("/"))) [FD]
Line_13 $$ int lastSlashIndex = pi.lastIndexOf("/") + 1 --> Line_14 $$ fileParameter = pi.substring(lastSlashIndex, pi.indexOf("_", pi.lastIndexOf("/"))) [FD]
Line_9 $$ String fileParameter = request.getParameter("file") --> Line_16 $$ if (fileParameter == null || fileParameter.equals("")) [FD]
Line_14 $$ fileParameter = pi.substring(lastSlashIndex, pi.indexOf("_", pi.lastIndexOf("/"))) --> Line_16 $$ if (fileParameter == null || fileParameter.equals("")) [FD]
Line_16 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_17 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_17 $$ response.sendError(HttpServletResponse.SC_BAD_REQUEST) [FD]
Line_16 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_18 $$ response.setStatus(HttpServletResponse.SC_BAD_REQUEST) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_18 $$ response.setStatus(HttpServletResponse.SC_BAD_REQUEST) [FD]
Line_16 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_19 $$ response.flushBuffer() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_19 $$ response.flushBuffer() [FD]
Line_16 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_20 $$ Logger.log("file parameter not specified") [CD]
Line_16 $$ if (fileParameter == null || fileParameter.equals("")) --> Line_21 $$ return [CD]
Line_10 $$ String disposition = request.getParameter("disposition") --> Line_23 $$ if (disposition == null || disposition.equals("")) [FD]
Line_23 $$ if (disposition == null || disposition.equals("")) --> Line_24 $$ String pi = request.getPathInfo() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_24 $$ String pi = request.getPathInfo() [FD]
Line_23 $$ if (disposition == null || disposition.equals("")) --> Line_25 $$ String filename = pi.substring(pi.lastIndexOf("/") + 1) [CD]
Line_12 $$ String pi = request.getPathInfo() --> Line_25 $$ String filename = pi.substring(pi.lastIndexOf("/") + 1) [FD]
Line_23 $$ if (disposition == null || disposition.equals("")) --> Line_26 $$ int underscoreIndex = filename.indexOf("_") + 1 [CD]
Line_25 $$ String filename = pi.substring(pi.lastIndexOf("/") + 1) --> Line_26 $$ int underscoreIndex = filename.indexOf("_") + 1 [FD]
Line_23 $$ if (disposition == null || disposition.equals("")) --> Line_27 $$ disposition = filename.substring(underscoreIndex, filename.indexOf("_", underscoreIndex)) [CD]
Line_10 $$ String disposition = request.getParameter("disposition") --> Line_27 $$ disposition = filename.substring(underscoreIndex, filename.indexOf("_", underscoreIndex)) [FD]
Line_25 $$ String filename = pi.substring(pi.lastIndexOf("/") + 1) --> Line_27 $$ disposition = filename.substring(underscoreIndex, filename.indexOf("_", underscoreIndex)) [FD]
Line_26 $$ int underscoreIndex = filename.indexOf("_") + 1 --> Line_27 $$ disposition = filename.substring(underscoreIndex, filename.indexOf("_", underscoreIndex)) [FD]
Line_6 $$ File file = null --> Line_29 $$ file = (File) session.load(File.class, new Long(fileParameter)) [FD]
Line_3 $$ Session session = HibernateUtil.getInstance().getSession() --> Line_29 $$ file = (File) session.load(File.class, new Long(fileParameter)) [FD]
Line_6 $$ File file = null --> Line_30 $$ Logger.log("Content requested=" + file.getName() + ":" + fileParameter + " Referral: " + request.getParameter("referer")) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_30 $$ Logger.log("Content requested=" + file.getName() + ":" + fileParameter + " Referral: " + request.getParameter("referer")) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_31 $$ long ifModifiedSince = request.getDateHeader("If-Modified-Since") [FD]
Line_6 $$ File file = null --> Line_32 $$ long fileDate = file.getLastModifiedDate() - (file.getLastModifiedDate() % 1000) [FD]
Line_32 $$ long fileDate = file.getLastModifiedDate() - (file.getLastModifiedDate() % 1000) --> Line_33 $$ if (fileDate <= ifModifiedSince) [FD]
Line_31 $$ long ifModifiedSince = request.getDateHeader("If-Modified-Since") --> Line_33 $$ if (fileDate <= ifModifiedSince) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_34 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_34 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_35 $$ if ("attachment".equals(disposition)) [CD]
Line_10 $$ String disposition = request.getParameter("disposition") --> Line_35 $$ if ("attachment".equals(disposition)) [FD]
Line_27 $$ disposition = filename.substring(underscoreIndex, filename.indexOf("_", underscoreIndex)) --> Line_35 $$ if ("attachment".equals(disposition)) [FD]
Line_35 $$ if ("attachment".equals(disposition)) --> Line_36 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"") [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_36 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"") [FD]
Line_6 $$ File file = null --> Line_36 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"") [FD]
Line_35 $$ if ("attachment".equals(disposition)) --> Line_38 $$ response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"") [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_38 $$ response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"") [FD]
Line_6 $$ File file = null --> Line_38 $$ response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"") [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_40 $$ response.setContentType(file.getContentType()) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_40 $$ response.setContentType(file.getContentType()) [FD]
Line_6 $$ File file = null --> Line_40 $$ response.setContentType(file.getContentType()) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_41 $$ response.setHeader("Content-Description", file.getName()) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_41 $$ response.setHeader("Content-Description", file.getName()) [FD]
Line_6 $$ File file = null --> Line_41 $$ response.setHeader("Content-Description", file.getName()) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_42 $$ response.setDateHeader("Last-Modified", file.getLastModifiedDate()) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_42 $$ response.setDateHeader("Last-Modified", file.getLastModifiedDate()) [FD]
Line_6 $$ File file = null --> Line_42 $$ response.setDateHeader("Last-Modified", file.getLastModifiedDate()) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_43 $$ response.setDateHeader("Expires", System.currentTimeMillis() + 31536000000L) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_43 $$ response.setDateHeader("Expires", System.currentTimeMillis() + 31536000000L) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_44 $$ response.setContentLength((int) file.getSize()) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_44 $$ response.setContentLength((int) file.getSize()) [FD]
Line_6 $$ File file = null --> Line_44 $$ response.setContentLength((int) file.getSize()) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_45 $$ response.flushBuffer() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_45 $$ response.flushBuffer() [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_46 $$ Logger.log("Conditional GET: " + file.getName()) [CD]
Line_6 $$ File file = null --> Line_46 $$ Logger.log("Conditional GET: " + file.getName()) [FD]
Line_33 $$ if (fileDate <= ifModifiedSince) --> Line_47 $$ return [CD]
Line_3 $$ Session session = HibernateUtil.getInstance().getSession() --> Line_49 $$ User authUser = baseService.getAuthenticatedUser(session, request, response) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_49 $$ User authUser = baseService.getAuthenticatedUser(session, request, response) [FD]
Line_3 $$ Session session = HibernateUtil.getInstance().getSession() --> Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) [FD]
Line_49 $$ User authUser = baseService.getAuthenticatedUser(session, request, response) --> Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) [FD]
Line_6 $$ File file = null --> Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) [FD]
Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) --> Line_51 $$ response.sendError(HttpServletResponse.SC_FORBIDDEN, "Forbidden") [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_51 $$ response.sendError(HttpServletResponse.SC_FORBIDDEN, "Forbidden") [FD]
Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) --> Line_52 $$ response.setStatus(HttpServletResponse.SC_FORBIDDEN) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_52 $$ response.setStatus(HttpServletResponse.SC_FORBIDDEN) [FD]
Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) --> Line_53 $$ response.flushBuffer() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_53 $$ response.flushBuffer() [FD]
Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) --> Line_54 $$ Logger.log("Forbidden content requested: " + fileParameter) [CD]
Line_50 $$ if (!SecurityHelper.doesUserHavePermission(session, authUser, file, Permission.PERM.READ)) --> Line_55 $$ return [CD]
Line_6 $$ File file = null --> Line_57 $$ String contentType = file.getContentType() [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_58 $$ response.setContentType(contentType) [FD]
Line_57 $$ String contentType = file.getContentType() --> Line_58 $$ response.setContentType(contentType) [FD]
Line_10 $$ String disposition = request.getParameter("disposition") --> Line_59 $$ if ("attachment".equals(disposition)) [FD]
Line_27 $$ disposition = filename.substring(underscoreIndex, filename.indexOf("_", underscoreIndex)) --> Line_59 $$ if ("attachment".equals(disposition)) [FD]
Line_59 $$ if ("attachment".equals(disposition)) --> Line_60 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"") [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_60 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"") [FD]
Line_6 $$ File file = null --> Line_60 $$ response.setHeader("Content-Disposition", "attachment; filename=\"" + file.getName() + "\"") [FD]
Line_59 $$ if ("attachment".equals(disposition)) --> Line_62 $$ response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"") [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_62 $$ response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"") [FD]
Line_6 $$ File file = null --> Line_62 $$ response.setHeader("Content-Disposition", "inline; filename=\"" + file.getName() + "\"") [FD]
Line_6 $$ File file = null --> Line_64 $$ String name = file.getName() [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_65 $$ response.setHeader("Content-Description", name) [FD]
Line_64 $$ String name = file.getName() --> Line_65 $$ response.setHeader("Content-Description", name) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_66 $$ response.setDateHeader("Last-Modified", file.getLastModifiedDate()) [FD]
Line_6 $$ File file = null --> Line_66 $$ response.setDateHeader("Last-Modified", file.getLastModifiedDate()) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_67 $$ response.setDateHeader("Expires", System.currentTimeMillis() + 31536000000L) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_68 $$ response.setContentLength((int) file.getSize()) [FD]
Line_6 $$ File file = null --> Line_68 $$ response.setContentLength((int) file.getSize()) [FD]
Line_6 $$ File file = null --> Line_69 $$ java.io.File possibleDataFile = new java.io.File(BaseSystem.getTempDir() + file.getNameOnDisk()) [FD]
Line_69 $$ java.io.File possibleDataFile = new java.io.File(BaseSystem.getTempDir() + file.getNameOnDisk()) --> Line_70 $$ if (possibleDataFile.exists()) [FD]
Line_70 $$ if (possibleDataFile.exists()) --> Line_71 $$ Logger.log("File exists in " + BaseSystem.getTempDir() + " pulling " + possibleDataFile.getName()) [CD]
Line_69 $$ java.io.File possibleDataFile = new java.io.File(BaseSystem.getTempDir() + file.getNameOnDisk()) --> Line_71 $$ Logger.log("File exists in " + BaseSystem.getTempDir() + " pulling " + possibleDataFile.getName()) [FD]
Line_70 $$ if (possibleDataFile.exists()) --> Line_72 $$ FileInputStream fileInputStream = new FileInputStream(possibleDataFile) [CD]
Line_72 $$ FileInputStream fileInputStream = new FileInputStream(possibleDataFile) --> Line_74 $$ IOUtils.copy(fileInputStream, outStream) [FD]
Line_5 $$ ServletOutputStream outStream = response.getOutputStream() --> Line_74 $$ IOUtils.copy(fileInputStream, outStream) [FD]
Line_72 $$ FileInputStream fileInputStream = new FileInputStream(possibleDataFile) --> Line_77 $$ fileInputStream.close() [FD]
Line_70 $$ if (possibleDataFile.exists()) --> Line_82 $$ List<FileData> fileDataList = HibernateUtil.getInstance().executeQuery(session, "from " + FileData.class.getSimpleName() + " where permissibleObject.id = " + file.getId()) [CD]
Line_3 $$ Session session = HibernateUtil.getInstance().getSession() --> Line_82 $$ List<FileData> fileDataList = HibernateUtil.getInstance().executeQuery(session, "from " + FileData.class.getSimpleName() + " where permissibleObject.id = " + file.getId()) [FD]
Line_6 $$ File file = null --> Line_82 $$ List<FileData> fileDataList = HibernateUtil.getInstance().executeQuery(session, "from " + FileData.class.getSimpleName() + " where permissibleObject.id = " + file.getId()) [FD]
Line_70 $$ if (possibleDataFile.exists()) --> Line_83 $$ if (fileDataList.size() == 0) [CD]
Line_83 $$ if (fileDataList.size() == 0) --> Line_84 $$ response.sendError(HttpServletResponse.SC_NOT_FOUND) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_84 $$ response.sendError(HttpServletResponse.SC_NOT_FOUND) [FD]
Line_83 $$ if (fileDataList.size() == 0) --> Line_85 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND) [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_85 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND) [FD]
Line_83 $$ if (fileDataList.size() == 0) --> Line_86 $$ Logger.log("Requested content not found: " + fileParameter) [CD]
Line_83 $$ if (fileDataList.size() == 0) --> Line_87 $$ response.flushBuffer() [CD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_87 $$ response.flushBuffer() [FD]
Line_83 $$ if (fileDataList.size() == 0) --> Line_88 $$ return [CD]
Line_70 $$ if (possibleDataFile.exists()) --> Line_90 $$ fileData = (FileData) fileDataList.get(0) [CD]
Line_7 $$ FileData fileData = null --> Line_90 $$ fileData = (FileData) fileDataList.get(0) [FD]
Line_70 $$ if (possibleDataFile.exists()) --> Line_91 $$ FileOutputStream fileOutputStream = null [CD]
Line_93 $$ java.io.File tmpDir = new java.io.File(BaseSystem.getTempDir()) --> Line_94 $$ tmpDir.mkdirs() [FD]
Line_91 $$ FileOutputStream fileOutputStream = null --> Line_95 $$ fileOutputStream = new FileOutputStream(possibleDataFile) [FD]
Line_91 $$ FileOutputStream fileOutputStream = null --> Line_96 $$ IOUtils.write(fileData.getData(), fileOutputStream) [FD]
Line_95 $$ fileOutputStream = new FileOutputStream(possibleDataFile) --> Line_96 $$ IOUtils.write(fileData.getData(), fileOutputStream) [FD]
Line_7 $$ FileData fileData = null --> Line_96 $$ IOUtils.write(fileData.getData(), fileOutputStream) [FD]
Line_90 $$ fileData = (FileData) fileDataList.get(0) --> Line_96 $$ IOUtils.write(fileData.getData(), fileOutputStream) [FD]
Line_91 $$ FileOutputStream fileOutputStream = null --> Line_101 $$ fileOutputStream.close() [FD]
Line_95 $$ fileOutputStream = new FileOutputStream(possibleDataFile) --> Line_101 $$ fileOutputStream.close() [FD]
Line_70 $$ if (possibleDataFile.exists()) --> Line_105 $$ IOUtils.write(fileData.getData(), outStream) [CD]
Line_5 $$ ServletOutputStream outStream = response.getOutputStream() --> Line_105 $$ IOUtils.write(fileData.getData(), outStream) [FD]
Line_7 $$ FileData fileData = null --> Line_105 $$ IOUtils.write(fileData.getData(), outStream) [FD]
Line_90 $$ fileData = (FileData) fileDataList.get(0) --> Line_105 $$ IOUtils.write(fileData.getData(), outStream) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_110 $$ response.sendError(HttpServletResponse.SC_NOT_FOUND) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_111 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND) [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_112 $$ response.flushBuffer() [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_116 $$ response.reset() [FD]
Line_2 $$ protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException --> Line_117 $$ response.resetBuffer() [FD]
Line_6 $$ File file = null --> Line_121 $$ file = null [FD]
Line_7 $$ FileData fileData = null --> Line_122 $$ fileData = null [FD]
Line_90 $$ fileData = (FileData) fileDataList.get(0) --> Line_122 $$ fileData = null [FD]
Line_5 $$ ServletOutputStream outStream = response.getOutputStream() --> Line_124 $$ outStream.flush() [FD]
Line_5 $$ ServletOutputStream outStream = response.getOutputStream() --> Line_128 $$ outStream.close() [FD]
Line_3 $$ Session session = HibernateUtil.getInstance().getSession() --> Line_132 $$ session.close() [FD]
