Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_4 $$ cal.setTime(begin) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_4 $$ cal.setTime(begin) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_5 $$ String beginYear = String.valueOf(cal.get(Calendar.YEAR)) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_5 $$ String beginYear = String.valueOf(cal.get(Calendar.YEAR)) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_6 $$ String beginMonth = String.valueOf(cal.get(Calendar.MONTH)) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_6 $$ String beginMonth = String.valueOf(cal.get(Calendar.MONTH)) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_7 $$ String beginDay = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_7 $$ String beginDay = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_8 $$ if (end == null) [CD]
Line_8 $$ if (end == null) --> Line_9 $$ GregorianCalendar gCal = new GregorianCalendar() [CD]
Line_8 $$ if (end == null) --> Line_10 $$ gCal.add(Calendar.DATE, -1) [CD]
Line_9 $$ GregorianCalendar gCal = new GregorianCalendar() --> Line_10 $$ gCal.add(Calendar.DATE, -1) [FD]
Line_8 $$ if (end == null) --> Line_11 $$ end = gCal.getTime() [CD]
Line_9 $$ GregorianCalendar gCal = new GregorianCalendar() --> Line_11 $$ end = gCal.getTime() [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_13 $$ cal.setTime(end) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_13 $$ cal.setTime(end) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_14 $$ String day = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_14 $$ String day = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_15 $$ String month = String.valueOf(cal.get(Calendar.MONTH)) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_15 $$ String month = String.valueOf(cal.get(Calendar.MONTH)) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_16 $$ String year = String.valueOf(cal.get(Calendar.YEAR)) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC")) --> Line_16 $$ String year = String.valueOf(cal.get(Calendar.YEAR)) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_17 $$ String resolution = "d" [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_6 $$ String beginMonth = String.valueOf(cal.get(Calendar.MONTH)) --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_7 $$ String beginDay = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_5 $$ String beginYear = String.valueOf(cal.get(Calendar.YEAR)) --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_15 $$ String month = String.valueOf(cal.get(Calendar.MONTH)) --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_14 $$ String day = String.valueOf(cal.get(Calendar.DAY_OF_MONTH)) --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_16 $$ String year = String.valueOf(cal.get(Calendar.YEAR)) --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_17 $$ String resolution = "d" --> Line_18 $$ String urlStr = MessageFormat.format(YAHOO_URL, symbol, beginMonth, beginDay, beginYear, month, day, year, resolution) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_19 $$ BufferedReader reader [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_20 $$ String line [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_21 $$ List<String> lineList = new ArrayList<String>() [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_22 $$ log.info("URL [" + urlStr + "]") [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_23 $$ URL url = new URL(urlStr) [CD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_24 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) [CD]
Line_19 $$ BufferedReader reader --> Line_24 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_23 $$ URL url = new URL(urlStr) --> Line_24 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_25 $$ line = reader.readLine() [CD]
Line_20 $$ String line --> Line_25 $$ line = reader.readLine() [FD]
Line_19 $$ BufferedReader reader --> Line_25 $$ line = reader.readLine() [FD]
Line_24 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_25 $$ line = reader.readLine() [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_26 $$ log.debug(line) [CD]
Line_20 $$ String line --> Line_26 $$ log.debug(line) [FD]
Line_25 $$ line = reader.readLine() --> Line_26 $$ log.debug(line) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_27 $$ while ((line = reader.readLine()) != null) [CD]
Line_20 $$ String line --> Line_27 $$ while ((line = reader.readLine()) != null) [FD]
Line_25 $$ line = reader.readLine() --> Line_27 $$ while ((line = reader.readLine()) != null) [FD]
Line_19 $$ BufferedReader reader --> Line_27 $$ while ((line = reader.readLine()) != null) [FD]
Line_24 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_27 $$ while ((line = reader.readLine()) != null) [FD]
Line_27 $$ while ((line = reader.readLine()) != null) --> Line_28 $$ lineList.add(0, line) [CD]
Line_27 $$ while ((line = reader.readLine()) != null) --> Line_28 $$ lineList.add(0, line) [FD]
Line_21 $$ List<String> lineList = new ArrayList<String>() --> Line_28 $$ lineList.add(0, line) [FD]
Line_20 $$ String line --> Line_28 $$ lineList.add(0, line) [FD]
Line_25 $$ line = reader.readLine() --> Line_28 $$ lineList.add(0, line) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_30 $$ List<Candle> candles = new ArrayList<Candle>() [CD]
Line_31 $$ for (String currentLine : lineList) --> Line_32 $$ log.debug(currentLine) [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_34 $$ String datestring = str.nextToken() [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_35 $$ double open = round(Double.parseDouble(str.nextToken()), 2) [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_36 $$ double high = Double.parseDouble(str.nextToken()) [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_37 $$ double low = Double.parseDouble(str.nextToken()) [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_38 $$ double close = Double.parseDouble(str.nextToken()) [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_41 $$ if (str.hasMoreTokens()) [FD]
Line_41 $$ if (str.hasMoreTokens()) --> Line_42 $$ volume = Long.parseLong(str.nextToken()) [CD]
Line_39 $$ long volume = 0 --> Line_42 $$ volume = Long.parseLong(str.nextToken()) [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_42 $$ volume = Long.parseLong(str.nextToken()) [FD]
Line_41 $$ if (str.hasMoreTokens()) --> Line_43 $$ if (splitAdjust) [CD]
Line_43 $$ if (splitAdjust) --> Line_44 $$ adjclose = Double.parseDouble(str.nextToken()) [CD]
Line_40 $$ double adjclose = 0 --> Line_44 $$ adjclose = Double.parseDouble(str.nextToken()) [FD]
Line_33 $$ StringTokenizer str = new StringTokenizer(currentLine, ",") --> Line_44 $$ adjclose = Double.parseDouble(str.nextToken()) [FD]
Line_34 $$ String datestring = str.nextToken() --> Line_47 $$ Date date = sdf.parse(datestring) [FD]
Line_49 $$ if (splitAdjust) --> Line_50 $$ double adjustmentFactor = adjclose / close [CD]
Line_49 $$ if (splitAdjust) --> Line_51 $$ candle = new Candle(symbol, date, round(open * adjustmentFactor, 2), round(high * adjustmentFactor, 2), round(low * adjustmentFactor, 2), adjclose, volume) [CD]
Line_48 $$ Candle candle = null --> Line_51 $$ candle = new Candle(symbol, date, round(open * adjustmentFactor, 2), round(high * adjustmentFactor, 2), round(low * adjustmentFactor, 2), adjclose, volume) [FD]
Line_49 $$ if (splitAdjust) --> Line_53 $$ candle = new Candle(symbol, date, open, high, low, close, volume) [CD]
Line_48 $$ Candle candle = null --> Line_53 $$ candle = new Candle(symbol, date, open, high, low, close, volume) [FD]
Line_51 $$ candle = new Candle(symbol, date, round(open * adjustmentFactor, 2), round(high * adjustmentFactor, 2), round(low * adjustmentFactor, 2), adjclose, volume) --> Line_53 $$ candle = new Candle(symbol, date, open, high, low, close, volume) [FD]
Line_30 $$ List<Candle> candles = new ArrayList<Candle>() --> Line_55 $$ candles.add(candle) [FD]
Line_48 $$ Candle candle = null --> Line_55 $$ candles.add(candle) [FD]
Line_51 $$ candle = new Candle(symbol, date, round(open * adjustmentFactor, 2), round(high * adjustmentFactor, 2), round(low * adjustmentFactor, 2), adjclose, volume) --> Line_55 $$ candles.add(candle) [FD]
Line_53 $$ candle = new Candle(symbol, date, open, high, low, close, volume) --> Line_55 $$ candles.add(candle) [FD]
Line_2 $$ public CandleSeries fetchSeries(final String symbol) throws Exception --> Line_57 $$ return new CandleSeries(candles) [CD]
