Line_2 $$ public void testAddingEntries() throws Exception --> Line_3 $$ DiskCache c = new DiskCache() [CD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_5 $$ c.setRoot(rootFolder.getAbsolutePath()) [CD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_5 $$ c.setRoot(rootFolder.getAbsolutePath()) [FD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_6 $$ c.setHtmlExtension("htm") [CD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_6 $$ c.setHtmlExtension("htm") [FD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_7 $$ c.setPropertiesExtension("txt") [CD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_7 $$ c.setPropertiesExtension("txt") [FD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_8 $$ assertEquals("htm", c.getHtmlExtension()) [CD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_8 $$ assertEquals("htm", c.getHtmlExtension()) [FD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_9 $$ assertEquals("txt", c.getPropertiesExtension()) [CD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_9 $$ assertEquals("txt", c.getPropertiesExtension()) [FD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_10 $$ assertEquals(rootFolder.getAbsolutePath(), c.getRoot()) [CD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_10 $$ assertEquals(rootFolder.getAbsolutePath(), c.getRoot()) [FD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_12 $$ String key1 = "cat1/key1" [CD]
Line_2 $$ public void testAddingEntries() throws Exception --> Line_13 $$ String key2 = "cat1/key2" [CD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_17 $$ c.removeCacheEntry(key1, null) [FD]
Line_12 $$ String key1 = "cat1/key1" --> Line_17 $$ c.removeCacheEntry(key1, null) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_18 $$ CacheItem i = c.getOrCreateCacheEntry(key1) [FD]
Line_12 $$ String key1 = "cat1/key1" --> Line_18 $$ CacheItem i = c.getOrCreateCacheEntry(key1) [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_34 $$ i.setContentAsStream(input) [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_36 $$ input.close() [FD]
Line_46 $$ int ii = 0 --> Line_48 $$ ii++ [FD]
Line_46 $$ int ii = 0 --> Line_49 $$ if (ii == 1) [FD]
Line_49 $$ if (ii == 1) --> Line_50 $$ assertEquals("Content-Length", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_50 $$ assertEquals("Content-Length", h.getName()) [FD]
Line_49 $$ if (ii == 1) --> Line_51 $$ assertEquals("[97]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_51 $$ assertEquals("[97]", Arrays.toString(h.getValues())) [FD]
Line_49 $$ if (ii == 1) --> Line_52 $$ if (ii == 2) [CD]
Line_46 $$ int ii = 0 --> Line_52 $$ if (ii == 2) [FD]
Line_52 $$ if (ii == 2) --> Line_53 $$ assertEquals("Test1", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_53 $$ assertEquals("Test1", h.getName()) [FD]
Line_52 $$ if (ii == 2) --> Line_54 $$ assertEquals("[Value1, Value2]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_54 $$ assertEquals("[Value1, Value2]", Arrays.toString(h.getValues())) [FD]
Line_52 $$ if (ii == 2) --> Line_55 $$ if (ii == 3) [CD]
Line_46 $$ int ii = 0 --> Line_55 $$ if (ii == 3) [FD]
Line_55 $$ if (ii == 3) --> Line_56 $$ assertEquals("Test2", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_56 $$ assertEquals("Test2", h.getName()) [FD]
Line_55 $$ if (ii == 3) --> Line_57 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_57 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues())) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_61 $$ c.storeInCache(key1, i) [FD]
Line_12 $$ String key1 = "cat1/key1" --> Line_61 $$ c.storeInCache(key1, i) [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_69 $$ IOUtils.copy(input, w, "ISO-8859-7") [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_69 $$ IOUtils.copy(input, w, "ISO-8859-7") [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_70 $$ IOUtils.closeQuietly(input) [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_71 $$ IOUtils.closeQuietly(w) [FD]
Line_30 $$ String greekText = new String(greekTextBytes, "ISO-8859-7") --> Line_72 $$ assertEquals(greekText, w.toString()) [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_72 $$ assertEquals(greekText, w.toString()) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_76 $$ c.removeCacheEntry(key2, null) [FD]
Line_13 $$ String key2 = "cat1/key2" --> Line_76 $$ c.removeCacheEntry(key2, null) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_77 $$ CacheItem i = c.getOrCreateCacheEntry(key2) [FD]
Line_13 $$ String key2 = "cat1/key2" --> Line_77 $$ CacheItem i = c.getOrCreateCacheEntry(key2) [FD]
Line_88 $$ String englishText = "Hello this is another example" --> Line_90 $$ InputStream input = new ByteArrayInputStream(englishText.getBytes("ISO-8859-1")) [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_92 $$ i.setContentAsStream(input) [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_94 $$ input.close() [FD]
Line_46 $$ int ii = 0 --> Line_106 $$ ii++ [FD]
Line_46 $$ int ii = 0 --> Line_107 $$ if (ii == 1) [FD]
Line_107 $$ if (ii == 1) --> Line_108 $$ assertEquals("Content-Length", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_108 $$ assertEquals("Content-Length", h.getName()) [FD]
Line_107 $$ if (ii == 1) --> Line_109 $$ assertEquals("[29]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_109 $$ assertEquals("[29]", Arrays.toString(h.getValues())) [FD]
Line_107 $$ if (ii == 1) --> Line_110 $$ if (ii == 2) [CD]
Line_46 $$ int ii = 0 --> Line_110 $$ if (ii == 2) [FD]
Line_110 $$ if (ii == 2) --> Line_111 $$ assertEquals("Test3", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_111 $$ assertEquals("Test3", h.getName()) [FD]
Line_110 $$ if (ii == 2) --> Line_112 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_112 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues())) [FD]
Line_110 $$ if (ii == 2) --> Line_113 $$ if (ii == 3) [CD]
Line_46 $$ int ii = 0 --> Line_113 $$ if (ii == 3) [FD]
Line_113 $$ if (ii == 3) --> Line_114 $$ assertEquals("Test4", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_114 $$ assertEquals("Test4", h.getName()) [FD]
Line_113 $$ if (ii == 3) --> Line_115 $$ assertEquals("[Value1]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_115 $$ assertEquals("[Value1]", Arrays.toString(h.getValues())) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_119 $$ c.storeInCache(key2, i) [FD]
Line_13 $$ String key2 = "cat1/key2" --> Line_119 $$ c.storeInCache(key2, i) [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_127 $$ IOUtils.copy(input, w, "ISO-8859-1") [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_127 $$ IOUtils.copy(input, w, "ISO-8859-1") [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_128 $$ IOUtils.closeQuietly(input) [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_129 $$ IOUtils.closeQuietly(w) [FD]
Line_88 $$ String englishText = "Hello this is another example" --> Line_130 $$ assertEquals(englishText, w.toString()) [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_130 $$ assertEquals(englishText, w.toString()) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_134 $$ CacheItem i = c.getOrCreateCacheEntry(key1) [FD]
Line_12 $$ String key1 = "cat1/key1" --> Line_134 $$ CacheItem i = c.getOrCreateCacheEntry(key1) [FD]
Line_46 $$ int ii = 0 --> Line_143 $$ ii++ [FD]
Line_46 $$ int ii = 0 --> Line_144 $$ if (ii == 1) [FD]
Line_144 $$ if (ii == 1) --> Line_145 $$ assertEquals("Content-Length", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_145 $$ assertEquals("Content-Length", h.getName()) [FD]
Line_144 $$ if (ii == 1) --> Line_146 $$ assertEquals("[97]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_146 $$ assertEquals("[97]", Arrays.toString(h.getValues())) [FD]
Line_144 $$ if (ii == 1) --> Line_147 $$ if (ii == 2) [CD]
Line_46 $$ int ii = 0 --> Line_147 $$ if (ii == 2) [FD]
Line_147 $$ if (ii == 2) --> Line_148 $$ assertEquals("Test1", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_148 $$ assertEquals("Test1", h.getName()) [FD]
Line_147 $$ if (ii == 2) --> Line_149 $$ assertEquals("[Value1, Value2]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_149 $$ assertEquals("[Value1, Value2]", Arrays.toString(h.getValues())) [FD]
Line_147 $$ if (ii == 2) --> Line_150 $$ if (ii == 3) [CD]
Line_46 $$ int ii = 0 --> Line_150 $$ if (ii == 3) [FD]
Line_150 $$ if (ii == 3) --> Line_151 $$ assertEquals("Test2", h.getName()) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_151 $$ assertEquals("Test2", h.getName()) [FD]
Line_150 $$ if (ii == 3) --> Line_152 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues())) [CD]
Line_47 $$ for (ResponseHeader h : i.getHeaders()) --> Line_152 $$ assertEquals("[Value3, Value4]", Arrays.toString(h.getValues())) [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_161 $$ IOUtils.copy(input, w, "ISO-8859-7") [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_161 $$ IOUtils.copy(input, w, "ISO-8859-7") [FD]
Line_32 $$ InputStream input = new ByteArrayInputStream(greekTextBytes) --> Line_162 $$ IOUtils.closeQuietly(input) [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_163 $$ IOUtils.closeQuietly(w) [FD]
Line_30 $$ String greekText = new String(greekTextBytes, "ISO-8859-7") --> Line_164 $$ assertEquals(greekText, w.toString()) [FD]
Line_68 $$ StringWriter w = new StringWriter() --> Line_164 $$ assertEquals(greekText, w.toString()) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_168 $$ c.removeCacheEntry(key1, null) [FD]
Line_12 $$ String key1 = "cat1/key1" --> Line_168 $$ c.removeCacheEntry(key1, null) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_169 $$ CacheItem i = c.getOrCreateCacheEntry(key1) [FD]
Line_12 $$ String key1 = "cat1/key1" --> Line_169 $$ CacheItem i = c.getOrCreateCacheEntry(key1) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_177 $$ c.removeCacheEntry(key1, null) [FD]
Line_12 $$ String key1 = "cat1/key1" --> Line_177 $$ c.removeCacheEntry(key1, null) [FD]
Line_3 $$ DiskCache c = new DiskCache() --> Line_180 $$ c.removeCacheEntry(key2, null) [FD]
Line_13 $$ String key2 = "cat1/key2" --> Line_180 $$ c.removeCacheEntry(key2, null) [FD]
