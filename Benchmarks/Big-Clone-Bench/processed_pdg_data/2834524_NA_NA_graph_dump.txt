Line_2 $$ public void write() throws IOException --> Line_3 $$ JarOutputStream jarOut = new JarOutputStream(outputStream, manifest) [CD]
Line_2 $$ public void write() throws IOException --> Line_4 $$ if (includeJars != null) [CD]
Line_4 $$ if (includeJars != null) --> Line_5 $$ HashSet allEntries = new HashSet(includeJars) [CD]
Line_4 $$ if (includeJars != null) --> Line_6 $$ if (!ignoreDependencies) [CD]
Line_5 $$ HashSet allEntries = new HashSet(includeJars) --> Line_6 $$ if (!ignoreDependencies) [FD]
Line_4 $$ if (includeJars != null) --> Line_7 $$ for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) [CD]
Line_5 $$ HashSet allEntries = new HashSet(includeJars) --> Line_7 $$ for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) [FD]
Line_7 $$ for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) --> Line_8 $$ JarFile jar = getJarFile(iterator.next()) [CD]
Line_7 $$ for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) --> Line_8 $$ JarFile jar = getJarFile(iterator.next()) [FD]
Line_7 $$ for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) --> Line_9 $$ Enumeration jarEntries = jar.entries() [CD]
Line_8 $$ JarFile jar = getJarFile(iterator.next()) --> Line_9 $$ Enumeration jarEntries = jar.entries() [FD]
Line_7 $$ for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) --> Line_10 $$ while (jarEntries.hasMoreElements()) [CD]
Line_9 $$ Enumeration jarEntries = jar.entries() --> Line_10 $$ while (jarEntries.hasMoreElements()) [FD]
Line_10 $$ while (jarEntries.hasMoreElements()) --> Line_11 $$ ZipEntry o1 = (ZipEntry) jarEntries.nextElement() [CD]
Line_9 $$ Enumeration jarEntries = jar.entries() --> Line_11 $$ ZipEntry o1 = (ZipEntry) jarEntries.nextElement() [FD]
Line_10 $$ while (jarEntries.hasMoreElements()) --> Line_12 $$ if (o1.getName().equalsIgnoreCase("META-INF/MANIFEST.MF") || o1.getSize() <= 0) [CD]
Line_10 $$ while (jarEntries.hasMoreElements()) --> Line_13 $$ jarOut.putNextEntry(o1) [CD]
Line_3 $$ JarOutputStream jarOut = new JarOutputStream(outputStream, manifest) --> Line_13 $$ jarOut.putNextEntry(o1) [FD]
Line_10 $$ while (jarEntries.hasMoreElements()) --> Line_14 $$ InputStream entryStream = jar.getInputStream(o1) [CD]
Line_8 $$ JarFile jar = getJarFile(iterator.next()) --> Line_14 $$ InputStream entryStream = jar.getInputStream(o1) [FD]
Line_10 $$ while (jarEntries.hasMoreElements()) --> Line_15 $$ IOUtils.copy(entryStream, jarOut) [CD]
Line_14 $$ InputStream entryStream = jar.getInputStream(o1) --> Line_15 $$ IOUtils.copy(entryStream, jarOut) [FD]
Line_3 $$ JarOutputStream jarOut = new JarOutputStream(outputStream, manifest) --> Line_15 $$ IOUtils.copy(entryStream, jarOut) [FD]
Line_10 $$ while (jarEntries.hasMoreElements()) --> Line_16 $$ jarOut.closeEntry() [CD]
Line_3 $$ JarOutputStream jarOut = new JarOutputStream(outputStream, manifest) --> Line_16 $$ jarOut.closeEntry() [FD]
Line_2 $$ public void write() throws IOException --> Line_20 $$ jarOut.finish() [CD]
Line_3 $$ JarOutputStream jarOut = new JarOutputStream(outputStream, manifest) --> Line_20 $$ jarOut.finish() [FD]
Line_2 $$ public void write() throws IOException --> Line_21 $$ jarOut.close() [CD]
Line_3 $$ JarOutputStream jarOut = new JarOutputStream(outputStream, manifest) --> Line_21 $$ jarOut.close() [FD]
