Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_3 $$ if (request.getHeader("If-Modified-Since") != null) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_3 $$ if (request.getHeader("If-Modified-Since") != null) [FD]
Line_3 $$ if (request.getHeader("If-Modified-Since") != null) --> Line_4 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_4 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED) [FD]
Line_3 $$ if (request.getHeader("If-Modified-Since") != null) --> Line_5 $$ return [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_7 $$ String host = request.getHeader("Host") [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_7 $$ String host = request.getHeader("Host") [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_8 $$ if (!lockedDomainService.isSafeForOpenProxy(host)) [CD]
Line_7 $$ String host = request.getHeader("Host") --> Line_8 $$ if (!lockedDomainService.isSafeForOpenProxy(host)) [FD]
Line_8 $$ if (!lockedDomainService.isSafeForOpenProxy(host)) --> Line_9 $$ String msg = "Embed request for url " + getParameter(request, URL_PARAM, "") + " made to wrong domain " + host [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_9 $$ String msg = "Embed request for url " + getParameter(request, URL_PARAM, "") + " made to wrong domain " + host [FD]
Line_8 $$ if (!lockedDomainService.isSafeForOpenProxy(host)) --> Line_10 $$ logger.info(msg) [CD]
Line_9 $$ String msg = "Embed request for url " + getParameter(request, URL_PARAM, "") + " made to wrong domain " + host --> Line_10 $$ logger.info(msg) [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_13 $$ HttpRequest rcr = buildHttpRequest(request, URL_PARAM) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_13 $$ HttpRequest rcr = buildHttpRequest(request, URL_PARAM) [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) [CD]
Line_13 $$ HttpRequest rcr = buildHttpRequest(request, URL_PARAM) --> Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_15 $$ if (results.isError()) [CD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_15 $$ if (results.isError()) [FD]
Line_15 $$ if (results.isError()) --> Line_16 $$ HttpRequest fallbackRcr = buildHttpRequest(request, FALLBACK_URL_PARAM) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_16 $$ HttpRequest fallbackRcr = buildHttpRequest(request, FALLBACK_URL_PARAM) [FD]
Line_15 $$ if (results.isError()) --> Line_17 $$ if (fallbackRcr != null) [CD]
Line_16 $$ HttpRequest fallbackRcr = buildHttpRequest(request, FALLBACK_URL_PARAM) --> Line_17 $$ if (fallbackRcr != null) [FD]
Line_17 $$ if (fallbackRcr != null) --> Line_18 $$ results = requestPipeline.execute(fallbackRcr) [CD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_18 $$ results = requestPipeline.execute(fallbackRcr) [FD]
Line_16 $$ HttpRequest fallbackRcr = buildHttpRequest(request, FALLBACK_URL_PARAM) --> Line_18 $$ results = requestPipeline.execute(fallbackRcr) [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_21 $$ if (contentRewriterRegistry != null) [CD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) [FD]
Line_18 $$ results = requestPipeline.execute(fallbackRcr) --> Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) [FD]
Line_13 $$ HttpRequest rcr = buildHttpRequest(request, URL_PARAM) --> Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) [FD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_28 $$ for (Map.Entry<String, String> entry : results.getHeaders().entries()) [FD]
Line_18 $$ results = requestPipeline.execute(fallbackRcr) --> Line_28 $$ for (Map.Entry<String, String> entry : results.getHeaders().entries()) [FD]
Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) --> Line_28 $$ for (Map.Entry<String, String> entry : results.getHeaders().entries()) [FD]
Line_29 $$ String name = entry.getKey() --> Line_30 $$ if (!DISALLOWED_RESPONSE_HEADERS.contains(name.toLowerCase())) [FD]
Line_30 $$ if (!DISALLOWED_RESPONSE_HEADERS.contains(name.toLowerCase())) --> Line_31 $$ response.addHeader(name, entry.getValue()) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_31 $$ response.addHeader(name, entry.getValue()) [FD]
Line_29 $$ String name = entry.getKey() --> Line_31 $$ response.addHeader(name, entry.getValue()) [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_34 $$ String responseType = results.getHeader("Content-Type") [CD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_34 $$ String responseType = results.getHeader("Content-Type") [FD]
Line_18 $$ results = requestPipeline.execute(fallbackRcr) --> Line_34 $$ String responseType = results.getHeader("Content-Type") [FD]
Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) --> Line_34 $$ String responseType = results.getHeader("Content-Type") [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_35 $$ if (!StringUtils.isEmpty(rcr.getRewriteMimeType())) [CD]
Line_13 $$ HttpRequest rcr = buildHttpRequest(request, URL_PARAM) --> Line_35 $$ if (!StringUtils.isEmpty(rcr.getRewriteMimeType())) [FD]
Line_35 $$ if (!StringUtils.isEmpty(rcr.getRewriteMimeType())) --> Line_36 $$ String requiredType = rcr.getRewriteMimeType() [CD]
Line_13 $$ HttpRequest rcr = buildHttpRequest(request, URL_PARAM) --> Line_36 $$ String requiredType = rcr.getRewriteMimeType() [FD]
Line_35 $$ if (!StringUtils.isEmpty(rcr.getRewriteMimeType())) --> Line_37 $$ if (requiredType.endsWith("/*") && !StringUtils.isEmpty(responseType)) [CD]
Line_36 $$ String requiredType = rcr.getRewriteMimeType() --> Line_37 $$ if (requiredType.endsWith("/*") && !StringUtils.isEmpty(responseType)) [FD]
Line_34 $$ String responseType = results.getHeader("Content-Type") --> Line_37 $$ if (requiredType.endsWith("/*") && !StringUtils.isEmpty(responseType)) [FD]
Line_37 $$ if (requiredType.endsWith("/*") && !StringUtils.isEmpty(responseType)) --> Line_38 $$ requiredType = requiredType.substring(0, requiredType.length() - 2) [CD]
Line_36 $$ String requiredType = rcr.getRewriteMimeType() --> Line_38 $$ requiredType = requiredType.substring(0, requiredType.length() - 2) [FD]
Line_37 $$ if (requiredType.endsWith("/*") && !StringUtils.isEmpty(responseType)) --> Line_39 $$ if (!responseType.toLowerCase().startsWith(requiredType.toLowerCase())) [CD]
Line_34 $$ String responseType = results.getHeader("Content-Type") --> Line_39 $$ if (!responseType.toLowerCase().startsWith(requiredType.toLowerCase())) [FD]
Line_36 $$ String requiredType = rcr.getRewriteMimeType() --> Line_39 $$ if (!responseType.toLowerCase().startsWith(requiredType.toLowerCase())) [FD]
Line_38 $$ requiredType = requiredType.substring(0, requiredType.length() - 2) --> Line_39 $$ if (!responseType.toLowerCase().startsWith(requiredType.toLowerCase())) [FD]
Line_39 $$ if (!responseType.toLowerCase().startsWith(requiredType.toLowerCase())) --> Line_40 $$ response.setContentType(requiredType) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_40 $$ response.setContentType(requiredType) [FD]
Line_36 $$ String requiredType = rcr.getRewriteMimeType() --> Line_40 $$ response.setContentType(requiredType) [FD]
Line_38 $$ requiredType = requiredType.substring(0, requiredType.length() - 2) --> Line_40 $$ response.setContentType(requiredType) [FD]
Line_39 $$ if (!responseType.toLowerCase().startsWith(requiredType.toLowerCase())) --> Line_41 $$ responseType = requiredType [CD]
Line_34 $$ String responseType = results.getHeader("Content-Type") --> Line_41 $$ responseType = requiredType [FD]
Line_36 $$ String requiredType = rcr.getRewriteMimeType() --> Line_41 $$ responseType = requiredType [FD]
Line_38 $$ requiredType = requiredType.substring(0, requiredType.length() - 2) --> Line_41 $$ responseType = requiredType [FD]
Line_37 $$ if (requiredType.endsWith("/*") && !StringUtils.isEmpty(responseType)) --> Line_44 $$ response.setContentType(requiredType) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_44 $$ response.setContentType(requiredType) [FD]
Line_36 $$ String requiredType = rcr.getRewriteMimeType() --> Line_44 $$ response.setContentType(requiredType) [FD]
Line_38 $$ requiredType = requiredType.substring(0, requiredType.length() - 2) --> Line_44 $$ response.setContentType(requiredType) [FD]
Line_37 $$ if (requiredType.endsWith("/*") && !StringUtils.isEmpty(responseType)) --> Line_45 $$ responseType = requiredType [CD]
Line_34 $$ String responseType = results.getHeader("Content-Type") --> Line_45 $$ responseType = requiredType [FD]
Line_41 $$ responseType = requiredType --> Line_45 $$ responseType = requiredType [FD]
Line_36 $$ String requiredType = rcr.getRewriteMimeType() --> Line_45 $$ responseType = requiredType [FD]
Line_38 $$ requiredType = requiredType.substring(0, requiredType.length() - 2) --> Line_45 $$ responseType = requiredType [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_48 $$ setResponseHeaders(request, response, results) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_48 $$ setResponseHeaders(request, response, results) [FD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_48 $$ setResponseHeaders(request, response, results) [FD]
Line_18 $$ results = requestPipeline.execute(fallbackRcr) --> Line_48 $$ setResponseHeaders(request, response, results) [FD]
Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) --> Line_48 $$ setResponseHeaders(request, response, results) [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_49 $$ if (results.getHttpStatusCode() != HttpResponse.SC_OK) [CD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_49 $$ if (results.getHttpStatusCode() != HttpResponse.SC_OK) [FD]
Line_18 $$ results = requestPipeline.execute(fallbackRcr) --> Line_49 $$ if (results.getHttpStatusCode() != HttpResponse.SC_OK) [FD]
Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) --> Line_49 $$ if (results.getHttpStatusCode() != HttpResponse.SC_OK) [FD]
Line_49 $$ if (results.getHttpStatusCode() != HttpResponse.SC_OK) --> Line_50 $$ response.sendError(results.getHttpStatusCode()) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_50 $$ response.sendError(results.getHttpStatusCode()) [FD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_50 $$ response.sendError(results.getHttpStatusCode()) [FD]
Line_18 $$ results = requestPipeline.execute(fallbackRcr) --> Line_50 $$ response.sendError(results.getHttpStatusCode()) [FD]
Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) --> Line_50 $$ response.sendError(results.getHttpStatusCode()) [FD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_52 $$ IOUtils.copy(results.getResponse(), response.getOutputStream()) [CD]
Line_2 $$ protected void doFetch(HttpServletRequest request, HttpServletResponse response) throws IOException, GadgetException --> Line_52 $$ IOUtils.copy(results.getResponse(), response.getOutputStream()) [FD]
Line_14 $$ HttpResponse results = requestPipeline.execute(rcr) --> Line_52 $$ IOUtils.copy(results.getResponse(), response.getOutputStream()) [FD]
Line_18 $$ results = requestPipeline.execute(fallbackRcr) --> Line_52 $$ IOUtils.copy(results.getResponse(), response.getOutputStream()) [FD]
Line_23 $$ results = contentRewriterRegistry.rewriteHttpResponse(rcr, results) --> Line_52 $$ IOUtils.copy(results.getResponse(), response.getOutputStream()) [FD]
