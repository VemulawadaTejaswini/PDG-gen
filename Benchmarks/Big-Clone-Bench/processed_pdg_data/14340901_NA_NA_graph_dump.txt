Line_2 $$ public static void main(String[] args) throws Exception --> Line_3 $$ ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext("camel/exec-context.xml") [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_4 $$ CamelContext context = appContext.getBean(CamelContext.class) [CD]
Line_3 $$ ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext("camel/exec-context.xml") --> Line_4 $$ CamelContext context = appContext.getBean(CamelContext.class) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_5 $$ Exchange exchange = new DefaultExchange(context) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_6 $$ List<String> arg = new ArrayList<String>() [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_7 $$ arg.add("/home/sumit/derby.log") [CD]
Line_6 $$ List<String> arg = new ArrayList<String>() --> Line_7 $$ arg.add("/home/sumit/derby.log") [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_8 $$ arg.add("helios:cameltesting/") [CD]
Line_6 $$ List<String> arg = new ArrayList<String>() --> Line_8 $$ arg.add("helios:cameltesting/") [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_9 $$ exchange.getIn().setHeader(ExecBinding.EXEC_COMMAND_ARGS, arg) [CD]
Line_6 $$ List<String> arg = new ArrayList<String>() --> Line_9 $$ exchange.getIn().setHeader(ExecBinding.EXEC_COMMAND_ARGS, arg) [FD]
Line_5 $$ Exchange exchange = new DefaultExchange(context) --> Line_9 $$ exchange.getIn().setHeader(ExecBinding.EXEC_COMMAND_ARGS, arg) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_10 $$ Exchange res = context.createProducerTemplate().send("direct:input", exchange) [CD]
Line_5 $$ Exchange exchange = new DefaultExchange(context) --> Line_10 $$ Exchange res = context.createProducerTemplate().send("direct:input", exchange) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() [CD]
Line_10 $$ Exchange res = context.createProducerTemplate().send("direct:input", exchange) --> Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_12 $$ System.out.println(result.getExitValue()) [CD]
Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() --> Line_12 $$ System.out.println(result.getExitValue()) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_13 $$ System.out.println(result.getCommand()) [CD]
Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() --> Line_13 $$ System.out.println(result.getCommand()) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_14 $$ if (result.getStderr() != null) [CD]
Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() --> Line_14 $$ if (result.getStderr() != null) [FD]
Line_14 $$ if (result.getStderr() != null) --> Line_15 $$ IOUtils.copy(result.getStderr(), new FileOutputStream(new File("/home/sumit/error.log"))) [CD]
Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() --> Line_15 $$ IOUtils.copy(result.getStderr(), new FileOutputStream(new File("/home/sumit/error.log"))) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_17 $$ if (result.getStdout() != null) [CD]
Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() --> Line_17 $$ if (result.getStdout() != null) [FD]
Line_17 $$ if (result.getStdout() != null) --> Line_18 $$ IOUtils.copy(result.getStdout(), new FileOutputStream(new File("/home/sumit/out.log"))) [CD]
Line_11 $$ ExecResult result = (ExecResult) res.getIn().getBody() --> Line_18 $$ IOUtils.copy(result.getStdout(), new FileOutputStream(new File("/home/sumit/out.log"))) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_20 $$ appContext.close() [CD]
Line_3 $$ ClassPathXmlApplicationContext appContext = new ClassPathXmlApplicationContext("camel/exec-context.xml") --> Line_20 $$ appContext.close() [FD]
