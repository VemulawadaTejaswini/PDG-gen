Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_3 $$ Hashtable content = new Hashtable() [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_4 $$ if (!(protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("file"))) [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_4 $$ if (!(protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("file"))) [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_5 $$ URL url = new URL(protocol, InetAddress.getLocalHost().getHostName(), port, jarFileName) [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_6 $$ BufferedInputStream bis = new BufferedInputStream(url.openStream()) [CD]
Line_5 $$ URL url = new URL(protocol, InetAddress.getLocalHost().getHostName(), port, jarFileName) --> Line_6 $$ BufferedInputStream bis = new BufferedInputStream(url.openStream()) [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_7 $$ JarInputStream zipIs = new JarInputStream(bis) [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_8 $$ ZipEntry entry [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_9 $$ int size = 0 [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_10 $$ Vector v = new Vector() [CD]
Line_7 $$ JarInputStream zipIs = new JarInputStream(bis) --> Line_12 $$ while ((entry = zipIs.getNextEntry()) != null) [FD]
Line_3 $$ Hashtable content = new Hashtable() --> Line_14 $$ content.put(entry.getName(), new ZipEntry(entry)) [FD]
Line_10 $$ Vector v = new Vector() --> Line_15 $$ v.add(entry) [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_20 $$ ZipEntry ze = null [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_21 $$ for (int i = 0; i < v.size(); i++) [CD]
Line_10 $$ Vector v = new Vector() --> Line_21 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_21 $$ for (int i = 0; i < v.size(); i++) --> Line_22 $$ ZipEntry zipEntry = (ZipEntry) v.elementAt(i) [CD]
Line_21 $$ for (int i = 0; i < v.size(); i++) --> Line_22 $$ ZipEntry zipEntry = (ZipEntry) v.elementAt(i) [FD]
Line_10 $$ Vector v = new Vector() --> Line_22 $$ ZipEntry zipEntry = (ZipEntry) v.elementAt(i) [FD]
Line_21 $$ for (int i = 0; i < v.size(); i++) --> Line_23 $$ if (zipEntry.getName().equals(resource)) [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_23 $$ if (zipEntry.getName().equals(resource)) [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_28 $$ size = (int) ze.getSize() [CD]
Line_9 $$ int size = 0 --> Line_28 $$ size = (int) ze.getSize() [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_29 $$ Console.log("resource size=" + size) [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_30 $$ byte[] buf = new byte[size] [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_31 $$ int rb = 0 [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_32 $$ int chunk = 0 [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_33 $$ while ((size - rb) > 0) [CD]
Line_33 $$ while ((size - rb) > 0) --> Line_34 $$ chunk = zipIs.read(buf) [CD]
Line_32 $$ int chunk = 0 --> Line_34 $$ chunk = zipIs.read(buf) [FD]
Line_7 $$ JarInputStream zipIs = new JarInputStream(bis) --> Line_34 $$ chunk = zipIs.read(buf) [FD]
Line_30 $$ byte[] buf = new byte[size] --> Line_34 $$ chunk = zipIs.read(buf) [FD]
Line_33 $$ while ((size - rb) > 0) --> Line_35 $$ Console.log("chunk = " + chunk + ", rb=" + rb) [CD]
Line_33 $$ while ((size - rb) > 0) --> Line_36 $$ if (chunk == -1) [CD]
Line_34 $$ chunk = zipIs.read(buf) --> Line_36 $$ if (chunk == -1) [FD]
Line_32 $$ int chunk = 0 --> Line_36 $$ if (chunk == -1) [FD]
Line_33 $$ while ((size - rb) > 0) --> Line_39 $$ rb += chunk [CD]
Line_31 $$ int rb = 0 --> Line_39 $$ rb += chunk [FD]
Line_34 $$ chunk = zipIs.read(buf) --> Line_39 $$ rb += chunk [FD]
Line_32 $$ int chunk = 0 --> Line_39 $$ rb += chunk [FD]
Line_7 $$ JarInputStream zipIs = new JarInputStream(bis) --> Line_42 $$ zipIs.close() [FD]
Line_6 $$ BufferedInputStream bis = new BufferedInputStream(url.openStream()) --> Line_43 $$ bis.close() [FD]
Line_5 $$ URL url = new URL(protocol, InetAddress.getLocalHost().getHostName(), port, jarFileName) --> Line_44 $$ url = null [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_49 $$ if (size != buf.length) [CD]
Line_9 $$ int size = 0 --> Line_49 $$ if (size != buf.length) [FD]
Line_28 $$ size = (int) ze.getSize() --> Line_49 $$ if (size != buf.length) [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_50 $$ System.out.println("buf=" + buf) [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_51 $$ content.put(resource, buf) [CD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_51 $$ content.put(resource, buf) [FD]
Line_3 $$ Hashtable content = new Hashtable() --> Line_51 $$ content.put(resource, buf) [FD]
Line_30 $$ byte[] buf = new byte[size] --> Line_51 $$ content.put(resource, buf) [FD]
Line_2 $$ public static Map getResources(String jarFileName, String resource, int port, String protocol) throws Exception --> Line_52 $$ return content [CD]
