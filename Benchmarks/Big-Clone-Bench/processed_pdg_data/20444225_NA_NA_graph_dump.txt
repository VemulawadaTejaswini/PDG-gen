Line_2 $$ private byte[] getMergedContent(List names, ServletContext servletContext) throws IOException --> Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() [CD]
Line_2 $$ private byte[] getMergedContent(List names, ServletContext servletContext) throws IOException --> Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) [CD]
Line_2 $$ private byte[] getMergedContent(List names, ServletContext servletContext) throws IOException --> Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_5 $$ String path = (String) iterator.next() [CD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_5 $$ String path = (String) iterator.next() [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_6 $$ if (!path.startsWith("/")) [CD]
Line_5 $$ String path = (String) iterator.next() --> Line_6 $$ if (!path.startsWith("/")) [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_7 $$ URL url = servletContext.getResource(path) [CD]
Line_2 $$ private byte[] getMergedContent(List names, ServletContext servletContext) throws IOException --> Line_7 $$ URL url = servletContext.getResource(path) [FD]
Line_5 $$ String path = (String) iterator.next() --> Line_7 $$ URL url = servletContext.getResource(path) [FD]
Line_6 $$ if (!path.startsWith("/")) --> Line_7 $$ URL url = servletContext.getResource(path) [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_8 $$ url = getClass().getResource(path) [CD]
Line_7 $$ URL url = servletContext.getResource(path) --> Line_8 $$ url = getClass().getResource(path) [FD]
Line_5 $$ String path = (String) iterator.next() --> Line_8 $$ url = getClass().getResource(path) [FD]
Line_6 $$ if (!path.startsWith("/")) --> Line_8 $$ url = getClass().getResource(path) [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_9 $$ if (url == null) [CD]
Line_7 $$ URL url = servletContext.getResource(path) --> Line_9 $$ if (url == null) [FD]
Line_8 $$ url = getClass().getResource(path) --> Line_9 $$ if (url == null) [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_10 $$ log.debug("Merging content of group : " + getName()) [CD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_11 $$ InputStream inputStream = url.openStream() [CD]
Line_7 $$ URL url = servletContext.getResource(path) --> Line_11 $$ InputStream inputStream = url.openStream() [FD]
Line_8 $$ url = getClass().getResource(path) --> Line_11 $$ InputStream inputStream = url.openStream() [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_12 $$ InputStreamReader r = new InputStreamReader(inputStream) [CD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_13 $$ IOUtils.copy(r, baos, "ASCII") [CD]
Line_12 $$ InputStreamReader r = new InputStreamReader(inputStream) --> Line_13 $$ IOUtils.copy(r, baos, "ASCII") [FD]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_13 $$ IOUtils.copy(r, baos, "ASCII") [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_14 $$ baos.write((byte) '\n') [CD]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_14 $$ baos.write((byte) '\n') [FD]
Line_4 $$ for (Iterator iterator = names.iterator(); iterator.hasNext(); ) --> Line_15 $$ inputStream.close() [CD]
Line_11 $$ InputStream inputStream = url.openStream() --> Line_15 $$ inputStream.close() [FD]
Line_2 $$ private byte[] getMergedContent(List names, ServletContext servletContext) throws IOException --> Line_17 $$ baos.close() [CD]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_17 $$ baos.close() [FD]
Line_2 $$ private byte[] getMergedContent(List names, ServletContext servletContext) throws IOException --> Line_18 $$ return baos.toByteArray() [CD]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_18 $$ return baos.toByteArray() [FD]
