Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_3 $$ Node[] node = xed.getActivatedNodes() [CD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_3 $$ Node[] node = xed.getActivatedNodes() [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_4 $$ X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject() [CD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_4 $$ X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject() [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_5 $$ FileObject mySrc = dob.getPrimaryFile() [CD]
Line_4 $$ X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject() --> Line_5 $$ FileObject mySrc = dob.getPrimaryFile() [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_6 $$ File mySrcF = FileUtil.toFile(mySrc) [CD]
Line_5 $$ FileObject mySrc = dob.getPrimaryFile() --> Line_6 $$ File mySrcF = FileUtil.toFile(mySrc) [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_7 $$ File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3d.gz") [CD]
Line_6 $$ File mySrcF = FileUtil.toFile(mySrc) --> Line_7 $$ File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3d.gz") [FD]
Line_5 $$ FileObject mySrc = dob.getPrimaryFile() --> Line_7 $$ File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3d.gz") [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_8 $$ TransformListener co = TransformListener.getInstance() [CD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_9 $$ co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting")) [CD]
Line_8 $$ TransformListener co = TransformListener.getInstance() --> Line_9 $$ co.message(NbBundle.getMessage(getClass(), "Gzip_compression_starting")) [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_10 $$ co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath()) [CD]
Line_8 $$ TransformListener co = TransformListener.getInstance() --> Line_10 $$ co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath()) [FD]
Line_7 $$ File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3d.gz") --> Line_10 $$ co.message(NbBundle.getMessage(getClass(), "Saving_as_") + myOutF.getAbsolutePath()) [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_11 $$ co.moveToFront() [CD]
Line_8 $$ TransformListener co = TransformListener.getInstance() --> Line_11 $$ co.moveToFront() [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_12 $$ co.setNode(node[0]) [CD]
Line_8 $$ TransformListener co = TransformListener.getInstance() --> Line_12 $$ co.setNode(node[0]) [FD]
Line_17 $$ int ret --> Line_18 $$ while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret) [FD]
Line_14 $$ FileInputStream fis = new FileInputStream(mySrcF) --> Line_18 $$ while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret) [FD]
Line_16 $$ byte[] buf = new byte[4096] --> Line_18 $$ while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret) [FD]
Line_15 $$ GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF)) --> Line_18 $$ while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret) [FD]
Line_15 $$ GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF)) --> Line_19 $$ gzos.close() [FD]
Line_8 $$ TransformListener co = TransformListener.getInstance() --> Line_21 $$ co.message(NbBundle.getMessage(getClass(), "Exception:__") + ex.getLocalizedMessage()) [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_24 $$ co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete")) [CD]
Line_8 $$ TransformListener co = TransformListener.getInstance() --> Line_24 $$ co.message(NbBundle.getMessage(getClass(), "Gzip_compression_complete")) [FD]
Line_2 $$ public String transformSingleFile(X3DEditorSupport.X3dEditor xed) --> Line_25 $$ return myOutF.getAbsolutePath() [CD]
Line_7 $$ File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + ".x3d.gz") --> Line_25 $$ return myOutF.getAbsolutePath() [FD]
