Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_3 $$ MemcachedClientConfig node = null [CD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null [CD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_5 $$ MemcachedClientClusterConfig clusternode = null [CD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_6 $$ InputStream in = null [CD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_7 $$ XMLEventReader r = null [CD]
Line_6 $$ InputStream in = null --> Line_9 $$ in = url.openStream() [FD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_9 $$ in = url.openStream() [FD]
Line_7 $$ XMLEventReader r = null --> Line_10 $$ r = factory.createXMLEventReader(in) [FD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_10 $$ r = factory.createXMLEventReader(in) [FD]
Line_6 $$ InputStream in = null --> Line_10 $$ r = factory.createXMLEventReader(in) [FD]
Line_9 $$ in = url.openStream() --> Line_10 $$ r = factory.createXMLEventReader(in) [FD]
Line_7 $$ XMLEventReader r = null --> Line_13 $$ while (r.hasNext()) [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_13 $$ while (r.hasNext()) [FD]
Line_13 $$ while (r.hasNext()) --> Line_14 $$ XMLEvent event = r.nextEvent() [CD]
Line_7 $$ XMLEventReader r = null --> Line_14 $$ XMLEvent event = r.nextEvent() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_14 $$ XMLEvent event = r.nextEvent() [FD]
Line_13 $$ while (r.hasNext()) --> Line_15 $$ if (event.isStartElement()) [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_15 $$ if (event.isStartElement()) [FD]
Line_15 $$ if (event.isStartElement()) --> Line_16 $$ StartElement start = event.asStartElement() [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_16 $$ StartElement start = event.asStartElement() [FD]
Line_15 $$ if (event.isStartElement()) --> Line_17 $$ String tag = start.getName().getLocalPart() [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_17 $$ String tag = start.getName().getLocalPart() [FD]
Line_15 $$ if (event.isStartElement()) --> Line_18 $$ if (tag.equalsIgnoreCase("client")) [CD]
Line_17 $$ String tag = start.getName().getLocalPart() --> Line_18 $$ if (tag.equalsIgnoreCase("client")) [FD]
Line_18 $$ if (tag.equalsIgnoreCase("client")) --> Line_19 $$ node = new MemcachedClientConfig() [CD]
Line_3 $$ MemcachedClientConfig node = null --> Line_19 $$ node = new MemcachedClientConfig() [FD]
Line_18 $$ if (tag.equalsIgnoreCase("client")) --> Line_20 $$ node.setName(start.getAttributeByName(new QName("", "name")).getValue()) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_20 $$ node.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_20 $$ node.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_20 $$ node.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_18 $$ if (tag.equalsIgnoreCase("client")) --> Line_21 $$ node.setSocketPool(start.getAttributeByName(new QName("", "socketpool")).getValue()) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_21 $$ node.setSocketPool(start.getAttributeByName(new QName("", "socketpool")).getValue()) [FD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_21 $$ node.setSocketPool(start.getAttributeByName(new QName("", "socketpool")).getValue()) [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_21 $$ node.setSocketPool(start.getAttributeByName(new QName("", "socketpool")).getValue()) [FD]
Line_18 $$ if (tag.equalsIgnoreCase("client")) --> Line_22 $$ node.setCompressEnable(Boolean.parseBoolean(start.getAttributeByName(new QName("", "compressEnable")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_22 $$ node.setCompressEnable(Boolean.parseBoolean(start.getAttributeByName(new QName("", "compressEnable")).getValue())) [FD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_22 $$ node.setCompressEnable(Boolean.parseBoolean(start.getAttributeByName(new QName("", "compressEnable")).getValue())) [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_22 $$ node.setCompressEnable(Boolean.parseBoolean(start.getAttributeByName(new QName("", "compressEnable")).getValue())) [FD]
Line_18 $$ if (tag.equalsIgnoreCase("client")) --> Line_23 $$ node.setDefaultEncoding(start.getAttributeByName(new QName("", "defaultEncoding")).getValue()) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_23 $$ node.setDefaultEncoding(start.getAttributeByName(new QName("", "defaultEncoding")).getValue()) [FD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_23 $$ node.setDefaultEncoding(start.getAttributeByName(new QName("", "defaultEncoding")).getValue()) [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_23 $$ node.setDefaultEncoding(start.getAttributeByName(new QName("", "defaultEncoding")).getValue()) [FD]
Line_15 $$ if (event.isStartElement()) --> Line_26 $$ if (tag.equalsIgnoreCase("errorHandler") && node != null) [CD]
Line_17 $$ String tag = start.getName().getLocalPart() --> Line_26 $$ if (tag.equalsIgnoreCase("errorHandler") && node != null) [FD]
Line_26 $$ if (tag.equalsIgnoreCase("errorHandler") && node != null) --> Line_27 $$ event = r.peek() [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_27 $$ event = r.peek() [FD]
Line_7 $$ XMLEventReader r = null --> Line_27 $$ event = r.peek() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_27 $$ event = r.peek() [FD]
Line_26 $$ if (tag.equalsIgnoreCase("errorHandler") && node != null) --> Line_28 $$ if (event.isCharacters()) [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_28 $$ if (event.isCharacters()) [FD]
Line_27 $$ event = r.peek() --> Line_28 $$ if (event.isCharacters()) [FD]
Line_28 $$ if (event.isCharacters()) --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [CD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [FD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [FD]
Line_27 $$ event = r.peek() --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [FD]
Line_28 $$ if (event.isCharacters()) --> Line_30 $$ r.nextEvent() [CD]
Line_7 $$ XMLEventReader r = null --> Line_30 $$ r.nextEvent() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_30 $$ r.nextEvent() [FD]
Line_15 $$ if (event.isStartElement()) --> Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) [CD]
Line_17 $$ String tag = start.getName().getLocalPart() --> Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() [CD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_36 $$ servers = null [CD]
Line_11 $$ String servers = null --> Line_36 $$ servers = null [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_37 $$ weights = null [CD]
Line_12 $$ String weights = null --> Line_37 $$ weights = null [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_38 $$ socketnode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_38 $$ socketnode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_38 $$ socketnode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_38 $$ socketnode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_39 $$ socketnode.setFailover(Boolean.parseBoolean(start.getAttributeByName(new QName("", "failover")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_39 $$ socketnode.setFailover(Boolean.parseBoolean(start.getAttributeByName(new QName("", "failover")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_39 $$ socketnode.setFailover(Boolean.parseBoolean(start.getAttributeByName(new QName("", "failover")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_39 $$ socketnode.setFailover(Boolean.parseBoolean(start.getAttributeByName(new QName("", "failover")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_40 $$ socketnode.setInitConn(Integer.parseInt(start.getAttributeByName(new QName("", "initConn")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_40 $$ socketnode.setInitConn(Integer.parseInt(start.getAttributeByName(new QName("", "initConn")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_40 $$ socketnode.setInitConn(Integer.parseInt(start.getAttributeByName(new QName("", "initConn")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_40 $$ socketnode.setInitConn(Integer.parseInt(start.getAttributeByName(new QName("", "initConn")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_41 $$ socketnode.setMinConn(Integer.parseInt(start.getAttributeByName(new QName("", "minConn")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_41 $$ socketnode.setMinConn(Integer.parseInt(start.getAttributeByName(new QName("", "minConn")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_41 $$ socketnode.setMinConn(Integer.parseInt(start.getAttributeByName(new QName("", "minConn")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_41 $$ socketnode.setMinConn(Integer.parseInt(start.getAttributeByName(new QName("", "minConn")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_42 $$ socketnode.setMaxConn(Integer.parseInt(start.getAttributeByName(new QName("", "maxConn")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_42 $$ socketnode.setMaxConn(Integer.parseInt(start.getAttributeByName(new QName("", "maxConn")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_42 $$ socketnode.setMaxConn(Integer.parseInt(start.getAttributeByName(new QName("", "maxConn")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_42 $$ socketnode.setMaxConn(Integer.parseInt(start.getAttributeByName(new QName("", "maxConn")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_43 $$ socketnode.setMaintSleep(Integer.parseInt(start.getAttributeByName(new QName("", "maintSleep")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_43 $$ socketnode.setMaintSleep(Integer.parseInt(start.getAttributeByName(new QName("", "maintSleep")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_43 $$ socketnode.setMaintSleep(Integer.parseInt(start.getAttributeByName(new QName("", "maintSleep")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_43 $$ socketnode.setMaintSleep(Integer.parseInt(start.getAttributeByName(new QName("", "maintSleep")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_44 $$ socketnode.setNagle(Boolean.parseBoolean(start.getAttributeByName(new QName("", "nagle")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_44 $$ socketnode.setNagle(Boolean.parseBoolean(start.getAttributeByName(new QName("", "nagle")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_44 $$ socketnode.setNagle(Boolean.parseBoolean(start.getAttributeByName(new QName("", "nagle")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_44 $$ socketnode.setNagle(Boolean.parseBoolean(start.getAttributeByName(new QName("", "nagle")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_45 $$ socketnode.setSocketTo(Integer.parseInt(start.getAttributeByName(new QName("", "socketTO")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_45 $$ socketnode.setSocketTo(Integer.parseInt(start.getAttributeByName(new QName("", "socketTO")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_45 $$ socketnode.setSocketTo(Integer.parseInt(start.getAttributeByName(new QName("", "socketTO")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_45 $$ socketnode.setSocketTo(Integer.parseInt(start.getAttributeByName(new QName("", "socketTO")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_46 $$ socketnode.setMaxIdle(Integer.parseInt(start.getAttributeByName(new QName("", "maxIdle")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_46 $$ socketnode.setMaxIdle(Integer.parseInt(start.getAttributeByName(new QName("", "maxIdle")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_46 $$ socketnode.setMaxIdle(Integer.parseInt(start.getAttributeByName(new QName("", "maxIdle")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_46 $$ socketnode.setMaxIdle(Integer.parseInt(start.getAttributeByName(new QName("", "maxIdle")).getValue())) [FD]
Line_34 $$ if (tag.equalsIgnoreCase("socketpool")) --> Line_47 $$ socketnode.setAliveCheck(Boolean.parseBoolean(start.getAttributeByName(new QName("", "aliveCheck")).getValue())) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_47 $$ socketnode.setAliveCheck(Boolean.parseBoolean(start.getAttributeByName(new QName("", "aliveCheck")).getValue())) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_47 $$ socketnode.setAliveCheck(Boolean.parseBoolean(start.getAttributeByName(new QName("", "aliveCheck")).getValue())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_47 $$ socketnode.setAliveCheck(Boolean.parseBoolean(start.getAttributeByName(new QName("", "aliveCheck")).getValue())) [FD]
Line_15 $$ if (event.isStartElement()) --> Line_50 $$ if (tag.equalsIgnoreCase("servers") && socketnode != null) [CD]
Line_17 $$ String tag = start.getName().getLocalPart() --> Line_50 $$ if (tag.equalsIgnoreCase("servers") && socketnode != null) [FD]
Line_50 $$ if (tag.equalsIgnoreCase("servers") && socketnode != null) --> Line_51 $$ event = r.peek() [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_51 $$ event = r.peek() [FD]
Line_27 $$ event = r.peek() --> Line_51 $$ event = r.peek() [FD]
Line_7 $$ XMLEventReader r = null --> Line_51 $$ event = r.peek() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_51 $$ event = r.peek() [FD]
Line_50 $$ if (tag.equalsIgnoreCase("servers") && socketnode != null) --> Line_52 $$ if (event.isCharacters()) [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_52 $$ if (event.isCharacters()) [FD]
Line_27 $$ event = r.peek() --> Line_52 $$ if (event.isCharacters()) [FD]
Line_51 $$ event = r.peek() --> Line_52 $$ if (event.isCharacters()) [FD]
Line_52 $$ if (event.isCharacters()) --> Line_53 $$ servers = event.asCharacters().getData() [CD]
Line_36 $$ servers = null --> Line_53 $$ servers = event.asCharacters().getData() [FD]
Line_11 $$ String servers = null --> Line_53 $$ servers = event.asCharacters().getData() [FD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_53 $$ servers = event.asCharacters().getData() [FD]
Line_27 $$ event = r.peek() --> Line_53 $$ servers = event.asCharacters().getData() [FD]
Line_51 $$ event = r.peek() --> Line_53 $$ servers = event.asCharacters().getData() [FD]
Line_52 $$ if (event.isCharacters()) --> Line_54 $$ socketnode.setServers(servers) [CD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_54 $$ socketnode.setServers(servers) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_54 $$ socketnode.setServers(servers) [FD]
Line_36 $$ servers = null --> Line_54 $$ socketnode.setServers(servers) [FD]
Line_53 $$ servers = event.asCharacters().getData() --> Line_54 $$ socketnode.setServers(servers) [FD]
Line_11 $$ String servers = null --> Line_54 $$ socketnode.setServers(servers) [FD]
Line_52 $$ if (event.isCharacters()) --> Line_55 $$ r.nextEvent() [CD]
Line_7 $$ XMLEventReader r = null --> Line_55 $$ r.nextEvent() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_55 $$ r.nextEvent() [FD]
Line_15 $$ if (event.isStartElement()) --> Line_59 $$ if (tag.equalsIgnoreCase("weights") && socketnode != null) [CD]
Line_17 $$ String tag = start.getName().getLocalPart() --> Line_59 $$ if (tag.equalsIgnoreCase("weights") && socketnode != null) [FD]
Line_59 $$ if (tag.equalsIgnoreCase("weights") && socketnode != null) --> Line_60 $$ event = r.peek() [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_60 $$ event = r.peek() [FD]
Line_27 $$ event = r.peek() --> Line_60 $$ event = r.peek() [FD]
Line_51 $$ event = r.peek() --> Line_60 $$ event = r.peek() [FD]
Line_7 $$ XMLEventReader r = null --> Line_60 $$ event = r.peek() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_60 $$ event = r.peek() [FD]
Line_59 $$ if (tag.equalsIgnoreCase("weights") && socketnode != null) --> Line_61 $$ if (event.isCharacters()) [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_61 $$ if (event.isCharacters()) [FD]
Line_27 $$ event = r.peek() --> Line_61 $$ if (event.isCharacters()) [FD]
Line_51 $$ event = r.peek() --> Line_61 $$ if (event.isCharacters()) [FD]
Line_60 $$ event = r.peek() --> Line_61 $$ if (event.isCharacters()) [FD]
Line_61 $$ if (event.isCharacters()) --> Line_62 $$ weights = event.asCharacters().getData() [CD]
Line_37 $$ weights = null --> Line_62 $$ weights = event.asCharacters().getData() [FD]
Line_12 $$ String weights = null --> Line_62 $$ weights = event.asCharacters().getData() [FD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_62 $$ weights = event.asCharacters().getData() [FD]
Line_27 $$ event = r.peek() --> Line_62 $$ weights = event.asCharacters().getData() [FD]
Line_51 $$ event = r.peek() --> Line_62 $$ weights = event.asCharacters().getData() [FD]
Line_60 $$ event = r.peek() --> Line_62 $$ weights = event.asCharacters().getData() [FD]
Line_61 $$ if (event.isCharacters()) --> Line_63 $$ socketnode.setWeights(weights) [CD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_63 $$ socketnode.setWeights(weights) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_63 $$ socketnode.setWeights(weights) [FD]
Line_37 $$ weights = null --> Line_63 $$ socketnode.setWeights(weights) [FD]
Line_62 $$ weights = event.asCharacters().getData() --> Line_63 $$ socketnode.setWeights(weights) [FD]
Line_12 $$ String weights = null --> Line_63 $$ socketnode.setWeights(weights) [FD]
Line_61 $$ if (event.isCharacters()) --> Line_64 $$ r.nextEvent() [CD]
Line_7 $$ XMLEventReader r = null --> Line_64 $$ r.nextEvent() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_64 $$ r.nextEvent() [FD]
Line_15 $$ if (event.isStartElement()) --> Line_68 $$ if (tag.equalsIgnoreCase("cluster")) [CD]
Line_17 $$ String tag = start.getName().getLocalPart() --> Line_68 $$ if (tag.equalsIgnoreCase("cluster")) [FD]
Line_68 $$ if (tag.equalsIgnoreCase("cluster")) --> Line_69 $$ clusternode = new MemcachedClientClusterConfig() [CD]
Line_5 $$ MemcachedClientClusterConfig clusternode = null --> Line_69 $$ clusternode = new MemcachedClientClusterConfig() [FD]
Line_68 $$ if (tag.equalsIgnoreCase("cluster")) --> Line_70 $$ clusternode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_70 $$ clusternode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_69 $$ clusternode = new MemcachedClientClusterConfig() --> Line_70 $$ clusternode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_5 $$ MemcachedClientClusterConfig clusternode = null --> Line_70 $$ clusternode.setName(start.getAttributeByName(new QName("", "name")).getValue()) [FD]
Line_68 $$ if (tag.equalsIgnoreCase("cluster")) --> Line_71 $$ clusternode.setMode(start.getAttributeByName(new QName("", "mode")).getValue()) [CD]
Line_16 $$ StartElement start = event.asStartElement() --> Line_71 $$ clusternode.setMode(start.getAttributeByName(new QName("", "mode")).getValue()) [FD]
Line_69 $$ clusternode = new MemcachedClientClusterConfig() --> Line_71 $$ clusternode.setMode(start.getAttributeByName(new QName("", "mode")).getValue()) [FD]
Line_5 $$ MemcachedClientClusterConfig clusternode = null --> Line_71 $$ clusternode.setMode(start.getAttributeByName(new QName("", "mode")).getValue()) [FD]
Line_15 $$ if (event.isStartElement()) --> Line_74 $$ if (tag.equalsIgnoreCase("memCachedClients") && clusternode != null) [CD]
Line_17 $$ String tag = start.getName().getLocalPart() --> Line_74 $$ if (tag.equalsIgnoreCase("memCachedClients") && clusternode != null) [FD]
Line_74 $$ if (tag.equalsIgnoreCase("memCachedClients") && clusternode != null) --> Line_75 $$ event = r.peek() [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_75 $$ event = r.peek() [FD]
Line_27 $$ event = r.peek() --> Line_75 $$ event = r.peek() [FD]
Line_51 $$ event = r.peek() --> Line_75 $$ event = r.peek() [FD]
Line_60 $$ event = r.peek() --> Line_75 $$ event = r.peek() [FD]
Line_7 $$ XMLEventReader r = null --> Line_75 $$ event = r.peek() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_75 $$ event = r.peek() [FD]
Line_74 $$ if (tag.equalsIgnoreCase("memCachedClients") && clusternode != null) --> Line_76 $$ if (event.isCharacters()) [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_76 $$ if (event.isCharacters()) [FD]
Line_27 $$ event = r.peek() --> Line_76 $$ if (event.isCharacters()) [FD]
Line_51 $$ event = r.peek() --> Line_76 $$ if (event.isCharacters()) [FD]
Line_60 $$ event = r.peek() --> Line_76 $$ if (event.isCharacters()) [FD]
Line_75 $$ event = r.peek() --> Line_76 $$ if (event.isCharacters()) [FD]
Line_76 $$ if (event.isCharacters()) --> Line_77 $$ String clients = event.asCharacters().getData() [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_77 $$ String clients = event.asCharacters().getData() [FD]
Line_27 $$ event = r.peek() --> Line_77 $$ String clients = event.asCharacters().getData() [FD]
Line_51 $$ event = r.peek() --> Line_77 $$ String clients = event.asCharacters().getData() [FD]
Line_60 $$ event = r.peek() --> Line_77 $$ String clients = event.asCharacters().getData() [FD]
Line_75 $$ event = r.peek() --> Line_77 $$ String clients = event.asCharacters().getData() [FD]
Line_76 $$ if (event.isCharacters()) --> Line_78 $$ if (clients != null && !clients.equals("")) [CD]
Line_77 $$ String clients = event.asCharacters().getData() --> Line_78 $$ if (clients != null && !clients.equals("")) [FD]
Line_78 $$ if (clients != null && !clients.equals("")) --> Line_79 $$ clusternode.setMemCachedClients(clients.split(",")) [CD]
Line_69 $$ clusternode = new MemcachedClientClusterConfig() --> Line_79 $$ clusternode.setMemCachedClients(clients.split(",")) [FD]
Line_5 $$ MemcachedClientClusterConfig clusternode = null --> Line_79 $$ clusternode.setMemCachedClients(clients.split(",")) [FD]
Line_77 $$ String clients = event.asCharacters().getData() --> Line_79 $$ clusternode.setMemCachedClients(clients.split(",")) [FD]
Line_76 $$ if (event.isCharacters()) --> Line_81 $$ r.nextEvent() [CD]
Line_7 $$ XMLEventReader r = null --> Line_81 $$ r.nextEvent() [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_81 $$ r.nextEvent() [FD]
Line_13 $$ while (r.hasNext()) --> Line_86 $$ if (event.isEndElement()) [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_86 $$ if (event.isEndElement()) [FD]
Line_27 $$ event = r.peek() --> Line_86 $$ if (event.isEndElement()) [FD]
Line_51 $$ event = r.peek() --> Line_86 $$ if (event.isEndElement()) [FD]
Line_60 $$ event = r.peek() --> Line_86 $$ if (event.isEndElement()) [FD]
Line_75 $$ event = r.peek() --> Line_86 $$ if (event.isEndElement()) [FD]
Line_86 $$ if (event.isEndElement()) --> Line_87 $$ EndElement end = event.asEndElement() [CD]
Line_14 $$ XMLEvent event = r.nextEvent() --> Line_87 $$ EndElement end = event.asEndElement() [FD]
Line_27 $$ event = r.peek() --> Line_87 $$ EndElement end = event.asEndElement() [FD]
Line_51 $$ event = r.peek() --> Line_87 $$ EndElement end = event.asEndElement() [FD]
Line_60 $$ event = r.peek() --> Line_87 $$ EndElement end = event.asEndElement() [FD]
Line_75 $$ event = r.peek() --> Line_87 $$ EndElement end = event.asEndElement() [FD]
Line_86 $$ if (event.isEndElement()) --> Line_88 $$ if (node != null && end.getName().getLocalPart().equalsIgnoreCase("client")) [CD]
Line_87 $$ EndElement end = event.asEndElement() --> Line_88 $$ if (node != null && end.getName().getLocalPart().equalsIgnoreCase("client")) [FD]
Line_88 $$ if (node != null && end.getName().getLocalPart().equalsIgnoreCase("client")) --> Line_89 $$ memcachedClientconfigs.add(node) [CD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_89 $$ memcachedClientconfigs.add(node) [FD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_89 $$ memcachedClientconfigs.add(node) [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_89 $$ memcachedClientconfigs.add(node) [FD]
Line_88 $$ if (node != null && end.getName().getLocalPart().equalsIgnoreCase("client")) --> Line_90 $$ Logger.info(new StringBuilder().append(" add memcachedClient config :").append(node.getName())) [CD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_90 $$ Logger.info(new StringBuilder().append(" add memcachedClient config :").append(node.getName())) [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_90 $$ Logger.info(new StringBuilder().append(" add memcachedClient config :").append(node.getName())) [FD]
Line_86 $$ if (event.isEndElement()) --> Line_93 $$ if (socketnode != null && end.getName().getLocalPart().equalsIgnoreCase("socketpool")) [CD]
Line_87 $$ EndElement end = event.asEndElement() --> Line_93 $$ if (socketnode != null && end.getName().getLocalPart().equalsIgnoreCase("socketpool")) [FD]
Line_93 $$ if (socketnode != null && end.getName().getLocalPart().equalsIgnoreCase("socketpool")) --> Line_94 $$ memcachedClientSocketPoolConfigs.add(socketnode) [CD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_94 $$ memcachedClientSocketPoolConfigs.add(socketnode) [FD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_94 $$ memcachedClientSocketPoolConfigs.add(socketnode) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_94 $$ memcachedClientSocketPoolConfigs.add(socketnode) [FD]
Line_93 $$ if (socketnode != null && end.getName().getLocalPart().equalsIgnoreCase("socketpool")) --> Line_95 $$ Logger.info(new StringBuilder().append(" add socketpool config :").append(socketnode.getName())) [CD]
Line_35 $$ socketnode = new MemcachedClientSocketPoolConfig() --> Line_95 $$ Logger.info(new StringBuilder().append(" add socketpool config :").append(socketnode.getName())) [FD]
Line_4 $$ MemcachedClientSocketPoolConfig socketnode = null --> Line_95 $$ Logger.info(new StringBuilder().append(" add socketpool config :").append(socketnode.getName())) [FD]
Line_86 $$ if (event.isEndElement()) --> Line_98 $$ if (clusternode != null && end.getName().getLocalPart().equalsIgnoreCase("cluster")) [CD]
Line_87 $$ EndElement end = event.asEndElement() --> Line_98 $$ if (clusternode != null && end.getName().getLocalPart().equalsIgnoreCase("cluster")) [FD]
Line_98 $$ if (clusternode != null && end.getName().getLocalPart().equalsIgnoreCase("cluster")) --> Line_99 $$ memcachedClientClusterConfig.add(clusternode) [CD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_99 $$ memcachedClientClusterConfig.add(clusternode) [FD]
Line_69 $$ clusternode = new MemcachedClientClusterConfig() --> Line_99 $$ memcachedClientClusterConfig.add(clusternode) [FD]
Line_5 $$ MemcachedClientClusterConfig clusternode = null --> Line_99 $$ memcachedClientClusterConfig.add(clusternode) [FD]
Line_98 $$ if (clusternode != null && end.getName().getLocalPart().equalsIgnoreCase("cluster")) --> Line_100 $$ Logger.info(new StringBuilder().append(" add cluster config :").append(clusternode.getName())) [CD]
Line_69 $$ clusternode = new MemcachedClientClusterConfig() --> Line_100 $$ Logger.info(new StringBuilder().append(" add cluster config :").append(clusternode.getName())) [FD]
Line_5 $$ MemcachedClientClusterConfig clusternode = null --> Line_100 $$ Logger.info(new StringBuilder().append(" add cluster config :").append(clusternode.getName())) [FD]
Line_2 $$ public static void loadMemcachedConfigFromURL(URL url, XMLInputFactory factory, List<MemcachedClientConfig> memcachedClientconfigs, List<MemcachedClientSocketPoolConfig> memcachedClientSocketPoolConfigs, List<MemcachedClientClusterConfig> memcachedClientClusterConfig) --> Line_106 $$ Logger.error(new StringBuilder("MemcachedManager loadConfig error !").append(" config url :").append(url.getFile()).toString()) [FD]
Line_19 $$ node = new MemcachedClientConfig() --> Line_107 $$ node = null [FD]
Line_3 $$ MemcachedClientConfig node = null --> Line_107 $$ node = null [FD]
Line_7 $$ XMLEventReader r = null --> Line_110 $$ if (r != null) [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_110 $$ if (r != null) [FD]
Line_6 $$ InputStream in = null --> Line_111 $$ if (in != null) [FD]
Line_9 $$ in = url.openStream() --> Line_111 $$ if (in != null) [FD]
Line_7 $$ XMLEventReader r = null --> Line_112 $$ r = null [FD]
Line_10 $$ r = factory.createXMLEventReader(in) --> Line_112 $$ r = null [FD]
Line_6 $$ InputStream in = null --> Line_113 $$ in = null [FD]
Line_9 $$ in = url.openStream() --> Line_113 $$ in = null [FD]
Line_27 $$ event = r.peek() --> Line_15 $$ if (event.isStartElement()) [FD]
Line_51 $$ event = r.peek() --> Line_15 $$ if (event.isStartElement()) [FD]
Line_60 $$ event = r.peek() --> Line_15 $$ if (event.isStartElement()) [FD]
Line_75 $$ event = r.peek() --> Line_15 $$ if (event.isStartElement()) [FD]
Line_27 $$ event = r.peek() --> Line_16 $$ StartElement start = event.asStartElement() [FD]
Line_51 $$ event = r.peek() --> Line_16 $$ StartElement start = event.asStartElement() [FD]
Line_60 $$ event = r.peek() --> Line_16 $$ StartElement start = event.asStartElement() [FD]
Line_75 $$ event = r.peek() --> Line_16 $$ StartElement start = event.asStartElement() [FD]
Line_51 $$ event = r.peek() --> Line_28 $$ if (event.isCharacters()) [FD]
Line_60 $$ event = r.peek() --> Line_28 $$ if (event.isCharacters()) [FD]
Line_75 $$ event = r.peek() --> Line_28 $$ if (event.isCharacters()) [FD]
Line_51 $$ event = r.peek() --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [FD]
Line_60 $$ event = r.peek() --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [FD]
Line_75 $$ event = r.peek() --> Line_29 $$ node.setErrorHandler(event.asCharacters().getData()) [FD]
Line_60 $$ event = r.peek() --> Line_52 $$ if (event.isCharacters()) [FD]
Line_75 $$ event = r.peek() --> Line_52 $$ if (event.isCharacters()) [FD]
Line_60 $$ event = r.peek() --> Line_53 $$ servers = event.asCharacters().getData() [FD]
Line_75 $$ event = r.peek() --> Line_53 $$ servers = event.asCharacters().getData() [FD]
Line_75 $$ event = r.peek() --> Line_61 $$ if (event.isCharacters()) [FD]
Line_75 $$ event = r.peek() --> Line_62 $$ weights = event.asCharacters().getData() [FD]
