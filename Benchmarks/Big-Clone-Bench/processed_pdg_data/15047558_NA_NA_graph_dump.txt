Line_2 $$ protected void ensureProjectExists(String projectName) --> Line_3 $$ List<IClasspathEntry> classpathEntries = new UniqueEList<IClasspathEntry>() [CD]
Line_2 $$ protected void ensureProjectExists(String projectName) --> Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) [CD]
Line_2 $$ protected void ensureProjectExists(String projectName) --> Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) [FD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_8 $$ IJavaProject javaProject = JavaCore.create(project) [FD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_9 $$ if (!project.exists()) [FD]
Line_9 $$ if (!project.exists()) --> Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) [CD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) [FD]
Line_2 $$ protected void ensureProjectExists(String projectName) --> Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) [FD]
Line_9 $$ if (!project.exists()) --> Line_11 $$ project.create(new NullProgressMonitor()) [CD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_11 $$ project.create(new NullProgressMonitor()) [FD]
Line_9 $$ if (!project.exists()) --> Line_13 $$ isEmptyProject = false [CD]
Line_6 $$ boolean isEmptyProject = true --> Line_13 $$ isEmptyProject = false [FD]
Line_9 $$ if (!project.exists()) --> Line_14 $$ projectDescription = project.getDescription() [CD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_14 $$ projectDescription = project.getDescription() [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_14 $$ projectDescription = project.getDescription() [FD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_14 $$ projectDescription = project.getDescription() [FD]
Line_9 $$ if (!project.exists()) --> Line_15 $$ classpathEntries.addAll(Arrays.asList(javaProject.getRawClasspath())) [CD]
Line_8 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_15 $$ classpathEntries.addAll(Arrays.asList(javaProject.getRawClasspath())) [FD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_17 $$ String[] natureIds = projectDescription.getNatureIds() [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_17 $$ String[] natureIds = projectDescription.getNatureIds() [FD]
Line_14 $$ projectDescription = project.getDescription() --> Line_17 $$ String[] natureIds = projectDescription.getNatureIds() [FD]
Line_17 $$ String[] natureIds = projectDescription.getNatureIds() --> Line_18 $$ if (natureIds == null) [FD]
Line_18 $$ if (natureIds == null) --> Line_19 $$ natureIds = new String[] [CD]
Line_17 $$ String[] natureIds = projectDescription.getNatureIds() --> Line_19 $$ natureIds = new String[] [FD]
Line_18 $$ if (natureIds == null) --> Line_21 $$ boolean hasJavaNature = false [CD]
Line_18 $$ if (natureIds == null) --> Line_22 $$ boolean hasPDENature = false [CD]
Line_18 $$ if (natureIds == null) --> Line_23 $$ for (int i = 0; i < natureIds.length; ++i) [CD]
Line_23 $$ for (int i = 0; i < natureIds.length; ++i) --> Line_24 $$ if (JavaCore.NATURE_ID.equals(natureIds[i])) [CD]
Line_24 $$ if (JavaCore.NATURE_ID.equals(natureIds[i])) --> Line_25 $$ hasJavaNature = true [CD]
Line_21 $$ boolean hasJavaNature = false --> Line_25 $$ hasJavaNature = true [FD]
Line_23 $$ for (int i = 0; i < natureIds.length; ++i) --> Line_27 $$ if ("org.eclipse.pde.PluginNature".equals(natureIds[i])) [CD]
Line_27 $$ if ("org.eclipse.pde.PluginNature".equals(natureIds[i])) --> Line_28 $$ hasPDENature = true [CD]
Line_22 $$ boolean hasPDENature = false --> Line_28 $$ hasPDENature = true [FD]
Line_18 $$ if (natureIds == null) --> Line_31 $$ if (!hasJavaNature) [CD]
Line_25 $$ hasJavaNature = true --> Line_31 $$ if (!hasJavaNature) [FD]
Line_21 $$ boolean hasJavaNature = false --> Line_31 $$ if (!hasJavaNature) [FD]
Line_31 $$ if (!hasJavaNature) --> Line_32 $$ String[] oldNatureIds = natureIds [CD]
Line_31 $$ if (!hasJavaNature) --> Line_33 $$ natureIds = new String[oldNatureIds.length + 1] [CD]
Line_17 $$ String[] natureIds = projectDescription.getNatureIds() --> Line_33 $$ natureIds = new String[oldNatureIds.length + 1] [FD]
Line_19 $$ natureIds = new String[] --> Line_33 $$ natureIds = new String[oldNatureIds.length + 1] [FD]
Line_31 $$ if (!hasJavaNature) --> Line_34 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [CD]
Line_32 $$ String[] oldNatureIds = natureIds --> Line_34 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_17 $$ String[] natureIds = projectDescription.getNatureIds() --> Line_34 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_19 $$ natureIds = new String[] --> Line_34 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_33 $$ natureIds = new String[oldNatureIds.length + 1] --> Line_34 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_31 $$ if (!hasJavaNature) --> Line_35 $$ natureIds[oldNatureIds.length] = JavaCore.NATURE_ID [CD]
Line_18 $$ if (natureIds == null) --> Line_37 $$ if (!hasPDENature) [CD]
Line_28 $$ hasPDENature = true --> Line_37 $$ if (!hasPDENature) [FD]
Line_22 $$ boolean hasPDENature = false --> Line_37 $$ if (!hasPDENature) [FD]
Line_37 $$ if (!hasPDENature) --> Line_39 $$ natureIds = new String[oldNatureIds.length + 1] [CD]
Line_17 $$ String[] natureIds = projectDescription.getNatureIds() --> Line_39 $$ natureIds = new String[oldNatureIds.length + 1] [FD]
Line_19 $$ natureIds = new String[] --> Line_39 $$ natureIds = new String[oldNatureIds.length + 1] [FD]
Line_33 $$ natureIds = new String[oldNatureIds.length + 1] --> Line_39 $$ natureIds = new String[oldNatureIds.length + 1] [FD]
Line_37 $$ if (!hasPDENature) --> Line_40 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [CD]
Line_32 $$ String[] oldNatureIds = natureIds --> Line_40 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_17 $$ String[] natureIds = projectDescription.getNatureIds() --> Line_40 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_19 $$ natureIds = new String[] --> Line_40 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_33 $$ natureIds = new String[oldNatureIds.length + 1] --> Line_40 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_39 $$ natureIds = new String[oldNatureIds.length + 1] --> Line_40 $$ System.arraycopy(oldNatureIds, 0, natureIds, 0, oldNatureIds.length) [FD]
Line_37 $$ if (!hasPDENature) --> Line_41 $$ natureIds[oldNatureIds.length] = "org.eclipse.pde.PluginNature" [CD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_44 $$ projectDescription.setNatureIds(natureIds) [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_44 $$ projectDescription.setNatureIds(natureIds) [FD]
Line_14 $$ projectDescription = project.getDescription() --> Line_44 $$ projectDescription.setNatureIds(natureIds) [FD]
Line_17 $$ String[] natureIds = projectDescription.getNatureIds() --> Line_44 $$ projectDescription.setNatureIds(natureIds) [FD]
Line_19 $$ natureIds = new String[] --> Line_44 $$ projectDescription.setNatureIds(natureIds) [FD]
Line_33 $$ natureIds = new String[oldNatureIds.length + 1] --> Line_44 $$ projectDescription.setNatureIds(natureIds) [FD]
Line_39 $$ natureIds = new String[oldNatureIds.length + 1] --> Line_44 $$ projectDescription.setNatureIds(natureIds) [FD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() [FD]
Line_14 $$ projectDescription = project.getDescription() --> Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() [FD]
Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() --> Line_46 $$ if (builders == null) [FD]
Line_46 $$ if (builders == null) --> Line_47 $$ builders = new ICommand[0] [CD]
Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() --> Line_47 $$ builders = new ICommand[0] [FD]
Line_23 $$ for (int i = 0; i < natureIds.length; ++i) --> Line_51 $$ for (int i = 0; i < builders.length; ++i) [FD]
Line_51 $$ for (int i = 0; i < builders.length; ++i) --> Line_52 $$ if ("org.eclipse.pde.ManifestBuilder".equals(builders[i].getBuilderName())) [CD]
Line_52 $$ if ("org.eclipse.pde.ManifestBuilder".equals(builders[i].getBuilderName())) --> Line_53 $$ hasManifestBuilder = true [CD]
Line_49 $$ boolean hasManifestBuilder = false --> Line_53 $$ hasManifestBuilder = true [FD]
Line_51 $$ for (int i = 0; i < builders.length; ++i) --> Line_55 $$ if ("org.eclipse.pde.SchemaBuilder".equals(builders[i].getBuilderName())) [CD]
Line_55 $$ if ("org.eclipse.pde.SchemaBuilder".equals(builders[i].getBuilderName())) --> Line_56 $$ hasSchemaBuilder = true [CD]
Line_50 $$ boolean hasSchemaBuilder = false --> Line_56 $$ hasSchemaBuilder = true [FD]
Line_53 $$ hasManifestBuilder = true --> Line_59 $$ if (!hasManifestBuilder) [FD]
Line_49 $$ boolean hasManifestBuilder = false --> Line_59 $$ if (!hasManifestBuilder) [FD]
Line_59 $$ if (!hasManifestBuilder) --> Line_60 $$ ICommand[] oldBuilders = builders [CD]
Line_59 $$ if (!hasManifestBuilder) --> Line_61 $$ builders = new ICommand[oldBuilders.length + 1] [CD]
Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() --> Line_61 $$ builders = new ICommand[oldBuilders.length + 1] [FD]
Line_47 $$ builders = new ICommand[0] --> Line_61 $$ builders = new ICommand[oldBuilders.length + 1] [FD]
Line_59 $$ if (!hasManifestBuilder) --> Line_62 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [CD]
Line_60 $$ ICommand[] oldBuilders = builders --> Line_62 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() --> Line_62 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_47 $$ builders = new ICommand[0] --> Line_62 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_61 $$ builders = new ICommand[oldBuilders.length + 1] --> Line_62 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_59 $$ if (!hasManifestBuilder) --> Line_63 $$ builders[oldBuilders.length] = projectDescription.newCommand() [CD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_63 $$ builders[oldBuilders.length] = projectDescription.newCommand() [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_63 $$ builders[oldBuilders.length] = projectDescription.newCommand() [FD]
Line_14 $$ projectDescription = project.getDescription() --> Line_63 $$ builders[oldBuilders.length] = projectDescription.newCommand() [FD]
Line_59 $$ if (!hasManifestBuilder) --> Line_64 $$ builders[oldBuilders.length].setBuilderName("org.eclipse.pde.ManifestBuilder") [CD]
Line_56 $$ hasSchemaBuilder = true --> Line_66 $$ if (!hasSchemaBuilder) [FD]
Line_50 $$ boolean hasSchemaBuilder = false --> Line_66 $$ if (!hasSchemaBuilder) [FD]
Line_66 $$ if (!hasSchemaBuilder) --> Line_68 $$ builders = new ICommand[oldBuilders.length + 1] [CD]
Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() --> Line_68 $$ builders = new ICommand[oldBuilders.length + 1] [FD]
Line_47 $$ builders = new ICommand[0] --> Line_68 $$ builders = new ICommand[oldBuilders.length + 1] [FD]
Line_61 $$ builders = new ICommand[oldBuilders.length + 1] --> Line_68 $$ builders = new ICommand[oldBuilders.length + 1] [FD]
Line_66 $$ if (!hasSchemaBuilder) --> Line_69 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [CD]
Line_60 $$ ICommand[] oldBuilders = builders --> Line_69 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() --> Line_69 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_47 $$ builders = new ICommand[0] --> Line_69 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_61 $$ builders = new ICommand[oldBuilders.length + 1] --> Line_69 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_68 $$ builders = new ICommand[oldBuilders.length + 1] --> Line_69 $$ System.arraycopy(oldBuilders, 0, builders, 0, oldBuilders.length) [FD]
Line_66 $$ if (!hasSchemaBuilder) --> Line_70 $$ builders[oldBuilders.length] = projectDescription.newCommand() [CD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_70 $$ builders[oldBuilders.length] = projectDescription.newCommand() [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_70 $$ builders[oldBuilders.length] = projectDescription.newCommand() [FD]
Line_14 $$ projectDescription = project.getDescription() --> Line_70 $$ builders[oldBuilders.length] = projectDescription.newCommand() [FD]
Line_66 $$ if (!hasSchemaBuilder) --> Line_71 $$ builders[oldBuilders.length].setBuilderName("org.eclipse.pde.SchemaBuilder") [CD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_73 $$ projectDescription.setBuildSpec(builders) [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_73 $$ projectDescription.setBuildSpec(builders) [FD]
Line_14 $$ projectDescription = project.getDescription() --> Line_73 $$ projectDescription.setBuildSpec(builders) [FD]
Line_45 $$ ICommand[] builders = projectDescription.getBuildSpec() --> Line_73 $$ projectDescription.setBuildSpec(builders) [FD]
Line_47 $$ builders = new ICommand[0] --> Line_73 $$ projectDescription.setBuildSpec(builders) [FD]
Line_61 $$ builders = new ICommand[oldBuilders.length + 1] --> Line_73 $$ projectDescription.setBuildSpec(builders) [FD]
Line_68 $$ builders = new ICommand[oldBuilders.length + 1] --> Line_73 $$ projectDescription.setBuildSpec(builders) [FD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_74 $$ project.open(new NullProgressMonitor()) [FD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_75 $$ project.setDescription(projectDescription, new NullProgressMonitor()) [FD]
Line_7 $$ IProjectDescription projectDescription = null --> Line_75 $$ project.setDescription(projectDescription, new NullProgressMonitor()) [FD]
Line_10 $$ projectDescription = ResourcesPlugin.getWorkspace().newProjectDescription(projectName) --> Line_75 $$ project.setDescription(projectDescription, new NullProgressMonitor()) [FD]
Line_14 $$ projectDescription = project.getDescription() --> Line_75 $$ project.setDescription(projectDescription, new NullProgressMonitor()) [FD]
Line_76 $$ if (isEmptyProject) --> Line_77 $$ IFolder sourceContainer = project.getFolder("src") [CD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_77 $$ IFolder sourceContainer = project.getFolder("src") [FD]
Line_76 $$ if (isEmptyProject) --> Line_78 $$ sourceContainer.create(false, true, new NullProgressMonitor()) [CD]
Line_77 $$ IFolder sourceContainer = project.getFolder("src") --> Line_78 $$ sourceContainer.create(false, true, new NullProgressMonitor()) [FD]
Line_76 $$ if (isEmptyProject) --> Line_79 $$ IClasspathEntry sourceClasspathEntry = JavaCore.newSourceEntry(new Path("/" + projectName + "/src")) [CD]
Line_76 $$ if (isEmptyProject) --> Line_80 $$ classpathEntries.add(0, sourceClasspathEntry) [CD]
Line_76 $$ if (isEmptyProject) --> Line_81 $$ String jreContainer = JavaRuntime.JRE_CONTAINER [CD]
Line_76 $$ if (isEmptyProject) --> Line_82 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project) [CD]
Line_4 $$ IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName) --> Line_82 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project) [FD]
Line_76 $$ if (isEmptyProject) --> Line_83 $$ if ("1.5".equals(complianceLevel)) [CD]
Line_82 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project) --> Line_83 $$ if ("1.5".equals(complianceLevel)) [FD]
Line_83 $$ if ("1.5".equals(complianceLevel)) --> Line_84 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5" [CD]
Line_81 $$ String jreContainer = JavaRuntime.JRE_CONTAINER --> Line_84 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5" [FD]
Line_83 $$ if ("1.5".equals(complianceLevel)) --> Line_85 $$ if ("1.6".equals(complianceLevel)) [CD]
Line_82 $$ String complianceLevel = CodeGenUtil.EclipseUtil.getJavaComplianceLevel(project) --> Line_85 $$ if ("1.6".equals(complianceLevel)) [FD]
Line_85 $$ if ("1.6".equals(complianceLevel)) --> Line_86 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" [CD]
Line_81 $$ String jreContainer = JavaRuntime.JRE_CONTAINER --> Line_86 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" [FD]
Line_84 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5" --> Line_86 $$ jreContainer += "/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6" [FD]
Line_76 $$ if (isEmptyProject) --> Line_88 $$ classpathEntries.add(JavaCore.newContainerEntry(new Path(jreContainer))) [CD]
Line_76 $$ if (isEmptyProject) --> Line_89 $$ classpathEntries.add(JavaCore.newContainerEntry(new Path("org.eclipse.pde.core.requiredPlugins"))) [CD]
Line_76 $$ if (isEmptyProject) --> Line_90 $$ javaProject.setOutputLocation(new Path("/" + projectName + "/bin"), new NullProgressMonitor()) [CD]
Line_8 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_90 $$ javaProject.setOutputLocation(new Path("/" + projectName + "/bin"), new NullProgressMonitor()) [FD]
Line_8 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_92 $$ javaProject.setRawClasspath(classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), new NullProgressMonitor()) [FD]
