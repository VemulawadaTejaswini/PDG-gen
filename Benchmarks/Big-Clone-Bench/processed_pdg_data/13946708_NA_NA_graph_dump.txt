Line_2 $$ public String encryptPassword(String password) throws JetspeedSecurityException --> Line_3 $$ if (securePasswords == false) [CD]
Line_3 $$ if (securePasswords == false) --> Line_4 $$ return password [CD]
Line_2 $$ public String encryptPassword(String password) throws JetspeedSecurityException --> Line_6 $$ if (password == null) [CD]
Line_2 $$ public String encryptPassword(String password) throws JetspeedSecurityException --> Line_6 $$ if (password == null) [FD]
Line_6 $$ if (password == null) --> Line_7 $$ return null [CD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_11 $$ password = password + JetspeedResources.getString("aipo.encrypt_key") [CD]
Line_2 $$ public String encryptPassword(String password) throws JetspeedSecurityException --> Line_11 $$ password = password + JetspeedResources.getString("aipo.encrypt_key") [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_12 $$ MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm) [CD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_13 $$ md.reset() [CD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm) --> Line_13 $$ md.reset() [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_14 $$ md.update(password.getBytes()) [CD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm) --> Line_14 $$ md.update(password.getBytes()) [FD]
Line_2 $$ public String encryptPassword(String password) throws JetspeedSecurityException --> Line_14 $$ md.update(password.getBytes()) [FD]
Line_11 $$ password = password + JetspeedResources.getString("aipo.encrypt_key") --> Line_14 $$ md.update(password.getBytes()) [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_15 $$ byte[] hash = md.digest() [CD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm) --> Line_15 $$ byte[] hash = md.digest() [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_16 $$ StringBuffer sb = new StringBuffer() [CD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_17 $$ for (int i = 0; i < hash.length; i++) [CD]
Line_17 $$ for (int i = 0; i < hash.length; i++) --> Line_18 $$ sb.append(Integer.toHexString((hash[i] >> 4) & 0x0F)) [CD]
Line_16 $$ StringBuffer sb = new StringBuffer() --> Line_18 $$ sb.append(Integer.toHexString((hash[i] >> 4) & 0x0F)) [FD]
Line_17 $$ for (int i = 0; i < hash.length; i++) --> Line_19 $$ sb.append(Integer.toHexString(hash[i] & 0x0F)) [CD]
Line_16 $$ StringBuffer sb = new StringBuffer() --> Line_19 $$ sb.append(Integer.toHexString(hash[i] & 0x0F)) [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_21 $$ return sb.toString() [CD]
Line_16 $$ StringBuffer sb = new StringBuffer() --> Line_21 $$ return sb.toString() [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_23 $$ MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm) [CD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_24 $$ byte[] digest = md.digest(password.getBytes(ALEipConstants.DEF_CONTENT_ENCODING)) [CD]
Line_12 $$ MessageDigest md = MessageDigest.getInstance(passwordsAlgorithm) --> Line_24 $$ byte[] digest = md.digest(password.getBytes(ALEipConstants.DEF_CONTENT_ENCODING)) [FD]
Line_2 $$ public String encryptPassword(String password) throws JetspeedSecurityException --> Line_24 $$ byte[] digest = md.digest(password.getBytes(ALEipConstants.DEF_CONTENT_ENCODING)) [FD]
Line_11 $$ password = password + JetspeedResources.getString("aipo.encrypt_key") --> Line_24 $$ byte[] digest = md.digest(password.getBytes(ALEipConstants.DEF_CONTENT_ENCODING)) [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_25 $$ ByteArrayOutputStream bas = new ByteArrayOutputStream(digest.length + digest.length / 3 + 1) [CD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_26 $$ OutputStream encodedStream = MimeUtility.encode(bas, "base64") [CD]
Line_25 $$ ByteArrayOutputStream bas = new ByteArrayOutputStream(digest.length + digest.length / 3 + 1) --> Line_26 $$ OutputStream encodedStream = MimeUtility.encode(bas, "base64") [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_27 $$ encodedStream.write(digest) [CD]
Line_26 $$ OutputStream encodedStream = MimeUtility.encode(bas, "base64") --> Line_27 $$ encodedStream.write(digest) [FD]
Line_24 $$ byte[] digest = md.digest(password.getBytes(ALEipConstants.DEF_CONTENT_ENCODING)) --> Line_27 $$ encodedStream.write(digest) [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_28 $$ encodedStream.flush() [CD]
Line_26 $$ OutputStream encodedStream = MimeUtility.encode(bas, "base64") --> Line_28 $$ encodedStream.flush() [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_29 $$ encodedStream.close() [CD]
Line_26 $$ OutputStream encodedStream = MimeUtility.encode(bas, "base64") --> Line_29 $$ encodedStream.close() [FD]
Line_10 $$ if ("SHA-512".equals(passwordsAlgorithm)) --> Line_30 $$ return bas.toString() [CD]
Line_25 $$ ByteArrayOutputStream bas = new ByteArrayOutputStream(digest.length + digest.length / 3 + 1) --> Line_30 $$ return bas.toString() [FD]
