Line_2 $$ public static boolean start(RootDoc root) --> Line_3 $$ Logger log = Logger.getLogger("DocletGenerator") [CD]
Line_2 $$ public static boolean start(RootDoc root) --> Line_4 $$ if (destination == null) [CD]
Line_7 $$ String fn = System.getenv("annocultor.xconverter.destination.file.name") --> Line_8 $$ fn = (fn == null) ? "./../../../src/site/resources/schema/XConverterInclude.xsd" : fn [FD]
Line_10 $$ if (destination.exists()) --> Line_11 $$ destination.delete() [CD]
Line_13 $$ FileOutputStream os --> Line_14 $$ os = new FileOutputStream(new File(destination.getParentFile(), "XConverter.xsd")) [FD]
Line_13 $$ FileOutputStream os --> Line_15 $$ IOUtils.copy(new AutoCloseInputStream(GeneratorOfXmlSchemaForConvertersDoclet.class.getResourceAsStream("/XConverterTemplate.xsd")), os) [FD]
Line_14 $$ os = new FileOutputStream(new File(destination.getParentFile(), "XConverter.xsd")) --> Line_15 $$ IOUtils.copy(new AutoCloseInputStream(GeneratorOfXmlSchemaForConvertersDoclet.class.getResourceAsStream("/XConverterTemplate.xsd")), os) [FD]
Line_13 $$ FileOutputStream os --> Line_16 $$ os.close() [FD]
Line_14 $$ os = new FileOutputStream(new File(destination.getParentFile(), "XConverter.xsd")) --> Line_16 $$ os.close() [FD]
Line_13 $$ FileOutputStream os --> Line_17 $$ os = new FileOutputStream(destination) [FD]
Line_14 $$ os = new FileOutputStream(new File(destination.getParentFile(), "XConverter.xsd")) --> Line_17 $$ os = new FileOutputStream(destination) [FD]
Line_13 $$ FileOutputStream os --> Line_18 $$ IOUtils.copy(new AutoCloseInputStream(GeneratorOfXmlSchemaForConvertersDoclet.class.getResourceAsStream("/XConverterInclude.xsd")), os) [FD]
Line_14 $$ os = new FileOutputStream(new File(destination.getParentFile(), "XConverter.xsd")) --> Line_18 $$ IOUtils.copy(new AutoCloseInputStream(GeneratorOfXmlSchemaForConvertersDoclet.class.getResourceAsStream("/XConverterInclude.xsd")), os) [FD]
Line_17 $$ os = new FileOutputStream(destination) --> Line_18 $$ IOUtils.copy(new AutoCloseInputStream(GeneratorOfXmlSchemaForConvertersDoclet.class.getResourceAsStream("/XConverterInclude.xsd")), os) [FD]
Line_13 $$ FileOutputStream os --> Line_19 $$ os.close() [FD]
Line_14 $$ os = new FileOutputStream(new File(destination.getParentFile(), "XConverter.xsd")) --> Line_19 $$ os.close() [FD]
Line_17 $$ os = new FileOutputStream(destination) --> Line_19 $$ os.close() [FD]
Line_29 $$ String s = Utils.loadFileToString(destination.getCanonicalPath(), "\n") --> Line_30 $$ int breakPoint = s.indexOf(XSD_TEXT_TO_REPLACED_WITH_GENERATED_XML_SIGNATURES) [FD]
Line_30 $$ int breakPoint = s.indexOf(XSD_TEXT_TO_REPLACED_WITH_GENERATED_XML_SIGNATURES) --> Line_31 $$ if (breakPoint < 0) [FD]
Line_29 $$ String s = Utils.loadFileToString(destination.getCanonicalPath(), "\n") --> Line_34 $$ String preambula = s.substring(0, breakPoint) [FD]
Line_30 $$ int breakPoint = s.indexOf(XSD_TEXT_TO_REPLACED_WITH_GENERATED_XML_SIGNATURES) --> Line_34 $$ String preambula = s.substring(0, breakPoint) [FD]
Line_29 $$ String s = Utils.loadFileToString(destination.getCanonicalPath(), "\n") --> Line_35 $$ String appendix = s.substring(breakPoint) [FD]
Line_30 $$ int breakPoint = s.indexOf(XSD_TEXT_TO_REPLACED_WITH_GENERATED_XML_SIGNATURES) --> Line_35 $$ String appendix = s.substring(breakPoint) [FD]
Line_37 $$ PrintWriter schemaWriter = new PrintWriter(destination) --> Line_38 $$ schemaWriter.print(preambula) [FD]
Line_34 $$ String preambula = s.substring(0, breakPoint) --> Line_38 $$ schemaWriter.print(preambula) [FD]
Line_2 $$ public static boolean start(RootDoc root) --> Line_39 $$ ClassDoc[] classes = root.classes() [FD]
Line_44 $$ for (ConstructorDoc constructorDoc : cd.constructors()) --> Line_45 $$ if (constructorDoc.isPublic()) [FD]
Line_45 $$ if (constructorDoc.isPublic()) --> Line_46 $$ if (isMeantForXMLAccess(constructorDoc)) [CD]
Line_44 $$ for (ConstructorDoc constructorDoc : cd.constructors()) --> Line_46 $$ if (isMeantForXMLAccess(constructorDoc)) [FD]
Line_46 $$ if (isMeantForXMLAccess(constructorDoc)) --> Line_47 $$ if (documentationWriter == null) [CD]
Line_42 $$ PrintWriter documentationWriter = null --> Line_47 $$ if (documentationWriter == null) [FD]
Line_47 $$ if (documentationWriter == null) --> Line_48 $$ File file = new File("./../../../src/site/xdoc/rules." + cd.name() + ".xml") [CD]
Line_47 $$ if (documentationWriter == null) --> Line_49 $$ documentationWriter = new PrintWriter(file) [CD]
Line_42 $$ PrintWriter documentationWriter = null --> Line_49 $$ documentationWriter = new PrintWriter(file) [FD]
Line_47 $$ if (documentationWriter == null) --> Line_50 $$ log.info("Generating doc for rule " + file.getCanonicalPath()) [CD]
Line_3 $$ Logger log = Logger.getLogger("DocletGenerator") --> Line_50 $$ log.info("Generating doc for rule " + file.getCanonicalPath()) [FD]
Line_48 $$ File file = new File("./../../../src/site/xdoc/rules." + cd.name() + ".xml") --> Line_50 $$ log.info("Generating doc for rule " + file.getCanonicalPath()) [FD]
Line_47 $$ if (documentationWriter == null) --> Line_51 $$ printRuleDocStart(cd, documentationWriter) [CD]
Line_42 $$ PrintWriter documentationWriter = null --> Line_51 $$ printRuleDocStart(cd, documentationWriter) [FD]
Line_49 $$ documentationWriter = new PrintWriter(file) --> Line_51 $$ printRuleDocStart(cd, documentationWriter) [FD]
Line_46 $$ if (isMeantForXMLAccess(constructorDoc)) --> Line_53 $$ boolean initFound = false [CD]
Line_54 $$ for (MethodDoc methodDoc : cd.methods()) --> Line_55 $$ if ("init".equals(methodDoc.name())) [FD]
Line_55 $$ if ("init".equals(methodDoc.name())) --> Line_56 $$ if (methodDoc.parameters().length == 0) [CD]
Line_54 $$ for (MethodDoc methodDoc : cd.methods()) --> Line_56 $$ if (methodDoc.parameters().length == 0) [FD]
Line_56 $$ if (methodDoc.parameters().length == 0) --> Line_57 $$ initFound = true [CD]
Line_53 $$ boolean initFound = false --> Line_57 $$ initFound = true [FD]
Line_46 $$ if (isMeantForXMLAccess(constructorDoc)) --> Line_62 $$ if (!initFound) [CD]
Line_53 $$ boolean initFound = false --> Line_62 $$ if (!initFound) [FD]
Line_57 $$ initFound = true --> Line_62 $$ if (!initFound) [FD]
Line_46 $$ if (isMeantForXMLAccess(constructorDoc)) --> Line_64 $$ printConstructorSchema(constructorDoc, schemaWriter) [CD]
Line_44 $$ for (ConstructorDoc constructorDoc : cd.constructors()) --> Line_64 $$ printConstructorSchema(constructorDoc, schemaWriter) [FD]
Line_37 $$ PrintWriter schemaWriter = new PrintWriter(destination) --> Line_64 $$ printConstructorSchema(constructorDoc, schemaWriter) [FD]
Line_46 $$ if (isMeantForXMLAccess(constructorDoc)) --> Line_65 $$ if (documentationWriter != null) [CD]
Line_42 $$ PrintWriter documentationWriter = null --> Line_65 $$ if (documentationWriter != null) [FD]
Line_49 $$ documentationWriter = new PrintWriter(file) --> Line_65 $$ if (documentationWriter != null) [FD]
Line_65 $$ if (documentationWriter != null) --> Line_66 $$ printConstructorDoc(constructorDoc, documentationWriter) [CD]
Line_44 $$ for (ConstructorDoc constructorDoc : cd.constructors()) --> Line_66 $$ printConstructorDoc(constructorDoc, documentationWriter) [FD]
Line_42 $$ PrintWriter documentationWriter = null --> Line_66 $$ printConstructorDoc(constructorDoc, documentationWriter) [FD]
Line_49 $$ documentationWriter = new PrintWriter(file) --> Line_66 $$ printConstructorDoc(constructorDoc, documentationWriter) [FD]
Line_42 $$ PrintWriter documentationWriter = null --> Line_72 $$ if (documentationWriter != null) [FD]
Line_49 $$ documentationWriter = new PrintWriter(file) --> Line_72 $$ if (documentationWriter != null) [FD]
Line_72 $$ if (documentationWriter != null) --> Line_73 $$ printRuleDocEnd(documentationWriter) [CD]
Line_42 $$ PrintWriter documentationWriter = null --> Line_73 $$ printRuleDocEnd(documentationWriter) [FD]
Line_49 $$ documentationWriter = new PrintWriter(file) --> Line_73 $$ printRuleDocEnd(documentationWriter) [FD]
Line_37 $$ PrintWriter schemaWriter = new PrintWriter(destination) --> Line_76 $$ schemaWriter.print(appendix) [FD]
Line_35 $$ String appendix = s.substring(breakPoint) --> Line_76 $$ schemaWriter.print(appendix) [FD]
Line_37 $$ PrintWriter schemaWriter = new PrintWriter(destination) --> Line_77 $$ schemaWriter.close() [FD]
Line_3 $$ Logger log = Logger.getLogger("DocletGenerator") --> Line_78 $$ log.info("Saved to " + destination.getCanonicalPath()) [FD]
Line_2 $$ public static boolean start(RootDoc root) --> Line_82 $$ return true [CD]
Line_49 $$ documentationWriter = new PrintWriter(file) --> Line_47 $$ if (documentationWriter == null) [FD]
