Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_3 $$ validateUserIsSignedOn(authToken) [CD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_3 $$ validateUserIsSignedOn(authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_4 $$ validateUserHasAdminRights(authToken) [CD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_4 $$ validateUserHasAdminRights(authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() [CD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_6 $$ if (record != null) [CD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_6 $$ if (record != null) [FD]
Line_6 $$ if (record != null) --> Line_7 $$ Connection connection = null [CD]
Line_6 $$ if (record != null) --> Line_8 $$ boolean archived = false [CD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_10 $$ long userId = getSignedOnUser(authToken).getUserId() [FD]
Line_7 $$ Connection connection = null --> Line_11 $$ connection = DatabaseConnector.getConnection() [FD]
Line_7 $$ Connection connection = null --> Line_12 $$ connection.setAutoCommit(false) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_12 $$ connection.setAutoCommit(false) [FD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_13 $$ recordUpdateResult.setMessage(messages.server_record_delete_success("")) [FD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_14 $$ recordUpdateResult.setSuccessful(true) [FD]
Line_7 $$ Connection connection = null --> Line_16 $$ PreparedStatement updateRecord = connection.prepareStatement(sql) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_16 $$ PreparedStatement updateRecord = connection.prepareStatement(sql) [FD]
Line_15 $$ String sql = "update tms.records set archivedtimestamp = now() where recordid = ?" --> Line_16 $$ PreparedStatement updateRecord = connection.prepareStatement(sql) [FD]
Line_16 $$ PreparedStatement updateRecord = connection.prepareStatement(sql) --> Line_17 $$ updateRecord.setLong(1, record.getRecordid()) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_17 $$ updateRecord.setLong(1, record.getRecordid()) [FD]
Line_18 $$ int recordArchived = 0 --> Line_19 $$ recordArchived = updateRecord.executeUpdate() [FD]
Line_16 $$ PreparedStatement updateRecord = connection.prepareStatement(sql) --> Line_19 $$ recordArchived = updateRecord.executeUpdate() [FD]
Line_18 $$ int recordArchived = 0 --> Line_20 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_19 $$ recordArchived = updateRecord.executeUpdate() --> Line_20 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_7 $$ Connection connection = null --> Line_20 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_20 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_20 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_10 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_20 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(record, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_7 $$ Connection connection = null --> Line_21 $$ TopicUpdateServiceImpl.archiveRecordTopics(connection, record.getTopics(), record.getRecordid()) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_21 $$ TopicUpdateServiceImpl.archiveRecordTopics(connection, record.getTopics(), record.getRecordid()) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_21 $$ TopicUpdateServiceImpl.archiveRecordTopics(connection, record.getTopics(), record.getRecordid()) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_22 $$ ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes() [FD]
Line_22 $$ ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes() --> Line_23 $$ if (recordAttributes != null && recordAttributes.size() > 0) [FD]
Line_23 $$ if (recordAttributes != null && recordAttributes.size() > 0) --> Line_24 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() [CD]
Line_22 $$ ArrayList<RecordAttribute> recordAttributes = record.getRecordattributes() --> Line_24 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() [FD]
Line_23 $$ if (recordAttributes != null && recordAttributes.size() > 0) --> Line_25 $$ while (rItr.hasNext()) [CD]
Line_24 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() --> Line_25 $$ while (rItr.hasNext()) [FD]
Line_25 $$ while (rItr.hasNext()) --> Line_26 $$ RecordAttribute r = rItr.next() [CD]
Line_24 $$ Iterator<RecordAttribute> rItr = recordAttributes.iterator() --> Line_26 $$ RecordAttribute r = rItr.next() [FD]
Line_25 $$ while (rItr.hasNext()) --> Line_27 $$ String rAtSql = "update tms.recordattributes set archivedtimestamp = now() where recordattributeid = ?" [CD]
Line_25 $$ while (rItr.hasNext()) --> Line_28 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [CD]
Line_7 $$ Connection connection = null --> Line_28 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_28 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_27 $$ String rAtSql = "update tms.recordattributes set archivedtimestamp = now() where recordattributeid = ?" --> Line_28 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) [FD]
Line_25 $$ while (rItr.hasNext()) --> Line_29 $$ updateRecordAttribute.setLong(1, r.getRecordattributeid()) [CD]
Line_28 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) --> Line_29 $$ updateRecordAttribute.setLong(1, r.getRecordattributeid()) [FD]
Line_26 $$ RecordAttribute r = rItr.next() --> Line_29 $$ updateRecordAttribute.setLong(1, r.getRecordattributeid()) [FD]
Line_25 $$ while (rItr.hasNext()) --> Line_30 $$ int recordAttribArchived = 0 [CD]
Line_25 $$ while (rItr.hasNext()) --> Line_31 $$ recordAttribArchived = updateRecordAttribute.executeUpdate() [CD]
Line_30 $$ int recordAttribArchived = 0 --> Line_31 $$ recordAttribArchived = updateRecordAttribute.executeUpdate() [FD]
Line_28 $$ PreparedStatement updateRecordAttribute = connection.prepareStatement(rAtSql) --> Line_31 $$ recordAttribArchived = updateRecordAttribute.executeUpdate() [FD]
Line_25 $$ while (rItr.hasNext()) --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [CD]
Line_30 $$ int recordAttribArchived = 0 --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_31 $$ recordAttribArchived = updateRecordAttribute.executeUpdate() --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_7 $$ Connection connection = null --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_26 $$ RecordAttribute r = rItr.next() --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_10 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_32 $$ AuditTrailManager.updateAuditTrail(connection, AuditTrailManager.createAuditTrailEvent(r, userId, AuditableEvent.EVENTYPE_DELETE), authToken, getSession()) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_35 $$ ArrayList<Term> terms = record.getTerms() [FD]
Line_35 $$ ArrayList<Term> terms = record.getTerms() --> Line_36 $$ Iterator<Term> termsItr = terms.iterator() [FD]
Line_36 $$ Iterator<Term> termsItr = terms.iterator() --> Line_37 $$ while (termsItr.hasNext()) [FD]
Line_37 $$ while (termsItr.hasNext()) --> Line_38 $$ Term term = termsItr.next() [CD]
Line_36 $$ Iterator<Term> termsItr = terms.iterator() --> Line_38 $$ Term term = termsItr.next() [FD]
Line_37 $$ while (termsItr.hasNext()) --> Line_39 $$ TermUpdater.archiveTerm(connection, term, userId, authToken, getSession()) [CD]
Line_7 $$ Connection connection = null --> Line_39 $$ TermUpdater.archiveTerm(connection, term, userId, authToken, getSession()) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_39 $$ TermUpdater.archiveTerm(connection, term, userId, authToken, getSession()) [FD]
Line_38 $$ Term term = termsItr.next() --> Line_39 $$ TermUpdater.archiveTerm(connection, term, userId, authToken, getSession()) [FD]
Line_10 $$ long userId = getSignedOnUser(authToken).getUserId() --> Line_39 $$ TermUpdater.archiveTerm(connection, term, userId, authToken, getSession()) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_39 $$ TermUpdater.archiveTerm(connection, term, userId, authToken, getSession()) [FD]
Line_7 $$ Connection connection = null --> Line_41 $$ connection.commit() [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_41 $$ connection.commit() [FD]
Line_8 $$ boolean archived = false --> Line_42 $$ archived = true [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_43 $$ RecordIdTracker.refreshRecordIdsInSessionByFilter(this.getThreadLocalRequest().getSession(), connection, true, filter, sourceField, authToken) [FD]
Line_7 $$ Connection connection = null --> Line_43 $$ RecordIdTracker.refreshRecordIdsInSessionByFilter(this.getThreadLocalRequest().getSession(), connection, true, filter, sourceField, authToken) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_43 $$ RecordIdTracker.refreshRecordIdsInSessionByFilter(this.getThreadLocalRequest().getSession(), connection, true, filter, sourceField, authToken) [FD]
Line_7 $$ Connection connection = null --> Line_45 $$ RecordIdTracker.refreshRecordIdsInSession(this.getThreadLocalRequest().getSession(), connection, false, authToken) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_45 $$ RecordIdTracker.refreshRecordIdsInSession(this.getThreadLocalRequest().getSession(), connection, false, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_45 $$ RecordIdTracker.refreshRecordIdsInSession(this.getThreadLocalRequest().getSession(), connection, false, authToken) [FD]
Line_44 $$ RecordRetrievalServiceImpl retriever = new RecordRetrievalServiceImpl() --> Line_46 $$ Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), this.getThreadLocalRequest().getSession(), false, inputmodel, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_46 $$ Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), this.getThreadLocalRequest().getSession(), false, inputmodel, authToken) [FD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_47 $$ recordUpdateResult.setResult(updatedRecord) [FD]
Line_46 $$ Record updatedRecord = retriever.retrieveRecordByRecordId(initSignedOnUser(authToken), record.getRecordid(), this.getThreadLocalRequest().getSession(), false, inputmodel, authToken) --> Line_47 $$ recordUpdateResult.setResult(updatedRecord) [FD]
Line_8 $$ boolean archived = false --> Line_49 $$ if (!archived && connection != null) [FD]
Line_42 $$ archived = true --> Line_49 $$ if (!archived && connection != null) [FD]
Line_7 $$ Connection connection = null --> Line_51 $$ connection.rollback() [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_51 $$ connection.rollback() [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_53 $$ LogUtility.log(Level.SEVERE, getSession(), messages.log_db_rollback(""), e1, authToken) [FD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_57 $$ recordUpdateResult.setFailed(true) [FD]
Line_58 $$ if (archived) --> Line_59 $$ recordUpdateResult.setMessage(messages.server_record_delete_retrieve("")) [CD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_59 $$ recordUpdateResult.setMessage(messages.server_record_delete_retrieve("")) [FD]
Line_58 $$ if (archived) --> Line_60 $$ recordUpdateResult.setException(e) [CD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_60 $$ recordUpdateResult.setException(e) [FD]
Line_58 $$ if (archived) --> Line_61 $$ LogUtility.log(Level.SEVERE, getSession(), messages.server_record_delete_retrieve(""), e, authToken) [CD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_61 $$ LogUtility.log(Level.SEVERE, getSession(), messages.server_record_delete_retrieve(""), e, authToken) [FD]
Line_58 $$ if (archived) --> Line_63 $$ recordUpdateResult.setMessage(messages.server_record_delete_fail("")) [CD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_63 $$ recordUpdateResult.setMessage(messages.server_record_delete_fail("")) [FD]
Line_58 $$ if (archived) --> Line_64 $$ recordUpdateResult.setException(new PersistenceException(e)) [CD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_64 $$ recordUpdateResult.setException(new PersistenceException(e)) [FD]
Line_58 $$ if (archived) --> Line_65 $$ LogUtility.log(Level.SEVERE, getSession(), messages.server_record_delete_fail(""), e, authToken) [CD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_65 $$ LogUtility.log(Level.SEVERE, getSession(), messages.server_record_delete_fail(""), e, authToken) [FD]
Line_5 $$ DataUpdateResult<Record> recordUpdateResult = new DataUpdateResult<Record>() --> Line_67 $$ GWT.log(recordUpdateResult.getMessage(), e) [FD]
Line_7 $$ Connection connection = null --> Line_70 $$ if (connection != null) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_70 $$ if (connection != null) [FD]
Line_70 $$ if (connection != null) --> Line_71 $$ connection.setAutoCommit(true) [CD]
Line_7 $$ Connection connection = null --> Line_71 $$ connection.setAutoCommit(true) [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_71 $$ connection.setAutoCommit(true) [FD]
Line_70 $$ if (connection != null) --> Line_72 $$ connection.close() [CD]
Line_7 $$ Connection connection = null --> Line_72 $$ connection.close() [FD]
Line_11 $$ connection = DatabaseConnector.getConnection() --> Line_72 $$ connection.close() [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_75 $$ LogUtility.log(Level.SEVERE, getSession(), messages.log_db_close(""), e, authToken) [FD]
Line_2 $$ public DataUpdateResult<Record> archiveRecord(String authToken, Record record, Filter filter, Field sourceField, InputModel inputmodel) throws DataOperationException --> Line_79 $$ return recordUpdateResult [CD]
