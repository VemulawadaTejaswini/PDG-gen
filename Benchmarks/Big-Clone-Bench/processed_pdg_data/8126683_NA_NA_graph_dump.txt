Line_2 $$ public Resource readResource(URL url, ResourceManager resourceManager) throws NAFException --> Line_3 $$ XMLResource resource = new XMLResource(resourceManager, url) [CD]
Line_2 $$ public Resource readResource(URL url, ResourceManager resourceManager) throws NAFException --> Line_4 $$ InputStream in = null [CD]
Line_4 $$ InputStream in = null --> Line_6 $$ in = url.openStream() [FD]
Line_2 $$ public Resource readResource(URL url, ResourceManager resourceManager) throws NAFException --> Line_6 $$ in = url.openStream() [FD]
Line_4 $$ InputStream in = null --> Line_8 $$ Document doc = docbuilder.parse(in) [FD]
Line_6 $$ in = url.openStream() --> Line_8 $$ Document doc = docbuilder.parse(in) [FD]
Line_8 $$ Document doc = docbuilder.parse(in) --> Line_9 $$ for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) [FD]
Line_9 $$ for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) --> Line_10 $$ if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && "xml-stylesheet".equals(n.getNodeName())) [CD]
Line_9 $$ for (Node n = doc.getFirstChild(); n != null; n = n.getNextSibling()) --> Line_10 $$ if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && "xml-stylesheet".equals(n.getNodeName())) [FD]
Line_10 $$ if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && "xml-stylesheet".equals(n.getNodeName())) --> Line_11 $$ ProcessingInstruction pi = (ProcessingInstruction) n [CD]
Line_10 $$ if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && "xml-stylesheet".equals(n.getNodeName())) --> Line_12 $$ Map<String, String> attrs = DOMUtil.parseProcessingInstructionAttributes(pi) [CD]
Line_11 $$ ProcessingInstruction pi = (ProcessingInstruction) n --> Line_12 $$ Map<String, String> attrs = DOMUtil.parseProcessingInstructionAttributes(pi) [FD]
Line_10 $$ if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && "xml-stylesheet".equals(n.getNodeName())) --> Line_13 $$ if ("text/xsl".equals(attrs.get("type"))) [CD]
Line_12 $$ Map<String, String> attrs = DOMUtil.parseProcessingInstructionAttributes(pi) --> Line_13 $$ if ("text/xsl".equals(attrs.get("type"))) [FD]
Line_13 $$ if ("text/xsl".equals(attrs.get("type"))) --> Line_14 $$ String href = attrs.get("href") [CD]
Line_12 $$ Map<String, String> attrs = DOMUtil.parseProcessingInstructionAttributes(pi) --> Line_14 $$ String href = attrs.get("href") [FD]
Line_13 $$ if ("text/xsl".equals(attrs.get("type"))) --> Line_15 $$ if (href == null) [CD]
Line_14 $$ String href = attrs.get("href") --> Line_15 $$ if (href == null) [FD]
Line_7 $$ ArrayList<Transformer> trList = null --> Line_18 $$ trList = new ArrayList<Transformer>() [FD]
Line_18 $$ trList = new ArrayList<Transformer>() --> Line_19 $$ trList.add(t) [FD]
Line_7 $$ ArrayList<Transformer> trList = null --> Line_19 $$ trList.add(t) [FD]
Line_17 $$ Transformer t = styleManager.createTransformer(new URL(url, href)) --> Line_19 $$ trList.add(t) [FD]
Line_18 $$ trList = new ArrayList<Transformer>() --> Line_26 $$ if (trList != null) [FD]
Line_7 $$ ArrayList<Transformer> trList = null --> Line_26 $$ if (trList != null) [FD]
Line_8 $$ Document doc = docbuilder.parse(in) --> Line_28 $$ doc = (Document) styleManager.transform(t, doc) [FD]
Line_17 $$ Transformer t = styleManager.createTransformer(new URL(url, href)) --> Line_28 $$ doc = (Document) styleManager.transform(t, doc) [FD]
Line_27 $$ for (Transformer t : trList) --> Line_28 $$ doc = (Document) styleManager.transform(t, doc) [FD]
Line_29 $$ if (LOGGER_DUMP.isDebugEnabled()) --> Line_30 $$ StringWriter swr = new StringWriter() [CD]
Line_29 $$ if (LOGGER_DUMP.isDebugEnabled()) --> Line_31 $$ DOMUtil.dumpNode(doc, swr) [CD]
Line_8 $$ Document doc = docbuilder.parse(in) --> Line_31 $$ DOMUtil.dumpNode(doc, swr) [FD]
Line_28 $$ doc = (Document) styleManager.transform(t, doc) --> Line_31 $$ DOMUtil.dumpNode(doc, swr) [FD]
Line_30 $$ StringWriter swr = new StringWriter() --> Line_31 $$ DOMUtil.dumpNode(doc, swr) [FD]
Line_29 $$ if (LOGGER_DUMP.isDebugEnabled()) --> Line_32 $$ LOGGER_DUMP.debug("Transformed instance:\n" + swr + "\n") [CD]
Line_8 $$ Document doc = docbuilder.parse(in) --> Line_36 $$ Element rootE = doc.getDocumentElement() [FD]
Line_28 $$ doc = (Document) styleManager.transform(t, doc) --> Line_36 $$ Element rootE = doc.getDocumentElement() [FD]
Line_36 $$ Element rootE = doc.getDocumentElement() --> Line_37 $$ if (!NAF_NAMESPACE_URI.equals(rootE.getNamespaceURI())) [FD]
Line_36 $$ Element rootE = doc.getDocumentElement() --> Line_38 $$ Object comp = createComponent(rootE, resource, null) [FD]
Line_3 $$ XMLResource resource = new XMLResource(resourceManager, url) --> Line_38 $$ Object comp = createComponent(rootE, resource, null) [FD]
Line_3 $$ XMLResource resource = new XMLResource(resourceManager, url) --> Line_39 $$ resource.setRootObject(comp) [FD]
Line_38 $$ Object comp = createComponent(rootE, resource, null) --> Line_39 $$ resource.setRootObject(comp) [FD]
Line_2 $$ public Resource readResource(URL url, ResourceManager resourceManager) throws NAFException --> Line_42 $$ throw new NAFException("Error reading NAF resource \"" + url.toExternalForm() + "\"", ex) [FD]
Line_4 $$ InputStream in = null --> Line_44 $$ if (in != null) [FD]
Line_6 $$ in = url.openStream() --> Line_44 $$ if (in != null) [FD]
Line_4 $$ InputStream in = null --> Line_45 $$ in.close() [FD]
Line_6 $$ in = url.openStream() --> Line_45 $$ in.close() [FD]
