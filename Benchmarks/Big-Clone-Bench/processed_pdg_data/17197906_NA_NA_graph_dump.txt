Line_2 $$ public void run() --> Line_3 $$ LogPrinter.log(Level.FINEST, "Started Download at : [CD]
Line_2 $$ public void run() --> Line_4 $$ if (!PipeConnected) [CD]
Line_2 $$ public void run() --> Line_7 $$ InputStream ins = null [CD]
Line_2 $$ public void run() --> Line_8 $$ if (IsAlreadyDownloaded) [CD]
Line_8 $$ if (IsAlreadyDownloaded) --> Line_9 $$ LogPrinter.log(Level.FINEST, "The file already Exists open and foward the byte") [CD]
Line_7 $$ InputStream ins = null --> Line_13 $$ ins = new FileInputStream(TheAskedFile) [FD]
Line_7 $$ InputStream ins = null --> Line_15 $$ int read = ins.read(buffer) [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_15 $$ int read = ins.read(buffer) [FD]
Line_14 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_15 $$ int read = ins.read(buffer) [FD]
Line_15 $$ int read = ins.read(buffer) --> Line_16 $$ while (read >= 0) [FD]
Line_16 $$ while (read >= 0) --> Line_17 $$ Pipe.write(buffer, 0, read) [CD]
Line_14 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_17 $$ Pipe.write(buffer, 0, read) [FD]
Line_15 $$ int read = ins.read(buffer) --> Line_17 $$ Pipe.write(buffer, 0, read) [FD]
Line_16 $$ while (read >= 0) --> Line_18 $$ read = ins.read(buffer) [CD]
Line_15 $$ int read = ins.read(buffer) --> Line_18 $$ read = ins.read(buffer) [FD]
Line_7 $$ InputStream ins = null --> Line_18 $$ read = ins.read(buffer) [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_18 $$ read = ins.read(buffer) [FD]
Line_14 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_18 $$ read = ins.read(buffer) [FD]
Line_7 $$ InputStream ins = null --> Line_23 $$ if (ins != null) [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_23 $$ if (ins != null) [FD]
Line_7 $$ InputStream ins = null --> Line_25 $$ ins.close() [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_25 $$ ins.close() [FD]
Line_8 $$ if (IsAlreadyDownloaded) --> Line_31 $$ LogPrinter.log(Level.FINEST, "the file does not exist locally so we try to download the thing") [CD]
Line_8 $$ if (IsAlreadyDownloaded) --> Line_32 $$ File theDir = TheAskedFile.getParentFile() [CD]
Line_8 $$ if (IsAlreadyDownloaded) --> Line_33 $$ if (!theDir.exists()) [CD]
Line_32 $$ File theDir = TheAskedFile.getParentFile() --> Line_33 $$ if (!theDir.exists()) [FD]
Line_33 $$ if (!theDir.exists()) --> Line_34 $$ theDir.mkdirs() [CD]
Line_32 $$ File theDir = TheAskedFile.getParentFile() --> Line_34 $$ theDir.mkdirs() [FD]
Line_36 $$ for (URL url : ListFastest) --> Line_42 $$ URL newUrl = new URL(url.toString() + RequestedFile) [FD]
Line_42 $$ URL newUrl = new URL(url.toString() + RequestedFile) --> Line_43 $$ LogPrinter.log(Level.FINEST, "the download URL = [FD]
Line_42 $$ URL newUrl = new URL(url.toString() + RequestedFile) --> Line_44 $$ URLConnection conn = newUrl.openConnection() [FD]
Line_44 $$ URLConnection conn = newUrl.openConnection() --> Line_45 $$ ContentType = conn.getContentType() [FD]
Line_44 $$ URLConnection conn = newUrl.openConnection() --> Line_46 $$ ContentLength = conn.getContentLength() [FD]
Line_7 $$ InputStream ins = null --> Line_47 $$ ins = conn.getInputStream() [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_47 $$ ins = conn.getInputStream() [FD]
Line_44 $$ URLConnection conn = newUrl.openConnection() --> Line_47 $$ ins = conn.getInputStream() [FD]
Line_37 $$ FileOutputStream fout = null --> Line_48 $$ fout = new FileOutputStream(TheAskedFile) [FD]
Line_7 $$ InputStream ins = null --> Line_50 $$ int read = ins.read(buffer) [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_50 $$ int read = ins.read(buffer) [FD]
Line_47 $$ ins = conn.getInputStream() --> Line_50 $$ int read = ins.read(buffer) [FD]
Line_14 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_50 $$ int read = ins.read(buffer) [FD]
Line_18 $$ read = ins.read(buffer) --> Line_51 $$ while (read >= 0) [FD]
Line_15 $$ int read = ins.read(buffer) --> Line_51 $$ while (read >= 0) [FD]
Line_51 $$ while (read >= 0) --> Line_52 $$ fout.write(buffer, 0, read) [CD]
Line_37 $$ FileOutputStream fout = null --> Line_52 $$ fout.write(buffer, 0, read) [FD]
Line_48 $$ fout = new FileOutputStream(TheAskedFile) --> Line_52 $$ fout.write(buffer, 0, read) [FD]
Line_14 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_52 $$ fout.write(buffer, 0, read) [FD]
Line_18 $$ read = ins.read(buffer) --> Line_52 $$ fout.write(buffer, 0, read) [FD]
Line_15 $$ int read = ins.read(buffer) --> Line_52 $$ fout.write(buffer, 0, read) [FD]
Line_51 $$ while (read >= 0) --> Line_53 $$ Pipe.write(buffer, 0, read) [CD]
Line_14 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_53 $$ Pipe.write(buffer, 0, read) [FD]
Line_18 $$ read = ins.read(buffer) --> Line_53 $$ Pipe.write(buffer, 0, read) [FD]
Line_15 $$ int read = ins.read(buffer) --> Line_53 $$ Pipe.write(buffer, 0, read) [FD]
Line_51 $$ while (read >= 0) --> Line_54 $$ read = ins.read(buffer) [CD]
Line_18 $$ read = ins.read(buffer) --> Line_54 $$ read = ins.read(buffer) [FD]
Line_15 $$ int read = ins.read(buffer) --> Line_54 $$ read = ins.read(buffer) [FD]
Line_7 $$ InputStream ins = null --> Line_54 $$ read = ins.read(buffer) [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_54 $$ read = ins.read(buffer) [FD]
Line_47 $$ ins = conn.getInputStream() --> Line_54 $$ read = ins.read(buffer) [FD]
Line_14 $$ byte[] buffer = new byte[BUFFER_SIZE] --> Line_54 $$ read = ins.read(buffer) [FD]
Line_51 $$ while (read >= 0) --> Line_55 $$ bytecount += read [CD]
Line_40 $$ long bytecount = 0 --> Line_55 $$ bytecount += read [FD]
Line_54 $$ read = ins.read(buffer) --> Line_55 $$ bytecount += read [FD]
Line_18 $$ read = ins.read(buffer) --> Line_55 $$ bytecount += read [FD]
Line_15 $$ int read = ins.read(buffer) --> Line_55 $$ bytecount += read [FD]
Line_38 $$ boolean OnError = false --> Line_59 $$ OnError = true [FD]
Line_7 $$ InputStream ins = null --> Line_61 $$ if (ins != null) [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_61 $$ if (ins != null) [FD]
Line_47 $$ ins = conn.getInputStream() --> Line_61 $$ if (ins != null) [FD]
Line_7 $$ InputStream ins = null --> Line_63 $$ ins.close() [FD]
Line_13 $$ ins = new FileInputStream(TheAskedFile) --> Line_63 $$ ins.close() [FD]
Line_47 $$ ins = conn.getInputStream() --> Line_63 $$ ins.close() [FD]
Line_37 $$ FileOutputStream fout = null --> Line_67 $$ if (fout != null) [FD]
Line_48 $$ fout = new FileOutputStream(TheAskedFile) --> Line_67 $$ if (fout != null) [FD]
Line_37 $$ FileOutputStream fout = null --> Line_69 $$ fout.close() [FD]
Line_48 $$ fout = new FileOutputStream(TheAskedFile) --> Line_69 $$ fout.close() [FD]
Line_75 $$ if (OnError) --> Line_78 $$ long timetook = timeend - timestart [CD]
Line_75 $$ if (OnError) --> Line_79 $$ BigDecimal speed = new BigDecimal(bytecount).multiply(new BigDecimal(1000)).divide(new BigDecimal(timetook), MathContext.DECIMAL32) [CD]
Line_80 $$ for (ReportCalculatedStatistique report : Listener) --> Line_81 $$ report.reportUrlStat(url, speed, timetook) [FD]
Line_36 $$ for (URL url : ListFastest) --> Line_81 $$ report.reportUrlStat(url, speed, timetook) [FD]
Line_79 $$ BigDecimal speed = new BigDecimal(bytecount).multiply(new BigDecimal(1000)).divide(new BigDecimal(timetook), MathContext.DECIMAL32) --> Line_81 $$ report.reportUrlStat(url, speed, timetook) [FD]
Line_78 $$ long timetook = timeend - timestart --> Line_81 $$ report.reportUrlStat(url, speed, timetook) [FD]
Line_2 $$ public void run() --> Line_87 $$ LogPrinter.log(Level.FINEST, "download finished at [CD]
Line_2 $$ public void run() --> Line_88 $$ if (Pipe != null) [CD]
Line_18 $$ read = ins.read(buffer) --> Line_16 $$ while (read >= 0) [FD]
Line_18 $$ read = ins.read(buffer) --> Line_17 $$ Pipe.write(buffer, 0, read) [FD]
Line_54 $$ read = ins.read(buffer) --> Line_51 $$ while (read >= 0) [FD]
Line_54 $$ read = ins.read(buffer) --> Line_52 $$ fout.write(buffer, 0, read) [FD]
Line_54 $$ read = ins.read(buffer) --> Line_53 $$ Pipe.write(buffer, 0, read) [FD]
