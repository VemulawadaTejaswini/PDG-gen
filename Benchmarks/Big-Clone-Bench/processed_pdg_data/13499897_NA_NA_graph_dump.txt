Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_3 $$ int last = destfile.lastIndexOf('/') [CD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_3 $$ int last = destfile.lastIndexOf('/') [FD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_4 $$ if (last < 0) [CD]
Line_3 $$ int last = destfile.lastIndexOf('/') --> Line_4 $$ if (last < 0) [FD]
Line_4 $$ if (last < 0) --> Line_5 $$ DrxWriteError("CopyFile", "Destination filepath " + destfile + " doesn't contain /") [CD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_8 $$ String parent = destfile.substring(0, last) [CD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_8 $$ String parent = destfile.substring(0, last) [FD]
Line_3 $$ int last = destfile.lastIndexOf('/') --> Line_8 $$ String parent = destfile.substring(0, last) [FD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_9 $$ if (parent.length() > 0) [CD]
Line_8 $$ String parent = destfile.substring(0, last) --> Line_9 $$ if (parent.length() > 0) [FD]
Line_9 $$ if (parent.length() > 0) --> Line_10 $$ File f = new File(parent) [CD]
Line_9 $$ if (parent.length() > 0) --> Line_11 $$ if (!f.isDirectory()) [CD]
Line_10 $$ File f = new File(parent) --> Line_11 $$ if (!f.isDirectory()) [FD]
Line_11 $$ if (!f.isDirectory()) --> Line_12 $$ if (!f.mkdirs()) [CD]
Line_10 $$ File f = new File(parent) --> Line_12 $$ if (!f.mkdirs()) [FD]
Line_12 $$ if (!f.mkdirs()) --> Line_13 $$ DrxWriteError("CopyFile", "Folder " + parent + " doesn't exist, cannot create") [CD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_17 $$ FileChannel srcChannel = new FileInputStream(sourcefile).getChannel() [CD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_18 $$ FileChannel dstChannel = new FileOutputStream(destfile).getChannel() [CD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_19 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size()) [CD]
Line_18 $$ FileChannel dstChannel = new FileOutputStream(destfile).getChannel() --> Line_19 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_17 $$ FileChannel srcChannel = new FileInputStream(sourcefile).getChannel() --> Line_19 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_20 $$ srcChannel.close() [CD]
Line_17 $$ FileChannel srcChannel = new FileInputStream(sourcefile).getChannel() --> Line_20 $$ srcChannel.close() [FD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_21 $$ dstChannel.close() [CD]
Line_18 $$ FileChannel dstChannel = new FileOutputStream(destfile).getChannel() --> Line_21 $$ dstChannel.close() [FD]
Line_2 $$ public static String CopyFile(String sourcefile, String destfile) throws FileNotFoundException, IOException --> Line_22 $$ return destfile [CD]
