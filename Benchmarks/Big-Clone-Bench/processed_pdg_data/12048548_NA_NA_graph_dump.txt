Line_6 $$ File dataBase = new File(fileName) --> Line_7 $$ if (!dataBase.exists()) [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_8 $$ JOptionPane.showMessageDialog(null, "No se encuentra el fichero DB", "Error", JOptionPane.ERROR_MESSAGE) [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_10 $$ G.conn = DriverManager.getConnection("jdbc:sqlite:" + fileName) [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_11 $$ HashMap<Integer, String> languageIDs = new HashMap<Integer, String>() [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_12 $$ HashMap<Integer, String> typeIDs = new HashMap<Integer, String>() [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_13 $$ long tiempoInicio = System.currentTimeMillis() [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_14 $$ Element dataBaseXML = new Element("database") [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_15 $$ Element languages = new Element("languages") [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_16 $$ Statement stat = G.conn.createStatement() [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") [CD]
Line_16 $$ Statement stat = G.conn.createStatement() --> Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_18 $$ while (rs.next()) [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_18 $$ while (rs.next()) [FD]
Line_18 $$ while (rs.next()) --> Line_19 $$ int id = rs.getInt("id") [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_19 $$ int id = rs.getInt("id") [FD]
Line_18 $$ while (rs.next()) --> Line_20 $$ String name = rs.getString("name") [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_20 $$ String name = rs.getString("name") [FD]
Line_18 $$ while (rs.next()) --> Line_21 $$ languageIDs.put(id, name) [CD]
Line_11 $$ HashMap<Integer, String> languageIDs = new HashMap<Integer, String>() --> Line_21 $$ languageIDs.put(id, name) [FD]
Line_19 $$ int id = rs.getInt("id") --> Line_21 $$ languageIDs.put(id, name) [FD]
Line_20 $$ String name = rs.getString("name") --> Line_21 $$ languageIDs.put(id, name) [FD]
Line_18 $$ while (rs.next()) --> Line_22 $$ Element language = new Element("language") [CD]
Line_18 $$ while (rs.next()) --> Line_23 $$ language.setText(name) [CD]
Line_22 $$ Element language = new Element("language") --> Line_23 $$ language.setText(name) [FD]
Line_20 $$ String name = rs.getString("name") --> Line_23 $$ language.setText(name) [FD]
Line_18 $$ while (rs.next()) --> Line_24 $$ languages.addContent(language) [CD]
Line_15 $$ Element languages = new Element("languages") --> Line_24 $$ languages.addContent(language) [FD]
Line_22 $$ Element language = new Element("language") --> Line_24 $$ languages.addContent(language) [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_26 $$ dataBaseXML.addContent(languages) [CD]
Line_14 $$ Element dataBaseXML = new Element("database") --> Line_26 $$ dataBaseXML.addContent(languages) [FD]
Line_15 $$ Element languages = new Element("languages") --> Line_26 $$ dataBaseXML.addContent(languages) [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_27 $$ rs = stat.executeQuery("select * from type order by id") [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_27 $$ rs = stat.executeQuery("select * from type order by id") [FD]
Line_16 $$ Statement stat = G.conn.createStatement() --> Line_27 $$ rs = stat.executeQuery("select * from type order by id") [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_28 $$ while (rs.next()) [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_28 $$ while (rs.next()) [FD]
Line_27 $$ rs = stat.executeQuery("select * from type order by id") --> Line_28 $$ while (rs.next()) [FD]
Line_28 $$ while (rs.next()) --> Line_29 $$ int id = rs.getInt("id") [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_29 $$ int id = rs.getInt("id") [FD]
Line_27 $$ rs = stat.executeQuery("select * from type order by id") --> Line_29 $$ int id = rs.getInt("id") [FD]
Line_28 $$ while (rs.next()) --> Line_30 $$ String name = rs.getString("name") [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_30 $$ String name = rs.getString("name") [FD]
Line_27 $$ rs = stat.executeQuery("select * from type order by id") --> Line_30 $$ String name = rs.getString("name") [FD]
Line_28 $$ while (rs.next()) --> Line_31 $$ typeIDs.put(id, name) [CD]
Line_12 $$ HashMap<Integer, String> typeIDs = new HashMap<Integer, String>() --> Line_31 $$ typeIDs.put(id, name) [FD]
Line_29 $$ int id = rs.getInt("id") --> Line_31 $$ typeIDs.put(id, name) [FD]
Line_19 $$ int id = rs.getInt("id") --> Line_31 $$ typeIDs.put(id, name) [FD]
Line_30 $$ String name = rs.getString("name") --> Line_31 $$ typeIDs.put(id, name) [FD]
Line_20 $$ String name = rs.getString("name") --> Line_31 $$ typeIDs.put(id, name) [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_33 $$ rs = stat.executeQuery("select distinct name from main order by name") [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_33 $$ rs = stat.executeQuery("select distinct name from main order by name") [FD]
Line_27 $$ rs = stat.executeQuery("select * from type order by id") --> Line_33 $$ rs = stat.executeQuery("select distinct name from main order by name") [FD]
Line_16 $$ Statement stat = G.conn.createStatement() --> Line_33 $$ rs = stat.executeQuery("select distinct name from main order by name") [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_34 $$ while (rs.next()) [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_34 $$ while (rs.next()) [FD]
Line_27 $$ rs = stat.executeQuery("select * from type order by id") --> Line_34 $$ while (rs.next()) [FD]
Line_33 $$ rs = stat.executeQuery("select distinct name from main order by name") --> Line_34 $$ while (rs.next()) [FD]
Line_34 $$ while (rs.next()) --> Line_35 $$ String name = rs.getString("name") [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_35 $$ String name = rs.getString("name") [FD]
Line_27 $$ rs = stat.executeQuery("select * from type order by id") --> Line_35 $$ String name = rs.getString("name") [FD]
Line_33 $$ rs = stat.executeQuery("select distinct name from main order by name") --> Line_35 $$ String name = rs.getString("name") [FD]
Line_34 $$ while (rs.next()) --> Line_36 $$ Element image = new Element("image") [CD]
Line_34 $$ while (rs.next()) --> Line_37 $$ image.setAttribute("id", name) [CD]
Line_36 $$ Element image = new Element("image") --> Line_37 $$ image.setAttribute("id", name) [FD]
Line_35 $$ String name = rs.getString("name") --> Line_37 $$ image.setAttribute("id", name) [FD]
Line_30 $$ String name = rs.getString("name") --> Line_37 $$ image.setAttribute("id", name) [FD]
Line_20 $$ String name = rs.getString("name") --> Line_37 $$ image.setAttribute("id", name) [FD]
Line_34 $$ while (rs.next()) --> Line_38 $$ Statement stat2 = G.conn.createStatement() [CD]
Line_34 $$ while (rs.next()) --> Line_39 $$ ResultSet rs2 = stat2.executeQuery("select distinct idL from main where name = \"" + name + "\" order by idL") [CD]
Line_38 $$ Statement stat2 = G.conn.createStatement() --> Line_39 $$ ResultSet rs2 = stat2.executeQuery("select distinct idL from main where name = \"" + name + "\" order by idL") [FD]
Line_34 $$ while (rs.next()) --> Line_40 $$ while (rs2.next()) [CD]
Line_39 $$ ResultSet rs2 = stat2.executeQuery("select distinct idL from main where name = \"" + name + "\" order by idL") --> Line_40 $$ while (rs2.next()) [FD]
Line_40 $$ while (rs2.next()) --> Line_41 $$ int idL = rs2.getInt("idL") [CD]
Line_39 $$ ResultSet rs2 = stat2.executeQuery("select distinct idL from main where name = \"" + name + "\" order by idL") --> Line_41 $$ int idL = rs2.getInt("idL") [FD]
Line_40 $$ while (rs2.next()) --> Line_42 $$ Element language = new Element("language") [CD]
Line_40 $$ while (rs2.next()) --> Line_43 $$ language.setAttribute("id", languageIDs.get(idL)) [CD]
Line_42 $$ Element language = new Element("language") --> Line_43 $$ language.setAttribute("id", languageIDs.get(idL)) [FD]
Line_22 $$ Element language = new Element("language") --> Line_43 $$ language.setAttribute("id", languageIDs.get(idL)) [FD]
Line_11 $$ HashMap<Integer, String> languageIDs = new HashMap<Integer, String>() --> Line_43 $$ language.setAttribute("id", languageIDs.get(idL)) [FD]
Line_41 $$ int idL = rs2.getInt("idL") --> Line_43 $$ language.setAttribute("id", languageIDs.get(idL)) [FD]
Line_40 $$ while (rs2.next()) --> Line_44 $$ Statement stat3 = G.conn.createStatement() [CD]
Line_40 $$ while (rs2.next()) --> Line_45 $$ ResultSet rs3 = stat3.executeQuery("select * from main where name = \"" + name + "\" and idL = " + idL + " order by idT") [CD]
Line_44 $$ Statement stat3 = G.conn.createStatement() --> Line_45 $$ ResultSet rs3 = stat3.executeQuery("select * from main where name = \"" + name + "\" and idL = " + idL + " order by idT") [FD]
Line_40 $$ while (rs2.next()) --> Line_46 $$ while (rs3.next()) [CD]
Line_45 $$ ResultSet rs3 = stat3.executeQuery("select * from main where name = \"" + name + "\" and idL = " + idL + " order by idT") --> Line_46 $$ while (rs3.next()) [FD]
Line_46 $$ while (rs3.next()) --> Line_47 $$ int idT = rs3.getInt("idT") [CD]
Line_45 $$ ResultSet rs3 = stat3.executeQuery("select * from main where name = \"" + name + "\" and idL = " + idL + " order by idT") --> Line_47 $$ int idT = rs3.getInt("idT") [FD]
Line_46 $$ while (rs3.next()) --> Line_48 $$ String word = rs3.getString("word") [CD]
Line_45 $$ ResultSet rs3 = stat3.executeQuery("select * from main where name = \"" + name + "\" and idL = " + idL + " order by idT") --> Line_48 $$ String word = rs3.getString("word") [FD]
Line_46 $$ while (rs3.next()) --> Line_49 $$ Element wordE = new Element("word") [CD]
Line_46 $$ while (rs3.next()) --> Line_50 $$ wordE.setAttribute("type", typeIDs.get(idT)) [CD]
Line_49 $$ Element wordE = new Element("word") --> Line_50 $$ wordE.setAttribute("type", typeIDs.get(idT)) [FD]
Line_12 $$ HashMap<Integer, String> typeIDs = new HashMap<Integer, String>() --> Line_50 $$ wordE.setAttribute("type", typeIDs.get(idT)) [FD]
Line_47 $$ int idT = rs3.getInt("idT") --> Line_50 $$ wordE.setAttribute("type", typeIDs.get(idT)) [FD]
Line_46 $$ while (rs3.next()) --> Line_51 $$ wordE.setText(word) [CD]
Line_49 $$ Element wordE = new Element("word") --> Line_51 $$ wordE.setText(word) [FD]
Line_48 $$ String word = rs3.getString("word") --> Line_51 $$ wordE.setText(word) [FD]
Line_46 $$ while (rs3.next()) --> Line_52 $$ language.addContent(wordE) [CD]
Line_42 $$ Element language = new Element("language") --> Line_52 $$ language.addContent(wordE) [FD]
Line_22 $$ Element language = new Element("language") --> Line_52 $$ language.addContent(wordE) [FD]
Line_49 $$ Element wordE = new Element("word") --> Line_52 $$ language.addContent(wordE) [FD]
Line_46 $$ while (rs3.next()) --> Line_53 $$ String pathSrc = input + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name [CD]
Line_35 $$ String name = rs.getString("name") --> Line_53 $$ String pathSrc = input + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name [FD]
Line_30 $$ String name = rs.getString("name") --> Line_53 $$ String pathSrc = input + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name [FD]
Line_20 $$ String name = rs.getString("name") --> Line_53 $$ String pathSrc = input + File.separator + name.substring(0, 1).toUpperCase() + File.separator + name [FD]
Line_46 $$ while (rs3.next()) --> Line_54 $$ String pathDst = output + File.separator + name [CD]
Line_57 $$ FileChannel dstChannel = new FileOutputStream(pathDst).getChannel() --> Line_58 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_56 $$ FileChannel srcChannel = new FileInputStream(pathSrc).getChannel() --> Line_58 $$ dstChannel.transferFrom(srcChannel, 0, srcChannel.size()) [FD]
Line_56 $$ FileChannel srcChannel = new FileInputStream(pathSrc).getChannel() --> Line_59 $$ srcChannel.close() [FD]
Line_57 $$ FileChannel dstChannel = new FileOutputStream(pathDst).getChannel() --> Line_60 $$ dstChannel.close() [FD]
Line_40 $$ while (rs2.next()) --> Line_66 $$ rs3.close() [CD]
Line_45 $$ ResultSet rs3 = stat3.executeQuery("select * from main where name = \"" + name + "\" and idL = " + idL + " order by idT") --> Line_66 $$ rs3.close() [FD]
Line_40 $$ while (rs2.next()) --> Line_67 $$ stat3.close() [CD]
Line_44 $$ Statement stat3 = G.conn.createStatement() --> Line_67 $$ stat3.close() [FD]
Line_40 $$ while (rs2.next()) --> Line_68 $$ image.addContent(language) [CD]
Line_36 $$ Element image = new Element("image") --> Line_68 $$ image.addContent(language) [FD]
Line_42 $$ Element language = new Element("language") --> Line_68 $$ image.addContent(language) [FD]
Line_22 $$ Element language = new Element("language") --> Line_68 $$ image.addContent(language) [FD]
Line_34 $$ while (rs.next()) --> Line_70 $$ rs2.close() [CD]
Line_39 $$ ResultSet rs2 = stat2.executeQuery("select distinct idL from main where name = \"" + name + "\" order by idL") --> Line_70 $$ rs2.close() [FD]
Line_34 $$ while (rs.next()) --> Line_71 $$ stat2.close() [CD]
Line_38 $$ Statement stat2 = G.conn.createStatement() --> Line_71 $$ stat2.close() [FD]
Line_34 $$ while (rs.next()) --> Line_72 $$ dataBaseXML.addContent(image) [CD]
Line_14 $$ Element dataBaseXML = new Element("database") --> Line_72 $$ dataBaseXML.addContent(image) [FD]
Line_36 $$ Element image = new Element("image") --> Line_72 $$ dataBaseXML.addContent(image) [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_74 $$ rs.close() [CD]
Line_17 $$ ResultSet rs = stat.executeQuery("select * from language order by id") --> Line_74 $$ rs.close() [FD]
Line_27 $$ rs = stat.executeQuery("select * from type order by id") --> Line_74 $$ rs.close() [FD]
Line_33 $$ rs = stat.executeQuery("select distinct name from main order by name") --> Line_74 $$ rs.close() [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_75 $$ stat.close() [CD]
Line_16 $$ Statement stat = G.conn.createStatement() --> Line_75 $$ stat.close() [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_76 $$ XMLOutputter out = new XMLOutputter(Format.getPrettyFormat()) [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_77 $$ FileOutputStream f = new FileOutputStream(output + File.separator + G.imagesName) [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_78 $$ out.output(dataBaseXML, f) [CD]
Line_76 $$ XMLOutputter out = new XMLOutputter(Format.getPrettyFormat()) --> Line_78 $$ out.output(dataBaseXML, f) [FD]
Line_14 $$ Element dataBaseXML = new Element("database") --> Line_78 $$ out.output(dataBaseXML, f) [FD]
Line_77 $$ FileOutputStream f = new FileOutputStream(output + File.separator + G.imagesName) --> Line_78 $$ out.output(dataBaseXML, f) [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_79 $$ f.flush() [CD]
Line_77 $$ FileOutputStream f = new FileOutputStream(output + File.separator + G.imagesName) --> Line_79 $$ f.flush() [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_80 $$ f.close() [CD]
Line_77 $$ FileOutputStream f = new FileOutputStream(output + File.separator + G.imagesName) --> Line_80 $$ f.close() [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_81 $$ long totalTiempo = System.currentTimeMillis() - tiempoInicio [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_82 $$ System.out.println("El tiempo total es :" + totalTiempo / 1000 + " segundos") [CD]
