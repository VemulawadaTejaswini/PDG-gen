Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_3 $$ logger.debug(request.getRequestLine().toString()) [CD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_3 $$ logger.debug(request.getRequestLine().toString()) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_4 $$ DefaultHttpClient httpclient = HttpUtil.getNewHttpClient() [CD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_5 $$ configureProxy(httpclient) [CD]
Line_4 $$ DefaultHttpClient httpclient = HttpUtil.getNewHttpClient() --> Line_5 $$ configureProxy(httpclient) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_6 $$ if (login != null) [CD]
Line_6 $$ if (login != null) --> Line_7 $$ final String credentials = String.valueOf(Base64Encoder.encode((login + ':' + password).getBytes(CHARSET))) [CD]
Line_6 $$ if (login != null) --> Line_8 $$ request.addHeader("Authorization", "Basic: " + credentials) [CD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_8 $$ request.addHeader("Authorization", "Basic: " + credentials) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_10 $$ request.addHeader("Accept-Encoding", "gzip,deflate") [CD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_10 $$ request.addHeader("Accept-Encoding", "gzip,deflate") [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_11 $$ HttpResponse httpResponse = httpclient.execute((HttpUriRequest) request) [CD]
Line_4 $$ DefaultHttpClient httpclient = HttpUtil.getNewHttpClient() --> Line_11 $$ HttpResponse httpResponse = httpclient.execute((HttpUriRequest) request) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_12 $$ int responseCode = httpResponse.getStatusLine().getStatusCode() [CD]
Line_11 $$ HttpResponse httpResponse = httpclient.execute((HttpUriRequest) request) --> Line_12 $$ int responseCode = httpResponse.getStatusLine().getStatusCode() [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_13 $$ if (responseCode == HttpStatus.SC_UNAUTHORIZED) [CD]
Line_12 $$ int responseCode = httpResponse.getStatusLine().getStatusCode() --> Line_13 $$ if (responseCode == HttpStatus.SC_UNAUTHORIZED) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_16 $$ if (responseCode == HttpStatus.SC_FORBIDDEN) [CD]
Line_12 $$ int responseCode = httpResponse.getStatusLine().getStatusCode() --> Line_16 $$ if (responseCode == HttpStatus.SC_FORBIDDEN) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_19 $$ HttpEntity responseEntity = httpResponse.getEntity() [CD]
Line_11 $$ HttpResponse httpResponse = httpclient.execute((HttpUriRequest) request) --> Line_19 $$ HttpEntity responseEntity = httpResponse.getEntity() [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_20 $$ String responseBody = EntityUtils.toString(responseEntity) [CD]
Line_19 $$ HttpEntity responseEntity = httpResponse.getEntity() --> Line_20 $$ String responseBody = EntityUtils.toString(responseEntity) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_21 $$ if (responseCode == HttpStatus.SC_NOT_FOUND) [CD]
Line_12 $$ int responseCode = httpResponse.getStatusLine().getStatusCode() --> Line_21 $$ if (responseCode == HttpStatus.SC_NOT_FOUND) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_24 $$ if (responseCode == HttpStatus.SC_UNPROCESSABLE_ENTITY) [CD]
Line_12 $$ int responseCode = httpResponse.getStatusLine().getStatusCode() --> Line_24 $$ if (responseCode == HttpStatus.SC_UNPROCESSABLE_ENTITY) [FD]
Line_24 $$ if (responseCode == HttpStatus.SC_UNPROCESSABLE_ENTITY) --> Line_25 $$ List<String> errors = RedmineXMLParser.parseErrors(responseBody) [CD]
Line_20 $$ String responseBody = EntityUtils.toString(responseEntity) --> Line_25 $$ List<String> errors = RedmineXMLParser.parseErrors(responseBody) [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_28 $$ httpclient.getConnectionManager().shutdown() [CD]
Line_4 $$ DefaultHttpClient httpclient = HttpUtil.getNewHttpClient() --> Line_28 $$ httpclient.getConnectionManager().shutdown() [FD]
Line_2 $$ public String sendRequest(HttpRequest request) throws IOException, AuthenticationException, RedmineException, NotFoundException --> Line_29 $$ return responseBody [CD]
