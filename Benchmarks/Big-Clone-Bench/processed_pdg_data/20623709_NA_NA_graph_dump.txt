Line_2 $$ public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception --> Line_3 $$ if (!targetDirectory.exists()) [CD]
Line_2 $$ public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception --> Line_3 $$ if (!targetDirectory.exists()) [FD]
Line_3 $$ if (!targetDirectory.exists()) --> Line_4 $$ throw new Exception("Could not create target directory " + targetDirectory.getAbsolutePath()) [CD]
Line_2 $$ public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception --> Line_4 $$ throw new Exception("Could not create target directory " + targetDirectory.getAbsolutePath()) [FD]
Line_2 $$ public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception --> Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_7 $$ FileInputStream fis = new FileInputStream(this) [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_8 $$ FileChannel fci = fis.getChannel() [CD]
Line_7 $$ FileInputStream fis = new FileInputStream(this) --> Line_8 $$ FileChannel fci = fis.getChannel() [FD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_9 $$ FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + "_0" + ".fasta")) [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_10 $$ FileChannel fco = fos.getChannel() [CD]
Line_9 $$ FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + "_0" + ".fasta")) --> Line_10 $$ FileChannel fco = fos.getChannel() [FD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_11 $$ ByteBuffer buffer = ByteBuffer.allocate(64000) [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_12 $$ while (fci.read(buffer) > 0) [CD]
Line_8 $$ FileChannel fci = fis.getChannel() --> Line_12 $$ while (fci.read(buffer) > 0) [FD]
Line_11 $$ ByteBuffer buffer = ByteBuffer.allocate(64000) --> Line_12 $$ while (fci.read(buffer) > 0) [FD]
Line_12 $$ while (fci.read(buffer) > 0) --> Line_13 $$ buffer.flip() [CD]
Line_11 $$ ByteBuffer buffer = ByteBuffer.allocate(64000) --> Line_13 $$ buffer.flip() [FD]
Line_12 $$ while (fci.read(buffer) > 0) --> Line_14 $$ fco.write(buffer) [CD]
Line_10 $$ FileChannel fco = fos.getChannel() --> Line_14 $$ fco.write(buffer) [FD]
Line_11 $$ ByteBuffer buffer = ByteBuffer.allocate(64000) --> Line_14 $$ fco.write(buffer) [FD]
Line_12 $$ while (fci.read(buffer) > 0) --> Line_15 $$ buffer.clear() [CD]
Line_11 $$ ByteBuffer buffer = ByteBuffer.allocate(64000) --> Line_15 $$ buffer.clear() [FD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_17 $$ fci.close() [CD]
Line_8 $$ FileChannel fci = fis.getChannel() --> Line_17 $$ fci.close() [FD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_18 $$ fco.close() [CD]
Line_10 $$ FileChannel fco = fos.getChannel() --> Line_18 $$ fco.close() [FD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_19 $$ return (long) 1 [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_21 $$ long currentBasesCount = 0 [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_22 $$ long currentEntriesCount = 0 [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_23 $$ int targetCount = 0 [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_24 $$ FileChannel fastaChannel = new FileInputStream(this).getChannel() [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_25 $$ int totalSeqCount = 0 [CD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_26 $$ long totalResiduesCount = 0 [CD]
Line_32 $$ final int bufferSize = 1024 * 1024 --> Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) [FD]
Line_30 $$ long fastaFileReadOffset = 0L --> Line_35 $$ for (; fastaFileReadOffset < fastaFileSize; ) [FD]
Line_29 $$ long fastaFileSize = this.length() --> Line_35 $$ for (; fastaFileReadOffset < fastaFileSize; ) [FD]
Line_35 $$ for (; fastaFileReadOffset < fastaFileSize; ) --> Line_36 $$ long nBytes = fastaChannel.read(fastaBuffer) [CD]
Line_24 $$ FileChannel fastaChannel = new FileInputStream(this).getChannel() --> Line_36 $$ long nBytes = fastaChannel.read(fastaBuffer) [FD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_36 $$ long nBytes = fastaChannel.read(fastaBuffer) [FD]
Line_35 $$ for (; fastaFileReadOffset < fastaFileSize; ) --> Line_37 $$ if (nBytes <= 0) [CD]
Line_36 $$ long nBytes = fastaChannel.read(fastaBuffer) --> Line_37 $$ if (nBytes <= 0) [FD]
Line_37 $$ if (nBytes <= 0) --> Line_38 $$ fastaBuffer.limit(0) [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_38 $$ fastaBuffer.limit(0) [FD]
Line_37 $$ if (nBytes <= 0) --> Line_41 $$ fastaBuffer.flip() [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_41 $$ fastaBuffer.flip() [FD]
Line_37 $$ if (nBytes <= 0) --> Line_42 $$ fastaFileReadOffset += nBytes [CD]
Line_30 $$ long fastaFileReadOffset = 0L --> Line_42 $$ fastaFileReadOffset += nBytes [FD]
Line_36 $$ long nBytes = fastaChannel.read(fastaBuffer) --> Line_42 $$ fastaFileReadOffset += nBytes [FD]
Line_35 $$ for (; fastaFileReadOffset < fastaFileSize; ) --> Line_44 $$ for (; ; ) [CD]
Line_44 $$ for (; ; ) --> Line_45 $$ if (!fastaBuffer.hasRemaining()) [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_45 $$ if (!fastaBuffer.hasRemaining()) [FD]
Line_45 $$ if (!fastaBuffer.hasRemaining()) --> Line_46 $$ fastaBuffer.clear() [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_46 $$ fastaBuffer.clear() [FD]
Line_44 $$ for (; ; ) --> Line_49 $$ int b = fastaBuffer.get() [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_49 $$ int b = fastaBuffer.get() [FD]
Line_44 $$ for (; ; ) --> Line_50 $$ if (b == '\r') [CD]
Line_49 $$ int b = fastaBuffer.get() --> Line_50 $$ if (b == '\r') [FD]
Line_50 $$ if (b == '\r') --> Line_51 $$ if (b == '\n') [CD]
Line_49 $$ int b = fastaBuffer.get() --> Line_51 $$ if (b == '\n') [FD]
Line_51 $$ if (b == '\n') --> Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) [CD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) [FD]
Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) --> Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE [CD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE [FD]
Line_51 $$ if (b == '\n') --> Line_55 $$ if (b == '>') [CD]
Line_49 $$ int b = fastaBuffer.get() --> Line_55 $$ if (b == '>') [FD]
Line_55 $$ if (b == '>') --> Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) [FD]
Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) --> Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE [FD]
Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) --> Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) --> Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE [FD]
Line_55 $$ if (b == '>') --> Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) [FD]
Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) [FD]
Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) --> Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) [CD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_63 $$ fastaBuffer.position(fastaBuffer.position() - 1) [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_63 $$ fastaBuffer.position(fastaBuffer.position() - 1) [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_64 $$ long currentTime = System.currentTimeMillis() [CD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_65 $$ System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileReadOffset - fastaBuffer.remaining()) + " and was created in " + (currentTime - prevTime) + " ms") [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_65 $$ System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileReadOffset - fastaBuffer.remaining()) + " and was created in " + (currentTime - prevTime) + " ms") [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_66 $$ prevTime = currentTime [CD]
Line_28 $$ long prevTime = System.currentTimeMillis() --> Line_66 $$ prevTime = currentTime [FD]
Line_64 $$ long currentTime = System.currentTimeMillis() --> Line_66 $$ prevTime = currentTime [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_67 $$ long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining() [CD]
Line_33 $$ ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize) --> Line_67 $$ long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining() [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_68 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() [CD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_69 $$ nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel) [CD]
Line_36 $$ long nBytes = fastaChannel.read(fastaBuffer) --> Line_69 $$ nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel) [FD]
Line_24 $$ FileChannel fastaChannel = new FileInputStream(this).getChannel() --> Line_69 $$ nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel) [FD]
Line_31 $$ long partitionStartOffset = 0L --> Line_69 $$ nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel) [FD]
Line_68 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_69 $$ nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel) [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_70 $$ partitionChannel.force(true) [CD]
Line_68 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_70 $$ partitionChannel.force(true) [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_71 $$ partitionChannel.close() [CD]
Line_68 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_71 $$ partitionChannel.close() [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_72 $$ targetCount++ [CD]
Line_23 $$ int targetCount = 0 --> Line_72 $$ targetCount++ [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_73 $$ partitionStartOffset += nBytes [CD]
Line_31 $$ long partitionStartOffset = 0L --> Line_73 $$ partitionStartOffset += nBytes [FD]
Line_69 $$ nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel) --> Line_73 $$ partitionStartOffset += nBytes [FD]
Line_36 $$ long nBytes = fastaChannel.read(fastaBuffer) --> Line_73 $$ partitionStartOffset += nBytes [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_74 $$ currentBasesCount = 0 [CD]
Line_21 $$ long currentBasesCount = 0 --> Line_74 $$ currentBasesCount = 0 [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_75 $$ currentEntriesCount = 0 [CD]
Line_22 $$ long currentEntriesCount = 0 --> Line_75 $$ currentEntriesCount = 0 [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN [FD]
Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE [FD]
Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE [FD]
Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE [FD]
Line_62 $$ if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) --> Line_79 $$ currentEntriesCount++ [CD]
Line_75 $$ currentEntriesCount = 0 --> Line_79 $$ currentEntriesCount++ [FD]
Line_22 $$ long currentEntriesCount = 0 --> Line_79 $$ currentEntriesCount++ [FD]
Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) --> Line_81 $$ totalSeqCount++ [CD]
Line_25 $$ int totalSeqCount = 0 --> Line_81 $$ totalSeqCount++ [FD]
Line_55 $$ if (b == '>') --> Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [CD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE --> Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_34 $$ int fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) --> Line_85 $$ totalResiduesCount++ [CD]
Line_26 $$ long totalResiduesCount = 0 --> Line_85 $$ totalResiduesCount++ [FD]
Line_84 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) --> Line_86 $$ currentBasesCount++ [CD]
Line_74 $$ currentBasesCount = 0 --> Line_86 $$ currentBasesCount++ [FD]
Line_21 $$ long currentBasesCount = 0 --> Line_86 $$ currentBasesCount++ [FD]
Line_73 $$ partitionStartOffset += nBytes --> Line_91 $$ if (partitionStartOffset < fastaFileSize) [FD]
Line_31 $$ long partitionStartOffset = 0L --> Line_91 $$ if (partitionStartOffset < fastaFileSize) [FD]
Line_29 $$ long fastaFileSize = this.length() --> Line_91 $$ if (partitionStartOffset < fastaFileSize) [FD]
Line_91 $$ if (partitionStartOffset < fastaFileSize) --> Line_92 $$ long currentTime = System.currentTimeMillis() [CD]
Line_91 $$ if (partitionStartOffset < fastaFileSize) --> Line_93 $$ System.out.println(new java.util.Date() + " Partition " + targetCount + " containing " + currentEntriesCount + " sequences and " + currentBasesCount + " residues ends at " + (fastaFileSize) + " and was created in " + (currentTime - prevTime) + " ms") [CD]
Line_91 $$ if (partitionStartOffset < fastaFileSize) --> Line_94 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() [CD]
Line_91 $$ if (partitionStartOffset < fastaFileSize) --> Line_95 $$ fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel) [CD]
Line_24 $$ FileChannel fastaChannel = new FileInputStream(this).getChannel() --> Line_95 $$ fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel) [FD]
Line_73 $$ partitionStartOffset += nBytes --> Line_95 $$ fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel) [FD]
Line_31 $$ long partitionStartOffset = 0L --> Line_95 $$ fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel) [FD]
Line_68 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_95 $$ fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel) [FD]
Line_94 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_95 $$ fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel) [FD]
Line_91 $$ if (partitionStartOffset < fastaFileSize) --> Line_96 $$ partitionChannel.force(true) [CD]
Line_68 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_96 $$ partitionChannel.force(true) [FD]
Line_94 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_96 $$ partitionChannel.force(true) [FD]
Line_91 $$ if (partitionStartOffset < fastaFileSize) --> Line_97 $$ partitionChannel.close() [CD]
Line_68 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_97 $$ partitionChannel.close() [FD]
Line_94 $$ FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + "_" + targetCount + ".fasta")).getChannel() --> Line_97 $$ partitionChannel.close() [FD]
Line_91 $$ if (partitionStartOffset < fastaFileSize) --> Line_98 $$ targetCount++ [CD]
Line_23 $$ int targetCount = 0 --> Line_98 $$ targetCount++ [FD]
Line_100 $$ if (size.isUnknown()) --> Line_101 $$ size.setBases(totalResiduesCount) [CD]
Line_26 $$ long totalResiduesCount = 0 --> Line_101 $$ size.setBases(totalResiduesCount) [FD]
Line_100 $$ if (size.isUnknown()) --> Line_102 $$ size.setEntries(totalSeqCount) [CD]
Line_25 $$ int totalSeqCount = 0 --> Line_102 $$ size.setEntries(totalSeqCount) [FD]
Line_24 $$ FileChannel fastaChannel = new FileInputStream(this).getChannel() --> Line_105 $$ fastaChannel.close() [FD]
Line_6 $$ if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) --> Line_107 $$ return (long) targetCount [CD]
Line_42 $$ fastaFileReadOffset += nBytes --> Line_35 $$ for (; fastaFileReadOffset < fastaFileSize; ) [FD]
Line_53 $$ fastaReadState = FASTAFileTokenizer.SEQUENCELINE --> Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) [FD]
Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) [FD]
Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) [FD]
Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE --> Line_52 $$ if (fastaReadState == FASTAFileTokenizer.DEFLINE) [FD]
Line_57 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) [FD]
Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) [FD]
Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) [FD]
Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE --> Line_56 $$ if (fastaReadState == FASTAFileTokenizer.UNKNOWN) [FD]
Line_59 $$ fastaReadState = FASTAFileTokenizer.STARTDEFLINE --> Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE --> Line_58 $$ if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) [FD]
Line_76 $$ fastaReadState = FASTAFileTokenizer.UNKNOWN --> Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) [FD]
Line_78 $$ fastaReadState = FASTAFileTokenizer.DEFLINE --> Line_61 $$ if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) [FD]
Line_73 $$ partitionStartOffset += nBytes --> Line_69 $$ nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel) [FD]
