Line_2 $$ public void update() --> Line_3 $$ if (!updatable) [CD]
Line_3 $$ if (!updatable) --> Line_4 $$ Main.fenetre().erreur(Fenetre.OLD_VERSION) [CD]
Line_3 $$ if (!updatable) --> Line_5 $$ return [CD]
Line_9 $$ Element remoteRoot = new SAXBuilder().build(xml).getRootElement() --> Line_11 $$ Iterator<?> iterElem = remoteRoot.getChildren().iterator() [FD]
Line_11 $$ Iterator<?> iterElem = remoteRoot.getChildren().iterator() --> Line_12 $$ while (iterElem.hasNext()) [FD]
Line_12 $$ while (iterElem.hasNext()) --> Line_13 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) [CD]
Line_11 $$ Iterator<?> iterElem = remoteRoot.getChildren().iterator() --> Line_13 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) [FD]
Line_12 $$ while (iterElem.hasNext()) --> Line_14 $$ addPackages.put(pack.id(), pack) [CD]
Line_13 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) --> Line_14 $$ addPackages.put(pack.id(), pack) [FD]
Line_11 $$ Iterator<?> iterElem = remoteRoot.getChildren().iterator() --> Line_17 $$ iterElem = root.getChildren("package").iterator() [FD]
Line_11 $$ Iterator<?> iterElem = remoteRoot.getChildren().iterator() --> Line_18 $$ while (iterElem.hasNext()) [FD]
Line_17 $$ iterElem = root.getChildren("package").iterator() --> Line_18 $$ while (iterElem.hasNext()) [FD]
Line_18 $$ while (iterElem.hasNext()) --> Line_19 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) [CD]
Line_11 $$ Iterator<?> iterElem = remoteRoot.getChildren().iterator() --> Line_19 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) [FD]
Line_17 $$ iterElem = root.getChildren("package").iterator() --> Line_19 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) [FD]
Line_18 $$ while (iterElem.hasNext()) --> Line_20 $$ int id = pack.id() [CD]
Line_19 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) --> Line_20 $$ int id = pack.id() [FD]
Line_13 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) --> Line_20 $$ int id = pack.id() [FD]
Line_18 $$ while (iterElem.hasNext()) --> Line_21 $$ if (!addPackages.containsKey(id)) [CD]
Line_20 $$ int id = pack.id() --> Line_21 $$ if (!addPackages.containsKey(id)) [FD]
Line_21 $$ if (!addPackages.containsKey(id)) --> Line_22 $$ removePackages.put(id, pack) [CD]
Line_20 $$ int id = pack.id() --> Line_22 $$ removePackages.put(id, pack) [FD]
Line_19 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) --> Line_22 $$ removePackages.put(id, pack) [FD]
Line_13 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) --> Line_22 $$ removePackages.put(id, pack) [FD]
Line_21 $$ if (!addPackages.containsKey(id)) --> Line_23 $$ if (addPackages.get(id).version().equals(pack.version())) [CD]
Line_20 $$ int id = pack.id() --> Line_23 $$ if (addPackages.get(id).version().equals(pack.version())) [FD]
Line_19 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) --> Line_23 $$ if (addPackages.get(id).version().equals(pack.version())) [FD]
Line_13 $$ PackageVersion pack = new PackageVersion((Element) iterElem.next()) --> Line_23 $$ if (addPackages.get(id).version().equals(pack.version())) [FD]
Line_23 $$ if (addPackages.get(id).version().equals(pack.version())) --> Line_24 $$ addPackages.remove(id) [CD]
Line_20 $$ int id = pack.id() --> Line_24 $$ addPackages.remove(id) [FD]
Line_23 $$ if (addPackages.get(id).version().equals(pack.version())) --> Line_26 $$ addPackages.get(id).ecrase() [CD]
Line_20 $$ int id = pack.id() --> Line_26 $$ addPackages.get(id).ecrase() [FD]
Line_29 $$ Iterator<PackageVersion> iterPack = addPackages.values().iterator() --> Line_30 $$ while (iterPack.hasNext()) [FD]
Line_30 $$ while (iterPack.hasNext()) --> Line_31 $$ install(iterPack.next()) [CD]
Line_29 $$ Iterator<PackageVersion> iterPack = addPackages.values().iterator() --> Line_31 $$ install(iterPack.next()) [FD]
Line_29 $$ Iterator<PackageVersion> iterPack = addPackages.values().iterator() --> Line_33 $$ iterPack = removePackages.values().iterator() [FD]
Line_29 $$ Iterator<PackageVersion> iterPack = addPackages.values().iterator() --> Line_34 $$ while (iterPack.hasNext()) [FD]
Line_33 $$ iterPack = removePackages.values().iterator() --> Line_34 $$ while (iterPack.hasNext()) [FD]
Line_34 $$ while (iterPack.hasNext()) --> Line_35 $$ remove(iterPack.next()) [CD]
Line_29 $$ Iterator<PackageVersion> iterPack = addPackages.values().iterator() --> Line_35 $$ remove(iterPack.next()) [FD]
Line_33 $$ iterPack = removePackages.values().iterator() --> Line_35 $$ remove(iterPack.next()) [FD]
Line_37 $$ if (offline) --> Line_38 $$ Runtime.getRuntime().addShutdownHook(new AddPackage(xml, "versions.xml")) [CD]
Line_37 $$ if (offline) --> Line_39 $$ Main.fenetre().erreur(Fenetre.UPDATE_TERMINE_RESTART) [CD]
Line_37 $$ if (offline) --> Line_41 $$ File oldXML = new File("versions.xml") [CD]
Line_37 $$ if (offline) --> Line_42 $$ oldXML.delete() [CD]
Line_41 $$ File oldXML = new File("versions.xml") --> Line_42 $$ oldXML.delete() [FD]
Line_37 $$ if (offline) --> Line_43 $$ oldXML.createNewFile() [CD]
Line_41 $$ File oldXML = new File("versions.xml") --> Line_43 $$ oldXML.createNewFile() [FD]
Line_37 $$ if (offline) --> Line_44 $$ FileChannel out = new FileOutputStream(oldXML).getChannel() [CD]
Line_37 $$ if (offline) --> Line_45 $$ FileChannel in = new FileInputStream(xml).getChannel() [CD]
Line_37 $$ if (offline) --> Line_46 $$ in.transferTo(0, in.size(), out) [CD]
Line_45 $$ FileChannel in = new FileInputStream(xml).getChannel() --> Line_46 $$ in.transferTo(0, in.size(), out) [FD]
Line_44 $$ FileChannel out = new FileOutputStream(oldXML).getChannel() --> Line_46 $$ in.transferTo(0, in.size(), out) [FD]
Line_37 $$ if (offline) --> Line_47 $$ in.close() [CD]
Line_45 $$ FileChannel in = new FileInputStream(xml).getChannel() --> Line_47 $$ in.close() [FD]
Line_37 $$ if (offline) --> Line_48 $$ out.close() [CD]
Line_44 $$ FileChannel out = new FileOutputStream(oldXML).getChannel() --> Line_48 $$ out.close() [FD]
Line_37 $$ if (offline) --> Line_49 $$ xml.delete() [CD]
Line_37 $$ if (offline) --> Line_50 $$ if (restart) [CD]
Line_50 $$ if (restart) --> Line_51 $$ Main.fenetre().erreur(Fenetre.UPDATE_TERMINE_RESTART) [CD]
Line_50 $$ if (restart) --> Line_53 $$ Main.updateVersion() [CD]
