Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) [CD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) [FD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_4 $$ progressMonitor.beginTask("", 10) [CD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_4 $$ progressMonitor.beginTask("", 10) [FD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_5 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_GeneratingJETEmitterFor_message", new Object[] [CD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_5 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_GeneratingJETEmitterFor_message", new Object[] [FD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() [CD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()) [CD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_10 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETParsing_message", new Object[] [FD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_12 $$ progressMonitor.worked(1) [FD]
Line_14 $$ if (jetEmitter.templateURIPath != null) --> Line_15 $$ URI templateURI = URI.createURI(jetEmitter.templateURIPath[0]) [CD]
Line_14 $$ if (jetEmitter.templateURIPath != null) --> Line_16 $$ URLClassLoader theClassLoader = null [CD]
Line_14 $$ if (jetEmitter.templateURIPath != null) --> Line_17 $$ if (templateURI.isPlatformResource()) [CD]
Line_15 $$ URI templateURI = URI.createURI(jetEmitter.templateURIPath[0]) --> Line_17 $$ if (templateURI.isPlatformResource()) [FD]
Line_17 $$ if (templateURI.isPlatformResource()) --> Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) [CD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) [FD]
Line_15 $$ URI templateURI = URI.createURI(jetEmitter.templateURIPath[0]) --> Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) [FD]
Line_17 $$ if (templateURI.isPlatformResource()) --> Line_19 $$ if (JETNature.getRuntime(project) != null) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_19 $$ if (JETNature.getRuntime(project) != null) [FD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_20 $$ List<URL> urls = new ArrayList<URL>() [CD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_21 $$ IJavaProject javaProject = JavaCore.create(project) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_21 $$ IJavaProject javaProject = JavaCore.create(project) [FD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [CD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_22 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_23 $$ for (IClasspathEntry classpathEntry : javaProject.getResolvedClasspath(true)) [FD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0)) [FD]
Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0)) --> Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject) [FD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_26 $$ IProject otherProject = workspace.getRoot().getProject(projectPath.segment(0)) --> Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_27 $$ IJavaProject otherJavaProject = JavaCore.create(otherProject) --> Line_28 $$ urls.add(new File(otherProject.getLocation() + "/" + otherJavaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_19 $$ if (JETNature.getRuntime(project) != null) --> Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) [FD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_34 $$ return super.loadClass(className) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_36 $$ return jetEmitter.classLoader.loadClass(className) [FD]
Line_17 $$ if (templateURI.isPlatformResource()) --> Line_41 $$ if (templateURI.isPlatformPlugin()) [CD]
Line_15 $$ URI templateURI = URI.createURI(jetEmitter.templateURIPath[0]) --> Line_41 $$ if (templateURI.isPlatformPlugin()) [FD]
Line_41 $$ if (templateURI.isPlatformPlugin()) --> Line_42 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1)) [CD]
Line_15 $$ URI templateURI = URI.createURI(jetEmitter.templateURIPath[0]) --> Line_42 $$ final Bundle bundle = Platform.getBundle(templateURI.segment(1)) [FD]
Line_41 $$ if (templateURI.isPlatformPlugin()) --> Line_43 $$ if (bundle != null) [CD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_47 $$ return bundle.loadClass(className) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_49 $$ return super.loadClass(className) [FD]
Line_14 $$ if (jetEmitter.templateURIPath != null) --> Line_55 $$ if (theClassLoader != null) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_55 $$ if (theClassLoader != null) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_55 $$ if (theClassLoader != null) [FD]
Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName() --> Line_56 $$ String className = (packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName() [FD]
Line_55 $$ if (theClassLoader != null) --> Line_57 $$ if (className.endsWith("_")) [CD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_57 $$ if (className.endsWith("_")) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_58 $$ className = className.substring(0, className.length() - 1) [FD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_61 $$ Class<?> theClass = theClassLoader.loadClass(className) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_61 $$ Class<?> theClass = theClassLoader.loadClass(className) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_64 $$ theOtherClass = jetEmitter.classLoader.loadClass(className) [FD]
Line_67 $$ if (theClass != theOtherClass) --> Line_68 $$ String methodName = jetCompiler.getSkeleton().getMethodName() [CD]
Line_67 $$ if (theClass != theOtherClass) --> Line_69 $$ Method[] methods = theClass.getDeclaredMethods() [CD]
Line_67 $$ if (theClass != theOtherClass) --> Line_70 $$ for (int i = 0; i < methods.length; ++i) [CD]
Line_70 $$ for (int i = 0; i < methods.length; ++i) --> Line_71 $$ if (methods[i].getName().equals(methodName)) [CD]
Line_71 $$ if (methods[i].getName().equals(methodName)) --> Line_72 $$ jetEmitter.setMethod(methods[i]) [CD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_72 $$ jetEmitter.setMethod(methods[i]) [FD]
Line_67 $$ if (theClass != theOtherClass) --> Line_76 $$ return [CD]
Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()) --> Line_85 $$ if (!javaModel.isOpen()) [FD]
Line_85 $$ if (!javaModel.isOpen()) --> Line_86 $$ javaModel.open(new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_7 $$ IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()) --> Line_86 $$ javaModel.open(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_85 $$ if (!javaModel.isOpen()) --> Line_88 $$ progressMonitor.worked(1) [CD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_88 $$ progressMonitor.worked(1) [FD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_90 $$ final IProject project = workspace.getRoot().getProject(jetEmitter.getProjectName()) [FD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_90 $$ final IProject project = workspace.getRoot().getProject(jetEmitter.getProjectName()) [FD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_91 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETPreparingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_91 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETPreparingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_93 $$ if (!project.exists()) [FD]
Line_93 $$ if (!project.exists()) --> Line_94 $$ progressMonitor.subTask("JET creating project " + project.getName()) [CD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_94 $$ progressMonitor.subTask("JET creating project " + project.getName()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_94 $$ progressMonitor.subTask("JET creating project " + project.getName()) [FD]
Line_93 $$ if (!project.exists()) --> Line_95 $$ project.create(new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_95 $$ project.create(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_93 $$ if (!project.exists()) --> Line_96 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [CD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_96 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_96 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreatingProject_message", new Object[] [FD]
Line_93 $$ if (!project.exists()) --> Line_97 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) [CD]
Line_6 $$ final IWorkspace workspace = ResourcesPlugin.getWorkspace() --> Line_97 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_97 $$ IProjectDescription description = workspace.newProjectDescription(project.getName()) [FD]
Line_93 $$ if (!project.exists()) --> Line_98 $$ description.setNatureIds(new String[] [CD]
Line_93 $$ if (!project.exists()) --> Line_99 $$ description.setLocation(null) [CD]
Line_93 $$ if (!project.exists()) --> Line_100 $$ project.open(new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_100 $$ project.open(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_93 $$ if (!project.exists()) --> Line_101 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_101 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_93 $$ if (!project.exists()) --> Line_102 $$ javaProject = JavaCore.create(project) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_102 $$ javaProject = JavaCore.create(project) [FD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_103 $$ for (Map.Entry<String, String> option : jetEmitter.getJavaOptions().entrySet()) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_104 $$ javaProject.setOption(option.getKey(), option.getValue()) [FD]
Line_93 $$ if (!project.exists()) --> Line_107 $$ project.open(new SubProgressMonitor(progressMonitor, 5)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_107 $$ project.open(new SubProgressMonitor(progressMonitor, 5)) [FD]
Line_93 $$ if (!project.exists()) --> Line_108 $$ IProjectDescription description = project.getDescription() [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_108 $$ IProjectDescription description = project.getDescription() [FD]
Line_93 $$ if (!project.exists()) --> Line_109 $$ description.setNatureIds(new String[] [CD]
Line_93 $$ if (!project.exists()) --> Line_110 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_110 $$ project.setDescription(description, new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_93 $$ if (!project.exists()) --> Line_111 $$ javaProject = JavaCore.create(project) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_111 $$ javaProject = JavaCore.create(project) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_113 $$ List<IClasspathEntry> classpath = new UniqueEList<IClasspathEntry>(Arrays.asList(javaProject.getRawClasspath())) [FD]
Line_70 $$ for (int i = 0; i < methods.length; ++i) --> Line_114 $$ for (int i = 0, len = classpath.size(); i < len; i++) [FD]
Line_70 $$ for (int i = 0; i < methods.length; ++i) --> Line_115 $$ IClasspathEntry entry = classpath.get(i) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_116 $$ if (entry.getEntryKind() == IClasspathEntry.CPE_SOURCE && ("/" + project.getName()).equals(entry.getPath().toString())) [FD]
Line_70 $$ for (int i = 0; i < methods.length; ++i) --> Line_117 $$ classpath.remove(i) [FD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_120 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETInitializingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_120 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETInitializingProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_121 $$ IClasspathEntry classpathEntry = JavaCore.newSourceEntry(new Path("/" + project.getName() + "/src")) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_126 $$ IFolder sourceFolder = project.getFolder(new Path("src")) [FD]
Line_127 $$ if (!sourceFolder.exists()) --> Line_128 $$ sourceFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_130 $$ IFolder runtimeFolder = project.getFolder(new Path("bin")) [FD]
Line_131 $$ if (!runtimeFolder.exists()) --> Line_132 $$ runtimeFolder.create(false, true, new SubProgressMonitor(progressMonitor, 1)) [CD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_134 $$ javaProject.setRawClasspath(classpath.toArray(new IClasspathEntry[classpath.size()]), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_135 $$ javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_135 $$ javaProject.setOutputLocation(new Path("/" + project.getName() + "/bin"), new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_136 $$ javaProject.close() [FD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_137 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETOpeningJavaProject_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_137 $$ progressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETOpeningJavaProject_message", new Object[] [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_138 $$ javaProject.open(new SubProgressMonitor(progressMonitor, 1)) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_139 $$ IPackageFragmentRoot[] packageFragmentRoots = javaProject.getPackageFragmentRoots() [FD]
Line_141 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) --> Line_142 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j] [CD]
Line_141 $$ for (int j = 0; j < packageFragmentRoots.length; ++j) --> Line_143 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) [CD]
Line_142 $$ IPackageFragmentRoot packageFragmentRoot = packageFragmentRoots[j] --> Line_143 $$ if (packageFragmentRoot.getKind() == IPackageFragmentRoot.K_SOURCE) [FD]
Line_153 $$ while (stringTokenizer.hasMoreElements()) --> Line_154 $$ String folderName = stringTokenizer.nextToken() [CD]
Line_153 $$ while (stringTokenizer.hasMoreElements()) --> Line_155 $$ sourceContainer = sourceContainer.getFolder(new Path(folderName)) [CD]
Line_153 $$ while (stringTokenizer.hasMoreElements()) --> Line_156 $$ if (!sourceContainer.exists()) [CD]
Line_156 $$ if (!sourceContainer.exists()) --> Line_157 $$ ((IFolder) sourceContainer).create(false, true, new SubProgressMonitor(subProgressMonitor, 1)) [CD]
Line_161 $$ if (!targetFile.exists()) --> Line_162 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETCreating_message", new Object[] [CD]
Line_161 $$ if (!targetFile.exists()) --> Line_163 $$ targetFile.create(contents, true, new SubProgressMonitor(subProgressMonitor, 1)) [CD]
Line_161 $$ if (!targetFile.exists()) --> Line_165 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETUpdating_message", new Object[] [CD]
Line_161 $$ if (!targetFile.exists()) --> Line_166 $$ targetFile.setContents(contents, true, true, new SubProgressMonitor(subProgressMonitor, 1)) [CD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_168 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETBuilding_message", new Object[] [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_169 $$ project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, new SubProgressMonitor(subProgressMonitor, 1)) [FD]
Line_70 $$ for (int i = 0; i < methods.length; ++i) --> Line_172 $$ for (int i = 0; i < markers.length; ++i) [FD]
Line_172 $$ for (int i = 0; i < markers.length; ++i) --> Line_173 $$ IMarker marker = markers[i] [CD]
Line_172 $$ for (int i = 0; i < markers.length; ++i) --> Line_174 $$ if (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO) == IMarker.SEVERITY_ERROR) [CD]
Line_173 $$ IMarker marker = markers[i] --> Line_174 $$ if (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO) == IMarker.SEVERITY_ERROR) [FD]
Line_174 $$ if (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO) == IMarker.SEVERITY_ERROR) --> Line_176 $$ subProgressMonitor.subTask(marker.getAttribute(IMarker.MESSAGE) + " : " + (CodeGenPlugin.getPlugin().getString("jet.mark.file.line", new Object[] [CD]
Line_173 $$ IMarker marker = markers[i] --> Line_176 $$ subProgressMonitor.subTask(marker.getAttribute(IMarker.MESSAGE) + " : " + (CodeGenPlugin.getPlugin().getString("jet.mark.file.line", new Object[] [FD]
Line_179 $$ if (!errors) --> Line_180 $$ subProgressMonitor.subTask(CodeGenPlugin.getPlugin().getString("_UI_JETLoadingClass_message", new Object[] [CD]
Line_179 $$ if (!errors) --> Line_182 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [CD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_182 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_18 $$ IProject project = workspace.getRoot().getProject(templateURI.segment(1)) --> Line_182 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_21 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_182 $$ urls.add(new File(project.getLocation() + "/" + javaProject.getOutputLocation().removeFirstSegments(1) + "/").toURL()) [FD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_184 $$ for (IClasspathEntry jetEmitterClasspathEntry : jetEmitter.getClasspathEntries()) [FD]
Line_190 $$ if (bundle != null) --> Line_191 $$ bundles.add(bundle) [CD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_197 $$ urls.add(new URL("platform:/resource" + jetEmitterClasspathEntry.getPath() + "/")) [FD]
Line_20 $$ List<URL> urls = new ArrayList<URL>() --> Line_199 $$ URLClassLoader theClassLoader = new URLClassLoader(urls.toArray(new URL[0]), jetEmitter.classLoader) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_202 $$ return super.loadClass(className) [FD]
Line_204 $$ for (Bundle bundle : bundles) --> Line_206 $$ return bundle.loadClass(className) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_206 $$ return bundle.loadClass(className) [FD]
Line_179 $$ if (!errors) --> Line_214 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [CD]
Line_16 $$ URLClassLoader theClassLoader = null --> Line_214 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_31 $$ theClassLoader = new URLClassLoader(urls.toArray(new URL[0])) --> Line_214 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_13 $$ String packageName = jetCompiler.getSkeleton().getPackageName() --> Line_214 $$ Class<?> theClass = theClassLoader.loadClass((packageName.length() == 0 ? "" : packageName + ".") + jetCompiler.getSkeleton().getClassName()) [FD]
Line_179 $$ if (!errors) --> Line_215 $$ String methodName = jetCompiler.getSkeleton().getMethodName() [CD]
Line_179 $$ if (!errors) --> Line_216 $$ Method[] methods = theClass.getDeclaredMethods() [CD]
Line_179 $$ if (!errors) --> Line_217 $$ for (int i = 0; i < methods.length; ++i) [CD]
Line_172 $$ for (int i = 0; i < markers.length; ++i) --> Line_217 $$ for (int i = 0; i < methods.length; ++i) [FD]
Line_70 $$ for (int i = 0; i < methods.length; ++i) --> Line_217 $$ for (int i = 0; i < methods.length; ++i) [FD]
Line_217 $$ for (int i = 0; i < methods.length; ++i) --> Line_218 $$ if (methods[i].getName().equals(methodName)) [CD]
Line_218 $$ if (methods[i].getName().equals(methodName)) --> Line_219 $$ jetEmitter.setMethod(methods[i]) [CD]
Line_2 $$ public static void initialize(Monitor monitor, final JETEmitter jetEmitter) throws JETException --> Line_219 $$ jetEmitter.setMethod(methods[i]) [FD]
Line_3 $$ IProgressMonitor progressMonitor = BasicMonitor.toIProgressMonitor(monitor) --> Line_230 $$ progressMonitor.done() [FD]
