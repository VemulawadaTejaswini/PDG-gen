Line_2 $$ void sort(int a[]) throws Exception --> Line_3 $$ int j [CD]
Line_2 $$ void sort(int a[]) throws Exception --> Line_4 $$ int limit = a.length [CD]
Line_2 $$ void sort(int a[]) throws Exception --> Line_5 $$ int st = -1 [CD]
Line_2 $$ void sort(int a[]) throws Exception --> Line_6 $$ while (st < limit) [CD]
Line_5 $$ int st = -1 --> Line_6 $$ while (st < limit) [FD]
Line_4 $$ int limit = a.length --> Line_6 $$ while (st < limit) [FD]
Line_6 $$ while (st < limit) --> Line_7 $$ boolean flipped = false [CD]
Line_6 $$ while (st < limit) --> Line_8 $$ st++ [CD]
Line_5 $$ int st = -1 --> Line_8 $$ st++ [FD]
Line_6 $$ while (st < limit) --> Line_9 $$ limit-- [CD]
Line_4 $$ int limit = a.length --> Line_9 $$ limit-- [FD]
Line_6 $$ while (st < limit) --> Line_10 $$ for (j = st; j < limit; j++) [CD]
Line_3 $$ int j --> Line_10 $$ for (j = st; j < limit; j++) [FD]
Line_4 $$ int limit = a.length --> Line_10 $$ for (j = st; j < limit; j++) [FD]
Line_5 $$ int st = -1 --> Line_10 $$ for (j = st; j < limit; j++) [FD]
Line_10 $$ for (j = st; j < limit; j++) --> Line_11 $$ if (stopRequested) [CD]
Line_11 $$ if (stopRequested) --> Line_12 $$ return [CD]
Line_10 $$ for (j = st; j < limit; j++) --> Line_14 $$ if (a[j] > a[j + 1]) [CD]
Line_14 $$ if (a[j] > a[j + 1]) --> Line_15 $$ int T = a[j] [CD]
Line_14 $$ if (a[j] > a[j + 1]) --> Line_16 $$ a[j] = a[j + 1] [CD]
Line_14 $$ if (a[j] > a[j + 1]) --> Line_17 $$ a[j + 1] = T [CD]
Line_15 $$ int T = a[j] --> Line_17 $$ a[j + 1] = T [FD]
Line_14 $$ if (a[j] > a[j + 1]) --> Line_18 $$ flipped = true [CD]
Line_7 $$ boolean flipped = false --> Line_18 $$ flipped = true [FD]
Line_14 $$ if (a[j] > a[j + 1]) --> Line_19 $$ pause(st, limit) [CD]
Line_5 $$ int st = -1 --> Line_19 $$ pause(st, limit) [FD]
Line_4 $$ int limit = a.length --> Line_19 $$ pause(st, limit) [FD]
Line_6 $$ while (st < limit) --> Line_22 $$ if (!flipped) [CD]
Line_18 $$ flipped = true --> Line_22 $$ if (!flipped) [FD]
Line_7 $$ boolean flipped = false --> Line_22 $$ if (!flipped) [FD]
Line_22 $$ if (!flipped) --> Line_23 $$ return [CD]
Line_6 $$ while (st < limit) --> Line_25 $$ for (j = limit; --j >= st; ) [CD]
Line_5 $$ int st = -1 --> Line_25 $$ for (j = limit; --j >= st; ) [FD]
Line_10 $$ for (j = st; j < limit; j++) --> Line_25 $$ for (j = limit; --j >= st; ) [FD]
Line_3 $$ int j --> Line_25 $$ for (j = limit; --j >= st; ) [FD]
Line_4 $$ int limit = a.length --> Line_25 $$ for (j = limit; --j >= st; ) [FD]
Line_25 $$ for (j = limit; --j >= st; ) --> Line_26 $$ if (stopRequested) [CD]
Line_26 $$ if (stopRequested) --> Line_27 $$ return [CD]
Line_25 $$ for (j = limit; --j >= st; ) --> Line_29 $$ if (a[j] > a[j + 1]) [CD]
Line_29 $$ if (a[j] > a[j + 1]) --> Line_30 $$ int T = a[j] [CD]
Line_29 $$ if (a[j] > a[j + 1]) --> Line_31 $$ a[j] = a[j + 1] [CD]
Line_29 $$ if (a[j] > a[j + 1]) --> Line_32 $$ a[j + 1] = T [CD]
Line_30 $$ int T = a[j] --> Line_32 $$ a[j + 1] = T [FD]
Line_15 $$ int T = a[j] --> Line_32 $$ a[j + 1] = T [FD]
Line_29 $$ if (a[j] > a[j + 1]) --> Line_33 $$ flipped = true [CD]
Line_18 $$ flipped = true --> Line_33 $$ flipped = true [FD]
Line_7 $$ boolean flipped = false --> Line_33 $$ flipped = true [FD]
Line_29 $$ if (a[j] > a[j + 1]) --> Line_34 $$ pause(st, limit) [CD]
Line_5 $$ int st = -1 --> Line_34 $$ pause(st, limit) [FD]
Line_4 $$ int limit = a.length --> Line_34 $$ pause(st, limit) [FD]
Line_6 $$ while (st < limit) --> Line_37 $$ if (!flipped) [CD]
Line_33 $$ flipped = true --> Line_37 $$ if (!flipped) [FD]
Line_18 $$ flipped = true --> Line_37 $$ if (!flipped) [FD]
Line_7 $$ boolean flipped = false --> Line_37 $$ if (!flipped) [FD]
Line_37 $$ if (!flipped) --> Line_38 $$ return [CD]
Line_2 $$ void sort(int a[]) throws Exception --> Line_41 $$ pause(st, limit) [CD]
Line_5 $$ int st = -1 --> Line_41 $$ pause(st, limit) [FD]
Line_4 $$ int limit = a.length --> Line_41 $$ pause(st, limit) [FD]
