Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_3 $$ Connection conn = null [CD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_4 $$ PreparedStatement ps = null [CD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_5 $$ Date fechaSystem = new Date() [CD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_6 $$ DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd") [CD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_7 $$ DateFormat hhmmss = new SimpleDateFormat("HHmmss") [CD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_8 $$ DateFormat sss = new SimpleDateFormat("S") [CD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_9 $$ String ss = sss.format(fechaSystem) [CD]
Line_8 $$ DateFormat sss = new SimpleDateFormat("S") --> Line_9 $$ String ss = sss.format(fechaSystem) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_9 $$ String ss = sss.format(fechaSystem) [FD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_10 $$ if (ss.length() > 2) [CD]
Line_9 $$ String ss = sss.format(fechaSystem) --> Line_10 $$ if (ss.length() > 2) [FD]
Line_10 $$ if (ss.length() > 2) --> Line_11 $$ ss = ss.substring(0, 2) [CD]
Line_9 $$ String ss = sss.format(fechaSystem) --> Line_11 $$ ss = ss.substring(0, 2) [FD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_13 $$ boolean visado = false [CD]
Line_3 $$ Connection conn = null --> Line_15 $$ conn = ToolsBD.getConn() [FD]
Line_3 $$ Connection conn = null --> Line_16 $$ conn.setAutoCommit(false) [FD]
Line_15 $$ conn = ToolsBD.getConn() --> Line_16 $$ conn.setAutoCommit(false) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_18 $$ ps = conn.prepareStatement(sentenciaSql) [FD]
Line_3 $$ Connection conn = null --> Line_18 $$ ps = conn.prepareStatement(sentenciaSql) [FD]
Line_15 $$ conn = ToolsBD.getConn() --> Line_18 $$ ps = conn.prepareStatement(sentenciaSql) [FD]
Line_17 $$ String sentenciaSql = "UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?" + ((hayVisadoExtracto) ? ", FZJIEXTR=?" : "") + ((hayVisadoRemitente) ? ", FZJIREMI=?" : "") + " WHERE FZJCENSA='E' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?" --> Line_18 $$ ps = conn.prepareStatement(sentenciaSql) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_19 $$ ps.setString(1, usuarioVisado) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_19 $$ ps.setString(1, usuarioVisado) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_20 $$ ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem))) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_20 $$ ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem))) [FD]
Line_6 $$ DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd") --> Line_20 $$ ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem))) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_20 $$ ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem))) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_21 $$ ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_21 $$ ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_7 $$ DateFormat hhmmss = new SimpleDateFormat("HHmmss") --> Line_21 $$ ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_21 $$ ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_23 $$ if (hayVisadoExtracto) --> Line_24 $$ ps.setString(contador++, "X") [CD]
Line_4 $$ PreparedStatement ps = null --> Line_24 $$ ps.setString(contador++, "X") [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_24 $$ ps.setString(contador++, "X") [FD]
Line_22 $$ int contador = 4 --> Line_24 $$ ps.setString(contador++, "X") [FD]
Line_26 $$ if (hayVisadoRemitente) --> Line_27 $$ ps.setString(contador++, "X") [CD]
Line_4 $$ PreparedStatement ps = null --> Line_27 $$ ps.setString(contador++, "X") [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_27 $$ ps.setString(contador++, "X") [FD]
Line_22 $$ int contador = 4 --> Line_27 $$ ps.setString(contador++, "X") [FD]
Line_4 $$ PreparedStatement ps = null --> Line_29 $$ ps.setInt(contador++, oficina) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_29 $$ ps.setInt(contador++, oficina) [FD]
Line_22 $$ int contador = 4 --> Line_29 $$ ps.setInt(contador++, oficina) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_30 $$ ps.setInt(contador++, numeroRegistro) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_30 $$ ps.setInt(contador++, numeroRegistro) [FD]
Line_22 $$ int contador = 4 --> Line_30 $$ ps.setInt(contador++, numeroRegistro) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_31 $$ ps.setInt(contador++, anoEntrada) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_31 $$ ps.setInt(contador++, anoEntrada) [FD]
Line_22 $$ int contador = 4 --> Line_31 $$ ps.setInt(contador++, anoEntrada) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_32 $$ ps.setString(contador++, fechaModificacion) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_32 $$ ps.setString(contador++, fechaModificacion) [FD]
Line_22 $$ int contador = 4 --> Line_32 $$ ps.setString(contador++, fechaModificacion) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_33 $$ ps.setString(contador++, horaModificacion) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_33 $$ ps.setString(contador++, horaModificacion) [FD]
Line_22 $$ int contador = 4 --> Line_33 $$ ps.setString(contador++, horaModificacion) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_34 $$ int registrosAfectados = ps.executeUpdate() [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_34 $$ int registrosAfectados = ps.executeUpdate() [FD]
Line_35 $$ if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) --> Line_36 $$ visado = true [CD]
Line_13 $$ boolean visado = false --> Line_36 $$ visado = true [FD]
Line_38 $$ if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) --> Line_39 $$ boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [CD]
Line_3 $$ Connection conn = null --> Line_39 $$ boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_15 $$ conn = ToolsBD.getConn() --> Line_39 $$ boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_6 $$ DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd") --> Line_39 $$ boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_39 $$ boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_7 $$ DateFormat hhmmss = new SimpleDateFormat("HHmmss") --> Line_39 $$ boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss)) [FD]
Line_38 $$ if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) --> Line_40 $$ if (generado) [CD]
Line_40 $$ if (generado) --> Line_41 $$ visado = actualizarBZENTRA(conn) [CD]
Line_13 $$ boolean visado = false --> Line_41 $$ visado = actualizarBZENTRA(conn) [FD]
Line_36 $$ visado = true --> Line_41 $$ visado = actualizarBZENTRA(conn) [FD]
Line_3 $$ Connection conn = null --> Line_41 $$ visado = actualizarBZENTRA(conn) [FD]
Line_15 $$ conn = ToolsBD.getConn() --> Line_41 $$ visado = actualizarBZENTRA(conn) [FD]
Line_38 $$ if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) --> Line_43 $$ String rem = "" [CD]
Line_38 $$ if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) --> Line_44 $$ String com = "" [CD]
Line_38 $$ if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) --> Line_45 $$ if (hayVisadoRemitente) [CD]
Line_45 $$ if (hayVisadoRemitente) --> Line_46 $$ if (!remitente.trim().equals("")) [CD]
Line_46 $$ if (!remitente.trim().equals("")) --> Line_47 $$ rem = remitente [CD]
Line_43 $$ String rem = "" --> Line_47 $$ rem = remitente [FD]
Line_46 $$ if (!remitente.trim().equals("")) --> Line_49 $$ javax.naming.InitialContext contexto = new javax.naming.InitialContext() [CD]
Line_46 $$ if (!remitente.trim().equals("")) --> Line_50 $$ Object ref = contexto.lookup("es.caib.regweb.ValoresHome") [CD]
Line_49 $$ javax.naming.InitialContext contexto = new javax.naming.InitialContext() --> Line_50 $$ Object ref = contexto.lookup("es.caib.regweb.ValoresHome") [FD]
Line_46 $$ if (!remitente.trim().equals("")) --> Line_51 $$ ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class) [CD]
Line_50 $$ Object ref = contexto.lookup("es.caib.regweb.ValoresHome") --> Line_51 $$ ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class) [FD]
Line_46 $$ if (!remitente.trim().equals("")) --> Line_52 $$ Valores valor = home.create() [CD]
Line_46 $$ if (!remitente.trim().equals("")) --> Line_53 $$ rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "") [CD]
Line_43 $$ String rem = "" --> Line_53 $$ rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "") [FD]
Line_47 $$ rem = remitente --> Line_53 $$ rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "") [FD]
Line_52 $$ Valores valor = home.create() --> Line_53 $$ rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "") [FD]
Line_46 $$ if (!remitente.trim().equals("")) --> Line_54 $$ valor.remove() [CD]
Line_52 $$ Valores valor = home.create() --> Line_54 $$ valor.remove() [FD]
Line_45 $$ if (hayVisadoRemitente) --> Line_57 $$ if (!altres.trim().equals("")) [CD]
Line_57 $$ if (!altres.trim().equals("")) --> Line_58 $$ rem = remitente [CD]
Line_43 $$ String rem = "" --> Line_58 $$ rem = remitente [FD]
Line_47 $$ rem = remitente --> Line_58 $$ rem = remitente [FD]
Line_53 $$ rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "") --> Line_58 $$ rem = remitente [FD]
Line_57 $$ if (!altres.trim().equals("")) --> Line_61 $$ Object ref = contexto.lookup("es.caib.regweb.ValoresHome") [CD]
Line_49 $$ javax.naming.InitialContext contexto = new javax.naming.InitialContext() --> Line_61 $$ Object ref = contexto.lookup("es.caib.regweb.ValoresHome") [FD]
Line_50 $$ Object ref = contexto.lookup("es.caib.regweb.ValoresHome") --> Line_62 $$ ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class) [FD]
Line_57 $$ if (!altres.trim().equals("")) --> Line_63 $$ Valores valor = home.create() [CD]
Line_57 $$ if (!altres.trim().equals("")) --> Line_64 $$ rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "") [CD]
Line_43 $$ String rem = "" --> Line_64 $$ rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "") [FD]
Line_47 $$ rem = remitente --> Line_64 $$ rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "") [FD]
Line_53 $$ rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + "") --> Line_64 $$ rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "") [FD]
Line_58 $$ rem = remitente --> Line_64 $$ rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "") [FD]
Line_52 $$ Valores valor = home.create() --> Line_64 $$ rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + "") [FD]
Line_57 $$ if (!altres.trim().equals("")) --> Line_65 $$ valor.remove() [CD]
Line_52 $$ Valores valor = home.create() --> Line_65 $$ valor.remove() [FD]
Line_38 $$ if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) --> Line_68 $$ if (hayVisadoExtracto) [CD]
Line_68 $$ if (hayVisadoExtracto) --> Line_69 $$ com = extracto [CD]
Line_44 $$ String com = "" --> Line_69 $$ com = extracto [FD]
Line_68 $$ if (hayVisadoExtracto) --> Line_71 $$ com = comentario [CD]
Line_44 $$ String com = "" --> Line_71 $$ com = comentario [FD]
Line_69 $$ com = extracto --> Line_71 $$ com = comentario [FD]
Line_74 $$ Class t = Class.forName("es.caib.regweb.module.PluginHook") --> Line_77 $$ java.lang.reflect.Method metodo = t.getMethod("entrada", partypes) [FD]
Line_75 $$ Class[] partypes = --> Line_77 $$ java.lang.reflect.Method metodo = t.getMethod("entrada", partypes) [FD]
Line_77 $$ java.lang.reflect.Method metodo = t.getMethod("entrada", partypes) --> Line_78 $$ metodo.invoke(null, params) [FD]
Line_76 $$ Object[] params = --> Line_78 $$ metodo.invoke(null, params) [FD]
Line_3 $$ Connection conn = null --> Line_90 $$ conn.commit() [FD]
Line_15 $$ conn = ToolsBD.getConn() --> Line_90 $$ conn.commit() [FD]
Line_7 $$ DateFormat hhmmss = new SimpleDateFormat("HHmmss") --> Line_91 $$ int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_91 $$ int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss) [FD]
Line_8 $$ DateFormat sss = new SimpleDateFormat("S") --> Line_92 $$ String Stringsss = sss.format(fechaSystem) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_92 $$ String Stringsss = sss.format(fechaSystem) [FD]
Line_92 $$ String Stringsss = sss.format(fechaSystem) --> Line_93 $$ switch(Stringsss.length()) [FD]
Line_92 $$ String Stringsss = sss.format(fechaSystem) --> Line_95 $$ Stringsss = "00" + Stringsss [FD]
Line_92 $$ String Stringsss = sss.format(fechaSystem) --> Line_98 $$ Stringsss = "0" + Stringsss [FD]
Line_95 $$ Stringsss = "00" + Stringsss --> Line_98 $$ Stringsss = "0" + Stringsss [FD]
Line_7 $$ DateFormat hhmmss = new SimpleDateFormat("HHmmss") --> Line_101 $$ int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_101 $$ int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss) [FD]
Line_6 $$ DateFormat aaaammdd = new SimpleDateFormat("yyyyMMdd") --> Line_102 $$ int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem)) [FD]
Line_5 $$ Date fechaSystem = new Date() --> Line_102 $$ int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem)) [FD]
Line_102 $$ int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem)) --> Line_103 $$ logLopdBZMODIF("UPDATE", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'E', numeroRegistro, anoEntrada, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion)) [FD]
Line_101 $$ int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss) --> Line_103 $$ logLopdBZMODIF("UPDATE", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'E', numeroRegistro, anoEntrada, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion)) [FD]
Line_13 $$ boolean visado = false --> Line_107 $$ visado = false [FD]
Line_36 $$ visado = true --> Line_107 $$ visado = false [FD]
Line_41 $$ visado = actualizarBZENTRA(conn) --> Line_107 $$ visado = false [FD]
Line_3 $$ Connection conn = null --> Line_109 $$ System.out.println("ERROR: No es pot fer rollback sense connexió!") [FD]
Line_15 $$ conn = ToolsBD.getConn() --> Line_109 $$ System.out.println("ERROR: No es pot fer rollback sense connexió!") [FD]
Line_3 $$ Connection conn = null --> Line_115 $$ ToolsBD.closeConn(conn, ps, null) [FD]
Line_15 $$ conn = ToolsBD.getConn() --> Line_115 $$ ToolsBD.closeConn(conn, ps, null) [FD]
Line_4 $$ PreparedStatement ps = null --> Line_115 $$ ToolsBD.closeConn(conn, ps, null) [FD]
Line_18 $$ ps = conn.prepareStatement(sentenciaSql) --> Line_115 $$ ToolsBD.closeConn(conn, ps, null) [FD]
Line_2 $$ public boolean visar() throws SQLException, ClassNotFoundException, Exception --> Line_117 $$ return visado [CD]
