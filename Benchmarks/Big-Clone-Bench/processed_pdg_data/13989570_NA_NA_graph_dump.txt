Line_2 $$ public synchronized long nextValue(final Session session) --> Line_3 $$ if (sequence < seqLimit) [CD]
Line_3 $$ if (sequence < seqLimit) --> Line_4 $$ return ++sequence [CD]
Line_3 $$ if (sequence < seqLimit) --> Line_6 $$ final MetaDatabase db = MetaTable.DATABASE.of(table) [CD]
Line_3 $$ if (sequence < seqLimit) --> Line_7 $$ Connection connection = null [CD]
Line_3 $$ if (sequence < seqLimit) --> Line_8 $$ ResultSet res = null [CD]
Line_3 $$ if (sequence < seqLimit) --> Line_9 $$ String sql = null [CD]
Line_3 $$ if (sequence < seqLimit) --> Line_10 $$ PreparedStatement statement = null [CD]
Line_3 $$ if (sequence < seqLimit) --> Line_11 $$ StringBuilder out = new StringBuilder(64) [CD]
Line_7 $$ Connection connection = null --> Line_13 $$ connection = session.getSeqConnection(db) [FD]
Line_2 $$ public synchronized long nextValue(final Session session) --> Line_13 $$ connection = session.getSeqConnection(db) [FD]
Line_6 $$ final MetaDatabase db = MetaTable.DATABASE.of(table) --> Line_13 $$ connection = session.getSeqConnection(db) [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_14 $$ String tableName = db.getDialect().printFullTableName(getTable(), true, out).toString() [FD]
Line_6 $$ final MetaDatabase db = MetaTable.DATABASE.of(table) --> Line_14 $$ String tableName = db.getDialect().printFullTableName(getTable(), true, out).toString() [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_15 $$ out.setLength(0) [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_16 $$ out.setLength(0) [FD]
Line_9 $$ String sql = null --> Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() [FD]
Line_6 $$ final MetaDatabase db = MetaTable.DATABASE.of(table) --> Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() [FD]
Line_18 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_19 $$ LOGGER.log(Level.INFO, sql + "; [" + tableName + ']') [CD]
Line_10 $$ PreparedStatement statement = null --> Line_21 $$ statement = connection.prepareStatement(sql) [FD]
Line_7 $$ Connection connection = null --> Line_21 $$ statement = connection.prepareStatement(sql) [FD]
Line_13 $$ connection = session.getSeqConnection(db) --> Line_21 $$ statement = connection.prepareStatement(sql) [FD]
Line_9 $$ String sql = null --> Line_21 $$ statement = connection.prepareStatement(sql) [FD]
Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() --> Line_21 $$ statement = connection.prepareStatement(sql) [FD]
Line_10 $$ PreparedStatement statement = null --> Line_22 $$ statement.setString(1, tableName) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_22 $$ statement.setString(1, tableName) [FD]
Line_14 $$ String tableName = db.getDialect().printFullTableName(getTable(), true, out).toString() --> Line_22 $$ statement.setString(1, tableName) [FD]
Line_10 $$ PreparedStatement statement = null --> Line_23 $$ int i = statement.executeUpdate() [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_23 $$ int i = statement.executeUpdate() [FD]
Line_23 $$ int i = statement.executeUpdate() --> Line_24 $$ if (i == 0) [FD]
Line_24 $$ if (i == 0) --> Line_25 $$ out.setLength(0) [CD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_25 $$ out.setLength(0) [FD]
Line_24 $$ if (i == 0) --> Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() [CD]
Line_9 $$ String sql = null --> Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() [FD]
Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() --> Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() [FD]
Line_6 $$ final MetaDatabase db = MetaTable.DATABASE.of(table) --> Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() [FD]
Line_24 $$ if (i == 0) --> Line_27 $$ if (LOGGER.isLoggable(Level.INFO)) [CD]
Line_27 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_28 $$ LOGGER.log(Level.INFO, sql + "; [" + tableName + ']') [CD]
Line_24 $$ if (i == 0) --> Line_30 $$ statement = connection.prepareStatement(sql) [CD]
Line_10 $$ PreparedStatement statement = null --> Line_30 $$ statement = connection.prepareStatement(sql) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_30 $$ statement = connection.prepareStatement(sql) [FD]
Line_7 $$ Connection connection = null --> Line_30 $$ statement = connection.prepareStatement(sql) [FD]
Line_13 $$ connection = session.getSeqConnection(db) --> Line_30 $$ statement = connection.prepareStatement(sql) [FD]
Line_9 $$ String sql = null --> Line_30 $$ statement = connection.prepareStatement(sql) [FD]
Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() --> Line_30 $$ statement = connection.prepareStatement(sql) [FD]
Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() --> Line_30 $$ statement = connection.prepareStatement(sql) [FD]
Line_24 $$ if (i == 0) --> Line_31 $$ statement.setString(1, tableName) [CD]
Line_10 $$ PreparedStatement statement = null --> Line_31 $$ statement.setString(1, tableName) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_31 $$ statement.setString(1, tableName) [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_31 $$ statement.setString(1, tableName) [FD]
Line_14 $$ String tableName = db.getDialect().printFullTableName(getTable(), true, out).toString() --> Line_31 $$ statement.setString(1, tableName) [FD]
Line_24 $$ if (i == 0) --> Line_32 $$ statement.executeUpdate() [CD]
Line_10 $$ PreparedStatement statement = null --> Line_32 $$ statement.executeUpdate() [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_32 $$ statement.executeUpdate() [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_32 $$ statement.executeUpdate() [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_34 $$ out.setLength(0) [FD]
Line_9 $$ String sql = null --> Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() [FD]
Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() --> Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() [FD]
Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() --> Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() [FD]
Line_6 $$ final MetaDatabase db = MetaTable.DATABASE.of(table) --> Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() [FD]
Line_36 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_37 $$ LOGGER.log(Level.INFO, sql + "; [" + tableName + ']') [CD]
Line_10 $$ PreparedStatement statement = null --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_7 $$ Connection connection = null --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_13 $$ connection = session.getSeqConnection(db) --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_9 $$ String sql = null --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() --> Line_39 $$ statement = connection.prepareStatement(sql) [FD]
Line_10 $$ PreparedStatement statement = null --> Line_40 $$ statement.setString(1, tableName) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_40 $$ statement.setString(1, tableName) [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_40 $$ statement.setString(1, tableName) [FD]
Line_39 $$ statement = connection.prepareStatement(sql) --> Line_40 $$ statement.setString(1, tableName) [FD]
Line_14 $$ String tableName = db.getDialect().printFullTableName(getTable(), true, out).toString() --> Line_40 $$ statement.setString(1, tableName) [FD]
Line_8 $$ ResultSet res = null --> Line_41 $$ res = statement.executeQuery() [FD]
Line_10 $$ PreparedStatement statement = null --> Line_41 $$ res = statement.executeQuery() [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_41 $$ res = statement.executeQuery() [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_41 $$ res = statement.executeQuery() [FD]
Line_39 $$ statement = connection.prepareStatement(sql) --> Line_41 $$ res = statement.executeQuery() [FD]
Line_8 $$ ResultSet res = null --> Line_42 $$ res.next() [FD]
Line_41 $$ res = statement.executeQuery() --> Line_42 $$ res.next() [FD]
Line_8 $$ ResultSet res = null --> Line_43 $$ seqLimit = res.getLong(1) [FD]
Line_41 $$ res = statement.executeQuery() --> Line_43 $$ seqLimit = res.getLong(1) [FD]
Line_8 $$ ResultSet res = null --> Line_44 $$ int step = res.getInt(2) [FD]
Line_41 $$ res = statement.executeQuery() --> Line_44 $$ int step = res.getInt(2) [FD]
Line_8 $$ ResultSet res = null --> Line_45 $$ maxValue = res.getLong(3) [FD]
Line_41 $$ res = statement.executeQuery() --> Line_45 $$ maxValue = res.getLong(3) [FD]
Line_47 $$ if (maxValue != 0L) --> Line_48 $$ if (seqLimit > maxValue) [CD]
Line_48 $$ if (seqLimit > maxValue) --> Line_50 $$ if (sequence > maxValue) [CD]
Line_50 $$ if (sequence > maxValue) --> Line_51 $$ String msg = "The sequence '" + tableName + "' needs to raise the maximum value: " + maxValue [CD]
Line_48 $$ if (seqLimit > maxValue) --> Line_54 $$ statement.close() [CD]
Line_10 $$ PreparedStatement statement = null --> Line_54 $$ statement.close() [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_54 $$ statement.close() [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_54 $$ statement.close() [FD]
Line_39 $$ statement = connection.prepareStatement(sql) --> Line_54 $$ statement.close() [FD]
Line_48 $$ if (seqLimit > maxValue) --> Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() [CD]
Line_9 $$ String sql = null --> Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() [FD]
Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() --> Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() [FD]
Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() --> Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() [FD]
Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() --> Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() [FD]
Line_11 $$ StringBuilder out = new StringBuilder(64) --> Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() [FD]
Line_6 $$ final MetaDatabase db = MetaTable.DATABASE.of(table) --> Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() [FD]
Line_48 $$ if (seqLimit > maxValue) --> Line_56 $$ if (LOGGER.isLoggable(Level.INFO)) [CD]
Line_56 $$ if (LOGGER.isLoggable(Level.INFO)) --> Line_57 $$ LOGGER.log(Level.INFO, sql + "; [" + tableName + ']') [CD]
Line_48 $$ if (seqLimit > maxValue) --> Line_59 $$ statement = connection.prepareStatement(sql) [CD]
Line_10 $$ PreparedStatement statement = null --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_39 $$ statement = connection.prepareStatement(sql) --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_7 $$ Connection connection = null --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_13 $$ connection = session.getSeqConnection(db) --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_9 $$ String sql = null --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_17 $$ sql = db.getDialect().printSequenceNextValue(this, out).toString() --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_26 $$ sql = db.getDialect().printSequenceInit(this, out).toString() --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_35 $$ sql = db.getDialect().printSequenceCurrentValue(this, out).toString() --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_55 $$ sql = db.getDialect().printSetMaxSequence(this, out).toString() --> Line_59 $$ statement = connection.prepareStatement(sql) [FD]
Line_48 $$ if (seqLimit > maxValue) --> Line_60 $$ statement.setString(1, tableName) [CD]
Line_10 $$ PreparedStatement statement = null --> Line_60 $$ statement.setString(1, tableName) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_60 $$ statement.setString(1, tableName) [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_60 $$ statement.setString(1, tableName) [FD]
Line_39 $$ statement = connection.prepareStatement(sql) --> Line_60 $$ statement.setString(1, tableName) [FD]
Line_59 $$ statement = connection.prepareStatement(sql) --> Line_60 $$ statement.setString(1, tableName) [FD]
Line_14 $$ String tableName = db.getDialect().printFullTableName(getTable(), true, out).toString() --> Line_60 $$ statement.setString(1, tableName) [FD]
Line_48 $$ if (seqLimit > maxValue) --> Line_61 $$ statement.execute() [CD]
Line_10 $$ PreparedStatement statement = null --> Line_61 $$ statement.execute() [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_61 $$ statement.execute() [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_61 $$ statement.execute() [FD]
Line_39 $$ statement = connection.prepareStatement(sql) --> Line_61 $$ statement.execute() [FD]
Line_59 $$ statement = connection.prepareStatement(sql) --> Line_61 $$ statement.execute() [FD]
Line_47 $$ if (maxValue != 0L) --> Line_63 $$ if (maxValue > Long.MAX_VALUE - step) [CD]
Line_63 $$ if (maxValue > Long.MAX_VALUE - step) --> Line_65 $$ LOGGER.log(Level.WARNING, msg) [CD]
Line_51 $$ String msg = "The sequence '" + tableName + "' needs to raise the maximum value: " + maxValue --> Line_65 $$ LOGGER.log(Level.WARNING, msg) [FD]
Line_7 $$ Connection connection = null --> Line_68 $$ connection.commit() [FD]
Line_13 $$ connection = session.getSeqConnection(db) --> Line_68 $$ connection.commit() [FD]
Line_7 $$ Connection connection = null --> Line_70 $$ if (connection != null) [FD]
Line_13 $$ connection = session.getSeqConnection(db) --> Line_70 $$ if (connection != null) [FD]
Line_7 $$ Connection connection = null --> Line_71 $$ connection.rollback() [FD]
Line_13 $$ connection = session.getSeqConnection(db) --> Line_71 $$ connection.rollback() [FD]
Line_10 $$ PreparedStatement statement = null --> Line_78 $$ MetaDatabase.close(null, statement, res, true) [FD]
Line_21 $$ statement = connection.prepareStatement(sql) --> Line_78 $$ MetaDatabase.close(null, statement, res, true) [FD]
Line_30 $$ statement = connection.prepareStatement(sql) --> Line_78 $$ MetaDatabase.close(null, statement, res, true) [FD]
Line_39 $$ statement = connection.prepareStatement(sql) --> Line_78 $$ MetaDatabase.close(null, statement, res, true) [FD]
Line_59 $$ statement = connection.prepareStatement(sql) --> Line_78 $$ MetaDatabase.close(null, statement, res, true) [FD]
Line_8 $$ ResultSet res = null --> Line_78 $$ MetaDatabase.close(null, statement, res, true) [FD]
Line_41 $$ res = statement.executeQuery() --> Line_78 $$ MetaDatabase.close(null, statement, res, true) [FD]
Line_3 $$ if (sequence < seqLimit) --> Line_80 $$ return sequence [CD]
