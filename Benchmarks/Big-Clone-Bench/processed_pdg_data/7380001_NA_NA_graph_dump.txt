Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_3 $$ File inputFile = new File(inputFilename) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_4 $$ if (inputFile.exists() == false) [CD]
Line_3 $$ File inputFile = new File(inputFilename) --> Line_4 $$ if (inputFile.exists() == false) [FD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_7 $$ Environment environment = new Environment() [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_8 $$ environment.initBuiltInObjects() [CD]
Line_7 $$ Environment environment = new Environment() --> Line_8 $$ environment.initBuiltInObjects() [FD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_9 $$ NativeObjectsReader reader = new NativeObjectsReader(environment) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_10 $$ InputStream input = new FileInputStream(inputFile) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_11 $$ System.out.println(Messages.getString("ScriptDocToBinary.Reading_Documentation") + inputFilename) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_12 $$ reader.loadXML(input) [CD]
Line_9 $$ NativeObjectsReader reader = new NativeObjectsReader(environment) --> Line_12 $$ reader.loadXML(input) [FD]
Line_10 $$ InputStream input = new FileInputStream(inputFile) --> Line_12 $$ reader.loadXML(input) [FD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_13 $$ checkFile(outputFilename) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_13 $$ checkFile(outputFilename) [FD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_14 $$ File binaryFile = new File(outputFilename) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_15 $$ FileOutputStream outputStream = new FileOutputStream(binaryFile) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_16 $$ TabledOutputStream output = new TabledOutputStream(outputStream) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_17 $$ reader.getScriptDoc().write(output) [CD]
Line_16 $$ TabledOutputStream output = new TabledOutputStream(outputStream) --> Line_17 $$ reader.getScriptDoc().write(output) [FD]
Line_9 $$ NativeObjectsReader reader = new NativeObjectsReader(environment) --> Line_17 $$ reader.getScriptDoc().write(output) [FD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_18 $$ output.close() [CD]
Line_16 $$ TabledOutputStream output = new TabledOutputStream(outputStream) --> Line_18 $$ output.close() [FD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_19 $$ System.out.println(Messages.getString("ScriptDocToBinary.Finished")) [CD]
Line_2 $$ private static void generateFile(String inputFilename, String outputFilename) throws Exception --> Line_20 $$ System.out.println() [CD]
