Line_6 $$ File dataBase = new File(fileName) --> Line_7 $$ if (!dataBase.exists()) [FD]
Line_7 $$ if (!dataBase.exists()) --> Line_8 $$ G.conn = DriverManager.getConnection("jdbc:sqlite:" + fileName) [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_9 $$ createTablesDB() [CD]
Line_7 $$ if (!dataBase.exists()) --> Line_10 $$ G.conn = DriverManager.getConnection("jdbc:sqlite:" + fileName) [CD]
Line_13 $$ File myDirectory = new File(directoryPath) --> Line_14 $$ String[] list = myDirectory.list() [FD]
Line_15 $$ File fileXML = new File(input + File.separator + G.imagesName) --> Line_16 $$ if (!fileXML.exists()) [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_17 $$ JOptionPane.showMessageDialog(null, "No se encuentra el fichero XML", "Error", JOptionPane.ERROR_MESSAGE) [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_19 $$ SAXBuilder builder = new SAXBuilder(false) [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_20 $$ Document docXML = builder.build(fileXML) [CD]
Line_19 $$ SAXBuilder builder = new SAXBuilder(false) --> Line_20 $$ Document docXML = builder.build(fileXML) [FD]
Line_15 $$ File fileXML = new File(input + File.separator + G.imagesName) --> Line_20 $$ Document docXML = builder.build(fileXML) [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_21 $$ Element root = docXML.getRootElement() [CD]
Line_20 $$ Document docXML = builder.build(fileXML) --> Line_21 $$ Element root = docXML.getRootElement() [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_22 $$ List images = root.getChildren("image") [CD]
Line_21 $$ Element root = docXML.getRootElement() --> Line_22 $$ List images = root.getChildren("image") [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_23 $$ Iterator j = images.iterator() [CD]
Line_22 $$ List images = root.getChildren("image") --> Line_23 $$ Iterator j = images.iterator() [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_24 $$ List<Element> globalLanguages = root.getChild("languages").getChildren("language") [CD]
Line_21 $$ Element root = docXML.getRootElement() --> Line_24 $$ List<Element> globalLanguages = root.getChild("languages").getChildren("language") [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_25 $$ Iterator<Element> langsI = globalLanguages.iterator() [CD]
Line_24 $$ List<Element> globalLanguages = root.getChild("languages").getChildren("language") --> Line_25 $$ Iterator<Element> langsI = globalLanguages.iterator() [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_26 $$ HashMap<String, Integer> languageIDs = new HashMap<String, Integer>() [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_27 $$ HashMap<String, Integer> typeIDs = new HashMap<String, Integer>() [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_28 $$ Element e [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_29 $$ int i = 0 [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_30 $$ int contTypes = 0 [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_31 $$ int contImages = 0 [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_32 $$ while (langsI.hasNext()) [CD]
Line_25 $$ Iterator<Element> langsI = globalLanguages.iterator() --> Line_32 $$ while (langsI.hasNext()) [FD]
Line_32 $$ while (langsI.hasNext()) --> Line_33 $$ e = langsI.next() [CD]
Line_28 $$ Element e --> Line_33 $$ e = langsI.next() [FD]
Line_25 $$ Iterator<Element> langsI = globalLanguages.iterator() --> Line_33 $$ e = langsI.next() [FD]
Line_32 $$ while (langsI.hasNext()) --> Line_34 $$ languageIDs.put(e.getText(), i) [CD]
Line_26 $$ HashMap<String, Integer> languageIDs = new HashMap<String, Integer>() --> Line_34 $$ languageIDs.put(e.getText(), i) [FD]
Line_29 $$ int i = 0 --> Line_34 $$ languageIDs.put(e.getText(), i) [FD]
Line_33 $$ e = langsI.next() --> Line_34 $$ languageIDs.put(e.getText(), i) [FD]
Line_28 $$ Element e --> Line_34 $$ languageIDs.put(e.getText(), i) [FD]
Line_32 $$ while (langsI.hasNext()) --> Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") [CD]
Line_32 $$ while (langsI.hasNext()) --> Line_36 $$ stmt.setInt(1, i) [CD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_36 $$ stmt.setInt(1, i) [FD]
Line_29 $$ int i = 0 --> Line_36 $$ stmt.setInt(1, i) [FD]
Line_32 $$ while (langsI.hasNext()) --> Line_37 $$ stmt.setString(2, e.getText()) [CD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_37 $$ stmt.setString(2, e.getText()) [FD]
Line_33 $$ e = langsI.next() --> Line_37 $$ stmt.setString(2, e.getText()) [FD]
Line_28 $$ Element e --> Line_37 $$ stmt.setString(2, e.getText()) [FD]
Line_32 $$ while (langsI.hasNext()) --> Line_38 $$ stmt.executeUpdate() [CD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_38 $$ stmt.executeUpdate() [FD]
Line_32 $$ while (langsI.hasNext()) --> Line_39 $$ stmt.close() [CD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_39 $$ stmt.close() [FD]
Line_32 $$ while (langsI.hasNext()) --> Line_40 $$ i++ [CD]
Line_29 $$ int i = 0 --> Line_40 $$ i++ [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_42 $$ G.conn.setAutoCommit(false) [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_43 $$ while (j.hasNext()) [CD]
Line_23 $$ Iterator j = images.iterator() --> Line_43 $$ while (j.hasNext()) [FD]
Line_43 $$ while (j.hasNext()) --> Line_44 $$ Element image = (Element) j.next() [CD]
Line_23 $$ Iterator j = images.iterator() --> Line_44 $$ Element image = (Element) j.next() [FD]
Line_43 $$ while (j.hasNext()) --> Line_45 $$ String id = image.getAttributeValue("id") [CD]
Line_44 $$ Element image = (Element) j.next() --> Line_45 $$ String id = image.getAttributeValue("id") [FD]
Line_43 $$ while (j.hasNext()) --> Line_46 $$ List languages = image.getChildren("language") [CD]
Line_44 $$ Element image = (Element) j.next() --> Line_46 $$ List languages = image.getChildren("language") [FD]
Line_43 $$ while (j.hasNext()) --> Line_47 $$ Iterator k = languages.iterator() [CD]
Line_46 $$ List languages = image.getChildren("language") --> Line_47 $$ Iterator k = languages.iterator() [FD]
Line_43 $$ while (j.hasNext()) --> Line_48 $$ if (exists(list, id)) [CD]
Line_14 $$ String[] list = myDirectory.list() --> Line_48 $$ if (exists(list, id)) [FD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_48 $$ if (exists(list, id)) [FD]
Line_48 $$ if (exists(list, id)) --> Line_49 $$ String pathSrc = directoryPath.concat(id) [CD]
Line_12 $$ String directoryPath = input + File.separator --> Line_49 $$ String pathSrc = directoryPath.concat(id) [FD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_49 $$ String pathSrc = directoryPath.concat(id) [FD]
Line_48 $$ if (exists(list, id)) --> Line_50 $$ String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator [CD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_50 $$ String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator [FD]
Line_48 $$ if (exists(list, id)) --> Line_51 $$ String folder = output + File.separator + id.substring(0, 1).toUpperCase() [CD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_51 $$ String folder = output + File.separator + id.substring(0, 1).toUpperCase() [FD]
Line_48 $$ if (exists(list, id)) --> Line_52 $$ String pathDstTmp = pathDst.concat(id) [CD]
Line_50 $$ String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator --> Line_52 $$ String pathDstTmp = pathDst.concat(id) [FD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_52 $$ String pathDstTmp = pathDst.concat(id) [FD]
Line_48 $$ if (exists(list, id)) --> Line_53 $$ String idTmp = id [CD]
Line_48 $$ if (exists(list, id)) --> Line_54 $$ File testFile = new File(pathDstTmp) [CD]
Line_48 $$ if (exists(list, id)) --> Line_55 $$ int cont = 1 [CD]
Line_48 $$ if (exists(list, id)) --> Line_56 $$ while (testFile.exists()) [CD]
Line_54 $$ File testFile = new File(pathDstTmp) --> Line_56 $$ while (testFile.exists()) [FD]
Line_56 $$ while (testFile.exists()) --> Line_57 $$ idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length()) [CD]
Line_53 $$ String idTmp = id --> Line_57 $$ idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length()) [FD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_57 $$ idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length()) [FD]
Line_56 $$ while (testFile.exists()) --> Line_58 $$ pathDstTmp = pathDst + idTmp [CD]
Line_52 $$ String pathDstTmp = pathDst.concat(id) --> Line_58 $$ pathDstTmp = pathDst + idTmp [FD]
Line_50 $$ String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator --> Line_58 $$ pathDstTmp = pathDst + idTmp [FD]
Line_57 $$ idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length()) --> Line_58 $$ pathDstTmp = pathDst + idTmp [FD]
Line_53 $$ String idTmp = id --> Line_58 $$ pathDstTmp = pathDst + idTmp [FD]
Line_56 $$ while (testFile.exists()) --> Line_59 $$ testFile = new File(pathDstTmp) [CD]
Line_54 $$ File testFile = new File(pathDstTmp) --> Line_59 $$ testFile = new File(pathDstTmp) [FD]
Line_56 $$ while (testFile.exists()) --> Line_60 $$ cont++ [CD]
Line_55 $$ int cont = 1 --> Line_60 $$ cont++ [FD]
Line_48 $$ if (exists(list, id)) --> Line_62 $$ pathDst = pathDstTmp [CD]
Line_50 $$ String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator --> Line_62 $$ pathDst = pathDstTmp [FD]
Line_58 $$ pathDstTmp = pathDst + idTmp --> Line_62 $$ pathDst = pathDstTmp [FD]
Line_52 $$ String pathDstTmp = pathDst.concat(id) --> Line_62 $$ pathDst = pathDstTmp [FD]
Line_48 $$ if (exists(list, id)) --> Line_63 $$ id = idTmp [CD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_63 $$ id = idTmp [FD]
Line_57 $$ idTmp = id.substring(0, id.lastIndexOf('.')) + '_' + cont + id.substring(id.lastIndexOf('.'), id.length()) --> Line_63 $$ id = idTmp [FD]
Line_53 $$ String idTmp = id --> Line_63 $$ id = idTmp [FD]
Line_48 $$ if (exists(list, id)) --> Line_65 $$ if (!newDirectoryFolder.exists()) [CD]
Line_65 $$ if (!newDirectoryFolder.exists()) --> Line_66 $$ newDirectoryFolder.mkdirs() [CD]
Line_48 $$ if (exists(list, id)) --> Line_77 $$ while (k.hasNext()) [CD]
Line_47 $$ Iterator k = languages.iterator() --> Line_77 $$ while (k.hasNext()) [FD]
Line_77 $$ while (k.hasNext()) --> Line_78 $$ Element languageElement = (Element) k.next() [CD]
Line_47 $$ Iterator k = languages.iterator() --> Line_78 $$ Element languageElement = (Element) k.next() [FD]
Line_77 $$ while (k.hasNext()) --> Line_79 $$ String language = languageElement.getAttributeValue("id") [CD]
Line_78 $$ Element languageElement = (Element) k.next() --> Line_79 $$ String language = languageElement.getAttributeValue("id") [FD]
Line_77 $$ while (k.hasNext()) --> Line_80 $$ List words = languageElement.getChildren("word") [CD]
Line_78 $$ Element languageElement = (Element) k.next() --> Line_80 $$ List words = languageElement.getChildren("word") [FD]
Line_77 $$ while (k.hasNext()) --> Line_81 $$ Iterator l = words.iterator() [CD]
Line_80 $$ List words = languageElement.getChildren("word") --> Line_81 $$ Iterator l = words.iterator() [FD]
Line_77 $$ while (k.hasNext()) --> Line_82 $$ while (l.hasNext()) [CD]
Line_81 $$ Iterator l = words.iterator() --> Line_82 $$ while (l.hasNext()) [FD]
Line_82 $$ while (l.hasNext()) --> Line_83 $$ Element wordElement = (Element) l.next() [CD]
Line_81 $$ Iterator l = words.iterator() --> Line_83 $$ Element wordElement = (Element) l.next() [FD]
Line_82 $$ while (l.hasNext()) --> Line_84 $$ String type = wordElement.getAttributeValue("type") [CD]
Line_83 $$ Element wordElement = (Element) l.next() --> Line_84 $$ String type = wordElement.getAttributeValue("type") [FD]
Line_82 $$ while (l.hasNext()) --> Line_85 $$ if (!typeIDs.containsKey(type)) [CD]
Line_27 $$ HashMap<String, Integer> typeIDs = new HashMap<String, Integer>() --> Line_85 $$ if (!typeIDs.containsKey(type)) [FD]
Line_84 $$ String type = wordElement.getAttributeValue("type") --> Line_85 $$ if (!typeIDs.containsKey(type)) [FD]
Line_85 $$ if (!typeIDs.containsKey(type)) --> Line_86 $$ typeIDs.put(type, contTypes) [CD]
Line_27 $$ HashMap<String, Integer> typeIDs = new HashMap<String, Integer>() --> Line_86 $$ typeIDs.put(type, contTypes) [FD]
Line_84 $$ String type = wordElement.getAttributeValue("type") --> Line_86 $$ typeIDs.put(type, contTypes) [FD]
Line_30 $$ int contTypes = 0 --> Line_86 $$ typeIDs.put(type, contTypes) [FD]
Line_85 $$ if (!typeIDs.containsKey(type)) --> Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") [CD]
Line_85 $$ if (!typeIDs.containsKey(type)) --> Line_88 $$ stmt.setInt(1, contTypes) [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_88 $$ stmt.setInt(1, contTypes) [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_88 $$ stmt.setInt(1, contTypes) [FD]
Line_30 $$ int contTypes = 0 --> Line_88 $$ stmt.setInt(1, contTypes) [FD]
Line_85 $$ if (!typeIDs.containsKey(type)) --> Line_89 $$ stmt.setString(2, type) [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_89 $$ stmt.setString(2, type) [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_89 $$ stmt.setString(2, type) [FD]
Line_84 $$ String type = wordElement.getAttributeValue("type") --> Line_89 $$ stmt.setString(2, type) [FD]
Line_85 $$ if (!typeIDs.containsKey(type)) --> Line_90 $$ stmt.executeUpdate() [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_90 $$ stmt.executeUpdate() [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_90 $$ stmt.executeUpdate() [FD]
Line_85 $$ if (!typeIDs.containsKey(type)) --> Line_91 $$ stmt.close() [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_91 $$ stmt.close() [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_91 $$ stmt.close() [FD]
Line_85 $$ if (!typeIDs.containsKey(type)) --> Line_92 $$ contTypes++ [CD]
Line_30 $$ int contTypes = 0 --> Line_92 $$ contTypes++ [FD]
Line_82 $$ while (l.hasNext()) --> Line_94 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO main (word, idL, idT, name, nameNN) VALUES (?,?,?,?,?)") [CD]
Line_82 $$ while (l.hasNext()) --> Line_95 $$ stmt.setString(1, wordElement.getText().toLowerCase()) [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_95 $$ stmt.setString(1, wordElement.getText().toLowerCase()) [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_95 $$ stmt.setString(1, wordElement.getText().toLowerCase()) [FD]
Line_83 $$ Element wordElement = (Element) l.next() --> Line_95 $$ stmt.setString(1, wordElement.getText().toLowerCase()) [FD]
Line_82 $$ while (l.hasNext()) --> Line_96 $$ stmt.setInt(2, languageIDs.get(language)) [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_96 $$ stmt.setInt(2, languageIDs.get(language)) [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_96 $$ stmt.setInt(2, languageIDs.get(language)) [FD]
Line_26 $$ HashMap<String, Integer> languageIDs = new HashMap<String, Integer>() --> Line_96 $$ stmt.setInt(2, languageIDs.get(language)) [FD]
Line_79 $$ String language = languageElement.getAttributeValue("id") --> Line_96 $$ stmt.setInt(2, languageIDs.get(language)) [FD]
Line_82 $$ while (l.hasNext()) --> Line_97 $$ stmt.setInt(3, typeIDs.get(type)) [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_97 $$ stmt.setInt(3, typeIDs.get(type)) [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_97 $$ stmt.setInt(3, typeIDs.get(type)) [FD]
Line_27 $$ HashMap<String, Integer> typeIDs = new HashMap<String, Integer>() --> Line_97 $$ stmt.setInt(3, typeIDs.get(type)) [FD]
Line_84 $$ String type = wordElement.getAttributeValue("type") --> Line_97 $$ stmt.setInt(3, typeIDs.get(type)) [FD]
Line_82 $$ while (l.hasNext()) --> Line_98 $$ stmt.setString(4, id) [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_98 $$ stmt.setString(4, id) [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_98 $$ stmt.setString(4, id) [FD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_98 $$ stmt.setString(4, id) [FD]
Line_63 $$ id = idTmp --> Line_98 $$ stmt.setString(4, id) [FD]
Line_82 $$ while (l.hasNext()) --> Line_99 $$ stmt.setString(5, id) [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_99 $$ stmt.setString(5, id) [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_99 $$ stmt.setString(5, id) [FD]
Line_45 $$ String id = image.getAttributeValue("id") --> Line_99 $$ stmt.setString(5, id) [FD]
Line_63 $$ id = idTmp --> Line_99 $$ stmt.setString(5, id) [FD]
Line_82 $$ while (l.hasNext()) --> Line_100 $$ stmt.executeUpdate() [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_100 $$ stmt.executeUpdate() [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_100 $$ stmt.executeUpdate() [FD]
Line_82 $$ while (l.hasNext()) --> Line_101 $$ stmt.close() [CD]
Line_87 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO type (id,name) VALUES (?,?)") --> Line_101 $$ stmt.close() [FD]
Line_35 $$ PreparedStatement stmt = G.conn.prepareStatement("INSERT OR IGNORE INTO language (id,name) VALUES (?,?)") --> Line_101 $$ stmt.close() [FD]
Line_82 $$ while (l.hasNext()) --> Line_102 $$ if (contImages == 5000) [CD]
Line_31 $$ int contImages = 0 --> Line_102 $$ if (contImages == 5000) [FD]
Line_102 $$ if (contImages == 5000) --> Line_103 $$ G.conn.commit() [CD]
Line_102 $$ if (contImages == 5000) --> Line_104 $$ contImages = 0 [CD]
Line_31 $$ int contImages = 0 --> Line_104 $$ contImages = 0 [FD]
Line_102 $$ if (contImages == 5000) --> Line_105 $$ contImages++ [CD]
Line_104 $$ contImages = 0 --> Line_105 $$ contImages++ [FD]
Line_31 $$ int contImages = 0 --> Line_105 $$ contImages++ [FD]
Line_16 $$ if (!fileXML.exists()) --> Line_111 $$ G.conn.setAutoCommit(true) [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_112 $$ G.conn.close() [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_113 $$ long totalTiempo = System.currentTimeMillis() - tiempoInicio [CD]
Line_16 $$ if (!fileXML.exists()) --> Line_114 $$ System.out.println("El tiempo total es :" + totalTiempo / 1000 + " segundos") [CD]
Line_33 $$ e = langsI.next() --> Line_117 $$ e.printStackTrace() [FD]
Line_28 $$ Element e --> Line_117 $$ e.printStackTrace() [FD]
Line_63 $$ id = idTmp --> Line_48 $$ if (exists(list, id)) [FD]
Line_63 $$ id = idTmp --> Line_49 $$ String pathSrc = directoryPath.concat(id) [FD]
Line_63 $$ id = idTmp --> Line_50 $$ String pathDst = output + File.separator + id.substring(0, 1).toUpperCase() + File.separator [FD]
Line_63 $$ id = idTmp --> Line_51 $$ String folder = output + File.separator + id.substring(0, 1).toUpperCase() [FD]
Line_62 $$ pathDst = pathDstTmp --> Line_52 $$ String pathDstTmp = pathDst.concat(id) [FD]
Line_63 $$ id = idTmp --> Line_52 $$ String pathDstTmp = pathDst.concat(id) [FD]
Line_59 $$ testFile = new File(pathDstTmp) --> Line_56 $$ while (testFile.exists()) [FD]
Line_104 $$ contImages = 0 --> Line_102 $$ if (contImages == 5000) [FD]
