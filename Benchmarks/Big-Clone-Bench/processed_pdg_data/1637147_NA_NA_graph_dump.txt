Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_3 $$ String annotClass = par.annotation.getType().substring(1, par.annotation.getType().length() - 1).replace('/', '.') [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_4 $$ String methodName = getMethodName(par) [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_4 $$ String methodName = getMethodName(par) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_5 $$ String hashKey = annotClass + CLASS_SIG_SEPARATOR_STRING + methodName [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_6 $$ PredicateAnnotationRecord gr = _generatedPredicateRecords.get(hashKey) [CD]
Line_5 $$ String hashKey = annotClass + CLASS_SIG_SEPARATOR_STRING + methodName --> Line_6 $$ PredicateAnnotationRecord gr = _generatedPredicateRecords.get(hashKey) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_7 $$ if (gr != null) [CD]
Line_6 $$ PredicateAnnotationRecord gr = _generatedPredicateRecords.get(hashKey) --> Line_7 $$ if (gr != null) [FD]
Line_7 $$ if (gr != null) --> Line_8 $$ _sharedAddData.cacheInfo.incCombinePredicateCacheHit() [CD]
Line_7 $$ if (gr != null) --> Line_9 $$ return gr [CD]
Line_7 $$ if (gr != null) --> Line_11 $$ _sharedAddData.cacheInfo.incCombinePredicateCacheMiss() [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_13 $$ String predicateClass = ((_predicatePackage.length() > 0) ? (_predicatePackage + ".") : "") + annotClass + "Pred" [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_14 $$ ClassFile predicateCF = null [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_15 $$ File clonedFile = new File(_predicatePackageDir, annotClass.replace('.', '/') + "Pred.class") [CD]
Line_3 $$ String annotClass = par.annotation.getType().substring(1, par.annotation.getType().length() - 1).replace('/', '.') --> Line_15 $$ File clonedFile = new File(_predicatePackageDir, annotClass.replace('.', '/') + "Pred.class") [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_16 $$ if (clonedFile.exists() && clonedFile.isFile() && clonedFile.canRead()) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) [FD]
Line_16 $$ if (clonedFile.exists() && clonedFile.isFile() && clonedFile.canRead()) --> Line_23 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() [CD]
Line_23 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_25 $$ _templatePredicateClassFile.write(baos) [FD]
Line_14 $$ ClassFile predicateCF = null --> Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) [FD]
Line_23 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_31 $$ clonedFile.getParentFile().mkdirs() [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_32 $$ final ArrayList<String> paramNames = new ArrayList<String>() [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_33 $$ final HashMap<String, String> paramTypes = new HashMap<String, String>() [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_34 $$ performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_34 $$ performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() [FD]
Line_34 $$ performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() --> Line_36 $$ paramNames.add(param1) [CD]
Line_34 $$ performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() --> Line_36 $$ paramNames.add(param1) [FD]
Line_32 $$ final ArrayList<String> paramNames = new ArrayList<String>() --> Line_36 $$ paramNames.add(param1) [FD]
Line_34 $$ performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() --> Line_37 $$ paramTypes.put(param1, param2) [CD]
Line_34 $$ performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() --> Line_37 $$ paramTypes.put(param1, param2) [FD]
Line_33 $$ final HashMap<String, String> paramTypes = new HashMap<String, String>() --> Line_37 $$ paramTypes.put(param1, param2) [FD]
Line_34 $$ performCombineTreeWalk(par, new ILambda.Ternary<Object, String, String, AAnnotationsAttributeInfo.Annotation.AMemberValue>() --> Line_38 $$ return null [CD]
Line_44 $$ if ((memberPAR.predicateClass != null) && (memberPAR.predicateMI != null)) --> Line_45 $$ memberPARs.add(memberPAR) [CD]
Line_44 $$ if ((memberPAR.predicateClass != null) && (memberPAR.predicateMI != null)) --> Line_47 $$ memberPARs.add(generatePredicateAnnotationRecord(memberPAR, miDescriptor)) [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_47 $$ memberPARs.add(generatePredicateAnnotationRecord(memberPAR, miDescriptor)) [FD]
Line_13 $$ String predicateClass = ((_predicatePackage.length() > 0) ? (_predicatePackage + ".") : "") + annotClass + "Pred" --> Line_51 $$ AUTFPoolInfo predicateClassNameItem = new ASCIIPoolInfo(predicateClass.replace('.', '/'), predicateCF.getConstantPool()) [FD]
Line_14 $$ ClassFile predicateCF = null --> Line_51 $$ AUTFPoolInfo predicateClassNameItem = new ASCIIPoolInfo(predicateClass.replace('.', '/'), predicateCF.getConstantPool()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_51 $$ AUTFPoolInfo predicateClassNameItem = new ASCIIPoolInfo(predicateClass.replace('.', '/'), predicateCF.getConstantPool()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_51 $$ AUTFPoolInfo predicateClassNameItem = new ASCIIPoolInfo(predicateClass.replace('.', '/'), predicateCF.getConstantPool()) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_52 $$ int[] l = predicateCF.addConstantPoolItems(new APoolInfo[] [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_52 $$ int[] l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_52 $$ int[] l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_52 $$ int[] l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_53 $$ predicateClassNameItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_53 $$ predicateClassNameItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_53 $$ predicateClassNameItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_53 $$ predicateClassNameItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_14 $$ ClassFile predicateCF = null --> Line_54 $$ ClassPoolInfo predicateClassItem = new ClassPoolInfo(predicateClassNameItem, predicateCF.getConstantPool()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_54 $$ ClassPoolInfo predicateClassItem = new ClassPoolInfo(predicateClassNameItem, predicateCF.getConstantPool()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_54 $$ ClassPoolInfo predicateClassItem = new ClassPoolInfo(predicateClassNameItem, predicateCF.getConstantPool()) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_55 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_55 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_55 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_55 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_56 $$ predicateClassItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckClassVisitor.singleton(), null) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_56 $$ predicateClassItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckClassVisitor.singleton(), null) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_56 $$ predicateClassItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckClassVisitor.singleton(), null) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_56 $$ predicateClassItem = predicateCF.getConstantPoolItem(l[0]).execute(CheckClassVisitor.singleton(), null) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_57 $$ predicateCF.setThisClass(predicateClassItem) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_57 $$ predicateCF.setThisClass(predicateClassItem) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_57 $$ predicateCF.setThisClass(predicateClassItem) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_57 $$ predicateCF.setThisClass(predicateClassItem) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_59 $$ sb.append("(Ljava/lang/Object;") [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_60 $$ if (par.passArguments) [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_60 $$ if (par.passArguments) [FD]
Line_60 $$ if (par.passArguments) --> Line_61 $$ sb.append("[Ljava/lang/Object;") [CD]
Line_33 $$ final HashMap<String, String> paramTypes = new HashMap<String, String>() --> Line_64 $$ sb.append(paramTypes.get(key)) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_66 $$ sb.append(")Z") [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_67 $$ String methodDesc = sb.toString() [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_70 $$ for (MethodInfo mi : predicateCF.getMethods()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_70 $$ for (MethodInfo mi : predicateCF.getMethods()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_70 $$ for (MethodInfo mi : predicateCF.getMethods()) [FD]
Line_4 $$ String methodName = getMethodName(par) --> Line_71 $$ if ((mi.getName().toString().equals(methodName)) && (mi.getDescriptor().toString().equals(methodDesc))) [FD]
Line_71 $$ if ((mi.getName().toString().equals(methodName)) && (mi.getDescriptor().toString().equals(methodDesc))) --> Line_74 $$ if ((mi.getName().toString().equals("template")) && (mi.getDescriptor().toString().startsWith("(")) && (mi.getDescriptor().toString().endsWith(")Z"))) [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_78 $$ if ((templateMI == null) && (predicateMI == null)) [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_81 $$ if (predicateMI == null) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_82 $$ AUTFPoolInfo namecpi = new ASCIIPoolInfo(methodName, predicateCF.getConstantPool()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_82 $$ AUTFPoolInfo namecpi = new ASCIIPoolInfo(methodName, predicateCF.getConstantPool()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_82 $$ AUTFPoolInfo namecpi = new ASCIIPoolInfo(methodName, predicateCF.getConstantPool()) [FD]
Line_81 $$ if (predicateMI == null) --> Line_83 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_83 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_83 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_83 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_81 $$ if (predicateMI == null) --> Line_84 $$ namecpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_84 $$ namecpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_84 $$ namecpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_84 $$ namecpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_14 $$ ClassFile predicateCF = null --> Line_85 $$ AUTFPoolInfo descpi = new ASCIIPoolInfo(methodDesc, predicateCF.getConstantPool()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_85 $$ AUTFPoolInfo descpi = new ASCIIPoolInfo(methodDesc, predicateCF.getConstantPool()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_85 $$ AUTFPoolInfo descpi = new ASCIIPoolInfo(methodDesc, predicateCF.getConstantPool()) [FD]
Line_81 $$ if (predicateMI == null) --> Line_86 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_86 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_86 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_86 $$ l = predicateCF.addConstantPoolItems(new APoolInfo[] [FD]
Line_81 $$ if (predicateMI == null) --> Line_87 $$ descpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_87 $$ descpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_87 $$ descpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_87 $$ descpi = predicateCF.getConstantPoolItem(l[0]).execute(CheckUTFVisitor.singleton(), null) [FD]
Line_81 $$ if (predicateMI == null) --> Line_98 $$ predicateCF.getMethods().add(predicateMI) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_98 $$ predicateCF.getMethods().add(predicateMI) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_98 $$ predicateCF.getMethods().add(predicateMI) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_98 $$ predicateCF.getMethods().add(predicateMI) [FD]
Line_81 $$ if (predicateMI == null) --> Line_99 $$ CodeAttributeInfo.CodeProperties props = predicateMI.getCodeAttributeInfo().getProperties() [CD]
Line_81 $$ if (predicateMI == null) --> Line_100 $$ props.maxLocals += paramTypes.size() + 1 + (par.passArguments ? 1 : 0) [CD]
Line_33 $$ final HashMap<String, String> paramTypes = new HashMap<String, String>() --> Line_100 $$ props.maxLocals += paramTypes.size() + 1 + (par.passArguments ? 1 : 0) [FD]
Line_81 $$ if (predicateMI == null) --> Line_102 $$ if ((par.combineMode == Combine.Mode.OR) || (par.combineMode == Combine.Mode.XOR) || (par.combineMode == Combine.Mode.IMPLIES)) [CD]
Line_102 $$ if ((par.combineMode == Combine.Mode.OR) || (par.combineMode == Combine.Mode.XOR) || (par.combineMode == Combine.Mode.IMPLIES)) --> Line_103 $$ il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo()) [CD]
Line_102 $$ if ((par.combineMode == Combine.Mode.OR) || (par.combineMode == Combine.Mode.XOR) || (par.combineMode == Combine.Mode.IMPLIES)) --> Line_105 $$ il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo()) [CD]
Line_81 $$ if (predicateMI == null) --> Line_108 $$ res = il.advanceIndex() [CD]
Line_81 $$ if (predicateMI == null) --> Line_113 $$ if (accumVarIndex < 256) [CD]
Line_113 $$ if (accumVarIndex < 256) --> Line_118 $$ Types.bytesFromShort((short) accumVarIndex, bytes, 1) [CD]
Line_113 $$ if (accumVarIndex < 256) --> Line_120 $$ bytes[0] = Opcode.ISTORE [CD]
Line_81 $$ if (predicateMI == null) --> Line_123 $$ il.insertInstr(storeAccumInstr, predicateMI.getCodeAttributeInfo()) [CD]
Line_81 $$ if (predicateMI == null) --> Line_124 $$ res = il.advanceIndex() [CD]
Line_81 $$ if (predicateMI == null) --> Line_129 $$ if (par.passArguments) [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_129 $$ if (par.passArguments) [FD]
Line_139 $$ if (memberPAR.passArguments) --> Line_140 $$ if (par.passArguments) [CD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_140 $$ if (par.passArguments) [FD]
Line_140 $$ if (par.passArguments) --> Line_141 $$ il.insertInstr(new GenericInstruction(Opcode.ALOAD_1), predicateMI.getCodeAttributeInfo()) [CD]
Line_140 $$ if (par.passArguments) --> Line_142 $$ res = il.advanceIndex() [CD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_148 $$ String t = memberPAR.paramTypes.get(memberPAR.paramNames.get(paramNameIndex)) [CD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_148 $$ String t = memberPAR.paramTypes.get(memberPAR.paramNames.get(paramNameIndex)) [FD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_149 $$ if (t.length() == 0) [CD]
Line_148 $$ String t = memberPAR.paramTypes.get(memberPAR.paramNames.get(paramNameIndex)) --> Line_149 $$ if (t.length() == 0) [FD]
Line_14 $$ ClassFile predicateCF = null --> Line_150 $$ throw new ThreadCheckException("Length of parameter type no. " + paramIndex + " string is 0 in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_150 $$ throw new ThreadCheckException("Length of parameter type no. " + paramIndex + " string is 0 in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_150 $$ throw new ThreadCheckException("Length of parameter type no. " + paramIndex + " string is 0 in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName()) [FD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_152 $$ byte opcode [CD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_153 $$ int nextLVIndex = lvIndex [CD]
Line_148 $$ String t = memberPAR.paramTypes.get(memberPAR.paramNames.get(paramNameIndex)) --> Line_154 $$ switch(t.charAt(0)) [FD]
Line_152 $$ byte opcode --> Line_160 $$ opcode = Opcode.ILOAD [FD]
Line_153 $$ int nextLVIndex = lvIndex --> Line_161 $$ nextLVIndex += 1 [FD]
Line_152 $$ byte opcode --> Line_165 $$ opcode = Opcode.FLOAD [FD]
Line_160 $$ opcode = Opcode.ILOAD --> Line_165 $$ opcode = Opcode.FLOAD [FD]
Line_153 $$ int nextLVIndex = lvIndex --> Line_166 $$ nextLVIndex += 1 [FD]
Line_161 $$ nextLVIndex += 1 --> Line_166 $$ nextLVIndex += 1 [FD]
Line_152 $$ byte opcode --> Line_171 $$ opcode = Opcode.ALOAD [FD]
Line_160 $$ opcode = Opcode.ILOAD --> Line_171 $$ opcode = Opcode.ALOAD [FD]
Line_165 $$ opcode = Opcode.FLOAD --> Line_171 $$ opcode = Opcode.ALOAD [FD]
Line_153 $$ int nextLVIndex = lvIndex --> Line_172 $$ nextLVIndex += 1 [FD]
Line_161 $$ nextLVIndex += 1 --> Line_172 $$ nextLVIndex += 1 [FD]
Line_166 $$ nextLVIndex += 1 --> Line_172 $$ nextLVIndex += 1 [FD]
Line_152 $$ byte opcode --> Line_176 $$ opcode = Opcode.LLOAD [FD]
Line_160 $$ opcode = Opcode.ILOAD --> Line_176 $$ opcode = Opcode.LLOAD [FD]
Line_165 $$ opcode = Opcode.FLOAD --> Line_176 $$ opcode = Opcode.LLOAD [FD]
Line_171 $$ opcode = Opcode.ALOAD --> Line_176 $$ opcode = Opcode.LLOAD [FD]
Line_153 $$ int nextLVIndex = lvIndex --> Line_177 $$ nextLVIndex += 2 [FD]
Line_161 $$ nextLVIndex += 1 --> Line_177 $$ nextLVIndex += 2 [FD]
Line_166 $$ nextLVIndex += 1 --> Line_177 $$ nextLVIndex += 2 [FD]
Line_172 $$ nextLVIndex += 1 --> Line_177 $$ nextLVIndex += 2 [FD]
Line_152 $$ byte opcode --> Line_181 $$ opcode = Opcode.DLOAD [FD]
Line_160 $$ opcode = Opcode.ILOAD --> Line_181 $$ opcode = Opcode.DLOAD [FD]
Line_165 $$ opcode = Opcode.FLOAD --> Line_181 $$ opcode = Opcode.DLOAD [FD]
Line_171 $$ opcode = Opcode.ALOAD --> Line_181 $$ opcode = Opcode.DLOAD [FD]
Line_176 $$ opcode = Opcode.LLOAD --> Line_181 $$ opcode = Opcode.DLOAD [FD]
Line_153 $$ int nextLVIndex = lvIndex --> Line_182 $$ nextLVIndex += 2 [FD]
Line_161 $$ nextLVIndex += 1 --> Line_182 $$ nextLVIndex += 2 [FD]
Line_166 $$ nextLVIndex += 1 --> Line_182 $$ nextLVIndex += 2 [FD]
Line_172 $$ nextLVIndex += 1 --> Line_182 $$ nextLVIndex += 2 [FD]
Line_177 $$ nextLVIndex += 2 --> Line_182 $$ nextLVIndex += 2 [FD]
Line_14 $$ ClassFile predicateCF = null --> Line_186 $$ throw new ThreadCheckException("Parameter type no. " + paramIndex + ", " + t + ", is unknown in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_186 $$ throw new ThreadCheckException("Parameter type no. " + paramIndex + ", " + t + ", is unknown in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_186 $$ throw new ThreadCheckException("Parameter type no. " + paramIndex + ", " + t + ", is unknown in " + predicateMI.getName() + " in class " + predicateCF.getThisClassName()) [FD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) [CD]
Line_152 $$ byte opcode --> Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) [FD]
Line_160 $$ opcode = Opcode.ILOAD --> Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) [FD]
Line_165 $$ opcode = Opcode.FLOAD --> Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) [FD]
Line_171 $$ opcode = Opcode.ALOAD --> Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) [FD]
Line_176 $$ opcode = Opcode.LLOAD --> Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) [FD]
Line_181 $$ opcode = Opcode.DLOAD --> Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) [FD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_189 $$ il.insertInstr(load, predicateMI.getCodeAttributeInfo()) [CD]
Line_188 $$ AInstruction load = Opcode.getShortestLoadStoreInstruction(opcode, (short) lvIndex) --> Line_189 $$ il.insertInstr(load, predicateMI.getCodeAttributeInfo()) [FD]
Line_147 $$ for (int paramNameIndex = 0; paramNameIndex < memberPAR.paramNames.size(); ++paramNameIndex) --> Line_190 $$ res = il.advanceIndex() [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_199 $$ int predicateCallIndex = predicateCF.addMethodToConstantPool(memberPAR.predicateClass.replace('.', '/'), memberPAR.predicateMI.getName().toString(), memberPAR.predicateMI.getDescriptor().toString()) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_199 $$ int predicateCallIndex = predicateCF.addMethodToConstantPool(memberPAR.predicateClass.replace('.', '/'), memberPAR.predicateMI.getName().toString(), memberPAR.predicateMI.getDescriptor().toString()) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_199 $$ int predicateCallIndex = predicateCF.addMethodToConstantPool(memberPAR.predicateClass.replace('.', '/'), memberPAR.predicateMI.getName().toString(), memberPAR.predicateMI.getDescriptor().toString()) [FD]
Line_204 $$ if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) --> Line_205 $$ il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo()) [CD]
Line_204 $$ if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) --> Line_206 $$ res = il.advanceIndex() [CD]
Line_204 $$ if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) --> Line_208 $$ il.insertInstr(new GenericInstruction(Opcode.SWAP), predicateMI.getCodeAttributeInfo()) [CD]
Line_204 $$ if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) --> Line_209 $$ res = il.advanceIndex() [CD]
Line_204 $$ if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) --> Line_211 $$ il.insertInstr(new GenericInstruction(Opcode.ISUB), predicateMI.getCodeAttributeInfo()) [CD]
Line_204 $$ if ((par.combineMode == Combine.Mode.NOT) || ((par.combineMode == Combine.Mode.IMPLIES) && (memberCount == 1))) --> Line_212 $$ res = il.advanceIndex() [CD]
Line_218 $$ if (par.combineMode == Combine.Mode.OR) --> Line_219 $$ il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo()) [CD]
Line_218 $$ if (par.combineMode == Combine.Mode.OR) --> Line_220 $$ if ((par.combineMode == Combine.Mode.AND) || (par.combineMode == Combine.Mode.NOT)) [CD]
Line_220 $$ if ((par.combineMode == Combine.Mode.AND) || (par.combineMode == Combine.Mode.NOT)) --> Line_221 $$ il.insertInstr(new GenericInstruction(Opcode.IAND), predicateMI.getCodeAttributeInfo()) [CD]
Line_220 $$ if ((par.combineMode == Combine.Mode.AND) || (par.combineMode == Combine.Mode.NOT)) --> Line_222 $$ if (par.combineMode == Combine.Mode.XOR) [CD]
Line_222 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_223 $$ il.insertInstr(new GenericInstruction(Opcode.IADD), predicateMI.getCodeAttributeInfo()) [CD]
Line_222 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_224 $$ if (par.combineMode == Combine.Mode.IMPLIES) [CD]
Line_224 $$ if (par.combineMode == Combine.Mode.IMPLIES) --> Line_225 $$ il.insertInstr(new GenericInstruction(Opcode.IOR), predicateMI.getCodeAttributeInfo()) [CD]
Line_81 $$ if (predicateMI == null) --> Line_235 $$ if (par.combineMode == Combine.Mode.XOR) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_236 $$ il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo()) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_237 $$ res = il.advanceIndex() [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_239 $$ il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo()) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_240 $$ res = il.advanceIndex() [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_242 $$ il.insertInstr(new GenericInstruction(Opcode.ICONST_0), predicateMI.getCodeAttributeInfo()) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_243 $$ res = il.advanceIndex() [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_246 $$ il.insertInstr(br2, predicateMI.getCodeAttributeInfo()) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_247 $$ res = il.advanceIndex() [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_249 $$ int jumpIndex = il.getIndex() [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_250 $$ il.insertInstr(new GenericInstruction(Opcode.ICONST_1), predicateMI.getCodeAttributeInfo()) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_251 $$ res = il.advanceIndex() [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_253 $$ res = il.rewindIndex(3) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_256 $$ il.insertInstr(br1, predicateMI.getCodeAttributeInfo()) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_257 $$ res = il.advanceIndex(4) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_260 $$ il.insertInstr(loadAccumInstr, predicateMI.getCodeAttributeInfo()) [CD]
Line_235 $$ if (par.combineMode == Combine.Mode.XOR) --> Line_261 $$ res = il.advanceIndex() [CD]
Line_81 $$ if (predicateMI == null) --> Line_264 $$ il.deleteInstr(predicateMI.getCodeAttributeInfo()) [CD]
Line_81 $$ if (predicateMI == null) --> Line_265 $$ predicateMI.getCodeAttributeInfo().setCode(il.getCode()) [CD]
Line_81 $$ if (predicateMI == null) --> Line_266 $$ props.maxStack = Math.max(maxStack, 2) [CD]
Line_81 $$ if (predicateMI == null) --> Line_267 $$ predicateMI.getCodeAttributeInfo().setProperties(props.maxStack, props.maxLocals) [CD]
Line_14 $$ ClassFile predicateCF = null --> Line_270 $$ predicateCF.write(fos) [FD]
Line_18 $$ predicateCF = new ClassFile(new FileInputStream(clonedFile)) --> Line_270 $$ predicateCF.write(fos) [FD]
Line_26 $$ predicateCF = new ClassFile(new ByteArrayInputStream(baos.toByteArray())) --> Line_270 $$ predicateCF.write(fos) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_277 $$ _generatedPredicateRecords.put(hashKey, gr) [CD]
Line_5 $$ String hashKey = annotClass + CLASS_SIG_SEPARATOR_STRING + methodName --> Line_277 $$ _generatedPredicateRecords.put(hashKey, gr) [FD]
Line_6 $$ PredicateAnnotationRecord gr = _generatedPredicateRecords.get(hashKey) --> Line_277 $$ _generatedPredicateRecords.put(hashKey, gr) [FD]
Line_2 $$ protected PredicateAnnotationRecord generatePredicateAnnotationRecord(PredicateAnnotationRecord par, String miDescriptor) --> Line_278 $$ return gr [CD]
