Line_2 $$ public static void main(String[] args) --> Line_3 $$ paraProc(args) [CD]
Line_2 $$ public static void main(String[] args) --> Line_3 $$ paraProc(args) [FD]
Line_2 $$ public static void main(String[] args) --> Line_4 $$ CanonicalGFF cgff = new CanonicalGFF(gffFilename) [CD]
Line_2 $$ public static void main(String[] args) --> Line_5 $$ CanonicalGFF geneModel = new CanonicalGFF(modelFilename) [CD]
Line_2 $$ public static void main(String[] args) --> Line_6 $$ CanonicalGFF transcriptGff = new CanonicalGFF(transcriptFilename) [CD]
Line_2 $$ public static void main(String[] args) --> Line_7 $$ TreeMap ksTable1 = getKsTable(ksTable1Filename) [CD]
Line_2 $$ public static void main(String[] args) --> Line_8 $$ TreeMap ksTable2 = getKsTable(ksTable2Filename) [CD]
Line_2 $$ public static void main(String[] args) --> Line_9 $$ Map intronReadCntMap = new TreeMap() [CD]
Line_2 $$ public static void main(String[] args) --> Line_10 $$ Map intronSplicingPosMap = new TreeMap() [CD]
Line_12 $$ BufferedReader fr = new BufferedReader(new FileReader(inFilename)) --> Line_13 $$ while (fr.ready()) [FD]
Line_13 $$ while (fr.ready()) --> Line_14 $$ String line = fr.readLine() [CD]
Line_12 $$ BufferedReader fr = new BufferedReader(new FileReader(inFilename)) --> Line_14 $$ String line = fr.readLine() [FD]
Line_13 $$ while (fr.ready()) --> Line_15 $$ if (line.startsWith("#")) [CD]
Line_14 $$ String line = fr.readLine() --> Line_15 $$ if (line.startsWith("#")) [FD]
Line_13 $$ while (fr.ready()) --> Line_16 $$ String tokens[] = line.split("\t") [CD]
Line_14 $$ String line = fr.readLine() --> Line_16 $$ String tokens[] = line.split("\t") [FD]
Line_13 $$ while (fr.ready()) --> Line_17 $$ String chr = tokens[0] [CD]
Line_13 $$ while (fr.ready()) --> Line_18 $$ int start = Integer.parseInt(tokens[1]) [CD]
Line_13 $$ while (fr.ready()) --> Line_19 $$ int stop = Integer.parseInt(tokens[2]) [CD]
Line_13 $$ while (fr.ready()) --> Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) [CD]
Line_13 $$ while (fr.ready()) --> Line_21 $$ int readCnt = Integer.parseInt(tokens[3]) [CD]
Line_13 $$ while (fr.ready()) --> Line_22 $$ intronReadCntMap.put(intron, readCnt) [CD]
Line_9 $$ Map intronReadCntMap = new TreeMap() --> Line_22 $$ intronReadCntMap.put(intron, readCnt) [FD]
Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) --> Line_22 $$ intronReadCntMap.put(intron, readCnt) [FD]
Line_21 $$ int readCnt = Integer.parseInt(tokens[3]) --> Line_22 $$ intronReadCntMap.put(intron, readCnt) [FD]
Line_13 $$ while (fr.ready()) --> Line_23 $$ String splicingMapStr = tokens[4] [CD]
Line_13 $$ while (fr.ready()) --> Line_24 $$ Map splicingMap = getSplicingMap(splicingMapStr) [CD]
Line_23 $$ String splicingMapStr = tokens[4] --> Line_24 $$ Map splicingMap = getSplicingMap(splicingMapStr) [FD]
Line_13 $$ while (fr.ready()) --> Line_25 $$ intronSplicingPosMap.put(intron, splicingMap) [CD]
Line_10 $$ Map intronSplicingPosMap = new TreeMap() --> Line_25 $$ intronSplicingPosMap.put(intron, splicingMap) [FD]
Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) --> Line_25 $$ intronSplicingPosMap.put(intron, splicingMap) [FD]
Line_24 $$ Map splicingMap = getSplicingMap(splicingMapStr) --> Line_25 $$ intronSplicingPosMap.put(intron, splicingMap) [FD]
Line_12 $$ BufferedReader fr = new BufferedReader(new FileReader(inFilename)) --> Line_27 $$ fr.close() [FD]
Line_2 $$ public static void main(String[] args) --> Line_32 $$ double[] hdCDF = getHdCdf(readLength, minimumOverlap) [CD]
Line_9 $$ Map intronReadCntMap = new TreeMap() --> Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_36 $$ GenomeInterval intron = (GenomeInterval) intronIterator.next() [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_36 $$ GenomeInterval intron = (GenomeInterval) intronIterator.next() [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_37 $$ int readCnt = ((Integer) intronReadCntMap.get(intron)).intValue() [CD]
Line_9 $$ Map intronReadCntMap = new TreeMap() --> Line_37 $$ int readCnt = ((Integer) intronReadCntMap.get(intron)).intValue() [FD]
Line_36 $$ GenomeInterval intron = (GenomeInterval) intronIterator.next() --> Line_37 $$ int readCnt = ((Integer) intronReadCntMap.get(intron)).intValue() [FD]
Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) --> Line_37 $$ int readCnt = ((Integer) intronReadCntMap.get(intron)).intValue() [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_38 $$ TreeMap splicingMap = (TreeMap) intronSplicingPosMap.get(intron) [CD]
Line_10 $$ Map intronSplicingPosMap = new TreeMap() --> Line_38 $$ TreeMap splicingMap = (TreeMap) intronSplicingPosMap.get(intron) [FD]
Line_36 $$ GenomeInterval intron = (GenomeInterval) intronIterator.next() --> Line_38 $$ TreeMap splicingMap = (TreeMap) intronSplicingPosMap.get(intron) [FD]
Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) --> Line_38 $$ TreeMap splicingMap = (TreeMap) intronSplicingPosMap.get(intron) [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [CD]
Line_37 $$ int readCnt = ((Integer) intronReadCntMap.get(intron)).intValue() --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [FD]
Line_21 $$ int readCnt = Integer.parseInt(tokens[3]) --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [FD]
Line_32 $$ double[] hdCDF = getHdCdf(readLength, minimumOverlap) --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [FD]
Line_7 $$ TreeMap ksTable1 = getKsTable(ksTable1Filename) --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [FD]
Line_8 $$ TreeMap ksTable2 = getKsTable(ksTable2Filename) --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [FD]
Line_38 $$ TreeMap splicingMap = (TreeMap) intronSplicingPosMap.get(intron) --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [FD]
Line_24 $$ Map splicingMap = getSplicingMap(splicingMapStr) --> Line_39 $$ Object ksInfoArray[] = distributionAccepter((TreeMap) splicingMap.clone(), readCnt, hdCDF, ksTable1, ksTable2) [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_40 $$ boolean ksAccepted = (Boolean) ksInfoArray[0] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_41 $$ double testK = (Double) ksInfoArray[1] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_42 $$ double standardK1 = (Double) ksInfoArray[2] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_43 $$ double standardK2 = (Double) ksInfoArray[3] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_44 $$ int positionCnt = splicingMap.size() [CD]
Line_38 $$ TreeMap splicingMap = (TreeMap) intronSplicingPosMap.get(intron) --> Line_44 $$ int positionCnt = splicingMap.size() [FD]
Line_24 $$ Map splicingMap = getSplicingMap(splicingMapStr) --> Line_44 $$ int positionCnt = splicingMap.size() [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_45 $$ Object modelInfoArray[] = getModelAgreedSiteCnt(intron, cgff, geneModel, transcriptGff) [CD]
Line_36 $$ GenomeInterval intron = (GenomeInterval) intronIterator.next() --> Line_45 $$ Object modelInfoArray[] = getModelAgreedSiteCnt(intron, cgff, geneModel, transcriptGff) [FD]
Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) --> Line_45 $$ Object modelInfoArray[] = getModelAgreedSiteCnt(intron, cgff, geneModel, transcriptGff) [FD]
Line_4 $$ CanonicalGFF cgff = new CanonicalGFF(gffFilename) --> Line_45 $$ Object modelInfoArray[] = getModelAgreedSiteCnt(intron, cgff, geneModel, transcriptGff) [FD]
Line_5 $$ CanonicalGFF geneModel = new CanonicalGFF(modelFilename) --> Line_45 $$ Object modelInfoArray[] = getModelAgreedSiteCnt(intron, cgff, geneModel, transcriptGff) [FD]
Line_6 $$ CanonicalGFF transcriptGff = new CanonicalGFF(transcriptFilename) --> Line_45 $$ Object modelInfoArray[] = getModelAgreedSiteCnt(intron, cgff, geneModel, transcriptGff) [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_46 $$ int modelAgreedSiteCnt = (Integer) modelInfoArray[0] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_47 $$ int maxAgreedTransSiteCnt = (Integer) modelInfoArray[1] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_48 $$ boolean containedBySomeGene = (Boolean) modelInfoArray[2] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_49 $$ int numIntersectingGenes = (Integer) modelInfoArray[3] [CD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_50 $$ int distance = intron.getStop() - intron.getStart() [CD]
Line_36 $$ GenomeInterval intron = (GenomeInterval) intronIterator.next() --> Line_50 $$ int distance = intron.getStop() - intron.getStart() [FD]
Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) --> Line_50 $$ int distance = intron.getStop() - intron.getStart() [FD]
Line_35 $$ for (Iterator intronIterator = intronReadCntMap.keySet().iterator(); intronIterator.hasNext(); ) --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [CD]
Line_34 $$ FileWriter fw = new FileWriter(outFilename) --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_36 $$ GenomeInterval intron = (GenomeInterval) intronIterator.next() --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_20 $$ GenomeInterval intron = new GenomeInterval(chr, start, stop) --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_50 $$ int distance = intron.getStop() - intron.getStart() --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_37 $$ int readCnt = ((Integer) intronReadCntMap.get(intron)).intValue() --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_21 $$ int readCnt = Integer.parseInt(tokens[3]) --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_38 $$ TreeMap splicingMap = (TreeMap) intronSplicingPosMap.get(intron) --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_24 $$ Map splicingMap = getSplicingMap(splicingMapStr) --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_44 $$ int positionCnt = splicingMap.size() --> Line_51 $$ fw.write(intron.getChr() + ":" + intron.getStart() + ".." + intron.getStop() + "\t" + distance + "\t" + readCnt + "\t" + splicingMap + "\t" + probabilityEvaluation(readLength, distance, readCnt, splicingMap, positionCnt) + "\t" + ksAccepted + "\t" + testK + "\t" + standardK1 + "\t" + standardK2 + "\t" + positionCnt + "\t" + modelAgreedSiteCnt + "\t" + maxAgreedTransSiteCnt + "\t" + containedBySomeGene + "\t" + numIntersectingGenes + "\n") [FD]
Line_34 $$ FileWriter fw = new FileWriter(outFilename) --> Line_53 $$ fw.close() [FD]
