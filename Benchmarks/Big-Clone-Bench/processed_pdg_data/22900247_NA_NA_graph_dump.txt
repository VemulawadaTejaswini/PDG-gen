Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_3 $$ File[] sourceFiles = sourceDirectory.listFiles(FILE_FILTER) [CD]
Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_3 $$ File[] sourceFiles = sourceDirectory.listFiles(FILE_FILTER) [FD]
Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_4 $$ File[] sourceDirectories = sourceDirectory.listFiles(DIRECTORY_FILTER) [CD]
Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_4 $$ File[] sourceDirectories = sourceDirectory.listFiles(DIRECTORY_FILTER) [FD]
Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_5 $$ targetDirectory.mkdirs() [CD]
Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_5 $$ targetDirectory.mkdirs() [FD]
Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_6 $$ if (sourceFiles != null && sourceFiles.length > 0) [CD]
Line_6 $$ if (sourceFiles != null && sourceFiles.length > 0) --> Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) [CD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_8 $$ File sourceFile = sourceFiles[i] [CD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_9 $$ FileInputStream fis = new FileInputStream(sourceFile) [CD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_10 $$ FileOutputStream fos = new FileOutputStream(targetDirectory + File.separator + sourceFile.getName()) [CD]
Line_8 $$ File sourceFile = sourceFiles[i] --> Line_10 $$ FileOutputStream fos = new FileOutputStream(targetDirectory + File.separator + sourceFile.getName()) [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_11 $$ FileChannel fcin = fis.getChannel() [CD]
Line_9 $$ FileInputStream fis = new FileInputStream(sourceFile) --> Line_11 $$ FileChannel fcin = fis.getChannel() [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_12 $$ FileChannel fcout = fos.getChannel() [CD]
Line_10 $$ FileOutputStream fos = new FileOutputStream(targetDirectory + File.separator + sourceFile.getName()) --> Line_12 $$ FileChannel fcout = fos.getChannel() [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_13 $$ ByteBuffer buf = ByteBuffer.allocateDirect(8192) [CD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_14 $$ long size = fcin.size() [CD]
Line_11 $$ FileChannel fcin = fis.getChannel() --> Line_14 $$ long size = fcin.size() [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_15 $$ long n = 0 [CD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_16 $$ while (n < size) [CD]
Line_15 $$ long n = 0 --> Line_16 $$ while (n < size) [FD]
Line_14 $$ long size = fcin.size() --> Line_16 $$ while (n < size) [FD]
Line_16 $$ while (n < size) --> Line_17 $$ buf.clear() [CD]
Line_13 $$ ByteBuffer buf = ByteBuffer.allocateDirect(8192) --> Line_17 $$ buf.clear() [FD]
Line_16 $$ while (n < size) --> Line_18 $$ if (fcin.read(buf) < 0) [CD]
Line_11 $$ FileChannel fcin = fis.getChannel() --> Line_18 $$ if (fcin.read(buf) < 0) [FD]
Line_13 $$ ByteBuffer buf = ByteBuffer.allocateDirect(8192) --> Line_18 $$ if (fcin.read(buf) < 0) [FD]
Line_16 $$ while (n < size) --> Line_21 $$ buf.flip() [CD]
Line_13 $$ ByteBuffer buf = ByteBuffer.allocateDirect(8192) --> Line_21 $$ buf.flip() [FD]
Line_16 $$ while (n < size) --> Line_22 $$ n += fcout.write(buf) [CD]
Line_15 $$ long n = 0 --> Line_22 $$ n += fcout.write(buf) [FD]
Line_12 $$ FileChannel fcout = fos.getChannel() --> Line_22 $$ n += fcout.write(buf) [FD]
Line_13 $$ ByteBuffer buf = ByteBuffer.allocateDirect(8192) --> Line_22 $$ n += fcout.write(buf) [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_24 $$ fcin.close() [CD]
Line_11 $$ FileChannel fcin = fis.getChannel() --> Line_24 $$ fcin.close() [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_25 $$ fcout.close() [CD]
Line_12 $$ FileChannel fcout = fos.getChannel() --> Line_25 $$ fcout.close() [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_26 $$ fis.close() [CD]
Line_9 $$ FileInputStream fis = new FileInputStream(sourceFile) --> Line_26 $$ fis.close() [FD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_27 $$ fos.close() [CD]
Line_10 $$ FileOutputStream fos = new FileOutputStream(targetDirectory + File.separator + sourceFile.getName()) --> Line_27 $$ fos.close() [FD]
Line_2 $$ public static void copyDirectory(File sourceDirectory, File targetDirectory) throws IOException --> Line_30 $$ if (sourceDirectories != null && sourceDirectories.length > 0) [CD]
Line_30 $$ if (sourceDirectories != null && sourceDirectories.length > 0) --> Line_31 $$ for (int i = 0; i < sourceDirectories.length; i++) [CD]
Line_7 $$ for (int i = 0; i < sourceFiles.length; i++) --> Line_31 $$ for (int i = 0; i < sourceDirectories.length; i++) [FD]
Line_31 $$ for (int i = 0; i < sourceDirectories.length; i++) --> Line_32 $$ File directory = sourceDirectories[i] [CD]
Line_31 $$ for (int i = 0; i < sourceDirectories.length; i++) --> Line_33 $$ File newTargetDirectory = new File(targetDirectory, directory.getName()) [CD]
Line_32 $$ File directory = sourceDirectories[i] --> Line_33 $$ File newTargetDirectory = new File(targetDirectory, directory.getName()) [FD]
Line_31 $$ for (int i = 0; i < sourceDirectories.length; i++) --> Line_34 $$ copyDirectory(directory, newTargetDirectory) [CD]
Line_32 $$ File directory = sourceDirectories[i] --> Line_34 $$ copyDirectory(directory, newTargetDirectory) [FD]
Line_33 $$ File newTargetDirectory = new File(targetDirectory, directory.getName()) --> Line_34 $$ copyDirectory(directory, newTargetDirectory) [FD]
Line_22 $$ n += fcout.write(buf) --> Line_16 $$ while (n < size) [FD]
