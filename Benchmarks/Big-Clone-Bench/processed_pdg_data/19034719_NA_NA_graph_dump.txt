Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_3 $$ File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator))) [CD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_3 $$ File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator))) [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_4 $$ targetDirectory.mkdirs() [CD]
Line_3 $$ File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator))) --> Line_4 $$ targetDirectory.mkdirs() [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_5 $$ File file = new File(sourceFileName) [CD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_6 $$ FileInputStream fis = new FileInputStream(file) [CD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_7 $$ FileChannel fc = fis.getChannel() [CD]
Line_6 $$ FileInputStream fis = new FileInputStream(file) --> Line_7 $$ FileChannel fc = fis.getChannel() [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_8 $$ int sz = (int) fc.size() [CD]
Line_7 $$ FileChannel fc = fis.getChannel() --> Line_8 $$ int sz = (int) fc.size() [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_9 $$ MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz) [CD]
Line_7 $$ FileChannel fc = fis.getChannel() --> Line_9 $$ MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz) [FD]
Line_8 $$ int sz = (int) fc.size() --> Line_9 $$ MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz) [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_10 $$ Charset charset = Charset.forName("ISO-8859-15") [CD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_11 $$ CharsetDecoder decoder = charset.newDecoder() [CD]
Line_10 $$ Charset charset = Charset.forName("ISO-8859-15") --> Line_11 $$ CharsetDecoder decoder = charset.newDecoder() [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_12 $$ CharBuffer cb = decoder.decode(bb) [CD]
Line_11 $$ CharsetDecoder decoder = charset.newDecoder() --> Line_12 $$ CharBuffer cb = decoder.decode(bb) [FD]
Line_9 $$ MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz) --> Line_12 $$ CharBuffer cb = decoder.decode(bb) [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_13 $$ String inString = cb.toString() [CD]
Line_12 $$ CharBuffer cb = decoder.decode(bb) --> Line_13 $$ String inString = cb.toString() [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_14 $$ fis.close() [CD]
Line_6 $$ FileInputStream fis = new FileInputStream(file) --> Line_14 $$ fis.close() [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_15 $$ fc.close() [CD]
Line_7 $$ FileChannel fc = fis.getChannel() --> Line_15 $$ fc.close() [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_16 $$ Set<String> keys = values.keySet() [CD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_16 $$ Set<String> keys = values.keySet() [FD]
Line_13 $$ String inString = cb.toString() --> Line_18 $$ inString = inString.replace((String) k, escape(values.get(k))) [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_18 $$ inString = inString.replace((String) k, escape(values.get(k))) [FD]
Line_17 $$ for (Object k : keys) --> Line_18 $$ inString = inString.replace((String) k, escape(values.get(k))) [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_20 $$ FileOutputStream fos = new FileOutputStream(targetFileName) [CD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_21 $$ PrintStream ps = new PrintStream(fos) [CD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_22 $$ ps.print(inString) [CD]
Line_21 $$ PrintStream ps = new PrintStream(fos) --> Line_22 $$ ps.print(inString) [FD]
Line_13 $$ String inString = cb.toString() --> Line_22 $$ ps.print(inString) [FD]
Line_18 $$ inString = inString.replace((String) k, escape(values.get(k))) --> Line_22 $$ ps.print(inString) [FD]
Line_2 $$ public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException --> Line_23 $$ fos.close() [CD]
Line_20 $$ FileOutputStream fos = new FileOutputStream(targetFileName) --> Line_23 $$ fos.close() [FD]
