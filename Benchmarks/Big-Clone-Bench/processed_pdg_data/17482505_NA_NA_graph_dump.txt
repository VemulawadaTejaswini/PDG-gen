Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_3 $$ PermissionAPI perAPI = APILocator.getPermissionAPI() [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_4 $$ Logger.debug(this.getClass(), "createResource") [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_5 $$ resourceUri = stripMapping(resourceUri) [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_5 $$ resourceUri = stripMapping(resourceUri) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_6 $$ String hostName = getHostname(resourceUri) [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_6 $$ String hostName = getHostname(resourceUri) [FD]
Line_5 $$ resourceUri = stripMapping(resourceUri) --> Line_6 $$ String hostName = getHostname(resourceUri) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_7 $$ String path = getPath(resourceUri) [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_7 $$ String path = getPath(resourceUri) [FD]
Line_5 $$ resourceUri = stripMapping(resourceUri) --> Line_7 $$ String path = getPath(resourceUri) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_8 $$ String folderName = getFolderName(path) [CD]
Line_7 $$ String path = getPath(resourceUri) --> Line_8 $$ String folderName = getFolderName(path) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_9 $$ String fileName = getFileName(path) [CD]
Line_7 $$ String path = getPath(resourceUri) --> Line_9 $$ String fileName = getFileName(path) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_10 $$ fileName = deleteSpecialCharacter(fileName) [CD]
Line_9 $$ String fileName = getFileName(path) --> Line_10 $$ fileName = deleteSpecialCharacter(fileName) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_11 $$ if (fileName.startsWith(".")) [CD]
Line_9 $$ String fileName = getFileName(path) --> Line_11 $$ if (fileName.startsWith(".")) [FD]
Line_10 $$ fileName = deleteSpecialCharacter(fileName) --> Line_11 $$ if (fileName.startsWith(".")) [FD]
Line_11 $$ if (fileName.startsWith(".")) --> Line_12 $$ return [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_14 $$ Host host = HostFactory.getHostByHostName(hostName) [CD]
Line_6 $$ String hostName = getHostname(resourceUri) --> Line_14 $$ Host host = HostFactory.getHostByHostName(hostName) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) [CD]
Line_8 $$ String folderName = getFolderName(path) --> Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) [FD]
Line_14 $$ Host host = HostFactory.getHostByHostName(hostName) --> Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_16 $$ boolean hasPermission = perAPI.doesUserHavePermission(folder, PERMISSION_WRITE, user, false) [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_16 $$ boolean hasPermission = perAPI.doesUserHavePermission(folder, PERMISSION_WRITE, user, false) [FD]
Line_3 $$ PermissionAPI perAPI = APILocator.getPermissionAPI() --> Line_16 $$ boolean hasPermission = perAPI.doesUserHavePermission(folder, PERMISSION_WRITE, user, false) [FD]
Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) --> Line_16 $$ boolean hasPermission = perAPI.doesUserHavePermission(folder, PERMISSION_WRITE, user, false) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_17 $$ if (hasPermission) [CD]
Line_17 $$ if (hasPermission) --> Line_18 $$ if (!checkFolderFilter(folder, fileName)) [CD]
Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) --> Line_18 $$ if (!checkFolderFilter(folder, fileName)) [FD]
Line_9 $$ String fileName = getFileName(path) --> Line_18 $$ if (!checkFolderFilter(folder, fileName)) [FD]
Line_10 $$ fileName = deleteSpecialCharacter(fileName) --> Line_18 $$ if (!checkFolderFilter(folder, fileName)) [FD]
Line_17 $$ if (hasPermission) --> Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) [CD]
Line_14 $$ Host host = HostFactory.getHostByHostName(hostName) --> Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) [FD]
Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) --> Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_22 $$ File file = new File() [CD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_23 $$ file.setTitle(fileName) [CD]
Line_22 $$ File file = new File() --> Line_23 $$ file.setTitle(fileName) [FD]
Line_9 $$ String fileName = getFileName(path) --> Line_23 $$ file.setTitle(fileName) [FD]
Line_10 $$ fileName = deleteSpecialCharacter(fileName) --> Line_23 $$ file.setTitle(fileName) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_24 $$ file.setFileName(fileName) [CD]
Line_22 $$ File file = new File() --> Line_24 $$ file.setFileName(fileName) [FD]
Line_9 $$ String fileName = getFileName(path) --> Line_24 $$ file.setFileName(fileName) [FD]
Line_10 $$ fileName = deleteSpecialCharacter(fileName) --> Line_24 $$ file.setFileName(fileName) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_25 $$ file.setShowOnMenu(false) [CD]
Line_22 $$ File file = new File() --> Line_25 $$ file.setShowOnMenu(false) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_26 $$ file.setLive(publish) [CD]
Line_22 $$ File file = new File() --> Line_26 $$ file.setLive(publish) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_26 $$ file.setLive(publish) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_27 $$ file.setWorking(true) [CD]
Line_22 $$ File file = new File() --> Line_27 $$ file.setWorking(true) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_28 $$ file.setDeleted(false) [CD]
Line_22 $$ File file = new File() --> Line_28 $$ file.setDeleted(false) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_29 $$ file.setLocked(false) [CD]
Line_22 $$ File file = new File() --> Line_29 $$ file.setLocked(false) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_30 $$ file.setModDate(new Date()) [CD]
Line_22 $$ File file = new File() --> Line_30 $$ file.setModDate(new Date()) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_31 $$ String mimeType = FileFactory.getMimeType(fileName) [CD]
Line_9 $$ String fileName = getFileName(path) --> Line_31 $$ String mimeType = FileFactory.getMimeType(fileName) [FD]
Line_10 $$ fileName = deleteSpecialCharacter(fileName) --> Line_31 $$ String mimeType = FileFactory.getMimeType(fileName) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_32 $$ file.setMimeType(mimeType) [CD]
Line_22 $$ File file = new File() --> Line_32 $$ file.setMimeType(mimeType) [FD]
Line_31 $$ String mimeType = FileFactory.getMimeType(fileName) --> Line_32 $$ file.setMimeType(mimeType) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_33 $$ String author = user.getFullName() [CD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_33 $$ String author = user.getFullName() [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_34 $$ file.setAuthor(author) [CD]
Line_22 $$ File file = new File() --> Line_34 $$ file.setAuthor(author) [FD]
Line_33 $$ String author = user.getFullName() --> Line_34 $$ file.setAuthor(author) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_35 $$ file.setModUser(author) [CD]
Line_22 $$ File file = new File() --> Line_35 $$ file.setModUser(author) [FD]
Line_33 $$ String author = user.getFullName() --> Line_35 $$ file.setModUser(author) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_36 $$ file.setSortOrder(0) [CD]
Line_22 $$ File file = new File() --> Line_36 $$ file.setSortOrder(0) [FD]
Line_21 $$ if (host.getInode() != 0 && folder.getInode() != 0) --> Line_37 $$ file.setShowOnMenu(false) [CD]
Line_22 $$ File file = new File() --> Line_37 $$ file.setShowOnMenu(false) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_40 $$ if (!isResource(resourceUri)) [FD]
Line_5 $$ resourceUri = stripMapping(resourceUri) --> Line_40 $$ if (!isResource(resourceUri)) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_41 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, publish) [CD]
Line_22 $$ File file = new File() --> Line_41 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, publish) [FD]
Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) --> Line_41 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, publish) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_41 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, publish) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_42 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) [CD]
Line_39 $$ Identifier identifier = null --> Line_42 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) [FD]
Line_22 $$ File file = new File() --> Line_42 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_44 $$ File actualFile = FileFactory.getFileByURI(path, host, false) [CD]
Line_7 $$ String path = getPath(resourceUri) --> Line_44 $$ File actualFile = FileFactory.getFileByURI(path, host, false) [FD]
Line_14 $$ Host host = HostFactory.getHostByHostName(hostName) --> Line_44 $$ File actualFile = FileFactory.getFileByURI(path, host, false) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_45 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(actualFile) [CD]
Line_39 $$ Identifier identifier = null --> Line_45 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(actualFile) [FD]
Line_42 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) --> Line_45 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(actualFile) [FD]
Line_44 $$ File actualFile = FileFactory.getFileByURI(path, host, false) --> Line_45 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(actualFile) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_46 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, identifier, false, false) [CD]
Line_22 $$ File file = new File() --> Line_46 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, identifier, false, false) [FD]
Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) --> Line_46 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, identifier, false, false) [FD]
Line_39 $$ Identifier identifier = null --> Line_46 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, identifier, false, false) [FD]
Line_42 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) --> Line_46 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, identifier, false, false) [FD]
Line_45 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(actualFile) --> Line_46 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, identifier, false, false) [FD]
Line_2 $$ public void createResource(String resourceUri, boolean publish, User user) throws IOException --> Line_46 $$ WebAssetFactory.createAsset(file, user.getUserId(), folder, identifier, false, false) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_47 $$ WebAssetFactory.publishAsset(file) [CD]
Line_22 $$ File file = new File() --> Line_47 $$ WebAssetFactory.publishAsset(file) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_48 $$ String assetsPath = FileFactory.getRealAssetsRootPath() [CD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_49 $$ new java.io.File(assetsPath).mkdir() [CD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_50 $$ java.io.File workingIOFile = FileFactory.getAssetIOFile(file) [CD]
Line_22 $$ File file = new File() --> Line_50 $$ java.io.File workingIOFile = FileFactory.getAssetIOFile(file) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_51 $$ DotResourceCache vc = CacheLocator.getVeloctyResourceCache() [CD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_52 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingIOFile.getPath()) [CD]
Line_51 $$ DotResourceCache vc = CacheLocator.getVeloctyResourceCache() --> Line_52 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingIOFile.getPath()) [FD]
Line_50 $$ java.io.File workingIOFile = FileFactory.getAssetIOFile(file) --> Line_52 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingIOFile.getPath()) [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_53 $$ if (file != null && file.getInode() > 0) [CD]
Line_22 $$ File file = new File() --> Line_53 $$ if (file != null && file.getInode() > 0) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_54 $$ byte[] currentData = new byte[0] [CD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_55 $$ FileInputStream is = new FileInputStream(workingIOFile) [CD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_56 $$ int size = is.available() [CD]
Line_55 $$ FileInputStream is = new FileInputStream(workingIOFile) --> Line_56 $$ int size = is.available() [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_57 $$ currentData = new byte[size] [CD]
Line_54 $$ byte[] currentData = new byte[0] --> Line_57 $$ currentData = new byte[size] [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_58 $$ is.read(currentData) [CD]
Line_55 $$ FileInputStream is = new FileInputStream(workingIOFile) --> Line_58 $$ is.read(currentData) [FD]
Line_54 $$ byte[] currentData = new byte[0] --> Line_58 $$ is.read(currentData) [FD]
Line_57 $$ currentData = new byte[size] --> Line_58 $$ is.read(currentData) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_59 $$ java.io.File newVersionFile = FileFactory.getAssetIOFile(file) [CD]
Line_22 $$ File file = new File() --> Line_59 $$ java.io.File newVersionFile = FileFactory.getAssetIOFile(file) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_60 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + newVersionFile.getPath()) [CD]
Line_51 $$ DotResourceCache vc = CacheLocator.getVeloctyResourceCache() --> Line_60 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + newVersionFile.getPath()) [FD]
Line_59 $$ java.io.File newVersionFile = FileFactory.getAssetIOFile(file) --> Line_60 $$ vc.remove(ResourceManager.RESOURCE_TEMPLATE + newVersionFile.getPath()) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_61 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() [CD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_62 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length) [CD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_63 $$ currentDataBuffer.put(currentData) [CD]
Line_62 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length) --> Line_63 $$ currentDataBuffer.put(currentData) [FD]
Line_54 $$ byte[] currentData = new byte[0] --> Line_63 $$ currentDataBuffer.put(currentData) [FD]
Line_57 $$ currentData = new byte[size] --> Line_63 $$ currentDataBuffer.put(currentData) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_64 $$ currentDataBuffer.position(0) [CD]
Line_62 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length) --> Line_64 $$ currentDataBuffer.position(0) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_65 $$ channelTo.write(currentDataBuffer) [CD]
Line_61 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() --> Line_65 $$ channelTo.write(currentDataBuffer) [FD]
Line_62 $$ ByteBuffer currentDataBuffer = ByteBuffer.allocate(currentData.length) --> Line_65 $$ channelTo.write(currentDataBuffer) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_66 $$ channelTo.force(false) [CD]
Line_61 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() --> Line_66 $$ channelTo.force(false) [FD]
Line_53 $$ if (file != null && file.getInode() > 0) --> Line_67 $$ channelTo.close() [CD]
Line_61 $$ FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel() --> Line_67 $$ channelTo.close() [FD]
Line_40 $$ if (!isResource(resourceUri)) --> Line_69 $$ java.util.List<Tree> parentTrees = TreeFactory.getTreesByChild(file) [CD]
Line_22 $$ File file = new File() --> Line_69 $$ java.util.List<Tree> parentTrees = TreeFactory.getTreesByChild(file) [FD]
Line_70 $$ for (Tree tree : parentTrees) --> Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) [FD]
Line_22 $$ File file = new File() --> Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) [FD]
Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) --> Line_72 $$ if (newTree.getChild() == 0) [FD]
Line_72 $$ if (newTree.getChild() == 0) --> Line_73 $$ newTree.setParent(tree.getParent()) [CD]
Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) --> Line_73 $$ newTree.setParent(tree.getParent()) [FD]
Line_70 $$ for (Tree tree : parentTrees) --> Line_73 $$ newTree.setParent(tree.getParent()) [FD]
Line_72 $$ if (newTree.getChild() == 0) --> Line_74 $$ newTree.setChild(file.getInode()) [CD]
Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) --> Line_74 $$ newTree.setChild(file.getInode()) [FD]
Line_22 $$ File file = new File() --> Line_74 $$ newTree.setChild(file.getInode()) [FD]
Line_72 $$ if (newTree.getChild() == 0) --> Line_75 $$ newTree.setRelationType(tree.getRelationType()) [CD]
Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) --> Line_75 $$ newTree.setRelationType(tree.getRelationType()) [FD]
Line_70 $$ for (Tree tree : parentTrees) --> Line_75 $$ newTree.setRelationType(tree.getRelationType()) [FD]
Line_72 $$ if (newTree.getChild() == 0) --> Line_76 $$ newTree.setTreeOrder(0) [CD]
Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) --> Line_76 $$ newTree.setTreeOrder(0) [FD]
Line_72 $$ if (newTree.getChild() == 0) --> Line_77 $$ TreeFactory.saveTree(newTree) [CD]
Line_71 $$ Tree newTree = TreeFactory.getTree(tree.getParent(), file.getInode()) --> Line_77 $$ TreeFactory.saveTree(newTree) [FD]
Line_3 $$ PermissionAPI perAPI = APILocator.getPermissionAPI() --> Line_81 $$ List<Permission> permissions = perAPI.getPermissions(folder) [FD]
Line_15 $$ Folder folder = FolderFactory.getFolderByPath(folderName, host) --> Line_81 $$ List<Permission> permissions = perAPI.getPermissions(folder) [FD]
Line_83 $$ Permission filePermission = new Permission() --> Line_84 $$ filePermission.setPermission(permission.getPermission()) [FD]
Line_82 $$ for (Permission permission : permissions) --> Line_84 $$ filePermission.setPermission(permission.getPermission()) [FD]
Line_83 $$ Permission filePermission = new Permission() --> Line_85 $$ filePermission.setRoleId(permission.getRoleId()) [FD]
Line_82 $$ for (Permission permission : permissions) --> Line_85 $$ filePermission.setRoleId(permission.getRoleId()) [FD]
Line_83 $$ Permission filePermission = new Permission() --> Line_86 $$ filePermission.setInode(identifier.getInode()) [FD]
Line_39 $$ Identifier identifier = null --> Line_86 $$ filePermission.setInode(identifier.getInode()) [FD]
Line_42 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(file) --> Line_86 $$ filePermission.setInode(identifier.getInode()) [FD]
Line_45 $$ identifier = IdentifierCache.getIdentifierFromIdentifierCache(actualFile) --> Line_86 $$ filePermission.setInode(identifier.getInode()) [FD]
Line_3 $$ PermissionAPI perAPI = APILocator.getPermissionAPI() --> Line_87 $$ perAPI.save(filePermission) [FD]
Line_83 $$ Permission filePermission = new Permission() --> Line_87 $$ perAPI.save(filePermission) [FD]
