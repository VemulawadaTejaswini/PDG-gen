Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_3 $$ if (username == null || username.length() == 0) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_3 $$ if (username == null || username.length() == 0) [FD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_4 $$ if (password == null || password.length() == 0) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_4 $$ if (password == null || password.length() == 0) [FD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_5 $$ if (description == null || description.length() == 0) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_5 $$ if (description == null || description.length() == 0) [FD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_6 $$ if (tags == null || tags.length() == 0) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_6 $$ if (tags == null || tags.length() == 0) [FD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_7 $$ if (pseudoFileName == null || pseudoFileName.endsWith(".gpx")) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_7 $$ if (pseudoFileName == null || pseudoFileName.endsWith(".gpx")) [FD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_8 $$ new Thread(new Runnable() [CD]
Line_8 $$ new Thread(new Runnable() --> Line_10 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints)) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_10 $$ if (!Util.isSufficienDataForUpload(recordedGeoPoints)) [FD]
Line_8 $$ new Thread(new Runnable() --> Line_11 $$ final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes()) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_11 $$ final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes()) [FD]
Line_8 $$ new Thread(new Runnable() --> Line_12 $$ String tagsToUse = tags [CD]
Line_8 $$ new Thread(new Runnable() --> Line_13 $$ tagsToUse = tagsToUse + " " + autoTagFormat.format(new GregorianCalendar().getTime()) [CD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_13 $$ tagsToUse = tagsToUse + " " + autoTagFormat.format(new GregorianCalendar().getTime()) [FD]
Line_12 $$ String tagsToUse = tags --> Line_13 $$ tagsToUse = tagsToUse + " " + autoTagFormat.format(new GregorianCalendar().getTime()) [FD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_15 $$ final String urlDesc = (description == null) ? DEFAULT_DESCRIPTION : description.replaceAll("\\.;&?,/", "_") [FD]
Line_12 $$ String tagsToUse = tags --> Line_16 $$ final String urlTags = (tagsToUse == null) ? DEFAULT_TAGS : tagsToUse.replaceAll("\\\\.;&?,/", "_") [FD]
Line_13 $$ tagsToUse = tagsToUse + " " + autoTagFormat.format(new GregorianCalendar().getTime()) --> Line_16 $$ final String urlTags = (tagsToUse == null) ? DEFAULT_TAGS : tagsToUse.replaceAll("\\\\.;&?,/", "_") [FD]
Line_17 $$ final URL url = new URL("http://www.openstreetmap.org/api/" + API_VERSION + "/gpx/create") --> Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_19 $$ con.setConnectTimeout(15000) [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_20 $$ con.setRequestMethod("POST") [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_21 $$ con.setDoOutput(true) [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_22 $$ con.addRequestProperty("Authorization", "Basic " + encodeBase64(username + ":" + password)) [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_23 $$ con.addRequestProperty("Content-Type", "multipart/form-data; boundary=" + BOUNDARY) [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_24 $$ con.addRequestProperty("Connection", "close") [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_25 $$ con.addRequestProperty("Expect", "") [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_26 $$ con.connect() [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) [FD]
Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) --> Line_28 $$ writeContentDispositionFile(out, "file", gpxInputStream, pseudoFileName) [FD]
Line_11 $$ final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes()) --> Line_28 $$ writeContentDispositionFile(out, "file", gpxInputStream, pseudoFileName) [FD]
Line_2 $$ public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) --> Line_28 $$ writeContentDispositionFile(out, "file", gpxInputStream, pseudoFileName) [FD]
Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) --> Line_29 $$ writeContentDisposition(out, "description", urlDesc) [FD]
Line_15 $$ final String urlDesc = (description == null) ? DEFAULT_DESCRIPTION : description.replaceAll("\\.;&?,/", "_") --> Line_29 $$ writeContentDisposition(out, "description", urlDesc) [FD]
Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) --> Line_30 $$ writeContentDisposition(out, "tags", urlTags) [FD]
Line_16 $$ final String urlTags = (tagsToUse == null) ? DEFAULT_TAGS : tagsToUse.replaceAll("\\\\.;&?,/", "_") --> Line_30 $$ writeContentDisposition(out, "tags", urlTags) [FD]
Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) --> Line_31 $$ writeContentDisposition(out, "public", "1") [FD]
Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) --> Line_32 $$ out.writeBytes("--" + BOUNDARY + "--" + LINE_END) [FD]
Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) --> Line_33 $$ out.flush() [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_34 $$ final int retCode = con.getResponseCode() [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_35 $$ String retMsg = con.getResponseMessage() [FD]
Line_34 $$ final int retCode = con.getResponseCode() --> Line_36 $$ if (retCode != 200) [FD]
Line_36 $$ if (retCode != 200) --> Line_37 $$ retMsg += "\n" + con.getHeaderField("Error") [CD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_37 $$ retMsg += "\n" + con.getHeaderField("Error") [FD]
Line_35 $$ String retMsg = con.getResponseMessage() --> Line_37 $$ retMsg += "\n" + con.getHeaderField("Error") [FD]
Line_36 $$ if (retCode != 200) --> Line_38 $$ con.disconnect() [CD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_38 $$ con.disconnect() [FD]
Line_27 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream())) --> Line_41 $$ out.close() [FD]
Line_18 $$ final HttpURLConnection con = (HttpURLConnection) url.openConnection() --> Line_42 $$ con.disconnect() [FD]
