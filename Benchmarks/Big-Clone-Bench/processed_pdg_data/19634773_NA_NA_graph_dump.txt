Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_3 $$ log.debug("Start MemberPortletActionMethod.processAction()") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_4 $$ MemberProcessingActionRequest mp = null [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_8 $$ String moduleName = RequestTools.getString(actionRequest, MemberConstants.MEMBER_MODULE_PARAM) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_9 $$ String actionName = RequestTools.getString(actionRequest, MemberConstants.MEMBER_ACTION_PARAM) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_10 $$ String subActionName = RequestTools.getString(actionRequest, MemberConstants.MEMBER_SUBACTION_PARAM).trim() [FD]
Line_11 $$ if (log.isDebugEnabled()) --> Line_12 $$ Map parameterMap = actionRequest.getParameterMap() [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_12 $$ Map parameterMap = actionRequest.getParameterMap() [FD]
Line_11 $$ if (log.isDebugEnabled()) --> Line_13 $$ if (!parameterMap.entrySet().isEmpty()) [CD]
Line_12 $$ Map parameterMap = actionRequest.getParameterMap() --> Line_13 $$ if (!parameterMap.entrySet().isEmpty()) [FD]
Line_13 $$ if (!parameterMap.entrySet().isEmpty()) --> Line_14 $$ log.debug("Action request parameter") [CD]
Line_12 $$ Map parameterMap = actionRequest.getParameterMap() --> Line_15 $$ for (Object o : parameterMap.entrySet()) [FD]
Line_13 $$ if (!parameterMap.entrySet().isEmpty()) --> Line_20 $$ log.debug("Action request map is empty") [CD]
Line_11 $$ if (log.isDebugEnabled()) --> Line_22 $$ log.debug("   Point #4.1 module '" + moduleName + "'") [CD]
Line_11 $$ if (log.isDebugEnabled()) --> Line_23 $$ log.debug("   Point #4.2 action '" + actionName + "'") [CD]
Line_11 $$ if (log.isDebugEnabled()) --> Line_24 $$ log.debug("   Point #4.3 subAction '" + subActionName + "'") [CD]
Line_26 $$ if (mp.mod == null) --> Line_27 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Point #4.2. Module '" + moduleName + "' not found") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_27 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Point #4.2. Module '" + moduleName + "' not found") [FD]
Line_26 $$ if (mp.mod == null) --> Line_28 $$ return [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_30 $$ if (mp.mod.getType() != null && mp.mod.getType().getType() == ModuleTypeTypeType.LOOKUP_TYPE && (mp.getFromParam() == null || mp.getFromParam().length() == 0)) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_30 $$ if (mp.mod.getType() != null && mp.mod.getType().getType() == ModuleTypeTypeType.LOOKUP_TYPE && (mp.getFromParam() == null || mp.getFromParam().length() == 0)) [FD]
Line_30 $$ if (mp.mod.getType() != null && mp.mod.getType().getType() == ModuleTypeTypeType.LOOKUP_TYPE && (mp.getFromParam() == null || mp.getFromParam().length() == 0)) --> Line_31 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Point #4.4. Module " + moduleName + " is lookup module") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_31 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Point #4.4. Module " + moduleName + " is lookup module") [FD]
Line_30 $$ if (mp.mod.getType() != null && mp.mod.getType().getType() == ModuleTypeTypeType.LOOKUP_TYPE && (mp.getFromParam() == null || mp.getFromParam().length() == 0)) --> Line_32 $$ return [CD]
Line_9 $$ String actionName = RequestTools.getString(actionRequest, MemberConstants.MEMBER_ACTION_PARAM) --> Line_34 $$ int actionType = ContentTypeActionType.valueOf(actionName).getType() [FD]
Line_35 $$ if (log.isDebugEnabled()) --> Line_36 $$ log.debug("action name " + actionName) [CD]
Line_35 $$ if (log.isDebugEnabled()) --> Line_37 $$ log.debug("ContentTypeActionType " + ContentTypeActionType.valueOf(actionName).toString()) [CD]
Line_9 $$ String actionName = RequestTools.getString(actionRequest, MemberConstants.MEMBER_ACTION_PARAM) --> Line_37 $$ log.debug("ContentTypeActionType " + ContentTypeActionType.valueOf(actionName).toString()) [FD]
Line_35 $$ if (log.isDebugEnabled()) --> Line_38 $$ log.debug("action type " + actionType) [CD]
Line_34 $$ int actionType = ContentTypeActionType.valueOf(actionName).getType() --> Line_40 $$ mp.content = MemberServiceClass.getContent(mp.mod, actionType) [FD]
Line_41 $$ if (mp.content == null) --> Line_42 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Module: '" + moduleName + "', action '" + actionName + "', not found") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_42 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Module: '" + moduleName + "', action '" + actionName + "', not found") [FD]
Line_41 $$ if (mp.content == null) --> Line_43 $$ return [CD]
Line_45 $$ if (log.isDebugEnabled()) --> Line_46 $$ log.debug("Debug. Unmarshal sqlCache object") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_51 $$ if (!MemberServiceClass.checkRole(actionRequest, mp.content)) [FD]
Line_51 $$ if (!MemberServiceClass.checkRole(actionRequest, mp.content)) --> Line_52 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Access denied") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_52 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Access denied") [FD]
Line_51 $$ if (!MemberServiceClass.checkRole(actionRequest, mp.content)) --> Line_53 $$ return [CD]
Line_55 $$ if (log.isDebugEnabled()) --> Line_56 $$ log.debug("Unmarshal sqlCache object") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_61 $$ initRenderParameters(actionRequest.getParameterMap(), actionResponse) [FD]
Line_10 $$ String subActionName = RequestTools.getString(actionRequest, MemberConstants.MEMBER_SUBACTION_PARAM).trim() --> Line_62 $$ if ("commit".equalsIgnoreCase(subActionName)) [FD]
Line_62 $$ if ("commit".equalsIgnoreCase(subActionName)) --> Line_63 $$ DatabaseAdapter dbDyn = null [CD]
Line_62 $$ if ("commit".equalsIgnoreCase(subActionName)) --> Line_64 $$ PreparedStatement ps = null [CD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_66 $$ dbDyn = mp.getDatabaseAdapter() [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_66 $$ dbDyn = mp.getDatabaseAdapter() [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_66 $$ dbDyn = mp.getDatabaseAdapter() [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_71 $$ String validateStatus = mp.validateFields(dbDyn) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_71 $$ String validateStatus = mp.validateFields(dbDyn) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_71 $$ String validateStatus = mp.validateFields(dbDyn) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_71 $$ String validateStatus = mp.validateFields(dbDyn) [FD]
Line_71 $$ String validateStatus = mp.validateFields(dbDyn) --> Line_73 $$ if (validateStatus != null) [FD]
Line_73 $$ if (validateStatus != null) --> Line_74 $$ WebmillErrorPage.setErrorInfo(actionResponse, validateStatus, MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_74 $$ WebmillErrorPage.setErrorInfo(actionResponse, validateStatus, MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [FD]
Line_71 $$ String validateStatus = mp.validateFields(dbDyn) --> Line_74 $$ WebmillErrorPage.setErrorInfo(actionResponse, validateStatus, MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [FD]
Line_73 $$ if (validateStatus != null) --> Line_75 $$ return [CD]
Line_77 $$ if (log.isDebugEnabled()) --> Line_78 $$ log.debug("Unmarshal sqlCache object") [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_84 $$ if (MemberServiceClass.hasYesNoField(actionRequest.getParameterMap(), mp.mod, mp.content)) [FD]
Line_84 $$ if (MemberServiceClass.hasYesNoField(actionRequest.getParameterMap(), mp.mod, mp.content)) --> Line_85 $$ log.debug("Found field with type " + FieldsTypeJspTypeType.YES_1_NO_N.toString()) [CD]
Line_84 $$ if (MemberServiceClass.hasYesNoField(actionRequest.getParameterMap(), mp.mod, mp.content)) --> Line_86 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_86 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_86 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_86 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_86 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_84 $$ if (MemberServiceClass.hasYesNoField(actionRequest.getParameterMap(), mp.mod, mp.content)) --> Line_88 $$ log.debug("Field with type " + FieldsTypeJspTypeType.YES_1_NO_N.toString() + " not found") [CD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_91 $$ if (log.isDebugEnabled()) --> Line_92 $$ log.debug("insert SQL:\n" + sql_ + "\n") [CD]
Line_91 $$ if (log.isDebugEnabled()) --> Line_93 $$ log.debug("Unmarshal sqlCache object") [CD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_99 $$ switch(dbDyn.getFamaly()) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_99 $$ switch(dbDyn.getFamaly()) [FD]
Line_98 $$ boolean checkStatus = false --> Line_103 $$ checkStatus = mp.checkRestrict() [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_103 $$ checkStatus = mp.checkRestrict() [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_103 $$ checkStatus = mp.checkRestrict() [FD]
Line_98 $$ boolean checkStatus = false --> Line_104 $$ if (!checkStatus) [FD]
Line_103 $$ checkStatus = mp.checkRestrict() --> Line_104 $$ if (!checkStatus) [FD]
Line_64 $$ PreparedStatement ps = null --> Line_108 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_108 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_108 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_108 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) [FD]
Line_64 $$ PreparedStatement ps = null --> Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) [FD]
Line_67 $$ int i1 --> Line_110 $$ i1 = ps.executeUpdate() [FD]
Line_64 $$ PreparedStatement ps = null --> Line_110 $$ i1 = ps.executeUpdate() [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_110 $$ i1 = ps.executeUpdate() [FD]
Line_64 $$ PreparedStatement ps = null --> Line_112 $$ DatabaseManager.close(ps) [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_112 $$ DatabaseManager.close(ps) [FD]
Line_64 $$ PreparedStatement ps = null --> Line_113 $$ ps = null [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_113 $$ ps = null [FD]
Line_114 $$ if (log.isDebugEnabled()) --> Line_115 $$ outputDebugOfInsertStatus(mp, dbDyn, idNewRec) [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_115 $$ outputDebugOfInsertStatus(mp, dbDyn, idNewRec) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_115 $$ outputDebugOfInsertStatus(mp, dbDyn, idNewRec) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_115 $$ outputDebugOfInsertStatus(mp, dbDyn, idNewRec) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_115 $$ outputDebugOfInsertStatus(mp, dbDyn, idNewRec) [FD]
Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) --> Line_115 $$ outputDebugOfInsertStatus(mp, dbDyn, idNewRec) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_117 $$ mp.prepareBigtextData(dbDyn, idNewRec, false) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_117 $$ mp.prepareBigtextData(dbDyn, idNewRec, false) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_117 $$ mp.prepareBigtextData(dbDyn, idNewRec, false) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_117 $$ mp.prepareBigtextData(dbDyn, idNewRec, false) [FD]
Line_109 $$ Object idNewRec = mp.bindInsert(dbDyn, ps) --> Line_117 $$ mp.prepareBigtextData(dbDyn, idNewRec, false) [FD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) [CD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) [FD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_120 $$ log.debug("#7.003.003 terminate class " + rc.getClassName()) [CD]
Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_120 $$ log.debug("#7.003.003 terminate class " + rc.getClassName()) [FD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_121 $$ CacheFactory.terminate(rc.getClassName(), null, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [CD]
Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_121 $$ CacheFactory.terminate(rc.getClassName(), null, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [FD]
Line_71 $$ String validateStatus = mp.validateFields(dbDyn) --> Line_126 $$ validateStatus = mp.validateFields(dbDyn) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_126 $$ validateStatus = mp.validateFields(dbDyn) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_126 $$ validateStatus = mp.validateFields(dbDyn) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_126 $$ validateStatus = mp.validateFields(dbDyn) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_126 $$ validateStatus = mp.validateFields(dbDyn) [FD]
Line_71 $$ String validateStatus = mp.validateFields(dbDyn) --> Line_127 $$ if (validateStatus != null) [FD]
Line_126 $$ validateStatus = mp.validateFields(dbDyn) --> Line_127 $$ if (validateStatus != null) [FD]
Line_127 $$ if (validateStatus != null) --> Line_128 $$ WebmillErrorPage.setErrorInfo(actionResponse, validateStatus, MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_128 $$ WebmillErrorPage.setErrorInfo(actionResponse, validateStatus, MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [FD]
Line_71 $$ String validateStatus = mp.validateFields(dbDyn) --> Line_128 $$ WebmillErrorPage.setErrorInfo(actionResponse, validateStatus, MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [FD]
Line_126 $$ validateStatus = mp.validateFields(dbDyn) --> Line_128 $$ WebmillErrorPage.setErrorInfo(actionResponse, validateStatus, MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [FD]
Line_127 $$ if (validateStatus != null) --> Line_129 $$ return [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_131 $$ if (MemberServiceClass.hasYesNoField(actionRequest.getParameterMap(), mp.mod, mp.content)) [FD]
Line_131 $$ if (MemberServiceClass.hasYesNoField(actionRequest.getParameterMap(), mp.mod, mp.content)) --> Line_132 $$ log.debug("Found field with type " + FieldsTypeJspTypeType.YES_1_NO_N) [CD]
Line_131 $$ if (MemberServiceClass.hasYesNoField(actionRequest.getParameterMap(), mp.mod, mp.content)) --> Line_133 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_133 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_133 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_133 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_133 $$ mp.process_Yes_1_No_N_Fields(dbDyn) [FD]
Line_135 $$ Object idCurrRec --> Line_140 $$ idCurrRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_140 $$ idCurrRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_135 $$ Object idCurrRec --> Line_144 $$ idCurrRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_140 $$ idCurrRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_144 $$ idCurrRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_144 $$ idCurrRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_149 $$ log.debug("mp.isSimpleField(): " + mp.isSimpleField()) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_149 $$ log.debug("mp.isSimpleField(): " + mp.isSimpleField()) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_150 $$ if (mp.isSimpleField()) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_150 $$ if (mp.isSimpleField()) [FD]
Line_150 $$ if (mp.isSimpleField()) --> Line_151 $$ log.debug("start build SQL") [CD]
Line_150 $$ if (mp.isSimpleField()) --> Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [CD]
Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) [FD]
Line_150 $$ if (mp.isSimpleField()) --> Line_153 $$ log.debug("update SQL:" + sql_) [CD]
Line_150 $$ if (mp.isSimpleField()) --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [CD]
Line_64 $$ PreparedStatement ps = null --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_113 $$ ps = null --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_154 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_150 $$ if (mp.isSimpleField()) --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_64 $$ PreparedStatement ps = null --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_113 $$ ps = null --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_154 $$ ps = dbDyn.prepareStatement(sql_) --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_135 $$ Object idCurrRec --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_140 $$ idCurrRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_144 $$ idCurrRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_155 $$ mp.bindUpdate(dbDyn, ps, idCurrRec, true) [FD]
Line_150 $$ if (mp.isSimpleField()) --> Line_156 $$ i1 = ps.executeUpdate() [CD]
Line_67 $$ int i1 --> Line_156 $$ i1 = ps.executeUpdate() [FD]
Line_110 $$ i1 = ps.executeUpdate() --> Line_156 $$ i1 = ps.executeUpdate() [FD]
Line_64 $$ PreparedStatement ps = null --> Line_156 $$ i1 = ps.executeUpdate() [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_156 $$ i1 = ps.executeUpdate() [FD]
Line_113 $$ ps = null --> Line_156 $$ i1 = ps.executeUpdate() [FD]
Line_154 $$ ps = dbDyn.prepareStatement(sql_) --> Line_156 $$ i1 = ps.executeUpdate() [FD]
Line_150 $$ if (mp.isSimpleField()) --> Line_157 $$ log.debug("Number of updated record - " + i1) [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_160 $$ mp.prepareBigtextData(dbDyn, idCurrRec, true) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_160 $$ mp.prepareBigtextData(dbDyn, idCurrRec, true) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_160 $$ mp.prepareBigtextData(dbDyn, idCurrRec, true) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_160 $$ mp.prepareBigtextData(dbDyn, idCurrRec, true) [FD]
Line_135 $$ Object idCurrRec --> Line_160 $$ mp.prepareBigtextData(dbDyn, idCurrRec, true) [FD]
Line_140 $$ idCurrRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_160 $$ mp.prepareBigtextData(dbDyn, idCurrRec, true) [FD]
Line_144 $$ idCurrRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_160 $$ mp.prepareBigtextData(dbDyn, idCurrRec, true) [FD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_163 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) [FD]
Line_163 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_164 $$ RelateClassType rc = mp.mod.getRelateClass(i) [CD]
Line_163 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_164 $$ RelateClassType rc = mp.mod.getRelateClass(i) [FD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_164 $$ RelateClassType rc = mp.mod.getRelateClass(i) [FD]
Line_163 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_165 $$ log.debug("#7.003.002 terminate class " + rc.getClassName() + ", id_rec " + idCurrRec) [CD]
Line_164 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_165 $$ log.debug("#7.003.002 terminate class " + rc.getClassName() + ", id_rec " + idCurrRec) [FD]
Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_165 $$ log.debug("#7.003.002 terminate class " + rc.getClassName() + ", id_rec " + idCurrRec) [FD]
Line_163 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_166 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.NUMBER_TYPE) [CD]
Line_166 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.NUMBER_TYPE) --> Line_167 $$ CacheFactory.terminate(rc.getClassName(), (Long) idCurrRec, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [CD]
Line_164 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_167 $$ CacheFactory.terminate(rc.getClassName(), (Long) idCurrRec, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [FD]
Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_167 $$ CacheFactory.terminate(rc.getClassName(), (Long) idCurrRec, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [FD]
Line_166 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.NUMBER_TYPE) --> Line_169 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Change. Wrong type of primary key - " + mp.content.getQueryArea().getPrimaryKeyType()) [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_169 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Change. Wrong type of primary key - " + mp.content.getQueryArea().getPrimaryKeyType()) [FD]
Line_166 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.NUMBER_TYPE) --> Line_170 $$ return [CD]
Line_177 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.NUMBER_TYPE) --> Line_178 $$ idRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [CD]
Line_176 $$ Object idRec --> Line_178 $$ idRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_178 $$ idRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_177 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.NUMBER_TYPE) --> Line_179 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.STRING_TYPE) [CD]
Line_179 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.STRING_TYPE) --> Line_180 $$ idRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [CD]
Line_176 $$ Object idRec --> Line_180 $$ idRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_178 $$ idRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_180 $$ idRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_180 $$ idRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) [FD]
Line_179 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.STRING_TYPE) --> Line_182 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Delete. Wrong type of primary key - " + mp.content.getQueryArea().getPrimaryKeyType()) [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_182 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Delete. Wrong type of primary key - " + mp.content.getQueryArea().getPrimaryKeyType()) [FD]
Line_179 $$ if (mp.content.getQueryArea().getPrimaryKeyType().getType() == PrimaryKeyTypeType.STRING_TYPE) --> Line_183 $$ return [CD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_185 $$ if (dbDyn.getFamaly() == DatabaseManager.MYSQL_FAMALY) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_185 $$ if (dbDyn.getFamaly() == DatabaseManager.MYSQL_FAMALY) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_185 $$ if (dbDyn.getFamaly() == DatabaseManager.MYSQL_FAMALY) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_185 $$ if (dbDyn.getFamaly() == DatabaseManager.MYSQL_FAMALY) [FD]
Line_176 $$ Object idRec --> Line_185 $$ if (dbDyn.getFamaly() == DatabaseManager.MYSQL_FAMALY) [FD]
Line_178 $$ idRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_185 $$ if (dbDyn.getFamaly() == DatabaseManager.MYSQL_FAMALY) [FD]
Line_180 $$ idRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_185 $$ if (dbDyn.getFamaly() == DatabaseManager.MYSQL_FAMALY) [FD]
Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_6 $$ ModuleManager moduleManager = ModuleManager.getInstance(PropertiesProvider.getConfigPath()) --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) [FD]
Line_64 $$ PreparedStatement ps = null --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_113 $$ ps = null --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_154 $$ ps = dbDyn.prepareStatement(sql_) --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_90 $$ String sql_ = MemberServiceClass.buildInsertSQL(mp.content, mp.getFromParam(), mp.mod, dbDyn, actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_152 $$ sql_ = MemberServiceClass.buildUpdateSQL(dbDyn, mp.content, mp.getFromParam(), mp.mod, true, actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), mp.getModuleManager(), mp.authSession) --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_186 $$ sql_ = MemberServiceClass.buildDeleteSQL(dbDyn, mp.mod, mp.content, mp.getFromParam(), actionRequest.getParameterMap(), actionRequest.getRemoteUser(), actionRequest.getServerName(), moduleManager, mp.authSession) --> Line_188 $$ ps = dbDyn.prepareStatement(sql_) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_189 $$ mp.bindDelete(ps) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_189 $$ mp.bindDelete(ps) [FD]
Line_64 $$ PreparedStatement ps = null --> Line_189 $$ mp.bindDelete(ps) [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_189 $$ mp.bindDelete(ps) [FD]
Line_113 $$ ps = null --> Line_189 $$ mp.bindDelete(ps) [FD]
Line_154 $$ ps = dbDyn.prepareStatement(sql_) --> Line_189 $$ mp.bindDelete(ps) [FD]
Line_188 $$ ps = dbDyn.prepareStatement(sql_) --> Line_189 $$ mp.bindDelete(ps) [FD]
Line_67 $$ int i1 --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_110 $$ i1 = ps.executeUpdate() --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_156 $$ i1 = ps.executeUpdate() --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_64 $$ PreparedStatement ps = null --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_113 $$ ps = null --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_154 $$ ps = dbDyn.prepareStatement(sql_) --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_188 $$ ps = dbDyn.prepareStatement(sql_) --> Line_190 $$ i1 = ps.executeUpdate() [FD]
Line_192 $$ if (idRec != null && (idRec instanceof Long)) --> Line_193 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) [CD]
Line_163 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_193 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) [FD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_193 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) [FD]
Line_193 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_194 $$ RelateClassType rc = mp.mod.getRelateClass(i) [CD]
Line_193 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_194 $$ RelateClassType rc = mp.mod.getRelateClass(i) [FD]
Line_163 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_194 $$ RelateClassType rc = mp.mod.getRelateClass(i) [FD]
Line_118 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_194 $$ RelateClassType rc = mp.mod.getRelateClass(i) [FD]
Line_193 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_195 $$ log.debug("#7.003.001 terminate class " + rc.getClassName() + ", id_rec " + idRec.toString()) [CD]
Line_194 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_195 $$ log.debug("#7.003.001 terminate class " + rc.getClassName() + ", id_rec " + idRec.toString()) [FD]
Line_164 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_195 $$ log.debug("#7.003.001 terminate class " + rc.getClassName() + ", id_rec " + idRec.toString()) [FD]
Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_195 $$ log.debug("#7.003.001 terminate class " + rc.getClassName() + ", id_rec " + idRec.toString()) [FD]
Line_176 $$ Object idRec --> Line_195 $$ log.debug("#7.003.001 terminate class " + rc.getClassName() + ", id_rec " + idRec.toString()) [FD]
Line_178 $$ idRec = PortletService.getLong(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_195 $$ log.debug("#7.003.001 terminate class " + rc.getClassName() + ", id_rec " + idRec.toString()) [FD]
Line_180 $$ idRec = RequestTools.getString(actionRequest, mp.mod.getName() + '.' + mp.content.getQueryArea().getPrimaryKey()) --> Line_195 $$ log.debug("#7.003.001 terminate class " + rc.getClassName() + ", id_rec " + idRec.toString()) [FD]
Line_193 $$ for (int i = 0; i < mp.mod.getRelateClassCount(); i++) --> Line_196 $$ CacheFactory.terminate(rc.getClassName(), (Long) idRec, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [CD]
Line_194 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_196 $$ CacheFactory.terminate(rc.getClassName(), (Long) idRec, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [FD]
Line_164 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_196 $$ CacheFactory.terminate(rc.getClassName(), (Long) idRec, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [FD]
Line_119 $$ RelateClassType rc = mp.mod.getRelateClass(i) --> Line_196 $$ CacheFactory.terminate(rc.getClassName(), (Long) idRec, Boolean.TRUE.equals(rc.getIsFullReinitCache())) [FD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_201 $$ actionResponse.setRenderParameter(MemberConstants.ERROR_TEXT, "Unknown type of action - " + actionName) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_205 $$ dbDyn.commit() [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_205 $$ dbDyn.commit() [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_208 $$ dbDyn.rollback() [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_208 $$ dbDyn.rollback() [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_213 $$ if (dbDyn.testExceptionIndexUniqueKey(e1)) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_213 $$ if (dbDyn.testExceptionIndexUniqueKey(e1)) [FD]
Line_213 $$ if (dbDyn.testExceptionIndexUniqueKey(e1)) --> Line_214 $$ WebmillErrorPage.setErrorInfo(actionResponse, "You input value already exists in DB. Try again with other value", MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_214 $$ WebmillErrorPage.setErrorInfo(actionResponse, "You input value already exists in DB. Try again with other value", MemberConstants.ERROR_TEXT, null, "Continue", MemberConstants.ERROR_URL_NAME) [FD]
Line_213 $$ if (dbDyn.testExceptionIndexUniqueKey(e1)) --> Line_216 $$ WebmillErrorPage.setErrorInfo(actionResponse, "Error while processing request", MemberConstants.ERROR_TEXT, e1, "Continue", MemberConstants.ERROR_URL_NAME) [CD]
Line_2 $$ public static void processAction(ActionRequest actionRequest, ActionResponse actionResponse) throws PortletException --> Line_216 $$ WebmillErrorPage.setErrorInfo(actionResponse, "Error while processing request", MemberConstants.ERROR_TEXT, e1, "Continue", MemberConstants.ERROR_URL_NAME) [FD]
Line_63 $$ DatabaseAdapter dbDyn = null --> Line_219 $$ DatabaseManager.close(dbDyn, ps) [FD]
Line_66 $$ dbDyn = mp.getDatabaseAdapter() --> Line_219 $$ DatabaseManager.close(dbDyn, ps) [FD]
Line_64 $$ PreparedStatement ps = null --> Line_219 $$ DatabaseManager.close(dbDyn, ps) [FD]
Line_108 $$ ps = dbDyn.prepareStatement(sql_) --> Line_219 $$ DatabaseManager.close(dbDyn, ps) [FD]
Line_113 $$ ps = null --> Line_219 $$ DatabaseManager.close(dbDyn, ps) [FD]
Line_154 $$ ps = dbDyn.prepareStatement(sql_) --> Line_219 $$ DatabaseManager.close(dbDyn, ps) [FD]
Line_188 $$ ps = dbDyn.prepareStatement(sql_) --> Line_219 $$ DatabaseManager.close(dbDyn, ps) [FD]
Line_223 $$ final String es = "General processing error " --> Line_224 $$ log.error(es, e) [FD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_227 $$ if (mp != null) [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_227 $$ if (mp != null) [FD]
Line_227 $$ if (mp != null) --> Line_228 $$ mp.destroy() [CD]
Line_4 $$ MemberProcessingActionRequest mp = null --> Line_228 $$ mp.destroy() [FD]
Line_7 $$ mp = new MemberProcessingActionRequest(actionRequest, moduleManager) --> Line_228 $$ mp.destroy() [FD]
