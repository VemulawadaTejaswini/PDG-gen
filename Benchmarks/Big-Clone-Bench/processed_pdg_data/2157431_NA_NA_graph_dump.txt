Line_2 $$ public String doInBackground() --> Line_3 $$ boolean skinsDownloaded = false [CD]
Line_2 $$ public String doInBackground() --> Line_4 $$ dao = DataAccessFactory.getUMCDataSourceAccessor(DataAccessFactory.DB_TYPE_SQLITE, Publisher.getInstance().getParamDBDriverconnect() + Publisher.getInstance().getParamDBName(), Publisher.getInstance().getParamDBDriver(), Publisher.getInstance().getParamDBUser(), Publisher.getInstance().getParamDBPwd()) [CD]
Line_2 $$ public String doInBackground() --> Line_5 $$ File downloadDir = new File(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads") [CD]
Line_2 $$ public String doInBackground() --> Line_6 $$ if (!downloadDir.exists()) [CD]
Line_5 $$ File downloadDir = new File(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads") --> Line_6 $$ if (!downloadDir.exists()) [FD]
Line_6 $$ if (!downloadDir.exists()) --> Line_7 $$ if (!downloadDir.mkdir()) [CD]
Line_5 $$ File downloadDir = new File(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads") --> Line_7 $$ if (!downloadDir.mkdir()) [FD]
Line_7 $$ if (!downloadDir.mkdir()) --> Line_8 $$ log.error("Could not create download folder '" + downloadDir.getAbsolutePath() + "' - create this directory and try again! ") [CD]
Line_5 $$ File downloadDir = new File(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads") --> Line_8 $$ log.error("Could not create download folder '" + downloadDir.getAbsolutePath() + "' - create this directory and try again! ") [FD]
Line_2 $$ public String doInBackground() --> Line_11 $$ if (downloadDir.exists()) [CD]
Line_5 $$ File downloadDir = new File(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads") --> Line_11 $$ if (downloadDir.exists()) [FD]
Line_11 $$ if (downloadDir.exists()) --> Line_12 $$ int[] i = tableOnline.getSelectedRows() [CD]
Line_11 $$ if (downloadDir.exists()) --> Line_13 $$ for (int a = 0; a < i.length; a++) [CD]
Line_13 $$ for (int a = 0; a < i.length; a++) --> Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) [CD]
Line_13 $$ for (int a = 0; a < i.length; a++) --> Line_15 $$ if (update.getType().equals(Update.TYPE_SKIN)) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_15 $$ if (update.getType().equals(Update.TYPE_SKIN)) [FD]
Line_3 $$ boolean skinsDownloaded = false --> Line_15 $$ if (update.getType().equals(Update.TYPE_SKIN)) [FD]
Line_13 $$ for (int a = 0; a < i.length; a++) --> Line_16 $$ log.debug("Starting to download UMC " + update.getType() + ": " + update.getDescription() + " - Version " + update.getVersionAvailable() + " from " + update.getDownloadURL()) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_16 $$ log.debug("Starting to download UMC " + update.getType() + ": " + update.getDescription() + " - Version " + update.getVersionAvailable() + " from " + update.getDownloadURL()) [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_20 $$ URL url = new URL(update.getDownloadURL()) [FD]
Line_20 $$ URL url = new URL(update.getDownloadURL()) --> Line_21 $$ URLConnection urlC = url.openConnection() [FD]
Line_21 $$ URLConnection urlC = url.openConnection() --> Line_22 $$ urlC.setConnectTimeout(10000) [FD]
Line_19 $$ double totalBytes = 0 --> Line_23 $$ totalBytes = urlC.getContentLength() [FD]
Line_21 $$ URLConnection urlC = url.openConnection() --> Line_23 $$ totalBytes = urlC.getContentLength() [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_24 $$ firePropertyChange("FILE", null, update.getName() + " " + sizeFormater.format(totalBytes / 1024)) [FD]
Line_20 $$ URL url = new URL(update.getDownloadURL()) --> Line_25 $$ InputStream is = url.openStream() [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_26 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()))) [FD]
Line_18 $$ int bytesRead = 0, bytesWrite = 0 --> Line_28 $$ while ((bytesRead = is.read(buf)) != -1) [FD]
Line_25 $$ InputStream is = url.openStream() --> Line_28 $$ while ((bytesRead = is.read(buf)) != -1) [FD]
Line_27 $$ byte[] buf = new byte[1024 * 8] --> Line_28 $$ while ((bytesRead = is.read(buf)) != -1) [FD]
Line_28 $$ while ((bytesRead = is.read(buf)) != -1) --> Line_29 $$ bos.write(buf, 0, bytesRead) [CD]
Line_28 $$ while ((bytesRead = is.read(buf)) != -1) --> Line_29 $$ bos.write(buf, 0, bytesRead) [FD]
Line_26 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()))) --> Line_29 $$ bos.write(buf, 0, bytesRead) [FD]
Line_27 $$ byte[] buf = new byte[1024 * 8] --> Line_29 $$ bos.write(buf, 0, bytesRead) [FD]
Line_18 $$ int bytesRead = 0, bytesWrite = 0 --> Line_29 $$ bos.write(buf, 0, bytesRead) [FD]
Line_28 $$ while ((bytesRead = is.read(buf)) != -1) --> Line_30 $$ bytesWrite += bytesRead [CD]
Line_28 $$ while ((bytesRead = is.read(buf)) != -1) --> Line_30 $$ bytesWrite += bytesRead [FD]
Line_18 $$ int bytesRead = 0, bytesWrite = 0 --> Line_30 $$ bytesWrite += bytesRead [FD]
Line_28 $$ while ((bytesRead = is.read(buf)) != -1) --> Line_31 $$ publish(new Double(bytesWrite / totalBytes * 100).intValue()) [CD]
Line_25 $$ InputStream is = url.openStream() --> Line_33 $$ is.close() [FD]
Line_26 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()))) --> Line_34 $$ bos.close() [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_35 $$ String zip = UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()) [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_37 $$ if (update.getType().equals(Update.TYPE_SKIN)) [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_38 $$ destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + "resources" + UMCConstants.fileSeparator + "Skins" + UMCConstants.fileSeparator + update.getName() [FD]
Line_37 $$ if (update.getType().equals(Update.TYPE_SKIN)) --> Line_39 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_39 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_40 $$ destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + "plugins" + UMCConstants.fileSeparator + "moviedb" + UMCConstants.fileSeparator + update.getName() [FD]
Line_39 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) --> Line_41 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_41 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_42 $$ destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + "plugins" + UMCConstants.fileSeparator + "scanner" + UMCConstants.fileSeparator + update.getName() [FD]
Line_41 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) --> Line_43 $$ if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_43 $$ if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_44 $$ destDir = UMCConstants.APP_DIR + UMCConstants.fileSeparator + "plugins" + UMCConstants.fileSeparator + "gui" + UMCConstants.fileSeparator + update.getName() [FD]
Line_43 $$ if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) --> Line_46 $$ return "Download type could not be identified -> disgarding package" [CD]
Line_49 $$ if (!f.exists()) --> Line_50 $$ f.mkdir() [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_53 $$ firePropertyChange("INSTALL", null, update.getName() + " - " + zipFile.size() + " files") [FD]
Line_59 $$ while (entries.hasMoreElements()) --> Line_60 $$ ZipEntry entry = (ZipEntry) entries.nextElement() [CD]
Line_59 $$ while (entries.hasMoreElements()) --> Line_61 $$ String entryFileName = entry.getName() [CD]
Line_59 $$ while (entries.hasMoreElements()) --> Line_62 $$ int lastIndex = entryFileName.lastIndexOf('/') [CD]
Line_61 $$ String entryFileName = entry.getName() --> Line_62 $$ int lastIndex = entryFileName.lastIndexOf('/') [FD]
Line_59 $$ while (entries.hasMoreElements()) --> Line_63 $$ String internalPathToEntry = entryFileName.substring(0, lastIndex + 1) [CD]
Line_61 $$ String entryFileName = entry.getName() --> Line_63 $$ String internalPathToEntry = entryFileName.substring(0, lastIndex + 1) [FD]
Line_59 $$ while (entries.hasMoreElements()) --> Line_64 $$ File dir = new File(destDir, internalPathToEntry) [CD]
Line_59 $$ while (entries.hasMoreElements()) --> Line_65 $$ if (!dir.exists()) [CD]
Line_65 $$ if (!dir.exists()) --> Line_66 $$ dir.mkdirs() [CD]
Line_59 $$ while (entries.hasMoreElements()) --> Line_68 $$ if (!entry.isDirectory()) [CD]
Line_68 $$ if (!entry.isDirectory()) --> Line_70 $$ publish(new Double((count / maxSize) * 100).intValue()) [CD]
Line_68 $$ if (!entry.isDirectory()) --> Line_71 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(destDir, entryFileName))) [CD]
Line_26 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()))) --> Line_71 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(destDir, entryFileName))) [FD]
Line_68 $$ if (!entry.isDirectory()) --> Line_72 $$ BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry)) [CD]
Line_68 $$ if (!entry.isDirectory()) --> Line_73 $$ while ((len = bis.read(buffer)) > 0) [CD]
Line_72 $$ BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry)) --> Line_73 $$ while ((len = bis.read(buffer)) > 0) [FD]
Line_73 $$ while ((len = bis.read(buffer)) > 0) --> Line_74 $$ bos.write(buffer, 0, len) [CD]
Line_71 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(destDir, entryFileName))) --> Line_74 $$ bos.write(buffer, 0, len) [FD]
Line_26 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()))) --> Line_74 $$ bos.write(buffer, 0, len) [FD]
Line_68 $$ if (!entry.isDirectory()) --> Line_76 $$ bos.flush() [CD]
Line_71 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(destDir, entryFileName))) --> Line_76 $$ bos.flush() [FD]
Line_26 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()))) --> Line_76 $$ bos.flush() [FD]
Line_68 $$ if (!entry.isDirectory()) --> Line_77 $$ bos.close() [CD]
Line_71 $$ bos = new BufferedOutputStream(new FileOutputStream(new File(destDir, entryFileName))) --> Line_77 $$ bos.close() [FD]
Line_26 $$ BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(UMCConstants.APP_DIR + UMCConstants.fileSeparator + "downloads" + UMCConstants.fileSeparator + update.getDownloadURL().substring(update.getDownloadURL().lastIndexOf("/"), update.getDownloadURL().length()))) --> Line_77 $$ bos.close() [FD]
Line_68 $$ if (!entry.isDirectory()) --> Line_78 $$ bis.close() [CD]
Line_72 $$ BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry)) --> Line_78 $$ bis.close() [FD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_81 $$ if (update.getType().equals(Update.TYPE_SKIN)) [FD]
Line_81 $$ if (update.getType().equals(Update.TYPE_SKIN)) --> Line_82 $$ dao.registerSkin(update.getName(), update.getVersionAvailable()) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_82 $$ dao.registerSkin(update.getName(), update.getVersionAvailable()) [FD]
Line_81 $$ if (update.getType().equals(Update.TYPE_SKIN)) --> Line_83 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_83 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) [FD]
Line_83 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) --> Line_84 $$ dao.registerPlugin(update.getName(), update.getVersionAvailable()) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_84 $$ dao.registerPlugin(update.getName(), update.getVersionAvailable()) [FD]
Line_83 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIEDB)) --> Line_85 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_85 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) [FD]
Line_85 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) --> Line_86 $$ dao.registerPlugin(update.getName(), update.getVersionAvailable()) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_86 $$ dao.registerPlugin(update.getName(), update.getVersionAvailable()) [FD]
Line_85 $$ if (update.getType().equals(Update.TYPE_PLUGIN_MOVIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_SERIESCANNER) || update.getType().equals(Update.TYPE_PLUGIN_MUSICSCANNER) || update.getType().equals(Update.TYPE_PLUGIN_PHOTOSCANNER)) --> Line_87 $$ if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_87 $$ if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) [FD]
Line_87 $$ if (update.getType().equals(Update.TYPE_PLUGIN_GUI)) --> Line_88 $$ dao.registerPlugin(update.getName(), update.getVersionAvailable()) [CD]
Line_14 $$ Update update = tableOnlineModel.getUpdate(i[a]) --> Line_88 $$ dao.registerPlugin(update.getName(), update.getVersionAvailable()) [FD]
Line_11 $$ if (downloadDir.exists()) --> Line_104 $$ return "Error" [CD]
Line_2 $$ public String doInBackground() --> Line_106 $$ if (skinsDownloaded) [CD]
Line_106 $$ if (skinsDownloaded) --> Line_107 $$ Publisher.getInstance().findAllSkins() [CD]
Line_106 $$ if (skinsDownloaded) --> Line_108 $$ Publisher.getInstance().refreshParams() [CD]
Line_106 $$ if (skinsDownloaded) --> Line_109 $$ Publisher.getInstance().createFrontendDirectoryStructure() [CD]
Line_2 $$ public String doInBackground() --> Line_111 $$ return "OK" [CD]
