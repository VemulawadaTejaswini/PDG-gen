Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_3 $$ EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema("/JTLM/schemas/TLMComposite.xsd", getClass(), m_compilerErrors) [CD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_4 $$ Assert.assertEquals(0, m_compilerErrors.getTotalCount()) [CD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS) [CD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_6 $$ AlignmentType[] alignments = new AlignmentType[] [CD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_7 $$ int[] blockSizes = [CD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_8 $$ Transmogrifier encoder = new Transmogrifier() [CD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_9 $$ EXIDecoder decoder = new EXIDecoder(999) [CD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_10 $$ encoder.setOutputOptions(HeaderOptionsOutputType.lessSchemaId) [CD]
Line_8 $$ Transmogrifier encoder = new Transmogrifier() --> Line_10 $$ encoder.setOutputOptions(HeaderOptionsOutputType.lessSchemaId) [FD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_11 $$ encoder.setEXISchema(grammarCache) [CD]
Line_8 $$ Transmogrifier encoder = new Transmogrifier() --> Line_11 $$ encoder.setEXISchema(grammarCache) [FD]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS) --> Line_11 $$ encoder.setEXISchema(grammarCache) [FD]
Line_2 $$ public void testJTLM_publish100_blockSize() throws Exception --> Line_12 $$ decoder.setEXISchema(grammarCache) [CD]
Line_9 $$ EXIDecoder decoder = new EXIDecoder(999) --> Line_12 $$ decoder.setEXISchema(grammarCache) [FD]
Line_5 $$ GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.STRICT_OPTIONS) --> Line_12 $$ decoder.setEXISchema(grammarCache) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_15 $$ Scanner scanner [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_16 $$ InputSource inputSource [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_17 $$ encoder.setAlignmentType(alignment) [CD]
Line_8 $$ Transmogrifier encoder = new Transmogrifier() --> Line_17 $$ encoder.setAlignmentType(alignment) [FD]
Line_13 $$ for (AlignmentType alignment : alignments) --> Line_17 $$ encoder.setAlignmentType(alignment) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_18 $$ encoder.setBlockSize(blockSizes[i]) [CD]
Line_8 $$ Transmogrifier encoder = new Transmogrifier() --> Line_18 $$ encoder.setBlockSize(blockSizes[i]) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_19 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_20 $$ encoder.setOutputStream(baos) [CD]
Line_8 $$ Transmogrifier encoder = new Transmogrifier() --> Line_20 $$ encoder.setOutputStream(baos) [FD]
Line_19 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_20 $$ encoder.setOutputStream(baos) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_21 $$ URL url = resolveSystemIdAsURL("/JTLM/publish100.xml") [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_22 $$ inputSource = new InputSource(url.toString()) [CD]
Line_16 $$ InputSource inputSource --> Line_22 $$ inputSource = new InputSource(url.toString()) [FD]
Line_21 $$ URL url = resolveSystemIdAsURL("/JTLM/publish100.xml") --> Line_22 $$ inputSource = new InputSource(url.toString()) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_23 $$ inputSource.setByteStream(url.openStream()) [CD]
Line_16 $$ InputSource inputSource --> Line_23 $$ inputSource.setByteStream(url.openStream()) [FD]
Line_22 $$ inputSource = new InputSource(url.toString()) --> Line_23 $$ inputSource.setByteStream(url.openStream()) [FD]
Line_21 $$ URL url = resolveSystemIdAsURL("/JTLM/publish100.xml") --> Line_23 $$ inputSource.setByteStream(url.openStream()) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_24 $$ byte[] bts [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_25 $$ int n_events, n_texts [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_26 $$ encoder.encode(inputSource) [CD]
Line_8 $$ Transmogrifier encoder = new Transmogrifier() --> Line_26 $$ encoder.encode(inputSource) [FD]
Line_16 $$ InputSource inputSource --> Line_26 $$ encoder.encode(inputSource) [FD]
Line_22 $$ inputSource = new InputSource(url.toString()) --> Line_26 $$ encoder.encode(inputSource) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_27 $$ bts = baos.toByteArray() [CD]
Line_24 $$ byte[] bts --> Line_27 $$ bts = baos.toByteArray() [FD]
Line_19 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_27 $$ bts = baos.toByteArray() [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_28 $$ decoder.setInputStream(new ByteArrayInputStream(bts)) [CD]
Line_9 $$ EXIDecoder decoder = new EXIDecoder(999) --> Line_28 $$ decoder.setInputStream(new ByteArrayInputStream(bts)) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_29 $$ scanner = decoder.processHeader() [CD]
Line_15 $$ Scanner scanner --> Line_29 $$ scanner = decoder.processHeader() [FD]
Line_9 $$ EXIDecoder decoder = new EXIDecoder(999) --> Line_29 $$ scanner = decoder.processHeader() [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_30 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_31 $$ EXIEvent exiEvent [CD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_32 $$ n_events = 0 [CD]
Line_25 $$ int n_events, n_texts --> Line_32 $$ n_events = 0 [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_33 $$ n_texts = 0 [CD]
Line_25 $$ int n_events, n_texts --> Line_33 $$ n_texts = 0 [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) [CD]
Line_31 $$ EXIEvent exiEvent --> Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) [FD]
Line_15 $$ Scanner scanner --> Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) [FD]
Line_29 $$ scanner = decoder.processHeader() --> Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) [FD]
Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_35 $$ ++n_events [CD]
Line_25 $$ int n_events, n_texts --> Line_35 $$ ++n_events [FD]
Line_32 $$ n_events = 0 --> Line_35 $$ ++n_events [FD]
Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_36 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [CD]
Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_36 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [FD]
Line_31 $$ EXIEvent exiEvent --> Line_36 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) [FD]
Line_36 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) --> Line_37 $$ if (exiEvent.getCharacters().length() == 0) [CD]
Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_37 $$ if (exiEvent.getCharacters().length() == 0) [FD]
Line_31 $$ EXIEvent exiEvent --> Line_37 $$ if (exiEvent.getCharacters().length() == 0) [FD]
Line_37 $$ if (exiEvent.getCharacters().length() == 0) --> Line_38 $$ --n_events [CD]
Line_25 $$ int n_events, n_texts --> Line_38 $$ --n_events [FD]
Line_32 $$ n_events = 0 --> Line_38 $$ --n_events [FD]
Line_36 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) --> Line_41 $$ if (n_texts % 100 == 0) [CD]
Line_41 $$ if (n_texts % 100 == 0) --> Line_42 $$ final int n = n_texts / 100 [CD]
Line_41 $$ if (n_texts % 100 == 0) --> Line_43 $$ Assert.assertEquals(JTLMTest.publish100_centennials[n], exiEvent.getCharacters().makeString()) [CD]
Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_43 $$ Assert.assertEquals(JTLMTest.publish100_centennials[n], exiEvent.getCharacters().makeString()) [FD]
Line_31 $$ EXIEvent exiEvent --> Line_43 $$ Assert.assertEquals(JTLMTest.publish100_centennials[n], exiEvent.getCharacters().makeString()) [FD]
Line_36 $$ if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) --> Line_45 $$ ++n_texts [CD]
Line_25 $$ int n_events, n_texts --> Line_45 $$ ++n_texts [FD]
Line_33 $$ n_texts = 0 --> Line_45 $$ ++n_texts [FD]
Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_47 $$ exiEventList.add(exiEvent) [CD]
Line_34 $$ while ((exiEvent = scanner.nextEvent()) != null) --> Line_47 $$ exiEventList.add(exiEvent) [FD]
Line_30 $$ ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>() --> Line_47 $$ exiEventList.add(exiEvent) [FD]
Line_31 $$ EXIEvent exiEvent --> Line_47 $$ exiEventList.add(exiEvent) [FD]
Line_14 $$ for (int i = 0; i < blockSizes.length; i++) --> Line_49 $$ Assert.assertEquals(10610, n_events) [CD]
Line_25 $$ int n_events, n_texts --> Line_49 $$ Assert.assertEquals(10610, n_events) [FD]
Line_32 $$ n_events = 0 --> Line_49 $$ Assert.assertEquals(10610, n_events) [FD]
