Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_3 $$ username = "anonymous".toCharArray() [CD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_3 $$ username = "anonymous".toCharArray() [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_4 $$ password = "anonymous".toCharArray() [CD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_4 $$ password = "anonymous".toCharArray() [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_7 $$ String key = FtpFileSystemConfigBuilder.getInstance().getEntryParser(fileSystemOptions) [FD]
Line_8 $$ if (key != null) --> Line_9 $$ FTPClientConfig config = new FTPClientConfig(key) [CD]
Line_8 $$ if (key != null) --> Line_10 $$ String serverLanguageCode = FtpFileSystemConfigBuilder.getInstance().getServerLanguageCode(fileSystemOptions) [CD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_10 $$ String serverLanguageCode = FtpFileSystemConfigBuilder.getInstance().getServerLanguageCode(fileSystemOptions) [FD]
Line_8 $$ if (key != null) --> Line_11 $$ config.setServerLanguageCode(serverLanguageCode) [CD]
Line_10 $$ String serverLanguageCode = FtpFileSystemConfigBuilder.getInstance().getServerLanguageCode(fileSystemOptions) --> Line_11 $$ config.setServerLanguageCode(serverLanguageCode) [FD]
Line_9 $$ FTPClientConfig config = new FTPClientConfig(key) --> Line_11 $$ config.setServerLanguageCode(serverLanguageCode) [FD]
Line_8 $$ if (key != null) --> Line_12 $$ String defaultDateFormat = FtpFileSystemConfigBuilder.getInstance().getDefaultDateFormat(fileSystemOptions) [CD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_12 $$ String defaultDateFormat = FtpFileSystemConfigBuilder.getInstance().getDefaultDateFormat(fileSystemOptions) [FD]
Line_8 $$ if (key != null) --> Line_13 $$ config.setDefaultDateFormatStr(defaultDateFormat) [CD]
Line_12 $$ String defaultDateFormat = FtpFileSystemConfigBuilder.getInstance().getDefaultDateFormat(fileSystemOptions) --> Line_13 $$ config.setDefaultDateFormatStr(defaultDateFormat) [FD]
Line_9 $$ FTPClientConfig config = new FTPClientConfig(key) --> Line_13 $$ config.setDefaultDateFormatStr(defaultDateFormat) [FD]
Line_8 $$ if (key != null) --> Line_14 $$ String recentDateFormat = FtpFileSystemConfigBuilder.getInstance().getRecentDateFormat(fileSystemOptions) [CD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_14 $$ String recentDateFormat = FtpFileSystemConfigBuilder.getInstance().getRecentDateFormat(fileSystemOptions) [FD]
Line_8 $$ if (key != null) --> Line_15 $$ config.setRecentDateFormatStr(recentDateFormat) [CD]
Line_14 $$ String recentDateFormat = FtpFileSystemConfigBuilder.getInstance().getRecentDateFormat(fileSystemOptions) --> Line_15 $$ config.setRecentDateFormatStr(recentDateFormat) [FD]
Line_9 $$ FTPClientConfig config = new FTPClientConfig(key) --> Line_15 $$ config.setRecentDateFormatStr(recentDateFormat) [FD]
Line_8 $$ if (key != null) --> Line_16 $$ String serverTimeZoneId = FtpFileSystemConfigBuilder.getInstance().getServerTimeZoneId(fileSystemOptions) [CD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_16 $$ String serverTimeZoneId = FtpFileSystemConfigBuilder.getInstance().getServerTimeZoneId(fileSystemOptions) [FD]
Line_8 $$ if (key != null) --> Line_17 $$ config.setServerTimeZoneId(serverTimeZoneId) [CD]
Line_16 $$ String serverTimeZoneId = FtpFileSystemConfigBuilder.getInstance().getServerTimeZoneId(fileSystemOptions) --> Line_17 $$ config.setServerTimeZoneId(serverTimeZoneId) [FD]
Line_9 $$ FTPClientConfig config = new FTPClientConfig(key) --> Line_17 $$ config.setServerTimeZoneId(serverTimeZoneId) [FD]
Line_8 $$ if (key != null) --> Line_18 $$ String[] shortMonthNames = FtpFileSystemConfigBuilder.getInstance().getShortMonthNames(fileSystemOptions) [CD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_18 $$ String[] shortMonthNames = FtpFileSystemConfigBuilder.getInstance().getShortMonthNames(fileSystemOptions) [FD]
Line_8 $$ if (key != null) --> Line_19 $$ if (shortMonthNames != null) [CD]
Line_18 $$ String[] shortMonthNames = FtpFileSystemConfigBuilder.getInstance().getShortMonthNames(fileSystemOptions) --> Line_19 $$ if (shortMonthNames != null) [FD]
Line_19 $$ if (shortMonthNames != null) --> Line_20 $$ StringBuffer shortMonthNamesStr = new StringBuffer(40) [CD]
Line_19 $$ if (shortMonthNames != null) --> Line_21 $$ for (int i = 0; i < shortMonthNames.length; i++) [CD]
Line_21 $$ for (int i = 0; i < shortMonthNames.length; i++) --> Line_22 $$ if (shortMonthNamesStr.length() > 0) [CD]
Line_20 $$ StringBuffer shortMonthNamesStr = new StringBuffer(40) --> Line_22 $$ if (shortMonthNamesStr.length() > 0) [FD]
Line_21 $$ for (int i = 0; i < shortMonthNames.length; i++) --> Line_23 $$ shortMonthNamesStr.append(shortMonthNames[i]) [CD]
Line_20 $$ StringBuffer shortMonthNamesStr = new StringBuffer(40) --> Line_23 $$ shortMonthNamesStr.append(shortMonthNames[i]) [FD]
Line_19 $$ if (shortMonthNames != null) --> Line_25 $$ config.setShortMonthNames(shortMonthNamesStr.toString()) [CD]
Line_9 $$ FTPClientConfig config = new FTPClientConfig(key) --> Line_25 $$ config.setShortMonthNames(shortMonthNamesStr.toString()) [FD]
Line_20 $$ StringBuffer shortMonthNamesStr = new StringBuffer(40) --> Line_25 $$ config.setShortMonthNames(shortMonthNamesStr.toString()) [FD]
Line_8 $$ if (key != null) --> Line_27 $$ client.configure(config) [CD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_27 $$ client.configure(config) [FD]
Line_9 $$ FTPClientConfig config = new FTPClientConfig(key) --> Line_27 $$ client.configure(config) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_29 $$ FTPFileEntryParserFactory myFactory = FtpFileSystemConfigBuilder.getInstance().getEntryParserFactory(fileSystemOptions) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_30 $$ client.setParserFactory(myFactory) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_32 $$ client.connect(hostname, port) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_32 $$ client.connect(hostname, port) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_33 $$ int reply = client.getReplyCode() [FD]
Line_33 $$ int reply = client.getReplyCode() --> Line_34 $$ if (!FTPReply.isPositiveCompletion(reply)) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_35 $$ if (!client.login(UserAuthenticatorUtils.toString(username), UserAuthenticatorUtils.toString(password))) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_35 $$ if (!client.login(UserAuthenticatorUtils.toString(username), UserAuthenticatorUtils.toString(password))) [FD]
Line_3 $$ username = "anonymous".toCharArray() --> Line_35 $$ if (!client.login(UserAuthenticatorUtils.toString(username), UserAuthenticatorUtils.toString(password))) [FD]
Line_4 $$ password = "anonymous".toCharArray() --> Line_35 $$ if (!client.login(UserAuthenticatorUtils.toString(username), UserAuthenticatorUtils.toString(password))) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_36 $$ if (!client.setFileType(FTP.BINARY_FILE_TYPE)) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_37 $$ Integer dataTimeout = FtpFileSystemConfigBuilder.getInstance().getDataTimeout(fileSystemOptions) [FD]
Line_37 $$ Integer dataTimeout = FtpFileSystemConfigBuilder.getInstance().getDataTimeout(fileSystemOptions) --> Line_38 $$ client.setDataTimeout(dataTimeout.intValue()) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_38 $$ client.setDataTimeout(dataTimeout.intValue()) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_40 $$ FtpFileSystemConfigBuilder.getInstance().setHomeDir(fileSystemOptions, client.printWorkingDirectory()) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_40 $$ FtpFileSystemConfigBuilder.getInstance().setHomeDir(fileSystemOptions, client.printWorkingDirectory()) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_44 $$ Boolean userDirIsRoot = FtpFileSystemConfigBuilder.getInstance().getUserDirIsRoot(fileSystemOptions) [FD]
Line_44 $$ Boolean userDirIsRoot = FtpFileSystemConfigBuilder.getInstance().getUserDirIsRoot(fileSystemOptions) --> Line_45 $$ if (workingDirectory != null && (userDirIsRoot == null || !userDirIsRoot.booleanValue())) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_45 $$ if (workingDirectory != null && (userDirIsRoot == null || !userDirIsRoot.booleanValue())) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_45 $$ if (workingDirectory != null && (userDirIsRoot == null || !userDirIsRoot.booleanValue())) [FD]
Line_2 $$ public static FTPClient createConnection(String hostname, int port, char[] username, char[] password, String workingDirectory, FileSystemOptions fileSystemOptions) throws FileSystemException --> Line_46 $$ Boolean passiveMode = FtpFileSystemConfigBuilder.getInstance().getPassiveMode(fileSystemOptions) [FD]
Line_46 $$ Boolean passiveMode = FtpFileSystemConfigBuilder.getInstance().getPassiveMode(fileSystemOptions) --> Line_47 $$ if (passiveMode != null && passiveMode.booleanValue()) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_47 $$ if (passiveMode != null && passiveMode.booleanValue()) [FD]
Line_6 $$ final FTPClient client = new FTPClient() --> Line_49 $$ if (client.isConnected()) [FD]
