Line_2 $$ public void genCreateSchema(DiagramModel diagramModel, String source) --> Line_6 $$ Collection boxes = diagramModel.getBoxes() [FD]
Line_6 $$ Collection boxes = diagramModel.getBoxes() --> Line_11 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) [FD]
Line_11 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) --> Line_12 $$ box = (BoxModel) x.next() [CD]
Line_11 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) --> Line_12 $$ box = (BoxModel) x.next() [FD]
Line_7 $$ BoxModel box --> Line_12 $$ box = (BoxModel) x.next() [FD]
Line_11 $$ for (Iterator x = boxes.iterator(); x.hasNext(); ) --> Line_13 $$ if (!box.isAbstractDef()) [CD]
Line_12 $$ box = (BoxModel) x.next() --> Line_13 $$ if (!box.isAbstractDef()) [FD]
Line_7 $$ BoxModel box --> Line_13 $$ if (!box.isAbstractDef()) [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_14 $$ sqlQuery = sqlCreateTableBegin(box) [CD]
Line_9 $$ String sqlQuery --> Line_14 $$ sqlQuery = sqlCreateTableBegin(box) [FD]
Line_12 $$ box = (BoxModel) x.next() --> Line_14 $$ sqlQuery = sqlCreateTableBegin(box) [FD]
Line_7 $$ BoxModel box --> Line_14 $$ sqlQuery = sqlCreateTableBegin(box) [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_15 $$ Collection items = box.getItems() [CD]
Line_12 $$ box = (BoxModel) x.next() --> Line_15 $$ Collection items = box.getItems() [FD]
Line_7 $$ BoxModel box --> Line_15 $$ Collection items = box.getItems() [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_16 $$ for (Iterator y = items.iterator(); y.hasNext(); ) [CD]
Line_15 $$ Collection items = box.getItems() --> Line_16 $$ for (Iterator y = items.iterator(); y.hasNext(); ) [FD]
Line_16 $$ for (Iterator y = items.iterator(); y.hasNext(); ) --> Line_17 $$ item = (ItemModel) y.next() [CD]
Line_16 $$ for (Iterator y = items.iterator(); y.hasNext(); ) --> Line_17 $$ item = (ItemModel) y.next() [FD]
Line_8 $$ ItemModel item --> Line_17 $$ item = (ItemModel) y.next() [FD]
Line_16 $$ for (Iterator y = items.iterator(); y.hasNext(); ) --> Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) [CD]
Line_14 $$ sqlQuery = sqlCreateTableBegin(box) --> Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) [FD]
Line_9 $$ String sqlQuery --> Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) [FD]
Line_17 $$ item = (ItemModel) y.next() --> Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) [FD]
Line_8 $$ ItemModel item --> Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [CD]
Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_14 $$ sqlQuery = sqlCreateTableBegin(box) --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_9 $$ String sqlQuery --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_12 $$ box = (BoxModel) x.next() --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_7 $$ BoxModel box --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [CD]
Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_14 $$ sqlQuery = sqlCreateTableBegin(box) --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_9 $$ String sqlQuery --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_12 $$ box = (BoxModel) x.next() --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_7 $$ BoxModel box --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [CD]
Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
Line_14 $$ sqlQuery = sqlCreateTableBegin(box) --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
Line_9 $$ String sqlQuery --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
Line_12 $$ box = (BoxModel) x.next() --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
Line_7 $$ BoxModel box --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [CD]
Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_14 $$ sqlQuery = sqlCreateTableBegin(box) --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_9 $$ String sqlQuery --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_12 $$ box = (BoxModel) x.next() --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_7 $$ BoxModel box --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_2 $$ public void genCreateSchema(DiagramModel diagramModel, String source) --> Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) [FD]
Line_13 $$ if (!box.isAbstractDef()) --> Line_24 $$ System.out.println(sqlQuery) [CD]
Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) --> Line_24 $$ System.out.println(sqlQuery) [FD]
Line_14 $$ sqlQuery = sqlCreateTableBegin(box) --> Line_24 $$ System.out.println(sqlQuery) [FD]
Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) --> Line_24 $$ System.out.println(sqlQuery) [FD]
Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) --> Line_24 $$ System.out.println(sqlQuery) [FD]
Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) --> Line_24 $$ System.out.println(sqlQuery) [FD]
Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) --> Line_24 $$ System.out.println(sqlQuery) [FD]
Line_9 $$ String sqlQuery --> Line_24 $$ System.out.println(sqlQuery) [FD]
Line_18 $$ sqlQuery = sqlQuery + sqlColumn(item) --> Line_26 $$ stmt.executeUpdate(sqlQuery) [FD]
Line_14 $$ sqlQuery = sqlCreateTableBegin(box) --> Line_26 $$ stmt.executeUpdate(sqlQuery) [FD]
Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) --> Line_26 $$ stmt.executeUpdate(sqlQuery) [FD]
Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) --> Line_26 $$ stmt.executeUpdate(sqlQuery) [FD]
Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) --> Line_26 $$ stmt.executeUpdate(sqlQuery) [FD]
Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) --> Line_26 $$ stmt.executeUpdate(sqlQuery) [FD]
Line_9 $$ String sqlQuery --> Line_26 $$ stmt.executeUpdate(sqlQuery) [FD]
Line_10 $$ int counter = 0 --> Line_27 $$ counter++ [FD]
Line_12 $$ box = (BoxModel) x.next() --> Line_29 $$ String tableName = box.getName() [FD]
Line_7 $$ BoxModel box --> Line_29 $$ String tableName = box.getName() [FD]
Line_2 $$ public void genCreateSchema(DiagramModel diagramModel, String source) --> Line_36 $$ this.genCreateForeignKeys(diagramModel) [FD]
Line_10 $$ int counter = 0 --> Line_38 $$ if (counter > 0) [FD]
Line_38 $$ if (counter > 0) --> Line_39 $$ String msg = Para.getPara().getText("schemaCreated") + " -- " + counter + " " + Para.getPara().getText("tables") [CD]
Line_38 $$ if (counter > 0) --> Line_40 $$ this.informUser(msg) [CD]
Line_39 $$ String msg = Para.getPara().getText("schemaCreated") + " -- " + counter + " " + Para.getPara().getText("tables") --> Line_40 $$ this.informUser(msg) [FD]
Line_38 $$ if (counter > 0) --> Line_42 $$ this.informUser(Para.getPara().getText("schemaNotCreated")) [CD]
Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) --> Line_20 $$ sqlQuery = sqlQuery + sqlForeignKeyColumns(box) [FD]
Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) --> Line_21 $$ sqlQuery = sqlQuery + sqlPrimaryKey(box) [FD]
Line_23 $$ sqlQuery = sqlQuery + sqlCreateTableEnd(box, source) --> Line_22 $$ sqlQuery = sqlQuery + sqlUniqueKey(box) [FD]
