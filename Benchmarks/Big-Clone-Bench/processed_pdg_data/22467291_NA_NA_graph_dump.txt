Line_2 $$ public void testExecute() throws Exception --> Line_3 $$ LocalWorker worker = new JTidyWorker() [CD]
Line_2 $$ public void testExecute() throws Exception --> Line_4 $$ URL url = new URL("http://www.nature.com/index.html") [CD]
Line_2 $$ public void testExecute() throws Exception --> Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) [CD]
Line_4 $$ URL url = new URL("http://www.nature.com/index.html") --> Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_6 $$ String str [CD]
Line_2 $$ public void testExecute() throws Exception --> Line_7 $$ StringBuffer sb = new StringBuffer() [CD]
Line_2 $$ public void testExecute() throws Exception --> Line_8 $$ while ((str = in.readLine()) != null) [CD]
Line_6 $$ String str --> Line_8 $$ while ((str = in.readLine()) != null) [FD]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_8 $$ while ((str = in.readLine()) != null) [FD]
Line_8 $$ while ((str = in.readLine()) != null) --> Line_9 $$ sb.append(str) [CD]
Line_8 $$ while ((str = in.readLine()) != null) --> Line_9 $$ sb.append(str) [FD]
Line_7 $$ StringBuffer sb = new StringBuffer() --> Line_9 $$ sb.append(str) [FD]
Line_6 $$ String str --> Line_9 $$ sb.append(str) [FD]
Line_8 $$ while ((str = in.readLine()) != null) --> Line_10 $$ sb.append(LINE_ENDING) [CD]
Line_7 $$ StringBuffer sb = new StringBuffer() --> Line_10 $$ sb.append(LINE_ENDING) [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_12 $$ in.close() [CD]
Line_5 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_12 $$ in.close() [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_13 $$ Map inputMap = new HashMap() [CD]
Line_2 $$ public void testExecute() throws Exception --> Line_14 $$ DataThingAdapter inAdapter = new DataThingAdapter(inputMap) [CD]
Line_2 $$ public void testExecute() throws Exception --> Line_15 $$ inAdapter.putString("inputHtml", sb.toString()) [CD]
Line_14 $$ DataThingAdapter inAdapter = new DataThingAdapter(inputMap) --> Line_15 $$ inAdapter.putString("inputHtml", sb.toString()) [FD]
Line_7 $$ StringBuffer sb = new StringBuffer() --> Line_15 $$ inAdapter.putString("inputHtml", sb.toString()) [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_16 $$ Map outputMap = worker.execute(inputMap) [CD]
Line_3 $$ LocalWorker worker = new JTidyWorker() --> Line_16 $$ Map outputMap = worker.execute(inputMap) [FD]
Line_13 $$ Map inputMap = new HashMap() --> Line_16 $$ Map outputMap = worker.execute(inputMap) [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_17 $$ DataThingAdapter outAdapter = new DataThingAdapter(outputMap) [CD]
Line_2 $$ public void testExecute() throws Exception --> Line_18 $$ assertNotNull("The outputMap was null", outputMap) [CD]
Line_16 $$ Map outputMap = worker.execute(inputMap) --> Line_18 $$ assertNotNull("The outputMap was null", outputMap) [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_19 $$ String results = outAdapter.getString("results") [CD]
Line_17 $$ DataThingAdapter outAdapter = new DataThingAdapter(outputMap) --> Line_19 $$ String results = outAdapter.getString("results") [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_20 $$ assertFalse("The results were empty", results.equals("")) [CD]
Line_19 $$ String results = outAdapter.getString("results") --> Line_20 $$ assertFalse("The results were empty", results.equals("")) [FD]
Line_2 $$ public void testExecute() throws Exception --> Line_21 $$ assertNotNull("The results were null", results) [CD]
Line_19 $$ String results = outAdapter.getString("results") --> Line_21 $$ assertNotNull("The results were null", results) [FD]
