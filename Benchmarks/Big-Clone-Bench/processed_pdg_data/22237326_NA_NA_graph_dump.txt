Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_4 $$ InputStream in [CD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_5 $$ if (connect != null) [CD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_5 $$ if (connect != null) [FD]
Line_5 $$ if (connect != null) --> Line_6 $$ in = connect.getInputStream() [CD]
Line_4 $$ InputStream in --> Line_6 $$ in = connect.getInputStream() [FD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_6 $$ in = connect.getInputStream() [FD]
Line_5 $$ if (connect != null) --> Line_8 $$ in = url.openStream() [CD]
Line_4 $$ InputStream in --> Line_8 $$ in = url.openStream() [FD]
Line_6 $$ in = connect.getInputStream() --> Line_8 $$ in = url.openStream() [FD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_8 $$ in = url.openStream() [FD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_10 $$ DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder() [CD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_11 $$ InputSource source = new InputSource(in) [CD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_12 $$ Document document = builder.parse(source) [CD]
Line_10 $$ DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder() --> Line_12 $$ Document document = builder.parse(source) [FD]
Line_11 $$ InputSource source = new InputSource(in) --> Line_12 $$ Document document = builder.parse(source) [FD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_13 $$ in.close() [CD]
Line_4 $$ InputStream in --> Line_13 $$ in.close() [FD]
Line_6 $$ in = connect.getInputStream() --> Line_13 $$ in.close() [FD]
Line_8 $$ in = url.openStream() --> Line_13 $$ in.close() [FD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_14 $$ QDataSet result = null [CD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_15 $$ NodeList kids = document.getChildNodes() [CD]
Line_12 $$ Document document = builder.parse(source) --> Line_15 $$ NodeList kids = document.getChildNodes() [FD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_16 $$ for (int i = 0; i < kids.getLength(); i++) [CD]
Line_15 $$ NodeList kids = document.getChildNodes() --> Line_16 $$ for (int i = 0; i < kids.getLength(); i++) [FD]
Line_16 $$ for (int i = 0; i < kids.getLength(); i++) --> Line_17 $$ Node n = kids.item(i) [CD]
Line_16 $$ for (int i = 0; i < kids.getLength(); i++) --> Line_17 $$ Node n = kids.item(i) [FD]
Line_15 $$ NodeList kids = document.getChildNodes() --> Line_17 $$ Node n = kids.item(i) [FD]
Line_16 $$ for (int i = 0; i < kids.getLength(); i++) --> Line_18 $$ if (n.getNodeName().equals("netcdf")) [CD]
Line_17 $$ Node n = kids.item(i) --> Line_18 $$ if (n.getNodeName().equals("netcdf")) [FD]
Line_18 $$ if (n.getNodeName().equals("netcdf")) --> Line_19 $$ result = netcdf(n) [CD]
Line_14 $$ QDataSet result = null --> Line_19 $$ result = netcdf(n) [FD]
Line_17 $$ Node n = kids.item(i) --> Line_19 $$ result = netcdf(n) [FD]
Line_2 $$ public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException --> Line_22 $$ return result [CD]
