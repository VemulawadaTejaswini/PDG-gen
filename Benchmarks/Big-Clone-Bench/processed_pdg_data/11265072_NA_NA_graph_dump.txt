Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_3 $$ unzipDestinationDirectory.mkdirs() [CD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_3 $$ unzipDestinationDirectory.mkdirs() [FD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_4 $$ if (!unzipDestinationDirectory.exists()) [CD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_4 $$ if (!unzipDestinationDirectory.exists()) [FD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_7 $$ ZipFile zipFile [CD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_8 $$ zipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ) [CD]
Line_7 $$ ZipFile zipFile --> Line_8 $$ zipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ) [FD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_9 $$ Enumeration<? extends ZipEntry> zipFileEntries = zipFile.entries() [CD]
Line_7 $$ ZipFile zipFile --> Line_9 $$ Enumeration<? extends ZipEntry> zipFileEntries = zipFile.entries() [FD]
Line_8 $$ zipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ) --> Line_9 $$ Enumeration<? extends ZipEntry> zipFileEntries = zipFile.entries() [FD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_10 $$ while (zipFileEntries.hasMoreElements()) [CD]
Line_10 $$ while (zipFileEntries.hasMoreElements()) --> Line_11 $$ ZipEntry entry = (ZipEntry) zipFileEntries.nextElement() [CD]
Line_10 $$ while (zipFileEntries.hasMoreElements()) --> Line_12 $$ if (!entry.isDirectory()) [CD]
Line_12 $$ if (!entry.isDirectory()) --> Line_13 $$ String currentEntry = entry.getName() [CD]
Line_12 $$ if (!entry.isDirectory()) --> Line_14 $$ File destFile = new File(unzipDestinationDirectory, currentEntry) [CD]
Line_12 $$ if (!entry.isDirectory()) --> Line_15 $$ if (filter == null || filter.accept(destFile)) [CD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_15 $$ if (filter == null || filter.accept(destFile)) [FD]
Line_15 $$ if (filter == null || filter.accept(destFile)) --> Line_16 $$ File destinationParent = destFile.getParentFile() [CD]
Line_15 $$ if (filter == null || filter.accept(destFile)) --> Line_17 $$ destinationParent.mkdirs() [CD]
Line_16 $$ File destinationParent = destFile.getParentFile() --> Line_17 $$ destinationParent.mkdirs() [FD]
Line_15 $$ if (filter == null || filter.accept(destFile)) --> Line_18 $$ BufferedInputStream is = new BufferedInputStream(zipFile.getInputStream(entry)) [CD]
Line_7 $$ ZipFile zipFile --> Line_18 $$ BufferedInputStream is = new BufferedInputStream(zipFile.getInputStream(entry)) [FD]
Line_8 $$ zipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ) --> Line_18 $$ BufferedInputStream is = new BufferedInputStream(zipFile.getInputStream(entry)) [FD]
Line_15 $$ if (filter == null || filter.accept(destFile)) --> Line_19 $$ FileOutputStream fos = new FileOutputStream(destFile) [CD]
Line_15 $$ if (filter == null || filter.accept(destFile)) --> Line_20 $$ IOUtils.copyLarge(is, fos) [CD]
Line_18 $$ BufferedInputStream is = new BufferedInputStream(zipFile.getInputStream(entry)) --> Line_20 $$ IOUtils.copyLarge(is, fos) [FD]
Line_19 $$ FileOutputStream fos = new FileOutputStream(destFile) --> Line_20 $$ IOUtils.copyLarge(is, fos) [FD]
Line_15 $$ if (filter == null || filter.accept(destFile)) --> Line_21 $$ fos.flush() [CD]
Line_19 $$ FileOutputStream fos = new FileOutputStream(destFile) --> Line_21 $$ fos.flush() [FD]
Line_15 $$ if (filter == null || filter.accept(destFile)) --> Line_22 $$ IOUtils.closeQuietly(fos) [CD]
Line_19 $$ FileOutputStream fos = new FileOutputStream(destFile) --> Line_22 $$ IOUtils.closeQuietly(fos) [FD]
Line_2 $$ public static void unzip(File sourceZipFile, File unzipDestinationDirectory, FileFilter filter) throws IOException --> Line_26 $$ zipFile.close() [CD]
Line_7 $$ ZipFile zipFile --> Line_26 $$ zipFile.close() [FD]
Line_8 $$ zipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ) --> Line_26 $$ zipFile.close() [FD]
