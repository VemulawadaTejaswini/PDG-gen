Line_2 $$ public static void main(String[] args) --> Line_3 $$ String email = "josh888@byu.net" [CD]
Line_2 $$ public static void main(String[] args) --> Line_4 $$ String username = "josh8573" [CD]
Line_2 $$ public static void main(String[] args) --> Line_5 $$ String password = "josh8573" [CD]
Line_2 $$ public static void main(String[] args) --> Line_6 $$ String IDnumber = "3030" [CD]
Line_2 $$ public static void main(String[] args) --> Line_7 $$ double[] apogee = [CD]
Line_2 $$ public static void main(String[] args) --> Line_8 $$ double[] perigee = apogee [CD]
Line_2 $$ public static void main(String[] args) --> Line_9 $$ double[] inclination = [CD]
Line_2 $$ public static void main(String[] args) --> Line_10 $$ int[] trp_solmax = [CD]
Line_2 $$ public static void main(String[] args) --> Line_11 $$ double[] init_long_ascend = [CD]
Line_2 $$ public static void main(String[] args) --> Line_12 $$ double[] init_displ_ascend = [CD]
Line_2 $$ public static void main(String[] args) --> Line_13 $$ double[] displ_perigee_ascend = [CD]
Line_2 $$ public static void main(String[] args) --> Line_14 $$ double[] orbit_sect = null [CD]
Line_2 $$ public static void main(String[] args) --> Line_15 $$ boolean[] gtrn_weather = [CD]
Line_2 $$ public static void main(String[] args) --> Line_16 $$ boolean print_altitude = true [CD]
Line_2 $$ public static void main(String[] args) --> Line_17 $$ boolean print_inclination = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_18 $$ boolean print_gtrn_weather = true [CD]
Line_2 $$ public static void main(String[] args) --> Line_19 $$ boolean print_ita = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_20 $$ boolean print_ida = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_21 $$ boolean print_dpa = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_22 $$ ORBIT[] orbit_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [CD]
Line_22 $$ ORBIT[] orbit_array --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_7 $$ double[] apogee = --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_8 $$ double[] perigee = apogee --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_9 $$ double[] inclination = --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_15 $$ boolean[] gtrn_weather = --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_10 $$ int[] trp_solmax = --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_11 $$ double[] init_long_ascend = --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_12 $$ double[] init_displ_ascend = --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_13 $$ double[] displ_perigee_ascend = --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_14 $$ double[] orbit_sect = null --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_16 $$ boolean print_altitude = true --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_17 $$ boolean print_inclination = false --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_18 $$ boolean print_gtrn_weather = true --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_19 $$ boolean print_ita = false --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_20 $$ boolean print_ida = false --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_21 $$ boolean print_dpa = false --> Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) [FD]
Line_2 $$ public static void main(String[] args) --> Line_24 $$ TRP[] trp_array = [CD]
Line_2 $$ public static void main(String[] args) --> Line_25 $$ GTRN[] gtrn_array = [CD]
Line_2 $$ public static void main(String[] args) --> Line_26 $$ if (orbit_array != null) [CD]
Line_22 $$ ORBIT[] orbit_array --> Line_26 $$ if (orbit_array != null) [FD]
Line_23 $$ orbit_array = ORBIT.CreateOrbits(apogee, perigee, inclination, gtrn_weather, trp_solmax, init_long_ascend, init_displ_ascend, displ_perigee_ascend, orbit_sect, print_altitude, print_inclination, print_gtrn_weather, print_ita, print_ida, print_dpa) --> Line_26 $$ if (orbit_array != null) [FD]
Line_26 $$ if (orbit_array != null) --> Line_27 $$ Vector trp_vector = new Vector() [CD]
Line_26 $$ if (orbit_array != null) --> Line_28 $$ for (int i = 0; i < orbit_array.length; i++) [CD]
Line_28 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_29 $$ TRP temp_t = orbit_array[i].getTRP() [CD]
Line_28 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_30 $$ if (temp_t != null) [CD]
Line_29 $$ TRP temp_t = orbit_array[i].getTRP() --> Line_30 $$ if (temp_t != null) [FD]
Line_30 $$ if (temp_t != null) --> Line_31 $$ trp_vector.add(temp_t) [CD]
Line_27 $$ Vector trp_vector = new Vector() --> Line_31 $$ trp_vector.add(temp_t) [FD]
Line_29 $$ TRP temp_t = orbit_array[i].getTRP() --> Line_31 $$ trp_vector.add(temp_t) [FD]
Line_26 $$ if (orbit_array != null) --> Line_34 $$ if (trp_vector.size() != 0) [CD]
Line_27 $$ Vector trp_vector = new Vector() --> Line_34 $$ if (trp_vector.size() != 0) [FD]
Line_34 $$ if (trp_vector.size() != 0) --> Line_35 $$ TRP[] trp_to_convert = new TRP[trp_vector.size()] [CD]
Line_27 $$ Vector trp_vector = new Vector() --> Line_35 $$ TRP[] trp_to_convert = new TRP[trp_vector.size()] [FD]
Line_34 $$ if (trp_vector.size() != 0) --> Line_36 $$ trp_array = (TRP[]) trp_vector.toArray(trp_to_convert) [CD]
Line_24 $$ TRP[] trp_array = --> Line_36 $$ trp_array = (TRP[]) trp_vector.toArray(trp_to_convert) [FD]
Line_27 $$ Vector trp_vector = new Vector() --> Line_36 $$ trp_array = (TRP[]) trp_vector.toArray(trp_to_convert) [FD]
Line_35 $$ TRP[] trp_to_convert = new TRP[trp_vector.size()] --> Line_36 $$ trp_array = (TRP[]) trp_vector.toArray(trp_to_convert) [FD]
Line_26 $$ if (orbit_array != null) --> Line_38 $$ Vector gtrn_vector = new Vector() [CD]
Line_26 $$ if (orbit_array != null) --> Line_39 $$ for (int i = 0; i < orbit_array.length; i++) [CD]
Line_28 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_39 $$ for (int i = 0; i < orbit_array.length; i++) [FD]
Line_39 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_40 $$ GTRN temp_g = orbit_array[i].getGTRN() [CD]
Line_39 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_41 $$ if (temp_g != null) [CD]
Line_40 $$ GTRN temp_g = orbit_array[i].getGTRN() --> Line_41 $$ if (temp_g != null) [FD]
Line_41 $$ if (temp_g != null) --> Line_42 $$ gtrn_vector.add(temp_g) [CD]
Line_38 $$ Vector gtrn_vector = new Vector() --> Line_42 $$ gtrn_vector.add(temp_g) [FD]
Line_40 $$ GTRN temp_g = orbit_array[i].getGTRN() --> Line_42 $$ gtrn_vector.add(temp_g) [FD]
Line_26 $$ if (orbit_array != null) --> Line_45 $$ if (gtrn_vector.size() != 0) [CD]
Line_38 $$ Vector gtrn_vector = new Vector() --> Line_45 $$ if (gtrn_vector.size() != 0) [FD]
Line_45 $$ if (gtrn_vector.size() != 0) --> Line_46 $$ GTRN[] gtrn_to_convert = new GTRN[gtrn_vector.size()] [CD]
Line_38 $$ Vector gtrn_vector = new Vector() --> Line_46 $$ GTRN[] gtrn_to_convert = new GTRN[gtrn_vector.size()] [FD]
Line_45 $$ if (gtrn_vector.size() != 0) --> Line_47 $$ gtrn_array = (GTRN[]) gtrn_vector.toArray(gtrn_to_convert) [CD]
Line_25 $$ GTRN[] gtrn_array = --> Line_47 $$ gtrn_array = (GTRN[]) gtrn_vector.toArray(gtrn_to_convert) [FD]
Line_38 $$ Vector gtrn_vector = new Vector() --> Line_47 $$ gtrn_array = (GTRN[]) gtrn_vector.toArray(gtrn_to_convert) [FD]
Line_46 $$ GTRN[] gtrn_to_convert = new GTRN[gtrn_vector.size()] --> Line_47 $$ gtrn_array = (GTRN[]) gtrn_vector.toArray(gtrn_to_convert) [FD]
Line_2 $$ public static void main(String[] args) --> Line_50 $$ int[] flux_min_element = [CD]
Line_2 $$ public static void main(String[] args) --> Line_51 $$ int[] flux_max_element = [CD]
Line_2 $$ public static void main(String[] args) --> Line_52 $$ int[] weather_flux = [CD]
Line_2 $$ public static void main(String[] args) --> Line_53 $$ boolean print_weather = true [CD]
Line_2 $$ public static void main(String[] args) --> Line_54 $$ boolean print_min_elem = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_55 $$ boolean print_max_elem = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_56 $$ ORBIT[] orbit_array_into_flux = orbit_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_57 $$ FLUX[] flux_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [CD]
Line_57 $$ FLUX[] flux_array --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_50 $$ int[] flux_min_element = --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_51 $$ int[] flux_max_element = --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_52 $$ int[] weather_flux = --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_56 $$ ORBIT[] orbit_array_into_flux = orbit_array --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_53 $$ boolean print_weather = true --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_54 $$ boolean print_min_elem = false --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_55 $$ boolean print_max_elem = false --> Line_58 $$ flux_array = FLUX.CreateFLUX_URF(flux_min_element, flux_max_element, weather_flux, orbit_array_into_flux, print_weather, print_min_elem, print_max_elem) [FD]
Line_2 $$ public static void main(String[] args) --> Line_59 $$ FLUX[] flx_objects_into_trans = flux_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_60 $$ int[] units = [CD]
Line_2 $$ public static void main(String[] args) --> Line_61 $$ double[] thickness = [CD]
Line_2 $$ public static void main(String[] args) --> Line_62 $$ boolean print_shielding = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_63 $$ TRANS[] trans_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_64 $$ trans_array = TRANS.CreateTRANS_URF(flx_objects_into_trans, units, thickness, print_shielding) [CD]
Line_63 $$ TRANS[] trans_array --> Line_64 $$ trans_array = TRANS.CreateTRANS_URF(flx_objects_into_trans, units, thickness, print_shielding) [FD]
Line_59 $$ FLUX[] flx_objects_into_trans = flux_array --> Line_64 $$ trans_array = TRANS.CreateTRANS_URF(flx_objects_into_trans, units, thickness, print_shielding) [FD]
Line_60 $$ int[] units = --> Line_64 $$ trans_array = TRANS.CreateTRANS_URF(flx_objects_into_trans, units, thickness, print_shielding) [FD]
Line_61 $$ double[] thickness = --> Line_64 $$ trans_array = TRANS.CreateTRANS_URF(flx_objects_into_trans, units, thickness, print_shielding) [FD]
Line_62 $$ boolean print_shielding = false --> Line_64 $$ trans_array = TRANS.CreateTRANS_URF(flx_objects_into_trans, units, thickness, print_shielding) [FD]
Line_2 $$ public static void main(String[] args) --> Line_65 $$ URFInterface[] input_files_for_letspec = trans_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_66 $$ int[] letspec_min_element = [CD]
Line_2 $$ public static void main(String[] args) --> Line_67 $$ int[] letspec_max_element = [CD]
Line_2 $$ public static void main(String[] args) --> Line_68 $$ double[] min_energy_value = [CD]
Line_2 $$ public static void main(String[] args) --> Line_69 $$ boolean[] diff_spect = [CD]
Line_2 $$ public static void main(String[] args) --> Line_70 $$ boolean print_min_energy = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_71 $$ LETSPEC[] letspec_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [CD]
Line_71 $$ LETSPEC[] letspec_array --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [FD]
Line_65 $$ URFInterface[] input_files_for_letspec = trans_array --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [FD]
Line_66 $$ int[] letspec_min_element = --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [FD]
Line_67 $$ int[] letspec_max_element = --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [FD]
Line_68 $$ double[] min_energy_value = --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [FD]
Line_69 $$ boolean[] diff_spect = --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [FD]
Line_70 $$ boolean print_min_energy = false --> Line_72 $$ letspec_array = LETSPEC.CreateLETSPEC_URF(input_files_for_letspec, letspec_min_element, letspec_max_element, min_energy_value, diff_spect, print_min_energy) [FD]
Line_2 $$ public static void main(String[] args) --> Line_73 $$ URFInterface[] input_files_for_pup = trans_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_74 $$ double[] pup_params = [CD]
Line_2 $$ public static void main(String[] args) --> Line_75 $$ PUP_Device[][] pup_device_array = [CD]
Line_2 $$ public static void main(String[] args) --> Line_76 $$ boolean print_bits_in_device_pup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_77 $$ boolean print_weibull_onset_pup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_78 $$ boolean print_weibull_width_pup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_79 $$ boolean print_weibull_exponent_pup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_80 $$ boolean print_weibull_cross_sect_pup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_81 $$ PUP[] pup_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [CD]
Line_81 $$ PUP[] pup_array --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_73 $$ URFInterface[] input_files_for_pup = trans_array --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_75 $$ PUP_Device[][] pup_device_array = --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_76 $$ boolean print_bits_in_device_pup = false --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_77 $$ boolean print_weibull_onset_pup = false --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_78 $$ boolean print_weibull_width_pup = false --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_79 $$ boolean print_weibull_exponent_pup = false --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_80 $$ boolean print_weibull_cross_sect_pup = false --> Line_82 $$ pup_array = PUP.CreatePUP_URF(input_files_for_pup, pup_device_array, print_bits_in_device_pup, print_weibull_onset_pup, print_weibull_width_pup, print_weibull_exponent_pup, print_weibull_cross_sect_pup) [FD]
Line_2 $$ public static void main(String[] args) --> Line_83 $$ LETSPEC[] let_objects_into_hup = letspec_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_84 $$ double[][] weib_params = [CD]
Line_2 $$ public static void main(String[] args) --> Line_85 $$ HUP_Device[][] hup_device_array = new HUP_Device[7][1] [CD]
Line_2 $$ public static void main(String[] args) --> Line_86 $$ double z_depth = (float) 0.01 [CD]
Line_2 $$ public static void main(String[] args) --> Line_87 $$ for (int i = 0; i < 7; i++) [CD]
Line_39 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_87 $$ for (int i = 0; i < 7; i++) [FD]
Line_28 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_87 $$ for (int i = 0; i < 7; i++) [FD]
Line_87 $$ for (int i = 0; i < 7; i++) --> Line_88 $$ hup_device_array[i][0] = new HUP_Device("sample", null, null, 0, 0, (Math.sqrt(weib_params[i][3]) / 100), 0, (int) Math.pow(10, i), 4, weib_params[i]) [CD]
Line_87 $$ for (int i = 0; i < 7; i++) --> Line_88 $$ hup_device_array[i][0] = new HUP_Device("sample", null, null, 0, 0, (Math.sqrt(weib_params[i][3]) / 100), 0, (int) Math.pow(10, i), 4, weib_params[i]) [FD]
Line_39 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_88 $$ hup_device_array[i][0] = new HUP_Device("sample", null, null, 0, 0, (Math.sqrt(weib_params[i][3]) / 100), 0, (int) Math.pow(10, i), 4, weib_params[i]) [FD]
Line_28 $$ for (int i = 0; i < orbit_array.length; i++) --> Line_88 $$ hup_device_array[i][0] = new HUP_Device("sample", null, null, 0, 0, (Math.sqrt(weib_params[i][3]) / 100), 0, (int) Math.pow(10, i), 4, weib_params[i]) [FD]
Line_87 $$ for (int i = 0; i < 7; i++) --> Line_89 $$ z_depth += .01 [CD]
Line_86 $$ double z_depth = (float) 0.01 --> Line_89 $$ z_depth += .01 [FD]
Line_2 $$ public static void main(String[] args) --> Line_91 $$ boolean print_label = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_92 $$ boolean print_commenta = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_93 $$ boolean print_commentb = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_94 $$ boolean print_RPP_x = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_95 $$ boolean print_RPP_y = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_96 $$ boolean print_RPP_z = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_97 $$ boolean print_funnel_length = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_98 $$ boolean print_bits_in_device_hup = true [CD]
Line_2 $$ public static void main(String[] args) --> Line_99 $$ boolean print_weibull_onset_hup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_100 $$ boolean print_weibull_width_hup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_101 $$ boolean print_weibull_exponent_hup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_102 $$ boolean print_weibull_cross_sect_hup = false [CD]
Line_2 $$ public static void main(String[] args) --> Line_103 $$ HUP[] hup_array [CD]
Line_2 $$ public static void main(String[] args) --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [CD]
Line_103 $$ HUP[] hup_array --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_83 $$ LETSPEC[] let_objects_into_hup = letspec_array --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_85 $$ HUP_Device[][] hup_device_array = new HUP_Device[7][1] --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_91 $$ boolean print_label = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_92 $$ boolean print_commenta = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_93 $$ boolean print_commentb = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_94 $$ boolean print_RPP_x = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_95 $$ boolean print_RPP_y = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_96 $$ boolean print_RPP_z = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_97 $$ boolean print_funnel_length = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_98 $$ boolean print_bits_in_device_hup = true --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_99 $$ boolean print_weibull_onset_hup = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_100 $$ boolean print_weibull_width_hup = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_101 $$ boolean print_weibull_exponent_hup = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_102 $$ boolean print_weibull_cross_sect_hup = false --> Line_104 $$ hup_array = HUP.CreateHUP_URF(let_objects_into_hup, hup_device_array, print_label, print_commenta, print_commentb, print_RPP_x, print_RPP_y, print_RPP_z, print_funnel_length, print_bits_in_device_hup, print_weibull_onset_hup, print_weibull_width_hup, print_weibull_exponent_hup, print_weibull_cross_sect_hup) [FD]
Line_2 $$ public static void main(String[] args) --> Line_105 $$ System.out.println("Finished creating User Request Files") [CD]
Line_2 $$ public static void main(String[] args) --> Line_106 $$ int num_of_files = trp_array.length + gtrn_array.length + flux_array.length + trans_array.length + letspec_array.length + pup_array.length + hup_array.length [CD]
Line_2 $$ public static void main(String[] args) --> Line_107 $$ int index = 0 [CD]
Line_2 $$ public static void main(String[] args) --> Line_108 $$ String[] files_to_upload = new String[num_of_files] [CD]
Line_2 $$ public static void main(String[] args) --> Line_109 $$ for (int a = 0; a < trp_array.length; a++) [CD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_110 $$ files_to_upload[index] = trp_array[a].getThisFileName() [CD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_111 $$ index++ [CD]
Line_107 $$ int index = 0 --> Line_111 $$ index++ [FD]
Line_2 $$ public static void main(String[] args) --> Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) [CD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) [FD]
Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) --> Line_114 $$ files_to_upload[index] = gtrn_array[a].getThisFileName() [CD]
Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) --> Line_115 $$ index++ [CD]
Line_107 $$ int index = 0 --> Line_115 $$ index++ [FD]
Line_2 $$ public static void main(String[] args) --> Line_117 $$ for (int a = 0; a < flux_array.length; a++) [CD]
Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) --> Line_117 $$ for (int a = 0; a < flux_array.length; a++) [FD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_117 $$ for (int a = 0; a < flux_array.length; a++) [FD]
Line_117 $$ for (int a = 0; a < flux_array.length; a++) --> Line_118 $$ files_to_upload[index] = flux_array[a].getThisFileName() [CD]
Line_117 $$ for (int a = 0; a < flux_array.length; a++) --> Line_119 $$ index++ [CD]
Line_107 $$ int index = 0 --> Line_119 $$ index++ [FD]
Line_2 $$ public static void main(String[] args) --> Line_121 $$ for (int a = 0; a < trans_array.length; a++) [CD]
Line_117 $$ for (int a = 0; a < flux_array.length; a++) --> Line_121 $$ for (int a = 0; a < trans_array.length; a++) [FD]
Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) --> Line_121 $$ for (int a = 0; a < trans_array.length; a++) [FD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_121 $$ for (int a = 0; a < trans_array.length; a++) [FD]
Line_121 $$ for (int a = 0; a < trans_array.length; a++) --> Line_122 $$ files_to_upload[index] = trans_array[a].getThisFileName() [CD]
Line_121 $$ for (int a = 0; a < trans_array.length; a++) --> Line_123 $$ index++ [CD]
Line_107 $$ int index = 0 --> Line_123 $$ index++ [FD]
Line_2 $$ public static void main(String[] args) --> Line_125 $$ for (int a = 0; a < letspec_array.length; a++) [CD]
Line_121 $$ for (int a = 0; a < trans_array.length; a++) --> Line_125 $$ for (int a = 0; a < letspec_array.length; a++) [FD]
Line_117 $$ for (int a = 0; a < flux_array.length; a++) --> Line_125 $$ for (int a = 0; a < letspec_array.length; a++) [FD]
Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) --> Line_125 $$ for (int a = 0; a < letspec_array.length; a++) [FD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_125 $$ for (int a = 0; a < letspec_array.length; a++) [FD]
Line_125 $$ for (int a = 0; a < letspec_array.length; a++) --> Line_126 $$ files_to_upload[index] = letspec_array[a].getThisFileName() [CD]
Line_125 $$ for (int a = 0; a < letspec_array.length; a++) --> Line_127 $$ index++ [CD]
Line_107 $$ int index = 0 --> Line_127 $$ index++ [FD]
Line_2 $$ public static void main(String[] args) --> Line_129 $$ for (int a = 0; a < pup_array.length; a++) [CD]
Line_125 $$ for (int a = 0; a < letspec_array.length; a++) --> Line_129 $$ for (int a = 0; a < pup_array.length; a++) [FD]
Line_121 $$ for (int a = 0; a < trans_array.length; a++) --> Line_129 $$ for (int a = 0; a < pup_array.length; a++) [FD]
Line_117 $$ for (int a = 0; a < flux_array.length; a++) --> Line_129 $$ for (int a = 0; a < pup_array.length; a++) [FD]
Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) --> Line_129 $$ for (int a = 0; a < pup_array.length; a++) [FD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_129 $$ for (int a = 0; a < pup_array.length; a++) [FD]
Line_129 $$ for (int a = 0; a < pup_array.length; a++) --> Line_130 $$ files_to_upload[index] = pup_array[a].getThisFileName() [CD]
Line_129 $$ for (int a = 0; a < pup_array.length; a++) --> Line_131 $$ index++ [CD]
Line_107 $$ int index = 0 --> Line_131 $$ index++ [FD]
Line_2 $$ public static void main(String[] args) --> Line_133 $$ for (int a = 0; a < hup_array.length; a++) [CD]
Line_129 $$ for (int a = 0; a < pup_array.length; a++) --> Line_133 $$ for (int a = 0; a < hup_array.length; a++) [FD]
Line_125 $$ for (int a = 0; a < letspec_array.length; a++) --> Line_133 $$ for (int a = 0; a < hup_array.length; a++) [FD]
Line_121 $$ for (int a = 0; a < trans_array.length; a++) --> Line_133 $$ for (int a = 0; a < hup_array.length; a++) [FD]
Line_117 $$ for (int a = 0; a < flux_array.length; a++) --> Line_133 $$ for (int a = 0; a < hup_array.length; a++) [FD]
Line_113 $$ for (int a = 0; a < gtrn_array.length; a++) --> Line_133 $$ for (int a = 0; a < hup_array.length; a++) [FD]
Line_109 $$ for (int a = 0; a < trp_array.length; a++) --> Line_133 $$ for (int a = 0; a < hup_array.length; a++) [FD]
Line_133 $$ for (int a = 0; a < hup_array.length; a++) --> Line_134 $$ files_to_upload[index] = hup_array[a].getThisFileName() [CD]
Line_133 $$ for (int a = 0; a < hup_array.length; a++) --> Line_135 $$ index++ [CD]
Line_107 $$ int index = 0 --> Line_135 $$ index++ [FD]
Line_2 $$ public static void main(String[] args) --> Line_137 $$ Logger log = Logger.getLogger(CreateAStudy.class) [CD]
Line_2 $$ public static void main(String[] args) --> Line_138 $$ String host = "creme96.nrl.navy.mil" [CD]
Line_2 $$ public static void main(String[] args) --> Line_139 $$ String user = "anonymous" [CD]
Line_2 $$ public static void main(String[] args) --> Line_140 $$ String ftppass = email [CD]
Line_2 $$ public static void main(String[] args) --> Line_141 $$ Logger.setLevel(Level.ALL) [CD]
Line_2 $$ public static void main(String[] args) --> Line_142 $$ FTPClient ftp = null [CD]
Line_142 $$ FTPClient ftp = null --> Line_144 $$ ftp = new FTPClient() [FD]
Line_142 $$ FTPClient ftp = null --> Line_145 $$ ftp.setRemoteHost(host) [FD]
Line_144 $$ ftp = new FTPClient() --> Line_145 $$ ftp.setRemoteHost(host) [FD]
Line_138 $$ String host = "creme96.nrl.navy.mil" --> Line_145 $$ ftp.setRemoteHost(host) [FD]
Line_142 $$ FTPClient ftp = null --> Line_147 $$ ftp.setMessageListener(listener) [FD]
Line_144 $$ ftp = new FTPClient() --> Line_147 $$ ftp.setMessageListener(listener) [FD]
Line_146 $$ FTPMessageCollector listener = new FTPMessageCollector() --> Line_147 $$ ftp.setMessageListener(listener) [FD]
Line_142 $$ FTPClient ftp = null --> Line_149 $$ ftp.connect() [FD]
Line_144 $$ ftp = new FTPClient() --> Line_149 $$ ftp.connect() [FD]
Line_142 $$ FTPClient ftp = null --> Line_151 $$ ftp.login(user, ftppass) [FD]
Line_144 $$ ftp = new FTPClient() --> Line_151 $$ ftp.login(user, ftppass) [FD]
Line_139 $$ String user = "anonymous" --> Line_151 $$ ftp.login(user, ftppass) [FD]
Line_140 $$ String ftppass = email --> Line_151 $$ ftp.login(user, ftppass) [FD]
Line_142 $$ FTPClient ftp = null --> Line_153 $$ ftp.setConnectMode(FTPConnectMode.ACTIVE) [FD]
Line_144 $$ ftp = new FTPClient() --> Line_153 $$ ftp.setConnectMode(FTPConnectMode.ACTIVE) [FD]
Line_142 $$ FTPClient ftp = null --> Line_154 $$ ftp.setType(FTPTransferType.BINARY) [FD]
Line_144 $$ ftp = new FTPClient() --> Line_154 $$ ftp.setType(FTPTransferType.BINARY) [FD]
Line_156 $$ for (int u = 0; u < files_to_upload.length; u++) --> Line_157 $$ ftp.put(files_to_upload[u], files_to_upload[u]) [CD]
Line_142 $$ FTPClient ftp = null --> Line_157 $$ ftp.put(files_to_upload[u], files_to_upload[u]) [FD]
Line_144 $$ ftp = new FTPClient() --> Line_157 $$ ftp.put(files_to_upload[u], files_to_upload[u]) [FD]
Line_142 $$ FTPClient ftp = null --> Line_160 $$ ftp.quit() [FD]
Line_144 $$ ftp = new FTPClient() --> Line_160 $$ ftp.quit() [FD]
Line_2 $$ public static void main(String[] args) --> Line_167 $$ System.out.println("Finished FTPing User Request Files to common directory") [CD]
Line_2 $$ public static void main(String[] args) --> Line_168 $$ Upload_Files.upload(files_to_upload, username, password, IDnumber) [CD]
Line_108 $$ String[] files_to_upload = new String[num_of_files] --> Line_168 $$ Upload_Files.upload(files_to_upload, username, password, IDnumber) [FD]
Line_4 $$ String username = "josh8573" --> Line_168 $$ Upload_Files.upload(files_to_upload, username, password, IDnumber) [FD]
Line_5 $$ String password = "josh8573" --> Line_168 $$ Upload_Files.upload(files_to_upload, username, password, IDnumber) [FD]
Line_6 $$ String IDnumber = "3030" --> Line_168 $$ Upload_Files.upload(files_to_upload, username, password, IDnumber) [FD]
Line_2 $$ public static void main(String[] args) --> Line_169 $$ System.out.println("Finished transfering User Request Files to your CREME96 personal directory") [CD]
Line_2 $$ public static void main(String[] args) --> Line_170 $$ RunRoutines.routines(files_to_upload, username, password, IDnumber) [CD]
Line_108 $$ String[] files_to_upload = new String[num_of_files] --> Line_170 $$ RunRoutines.routines(files_to_upload, username, password, IDnumber) [FD]
Line_4 $$ String username = "josh8573" --> Line_170 $$ RunRoutines.routines(files_to_upload, username, password, IDnumber) [FD]
Line_5 $$ String password = "josh8573" --> Line_170 $$ RunRoutines.routines(files_to_upload, username, password, IDnumber) [FD]
Line_6 $$ String IDnumber = "3030" --> Line_170 $$ RunRoutines.routines(files_to_upload, username, password, IDnumber) [FD]
Line_2 $$ public static void main(String[] args) --> Line_171 $$ System.out.println("Finished running all of your uploaded routines") [CD]
