Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_3 $$ final String sDistrosFile = "Distros.tmp" [CD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_4 $$ final String sSymbolsFile = "Symbols.tmp" [CD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_6 $$ int Levels = 2 [CD]
Line_15 $$ DocumentSet dsSet = new DocumentSet(FilePathEdt.getText(), 1.0) --> Line_16 $$ dsSet.createSets(true, (double) 100 / 100) [FD]
Line_15 $$ DocumentSet dsSet = new DocumentSet(FilePathEdt.getText(), 1.0) --> Line_19 $$ Iterator iIter = dsSet.getTrainingSet().iterator() [FD]
Line_17 $$ int iCurCnt, iTotal --> Line_20 $$ iTotal = dsSet.getTrainingSet().size() [FD]
Line_15 $$ DocumentSet dsSet = new DocumentSet(FilePathEdt.getText(), 1.0) --> Line_20 $$ iTotal = dsSet.getTrainingSet().size() [FD]
Line_17 $$ int iCurCnt, iTotal --> Line_21 $$ if (iTotal == 0) [FD]
Line_20 $$ iTotal = dsSet.getTrainingSet().size() --> Line_21 $$ if (iTotal == 0) [FD]
Line_21 $$ if (iTotal == 0) --> Line_22 $$ appendToLog("No input documents.\n") [CD]
Line_21 $$ if (iTotal == 0) --> Line_23 $$ appendToLog("======DONE=====\n") [CD]
Line_21 $$ if (iTotal == 0) --> Line_24 $$ return [CD]
Line_15 $$ DocumentSet dsSet = new DocumentSet(FilePathEdt.getText(), 1.0) --> Line_27 $$ Chunker.train(dsSet.toFilenameSet(DocumentSet.FROM_WHOLE_SET)) [FD]
Line_17 $$ int iCurCnt, iTotal --> Line_30 $$ iCurCnt = 0 [FD]
Line_6 $$ int Levels = 2 --> Line_32 $$ for (int iCnt = 0; iCnt < Levels; iCnt++) cdDoc[iCnt] = new DistributionDocument(1, MinLevel + iCnt) [FD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_33 $$ fStatus.setVisible(true) [FD]
Line_19 $$ Iterator iIter = dsSet.getTrainingSet().iterator() --> Line_37 $$ while (iIter.hasNext()) [FD]
Line_37 $$ while (iIter.hasNext()) --> Line_38 $$ sFile = ((CategorizedFileEntry) iIter.next()).getFileName() [CD]
Line_18 $$ String sFile = "" --> Line_38 $$ sFile = ((CategorizedFileEntry) iIter.next()).getFileName() [FD]
Line_19 $$ Iterator iIter = dsSet.getTrainingSet().iterator() --> Line_38 $$ sFile = ((CategorizedFileEntry) iIter.next()).getFileName() [FD]
Line_37 $$ while (iIter.hasNext()) --> Line_39 $$ fStatus.setStatus("(Pass 1/3) Loading file..." + sFile, (double) iCurCnt / iTotal) [CD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_39 $$ fStatus.setStatus("(Pass 1/3) Loading file..." + sFile, (double) iCurCnt / iTotal) [FD]
Line_37 $$ while (iIter.hasNext()) --> Line_40 $$ final DistributionDocument[] cdDocArg = cdDoc [CD]
Line_37 $$ while (iIter.hasNext()) --> Line_41 $$ final String sFileArg = sFile [CD]
Line_37 $$ while (iIter.hasNext()) --> Line_42 $$ for (int iCnt = 0; iCnt < cdDoc.length; iCnt++) [CD]
Line_32 $$ for (int iCnt = 0; iCnt < Levels; iCnt++) cdDoc[iCnt] = new DistributionDocument(1, MinLevel + iCnt) --> Line_42 $$ for (int iCnt = 0; iCnt < cdDoc.length; iCnt++) [FD]
Line_42 $$ for (int iCnt = 0; iCnt < cdDoc.length; iCnt++) --> Line_43 $$ final int iCntArg = iCnt [CD]
Line_42 $$ for (int iCnt = 0; iCnt < cdDoc.length; iCnt++) --> Line_44 $$ while (!t.addThreadFor(new Runnable() [CD]
Line_34 $$ ThreadList t = new ThreadList(Runtime.getRuntime().availableProcessors() + 1) --> Line_44 $$ while (!t.addThreadFor(new Runnable() [FD]
Line_44 $$ while (!t.addThreadFor(new Runnable() --> Line_46 $$ cdDocArg[iCntArg].loadDataStringFromFile(sFileArg, false) [CD]
Line_41 $$ final String sFileArg = sFile --> Line_46 $$ cdDocArg[iCntArg].loadDataStringFromFile(sFileArg, false) [FD]
Line_46 $$ cdDocArg[iCntArg].loadDataStringFromFile(sFileArg, false) --> Line_47 $$ cdDocArg[iCntArg].setDataString(utils.reverseString(utils.loadFileToString(sFileArg)), iCntArg, false) [CD]
Line_43 $$ final int iCntArg = iCnt --> Line_47 $$ cdDocArg[iCntArg].setDataString(utils.reverseString(utils.loadFileToString(sFileArg)), iCntArg, false) [FD]
Line_41 $$ final String sFileArg = sFile --> Line_47 $$ cdDocArg[iCntArg].setDataString(utils.reverseString(utils.loadFileToString(sFileArg)), iCntArg, false) [FD]
Line_44 $$ while (!t.addThreadFor(new Runnable() --> Line_50 $$ Thread.yield() [CD]
Line_34 $$ ThreadList t = new ThreadList(Runtime.getRuntime().availableProcessors() + 1) --> Line_53 $$ t.waitUntilCompletion() [FD]
Line_37 $$ while (iIter.hasNext()) --> Line_60 $$ sgOverallGraph.setDataString(((new StringBuffer().append((char) StreamTokenizer.TT_EOF))).toString()) [CD]
Line_37 $$ while (iIter.hasNext()) --> Line_61 $$ sgOverallGraph.loadFromFile(sFile) [CD]
Line_18 $$ String sFile = "" --> Line_61 $$ sgOverallGraph.loadFromFile(sFile) [FD]
Line_37 $$ while (iIter.hasNext()) --> Line_62 $$ fStatus.setStatus("Loaded file..." + sFile, (double) ++iCurCnt / iTotal) [CD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_62 $$ fStatus.setStatus("Loaded file..." + sFile, (double) ++iCurCnt / iTotal) [FD]
Line_37 $$ while (iIter.hasNext()) --> Line_63 $$ Thread.yield() [CD]
Line_68 $$ if (fPreviousSymbols.exists()) --> Line_69 $$ System.err.println("ATTENTION: Using previous symbols...") [CD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_84 $$ sSymbols = getSymbolsByProbabilities(sgOverallGraph.getDataString(), fStatus) [FD]
Line_88 $$ while (iSymbol.hasNext()) --> Line_89 $$ String sCurSymbol = (String) iSymbol.next() [CD]
Line_88 $$ while (iSymbol.hasNext()) --> Line_90 $$ if (iMaxSymbolSize < sCurSymbol.length()) [CD]
Line_89 $$ String sCurSymbol = (String) iSymbol.next() --> Line_90 $$ if (iMaxSymbolSize < sCurSymbol.length()) [FD]
Line_88 $$ while (iSymbol.hasNext()) --> Line_91 $$ if (iMinSymbolSize > sCurSymbol.length()) [CD]
Line_89 $$ String sCurSymbol = (String) iSymbol.next() --> Line_91 $$ if (iMinSymbolSize > sCurSymbol.length()) [FD]
Line_15 $$ DocumentSet dsSet = new DocumentSet(FilePathEdt.getText(), 1.0) --> Line_104 $$ iIter = dsSet.getTrainingSet().iterator() [FD]
Line_15 $$ DocumentSet dsSet = new DocumentSet(FilePathEdt.getText(), 1.0) --> Line_105 $$ iTotal = dsSet.getTrainingSet().size() [FD]
Line_17 $$ int iCurCnt, iTotal --> Line_106 $$ if (iTotal == 0) [FD]
Line_20 $$ iTotal = dsSet.getTrainingSet().size() --> Line_106 $$ if (iTotal == 0) [FD]
Line_106 $$ if (iTotal == 0) --> Line_107 $$ appendToLog("No input documents.\n") [CD]
Line_106 $$ if (iTotal == 0) --> Line_108 $$ appendToLog("======DONE=====\n") [CD]
Line_106 $$ if (iTotal == 0) --> Line_109 $$ return [CD]
Line_117 $$ if (fPreviousRun.exists()) --> Line_118 $$ System.err.println("ATTENTION: Using previous distros...") [CD]
Line_19 $$ Iterator iIter = dsSet.getTrainingSet().iterator() --> Line_141 $$ while (iIter.hasNext()) [FD]
Line_141 $$ while (iIter.hasNext()) --> Line_142 $$ fStatus.setStatus("(Pass 2/3) Parsing file..." + sFile, (double) iCurCnt++ / iTotal) [CD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_142 $$ fStatus.setStatus("(Pass 2/3) Parsing file..." + sFile, (double) iCurCnt++ / iTotal) [FD]
Line_141 $$ while (iIter.hasNext()) --> Line_143 $$ sFile = ((CategorizedFileEntry) iIter.next()).getFileName() [CD]
Line_19 $$ Iterator iIter = dsSet.getTrainingSet().iterator() --> Line_143 $$ sFile = ((CategorizedFileEntry) iIter.next()).getFileName() [FD]
Line_141 $$ while (iIter.hasNext()) --> Line_144 $$ String sDataString = "" [CD]
Line_148 $$ int iData = 0 --> Line_149 $$ while ((iData = fiIn.read()) > -1) bsOut.write(iData) [FD]
Line_147 $$ FileInputStream fiIn = new FileInputStream(sFile) --> Line_149 $$ while ((iData = fiIn.read()) > -1) bsOut.write(iData) [FD]
Line_146 $$ ByteArrayOutputStream bsOut = new ByteArrayOutputStream() --> Line_149 $$ while ((iData = fiIn.read()) > -1) bsOut.write(iData) [FD]
Line_144 $$ String sDataString = "" --> Line_150 $$ sDataString = bsOut.toString() [FD]
Line_146 $$ ByteArrayOutputStream bsOut = new ByteArrayOutputStream() --> Line_150 $$ sDataString = bsOut.toString() [FD]
Line_141 $$ while (iIter.hasNext()) --> Line_159 $$ for (int iSymbolSize = iMinSymbolSize; iSymbolSize <= iMaxSymbolSize; iSymbolSize++) [CD]
Line_159 $$ for (int iSymbolSize = iMinSymbolSize; iSymbolSize <= iMaxSymbolSize; iSymbolSize++) --> Line_160 $$ final int iSymbolSizeArg = iSymbolSize [CD]
Line_159 $$ for (int iSymbolSize = iMinSymbolSize; iSymbolSize <= iMaxSymbolSize; iSymbolSize++) --> Line_161 $$ while (!t.addThreadFor(new Runnable() [CD]
Line_34 $$ ThreadList t = new ThreadList(Runtime.getRuntime().availableProcessors() + 1) --> Line_161 $$ while (!t.addThreadFor(new Runnable() [FD]
Line_161 $$ while (!t.addThreadFor(new Runnable() --> Line_163 $$ NGramDocument ndCur = new NGramDocument(iSymbolSizeArg, iSymbolSizeArg, 1, iSymbolSizeArg, iSymbolSizeArg) [CD]
Line_161 $$ while (!t.addThreadFor(new Runnable() --> Line_164 $$ ndCur.setDataString(sDataStringArg) [CD]
Line_163 $$ NGramDocument ndCur = new NGramDocument(iSymbolSizeArg, iSymbolSizeArg, 1, iSymbolSizeArg, iSymbolSizeArg) --> Line_164 $$ ndCur.setDataString(sDataStringArg) [FD]
Line_161 $$ while (!t.addThreadFor(new Runnable() --> Line_165 $$ int iSymbolCnt = 0 [CD]
Line_161 $$ while (!t.addThreadFor(new Runnable() --> Line_166 $$ int iNonSymbolCnt = 0 [CD]
Line_161 $$ while (!t.addThreadFor(new Runnable() --> Line_167 $$ Iterator iExtracted = ndCur.getDocumentGraph().getGraphLevel(0).getVertexSet().iterator() [CD]
Line_163 $$ NGramDocument ndCur = new NGramDocument(iSymbolSizeArg, iSymbolSizeArg, 1, iSymbolSizeArg, iSymbolSizeArg) --> Line_167 $$ Iterator iExtracted = ndCur.getDocumentGraph().getGraphLevel(0).getVertexSet().iterator() [FD]
Line_161 $$ while (!t.addThreadFor(new Runnable() --> Line_168 $$ while (iExtracted.hasNext()) [CD]
Line_167 $$ Iterator iExtracted = ndCur.getDocumentGraph().getGraphLevel(0).getVertexSet().iterator() --> Line_168 $$ while (iExtracted.hasNext()) [FD]
Line_168 $$ while (iExtracted.hasNext()) --> Line_169 $$ String sCur = ((Vertex) iExtracted.next()).toString() [CD]
Line_167 $$ Iterator iExtracted = ndCur.getDocumentGraph().getGraphLevel(0).getVertexSet().iterator() --> Line_169 $$ String sCur = ((Vertex) iExtracted.next()).toString() [FD]
Line_168 $$ while (iExtracted.hasNext()) --> Line_170 $$ if (sSymbolsArg.contains(sCur)) [CD]
Line_169 $$ String sCur = ((Vertex) iExtracted.next()).toString() --> Line_170 $$ if (sSymbolsArg.contains(sCur)) [FD]
Line_170 $$ if (sSymbolsArg.contains(sCur)) --> Line_171 $$ iSymbolCnt++ [CD]
Line_165 $$ int iSymbolCnt = 0 --> Line_171 $$ iSymbolCnt++ [FD]
Line_169 $$ String sCur = ((Vertex) iExtracted.next()).toString() --> Line_173 $$ dSymbolSizesArg.setValue(sCur.length(), dSymbolSizesArg.getValue(sCur.length()) + 1.0) [FD]
Line_170 $$ if (sSymbolsArg.contains(sCur)) --> Line_175 $$ iNonSymbolCnt++ [CD]
Line_166 $$ int iNonSymbolCnt = 0 --> Line_175 $$ iNonSymbolCnt++ [FD]
Line_160 $$ final int iSymbolSizeArg = iSymbolSize --> Line_178 $$ dSymbolsPerSizeArg.setValue(iSymbolSizeArg, dSymbolsPerSizeArg.getValue(iSymbolSizeArg) + iSymbolCnt) [FD]
Line_160 $$ final int iSymbolSizeArg = iSymbolSize --> Line_181 $$ dNonSymbolsPerSizeArg.setValue(iSymbolSizeArg, dNonSymbolsPerSizeArg.getValue(iSymbolSizeArg) + iNonSymbolCnt) [FD]
Line_161 $$ while (!t.addThreadFor(new Runnable() --> Line_184 $$ Thread.yield() [CD]
Line_34 $$ ThreadList t = new ThreadList(Runtime.getRuntime().availableProcessors() + 1) --> Line_188 $$ t.waitUntilCompletion() [FD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_210 $$ fStatus.setStatus("Determining optimal distance...", 0.0) [FD]
Line_2 $$ private void analyseCorpus(final IStatusDisplayer fStatus) --> Line_213 $$ fStatus.setStatus("Determining optimal distance...", 1.0) [FD]
