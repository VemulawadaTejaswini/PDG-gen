Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_3 $$ ObjectFactory factory = new ObjectFactory() [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_4 $$ SubmitDocumentRequest sdr = factory.createSubmitDocumentRequest() [CD]
Line_3 $$ ObjectFactory factory = new ObjectFactory() --> Line_4 $$ SubmitDocumentRequest sdr = factory.createSubmitDocumentRequest() [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_5 $$ IdType pid = factory.createIdType() [CD]
Line_3 $$ ObjectFactory factory = new ObjectFactory() --> Line_5 $$ IdType pid = factory.createIdType() [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_6 $$ pid.setRoot("1.3.6.1.4.1.21367.2005.3.7.6fa11e467880478") [CD]
Line_5 $$ IdType pid = factory.createIdType() --> Line_6 $$ pid.setRoot("1.3.6.1.4.1.21367.2005.3.7.6fa11e467880478") [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_7 $$ sdr.setPatientId(pid) [CD]
Line_4 $$ SubmitDocumentRequest sdr = factory.createSubmitDocumentRequest() --> Line_7 $$ sdr.setPatientId(pid) [FD]
Line_5 $$ IdType pid = factory.createIdType() --> Line_7 $$ sdr.setPatientId(pid) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_8 $$ ClassLoader classLoader = JUnitHelper.class.getClassLoader() [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_9 $$ DocumentsType documents = factory.createDocumentsType() [CD]
Line_3 $$ ObjectFactory factory = new ObjectFactory() --> Line_9 $$ DocumentsType documents = factory.createDocumentsType() [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_10 $$ for (int i = 0; i < count; ++i) [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_10 $$ for (int i = 0; i < count; ++i) [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_11 $$ DocumentType document = factory.createDocumentType() [CD]
Line_3 $$ ObjectFactory factory = new ObjectFactory() --> Line_11 $$ DocumentType document = factory.createDocumentType() [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_12 $$ if ((documentIds != null) && (documentIds.length > i)) [CD]
Line_12 $$ if ((documentIds != null) && (documentIds.length > i)) --> Line_13 $$ document.setId(documentIds[i]) [CD]
Line_11 $$ DocumentType document = factory.createDocumentType() --> Line_13 $$ document.setId(documentIds[i]) [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_15 $$ CodeType type = factory.createCodeType() [CD]
Line_3 $$ ObjectFactory factory = new ObjectFactory() --> Line_15 $$ CodeType type = factory.createCodeType() [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_16 $$ type.setCode("51855-5") [CD]
Line_15 $$ CodeType type = factory.createCodeType() --> Line_16 $$ type.setCode("51855-5") [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_17 $$ type.setCodeSystem("2.16.840.1.113883.6.1") [CD]
Line_15 $$ CodeType type = factory.createCodeType() --> Line_17 $$ type.setCodeSystem("2.16.840.1.113883.6.1") [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_18 $$ document.setType(type) [CD]
Line_11 $$ DocumentType document = factory.createDocumentType() --> Line_18 $$ document.setType(type) [FD]
Line_15 $$ CodeType type = factory.createCodeType() --> Line_18 $$ document.setType(type) [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_19 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() [CD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_20 $$ InputStream is = classLoader.getResourceAsStream(file) [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_20 $$ InputStream is = classLoader.getResourceAsStream(file) [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_21 $$ assertNotNull(is) [CD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_22 $$ IOUtils.copy(is, bos) [CD]
Line_19 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_22 $$ IOUtils.copy(is, bos) [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_23 $$ document.setContent(bos.toByteArray()) [CD]
Line_11 $$ DocumentType document = factory.createDocumentType() --> Line_23 $$ document.setContent(bos.toByteArray()) [FD]
Line_19 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream() --> Line_23 $$ document.setContent(bos.toByteArray()) [FD]
Line_10 $$ for (int i = 0; i < count; ++i) --> Line_24 $$ documents.getDocument().add(document) [CD]
Line_11 $$ DocumentType document = factory.createDocumentType() --> Line_24 $$ documents.getDocument().add(document) [FD]
Line_9 $$ DocumentsType documents = factory.createDocumentsType() --> Line_24 $$ documents.getDocument().add(document) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_26 $$ sdr.setDocuments(documents) [CD]
Line_4 $$ SubmitDocumentRequest sdr = factory.createSubmitDocumentRequest() --> Line_26 $$ sdr.setDocuments(documents) [FD]
Line_9 $$ DocumentsType documents = factory.createDocumentsType() --> Line_26 $$ sdr.setDocuments(documents) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_27 $$ QName qname = new QName(URIConstants.XDSBRIDGE_URI, "SubmitDocumentRequest") [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_28 $$ JAXBContext jc = JAXBContext.newInstance(SubmitDocumentRequest.class) [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_29 $$ Marshaller marshaller = jc.createMarshaller() [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_30 $$ marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE) [CD]
Line_29 $$ Marshaller marshaller = jc.createMarshaller() --> Line_30 $$ marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_31 $$ JAXBElement element = new JAXBElement(qname, sdr.getClass(), sdr) [CD]
Line_4 $$ SubmitDocumentRequest sdr = factory.createSubmitDocumentRequest() --> Line_31 $$ JAXBElement element = new JAXBElement(qname, sdr.getClass(), sdr) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_32 $$ StringWriter sw = new StringWriter() [CD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_33 $$ marshaller.marshal(element, sw) [CD]
Line_29 $$ Marshaller marshaller = jc.createMarshaller() --> Line_33 $$ marshaller.marshal(element, sw) [FD]
Line_31 $$ JAXBElement element = new JAXBElement(qname, sdr.getClass(), sdr) --> Line_33 $$ marshaller.marshal(element, sw) [FD]
Line_32 $$ StringWriter sw = new StringWriter() --> Line_33 $$ marshaller.marshal(element, sw) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_34 $$ String xml = sw.toString() [CD]
Line_32 $$ StringWriter sw = new StringWriter() --> Line_34 $$ String xml = sw.toString() [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_35 $$ logger.debug(xml) [CD]
Line_34 $$ String xml = sw.toString() --> Line_35 $$ logger.debug(xml) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_36 $$ OMElement result = AXIOMUtil.stringToOM(OMAbstractFactory.getOMFactory(), xml) [CD]
Line_34 $$ String xml = sw.toString() --> Line_36 $$ OMElement result = AXIOMUtil.stringToOM(OMAbstractFactory.getOMFactory(), xml) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_37 $$ List<OMElement> list = XPathHelper.selectNodes(result, "./ns:Documents/ns:Document/ns:Content", URIConstants.XDSBRIDGE_URI) [CD]
Line_36 $$ OMElement result = AXIOMUtil.stringToOM(OMAbstractFactory.getOMFactory(), xml) --> Line_37 $$ List<OMElement> list = XPathHelper.selectNodes(result, "./ns:Documents/ns:Document/ns:Content", URIConstants.XDSBRIDGE_URI) [FD]
Line_38 $$ for (OMElement contentNode : list) --> Line_39 $$ OMText binaryNode = (OMText) contentNode.getFirstOMChild() [FD]
Line_39 $$ OMText binaryNode = (OMText) contentNode.getFirstOMChild() --> Line_40 $$ if (binaryNode != null) [FD]
Line_40 $$ if (binaryNode != null) --> Line_41 $$ binaryNode.setOptimize(true) [CD]
Line_39 $$ OMText binaryNode = (OMText) contentNode.getFirstOMChild() --> Line_41 $$ binaryNode.setOptimize(true) [FD]
Line_2 $$ public static OMElement createOMRequest(String file, int count, String[] documentIds) throws Exception --> Line_44 $$ return result [CD]
