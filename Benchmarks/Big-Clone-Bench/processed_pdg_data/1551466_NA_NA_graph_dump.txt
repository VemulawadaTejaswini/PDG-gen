Line_2 $$ public static void test2() throws Exception --> Line_3 $$ int keySize = 1024 [CD]
Line_2 $$ public static void test2() throws Exception --> Line_4 $$ int dBlockSize = keySize / 8 [CD]
Line_2 $$ public static void test2() throws Exception --> Line_5 $$ int eBlockSize = dBlockSize - 8 - 3 [CD]
Line_2 $$ public static void test2() throws Exception --> Line_6 $$ CertAndKeyGen certAndKeyGen = new CertAndKeyGen("RSA", "MD5WithRSA") [CD]
Line_2 $$ public static void test2() throws Exception --> Line_7 $$ certAndKeyGen.generate(keySize) [CD]
Line_6 $$ CertAndKeyGen certAndKeyGen = new CertAndKeyGen("RSA", "MD5WithRSA") --> Line_7 $$ certAndKeyGen.generate(keySize) [FD]
Line_3 $$ int keySize = 1024 --> Line_7 $$ certAndKeyGen.generate(keySize) [FD]
Line_2 $$ public static void test2() throws Exception --> Line_8 $$ PublicKey publicKey = certAndKeyGen.getPublicKey() [CD]
Line_6 $$ CertAndKeyGen certAndKeyGen = new CertAndKeyGen("RSA", "MD5WithRSA") --> Line_8 $$ PublicKey publicKey = certAndKeyGen.getPublicKey() [FD]
Line_2 $$ public static void test2() throws Exception --> Line_9 $$ PrivateKey privateKey = certAndKeyGen.getPrivateKey() [CD]
Line_6 $$ CertAndKeyGen certAndKeyGen = new CertAndKeyGen("RSA", "MD5WithRSA") --> Line_9 $$ PrivateKey privateKey = certAndKeyGen.getPrivateKey() [FD]
Line_2 $$ public static void test2() throws Exception --> Line_10 $$ Cipher cipher1 = Cipher.getInstance("RSA/ECB/PKCS1Padding") [CD]
Line_2 $$ public static void test2() throws Exception --> Line_11 $$ cipher1.init(Cipher.ENCRYPT_MODE, publicKey) [CD]
Line_10 $$ Cipher cipher1 = Cipher.getInstance("RSA/ECB/PKCS1Padding") --> Line_11 $$ cipher1.init(Cipher.ENCRYPT_MODE, publicKey) [FD]
Line_8 $$ PublicKey publicKey = certAndKeyGen.getPublicKey() --> Line_11 $$ cipher1.init(Cipher.ENCRYPT_MODE, publicKey) [FD]
Line_2 $$ public static void test2() throws Exception --> Line_12 $$ String fileA = "C:/temp/a.txt" [CD]
Line_2 $$ public static void test2() throws Exception --> Line_13 $$ String fileB = "C:/temp/b.txt" [CD]
Line_2 $$ public static void test2() throws Exception --> Line_14 $$ String fileC = "C:/temp/c.txt" [CD]
Line_2 $$ public static void test2() throws Exception --> Line_15 $$ FileInputStream fis = new FileInputStream(fileA) [CD]
Line_2 $$ public static void test2() throws Exception --> Line_16 $$ FileOutputStream fos = new FileOutputStream(fileB, false) [CD]
Line_2 $$ public static void test2() throws Exception --> Line_17 $$ CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize) [CD]
Line_2 $$ public static void test2() throws Exception --> Line_18 $$ byte[] b = new byte[128] [CD]
Line_2 $$ public static void test2() throws Exception --> Line_19 $$ int i = fis.read(b) [CD]
Line_15 $$ FileInputStream fis = new FileInputStream(fileA) --> Line_19 $$ int i = fis.read(b) [FD]
Line_18 $$ byte[] b = new byte[128] --> Line_19 $$ int i = fis.read(b) [FD]
Line_2 $$ public static void test2() throws Exception --> Line_20 $$ while (i != -1) [CD]
Line_19 $$ int i = fis.read(b) --> Line_20 $$ while (i != -1) [FD]
Line_20 $$ while (i != -1) --> Line_21 $$ eos.write(b, 0, i) [CD]
Line_17 $$ CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize) --> Line_21 $$ eos.write(b, 0, i) [FD]
Line_18 $$ byte[] b = new byte[128] --> Line_21 $$ eos.write(b, 0, i) [FD]
Line_19 $$ int i = fis.read(b) --> Line_21 $$ eos.write(b, 0, i) [FD]
Line_20 $$ while (i != -1) --> Line_22 $$ i = fis.read(b) [CD]
Line_19 $$ int i = fis.read(b) --> Line_22 $$ i = fis.read(b) [FD]
Line_15 $$ FileInputStream fis = new FileInputStream(fileA) --> Line_22 $$ i = fis.read(b) [FD]
Line_18 $$ byte[] b = new byte[128] --> Line_22 $$ i = fis.read(b) [FD]
Line_2 $$ public static void test2() throws Exception --> Line_24 $$ eos.flush() [CD]
Line_17 $$ CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize) --> Line_24 $$ eos.flush() [FD]
Line_2 $$ public static void test2() throws Exception --> Line_25 $$ eos.close() [CD]
Line_17 $$ CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize) --> Line_25 $$ eos.close() [FD]
Line_2 $$ public static void test2() throws Exception --> Line_26 $$ fos.close() [CD]
Line_16 $$ FileOutputStream fos = new FileOutputStream(fileB, false) --> Line_26 $$ fos.close() [FD]
Line_2 $$ public static void test2() throws Exception --> Line_27 $$ Cipher cipher2 = Cipher.getInstance("RSA/ECB/PKCS1Padding") [CD]
Line_2 $$ public static void test2() throws Exception --> Line_28 $$ cipher2.init(Cipher.DECRYPT_MODE, privateKey) [CD]
Line_27 $$ Cipher cipher2 = Cipher.getInstance("RSA/ECB/PKCS1Padding") --> Line_28 $$ cipher2.init(Cipher.DECRYPT_MODE, privateKey) [FD]
Line_9 $$ PrivateKey privateKey = certAndKeyGen.getPrivateKey() --> Line_28 $$ cipher2.init(Cipher.DECRYPT_MODE, privateKey) [FD]
Line_2 $$ public static void test2() throws Exception --> Line_29 $$ fis = new FileInputStream(fileB) [CD]
Line_15 $$ FileInputStream fis = new FileInputStream(fileA) --> Line_29 $$ fis = new FileInputStream(fileB) [FD]
Line_2 $$ public static void test2() throws Exception --> Line_30 $$ CipherInputStream cis = new CipherInputStream(fis, cipher2, dBlockSize) [CD]
Line_2 $$ public static void test2() throws Exception --> Line_31 $$ FileOutputStream decodedFile = new FileOutputStream(fileC, false) [CD]
Line_2 $$ public static void test2() throws Exception --> Line_32 $$ int read = -1 [CD]
Line_2 $$ public static void test2() throws Exception --> Line_33 $$ while ((read = cis.read()) > -1) [CD]
Line_32 $$ int read = -1 --> Line_33 $$ while ((read = cis.read()) > -1) [FD]
Line_30 $$ CipherInputStream cis = new CipherInputStream(fis, cipher2, dBlockSize) --> Line_33 $$ while ((read = cis.read()) > -1) [FD]
Line_33 $$ while ((read = cis.read()) > -1) --> Line_34 $$ decodedFile.write(read) [CD]
Line_33 $$ while ((read = cis.read()) > -1) --> Line_34 $$ decodedFile.write(read) [FD]
Line_31 $$ FileOutputStream decodedFile = new FileOutputStream(fileC, false) --> Line_34 $$ decodedFile.write(read) [FD]
Line_32 $$ int read = -1 --> Line_34 $$ decodedFile.write(read) [FD]
Line_2 $$ public static void test2() throws Exception --> Line_36 $$ decodedFile.close() [CD]
Line_31 $$ FileOutputStream decodedFile = new FileOutputStream(fileC, false) --> Line_36 $$ decodedFile.close() [FD]
Line_2 $$ public static void test2() throws Exception --> Line_37 $$ fis.close() [CD]
Line_15 $$ FileInputStream fis = new FileInputStream(fileA) --> Line_37 $$ fis.close() [FD]
Line_29 $$ fis = new FileInputStream(fileB) --> Line_37 $$ fis.close() [FD]
Line_22 $$ i = fis.read(b) --> Line_20 $$ while (i != -1) [FD]
Line_22 $$ i = fis.read(b) --> Line_21 $$ eos.write(b, 0, i) [FD]
