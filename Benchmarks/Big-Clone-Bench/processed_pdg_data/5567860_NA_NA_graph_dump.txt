Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_3 $$ Entity entity = (Entity) eb [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_4 $$ StringBuffer sb = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_5 $$ String myPackage = getPackageName(eb) [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_5 $$ String myPackage = getPackageName(eb) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_6 $$ sb.append("package " + myPackage + ";\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_6 $$ sb.append("package " + myPackage + ";\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_7 $$ sb.append("\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_7 $$ sb.append("\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_8 $$ DaoValuesGenerator valgen = new DaoValuesGenerator() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_9 $$ String values_class_name = valgen.getClassName(entity) [CD]
Line_8 $$ DaoValuesGenerator valgen = new DaoValuesGenerator() --> Line_9 $$ String values_class_name = valgen.getClassName(entity) [FD]
Line_3 $$ Entity entity = (Entity) eb --> Line_9 $$ String values_class_name = valgen.getClassName(entity) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_10 $$ sb.append("\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_10 $$ sb.append("\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_11 $$ List importList = new Vector() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_12 $$ importList.add("java.io.FileOutputStream;") [CD]
Line_11 $$ List importList = new Vector() --> Line_12 $$ importList.add("java.io.FileOutputStream;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_13 $$ importList.add("java.io.FileInputStream;") [CD]
Line_11 $$ List importList = new Vector() --> Line_13 $$ importList.add("java.io.FileInputStream;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_14 $$ importList.add("java.io.DataInputStream;") [CD]
Line_11 $$ List importList = new Vector() --> Line_14 $$ importList.add("java.io.DataInputStream;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_15 $$ importList.add("java.io.DataOutputStream;") [CD]
Line_11 $$ List importList = new Vector() --> Line_15 $$ importList.add("java.io.DataOutputStream;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_16 $$ importList.add("java.io.IOException;") [CD]
Line_11 $$ List importList = new Vector() --> Line_16 $$ importList.add("java.io.IOException;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_17 $$ importList.add("java.sql.Date;") [CD]
Line_11 $$ List importList = new Vector() --> Line_17 $$ importList.add("java.sql.Date;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_18 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_18 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [FD]
Line_11 $$ List importList = new Vector() --> Line_18 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [FD]
Line_8 $$ DaoValuesGenerator valgen = new DaoValuesGenerator() --> Line_18 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_19 $$ Iterator it = importList.iterator() [CD]
Line_11 $$ List importList = new Vector() --> Line_19 $$ Iterator it = importList.iterator() [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_20 $$ while (it.hasNext()) [CD]
Line_19 $$ Iterator it = importList.iterator() --> Line_20 $$ while (it.hasNext()) [FD]
Line_20 $$ while (it.hasNext()) --> Line_21 $$ String importName = (String) it.next() [CD]
Line_19 $$ Iterator it = importList.iterator() --> Line_21 $$ String importName = (String) it.next() [FD]
Line_20 $$ while (it.hasNext()) --> Line_22 $$ sb.append("import " + importName + "\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_22 $$ sb.append("import " + importName + "\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_24 $$ sb.append("\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_24 $$ sb.append("\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_25 $$ String proto_version = entity.getPatternValue(GeneratorConst.PATTERN_STREAM_PROTO_VERSION, "1") [CD]
Line_3 $$ Entity entity = (Entity) eb --> Line_25 $$ String proto_version = entity.getPatternValue(GeneratorConst.PATTERN_STREAM_PROTO_VERSION, "1") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_26 $$ String streamer_class_name = getClassName(entity) [CD]
Line_3 $$ Entity entity = (Entity) eb --> Line_26 $$ String streamer_class_name = getClassName(entity) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_27 $$ sb.append("public class " + streamer_class_name + "\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_27 $$ sb.append("public class " + streamer_class_name + "\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_28 $$ sb.append(" [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_28 $$ sb.append(" [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_29 $$ sb.append("\n\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_29 $$ sb.append("\n\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_30 $$ StringBuffer f_writer = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_31 $$ StringBuffer f_reader = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_32 $$ boolean has_times = false [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_33 $$ boolean has_strings = false [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_34 $$ it = entity.getMembers().iterator() [CD]
Line_19 $$ Iterator it = importList.iterator() --> Line_34 $$ it = entity.getMembers().iterator() [FD]
Line_3 $$ Entity entity = (Entity) eb --> Line_34 $$ it = entity.getMembers().iterator() [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_35 $$ while (it.hasNext()) [CD]
Line_19 $$ Iterator it = importList.iterator() --> Line_35 $$ while (it.hasNext()) [FD]
Line_34 $$ it = entity.getMembers().iterator() --> Line_35 $$ while (it.hasNext()) [FD]
Line_35 $$ while (it.hasNext()) --> Line_36 $$ Member member = (Member) it.next() [CD]
Line_19 $$ Iterator it = importList.iterator() --> Line_36 $$ Member member = (Member) it.next() [FD]
Line_34 $$ it = entity.getMembers().iterator() --> Line_36 $$ Member member = (Member) it.next() [FD]
Line_35 $$ while (it.hasNext()) --> Line_37 $$ String nm = member.getName() [CD]
Line_36 $$ Member member = (Member) it.next() --> Line_37 $$ String nm = member.getName() [FD]
Line_35 $$ while (it.hasNext()) --> Line_38 $$ String getter = "obj." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_GET, member) [CD]
Line_36 $$ Member member = (Member) it.next() --> Line_38 $$ String getter = "obj." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_GET, member) [FD]
Line_35 $$ while (it.hasNext()) --> Line_39 $$ String setter = "obj." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member) [CD]
Line_36 $$ Member member = (Member) it.next() --> Line_39 $$ String setter = "obj." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member) [FD]
Line_35 $$ while (it.hasNext()) --> Line_40 $$ String pad = "    " [CD]
Line_35 $$ while (it.hasNext()) --> Line_41 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) [CD]
Line_36 $$ Member member = (Member) it.next() --> Line_41 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) [FD]
Line_35 $$ while (it.hasNext()) --> Line_42 $$ f_writer.append(gen_type.getToBinaryCode(pad, "dos", getter + "()")) [CD]
Line_30 $$ StringBuffer f_writer = new StringBuffer() --> Line_42 $$ f_writer.append(gen_type.getToBinaryCode(pad, "dos", getter + "()")) [FD]
Line_41 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) --> Line_42 $$ f_writer.append(gen_type.getToBinaryCode(pad, "dos", getter + "()")) [FD]
Line_40 $$ String pad = "    " --> Line_42 $$ f_writer.append(gen_type.getToBinaryCode(pad, "dos", getter + "()")) [FD]
Line_35 $$ while (it.hasNext()) --> Line_43 $$ f_reader.append(gen_type.getFromBinaryCode(pad, "din", setter)) [CD]
Line_31 $$ StringBuffer f_reader = new StringBuffer() --> Line_43 $$ f_reader.append(gen_type.getFromBinaryCode(pad, "din", setter)) [FD]
Line_41 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) --> Line_43 $$ f_reader.append(gen_type.getFromBinaryCode(pad, "din", setter)) [FD]
Line_40 $$ String pad = "    " --> Line_43 $$ f_reader.append(gen_type.getFromBinaryCode(pad, "din", setter)) [FD]
Line_39 $$ String setter = "obj." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member) --> Line_43 $$ f_reader.append(gen_type.getFromBinaryCode(pad, "din", setter)) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_45 $$ String reader_vars = "" [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_46 $$ sb.append("\n  public static void writeToFile(String file_nm, " + values_class_name + " obj) throws IOException" + "\n [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_46 $$ sb.append("\n  public static void writeToFile(String file_nm, " + values_class_name + " obj) throws IOException" + "\n [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_47 $$ return sb.toString() [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_47 $$ return sb.toString() [FD]
