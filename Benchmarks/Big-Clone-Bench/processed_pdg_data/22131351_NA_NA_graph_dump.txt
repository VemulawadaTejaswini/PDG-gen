Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_3 $$ String xpath = "" [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_4 $$ if (index.equals("ichi")) [CD]
Line_4 $$ if (index.equals("ichi")) --> Line_5 $$ xpath = URLEncoder.encode("//molecule[./identifier/basic='" + query + "']", UTF8) [CD]
Line_3 $$ String xpath = "" --> Line_5 $$ xpath = URLEncoder.encode("//molecule[./identifier/basic='" + query + "']", UTF8) [FD]
Line_4 $$ if (index.equals("ichi")) --> Line_6 $$ if (index.equals("kegg")) [CD]
Line_6 $$ if (index.equals("kegg")) --> Line_7 $$ xpath = URLEncoder.encode("//molecule[./@name='" + query + "' and ./@dictRef='KEGG']", UTF8) [CD]
Line_3 $$ String xpath = "" --> Line_7 $$ xpath = URLEncoder.encode("//molecule[./@name='" + query + "' and ./@dictRef='KEGG']", UTF8) [FD]
Line_5 $$ xpath = URLEncoder.encode("//molecule[./identifier/basic='" + query + "']", UTF8) --> Line_7 $$ xpath = URLEncoder.encode("//molecule[./@name='" + query + "' and ./@dictRef='KEGG']", UTF8) [FD]
Line_6 $$ if (index.equals("kegg")) --> Line_8 $$ if (index.equals("nist")) [CD]
Line_8 $$ if (index.equals("nist")) --> Line_9 $$ xpath = URLEncoder.encode("//molecule[../@id='" + query + "']", UTF8) [CD]
Line_3 $$ String xpath = "" --> Line_9 $$ xpath = URLEncoder.encode("//molecule[../@id='" + query + "']", UTF8) [FD]
Line_5 $$ xpath = URLEncoder.encode("//molecule[./identifier/basic='" + query + "']", UTF8) --> Line_9 $$ xpath = URLEncoder.encode("//molecule[../@id='" + query + "']", UTF8) [FD]
Line_7 $$ xpath = URLEncoder.encode("//molecule[./@name='" + query + "' and ./@dictRef='KEGG']", UTF8) --> Line_9 $$ xpath = URLEncoder.encode("//molecule[../@id='" + query + "']", UTF8) [FD]
Line_8 $$ if (index.equals("nist")) --> Line_11 $$ logger.error("Did not recognize index type: " + index) [CD]
Line_8 $$ if (index.equals("nist")) --> Line_12 $$ return null [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_14 $$ String colname = URLEncoder.encode("/" + this.collection, UTF8) [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_15 $$ logger.info("Doing query: " + xpath + " in collection " + colname) [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_16 $$ URL url = new URL("http://" + server + "/Bob/QueryXindice") [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_17 $$ logger.info("Connection to server: " + url.toString()) [CD]
Line_16 $$ URL url = new URL("http://" + server + "/Bob/QueryXindice") --> Line_17 $$ logger.info("Connection to server: " + url.toString()) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_18 $$ URLConnection connection = url.openConnection() [CD]
Line_16 $$ URL url = new URL("http://" + server + "/Bob/QueryXindice") --> Line_18 $$ URLConnection connection = url.openConnection() [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_19 $$ connection.setDoOutput(true) [CD]
Line_18 $$ URLConnection connection = url.openConnection() --> Line_19 $$ connection.setDoOutput(true) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) [CD]
Line_18 $$ URLConnection connection = url.openConnection() --> Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_21 $$ out.print("detailed=on") [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_21 $$ out.print("detailed=on") [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_22 $$ out.print("&") [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_22 $$ out.print("&") [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_23 $$ out.print("xmlOnly=on") [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_23 $$ out.print("xmlOnly=on") [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_24 $$ out.print("&") [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_24 $$ out.print("&") [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_25 $$ out.print("colName=" + colname) [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_25 $$ out.print("colName=" + colname) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_26 $$ out.print("&") [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_26 $$ out.print("&") [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_27 $$ out.print("xpathString=" + xpath) [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_27 $$ out.print("xpathString=" + xpath) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_28 $$ out.print("&") [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_28 $$ out.print("&") [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_29 $$ out.println("query=Query") [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_29 $$ out.println("query=Query") [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_30 $$ out.close() [CD]
Line_20 $$ PrintWriter out = new PrintWriter(connection.getOutputStream()) --> Line_30 $$ out.close() [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_31 $$ InputStream stream = connection.getInputStream() [CD]
Line_18 $$ URLConnection connection = url.openConnection() --> Line_31 $$ InputStream stream = connection.getInputStream() [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_32 $$ BufferedReader in = new BufferedReader(new InputStreamReader(stream)) [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_33 $$ in.mark(1000000) [CD]
Line_32 $$ BufferedReader in = new BufferedReader(new InputStreamReader(stream)) --> Line_33 $$ in.mark(1000000) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_34 $$ in.readLine() [CD]
Line_32 $$ BufferedReader in = new BufferedReader(new InputStreamReader(stream)) --> Line_34 $$ in.readLine() [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_35 $$ String comment = in.readLine() [CD]
Line_32 $$ BufferedReader in = new BufferedReader(new InputStreamReader(stream)) --> Line_35 $$ String comment = in.readLine() [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_36 $$ logger.debug("The comment is: " + comment) [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_37 $$ Pattern p = Pattern.compile("<!-- There are (\\d [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_38 $$ Matcher match = p.matcher(comment) [CD]
Line_37 $$ Pattern p = Pattern.compile("<!-- There are (\\d --> Line_38 $$ Matcher match = p.matcher(comment) [FD]
Line_35 $$ String comment = in.readLine() --> Line_38 $$ Matcher match = p.matcher(comment) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_39 $$ if (match.find()) [CD]
Line_38 $$ Matcher match = p.matcher(comment) --> Line_39 $$ if (match.find()) [FD]
Line_39 $$ if (match.find()) --> Line_40 $$ resultNum = match.group(1) [CD]
Line_38 $$ Matcher match = p.matcher(comment) --> Line_40 $$ resultNum = match.group(1) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_44 $$ logger.debug("The number of result is " + resultNum) [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_45 $$ in.reset() [CD]
Line_32 $$ BufferedReader in = new BufferedReader(new InputStreamReader(stream)) --> Line_45 $$ in.reset() [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_46 $$ CMLReader reader = new CMLReader(stream) [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_47 $$ ChemFile cf = (ChemFile) reader.read((ChemObject) new ChemFile()) [CD]
Line_46 $$ CMLReader reader = new CMLReader(stream) --> Line_47 $$ ChemFile cf = (ChemFile) reader.read((ChemObject) new ChemFile()) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_48 $$ logger.debug("#sequences: " + cf.getChemSequenceCount()) [CD]
Line_47 $$ ChemFile cf = (ChemFile) reader.read((ChemObject) new ChemFile()) --> Line_48 $$ logger.debug("#sequences: " + cf.getChemSequenceCount()) [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_49 $$ IMolecule m = null [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_50 $$ if (cf.getChemSequenceCount() > 0) [CD]
Line_47 $$ ChemFile cf = (ChemFile) reader.read((ChemObject) new ChemFile()) --> Line_50 $$ if (cf.getChemSequenceCount() > 0) [FD]
Line_50 $$ if (cf.getChemSequenceCount() > 0) --> Line_51 $$ org.openscience.cdk.interfaces.IChemSequence chemSequence = cf.getChemSequence(0) [CD]
Line_47 $$ ChemFile cf = (ChemFile) reader.read((ChemObject) new ChemFile()) --> Line_51 $$ org.openscience.cdk.interfaces.IChemSequence chemSequence = cf.getChemSequence(0) [FD]
Line_50 $$ if (cf.getChemSequenceCount() > 0) --> Line_52 $$ logger.debug("#models in sequence: " + chemSequence.getChemModelCount()) [CD]
Line_51 $$ org.openscience.cdk.interfaces.IChemSequence chemSequence = cf.getChemSequence(0) --> Line_52 $$ logger.debug("#models in sequence: " + chemSequence.getChemModelCount()) [FD]
Line_50 $$ if (cf.getChemSequenceCount() > 0) --> Line_53 $$ if (chemSequence.getChemModelCount() > 0) [CD]
Line_51 $$ org.openscience.cdk.interfaces.IChemSequence chemSequence = cf.getChemSequence(0) --> Line_53 $$ if (chemSequence.getChemModelCount() > 0) [FD]
Line_53 $$ if (chemSequence.getChemModelCount() > 0) --> Line_54 $$ org.openscience.cdk.interfaces.IChemModel chemModel = chemSequence.getChemModel(0) [CD]
Line_51 $$ org.openscience.cdk.interfaces.IChemSequence chemSequence = cf.getChemSequence(0) --> Line_54 $$ org.openscience.cdk.interfaces.IChemModel chemModel = chemSequence.getChemModel(0) [FD]
Line_53 $$ if (chemSequence.getChemModelCount() > 0) --> Line_55 $$ org.openscience.cdk.interfaces.IMoleculeSet setOfMolecules = chemModel.getMoleculeSet() [CD]
Line_54 $$ org.openscience.cdk.interfaces.IChemModel chemModel = chemSequence.getChemModel(0) --> Line_55 $$ org.openscience.cdk.interfaces.IMoleculeSet setOfMolecules = chemModel.getMoleculeSet() [FD]
Line_53 $$ if (chemSequence.getChemModelCount() > 0) --> Line_56 $$ logger.debug("#mols in model: " + setOfMolecules.getMoleculeCount()) [CD]
Line_55 $$ org.openscience.cdk.interfaces.IMoleculeSet setOfMolecules = chemModel.getMoleculeSet() --> Line_56 $$ logger.debug("#mols in model: " + setOfMolecules.getMoleculeCount()) [FD]
Line_53 $$ if (chemSequence.getChemModelCount() > 0) --> Line_57 $$ if (setOfMolecules.getMoleculeCount() > 0) [CD]
Line_55 $$ org.openscience.cdk.interfaces.IMoleculeSet setOfMolecules = chemModel.getMoleculeSet() --> Line_57 $$ if (setOfMolecules.getMoleculeCount() > 0) [FD]
Line_57 $$ if (setOfMolecules.getMoleculeCount() > 0) --> Line_58 $$ m = setOfMolecules.getMolecule(0) [CD]
Line_49 $$ IMolecule m = null --> Line_58 $$ m = setOfMolecules.getMolecule(0) [FD]
Line_55 $$ org.openscience.cdk.interfaces.IMoleculeSet setOfMolecules = chemModel.getMoleculeSet() --> Line_58 $$ m = setOfMolecules.getMolecule(0) [FD]
Line_57 $$ if (setOfMolecules.getMoleculeCount() > 0) --> Line_60 $$ logger.warn("No molecules in the model") [CD]
Line_53 $$ if (chemSequence.getChemModelCount() > 0) --> Line_63 $$ logger.warn("No models in the sequence") [CD]
Line_50 $$ if (cf.getChemSequenceCount() > 0) --> Line_66 $$ logger.warn("No sequences in the file") [CD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_68 $$ in.close() [CD]
Line_32 $$ BufferedReader in = new BufferedReader(new InputStreamReader(stream)) --> Line_68 $$ in.close() [FD]
Line_2 $$ private IMolecule readMolecule() throws Exception --> Line_69 $$ return m [CD]
