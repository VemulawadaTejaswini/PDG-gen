Line_2 $$ public static void nioJoinFiles(FileLib.FileValidator validator, File target, File[] sources) --> Line_3 $$ boolean big_files = false [CD]
Line_2 $$ public static void nioJoinFiles(FileLib.FileValidator validator, File target, File[] sources) --> Line_4 $$ for (int i = 0; i < sources.length; i++) [CD]
Line_4 $$ for (int i = 0; i < sources.length; i++) --> Line_5 $$ if (sources[i].length() > Integer.MAX_VALUE) [CD]
Line_5 $$ if (sources[i].length() > Integer.MAX_VALUE) --> Line_6 $$ big_files = true [CD]
Line_3 $$ boolean big_files = false --> Line_6 $$ big_files = true [FD]
Line_2 $$ public static void nioJoinFiles(FileLib.FileValidator validator, File target, File[] sources) --> Line_10 $$ if (big_files) [CD]
Line_10 $$ if (big_files) --> Line_11 $$ joinFiles(validator, target, sources) [CD]
Line_2 $$ public static void nioJoinFiles(FileLib.FileValidator validator, File target, File[] sources) --> Line_11 $$ joinFiles(validator, target, sources) [FD]
Line_10 $$ if (big_files) --> Line_13 $$ System.out.println(i18n.getString("jdk14_comment")) [CD]
Line_10 $$ if (big_files) --> Line_14 $$ FileOutputStream fos = null [CD]
Line_14 $$ FileOutputStream fos = null --> Line_16 $$ fos = new FileOutputStream(target) [FD]
Line_14 $$ FileOutputStream fos = null --> Line_17 $$ FileChannel fco = fos.getChannel() [FD]
Line_16 $$ fos = new FileOutputStream(target) --> Line_17 $$ FileChannel fco = fos.getChannel() [FD]
Line_4 $$ for (int i = 0; i < sources.length; i++) --> Line_19 $$ for (int i = 0; i < sources.length; i++) [FD]
Line_19 $$ for (int i = 0; i < sources.length; i++) --> Line_20 $$ fis = new FileInputStream(sources[i]) [CD]
Line_18 $$ FileInputStream fis = null --> Line_20 $$ fis = new FileInputStream(sources[i]) [FD]
Line_19 $$ for (int i = 0; i < sources.length; i++) --> Line_21 $$ FileChannel fci = fis.getChannel() [CD]
Line_20 $$ fis = new FileInputStream(sources[i]) --> Line_21 $$ FileChannel fci = fis.getChannel() [FD]
Line_18 $$ FileInputStream fis = null --> Line_21 $$ FileChannel fci = fis.getChannel() [FD]
Line_19 $$ for (int i = 0; i < sources.length; i++) --> Line_22 $$ java.nio.MappedByteBuffer map [CD]
Line_22 $$ java.nio.MappedByteBuffer map --> Line_24 $$ map = fci.map(FileChannel.MapMode.READ_ONLY, 0, (int) sources[i].length()) [FD]
Line_21 $$ FileChannel fci = fis.getChannel() --> Line_24 $$ map = fci.map(FileChannel.MapMode.READ_ONLY, 0, (int) sources[i].length()) [FD]
Line_17 $$ FileChannel fco = fos.getChannel() --> Line_25 $$ fco.write(map) [FD]
Line_22 $$ java.nio.MappedByteBuffer map --> Line_25 $$ fco.write(map) [FD]
Line_24 $$ map = fci.map(FileChannel.MapMode.READ_ONLY, 0, (int) sources[i].length()) --> Line_25 $$ fco.write(map) [FD]
Line_21 $$ FileChannel fci = fis.getChannel() --> Line_26 $$ fci.close() [FD]
Line_20 $$ fis = new FileInputStream(sources[i]) --> Line_30 $$ fis.close() [FD]
Line_18 $$ FileInputStream fis = null --> Line_30 $$ fis.close() [FD]
Line_14 $$ FileOutputStream fos = null --> Line_31 $$ fos.close() [FD]
Line_16 $$ fos = new FileOutputStream(target) --> Line_31 $$ fos.close() [FD]
Line_20 $$ fis = new FileInputStream(sources[i]) --> Line_35 $$ fis.close() [FD]
Line_18 $$ FileInputStream fis = null --> Line_35 $$ fis.close() [FD]
Line_17 $$ FileChannel fco = fos.getChannel() --> Line_38 $$ fco.close() [FD]
Line_14 $$ FileOutputStream fos = null --> Line_43 $$ if (fos != null) [FD]
Line_16 $$ fos = new FileOutputStream(target) --> Line_43 $$ if (fos != null) [FD]
