Line_2 $$ private String[] read(String path) throws Exception --> Line_3 $$ final String[] names = [CD]
Line_2 $$ private String[] read(String path) throws Exception --> Line_4 $$ String[] list = null [CD]
Line_2 $$ private String[] read(String path) throws Exception --> Line_5 $$ for (int i = 0; i < names.length; i++) [CD]
Line_5 $$ for (int i = 0; i < names.length; i++) --> Line_6 $$ URL url = new URL(path + names[i]) [CD]
Line_6 $$ URL url = new URL(path + names[i]) --> Line_8 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_10 $$ String s = null --> Line_11 $$ while ((s = in.readLine()) != null) [FD]
Line_8 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_11 $$ while ((s = in.readLine()) != null) [FD]
Line_11 $$ while ((s = in.readLine()) != null) --> Line_12 $$ s = s.trim() [CD]
Line_11 $$ while ((s = in.readLine()) != null) --> Line_12 $$ s = s.trim() [FD]
Line_10 $$ String s = null --> Line_12 $$ s = s.trim() [FD]
Line_11 $$ while ((s = in.readLine()) != null) --> Line_13 $$ if (s.length() > 0) [CD]
Line_11 $$ while ((s = in.readLine()) != null) --> Line_13 $$ if (s.length() > 0) [FD]
Line_12 $$ s = s.trim() --> Line_13 $$ if (s.length() > 0) [FD]
Line_10 $$ String s = null --> Line_13 $$ if (s.length() > 0) [FD]
Line_13 $$ if (s.length() > 0) --> Line_14 $$ sb.append(s + "\n") [CD]
Line_9 $$ StringBuffer sb = new StringBuffer() --> Line_14 $$ sb.append(s + "\n") [FD]
Line_8 $$ BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_17 $$ in.close() [FD]
Line_9 $$ StringBuffer sb = new StringBuffer() --> Line_18 $$ if (sb.indexOf("<") != -1 && sb.indexOf(">") != -1) [FD]
Line_18 $$ if (sb.indexOf("<") != -1 && sb.indexOf(">") != -1) --> Line_19 $$ List links = LinkExtractor.scan(url, sb.toString()) [CD]
Line_6 $$ URL url = new URL(path + names[i]) --> Line_19 $$ List links = LinkExtractor.scan(url, sb.toString()) [FD]
Line_9 $$ StringBuffer sb = new StringBuffer() --> Line_19 $$ List links = LinkExtractor.scan(url, sb.toString()) [FD]
Line_18 $$ if (sb.indexOf("<") != -1 && sb.indexOf(">") != -1) --> Line_21 $$ int prefixLen = path.length() [CD]
Line_2 $$ private String[] read(String path) throws Exception --> Line_21 $$ int prefixLen = path.length() [FD]
Line_18 $$ if (sb.indexOf("<") != -1 && sb.indexOf(">") != -1) --> Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) [CD]
Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) --> Line_23 $$ String link = it.next().toString() [CD]
Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) --> Line_23 $$ String link = it.next().toString() [FD]
Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) --> Line_24 $$ if (!link.startsWith(path)) [CD]
Line_23 $$ String link = it.next().toString() --> Line_24 $$ if (!link.startsWith(path)) [FD]
Line_2 $$ private String[] read(String path) throws Exception --> Line_24 $$ if (!link.startsWith(path)) [FD]
Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) --> Line_27 $$ link = link.substring(prefixLen) [CD]
Line_23 $$ String link = it.next().toString() --> Line_27 $$ link = link.substring(prefixLen) [FD]
Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) --> Line_28 $$ int idx = link.indexOf("/") [CD]
Line_23 $$ String link = it.next().toString() --> Line_28 $$ int idx = link.indexOf("/") [FD]
Line_27 $$ link = link.substring(prefixLen) --> Line_28 $$ int idx = link.indexOf("/") [FD]
Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) --> Line_29 $$ int idxq = link.indexOf("?") [CD]
Line_23 $$ String link = it.next().toString() --> Line_29 $$ int idxq = link.indexOf("?") [FD]
Line_27 $$ link = link.substring(prefixLen) --> Line_29 $$ int idxq = link.indexOf("?") [FD]
Line_22 $$ for (Iterator it = links.iterator(); it.hasNext(); ) --> Line_30 $$ if (idx > 0 && (idxq == -1 || idx < idxq)) [CD]
Line_30 $$ if (idx > 0 && (idxq == -1 || idx < idxq)) --> Line_31 $$ set.add(link.substring(0, idx + 1)) [CD]
Line_23 $$ String link = it.next().toString() --> Line_31 $$ set.add(link.substring(0, idx + 1)) [FD]
Line_27 $$ link = link.substring(prefixLen) --> Line_31 $$ set.add(link.substring(0, idx + 1)) [FD]
Line_30 $$ if (idx > 0 && (idxq == -1 || idx < idxq)) --> Line_33 $$ set.add(link) [CD]
Line_23 $$ String link = it.next().toString() --> Line_33 $$ set.add(link) [FD]
Line_27 $$ link = link.substring(prefixLen) --> Line_33 $$ set.add(link) [FD]
Line_18 $$ if (sb.indexOf("<") != -1 && sb.indexOf(">") != -1) --> Line_36 $$ list = (String[]) set.toArray(new String[0]) [CD]
Line_4 $$ String[] list = null --> Line_36 $$ list = (String[]) set.toArray(new String[0]) [FD]
Line_18 $$ if (sb.indexOf("<") != -1 && sb.indexOf(">") != -1) --> Line_38 $$ list = sb.toString().split("\n") [CD]
Line_36 $$ list = (String[]) set.toArray(new String[0]) --> Line_38 $$ list = sb.toString().split("\n") [FD]
Line_4 $$ String[] list = null --> Line_38 $$ list = sb.toString().split("\n") [FD]
Line_9 $$ StringBuffer sb = new StringBuffer() --> Line_38 $$ list = sb.toString().split("\n") [FD]
Line_2 $$ private String[] read(String path) throws Exception --> Line_46 $$ return new String[0] [CD]
Line_27 $$ link = link.substring(prefixLen) --> Line_24 $$ if (!link.startsWith(path)) [FD]
