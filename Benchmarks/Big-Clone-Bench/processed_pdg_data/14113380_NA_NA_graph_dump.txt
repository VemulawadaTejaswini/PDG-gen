Line_2 $$ public void execute() throws MojoExecutionException --> Line_3 $$ List<Dependency> dependencies = project.getDependencies() [CD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_4 $$ File file = new File(this.localRepository.getBasedir()) [CD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_5 $$ File dojoArtifact = null [CD]
Line_6 $$ for (Dependency dependency : dependencies) --> Line_7 $$ if (!dependency.getGroupId().equals("org.dojotoolkit") && !dependency.getArtifactId().equals("dojo")) [FD]
Line_6 $$ for (Dependency dependency : dependencies) --> Line_8 $$ File file2 = new File(file, dependency.getGroupId().replace('.', File.separatorChar)) [FD]
Line_8 $$ File file2 = new File(file, dependency.getGroupId().replace('.', File.separatorChar)) --> Line_9 $$ file2 = new File(file2, dependency.getArtifactId()) [FD]
Line_6 $$ for (Dependency dependency : dependencies) --> Line_9 $$ file2 = new File(file2, dependency.getArtifactId()) [FD]
Line_8 $$ File file2 = new File(file, dependency.getGroupId().replace('.', File.separatorChar)) --> Line_10 $$ file2 = new File(file2, dependency.getVersion()) [FD]
Line_9 $$ file2 = new File(file2, dependency.getArtifactId()) --> Line_10 $$ file2 = new File(file2, dependency.getVersion()) [FD]
Line_6 $$ for (Dependency dependency : dependencies) --> Line_10 $$ file2 = new File(file2, dependency.getVersion()) [FD]
Line_8 $$ File file2 = new File(file, dependency.getGroupId().replace('.', File.separatorChar)) --> Line_11 $$ file2 = new File(file2, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType()) [FD]
Line_9 $$ file2 = new File(file2, dependency.getArtifactId()) --> Line_11 $$ file2 = new File(file2, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType()) [FD]
Line_10 $$ file2 = new File(file2, dependency.getVersion()) --> Line_11 $$ file2 = new File(file2, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType()) [FD]
Line_6 $$ for (Dependency dependency : dependencies) --> Line_11 $$ file2 = new File(file2, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType()) [FD]
Line_8 $$ File file2 = new File(file, dependency.getGroupId().replace('.', File.separatorChar)) --> Line_12 $$ if (!file2.exists()) [FD]
Line_9 $$ file2 = new File(file2, dependency.getArtifactId()) --> Line_12 $$ if (!file2.exists()) [FD]
Line_10 $$ file2 = new File(file2, dependency.getVersion()) --> Line_12 $$ if (!file2.exists()) [FD]
Line_11 $$ file2 = new File(file2, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType()) --> Line_12 $$ if (!file2.exists()) [FD]
Line_5 $$ File dojoArtifact = null --> Line_13 $$ dojoArtifact = file2 [FD]
Line_8 $$ File file2 = new File(file, dependency.getGroupId().replace('.', File.separatorChar)) --> Line_13 $$ dojoArtifact = file2 [FD]
Line_9 $$ file2 = new File(file2, dependency.getArtifactId()) --> Line_13 $$ dojoArtifact = file2 [FD]
Line_10 $$ file2 = new File(file2, dependency.getVersion()) --> Line_13 $$ dojoArtifact = file2 [FD]
Line_11 $$ file2 = new File(file2, dependency.getArtifactId() + '-' + dependency.getVersion() + '.' + dependency.getType()) --> Line_13 $$ dojoArtifact = file2 [FD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_15 $$ if (dojoArtifact == null) [CD]
Line_5 $$ File dojoArtifact = null --> Line_15 $$ if (dojoArtifact == null) [FD]
Line_13 $$ dojoArtifact = file2 --> Line_15 $$ if (dojoArtifact == null) [FD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_16 $$ Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get("org.apache.maven.plugins:maven-war-plugin") [CD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_17 $$ if (plugin == null) [CD]
Line_16 $$ Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get("org.apache.maven.plugins:maven-war-plugin") --> Line_17 $$ if (plugin == null) [FD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_18 $$ String webappDirectory = null [CD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_19 $$ Xpp3Dom dom = (Xpp3Dom) plugin.getConfiguration() [CD]
Line_16 $$ Plugin plugin = (Plugin) project.getBuild().getPluginsAsMap().get("org.apache.maven.plugins:maven-war-plugin") --> Line_19 $$ Xpp3Dom dom = (Xpp3Dom) plugin.getConfiguration() [FD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_20 $$ webappDirectory = dom.getChild("webappDirectory").getValue() [CD]
Line_19 $$ Xpp3Dom dom = (Xpp3Dom) plugin.getConfiguration() --> Line_20 $$ webappDirectory = dom.getChild("webappDirectory").getValue() [FD]
Line_18 $$ String webappDirectory = null --> Line_20 $$ webappDirectory = dom.getChild("webappDirectory").getValue() [FD]
Line_2 $$ public void execute() throws MojoExecutionException --> Line_21 $$ webappDirectory = project.getBuild().getDirectory() + File.separatorChar + project.getArtifactId() + '-' + project.getVersion() [CD]
Line_18 $$ String webappDirectory = null --> Line_21 $$ webappDirectory = project.getBuild().getDirectory() + File.separatorChar + project.getArtifactId() + '-' + project.getVersion() [FD]
Line_20 $$ webappDirectory = dom.getChild("webappDirectory").getValue() --> Line_21 $$ webappDirectory = project.getBuild().getDirectory() + File.separatorChar + project.getArtifactId() + '-' + project.getVersion() [FD]
Line_23 $$ File webAppDojoDir = new File(webappDirectory, this.dojoDir) --> Line_24 $$ if (!webAppDojoDir.exists()) [FD]
Line_25 $$ ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact)) --> Line_26 $$ ZipEntry zipentry = inputStream.getNextEntry() [FD]
Line_28 $$ while (zipentry != null) --> Line_29 $$ File entry = new File(webAppDojoDir, zipentry.getName()) [CD]
Line_28 $$ while (zipentry != null) --> Line_30 $$ if (zipentry.isDirectory()) [CD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_31 $$ entry.mkdirs() [CD]
Line_29 $$ File entry = new File(webAppDojoDir, zipentry.getName()) --> Line_31 $$ entry.mkdirs() [FD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_33 $$ int n [CD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_34 $$ FileOutputStream fileoutputstream [CD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_35 $$ if (entry.getParent() != null) [CD]
Line_29 $$ File entry = new File(webAppDojoDir, zipentry.getName()) --> Line_35 $$ if (entry.getParent() != null) [FD]
Line_35 $$ if (entry.getParent() != null) --> Line_36 $$ entry.getParentFile().mkdirs() [CD]
Line_29 $$ File entry = new File(webAppDojoDir, zipentry.getName()) --> Line_36 $$ entry.getParentFile().mkdirs() [FD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_38 $$ fileoutputstream = new FileOutputStream(entry) [CD]
Line_34 $$ FileOutputStream fileoutputstream --> Line_38 $$ fileoutputstream = new FileOutputStream(entry) [FD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_39 $$ while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n) [CD]
Line_33 $$ int n --> Line_39 $$ while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n) [FD]
Line_25 $$ ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact)) --> Line_39 $$ while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n) [FD]
Line_27 $$ byte[] buf = new byte[1024] --> Line_39 $$ while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n) [FD]
Line_34 $$ FileOutputStream fileoutputstream --> Line_39 $$ while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n) [FD]
Line_38 $$ fileoutputstream = new FileOutputStream(entry) --> Line_39 $$ while ((n = inputStream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n) [FD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_40 $$ fileoutputstream.close() [CD]
Line_34 $$ FileOutputStream fileoutputstream --> Line_40 $$ fileoutputstream.close() [FD]
Line_38 $$ fileoutputstream = new FileOutputStream(entry) --> Line_40 $$ fileoutputstream.close() [FD]
Line_30 $$ if (zipentry.isDirectory()) --> Line_41 $$ inputStream.closeEntry() [CD]
Line_25 $$ ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact)) --> Line_41 $$ inputStream.closeEntry() [FD]
Line_28 $$ while (zipentry != null) --> Line_43 $$ zipentry = inputStream.getNextEntry() [CD]
Line_25 $$ ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact)) --> Line_43 $$ zipentry = inputStream.getNextEntry() [FD]
Line_25 $$ ZipInputStream inputStream = new ZipInputStream(new FileInputStream(dojoArtifact)) --> Line_45 $$ inputStream.close() [FD]
