Line_2 $$ private void unpackBundle() throws IOException --> Line_3 $$ File useJarPath = null [CD]
Line_2 $$ private void unpackBundle() throws IOException --> Line_4 $$ if (DownloadManager.isWindowsVista()) [CD]
Line_4 $$ if (DownloadManager.isWindowsVista()) --> Line_5 $$ useJarPath = lowJarPath [CD]
Line_3 $$ File useJarPath = null --> Line_5 $$ useJarPath = lowJarPath [FD]
Line_4 $$ if (DownloadManager.isWindowsVista()) --> Line_6 $$ File jarDir = useJarPath.getParentFile() [CD]
Line_3 $$ File useJarPath = null --> Line_6 $$ File jarDir = useJarPath.getParentFile() [FD]
Line_5 $$ useJarPath = lowJarPath --> Line_6 $$ File jarDir = useJarPath.getParentFile() [FD]
Line_4 $$ if (DownloadManager.isWindowsVista()) --> Line_7 $$ if (jarDir != null) [CD]
Line_6 $$ File jarDir = useJarPath.getParentFile() --> Line_7 $$ if (jarDir != null) [FD]
Line_7 $$ if (jarDir != null) --> Line_8 $$ jarDir.mkdirs() [CD]
Line_6 $$ File jarDir = useJarPath.getParentFile() --> Line_8 $$ jarDir.mkdirs() [FD]
Line_4 $$ if (DownloadManager.isWindowsVista()) --> Line_11 $$ useJarPath = jarPath [CD]
Line_3 $$ File useJarPath = null --> Line_11 $$ useJarPath = jarPath [FD]
Line_5 $$ useJarPath = lowJarPath --> Line_11 $$ useJarPath = jarPath [FD]
Line_2 $$ private void unpackBundle() throws IOException --> Line_13 $$ DownloadManager.log("Unpacking " + this + " to " + useJarPath) [CD]
Line_2 $$ private void unpackBundle() throws IOException --> Line_14 $$ InputStream rawStream = new FileInputStream(localPath) [CD]
Line_2 $$ private void unpackBundle() throws IOException --> Line_15 $$ JarInputStream in = new JarInputStream(rawStream) [CD]
Line_15 $$ JarInputStream in = new JarInputStream(rawStream) --> Line_22 $$ while ((entry = in.getNextJarEntry()) != null) [FD]
Line_23 $$ String entryName = entry.getName() --> Line_24 $$ if (entryName.equals("classes.pack")) [FD]
Line_25 $$ File packTmp = new File(useJarPath + ".pack") --> Line_26 $$ packTmp.getParentFile().mkdirs() [FD]
Line_15 $$ JarInputStream in = new JarInputStream(rawStream) --> Line_30 $$ DownloadManager.send(in, tmpOut) [FD]
Line_28 $$ OutputStream tmpOut = new FileOutputStream(packTmp) --> Line_30 $$ DownloadManager.send(in, tmpOut) [FD]
Line_28 $$ OutputStream tmpOut = new FileOutputStream(packTmp) --> Line_32 $$ tmpOut.close() [FD]
Line_25 $$ File packTmp = new File(useJarPath + ".pack") --> Line_36 $$ unpack(packTmp, jarTmp) [FD]
Line_25 $$ File packTmp = new File(useJarPath + ".pack") --> Line_37 $$ packTmp.delete() [FD]
Line_23 $$ String entryName = entry.getName() --> Line_38 $$ if (!entryName.startsWith("META-INF")) [FD]
Line_38 $$ if (!entryName.startsWith("META-INF")) --> Line_39 $$ File dest [CD]
Line_38 $$ if (!entryName.startsWith("META-INF")) --> Line_40 $$ if (DownloadManager.isWindowsVista()) [CD]
Line_40 $$ if (DownloadManager.isWindowsVista()) --> Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) [CD]
Line_39 $$ File dest --> Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) [FD]
Line_23 $$ String entryName = entry.getName() --> Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) [FD]
Line_40 $$ if (DownloadManager.isWindowsVista()) --> Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) [CD]
Line_39 $$ File dest --> Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) [FD]
Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) --> Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) [FD]
Line_23 $$ String entryName = entry.getName() --> Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) [FD]
Line_38 $$ if (!entryName.startsWith("META-INF")) --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [CD]
Line_23 $$ String entryName = entry.getName() --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [FD]
Line_39 $$ File dest --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [FD]
Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [FD]
Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [FD]
Line_3 $$ File useJarPath = null --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [FD]
Line_5 $$ useJarPath = lowJarPath --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [FD]
Line_11 $$ useJarPath = jarPath --> Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) [FD]
Line_38 $$ if (!entryName.startsWith("META-INF")) --> Line_46 $$ File destTmp = new File(dest + ".tmp") [CD]
Line_38 $$ if (!entryName.startsWith("META-INF")) --> Line_47 $$ boolean exists = dest.exists() [CD]
Line_39 $$ File dest --> Line_47 $$ boolean exists = dest.exists() [FD]
Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) --> Line_47 $$ boolean exists = dest.exists() [FD]
Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) --> Line_47 $$ boolean exists = dest.exists() [FD]
Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) --> Line_47 $$ boolean exists = dest.exists() [FD]
Line_38 $$ if (!entryName.startsWith("META-INF")) --> Line_48 $$ if (!exists) [CD]
Line_47 $$ boolean exists = dest.exists() --> Line_48 $$ if (!exists) [FD]
Line_48 $$ if (!exists) --> Line_49 $$ DownloadManager.log(dest + ".mkdirs()") [CD]
Line_48 $$ if (!exists) --> Line_50 $$ dest.getParentFile().mkdirs() [CD]
Line_39 $$ File dest --> Line_50 $$ dest.getParentFile().mkdirs() [FD]
Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) --> Line_50 $$ dest.getParentFile().mkdirs() [FD]
Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) --> Line_50 $$ dest.getParentFile().mkdirs() [FD]
Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) --> Line_50 $$ dest.getParentFile().mkdirs() [FD]
Line_57 $$ int c --> Line_58 $$ while ((c = in.read(buffer)) > 0) out.write(buffer, 0, c) [FD]
Line_15 $$ JarInputStream in = new JarInputStream(rawStream) --> Line_58 $$ while ((c = in.read(buffer)) > 0) out.write(buffer, 0, c) [FD]
Line_56 $$ byte[] buffer = new byte[2048] --> Line_58 $$ while ((c = in.read(buffer)) > 0) out.write(buffer, 0, c) [FD]
Line_54 $$ FileOutputStream out = new FileOutputStream(destTmp) --> Line_58 $$ while ((c = in.read(buffer)) > 0) out.write(buffer, 0, c) [FD]
Line_54 $$ FileOutputStream out = new FileOutputStream(destTmp) --> Line_60 $$ out.close() [FD]
Line_39 $$ File dest --> Line_62 $$ dest.delete() [FD]
Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) --> Line_62 $$ dest.delete() [FD]
Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) --> Line_62 $$ dest.delete() [FD]
Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) --> Line_62 $$ dest.delete() [FD]
Line_46 $$ File destTmp = new File(dest + ".tmp") --> Line_64 $$ if (!destTmp.renameTo(dest)) [FD]
Line_39 $$ File dest --> Line_64 $$ if (!destTmp.renameTo(dest)) [FD]
Line_41 $$ dest = new File(lowJavaPath, entryName.replace('/', File.separatorChar)) --> Line_64 $$ if (!destTmp.renameTo(dest)) [FD]
Line_43 $$ dest = new File(DownloadManager.JAVA_HOME, entryName.replace('/', File.separatorChar)) --> Line_64 $$ if (!destTmp.renameTo(dest)) [FD]
Line_45 $$ if (entryName.equals(BUNDLE_JAR_ENTRY_NAME)) --> Line_64 $$ if (!destTmp.renameTo(dest)) [FD]
Line_47 $$ boolean exists = dest.exists() --> Line_68 $$ if (!exists) [FD]
Line_72 $$ if (jarTmp != null) --> Line_73 $$ if (!jarTmp.renameTo(useJarPath)) [CD]
Line_3 $$ File useJarPath = null --> Line_73 $$ if (!jarTmp.renameTo(useJarPath)) [FD]
Line_5 $$ useJarPath = lowJarPath --> Line_73 $$ if (!jarTmp.renameTo(useJarPath)) [FD]
Line_11 $$ useJarPath = jarPath --> Line_73 $$ if (!jarTmp.renameTo(useJarPath)) [FD]
Line_77 $$ if (DownloadManager.isWindowsVista()) --> Line_78 $$ DownloadManager.log("Using broker to move " + name) [CD]
Line_77 $$ if (DownloadManager.isWindowsVista()) --> Line_79 $$ if (!DownloadManager.moveDirWithBroker(DownloadManager.getKernelJREDir() + name)) [CD]
Line_77 $$ if (DownloadManager.isWindowsVista()) --> Line_82 $$ DownloadManager.log("Broker finished " + name) [CD]
Line_14 $$ InputStream rawStream = new FileInputStream(localPath) --> Line_86 $$ rawStream.close() [FD]
Line_2 $$ private void unpackBundle() throws IOException --> Line_88 $$ if (deleteOnInstall) [CD]
Line_88 $$ if (deleteOnInstall) --> Line_89 $$ localPath.delete() [CD]
