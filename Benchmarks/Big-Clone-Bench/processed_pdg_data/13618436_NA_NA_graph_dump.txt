Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_3 $$ monitor.beginTask(CheatSheetsPlugin.INSTANCE.getString("_UI_CreateJavaProject_message", new String[] [CD]
Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_3 $$ monitor.beginTask(CheatSheetsPlugin.INSTANCE.getString("_UI_CreateJavaProject_message", new String[] [FD]
Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) [CD]
Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) [FD]
Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_5 $$ if (project != null) [CD]
Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) --> Line_5 $$ if (project != null) [FD]
Line_5 $$ if (project != null) --> Line_6 $$ IProjectDescription description = project.getDescription() [CD]
Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) --> Line_6 $$ IProjectDescription description = project.getDescription() [FD]
Line_5 $$ if (project != null) --> Line_7 $$ if (!description.hasNature(JavaCore.NATURE_ID)) [CD]
Line_6 $$ IProjectDescription description = project.getDescription() --> Line_7 $$ if (!description.hasNature(JavaCore.NATURE_ID)) [FD]
Line_7 $$ if (!description.hasNature(JavaCore.NATURE_ID)) --> Line_8 $$ IJavaProject javaProject = JavaCore.create(project) [CD]
Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) --> Line_8 $$ IJavaProject javaProject = JavaCore.create(project) [FD]
Line_7 $$ if (!description.hasNature(JavaCore.NATURE_ID)) --> Line_9 $$ if (javaProject != null) [CD]
Line_8 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_9 $$ if (javaProject != null) [FD]
Line_9 $$ if (javaProject != null) --> Line_10 $$ String[] natures = description.getNatureIds() [CD]
Line_6 $$ IProjectDescription description = project.getDescription() --> Line_10 $$ String[] natures = description.getNatureIds() [FD]
Line_9 $$ if (javaProject != null) --> Line_11 $$ String[] javaNatures = new String[natures.length + 1] [CD]
Line_9 $$ if (javaProject != null) --> Line_12 $$ System.arraycopy(natures, 0, javaNatures, 0, natures.length) [CD]
Line_10 $$ String[] natures = description.getNatureIds() --> Line_12 $$ System.arraycopy(natures, 0, javaNatures, 0, natures.length) [FD]
Line_11 $$ String[] javaNatures = new String[natures.length + 1] --> Line_12 $$ System.arraycopy(natures, 0, javaNatures, 0, natures.length) [FD]
Line_9 $$ if (javaProject != null) --> Line_13 $$ javaNatures[natures.length] = JavaCore.NATURE_ID [CD]
Line_9 $$ if (javaProject != null) --> Line_14 $$ description.setNatureIds(javaNatures) [CD]
Line_6 $$ IProjectDescription description = project.getDescription() --> Line_14 $$ description.setNatureIds(javaNatures) [FD]
Line_11 $$ String[] javaNatures = new String[natures.length + 1] --> Line_14 $$ description.setNatureIds(javaNatures) [FD]
Line_9 $$ if (javaProject != null) --> Line_15 $$ project.setDescription(description, new SubProgressMonitor(monitor, 1)) [CD]
Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) --> Line_15 $$ project.setDescription(description, new SubProgressMonitor(monitor, 1)) [FD]
Line_6 $$ IProjectDescription description = project.getDescription() --> Line_15 $$ project.setDescription(description, new SubProgressMonitor(monitor, 1)) [FD]
Line_9 $$ if (javaProject != null) --> Line_16 $$ IFolder sourceFolder = project.getFolder(SOURCE_FOLDER) [CD]
Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) --> Line_16 $$ IFolder sourceFolder = project.getFolder(SOURCE_FOLDER) [FD]
Line_9 $$ if (javaProject != null) --> Line_17 $$ if (!sourceFolder.exists()) [CD]
Line_16 $$ IFolder sourceFolder = project.getFolder(SOURCE_FOLDER) --> Line_17 $$ if (!sourceFolder.exists()) [FD]
Line_17 $$ if (!sourceFolder.exists()) --> Line_18 $$ sourceFolder.create(true, true, new SubProgressMonitor(monitor, 1)) [CD]
Line_16 $$ IFolder sourceFolder = project.getFolder(SOURCE_FOLDER) --> Line_18 $$ sourceFolder.create(true, true, new SubProgressMonitor(monitor, 1)) [FD]
Line_9 $$ if (javaProject != null) --> Line_20 $$ javaProject.setOutputLocation(project.getFolder(OUTPUT_FOLDER).getFullPath(), new SubProgressMonitor(monitor, 1)) [CD]
Line_8 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_20 $$ javaProject.setOutputLocation(project.getFolder(OUTPUT_FOLDER).getFullPath(), new SubProgressMonitor(monitor, 1)) [FD]
Line_4 $$ IProject project = super.createProject(projectName, new SubProgressMonitor(monitor, 1)) --> Line_20 $$ javaProject.setOutputLocation(project.getFolder(OUTPUT_FOLDER).getFullPath(), new SubProgressMonitor(monitor, 1)) [FD]
Line_9 $$ if (javaProject != null) --> Line_21 $$ IClasspathEntry[] entries = new IClasspathEntry[] [CD]
Line_16 $$ IFolder sourceFolder = project.getFolder(SOURCE_FOLDER) --> Line_21 $$ IClasspathEntry[] entries = new IClasspathEntry[] [FD]
Line_9 $$ if (javaProject != null) --> Line_22 $$ javaProject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1)) [CD]
Line_8 $$ IJavaProject javaProject = JavaCore.create(project) --> Line_22 $$ javaProject.setRawClasspath(entries, new SubProgressMonitor(monitor, 1)) [FD]
Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_26 $$ monitor.done() [CD]
Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_26 $$ monitor.done() [FD]
Line_2 $$ protected IProject createProject(String projectName, IProgressMonitor monitor) throws CoreException --> Line_27 $$ return project [CD]
