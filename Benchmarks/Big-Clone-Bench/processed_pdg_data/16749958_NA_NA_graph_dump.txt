Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_3 $$ logger.info("MapTileChacheTask:process") [CD]
Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_4 $$ PublishRequest req = context.getItem().getEntity() [CD]
Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_4 $$ PublishRequest req = context.getItem().getEntity() [FD]
Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_5 $$ if (StringUtils.isEmpty(req.getBackMap())) [CD]
Line_4 $$ PublishRequest req = context.getItem().getEntity() --> Line_5 $$ if (StringUtils.isEmpty(req.getBackMap())) [FD]
Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_6 $$ final PublicMapPost post [CD]
Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_7 $$ final GenericDAO<PublicMapPost> postDao = DAOFactory.createDAO(PublicMapPost.class) [CD]
Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_14 $$ int numCachedTiles = 0 [CD]
Line_6 $$ final PublicMapPost post --> Line_17 $$ post = postDao.findUniqueByCriteria(Expression.eq("guid", req.getPostGuid())) [FD]
Line_4 $$ PublishRequest req = context.getItem().getEntity() --> Line_17 $$ post = postDao.findUniqueByCriteria(Expression.eq("guid", req.getPostGuid())) [FD]
Line_6 $$ final PublicMapPost post --> Line_18 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(post.getSWLat(), post.getSWLon()), new LatLngPoint(post.getNELat(), post.getNELon())) [FD]
Line_17 $$ post = postDao.findUniqueByCriteria(Expression.eq("guid", req.getPostGuid())) --> Line_18 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(post.getSWLat(), post.getSWLon()), new LatLngPoint(post.getNELat(), post.getNELon())) [FD]
Line_20 $$ final XFile dstDir = new XFile(new XFile(Configuration.getInstance().getPublicMapStorage().toString()), backMapGuid) --> Line_21 $$ dstDir.mkdir() [FD]
Line_18 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(post.getSWLat(), post.getSWLon()), new LatLngPoint(post.getNELat(), post.getNELon())) --> Line_22 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) [FD]
Line_22 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) --> Line_23 $$ final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z) [CD]
Line_18 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(post.getSWLat(), post.getSWLon()), new LatLngPoint(post.getNELat(), post.getNELon())) --> Line_23 $$ final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z) [FD]
Line_22 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) --> Line_24 $$ final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z) [CD]
Line_18 $$ final LatLngRectangle bounds = new LatLngRectangle(new LatLngPoint(post.getSWLat(), post.getSWLon()), new LatLngPoint(post.getNELat(), post.getNELon())) --> Line_24 $$ final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z) [FD]
Line_22 $$ for (int z = Math.min(Tile.getOptimalZoom(bounds, 768), 9); z <= 17; z++) --> Line_25 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) [CD]
Line_23 $$ final Tile tileStart = new Tile(bounds.getSouthWest().getLat(), bounds.getSouthWest().getLng(), z) --> Line_25 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) [FD]
Line_24 $$ final Tile tileEnd = new Tile(bounds.getNorthEast().getLat(), bounds.getNorthEast().getLng(), z) --> Line_25 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) [FD]
Line_25 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_26 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) [CD]
Line_25 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_27 $$ XFile file = new XFile(dstDir, tile.toKeyString()) [CD]
Line_26 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_27 $$ XFile file = new XFile(dstDir, tile.toKeyString()) [FD]
Line_25 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_28 $$ if (file.exists() && file.isFile()) [CD]
Line_27 $$ XFile file = new XFile(dstDir, tile.toKeyString()) --> Line_28 $$ if (file.exists() && file.isFile()) [FD]
Line_25 $$ for (double y = tileEnd.getTileCoord().getY(); y <= tileStart.getTileCoord().getY(); y++) for (double x = tileStart.getTileCoord().getX(); x <= tileEnd.getTileCoord().getX(); x++) --> Line_29 $$ backTiles.add(tile) [CD]
Line_16 $$ List<MapTile> backTiles = new ArrayList<MapTile>() --> Line_29 $$ backTiles.add(tile) [FD]
Line_26 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_29 $$ backTiles.add(tile) [FD]
Line_26 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_36 $$ final URL url = new URL(tile.getPath()) [FD]
Line_33 $$ for (MapTile tile : backTiles) --> Line_36 $$ final URL url = new URL(tile.getPath()) [FD]
Line_26 $$ NASAMapTile tile = new NASAMapTile((int) x, (int) y, z) --> Line_38 $$ final XFile outFile = new XFile(dstDir, tile.toKeyString()) [FD]
Line_33 $$ for (MapTile tile : backTiles) --> Line_38 $$ final XFile outFile = new XFile(dstDir, tile.toKeyString()) [FD]
Line_36 $$ final URL url = new URL(tile.getPath()) --> Line_39 $$ final URLConnection conn = url.openConnection() [FD]
Line_39 $$ final URLConnection conn = url.openConnection() --> Line_40 $$ throw new IllegalAccessException("onearth.jpl.nasa.gov service returns non-image file, " + "content-type='" + conn.getContentType() + "'") [FD]
Line_34 $$ InputStream in = null --> Line_41 $$ in = conn.getInputStream() [FD]
Line_39 $$ final URLConnection conn = url.openConnection() --> Line_41 $$ in = conn.getInputStream() [FD]
Line_34 $$ InputStream in = null --> Line_42 $$ if (in != null) [FD]
Line_41 $$ in = conn.getInputStream() --> Line_42 $$ if (in != null) [FD]
Line_42 $$ if (in != null) --> Line_43 $$ out = new XFileOutputStream(outFile) [CD]
Line_35 $$ OutputStream out = null --> Line_43 $$ out = new XFileOutputStream(outFile) [FD]
Line_42 $$ if (in != null) --> Line_44 $$ IOUtils.copy(in, out) [CD]
Line_34 $$ InputStream in = null --> Line_44 $$ IOUtils.copy(in, out) [FD]
Line_41 $$ in = conn.getInputStream() --> Line_44 $$ IOUtils.copy(in, out) [FD]
Line_35 $$ OutputStream out = null --> Line_44 $$ IOUtils.copy(in, out) [FD]
Line_43 $$ out = new XFileOutputStream(outFile) --> Line_44 $$ IOUtils.copy(in, out) [FD]
Line_35 $$ OutputStream out = null --> Line_47 $$ if (out != null) [FD]
Line_43 $$ out = new XFileOutputStream(outFile) --> Line_47 $$ if (out != null) [FD]
Line_47 $$ if (out != null) --> Line_48 $$ out.flush() [CD]
Line_35 $$ OutputStream out = null --> Line_48 $$ out.flush() [FD]
Line_43 $$ out = new XFileOutputStream(outFile) --> Line_48 $$ out.flush() [FD]
Line_47 $$ if (out != null) --> Line_49 $$ out.close() [CD]
Line_35 $$ OutputStream out = null --> Line_49 $$ out.close() [FD]
Line_43 $$ out = new XFileOutputStream(outFile) --> Line_49 $$ out.close() [FD]
Line_34 $$ InputStream in = null --> Line_51 $$ if (in != null) [FD]
Line_41 $$ in = conn.getInputStream() --> Line_51 $$ if (in != null) [FD]
Line_14 $$ int numCachedTiles = 0 --> Line_53 $$ if (++numCachedTiles % 100 == 0) [FD]
Line_53 $$ if (++numCachedTiles % 100 == 0) --> Line_54 $$ logger.info(numCachedTiles + " tiles cached") [CD]
Line_2 $$ public byte process(ProcessorContext<PublishRequest> context) throws InterruptedException, ProcessorException --> Line_71 $$ return TaskState.STATE_TILE_CACHED [CD]
