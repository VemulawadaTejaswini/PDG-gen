Line_2 $$ public List<Rule> parse(Runestone stone, URL url) throws IOException --> Line_3 $$ List<Rule> rules = new ArrayList<Rule>() [CD]
Line_2 $$ public List<Rule> parse(Runestone stone, URL url) throws IOException --> Line_4 $$ Map<String, String> macros = new HashMap<String, String>() [CD]
Line_2 $$ public List<Rule> parse(Runestone stone, URL url) throws IOException --> Line_5 $$ BufferedReader bin = null [CD]
Line_5 $$ BufferedReader bin = null --> Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_2 $$ public List<Rule> parse(Runestone stone, URL url) throws IOException --> Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_5 $$ BufferedReader bin = null --> Line_8 $$ String line = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_8 $$ String line = bin.readLine() [FD]
Line_8 $$ String line = bin.readLine() --> Line_9 $$ while (line != null) [FD]
Line_9 $$ while (line != null) --> Line_10 $$ line = line.trim() [CD]
Line_8 $$ String line = bin.readLine() --> Line_10 $$ line = line.trim() [FD]
Line_9 $$ while (line != null) --> Line_11 $$ if (line.startsWith("Macro:")) [CD]
Line_10 $$ line = line.trim() --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_11 $$ if (line.startsWith("Macro:")) --> Line_12 $$ String name = line.substring(6).trim() [CD]
Line_10 $$ line = line.trim() --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_8 $$ String line = bin.readLine() --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_11 $$ if (line.startsWith("Macro:")) --> Line_13 $$ String value = bin.readLine() [CD]
Line_5 $$ BufferedReader bin = null --> Line_13 $$ String value = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_13 $$ String value = bin.readLine() [FD]
Line_11 $$ if (line.startsWith("Macro:")) --> Line_14 $$ if (value != null) [CD]
Line_13 $$ String value = bin.readLine() --> Line_14 $$ if (value != null) [FD]
Line_14 $$ if (value != null) --> Line_15 $$ value = value.trim() [CD]
Line_13 $$ String value = bin.readLine() --> Line_15 $$ value = value.trim() [FD]
Line_4 $$ Map<String, String> macros = new HashMap<String, String>() --> Line_16 $$ for (Map.Entry<String, String> macro : macros.entrySet()) [FD]
Line_13 $$ String value = bin.readLine() --> Line_17 $$ value = value.replace("(" + macro.getKey() + ")", macro.getValue()) [FD]
Line_15 $$ value = value.trim() --> Line_17 $$ value = value.replace("(" + macro.getKey() + ")", macro.getValue()) [FD]
Line_14 $$ if (value != null) --> Line_19 $$ System.err.println("WARNING: macro '" + name + "' is being redefined") [CD]
Line_4 $$ Map<String, String> macros = new HashMap<String, String>() --> Line_19 $$ System.err.println("WARNING: macro '" + name + "' is being redefined") [FD]
Line_12 $$ String name = line.substring(6).trim() --> Line_19 $$ System.err.println("WARNING: macro '" + name + "' is being redefined") [FD]
Line_14 $$ if (value != null) --> Line_20 $$ macros.put(name, value) [CD]
Line_4 $$ Map<String, String> macros = new HashMap<String, String>() --> Line_20 $$ macros.put(name, value) [FD]
Line_12 $$ String name = line.substring(6).trim() --> Line_20 $$ macros.put(name, value) [FD]
Line_13 $$ String value = bin.readLine() --> Line_20 $$ macros.put(name, value) [FD]
Line_15 $$ value = value.trim() --> Line_20 $$ macros.put(name, value) [FD]
Line_17 $$ value = value.replace("(" + macro.getKey() + ")", macro.getValue()) --> Line_20 $$ macros.put(name, value) [FD]
Line_9 $$ while (line != null) --> Line_23 $$ if (line.startsWith("Rule:")) [CD]
Line_10 $$ line = line.trim() --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_24 $$ String name = line.substring(5).trim() [CD]
Line_10 $$ line = line.trim() --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_8 $$ String line = bin.readLine() --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_25 $$ line = bin.readLine() [CD]
Line_10 $$ line = line.trim() --> Line_25 $$ line = bin.readLine() [FD]
Line_8 $$ String line = bin.readLine() --> Line_25 $$ line = bin.readLine() [FD]
Line_5 $$ BufferedReader bin = null --> Line_25 $$ line = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_25 $$ line = bin.readLine() [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_26 $$ Map<String, Boolean> options = new HashMap<String, Boolean>() [CD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_27 $$ String[] requires = new String[0] [CD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_28 $$ String[] provides = new String[0] [CD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_29 $$ if (line != null && line.startsWith("Options:")) [CD]
Line_10 $$ line = line.trim() --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_29 $$ if (line != null && line.startsWith("Options:")) --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [CD]
Line_10 $$ line = line.trim() --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_25 $$ line = bin.readLine() --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_8 $$ String line = bin.readLine() --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_31 $$ for (String opt : data) --> Line_32 $$ String[] kvp = opt.split("=") [FD]
Line_26 $$ Map<String, Boolean> options = new HashMap<String, Boolean>() --> Line_33 $$ options.put(kvp[0].trim(), Boolean.valueOf(kvp[1].trim())) [FD]
Line_29 $$ if (line != null && line.startsWith("Options:")) --> Line_35 $$ line = bin.readLine() [CD]
Line_10 $$ line = line.trim() --> Line_35 $$ line = bin.readLine() [FD]
Line_25 $$ line = bin.readLine() --> Line_35 $$ line = bin.readLine() [FD]
Line_8 $$ String line = bin.readLine() --> Line_35 $$ line = bin.readLine() [FD]
Line_5 $$ BufferedReader bin = null --> Line_35 $$ line = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_35 $$ line = bin.readLine() [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [CD]
Line_10 $$ line = line.trim() --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_37 $$ if (line != null && line.startsWith("Requires:")) --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [CD]
Line_27 $$ String[] requires = new String[0] --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_10 $$ line = line.trim() --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_25 $$ line = bin.readLine() --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_35 $$ line = bin.readLine() --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_8 $$ String line = bin.readLine() --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_37 $$ if (line != null && line.startsWith("Requires:")) --> Line_39 $$ line = bin.readLine() [CD]
Line_10 $$ line = line.trim() --> Line_39 $$ line = bin.readLine() [FD]
Line_25 $$ line = bin.readLine() --> Line_39 $$ line = bin.readLine() [FD]
Line_35 $$ line = bin.readLine() --> Line_39 $$ line = bin.readLine() [FD]
Line_8 $$ String line = bin.readLine() --> Line_39 $$ line = bin.readLine() [FD]
Line_5 $$ BufferedReader bin = null --> Line_39 $$ line = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_39 $$ line = bin.readLine() [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [CD]
Line_10 $$ line = line.trim() --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_41 $$ if (line != null && line.startsWith("Provides:")) --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [CD]
Line_28 $$ String[] provides = new String[0] --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_10 $$ line = line.trim() --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_25 $$ line = bin.readLine() --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_35 $$ line = bin.readLine() --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_39 $$ line = bin.readLine() --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_8 $$ String line = bin.readLine() --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_41 $$ if (line != null && line.startsWith("Provides:")) --> Line_43 $$ line = bin.readLine() [CD]
Line_10 $$ line = line.trim() --> Line_43 $$ line = bin.readLine() [FD]
Line_25 $$ line = bin.readLine() --> Line_43 $$ line = bin.readLine() [FD]
Line_35 $$ line = bin.readLine() --> Line_43 $$ line = bin.readLine() [FD]
Line_39 $$ line = bin.readLine() --> Line_43 $$ line = bin.readLine() [FD]
Line_8 $$ String line = bin.readLine() --> Line_43 $$ line = bin.readLine() [FD]
Line_5 $$ BufferedReader bin = null --> Line_43 $$ line = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_43 $$ line = bin.readLine() [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_45 $$ if (line == null) [CD]
Line_10 $$ line = line.trim() --> Line_45 $$ if (line == null) [FD]
Line_25 $$ line = bin.readLine() --> Line_45 $$ if (line == null) [FD]
Line_35 $$ line = bin.readLine() --> Line_45 $$ if (line == null) [FD]
Line_39 $$ line = bin.readLine() --> Line_45 $$ if (line == null) [FD]
Line_43 $$ line = bin.readLine() --> Line_45 $$ if (line == null) [FD]
Line_8 $$ String line = bin.readLine() --> Line_45 $$ if (line == null) [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_48 $$ String lhs = "" [CD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [CD]
Line_10 $$ line = line.trim() --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [FD]
Line_25 $$ line = bin.readLine() --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [FD]
Line_35 $$ line = bin.readLine() --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [FD]
Line_39 $$ line = bin.readLine() --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [FD]
Line_43 $$ line = bin.readLine() --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [FD]
Line_8 $$ String line = bin.readLine() --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [FD]
Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) --> Line_50 $$ lhs += line.trim() [CD]
Line_48 $$ String lhs = "" --> Line_50 $$ lhs += line.trim() [FD]
Line_10 $$ line = line.trim() --> Line_50 $$ lhs += line.trim() [FD]
Line_25 $$ line = bin.readLine() --> Line_50 $$ lhs += line.trim() [FD]
Line_35 $$ line = bin.readLine() --> Line_50 $$ lhs += line.trim() [FD]
Line_39 $$ line = bin.readLine() --> Line_50 $$ lhs += line.trim() [FD]
Line_43 $$ line = bin.readLine() --> Line_50 $$ lhs += line.trim() [FD]
Line_8 $$ String line = bin.readLine() --> Line_50 $$ lhs += line.trim() [FD]
Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) --> Line_51 $$ line = bin.readLine() [CD]
Line_10 $$ line = line.trim() --> Line_51 $$ line = bin.readLine() [FD]
Line_25 $$ line = bin.readLine() --> Line_51 $$ line = bin.readLine() [FD]
Line_35 $$ line = bin.readLine() --> Line_51 $$ line = bin.readLine() [FD]
Line_39 $$ line = bin.readLine() --> Line_51 $$ line = bin.readLine() [FD]
Line_43 $$ line = bin.readLine() --> Line_51 $$ line = bin.readLine() [FD]
Line_8 $$ String line = bin.readLine() --> Line_51 $$ line = bin.readLine() [FD]
Line_5 $$ BufferedReader bin = null --> Line_51 $$ line = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_51 $$ line = bin.readLine() [FD]
Line_4 $$ Map<String, String> macros = new HashMap<String, String>() --> Line_53 $$ for (Map.Entry<String, String> macro : macros.entrySet()) [FD]
Line_50 $$ lhs += line.trim() --> Line_54 $$ lhs = lhs.replace("(" + macro.getKey() + ")", macro.getValue()) [FD]
Line_48 $$ String lhs = "" --> Line_54 $$ lhs = lhs.replace("(" + macro.getKey() + ")", macro.getValue()) [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_57 $$ if (lhs.length() > 0) [CD]
Line_50 $$ lhs += line.trim() --> Line_57 $$ if (lhs.length() > 0) [FD]
Line_48 $$ String lhs = "" --> Line_57 $$ if (lhs.length() > 0) [FD]
Line_54 $$ lhs = lhs.replace("(" + macro.getKey() + ")", macro.getValue()) --> Line_57 $$ if (lhs.length() > 0) [FD]
Line_2 $$ public List<Rule> parse(Runestone stone, URL url) throws IOException --> Line_57 $$ if (lhs.length() > 0) [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [CD]
Line_51 $$ line = bin.readLine() --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_10 $$ line = line.trim() --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_5 $$ BufferedReader bin = null --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [CD]
Line_51 $$ line = bin.readLine() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_10 $$ line = line.trim() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) --> Line_62 $$ line = bin.readLine() [CD]
Line_51 $$ line = bin.readLine() --> Line_62 $$ line = bin.readLine() [FD]
Line_10 $$ line = line.trim() --> Line_62 $$ line = bin.readLine() [FD]
Line_25 $$ line = bin.readLine() --> Line_62 $$ line = bin.readLine() [FD]
Line_35 $$ line = bin.readLine() --> Line_62 $$ line = bin.readLine() [FD]
Line_39 $$ line = bin.readLine() --> Line_62 $$ line = bin.readLine() [FD]
Line_43 $$ line = bin.readLine() --> Line_62 $$ line = bin.readLine() [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_62 $$ line = bin.readLine() [FD]
Line_8 $$ String line = bin.readLine() --> Line_62 $$ line = bin.readLine() [FD]
Line_5 $$ BufferedReader bin = null --> Line_62 $$ line = bin.readLine() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_62 $$ line = bin.readLine() [FD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_64 $$ rhs = rhs.trim() [CD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_66 $$ if (rhs.equals("")) [CD]
Line_66 $$ if (rhs.equals("")) --> Line_68 $$ if (rhs.startsWith("[")) [CD]
Line_68 $$ if (rhs.startsWith("[")) --> Line_69 $$ String type = rhs.substring(1, rhs.length() - 1).trim() [CD]
Line_68 $$ if (rhs.startsWith("[")) --> Line_70 $$ if (type.equals("")) [CD]
Line_68 $$ if (rhs.startsWith("[")) --> Line_72 $$ if (rhs.startsWith(" [CD]
Line_72 $$ if (rhs.startsWith(" --> Line_73 $$ rhs = rhs.substring(1, rhs.length() - 1) [CD]
Line_12 $$ String name = line.substring(6).trim() --> Line_75 $$ rule = compiler.compile(name, options, t, rhs) [FD]
Line_26 $$ Map<String, Boolean> options = new HashMap<String, Boolean>() --> Line_75 $$ rule = compiler.compile(name, options, t, rhs) [FD]
Line_72 $$ if (rhs.startsWith(" --> Line_82 $$ System.err.println("Unsupported type of RHS for rule '" + name + "', rule will not be compiled") [CD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_84 $$ if (rule != null) [CD]
Line_84 $$ if (rule != null) --> Line_85 $$ rule.addRequired(requires) [CD]
Line_27 $$ String[] requires = new String[0] --> Line_85 $$ rule.addRequired(requires) [FD]
Line_38 $$ requires = line.substring(9).trim().split("\\s+") --> Line_85 $$ rule.addRequired(requires) [FD]
Line_84 $$ if (rule != null) --> Line_86 $$ rule.addProvided(provides) [CD]
Line_28 $$ String[] provides = new String[0] --> Line_86 $$ rule.addProvided(provides) [FD]
Line_42 $$ provides = line.substring(9).trim().split("\\s+") --> Line_86 $$ rule.addProvided(provides) [FD]
Line_84 $$ if (rule != null) --> Line_87 $$ rules.add(rule) [CD]
Line_3 $$ List<Rule> rules = new ArrayList<Rule>() --> Line_87 $$ rules.add(rule) [FD]
Line_84 $$ if (rule != null) --> Line_89 $$ System.err.println("No idea what happend but the rule instance is null!") [CD]
Line_23 $$ if (line.startsWith("Rule:")) --> Line_91 $$ if (line.startsWith("Import:")) [CD]
Line_62 $$ line = bin.readLine() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_51 $$ line = bin.readLine() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_10 $$ line = line.trim() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_91 $$ if (line.startsWith("Import:")) --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [CD]
Line_3 $$ List<Rule> rules = new ArrayList<Rule>() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_2 $$ public List<Rule> parse(Runestone stone, URL url) throws IOException --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_62 $$ line = bin.readLine() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_51 $$ line = bin.readLine() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_10 $$ line = line.trim() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_25 $$ line = bin.readLine() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_35 $$ line = bin.readLine() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_39 $$ line = bin.readLine() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_43 $$ line = bin.readLine() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_8 $$ String line = bin.readLine() --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_9 $$ while (line != null) --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [CD]
Line_62 $$ line = bin.readLine() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_51 $$ line = bin.readLine() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_10 $$ line = line.trim() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_8 $$ String line = bin.readLine() --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_5 $$ BufferedReader bin = null --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) [FD]
Line_5 $$ BufferedReader bin = null --> Line_97 $$ if (bin != null) [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_97 $$ if (bin != null) [FD]
Line_5 $$ BufferedReader bin = null --> Line_99 $$ bin.close() [FD]
Line_7 $$ bin = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_99 $$ bin.close() [FD]
Line_2 $$ public List<Rule> parse(Runestone stone, URL url) throws IOException --> Line_104 $$ return rules [CD]
Line_10 $$ line = line.trim() --> Line_9 $$ while (line != null) [FD]
Line_25 $$ line = bin.readLine() --> Line_9 $$ while (line != null) [FD]
Line_35 $$ line = bin.readLine() --> Line_9 $$ while (line != null) [FD]
Line_39 $$ line = bin.readLine() --> Line_9 $$ while (line != null) [FD]
Line_43 $$ line = bin.readLine() --> Line_9 $$ while (line != null) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_9 $$ while (line != null) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_9 $$ while (line != null) [FD]
Line_25 $$ line = bin.readLine() --> Line_10 $$ line = line.trim() [FD]
Line_35 $$ line = bin.readLine() --> Line_10 $$ line = line.trim() [FD]
Line_39 $$ line = bin.readLine() --> Line_10 $$ line = line.trim() [FD]
Line_43 $$ line = bin.readLine() --> Line_10 $$ line = line.trim() [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_10 $$ line = line.trim() [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_10 $$ line = line.trim() [FD]
Line_25 $$ line = bin.readLine() --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_11 $$ if (line.startsWith("Macro:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_35 $$ line = bin.readLine() --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_39 $$ line = bin.readLine() --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_43 $$ line = bin.readLine() --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_12 $$ String name = line.substring(6).trim() [FD]
Line_15 $$ value = value.trim() --> Line_14 $$ if (value != null) [FD]
Line_17 $$ value = value.replace("(" + macro.getKey() + ")", macro.getValue()) --> Line_14 $$ if (value != null) [FD]
Line_17 $$ value = value.replace("(" + macro.getKey() + ")", macro.getValue()) --> Line_15 $$ value = value.trim() [FD]
Line_25 $$ line = bin.readLine() --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_23 $$ if (line.startsWith("Rule:")) [FD]
Line_25 $$ line = bin.readLine() --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_35 $$ line = bin.readLine() --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_39 $$ line = bin.readLine() --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_43 $$ line = bin.readLine() --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_24 $$ String name = line.substring(5).trim() [FD]
Line_35 $$ line = bin.readLine() --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_29 $$ if (line != null && line.startsWith("Options:")) [FD]
Line_35 $$ line = bin.readLine() --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_39 $$ line = bin.readLine() --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_43 $$ line = bin.readLine() --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_30 $$ String data[] = line.substring(8).trim().split(",") [FD]
Line_39 $$ line = bin.readLine() --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_37 $$ if (line != null && line.startsWith("Requires:")) [FD]
Line_39 $$ line = bin.readLine() --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_43 $$ line = bin.readLine() --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_38 $$ requires = line.substring(9).trim().split("\\s+") [FD]
Line_43 $$ line = bin.readLine() --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_41 $$ if (line != null && line.startsWith("Provides:")) [FD]
Line_43 $$ line = bin.readLine() --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_42 $$ provides = line.substring(9).trim().split("\\s+") [FD]
Line_59 $$ if (line != null && !line.startsWith("Rule:")) --> Line_45 $$ if (line == null) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_45 $$ if (line == null) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_59 $$ if (line != null && !line.startsWith("Rule:")) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_91 $$ if (line.startsWith("Import:")) [FD]
Line_94 $$ if (line == null || !line.trim().startsWith("Rule:")) --> Line_92 $$ rules.addAll(parse(stone, new URL(url, line.substring(7).trim()))) [FD]
Line_51 $$ line = bin.readLine() --> Line_49 $$ while (line != null && (!line.trim().equals("=>") && !line.startsWith("Rule:"))) [FD]
Line_51 $$ line = bin.readLine() --> Line_50 $$ lhs += line.trim() [FD]
Line_62 $$ line = bin.readLine() --> Line_60 $$ while (line != null && !line.trim().startsWith("Rule:")) [FD]
