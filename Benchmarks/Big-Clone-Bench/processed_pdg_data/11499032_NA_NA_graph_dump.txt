Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_3 $$ LOG.debug("output signed open document") [CD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_4 $$ OutputStream signedOdfOutputStream = getSignedOpenDocumentOutputStream() [CD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_5 $$ if (null == signedOdfOutputStream) [CD]
Line_4 $$ OutputStream signedOdfOutputStream = getSignedOpenDocumentOutputStream() --> Line_5 $$ if (null == signedOdfOutputStream) [FD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream) [CD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream()) [CD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_10 $$ ZipEntry zipEntry [CD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [CD]
Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream()) --> Line_11 $$ while (null != (zipEntry = zipInputStream.getNextEntry())) [FD]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream) --> Line_13 $$ zipOutputStream.putNextEntry(zipEntry) [FD]
Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream()) --> Line_14 $$ IOUtils.copy(zipInputStream, zipOutputStream) [FD]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream) --> Line_14 $$ IOUtils.copy(zipInputStream, zipOutputStream) [FD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_17 $$ zipInputStream.close() [CD]
Line_9 $$ ZipInputStream zipInputStream = new ZipInputStream(this.getOpenDocumentURL().openStream()) --> Line_17 $$ zipInputStream.close() [FD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_18 $$ zipEntry = new ZipEntry(ODFUtil.SIGNATURE_FILE) [CD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_19 $$ zipOutputStream.putNextEntry(zipEntry) [CD]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream) --> Line_19 $$ zipOutputStream.putNextEntry(zipEntry) [FD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_20 $$ IOUtils.write(signatureData, zipOutputStream) [CD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_20 $$ IOUtils.write(signatureData, zipOutputStream) [FD]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream) --> Line_20 $$ IOUtils.write(signatureData, zipOutputStream) [FD]
Line_2 $$ private void outputSignedOpenDocument(byte[] signatureData) throws IOException --> Line_21 $$ zipOutputStream.close() [CD]
Line_8 $$ ZipOutputStream zipOutputStream = new ZipOutputStream(signedOdfOutputStream) --> Line_21 $$ zipOutputStream.close() [FD]
