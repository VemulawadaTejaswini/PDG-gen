Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_3 $$ if (url == null) [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_3 $$ if (url == null) [FD]
Line_3 $$ if (url == null) --> Line_4 $$ log.log(Level.WARNING, "Trying to load a cursor with a null url.") [CD]
Line_3 $$ if (url == null) --> Line_5 $$ return null [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_7 $$ String cursorFile = url.getFile() [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_7 $$ String cursorFile = url.getFile() [FD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_8 $$ BufferedReader reader = null [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_9 $$ int lineNumber = 0 [CD]
Line_7 $$ String cursorFile = url.getFile() --> Line_13 $$ if (cursorFile.endsWith(cursorDescriptorFile)) [FD]
Line_13 $$ if (cursorFile.endsWith(cursorDescriptorFile)) --> Line_14 $$ cursorUrl = url [CD]
Line_12 $$ URL cursorUrl --> Line_14 $$ cursorUrl = url [FD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_14 $$ cursorUrl = url [FD]
Line_13 $$ if (cursorFile.endsWith(cursorDescriptorFile)) --> Line_15 $$ Cursor cached = cursorCache.get(url) [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_15 $$ Cursor cached = cursorCache.get(url) [FD]
Line_13 $$ if (cursorFile.endsWith(cursorDescriptorFile)) --> Line_16 $$ if (cached != null) [CD]
Line_15 $$ Cursor cached = cursorCache.get(url) --> Line_16 $$ if (cached != null) [FD]
Line_13 $$ if (cursorFile.endsWith(cursorDescriptorFile)) --> Line_17 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) [CD]
Line_8 $$ BufferedReader reader = null --> Line_17 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_17 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) [FD]
Line_13 $$ if (cursorFile.endsWith(cursorDescriptorFile)) --> Line_18 $$ loader = new DirectoryTextureLoader(url, false) [CD]
Line_11 $$ DirectoryTextureLoader loader --> Line_18 $$ loader = new DirectoryTextureLoader(url, false) [FD]
Line_13 $$ if (cursorFile.endsWith(cursorDescriptorFile)) --> Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) [CD]
Line_7 $$ String cursorFile = url.getFile() --> Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_20 $$ loader = new DirectoryTextureLoader(url, true) [CD]
Line_11 $$ DirectoryTextureLoader loader --> Line_20 $$ loader = new DirectoryTextureLoader(url, true) [FD]
Line_18 $$ loader = new DirectoryTextureLoader(url, false) --> Line_20 $$ loader = new DirectoryTextureLoader(url, true) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_21 $$ descriptor = defaultDescriptorFile [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_21 $$ descriptor = defaultDescriptorFile [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [CD]
Line_12 $$ URL cursorUrl --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [FD]
Line_14 $$ cursorUrl = url --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [FD]
Line_11 $$ DirectoryTextureLoader loader --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [FD]
Line_18 $$ loader = new DirectoryTextureLoader(url, false) --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [FD]
Line_20 $$ loader = new DirectoryTextureLoader(url, true) --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [FD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [FD]
Line_21 $$ descriptor = defaultDescriptorFile --> Line_22 $$ cursorUrl = loader.makeUrl(descriptor) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_23 $$ Cursor cached = cursorCache.get(url) [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_23 $$ Cursor cached = cursorCache.get(url) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_24 $$ if (cached != null) [CD]
Line_15 $$ Cursor cached = cursorCache.get(url) --> Line_24 $$ if (cached != null) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_25 $$ ZipInputStream zis = new ZipInputStream(url.openStream()) [CD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_25 $$ ZipInputStream zis = new ZipInputStream(url.openStream()) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_26 $$ ZipEntry entry [CD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_27 $$ boolean found = false [CD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_28 $$ while ((entry = zis.getNextEntry()) != null) [CD]
Line_25 $$ ZipInputStream zis = new ZipInputStream(url.openStream()) --> Line_28 $$ while ((entry = zis.getNextEntry()) != null) [FD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_29 $$ if (descriptor.equals(entry.getName())) [FD]
Line_21 $$ descriptor = defaultDescriptorFile --> Line_29 $$ if (descriptor.equals(entry.getName())) [FD]
Line_29 $$ if (descriptor.equals(entry.getName())) --> Line_30 $$ found = true [CD]
Line_27 $$ boolean found = false --> Line_30 $$ found = true [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_34 $$ if (!found) [CD]
Line_30 $$ found = true --> Line_34 $$ if (!found) [FD]
Line_27 $$ boolean found = false --> Line_34 $$ if (!found) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_37 $$ reader = new BufferedReader(new InputStreamReader(zis)) [CD]
Line_8 $$ BufferedReader reader = null --> Line_37 $$ reader = new BufferedReader(new InputStreamReader(zis)) [FD]
Line_17 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_37 $$ reader = new BufferedReader(new InputStreamReader(zis)) [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_39 $$ log.log(Level.WARNING, "Invalid cursor fileName \" [CD]
Line_7 $$ String cursorFile = url.getFile() --> Line_39 $$ log.log(Level.WARNING, "Invalid cursor fileName \" [FD]
Line_19 $$ if (cursorFile.endsWith(cursorArchiveFile)) --> Line_40 $$ return null [CD]
Line_12 $$ URL cursorUrl --> Line_43 $$ cursor.url = cursorUrl [FD]
Line_14 $$ cursorUrl = url --> Line_43 $$ cursor.url = cursorUrl [FD]
Line_22 $$ cursorUrl = loader.makeUrl(descriptor) --> Line_43 $$ cursor.url = cursorUrl [FD]
Line_47 $$ String line --> Line_48 $$ while ((line = reader.readLine()) != null) [FD]
Line_8 $$ BufferedReader reader = null --> Line_48 $$ while ((line = reader.readLine()) != null) [FD]
Line_17 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_48 $$ while ((line = reader.readLine()) != null) [FD]
Line_37 $$ reader = new BufferedReader(new InputStreamReader(zis)) --> Line_48 $$ while ((line = reader.readLine()) != null) [FD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_49 $$ lineNumber++ [CD]
Line_9 $$ int lineNumber = 0 --> Line_49 $$ lineNumber++ [FD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_50 $$ int commentIndex = line.indexOf(commentString) [CD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_50 $$ int commentIndex = line.indexOf(commentString) [FD]
Line_47 $$ String line --> Line_50 $$ int commentIndex = line.indexOf(commentString) [FD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_51 $$ if (commentIndex != -1) [CD]
Line_50 $$ int commentIndex = line.indexOf(commentString) --> Line_51 $$ if (commentIndex != -1) [FD]
Line_51 $$ if (commentIndex != -1) --> Line_52 $$ line = line.substring(0, commentIndex) [CD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_52 $$ line = line.substring(0, commentIndex) [FD]
Line_47 $$ String line --> Line_52 $$ line = line.substring(0, commentIndex) [FD]
Line_50 $$ int commentIndex = line.indexOf(commentString) --> Line_52 $$ line = line.substring(0, commentIndex) [FD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) [CD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_55 $$ if (!tokens.hasMoreTokens()) [CD]
Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) --> Line_55 $$ if (!tokens.hasMoreTokens()) [FD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_56 $$ String prefix = tokens.nextToken() [CD]
Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) --> Line_56 $$ String prefix = tokens.nextToken() [FD]
Line_48 $$ while ((line = reader.readLine()) != null) --> Line_57 $$ if (prefix.equals(hotSpotXPrefix)) [CD]
Line_56 $$ String prefix = tokens.nextToken() --> Line_57 $$ if (prefix.equals(hotSpotXPrefix)) [FD]
Line_57 $$ if (prefix.equals(hotSpotXPrefix)) --> Line_58 $$ cursor.hotSpotOffset.x = Integer.valueOf(tokens.nextToken()) [CD]
Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) --> Line_58 $$ cursor.hotSpotOffset.x = Integer.valueOf(tokens.nextToken()) [FD]
Line_57 $$ if (prefix.equals(hotSpotXPrefix)) --> Line_59 $$ if (prefix.equals(hotSpotYPrefix)) [CD]
Line_56 $$ String prefix = tokens.nextToken() --> Line_59 $$ if (prefix.equals(hotSpotYPrefix)) [FD]
Line_59 $$ if (prefix.equals(hotSpotYPrefix)) --> Line_60 $$ cursor.hotSpotOffset.y = Integer.valueOf(tokens.nextToken()) [CD]
Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) --> Line_60 $$ cursor.hotSpotOffset.y = Integer.valueOf(tokens.nextToken()) [FD]
Line_59 $$ if (prefix.equals(hotSpotYPrefix)) --> Line_61 $$ if (prefix.equals(timePrefix)) [CD]
Line_56 $$ String prefix = tokens.nextToken() --> Line_61 $$ if (prefix.equals(timePrefix)) [FD]
Line_61 $$ if (prefix.equals(timePrefix)) --> Line_62 $$ delays.add(Integer.valueOf(tokens.nextToken())) [CD]
Line_44 $$ List<Integer> delays = new ArrayList<Integer>() --> Line_62 $$ delays.add(Integer.valueOf(tokens.nextToken())) [FD]
Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) --> Line_62 $$ delays.add(Integer.valueOf(tokens.nextToken())) [FD]
Line_61 $$ if (prefix.equals(timePrefix)) --> Line_63 $$ if (tokens.nextToken().equals(imagePrefix)) [CD]
Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) --> Line_63 $$ if (tokens.nextToken().equals(imagePrefix)) [FD]
Line_63 $$ if (tokens.nextToken().equals(imagePrefix)) --> Line_64 $$ String file = tokens.nextToken("") [CD]
Line_54 $$ StringTokenizer tokens = new StringTokenizer(line, delims) --> Line_64 $$ String file = tokens.nextToken("") [FD]
Line_63 $$ if (tokens.nextToken().equals(imagePrefix)) --> Line_65 $$ file = file.substring(file.indexOf('=') + 1) [CD]
Line_64 $$ String file = tokens.nextToken("") --> Line_65 $$ file = file.substring(file.indexOf('=') + 1) [FD]
Line_63 $$ if (tokens.nextToken().equals(imagePrefix)) --> Line_66 $$ file.trim() [CD]
Line_64 $$ String file = tokens.nextToken("") --> Line_66 $$ file.trim() [FD]
Line_65 $$ file = file.substring(file.indexOf('=') + 1) --> Line_66 $$ file.trim() [FD]
Line_63 $$ if (tokens.nextToken().equals(imagePrefix)) --> Line_67 $$ frameFileNames.add(file) [CD]
Line_45 $$ List<String> frameFileNames = new ArrayList<String>() --> Line_67 $$ frameFileNames.add(file) [FD]
Line_64 $$ String file = tokens.nextToken("") --> Line_67 $$ frameFileNames.add(file) [FD]
Line_65 $$ file = file.substring(file.indexOf('=') + 1) --> Line_67 $$ frameFileNames.add(file) [FD]
Line_63 $$ if (tokens.nextToken().equals(imagePrefix)) --> Line_68 $$ if (textureCache.get(file) == null) [CD]
Line_46 $$ Map<String, Texture> textureCache = new HashMap<String, Texture>() --> Line_68 $$ if (textureCache.get(file) == null) [FD]
Line_64 $$ String file = tokens.nextToken("") --> Line_68 $$ if (textureCache.get(file) == null) [FD]
Line_65 $$ file = file.substring(file.indexOf('=') + 1) --> Line_68 $$ if (textureCache.get(file) == null) [FD]
Line_68 $$ if (textureCache.get(file) == null) --> Line_69 $$ textureCache.put(file, loader.loadTexture(file)) [CD]
Line_46 $$ Map<String, Texture> textureCache = new HashMap<String, Texture>() --> Line_69 $$ textureCache.put(file, loader.loadTexture(file)) [FD]
Line_64 $$ String file = tokens.nextToken("") --> Line_69 $$ textureCache.put(file, loader.loadTexture(file)) [FD]
Line_65 $$ file = file.substring(file.indexOf('=') + 1) --> Line_69 $$ textureCache.put(file, loader.loadTexture(file)) [FD]
Line_11 $$ DirectoryTextureLoader loader --> Line_69 $$ textureCache.put(file, loader.loadTexture(file)) [FD]
Line_18 $$ loader = new DirectoryTextureLoader(url, false) --> Line_69 $$ textureCache.put(file, loader.loadTexture(file)) [FD]
Line_20 $$ loader = new DirectoryTextureLoader(url, true) --> Line_69 $$ textureCache.put(file, loader.loadTexture(file)) [FD]
Line_45 $$ List<String> frameFileNames = new ArrayList<String>() --> Line_76 $$ cursor.frameFileNames = frameFileNames.toArray(new String[0]) [FD]
Line_46 $$ Map<String, Texture> textureCache = new HashMap<String, Texture>() --> Line_77 $$ cursor.textureCache = textureCache [FD]
Line_44 $$ List<Integer> delays = new ArrayList<Integer>() --> Line_78 $$ cursor.delays = new int[delays.size()] [FD]
Line_45 $$ List<String> frameFileNames = new ArrayList<String>() --> Line_79 $$ cursor.images = new Image[frameFileNames.size()] [FD]
Line_45 $$ List<String> frameFileNames = new ArrayList<String>() --> Line_80 $$ cursor.textures = new Texture[frameFileNames.size()] [FD]
Line_81 $$ for (int i = 0; i < cursor.frameFileNames.length; i++) --> Line_82 $$ cursor.textures[i] = textureCache.get(cursor.frameFileNames[i]) [CD]
Line_46 $$ Map<String, Texture> textureCache = new HashMap<String, Texture>() --> Line_82 $$ cursor.textures[i] = textureCache.get(cursor.frameFileNames[i]) [FD]
Line_81 $$ for (int i = 0; i < cursor.frameFileNames.length; i++) --> Line_83 $$ cursor.images[i] = cursor.textures[i].getImage() [CD]
Line_81 $$ for (int i = 0; i < cursor.frameFileNames.length; i++) --> Line_84 $$ cursor.delays[i] = delays.get(i) [CD]
Line_81 $$ for (int i = 0; i < cursor.frameFileNames.length; i++) --> Line_84 $$ cursor.delays[i] = delays.get(i) [FD]
Line_44 $$ List<Integer> delays = new ArrayList<Integer>() --> Line_84 $$ cursor.delays[i] = delays.get(i) [FD]
Line_44 $$ List<Integer> delays = new ArrayList<Integer>() --> Line_86 $$ if (delays.size() == 1) [FD]
Line_87 $$ if (cursor.images.length == 0) --> Line_88 $$ log.log(Level.WARNING, "The cursor has no animation frames.") [CD]
Line_87 $$ if (cursor.images.length == 0) --> Line_89 $$ return null [CD]
Line_42 $$ Cursor cursor = new Cursor() --> Line_93 $$ cursorCache.put(cursor.url, cursor) [FD]
Line_8 $$ BufferedReader reader = null --> Line_106 $$ if (reader != null) [FD]
Line_17 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_106 $$ if (reader != null) [FD]
Line_37 $$ reader = new BufferedReader(new InputStreamReader(zis)) --> Line_106 $$ if (reader != null) [FD]
Line_8 $$ BufferedReader reader = null --> Line_108 $$ reader.close() [FD]
Line_17 $$ reader = new BufferedReader(new InputStreamReader(url.openStream())) --> Line_108 $$ reader.close() [FD]
Line_37 $$ reader = new BufferedReader(new InputStreamReader(zis)) --> Line_108 $$ reader.close() [FD]
Line_2 $$ public static Cursor load(URL url, String descriptor) --> Line_114 $$ return null [CD]
Line_52 $$ line = line.substring(0, commentIndex) --> Line_50 $$ int commentIndex = line.indexOf(commentString) [FD]
