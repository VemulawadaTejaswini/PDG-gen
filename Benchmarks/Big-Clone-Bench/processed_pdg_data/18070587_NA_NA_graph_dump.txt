Line_2 $$ public void testWriteAndReadFirstLevel() throws Exception --> Line_3 $$ JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0) [CD]
Line_2 $$ public void testWriteAndReadFirstLevel() throws Exception --> Line_4 $$ JCFS.configureDiscovery(defaultUdpAddress, defaultUdpPort) [CD]
Line_3 $$ JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0) --> Line_6 $$ server.start() [FD]
Line_9 $$ RFileOutputStream out = new RFileOutputStream(file) --> Line_10 $$ out.write("test".getBytes("utf-8")) [FD]
Line_9 $$ RFileOutputStream out = new RFileOutputStream(file) --> Line_11 $$ out.close() [FD]
Line_12 $$ RFileInputStream in = new RFileInputStream(file) --> Line_14 $$ int readCount = in.read(buffer) [FD]
Line_13 $$ byte[] buffer = new byte[4] --> Line_14 $$ int readCount = in.read(buffer) [FD]
Line_12 $$ RFileInputStream in = new RFileInputStream(file) --> Line_15 $$ in.close() [FD]
Line_14 $$ int readCount = in.read(buffer) --> Line_16 $$ assertEquals(4, readCount) [FD]
Line_17 $$ String resultRead = new String(buffer, "utf-8") --> Line_18 $$ assertEquals("test", resultRead) [FD]
Line_3 $$ JCFSFileServer server = new JCFSFileServer(defaultTcpPort, defaultTcpAddress, defaultUdpPort, defaultUdpAddress, dir, 0, 0) --> Line_20 $$ server.stop() [FD]
