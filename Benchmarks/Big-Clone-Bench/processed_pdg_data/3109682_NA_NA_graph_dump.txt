Line_2 $$ public void testSha1() throws Exception --> Line_3 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1") [CD]
Line_2 $$ public void testSha1() throws Exception --> Line_4 $$ int numTests = mTestData.length [CD]
Line_2 $$ public void testSha1() throws Exception --> Line_5 $$ for (int i = 0; i < numTests; i++) [CD]
Line_4 $$ int numTests = mTestData.length --> Line_5 $$ for (int i = 0; i < numTests; i++) [FD]
Line_5 $$ for (int i = 0; i < numTests; i++) --> Line_6 $$ digest.update(mTestData[i].input.getBytes()) [CD]
Line_3 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1") --> Line_6 $$ digest.update(mTestData[i].input.getBytes()) [FD]
Line_5 $$ for (int i = 0; i < numTests; i++) --> Line_7 $$ byte[] hash = digest.digest() [CD]
Line_3 $$ MessageDigest digest = MessageDigest.getInstance("SHA-1") --> Line_7 $$ byte[] hash = digest.digest() [FD]
Line_5 $$ for (int i = 0; i < numTests; i++) --> Line_8 $$ String encodedHash = encodeHex(hash) [CD]
Line_7 $$ byte[] hash = digest.digest() --> Line_8 $$ String encodedHash = encodeHex(hash) [FD]
Line_5 $$ for (int i = 0; i < numTests; i++) --> Line_9 $$ assertEquals(encodedHash, mTestData[i].result) [CD]
Line_8 $$ String encodedHash = encodeHex(hash) --> Line_9 $$ assertEquals(encodedHash, mTestData[i].result) [FD]
