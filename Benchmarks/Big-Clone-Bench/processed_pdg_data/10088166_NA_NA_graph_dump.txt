Line_2 $$ public void testTrim() throws Exception --> Line_3 $$ TreeNode ast = TestUtil.readFileInAST("resources/SimpleTestFile.java") [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_4 $$ DecoratorSelection ds = new DecoratorSelection() [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_5 $$ XmlFileSystemRepository rep = new XmlFileSystemRepository() [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_6 $$ XmlToFormatContentConverter converter = new XmlToFormatContentConverter(rep) [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_7 $$ URI url = new File("resources/javaDefaultFormats.xml").toURI() [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_8 $$ InputStream is = url.toURL().openStream() [CD]
Line_7 $$ URI url = new File("resources/javaDefaultFormats.xml").toURI() --> Line_8 $$ InputStream is = url.toURL().openStream() [FD]
Line_2 $$ public void testTrim() throws Exception --> Line_9 $$ converter.convert(is) [CD]
Line_6 $$ XmlToFormatContentConverter converter = new XmlToFormatContentConverter(rep) --> Line_9 $$ converter.convert(is) [FD]
Line_8 $$ InputStream is = url.toURL().openStream() --> Line_9 $$ converter.convert(is) [FD]
Line_2 $$ public void testTrim() throws Exception --> Line_10 $$ File f = new File("resources/javaDefaultFormats.xml").getAbsoluteFile() [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_11 $$ converter.convert(f) [CD]
Line_6 $$ XmlToFormatContentConverter converter = new XmlToFormatContentConverter(rep) --> Line_11 $$ converter.convert(f) [FD]
Line_10 $$ File f = new File("resources/javaDefaultFormats.xml").getAbsoluteFile() --> Line_11 $$ converter.convert(f) [FD]
Line_2 $$ public void testTrim() throws Exception --> Line_12 $$ String string = new File("resources/query.xml").getAbsolutePath() [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_13 $$ Document qDoc = XmlUtil.loadXmlFromFile(string) [CD]
Line_12 $$ String string = new File("resources/query.xml").getAbsolutePath() --> Line_13 $$ Document qDoc = XmlUtil.loadXmlFromFile(string) [FD]
Line_2 $$ public void testTrim() throws Exception --> Line_14 $$ Query query = new Query(qDoc) [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_15 $$ Format format = XfsrFormatManager.getInstance().getFormats("java", "signature only") [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_16 $$ TokenAutoTrimmer.create("Java", "resources/java.autotrim") [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_17 $$ Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument() [CD]
Line_5 $$ XmlFileSystemRepository rep = new XmlFileSystemRepository() --> Line_17 $$ Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument() [FD]
Line_3 $$ TreeNode ast = TestUtil.readFileInAST("resources/SimpleTestFile.java") --> Line_17 $$ Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument() [FD]
Line_14 $$ Query query = new Query(qDoc) --> Line_17 $$ Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument() [FD]
Line_15 $$ Format format = XfsrFormatManager.getInstance().getFormats("java", "signature only") --> Line_17 $$ Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument() [FD]
Line_4 $$ DecoratorSelection ds = new DecoratorSelection() --> Line_17 $$ Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument() [FD]
Line_2 $$ public void testTrim() throws Exception --> Line_18 $$ String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><sourcecode>main(String[])</sourcecode>" [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_19 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() [CD]
Line_2 $$ public void testTrim() throws Exception --> Line_20 $$ XmlUtil.outputXml(doc, bout) [CD]
Line_17 $$ Document doc = rep.getXmlContentTree(ast, query, format, ds).getOwnerDocument() --> Line_20 $$ XmlUtil.outputXml(doc, bout) [FD]
Line_19 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_20 $$ XmlUtil.outputXml(doc, bout) [FD]
Line_2 $$ public void testTrim() throws Exception --> Line_21 $$ String actual = bout.toString() [CD]
Line_19 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream() --> Line_21 $$ String actual = bout.toString() [FD]
Line_2 $$ public void testTrim() throws Exception --> Line_22 $$ assertEquals(expected, actual) [CD]
Line_18 $$ String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><sourcecode>main(String[])</sourcecode>" --> Line_22 $$ assertEquals(expected, actual) [FD]
Line_21 $$ String actual = bout.toString() --> Line_22 $$ assertEquals(expected, actual) [FD]
