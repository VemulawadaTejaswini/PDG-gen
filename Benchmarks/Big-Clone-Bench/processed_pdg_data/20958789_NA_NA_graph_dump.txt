Line_8 $$ File newFile = new File(mfr.getFilename() + ".part") --> Line_9 $$ if (newFile.exists()) [FD]
Line_9 $$ if (newFile.exists()) --> Line_10 $$ newFile.delete() [CD]
Line_8 $$ File newFile = new File(mfr.getFilename() + ".part") --> Line_10 $$ newFile.delete() [FD]
Line_8 $$ File newFile = new File(mfr.getFilename() + ".part") --> Line_14 $$ newFile.createNewFile() [FD]
Line_23 $$ for (int i = 0; i < fileMap.length; i++) --> Line_25 $$ if (fileOffset != -1) [CD]
Line_25 $$ if (fileOffset != -1) --> Line_26 $$ rChannel.read(buffer, fileOffset) [CD]
Line_16 $$ FileChannel rChannel = new FileInputStream(inputFileName).getChannel() --> Line_26 $$ rChannel.read(buffer, fileOffset) [FD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_26 $$ rChannel.read(buffer, fileOffset) [FD]
Line_25 $$ if (fileOffset != -1) --> Line_27 $$ buffer.flip() [CD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_27 $$ buffer.flip() [FD]
Line_25 $$ if (fileOffset != -1) --> Line_28 $$ wChannel.write(buffer) [CD]
Line_17 $$ FileChannel wChannel = new FileOutputStream(newFile, true).getChannel() --> Line_28 $$ wChannel.write(buffer) [FD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_28 $$ wChannel.write(buffer) [FD]
Line_25 $$ if (fileOffset != -1) --> Line_29 $$ buffer.clear() [CD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_29 $$ buffer.clear() [FD]
Line_25 $$ if (fileOffset != -1) --> Line_31 $$ if (!rangeQueue) [CD]
Line_31 $$ if (!rangeQueue) --> Line_32 $$ rangeList = rangeLookUp(i) [CD]
Line_12 $$ ArrayList<DataRange> rangeList = null --> Line_32 $$ rangeList = rangeLookUp(i) [FD]
Line_23 $$ for (int i = 0; i < fileMap.length; i++) --> Line_32 $$ rangeList = rangeLookUp(i) [FD]
Line_31 $$ if (!rangeQueue) --> Line_33 $$ range = rangeList.size() [CD]
Line_6 $$ int range = 0 --> Line_33 $$ range = rangeList.size() [FD]
Line_32 $$ rangeList = rangeLookUp(i) --> Line_33 $$ range = rangeList.size() [FD]
Line_12 $$ ArrayList<DataRange> rangeList = null --> Line_33 $$ range = rangeList.size() [FD]
Line_31 $$ if (!rangeQueue) --> Line_34 $$ openConnection() [CD]
Line_31 $$ if (!rangeQueue) --> Line_35 $$ http.setRangesRequest(rangeList) [CD]
Line_32 $$ rangeList = rangeLookUp(i) --> Line_35 $$ http.setRangesRequest(rangeList) [FD]
Line_12 $$ ArrayList<DataRange> rangeList = null --> Line_35 $$ http.setRangesRequest(rangeList) [FD]
Line_31 $$ if (!rangeQueue) --> Line_36 $$ http.sendRequest() [CD]
Line_31 $$ if (!rangeQueue) --> Line_37 $$ http.getResponseHeader() [CD]
Line_31 $$ if (!rangeQueue) --> Line_38 $$ data = http.getResponseBody(mfr.getBlocksize()) [CD]
Line_13 $$ byte[] data = null --> Line_38 $$ data = http.getResponseBody(mfr.getBlocksize()) [FD]
Line_31 $$ if (!rangeQueue) --> Line_39 $$ allData += http.getAllTransferedDataLength() [CD]
Line_4 $$ long allData = 0 --> Line_39 $$ allData += http.getAllTransferedDataLength() [FD]
Line_25 $$ if (fileOffset != -1) --> Line_41 $$ if ((i * mfr.getBlocksize() + mfr.getBlocksize()) < mfr.getLength()) [CD]
Line_41 $$ if ((i * mfr.getBlocksize() + mfr.getBlocksize()) < mfr.getLength()) --> Line_42 $$ blockLength = mfr.getBlocksize() [CD]
Line_7 $$ int blockLength = 0 --> Line_42 $$ blockLength = mfr.getBlocksize() [FD]
Line_41 $$ if ((i * mfr.getBlocksize() + mfr.getBlocksize()) < mfr.getLength()) --> Line_44 $$ blockLength = (int) ((int) (mfr.getBlocksize()) + (mfr.getLength() - (i * mfr.getBlocksize() + mfr.getBlocksize()))) [CD]
Line_42 $$ blockLength = mfr.getBlocksize() --> Line_44 $$ blockLength = (int) ((int) (mfr.getBlocksize()) + (mfr.getLength() - (i * mfr.getBlocksize() + mfr.getBlocksize()))) [FD]
Line_7 $$ int blockLength = 0 --> Line_44 $$ blockLength = (int) ((int) (mfr.getBlocksize()) + (mfr.getLength() - (i * mfr.getBlocksize() + mfr.getBlocksize()))) [FD]
Line_25 $$ if (fileOffset != -1) --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [CD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_38 $$ data = http.getResponseBody(mfr.getBlocksize()) --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_13 $$ byte[] data = null --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_42 $$ blockLength = mfr.getBlocksize() --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_44 $$ blockLength = (int) ((int) (mfr.getBlocksize()) + (mfr.getLength() - (i * mfr.getBlocksize() + mfr.getBlocksize()))) --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_7 $$ int blockLength = 0 --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_32 $$ rangeList = rangeLookUp(i) --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_12 $$ ArrayList<DataRange> rangeList = null --> Line_46 $$ buffer.put(data, (range - rangeList.size()) * mfr.getBlocksize(), blockLength) [FD]
Line_25 $$ if (fileOffset != -1) --> Line_47 $$ buffer.flip() [CD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_47 $$ buffer.flip() [FD]
Line_25 $$ if (fileOffset != -1) --> Line_48 $$ wChannel.write(buffer) [CD]
Line_17 $$ FileChannel wChannel = new FileOutputStream(newFile, true).getChannel() --> Line_48 $$ wChannel.write(buffer) [FD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_48 $$ wChannel.write(buffer) [FD]
Line_25 $$ if (fileOffset != -1) --> Line_49 $$ buffer.clear() [CD]
Line_15 $$ ByteBuffer buffer = ByteBuffer.allocate(mfr.getBlocksize()) --> Line_49 $$ buffer.clear() [FD]
Line_25 $$ if (fileOffset != -1) --> Line_50 $$ rangeList.remove(0) [CD]
Line_32 $$ rangeList = rangeLookUp(i) --> Line_50 $$ rangeList.remove(0) [FD]
Line_12 $$ ArrayList<DataRange> rangeList = null --> Line_50 $$ rangeList.remove(0) [FD]
Line_25 $$ if (fileOffset != -1) --> Line_51 $$ if (rangeList.isEmpty()) [CD]
Line_32 $$ rangeList = rangeLookUp(i) --> Line_51 $$ if (rangeList.isEmpty()) [FD]
Line_12 $$ ArrayList<DataRange> rangeList = null --> Line_51 $$ if (rangeList.isEmpty()) [FD]
Line_23 $$ for (int i = 0; i < fileMap.length; i++) --> Line_55 $$ if ((((double) i / ((double) fileMap.length - 1)) * 100) >= a) [CD]
Line_5 $$ double a = 10 --> Line_55 $$ if ((((double) i / ((double) fileMap.length - 1)) * 100) >= a) [FD]
Line_55 $$ if ((((double) i / ((double) fileMap.length - 1)) * 100) >= a) --> Line_56 $$ progressBar(((double) i / ((double) fileMap.length - 1)) * 100) [CD]
Line_55 $$ if ((((double) i / ((double) fileMap.length - 1)) * 100) >= a) --> Line_57 $$ a += 10 [CD]
Line_5 $$ double a = 10 --> Line_57 $$ a += 10 [FD]
Line_8 $$ File newFile = new File(mfr.getFilename() + ".part") --> Line_60 $$ newFile.setLastModified(getMTime()) [FD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_63 $$ System.out.println("\nverifying download...checksum matches OK") [CD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_64 $$ System.out.println("used " + (mfr.getLength() - (mfr.getBlocksize() * missing)) + " " + "local, fetched " + (mfr.getBlocksize() * missing)) [CD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_65 $$ new File(mfr.getFilename()).renameTo(new File(mfr.getFilename() + ".zs-old")) [CD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_66 $$ newFile.renameTo(new File(mfr.getFilename())) [CD]
Line_8 $$ File newFile = new File(mfr.getFilename() + ".part") --> Line_66 $$ newFile.renameTo(new File(mfr.getFilename())) [FD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_67 $$ allData += mfr.getLengthOfMetafile() [CD]
Line_39 $$ allData += http.getAllTransferedDataLength() --> Line_67 $$ allData += mfr.getLengthOfMetafile() [FD]
Line_4 $$ long allData = 0 --> Line_67 $$ allData += mfr.getLengthOfMetafile() [FD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_68 $$ System.out.println("really downloaded " + allData) [CD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_69 $$ double overhead = ((double) (allData - (mfr.getBlocksize() * missing)) / ((double) (mfr.getBlocksize() * missing))) * 100 [CD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_70 $$ System.out.println("overhead: " + df.format(overhead) + "%") [CD]
Line_69 $$ double overhead = ((double) (allData - (mfr.getBlocksize() * missing)) / ((double) (mfr.getBlocksize() * missing))) * 100 --> Line_70 $$ System.out.println("overhead: " + df.format(overhead) + "%") [FD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_72 $$ System.out.println("\nverifying download...checksum don't match") [CD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_73 $$ System.out.println("Deleting temporary file") [CD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_74 $$ newFile.delete() [CD]
Line_8 $$ File newFile = new File(mfr.getFilename() + ".part") --> Line_74 $$ newFile.delete() [FD]
Line_62 $$ if (sha.SHA1sum().equals(mfr.getSha1())) --> Line_75 $$ System.exit(1) [CD]
Line_57 $$ a += 10 --> Line_55 $$ if ((((double) i / ((double) fileMap.length - 1)) * 100) >= a) [FD]
