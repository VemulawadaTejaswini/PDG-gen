Line_2 $$ protected URLConnection openConnection(URL url) throws IOException --> Line_5 $$ String path = url.getPath() [FD]
Line_5 $$ String path = url.getPath() --> Line_6 $$ if (path.matches("reg:.+")) [FD]
Line_6 $$ if (path.matches("reg:.+")) --> Line_7 $$ String registerName = path.replaceAll("reg:([^/]*)/.*", "$1") [CD]
Line_5 $$ String path = url.getPath() --> Line_7 $$ String registerName = path.replaceAll("reg:([^/]*)/.*", "$1") [FD]
Line_6 $$ if (path.matches("reg:.+")) --> Line_8 $$ servlet = register.get(registerName) [CD]
Line_4 $$ final HttpServlet servlet --> Line_8 $$ servlet = register.get(registerName) [FD]
Line_7 $$ String registerName = path.replaceAll("reg:([^/]*)/.*", "$1") --> Line_8 $$ servlet = register.get(registerName) [FD]
Line_6 $$ if (path.matches("reg:.+")) --> Line_9 $$ if (servlet == null) [CD]
Line_4 $$ final HttpServlet servlet --> Line_9 $$ if (servlet == null) [FD]
Line_8 $$ servlet = register.get(registerName) --> Line_9 $$ if (servlet == null) [FD]
Line_6 $$ if (path.matches("reg:.+")) --> Line_11 $$ String servletClassName = path.replaceAll("([^/]*)/.*", "$1") [CD]
Line_5 $$ String path = url.getPath() --> Line_11 $$ String servletClassName = path.replaceAll("([^/]*)/.*", "$1") [FD]
Line_6 $$ if (path.matches("reg:.+")) --> Line_12 $$ servlet = (HttpServlet) Class.forName(servletClassName).newInstance() [CD]
Line_4 $$ final HttpServlet servlet --> Line_12 $$ servlet = (HttpServlet) Class.forName(servletClassName).newInstance() [FD]
Line_8 $$ servlet = register.get(registerName) --> Line_12 $$ servlet = (HttpServlet) Class.forName(servletClassName).newInstance() [FD]
Line_11 $$ String servletClassName = path.replaceAll("([^/]*)/.*", "$1") --> Line_12 $$ servlet = (HttpServlet) Class.forName(servletClassName).newInstance() [FD]
Line_16 $$ return new HttpURLConnection(url) --> Line_18 $$ serviceIfNeeded() [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_19 $$ return resp.status [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_22 $$ serviceIfNeeded() [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_23 $$ if (resp.status == 500) [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_24 $$ byte[] array = resp.out.toByteArray() [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_25 $$ return new ByteArrayInputStream(array) [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_33 $$ if (resp.status != 500) [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_34 $$ return new ByteArrayInputStream(resp.out.toByteArray()) [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_37 $$ return req.tmp [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_40 $$ req.addHeader(key, value) [CD]
Line_16 $$ return new HttpURLConnection(url) --> Line_40 $$ req.addHeader(key, value) [FD]
Line_14 $$ final MockHttpServletRequest req = new MockHttpServletRequest().setMethod("GET") --> Line_40 $$ req.addHeader(key, value) [FD]
Line_16 $$ return new HttpURLConnection(url) --> Line_45 $$ return false [CD]
Line_52 $$ if (!called) --> Line_53 $$ called = true [CD]
Line_52 $$ if (!called) --> Line_54 $$ req.setMethod(getRequestMethod()) [CD]
Line_14 $$ final MockHttpServletRequest req = new MockHttpServletRequest().setMethod("GET") --> Line_54 $$ req.setMethod(getRequestMethod()) [FD]
Line_52 $$ if (!called) --> Line_55 $$ servlet.service(req, resp) [CD]
Line_4 $$ final HttpServlet servlet --> Line_55 $$ servlet.service(req, resp) [FD]
Line_8 $$ servlet = register.get(registerName) --> Line_55 $$ servlet.service(req, resp) [FD]
Line_12 $$ servlet = (HttpServlet) Class.forName(servletClassName).newInstance() --> Line_55 $$ servlet.service(req, resp) [FD]
Line_14 $$ final MockHttpServletRequest req = new MockHttpServletRequest().setMethod("GET") --> Line_55 $$ servlet.service(req, resp) [FD]
Line_15 $$ final MockHttpServletResponse resp = new MockHttpServletResponse() --> Line_55 $$ servlet.service(req, resp) [FD]
