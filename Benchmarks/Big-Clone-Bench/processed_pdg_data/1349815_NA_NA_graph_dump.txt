Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_3 $$ Entity entity = (Entity) eb [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_4 $$ StringBuffer sb = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_5 $$ String myPackage = getPackageName(eb) [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_5 $$ String myPackage = getPackageName(eb) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_6 $$ sb.append("package " + myPackage + ";\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_6 $$ sb.append("package " + myPackage + ";\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_7 $$ sb.append("\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_7 $$ sb.append("\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_8 $$ DaoValuesGenerator valgen = new DaoValuesGenerator() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_9 $$ String values_class_name = valgen.getClassName(entity) [CD]
Line_8 $$ DaoValuesGenerator valgen = new DaoValuesGenerator() --> Line_9 $$ String values_class_name = valgen.getClassName(entity) [FD]
Line_3 $$ Entity entity = (Entity) eb --> Line_9 $$ String values_class_name = valgen.getClassName(entity) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_10 $$ sb.append("\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_10 $$ sb.append("\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_11 $$ List importList = new Vector() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_12 $$ importList.add("java.io.*;") [CD]
Line_11 $$ List importList = new Vector() --> Line_12 $$ importList.add("java.io.*;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_13 $$ importList.add("java.sql.Date;") [CD]
Line_11 $$ List importList = new Vector() --> Line_13 $$ importList.add("java.sql.Date;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_14 $$ importList.add("com.emeraldjb.runtime.patternXmlObj.*;") [CD]
Line_11 $$ List importList = new Vector() --> Line_14 $$ importList.add("com.emeraldjb.runtime.patternXmlObj.*;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_15 $$ importList.add("javax.xml.parsers.*;") [CD]
Line_11 $$ List importList = new Vector() --> Line_15 $$ importList.add("javax.xml.parsers.*;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_16 $$ importList.add("java.text.ParseException;") [CD]
Line_11 $$ List importList = new Vector() --> Line_16 $$ importList.add("java.text.ParseException;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_17 $$ importList.add("org.xml.sax.*;") [CD]
Line_11 $$ List importList = new Vector() --> Line_17 $$ importList.add("org.xml.sax.*;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_18 $$ importList.add("org.xml.sax.helpers.*;") [CD]
Line_11 $$ List importList = new Vector() --> Line_18 $$ importList.add("org.xml.sax.helpers.*;") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_19 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_19 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [FD]
Line_11 $$ List importList = new Vector() --> Line_19 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [FD]
Line_8 $$ DaoValuesGenerator valgen = new DaoValuesGenerator() --> Line_19 $$ importList.add(valgen.getPackageName(eb) + "." + values_class_name + ";") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_20 $$ Iterator it = importList.iterator() [CD]
Line_11 $$ List importList = new Vector() --> Line_20 $$ Iterator it = importList.iterator() [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_21 $$ while (it.hasNext()) [CD]
Line_20 $$ Iterator it = importList.iterator() --> Line_21 $$ while (it.hasNext()) [FD]
Line_21 $$ while (it.hasNext()) --> Line_22 $$ String importName = (String) it.next() [CD]
Line_20 $$ Iterator it = importList.iterator() --> Line_22 $$ String importName = (String) it.next() [FD]
Line_21 $$ while (it.hasNext()) --> Line_23 $$ sb.append("import " + importName + "\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_23 $$ sb.append("import " + importName + "\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_25 $$ sb.append("\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_25 $$ sb.append("\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_26 $$ String proto_version = entity.getPatternValue(GeneratorConst.PATTERN_STREAM_PROTO_VERSION, "1") [CD]
Line_3 $$ Entity entity = (Entity) eb --> Line_26 $$ String proto_version = entity.getPatternValue(GeneratorConst.PATTERN_STREAM_PROTO_VERSION, "1") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_27 $$ boolean short_version = entity.getPatternBooleanValue(GeneratorConst.PATTERN_STREAM_XML_SHORT, false) [CD]
Line_3 $$ Entity entity = (Entity) eb --> Line_27 $$ boolean short_version = entity.getPatternBooleanValue(GeneratorConst.PATTERN_STREAM_XML_SHORT, false) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_28 $$ StringBuffer preface = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_29 $$ StringBuffer consts = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_30 $$ StringBuffer f_writer = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_31 $$ StringBuffer f_writer_short = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_32 $$ StringBuffer f_reader = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_33 $$ StringBuffer end_elems = new StringBuffer() [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_34 $$ boolean end_elem_needs_catch = false [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_35 $$ consts.append("\n  public static final String EL_CLASS_TAG=\"" + values_class_name + "\";") [CD]
Line_29 $$ StringBuffer consts = new StringBuffer() --> Line_35 $$ consts.append("\n  public static final String EL_CLASS_TAG=\"" + values_class_name + "\";") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_36 $$ preface.append("\n    xos.print(\"<!-- This format is optimised for space, below are the column mappings\");") [CD]
Line_28 $$ StringBuffer preface = new StringBuffer() --> Line_36 $$ preface.append("\n    xos.print(\"<!-- This format is optimised for space, below are the column mappings\");") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_37 $$ boolean has_times = false [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_38 $$ boolean has_strings = false [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_39 $$ it = entity.getMembers().iterator() [CD]
Line_20 $$ Iterator it = importList.iterator() --> Line_39 $$ it = entity.getMembers().iterator() [FD]
Line_3 $$ Entity entity = (Entity) eb --> Line_39 $$ it = entity.getMembers().iterator() [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_40 $$ int col_num = 0 [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_41 $$ while (it.hasNext()) [CD]
Line_20 $$ Iterator it = importList.iterator() --> Line_41 $$ while (it.hasNext()) [FD]
Line_39 $$ it = entity.getMembers().iterator() --> Line_41 $$ while (it.hasNext()) [FD]
Line_41 $$ while (it.hasNext()) --> Line_42 $$ col_num++ [CD]
Line_40 $$ int col_num = 0 --> Line_42 $$ col_num++ [FD]
Line_41 $$ while (it.hasNext()) --> Line_43 $$ Member member = (Member) it.next() [CD]
Line_20 $$ Iterator it = importList.iterator() --> Line_43 $$ Member member = (Member) it.next() [FD]
Line_39 $$ it = entity.getMembers().iterator() --> Line_43 $$ Member member = (Member) it.next() [FD]
Line_41 $$ while (it.hasNext()) --> Line_44 $$ String nm = member.getName() [CD]
Line_43 $$ Member member = (Member) it.next() --> Line_44 $$ String nm = member.getName() [FD]
Line_41 $$ while (it.hasNext()) --> Line_45 $$ preface.append("\n    xos.print(\"c" + col_num + " = " + nm + "\");") [CD]
Line_28 $$ StringBuffer preface = new StringBuffer() --> Line_45 $$ preface.append("\n    xos.print(\"c" + col_num + " = " + nm + "\");") [FD]
Line_41 $$ while (it.hasNext()) --> Line_46 $$ String elem_name = nm [CD]
Line_41 $$ while (it.hasNext()) --> Line_47 $$ String elem_name_short = "c" + col_num [CD]
Line_41 $$ while (it.hasNext()) --> Line_48 $$ String el_name = nm.toUpperCase() [CD]
Line_44 $$ String nm = member.getName() --> Line_48 $$ String el_name = nm.toUpperCase() [FD]
Line_41 $$ while (it.hasNext()) --> Line_49 $$ if (member.getColLen() > 0 || !member.isNullAllowed()) [CD]
Line_43 $$ Member member = (Member) it.next() --> Line_49 $$ if (member.getColLen() > 0 || !member.isNullAllowed()) [FD]
Line_49 $$ if (member.getColLen() > 0 || !member.isNullAllowed()) --> Line_50 $$ end_elem_needs_catch = true [CD]
Line_34 $$ boolean end_elem_needs_catch = false --> Line_50 $$ end_elem_needs_catch = true [FD]
Line_41 $$ while (it.hasNext()) --> Line_52 $$ String element_const = "EL_" + el_name [CD]
Line_41 $$ while (it.hasNext()) --> Line_53 $$ String element_const_short = "EL_" + el_name + "_SHORT" [CD]
Line_41 $$ while (it.hasNext()) --> Line_54 $$ consts.append("\n  public static final String " + element_const + "=\"" + elem_name + "\";" + "\n  public static final String " + element_const_short + "=\"" + elem_name_short + "\";") [CD]
Line_29 $$ StringBuffer consts = new StringBuffer() --> Line_54 $$ consts.append("\n  public static final String " + element_const + "=\"" + elem_name + "\";" + "\n  public static final String " + element_const_short + "=\"" + elem_name_short + "\";") [FD]
Line_41 $$ while (it.hasNext()) --> Line_55 $$ String getter = "obj." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_GET, member) [CD]
Line_43 $$ Member member = (Member) it.next() --> Line_55 $$ String getter = "obj." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_GET, member) [FD]
Line_41 $$ while (it.hasNext()) --> Line_56 $$ String setter = "values_." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member) [CD]
Line_43 $$ Member member = (Member) it.next() --> Line_56 $$ String setter = "values_." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member) [FD]
Line_41 $$ while (it.hasNext()) --> Line_57 $$ String pad = "    " [CD]
Line_41 $$ while (it.hasNext()) --> Line_58 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) [CD]
Line_43 $$ Member member = (Member) it.next() --> Line_58 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) [FD]
Line_41 $$ while (it.hasNext()) --> Line_59 $$ f_writer.append(gen_type.getToXmlCode(pad, element_const, getter + "()")) [CD]
Line_30 $$ StringBuffer f_writer = new StringBuffer() --> Line_59 $$ f_writer.append(gen_type.getToXmlCode(pad, element_const, getter + "()")) [FD]
Line_58 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) --> Line_59 $$ f_writer.append(gen_type.getToXmlCode(pad, element_const, getter + "()")) [FD]
Line_57 $$ String pad = "    " --> Line_59 $$ f_writer.append(gen_type.getToXmlCode(pad, element_const, getter + "()")) [FD]
Line_52 $$ String element_const = "EL_" + el_name --> Line_59 $$ f_writer.append(gen_type.getToXmlCode(pad, element_const, getter + "()")) [FD]
Line_41 $$ while (it.hasNext()) --> Line_60 $$ f_writer_short.append(gen_type.getToXmlCode(pad, element_const_short, getter + "()")) [CD]
Line_31 $$ StringBuffer f_writer_short = new StringBuffer() --> Line_60 $$ f_writer_short.append(gen_type.getToXmlCode(pad, element_const_short, getter + "()")) [FD]
Line_58 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) --> Line_60 $$ f_writer_short.append(gen_type.getToXmlCode(pad, element_const_short, getter + "()")) [FD]
Line_57 $$ String pad = "    " --> Line_60 $$ f_writer_short.append(gen_type.getToXmlCode(pad, element_const_short, getter + "()")) [FD]
Line_53 $$ String element_const_short = "EL_" + el_name + "_SHORT" --> Line_60 $$ f_writer_short.append(gen_type.getToXmlCode(pad, element_const_short, getter + "()")) [FD]
Line_41 $$ while (it.hasNext()) --> Line_61 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const, setter)) [CD]
Line_33 $$ StringBuffer end_elems = new StringBuffer() --> Line_61 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const, setter)) [FD]
Line_58 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) --> Line_61 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const, setter)) [FD]
Line_57 $$ String pad = "    " --> Line_61 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const, setter)) [FD]
Line_52 $$ String element_const = "EL_" + el_name --> Line_61 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const, setter)) [FD]
Line_56 $$ String setter = "values_." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member) --> Line_61 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const, setter)) [FD]
Line_41 $$ while (it.hasNext()) --> Line_62 $$ end_elems.append("\n    //and also the short version") [CD]
Line_33 $$ StringBuffer end_elems = new StringBuffer() --> Line_62 $$ end_elems.append("\n    //and also the short version") [FD]
Line_41 $$ while (it.hasNext()) --> Line_63 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const_short, setter)) [CD]
Line_33 $$ StringBuffer end_elems = new StringBuffer() --> Line_63 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const_short, setter)) [FD]
Line_58 $$ JTypeBase gen_type = EmdFactory.getJTypeFactory().getJavaType(member.getType()) --> Line_63 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const_short, setter)) [FD]
Line_57 $$ String pad = "    " --> Line_63 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const_short, setter)) [FD]
Line_53 $$ String element_const_short = "EL_" + el_name + "_SHORT" --> Line_63 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const_short, setter)) [FD]
Line_56 $$ String setter = "values_." + methodGenerator.getMethodName(DaoGeneratorUtils.METHOD_SET, member) --> Line_63 $$ end_elems.append(gen_type.getFromXmlCode(pad, element_const_short, setter)) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_66 $$ String body_part = f_writer.toString() [CD]
Line_30 $$ StringBuffer f_writer = new StringBuffer() --> Line_66 $$ String body_part = f_writer.toString() [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_67 $$ String body_part_short = preface.toString() + f_writer_short.toString() [CD]
Line_28 $$ StringBuffer preface = new StringBuffer() --> Line_67 $$ String body_part_short = preface.toString() + f_writer_short.toString() [FD]
Line_31 $$ StringBuffer f_writer_short = new StringBuffer() --> Line_67 $$ String body_part_short = preface.toString() + f_writer_short.toString() [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_68 $$ String reader_vars = "" [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_69 $$ String streamer_class_name = getClassName(entity) [CD]
Line_3 $$ Entity entity = (Entity) eb --> Line_69 $$ String streamer_class_name = getClassName(entity) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_70 $$ sb.append("public class " + streamer_class_name + "  extends DefaultHandler implements TSParser\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_70 $$ sb.append("public class " + streamer_class_name + "  extends DefaultHandler implements TSParser\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_71 $$ sb.append(" [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_71 $$ sb.append(" [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_72 $$ sb.append("\n\n") [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_72 $$ sb.append("\n\n") [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_73 $$ sb.append("\n  /**" + "\n   * This is really only here as an example.  It is very rare to write a single" + "\n   * object to a file - far more likely to have a collection or object graph.  " + "\n   * in which case you can write something similar - maybe using the writeXmlShort" + "\n   * version instread." + "\n   */" + "\n  public static void writeToFile(String file_nm, " + values_class_name + " obj) throws IOException" + "\n [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_73 $$ sb.append("\n  /**" + "\n   * This is really only here as an example.  It is very rare to write a single" + "\n   * object to a file - far more likely to have a collection or object graph.  " + "\n   * in which case you can write something similar - maybe using the writeXmlShort" + "\n   * version instread." + "\n   */" + "\n  public static void writeToFile(String file_nm, " + values_class_name + " obj) throws IOException" + "\n [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_74 $$ String xml_bit = addXmlFunctions(streamer_class_name, values_class_name, end_elem_needs_catch, end_elems, f_reader) [CD]
Line_50 $$ end_elem_needs_catch = true --> Line_74 $$ String xml_bit = addXmlFunctions(streamer_class_name, values_class_name, end_elem_needs_catch, end_elems, f_reader) [FD]
Line_34 $$ boolean end_elem_needs_catch = false --> Line_74 $$ String xml_bit = addXmlFunctions(streamer_class_name, values_class_name, end_elem_needs_catch, end_elems, f_reader) [FD]
Line_33 $$ StringBuffer end_elems = new StringBuffer() --> Line_74 $$ String xml_bit = addXmlFunctions(streamer_class_name, values_class_name, end_elem_needs_catch, end_elems, f_reader) [FD]
Line_32 $$ StringBuffer f_reader = new StringBuffer() --> Line_74 $$ String xml_bit = addXmlFunctions(streamer_class_name, values_class_name, end_elem_needs_catch, end_elems, f_reader) [FD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_75 $$ String close = "\n" + "\n} // end of classs" + "\n\n" + "\n//**************" + "\n// End of file" + "\n//**************" [CD]
Line_2 $$ public String getClass(EmeraldjbBean eb) throws EmeraldjbException --> Line_76 $$ return sb.toString() + xml_bit + close [CD]
Line_4 $$ StringBuffer sb = new StringBuffer() --> Line_76 $$ return sb.toString() + xml_bit + close [FD]
