Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_3 $$ Validate.notNull(reader, "CSVReader") [CD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_3 $$ Validate.notNull(reader, "CSVReader") [FD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_4 $$ Validate.notNull(writer, "Writer") [CD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_4 $$ Validate.notNull(writer, "Writer") [FD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_5 $$ Writer bufferedWriter = new BufferedWriter(writer) [CD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_6 $$ File fileForColsDef = createTempFileForCss() [CD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_7 $$ BufferedWriter colsDefWriter = new BufferedWriter(new FileWriter(fileForColsDef)) [CD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_8 $$ File fileForTable = createTempFileForTable() [CD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_9 $$ BufferedWriter tableWriter = new BufferedWriter(new FileWriter(fileForTable)) [CD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_12 $$ String[] nextLine = reader.readNext() [FD]
Line_12 $$ String[] nextLine = reader.readNext() --> Line_13 $$ if (nextLine != null) [FD]
Line_13 $$ if (nextLine != null) --> Line_14 $$ int[] colsCharCount = new int[nextLine.length] [CD]
Line_13 $$ if (nextLine != null) --> Line_15 $$ writeTableRowHeader(tableWriter, nextLine) [CD]
Line_9 $$ BufferedWriter tableWriter = new BufferedWriter(new FileWriter(fileForTable)) --> Line_15 $$ writeTableRowHeader(tableWriter, nextLine) [FD]
Line_12 $$ String[] nextLine = reader.readNext() --> Line_15 $$ writeTableRowHeader(tableWriter, nextLine) [FD]
Line_13 $$ if (nextLine != null) --> Line_16 $$ while ((nextLine = reader.readNext()) != null) [CD]
Line_12 $$ String[] nextLine = reader.readNext() --> Line_16 $$ while ((nextLine = reader.readNext()) != null) [FD]
Line_2 $$ public void convert(CSVReader reader, Writer writer, int nbTotalRows) throws IOException, InterruptedException --> Line_16 $$ while ((nextLine = reader.readNext()) != null) [FD]
Line_16 $$ while ((nextLine = reader.readNext()) != null) --> Line_17 $$ currentRow++ [CD]
Line_11 $$ int currentRow = 0 --> Line_17 $$ currentRow++ [FD]
Line_16 $$ while ((nextLine = reader.readNext()) != null) --> Line_18 $$ if (progress != null) [CD]
Line_18 $$ if (progress != null) --> Line_19 $$ float percent = ((float) currentRow / (float) nbTotalRows) * 100f [CD]
Line_18 $$ if (progress != null) --> Line_20 $$ progress.updateProgress(ConvertionStepEnum.PROCESSING_ROWS, percent) [CD]
Line_19 $$ float percent = ((float) currentRow / (float) nbTotalRows) * 100f --> Line_20 $$ progress.updateProgress(ConvertionStepEnum.PROCESSING_ROWS, percent) [FD]
Line_16 $$ while ((nextLine = reader.readNext()) != null) --> Line_22 $$ writeTableRow(tableWriter, nextLine, colsCharCount) [CD]
Line_16 $$ while ((nextLine = reader.readNext()) != null) --> Line_22 $$ writeTableRow(tableWriter, nextLine, colsCharCount) [FD]
Line_9 $$ BufferedWriter tableWriter = new BufferedWriter(new FileWriter(fileForTable)) --> Line_22 $$ writeTableRow(tableWriter, nextLine, colsCharCount) [FD]
Line_12 $$ String[] nextLine = reader.readNext() --> Line_22 $$ writeTableRow(tableWriter, nextLine, colsCharCount) [FD]
Line_14 $$ int[] colsCharCount = new int[nextLine.length] --> Line_22 $$ writeTableRow(tableWriter, nextLine, colsCharCount) [FD]
Line_13 $$ if (nextLine != null) --> Line_24 $$ writeTableStart(colsDefWriter, colsCharCount) [CD]
Line_7 $$ BufferedWriter colsDefWriter = new BufferedWriter(new FileWriter(fileForColsDef)) --> Line_24 $$ writeTableStart(colsDefWriter, colsCharCount) [FD]
Line_14 $$ int[] colsCharCount = new int[nextLine.length] --> Line_24 $$ writeTableStart(colsDefWriter, colsCharCount) [FD]
Line_13 $$ if (nextLine != null) --> Line_25 $$ writeColsDefinitions(colsDefWriter, colsCharCount) [CD]
Line_7 $$ BufferedWriter colsDefWriter = new BufferedWriter(new FileWriter(fileForColsDef)) --> Line_25 $$ writeColsDefinitions(colsDefWriter, colsCharCount) [FD]
Line_14 $$ int[] colsCharCount = new int[nextLine.length] --> Line_25 $$ writeColsDefinitions(colsDefWriter, colsCharCount) [FD]
Line_5 $$ Writer bufferedWriter = new BufferedWriter(writer) --> Line_27 $$ writeConverterInfos(bufferedWriter) [FD]
Line_9 $$ BufferedWriter tableWriter = new BufferedWriter(new FileWriter(fileForTable)) --> Line_28 $$ writeTableEnd(tableWriter) [FD]
Line_9 $$ BufferedWriter tableWriter = new BufferedWriter(new FileWriter(fileForTable)) --> Line_29 $$ flushAndClose(tableWriter) [FD]
Line_7 $$ BufferedWriter colsDefWriter = new BufferedWriter(new FileWriter(fileForColsDef)) --> Line_30 $$ flushAndClose(colsDefWriter) [FD]
Line_5 $$ Writer bufferedWriter = new BufferedWriter(writer) --> Line_33 $$ mergeFiles(bufferedWriter, colsDefReader, tableReader) [FD]
Line_31 $$ BufferedReader colsDefReader = new BufferedReader(new FileReader(fileForColsDef)) --> Line_33 $$ mergeFiles(bufferedWriter, colsDefReader, tableReader) [FD]
Line_32 $$ BufferedReader tableReader = new BufferedReader(new FileReader(fileForTable)) --> Line_33 $$ mergeFiles(bufferedWriter, colsDefReader, tableReader) [FD]
Line_9 $$ BufferedWriter tableWriter = new BufferedWriter(new FileWriter(fileForTable)) --> Line_35 $$ closeQuietly(tableWriter) [FD]
Line_7 $$ BufferedWriter colsDefWriter = new BufferedWriter(new FileWriter(fileForColsDef)) --> Line_36 $$ closeQuietly(colsDefWriter) [FD]
Line_8 $$ File fileForTable = createTempFileForTable() --> Line_37 $$ fileForTable.delete() [FD]
Line_6 $$ File fileForColsDef = createTempFileForCss() --> Line_38 $$ fileForColsDef.delete() [FD]
