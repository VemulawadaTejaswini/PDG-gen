Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_3 $$ String sessionUrl = getSessionTokenUrl(protocol, domain) [CD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_3 $$ String sessionUrl = getSessionTokenUrl(protocol, domain) [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_4 $$ URL url = new URL(sessionUrl) [CD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_5 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection() [CD]
Line_4 $$ URL url = new URL(sessionUrl) --> Line_5 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_6 $$ String header = formAuthorizationHeader(onetimeUseToken, key, url, "GET") [CD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_6 $$ String header = formAuthorizationHeader(onetimeUseToken, key, url, "GET") [FD]
Line_4 $$ URL url = new URL(sessionUrl) --> Line_6 $$ String header = formAuthorizationHeader(onetimeUseToken, key, url, "GET") [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_7 $$ httpConn.setRequestProperty("Authorization", header) [CD]
Line_5 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection() --> Line_7 $$ httpConn.setRequestProperty("Authorization", header) [FD]
Line_6 $$ String header = formAuthorizationHeader(onetimeUseToken, key, url, "GET") --> Line_7 $$ httpConn.setRequestProperty("Authorization", header) [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_8 $$ if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) [CD]
Line_5 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection() --> Line_8 $$ if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) [FD]
Line_5 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection() --> Line_9 $$ throw new AuthenticationException(httpConn.getResponseCode() + ": " + httpConn.getResponseMessage()) [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_11 $$ String body = IOUtils.toString(httpConn.getInputStream()) [CD]
Line_5 $$ HttpURLConnection httpConn = (HttpURLConnection) url.openConnection() --> Line_11 $$ String body = IOUtils.toString(httpConn.getInputStream()) [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_12 $$ Map parsedTokens = StringUtils.string2Map(body, "\n", "=", true) [CD]
Line_11 $$ String body = IOUtils.toString(httpConn.getInputStream()) --> Line_12 $$ Map parsedTokens = StringUtils.string2Map(body, "\n", "=", true) [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_13 $$ parsedTokens = StringUtils.lowercaseKeys(parsedTokens) [CD]
Line_12 $$ Map parsedTokens = StringUtils.string2Map(body, "\n", "=", true) --> Line_13 $$ parsedTokens = StringUtils.lowercaseKeys(parsedTokens) [FD]
Line_2 $$ public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException --> Line_14 $$ return (String) parsedTokens.get("token") [CD]
Line_12 $$ Map parsedTokens = StringUtils.string2Map(body, "\n", "=", true) --> Line_14 $$ return (String) parsedTokens.get("token") [FD]
Line_13 $$ parsedTokens = StringUtils.lowercaseKeys(parsedTokens) --> Line_14 $$ return (String) parsedTokens.get("token") [FD]
