Line_2 $$ public File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException --> Line_3 $$ int startByte = (int) ((MP3AudioHeader) audioHeader).getMp3StartByte() [CD]
Line_2 $$ public File extractID3v2TagDataIntoFile(File outputFile) throws TagNotFoundException, IOException --> Line_4 $$ if (startByte >= 0) [CD]
Line_3 $$ int startByte = (int) ((MP3AudioHeader) audioHeader).getMp3StartByte() --> Line_4 $$ if (startByte >= 0) [FD]
Line_4 $$ if (startByte >= 0) --> Line_5 $$ FileInputStream fis = new FileInputStream(file) [CD]
Line_4 $$ if (startByte >= 0) --> Line_6 $$ FileChannel fc = fis.getChannel() [CD]
Line_5 $$ FileInputStream fis = new FileInputStream(file) --> Line_6 $$ FileChannel fc = fis.getChannel() [FD]
Line_4 $$ if (startByte >= 0) --> Line_7 $$ ByteBuffer bb = ByteBuffer.allocate(startByte) [CD]
Line_3 $$ int startByte = (int) ((MP3AudioHeader) audioHeader).getMp3StartByte() --> Line_7 $$ ByteBuffer bb = ByteBuffer.allocate(startByte) [FD]
Line_4 $$ if (startByte >= 0) --> Line_8 $$ fc.read(bb) [CD]
Line_6 $$ FileChannel fc = fis.getChannel() --> Line_8 $$ fc.read(bb) [FD]
Line_7 $$ ByteBuffer bb = ByteBuffer.allocate(startByte) --> Line_8 $$ fc.read(bb) [FD]
Line_4 $$ if (startByte >= 0) --> Line_9 $$ FileOutputStream out = new FileOutputStream(outputFile) [CD]
Line_4 $$ if (startByte >= 0) --> Line_10 $$ out.write(bb.array()) [CD]
Line_9 $$ FileOutputStream out = new FileOutputStream(outputFile) --> Line_10 $$ out.write(bb.array()) [FD]
Line_7 $$ ByteBuffer bb = ByteBuffer.allocate(startByte) --> Line_10 $$ out.write(bb.array()) [FD]
Line_4 $$ if (startByte >= 0) --> Line_11 $$ out.close() [CD]
Line_9 $$ FileOutputStream out = new FileOutputStream(outputFile) --> Line_11 $$ out.close() [FD]
Line_4 $$ if (startByte >= 0) --> Line_12 $$ fc.close() [CD]
Line_6 $$ FileChannel fc = fis.getChannel() --> Line_12 $$ fc.close() [FD]
Line_4 $$ if (startByte >= 0) --> Line_13 $$ fis.close() [CD]
Line_5 $$ FileInputStream fis = new FileInputStream(file) --> Line_13 $$ fis.close() [FD]
Line_4 $$ if (startByte >= 0) --> Line_14 $$ return outputFile [CD]
