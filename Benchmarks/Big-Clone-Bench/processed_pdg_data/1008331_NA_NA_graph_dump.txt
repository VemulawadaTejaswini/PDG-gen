Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_3 $$ if (userBaseDir.endsWith(sep)) [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_3 $$ if (userBaseDir.endsWith(sep)) [FD]
Line_3 $$ if (userBaseDir.endsWith(sep)) --> Line_4 $$ userBaseDir = userBaseDir.substring(0, userBaseDir.length() - sep.length()) [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_4 $$ userBaseDir = userBaseDir.substring(0, userBaseDir.length() - sep.length()) [FD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_6 $$ String file1FullPath = new String() [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_7 $$ if (sourcePath.startsWith(sep)) [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_7 $$ if (sourcePath.startsWith(sep)) [FD]
Line_7 $$ if (sourcePath.startsWith(sep)) --> Line_8 $$ file1FullPath = new String(userBaseDir + sourcePath) [CD]
Line_6 $$ String file1FullPath = new String() --> Line_8 $$ file1FullPath = new String(userBaseDir + sourcePath) [FD]
Line_7 $$ if (sourcePath.startsWith(sep)) --> Line_10 $$ file1FullPath = new String(userBaseDir + sep + sourcePath) [CD]
Line_6 $$ String file1FullPath = new String() --> Line_10 $$ file1FullPath = new String(userBaseDir + sep + sourcePath) [FD]
Line_8 $$ file1FullPath = new String(userBaseDir + sourcePath) --> Line_10 $$ file1FullPath = new String(userBaseDir + sep + sourcePath) [FD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_12 $$ String file2FullPath = new String() [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_13 $$ if (destinPath.startsWith(sep)) [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_13 $$ if (destinPath.startsWith(sep)) [FD]
Line_13 $$ if (destinPath.startsWith(sep)) --> Line_14 $$ file2FullPath = new String(userBaseDir + destinPath) [CD]
Line_12 $$ String file2FullPath = new String() --> Line_14 $$ file2FullPath = new String(userBaseDir + destinPath) [FD]
Line_13 $$ if (destinPath.startsWith(sep)) --> Line_16 $$ file2FullPath = new String(userBaseDir + sep + destinPath) [CD]
Line_12 $$ String file2FullPath = new String() --> Line_16 $$ file2FullPath = new String(userBaseDir + sep + destinPath) [FD]
Line_14 $$ file2FullPath = new String(userBaseDir + destinPath) --> Line_16 $$ file2FullPath = new String(userBaseDir + sep + destinPath) [FD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_18 $$ long plussQuotaSize = 0 [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_19 $$ BufferedInputStream in = null [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_20 $$ BufferedOutputStream out = null [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_21 $$ byte dataBuff[] = new byte[bufferSize] [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_22 $$ File fileordir = new File(file1FullPath) [CD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_23 $$ if (fileordir.exists()) [CD]
Line_22 $$ File fileordir = new File(file1FullPath) --> Line_23 $$ if (fileordir.exists()) [FD]
Line_23 $$ if (fileordir.exists()) --> Line_24 $$ if (fileordir.isFile()) [CD]
Line_22 $$ File fileordir = new File(file1FullPath) --> Line_24 $$ if (fileordir.isFile()) [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_25 $$ File file2 = new File(file2FullPath) [CD]
Line_24 $$ if (fileordir.isFile()) --> Line_26 $$ if (file2.exists()) [CD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_26 $$ if (file2.exists()) [FD]
Line_26 $$ if (file2.exists()) --> Line_27 $$ plussQuotaSize -= file2.length() [CD]
Line_18 $$ long plussQuotaSize = 0 --> Line_27 $$ plussQuotaSize -= file2.length() [FD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_27 $$ plussQuotaSize -= file2.length() [FD]
Line_26 $$ if (file2.exists()) --> Line_28 $$ file2.delete() [CD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_28 $$ file2.delete() [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_30 $$ FileUtils.getInstance().createDirectory(file2.getParent()) [CD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_30 $$ FileUtils.getInstance().createDirectory(file2.getParent()) [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_31 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) [CD]
Line_19 $$ BufferedInputStream in = null --> Line_31 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) [CD]
Line_20 $$ BufferedOutputStream out = null --> Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_33 $$ int readLen [CD]
Line_24 $$ if (fileordir.isFile()) --> Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) [CD]
Line_33 $$ int readLen --> Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_19 $$ BufferedInputStream in = null --> Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_31 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) --> Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_35 $$ out.write(dataBuff, 0, readLen) [CD]
Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_35 $$ out.write(dataBuff, 0, readLen) [FD]
Line_20 $$ BufferedOutputStream out = null --> Line_35 $$ out.write(dataBuff, 0, readLen) [FD]
Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_35 $$ out.write(dataBuff, 0, readLen) [FD]
Line_33 $$ int readLen --> Line_35 $$ out.write(dataBuff, 0, readLen) [FD]
Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_36 $$ plussQuotaSize += readLen [CD]
Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_36 $$ plussQuotaSize += readLen [FD]
Line_18 $$ long plussQuotaSize = 0 --> Line_36 $$ plussQuotaSize += readLen [FD]
Line_27 $$ plussQuotaSize -= file2.length() --> Line_36 $$ plussQuotaSize += readLen [FD]
Line_33 $$ int readLen --> Line_36 $$ plussQuotaSize += readLen [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_38 $$ out.flush() [CD]
Line_20 $$ BufferedOutputStream out = null --> Line_38 $$ out.flush() [FD]
Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_38 $$ out.flush() [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_39 $$ in.close() [CD]
Line_19 $$ BufferedInputStream in = null --> Line_39 $$ in.close() [FD]
Line_31 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) --> Line_39 $$ in.close() [FD]
Line_24 $$ if (fileordir.isFile()) --> Line_40 $$ out.close() [CD]
Line_20 $$ BufferedOutputStream out = null --> Line_40 $$ out.close() [FD]
Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_40 $$ out.close() [FD]
Line_23 $$ if (fileordir.exists()) --> Line_42 $$ if (fileordir.isDirectory()) [CD]
Line_22 $$ File fileordir = new File(file1FullPath) --> Line_42 $$ if (fileordir.isDirectory()) [FD]
Line_42 $$ if (fileordir.isDirectory()) --> Line_43 $$ String[] entryList = fileordir.list() [CD]
Line_22 $$ File fileordir = new File(file1FullPath) --> Line_43 $$ String[] entryList = fileordir.list() [FD]
Line_42 $$ if (fileordir.isDirectory()) --> Line_44 $$ if (entryList.length > 0) [CD]
Line_44 $$ if (entryList.length > 0) --> Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) [CD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_46 $$ String entryName = entryList[pos] [CD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_47 $$ String file1FullPathEntry = new String(file1FullPath.concat(entryList[pos])) [CD]
Line_6 $$ String file1FullPath = new String() --> Line_47 $$ String file1FullPathEntry = new String(file1FullPath.concat(entryList[pos])) [FD]
Line_8 $$ file1FullPath = new String(userBaseDir + sourcePath) --> Line_47 $$ String file1FullPathEntry = new String(file1FullPath.concat(entryList[pos])) [FD]
Line_10 $$ file1FullPath = new String(userBaseDir + sep + sourcePath) --> Line_47 $$ String file1FullPathEntry = new String(file1FullPath.concat(entryList[pos])) [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_48 $$ String file2FullPathEntry = new String(file2FullPath.concat(entryList[pos])) [CD]
Line_12 $$ String file2FullPath = new String() --> Line_48 $$ String file2FullPathEntry = new String(file2FullPath.concat(entryList[pos])) [FD]
Line_14 $$ file2FullPath = new String(userBaseDir + destinPath) --> Line_48 $$ String file2FullPathEntry = new String(file2FullPath.concat(entryList[pos])) [FD]
Line_16 $$ file2FullPath = new String(userBaseDir + sep + destinPath) --> Line_48 $$ String file2FullPathEntry = new String(file2FullPath.concat(entryList[pos])) [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_49 $$ File file2 = new File(file2FullPathEntry) [CD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_50 $$ if (file2.exists()) [CD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_50 $$ if (file2.exists()) [FD]
Line_50 $$ if (file2.exists()) --> Line_51 $$ plussQuotaSize -= file2.length() [CD]
Line_36 $$ plussQuotaSize += readLen --> Line_51 $$ plussQuotaSize -= file2.length() [FD]
Line_18 $$ long plussQuotaSize = 0 --> Line_51 $$ plussQuotaSize -= file2.length() [FD]
Line_27 $$ plussQuotaSize -= file2.length() --> Line_51 $$ plussQuotaSize -= file2.length() [FD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_51 $$ plussQuotaSize -= file2.length() [FD]
Line_50 $$ if (file2.exists()) --> Line_52 $$ file2.delete() [CD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_52 $$ file2.delete() [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_54 $$ FileUtils.getInstance().createDirectory(file2.getParent()) [CD]
Line_25 $$ File file2 = new File(file2FullPath) --> Line_54 $$ FileUtils.getInstance().createDirectory(file2.getParent()) [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_55 $$ in = new BufferedInputStream(new FileInputStream(file1FullPathEntry), bufferSize) [CD]
Line_19 $$ BufferedInputStream in = null --> Line_55 $$ in = new BufferedInputStream(new FileInputStream(file1FullPathEntry), bufferSize) [FD]
Line_31 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) --> Line_55 $$ in = new BufferedInputStream(new FileInputStream(file1FullPathEntry), bufferSize) [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_56 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPathEntry), bufferSize) [CD]
Line_20 $$ BufferedOutputStream out = null --> Line_56 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPathEntry), bufferSize) [FD]
Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_56 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPathEntry), bufferSize) [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_57 $$ int readLen [CD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) [CD]
Line_57 $$ int readLen --> Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_33 $$ int readLen --> Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_19 $$ BufferedInputStream in = null --> Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_31 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) --> Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) [FD]
Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_59 $$ out.write(dataBuff, 0, readLen) [CD]
Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_59 $$ out.write(dataBuff, 0, readLen) [FD]
Line_20 $$ BufferedOutputStream out = null --> Line_59 $$ out.write(dataBuff, 0, readLen) [FD]
Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_59 $$ out.write(dataBuff, 0, readLen) [FD]
Line_57 $$ int readLen --> Line_59 $$ out.write(dataBuff, 0, readLen) [FD]
Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_59 $$ out.write(dataBuff, 0, readLen) [FD]
Line_33 $$ int readLen --> Line_59 $$ out.write(dataBuff, 0, readLen) [FD]
Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_60 $$ plussQuotaSize += readLen [CD]
Line_58 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_51 $$ plussQuotaSize -= file2.length() --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_36 $$ plussQuotaSize += readLen --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_18 $$ long plussQuotaSize = 0 --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_27 $$ plussQuotaSize -= file2.length() --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_57 $$ int readLen --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_34 $$ while ((readLen = in.read(dataBuff)) > 0) --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_33 $$ int readLen --> Line_60 $$ plussQuotaSize += readLen [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_62 $$ out.flush() [CD]
Line_20 $$ BufferedOutputStream out = null --> Line_62 $$ out.flush() [FD]
Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_62 $$ out.flush() [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_63 $$ in.close() [CD]
Line_19 $$ BufferedInputStream in = null --> Line_63 $$ in.close() [FD]
Line_31 $$ in = new BufferedInputStream(new FileInputStream(file1FullPath), bufferSize) --> Line_63 $$ in.close() [FD]
Line_45 $$ for (int pos = 0; pos < entryList.length; pos++) --> Line_64 $$ out.close() [CD]
Line_20 $$ BufferedOutputStream out = null --> Line_64 $$ out.close() [FD]
Line_32 $$ out = new BufferedOutputStream(new FileOutputStream(file2FullPath), bufferSize) --> Line_64 $$ out.close() [FD]
Line_2 $$ public long copyFileWithPaths(String userBaseDir, String sourcePath, String destinPath) throws Exception --> Line_71 $$ return plussQuotaSize [CD]
