Line_2 $$ public void doAction() throws MalformedURLException, IOException, Exception --> Line_3 $$ URL url = new URL(CheckNewVersionAction.VERSION_FILE) [CD]
Line_2 $$ public void doAction() throws MalformedURLException, IOException, Exception --> Line_4 $$ InputStream is = url.openStream() [CD]
Line_3 $$ URL url = new URL(CheckNewVersionAction.VERSION_FILE) --> Line_4 $$ InputStream is = url.openStream() [FD]
Line_2 $$ public void doAction() throws MalformedURLException, IOException, Exception --> Line_5 $$ byte[] buffer = Utils.loadBytes(is) [CD]
Line_4 $$ InputStream is = url.openStream() --> Line_5 $$ byte[] buffer = Utils.loadBytes(is) [FD]
Line_2 $$ public void doAction() throws MalformedURLException, IOException, Exception --> Line_6 $$ is.close() [CD]
Line_4 $$ InputStream is = url.openStream() --> Line_6 $$ is.close() [FD]
Line_2 $$ public void doAction() throws MalformedURLException, IOException, Exception --> Line_7 $$ String version = new String(buffer) [CD]
Line_2 $$ public void doAction() throws MalformedURLException, IOException, Exception --> Line_8 $$ if (version != null) [CD]
Line_7 $$ String version = new String(buffer) --> Line_8 $$ if (version != null) [FD]
Line_8 $$ if (version != null) --> Line_9 $$ version = version.substring(0, version.lastIndexOf("\n") == -1 ? version.length() : version.lastIndexOf("\n")) [CD]
Line_7 $$ String version = new String(buffer) --> Line_9 $$ version = version.substring(0, version.lastIndexOf("\n") == -1 ? version.length() : version.lastIndexOf("\n")) [FD]
Line_2 $$ public void doAction() throws MalformedURLException, IOException, Exception --> Line_11 $$ hasNewVersion = !DAOSystem.getSystem().getVersion().equals(version) [CD]
Line_7 $$ String version = new String(buffer) --> Line_11 $$ hasNewVersion = !DAOSystem.getSystem().getVersion().equals(version) [FD]
Line_9 $$ version = version.substring(0, version.lastIndexOf("\n") == -1 ? version.length() : version.lastIndexOf("\n")) --> Line_11 $$ hasNewVersion = !DAOSystem.getSystem().getVersion().equals(version) [FD]
