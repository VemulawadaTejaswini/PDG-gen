Line_2 $$ public static org.osid.repository.AssetIterator search(Repository repository, SearchCriteria lSearchCriteria) throws org.osid.repository.RepositoryException --> Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) [FD]
Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) --> Line_6 $$ URL url = new URL("http", repository.getAddress(), repository.getPort(), SEARCH_STRING + URLEncoder.encode(lSearchCriteria.getKeywords() + WILDCARD, "ISO-8859-1")) [CD]
Line_2 $$ public static org.osid.repository.AssetIterator search(Repository repository, SearchCriteria lSearchCriteria) throws org.osid.repository.RepositoryException --> Line_6 $$ URL url = new URL("http", repository.getAddress(), repository.getPort(), SEARCH_STRING + URLEncoder.encode(lSearchCriteria.getKeywords() + WILDCARD, "ISO-8859-1")) [FD]
Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) --> Line_7 $$ XPathFactory factory = XPathFactory.newInstance() [CD]
Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) --> Line_8 $$ XPath xPath = factory.newXPath() [CD]
Line_7 $$ XPathFactory factory = XPathFactory.newInstance() --> Line_8 $$ XPath xPath = factory.newXPath() [FD]
Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) --> Line_9 $$ xPath.setNamespaceContext(new FedoraNamespaceContext()) [CD]
Line_8 $$ XPath xPath = factory.newXPath() --> Line_9 $$ xPath.setNamespaceContext(new FedoraNamespaceContext()) [FD]
Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) --> Line_10 $$ InputSource inputSource = new InputSource(url.openStream()) [CD]
Line_6 $$ URL url = new URL("http", repository.getAddress(), repository.getPort(), SEARCH_STRING + URLEncoder.encode(lSearchCriteria.getKeywords() + WILDCARD, "ISO-8859-1")) --> Line_10 $$ InputSource inputSource = new InputSource(url.openStream()) [FD]
Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) --> Line_11 $$ fieldNode = (NodeList) xPath.evaluate("/pre:result/pre:resultList/pre:objectFields", inputSource, XPathConstants.NODESET) [CD]
Line_4 $$ NodeList fieldNode = null --> Line_11 $$ fieldNode = (NodeList) xPath.evaluate("/pre:result/pre:resultList/pre:objectFields", inputSource, XPathConstants.NODESET) [FD]
Line_8 $$ XPath xPath = factory.newXPath() --> Line_11 $$ fieldNode = (NodeList) xPath.evaluate("/pre:result/pre:resultList/pre:objectFields", inputSource, XPathConstants.NODESET) [FD]
Line_10 $$ InputSource inputSource = new InputSource(url.openStream()) --> Line_11 $$ fieldNode = (NodeList) xPath.evaluate("/pre:result/pre:resultList/pre:objectFields", inputSource, XPathConstants.NODESET) [FD]
Line_5 $$ if (lSearchCriteria.getSearchOperation() == SearchCriteria.FIND_OBJECTS) --> Line_12 $$ if (fieldNode.getLength() > 0) [CD]
Line_4 $$ NodeList fieldNode = null --> Line_12 $$ if (fieldNode.getLength() > 0) [FD]
Line_11 $$ fieldNode = (NodeList) xPath.evaluate("/pre:result/pre:resultList/pre:objectFields", inputSource, XPathConstants.NODESET) --> Line_12 $$ if (fieldNode.getLength() > 0) [FD]
Line_12 $$ if (fieldNode.getLength() > 0) --> Line_13 $$ inputSource = new InputSource(url.openStream()) [CD]
Line_10 $$ InputSource inputSource = new InputSource(url.openStream()) --> Line_13 $$ inputSource = new InputSource(url.openStream()) [FD]
Line_6 $$ URL url = new URL("http", repository.getAddress(), repository.getPort(), SEARCH_STRING + URLEncoder.encode(lSearchCriteria.getKeywords() + WILDCARD, "ISO-8859-1")) --> Line_13 $$ inputSource = new InputSource(url.openStream()) [FD]
Line_12 $$ if (fieldNode.getLength() > 0) --> Line_14 $$ XPathExpression xSession = xPath.compile("//pre:token/text()") [CD]
Line_8 $$ XPath xPath = factory.newXPath() --> Line_14 $$ XPathExpression xSession = xPath.compile("//pre:token/text()") [FD]
Line_12 $$ if (fieldNode.getLength() > 0) --> Line_15 $$ String token = xSession.evaluate(inputSource) [CD]
Line_14 $$ XPathExpression xSession = xPath.compile("//pre:token/text()") --> Line_15 $$ String token = xSession.evaluate(inputSource) [FD]
Line_10 $$ InputSource inputSource = new InputSource(url.openStream()) --> Line_15 $$ String token = xSession.evaluate(inputSource) [FD]
Line_13 $$ inputSource = new InputSource(url.openStream()) --> Line_15 $$ String token = xSession.evaluate(inputSource) [FD]
Line_12 $$ if (fieldNode.getLength() > 0) --> Line_16 $$ lSearchCriteria.setToken(token) [CD]
Line_2 $$ public static org.osid.repository.AssetIterator search(Repository repository, SearchCriteria lSearchCriteria) throws org.osid.repository.RepositoryException --> Line_16 $$ lSearchCriteria.setToken(token) [FD]
Line_15 $$ String token = xSession.evaluate(inputSource) --> Line_16 $$ lSearchCriteria.setToken(token) [FD]
Line_2 $$ public static org.osid.repository.AssetIterator search(Repository repository, SearchCriteria lSearchCriteria) throws org.osid.repository.RepositoryException --> Line_19 $$ return getAssetIterator(repository, fieldNode) [FD]
Line_4 $$ NodeList fieldNode = null --> Line_19 $$ return getAssetIterator(repository, fieldNode) [FD]
Line_11 $$ fieldNode = (NodeList) xPath.evaluate("/pre:result/pre:resultList/pre:objectFields", inputSource, XPathConstants.NODESET) --> Line_19 $$ return getAssetIterator(repository, fieldNode) [FD]
