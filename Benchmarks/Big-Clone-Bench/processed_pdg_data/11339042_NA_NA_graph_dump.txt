Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_3 $$ PrintWriter out = null [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_4 $$ ServletOutputStream outstream = null [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_6 $$ String action = req.getParameter("nmrshiftdbaction") [FD]
Line_8 $$ TurbineConfig tc = new TurbineConfig(relativepath + "..", relativepath + getServletConfig().getInitParameter("properties")) --> Line_9 $$ tc.init() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_13 $$ String format = req.getParameter("format") [FD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_14 $$ if (action.equals("test")) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_16 $$ res.setContentType("text/plain") [FD]
Line_3 $$ PrintWriter out = null --> Line_17 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_17 $$ out = res.getWriter() [FD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_19 $$ spectrumId = ((Record) l.get(0)).getValue(1).asInt() [FD]
Line_10 $$ int spectrumId = -1 --> Line_19 $$ spectrumId = ((Record) l.get(0)).getValue(1).asInt() [FD]
Line_3 $$ PrintWriter out = null --> Line_20 $$ out.write("success") [FD]
Line_17 $$ out = res.getWriter() --> Line_20 $$ out.write("success") [FD]
Line_3 $$ PrintWriter out = null --> Line_22 $$ out.write("failure") [FD]
Line_17 $$ out = res.getWriter() --> Line_22 $$ out.write("failure") [FD]
Line_14 $$ if (action.equals("test")) --> Line_24 $$ if (action.equals("rss")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_24 $$ if (action.equals("rss")) [FD]
Line_24 $$ if (action.equals("rss")) --> Line_25 $$ int numbertoexport = 10 [CD]
Line_24 $$ if (action.equals("rss")) --> Line_26 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_26 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_26 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_26 $$ out = res.getWriter() [FD]
Line_24 $$ if (action.equals("rss")) --> Line_27 $$ if (req.getParameter("numbertoexport") != null) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_27 $$ if (req.getParameter("numbertoexport") != null) [FD]
Line_25 $$ int numbertoexport = 10 --> Line_29 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_29 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) [FD]
Line_3 $$ PrintWriter out = null --> Line_32 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_17 $$ out = res.getWriter() --> Line_32 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_26 $$ out = res.getWriter() --> Line_32 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_24 $$ if (action.equals("rss")) --> Line_35 $$ res.setContentType("text/xml") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_35 $$ res.setContentType("text/xml") [FD]
Line_24 $$ if (action.equals("rss")) --> Line_36 $$ RssWriter rssWriter = new RssWriter() [CD]
Line_24 $$ if (action.equals("rss")) --> Line_37 $$ rssWriter.setWriter(res.getWriter()) [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_37 $$ rssWriter.setWriter(res.getWriter()) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_37 $$ rssWriter.setWriter(res.getWriter()) [FD]
Line_24 $$ if (action.equals("rss")) --> Line_38 $$ AtomContainerSet soac = new AtomContainerSet() [CD]
Line_24 $$ if (action.equals("rss")) --> Line_39 $$ String query = "select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\"true\" order by MOLECULE.DATE desc;" [CD]
Line_24 $$ if (action.equals("rss")) --> Line_40 $$ List l = NmrshiftdbUserPeer.executeQuery(query) [CD]
Line_39 $$ String query = "select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\"true\" order by MOLECULE.DATE desc;" --> Line_40 $$ List l = NmrshiftdbUserPeer.executeQuery(query) [FD]
Line_24 $$ if (action.equals("rss")) --> Line_41 $$ for (int i = 0; i < numbertoexport; i++) [CD]
Line_25 $$ int numbertoexport = 10 --> Line_41 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_29 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) --> Line_41 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_42 $$ if (i == l.size()) [CD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_42 $$ if (i == l.size()) [FD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_42 $$ if (i == l.size()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [CD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) [CD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_45 $$ soac.addAtomContainer(cdkmol) [CD]
Line_38 $$ AtomContainerSet soac = new AtomContainerSet() --> Line_45 $$ soac.addAtomContainer(cdkmol) [FD]
Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) --> Line_45 $$ soac.addAtomContainer(cdkmol) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_46 $$ rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req)) [CD]
Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) --> Line_46 $$ rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req)) [FD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_46 $$ rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req)) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_46 $$ rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req)) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_46 $$ rssWriter.getLinkmap().put(cdkmol, mol.getEasylink(req)) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_47 $$ rssWriter.getDatemap().put(cdkmol, mol.getDate()) [CD]
Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) --> Line_47 $$ rssWriter.getDatemap().put(cdkmol, mol.getDate()) [FD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_47 $$ rssWriter.getDatemap().put(cdkmol, mol.getDate()) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_47 $$ rssWriter.getDatemap().put(cdkmol, mol.getDate()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_48 $$ rssWriter.getTitlemap().put(cdkmol, mol.getChemicalNamesAsOneStringWithFallback()) [CD]
Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) --> Line_48 $$ rssWriter.getTitlemap().put(cdkmol, mol.getChemicalNamesAsOneStringWithFallback()) [FD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_48 $$ rssWriter.getTitlemap().put(cdkmol, mol.getChemicalNamesAsOneStringWithFallback()) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_48 $$ rssWriter.getTitlemap().put(cdkmol, mol.getChemicalNamesAsOneStringWithFallback()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_49 $$ rssWriter.getCreatormap().put(cdkmol, mol.getNmrshiftdbUser().getUserName()) [CD]
Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) --> Line_49 $$ rssWriter.getCreatormap().put(cdkmol, mol.getNmrshiftdbUser().getUserName()) [FD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_49 $$ rssWriter.getCreatormap().put(cdkmol, mol.getNmrshiftdbUser().getUserName()) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_49 $$ rssWriter.getCreatormap().put(cdkmol, mol.getNmrshiftdbUser().getUserName()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_50 $$ rssWriter.setCreator(GeneralUtils.getAdminEmail(getServletConfig())) [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_50 $$ rssWriter.setCreator(GeneralUtils.getAdminEmail(getServletConfig())) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_51 $$ Vector v = mol.getDBCanonicalNames() [CD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_51 $$ Vector v = mol.getDBCanonicalNames() [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_52 $$ for (int k = 0; k < v.size(); k++) [CD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_52 $$ for (int k = 0; k < v.size(); k++) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_53 $$ DBCanonicalName canonName = (DBCanonicalName) v.get(k) [CD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_53 $$ DBCanonicalName canonName = (DBCanonicalName) v.get(k) [FD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_53 $$ DBCanonicalName canonName = (DBCanonicalName) v.get(k) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_54 $$ if (canonName.getDBCanonicalNameType().getCanonicalNameType() == "INChI") [CD]
Line_53 $$ DBCanonicalName canonName = (DBCanonicalName) v.get(k) --> Line_54 $$ if (canonName.getDBCanonicalNameType().getCanonicalNameType() == "INChI") [FD]
Line_54 $$ if (canonName.getDBCanonicalNameType().getCanonicalNameType() == "INChI") --> Line_55 $$ rssWriter.getInchimap().put(cdkmol, canonName.getName()) [CD]
Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) --> Line_55 $$ rssWriter.getInchimap().put(cdkmol, canonName.getName()) [FD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_55 $$ rssWriter.getInchimap().put(cdkmol, canonName.getName()) [FD]
Line_53 $$ DBCanonicalName canonName = (DBCanonicalName) v.get(k) --> Line_55 $$ rssWriter.getInchimap().put(cdkmol, canonName.getName()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_59 $$ rssWriter.setTitle("NMRShiftDB") [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_59 $$ rssWriter.setTitle("NMRShiftDB") [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_60 $$ rssWriter.setLink("http://www.nmrshiftdb.org") [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_60 $$ rssWriter.setLink("http://www.nmrshiftdb.org") [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_61 $$ rssWriter.setDescription("NMRShiftDB is an open-source, open-access, open-submission, open-content web database for chemical structures and their nuclear magnetic resonance data") [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_61 $$ rssWriter.setDescription("NMRShiftDB is an open-source, open-access, open-submission, open-content web database for chemical structures and their nuclear magnetic resonance data") [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_62 $$ rssWriter.setPublisher("NMRShiftDB.org") [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_62 $$ rssWriter.setPublisher("NMRShiftDB.org") [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_63 $$ rssWriter.setImagelink("http://www.nmrshiftdb.org/images/nmrshift-logo.gif") [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_63 $$ rssWriter.setImagelink("http://www.nmrshiftdb.org/images/nmrshift-logo.gif") [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_64 $$ rssWriter.setAbout("http://www.nmrshiftdb.org/NmrshiftdbServlet?nmrshiftdbaction=rss") [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_64 $$ rssWriter.setAbout("http://www.nmrshiftdb.org/NmrshiftdbServlet?nmrshiftdbaction=rss") [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_66 $$ Vector spectra = mol.selectSpectra(null) [CD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_66 $$ Vector spectra = mol.selectSpectra(null) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_67 $$ for (int k = 0; k < spectra.size(); k++) [CD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_67 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_68 $$ Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect() [CD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_68 $$ Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect() [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_68 $$ Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect() [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_69 $$ Element el2 = el.getChildElements().get(0) [CD]
Line_68 $$ Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect() --> Line_69 $$ Element el2 = el.getChildElements().get(0) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_70 $$ el.removeChild(el2) [CD]
Line_68 $$ Element el = ((DBSpectrum) spectra.get(k)).getCmlSpect() --> Line_70 $$ el.removeChild(el2) [FD]
Line_69 $$ Element el2 = el.getChildElements().get(0) --> Line_70 $$ el.removeChild(el2) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_71 $$ coll.add(el2) [CD]
Line_69 $$ Element el2 = el.getChildElements().get(0) --> Line_71 $$ coll.add(el2) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_73 $$ rssWriter.getMultiMap().put(cdkmol, coll) [CD]
Line_44 $$ IMolecule cdkmol = mol.getAsCDKMoleculeAsEntered(1) --> Line_73 $$ rssWriter.getMultiMap().put(cdkmol, coll) [FD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_73 $$ rssWriter.getMultiMap().put(cdkmol, coll) [FD]
Line_24 $$ if (action.equals("rss")) --> Line_75 $$ rssWriter.write(soac) [CD]
Line_36 $$ RssWriter rssWriter = new RssWriter() --> Line_75 $$ rssWriter.write(soac) [FD]
Line_38 $$ AtomContainerSet soac = new AtomContainerSet() --> Line_75 $$ rssWriter.write(soac) [FD]
Line_24 $$ if (action.equals("rss")) --> Line_76 $$ if (action.equals("getattachment")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_76 $$ if (action.equals("getattachment")) [FD]
Line_76 $$ if (action.equals("getattachment")) --> Line_77 $$ res.setContentType("application/zip") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_77 $$ res.setContentType("application/zip") [FD]
Line_76 $$ if (action.equals("getattachment")) --> Line_78 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_78 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_78 $$ outstream = res.getOutputStream() [FD]
Line_76 $$ if (action.equals("getattachment")) --> Line_79 $$ DBSample sample = DBSamplePeer.retrieveByPK(new NumberKey(req.getParameter("sampleid"))) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_79 $$ DBSample sample = DBSamplePeer.retrieveByPK(new NumberKey(req.getParameter("sampleid"))) [FD]
Line_76 $$ if (action.equals("getattachment")) --> Line_80 $$ outstream.write(sample.getAttachment()) [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_80 $$ outstream.write(sample.getAttachment()) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_80 $$ outstream.write(sample.getAttachment()) [FD]
Line_79 $$ DBSample sample = DBSamplePeer.retrieveByPK(new NumberKey(req.getParameter("sampleid"))) --> Line_80 $$ outstream.write(sample.getAttachment()) [FD]
Line_76 $$ if (action.equals("getattachment")) --> Line_81 $$ if (action.equals("createreport")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_81 $$ if (action.equals("createreport")) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_82 $$ res.setContentType("application/pdf") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_82 $$ res.setContentType("application/pdf") [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_83 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_83 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_83 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_83 $$ outstream = res.getOutputStream() [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_84 $$ boolean yearly = req.getParameter("style").equals("yearly") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_84 $$ boolean yearly = req.getParameter("style").equals("yearly") [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_85 $$ int yearstart = Integer.parseInt(req.getParameter("yearstart")) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_85 $$ int yearstart = Integer.parseInt(req.getParameter("yearstart")) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_86 $$ int yearend = Integer.parseInt(req.getParameter("yearend")) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_86 $$ int yearend = Integer.parseInt(req.getParameter("yearend")) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_87 $$ int monthstart = 0 [CD]
Line_81 $$ if (action.equals("createreport")) --> Line_88 $$ int monthend = 0 [CD]
Line_81 $$ if (action.equals("createreport")) --> Line_89 $$ if (!yearly) [CD]
Line_84 $$ boolean yearly = req.getParameter("style").equals("yearly") --> Line_89 $$ if (!yearly) [FD]
Line_89 $$ if (!yearly) --> Line_90 $$ monthstart = Integer.parseInt(req.getParameter("monthstart")) [CD]
Line_87 $$ int monthstart = 0 --> Line_90 $$ monthstart = Integer.parseInt(req.getParameter("monthstart")) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_90 $$ monthstart = Integer.parseInt(req.getParameter("monthstart")) [FD]
Line_89 $$ if (!yearly) --> Line_91 $$ monthend = Integer.parseInt(req.getParameter("monthend")) [CD]
Line_88 $$ int monthend = 0 --> Line_91 $$ monthend = Integer.parseInt(req.getParameter("monthend")) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_91 $$ monthend = Integer.parseInt(req.getParameter("monthend")) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_93 $$ int type = Integer.parseInt(req.getParameter("type")) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_93 $$ int type = Integer.parseInt(req.getParameter("type")) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_94 $$ JasperReport jasperReport = (JasperReport) JRLoader.loadObject(relativepath + "/reports/" + (yearly ? "yearly" : "monthly") + "_report_" + type + ".jasper") [CD]
Line_81 $$ if (action.equals("createreport")) --> Line_95 $$ Map parameters = new HashMap() [CD]
Line_81 $$ if (action.equals("createreport")) --> Line_96 $$ parameters.put("HEADER", "Report for " + monthstart + "/" + yearstart + " - " + monthend + "/" + yearend) [CD]
Line_95 $$ Map parameters = new HashMap() --> Line_96 $$ parameters.put("HEADER", "Report for " + monthstart + "/" + yearstart + " - " + monthend + "/" + yearend) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_97 $$ DBConnection dbconn = TurbineDB.getConnection() [CD]
Line_81 $$ if (action.equals("createreport")) --> Line_98 $$ Connection conn = dbconn.getConnection() [CD]
Line_97 $$ DBConnection dbconn = TurbineDB.getConnection() --> Line_98 $$ Connection conn = dbconn.getConnection() [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_99 $$ Statement stmt = conn.createStatement() [CD]
Line_98 $$ Connection conn = dbconn.getConnection() --> Line_99 $$ Statement stmt = conn.createStatement() [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_100 $$ ResultSet rs = null [CD]
Line_81 $$ if (action.equals("createreport")) --> Line_101 $$ if (type == 1) [CD]
Line_93 $$ int type = Integer.parseInt(req.getParameter("type")) --> Line_101 $$ if (type == 1) [FD]
Line_101 $$ if (type == 1) --> Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") [CD]
Line_100 $$ ResultSet rs = null --> Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") [FD]
Line_99 $$ Statement stmt = conn.createStatement() --> Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") [FD]
Line_101 $$ if (type == 1) --> Line_103 $$ if (type == 2) [CD]
Line_93 $$ int type = Integer.parseInt(req.getParameter("type")) --> Line_103 $$ if (type == 2) [FD]
Line_103 $$ if (type == 2) --> Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") [CD]
Line_100 $$ ResultSet rs = null --> Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") [FD]
Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") --> Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") [FD]
Line_99 $$ Statement stmt = conn.createStatement() --> Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_106 $$ JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JRResultSetDataSource(rs)) [CD]
Line_94 $$ JasperReport jasperReport = (JasperReport) JRLoader.loadObject(relativepath + "/reports/" + (yearly ? "yearly" : "monthly") + "_report_" + type + ".jasper") --> Line_106 $$ JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JRResultSetDataSource(rs)) [FD]
Line_95 $$ Map parameters = new HashMap() --> Line_106 $$ JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JRResultSetDataSource(rs)) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_107 $$ JasperExportManager.exportReportToPdfStream(jasperPrint, outstream) [CD]
Line_106 $$ JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, parameters, new JRResultSetDataSource(rs)) --> Line_107 $$ JasperExportManager.exportReportToPdfStream(jasperPrint, outstream) [FD]
Line_4 $$ ServletOutputStream outstream = null --> Line_107 $$ JasperExportManager.exportReportToPdfStream(jasperPrint, outstream) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_107 $$ JasperExportManager.exportReportToPdfStream(jasperPrint, outstream) [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_107 $$ JasperExportManager.exportReportToPdfStream(jasperPrint, outstream) [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_108 $$ dbconn.close() [CD]
Line_97 $$ DBConnection dbconn = TurbineDB.getConnection() --> Line_108 $$ dbconn.close() [FD]
Line_81 $$ if (action.equals("createreport")) --> Line_109 $$ if (action.equals("exportcmlbyinchi")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_109 $$ if (action.equals("exportcmlbyinchi")) [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_110 $$ res.setContentType("text/xml") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_110 $$ res.setContentType("text/xml") [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_111 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_111 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_111 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_111 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_111 $$ out = res.getWriter() [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_112 $$ String inchi = req.getParameter("inchi") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_112 $$ String inchi = req.getParameter("inchi") [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_113 $$ String spectrumtype = req.getParameter("spectrumtype") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_113 $$ String spectrumtype = req.getParameter("spectrumtype") [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_114 $$ Criteria crit = new Criteria() [CD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_115 $$ crit.add(DBCanonicalNamePeer.NAME, inchi) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_115 $$ crit.add(DBCanonicalNamePeer.NAME, inchi) [FD]
Line_112 $$ String inchi = req.getParameter("inchi") --> Line_115 $$ crit.add(DBCanonicalNamePeer.NAME, inchi) [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_116 $$ crit.addJoin(DBCanonicalNamePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_116 $$ crit.addJoin(DBCanonicalNamePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID) [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_117 $$ crit.addJoin(DBSpectrumPeer.SPECTRUM_TYPE_ID, DBSpectrumTypePeer.SPECTRUM_TYPE_ID) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_117 $$ crit.addJoin(DBSpectrumPeer.SPECTRUM_TYPE_ID, DBSpectrumTypePeer.SPECTRUM_TYPE_ID) [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_118 $$ crit.add(DBSpectrumTypePeer.NAME, spectrumtype) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_118 $$ crit.add(DBSpectrumTypePeer.NAME, spectrumtype) [FD]
Line_113 $$ String spectrumtype = req.getParameter("spectrumtype") --> Line_118 $$ crit.add(DBSpectrumTypePeer.NAME, spectrumtype) [FD]
Line_114 $$ Criteria crit = new Criteria() --> Line_120 $$ GeneralUtils.logToSql(crit.toString(), null) [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_124 $$ if (spectra.size() == 0) [CD]
Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) --> Line_124 $$ if (spectra.size() == 0) [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_125 $$ out.write("No such molecule or spectrum") [CD]
Line_3 $$ PrintWriter out = null --> Line_125 $$ out.write("No such molecule or spectrum") [FD]
Line_17 $$ out = res.getWriter() --> Line_125 $$ out.write("No such molecule or spectrum") [FD]
Line_26 $$ out = res.getWriter() --> Line_125 $$ out.write("No such molecule or spectrum") [FD]
Line_111 $$ out = res.getWriter() --> Line_125 $$ out.write("No such molecule or spectrum") [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_127 $$ Element cmlElement = new Element("cml") [CD]
Line_124 $$ if (spectra.size() == 0) --> Line_128 $$ cmlElement.addAttribute(new Attribute("convention", "nmrshiftdb-convention")) [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_128 $$ cmlElement.addAttribute(new Attribute("convention", "nmrshiftdb-convention")) [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_129 $$ cmlElement.setNamespaceURI("http://www.xml-cml.org/schema") [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_129 $$ cmlElement.setNamespaceURI("http://www.xml-cml.org/schema") [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_130 $$ Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1) [CD]
Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) --> Line_130 $$ Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1) [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_131 $$ nu.xom.Node cmldoc = parent.getChild(0) [CD]
Line_130 $$ Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1) --> Line_131 $$ nu.xom.Node cmldoc = parent.getChild(0) [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_132 $$ ((Element) cmldoc).setNamespaceURI("http://www.xml-cml.org/schema") [CD]
Line_124 $$ if (spectra.size() == 0) --> Line_133 $$ parent.removeChildren() [CD]
Line_130 $$ Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1) --> Line_133 $$ parent.removeChildren() [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_134 $$ cmlElement.appendChild(cmldoc) [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_134 $$ cmlElement.appendChild(cmldoc) [FD]
Line_131 $$ nu.xom.Node cmldoc = parent.getChild(0) --> Line_134 $$ cmlElement.appendChild(cmldoc) [FD]
Line_124 $$ if (spectra.size() == 0) --> Line_135 $$ for (int k = 0; k < spectra.size(); k++) [CD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_135 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_135 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) --> Line_135 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() [CD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() [FD]
Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) --> Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_137 $$ Node spectrumel = parentspec.getChild(0) [CD]
Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() --> Line_137 $$ Node spectrumel = parentspec.getChild(0) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_138 $$ parentspec.removeChildren() [CD]
Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() --> Line_138 $$ parentspec.removeChildren() [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_139 $$ cmlElement.appendChild(spectrumel) [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_139 $$ cmlElement.appendChild(spectrumel) [FD]
Line_137 $$ Node spectrumel = parentspec.getChild(0) --> Line_139 $$ cmlElement.appendChild(spectrumel) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_140 $$ ((Element) spectrumel).setNamespaceURI("http://www.xml-cml.org/schema") [CD]
Line_124 $$ if (spectra.size() == 0) --> Line_142 $$ out.write(cmlElement.toXML()) [CD]
Line_3 $$ PrintWriter out = null --> Line_142 $$ out.write(cmlElement.toXML()) [FD]
Line_17 $$ out = res.getWriter() --> Line_142 $$ out.write(cmlElement.toXML()) [FD]
Line_26 $$ out = res.getWriter() --> Line_142 $$ out.write(cmlElement.toXML()) [FD]
Line_111 $$ out = res.getWriter() --> Line_142 $$ out.write(cmlElement.toXML()) [FD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_142 $$ out.write(cmlElement.toXML()) [FD]
Line_109 $$ if (action.equals("exportcmlbyinchi")) --> Line_144 $$ if (action.equals("namelist")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_144 $$ if (action.equals("namelist")) [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_145 $$ res.setContentType("application/zip") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_145 $$ res.setContentType("application/zip") [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_146 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_146 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_146 $$ outstream = res.getOutputStream() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_146 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_146 $$ outstream = res.getOutputStream() [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_147 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() [CD]
Line_144 $$ if (action.equals("namelist")) --> Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) [CD]
Line_144 $$ if (action.equals("namelist")) --> Line_150 $$ crit.addJoin(DBMoleculePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_150 $$ crit.addJoin(DBMoleculePeer.MOLECULE_ID, DBSpectrumPeer.MOLECULE_ID) [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_151 $$ crit.add(DBSpectrumPeer.REVIEW_FLAG, "true") [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_151 $$ crit.add(DBSpectrumPeer.REVIEW_FLAG, "true") [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_153 $$ for (int i = 0; i < v.size(); i++) [CD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_153 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_153 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) --> Line_153 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_154 $$ if (i % 500 == 0) [CD]
Line_154 $$ if (i % 500 == 0) --> Line_155 $$ if (i != 0) [CD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_155 $$ if (i != 0) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_155 $$ if (i != 0) [FD]
Line_155 $$ if (i != 0) --> Line_156 $$ zipout.write(new String("<p>The list is continued <a href=\"nmrshiftdb.names." + i + ".html\">here</a></p></body></html>").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_156 $$ zipout.write(new String("<p>The list is continued <a href=\"nmrshiftdb.names." + i + ".html\">here</a></p></body></html>").getBytes()) [FD]
Line_155 $$ if (i != 0) --> Line_157 $$ zipout.closeEntry() [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_157 $$ zipout.closeEntry() [FD]
Line_154 $$ if (i % 500 == 0) --> Line_159 $$ zipout.putNextEntry(new ZipEntry("nmrshiftdb.names." + i + ".html")) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_159 $$ zipout.putNextEntry(new ZipEntry("nmrshiftdb.names." + i + ".html")) [FD]
Line_154 $$ if (i % 500 == 0) --> Line_160 $$ zipout.write(new String("<html><body><h1>This is a list of strcutures in <a href=\"http://www.nmrshiftdb.org\">NMRShiftDB</a>, starting at " + i + ", Its main purpose is to be found by search engines</h1>").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_160 $$ zipout.write(new String("<html><body><h1>This is a list of strcutures in <a href=\"http://www.nmrshiftdb.org\">NMRShiftDB</a>, starting at " + i + ", Its main purpose is to be found by search engines</h1>").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) [CD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) [FD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) [FD]
Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) --> Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_163 $$ zipout.write(new String("<p><a href=\"" + mol.getEasylink(req) + "\">").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_163 $$ zipout.write(new String("<p><a href=\"" + mol.getEasylink(req) + "\">").getBytes()) [FD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_163 $$ zipout.write(new String("<p><a href=\"" + mol.getEasylink(req) + "\">").getBytes()) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_163 $$ zipout.write(new String("<p><a href=\"" + mol.getEasylink(req) + "\">").getBytes()) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_163 $$ zipout.write(new String("<p><a href=\"" + mol.getEasylink(req) + "\">").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_164 $$ Vector cannames = mol.getDBCanonicalNames() [CD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_164 $$ Vector cannames = mol.getDBCanonicalNames() [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_164 $$ Vector cannames = mol.getDBCanonicalNames() [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_165 $$ for (int k = 0; k < cannames.size(); k++) [CD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_165 $$ for (int k = 0; k < cannames.size(); k++) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_165 $$ for (int k = 0; k < cannames.size(); k++) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_165 $$ for (int k = 0; k < cannames.size(); k++) [FD]
Line_164 $$ Vector cannames = mol.getDBCanonicalNames() --> Line_165 $$ for (int k = 0; k < cannames.size(); k++) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_166 $$ zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + " ").getBytes()) [CD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_166 $$ zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + " ").getBytes()) [FD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_166 $$ zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + " ").getBytes()) [FD]
Line_164 $$ Vector cannames = mol.getDBCanonicalNames() --> Line_166 $$ zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + " ").getBytes()) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_166 $$ zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + " ").getBytes()) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_166 $$ zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + " ").getBytes()) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_166 $$ zipout.write(new String(((DBCanonicalName) cannames.get(k)).getName() + " ").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_168 $$ Vector chemnames = mol.getDBChemicalNames() [CD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_168 $$ Vector chemnames = mol.getDBChemicalNames() [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_168 $$ Vector chemnames = mol.getDBChemicalNames() [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_169 $$ for (int k = 0; k < chemnames.size(); k++) [CD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_169 $$ for (int k = 0; k < chemnames.size(); k++) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_169 $$ for (int k = 0; k < chemnames.size(); k++) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_169 $$ for (int k = 0; k < chemnames.size(); k++) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_169 $$ for (int k = 0; k < chemnames.size(); k++) [FD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_170 $$ zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + " ").getBytes()) [CD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_170 $$ zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + " ").getBytes()) [FD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_170 $$ zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + " ").getBytes()) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_170 $$ zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + " ").getBytes()) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_170 $$ zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + " ").getBytes()) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_170 $$ zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + " ").getBytes()) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_170 $$ zipout.write(new String(((DBChemicalName) chemnames.get(k)).getName() + " ").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_172 $$ zipout.write(new String("</a>. Information we have got: NMR spectra").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_172 $$ zipout.write(new String("</a>. Information we have got: NMR spectra").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_173 $$ Vector spectra = mol.selectSpectra() [CD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_173 $$ Vector spectra = mol.selectSpectra() [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_173 $$ Vector spectra = mol.selectSpectra() [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_174 $$ for (int k = 0; k < spectra.size(); k++) [CD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_174 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_174 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_174 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_174 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_174 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) --> Line_174 $$ for (int k = 0; k < spectra.size(); k++) [FD]
Line_174 $$ for (int k = 0; k < spectra.size(); k++) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [CD]
Line_174 $$ for (int k = 0; k < spectra.size(); k++) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_123 $$ Vector spectra = DBSpectrumPeer.doSelect(crit) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_175 $$ zipout.write(new String(((DBSpectrum) spectra.get(k)).getDBSpectrumType().getName() + ", ").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_177 $$ zipout.write(new String("3D coordinates, ").getBytes()) [CD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_177 $$ zipout.write(new String("3D coordinates, ").getBytes()) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_177 $$ zipout.write(new String("3D coordinates, ").getBytes()) [FD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_177 $$ zipout.write(new String("3D coordinates, ").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_178 $$ zipout.write(new String("File formats: CML, mol, png, jpeg").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_178 $$ zipout.write(new String("File formats: CML, mol, png, jpeg").getBytes()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_179 $$ zipout.write(new String("</p>").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_179 $$ zipout.write(new String("</p>").getBytes()) [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_181 $$ zipout.write(new String("</body></html>").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_181 $$ zipout.write(new String("</body></html>").getBytes()) [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_182 $$ zipout.closeEntry() [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_182 $$ zipout.closeEntry() [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_183 $$ zipout.close() [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_183 $$ zipout.close() [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_184 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray()) [CD]
Line_147 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_184 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray()) [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_185 $$ byte[] buf = new byte[32 * 1024] [CD]
Line_144 $$ if (action.equals("namelist")) --> Line_186 $$ int nRead = 0 [CD]
Line_144 $$ if (action.equals("namelist")) --> Line_187 $$ while ((nRead = is.read(buf)) != -1) [CD]
Line_186 $$ int nRead = 0 --> Line_187 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_184 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray()) --> Line_187 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_187 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_188 $$ outstream.write(buf, 0, nRead) [CD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_188 $$ outstream.write(buf, 0, nRead) [FD]
Line_4 $$ ServletOutputStream outstream = null --> Line_188 $$ outstream.write(buf, 0, nRead) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_188 $$ outstream.write(buf, 0, nRead) [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_188 $$ outstream.write(buf, 0, nRead) [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_188 $$ outstream.write(buf, 0, nRead) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_188 $$ outstream.write(buf, 0, nRead) [FD]
Line_186 $$ int nRead = 0 --> Line_188 $$ outstream.write(buf, 0, nRead) [FD]
Line_144 $$ if (action.equals("namelist")) --> Line_190 $$ if (action.equals("predictor")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_190 $$ if (action.equals("predictor")) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_191 $$ if (req.getParameter("symbol") == null) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_191 $$ if (req.getParameter("symbol") == null) [FD]
Line_191 $$ if (req.getParameter("symbol") == null) --> Line_192 $$ res.setContentType("text/plain") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_192 $$ res.setContentType("text/plain") [FD]
Line_191 $$ if (req.getParameter("symbol") == null) --> Line_193 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_193 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_193 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_193 $$ out = res.getWriter() [FD]
Line_111 $$ out = res.getWriter() --> Line_193 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_193 $$ out = res.getWriter() [FD]
Line_191 $$ if (req.getParameter("symbol") == null) --> Line_194 $$ out.write("please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C") [CD]
Line_3 $$ PrintWriter out = null --> Line_194 $$ out.write("please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C") [FD]
Line_17 $$ out = res.getWriter() --> Line_194 $$ out.write("please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C") [FD]
Line_26 $$ out = res.getWriter() --> Line_194 $$ out.write("please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C") [FD]
Line_111 $$ out = res.getWriter() --> Line_194 $$ out.write("please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C") [FD]
Line_193 $$ out = res.getWriter() --> Line_194 $$ out.write("please give the symbol to create the predictor for in the request with symbol=X (e. g. symbol=C") [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_196 $$ res.setContentType("application/zip") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_196 $$ res.setContentType("application/zip") [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_197 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_197 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_197 $$ outstream = res.getOutputStream() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_197 $$ outstream = res.getOutputStream() [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_197 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_197 $$ outstream = res.getOutputStream() [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_200 $$ String filename = "org/openscience/nmrshiftdb/PredictionTool.class" [CD]
Line_190 $$ if (action.equals("predictor")) --> Line_201 $$ zipout.putNextEntry(new ZipEntry(filename)) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_201 $$ zipout.putNextEntry(new ZipEntry(filename)) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_202 $$ JarInputStream jip = new JarInputStream(new FileInputStream(ServletUtils.expandRelative(getServletConfig(), "/WEB-INF/lib/nmrshiftdb-lib.jar"))) [CD]
Line_190 $$ if (action.equals("predictor")) --> Line_203 $$ JarEntry entry = jip.getNextJarEntry() [CD]
Line_202 $$ JarInputStream jip = new JarInputStream(new FileInputStream(ServletUtils.expandRelative(getServletConfig(), "/WEB-INF/lib/nmrshiftdb-lib.jar"))) --> Line_203 $$ JarEntry entry = jip.getNextJarEntry() [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_204 $$ while (entry.getName().indexOf("PredictionTool.class") == -1) [CD]
Line_202 $$ JarInputStream jip = new JarInputStream(new FileInputStream(ServletUtils.expandRelative(getServletConfig(), "/WEB-INF/lib/nmrshiftdb-lib.jar"))) --> Line_205 $$ entry = jip.getNextJarEntry() [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_207 $$ for (int i = 0; i < entry.getSize(); i++) [CD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_207 $$ for (int i = 0; i < entry.getSize(); i++) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_207 $$ for (int i = 0; i < entry.getSize(); i++) [FD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_208 $$ zipout.write(jip.read()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_208 $$ zipout.write(jip.read()) [FD]
Line_202 $$ JarInputStream jip = new JarInputStream(new FileInputStream(ServletUtils.expandRelative(getServletConfig(), "/WEB-INF/lib/nmrshiftdb-lib.jar"))) --> Line_208 $$ zipout.write(jip.read()) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_210 $$ zipout.closeEntry() [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_210 $$ zipout.closeEntry() [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_211 $$ zipout.putNextEntry(new ZipEntry("nmrshiftdb.csv")) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_211 $$ zipout.putNextEntry(new ZipEntry("nmrshiftdb.csv")) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_212 $$ int i = 0 [CD]
Line_190 $$ if (action.equals("predictor")) --> Line_213 $$ org.apache.turbine.util.db.pool.DBConnection conn = TurbineDB.getConnection() [CD]
Line_190 $$ if (action.equals("predictor")) --> Line_214 $$ HashMap mapsmap = new HashMap() [CD]
Line_190 $$ if (action.equals("predictor")) --> Line_215 $$ while (true) [CD]
Line_215 $$ while (true) --> Line_216 $$ Statement stmt = conn.createStatement() [CD]
Line_98 $$ Connection conn = dbconn.getConnection() --> Line_216 $$ Statement stmt = conn.createStatement() [FD]
Line_215 $$ while (true) --> Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") [CD]
Line_216 $$ Statement stmt = conn.createStatement() --> Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") [FD]
Line_99 $$ Statement stmt = conn.createStatement() --> Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") [FD]
Line_215 $$ while (true) --> Line_218 $$ int m = 0 [CD]
Line_215 $$ while (true) --> Line_219 $$ while (rs.next()) [CD]
Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") --> Line_219 $$ while (rs.next()) [FD]
Line_100 $$ ResultSet rs = null --> Line_219 $$ while (rs.next()) [FD]
Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") --> Line_219 $$ while (rs.next()) [FD]
Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") --> Line_219 $$ while (rs.next()) [FD]
Line_219 $$ while (rs.next()) --> Line_220 $$ String code = rs.getString(1) [CD]
Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") --> Line_220 $$ String code = rs.getString(1) [FD]
Line_100 $$ ResultSet rs = null --> Line_220 $$ String code = rs.getString(1) [FD]
Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") --> Line_220 $$ String code = rs.getString(1) [FD]
Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") --> Line_220 $$ String code = rs.getString(1) [FD]
Line_219 $$ while (rs.next()) --> Line_221 $$ Double value = new Double(rs.getString(2)) [CD]
Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") --> Line_221 $$ Double value = new Double(rs.getString(2)) [FD]
Line_100 $$ ResultSet rs = null --> Line_221 $$ Double value = new Double(rs.getString(2)) [FD]
Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") --> Line_221 $$ Double value = new Double(rs.getString(2)) [FD]
Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") --> Line_221 $$ Double value = new Double(rs.getString(2)) [FD]
Line_219 $$ while (rs.next()) --> Line_222 $$ String symbol = rs.getString(3) [CD]
Line_217 $$ ResultSet rs = stmt.executeQuery("select HOSE_CODE, VALUE, SYMBOL from HOSE_CODES where CONDITION_TYPE='m' and WITH_RINGS=0 and SYMBOL='" + req.getParameter("symbol") + "' limit " + (i * 1000) + ", 1000") --> Line_222 $$ String symbol = rs.getString(3) [FD]
Line_100 $$ ResultSet rs = null --> Line_222 $$ String symbol = rs.getString(3) [FD]
Line_102 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE where YEAR(DATE)>=" + yearstart + " and YEAR(DATE)<=" + yearend + " and LOGIN_NAME<>'testuser' group by YEAR, " + (yearly ? "" : "MONTH, ") + "AFFILIATION_1, AFFILIATION_2, MACHINE.NAME") --> Line_222 $$ String symbol = rs.getString(3) [FD]
Line_104 $$ rs = stmt.executeQuery("select YEAR(DATE) as YEAR, " + (yearly ? "" : " MONTH(DATE) as MONTH, ") + "MACHINE.NAME as NAME, count(*) as C, sum(WISHED_SPECTRUM like '%13C%' or WISHED_SPECTRUM like '%variable temperature%' or WISHED_SPECTRUM like '%ID sel. NOE%' or WISHED_SPECTRUM like '%solvent suppression%' or WISHED_SPECTRUM like '%standard spectrum%') as 1_D, sum(WISHED_SPECTRUM like '%H,H-COSY%' or WISHED_SPECTRUM like '%NOESY%' or WISHED_SPECTRUM like '%HMQC%' or WISHED_SPECTRUM like '%HMBC%') as 2_D, sum(OTHER_WISHED_SPECTRUM!='') as SPECIAL, sum(OTHER_NUCLEI!='') as HETERO, sum(PROCESS='self') as SELF, sum(PROCESS='robot') as ROBOT, sum(PROCESS='worker') as OPERATOR from (SAMPLE join TURBINE_USER using (USER_ID)) join MACHINE on MACHINE.MACHINE_ID=SAMPLE.MACHINE group by YEAR, " + (yearly ? "" : "MONTH, ") + "MACHINE.NAME") --> Line_222 $$ String symbol = rs.getString(3) [FD]
Line_219 $$ while (rs.next()) --> Line_223 $$ if (mapsmap.get(symbol) == null) [CD]
Line_214 $$ HashMap mapsmap = new HashMap() --> Line_223 $$ if (mapsmap.get(symbol) == null) [FD]
Line_222 $$ String symbol = rs.getString(3) --> Line_223 $$ if (mapsmap.get(symbol) == null) [FD]
Line_223 $$ if (mapsmap.get(symbol) == null) --> Line_224 $$ mapsmap.put(symbol, new HashMap()) [CD]
Line_214 $$ HashMap mapsmap = new HashMap() --> Line_224 $$ mapsmap.put(symbol, new HashMap()) [FD]
Line_222 $$ String symbol = rs.getString(3) --> Line_224 $$ mapsmap.put(symbol, new HashMap()) [FD]
Line_219 $$ while (rs.next()) --> Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) [CD]
Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) --> Line_227 $$ StringBuffer hoseCodeBuffer = new StringBuffer() [CD]
Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) --> Line_228 $$ StringTokenizer st = new StringTokenizer(code, "()/") [CD]
Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) --> Line_229 $$ for (int k = 0; k < spheres; k++) [CD]
Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) --> Line_229 $$ for (int k = 0; k < spheres; k++) [FD]
Line_174 $$ for (int k = 0; k < spectra.size(); k++) --> Line_229 $$ for (int k = 0; k < spheres; k++) [FD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_229 $$ for (int k = 0; k < spheres; k++) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_229 $$ for (int k = 0; k < spheres; k++) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_229 $$ for (int k = 0; k < spheres; k++) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_229 $$ for (int k = 0; k < spheres; k++) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_229 $$ for (int k = 0; k < spheres; k++) [FD]
Line_229 $$ for (int k = 0; k < spheres; k++) --> Line_230 $$ if (st.hasMoreTokens()) [CD]
Line_228 $$ StringTokenizer st = new StringTokenizer(code, "()/") --> Line_230 $$ if (st.hasMoreTokens()) [FD]
Line_230 $$ if (st.hasMoreTokens()) --> Line_231 $$ String partcode = st.nextToken() [CD]
Line_228 $$ StringTokenizer st = new StringTokenizer(code, "()/") --> Line_231 $$ String partcode = st.nextToken() [FD]
Line_230 $$ if (st.hasMoreTokens()) --> Line_232 $$ hoseCodeBuffer.append(partcode) [CD]
Line_227 $$ StringBuffer hoseCodeBuffer = new StringBuffer() --> Line_232 $$ hoseCodeBuffer.append(partcode) [FD]
Line_231 $$ String partcode = st.nextToken() --> Line_232 $$ hoseCodeBuffer.append(partcode) [FD]
Line_229 $$ for (int k = 0; k < spheres; k++) --> Line_234 $$ if (k == 0) [CD]
Line_229 $$ for (int k = 0; k < spheres; k++) --> Line_234 $$ if (k == 0) [FD]
Line_174 $$ for (int k = 0; k < spectra.size(); k++) --> Line_234 $$ if (k == 0) [FD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_234 $$ if (k == 0) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_234 $$ if (k == 0) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_234 $$ if (k == 0) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_234 $$ if (k == 0) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_234 $$ if (k == 0) [FD]
Line_234 $$ if (k == 0) --> Line_235 $$ hoseCodeBuffer.append("(") [CD]
Line_227 $$ StringBuffer hoseCodeBuffer = new StringBuffer() --> Line_235 $$ hoseCodeBuffer.append("(") [FD]
Line_234 $$ if (k == 0) --> Line_236 $$ if (k == 3) [CD]
Line_229 $$ for (int k = 0; k < spheres; k++) --> Line_236 $$ if (k == 3) [FD]
Line_174 $$ for (int k = 0; k < spectra.size(); k++) --> Line_236 $$ if (k == 3) [FD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_236 $$ if (k == 3) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_236 $$ if (k == 3) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_236 $$ if (k == 3) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_236 $$ if (k == 3) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_236 $$ if (k == 3) [FD]
Line_236 $$ if (k == 3) --> Line_237 $$ hoseCodeBuffer.append(")") [CD]
Line_227 $$ StringBuffer hoseCodeBuffer = new StringBuffer() --> Line_237 $$ hoseCodeBuffer.append(")") [FD]
Line_236 $$ if (k == 3) --> Line_239 $$ hoseCodeBuffer.append("/") [CD]
Line_227 $$ StringBuffer hoseCodeBuffer = new StringBuffer() --> Line_239 $$ hoseCodeBuffer.append("/") [FD]
Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) --> Line_242 $$ String hoseCode = hoseCodeBuffer.toString() [CD]
Line_227 $$ StringBuffer hoseCodeBuffer = new StringBuffer() --> Line_242 $$ String hoseCode = hoseCodeBuffer.toString() [FD]
Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) --> Line_243 $$ if (((HashMap) mapsmap.get(symbol)).get(hoseCode) == null) [CD]
Line_214 $$ HashMap mapsmap = new HashMap() --> Line_243 $$ if (((HashMap) mapsmap.get(symbol)).get(hoseCode) == null) [FD]
Line_222 $$ String symbol = rs.getString(3) --> Line_243 $$ if (((HashMap) mapsmap.get(symbol)).get(hoseCode) == null) [FD]
Line_243 $$ if (((HashMap) mapsmap.get(symbol)).get(hoseCode) == null) --> Line_244 $$ ((HashMap) mapsmap.get(symbol)).put(hoseCode, new ArrayList()) [CD]
Line_214 $$ HashMap mapsmap = new HashMap() --> Line_244 $$ ((HashMap) mapsmap.get(symbol)).put(hoseCode, new ArrayList()) [FD]
Line_222 $$ String symbol = rs.getString(3) --> Line_244 $$ ((HashMap) mapsmap.get(symbol)).put(hoseCode, new ArrayList()) [FD]
Line_226 $$ for (int spheres = 6; spheres > 0; spheres--) --> Line_246 $$ ((ArrayList) ((HashMap) mapsmap.get(symbol)).get(hoseCode)).add(value) [CD]
Line_221 $$ Double value = new Double(rs.getString(2)) --> Line_246 $$ ((ArrayList) ((HashMap) mapsmap.get(symbol)).get(hoseCode)).add(value) [FD]
Line_214 $$ HashMap mapsmap = new HashMap() --> Line_246 $$ ((ArrayList) ((HashMap) mapsmap.get(symbol)).get(hoseCode)).add(value) [FD]
Line_222 $$ String symbol = rs.getString(3) --> Line_246 $$ ((ArrayList) ((HashMap) mapsmap.get(symbol)).get(hoseCode)).add(value) [FD]
Line_219 $$ while (rs.next()) --> Line_248 $$ m++ [CD]
Line_218 $$ int m = 0 --> Line_248 $$ m++ [FD]
Line_215 $$ while (true) --> Line_250 $$ i++ [CD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_250 $$ i++ [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_250 $$ i++ [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_250 $$ i++ [FD]
Line_212 $$ int i = 0 --> Line_250 $$ i++ [FD]
Line_215 $$ while (true) --> Line_251 $$ stmt.close() [CD]
Line_216 $$ Statement stmt = conn.createStatement() --> Line_251 $$ stmt.close() [FD]
Line_99 $$ Statement stmt = conn.createStatement() --> Line_251 $$ stmt.close() [FD]
Line_215 $$ while (true) --> Line_252 $$ if (m == 0) [CD]
Line_218 $$ int m = 0 --> Line_252 $$ if (m == 0) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_254 $$ Set keySet = mapsmap.keySet() [CD]
Line_214 $$ HashMap mapsmap = new HashMap() --> Line_254 $$ Set keySet = mapsmap.keySet() [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_255 $$ Iterator it = keySet.iterator() [CD]
Line_254 $$ Set keySet = mapsmap.keySet() --> Line_255 $$ Iterator it = keySet.iterator() [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_256 $$ while (it.hasNext()) [CD]
Line_255 $$ Iterator it = keySet.iterator() --> Line_256 $$ while (it.hasNext()) [FD]
Line_256 $$ while (it.hasNext()) --> Line_257 $$ String symbol = (String) it.next() [CD]
Line_255 $$ Iterator it = keySet.iterator() --> Line_257 $$ String symbol = (String) it.next() [FD]
Line_256 $$ while (it.hasNext()) --> Line_258 $$ HashMap hosemap = ((HashMap) mapsmap.get(symbol)) [CD]
Line_214 $$ HashMap mapsmap = new HashMap() --> Line_258 $$ HashMap hosemap = ((HashMap) mapsmap.get(symbol)) [FD]
Line_257 $$ String symbol = (String) it.next() --> Line_258 $$ HashMap hosemap = ((HashMap) mapsmap.get(symbol)) [FD]
Line_222 $$ String symbol = rs.getString(3) --> Line_258 $$ HashMap hosemap = ((HashMap) mapsmap.get(symbol)) [FD]
Line_256 $$ while (it.hasNext()) --> Line_259 $$ Set keySet2 = hosemap.keySet() [CD]
Line_258 $$ HashMap hosemap = ((HashMap) mapsmap.get(symbol)) --> Line_259 $$ Set keySet2 = hosemap.keySet() [FD]
Line_256 $$ while (it.hasNext()) --> Line_260 $$ Iterator it2 = keySet2.iterator() [CD]
Line_259 $$ Set keySet2 = hosemap.keySet() --> Line_260 $$ Iterator it2 = keySet2.iterator() [FD]
Line_256 $$ while (it.hasNext()) --> Line_261 $$ while (it2.hasNext()) [CD]
Line_260 $$ Iterator it2 = keySet2.iterator() --> Line_261 $$ while (it2.hasNext()) [FD]
Line_261 $$ while (it2.hasNext()) --> Line_262 $$ String hoseCode = (String) it2.next() [CD]
Line_260 $$ Iterator it2 = keySet2.iterator() --> Line_262 $$ String hoseCode = (String) it2.next() [FD]
Line_261 $$ while (it2.hasNext()) --> Line_263 $$ ArrayList list = ((ArrayList) hosemap.get(hoseCode)) [CD]
Line_258 $$ HashMap hosemap = ((HashMap) mapsmap.get(symbol)) --> Line_263 $$ ArrayList list = ((ArrayList) hosemap.get(hoseCode)) [FD]
Line_262 $$ String hoseCode = (String) it2.next() --> Line_263 $$ ArrayList list = ((ArrayList) hosemap.get(hoseCode)) [FD]
Line_261 $$ while (it2.hasNext()) --> Line_264 $$ double[] values = new double[list.size()] [CD]
Line_263 $$ ArrayList list = ((ArrayList) hosemap.get(hoseCode)) --> Line_264 $$ double[] values = new double[list.size()] [FD]
Line_261 $$ while (it2.hasNext()) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [CD]
Line_229 $$ for (int k = 0; k < spheres; k++) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_174 $$ for (int k = 0; k < spectra.size(); k++) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_263 $$ ArrayList list = ((ArrayList) hosemap.get(hoseCode)) --> Line_265 $$ for (int k = 0; k < list.size(); k++) [FD]
Line_265 $$ for (int k = 0; k < list.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [CD]
Line_265 $$ for (int k = 0; k < list.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_263 $$ ArrayList list = ((ArrayList) hosemap.get(hoseCode)) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_229 $$ for (int k = 0; k < spheres; k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_174 $$ for (int k = 0; k < spectra.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_169 $$ for (int k = 0; k < chemnames.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_165 $$ for (int k = 0; k < cannames.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_135 $$ for (int k = 0; k < spectra.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_67 $$ for (int k = 0; k < spectra.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_52 $$ for (int k = 0; k < v.size(); k++) --> Line_266 $$ values[k] = ((Double) list.get(k)).doubleValue() [FD]
Line_261 $$ while (it2.hasNext()) --> Line_268 $$ zipout.write(new String(symbol + "|" + hoseCode + "|" + Statistics.minimum(values) + "|" + Statistics.average(values) + "|" + Statistics.maximum(values) + "\r\n").getBytes()) [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_268 $$ zipout.write(new String(symbol + "|" + hoseCode + "|" + Statistics.minimum(values) + "|" + Statistics.average(values) + "|" + Statistics.maximum(values) + "\r\n").getBytes()) [FD]
Line_264 $$ double[] values = new double[list.size()] --> Line_268 $$ zipout.write(new String(symbol + "|" + hoseCode + "|" + Statistics.minimum(values) + "|" + Statistics.average(values) + "|" + Statistics.maximum(values) + "\r\n").getBytes()) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_271 $$ zipout.closeEntry() [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_271 $$ zipout.closeEntry() [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_272 $$ zipout.close() [CD]
Line_148 $$ ZipOutputStream zipout = new ZipOutputStream(baos) --> Line_272 $$ zipout.close() [FD]
Line_147 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_273 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray()) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_276 $$ i = 0 [CD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_276 $$ i = 0 [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_276 $$ i = 0 [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_276 $$ i = 0 [FD]
Line_212 $$ int i = 0 --> Line_276 $$ i = 0 [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_277 $$ while ((nRead = is.read(buf)) != -1) [CD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_277 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_186 $$ int nRead = 0 --> Line_277 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_184 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray()) --> Line_277 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_277 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_277 $$ while ((nRead = is.read(buf)) != -1) --> Line_278 $$ outstream.write(buf, 0, nRead) [CD]
Line_277 $$ while ((nRead = is.read(buf)) != -1) --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_4 $$ ServletOutputStream outstream = null --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_186 $$ int nRead = 0 --> Line_278 $$ outstream.write(buf, 0, nRead) [FD]
Line_190 $$ if (action.equals("predictor")) --> Line_280 $$ if (action.equals("exportspec") || action.equals("exportmol")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_280 $$ if (action.equals("exportspec") || action.equals("exportmol")) [FD]
Line_280 $$ if (action.equals("exportspec") || action.equals("exportmol")) --> Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) [CD]
Line_10 $$ int spectrumId = -1 --> Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) [FD]
Line_19 $$ spectrumId = ((Record) l.get(0)).getValue(1).asInt() --> Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) [FD]
Line_11 $$ DBSpectrum spectrum = null --> Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) [FD]
Line_280 $$ if (action.equals("exportspec") || action.equals("exportmol")) --> Line_282 $$ export = new Export(spectrum) [CD]
Line_12 $$ Export export = null --> Line_282 $$ export = new Export(spectrum) [FD]
Line_280 $$ if (action.equals("exportspec") || action.equals("exportmol")) --> Line_283 $$ if (action.equals("exportmdl")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_283 $$ if (action.equals("exportmdl")) [FD]
Line_283 $$ if (action.equals("exportmdl")) --> Line_284 $$ res.setContentType("text/plain") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_284 $$ res.setContentType("text/plain") [FD]
Line_283 $$ if (action.equals("exportmdl")) --> Line_285 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_285 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_285 $$ outstream = res.getOutputStream() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_285 $$ outstream = res.getOutputStream() [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_285 $$ outstream = res.getOutputStream() [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_285 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_285 $$ outstream = res.getOutputStream() [FD]
Line_283 $$ if (action.equals("exportmdl")) --> Line_286 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter("moleculeid"))) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_286 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter("moleculeid"))) [FD]
Line_283 $$ if (action.equals("exportmdl")) --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_286 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter("moleculeid"))) --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_287 $$ outstream.write(mol.getStructureFile(Integer.parseInt(req.getParameter("coordsetid")), false).getBytes()) [FD]
Line_283 $$ if (action.equals("exportmdl")) --> Line_288 $$ if (action.equals("exportlastinputs")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_288 $$ if (action.equals("exportlastinputs")) [FD]
Line_288 $$ if (action.equals("exportlastinputs")) --> Line_289 $$ format = action [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_289 $$ format = action [FD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_289 $$ format = action [FD]
Line_288 $$ if (action.equals("exportlastinputs")) --> Line_290 $$ if (action.equals("printpredict")) [CD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_290 $$ if (action.equals("printpredict")) [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_291 $$ res.setContentType("text/html") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_291 $$ res.setContentType("text/html") [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_292 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_292 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_292 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_292 $$ out = res.getWriter() [FD]
Line_111 $$ out = res.getWriter() --> Line_292 $$ out = res.getWriter() [FD]
Line_193 $$ out = res.getWriter() --> Line_292 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_292 $$ out = res.getWriter() [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_293 $$ HttpSession session = req.getSession() [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_293 $$ HttpSession session = req.getSession() [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) [CD]
Line_293 $$ HttpSession session = req.getSession() --> Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_295 $$ StringWriter w = new StringWriter() [CD]
Line_290 $$ if (action.equals("printpredict")) --> Line_296 $$ Velocity.mergeTemplate("predictprint.vm", "ISO-8859-1", context, w) [CD]
Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) --> Line_296 $$ Velocity.mergeTemplate("predictprint.vm", "ISO-8859-1", context, w) [FD]
Line_295 $$ StringWriter w = new StringWriter() --> Line_296 $$ Velocity.mergeTemplate("predictprint.vm", "ISO-8859-1", context, w) [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_297 $$ out.println(w.toString()) [CD]
Line_3 $$ PrintWriter out = null --> Line_297 $$ out.println(w.toString()) [FD]
Line_17 $$ out = res.getWriter() --> Line_297 $$ out.println(w.toString()) [FD]
Line_26 $$ out = res.getWriter() --> Line_297 $$ out.println(w.toString()) [FD]
Line_111 $$ out = res.getWriter() --> Line_297 $$ out.println(w.toString()) [FD]
Line_193 $$ out = res.getWriter() --> Line_297 $$ out.println(w.toString()) [FD]
Line_292 $$ out = res.getWriter() --> Line_297 $$ out.println(w.toString()) [FD]
Line_295 $$ StringWriter w = new StringWriter() --> Line_297 $$ out.println(w.toString()) [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_299 $$ res.setContentType("text/html") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_299 $$ res.setContentType("text/html") [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_300 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_300 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_300 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_300 $$ out = res.getWriter() [FD]
Line_111 $$ out = res.getWriter() --> Line_300 $$ out = res.getWriter() [FD]
Line_193 $$ out = res.getWriter() --> Line_300 $$ out = res.getWriter() [FD]
Line_292 $$ out = res.getWriter() --> Line_300 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_300 $$ out = res.getWriter() [FD]
Line_290 $$ if (action.equals("printpredict")) --> Line_301 $$ out.println("No valid action") [CD]
Line_3 $$ PrintWriter out = null --> Line_301 $$ out.println("No valid action") [FD]
Line_17 $$ out = res.getWriter() --> Line_301 $$ out.println("No valid action") [FD]
Line_26 $$ out = res.getWriter() --> Line_301 $$ out.println("No valid action") [FD]
Line_111 $$ out = res.getWriter() --> Line_301 $$ out.println("No valid action") [FD]
Line_193 $$ out = res.getWriter() --> Line_301 $$ out.println("No valid action") [FD]
Line_292 $$ out = res.getWriter() --> Line_301 $$ out.println("No valid action") [FD]
Line_300 $$ out = res.getWriter() --> Line_301 $$ out.println("No valid action") [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_303 $$ if (format == null) [FD]
Line_289 $$ format = action --> Line_303 $$ if (format == null) [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_304 $$ if (format.equals("pdf") || format.equals("rtf")) [FD]
Line_289 $$ format = action --> Line_304 $$ if (format.equals("pdf") || format.equals("rtf")) [FD]
Line_303 $$ if (format == null) --> Line_304 $$ if (format.equals("pdf") || format.equals("rtf")) [FD]
Line_304 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_305 $$ res.setContentType("application/" + format) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_305 $$ res.setContentType("application/" + format) [FD]
Line_304 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_306 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_306 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_306 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_306 $$ out = res.getWriter() [FD]
Line_111 $$ out = res.getWriter() --> Line_306 $$ out = res.getWriter() [FD]
Line_193 $$ out = res.getWriter() --> Line_306 $$ out = res.getWriter() [FD]
Line_292 $$ out = res.getWriter() --> Line_306 $$ out = res.getWriter() [FD]
Line_300 $$ out = res.getWriter() --> Line_306 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_306 $$ out = res.getWriter() [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_308 $$ if (format.equals("docbook")) [FD]
Line_289 $$ format = action --> Line_308 $$ if (format.equals("docbook")) [FD]
Line_303 $$ if (format == null) --> Line_308 $$ if (format.equals("docbook")) [FD]
Line_308 $$ if (format.equals("docbook")) --> Line_309 $$ res.setContentType("application/zip") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_309 $$ res.setContentType("application/zip") [FD]
Line_308 $$ if (format.equals("docbook")) --> Line_310 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_310 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_310 $$ outstream = res.getOutputStream() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_310 $$ outstream = res.getOutputStream() [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_310 $$ outstream = res.getOutputStream() [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_310 $$ outstream = res.getOutputStream() [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_310 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_310 $$ outstream = res.getOutputStream() [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_312 $$ if (format.equals("svg")) [FD]
Line_289 $$ format = action --> Line_312 $$ if (format.equals("svg")) [FD]
Line_303 $$ if (format == null) --> Line_312 $$ if (format.equals("svg")) [FD]
Line_312 $$ if (format.equals("svg")) --> Line_313 $$ res.setContentType("image/x-svg") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_313 $$ res.setContentType("image/x-svg") [FD]
Line_312 $$ if (format.equals("svg")) --> Line_314 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_314 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_314 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_314 $$ out = res.getWriter() [FD]
Line_111 $$ out = res.getWriter() --> Line_314 $$ out = res.getWriter() [FD]
Line_193 $$ out = res.getWriter() --> Line_314 $$ out = res.getWriter() [FD]
Line_292 $$ out = res.getWriter() --> Line_314 $$ out = res.getWriter() [FD]
Line_300 $$ out = res.getWriter() --> Line_314 $$ out = res.getWriter() [FD]
Line_306 $$ out = res.getWriter() --> Line_314 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_314 $$ out = res.getWriter() [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_316 $$ if (format.equals("tiff")) [FD]
Line_289 $$ format = action --> Line_316 $$ if (format.equals("tiff")) [FD]
Line_303 $$ if (format == null) --> Line_316 $$ if (format.equals("tiff")) [FD]
Line_316 $$ if (format.equals("tiff")) --> Line_317 $$ res.setContentType("image/tiff") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_317 $$ res.setContentType("image/tiff") [FD]
Line_316 $$ if (format.equals("tiff")) --> Line_318 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_310 $$ outstream = res.getOutputStream() --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_318 $$ outstream = res.getOutputStream() [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_320 $$ if (format.equals("jpeg")) [FD]
Line_289 $$ format = action --> Line_320 $$ if (format.equals("jpeg")) [FD]
Line_303 $$ if (format == null) --> Line_320 $$ if (format.equals("jpeg")) [FD]
Line_320 $$ if (format.equals("jpeg")) --> Line_321 $$ res.setContentType("image/jpeg") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_321 $$ res.setContentType("image/jpeg") [FD]
Line_320 $$ if (format.equals("jpeg")) --> Line_322 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_310 $$ outstream = res.getOutputStream() --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_318 $$ outstream = res.getOutputStream() --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_322 $$ outstream = res.getOutputStream() [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_324 $$ if (format.equals("png")) [FD]
Line_289 $$ format = action --> Line_324 $$ if (format.equals("png")) [FD]
Line_303 $$ if (format == null) --> Line_324 $$ if (format.equals("png")) [FD]
Line_324 $$ if (format.equals("png")) --> Line_325 $$ res.setContentType("image/png") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_325 $$ res.setContentType("image/png") [FD]
Line_324 $$ if (format.equals("png")) --> Line_326 $$ outstream = res.getOutputStream() [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_310 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_318 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_322 $$ outstream = res.getOutputStream() --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_326 $$ outstream = res.getOutputStream() [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_328 $$ if (format.equals("mdl") || format.equals("txt") || format.equals("cml") || format.equals("cmlboth") || format.indexOf("exsection") == 0) [FD]
Line_289 $$ format = action --> Line_328 $$ if (format.equals("mdl") || format.equals("txt") || format.equals("cml") || format.equals("cmlboth") || format.indexOf("exsection") == 0) [FD]
Line_303 $$ if (format == null) --> Line_328 $$ if (format.equals("mdl") || format.equals("txt") || format.equals("cml") || format.equals("cmlboth") || format.indexOf("exsection") == 0) [FD]
Line_328 $$ if (format.equals("mdl") || format.equals("txt") || format.equals("cml") || format.equals("cmlboth") || format.indexOf("exsection") == 0) --> Line_329 $$ res.setContentType("text/plain") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_329 $$ res.setContentType("text/plain") [FD]
Line_328 $$ if (format.equals("mdl") || format.equals("txt") || format.equals("cml") || format.equals("cmlboth") || format.indexOf("exsection") == 0) --> Line_330 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_330 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_111 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_193 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_292 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_300 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_306 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_314 $$ out = res.getWriter() --> Line_330 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_330 $$ out = res.getWriter() [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_332 $$ if (format.equals("simplehtml") || format.equals("exportlastinputs")) [FD]
Line_289 $$ format = action --> Line_332 $$ if (format.equals("simplehtml") || format.equals("exportlastinputs")) [FD]
Line_303 $$ if (format == null) --> Line_332 $$ if (format.equals("simplehtml") || format.equals("exportlastinputs")) [FD]
Line_332 $$ if (format.equals("simplehtml") || format.equals("exportlastinputs")) --> Line_333 $$ res.setContentType("text/html") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_333 $$ res.setContentType("text/html") [FD]
Line_332 $$ if (format.equals("simplehtml") || format.equals("exportlastinputs")) --> Line_334 $$ out = res.getWriter() [CD]
Line_3 $$ PrintWriter out = null --> Line_334 $$ out = res.getWriter() [FD]
Line_17 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_26 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_111 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_193 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_292 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_300 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_306 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_314 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_330 $$ out = res.getWriter() --> Line_334 $$ out = res.getWriter() [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_334 $$ out = res.getWriter() [FD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_336 $$ if (action.equals("exportlastinputs")) [FD]
Line_336 $$ if (action.equals("exportlastinputs")) --> Line_338 $$ if (req.getParameter("numbertoexport") != null) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_338 $$ if (req.getParameter("numbertoexport") != null) [FD]
Line_25 $$ int numbertoexport = 10 --> Line_340 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) [FD]
Line_29 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) --> Line_340 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_340 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) [FD]
Line_3 $$ PrintWriter out = null --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_17 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_26 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_111 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_193 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_292 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_300 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_306 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_314 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_330 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_334 $$ out = res.getWriter() --> Line_343 $$ out.println("The parameter <code>numbertoexport</code>must be an integer from 1 to 20") [FD]
Line_336 $$ if (action.equals("exportlastinputs")) --> Line_346 $$ NmrshiftdbUser user = null [CD]
Line_346 $$ NmrshiftdbUser user = null --> Line_348 $$ user = NmrshiftdbUserPeer.getByName(req.getParameter("username")) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_348 $$ user = NmrshiftdbUserPeer.getByName(req.getParameter("username")) [FD]
Line_3 $$ PrintWriter out = null --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_17 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_26 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_111 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_193 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_292 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_300 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_306 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_314 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_330 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_334 $$ out = res.getWriter() --> Line_350 $$ out.println("Seems <code>username</code> is not OK: " + ex.getMessage()) [FD]
Line_336 $$ if (action.equals("exportlastinputs")) --> Line_352 $$ if (user != null) [CD]
Line_346 $$ NmrshiftdbUser user = null --> Line_352 $$ if (user != null) [FD]
Line_348 $$ user = NmrshiftdbUserPeer.getByName(req.getParameter("username")) --> Line_352 $$ if (user != null) [FD]
Line_352 $$ if (user != null) --> Line_353 $$ List l = NmrshiftdbUserPeer.executeQuery("SELECT LAST_DOWNLOAD_DATE FROM TURBINE_USER  where LOGIN_NAME=\"" + user.getUserName() + "\";") [CD]
Line_346 $$ NmrshiftdbUser user = null --> Line_353 $$ List l = NmrshiftdbUserPeer.executeQuery("SELECT LAST_DOWNLOAD_DATE FROM TURBINE_USER  where LOGIN_NAME=\"" + user.getUserName() + "\";") [FD]
Line_348 $$ user = NmrshiftdbUserPeer.getByName(req.getParameter("username")) --> Line_353 $$ List l = NmrshiftdbUserPeer.executeQuery("SELECT LAST_DOWNLOAD_DATE FROM TURBINE_USER  where LOGIN_NAME=\"" + user.getUserName() + "\";") [FD]
Line_352 $$ if (user != null) --> Line_354 $$ Date lastDownloadDate = ((Record) l.get(0)).getValue(1).asDate() [CD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_354 $$ Date lastDownloadDate = ((Record) l.get(0)).getValue(1).asDate() [FD]
Line_352 $$ if (user != null) --> Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) [CD]
Line_354 $$ Date lastDownloadDate = ((Record) l.get(0)).getValue(1).asDate() --> Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [CD]
Line_3 $$ PrintWriter out = null --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_17 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_26 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_111 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_193 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_292 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_300 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_306 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_314 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_330 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_334 $$ out = res.getWriter() --> Line_356 $$ out.println("Your last download was at " + lastDownloadDate + ". You may download your last inputs only once a day. Sorry for this, but we need to be carefull with resources. If you want to put your last inputs on your homepage best use some sort of cache (e. g. use wget for downlaod with crond and link to this static resource))!") [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_358 $$ NmrshiftdbUserPeer.executeStatement("UPDATE TURBINE_USER SET LAST_DOWNLOAD_DATE=NOW() where LOGIN_NAME=\"" + user.getUserName() + "\";") [CD]
Line_346 $$ NmrshiftdbUser user = null --> Line_358 $$ NmrshiftdbUserPeer.executeStatement("UPDATE TURBINE_USER SET LAST_DOWNLOAD_DATE=NOW() where LOGIN_NAME=\"" + user.getUserName() + "\";") [FD]
Line_348 $$ user = NmrshiftdbUserPeer.getByName(req.getParameter("username")) --> Line_358 $$ NmrshiftdbUserPeer.executeStatement("UPDATE TURBINE_USER SET LAST_DOWNLOAD_DATE=NOW() where LOGIN_NAME=\"" + user.getUserName() + "\";") [FD]
Line_346 $$ NmrshiftdbUser user = null --> Line_360 $$ String query = "select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\"true\" and SPECTRUM.USER_ID=" + user.getUserId() + " order by MOLECULE.DATE desc;" [FD]
Line_348 $$ user = NmrshiftdbUserPeer.getByName(req.getParameter("username")) --> Line_360 $$ String query = "select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\"true\" and SPECTRUM.USER_ID=" + user.getUserId() + " order by MOLECULE.DATE desc;" [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_361 $$ l = NmrshiftdbUserPeer.executeQuery(query) [CD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_361 $$ l = NmrshiftdbUserPeer.executeQuery(query) [FD]
Line_39 $$ String query = "select distinct MOLECULE.MOLECULE_ID from MOLECULE, SPECTRUM where SPECTRUM.MOLECULE_ID = MOLECULE.MOLECULE_ID and SPECTRUM.REVIEW_FLAG =\"true\" order by MOLECULE.DATE desc;" --> Line_361 $$ l = NmrshiftdbUserPeer.executeQuery(query) [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_362 $$ String url = javax.servlet.http.HttpUtils.getRequestURL(req).toString() [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_362 $$ String url = javax.servlet.http.HttpUtils.getRequestURL(req).toString() [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_363 $$ url = url.substring(0, url.length() - 17) [CD]
Line_362 $$ String url = javax.servlet.http.HttpUtils.getRequestURL(req).toString() --> Line_363 $$ url = url.substring(0, url.length() - 17) [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [CD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_212 $$ int i = 0 --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_276 $$ i = 0 --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_25 $$ int numbertoexport = 10 --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_29 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_340 $$ numbertoexport = Integer.parseInt(req.getParameter("numbertoexport")) --> Line_364 $$ for (int i = 0; i < numbertoexport; i++) [FD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_365 $$ if (i == l.size()) [CD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_365 $$ if (i == l.size()) [FD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_365 $$ if (i == l.size()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_365 $$ if (i == l.size()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_365 $$ if (i == l.size()) [FD]
Line_212 $$ int i = 0 --> Line_365 $$ if (i == l.size()) [FD]
Line_276 $$ i = 0 --> Line_365 $$ if (i == l.size()) [FD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_365 $$ if (i == l.size()) [FD]
Line_361 $$ l = NmrshiftdbUserPeer.executeQuery(query) --> Line_365 $$ if (i == l.size()) [FD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [CD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_361 $$ l = NmrshiftdbUserPeer.executeQuery(query) --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_212 $$ int i = 0 --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_276 $$ i = 0 --> Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) [FD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_367 $$ parameters.add(new String("<a href=\"" + url + "/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=" + mol.getMoleculeId() + "\"><img src=\"" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + "?nmrshiftdbaction=exportmol&spectrumid=" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + "&format=jpeg&size=150x150&backcolor=12632256\"></a>")) [CD]
Line_95 $$ Map parameters = new HashMap() --> Line_367 $$ parameters.add(new String("<a href=\"" + url + "/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=" + mol.getMoleculeId() + "\"><img src=\"" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + "?nmrshiftdbaction=exportmol&spectrumid=" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + "&format=jpeg&size=150x150&backcolor=12632256\"></a>")) [FD]
Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_367 $$ parameters.add(new String("<a href=\"" + url + "/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=" + mol.getMoleculeId() + "\"><img src=\"" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + "?nmrshiftdbaction=exportmol&spectrumid=" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + "&format=jpeg&size=150x150&backcolor=12632256\"></a>")) [FD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_367 $$ parameters.add(new String("<a href=\"" + url + "/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=" + mol.getMoleculeId() + "\"><img src=\"" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + "?nmrshiftdbaction=exportmol&spectrumid=" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + "&format=jpeg&size=150x150&backcolor=12632256\"></a>")) [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_367 $$ parameters.add(new String("<a href=\"" + url + "/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=" + mol.getMoleculeId() + "\"><img src=\"" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + "?nmrshiftdbaction=exportmol&spectrumid=" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + "&format=jpeg&size=150x150&backcolor=12632256\"></a>")) [FD]
Line_286 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter("moleculeid"))) --> Line_367 $$ parameters.add(new String("<a href=\"" + url + "/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=" + mol.getMoleculeId() + "\"><img src=\"" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + "?nmrshiftdbaction=exportmol&spectrumid=" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + "&format=jpeg&size=150x150&backcolor=12632256\"></a>")) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_367 $$ parameters.add(new String("<a href=\"" + url + "/portal/pane0/Results?nmrshiftdbaction=showDetailsFromHome&molNumber=" + mol.getMoleculeId() + "\"><img src=\"" + javax.servlet.http.HttpUtils.getRequestURL(req).toString() + "?nmrshiftdbaction=exportmol&spectrumid=" + ((DBSpectrum) mol.getDBSpectrums().get(0)).getSpectrumId() + "&format=jpeg&size=150x150&backcolor=12632256\"></a>")) [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_370 $$ context.put("results", parameters) [CD]
Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) --> Line_370 $$ context.put("results", parameters) [FD]
Line_95 $$ Map parameters = new HashMap() --> Line_370 $$ context.put("results", parameters) [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_372 $$ Velocity.mergeTemplate("lateststructures.vm", "ISO-8859-1", context, w) [CD]
Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) --> Line_372 $$ Velocity.mergeTemplate("lateststructures.vm", "ISO-8859-1", context, w) [FD]
Line_295 $$ StringWriter w = new StringWriter() --> Line_372 $$ Velocity.mergeTemplate("lateststructures.vm", "ISO-8859-1", context, w) [FD]
Line_355 $$ if (((new Date().getTime() - lastDownloadDate.getTime()) / 3600000) < 24) --> Line_373 $$ out.println(w.toString()) [CD]
Line_3 $$ PrintWriter out = null --> Line_373 $$ out.println(w.toString()) [FD]
Line_17 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_26 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_111 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_193 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_292 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_300 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_306 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_314 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_330 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_334 $$ out = res.getWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_295 $$ StringWriter w = new StringWriter() --> Line_373 $$ out.println(w.toString()) [FD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_377 $$ if (action.equals("exportspec")) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_378 $$ if (format.equals("txt")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_378 $$ if (format.equals("txt")) [FD]
Line_289 $$ format = action --> Line_378 $$ if (format.equals("txt")) [FD]
Line_303 $$ if (format == null) --> Line_378 $$ if (format.equals("txt")) [FD]
Line_378 $$ if (format.equals("txt")) --> Line_379 $$ String lastsearchtype = req.getParameter("lastsearchtype") [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_379 $$ String lastsearchtype = req.getParameter("lastsearchtype") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_380 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [CD]
Line_379 $$ String lastsearchtype = req.getParameter("lastsearchtype") --> Line_380 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_380 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) --> Line_381 $$ List l = ParseUtils.parseSpectrumFromSpecFile(req.getParameter("lastsearchvalues")) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_381 $$ List l = ParseUtils.parseSpectrumFromSpecFile(req.getParameter("lastsearchvalues")) [FD]
Line_380 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) --> Line_382 $$ spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [CD]
Line_11 $$ DBSpectrum spectrum = null --> Line_382 $$ spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_382 $$ spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_18 $$ List l = DBSpectrumPeer.executeQuery("select SPECTRUM_ID from SPECTRUM limit 1") --> Line_382 $$ spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_361 $$ l = NmrshiftdbUserPeer.executeQuery(query) --> Line_382 $$ spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_379 $$ String lastsearchtype = req.getParameter("lastsearchtype") --> Line_382 $$ spectrum.initSimilarity(l, lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_378 $$ if (format.equals("txt")) --> Line_384 $$ Vector v = spectrum.getOptions() [CD]
Line_11 $$ DBSpectrum spectrum = null --> Line_384 $$ Vector v = spectrum.getOptions() [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_384 $$ Vector v = spectrum.getOptions() [FD]
Line_378 $$ if (format.equals("txt")) --> Line_385 $$ DBMolecule mol = spectrum.getDBMolecule() [CD]
Line_11 $$ DBSpectrum spectrum = null --> Line_385 $$ DBMolecule mol = spectrum.getDBMolecule() [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_385 $$ DBMolecule mol = spectrum.getDBMolecule() [FD]
Line_378 $$ if (format.equals("txt")) --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [CD]
Line_3 $$ PrintWriter out = null --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_17 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_26 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_111 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_193 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_292 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_300 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_306 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_314 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_330 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_334 $$ out = res.getWriter() --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_366 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_162 $$ DBMolecule mol = (DBMolecule) v.get(i) --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_43 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(((Record) l.get(i)).getValue(1).asInt())) --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_286 $$ DBMolecule mol = DBMoleculePeer.retrieveByPK(new NumberKey(req.getParameter("moleculeid"))) --> Line_386 $$ out.print(mol.getChemicalNamesAsOneString(false) + mol.getMolecularFormula(false) + "; " + mol.getMolecularWeight() + " Dalton\n\r") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_387 $$ out.print("\n\rAtom\t") [CD]
Line_3 $$ PrintWriter out = null --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_17 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_26 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_111 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_193 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_292 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_300 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_306 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_314 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_330 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_334 $$ out = res.getWriter() --> Line_387 $$ out.print("\n\rAtom\t") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [CD]
Line_11 $$ DBSpectrum spectrum = null --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_3 $$ PrintWriter out = null --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_17 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_26 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_111 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_193 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_292 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_300 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_306 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_314 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_330 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_334 $$ out = res.getWriter() --> Line_388 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_378 $$ if (format.equals("txt")) --> Line_389 $$ out.print("Meas.") [CD]
Line_3 $$ PrintWriter out = null --> Line_389 $$ out.print("Meas.") [FD]
Line_17 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_26 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_111 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_193 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_292 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_300 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_306 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_314 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_330 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_334 $$ out = res.getWriter() --> Line_389 $$ out.print("Meas.") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_390 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [CD]
Line_379 $$ String lastsearchtype = req.getParameter("lastsearchtype") --> Line_390 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_390 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) --> Line_391 $$ out.print("\tInput\tDiff") [CD]
Line_3 $$ PrintWriter out = null --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_17 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_26 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_111 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_193 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_292 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_300 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_306 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_314 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_330 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_334 $$ out = res.getWriter() --> Line_391 $$ out.print("\tInput\tDiff") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_393 $$ out.print("\n\r") [CD]
Line_3 $$ PrintWriter out = null --> Line_393 $$ out.print("\n\r") [FD]
Line_17 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_26 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_111 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_193 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_292 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_300 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_306 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_314 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_330 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_334 $$ out = res.getWriter() --> Line_393 $$ out.print("\n\r") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_394 $$ out.print("No.\t") [CD]
Line_3 $$ PrintWriter out = null --> Line_394 $$ out.print("No.\t") [FD]
Line_17 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_26 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_111 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_193 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_292 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_300 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_306 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_314 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_330 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_334 $$ out = res.getWriter() --> Line_394 $$ out.print("No.\t") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [CD]
Line_11 $$ DBSpectrum spectrum = null --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_3 $$ PrintWriter out = null --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_17 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_26 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_111 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_193 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_292 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_300 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_306 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_314 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_330 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_334 $$ out = res.getWriter() --> Line_395 $$ if (spectrum.getDBSpectrumType().getElementSymbol() == ("H")) [FD]
Line_378 $$ if (format.equals("txt")) --> Line_396 $$ out.print("Shift") [CD]
Line_3 $$ PrintWriter out = null --> Line_396 $$ out.print("Shift") [FD]
Line_17 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_26 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_111 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_193 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_292 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_300 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_306 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_314 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_330 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_334 $$ out = res.getWriter() --> Line_396 $$ out.print("Shift") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_397 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [CD]
Line_379 $$ String lastsearchtype = req.getParameter("lastsearchtype") --> Line_397 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_397 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) --> Line_398 $$ out.print("\tShift\tM-I") [CD]
Line_3 $$ PrintWriter out = null --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_17 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_26 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_111 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_193 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_292 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_300 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_306 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_314 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_330 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_334 $$ out = res.getWriter() --> Line_398 $$ out.print("\tShift\tM-I") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_400 $$ out.print("\n\r") [CD]
Line_3 $$ PrintWriter out = null --> Line_400 $$ out.print("\n\r") [FD]
Line_17 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_26 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_111 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_193 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_292 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_300 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_306 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_314 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_330 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_334 $$ out = res.getWriter() --> Line_400 $$ out.print("\n\r") [FD]
Line_378 $$ if (format.equals("txt")) --> Line_401 $$ for (int i = 0; i < v.size(); i++) [CD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_212 $$ int i = 0 --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_276 $$ i = 0 --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) --> Line_401 $$ for (int i = 0; i < v.size(); i++) [FD]
Line_401 $$ for (int i = 0; i < v.size(); i++) --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [CD]
Line_401 $$ for (int i = 0; i < v.size(); i++) --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_3 $$ PrintWriter out = null --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_17 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_26 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_111 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_193 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_292 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_300 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_306 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_314 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_330 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_334 $$ out = res.getWriter() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_212 $$ int i = 0 --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_276 $$ i = 0 --> Line_402 $$ out.print(((ValuesForVelocityBean) v.get(i)).getDisplayText() + "\t" + ((ValuesForVelocityBean) v.get(i)).getRange()) [FD]
Line_401 $$ for (int i = 0; i < v.size(); i++) --> Line_403 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [CD]
Line_379 $$ String lastsearchtype = req.getParameter("lastsearchtype") --> Line_403 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) [FD]
Line_403 $$ if (lastsearchtype.equals(NmrshiftdbConstants.TOTALSPECTRUM) || lastsearchtype.equals(NmrshiftdbConstants.SUBSPECTRUM)) --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [CD]
Line_3 $$ PrintWriter out = null --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_17 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_26 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_111 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_193 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_292 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_300 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_306 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_314 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_330 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_334 $$ out = res.getWriter() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_401 $$ for (int i = 0; i < v.size(); i++) --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_364 $$ for (int i = 0; i < numbertoexport; i++) --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_207 $$ for (int i = 0; i < entry.getSize(); i++) --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_153 $$ for (int i = 0; i < v.size(); i++) --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_41 $$ for (int i = 0; i < numbertoexport; i++) --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_212 $$ int i = 0 --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_276 $$ i = 0 --> Line_404 $$ out.print("\t" + ((ValuesForVelocityBean) v.get(i)).getNameForElements() + "\t" + ((ValuesForVelocityBean) v.get(i)).getDelta()) [FD]
Line_401 $$ for (int i = 0; i < v.size(); i++) --> Line_406 $$ out.print("\n\r") [CD]
Line_3 $$ PrintWriter out = null --> Line_406 $$ out.print("\n\r") [FD]
Line_17 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_26 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_111 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_193 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_292 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_300 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_306 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_314 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_330 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_334 $$ out = res.getWriter() --> Line_406 $$ out.print("\n\r") [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_409 $$ if (format.equals("simplehtml")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_409 $$ if (format.equals("simplehtml")) [FD]
Line_289 $$ format = action --> Line_409 $$ if (format.equals("simplehtml")) [FD]
Line_303 $$ if (format == null) --> Line_409 $$ if (format.equals("simplehtml")) [FD]
Line_409 $$ if (format.equals("simplehtml")) --> Line_410 $$ String i1 = export.getImage(false, "jpeg", ServletUtils.expandRelative(this.getServletConfig(), "/nmrshiftdbhtml") + "/tmp/" + System.currentTimeMillis(), true) [CD]
Line_12 $$ Export export = null --> Line_410 $$ String i1 = export.getImage(false, "jpeg", ServletUtils.expandRelative(this.getServletConfig(), "/nmrshiftdbhtml") + "/tmp/" + System.currentTimeMillis(), true) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_410 $$ String i1 = export.getImage(false, "jpeg", ServletUtils.expandRelative(this.getServletConfig(), "/nmrshiftdbhtml") + "/tmp/" + System.currentTimeMillis(), true) [FD]
Line_409 $$ if (format.equals("simplehtml")) --> Line_411 $$ export.pictures[0] = new File(i1).getName() [CD]
Line_409 $$ if (format.equals("simplehtml")) --> Line_412 $$ String i2 = export.getImage(true, "jpeg", ServletUtils.expandRelative(this.getServletConfig(), "/nmrshiftdbhtml") + "/tmp/" + System.currentTimeMillis(), true) [CD]
Line_12 $$ Export export = null --> Line_412 $$ String i2 = export.getImage(true, "jpeg", ServletUtils.expandRelative(this.getServletConfig(), "/nmrshiftdbhtml") + "/tmp/" + System.currentTimeMillis(), true) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_412 $$ String i2 = export.getImage(true, "jpeg", ServletUtils.expandRelative(this.getServletConfig(), "/nmrshiftdbhtml") + "/tmp/" + System.currentTimeMillis(), true) [FD]
Line_409 $$ if (format.equals("simplehtml")) --> Line_413 $$ export.pictures[1] = new File(i2).getName() [CD]
Line_409 $$ if (format.equals("simplehtml")) --> Line_414 $$ String docbook = export.getHtml() [CD]
Line_12 $$ Export export = null --> Line_414 $$ String docbook = export.getHtml() [FD]
Line_282 $$ export = new Export(spectrum) --> Line_414 $$ String docbook = export.getHtml() [FD]
Line_409 $$ if (format.equals("simplehtml")) --> Line_415 $$ out.print(docbook) [CD]
Line_3 $$ PrintWriter out = null --> Line_415 $$ out.print(docbook) [FD]
Line_17 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_26 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_111 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_193 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_292 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_300 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_306 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_314 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_330 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_334 $$ out = res.getWriter() --> Line_415 $$ out.print(docbook) [FD]
Line_414 $$ String docbook = export.getHtml() --> Line_415 $$ out.print(docbook) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) [FD]
Line_289 $$ format = action --> Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) [FD]
Line_303 $$ if (format == null) --> Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_418 $$ String svgSpec = export.getSpecSvg(400, 200) [CD]
Line_12 $$ Export export = null --> Line_418 $$ String svgSpec = export.getSpecSvg(400, 200) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_418 $$ String svgSpec = export.getSpecSvg(400, 200) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_419 $$ String svgspecfile = relativepath + "/tmp/" + System.currentTimeMillis() + "s.svg" [CD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_420 $$ new FileOutputStream(svgspecfile).write(svgSpec.getBytes()) [CD]
Line_418 $$ String svgSpec = export.getSpecSvg(400, 200) --> Line_420 $$ new FileOutputStream(svgspecfile).write(svgSpec.getBytes()) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_421 $$ export.pictures[1] = svgspecfile [CD]
Line_419 $$ String svgspecfile = relativepath + "/tmp/" + System.currentTimeMillis() + "s.svg" --> Line_421 $$ export.pictures[1] = svgspecfile [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_422 $$ String molSvg = export.getMolSvg(true) [CD]
Line_12 $$ Export export = null --> Line_422 $$ String molSvg = export.getMolSvg(true) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_422 $$ String molSvg = export.getMolSvg(true) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_423 $$ String svgmolfile = relativepath + "/tmp/" + System.currentTimeMillis() + "m.svg" [CD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_424 $$ new FileOutputStream(svgmolfile).write(molSvg.getBytes()) [CD]
Line_422 $$ String molSvg = export.getMolSvg(true) --> Line_424 $$ new FileOutputStream(svgmolfile).write(molSvg.getBytes()) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_425 $$ export.pictures[0] = svgmolfile [CD]
Line_423 $$ String svgmolfile = relativepath + "/tmp/" + System.currentTimeMillis() + "m.svg" --> Line_425 $$ export.pictures[0] = svgmolfile [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_426 $$ String docbook = export.getDocbook("pdf", "SVG") [CD]
Line_12 $$ Export export = null --> Line_426 $$ String docbook = export.getDocbook("pdf", "SVG") [FD]
Line_282 $$ export = new Export(spectrum) --> Line_426 $$ String docbook = export.getDocbook("pdf", "SVG") [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_427 $$ TransformerFactory tFactory = TransformerFactory.newInstance() [CD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_428 $$ Transformer transformer = tFactory.newTransformer(new StreamSource("file:" + GeneralUtils.getNmrshiftdbProperty("docbookxslpath", getServletConfig()) + "/fo/docbook.xsl")) [CD]
Line_427 $$ TransformerFactory tFactory = TransformerFactory.newInstance() --> Line_428 $$ Transformer transformer = tFactory.newTransformer(new StreamSource("file:" + GeneralUtils.getNmrshiftdbProperty("docbookxslpath", getServletConfig()) + "/fo/docbook.xsl")) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_430 $$ transformer.transform(new StreamSource(new StringReader(docbook)), new StreamResult(baos)) [CD]
Line_428 $$ Transformer transformer = tFactory.newTransformer(new StreamSource("file:" + GeneralUtils.getNmrshiftdbProperty("docbookxslpath", getServletConfig()) + "/fo/docbook.xsl")) --> Line_430 $$ transformer.transform(new StreamSource(new StringReader(docbook)), new StreamResult(baos)) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_431 $$ FopFactory fopFactory = FopFactory.newInstance() [CD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_432 $$ FOUserAgent foUserAgent = fopFactory.newFOUserAgent() [CD]
Line_431 $$ FopFactory fopFactory = FopFactory.newInstance() --> Line_432 $$ FOUserAgent foUserAgent = fopFactory.newFOUserAgent() [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_433 $$ OutputStream out2 = new ByteArrayOutputStream() [CD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) [CD]
Line_431 $$ FopFactory fopFactory = FopFactory.newInstance() --> Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) [FD]
Line_432 $$ FOUserAgent foUserAgent = fopFactory.newFOUserAgent() --> Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) [FD]
Line_433 $$ OutputStream out2 = new ByteArrayOutputStream() --> Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) [FD]
Line_289 $$ format = action --> Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) [FD]
Line_303 $$ if (format == null) --> Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_435 $$ TransformerFactory factory = TransformerFactory.newInstance() [CD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_436 $$ transformer = factory.newTransformer() [CD]
Line_428 $$ Transformer transformer = tFactory.newTransformer(new StreamSource("file:" + GeneralUtils.getNmrshiftdbProperty("docbookxslpath", getServletConfig()) + "/fo/docbook.xsl")) --> Line_436 $$ transformer = factory.newTransformer() [FD]
Line_435 $$ TransformerFactory factory = TransformerFactory.newInstance() --> Line_436 $$ transformer = factory.newTransformer() [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_437 $$ Source src = new StreamSource(new StringReader(baos.toString())) [CD]
Line_147 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_437 $$ Source src = new StreamSource(new StringReader(baos.toString())) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_438 $$ Result res2 = new SAXResult(fop.getDefaultHandler()) [CD]
Line_434 $$ Fop fop = fopFactory.newFop(format.equals("rtf") ? MimeConstants.MIME_RTF : MimeConstants.MIME_PDF, foUserAgent, out2) --> Line_438 $$ Result res2 = new SAXResult(fop.getDefaultHandler()) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_439 $$ transformer.transform(src, res2) [CD]
Line_428 $$ Transformer transformer = tFactory.newTransformer(new StreamSource("file:" + GeneralUtils.getNmrshiftdbProperty("docbookxslpath", getServletConfig()) + "/fo/docbook.xsl")) --> Line_439 $$ transformer.transform(src, res2) [FD]
Line_436 $$ transformer = factory.newTransformer() --> Line_439 $$ transformer.transform(src, res2) [FD]
Line_437 $$ Source src = new StreamSource(new StringReader(baos.toString())) --> Line_439 $$ transformer.transform(src, res2) [FD]
Line_438 $$ Result res2 = new SAXResult(fop.getDefaultHandler()) --> Line_439 $$ transformer.transform(src, res2) [FD]
Line_417 $$ if (format.equals("pdf") || format.equals("rtf")) --> Line_440 $$ out.print(out2.toString()) [CD]
Line_3 $$ PrintWriter out = null --> Line_440 $$ out.print(out2.toString()) [FD]
Line_17 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_26 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_111 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_193 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_292 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_300 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_306 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_314 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_330 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_334 $$ out = res.getWriter() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_433 $$ OutputStream out2 = new ByteArrayOutputStream() --> Line_440 $$ out.print(out2.toString()) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_442 $$ if (format.equals("docbook")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_442 $$ if (format.equals("docbook")) [FD]
Line_289 $$ format = action --> Line_442 $$ if (format.equals("docbook")) [FD]
Line_303 $$ if (format == null) --> Line_442 $$ if (format.equals("docbook")) [FD]
Line_442 $$ if (format.equals("docbook")) --> Line_444 $$ new FileOutputStream(i1).write(export.getSpecSvg(300, 200).getBytes()) [CD]
Line_12 $$ Export export = null --> Line_444 $$ new FileOutputStream(i1).write(export.getSpecSvg(300, 200).getBytes()) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_444 $$ new FileOutputStream(i1).write(export.getSpecSvg(300, 200).getBytes()) [FD]
Line_442 $$ if (format.equals("docbook")) --> Line_445 $$ export.pictures[0] = new File(i1).getName() [CD]
Line_442 $$ if (format.equals("docbook")) --> Line_447 $$ new FileOutputStream(i2).write(export.getMolSvg(true).getBytes()) [CD]
Line_12 $$ Export export = null --> Line_447 $$ new FileOutputStream(i2).write(export.getMolSvg(true).getBytes()) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_447 $$ new FileOutputStream(i2).write(export.getMolSvg(true).getBytes()) [FD]
Line_442 $$ if (format.equals("docbook")) --> Line_448 $$ export.pictures[1] = new File(i2).getName() [CD]
Line_442 $$ if (format.equals("docbook")) --> Line_449 $$ String docbook = export.getDocbook("pdf", "SVG") [CD]
Line_12 $$ Export export = null --> Line_449 $$ String docbook = export.getDocbook("pdf", "SVG") [FD]
Line_282 $$ export = new Export(spectrum) --> Line_449 $$ String docbook = export.getDocbook("pdf", "SVG") [FD]
Line_442 $$ if (format.equals("docbook")) --> Line_450 $$ String docbookfile = relativepath + "/tmp/" + System.currentTimeMillis() + ".xml" [CD]
Line_442 $$ if (format.equals("docbook")) --> Line_451 $$ new FileOutputStream(docbookfile).write(docbook.getBytes()) [CD]
Line_414 $$ String docbook = export.getHtml() --> Line_451 $$ new FileOutputStream(docbookfile).write(docbook.getBytes()) [FD]
Line_442 $$ if (format.equals("docbook")) --> Line_452 $$ ByteArrayOutputStream baos = export.makeZip(new String[] [CD]
Line_12 $$ Export export = null --> Line_452 $$ ByteArrayOutputStream baos = export.makeZip(new String[] [FD]
Line_282 $$ export = new Export(spectrum) --> Line_452 $$ ByteArrayOutputStream baos = export.makeZip(new String[] [FD]
Line_442 $$ if (format.equals("docbook")) --> Line_453 $$ outstream.write(baos.toByteArray()) [CD]
Line_4 $$ ServletOutputStream outstream = null --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_310 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_318 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_322 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_326 $$ outstream = res.getOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_147 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream() --> Line_453 $$ outstream.write(baos.toByteArray()) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_455 $$ if (format.equals("svg")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_455 $$ if (format.equals("svg")) [FD]
Line_289 $$ format = action --> Line_455 $$ if (format.equals("svg")) [FD]
Line_303 $$ if (format == null) --> Line_455 $$ if (format.equals("svg")) [FD]
Line_455 $$ if (format.equals("svg")) --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [CD]
Line_3 $$ PrintWriter out = null --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_17 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_26 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_111 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_193 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_292 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_300 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_306 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_314 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_330 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_334 $$ out = res.getWriter() --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_12 $$ Export export = null --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_456 $$ out.print(export.getSpecSvg(400, 200)) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_458 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_458 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [FD]
Line_289 $$ format = action --> Line_458 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [FD]
Line_303 $$ if (format == null) --> Line_458 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [FD]
Line_12 $$ Export export = null --> Line_459 $$ InputStream is = new FileInputStream(export.getImage(false, format, relativepath + "/tmp/" + System.currentTimeMillis(), true)) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_459 $$ InputStream is = new FileInputStream(export.getImage(false, format, relativepath + "/tmp/" + System.currentTimeMillis(), true)) [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_459 $$ InputStream is = new FileInputStream(export.getImage(false, format, relativepath + "/tmp/" + System.currentTimeMillis(), true)) [FD]
Line_289 $$ format = action --> Line_459 $$ InputStream is = new FileInputStream(export.getImage(false, format, relativepath + "/tmp/" + System.currentTimeMillis(), true)) [FD]
Line_303 $$ if (format == null) --> Line_459 $$ InputStream is = new FileInputStream(export.getImage(false, format, relativepath + "/tmp/" + System.currentTimeMillis(), true)) [FD]
Line_458 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) --> Line_462 $$ while ((nRead = is.read(buf)) != -1) [CD]
Line_277 $$ while ((nRead = is.read(buf)) != -1) --> Line_462 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_462 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_186 $$ int nRead = 0 --> Line_462 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_184 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray()) --> Line_462 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_462 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_462 $$ while ((nRead = is.read(buf)) != -1) --> Line_463 $$ outstream.write(buf, 0, nRead) [CD]
Line_462 $$ while ((nRead = is.read(buf)) != -1) --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_4 $$ ServletOutputStream outstream = null --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_310 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_318 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_322 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_326 $$ outstream = res.getOutputStream() --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_277 $$ while ((nRead = is.read(buf)) != -1) --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_186 $$ int nRead = 0 --> Line_463 $$ outstream.write(buf, 0, nRead) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_466 $$ if (format.equals("cml")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_466 $$ if (format.equals("cml")) [FD]
Line_289 $$ format = action --> Line_466 $$ if (format.equals("cml")) [FD]
Line_303 $$ if (format == null) --> Line_466 $$ if (format.equals("cml")) [FD]
Line_466 $$ if (format.equals("cml")) --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [CD]
Line_3 $$ PrintWriter out = null --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_17 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_26 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_111 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_193 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_292 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_300 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_306 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_314 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_330 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_334 $$ out = res.getWriter() --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_11 $$ DBSpectrum spectrum = null --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_467 $$ out.print(spectrum.getCmlSpect().toXML()) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_469 $$ if (format.equals("cmlboth")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_469 $$ if (format.equals("cmlboth")) [FD]
Line_289 $$ format = action --> Line_469 $$ if (format.equals("cmlboth")) [FD]
Line_303 $$ if (format == null) --> Line_469 $$ if (format.equals("cmlboth")) [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_471 $$ cmlElement.addAttribute(new Attribute("convention", "nmrshiftdb-convention")) [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_471 $$ cmlElement.addAttribute(new Attribute("convention", "nmrshiftdb-convention")) [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_472 $$ cmlElement.setNamespaceURI("http://www.xml-cml.org/schema") [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_472 $$ cmlElement.setNamespaceURI("http://www.xml-cml.org/schema") [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_473 $$ Element parent = spectrum.getDBMolecule().getCML(1, spectrum.getDBSpectrumType().getName().equals("1H")) [CD]
Line_11 $$ DBSpectrum spectrum = null --> Line_473 $$ Element parent = spectrum.getDBMolecule().getCML(1, spectrum.getDBSpectrumType().getName().equals("1H")) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_473 $$ Element parent = spectrum.getDBMolecule().getCML(1, spectrum.getDBSpectrumType().getName().equals("1H")) [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_474 $$ nu.xom.Node cmldoc = parent.getChild(0) [CD]
Line_130 $$ Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1) --> Line_474 $$ nu.xom.Node cmldoc = parent.getChild(0) [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_475 $$ ((Element) cmldoc).setNamespaceURI("http://www.xml-cml.org/schema") [CD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_476 $$ parent.removeChildren() [CD]
Line_130 $$ Element parent = ((DBSpectrum) spectra.get(0)).getDBMolecule().getCML(1) --> Line_476 $$ parent.removeChildren() [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_477 $$ cmlElement.appendChild(cmldoc) [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_477 $$ cmlElement.appendChild(cmldoc) [FD]
Line_131 $$ nu.xom.Node cmldoc = parent.getChild(0) --> Line_477 $$ cmlElement.appendChild(cmldoc) [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_478 $$ Element parentspec = spectrum.getCmlSpect() [CD]
Line_11 $$ DBSpectrum spectrum = null --> Line_478 $$ Element parentspec = spectrum.getCmlSpect() [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_478 $$ Element parentspec = spectrum.getCmlSpect() [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_479 $$ Node spectrumel = parentspec.getChild(0) [CD]
Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() --> Line_479 $$ Node spectrumel = parentspec.getChild(0) [FD]
Line_478 $$ Element parentspec = spectrum.getCmlSpect() --> Line_479 $$ Node spectrumel = parentspec.getChild(0) [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_480 $$ parentspec.removeChildren() [CD]
Line_136 $$ Element parentspec = ((DBSpectrum) spectra.get(k)).getCmlSpect() --> Line_480 $$ parentspec.removeChildren() [FD]
Line_478 $$ Element parentspec = spectrum.getCmlSpect() --> Line_480 $$ parentspec.removeChildren() [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_481 $$ cmlElement.appendChild(spectrumel) [CD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_481 $$ cmlElement.appendChild(spectrumel) [FD]
Line_137 $$ Node spectrumel = parentspec.getChild(0) --> Line_481 $$ cmlElement.appendChild(spectrumel) [FD]
Line_479 $$ Node spectrumel = parentspec.getChild(0) --> Line_481 $$ cmlElement.appendChild(spectrumel) [FD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_482 $$ ((Element) spectrumel).setNamespaceURI("http://www.xml-cml.org/schema") [CD]
Line_469 $$ if (format.equals("cmlboth")) --> Line_483 $$ out.write(cmlElement.toXML()) [CD]
Line_3 $$ PrintWriter out = null --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_17 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_26 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_111 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_193 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_292 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_300 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_306 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_314 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_330 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_334 $$ out = res.getWriter() --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_127 $$ Element cmlElement = new Element("cml") --> Line_483 $$ out.write(cmlElement.toXML()) [FD]
Line_377 $$ if (action.equals("exportspec")) --> Line_485 $$ if (format.indexOf("exsection") == 0) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_485 $$ if (format.indexOf("exsection") == 0) [FD]
Line_289 $$ format = action --> Line_485 $$ if (format.indexOf("exsection") == 0) [FD]
Line_303 $$ if (format == null) --> Line_485 $$ if (format.indexOf("exsection") == 0) [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_486 $$ StringTokenizer st = new StringTokenizer(format, "-") [CD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_487 $$ st.nextToken() [CD]
Line_228 $$ StringTokenizer st = new StringTokenizer(code, "()/") --> Line_487 $$ st.nextToken() [FD]
Line_486 $$ StringTokenizer st = new StringTokenizer(format, "-") --> Line_487 $$ st.nextToken() [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_488 $$ String template = st.nextToken() [CD]
Line_228 $$ StringTokenizer st = new StringTokenizer(code, "()/") --> Line_488 $$ String template = st.nextToken() [FD]
Line_486 $$ StringTokenizer st = new StringTokenizer(format, "-") --> Line_488 $$ String template = st.nextToken() [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_490 $$ crit.add(DBSpectrumPeer.USER_ID, spectrum.getUserId()) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_490 $$ crit.add(DBSpectrumPeer.USER_ID, spectrum.getUserId()) [FD]
Line_11 $$ DBSpectrum spectrum = null --> Line_490 $$ crit.add(DBSpectrumPeer.USER_ID, spectrum.getUserId()) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_490 $$ crit.add(DBSpectrumPeer.USER_ID, spectrum.getUserId()) [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_491 $$ Vector v = spectrum.getDBMolecule().getDBSpectrums(crit) [CD]
Line_114 $$ Criteria crit = new Criteria() --> Line_491 $$ Vector v = spectrum.getDBMolecule().getDBSpectrums(crit) [FD]
Line_11 $$ DBSpectrum spectrum = null --> Line_491 $$ Vector v = spectrum.getDBMolecule().getDBSpectrums(crit) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_491 $$ Vector v = spectrum.getDBMolecule().getDBSpectrums(crit) [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_493 $$ context.put("spectra", v) [CD]
Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) --> Line_493 $$ context.put("spectra", v) [FD]
Line_51 $$ Vector v = mol.getDBCanonicalNames() --> Line_493 $$ context.put("spectra", v) [FD]
Line_152 $$ Vector v = DBMoleculePeer.doSelect(crit) --> Line_493 $$ context.put("spectra", v) [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_494 $$ context.put("molecule", spectrum.getDBMolecule()) [CD]
Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) --> Line_494 $$ context.put("molecule", spectrum.getDBMolecule()) [FD]
Line_11 $$ DBSpectrum spectrum = null --> Line_494 $$ context.put("molecule", spectrum.getDBMolecule()) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_494 $$ context.put("molecule", spectrum.getDBMolecule()) [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_496 $$ Velocity.mergeTemplate("exporttemplates/" + template, "ISO-8859-1", context, w) [CD]
Line_294 $$ VelocityContext context = PredictPortlet.getContext(session, true, true, new StringBuffer(), getServletConfig(), req, true) --> Line_496 $$ Velocity.mergeTemplate("exporttemplates/" + template, "ISO-8859-1", context, w) [FD]
Line_295 $$ StringWriter w = new StringWriter() --> Line_496 $$ Velocity.mergeTemplate("exporttemplates/" + template, "ISO-8859-1", context, w) [FD]
Line_485 $$ if (format.indexOf("exsection") == 0) --> Line_497 $$ out.write(w.toString()) [CD]
Line_3 $$ PrintWriter out = null --> Line_497 $$ out.write(w.toString()) [FD]
Line_17 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_26 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_111 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_193 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_292 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_300 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_306 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_314 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_330 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_334 $$ out = res.getWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_295 $$ StringWriter w = new StringWriter() --> Line_497 $$ out.write(w.toString()) [FD]
Line_6 $$ String action = req.getParameter("nmrshiftdbaction") --> Line_500 $$ if (action.equals("exportmol")) [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_501 $$ int width = -1 [CD]
Line_500 $$ if (action.equals("exportmol")) --> Line_502 $$ int height = -1 [CD]
Line_500 $$ if (action.equals("exportmol")) --> Line_503 $$ if (req.getParameter("size") != null) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_503 $$ if (req.getParameter("size") != null) [FD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_504 $$ StringTokenizer st = new StringTokenizer(req.getParameter("size"), "x") [FD]
Line_503 $$ if (req.getParameter("size") != null) --> Line_505 $$ width = Integer.parseInt(st.nextToken()) [CD]
Line_501 $$ int width = -1 --> Line_505 $$ width = Integer.parseInt(st.nextToken()) [FD]
Line_228 $$ StringTokenizer st = new StringTokenizer(code, "()/") --> Line_505 $$ width = Integer.parseInt(st.nextToken()) [FD]
Line_486 $$ StringTokenizer st = new StringTokenizer(format, "-") --> Line_505 $$ width = Integer.parseInt(st.nextToken()) [FD]
Line_503 $$ if (req.getParameter("size") != null) --> Line_506 $$ height = Integer.parseInt(st.nextToken()) [CD]
Line_502 $$ int height = -1 --> Line_506 $$ height = Integer.parseInt(st.nextToken()) [FD]
Line_228 $$ StringTokenizer st = new StringTokenizer(code, "()/") --> Line_506 $$ height = Integer.parseInt(st.nextToken()) [FD]
Line_486 $$ StringTokenizer st = new StringTokenizer(format, "-") --> Line_506 $$ height = Integer.parseInt(st.nextToken()) [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_508 $$ boolean shownumbers = true [CD]
Line_500 $$ if (action.equals("exportmol")) --> Line_509 $$ if (req.getParameter("shownumbers") != null && req.getParameter("shownumbers").equals("false")) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_509 $$ if (req.getParameter("shownumbers") != null && req.getParameter("shownumbers").equals("false")) [FD]
Line_509 $$ if (req.getParameter("shownumbers") != null && req.getParameter("shownumbers").equals("false")) --> Line_510 $$ shownumbers = false [CD]
Line_508 $$ boolean shownumbers = true --> Line_510 $$ shownumbers = false [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_512 $$ if (req.getParameter("backcolor") != null) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_512 $$ if (req.getParameter("backcolor") != null) [FD]
Line_512 $$ if (req.getParameter("backcolor") != null) --> Line_513 $$ export.backColor = new Color(Integer.parseInt(req.getParameter("backcolor"))) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_513 $$ export.backColor = new Color(Integer.parseInt(req.getParameter("backcolor"))) [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_515 $$ if (req.getParameter("markatom") != null) [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_515 $$ if (req.getParameter("markatom") != null) [FD]
Line_515 $$ if (req.getParameter("markatom") != null) --> Line_516 $$ export.selected = Integer.parseInt(req.getParameter("markatom")) - 1 [CD]
Line_2 $$ public void doPost(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException --> Line_516 $$ export.selected = Integer.parseInt(req.getParameter("markatom")) - 1 [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_518 $$ if (format.equals("svg")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_518 $$ if (format.equals("svg")) [FD]
Line_289 $$ format = action --> Line_518 $$ if (format.equals("svg")) [FD]
Line_303 $$ if (format == null) --> Line_518 $$ if (format.equals("svg")) [FD]
Line_518 $$ if (format.equals("svg")) --> Line_519 $$ out.print(export.getMolSvg(true)) [CD]
Line_3 $$ PrintWriter out = null --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_17 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_26 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_111 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_193 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_292 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_300 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_306 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_314 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_330 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_334 $$ out = res.getWriter() --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_12 $$ Export export = null --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_519 $$ out.print(export.getMolSvg(true)) [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_521 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_521 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [FD]
Line_289 $$ format = action --> Line_521 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [FD]
Line_303 $$ if (format == null) --> Line_521 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) [FD]
Line_12 $$ Export export = null --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_282 $$ export = new Export(spectrum) --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_13 $$ String format = req.getParameter("format") --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_289 $$ format = action --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_303 $$ if (format == null) --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_501 $$ int width = -1 --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_505 $$ width = Integer.parseInt(st.nextToken()) --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_502 $$ int height = -1 --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_506 $$ height = Integer.parseInt(st.nextToken()) --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_508 $$ boolean shownumbers = true --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_510 $$ shownumbers = false --> Line_522 $$ InputStream is = new FileInputStream(export.getImage(true, format, relativepath + "/tmp/" + System.currentTimeMillis(), width, height, shownumbers, null)) [FD]
Line_521 $$ if (format.equals("tiff") || format.equals("jpeg") || format.equals("png")) --> Line_525 $$ while ((nRead = is.read(buf)) != -1) [CD]
Line_462 $$ while ((nRead = is.read(buf)) != -1) --> Line_525 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_277 $$ while ((nRead = is.read(buf)) != -1) --> Line_525 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_525 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_186 $$ int nRead = 0 --> Line_525 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_184 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray()) --> Line_525 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_525 $$ while ((nRead = is.read(buf)) != -1) [FD]
Line_525 $$ while ((nRead = is.read(buf)) != -1) --> Line_526 $$ outstream.write(buf, 0, nRead) [CD]
Line_525 $$ while ((nRead = is.read(buf)) != -1) --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_4 $$ ServletOutputStream outstream = null --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_310 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_318 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_322 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_326 $$ outstream = res.getOutputStream() --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_185 $$ byte[] buf = new byte[32 * 1024] --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_462 $$ while ((nRead = is.read(buf)) != -1) --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_277 $$ while ((nRead = is.read(buf)) != -1) --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_187 $$ while ((nRead = is.read(buf)) != -1) --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_186 $$ int nRead = 0 --> Line_526 $$ outstream.write(buf, 0, nRead) [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_529 $$ if (format.equals("mdl")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_529 $$ if (format.equals("mdl")) [FD]
Line_289 $$ format = action --> Line_529 $$ if (format.equals("mdl")) [FD]
Line_303 $$ if (format == null) --> Line_529 $$ if (format.equals("mdl")) [FD]
Line_529 $$ if (format.equals("mdl")) --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [CD]
Line_3 $$ PrintWriter out = null --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_17 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_26 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_111 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_193 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_292 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_300 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_306 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_314 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_330 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_334 $$ out = res.getWriter() --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_11 $$ DBSpectrum spectrum = null --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_530 $$ out.println(spectrum.getDBMolecule().getStructureFile(1, false)) [FD]
Line_500 $$ if (action.equals("exportmol")) --> Line_532 $$ if (format.equals("cml")) [CD]
Line_13 $$ String format = req.getParameter("format") --> Line_532 $$ if (format.equals("cml")) [FD]
Line_289 $$ format = action --> Line_532 $$ if (format.equals("cml")) [FD]
Line_303 $$ if (format == null) --> Line_532 $$ if (format.equals("cml")) [FD]
Line_532 $$ if (format.equals("cml")) --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [CD]
Line_3 $$ PrintWriter out = null --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_17 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_26 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_111 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_193 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_292 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_300 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_306 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_314 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_330 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_334 $$ out = res.getWriter() --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_11 $$ DBSpectrum spectrum = null --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_281 $$ spectrum = DBSpectrumPeer.retrieveByPK(new NumberKey(req.getParameter("spectrumid"))) --> Line_533 $$ out.println(spectrum.getDBMolecule().getCMLString(1)) [FD]
Line_3 $$ PrintWriter out = null --> Line_536 $$ outstream.flush() [FD]
Line_17 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_26 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_111 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_193 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_292 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_300 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_306 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_314 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_330 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_334 $$ out = res.getWriter() --> Line_536 $$ outstream.flush() [FD]
Line_4 $$ ServletOutputStream outstream = null --> Line_536 $$ outstream.flush() [FD]
Line_78 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_83 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_146 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_197 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_285 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_310 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_318 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_322 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_326 $$ outstream = res.getOutputStream() --> Line_536 $$ outstream.flush() [FD]
Line_3 $$ PrintWriter out = null --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_17 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_26 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_111 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_193 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_292 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_300 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_306 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_314 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_330 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_334 $$ out = res.getWriter() --> Line_539 $$ out.print(GeneralUtils.logError(ex, "NmrshiftdbServlet", null, true)) [FD]
Line_3 $$ PrintWriter out = null --> Line_540 $$ out.flush() [FD]
Line_17 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_26 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_111 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_193 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_292 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_300 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_306 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_314 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_330 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
Line_334 $$ out = res.getWriter() --> Line_540 $$ out.flush() [FD]
