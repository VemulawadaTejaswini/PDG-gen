Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_3 $$ InputStream input = new BufferedInputStream(UpdateLanguages.class.getResourceAsStream("definition_template")) [CD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_4 $$ Translator t = new Translator(input, "UTF8") [CD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_5 $$ Node template = Translator.Start() [CD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_6 $$ File langs = new File("support/support/translate/languages") [CD]
Line_6 $$ File langs = new File("support/support/translate/languages") --> Line_7 $$ for (File f : langs.listFiles()) [FD]
Line_7 $$ for (File f : langs.listFiles()) --> Line_8 $$ if (f.getName().endsWith(".lng")) [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_9 $$ input = new BufferedInputStream(new FileInputStream(f)) [CD]
Line_9 $$ input = new BufferedInputStream(new FileInputStream(f)) --> Line_11 $$ Translator.ReInit(input, "UTF8") [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_15 $$ Node newFile = Translator.Start() [CD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_16 $$ ArrayList<Addition> additions = new ArrayList<Addition>() [CD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_17 $$ syncKeys(template, newFile, additions) [CD]
Line_5 $$ Node template = Translator.Start() --> Line_17 $$ syncKeys(template, newFile, additions) [FD]
Line_15 $$ Node newFile = Translator.Start() --> Line_17 $$ syncKeys(template, newFile, additions) [FD]
Line_16 $$ ArrayList<Addition> additions = new ArrayList<Addition>() --> Line_17 $$ syncKeys(template, newFile, additions) [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_18 $$ ArrayList<String> fileLines = new ArrayList<String>() [CD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_19 $$ Scanner scanner = new Scanner(new BufferedReader(new FileReader(f))) [CD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_20 $$ while (scanner.hasNextLine()) [CD]
Line_19 $$ Scanner scanner = new Scanner(new BufferedReader(new FileReader(f))) --> Line_20 $$ while (scanner.hasNextLine()) [FD]
Line_20 $$ while (scanner.hasNextLine()) --> Line_21 $$ fileLines.add(scanner.nextLine()) [CD]
Line_18 $$ ArrayList<String> fileLines = new ArrayList<String>() --> Line_21 $$ fileLines.add(scanner.nextLine()) [FD]
Line_19 $$ Scanner scanner = new Scanner(new BufferedReader(new FileReader(f))) --> Line_21 $$ fileLines.add(scanner.nextLine()) [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_23 $$ int offset = 0 [CD]
Line_7 $$ for (File f : langs.listFiles()) --> Line_25 $$ System.out.println("Key added " + a + " to " + f.getName()) [FD]
Line_18 $$ ArrayList<String> fileLines = new ArrayList<String>() --> Line_26 $$ if (a.afterLine < 0 || a.afterLine >= fileLines.size()) [FD]
Line_26 $$ if (a.afterLine < 0 || a.afterLine >= fileLines.size()) --> Line_27 $$ fileLines.add(a.getAddition(0)) [CD]
Line_18 $$ ArrayList<String> fileLines = new ArrayList<String>() --> Line_27 $$ fileLines.add(a.getAddition(0)) [FD]
Line_24 $$ for (Addition a : additions) --> Line_27 $$ fileLines.add(a.getAddition(0)) [FD]
Line_26 $$ if (a.afterLine < 0 || a.afterLine >= fileLines.size()) --> Line_29 $$ fileLines.add(a.afterLine + (offset++) + 1, a.getAddition(0)) [CD]
Line_18 $$ ArrayList<String> fileLines = new ArrayList<String>() --> Line_29 $$ fileLines.add(a.afterLine + (offset++) + 1, a.getAddition(0)) [FD]
Line_23 $$ int offset = 0 --> Line_29 $$ fileLines.add(a.afterLine + (offset++) + 1, a.getAddition(0)) [FD]
Line_24 $$ for (Addition a : additions) --> Line_29 $$ fileLines.add(a.afterLine + (offset++) + 1, a.getAddition(0)) [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_32 $$ f.delete() [CD]
Line_7 $$ for (File f : langs.listFiles()) --> Line_32 $$ f.delete() [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_33 $$ Writer writer = new BufferedWriter(new FileWriter(f)) [CD]
Line_33 $$ Writer writer = new BufferedWriter(new FileWriter(f)) --> Line_34 $$ writer.write(s + "\n") [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_35 $$ writer.close() [CD]
Line_33 $$ Writer writer = new BufferedWriter(new FileWriter(f)) --> Line_35 $$ writer.close() [FD]
Line_8 $$ if (f.getName().endsWith(".lng")) --> Line_36 $$ System.out.println("Language " + f.getName() + " had " + additions.size() + " additions") [CD]
Line_7 $$ for (File f : langs.listFiles()) --> Line_36 $$ System.out.println("Language " + f.getName() + " had " + additions.size() + " additions") [FD]
Line_16 $$ ArrayList<Addition> additions = new ArrayList<Addition>() --> Line_36 $$ System.out.println("Language " + f.getName() + " had " + additions.size() + " additions") [FD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_39 $$ File defFile = new File(langs, "language.lng") [CD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_40 $$ defFile.delete() [CD]
Line_39 $$ File defFile = new File(langs, "language.lng") --> Line_40 $$ defFile.delete() [FD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_41 $$ defFile.createNewFile() [CD]
Line_39 $$ File defFile = new File(langs, "language.lng") --> Line_41 $$ defFile.createNewFile() [FD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_42 $$ InputStream copyStream = new BufferedInputStream(UpdateLanguages.class.getResourceAsStream("definition_template")) [CD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_43 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(defFile)) [CD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_44 $$ int c = 0 [CD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_45 $$ while ((c = copyStream.read()) >= 0) out.write(c) [CD]
Line_44 $$ int c = 0 --> Line_45 $$ while ((c = copyStream.read()) >= 0) out.write(c) [FD]
Line_43 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(defFile)) --> Line_45 $$ while ((c = copyStream.read()) >= 0) out.write(c) [FD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_46 $$ out.close() [CD]
Line_43 $$ OutputStream out = new BufferedOutputStream(new FileOutputStream(defFile)) --> Line_46 $$ out.close() [FD]
Line_2 $$ public static void main(String[] args) throws ParseException, FileNotFoundException, IOException --> Line_47 $$ System.out.println("Languages updated.") [CD]
