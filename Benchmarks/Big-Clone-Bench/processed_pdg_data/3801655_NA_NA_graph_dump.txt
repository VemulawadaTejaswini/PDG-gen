Line_2 $$ public static void main(String[] args) throws Exception --> Line_3 $$ if (args.length != 2) [CD]
Line_3 $$ if (args.length != 2) --> Line_4 $$ System.out.println("usage: " + EvaluatorHelper.class.getName() + " <output> <data set file>") [CD]
Line_3 $$ if (args.length != 2) --> Line_5 $$ System.exit(1) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_7 $$ Helper helper = Helper.getHelper(args[1]) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_8 $$ Dataset dataset = helper.read(args[1]) [CD]
Line_7 $$ Helper helper = Helper.getHelper(args[1]) --> Line_8 $$ Dataset dataset = helper.read(args[1]) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_9 $$ ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ) [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_10 $$ Enumeration entries = zip.entries() [CD]
Line_9 $$ ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ) --> Line_10 $$ Enumeration entries = zip.entries() [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_11 $$ Unit<?>[] performance = new Unit<?>[LIMIT] [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_12 $$ int index = 0 [CD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_13 $$ while (entries.hasMoreElements()) [CD]
Line_10 $$ Enumeration entries = zip.entries() --> Line_13 $$ while (entries.hasMoreElements()) [FD]
Line_13 $$ while (entries.hasMoreElements()) --> Line_14 $$ ZipEntry entry = (ZipEntry) entries.nextElement() [CD]
Line_10 $$ Enumeration entries = zip.entries() --> Line_14 $$ ZipEntry entry = (ZipEntry) entries.nextElement() [FD]
Line_13 $$ while (entries.hasMoreElements()) --> Line_15 $$ if (entry.getName().endsWith(".out")) [CD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_16 $$ File temp = File.createTempFile("PARSER", ".zip") [CD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_17 $$ temp.deleteOnExit() [CD]
Line_16 $$ File temp = File.createTempFile("PARSER", ".zip") --> Line_17 $$ temp.deleteOnExit() [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_18 $$ PrintStream writer = new PrintStream(new FileOutputStream(temp)) [CD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_19 $$ BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry)) [CD]
Line_9 $$ ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ) --> Line_19 $$ BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry)) [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_20 $$ byte[] buffer = new byte[4096] [CD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_21 $$ int read = -1 [CD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_22 $$ while ((read = reader.read(buffer)) != -1) [CD]
Line_21 $$ int read = -1 --> Line_22 $$ while ((read = reader.read(buffer)) != -1) [FD]
Line_19 $$ BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry)) --> Line_22 $$ while ((read = reader.read(buffer)) != -1) [FD]
Line_20 $$ byte[] buffer = new byte[4096] --> Line_22 $$ while ((read = reader.read(buffer)) != -1) [FD]
Line_22 $$ while ((read = reader.read(buffer)) != -1) --> Line_23 $$ writer.write(buffer, 0, read) [CD]
Line_22 $$ while ((read = reader.read(buffer)) != -1) --> Line_23 $$ writer.write(buffer, 0, read) [FD]
Line_18 $$ PrintStream writer = new PrintStream(new FileOutputStream(temp)) --> Line_23 $$ writer.write(buffer, 0, read) [FD]
Line_20 $$ byte[] buffer = new byte[4096] --> Line_23 $$ writer.write(buffer, 0, read) [FD]
Line_21 $$ int read = -1 --> Line_23 $$ writer.write(buffer, 0, read) [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_25 $$ writer.close() [CD]
Line_18 $$ PrintStream writer = new PrintStream(new FileOutputStream(temp)) --> Line_25 $$ writer.close() [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_26 $$ reader.close() [CD]
Line_19 $$ BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry)) --> Line_26 $$ reader.close() [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_31 $$ while ((line = outfile.readLine()) != null) [CD]
Line_31 $$ while ((line = outfile.readLine()) != null) --> Line_32 $$ if (line.startsWith("IF")) [CD]
Line_32 $$ if (line.startsWith("IF")) --> Line_33 $$ ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata()) [CD]
Line_8 $$ Dataset dataset = helper.read(args[1]) --> Line_33 $$ ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata()) [FD]
Line_32 $$ if (line.startsWith("IF")) --> Line_34 $$ list.add(fill(dataset.getMetadata(), rule, parser.parse(line))) [CD]
Line_33 $$ ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata()) --> Line_34 $$ list.add(fill(dataset.getMetadata(), rule, parser.parse(line))) [FD]
Line_8 $$ Dataset dataset = helper.read(args[1]) --> Line_34 $$ list.add(fill(dataset.getMetadata(), rule, parser.parse(line))) [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_37 $$ outfile.close() [CD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_39 $$ performance[index] = measure.evaluate(dataset, list) [CD]
Line_8 $$ Dataset dataset = helper.read(args[1]) --> Line_39 $$ performance[index] = measure.evaluate(dataset, list) [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_40 $$ System.out.println(entry.getName() + ": " + performance[index]) [CD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_41 $$ index++ [CD]
Line_12 $$ int index = 0 --> Line_41 $$ index++ [FD]
Line_15 $$ if (entry.getName().endsWith(".out")) --> Line_42 $$ if (index >= LIMIT) [CD]
Line_12 $$ int index = 0 --> Line_42 $$ if (index >= LIMIT) [FD]
Line_2 $$ public static void main(String[] args) throws Exception --> Line_47 $$ System.out.println(UnitAveragingMode.get(Double.class).average(performance)) [CD]
Line_11 $$ Unit<?>[] performance = new Unit<?>[LIMIT] --> Line_47 $$ System.out.println(UnitAveragingMode.get(Double.class).average(performance)) [FD]
