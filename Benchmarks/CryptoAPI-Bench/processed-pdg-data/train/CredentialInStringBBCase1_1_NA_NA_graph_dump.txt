Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_6 $$ keyBytes = Arrays.copyOf(keyBytes, 16)[ CD ]
Line_4 $$ String defaultKey = String.valueOf(random.ints())-->Line_5 $$ byte[] keyBytes = defaultKey.getBytes()[ FD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_11 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_8 $$ String originalString = "Testing"[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_4 $$ String defaultKey = String.valueOf(random.ints())[ CD ]
Line_5 $$ byte[] keyBytes = defaultKey.getBytes()-->Line_6 $$ keyBytes = Arrays.copyOf(keyBytes, 16)[ FD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, keySpec)[ CD ]
Line_1 $$ public class Dummy -->Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException [ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_3 $$ SecureRandom random = new SecureRandom()[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_12 $$ System.out.println(encrypt)[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_9 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_7 $$ SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES")[ CD ]
Line_11 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))-->Line_12 $$ System.out.println(encrypt)[ FD ]
Line_7 $$ SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES")-->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, keySpec)[ FD ]
Line_9 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")-->Line_11 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))[ FD ]
Line_3 $$ SecureRandom random = new SecureRandom()-->Line_4 $$ String defaultKey = String.valueOf(random.ints())[ FD ]
Line_8 $$ String originalString = "Testing"-->Line_11 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))[ FD ]
Line_9 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")-->Line_10 $$ cipher.init(Cipher.ENCRYPT_MODE, keySpec)[ FD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_5 $$ byte[] keyBytes = defaultKey.getBytes()[ CD ]
