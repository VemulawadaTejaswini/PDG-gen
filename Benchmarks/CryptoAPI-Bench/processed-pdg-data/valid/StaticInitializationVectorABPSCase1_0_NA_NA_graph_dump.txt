Line_12 $$ IvParameterSpec ivSpec = new IvParameterSpec(bytes)-->Line_13 $$ cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec)[ FD ]
Line_15 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_17 $$ int choice = 2[ CD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_5 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")[ CD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_4 $$ SecretKey key = keyGen.generateKey()[ CD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_8 $$ if (choice > 1) [ FD ]
Line_5 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")-->Line_13 $$ cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec)[ FD ]
Line_1 $$ public class Dummy -->Line_15 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException [ CD ]
Line_9 $$ bytes = new byte[16]-->Line_10 $$ sr.nextBytes(bytes)[ FD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_12 $$ IvParameterSpec ivSpec = new IvParameterSpec(bytes)[ CD ]
Line_8 $$ if (choice > 1) -->Line_10 $$ sr.nextBytes(bytes)[ CD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_6 $$ SecureRandom sr = new SecureRandom()[ CD ]
Line_16 $$ Dummy siv = new Dummy()-->Line_18 $$ siv.go(choice)[ FD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_3 $$ KeyGenerator keyGen = KeyGenerator.getInstance("AES")[ CD ]
Line_7 $$ byte[] bytes = "abcde".getBytes()-->Line_9 $$ bytes = new byte[16][ FD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_18 $$ siv.go(choice)[ FD ]
Line_15 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_18 $$ siv.go(choice)[ CD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_7 $$ byte[] bytes = "abcde".getBytes()[ CD ]
Line_3 $$ KeyGenerator keyGen = KeyGenerator.getInstance("AES")-->Line_4 $$ SecretKey key = keyGen.generateKey()[ FD ]
Line_4 $$ SecretKey key = keyGen.generateKey()-->Line_13 $$ cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec)[ FD ]
Line_17 $$ int choice = 2-->Line_18 $$ siv.go(choice)[ FD ]
Line_8 $$ if (choice > 1) -->Line_9 $$ bytes = new byte[16][ CD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_8 $$ if (choice > 1) [ CD ]
Line_15 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_16 $$ Dummy siv = new Dummy()[ CD ]
Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException -->Line_13 $$ cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec)[ CD ]
Line_7 $$ byte[] bytes = "abcde".getBytes()-->Line_10 $$ sr.nextBytes(bytes)[ FD ]
Line_1 $$ public class Dummy -->Line_2 $$ public void go(int choice) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, InvalidAlgorithmParameterException [ CD ]
Line_6 $$ SecureRandom sr = new SecureRandom()-->Line_10 $$ sr.nextBytes(bytes)[ FD ]
