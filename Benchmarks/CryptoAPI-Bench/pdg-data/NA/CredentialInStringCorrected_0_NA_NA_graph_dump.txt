Line_0 $$ Entry-->Line_1 $$ public class Dummy [ CD ]
Line_1 $$ public class Dummy -->Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException [ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_3 $$ SecureRandom random = new SecureRandom()[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_4 $$ byte[] keyBytes = new byte[16][ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_5 $$ random.nextBytes(keyBytes)[ CD ]
Line_3 $$ SecureRandom random = new SecureRandom()-->Line_5 $$ random.nextBytes(keyBytes)[ FD ]
Line_4 $$ byte[] keyBytes = new byte[16]-->Line_5 $$ random.nextBytes(keyBytes)[ FD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_6 $$ SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES")[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_7 $$ String originalString = "Testing"[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_8 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")[ CD ]
Line_8 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")-->Line_8 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")[ CD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_9 $$ cipher.init(Cipher.ENCRYPT_MODE, keySpec)[ CD ]
Line_8 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")-->Line_9 $$ cipher.init(Cipher.ENCRYPT_MODE, keySpec)[ FD ]
Line_6 $$ SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES")-->Line_9 $$ cipher.init(Cipher.ENCRYPT_MODE, keySpec)[ FD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_10 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))[ CD ]
Line_10 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))-->Line_10 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))[ CD ]
Line_8 $$ Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING")-->Line_10 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))[ FD ]
Line_7 $$ String originalString = "Testing"-->Line_10 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))[ FD ]
Line_2 $$ public static void main(String[] args) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException, IllegalBlockSizeException, BadPaddingException, ClassNotFoundException -->Line_11 $$ System.out.println(encrypt)[ CD ]
Line_10 $$ String encrypt = Base64.getEncoder().encodeToString(cipher.doFinal(originalString.getBytes("UTF-8")))-->Line_11 $$ System.out.println(encrypt)[ FD ]
