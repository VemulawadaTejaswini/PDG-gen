Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_3 $$ HttpUriRequest request = RequestBuilder.get().setUri(get.toURI()).setHeader("User-Agent", this.userAgent).build() [FD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_3 $$ HttpUriRequest request = RequestBuilder.get().setUri(get.toURI()).setHeader("User-Agent", this.userAgent).build() [CD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_4 $$ CloseableHttpResponse execute = this.httpclient.execute(request) [CD]
Line_3 $$ HttpUriRequest request = RequestBuilder.get().setUri(get.toURI()).setHeader("User-Agent", this.userAgent).build() --> Line_4 $$ CloseableHttpResponse execute = this.httpclient.execute(request) [FD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_5 $$ HttpEntity entity = execute.getEntity() [CD]
Line_4 $$ CloseableHttpResponse execute = this.httpclient.execute(request) --> Line_5 $$ HttpEntity entity = execute.getEntity() [FD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_6 $$ InputStream contentIS = entity.getContent() [CD]
Line_5 $$ HttpEntity entity = execute.getEntity() --> Line_6 $$ InputStream contentIS = entity.getContent() [FD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_9 $$ HeaderElement headerElement = elements[0] [CD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_10 $$ NameValuePair parameterByName = headerElement.getParameterByName("charset") [CD]
Line_9 $$ HeaderElement headerElement = elements[0] --> Line_10 $$ NameValuePair parameterByName = headerElement.getParameterByName("charset") [FD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_11 $$ String encoding = "UTF-8" [CD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_12 $$ if (parameterByName != null) [CD]
Line_10 $$ NameValuePair parameterByName = headerElement.getParameterByName("charset") --> Line_12 $$ if (parameterByName != null) [FD]
Line_12 $$ if (parameterByName != null) --> Line_13 $$ encoding = parameterByName.getValue() [CD]
Line_11 $$ String encoding = "UTF-8" --> Line_13 $$ encoding = parameterByName.getValue() [FD]
Line_10 $$ NameValuePair parameterByName = headerElement.getParameterByName("charset") --> Line_13 $$ encoding = parameterByName.getValue() [FD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_14 $$ if (encoding != null && encoding.equals("ISO-8859-1")) [CD]
Line_11 $$ String encoding = "UTF-8" --> Line_14 $$ if (encoding != null && encoding.equals("ISO-8859-1")) [FD]
Line_13 $$ encoding = parameterByName.getValue() --> Line_14 $$ if (encoding != null && encoding.equals("ISO-8859-1")) [FD]
Line_14 $$ if (encoding != null && encoding.equals("ISO-8859-1")) --> Line_15 $$ encoding = "CP1252" [CD]
Line_11 $$ String encoding = "UTF-8" --> Line_15 $$ encoding = "CP1252" [FD]
Line_13 $$ encoding = parameterByName.getValue() --> Line_15 $$ encoding = "CP1252" [FD]
Line_2 $$ private String internalGet(URL get) throws IOException, ClientProtocolException, URISyntaxException --> Line_16 $$ String content = IOUtils.toString(contentIS, encoding) [CD]
Line_6 $$ InputStream contentIS = entity.getContent() --> Line_16 $$ String content = IOUtils.toString(contentIS, encoding) [FD]
Line_11 $$ String encoding = "UTF-8" --> Line_16 $$ String content = IOUtils.toString(contentIS, encoding) [FD]
Line_13 $$ encoding = parameterByName.getValue() --> Line_16 $$ String content = IOUtils.toString(contentIS, encoding) [FD]
Line_15 $$ encoding = "CP1252" --> Line_16 $$ String content = IOUtils.toString(contentIS, encoding) [FD]
