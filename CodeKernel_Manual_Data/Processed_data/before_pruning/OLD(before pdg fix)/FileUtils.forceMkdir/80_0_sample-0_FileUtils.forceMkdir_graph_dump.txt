Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void start() [ CD ]
Line_2 $$ public void start() -->Line_3 $$ super.start()[ CD ]
Line_2 $$ public void start() -->Line_4 $$ Assert.notNull(dataDir)[ CD ]
Line_2 $$ public void start() -->Line_5 $$ if (!dataDir.exists()) [ CD ]
Line_5 $$ if (!dataDir.exists()) -->Line_5 $$ !dataDir.exists()[ CD ]
Line_5 $$ !dataDir.exists()-->Line_5 $$ dataDir.exists()[ CD ]
Line_2 $$ public void start() -->Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_12 $$ !dataDir.canRead()-->Line_12 $$ dataDir.canRead()[ CD ]
Line_12 $$ !dataDir.canWrite()-->Line_12 $$ dataDir.canWrite()[ CD ]
Line_2 $$ public void start() -->Line_15 $$ new MapMaker().makeComputingMap(new Function<String, File>() [ CD ]
Line_16 $$ public File apply(String destination) -->Line_17 $$ return getDataFile(destination);[ CD ]
Line_17 $$ return getDataFile(destination);-->Line_17 $$ getDataFile(destination)[ CD ]
Line_2 $$ public void start() -->Line_20 $$ Executors.newScheduledThreadPool(1)[ CD ]
Line_2 $$ public void start() -->Line_21 $$ new MapMaker().makeComputingMap(new Function<String, List<ClientIdentity>>() [ CD ]
Line_22 $$ public List<ClientIdentity> apply(String destination) -->Line_23 $$ return loadClientIdentity(destination);[ CD ]
Line_23 $$ return loadClientIdentity(destination);-->Line_23 $$ loadClientIdentity(destination)[ CD ]
Line_2 $$ public void start() -->Line_26 $$ new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() [ CD ]
Line_27 $$ public Position apply(ClientIdentity clientIdentity) -->Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)[ CD ]
Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)-->Line_28 $$ loadCursor(clientIdentity.getDestination(), clientIdentity)[ CD ]
Line_27 $$ public Position apply(ClientIdentity clientIdentity) -->Line_29 $$ if (position == null) [ CD ]
Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)-->Line_29 $$ if (position == null) [ FD ]
Line_29 $$ if (position == null) -->Line_30 $$ return nullCursor;[ CD ]
Line_29 $$ if (position == null) -->Line_32 $$ return position;[ CD ]
Line_2 $$ public void start() -->Line_36 $$ Collections.synchronizedSet(new HashSet<ClientIdentity>())[ CD ]
Line_2 $$ public void start() -->Line_37 $$ executor.scheduleAtFixedRate(new Runnable() [ CD ]
Line_38 $$ public void run() -->Line_39 $$ List<ClientIdentity> tasks = new ArrayList<ClientIdentity>(updateCursorTasks)[ CD ]
Line_40 $$ ClientIdentity clientIdentity-->Line_41 $$ clientIdentity.getDestination()[ FD ]
Line_43 $$ if (logger.isInfoEnabled()) -->Line_43 $$ logger.isInfoEnabled()[ CD ]
Line_43 $$ if (logger.isInfoEnabled()) -->Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)[ CD ]
Line_40 $$ ClientIdentity clientIdentity-->Line_44 $$ getCursor(clientIdentity)[ FD ]
Line_43 $$ if (logger.isInfoEnabled()) -->Line_45 $$ logger.info("clientId:[ CD ]
Line_40 $$ ClientIdentity clientIdentity-->Line_46 $$ clientIdentity.getClientId()[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_46 $$ cursor.getPostion()[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_47 $$ cursor.getPostion()[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_47 $$ cursor.getPostion()[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_48 $$ cursor.getIdentity()[ FD ]
Line_40 $$ ClientIdentity clientIdentity-->Line_50 $$ clientIdentity.getDestination()[ FD ]
Line_40 $$ ClientIdentity clientIdentity-->Line_51 $$ updateCursorTasks.remove(clientIdentity)[ FD ]
Line_40 $$ ClientIdentity clientIdentity-->Line_53 $$ clientIdentity.toString()[ FD ]
