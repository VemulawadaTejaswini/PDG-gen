Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException [ CD ]
Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException -->Line_3 $$ TransformerFactory factory = TransformerFactory.newInstance()[ CD ]
Line_3 $$ TransformerFactory factory = TransformerFactory.newInstance()-->Line_3 $$ TransformerFactory.newInstance()[ CD ]
Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException -->Line_4 $$ URL resource = this.getClass().getClassLoader().getResource(jobManagerConfiguration.getJobDescriptionTemplateName())[ CD ]
Line_4 $$ URL resource = this.getClass().getClassLoader().getResource(jobManagerConfiguration.getJobDescriptionTemplateName())-->Line_4 $$ this.getClass().getClassLoader().getResource(jobManagerConfiguration.getJobDescriptionTemplateName())[ CD ]
Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException -->Line_5 $$ if (resource == null) [ CD ]
Line_4 $$ URL resource = this.getClass().getClassLoader().getResource(jobManagerConfiguration.getJobDescriptionTemplateName())-->Line_5 $$ if (resource == null) [ FD ]
Line_5 $$ if (resource == null) -->Line_6 $$ String error = "System configuration file '" + jobManagerConfiguration.getJobDescriptionTemplateName() + "' not found in the classpath"[ CD ]
Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException -->Line_10 $$ Source xslt = new StreamSource(new File(resource.getPath()))[ CD ]
Line_4 $$ URL resource = this.getClass().getClassLoader().getResource(jobManagerConfiguration.getJobDescriptionTemplateName())-->Line_10 $$ resource.getPath()[ FD ]
Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException -->Line_11 $$ Transformer transformer[ CD ]
Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException -->Line_12 $$ StringWriter results = new StringWriter()[ CD ]
Line_2 $$ public synchronized String submitBatchJob(JobDescriptor jobDescriptor) throws SSHApiException -->Line_13 $$ File tempPBSFile = null[ CD ]
Line_11 $$ Transformer transformer-->Line_15 $$ transformer = factory.newTransformer(xslt)[ FD ]
Line_15 $$ transformer = factory.newTransformer(xslt)-->Line_15 $$ transformer = factory.newTransformer(xslt)[ FD ]
Line_15 $$ transformer = factory.newTransformer(xslt)-->Line_15 $$ factory.newTransformer(xslt)[ CD ]
Line_3 $$ TransformerFactory factory = TransformerFactory.newInstance()-->Line_15 $$ factory.newTransformer(xslt)[ FD ]
Line_10 $$ Source xslt = new StreamSource(new File(resource.getPath()))-->Line_15 $$ factory.newTransformer(xslt)[ FD ]
Line_11 $$ Transformer transformer-->Line_17 $$ transformer.transform(text, new StreamResult(results))[ FD ]
Line_15 $$ transformer = factory.newTransformer(xslt)-->Line_17 $$ transformer.transform(text, new StreamResult(results))[ FD ]
Line_16 $$ Source text = new StreamSource(new ByteArrayInputStream(jobDescriptor.toXML().getBytes()))-->Line_17 $$ transformer.transform(text, new StreamResult(results))[ FD ]
Line_18 $$ String scriptContent = results.toString().replaceAll("^[ |\t]*\n$", "")-->Line_18 $$ results.toString().replaceAll("^[ |\t]*\n$", "")[ CD ]
Line_12 $$ StringWriter results = new StringWriter()-->Line_18 $$ results.toString()[ FD ]
Line_18 $$ String scriptContent = results.toString().replaceAll("^[ |\t]*\n$", "")-->Line_19 $$ if (scriptContent.startsWith("\n")) [ FD ]
Line_19 $$ if (scriptContent.startsWith("\n")) -->Line_19 $$ scriptContent.startsWith("\n")[ CD ]
Line_18 $$ String scriptContent = results.toString().replaceAll("^[ |\t]*\n$", "")-->Line_19 $$ scriptContent.startsWith("\n")[ FD ]
Line_19 $$ if (scriptContent.startsWith("\n")) -->Line_20 $$ scriptContent = scriptContent.substring(1)[ CD ]
Line_18 $$ String scriptContent = results.toString().replaceAll("^[ |\t]*\n$", "")-->Line_20 $$ scriptContent = scriptContent.substring(1)[ FD ]
Line_20 $$ scriptContent = scriptContent.substring(1)-->Line_20 $$ scriptContent = scriptContent.substring(1)[ FD ]
Line_20 $$ scriptContent = scriptContent.substring(1)-->Line_20 $$ scriptContent.substring(1)[ CD ]
Line_18 $$ String scriptContent = results.toString().replaceAll("^[ |\t]*\n$", "")-->Line_20 $$ scriptContent.substring(1)[ FD ]
Line_20 $$ scriptContent = scriptContent.substring(1)-->Line_20 $$ scriptContent.substring(1)[ FD ]
Line_22 $$ int number = new SecureRandom().nextInt()-->Line_22 $$ new SecureRandom().nextInt()[ CD ]
Line_22 $$ int number = new SecureRandom().nextInt()-->Line_23 $$ number = (number < 0 ? -number : number)[ FD ]
Line_23 $$ number = (number < 0 ? -number : number)-->Line_23 $$ number = (number < 0 ? -number : number)[ FD ]
Line_22 $$ int number = new SecureRandom().nextInt()-->Line_23 $$ -number[ FD ]
Line_23 $$ number = (number < 0 ? -number : number)-->Line_23 $$ -number[ FD ]
Line_13 $$ File tempPBSFile = null-->Line_24 $$ tempPBSFile = new File(Integer.toString(number) + jobManagerConfiguration.getScriptExtension())[ FD ]
Line_24 $$ tempPBSFile = new File(Integer.toString(number) + jobManagerConfiguration.getScriptExtension())-->Line_24 $$ tempPBSFile = new File(Integer.toString(number) + jobManagerConfiguration.getScriptExtension())[ FD ]
Line_22 $$ int number = new SecureRandom().nextInt()-->Line_24 $$ Integer.toString(number)[ FD ]
Line_23 $$ number = (number < 0 ? -number : number)-->Line_24 $$ Integer.toString(number)[ FD ]
Line_13 $$ File tempPBSFile = null-->Line_25 $$ FileUtils.writeStringToFile(tempPBSFile, scriptContent)[ FD ]
Line_24 $$ tempPBSFile = new File(Integer.toString(number) + jobManagerConfiguration.getScriptExtension())-->Line_25 $$ FileUtils.writeStringToFile(tempPBSFile, scriptContent)[ FD ]
Line_18 $$ String scriptContent = results.toString().replaceAll("^[ |\t]*\n$", "")-->Line_25 $$ FileUtils.writeStringToFile(tempPBSFile, scriptContent)[ FD ]
Line_20 $$ scriptContent = scriptContent.substring(1)-->Line_25 $$ FileUtils.writeStringToFile(tempPBSFile, scriptContent)[ FD ]
Line_27 $$ int retry = 3-->Line_28 $$ while (retry > 0) [ FD ]
Line_30 $$ jobID = this.submitBatchJobWithScript(tempPBSFile.getAbsolutePath(), jobDescriptor.getWorkingDirectory())-->Line_30 $$ jobID = this.submitBatchJobWithScript(tempPBSFile.getAbsolutePath(), jobDescriptor.getWorkingDirectory())[ FD ]
Line_26 $$ String jobID = null-->Line_30 $$ jobID = this.submitBatchJobWithScript(tempPBSFile.getAbsolutePath(), jobDescriptor.getWorkingDirectory())[ FD ]
Line_30 $$ jobID = this.submitBatchJobWithScript(tempPBSFile.getAbsolutePath(), jobDescriptor.getWorkingDirectory())-->Line_30 $$ this.submitBatchJobWithScript(tempPBSFile.getAbsolutePath(), jobDescriptor.getWorkingDirectory())[ CD ]
Line_13 $$ File tempPBSFile = null-->Line_30 $$ tempPBSFile.getAbsolutePath()[ FD ]
Line_24 $$ tempPBSFile = new File(Integer.toString(number) + jobManagerConfiguration.getScriptExtension())-->Line_30 $$ tempPBSFile.getAbsolutePath()[ FD ]
Line_32 $$ retry = 0-->Line_32 $$ retry = 0[ FD ]
Line_27 $$ int retry = 3-->Line_32 $$ retry = 0[ FD ]
Line_32 $$ retry = 0-->Line_34 $$ retry--[ FD ]
Line_27 $$ int retry = 3-->Line_34 $$ retry--[ FD ]
Line_32 $$ retry = 0-->Line_35 $$ if (retry == 0) [ FD ]
Line_27 $$ int retry = 3-->Line_35 $$ if (retry == 0) [ FD ]
Line_35 $$ if (retry == 0) -->Line_43 $$ log.error("Error occured during job submission but doing a retry")[ CD ]
Line_35 $$ if (retry == 0) -->Line_44 $$ e.printStackTrace()[ CD ]
Line_30 $$ jobID = this.submitBatchJobWithScript(tempPBSFile.getAbsolutePath(), jobDescriptor.getWorkingDirectory())-->Line_49 $$ if (jobID != null) [ FD ]
Line_26 $$ String jobID = null-->Line_49 $$ if (jobID != null) [ FD ]
Line_49 $$ if (jobID != null) -->Line_50 $$ return jobID.replace("\n", "");[ CD ]
Line_50 $$ return jobID.replace("\n", "");-->Line_50 $$ jobID.replace("\n", "")[ CD ]
Line_30 $$ jobID = this.submitBatchJobWithScript(tempPBSFile.getAbsolutePath(), jobDescriptor.getWorkingDirectory())-->Line_50 $$ jobID.replace("\n", "")[ FD ]
Line_26 $$ String jobID = null-->Line_50 $$ jobID.replace("\n", "")[ FD ]
Line_49 $$ if (jobID != null) -->Line_52 $$ return null;[ CD ]
Line_13 $$ File tempPBSFile = null-->Line_64 $$ if (tempPBSFile != null) [ FD ]
Line_24 $$ tempPBSFile = new File(Integer.toString(number) + jobManagerConfiguration.getScriptExtension())-->Line_64 $$ if (tempPBSFile != null) [ FD ]
Line_64 $$ if (tempPBSFile != null) -->Line_65 $$ tempPBSFile.delete()[ CD ]
Line_13 $$ File tempPBSFile = null-->Line_65 $$ tempPBSFile.delete()[ FD ]
Line_24 $$ tempPBSFile = new File(Integer.toString(number) + jobManagerConfiguration.getScriptExtension())-->Line_65 $$ tempPBSFile.delete()[ FD ]
Line_32 $$ retry = 0-->Line_28 $$ while (retry > 0) [ FD ]
Line_32 $$ retry = 0-->Line_28 $$ while (retry > 0) [ FD ]
Line_32 $$ retry = 0-->Line_34 $$ retry--[ FD ]
Line_32 $$ retry = 0-->Line_35 $$ if (retry == 0) [ FD ]
