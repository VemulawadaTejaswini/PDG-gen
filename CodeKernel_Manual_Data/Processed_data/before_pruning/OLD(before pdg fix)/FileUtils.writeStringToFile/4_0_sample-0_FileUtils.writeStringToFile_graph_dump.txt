Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException [ CD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_5 $$ final String outputDirectory = createOutputDirectory(template, filter, outputBasePath)[ CD ]
Line_5 $$ final String outputDirectory = createOutputDirectory(template, filter, outputBasePath)-->Line_5 $$ createOutputDirectory(template, filter, outputBasePath)[ CD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_6 $$ final String templateFilename = template.getFile().getName()[ CD ]
Line_6 $$ final String templateFilename = template.getFile().getName()-->Line_6 $$ template.getFile().getName()[ CD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_7 $$ final String outputFilename = FilenameUtils.separatorsToUnix(outputDirectory + templateFilename)[ CD ]
Line_7 $$ final String outputFilename = FilenameUtils.separatorsToUnix(outputDirectory + templateFilename)-->Line_7 $$ FilenameUtils.separatorsToUnix(outputDirectory + templateFilename)[ CD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_8 $$ if (configGeneratorParameters.isLogOutput()) [ CD ]
Line_8 $$ if (configGeneratorParameters.isLogOutput()) -->Line_8 $$ configGeneratorParameters.isLogOutput()[ CD ]
Line_8 $$ if (configGeneratorParameters.isLogOutput()) -->Line_9 $$ log.info("Creating : " + StringUtils.replace(outputFilename, outputBasePath, ""))[ CD ]
Line_7 $$ final String outputFilename = FilenameUtils.separatorsToUnix(outputDirectory + templateFilename)-->Line_9 $$ StringUtils.replace(outputFilename, outputBasePath, "")[ FD ]
Line_8 $$ if (configGeneratorParameters.isLogOutput()) -->Line_10 $$ if (log.isDebugEnabled()) [ CD ]
Line_10 $$ if (log.isDebugEnabled()) -->Line_10 $$ log.isDebugEnabled()[ CD ]
Line_10 $$ if (log.isDebugEnabled()) -->Line_11 $$ log.debug("Creating : " + String.valueOf(outputFilename))[ CD ]
Line_7 $$ final String outputFilename = FilenameUtils.separatorsToUnix(outputDirectory + templateFilename)-->Line_11 $$ String.valueOf(outputFilename)[ FD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_13 $$ log.debug("Applying filter : " + filter.toString() + " to template : " + template.toString())[ CD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_14 $$ final String rawTemplate = FileUtils.readFileToString(template.getFile())[ CD ]
Line_14 $$ final String rawTemplate = FileUtils.readFileToString(template.getFile())-->Line_14 $$ FileUtils.readFileToString(template.getFile())[ CD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_15 $$ final String processedTemplate = strSubstitutor.replace(rawTemplate)[ CD ]
Line_15 $$ final String processedTemplate = strSubstitutor.replace(rawTemplate)-->Line_15 $$ strSubstitutor.replace(rawTemplate)[ CD ]
Line_14 $$ final String rawTemplate = FileUtils.readFileToString(template.getFile())-->Line_15 $$ strSubstitutor.replace(rawTemplate)[ FD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_16 $$ if (missingPropertyFound) [ CD ]
Line_16 $$ if (missingPropertyFound) -->Line_17 $$ checkForMissingProperties(filter.getFile().getAbsolutePath(), processedTemplate, missingPropertiesByFilename)[ CD ]
Line_15 $$ final String processedTemplate = strSubstitutor.replace(rawTemplate)-->Line_17 $$ checkForMissingProperties(filter.getFile().getAbsolutePath(), processedTemplate, missingPropertiesByFilename)[ FD ]
Line_2 $$ private void generateConfig(final FileInfo template, final FileInfo filter, final String outputBasePath, final StrSubstitutor strSubstitutor, final Map<String, Set<String>> missingPropertiesByFilename, final boolean missingPropertyFound) throws IOException, ConfigurationException, MojoFailureException -->Line_20 $$ if (!StringUtils.isNotBlank(configGeneratorParameters.getEncoding())) [ CD ]
Line_20 $$ if (!StringUtils.isNotBlank(configGeneratorParameters.getEncoding())) -->Line_20 $$ !StringUtils.isNotBlank(configGeneratorParameters.getEncoding())[ CD ]
Line_20 $$ !StringUtils.isNotBlank(configGeneratorParameters.getEncoding())-->Line_20 $$ StringUtils.isNotBlank(configGeneratorParameters.getEncoding())[ CD ]
Line_20 $$ if (!StringUtils.isNotBlank(configGeneratorParameters.getEncoding())) -->Line_21 $$ FileUtils.writeStringToFile(new File(outputFilename), processedTemplate)[ CD ]
Line_15 $$ final String processedTemplate = strSubstitutor.replace(rawTemplate)-->Line_21 $$ FileUtils.writeStringToFile(new File(outputFilename), processedTemplate)[ FD ]
