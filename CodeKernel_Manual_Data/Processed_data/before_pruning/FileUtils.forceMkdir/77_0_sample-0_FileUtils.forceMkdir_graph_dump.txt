Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void start() [ CD ]
Line_2 $$ public void start() -->Line_3 $$ super.start()[ CD ]
Line_2 $$ public void start() -->Line_4 $$ if (!dataDir.exists()) [ CD ]
Line_4 $$ if (!dataDir.exists()) -->Line_4 $$ !dataDir.exists()[ CD ]
Line_4 $$ !dataDir.exists()-->Line_4 $$ dataDir.exists()[ CD ]
Line_2 $$ public void start() -->Line_11 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_11 $$ !dataDir.canRead()-->Line_11 $$ dataDir.canRead()[ CD ]
Line_11 $$ !dataDir.canWrite()-->Line_11 $$ dataDir.canWrite()[ CD ]
Line_2 $$ public void start() -->Line_14 $$ if (!memoryLogPositionManager.isStart()) [ CD ]
Line_14 $$ if (!memoryLogPositionManager.isStart()) -->Line_14 $$ !memoryLogPositionManager.isStart()[ CD ]
Line_14 $$ !memoryLogPositionManager.isStart()-->Line_14 $$ memoryLogPositionManager.isStart()[ CD ]
Line_14 $$ if (!memoryLogPositionManager.isStart()) -->Line_15 $$ memoryLogPositionManager.start()[ CD ]
Line_2 $$ public void start() -->Line_17 $$ executorService.scheduleAtFixedRate(() -> [ CD ]
Line_19 $$ String destination-->Line_21 $$ flushDataToFile(destination)[ FD ]
Line_19 $$ String destination-->Line_22 $$ persistTasks.remove(destination)[ FD ]
