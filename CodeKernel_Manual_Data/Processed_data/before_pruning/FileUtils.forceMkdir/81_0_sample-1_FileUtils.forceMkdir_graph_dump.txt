Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void execute() throws MojoExecutionException, MojoFailureException [ CD ]
Line_2 $$ public void execute() throws MojoExecutionException, MojoFailureException -->Line_3 $$ UsernamePasswordCredentials credentials = getCredentials(serverId)[ CD ]
Line_3 $$ UsernamePasswordCredentials credentials = getCredentials(serverId)-->Line_3 $$ getCredentials(serverId)[ CD ]
Line_2 $$ public void execute() throws MojoExecutionException, MojoFailureException -->Line_4 $$ if (credentials == null) [ CD ]
Line_3 $$ UsernamePasswordCredentials credentials = getCredentials(serverId)-->Line_4 $$ if (credentials == null) [ FD ]
Line_4 $$ if (credentials == null) -->Line_5 $$ LOGGER.warn("No server configured with id '[ CD ]
Line_2 $$ public void execute() throws MojoExecutionException, MojoFailureException -->Line_7 $$ String buildNumberFormat = "\\d.*\\.\\d.*[d|p]"[ CD ]
Line_2 $$ public void execute() throws MojoExecutionException, MojoFailureException -->Line_8 $$ if (!buildNumber.matches(buildNumberFormat)) [ CD ]
Line_8 $$ if (!buildNumber.matches(buildNumberFormat)) -->Line_8 $$ !buildNumber.matches(buildNumberFormat)[ CD ]
Line_8 $$ !buildNumber.matches(buildNumberFormat)-->Line_8 $$ buildNumber.matches(buildNumberFormat)[ CD ]
Line_7 $$ String buildNumberFormat = "\\d.*\\.\\d.*[d|p]"-->Line_8 $$ buildNumber.matches(buildNumberFormat)[ FD ]
Line_7 $$ String buildNumberFormat = "\\d.*\\.\\d.*[d|p]"-->Line_9 $$ String.format("buildNumber '%s' must take the form [major].[minor].[d|p].  e.g., 4.1d", buildNumber, buildNumberFormat)[ FD ]
Line_2 $$ public void execute() throws MojoExecutionException, MojoFailureException -->Line_14 $$ Downloads dl = new Downloads(httpWorker)[ CD ]
Line_17 $$ SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd")-->Line_18 $$ dateFormat.setLenient(false)[ FD ]
Line_19 $$ if (buildDate == null) -->Line_20 $$ Distribution d = Distribution.get(product, license)[ CD ]
Line_20 $$ Distribution d = Distribution.get(product, license)-->Line_20 $$ Distribution.get(product, license)[ CD ]
Line_19 $$ if (buildDate == null) -->Line_21 $$ LOGGER.info("No buildDate provided.  Contacting Isomorphic build server to " + "look for the most recent distribution...")[ CD ]
Line_19 $$ if (buildDate == null) -->Line_23 $$ String link = dl.findCurrentBuild(d, buildNumber)[ CD ]
Line_23 $$ String link = dl.findCurrentBuild(d, buildNumber)-->Line_23 $$ dl.findCurrentBuild(d, buildNumber)[ CD ]
Line_14 $$ Downloads dl = new Downloads(httpWorker)-->Line_23 $$ dl.findCurrentBuild(d, buildNumber)[ FD ]
Line_20 $$ Distribution d = Distribution.get(product, license)-->Line_23 $$ dl.findCurrentBuild(d, buildNumber)[ FD ]
Line_19 $$ if (buildDate == null) -->Line_24 $$ if (link == null) [ CD ]
Line_23 $$ String link = dl.findCurrentBuild(d, buildNumber)-->Line_24 $$ if (link == null) [ FD ]
Line_19 $$ if (buildDate == null) -->Line_27 $$ LOGGER.debug("Extracting date from server response: '[ CD ]
Line_23 $$ String link = dl.findCurrentBuild(d, buildNumber)-->Line_27 $$ LOGGER.debug("Extracting date from server response: '[ FD ]
Line_19 $$ if (buildDate == null) -->Line_28 $$ StringUtils.substringAfterLast(link, "/")[ CD ]
Line_23 $$ String link = dl.findCurrentBuild(d, buildNumber)-->Line_28 $$ StringUtils.substringAfterLast(link, "/")[ FD ]
Line_19 $$ if (buildDate == null) -->Line_29 $$ LOGGER.info("buildDate set to '[ CD ]
Line_17 $$ SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd")-->Line_31 $$ dateFormat.parse(buildDate)[ FD ]
Line_32 $$ File basedir = FileUtils.getFile(workdir, product.toString(), license.toString(), buildNumber, buildDate)-->Line_32 $$ FileUtils.getFile(workdir, product.toString(), license.toString(), buildNumber, buildDate)[ CD ]
Line_34 $$ List<License> licenses = new ArrayList<License>()-->Line_35 $$ licenses.add(license)[ FD ]
Line_36 $$ if (license == POWER || license == ENTERPRISE) -->Line_37 $$ if (includeAnalytics) [ CD ]
Line_37 $$ if (includeAnalytics) -->Line_38 $$ licenses.add(ANALYTICS_MODULE)[ CD ]
Line_34 $$ List<License> licenses = new ArrayList<License>()-->Line_38 $$ licenses.add(ANALYTICS_MODULE)[ FD ]
Line_36 $$ if (license == POWER || license == ENTERPRISE) -->Line_40 $$ if (includeMessaging) [ CD ]
Line_40 $$ if (includeMessaging) -->Line_41 $$ licenses.add(MESSAGING_MODULE)[ CD ]
Line_34 $$ List<License> licenses = new ArrayList<License>()-->Line_41 $$ licenses.add(MESSAGING_MODULE)[ FD ]
Line_44 $$ Set<Module> artifacts = collect(licenses, basedir)-->Line_44 $$ collect(licenses, basedir)[ CD ]
Line_34 $$ List<License> licenses = new ArrayList<License>()-->Line_44 $$ collect(licenses, basedir)[ FD ]
Line_32 $$ File basedir = FileUtils.getFile(workdir, product.toString(), license.toString(), buildNumber, buildDate)-->Line_44 $$ collect(licenses, basedir)[ FD ]
Line_46 $$ Collection<File> scripts = FileUtils.listFiles(basedir, executables, true)-->Line_46 $$ FileUtils.listFiles(basedir, executables, true)[ CD ]
Line_32 $$ File basedir = FileUtils.getFile(workdir, product.toString(), license.toString(), buildNumber, buildDate)-->Line_46 $$ FileUtils.listFiles(basedir, executables, true)[ FD ]
Line_45 $$ String[] executables = -->Line_46 $$ FileUtils.listFiles(basedir, executables, true)[ FD ]
Line_47 $$ if (copyToLatestFolder) -->Line_48 $$ File bookmarkable = new File(basedir.getParent(), "latest")[ CD ]
Line_32 $$ File basedir = FileUtils.getFile(workdir, product.toString(), license.toString(), buildNumber, buildDate)-->Line_48 $$ basedir.getParent()[ FD ]
Line_47 $$ if (copyToLatestFolder) -->Line_49 $$ LOGGER.info("Copying distribution to '[ CD ]
Line_48 $$ File bookmarkable = new File(basedir.getParent(), "latest")-->Line_49 $$ bookmarkable.getAbsolutePath()[ FD ]
Line_48 $$ File bookmarkable = new File(basedir.getParent(), "latest")-->Line_51 $$ FileUtils.forceMkdir(bookmarkable)[ FD ]
Line_48 $$ File bookmarkable = new File(basedir.getParent(), "latest")-->Line_52 $$ FileUtils.cleanDirectory(bookmarkable)[ FD ]
Line_32 $$ File basedir = FileUtils.getFile(workdir, product.toString(), license.toString(), buildNumber, buildDate)-->Line_53 $$ FileUtils.copyDirectory(basedir, bookmarkable, FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("zip")))[ FD ]
Line_48 $$ File bookmarkable = new File(basedir.getParent(), "latest")-->Line_53 $$ FileUtils.copyDirectory(basedir, bookmarkable, FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("zip")))[ FD ]
Line_46 $$ Collection<File> scripts = FileUtils.listFiles(basedir, executables, true)-->Line_55 $$ scripts.addAll(FileUtils.listFiles(bookmarkable, executables, true))[ FD ]
Line_48 $$ File bookmarkable = new File(basedir.getParent(), "latest")-->Line_55 $$ FileUtils.listFiles(bookmarkable, executables, true)[ FD ]
Line_45 $$ String[] executables = -->Line_55 $$ FileUtils.listFiles(bookmarkable, executables, true)[ FD ]
Line_60 $$ File script-->Line_61 $$ script.setExecutable(true)[ FD ]
Line_60 $$ File script-->Line_62 $$ script.getAbsolutePath()[ FD ]
Line_44 $$ Set<Module> artifacts = collect(licenses, basedir)-->Line_64 $$ doExecute(artifacts)[ FD ]
