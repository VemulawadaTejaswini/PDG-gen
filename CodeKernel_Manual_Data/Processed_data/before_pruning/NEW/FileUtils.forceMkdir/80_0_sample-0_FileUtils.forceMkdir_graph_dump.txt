Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public void start(File dataDir) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_3 $$ super.start()[ CD ]
Line_2 $$ public void start(File dataDir) -->Line_4 $$ Assert.notNull(dataDir)[ CD ]
Line_2 $$ public void start(File dataDir) -->Line_4 $$ Assert.notNull(dataDir)[ FD ]
Line_2 $$ public void start(File dataDir) -->Line_5 $$ if (!dataDir.exists()) [ CD ]
Line_5 $$ if (!dataDir.exists()) -->Line_5 $$ if (!dataDir.exists()) [ CD ]
Line_5 $$ if (!dataDir.exists()) -->Line_5 $$ if (!dataDir.exists()) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_5 $$ if (!dataDir.exists()) [ FD ]
Line_2 $$ public void start(File dataDir) -->Line_7 $$ FileUtils.forceMkdir(dataDir)[ FD ]
Line_2 $$ public void start(File dataDir) -->Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) -->Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ FD ]
Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) -->Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ CD ]
Line_2 $$ public void start(File dataDir) -->Line_12 $$ if (!dataDir.canRead() || !dataDir.canWrite()) [ FD ]
Line_2 $$ public void start(File dataDir) -->Line_13 $$ throw new CanalMetaManagerException("dir[" + dataDir.getPath() + "] can not read/write")[ FD ]
Line_2 $$ public void start(File dataDir) -->Line_15 $$ dataFileCaches = new MapMaker().makeComputingMap(new Function<String, File>() [ CD ]
Line_15 $$ dataFileCaches = new MapMaker().makeComputingMap(new Function<String, File>() -->Line_17 $$ return getDataFile(destination)[ CD ]
Line_17 $$ return getDataFile(destination)-->Line_17 $$ return getDataFile(destination)[ CD ]
Line_15 $$ dataFileCaches = new MapMaker().makeComputingMap(new Function<String, File>() -->Line_17 $$ return getDataFile(destination)[ FD ]
Line_2 $$ public void start(File dataDir) -->Line_20 $$ executor = Executors.newScheduledThreadPool(1)[ CD ]
Line_2 $$ public void start(File dataDir) -->Line_21 $$ destinations = new MapMaker().makeComputingMap(new Function<String, List<ClientIdentity>>() [ CD ]
Line_21 $$ destinations = new MapMaker().makeComputingMap(new Function<String, List<ClientIdentity>>() -->Line_23 $$ return loadClientIdentity(destination)[ CD ]
Line_23 $$ return loadClientIdentity(destination)-->Line_23 $$ return loadClientIdentity(destination)[ CD ]
Line_21 $$ destinations = new MapMaker().makeComputingMap(new Function<String, List<ClientIdentity>>() -->Line_23 $$ return loadClientIdentity(destination)[ FD ]
Line_15 $$ dataFileCaches = new MapMaker().makeComputingMap(new Function<String, File>() -->Line_23 $$ return loadClientIdentity(destination)[ FD ]
Line_2 $$ public void start(File dataDir) -->Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() [ CD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)[ CD ]
Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)-->Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)[ CD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_29 $$ if (position == null) [ CD ]
Line_28 $$ Position position = loadCursor(clientIdentity.getDestination(), clientIdentity)-->Line_29 $$ if (position == null) [ FD ]
Line_29 $$ if (position == null) -->Line_30 $$ return nullCursor[ CD ]
Line_29 $$ if (position == null) -->Line_32 $$ return position[ CD ]
Line_2 $$ public void start(File dataDir) -->Line_36 $$ updateCursorTasks = Collections.synchronizedSet(new HashSet<ClientIdentity>())[ CD ]
Line_2 $$ public void start(File dataDir) -->Line_37 $$ executor.scheduleAtFixedRate(new Runnable() [ CD ]
Line_37 $$ executor.scheduleAtFixedRate(new Runnable() -->Line_39 $$ List<ClientIdentity> tasks = new ArrayList<ClientIdentity>(updateCursorTasks)[ CD ]
Line_40 $$ for (ClientIdentity clientIdentity : tasks) -->Line_41 $$ MDC.put("destination", String.valueOf(clientIdentity.getDestination()))[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_41 $$ MDC.put("destination", String.valueOf(clientIdentity.getDestination()))[ FD ]
Line_43 $$ if (logger.isInfoEnabled()) -->Line_43 $$ if (logger.isInfoEnabled()) [ CD ]
Line_43 $$ if (logger.isInfoEnabled()) -->Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)[ CD ]
Line_40 $$ for (ClientIdentity clientIdentity : tasks) -->Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)[ FD ]
Line_43 $$ if (logger.isInfoEnabled()) -->Line_45 $$ logger.info("clientId:[ CD ]
Line_40 $$ for (ClientIdentity clientIdentity : tasks) -->Line_45 $$ logger.info("clientId:[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_45 $$ logger.info("clientId:[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_45 $$ logger.info("clientId:[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_45 $$ logger.info("clientId:[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_45 $$ logger.info("clientId:[ FD ]
Line_44 $$ LogPosition cursor = (LogPosition) getCursor(clientIdentity)-->Line_45 $$ logger.info("clientId:[ FD ]
Line_40 $$ for (ClientIdentity clientIdentity : tasks) -->Line_50 $$ flushDataToFile(clientIdentity.getDestination())[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_50 $$ flushDataToFile(clientIdentity.getDestination())[ FD ]
Line_40 $$ for (ClientIdentity clientIdentity : tasks) -->Line_51 $$ updateCursorTasks.remove(clientIdentity)[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_51 $$ updateCursorTasks.remove(clientIdentity)[ FD ]
Line_40 $$ for (ClientIdentity clientIdentity : tasks) -->Line_53 $$ logger.error("period update" + clientIdentity.toString() + " curosr failed!", e)[ FD ]
Line_26 $$ cursors = new MapMaker().makeComputingMap(new Function<ClientIdentity, Position>() -->Line_53 $$ logger.error("period update" + clientIdentity.toString() + " curosr failed!", e)[ FD ]
