Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ public static Repository load(URL repositoryUrl) throws MojoExecutionException [ CD ]
Line_2 $$ public static Repository load(URL repositoryUrl) throws MojoExecutionException -->Line_3 $$ String repositoryAsString[ CD ]
Line_2 $$ public static Repository load(URL repositoryUrl) throws MojoExecutionException -->Line_4 $$ Repository repository[ CD ]
Line_3 $$ String repositoryAsString-->Line_6 $$ repositoryAsString = IOUtils.toString(repositoryUrl, "UTF-8")[ FD ]
Line_6 $$ repositoryAsString = IOUtils.toString(repositoryUrl, "UTF-8")-->Line_6 $$ repositoryAsString = IOUtils.toString(repositoryUrl, "UTF-8")[ FD ]
Line_6 $$ repositoryAsString = IOUtils.toString(repositoryUrl, "UTF-8")-->Line_6 $$ repositoryAsString = IOUtils.toString(repositoryUrl, "UTF-8")[ CD ]
Line_2 $$ public static Repository load(URL repositoryUrl) throws MojoExecutionException -->Line_6 $$ repositoryAsString = IOUtils.toString(repositoryUrl, "UTF-8")[ FD ]
Line_2 $$ public static Repository load(URL repositoryUrl) throws MojoExecutionException -->Line_8 $$ throw new MojoExecutionException("ERROR: Could not download repository from url " + Utils.quote(repositoryUrl), ex)[ FD ]
Line_4 $$ Repository repository-->Line_11 $$ repository = (Repository) (new Gson()).fromJson(repositoryAsString, Repository.class)[ FD ]
Line_11 $$ repository = (Repository) (new Gson()).fromJson(repositoryAsString, Repository.class)-->Line_11 $$ repository = (Repository) (new Gson()).fromJson(repositoryAsString, Repository.class)[ FD ]
Line_3 $$ String repositoryAsString-->Line_11 $$ repository = (Repository) (new Gson()).fromJson(repositoryAsString, Repository.class)[ FD ]
Line_6 $$ repositoryAsString = IOUtils.toString(repositoryUrl, "UTF-8")-->Line_11 $$ repository = (Repository) (new Gson()).fromJson(repositoryAsString, Repository.class)[ FD ]
Line_2 $$ public static Repository load(URL repositoryUrl) throws MojoExecutionException -->Line_15 $$ repository.drivers = Utils.sortDrivers(repository.drivers)[ CD ]
Line_15 $$ repository.drivers = Utils.sortDrivers(repository.drivers)-->Line_15 $$ repository.drivers = Utils.sortDrivers(repository.drivers)[ CD ]
Line_2 $$ public static Repository load(URL repositoryUrl) throws MojoExecutionException -->Line_16 $$ return repository[ CD ]
