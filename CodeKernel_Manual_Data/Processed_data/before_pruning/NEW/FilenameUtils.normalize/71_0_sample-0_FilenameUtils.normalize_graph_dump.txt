Line_0 $$ Entry-->Line_1 $$ public class dummy [ CD ]
Line_1 $$ public class dummy -->Line_2 $$ private List<File> processFilesToIgnore(final List<String> filesToIgnore) [ CD ]
Line_2 $$ private List<File> processFilesToIgnore(final List<String> filesToIgnore) -->Line_3 $$ if (filesToIgnore == null || filesToIgnore.isEmpty()) [ CD ]
Line_2 $$ private List<File> processFilesToIgnore(final List<String> filesToIgnore) -->Line_3 $$ if (filesToIgnore == null || filesToIgnore.isEmpty()) [ FD ]
Line_3 $$ if (filesToIgnore == null || filesToIgnore.isEmpty()) -->Line_4 $$ return EMPTY_FILE_LIST[ CD ]
Line_2 $$ private List<File> processFilesToIgnore(final List<String> filesToIgnore) -->Line_6 $$ final List<File> filesIgnored = new ArrayList<File>(filesToIgnore.size())[ CD ]
Line_2 $$ private List<File> processFilesToIgnore(final List<String> filesToIgnore) -->Line_6 $$ final List<File> filesIgnored = new ArrayList<File>(filesToIgnore.size())[ FD ]
Line_7 $$ for (String fileToIgnore : new LinkedHashSet<String>(filesToIgnore)) -->Line_8 $$ if (StringUtils.isNotBlank(fileToIgnore)) [ FD ]
Line_8 $$ if (StringUtils.isNotBlank(fileToIgnore)) -->Line_8 $$ if (StringUtils.isNotBlank(fileToIgnore)) [ CD ]
Line_7 $$ for (String fileToIgnore : new LinkedHashSet<String>(filesToIgnore)) -->Line_8 $$ if (StringUtils.isNotBlank(fileToIgnore)) [ FD ]
Line_8 $$ if (StringUtils.isNotBlank(fileToIgnore)) -->Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))[ CD ]
Line_7 $$ for (String fileToIgnore : new LinkedHashSet<String>(filesToIgnore)) -->Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))[ FD ]
Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))-->Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))[ FD ]
Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))-->Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))[ CD ]
Line_7 $$ for (String fileToIgnore : new LinkedHashSet<String>(filesToIgnore)) -->Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))[ FD ]
Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))-->Line_9 $$ fileToIgnore = FilenameUtils.separatorsToSystem(FilenameUtils.normalize(fileToIgnore.trim()))[ FD ]
Line_8 $$ if (StringUtils.isNotBlank(fileToIgnore)) -->Line_10 $$ final File file = new File(fileToIgnore)[ CD ]
Line_8 $$ if (StringUtils.isNotBlank(fileToIgnore)) -->Line_11 $$ if (file.exists()) [ CD ]
Line_10 $$ final File file = new File(fileToIgnore)-->Line_11 $$ if (file.exists()) [ FD ]
Line_11 $$ if (file.exists()) -->Line_11 $$ if (file.exists()) [ CD ]
Line_10 $$ final File file = new File(fileToIgnore)-->Line_11 $$ if (file.exists()) [ FD ]
Line_11 $$ if (file.exists()) -->Line_12 $$ log.debug("Adding ignore for file: " + file.getAbsolutePath())[ CD ]
Line_10 $$ final File file = new File(fileToIgnore)-->Line_12 $$ log.debug("Adding ignore for file: " + file.getAbsolutePath())[ FD ]
Line_11 $$ if (file.exists()) -->Line_13 $$ filesIgnored.add(file)[ CD ]
Line_6 $$ final List<File> filesIgnored = new ArrayList<File>(filesToIgnore.size())-->Line_13 $$ filesIgnored.add(file)[ FD ]
Line_10 $$ final File file = new File(fileToIgnore)-->Line_13 $$ filesIgnored.add(file)[ FD ]
Line_2 $$ private List<File> processFilesToIgnore(final List<String> filesToIgnore) -->Line_17 $$ return filesIgnored[ CD ]
