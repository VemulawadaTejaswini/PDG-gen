
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class670.findOneUser(ResultSet[] results)#0{
    Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
    PreparedStatement ps = conn.prepareStatement( "select id, name from t_user where name=?" );
    ps.setString( 1, "steve" );
    results[0] = ps.executeQuery();
}
    
   
  
   







 Instance 1







   
  
   
    
Class600.getTwoApplicants(String name1,String name2,ResultSet[] rs1)#1{
            DriverManager.getConnection("jdbc:default:connection");
            conn.prepareStatement("select * from APPLICANT where name = ? "
                + "or name = ?");
        ps1.setString(2, name2);
        rs1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 2







   
  
   
    
Class50.getUser(Connection conn,String userName,String password){
        PreparedStatement prep = conn.prepareStatement(
                "SELECT * FROM USERS WHERE NAME=? AND PASSWORD=?");
        prep.setString(2, password);
        return prep.executeQuery();
}
    
   
  
   







 Instance 3







   
  
   
    
Class670.testFullyQualifiedRVCInList()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(3, ROW5);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 4







   
  
   
    
Class460.test_0()#3{
            Connection conn = dataSource.getConnection();
            PreparedStatement stmt = conn.prepareStatement("select ?");
            stmt.setString(1, "aaa");
            ResultSet rs = stmt.executeQuery();
            rs.close();
}
    
   
  
   







 Instance 5







   
  
   
    
Class620.readDataTableIndexRow(Connection conn,String schemaName,String tableName,String indexName){
        PreparedStatement stmt = conn.prepareStatement(SELECT_DATA_INDEX_ROW);
        stmt.setString(3, indexName);
        return stmt.executeQuery();
}
    
   
  
   







 Instance 6







   
  
   
    
Class180.testNonNullMultiCondCaseStatement()#0{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData rsm = rs.getMetaData();
            assertEquals(ResultSetMetaData.columnNoNulls,rsm.isNullable(1));
            conn.close();
}
    
   
  
   







 Instance 7







   
  
   
    
Class460.testWrap()#0{
        Connection conn = dataSource.getConnection();
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setString(1, "xxx");
        ResultSet rs = stmt.executeQuery();
        ResultSet raw = rs.unwrap(ResultSet.class);
        Assert.assertTrue(raw instanceof MockResultSet);
        rs.close();
}
    
   
  
   







 Instance 8







   
  
   
    
Class40.doRun(Connection cx){
                String sql = format("SELECT src FROM %s WHERE dst = ?", EDGES);
                PreparedStatement ps = cx.prepareStatement(log(sql, LOG, node));
                ps.setString(1, node);
                return ps.executeQuery();
}
    
   
  
   







 Instance 9







   
  
   
    
Class660.getAccountExists(String login){
    Connection con = DatabaseConnection.getConnection();
      PreparedStatement ps = con.prepareStatement("SELECT name FROM accounts WHERE name = ?");
      ps.setString(1, login);
      ResultSet rs = ps.executeQuery();
      if (rs.first()) {
        accountExists = true;
      }
}
    
   
  
   







 Instance 10







   
  
   
    
Class230.doRun(Connection cx)#0{
                PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, section)));
                ps.setString(1, section);
                ResultSet rs = open(ps.executeQuery());
}
    
   
  
   







 Instance 11







   
  
   
    
Class230.doRun(Connection cx)#1{
                PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, section)));
                ps.setString(1, section);
                ResultSet rs = open(ps.executeQuery());
}
    
   
  
   







 Instance 12







   
  
   
    
Class190.getPortletPreferencesResultSet(String portletId,int ownerType){
    Connection con = DataAccess.getUpgradeOptimizedConnection();
    PreparedStatement ps = con.prepareStatement(
      "select portletPreferencesId, ownerId, ownerType, plid, " +
        "portletId, preferences from PortletPreferences where " +
          "ownerType = ? and portletId = ?");
    ps.setInt(1, ownerType);
    ps.setString(2, portletId);
    return ps.executeQuery();
}
    
   
  
   







 Instance 13







   
  
   
    
Class350.doRun(Connection cx){
                String sql = format(
                        "SELECT conflict FROM %s WHERE namespace = ? AND path LIKE '%%%s%%'",
                        CONFLICTS, pathFilter);
                PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, namespace)));
                ps.setString(1, namespace);
                return ps.executeQuery();
}
    
   
  
   





