
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class140.testMappingsWithEmbedEnumAndEnumDBTypes()#2{
        final PreparedStatement ps = connection.prepareStatement(
                "SELECT 'VALUE_1'::enumeration as a, 'VALUE_2'::enumeration as b, 'str' as str");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 1







   
  
   
    
Class140.testPrimitiveMappingsWithEmbed()#1{
        final PreparedStatement ps = connection.prepareStatement("SELECT 1 as i, 2 as l, 'c' as c, 'str' as str");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 2







   
  
   
    
Class270.testListWithEmptyEnums()#1{
        final PreparedStatement ps = connection.prepareStatement(
                "SELECT 'str' as str, ARRAY[]::enumeration[] as enum_arr");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 3







   
  
   
    
Class340.test()#1{
                PreparedStatement statement = connection.prepareStatement(sql);
                ResultSet result = statement.executeQuery();
                int size = result.getMetaData().getColumnCount();
}
    
   
  
   







 Instance 4







   
  
   
    
Class100.setup()#1{
        connection = (Connection)((AbstractSession)getSession()).getAccessor().getDatasourceConnection();
        PreparedStatement statement = connection.prepareStatement("SELECT EMP_ID FROM EMPLOYEE");
        ResultSet result = statement.executeQuery();
        int size = result.getMetaData().getColumnCount();
}
    
   
  
   







 Instance 5







   
  
   
    
Class270.testObjectWithNullList()#1{
        final PreparedStatement ps = connection.prepareStatement("SELECT null as arr, 'str' as str ");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 6







   
  
   
    
Class680.testListWithInvalidEnums(){
        final PreparedStatement ps = connection.prepareStatement(
                "SELECT 'str' as str, ARRAY['VALUE_3'::enumeration]::enumeration[] as enum_arr");
        ps.executeQuery();
}
    
   
  
   







 Instance 7







   
  
   
    
Class130.testEnumMappings()#1{
        final PreparedStatement ps = connection.prepareStatement("SELECT 0 as a, 'VALUE_2' as b");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 8







   
  
   
    
Class10.testDateTimeMappings()#0{
        final PreparedStatement ps = connection.prepareStatement("SELECT lt, gt, zone from tmp.test_time");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 9







   
  
   
    
Class10.testColumnMappings()#1{
        final PreparedStatement ps = connection.prepareStatement("SELECT 2 as l, 'c' as c");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 10







   
  
   
    
Class300.testHStoreNull()#0{
        final PreparedStatement ps = connection.prepareStatement("SELECT 'str' as str, null as map");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 11







   
  
   
    
Class300.enumTransformation()#1{
        final PreparedStatement stmt = connection.prepareStatement(String.format("SELECT '%s' AS male_female;",
                    dbCode));
        final ResultSet result = stmt.executeQuery();
}
    
   
  
   







 Instance 12







   
  
   
    
Class440.testPrimitives()#2{
        final PreparedStatement ps = connection.prepareStatement("SELECT tmp.primitives_function();");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 13







   
  
   
    
Class440.testNullString()#0{
        final PreparedStatement ps = connection.prepareStatement("SELECT null as str");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 14







   
  
   
    
Class190.testPrimitiveMappings()#0{
        final PreparedStatement ps = connection.prepareStatement("SELECT 1 as i, 2 as l, 'c' as c");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 15







   
  
   
    
Class630.testPrimitiveBigDecimalMapper()#2{
        final PreparedStatement ps = connection.prepareStatement("SELECT 1 as i");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 16







   
  
   
    
Class670.testObjectStringMappingWithNullString()#2{
        final PreparedStatement ps = connection.prepareStatement(
                "SELECT ROW(1,2,'c', null)::tmp.simple_type_for_embed as obj");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 17







   
  
   
    
Class600.testInvalidTimeout()#0{
        connection.setAutoCommit(true);
        PreparedStatement statement = connection.prepareStatement("select 'hello'");
            statement.setQueryTimeout(-1);
        ResultSet resultSet = statement.executeQuery();
        resultSet.close();
}
    
   
  
   







 Instance 18







   
  
   
    
Class660.select(String sql,Class<T> clazz){
            sql = sql.replaceAll("\\{namespace\\}", tableNamespace);
            PreparedStatement stmt = connection.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            throw new RuntimeException("Could no run sql: " + sql, ex);
}
    
   
  
   







 Instance 19







   
  
   
    
Class500.testNullObjectInObject()#1{
        final PreparedStatement ps = connection.prepareStatement(
                "SELECT 'str' as str, ROW(null,'str')::tmp.complex_type as obj");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 20







   
  
   
    
Class500.testHStoreFilled()#1{
        final PreparedStatement ps = connection.prepareStatement("SELECT 'str' as str, hstore('key', 'val') as map");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 21







   
  
   
    
Class500.testEnumMappingsWithEnumInComplexType()#0{
        final PreparedStatement ps = connection.prepareStatement(
                "select * from simple_with_enumeration_type_function();");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 22







   
  
   
    
Class500.testObjectWithEmptyList()#1{
        final PreparedStatement ps = connection.prepareStatement(
                "SELECT ROW(ARRAY[]::tmp.simple_type[], 'str')::tmp.array_type as obj, 'str' as str ");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 23







   
  
   
    
Class150.testPrimitivesWithSearchPath()#1{
        DbFunctionRegister.reInitRegistry(connection);
        final PreparedStatement ps = connection.prepareStatement("SELECT primitives_function();");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   







 Instance 24







   
  
   
    
Class370.testSimpleStringSet()#1{
        final PreparedStatement ps = connection.prepareStatement(
                "SELECT 'str' as str, ARRAY['result_1', 'result_2']::text[] as arr");
        final ResultSet rs = ps.executeQuery();
}
    
   
  
   





