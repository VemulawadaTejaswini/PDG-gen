
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class400.testAmbiguousColumn()#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 1







   
  
   
    
Class480.testAmbiguousStaticSelect()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(upsertquery);
            statement.executeQuery();
}
    
   
  
   







 Instance 2







   
  
   
    
Class480.testJoinWithIncomparableJoinKeyTypes()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 3







   
  
   
    
Class480.testFakeCFDynamicUpsert()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(upsertquery);
            statement.executeQuery();
}
    
   
  
   







 Instance 4







   
  
   
    
Class320.testDynamicFamilyException()#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 5







   
  
   
    
Class400.testOrderByNotInSelectDistinct()#2{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 6







   
  
   
    
Class100.testDecimalSubtraction1Expression()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 7







   
  
   
    
Class170.testIntToDecimalDivideExpression()#1{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 8







   
  
   
    
Class110.testDivideByIntegerZero()#1{
        long ts = nextTimestamp();
        String url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 5); // Run query at timestamp 5
        Connection conn = DriverManager.getConnection(url);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 9







   
  
   
    
Class470.testDynamicFamilyFunctionException()#0{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 10







   
  
   
    
Class560.findUserIds(ResultSet[] results)#0{
    Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
    PreparedStatement ps = conn.prepareStatement( "select id from t_user" );
    results[0] = ps.executeQuery();
}
    
   
  
   







 Instance 11







   
  
   
    
Class180.proc_test1_DeleteBeforeTrigger_select_table(int p1)#1{
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
        PreparedStatement ps = conn.prepareStatement("select updates from " +
            "table2 where table2.id = " + p1);
        ps.executeQuery();
}
    
   
  
   







 Instance 12







   
  
   
    
Class220.selectRows(ResultSet[] data1)#0{
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
            PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET");
            data1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 13







   
  
   
    
Class630.findAllCoffeeBeverages(ResultSet[] coffeeBeverages){
    connection = DriverManager.getConnection("jdbc:default:connection");
    statement = connection.prepareStatement(sql);
    coffeeBeverages[0] = statement.executeQuery();
}
    
   
  
   







 Instance 14







   
  
   
    
Class600.hashmapReader(){
        Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
        PreparedStatement ps = conn.prepareStatement( "select intCol, hashmapCol from t_11" );
        return ps.executeQuery();
}
    
   
  
   







 Instance 15







   
  
   
    
Class360.readFoos(ResultSet[] rs){
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
        PreparedStatement ps1 = conn.prepareStatement(SQL);
        rs[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 16







   
  
   
    
Class360.selectFromSpecificSchema(int p1)#0{
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement ps = conn.prepareStatement("select * from mamta1.t12RoutineTest");
    ps.executeQuery();
    ps.close();
}
    
   
  
   







 Instance 17







   
  
   
    
Class270.testPartiallyQualifiedRVCInList()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 18







   
  
   
    
Class400.testCoelesceFunctionTypeMismatch()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 19







   
  
   
    
Class380.blobselect(ResultSet[] results)#0{
        Connection conn = DriverManager.getConnection(
      "jdbc:default:connection");
    PreparedStatement st = conn.prepareStatement("select * from lobCheckTwo");
    results[0] = st.executeQuery();
}
    
   
  
   







 Instance 20







   
  
   
    
Class650.testMutationUsingExecuteQueryShouldFail()#2{
        Connection connection = DriverManager.getConnection(getUrl(), connectionProperties);
        PreparedStatement stmt = connection.prepareStatement("DELETE FROM " + ATABLE);
            stmt.executeQuery();
}
    
   
  
   







 Instance 21







   
  
   
    
Class260.getAllApplicants(ResultSet[] rs1)#0{
            DriverManager.getConnection("jdbc:default:connection");
            conn.prepareStatement("select * from APPLICANT");
        rs1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 22







   
  
   
    
Class150.getSplitTestRecords(ResultSet[] data1,ResultSet[] data2)#0{
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
            PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET WHERE POSITION <= 2");
            data1[0] = ps1.executeQuery();
}
    
   
  
   





