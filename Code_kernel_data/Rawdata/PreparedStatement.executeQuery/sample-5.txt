
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class420.getOrdersByProcess(Integer processId)#1{
        stmt.setInt(1, processId.intValue());
        ResultSet res = stmt.executeQuery();
}
    
   
  
   







 Instance 1







   
  
   
    
Class590.testAddToDate()#0{
         PreparedStatement prep = getPreparedStatement(select);
         prep.setInt(1, 10);
         prep.executeQuery();
         prep.close();
}
    
   
  
   







 Instance 2







   
  
   
    
Class430.getAccountProfileData(Connection conn,Integer accountID)#0{
        stmt.setInt(1, accountID.intValue());
        ResultSet rs = stmt.executeQuery();
        AccountProfileDataBean accountProfileData = getAccountProfileDataFromResultSet(rs);
        stmt.close();
}
    
   
  
   







 Instance 3







   
  
   
    
Class440.getAccountData(int accountID,Connection conn){
        PreparedStatement stmt = getStatement(conn, getAccountSQL);
        stmt.setInt(1, accountID);
        ResultSet rs = stmt.executeQuery();
        AccountDataBean accountData = getAccountDataFromResultSet(rs);
        stmt.close();
}
    
   
  
   







 Instance 4







   
  
   
    
Class670.testUpdateablePreparedStatement()#1{
    st.close();
    st = con.prepareStatement("select * from updateable where id = ?", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
    st.setInt(1, 1);
    rs = st.executeQuery();
    rs.moveToInsertRow();
    rs.close();
}
    
   
  
   







 Instance 5







   
  
   
    
Class420.listBBSThreads(MapleClient c,int start)#1{
      ps.setInt(1, c.getPlayer().getGuildId());
      ResultSet rs = ps.executeQuery();
      c.announce(MaplePacketCreator.BBSThreadList(rs, start));
      rs.close();
}
    
   
  
   







 Instance 6







   
  
   
    
Class470.foo(Connection connection)#0{
    ps.setString(getIntValue(), ""); // Compliant - first argument can not be evaluated
    ps.setInt(1, 0); // Compliant
    ResultSet rs = ps.executeQuery();
    rs.getString(0); // Noncompliant - First column index is 1
}
    
   
  
   







 Instance 7







   
  
   
    
Class680.run(PreparedStatement stm)#2{
                    stm.setInt(1, inviter.getUserId());
                    ResultSet rs = stm.executeQuery();
}
    
   
  
   







 Instance 8







   
  
   
    
Class130.test()#2{
        PreparedStatement ps = conn.prepareStatement(sql);
        ps.setInt(1, 30);
        rs = ps.executeQuery();
        rs.next();
}
    
   
  
   







 Instance 9







   
  
   
    
Class580.executeIntQuery(Connection connection,String queryString,int[] args)#0{
  for( int i = 0; i < args.length; ++i )
    {
    pStatement.setInt( i + 1, args[ i ] );
    }
return pStatement.executeQuery();
}
    
   
  
   







 Instance 10







   
  
   
    
Class410.getVectorClockByDatabaseVersionId(int databaseVersionId)#0{
    PreparedStatement preparedStatement = getStatement("databaseversion.select.all.getVectorClockByDatabaseVersionId.sql");
    preparedStatement.setInt(1, databaseVersionId);
    ResultSet resultSet = preparedStatement.executeQuery();
}
    
   
  
   







 Instance 11







   
  
   
    
Class570.testDerby4376()#0{
        PreparedStatement ps = prepareStatement(
                "select * from d4376 where x in (?, ?)");
        ps.setNull(1, Types.INTEGER);
        ps.setInt(2, 1);
        JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
}
    
   
  
   







 Instance 12







   
  
   
    
Class240.run(PreparedStatement stm)#2{
                    stm.setInt(1, profile.getUserId());
                    ResultSet rs = stm.executeQuery();
}
    
   
  
   







 Instance 13







   
  
   
    
Class230.execQueryBug5191(PreparedStatement pStmt,int catId){
        pStmt.setInt(1, catId);
        this.rs = pStmt.executeQuery();
        assertTrue(this.rs.next());
        assertTrue(this.rs.next());
        assertFalse(this.rs.next());
}
    
   
  
   







 Instance 14







   
  
   
    
Class20.execQueryBug5191(PreparedStatement pStmt,int catId){
    pStmt.setInt(1, catId);
    this.rs = pStmt.executeQuery();
    assertTrue(this.rs.next());
    assertTrue(this.rs.next());
    assertFalse(this.rs.next());
}
    
   
  
   





