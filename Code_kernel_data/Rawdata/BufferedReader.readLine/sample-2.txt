
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class300.getSideEffect(final String file)#0{
        BufferedReader br = new BufferedReader(new FileReader(file));
        String line = br.readLine();
        while (line != null) {
            lines.add(line);
            line = br.readLine();
        }
        br.close();
}
    
   
  
   







 Instance 1







   
  
   
    
Class0.test_readLine_all_line_endings(){
        BufferedReader r = new BufferedReader(new StringReader("1\r2\n3\r\n4"));
        assertEquals("1", r.readLine());
        assertEquals("2", r.readLine());
        assertEquals("3", r.readLine());
        assertEquals("4", r.readLine());
        assertNull(r.readLine());
}
    
   
  
   







 Instance 2







   
  
   
    
Class170.testCreateWithLineEnding()#0{
    BufferedReader reader = factory.create(new ByteArrayResource("a||b".getBytes()), "UTF-8");
    assertEquals("a", reader.readLine());
    assertEquals("b", reader.readLine());
    assertEquals(null, reader.readLine());
}
    
   
  
   







 Instance 3







   
  
   
    
Class490.main(String args[]){
        InputStreamReader converter = new InputStreamReader(System.in);
        BufferedReader in = new BufferedReader(converter);
        List<String> s1 = Arrays.asList( in.readLine().trim().split("\\s+") );
        List<String> s2 = Arrays.asList( in.readLine().trim().split("\\s+") );
        int big1 = Integer.parseInt(in.readLine().trim());
        int big2 = Integer.parseInt(in.readLine().trim());
        System.out.println(jaccard(s1,s2));
        System.out.println(sampleCorrectedJaccard(s1,s2, big1,big2));
}
    
   
  
   







 Instance 4







   
  
   
    
Class210.test_readLine_interaction_with_mark_and_reset(){
        BufferedReader r = new BufferedReader(new StringReader("1\r\n2\n3"));
        assertEquals("1", r.readLine());
        r.mark(256);
        assertEquals('2', r.read()); // This read skips the '\n'.
        assertEquals("", r.readLine());
        r.reset(); // Now we're back half-way through the "\r\n".
        assertEquals("2", r.readLine());
        assertEquals("3", r.readLine());
        assertNull(r.readLine());
}
    
   
  
   







 Instance 5







   
  
   
    
Class370.readFile(String filename)#0{
    BufferedReader in = new BufferedReader(new FileReader(filename));
    String line = in.readLine();
    while (line != null) {
      result.add(line);
      line = in.readLine();
    }
    in.close();
}
    
   
  
   







 Instance 6







   
  
   
    
Class350.loadSiteList(){
    BufferedReader in = new BufferedReader(new FileReader(inPath + "top500.list"));
      String line = in.readLine();
      while (line != null) {
          urls.add(line);
          line = in.readLine();
      }
      in.close();
}
    
   
  
   







 Instance 7







   
  
   
    
Class710.readLogMessagesFromFile(String fileName){
        File logFile = new File(fileName);
        BufferedReader r = new BufferedReader(new FileReader(logFile));  
        String logMessage = r.readLine();
        while(logMessage != null){
            this.addLog(logMessage);
            logMessage = r.readLine();
        }
        r.close();
}
    
   
  
   







 Instance 8







   
  
   
    
Class370.getData(HttpServletRequest req)#0{
    String line = reader.readLine();
    while (line != null) {
      sb.append(line + "\n");
      line = reader.readLine();
    }
    reader.close();
}
    
   
  
   







 Instance 9







   
  
   
    
Class310.readFile()#0{
        BufferedReader br = new BufferedReader(new FileReader("src/test/resources/script1"));
        String line = br.readLine();
        while (line != null) {
            if (line.trim().length() > 0 && !line.trim().startsWith("#"))
                lines.add(line);
            line = br.readLine();
        }
}
    
   
  
   







 Instance 10







   
  
   
    
Class680.testBeautify(){
        String res = DefaultRSAPubKey.beautify(longStr);
        BufferedReader sbuf = new BufferedReader(new StringReader(res));
        while ((line = sbuf.readLine()) != null) {
            if (line.length() != 60) {
                assertTrue("only the last line can be less than 60 chars", sbuf.readLine() == null);
            }
        }
}
    
   
  
   







 Instance 11







   
  
   
    
Class240.ChineseTrie(String path){
        FileInputStream f = new FileInputStream(path);
        BufferedReader dr=new BufferedReader(new InputStreamReader(f, "UTF-8"));
        String line = dr.readLine();
        while(line != null) {
            addAWord(line.trim());
            line = dr.readLine();
        }
}
    
   
  
   







 Instance 12







   
  
   
    
Class600.readNextLine(BufferedReader reader){
        String line = reader.readLine();
        while (line != null && (line.isEmpty() || line.trim().startsWith("//"))) {
            line = reader.readLine();
        }
}
    
   
  
   







 Instance 13







   
  
   
    
Class720.readwoBS(BufferedReader reader){
  if( (line = reader.readLine())!=null){
      while( line.endsWith("\\") &&
       ((line2 = reader.readLine()) != null) ){
    line = line.substring(0,line.length()-1);
    line += line2;
      }
  }
}
    
   
  
   







 Instance 14







   
  
   
    
Class690.loadTextFile(final String location,final List<String> list){
    final BufferedReader reader = new BufferedReader(getReader(location));
    String line = reader.readLine();
    while (line != null) {
      list.add(line);
      line = reader.readLine();
    }
}
    
   
  
   







 Instance 15







   
  
   
    
Class640.readLines(File f)#0{
    BufferedReader bufferedReader = new BufferedReader(new FileReader(f));
    String line = bufferedReader.readLine();
    while (line != null) {
      fileLines.add(line);
      line = bufferedReader.readLine();
    }
}
    
   
  
   







 Instance 16







   
  
   
    
Class470.readFile(InputStream is)#0{
    BufferedReader br = new BufferedReader(new InputStreamReader(is));
    String line = br.readLine();
    while (line != null) {
      result.append(line + "\n");
      line = br.readLine();
    }
}
    
   
  
   







 Instance 17







   
  
   
    
Class610.readFile(String path)#0{
        BufferedReader br = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(path)));
        String sCurrentLine = br.readLine();
        while (sCurrentLine != null) {
            sb.append(sCurrentLine);
            sCurrentLine = br.readLine();
        }
}
    
   
  
   







 Instance 18







   
  
   
    
Class680.capture()#0{
        BufferedReader rdr = new BufferedReader(new InputStreamReader(System.in));
        String s = rdr.readLine();
        while (s != null) {
            sw.write(s);
            s = rdr.readLine();
        }
}
    
   
  
   







 Instance 19







   
  
   
    
Class540.readJsonFile()#1{
        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("src/test/resources/sample_bundle.json")));
        String curLine = reader.readLine();
        while (curLine != null) {
            sb = sb.append(curLine);
            curLine = reader.readLine();
        }
}
    
   
  
   







 Instance 20







   
  
   
    
Class110.toLines(final Reader resource)#1{
        String line = br.readLine();
        while (line != null) {
            lines.add(line);
            line = br.readLine();
        }
}
    
   
  
   







 Instance 21







   
  
   
    
Class700.getJson(InputStream stream)#2{
    BufferedReader reader = new BufferedReader( is );
    String read = reader.readLine();
    while( read != null ) {
      stringBuilder.append( read );
      read = reader.readLine();
    }
}
    
   
  
   







 Instance 22







   
  
   
    
Class700.readLines(Reader input)#1{
    String line = reader.readLine();
    while (line != null) {
      list.add(line);
      line = reader.readLine();
    }
}
    
   
  
   







 Instance 23







   
  
   
    
Class240.ScrabbleDictionary(InputStream objDictionaryStream)#0{
    BufferedReader bf=new BufferedReader(new InputStreamReader(objDictionaryStream));
    String sWord=bf.readLine();
    while (sWord!=null){
      storeWord(sWord);
      sWord=bf.readLine();
    }
}
    
   
  
   







 Instance 24







   
  
   
    
Class440.getConnectionContent(Object content)#0{
        String line = buff.readLine();
        while (line != null) {
            text.append(line);
            line = buff.readLine();
        }
}
    
   
  
   







 Instance 25







   
  
   
    
Class720.read(BufferedReader in)#1{
        String line = in.readLine();
        while(line != null){
            buffer.append(line + " ");
            line = in.readLine();
        }
}
    
   
  
   







 Instance 26







   
  
   
    
Class720.readLines(InputStream input)#1{
        String line = reader.readLine();
        while(line != null){
            result.add(line);
            line = reader.readLine();
        }
}
    
   
  
   







 Instance 27







   
  
   
    
Class470.toLines(Reader input)#0{
    String line = reader.readLine();
    while (line != null) {
      list.add(line);
      line = reader.readLine();
    }
}
    
   
  
   







 Instance 28







   
  
   
    
Class500.skipBlock(BufferedReader in){
    String buffer = in.readLine();
    while(buffer != null)
    {
      if(buffer.startsWith("$"))
        return;
      buffer = in.readLine();
    }
}
    
   
  
   







 Instance 29







   
  
   
    
Class550.getHtml(BufferedReader bufferedReader)#0{
        line = bufferedReader.readLine();
        line = StringUtils.removeStart(line, "html:\t");
        htmlBuilder.append(line);
        while ((line = bufferedReader.readLine()) != null) {
            htmlBuilder.append(line);
        }
        return htmlBuilder.toString();
}
    
   
  
   







 Instance 30







   
  
   
    
Class620.parseCodeRangeMappingSection(BufferedReader bf){
    String line = bf.readLine();
    while (line != null) {
      if (line.contains("endcodespacerange")) {
        break;
      }
      parseCodeRangeLine(line);
      line = bf.readLine();
    }
}
    
   
  
   







 Instance 31







   
  
   
    
Class150.skipUntilBegin(BufferedReader reader){
         String line = reader.readLine();
         while (line != null && !line.startsWith(BEGIN)) {
            line = reader.readLine();
         }
         return Optional.fromNullable(line);
}
    
   
  
   







 Instance 32







   
  
   
    
Class310.read_attributes(Attributes attr,BufferedReader br){
    String s = br.readLine();
    while (s != null && (! s.equals("")))
      {
        readAttribute(attr, s, br);
        s = br.readLine();
      }
}
    
   
  
   







 Instance 33







   
  
   
    
Class400.getWordsFromFile(String filename,Set<String> resultSet,boolean lowercase)#0{
    if(filename==null) {
      return ;
    }
    BufferedReader reader = IOUtils.readerFromString(filename);
    while(reader.ready()) {
      if(lowercase) resultSet.add(reader.readLine().toLowerCase());
      else resultSet.add(reader.readLine());
    }
    IOUtils.closeIgnoringExceptions(reader);
}
    
   
  
   







 Instance 34







   
  
   
    
Class340.readIndividualSections(Map entries,BufferedReader br){
    String s = br.readLine();
    while (s != null && (! s.equals("")))
      {
        Attributes attr = readSectionName(s, br, entries);
        read_attributes(attr, br);
        s = br.readLine();
      }
}
    
   
  
   







 Instance 35







   
  
   
    
Class130.lenArray(BufferedReader reader){
    Object arrayObject = gateway.getObject(reader.readLine());
    reader.readLine();
    int length = Array.getLength(arrayObject);
    ReturnObject returnObject = gateway.getReturnObject(length);
    return Protocol.getOutputCommand(returnObject);
}
    
   
  
   







 Instance 36







   
  
   
    
Class360.setArray(BufferedReader reader)#0{
    Object arrayObject = gateway.getObject(reader.readLine());
    int index = (Integer) Protocol.getObject(reader.readLine(), gateway);
}
    
   
  
   







 Instance 37







   
  
   
    
Class0.getArray(BufferedReader reader)#0{
    Object arrayObject = gateway.getObject(reader.readLine());
    int index = (Integer) Protocol.getObject(reader.readLine(), gateway);
}
    
   
  
   







 Instance 38







   
  
   
    
Class500.createJVMView(BufferedReader reader){
    String name = StringUtil.unescape(reader.readLine());
    reader.readLine();
    JVMView newView = new JVMView(name, null);
    ReturnObject rObject = gateway.getReturnObject(newView);
    newView.setId(rObject.getName());
    return Protocol.getOutputCommand(rObject);
}
    
   
  
   







 Instance 39







   
  
   
    
Class130.assertReaders(final BufferedReader expected,final BufferedReader actual)#0{
            final String actualLine = actual.readLine();
            Assert.assertNotNull("Expected had more lines than the actual.", actualLine);
            Assert.assertEquals(expectedLine, actualLine);
        Assert.assertNull("Actual had more lines than the expected.", actual.readLine());
}
    
   
  
   







 Instance 40







   
  
   
    
Class170.testCreateWithLineEndingAtEnd()#0{
    BufferedReader reader = factory.create(new ByteArrayResource("a||".getBytes()), "UTF-8");
    assertEquals("a", reader.readLine());
    assertEquals(null, reader.readLine());
}
    
   
  
   







 Instance 41







   
  
   
    
Class360.setArray(BufferedReader reader)#1{
    Object objectToSet = Protocol.getObject(reader.readLine(), gateway);
    reader.readLine();
    Array.set(arrayObject, index, objectToSet);
}
    
   
  
   







 Instance 42







   
  
   
    
Class30.getStringSet(BufferedReader fin)#0{
    int i, size = Integer.parseInt(fin.readLine());
    for (i=0; i<size; i++)
      set.add(fin.readLine());
}
    
   
  
   







 Instance 43







   
  
   
    
Class170.writeTreeWithOneChild(){
        Tree<String> tree = new Tree<String>("root");
        tree.addChild("child");
        BufferedReader reader = read(tree);
        assertEquals("root"     , reader.readLine());
        assertEquals("+- child" , reader.readLine());
}
    
   
  
   







 Instance 44







   
  
   
    
Class130.parsePhysicalNames(BufferedReader in){
    int nb = Integer.parseInt(in.readLine());
    for(int i = 0; i < nb; i++)
      toReturn[i] = TOKENIZE.split(in.readLine())[2];
}
    
   
  
   







 Instance 45







   
  
   
    
Class420.assertLines(String in,String... lines)#0{
                assertEquals(line, bufferedReader.readLine());
            assertNull(bufferedReader.readLine());
}
    
   
  
   







 Instance 46







   
  
   
    
Class50.getTotalTerms(Configuration conf,String totalTermsPath){
    BufferedReader reader = getBufferedReader(conf, totalTermsPath);
    long totalTerms = Long.parseLong(reader.readLine());
    reader.close();
}
    
   
  
   







 Instance 47







   
  
   
    
Class510.checkSource(int i,File parent,Source source)#0{
            final String line = reader.readLine();
            assertEquals("hello" + i, line);
            reader.close();
}
    
   
  
   







 Instance 48







   
  
   
    
Class430.loadModel(BufferedReader reader){
    double globalAverage = Double.parseDouble(reader.readLine());
    double[] itemBiases = VectorExtensions.readVectorArray(reader);
    reader.close();
}
    
   
  
   







 Instance 49







   
  
   
    
Class500.readLine(final BufferedReader in)#0{
        do line = in.readLine();
        while (line!=null && ((line=line.trim()).length()==0 || line.charAt(0)=='#'));
}
    
   
  
   







 Instance 50







   
  
   
    
Class280.nextLine(BufferedReader br){
    do 
      l = br.readLine().trim();
    while(l.length() == 0);
}
    
   
  
   







 Instance 51







   
  
   
    
Class450.slice_list(BufferedReader reader)#0{
    List list1 = (List) gateway.getObject(reader.readLine());
}
    
   
  
   







 Instance 52







   
  
   
    
Class0.getArray(BufferedReader reader)#1{
    reader.readLine();
    Object getObject = Array.get(arrayObject, index);
    ReturnObject returnObject = gateway.getReturnObject(getObject);
    return Protocol.getOutputCommand(returnObject);
}
    
   
  
   







 Instance 53







   
  
   
    
Class150.handleRequest(BufferedReader reader,PrintWriter writer){
    String line = reader.readLine();
    LOG.info("Received: " + line + " going to divide by it");
    Integer toDivide = Integer.valueOf(line);
    writer.println(Integer.toString(100 / toDivide));
}
    
   
  
   







 Instance 54







   
  
   
    
Class370.handleRequest(BufferedReader reader,PrintWriter writer)#3{
      writer.println(reader.readLine());
}
    
   
  
   







 Instance 55







   
  
   
    
Class0.testCreate()#0{
    BufferedReader reader = factory.create(new ByteArrayResource("a\nb\nc".getBytes()), "UTF-8");
    assertEquals("a", reader.readLine());
}
    
   
  
   







 Instance 56







   
  
   
    
Class280.compareLines(String text,String[] lines)#2{
      Assert.assertEquals(lines[i], reader.readLine());
}
    
   
  
   







 Instance 57







   
  
   
    
Class550.readLine(BufferedReader reader)#2{
            return reader.readLine();
}
    
   
  
   







 Instance 58







   
  
   
    
Class550.readLine(BufferedReader reader)#1{
            line = reader.readLine();
}
    
   
  
   







 Instance 59







   
  
   
    
Class80.FileIterator(BufferedReader br){
            nextLine = br.readLine();
}
    
   
  
   







 Instance 60







   
  
   
    
Class120.getReader_read_receiveStringFromStream()#0{
        BufferedReader reader = sut(stream, mockOutput()).getReader();
        String result = reader.readLine();
}
    
   
  
   







 Instance 61







   
  
   
    
Class120.readLine(BufferedReader reader)#2{
      readLine = reader.readLine();
}
    
   
  
   







 Instance 62







   
  
   
    
Class120.getRecordId(BufferedReader reader)#1{
                    getSegmentStore().getTracker(), reader.readLine());
}
    
   
  
   







 Instance 63







   
  
   
    
Class490.getLineFromReader(BufferedReader rdr)#0{
            return rdr.readLine();
}
    
   
  
   







 Instance 64







   
  
   
    
Class490.getLine(BufferedReader reader)#1{
            s = reader.readLine();
}
    
   
  
   







 Instance 65







   
  
   
    
Class490.readLine(BufferedReader reader)#1{
      return reader.readLine();
}
    
   
  
   







 Instance 66







   
  
   
    
Class340.skipInput()#3{
            (new BufferedReader(new InputStreamReader(in))).readLine();
}
    
   
  
   







 Instance 67







   
  
   
    
Class50.handleContextHeader(BufferedReader document)#0{
        return (readHeader) ? document.readLine().trim() : null;
}
    
   
  
   







 Instance 68







   
  
   
    
Class320.readLine(BufferedReader reader)#0{
            return reader.readLine();
}
    
   
  
   







 Instance 69







   
  
   
    
Class380.loadSeries(S3Client client)#2{
            reader.readLine();
}
    
   
  
   







 Instance 70







   
  
   
    
Class380.loadEpisodes(S3Client client)#3{
            reader.readLine();
}
    
   
  
   







 Instance 71







   
  
   
    
Class180.getLine(ByteArrayOutputStream out)#1{
        return bRd.readLine();
}
    
   
  
   







 Instance 72







   
  
   
    
Class740.testVisitBundle()#0{
    final BufferedReader reader = getResultReader();
    assertEquals(
        "bundle,org.jacoco.example,FooClass,10,15,1,2,0,3,1,2,0,1",
        reader.readLine());
}
    
   
  
   







 Instance 73







   
  
   
    
Class480.readString(final BufferedReader r)#1{
      return r.readLine();
}
    
   
  
   







 Instance 74







   
  
   
    
Class390.testDispatch()#1{
        assertThat("!ForwardingServlet",br.readLine(),equalTo("Dispatched back to ForwardingServlet"));
}
    
   
  
   







 Instance 75







   
  
   
    
Class510.process()#1{
      line = reader.readLine();
      writeToKafka(line);
}
    
   
  
   







 Instance 76







   
  
   
    
Class70.loadBrands(S3Client client)#0{
            reader.readLine();
}
    
   
  
   







 Instance 77







   
  
   
    
Class290.doIt(BufferedReader reader,String input)#1{
      input = reader.readLine();
}
    
   
  
   







 Instance 78







   
  
   
    
Class290.deleteObject(BufferedReader reader)#1{
    reader.readLine();
    gateway.deleteObject(objectId);
}
    
   
  
   







 Instance 79







   
  
   
    
Class190.testGetIndex(){
      BufferedReader remoteFile = synchronizer.getRemoteFile("index.org");
      String firstLine = remoteFile.readLine();
      assertEquals("#+READONLY", firstLine);
      fail("Couldn't get index.org");
}
    
   
  
   







 Instance 80







   
  
   
    
Class270.parseFile(File f,String sep,boolean skipFirstLine)#4{
    if (skipFirstLine) br.readLine();
}
    
   
  
   







 Instance 81







   
  
   
    
Class590.getNextLine(BufferedReader br){
            line = br.readLine();
}
    
   
  
   







 Instance 82







   
  
   
    
Class560.readLine(final BufferedReader reader){
            return reader.readLine();
}
    
   
  
   







 Instance 83







   
  
   
    
Class220.readLine(BufferedReader reader,String fileName)#0{
      return reader.readLine();
}
    
   
  
   







 Instance 84







   
  
   
    
Class160.loadProducts(S3Client client)#3{
            reader.readLine();
}
    
   
  
   







 Instance 85







   
  
   
    
Class730.getReader_read_chokes_onStreamError()#1{
        BufferedReader reader = sut().getReader();
        reader.readLine();
}
    
   
  
   







 Instance 86







   
  
   
    
Class730.TestHeader(){
    BufferedReader reader = getResultReader();
    assertEquals(
        "GROUP,PACKAGE,CLASS,INSTRUCTION_MISSED,INSTRUCTION_COVERED,BRANCH_MISSED,BRANCH_COVERED,LINE_MISSED,LINE_COVERED,COMPLEXITY_MISSED,COMPLEXITY_COVERED,METHOD_MISSED,METHOD_COVERED",
        reader.readLine());
}
    
   
  
   







 Instance 87







   
  
   
    
Class730.run()#1{
            String command = in.readLine();
            runCommand(command, out);
}
    
   
  
   







 Instance 88







   
  
   
    
Class370.getLine(BufferedReader bReader)#2{
            String line = bReader.readLine();
}
    
   
  
   







 Instance 89







   
  
   
    
Class110.serve(Socket s){
      PrintStream ps = GetPrintStream(s);
      BufferedReader br = GetBufferedReader(s);
      String token = br.readLine();
      ps.println(token);
}
    
   
  
   







 Instance 90







   
  
   
    
Class110.SWTSamplesShell()#3{
      line = in.readLine();
}
    
   
  
   







 Instance 91







   
  
   
    
Class110.loadLocations(S3Client client)#1{
            reader.readLine();
}
    
   
  
   







 Instance 92







   
  
   
    
Class350.read(final BufferedReader r)#0{
                return r.readLine();
}
    
   
  
   







 Instance 93







   
  
   
    
Class640.waitForPrompt(BufferedReader stdout,String prompt)#0{
            String line = stdout.readLine();
}
    
   
  
   







 Instance 94







   
  
   
    
Class640.readAhead(BufferedReader br)#1{
            return br.readLine();
}
    
   
  
   







 Instance 95







   
  
   
    
Class300.testSendMessage()#0{
    ss = new SocketService(portNumber, new HelloService());
    Socket s = new Socket("localhost", portNumber);
    BufferedReader br = GetBufferedReader(s);
    String answer = br.readLine();
}
    
   
  
   







 Instance 96







   
  
   
    
Class540.readUmask()#1{
    return lineRead.readLine();
}
    
   
  
   







 Instance 97







   
  
   
    
Class700.main(String[] args)#2{
      System.out.printf("Hi, %s!%n", in.readLine());
}
    
   
  
   







 Instance 98







   
  
   
    
Class700.testFileWithSpaces(PrintWriter out,BufferedReader in)#0{
        response = in.readLine();
}
    
   
  
   







 Instance 99







   
  
   
    
Class200.receive(final BufferedReader in){
        setResponse(in.readLine());
}
    
   
  
   







 Instance 100







   
  
   
    
Class140.assertResult(byte[] bytes,String... lines)#1{
      assertEquals(error + " - line " + (++lineNum), line, reader.readLine());
}
    
   
  
   







 Instance 101







   
  
   
    
Class710.send(final BufferedReader in,final BufferedWriter out,final String s)#0{
        final String r = in.readLine();
}
    
   
  
   





