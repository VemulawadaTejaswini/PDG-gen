
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class90.readNextTrimmedLine(BufferedReader reader){
    String line = reader.readLine();
    if (line!=null) {
      line = line.trim();
    }
}
    
   
  
   







 Instance 1







   
  
   
    
Class280.rdRow(BufferedReader is){
    line = is.readLine ();
    if (line == null)
      return null;
    return line.split ("\\s*" + SEPARATOR + "\\s*");
}
    
   
  
   







 Instance 2







   
  
   
    
Class120.getLabelUnit(BufferedReader labelReader){
    String line = labelReader.readLine();
    if (line == null)
      return null;
    StringTokenizer st = new StringTokenizer(line.trim());
    return st.nextToken();
}
    
   
  
   







 Instance 3







   
  
   
    
Class50.getFeatureUnit(BufferedReader featureReader){
    String line = featureReader.readLine();
    if (line == null)
      return null;
    if (line.trim().equals(""))
      return ""; // empty line -- signal end of section
    StringTokenizer st = new StringTokenizer(line.trim());
    return st.nextToken();
}
    
   
  
   







 Instance 4







   
  
   
    
Class520.readBase(final BufferedReader reader){
        final String line = reader.readLine();
        if (line == null) {
            return null;
        }
        final Matcher matcher = basePattern.matcher(line);
        if (!matcher.matches()) {
            throw new ParseError("expected base line but got \"" + line + "\"");
        }
        return matcher.group(1);
}
    
   
  
   







 Instance 5







   
  
   
    
Class30.parseExecResult(BufferedReader lines)#0{
    String line = lines.readLine();
    if (line == null) {
      throw new IOException("Expecting a line not the end of stream");
    }
    String[] tokens = line.split("\t");
}
    
   
  
   







 Instance 6







   
  
   
    
Class340.expectHeader(String header,BufferedReader br)#0{
    String s = br.readLine();
    if (s == null)
      throw new JarException("unexpected end of file");
    return expectHeader(header, br, s);
}
    
   
  
   







 Instance 7







   
  
   
    
Class420.loadResponse(JFrame top,ResponsePanel rp,BufferedReader br)#2{
            String file = br.readLine();
            if (file == null) {
                System.exit(0);
            }
            loadResponse(top, rp, file);
}
    
   
  
   







 Instance 8







   
  
   
    
Class420.copy(final BufferedReader in,final Appendable out)#0{
      final String line = in.readLine();
      if (line == null)
        break;
      out.append(line).append('\n');
}
    
   
  
   







 Instance 9







   
  
   
    
Class380.readData(File file)#1{
      String line = reader.readLine();
      if (line == null)
        break;
      dataList.add(new JSONObject(line));
}
    
   
  
   







 Instance 10







   
  
   
    
Class740.getNextLine(BufferedReader reader)#1{
        String line = reader.readLine();
        if (line != null) {
            return line;
        } else {
            throw new Exception("Error parsing server status file (unexpectedly ended): "
                    + _file.getPath());
        }
}
    
   
  
   







 Instance 11







   
  
   
    
Class670.getLines(String filename)#2{
      String line = reader.readLine();
      if(line == null)
        break;
      ret.add(line);
}
    
   
  
   







 Instance 12







   
  
   
    
Class670.nextLine(BufferedReader reader)#0{
      final String line = reader.readLine();
      if(line == null) 
        throw new TorParsingException("Did not find expected signature END header");
}
    
   
  
   







 Instance 13







   
  
   
    
Class190.requireLine(BufferedReader reader)#1{
        String line = reader.readLine();
        if (line == null) {
            throw new IllegalStateException("Expected line bug got EOF");
        }
}
    
   
  
   







 Instance 14







   
  
   
    
Class690.toString(InputStream input)#3{
            String line = reader.readLine();
            if (line == null) {
                return builder.toString();
            }
            builder.append(line);
}
    
   
  
   







 Instance 15







   
  
   
    
Class20.parseExecResult(BufferedReader lines)#1{
      String line = lines.readLine();
      if (line == null) {
        throw new IOException("Can't convert '" + command[2] + 
                              " to a cygwin path");
      }
}
    
   
  
   







 Instance 16







   
  
   
    
Class430.load(BufferedReader in)#0{
      String s=in.readLine();
      if (s==null) break;
      textPanel.appendLine(s);
}
    
   
  
   







 Instance 17







   
  
   
    
Class520.main(String[] args)#1{
            String s = r.readLine();
            if (s == null)
                break;
            System.out.println(s + ": " + ConfigurationImpl.toXMLName(s));
}
    
   
  
   





