
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class250.test_readLine_interaction_with_array_read_1(){
        BufferedReader r = new BufferedReader(new StringReader("1\r\n2"));
        assertEquals(2, r.read(new char[2], 0, 2));
        assertEquals("", r.readLine()); // The '\r' we read() didn't count.
        assertEquals("2", r.readLine());
        assertNull(r.readLine());
}
    
   
  
   







 Instance 1







   
  
   
    
Class310.parseHeader(String responseString){
        BufferedReader br = new BufferedReader(new StringReader(responseString));
        assertEquals("HTTP/1.1 200 OK",br.readLine());
        br.readLine();// empty
}
    
   
  
   







 Instance 2







   
  
   
    
Class250.test_readLine_interaction_with_skip(){
        BufferedReader r = new BufferedReader(new StringReader("1\r\n2"));
        assertEquals(2, r.skip(2));
        assertEquals("", r.readLine()); // The '\r' we skip()ed didn't count.
        assertEquals("2", r.readLine());
        assertNull(r.readLine());
}
    
   
  
   







 Instance 3







   
  
   
    
Class210.test_readLine_interaction_with_read(){
        BufferedReader r = new BufferedReader(new StringReader("1\r\n2"));
        assertEquals('1', r.read());
        assertEquals('\r', r.read());
        assertEquals("", r.readLine()); // The '\r' we read() didn't count.
        assertEquals("2", r.readLine());
        assertNull(r.readLine());
}
    
   
  
   







 Instance 4







   
  
   
    
Class40.test_readLine_interaction_with_array_read_2(){
        BufferedReader r = new BufferedReader(new StringReader("1\r\n2"));
        assertEquals("1", r.readLine());
        assertEquals(1, r.read(chars, 0, 1)); // This read skips the '\n'.
        assertEquals('2', chars[0]);
        assertNull(r.readLine());
}
    
   
  
   







 Instance 5







   
  
   
    
Class580.testReadHeader()#1{
        final BufferedReader reader = new BufferedReader(new StringReader(file));
        final String[] header = reader.readLine().split("\t");
}
    
   
  
   







 Instance 6







   
  
   
    
Class120.testParseDotOnNewLine()#0{
    StringReader r = new StringReader("(\n1\n\t.\n 2\n)");
    BufferedReader br = new BufferedReader(r);
    TestForwardMultilineParser p = new TestForwardMultilineParser(br, "test");
    s = br.readLine();
    LispObject lispObject = p.parse(s, 0);
}
    
   
  
   







 Instance 7







   
  
   
    
Class220.testParseSplitString()#0{
    StringReader r = new StringReader ("\"one\ntwo\"");
    BufferedReader br = new BufferedReader(r);
    TestForwardMultilineParser bufferedReaderParser = new TestForwardMultilineParser(br, "test");
    s = br.readLine();
    LispObject lispObject = bufferedReaderParser.parse(s, 0);
}
    
   
  
   







 Instance 8







   
  
   
    
Class110.testParseList()#0{
    BufferedReader br = new BufferedReader(new StringReader("(defun test (\n) \"doc\ndoc\ndoc()\" (message\n\"test\")\n)"));
    TestForwardMultilineParser bufferedReaderParser = new TestForwardMultilineParser(br, "test");
    s = br.readLine();
    LispObject lispObject = bufferedReaderParser.parse(s, 0);
}
    
   
  
   







 Instance 9







   
  
   
    
Class180.testRead(){
        final StringReader stringReader = new StringReader("hello");
        final JavaCCReader javaccReader = new JavaCCReader(stringReader);
        final BufferedReader reader = new BufferedReader(javaccReader);
        assertEquals("hello", reader.readLine());
}
    
   
  
   





