
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class530.defaultParamsDatesTest()#1{
    SimpleJobTrigger trigger = new SimpleJobTrigger( now.getTime(), nextMonth.getTime(), 1, 1000 );
        + now.getTime().toString() + ", endTime=" + nextMonth.getTime().toString() );
}
    
   
  
   







 Instance 1







   
  
   
    
Class650.addElapsedTime(int seconds){
        Calendar calendar = GregorianCalendar.getInstance(TimeZone.getTimeZone("UTC"));
        LOGGER.info("Current time: " + calendar.getTime());
        calendar.add(Calendar.SECOND, seconds);
        LOGGER.info("Updated time (+" + seconds + "): " + calendar.getTime());
        long currentTimeSeconds = calendar.getTimeInMillis() / 1000;
}
    
   
  
   







 Instance 2







   
  
   
    
Class680.run()#0{
      Calendar calendar = Calendar.getInstance();
      m_hour = calendar.getTime().getHours();
      m_minute =calendar.getTime().getMinutes();
      m_second = calendar.getTime().getSeconds();
}
    
   
  
   







 Instance 3







   
  
   
    
Class630.testMidnightCalendars(){
    final Calendar utcCal = CalendarUtils.getUTCMidnightCalendar(CalendarTestUtils.createDate("2012-12-23 08:33:24.123", timeZone), timeZone);
    Assert.assertEquals("2012-12-23 00:00:00.000", CalendarTestUtils.formatUTCIsoDate(utcCal.getTime()));
    final Calendar userCal = CalendarUtils.getMidnightCalendarFromUTC(utcCal.getTime(), timeZone);
    Assert.assertEquals("2012-12-22 23:00:00.000", CalendarTestUtils.formatUTCIsoDate(userCal.getTime()));
}
    
   
  
   







 Instance 4







   
  
   
    
Class160.getDayOfYear(Calendar c){
    Calendar c2 = Calendar.getInstance(c.getTimeZone());
        c2.setTime(c.getTime());
        c2.set(Calendar.DAY_OF_MONTH, 1);
        long diff = c.getTime().getTime() - c2.getTime().getTime();
        return (int)Math.ceil((double)diff / MILLIS_PER_DAY);        
}
    
   
  
   







 Instance 5







   
  
   
    
Class530.rangeRelativeToDate(Date relativeTo,int startMonths,int endMonths){
        Calendar cal = Calendar.getInstance();
        cal.setTime(relativeTo);
        cal.add(Calendar.MONTH, startMonths);
        Date start = cal.getTime();
        cal.setTime(relativeTo);
        cal.add(Calendar.MONTH, endMonths);
        Date end = cal.getTime();
        return new DateRange(start, end);
}
    
   
  
   







 Instance 6







   
  
   
    
Class130.getWeek()#0{
    Calendar cal = Calendar.getInstance();
    Log.d(TAG, "week " + dateFormat.format(cal.getTime()));
    return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 7







   
  
   
    
Class680.startDocument()#1{
    Calendar cal = Calendar.getInstance();
    today = sdf.format(cal.getTime());
    cal.add(Calendar.DAY_OF_MONTH, 1);
    tomorrow = sdf.format(cal.getTime());
}
    
   
  
   







 Instance 8







   
  
   
    
Class250.title(final int cell){
        final Calendar d = (Calendar) date.clone();
        d.add(Calendar.DAY_OF_WEEK, cell);
        final String displayName = dayFormat.format(d.getTime()) + " " + d.get(Calendar.DAY_OF_MONTH) + " " + monthFormat.format(d.getTime());
}
    
   
  
   







 Instance 9







   
  
   
    
Class220.format(int time){
    Calendar calendar = clearTime(new GregorianCalendar());
    calendar.set(HOUR_OF_DAY, time);
    begin = DateFormatUtils.format(calendar.getTime(), TIMEPATTERN);
    calendar.add(HOUR_OF_DAY, 1);
    end = DateFormatUtils.format(calendar.getTime(), TIMEPATTERN);
}
    
   
  
   







 Instance 10







   
  
   
    
Class490.getYear()#0{
    Calendar cal = Calendar.getInstance();
    Log.d(TAG, dateFormat.format(cal.getTime()));
    return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 11







   
  
   
    
Class190.getYear()#1{
        Calendar cal = Calendar.getInstance();
        Log.d(TAG, dateFormat.format(cal.getTime()));
        return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 12







   
  
   
    
Class740.twoSameDateTimesAreEqual()#0{
    Calendar aDate = getInstance();
    DateTime expected = new DateTime(aDate.getTime());
    DateTime actual = new DateTime(aDate.getTime());
}
    
   
  
   







 Instance 13







   
  
   
    
Class140.rangeToTitle(Calendar start,Calendar end,WaybackRequest wbRequest)#0{
    endMinusSecond.setTime(end.getTime());
    endMinusSecond.add(Calendar.SECOND,-1);
        start.getTime(),endMinusSecond.getTime());
}
    
   
  
   







 Instance 14







   
  
   
    
Class780.getBeginDate(Calendar calendar,Date endDate,List<Date> holidays){
    calendar.setTime(endDate);
    calendar.add(Calendar.DATE, 1);
    while (holidays.contains(calendar.getTime())) {
      calendar.add(Calendar.DATE, 1);
    }
    return calendar.getTime();
}
    
   
  
   







 Instance 15







   
  
   
    
Class320.testMergeTranslationWorkSameStateAndContent(){
        Calendar c = new GregorianCalendar();
            generateTarget(ContentState.Translated, c.getTime(), content);
        c.add(Calendar.DATE, 30);
            generateTarget(ContentState.Translated, c.getTime(), content);
        testShouldMergeCondition(target1, target2, false, false);
}
    
   
  
   







 Instance 16







   
  
   
    
Class750.rangeToTitle(Calendar start,Calendar end,WaybackRequest wbRequest)#0{
    end2.setTime(end.getTime());
    end2.add(Calendar.DAY_OF_YEAR,-1);
        start.getTime(),end2.getTime());
}
    
   
  
   







 Instance 17







   
  
   
    
Class800.epochSeconds(){
    Calendar standard = Calendar.getInstance();
    standard.set(2012, 5, 6);
    logger.debug("standard : " + standard.getTime());
    Calendar now = Calendar.getInstance();
    logger.debug("now : " + now.getTime());
    logger.debug("epochSeconds : " + RankingUtils.epochSeconds(standard, now));
}
    
   
  
   







 Instance 18







   
  
   
    
Class660.testMergeTranslationWorkCheckDate2(){
        Calendar c = new GregorianCalendar();
                generateTarget(ContentState.Translated, c.getTime(), "string1");
        c.add(Calendar.DATE, 30);
                generateTarget(ContentState.Translated, c.getTime(), "string2");
        testShouldMergeCondition(target1, target2, true, false);
}
    
   
  
   







 Instance 19







   
  
   
    
Class180.isBabyBoomer(){
    Calendar gmtCal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
    gmtCal.set(1946, Calendar.JANUARY, 1, 0, 0, 0);
    Date boomStart = gmtCal.getTime();
    gmtCal.set(1965, Calendar.JANUARY, 1, 0, 0, 0);
    Date boomEnd = gmtCal.getTime();
    return birthDate.compareTo(boomStart) >= 0
        && birthDate.compareTo(boomEnd) < 0;
}
    
   
  
   







 Instance 20







   
  
   
    
Class270.context(int elapsedMinutes)#0{
        VerifyContext result = new VerifyContext(new TestContext.Empty(), calendar.getTime());
        calendar.add(Calendar.MINUTE, elapsedMinutes);
        result.setTestFinished(calendar.getTime());
}
    
   
  
   







 Instance 21







   
  
   
    
Class180.init()#0{
    calendar.setTime(new Date());
    calendar.set(0, 0, 0, 10, 10);
    this.min = calendar.getTime();
    calendar.set(0, 0, 0, 12, 10);
    this.max = calendar.getTime();
}
    
   
  
   







 Instance 22







   
  
   
    
Class360.assertEqualDates(){
        Calendar cal = Calendar.getInstance();
        cal.set(2010, Calendar.JANUARY, 1, 12, 0, 0);
        Date expected = cal.getTime();
        cal.set(2010, Calendar.JANUARY, 1, 13, 1, 1);
        Date actual = cal.getTime();
        DroidFuAssertions.assertDateEquals(expected, actual);
}
    
   
  
   







 Instance 23







   
  
   
    
Class580.setUp(){
        Calendar cal = Calendar.getInstance();
        cal.set(1981, 6, 25);
        position1 = new DefaultPosition(cal.getTime());
        cal.set(2012, 0, 1);
        position2 = new DefaultPosition(cal.getTime());
}
    
   
  
   







 Instance 24







   
  
   
    
Class460.main(String[] args)#1{
                now.getTimeZone().inDaylightTime(now.getTime()));
        System.out.println(date_format.format(now.getTime()));
}
    
   
  
   







 Instance 25







   
  
   
    
Class780.compare(Calendar a,Calendar b)#0{
        System.out.println(f.format(a.getTime())+" vs "+f.format(b.getTime()));
        assertEquals(a,b);
}
    
   
  
   







 Instance 26







   
  
   
    
Class0.checkEventuality(Calendar start,String crontabFormat,Calendar limit)#1{
                    + " Limit: " + f.format(limit.getTime())
                    + " Next: " + f.format(next.getTime());
            fail(msg);
}
    
   
  
   







 Instance 27







   
  
   
    
Class280.shouldGetTimesheetEntriesInRangeForUser()#0{
        DateRange dateRange = new DateRange(dateStart.getTime(), dateEnd.getTime());
        List<TimesheetEntry> results = timesheetDAO.getTimesheetEntriesInRange(1, dateRange);
        assertEquals(9, results.size());
}
    
   
  
   







 Instance 28







   
  
   
    
Class40.fillData(Calendar open,Calendar close)#2{
        currentTask = new MonthlyPreviewTask(open.getTime(), close.getTime(), new Date());
}
    
   
  
   







 Instance 29







   
  
   
    
Class770.testRangeWithTwoInitialSelections()#0{
    Calendar nov24 = buildCal(2012, NOVEMBER, 24);
    List<Date> selectedDates = Arrays.asList(nov18.getTime(), nov24.getTime());
}
    
   
  
   







 Instance 30







   
  
   
    
Class170.twoSameDatesAreEqual()#0{
    Calendar aDate = getInstance();
    Date expected = new Date(aDate.getTime());
    Date actual = new Date(aDate.getTime());
}
    
   
  
   







 Instance 31







   
  
   
    
Class170.testParseRfc822Updated1123()#4{
        assertEquals(expected.getTimeInMillis(), actual.getTimeInMillis());
        assertEquals(expected.getTime(), actual.getTime());
}
    
   
  
   







 Instance 32







   
  
   
    
Class470.testParseTimeZoneSeparatedByT()#2{
        assertEquals(expected.getTimeInMillis(), actual.getTimeInMillis());
        assertEquals(expected.getTime(), actual.getTime());
}
    
   
  
   







 Instance 33







   
  
   
    
Class460.testDateHeaderConversion(){
        Calendar cal = org.jaudiotagger.audio.asf.util.Utils.getDateOf(BigInteger.valueOf(1964448000));
        System.out.println(cal.getTime());
        assertEquals(-11644273555200l,cal.getTimeInMillis());
}
    
   
  
   







 Instance 34







   
  
   
    
Class570.test_getEndOfToday()#1{
        assertEquals(dateFormat.format(today.getTime()), dateFormat.format(date));
}
    
   
  
   







 Instance 35







   
  
   
    
Class40.determineFutureRepaymentHolidayWhenDateIsNotRegularHoliday()#0{
        Calendar date = toCalendar("01-Nov-2010");
        String holidayAsString = new DateTime(date.getTime().getTime()).toLocalDate().toString();
}
    
   
  
   







 Instance 36







   
  
   
    
Class40.shouldDetermineIfWorkingDay()#1{
        Calendar holiday = toCalendar("01-Nov-2010");
        DateTime holidayAsDateTime = new DateTime(holiday.getTime().getTime());
        String holidayAsString = holidayAsDateTime.toLocalDate().toString();
}
    
   
  
   







 Instance 37







   
  
   
    
Class290.assertEquals(Calendar c1,Calendar c2)#1{
            assertEquals(c1.getTimeZone(), c2.getTimeZone());
            assertEquals(c1.getTime(), c2.getTime());
}
    
   
  
   







 Instance 38







   
  
   
    
Class170.testParseRfc822Updated1123()#1{
        assertEquals(expected.getTime(), actual.getTime());
}
    
   
  
   







 Instance 39







   
  
   
    
Class70.convertMultipleDates()#0{
    assertEquals("foo-2003.05/2003.05.20.txt", fnp.convert(cal.getTime()));
}
    
   
  
   







 Instance 40







   
  
   
    
Class480.canLoan(Patron borrower)#1{
    return allowedAfter.getTime().getTime() < today.getTime().getTime();
}
    
   
  
   







 Instance 41







   
  
   
    
Class480.canLoan(Patron borrower)#2{
    Calendar allowedAfter = determineAllowedAfterDate(borrower);
    Calendar today = determineTodaysDate();
    return allowedAfter.getTime().getTime() < today.getTime().getTime();
}
    
   
  
   







 Instance 42







   
  
   
    
Class290.assertEquals(Calendar c1,Calendar c2)#0{
            assertEquals(c1.getTime(), c2.getTime());
}
    
   
  
   







 Instance 43







   
  
   
    
Class810.test_getToday()#2{
        assertEquals(dateFormat.format(today.getTime()), dateFormat.format(date));
}
    
   
  
   







 Instance 44







   
  
   
    
Class0.dateWithTimeZone()#1{
    assertEquals("foo2003-05-20T18:55", fnp.convert(cal.getTime()));
}
    
   
  
   







 Instance 45







   
  
   
    
Class510.canLoan(Patron borrower)#0{
    Calendar allowedAfter = determineAllowedAfterDate(borrower);
    Calendar today = determineTodaysDate();
    return allowedAfter.getTime().getTime() < today.getTime().getTime();
}
    
   
  
   







 Instance 46







   
  
   
    
Class510.canLoan(Patron borrower)#1{
    return allowedAfter.getTime().getTime() < today.getTime().getTime();
}
    
   
  
   







 Instance 47







   
  
   
    
Class470.testParseTimeZoneSeparatedByT()#3{
        assertEquals(expected.getTime(), actual.getTime());
}
    
   
  
   







 Instance 48







   
  
   
    
Class150.processSensorData()#2{
    Log.d(TAG, "Last boot: "+calendar.getTime().toString());
}
    
   
  
   







 Instance 49







   
  
   
    
Class310.objectListConverter()#0{
    assertEquals("foo-2003.05.20-79.txt", fnp.convertMultipleArguments(cal
        .getTime(), 79));
}
    
   
  
   







 Instance 50







   
  
   
    
Class310.assertDatePattern(final String pattern,final int year,final int month,final int day,final int hour,final int min,final String expected)#1{
        assertEquals(expected,
            policy.format(cal.getTime()));
}
    
   
  
   







 Instance 51







   
  
   
    
Class570.testLang538()#3{
        assertEquals(cal.getTime(), parser.parse("2009-10-16T16:42:16.000Z"));
}
    
   
  
   







 Instance 52







   
  
   
    
Class190.handleAsCalendar(Calendar value){
        int n = value.get(Calendar.MILLISECOND) * 1000;
        super.setValueInternal(LocalDateTime.of(LocalDate.ofEpochDay(value.getTime().getTime()), LocalTime.of(h, i, s, n)));
}
    
   
  
   







 Instance 53







   
  
   
    
Class320.testDTOBuilderGetValue()#4{
        Assert.assertEquals(c.getTime(), cal.getTime());
}
    
   
  
   







 Instance 54







   
  
   
    
Class120.testQuotes()#2{
        assertEquals(cal.getTime(), fdf.parse("'20030210A'B153320989'"));
}
    
   
  
   







 Instance 55







   
  
   
    
Class430.toDate(){
        final Calendar c = this.toCalendar();
        return c.getTime();
}
    
   
  
   







 Instance 56







   
  
   
    
Class750.rangeToTitle(Calendar start,Calendar end,WaybackRequest wbRequest)#1{
        start.getTime(),end2.getTime());
}
    
   
  
   







 Instance 57







   
  
   
    
Class750.updateMonths()#2{
      picker.getControl().show(tmpcal.getTime());
}
    
   
  
   







 Instance 58







   
  
   
    
Class600.isNoOverlap(final Calendar dat1,final Calendar dat2)#0{
            return DateHelper.minutesBetween(dat1.getTime(), dat2.getTime(), false, false) >= 0;
}
    
   
  
   







 Instance 59







   
  
   
    
Class600.isNoOverlap(final Calendar dat1,final Calendar dat2)#1{
            return DateHelper.minutesBetween(dat1.getTime(), dat2.getTime(), false, false) >= 0;
}
    
   
  
   







 Instance 60







   
  
   
    
Class500.getMonthAndYearString(CalendarDay day)#0{
        sbuf.append(cal.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault()));
        sbuf.append(" ");
        sbuf.append(YEAR_FORMAT.format(cal.getTime()));
        return sbuf.toString();
}
    
   
  
   







 Instance 61







   
  
   
    
Class70.getScanTimeUTC(int lineNumber)#1{
        return ProductData.UTC.create(imageEndDate.getTime(), firstImageFile.getMicrosecondsOfLine(lineNumber) + remainingMillis * 1000);
}
    
   
  
   







 Instance 62







   
  
   
    
Class760.allowsSettingNewStartAsCalendar()#0{
        assertEquals(start.getTime(), sequence.nextValue());
}
    
   
  
   







 Instance 63







   
  
   
    
Class220.createHourlyRawFile(File outputFile,Calendar calendar)#0{
        store.setTime(calendar.getTime());
        store.store(outputFile);
}
    
   
  
   







 Instance 64







   
  
   
    
Class320.testLastModified()#0{
    assertEquals("Invalid Date header", calendar.getTime(), getDateFromHeader(headers, "last-modified"));
}
    
   
  
   







 Instance 65







   
  
   
    
Class320.testDTOBuilderGetValue()#3{
        Assert.assertEquals(c.getTime(), cal.getTime());
}
    
   
  
   







 Instance 66







   
  
   
    
Class480.setCalendar(PreparedStatement stmnt,int idx,Calendar val,Column col){
        setDate(stmnt, idx, val.getTime(), col);
}
    
   
  
   







 Instance 67







   
  
   
    
Class640.assertPastEvent(final Calendar start,final boolean expectedPast)#0{
        cache.setHidden(start.getTime());
        assertThat(CalendarUtils.isPastEvent(cache)).isEqualTo(expectedPast);
}
    
   
  
   







 Instance 68







   
  
   
    
Class290.testInitMidyear()#3{
    view.init(may2012.getTime(), may2013.getTime(), locale) //
}
    
   
  
   







 Instance 69







   
  
   
    
Class290.testInitJanuary()#3{
    view.init(jan2012.getTime(), jan2013.getTime(), locale) //
}
    
   
  
   







 Instance 70







   
  
   
    
Class290.testInitDecember()#1{
    view.init(dec2012.getTime(), dec2013.getTime(), locale) //
}
    
   
  
   







 Instance 71







   
  
   
    
Class670.getAsDate(TimeZone timeZone){
    Calendar c = getAsCalendar(timeZone);
    return c.getTime();
}
    
   
  
   







 Instance 72







   
  
   
    
Class670.encode(Object object)#1{
            return DateParser.formatW3CDateTime(((Calendar) object).getTime());
}
    
   
  
   







 Instance 73







   
  
   
    
Class670.convertTo(Serializable value,Class<T> toType)#2{
            return (T) ((Calendar) value).getTime();
}
    
   
  
   







 Instance 74







   
  
   
    
Class350.getNotBefore()#0{
        NativeCrypto.ASN1_TIME_to_Calendar(NativeCrypto.X509_get_notBefore(mContext), calendar);
        return calendar.getTime();
}
    
   
  
   







 Instance 75







   
  
   
    
Class350.setDailyExpiryTime(Calendar dailyExpiryTime){
        setDailyExpiryTime(dailyExpiryTime.getTime());
}
    
   
  
   







 Instance 76







   
  
   
    
Class530.HourInterval(Calendar froms,Calendar tos)#0{
            this(froms.getTime(), tos.getTime());
}
    
   
  
   







 Instance 77







   
  
   
    
Class530.HourInterval(Calendar froms,Calendar tos)#1{
            this(froms.getTime(), tos.getTime());
}
    
   
  
   







 Instance 78







   
  
   
    
Class710.setupDocTest()#3{
        return ((Calendar) testDocument.getPropertyValue("dc:modified")).getTime();
}
    
   
  
   







 Instance 79







   
  
   
    
Class590.print_calendar(Calendar cal){
        print(cal.getTime());
}
    
   
  
   







 Instance 80







   
  
   
    
Class590.testDayOf()#1{
        assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03"));
}
    
   
  
   







 Instance 81







   
  
   
    
Class590.fromApiTime(Calendar fromCal,int durationInHour)#1{
          gregorian.setTime(fromCal.getTime());
}
    
   
  
   







 Instance 82







   
  
   
    
Class590.toType(final Calendar value){
        return value.getTime();
}
    
   
  
   







 Instance 83







   
  
   
    
Class620.testShowingOnlyOneMonth()#2{
    view.init(feb1.getTime(), mar1.getTime(), locale) //
}
    
   
  
   







 Instance 84







   
  
   
    
Class90.getFullFileName(Calendar calendar)#0{
      String fullFileName = fileName + "." + fileSuffixDateFormat.format(calendar.getTime());
}
    
   
  
   







 Instance 85







   
  
   
    
Class90.getQueryBuilder()#2{
    builder.setWhere(builder.where().ge(RedmineRecentIssue.MODIFIED, cal.getTime()));
}
    
   
  
   







 Instance 86







   
  
   
    
Class570.getFormattableObject(Object value,Locale locale,TimeZone timeZone,MustacheTagInfo tagInfo)#1{
            return ((Calendar) value).getTime();
}
    
   
  
   







 Instance 87







   
  
   
    
Class570.getFormattableObject(Object contextObject)#1{
            return ((Calendar) contextObject).getTime();
}
    
   
  
   







 Instance 88







   
  
   
    
Class280.isDateWithinRange(Calendar calendar,DateRange dateRange){
        return DateUtil.isDateWithinRange(calendar.getTime(), dateRange);
}
    
   
  
   







 Instance 89







   
  
   
    
Class30.getMillisecondsOfCalendar(Calendar aCalendar){
    return aCalendar.getTime().getTime();
}
    
   
  
   







 Instance 90







   
  
   
    
Class210.doAsyncHarvest(HarvestingDataverse dataverse)#3{
        timerService.createTimer(cal.getTime(), new HarvestTimerInfo(dataverse.getId(), dataverse.getVdc().getName(), dataverse.getSchedulePeriod(), dataverse.getScheduleHourOfDay(), dataverse.getScheduleDayOfWeek()));
}
    
   
  
   







 Instance 91







   
  
   
    
Class210.addSeconds(Long l)#1{
        das.date = cal.getTime();        
}
    
   
  
   







 Instance 92







   
  
   
    
Class720.findUpCommingEvents()#0{
        List<Event> events = query.from(qEvent).where(qEvent.endDate.gt(today.getTime()), qEvent.parent.isNull()).orderBy(qEvent.startDate.asc()).list(qEvent);
        return loadVenues(events);
}
    
   
  
   







 Instance 93







   
  
   
    
Class140.rangeToTitle(Calendar start,Calendar end,WaybackRequest wbRequest)#2{
        start.getTime(),endMinusSecond.getTime());
}
    
   
  
   







 Instance 94







   
  
   
    
Class700.getNumberOfDaysBetweenTwoDates(Date date1,Date date2)#2{
        return ((cal1.getTime().getTime() - cal2.getTime().getTime()) / (24 * 60 * 60 * 1000));
}
    
   
  
   







 Instance 95







   
  
   
    
Class560.testCalendarConverter()#1{
    assertEquals(cal.getTime(), cal2.getTime());
}
    
   
  
   







 Instance 96







   
  
   
    
Class520.parse(String isodate){
    Calendar calendar = getCalendar(isodate);
    return calendar.getTime();
}
    
   
  
   







 Instance 97







   
  
   
    
Class520.getToday(Calendar calendar){
        Date today = calendar.getTime();
        today.setTime(today.getTime() / 1000L * 1000L);
        today.setHours(12);
        today.setMinutes(0);
        today.setSeconds(0);
}
    
   
  
   







 Instance 98







   
  
   
    
Class420.getValue(){
    final Calendar calendar = getCalendar();
    configureCalendar( calendar );
    return calendar.getTime();
}
    
   
  
   







 Instance 99







   
  
   
    
Class250.tomorrow(){
    Calendar calendar = DateUtils.todayCalendar();
    return DateUtils.addDays(calendar.getTime(), 1);
}
    
   
  
   







 Instance 100







   
  
   
    
Class470.shouldProvideStringForDate()#2{
        assertThat(new JcrValue(factories, PropertyType.DATE, date.getTime()).getString().substring(0, expectedValue.length()),
                   is(expectedValue));
}
    
   
  
   







 Instance 101







   
  
   
    
Class50.format(Calendar cal){
        return parsers[0].format(cal.getTime());
}
    
   
  
   







 Instance 102







   
  
   
    
Class160.toString(Calendar cal){
      string = format.format(cal.getTime());
}
    
   
  
   







 Instance 103







   
  
   
    
Class770.isAfterEnd(Calendar cal)#0{
        return cal.getTime().after(end);
}
    
   
  
   







 Instance 104







   
  
   
    
Class770.getExpirationDate(int futureDays)#1{
        return formatter.format(calendar.getTime());
}
    
   
  
   







 Instance 105







   
  
   
    
Class300.convertWallclockTime(Calendar time)#1{
        long t = time.getTime().getTime();
}
    
   
  
   







 Instance 106







   
  
   
    
Class790.getFolderName(Calendar cal)#1{
    return dateFormatter.get().format(cal.getTime());
}
    
   
  
   







 Instance 107







   
  
   
    
Class790.setValue(Calendar calendar){
        this.value = calendar.getTime();
}
    
   
  
   







 Instance 108







   
  
   
    
Class790.AtomDate(Calendar value){
        this(value.getTime());
}
    
   
  
   







 Instance 109







   
  
   
    
Class790.formatterShouldUseNewFormat()#1{
    assertThat(Formatter.formatDateTime(calendar.getTime()), is("1999-11-11"));
}
    
   
  
   







 Instance 110







   
  
   
    
Class510.update()#1{
    Clock clock = Clock.getInstance();
    Calendar cal = clock.getCalendar();
        Date date = cal.getTime();
}
    
   
  
   







 Instance 111







   
  
   
    
Class510.show(OutputStreamWriter out)#1{
  out.write(c.getTime().toString());
  out.write("<P><A HREF=\"demo.html\">Return to the home page.</A>");
}
    
   
  
   







 Instance 112







   
  
   
    
Class330.testParser4()#2{
        assertEquals(ref.getTime(), cal.getTime());
}
    
   
  
   







 Instance 113







   
  
   
    
Class410.widgetSelected(SelectionEvent e)#0{
        person.setBirthday(cal.getTime());
}
    
   
  
   







 Instance 114







   
  
   
    
Class410.testParser2()#1{
        assertEquals(ref.getTime(), cal.getTime());
}
    
   
  
   







 Instance 115







   
  
   
    
Class380.getThisQuarter(Calendar referenceCalendar)#1{
            Quarter quarter = new Quarter(referenceCalendar.getTime());
}
    
   
  
   







 Instance 116







   
  
   
    
Class370.toString(Object object,ConverterContext context)#1{
            return _defaultFormat.format(((Calendar) object).getTime());
}
    
   
  
   





