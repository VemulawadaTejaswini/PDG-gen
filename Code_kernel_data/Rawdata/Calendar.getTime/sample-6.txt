
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class750.updateNextRotationTime(){
    Calendar cal = Calendar.getInstance();
    cal.add(time_scale, time_value);
    next_rotation = cal.getTime().getTime();
}
    
   
  
   







 Instance 1







   
  
   
    
Class210.testGetAge()#2{
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MONTH, 1);
        p.setBirthDate(cal.getTime());
        assertEquals(new Integer(16), p.getAge());
}
    
   
  
   







 Instance 2







   
  
   
    
Class370.roleEnvironmentSetStateSetsState(){
        Calendar exp = Calendar.getInstance(TimeZone.getTimeZone("GMT+0:00"));
        exp.add(Calendar.MINUTE, 1);
        RoleEnvironment.setStatus(RoleInstanceStatus.Ready, exp.getTime());
}
    
   
  
   







 Instance 3







   
  
   
    
Class140.testSignatureFuture(){
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_YEAR, 2);
        subHashedPacketsGen.setSignatureCreationTime(false, cal.getTime());
        injectEverytype(secretKey, ring, subHashedPacketsGen);
}
    
   
  
   







 Instance 4







   
  
   
    
Class430.testFriendlyFormatWithoutTime_ReturnsYesterday_WhenDateIsYesterday(){
        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE));
        cal.add(Calendar.DAY_OF_YEAR, -1);
        assertEquals("Yesterday", df.formatAsDateWithoutTime(cal.getTime()));
}
    
   
  
   







 Instance 5







   
  
   
    
Class560.getFormatPreMonthAsYYYYMM(){
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MONTH,-1);
        return yyyymm.format(cal.getTime());
}
    
   
  
   







 Instance 6







   
  
   
    
Class420.getRecentlyDate(){
        final Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_YEAR, -RECENTLY_DAYS);
        return calendar.getTime();
}
    
   
  
   







 Instance 7







   
  
   
    
Class340.getNumberOfStaleUsers(){
    Calendar c = Calendar.getInstance();
    c.add(Calendar.MONTH, -1);
    Date lastAccessTime = c.getTime();
    return _userDao.getNumberOfStaleUsers(lastAccessTime);
}
    
   
  
   







 Instance 8







   
  
   
    
Class380.setUp()#0{
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, 1);
        tomorrow = calendar.getTime();
}
    
   
  
   







 Instance 9







   
  
   
    
Class380.setUp()#0{
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DATE, 1);
        tomorrow = calendar.getTime();
        dateRangeRandomizer = new DateRangeRandomizer(today, tomorrow);
}
    
   
  
   







 Instance 10







   
  
   
    
Class490.parseExpireIn(String expireIn)#1{
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_YEAR, days);
        return calendar.getTime();
}
    
   
  
   







 Instance 11







   
  
   
    
Class70.deleteBatch(Integer category,Integer siteId,Integer days)#0{
      Calendar cal = Calendar.getInstance();
      cal.add(Calendar.DAY_OF_MONTH, -days);
      date = cal.getTime();
    return dao.deleteBatch(category, siteId, date);
}
    
   
  
   







 Instance 12







   
  
   
    
Class10.addToFields(int day,int month,int yr){
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.YEAR, yr);
        return calendar.getTime();
}
    
   
  
   







 Instance 13







   
  
   
    
Class220.testGetAge()#0{
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, 1);
    p.setBirthDate(cal.getTime());
    assertEquals(new Integer(16), p.getAge());
}
    
   
  
   







 Instance 14







   
  
   
    
Class220.testCreateThrowingValidationExceptionForBirthDate()#0{
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.YEAR, 1);
    person.setBirthDate(cal.getTime());
}
    
   
  
   







 Instance 15







   
  
   
    
Class800.updateNextRotationTime(){
      Calendar cal=Calendar.getInstance();
      cal.add(time_scale,time_value);     
      next_rotation=cal.getTime().getTime(); 
}
    
   
  
   







 Instance 16







   
  
   
    
Class430.getRecentBaseModelsCount(long groupId){
    Calendar calendar = Calendar.getInstance();
    calendar.add(Calendar.HOUR, -1);
    return MBThreadServiceUtil.getGroupThreadsCount(
      groupId, 0, calendar.getTime(), WorkflowConstants.STATUS_APPROVED);
}
    
   
  
   







 Instance 17







   
  
   
    
Class200.setExpiresAt(Date expiresAt)#0{
            Calendar thirtyMinFromNow = Calendar.getInstance();
            thirtyMinFromNow.add(Calendar.MINUTE, 30);
            expiresAt = thirtyMinFromNow.getTime();
}
    
   
  
   







 Instance 18







   
  
   
    
Class400.shouldRewrapIfAppicationContextRefreshed()#1{
    Calendar c = Calendar.getInstance();
    c.add(Calendar.SECOND, 1);
    this.applicationMap.put(LAST_REFRESHED_DATE_ATTRIBUTE, c.getTime());
}
    
   
  
   







 Instance 19







   
  
   
    
Class460.willExpireInSecs(int secs){
        final Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.SECOND, secs);
        final Date future = calendar.getTime();
        return future.after(this.expiresIn);
}
    
   
  
   







 Instance 20







   
  
   
    
Class640.fetchEventsForAYearWithoutAnyEvents()#0{
    Calendar year = Calendar.getInstance();
    year.add(Calendar.YEAR, 10);
    List<EventDetail> events = new ArrayList<EventDetail>(eventDAO
        .findAllEventsInPeriod(Period.from(year.getTime(), PeriodType.year, "en"), almanachIds));
}
    
   
  
   







 Instance 21







   
  
   
    
Class360.getUpdatedPublications(String spaceId,int since,int nbReturned)#0{
      Calendar calendar = Calendar.getInstance();
      calendar.add(Calendar.DAY_OF_MONTH, maxAge);
      return getUpdatedPublications(spaceId, calendar.getTime(), nbReturned);
    return getPublications(spaceId, nbReturned);
}
    
   
  
   







 Instance 22







   
  
   
    
Class530.put(final URL url,final Bitmap bitmap)#0{
                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.DATE, +1);
                mHardCache.put(url, new ExpiringBitmap(bitmap, cal.getTime()));
}
    
   
  
   







 Instance 23







   
  
   
    
Class190.setExpiresAt(Date expiresAt)#0{
      Calendar thirtyMinFromNow = Calendar.getInstance();
      thirtyMinFromNow.add(Calendar.MINUTE, 30);
      expiresAt = thirtyMinFromNow.getTime();
}
    
   
  
   







 Instance 24







   
  
   
    
Class190.doJob(){
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, -1);
    List<Registration> registrations = Registration.find("createdAt < ", cal.getTime()).fetch();
    for (Registration registration : registrations) {
      registration.delete();
    }
    Logger.info("Deleted %s stale registrations", registrations.size());
}
    
   
  
   







 Instance 25







   
  
   
    
Class720.DummyDataProvider()#0{
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_YEAR, -1);
        if (lastDataUpdate == null || lastDataUpdate.before(cal.getTime())) {
            refreshStaticData();
            lastDataUpdate = new Date();
        }
}
    
   
  
   







 Instance 26







   
  
   
    
Class0.createTable()#0{
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, 1);
    String nextMonth = df.format(cal.getTime());
    metricDAO.createMetricTable(METRIC_TABLE_NAME + "_" + nextMonth);
}
    
   
  
   







 Instance 27







   
  
   
    
Class730.setupEditRequest(MockHttpServletRequest request,java.util.Map<String,String> widgets){
        Calendar yesterday = Calendar.getInstance();
        yesterday.add(Calendar.DATE, -1);
        editedDate = yesterday.getTime();
        request.addParameter("w9", dateAsString(editedDate));
}
    
   
  
   







 Instance 28







   
  
   
    
Class570.DateRenderer()#1{
      Calendar cal = Calendar.getInstance();
      cal.setTimeZone(java.util.TimeZone.getTimeZone("GMT"));
      cal.add(Calendar.YEAR, -1); // "now" time format within a year
      cutoff = cal.getTime();
}
    
   
  
   







 Instance 29







   
  
   
    
Class300.getTomorrow(){
    Calendar c = Calendar.getInstance();
    setZeroTime(c);
    c.add(Calendar.DATE, 1);
    return c.getTime();
}
    
   
  
   





