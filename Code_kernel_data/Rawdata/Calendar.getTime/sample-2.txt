
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class400.isValid(int timeoutInSeconds)#0{
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(timestamp);
            calendar.add(Calendar.SECOND, timeoutInSeconds);
            return calendar.getTime().after(now);
}
    
   
  
   







 Instance 1







   
  
   
    
Class30.getLatency(int seconds)#0{
        Calendar before = Calendar.getInstance();
        before.setTime(now);
        before.add(Calendar.SECOND, -seconds);
        return getLatency(before.getTime(), now);
}
    
   
  
   







 Instance 2







   
  
   
    
Class250.addDays(java.util.Date value,final int days){
        final Calendar cal = Calendar.getInstance();
        cal.setTime(value);
        cal.add(Calendar.DATE, days);
        final java.sql.Timestamp adjusted = new java.sql.Timestamp(cal.getTime().getTime());
}
    
   
  
   







 Instance 3







   
  
   
    
Class30.ShiftHour(final Date dateFrom,final Date dateTo)#1{
                Calendar cal = Calendar.getInstance();
                cal.setTime(dateTo);
                cal.add(Calendar.DATE, 1);
                this.dateTo = new Date(cal.getTime().getTime());
}
    
   
  
   







 Instance 4







   
  
   
    
Class310.timeToRemove(final ImagingWorker worker)#0{
    Calendar cal = Calendar.getInstance(); // creates calendar
    cal.setTime(lastUpdated); // sets calendar time/date
    cal.add(Calendar.MINUTE, 60); // remove records after 1 hour
    final Date expirationTime = cal.getTime();
    return Math.abs((expirationTime.getTime() - new Date().getTime())/MINUTE);
}
    
   
  
   







 Instance 5







   
  
   
    
Class250.addDays(java.util.Date value,final int days){
        final Calendar cal = Calendar.getInstance();
        cal.setTime(value);
        cal.add(Calendar.DATE, days);
        final Date adjusted = cal.getTime();
}
    
   
  
   







 Instance 6







   
  
   
    
Class170.getReturnDate()#0{
    Calendar c = Calendar.getInstance();
    c.setTime(now);
    c.add(Calendar.DAY_OF_YEAR, 14);
    return c.getTime();
}
    
   
  
   







 Instance 7







   
  
   
    
Class230.daysPass(int days){
    Calendar calendar = Calendar.getInstance();
    calendar.setTime(date);
    calendar.add(Calendar.DAY_OF_YEAR, days);
    date = calendar.getTime();
}
    
   
  
   







 Instance 8







   
  
   
    
Class70.addDay(String aDate,int days)#0{
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.add(Calendar.DATE, days);
        return format.format(cal.getTime());
}
    
   
  
   







 Instance 9







   
  
   
    
Class180.change_min(){
    Calendar calendar = Calendar.getInstance();
    calendar.setTime(this.min);
    calendar.add(Calendar.HOUR_OF_DAY, 1);
    this.min = calendar.getTime();
}
    
   
  
   







 Instance 10







   
  
   
    
Class350.addMonth(Date source,int month){
    Calendar cal = Calendar.getInstance();
    cal.setTime(source);
    cal.add(Calendar.MONTH, month);
    return cal.getTime();
}
    
   
  
   







 Instance 11







   
  
   
    
Class210.addSecond(Date source,int s){
    Calendar cal = Calendar.getInstance();
    cal.setTime(source);
    cal.add(Calendar.SECOND, s);
    return cal.getTime();
}
    
   
  
   







 Instance 12







   
  
   
    
Class720.assertDateSlightlyBefore(Date expected,Date actual){
        Calendar c = Calendar.getInstance();
        c.setTime(expected);
        c.add(Calendar.SECOND, -2);
        assertTrue(actual.after(c.getTime()));
        assertTrue(actual.before(expected) || actual.equals(expected));
}
    
   
  
   







 Instance 13







   
  
   
    
Class810.addYear(Date source,int year){
    Calendar cal = Calendar.getInstance();
    cal.setTime(source);
    cal.add(Calendar.YEAR, year);
    return cal.getTime();
}
    
   
  
   







 Instance 14







   
  
   
    
Class610.calculateBeforeMidnight(Date date){
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    cal.add(Calendar.SECOND, -1);
    return cal.getTime();
}
    
   
  
   







 Instance 15







   
  
   
    
Class340.addHour(Date source,int hour){
    Calendar cal = Calendar.getInstance();
    cal.setTime(source);
    cal.add(Calendar.HOUR_OF_DAY, hour);
    return cal.getTime();
}
    
   
  
   







 Instance 16







   
  
   
    
Class790.getLastUpdate()#0{
                Calendar calBegin = Calendar.getInstance();
                calBegin.setTime(now);
                calBegin.add(Calendar.MONTH, -4);
                return calBegin.getTime();
}
    
   
  
   







 Instance 17







   
  
   
    
Class390.addTime(Date time,int amount,int field){
      Calendar calendar = Calendar.getInstance();
      calendar.setTime(time);
      calendar.add(field, amount);
      return calendar.getTime();
}
    
   
  
   







 Instance 18







   
  
   
    
Class670.datePlus(String source,int field,int amount)#0{
    Calendar c = Calendar.getInstance();
    c.setTime(d);
    c.add(field, amount);
    return c.getTime();
}
    
   
  
   







 Instance 19







   
  
   
    
Class0.getThroughput(int seconds)#1{
        Calendar before = Calendar.getInstance();
        before.setTime(now);
        before.add(Calendar.SECOND, -seconds);
        return getThroughput(before.getTime(), now);
}
    
   
  
   







 Instance 20







   
  
   
    
Class340.addDate(Date source,int day){
    Calendar cal = Calendar.getInstance();
    cal.setTime(source);
    cal.add(Calendar.DAY_OF_MONTH, day);
    return cal.getTime();
}
    
   
  
   







 Instance 21







   
  
   
    
Class340.addMinute(Date source,int min){
    Calendar cal = Calendar.getInstance();
    cal.setTime(source);
    cal.add(Calendar.MINUTE, min);
    return cal.getTime();
}
    
   
  
   







 Instance 22







   
  
   
    
Class510.addDays(Date date,int n){
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    cal.add(Calendar.DATE, n);
    return cal.getTime();
}
    
   
  
   







 Instance 23







   
  
   
    
Class410.eval(List<String> tuple)#0{
  final Calendar c = Calendar.getInstance();
  c.setTime(base);
  c.add(_unit, _interval);
  return c.getTime();
}
    
   
  
   







 Instance 24







   
  
   
    
Class570.usingCalendarToChangeDates(){
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    cal.add(Calendar.MONTH, 1);
    assertEquals(cal.getTime().toString(), __);
}
    
   
  
   







 Instance 25







   
  
   
    
Class320.isTimedOut(final ImagingWorker worker)#0{
    Calendar cal = Calendar.getInstance(); // creates calendar
    cal.setTime(lastUpdated); // sets calendar time/date
    cal.add(Calendar.MINUTE, WORKER_TIMEOUT_MIN); // adds 5 minutes
    final Date expirationTime = cal.getTime(); //
}
    
   
  
   







 Instance 26







   
  
   
    
Class390.getUnbanDate(MBBan ban,int expireInterval)#0{
    Calendar cal = Calendar.getInstance();
    cal.setTime(banDate);
    cal.add(Calendar.DATE, expireInterval);
    return cal.getTime();
}
    
   
  
   







 Instance 27







   
  
   
    
Class310.shouldPurge(final ImagingTask task)#0{
    Calendar cal = Calendar.getInstance(); // creates calendar
    cal.setTime(lastUpdated); // sets calendar time/date
    cal.add(Calendar.HOUR_OF_DAY, TASK_PURGE_EXPIRATION_HOURS); // adds one hour
    final Date expirationTime = cal.getTime(); //
}
    
   
  
   







 Instance 28







   
  
   
    
Class180.change_max(){
    Calendar calendar = Calendar.getInstance();
    calendar.setTime(this.max);
    calendar.add(Calendar.HOUR_OF_DAY, 1);
    this.max = calendar.getTime();
}
    
   
  
   







 Instance 29







   
  
   
    
Class740.addDays(Date date,int days){
  final Calendar c = Calendar.getInstance();
  c.setTime(date);
  c.add(unit, days);
  return c.getTime();
}
    
   
  
   







 Instance 30







   
  
   
    
Class710.createPreviousDate(int numberOfDays)#0{
        calendar.setTime(new Date());
        calendar.add(Calendar.DATE, -numberOfDays);
        Date pastDate = DateUtils.getDateWithoutTimeStamp(calendar.getTime());
}
    
   
  
   







 Instance 31







   
  
   
    
Class420.dateadd(String part,int count,Timestamp d)#0{
        int nanos = d.getNanos() % 1000000;
        calendar.setTime(d);
        calendar.add(field, count);
        long t = calendar.getTime().getTime();
        Timestamp ts = new Timestamp(t);
        ts.setNanos(ts.getNanos() + nanos);
}
    
   
  
   







 Instance 32







   
  
   
    
Class510.addDays(final Date time,final int days){
    final Calendar c = new GregorianCalendar();
    c.setTime(time);
    c.add(Calendar.DAY_OF_YEAR, days);
    return c.getTime();
}
    
   
  
   







 Instance 33







   
  
   
    
Class500.increaseTime(Clock clock)#0{
    c.setTime(clock.getCurrentTime());
    c.add(Calendar.SECOND, 1);
    clock.setCurrentTime(c.getTime());
}
    
   
  
   







 Instance 34







   
  
   
    
Class200.getStart()#1{
      cal.setTime(new ThisWeek().getStart());
      cal.add(Calendar.WEEK_OF_YEAR,-1);
      return DateUtil.startOfDay(cal.getTime());
}
    
   
  
   







 Instance 35







   
  
   
    
Class80.getStart()#0{
      cal.setTime(new ThisQuarter().getStart());
      cal.add(Calendar.MONTH,-3);
      return cal.getTime();
}
    
   
  
   







 Instance 36







   
  
   
    
Class740.getElementDate(PostDetail post)#0{
    calElement.setTime(post.getPublication().getCreationDate());
    calElement.add(Calendar.HOUR_OF_DAY, 0);
    return calElement.getTime();
}
    
   
  
   







 Instance 37







   
  
   
    
Class610.getExpirationDate()#0{
        final Date changeDate = Version.getChangeDate();
        if ( changeDate != null ) {
            cal.setTime( changeDate );
            cal.add( Calendar.DATE, DaysBeforeExpiration );
            return cal.getTime();
        }
}
    
   
  
   







 Instance 38







   
  
   
    
Class220.OutboundWapMessage(String recipientAddress,URL url,String siId,String text)#1{
    cal.setTime(new Date());
    cal.add(Calendar.HOUR, 24);
    this.expiryDate = cal.getTime();
}
    
   
  
   







 Instance 39







   
  
   
    
Class680.addDaysToCurrentDate(int days)#0{
    c.setTime(new Date());
    c.add(Calendar.D
}
    
   
  
   







 Instance 40







   
  
   
    
Class60.getCycle()#0{
    calendar.setTime(new Date());
    calendar.add(Calendar.SECOND, 10);
    Date startTime = calendar.getTime();
    return iso8601(startTime);
}
    
   
  
   







 Instance 41







   
  
   
    
Class300.previous(){
    Calendar yesterday = getInstance();
    yesterday.setTime(this);
    yesterday.add(DAY_OF_MONTH, -1);
    return new Date(yesterday.getTime());
}
    
   
  
   







 Instance 42







   
  
   
    
Class300.next(){
    Calendar tomorrow = getInstance();
    tomorrow.setTime(this);
    tomorrow.add(DAY_OF_MONTH, 1);
    return new Date(tomorrow.getTime());
}
    
   
  
   







 Instance 43







   
  
   
    
Class270.expand(Date d){
            Calendar c = new GregorianCalendar(UTC_TZ);
            c.setTime(d);
            c.add(Calendar.MILLISECOND, -1);
            return new DateRange(d, c.getTime());
}
    
   
  
   







 Instance 44







   
  
   
    
Class640.getCacheControlExpiresDate()#1{
    cal.setTime(getDate());
    cal.add(Calendar.SECOND, seconds);
    return cal.getTime();
}
    
   
  
   







 Instance 45







   
  
   
    
Class10.apply(Date arg0)#0{
        calendar.setTime((Date) arg0.clone());
        calendar.add(Calendar.YEAR, yrAddendum);
        return calendar.getTime();
}
    
   
  
   







 Instance 46







   
  
   
    
Class60.extendTime(TimePeriod timePeriod)#0{
        cal.setTime( timePeriod.getEnd() );
        cal.add( Calendar.MILLISECOND, samplingPeriodMS * numOfMeasurements );
        timePeriod.extend( cal.getTime() );
}
    
   
  
   







 Instance 47







   
  
   
    
Class660.computeStartOfNextMinute(long now)#1{
    cal.setTime(new Date(now));
    cal.set(Calendar.SECOND, 0);
    cal.add(Calendar.MINUTE, 1);
    return cal.getTime().getTime();
}
    
   
  
   







 Instance 48







   
  
   
    
Class160.computeStartOfNextHour(long now)#0{
    cal.setTime(new Date(now));
    cal.set(Calendar.MINUTE, 0);
    cal.add(Calendar.HOUR, 1);
    return cal.getTime().getTime();
}
    
   
  
   







 Instance 49







   
  
   
    
Class120.computeStartOfNextSecond(long now)#0{
    cal.setTime(new Date(now));
    cal.set(Calendar.MILLISECOND, 0);
    cal.add(Calendar.SECOND, 1);
    return cal.getTime().getTime();
}
    
   
  
   







 Instance 50







   
  
   
    
Class180.getDayStart(java.sql.Timestamp stamp,int daysLater)#0{
    tempCal.setTime(new java.util.Date(stamp.getTime()));
    tempCal.set(tempCal.get(Calendar.YEAR), tempCal.get(Calendar.MONTH), tempCal.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
    tempCal.add(Calendar.DAY_OF_MONTH, daysLater);
    return new java.sql.Timestamp(tempCal.getTime().getTime());
}
    
   
  
   







 Instance 51







   
  
   
    
Class460.resolveFirstDateOfWeek(Date today,java.util.Calendar currentCalendar){
        int firstDayOfWeek = currentCalendar.getFirstDayOfWeek();
        currentCalendar.setTime(today);
        while (firstDayOfWeek != currentCalendar
                .get(java.util.Calendar.DAY_OF_WEEK)) {
            currentCalendar.add(java.util.Calendar.DATE, -1);
        }
        return currentCalendar.getTime();
}
    
   
  
   







 Instance 52







   
  
   
    
Class810.getBusinessDay(Date date,int n)#0{
        Calendar calendar = now();
        calendar.setTime(date);
        while (isHoliday(calendar) || isWeekend(calendar) || n-- > 0) {
            calendar.add(Calendar.DATE, 1);
        }
        return calendar.getTime();
}
    
   
  
   







 Instance 53







   
  
   
    
Class710.increment(Calendar start,int offset)#1{
    end.setTime(start.getTime());
    end.add(Calendar.DAY_OF_YEAR,1 * offset);
}
    
   
  
   







 Instance 54







   
  
   
    
Class140.incDecJour(Long date,int nbJour){
        cal = Calendar.getInstance();
        cal.setTimeInMillis(date);
        cal.add(Calendar.DAY_OF_MONTH, nbJour);
        return cal.getTime().getTime();
}
    
   
  
   







 Instance 55







   
  
   
    
Class590.ExpiringValue(T value){
            Calendar c = Calendar.getInstance();
            c.add(Calendar.SECOND, expirationPeriod);
            expiringDate = c.getTime().getTime();
}
    
   
  
   







 Instance 56







   
  
   
    
Class60.getDate()#0{
            Calendar c = Calendar.getInstance();
            c.setTime(this.dateAndTimeOfBirth);
            return new java.sql.Date(c.getTime().getTime());
}
    
   
  
   







 Instance 57







   
  
   
    
Class790.a(String s,int v,String u)#0{
    Calendar c = Calendar.getInstance(UTC, Locale.US);
    c.setTime(d);
    DateMathParser.add(c, v, u);
    return fmt.format(c.getTime());
}
    
   
  
   







 Instance 58







   
  
   
    
Class390.r(String s,String u)#1{
    Calendar c = Calendar.getInstance(UTC, Locale.US);
    c.setTime(d);
    DateMathParser.round(c, u);
    return fmt.format(c.getTime());
}
    
   
  
   







 Instance 59







   
  
   
    
Class60.getTime()#0{
        Calendar c = Calendar.getInstance();
        c.setTime(this.dateAndTimeOfBirth);
        return new java.sql.Time(c.getTime().getTime());
}
    
   
  
   







 Instance 60







   
  
   
    
Class700.usingRollToChangeDatesDoesntWrapOtherFields(){
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    cal.roll(Calendar.MONTH, 12);
    assertEquals(cal.getTime().toString(), __);
}
    
   
  
   





