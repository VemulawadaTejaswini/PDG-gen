
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class490.getExecutionDate(long repeatIntervalInSeconds)#0{
    calendar.add(Calendar.SECOND, (int) repeatIntervalInSeconds);
    return calendar.getTime();
}
    
   
  
   







 Instance 1







   
  
   
    
Class190.computeExpiry()#0{
    if (approvalExpirySeconds == -1) { // use default of 1 month
      expiresAt.add(Calendar.MONTH, 1);
    }
    else {
      expiresAt.add(Calendar.SECOND, approvalExpirySeconds);
    }
    return expiresAt.getTime();
}
    
   
  
   







 Instance 2







   
  
   
    
Class200.computeExpiry()#0{
        if (approvalExpiryInMillis == -1) { // use default of 1 month
            expiresAt.add(Calendar.MONTH, 1);
        }
        else {
            expiresAt.add(Calendar.MILLISECOND, approvalExpiryInMillis);
        }
        return expiresAt.getTime();
}
    
   
  
   







 Instance 3







   
  
   
    
Class790.handleEvent(Event event)#1{
              tmpcal.add(Calendar.YEAR, 10);
              tmpcal.add(Calendar.MONTH, 1);
            setCDTSelection(tmpcal.getTime());
}
    
   
  
   







 Instance 4







   
  
   
    
Class520.getNextCheckinTime()#0{
      nextCheckinTime.add(Calendar.SECOND, (int) getCheckinInterval());
      return nextCheckinTime.getTime();
}
    
   
  
   







 Instance 5







   
  
   
    
Class390.dateToGDateTime(Date date){
    Calendar cal = new GregorianCalendar();
    cal.setTime(date);
    cal.add(Calendar.MILLISECOND,
        cal.getTimeZone().getOffset(cal.getTimeInMillis()));
    return new DateTime(cal.getTime());
}
    
   
  
   







 Instance 6







   
  
   
    
Class200.updateStartTime()#0{
    now.add(Calendar.SECOND, (int)intervalSec);
    this.startTime = now.getTime();
}
    
   
  
   







 Instance 7







   
  
   
    
Class290.getArrivalTime(Date departureTime,int mileage)#2{
    c.add(Calendar.HOUR, (int)hours);
    c.add(Calendar.MINUTE, minutes);
    return c.getTime();
}
    
   
  
   







 Instance 8







   
  
   
    
Class660.add(Date d)#1{
    cal.add( Calendar.SECOND, (int) getValueInSeconds());
    return cal.getTime();
}
    
   
  
   







 Instance 9







   
  
   
    
Class80.getMinDate()#1{
      Calendar calendar = new GregorianCalendar();
      calendar.add(Calendar.MONTH, -2);
      minDate = calendar.getTime();
}
    
   
  
   







 Instance 10







   
  
   
    
Class80.getMaxDate()#1{
      Calendar calendar = new GregorianCalendar();
      calendar.add(Calendar.MONTH, 2);
      maxDate = calendar.getTime();
}
    
   
  
   







 Instance 11







   
  
   
    
Class100.decodeBirthDate(String ws)#0{
    Calendar c = new GregorianCalendar (2013, Calendar.JANUARY, 1);
    c.add (Calendar.DAY_OF_YEAR, weeks * 7);
    return c.getTime ();
}
    
   
  
   







 Instance 12







   
  
   
    
Class350.twentyYearsTime(){
        Calendar earliestExpiry = new GregorianCalendar();
        earliestExpiry.add(Calendar.SECOND, 631138519);
        return earliestExpiry.getTime();
}
    
   
  
   







 Instance 13







   
  
   
    
Class520.gDateTimeToDate(DateTime dateTime)#1{
      cal.add(Calendar.MILLISECOND,
          -cal.getTimeZone().getOffset(cal.getTimeInMillis()));
    return cal.getTime();
}
    
   
  
   







 Instance 14







   
  
   
    
Class460.widgetSelected(SelectionEvent e)#0{
                    tmpcal.add(
                        Calendar.YEAR,
                        ((Integer) item.getData("Year")).intValue() - 5); //$NON-NLS-1$
                    setCDTSelection(tmpcal.getTime());
}
    
   
  
   







 Instance 15







   
  
   
    
Class460.handleEvent(Event event)#0{
                  tmpcal.add(Calendar.YEAR,
                      (event.count > 0) ? 1 : -1);
                  setCDTSelection(tmpcal.getTime());
}
    
   
  
   







 Instance 16







   
  
   
    
Class230.getDueDate(Media media)#0{
    c.add(Calendar.DAY_OF_YEAR, media.howManyDaysThisCanBeBorrowed());
    return c.getTime();
}
    
   
  
   







 Instance 17







   
  
   
    
Class230.getDueDate(Media media)#2{
    c.add(Calendar.DAY_OF_YEAR, media.howManyDaysThisCanBeBorrowed());
    return c.getTime();
}
    
   
  
   







 Instance 18







   
  
   
    
Class70.getRecentChangesCount(long groupId,long nodeId){
    Calendar cal = CalendarFactoryUtil.getCalendar();
    cal.add(Calendar.WEEK_OF_YEAR, -1);
    return wikiPageFinder.countByCreateDate(
      groupId, nodeId, cal.getTime(), false);
}
    
   
  
   







 Instance 19







   
  
   
    
Class70.getHTTPTime(int days)#1{
            calendar.add(Calendar.DAY_OF_MONTH, days);
            return dateFormat.format(calendar.getTime());
}
    
   
  
   







 Instance 20







   
  
   
    
Class480.run()#0{
                    Calendar c = (Calendar) (startTimestamp.clone());
                    c.add(Calendar.MINUTE, i);
                    cappedTestCollection.insert(BasicDBObjectBuilder.start("increasing", c.getTime()).add("string", "value" + i).get(), WriteConcern.SAFE);
}
    
   
  
   







 Instance 21







   
  
   
    
Class690.checkUbTime()#0{
    Calendar realTime = getRealTime();
    realTime.add(Calendar.MINUTE, BEFORE_MINUTE);
    int nowTime = Integer.valueOf(sdf.format(realTime.getTime()));
    return _ubTimes.contains(nowTime);
}
    
   
  
   







 Instance 22







   
  
   
    
Class30.getRecentChanges(long groupId,long nodeId,int start,int end){
    Calendar cal = CalendarFactoryUtil.getCalendar();
    cal.add(Calendar.WEEK_OF_YEAR, -1);
    return wikiPageFinder.findByCreateDate(
      groupId, nodeId, cal.getTime(), false, start, end);
}
    
   
  
   







 Instance 23







   
  
   
    
Class50.title(final int cell){
        final Calendar d = (Calendar) date.clone();
        d.add(Calendar.MONTH, cell);
        final String displayName = monthFormat.format(d.getTime()) + " " + d.get(Calendar.YEAR);
}
    
   
  
   







 Instance 24







   
  
   
    
Class170.getNextWorkingDay(Date day){
        Calendar calendarDay = DateUtils.getCalendar(day);
        do {
            calendarDay.add(Calendar.DATE, 1);
        } while (!isWorkingDay(calendarDay));
        return calendarDay.getTime();
}
    
   
  
   







 Instance 25







   
  
   
    
Class430.getLiferayDate(Date jiraDate)#0{
    cal.add(Calendar.MILLISECOND, _getUTCOffset() * -1);
    return cal.getTime();
}
    
   
  
   







 Instance 26







   
  
   
    
Class460.getReadingDateHeader(final int dayNumber){
    Calendar calendar = GregorianCalendar.getInstance();
    calendar.setTimeInMillis(readingPlan.info.startTime);
    calendar.add(Calendar.DATE, dayNumber);
    return getString(R.string.rp_dayHeader, (dayNumber + 1), Sqlitil.toLocaleDateMedium(calendar.getTime()));
}
    
   
  
   







 Instance 27







   
  
   
    
Class780.generateOccurrencesFrom(Date date,List<EventDetail> events){
    endDate.add(java.util.Calendar.YEAR, 100);
    return generateOccurrencesInRange(date, new Date(endDate.getTime()), events);
}
    
   
  
   







 Instance 28







   
  
   
    
Class190.doJob()#3{
    cal.add(Calendar.MINUTE, RandomUtils.nextInt(10000));
    t.postedAt = cal.getTime(); 
}
    
   
  
   







 Instance 29







   
  
   
    
Class190.dateRangeChanged(ScheduleDateRangeChangeEvent event)#3{
            calendar.add(Calendar.DATE, 15);
        setInitialDate(calendar.getTime());
}
    
   
  
   







 Instance 30







   
  
   
    
Class90.calculateNextTime(Date time)#3{
    calendar.add(periodUnit.calendarField, period);
    return calendar.getTime();
}
    
   
  
   







 Instance 31







   
  
   
    
Class720.getJIRADate(Date liferayDate)#1{
    cal.add(Calendar.MILLISECOND, _getUTCOffset());
    return cal.getTime();
}
    
   
  
   







 Instance 32







   
  
   
    
Class450.getJIRADate(int weeksFromNow)#0{
    cal.add(Calendar.MILLISECOND, _getUTCOffset());
    return cal.getTime();
}
    
   
  
   







 Instance 33







   
  
   
    
Class450.getMaxAge(Group group)#0{
    int maxAge = TrashUtil.getMaxAge(group);
    calendar.add(Calendar.MINUTE, -maxAge);
    return calendar.getTime();
}
    
   
  
   







 Instance 34







   
  
   
    
Class740.setWorkerId(final String workerId)#0{
    cal.add(Calendar.MINUTE, Integer.parseInt(ImportTaskProperties.IMPORT_TASK_TIMEOUT_MINUTES)); // adds one hour
    this.workerTimeOut = cal.getTime(); //
}
    
   
  
   







 Instance 35







   
  
   
    
Class770.add(Date date,int iMultiple)#0{
    dateTime.add( getUnit().getCalendarConst(), getStep() * iMultiple );
    return dateTime.getTime();
}
    
   
  
   







 Instance 36







   
  
   
    
Class300.createUTCDate(final int year,final int dayOfYear,final int millisInDay){
        final Calendar calendar = ProductData.UTC.createCalendar();
        calendar.set(Calendar.DAY_OF_YEAR, dayOfYear);
        calendar.add(Calendar.MILLISECOND, millisInDay);
        return ProductData.UTC.create(calendar.getTime(), 0);
}
    
   
  
   







 Instance 37







   
  
   
    
Class510.queryMore(final AbstractTsiProvider provider,final boolean later)#0{
      c.add(Calendar.MINUTE, later ? 1 : -1);
      return provider.queryTripsFromContext(this, c.getTime(), later);
}
    
   
  
   







 Instance 38







   
  
   
    
Class310.setupDateStrings()#0{
      dateStrings[idx] = format.format(cal.getTime());
      cal.add(1, Calendar.DAY_OF_YEAR);
}
    
   
  
   







 Instance 39







   
  
   
    
Class380.createTestBeanItemContainer()#0{
            eventContainer.addBean(new BasicEvent("Test " + i, "Description "
                    + i, cal.getTime()));
            cal.add(java.util.Calendar.DAY_OF_MONTH, 2);
}
    
   
  
   







 Instance 40







   
  
   
    
Class370.updateYears()#0{
        yearButtons[i].setText(getFormattedDate(
            "yyyy", tmpcal.getTime())); //$NON-NLS-1$
        tmpcal.add(Calendar.YEAR, 1);
}
    
   
  
   





