
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class590.printCalendar(Calendar calendar)#1{
    String date = sdf.format(calendar.getTime());
    calendar = new GregorianCalendar();
}
    
   
  
   







 Instance 1







   
  
   
    
Class310.getTimestamp()#0{
    Calendar cal = Calendar.getInstance();
    return tf.format(cal.getTime());
}
    
   
  
   







 Instance 2







   
  
   
    
Class10.setDateHeader(HttpResponse response)#1{
        Calendar time = new GregorianCalendar();
        response.headers().add(DATE, dateFormatter.format(time.getTime()));
}
    
   
  
   







 Instance 3







   
  
   
    
Class470.getRemainingTime()#1{
    long millis = (long) (seconds * 1000);
    cal.setTimeInMillis(millis);
    return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 4







   
  
   
    
Class470.getEllapsedTime()#0{
    Calendar cal = Calendar.getInstance();
    long elapsed = cal.getTimeInMillis();
    cal.setTimeInMillis(elapsed);
    return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 5







   
  
   
    
Class530.convertToGMTString(java.util.Calendar cal)#0{
           fmt.setTimeZone( TimeZone.getTimeZone("GMT"));
           fmt.setCalendar(cal);
           java.util.Date date = cal.getTime();
           String timeStr = fmt.format(date);
}
    
   
  
   







 Instance 6







   
  
   
    
Class60.formatTimestamp(Calendar timestamp)#1{
    sdf.setTimeZone(timestamp.getTimeZone());
    return sdf.format(timestamp.getTime());
}
    
   
  
   







 Instance 7







   
  
   
    
Class500.getNowForFileName()#0{
    return sdf.format(c.getTime());
}
    
   
  
   







 Instance 8







   
  
   
    
Class500.StartLog()#3{
      logToFile.write("<h3>"+sdf.format(cal.getTime())+"</h3>\n");
}
    
   
  
   







 Instance 9







   
  
   
    
Class440.getString(Calendar value)#2{
        return sdt.format(value.getTime());
}
    
   
  
   







 Instance 10







   
  
   
    
Class440.getDateTimeStr(int p_delay_min)#0{
      return sdf.format(cal.getTime());
}
    
   
  
   







 Instance 11







   
  
   
    
Class230.now()#2{
        return sdf.format(cal.getTime());
}
    
   
  
   







 Instance 12







   
  
   
    
Class760.now()#1{
        return sdf.format(cal.getTime());
}
    
   
  
   







 Instance 13







   
  
   
    
Class760.setElementCheckedOutByCurrentUser()#1{
        setElementCheckedOutByCurrentUser(simpleDateFormat.format(c.getTime()));
}
    
   
  
   







 Instance 14







   
  
   
    
Class760.getTime()#2{
    String newString = formatter.format(time.getTime());
}
    
   
  
   







 Instance 15







   
  
   
    
Class400.assertDate(String msg,Calendar expectedTime,long actualTime)#0{
        String expected = sdf.format(expectedTime.getTime());
        Assert.assertEquals(msg,expected,actual);
}
    
   
  
   







 Instance 16







   
  
   
    
Class400.hasCalendar(Calendar calendar)#3{
    String target = sdf.format(calendar.getTime());
}
    
   
  
   







 Instance 17







   
  
   
    
Class220.now()#2{
    return sdf.format(cal.getTime());
}
    
   
  
   







 Instance 18







   
  
   
    
Class320.getNameOrAbbrev(String format)#1{
      return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 19







   
  
   
    
Class680.localTime()#0{
    return dateFormat.format(calendar.getTime());
}
    
   
  
   







 Instance 20







   
  
   
    
Class530.print(Calendar c)#0{
        String timezoneStr = timezone.format(c.getTime());
        timezoneStr = timezoneStr.substring(0, timezoneStr.length()-2) + ":" + timezoneStr.substring(timezoneStr.length()-2);
}
    
   
  
   







 Instance 21







   
  
   
    
Class530.print(Calendar c)#3{
        String result = sdf.format(c.getTime());
}
    
   
  
   







 Instance 22







   
  
   
    
Class690.formatExpires(TreeWriter tree,Calendar expires)#2{
            tree.addText(gmtFrmt.format(expires.getTime()));
            tree.addEndElement();
}
    
   
  
   







 Instance 23







   
  
   
    
Class590.dateQueryString(Calendar start,Calendar end)#2{
        String formattedStart = dateFormat.format(start.getTime());
}
    
   
  
   







 Instance 24







   
  
   
    
Class590.dateQueryString(Calendar start,Calendar end)#3{
        String formattedEnd = dateFormat.format(end.getTime());
        return String.format("start=%s&end=%s", formattedStart, formattedEnd);
}
    
   
  
   







 Instance 25







   
  
   
    
Class570.verify(SimpleDateFormat sdf,Calendar calendar,DateTokenConverter<?> dtc)#1{
    String expected = sdf.format(calendar.getTime());
}
    
   
  
   







 Instance 26







   
  
   
    
Class570.Java2SecTest(String arg)#0{
        System.out.println("Current time => " + sdf.format(cal.getTime()) + "\n");
}
    
   
  
   







 Instance 27







   
  
   
    
Class210.checkDate(String dateToParse,Date desiredDate)#1{
    String checkedDate = sdf.format( cal.getTime() );
    return checkedDate.equalsIgnoreCase( dateToParse );
}
    
   
  
   







 Instance 28







   
  
   
    
Class560.formatDateTime()#0{
        String formattedDate = format.format(instance.getTime());
}
    
   
  
   







 Instance 29







   
  
   
    
Class520.timeStr(Calendar c)#0{
    buf.append(sdf.format(c.getTime()));
    return buf.toString();
}
    
   
  
   







 Instance 30







   
  
   
    
Class50.formatUsLocaleGMTZone(final Calendar calendar)#1{
        return dateFormat.format(calendar.getTime());
}
    
   
  
   







 Instance 31







   
  
   
    
Class160.testCalendarTimezoneRespected()#0{
        final String expectedValue = sdf.format(cal.getTime());
        final String actualValue = FastDateFormat.getInstance(PATTERN, this.timeZone).format(cal);
        assertEquals(expectedValue, actualValue);
}
    
   
  
   







 Instance 32







   
  
   
    
Class340.quickFormatCalendar(Calendar value)#0{
    return lSimpleDateFormat.format(value.getTime());
}
    
   
  
   







 Instance 33







   
  
   
    
Class410.getDate(Calendar cal,String dateFormat)#2{
    return df.format(cal.getTime());
}
    
   
  
   







 Instance 34







   
  
   
    
Class370.onDateSet(DatePicker view,int year,int monthOfYear,int dayOfMonth)#2{
              textDate.setText(format.format(selected.getTime()));
}
    
   
  
   







 Instance 35







   
  
   
    
Class370.get_cur_datetime()#0{
    return sdf.format(cal.getTime());
}
    
   
  
   







 Instance 36







   
  
   
    
Class440.getDateTimeStr(int p_delay_min)#2{
      Date l_time = cal.getTime();
      l_time.setMinutes(l_time.getMinutes() + p_delay_min);
      return sdf.format(l_time);
}
    
   
  
   





