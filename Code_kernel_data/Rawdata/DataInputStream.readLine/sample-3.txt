
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class40.readLine()#1{
    return new DataInputStream(new InputStream() {
      @Override
      public int read() throws IOException {
        ensureAvailable(1);
        return buffer[position++];
      }
    }).readLine();
}
    
   
  
   







 Instance 1







   
  
   
    
Class40.testDataInputStream()#3{
        DataInputStream d = new DataInputStream(da);
            assertEquals("AbCdEfGhIjKlM", d.readLine());
            assertEquals("OpQ", d.readLine());
            assertEquals("StUvWxYz", d.readLine());
            d.close();
}
    
   
  
   







 Instance 2







   
  
   
    
Class0.configure(JobConf jconf)#1{
          File txt = new File(localFiles[i].toString());
          FileInputStream fin = new FileInputStream(txt);
          DataInputStream din = new DataInputStream(fin);
          String str = din.readLine();
          out.writeBytes("\n");
        out.close();
}
    
   
  
   







 Instance 3







   
  
   
    
Class0.configure(JobConf jconf)#0{
        for (int i = 0; i < localArchives.length; i++) {
          // read out the files from these archives
          File f = new File(localArchives[i].toString());
          File txt = new File(f, "test.txt");
          FileInputStream fin = new FileInputStream(txt);
          DataInputStream din = new DataInputStream(fin);
          String str = din.readLine();
          din.close();
          out.writeBytes(str);
          out.writeBytes("\n");
        }
        for (int i = 0; i < localFiles.length; i++) {
          // read out the files from these archives
          File txt = new File(localFiles[i].toString());
          FileInputStream fin = new FileInputStream(txt);
          DataInputStream din = new DataInputStream(fin);
          String str = din.readLine();
          out.writeBytes(str);
          out.writeBytes("\n");
        }
}
    
   
  
   







 Instance 4







   
  
   
    
Class60.DownloadHistory(Context context)#0{
        Config config = new Config(context);
        File historyFile = config.getPodcastRootPath("history.prop");
            DataInputStream dis = new DataInputStream(new FileInputStream(historyFile));
            String line = dis.readLine();
            if (!line.startsWith(HISTORY_TWO_HEADER)) {
                // load old format.
                historyEntries.add(new HistoryEntry(UNKNOWN_SUBSCRIPTION, line));
                while ((line = dis.readLine()) != null) {
                    historyEntries.add(new HistoryEntry(UNKNOWN_SUBSCRIPTION, line));
                }
            } else {
                ObjectInputStream ois = new ObjectInputStream(dis);
                historyEntries = (List<HistoryEntry>) ois.readObject();
                ois.close();
            }
            Log.e(DownloadHelper.class.getName(), "error reading history file " + historyFile.toString(), e);
}
    
   
  
   







 Instance 5







   
  
   
    
Class40.doRepeater(Socket sock,String host,int port)#0{
        DataInputStream is = new DataInputStream(sock.getInputStream());
        String line = is.readLine();
}
    
   
  
   







 Instance 6







   
  
   
    
Class10.readLine(){
        DataInputStream ds = new DataInputStream(in);
        return ds.readLine();
}
    
   
  
   







 Instance 7







   
  
   
    
Class110.readLine(){
    return new DataInputStream(this).readLine();
}
    
   
  
   







 Instance 8







   
  
   
    
Class110.readLine(){
    return new DataInputStream(this).readLine();
}
    
   
  
   







 Instance 9







   
  
   
    
Class60.verify(InputStream in,OutputStream out,Object addon)#0{
            is = new DataInputStream(in);
            System.out.println(  is.readLine());
}
    
   
  
   







 Instance 10







   
  
   
    
Class80.readLine(){
        DataInputStream d = new DataInputStream(this);
        return d.readLine();
}
    
   
  
   





