
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class120.isTcpPortAvailable(InetSocketAddress localAddress)#1{
            ss = new ServerSocket();
            ss.setReuseAddress(false);
            ss.bind(localAddress);
            ss.close();
}
    
   
  
   







 Instance 1







   
  
   
    
Class360.testSetReuseAddress()#8{
        ServerSocket serverSock2 = new ServerSocket();
        serverSock2.setReuseAddress(true);
        serverSock2.bind(addr);
        serverSock2.close();
}
    
   
  
   







 Instance 2







   
  
   
    
Class270.test_setReuseAddressZ()#7{
            serverSocket = new ServerSocket();
            serverSocket.setReuseAddress(false);
            serverSocket.bind(theAddress);
            fail("No exception when setReuseAddress is false and we bind:" + theAddress.toString());
}
    
   
  
   







 Instance 3







   
  
   
    
Class260.start()#1{
        if (sslcontext != null) {
            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory();
            ssock = sf.createServerSocket();
        } else {
            ssock = new ServerSocket();
        }
        ssock.setReuseAddress(true); // probably pointless for port '0'
        ssock.bind(TEST_SERVER_ADDR);
}
    
   
  
   







 Instance 4







   
  
   
    
Class270.test_setReuseAddressZ()#3{
        theSocket = new Socket();
        theSocket.connect(theAddress);
        stillActiveSocket = serverSocket.accept();
        serverSocket.close();
            serverSocket = new ServerSocket();
            serverSocket.setReuseAddress(true);
            serverSocket.bind(theAddress);
            fail("Unexpected exception when setReuseAddress is true and we bind:"
                    + theAddress.toString() + ":" + ex.toString());
}
    
   
  
   







 Instance 5







   
  
   
    
Class90.createBoundServerSocket(final InetSocketAddress bindAddress){
        final ServerSocket serverSocket = new ServerSocket();
        serverSocket.setReuseAddress(true);
        serverSocket.bind(bindAddress);
}
    
   
  
   







 Instance 6







   
  
   
    
Class360.testSetReuseAddress()#2{
        final ServerSocket serverSock = new ServerSocket();
        serverSock.setReuseAddress(true);
        serverSock.bind(addr);
}
    
   
  
   







 Instance 7







   
  
   
    
Class260.maybeInitJmx()#1{
                ServerSocket ss = new ServerSocket();
                ss.setReuseAddress(true);
                ss.bind(null);
                int jmxport = ss.getLocalPort();
                ss.close();
                if (jmxport == -1) {
                    log.warn("[init.jmx] failed to get a port");
                } else {
                    try {
                        jmxremote = new MBeanRemotingSupport(jmxport);
                        jmxremote.start();
                        log.info("[init.jmx] port={}", jmxport);
                    } catch (Exception e) {
                        log.error("[init.jmx]", e);
                    }
                }
}
    
   
  
   







 Instance 8







   
  
   
    
Class310.findNextPort()#0{
      ServerSocket serverSocket = new ServerSocket();
      serverSocket.setReuseAddress(true); // this allows the server port to be bound to even if it's in TIME_WAIT
      serverSocket.bind(inetSocketAddress);
      port = serverSocket.getLocalPort();
      serverSocket.close();
}
    
   
  
   







 Instance 9







   
  
   
    
Class270.test_setReuseAddressZ()#2{
        ServerSocket serverSocket = new ServerSocket();
        serverSocket.setReuseAddress(false);
        serverSocket.bind(anyAddress);
        SocketAddress theAddress = serverSocket.getLocalSocketAddress();
}
    
   
  
   







 Instance 10







   
  
   
    
Class270.test_setReuseAddressZ()#5{
        serverSocket = new ServerSocket();
        serverSocket.setReuseAddress(true);
        serverSocket.bind(anyAddress);
        theAddress = serverSocket.getLocalSocketAddress();
}
    
   
  
   







 Instance 11







   
  
   
    
Class460.findPort()#0{
                serverSocket = new ServerSocket();
                serverSocket.setReuseAddress(true);
                serverSocket.bind(sa);
}
    
   
  
   







 Instance 12







   
  
   
    
Class140.createSocketListener(final InetSocketAddress listenerAddress){
        final ServerSocket serverSocket = new ServerSocket();
        serverSocket.setReuseAddress(true);
        serverSocket.bind(listenerAddress);
        return new SocketListener(serverSocket, this.handleExecutor, this.handleMessageTaskFactory);
}
    
   
  
   





