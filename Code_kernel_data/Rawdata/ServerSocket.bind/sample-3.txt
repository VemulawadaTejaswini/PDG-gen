
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class530.getSecureResources(Configuration conf)#2{
        ServerSocketChannel.open().socket() : new ServerSocket();
    ss.bind(streamingAddr, 0);
    if (ss.getLocalPort() != streamingAddr.getPort()) {
      throw new RuntimeException(
          "Unable to bind on specified streaming port in secure "
              + "context. Needed " + streamingAddr.getPort() + ", got "
              + ss.getLocalPort());
    }
    if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) && isSecure) {
      throw new RuntimeException(
        "Cannot start secure datanode with unprivileged RPC ports");
    }
}
    
   
  
   







 Instance 1







   
  
   
    
Class130.init(DaemonContext context)#2{
        ServerSocketChannel.open().socket() : new ServerSocket();
    ss.bind(socAddr, 0);
    if(ss.getLocalPort() != socAddr.getPort())
      throw new RuntimeException("Unable to bind on specified streaming port in secure " +
          "context. Needed " + socAddr.getPort() + ", got " + ss.getLocalPort());
}
    
   
  
   







 Instance 2







   
  
   
    
Class380.MultipointServer(final String bindHost,String broadcastHost,final int port,final Tracker tracker,final String name,final boolean debug,final Set<URI> roots,Duration reconnectDelay)#9{
        serverChannel = ServerSocketChannel.open();
        serverChannel.configureBlocking(false);
        final ServerSocket serverSocket = serverChannel.socket();
        serverSocket.bind(address);
        this.port = serverSocket.getLocalPort();
}
    
   
  
   







 Instance 3







   
  
   
    
Class200.startFileTransferChannel(String dirName,FileChannel[] fileChannelList)#0{
      ServerSocketChannel ssc = ServerSocketChannel.open();
      ssc.configureBlocking(false);
      ServerSocket serverSocket = ssc.socket();
      serverSocket.bind(null);
      port = serverSocket.getLocalPort();
}
    
   
  
   







 Instance 4







   
  
   
    
Class20.createServerSocket(int port)#2{
        sock.bind(null);
        serverPort = sock.getLocalPort();
}
    
   
  
   





