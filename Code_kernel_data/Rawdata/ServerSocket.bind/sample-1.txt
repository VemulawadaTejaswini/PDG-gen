
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class90.getRandomPort(){
    ServerSocket sock = new ServerSocket();
    sock.bind(null);
    int port = sock.getLocalPort();
    sock.close();
}
    
   
  
   







 Instance 1







   
  
   
    
Class520.createDynamicTCPSession()#2{
         ServerSocket s = new ServerSocket();
         s.bind(null);
         port = s.getLocalPort();
         s.close();
}
    
   
  
   







 Instance 2







   
  
   
    
Class520.test_bindLjava_net_SocketAddress()#0{
        theSocket = new ServerSocket();
        theSocket.bind(null);
        theSocket.close();
        theSocket = new ServerSocket();
        ServerSocket theSocket2 = new ServerSocket();
}
    
   
  
   







 Instance 3







   
  
   
    
Class40.test_bindLjava_net_SocketAddressI()#2{
        theSocket = new ServerSocket();
        theSocket.bind(null, 5);
        theSocket.close();
        theSocket = new ServerSocket();
        ServerSocket theSocket2 = new ServerSocket();
}
    
   
  
   







 Instance 4







   
  
   
    
Class90.run()#0{
            ServerSocket ssock = new ServerSocket();
            ssock.bind(null);
            listenPort = ssock.getLocalPort();
            sock = ssock.accept();
            sock.setTcpNoDelay(true);
}
    
   
  
   







 Instance 5







   
  
   
    
Class380.timeout()#1{
        ServerSocket server = new ServerSocket();
            server.bind(null);
            IoFuture<IoSession> cf = client.connect(new InetSocketAddress("localhost", server.getLocalPort()));
}
    
   
  
   







 Instance 6







   
  
   
    
Class20.getAvailablePort()#0{
            ss = new ServerSocket();
            ss.bind(null);
            return ss.getLocalPort();
}
    
   
  
   







 Instance 7







   
  
   
    
Class80.test_isConnected()#3{
        server = new ServerSocket();
        server.bind(theAddress);
        InetSocketAddress boundAddress = new InetSocketAddress(server
                .getInetAddress(), server.getLocalPort());
        client.connect(boundAddress);
        worker = server.accept();
}
    
   
  
   







 Instance 8







   
  
   
    
Class250.testAddressTranslation()#1{
        ServerSocket serverSocket = new ServerSocket();
        serverSocket.bind(null);
        Socket socket1 = new Ec2SocketFactory().createSocket("localhost", serverSocket.getLocalPort());
}
    
   
  
   







 Instance 9







   
  
   
    
Class150.generate_all_kind_of_client_event()#18{
        ServerSocket serverSocket = new ServerSocket();
        serverSocket.bind(null);
        int port = serverSocket.getLocalPort();
}
    
   
  
   







 Instance 10







   
  
   
    
Class430.main(String args[])#2{
        ServerSocket ss = new ServerSocket();
        ss.bind(isa);
        int port = ss.getLocalPort();
}
    
   
  
   







 Instance 11







   
  
   
    
Class390.test_bindLjava_net_SocketAddress()#3{
        ServerSocket server = new ServerSocket();
        server.bind(theAddress);
        int sport = server.getLocalPort();
}
    
   
  
   







 Instance 12







   
  
   
    
Class270.test_setReuseAddressZ()#1{
        theSocket = new Socket();
        theSocket.connect(theAddress);
        stillActiveSocket = serverSocket.accept();
        serverSocket.close();
            serverSocket = new ServerSocket();
            serverSocket.bind(theAddress);
            fail("Unexpected exception when setReuseAddress is the default case and we bind:"
                    + theAddress.toString() + ":" + ex.toString());
}
    
   
  
   







 Instance 13







   
  
   
    
Class360.run()#2{
            server = new ServerSocket();
            server.bind(this.socketAddress);
                new InetSocketAddress(server.getInetAddress(), server.getLocalPort()), this.secretKey);
}
    
   
  
   







 Instance 14







   
  
   
    
Class440.portAvailable(int port)#1{
      ServerSocket socket = new ServerSocket();
      socket.bind(addr);
      socket.close();
}
    
   
  
   







 Instance 15







   
  
   
    
Class530.isSocketBindable(InetSocketAddress addr)#1{
    ServerSocket socket = new ServerSocket();
      socket.bind(addr);
      socket.close();
}
    
   
  
   







 Instance 16







   
  
   
    
Class30.initialize()#2{
    ServerSocket socket = new ServerSocket();
    socket.bind(clientSocket);
    socket.close();
}
    
   
  
   







 Instance 17







   
  
   
    
Class30.initialize()#6{
      socket = new ServerSocket();
      socket.bind(dnSocket);
      socket.close();
}
    
   
  
   







 Instance 18







   
  
   
    
Class140.isPrimaryAlive(String zkRegistry)#2{
    ServerSocket socket = new ServerSocket();
    socket.bind(clientSocket);
    socket.close();
}
    
   
  
   







 Instance 19







   
  
   
    
Class140.testOpenServerSocket(final String host)#0{
      serverSocket = new ServerSocket();
      serverSocket.bind(socketAddress);
      if (serverSocket != null) {
        try {
          serverSocket.close();
        } catch (Exception e) {
          //ignore
        }
      }
}
    
   
  
   







 Instance 20







   
  
   
    
Class270.test_setReuseAddressZ()#4{
        serverSocket = new ServerSocket();
        serverSocket.bind(anyAddress);
        theAddress = serverSocket.getLocalSocketAddress();
}
    
   
  
   







 Instance 21







   
  
   
    
Class210.doBind(InetSocketAddress addr)#5{
            ServerSocket svr = new ServerSocket();
            svr.bind(null);
            InetSocketAddress bad = (InetSocketAddress) svr.getLocalSocketAddress();
}
    
   
  
   







 Instance 22







   
  
   
    
Class550.testShutdownOutput(Bootstrap cb)#9{
        ServerSocket ss = new ServerSocket();
            ss.bind(addr);
}
    
   
  
   







 Instance 23







   
  
   
    
Class340.initializeDefaultSocketParameters(final InetSocketAddress bindAddress,final InetAddress connectAddress)#5{
            ss = new ServerSocket();
            ss.bind(bindAddress);
}
    
   
  
   







 Instance 24







   
  
   
    
Class390.testFailBackoff()#10{
    final ServerSocket ss = new ServerSocket();
    ss.bind(null);
}
    
   
  
   







 Instance 25







   
  
   
    
Class160.isAvailablePort(int port)#1{
            ss = new ServerSocket(port);
            ss.bind(null);
}
    
   
  
   







 Instance 26







   
  
   
    
Class250.startListening(String localaddress,int port)#1{
        ServerSocket ss = new ServerSocket();
        ss.bind(sa);
        return new SocketListenKey(ss);
}
    
   
  
   







 Instance 27







   
  
   
    
Class190.bindServerSocket(InetAddress inetAddr)#1{
        serverSocket = new ServerSocket();
        serverSocket.bind(addr);
}
    
   
  
   







 Instance 28







   
  
   
    
Class350.createServerSocket(String type,InetSocketAddress inetSocketAddress)#1{
            serverSocketChannel = ServerSocketChannel.open();
            serverSocket = serverSocketChannel.socket();
            serverSocket = new ServerSocket();
        serverSocket.bind(inetSocketAddress);
}
    
   
  
   







 Instance 29







   
  
   
    
Class420.validatePortIsFree(final String host,final int port)#2{
        serverSocket = new ServerSocket();
        serverSocket.bind(socketAddress);
}
    
   
  
   







 Instance 30







   
  
   
    
Class360.run()#3{
            server = new ServerSocket();
            server.bind(socketAddress);
            log.info("Sling Control Server started on " + socketAddress.toString());
            log.error("Failed to start Sling Control Server", ioe);
}
    
   
  
   





