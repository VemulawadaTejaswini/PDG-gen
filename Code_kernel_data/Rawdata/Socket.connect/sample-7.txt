
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class400.connectSocket(final Socket socket,final InetSocketAddress remoteAddress,final InetSocketAddress localAddress,final HttpParams params)#4{
        int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
        int soTimeout = HttpConnectionParams.getSoTimeout(params);
            sock.setSoTimeout(soTimeout);
            sock.connect(remoteAddress, connTimeout);
            throw new ConnectTimeoutException("Connect to " + remoteAddress + " timed out");
        if (remoteAddress instanceof HttpInetSocketAddress) {
            hostname = ((HttpInetSocketAddress) remoteAddress).getHttpHost().getHostName();
        } else {
            hostname = remoteAddress.getHostName();
        }
}
    
   
  
   







 Instance 1







   
  
   
    
Class600.connectSocket(Socket sock,InetSocketAddress remoteAddress,InetSocketAddress localAddress,HttpParams params)#4{
        int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
        int soTimeout = HttpConnectionParams.getSoTimeout(params);
            sock.setSoTimeout(soTimeout);
            sock.connect(remoteAddress, connTimeout);
            throw new ConnectTimeoutException("Connect to " + remoteAddress + " timed out");
}
    
   
  
   







 Instance 2







   
  
   
    
Class10.connectSocket(final Socket socket,final InetSocketAddress remoteAddress,final InetSocketAddress localAddress,final HttpParams params)#1{
        int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
        int soTimeout = HttpConnectionParams.getSoTimeout(params);
            sock.setSoTimeout(soTimeout);
            sock.connect(remoteAddress, connTimeout);
            throw new ConnectTimeoutException("Connect to " + remoteAddress + " timed out");
}
    
   
  
   







 Instance 3







   
  
   
    
Class100.connectSocket(final Socket socket,final InetSocketAddress remoteAddress,final InetSocketAddress localAddress,final HttpParams params)#1{
        final int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
        final int soTimeout = HttpConnectionParams.getSoTimeout(params);
            sock.setSoTimeout(soTimeout);
            sock.connect(remoteAddress, connTimeout);
            throw new ConnectTimeoutException("Connect to " + remoteAddress + " timed out");
}
    
   
  
   







 Instance 4







   
  
   
    
Class470.connectSocket(final Socket socket,final InetSocketAddress remoteAddress,final InetSocketAddress localAddress,final HttpParams params)#1{
        int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
        int soTimeout = HttpConnectionParams.getSoTimeout(params);
            sock.setSoTimeout(soTimeout);
            sock.connect(remoteAddress, connTimeout);
            throw new ConnectTimeoutException("Connect to " + remoteAddress.getHostName() + "/"
                    + remoteAddress.getAddress() + " timed out");
}
    
   
  
   







 Instance 5







   
  
   
    
Class80.createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params)#2{
        socket.setSoTimeout(params.getSoTimeout());
        socket.bind(localaddr);
        ServerNameIndicator.setServerNameIndication(host, (SSLSocket)socket);
        socket.connect(remoteaddr, timeout);
        verifyPeerIdentity(host, port, socket);
}
    
   
  
   





