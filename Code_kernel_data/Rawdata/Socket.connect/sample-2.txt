
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class130.connect(String hostname,int port,String password,SocketFactory socketFactory)#7{
        if (this.bindLocalAddr != null) {
            //socket.setReuseAddress(true);
            socket.bind(this.bindLocalAddr); 
        }
        socket.connect(ircServer);
}
    
   
  
   







 Instance 1







   
  
   
    
Class250.createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params)#3{
                socket.bind(localaddr);
                socket.connect(remoteaddr, timeout);
}
    
   
  
   







 Instance 2







   
  
   
    
Class20.createSocket(String host,int port,InetAddress localAddress,int localPort,HttpConnectionParams params)#5{
            socket.bind(localaddr);
            socket.connect(remoteaddr, timeout);
}
    
   
  
   







 Instance 3







   
  
   
    
Class420.connectSocket(final int connectTimeout,final Socket socket,final HttpHost host,final InetSocketAddress remoteAddress,final InetSocketAddress localAddress,final HttpContext context)#1{
        if (localAddress != null) {
            sock.bind(localAddress);
        }
            sock.connect(remoteAddress, connectTimeout);
                sock.close();
}
    
   
  
   







 Instance 4







   
  
   
    
Class300.connectSocket(final int connectTimeout,final Socket socket,final HttpHost host,final InetSocketAddress remoteAddress,final InetSocketAddress localAddress,final HttpContext context)#0{
                        if (localAddress != null) {
                            sock.bind(localAddress);
                        }
                            sock.connect(remoteAddress, connectTimeout);
                            throw new ConnectTimeoutException(ex, host, remoteAddress.getAddress());
}
    
   
  
   







 Instance 5







   
  
   
    
Class550.createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params)#7{
            socket.bind(localAddr);
            socket.connect(remoteAddr, timeout);
}
    
   
  
   







 Instance 6







   
  
   
    
Class580.createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params)#0{
            socket.bind(localaddr);
            socket.connect(remoteaddr, timeout);
}
    
   
  
   







 Instance 7







   
  
   
    
Class220.connectSocket(int connectTimeout,Socket sock,HttpHost host,InetSocketAddress remoteAddress,InetSocketAddress localAddress,HttpContext context)#4{
      socket.bind(localaddr);
      socket.connect(remoteaddr, connectTimeout);
}
    
   
  
   







 Instance 8







   
  
   
    
Class600.createSocket(String host,int port,InetAddress localAddress,int localPort,HttpConnectionParams params)#3{
      socket.bind(localaddr);
      socket.connect(remoteaddr, timeout);
}
    
   
  
   







 Instance 9







   
  
   
    
Class420.createSocket(String host,int port,InetAddress localAddress,int localPort,HttpConnectionParams params)#0{
      socket.bind(localaddr);
      socket.connect(remoteaddr, timeout);
}
    
   
  
   







 Instance 10







   
  
   
    
Class520.createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params)#1{
        socket.bind(localaddr);
        socket.connect(remoteaddr, timeout);
}
    
   
  
   







 Instance 11







   
  
   
    
Class390.createSocket(final String host,final int port,final InetAddress localInetAddress,final int localPort,final HttpConnectionParams httpConnectionParams)#3{
      socket.bind(localSocketAddress);
      socket.connect(remoteSocketAddress, connectionTimeout);
}
    
   
  
   







 Instance 12







   
  
   
    
Class620.createSocketWithTimeout(String host,int port,InetAddress localAddress,int localPort,int timeout)#0{
        plainSocket.bind(local);
        plainSocket.connect(remote, timeout);
        return socketFactory.createSocket(plainSocket, host, port, true);
}
    
   
  
   







 Instance 13







   
  
   
    
Class150.createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params)#4{
    socket.bind(localaddr);
    socket.connect(remoteaddr, timeout);
}
    
   
  
   







 Instance 14







   
  
   
    
Class200.createSocket(final String host,final int port,final InetAddress localAddress,final int localPort,final HttpConnectionParams params)#0{
            socket = sslfac.createSocket(host, port, localAddress, localPort);
            socket.bind(localaddr);
            socket.connect(remoteaddr, timeout);
        setSocket(socket);
        return wrapSocket(socket);
}
    
   
  
   





