
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class1010.testDateTimeFormat()#0{
      Calendar calendar = Calendar.getInstance();
      calendar.clear();
      calendar.set(1970, 0, 1, 0, 0, 0);
      String actual = format.format(calendar.getTime());
}
    
   
  
   







 Instance 1







   
  
   
    
Class670.updateRecurringDepositAccount(final String clientID,final String productID,final String accountID,final String validFrom,final String validTo,final String penalInterestType,final String submittedOnDate)#1{
        Calendar todaysDate = Calendar.getInstance();
        todaysDate.add(Calendar.DATE, -1);
        final String SUBMITTED_ON_DATE = dateFormat.format(todaysDate.getTime());
}
    
   
  
   







 Instance 2







   
  
   
    
Class790.convertMillisToMDYHMSS(long millis)#0{
    Calendar calendar = Calendar.getInstance();    
      calendar.setTimeInMillis(millis);
      return formatter.format(calendar.getTime());
}
    
   
  
   







 Instance 3







   
  
   
    
Class1010.testISO8601Format()#1{
      Calendar calendar = Calendar.getInstance();
      calendar.clear();
      calendar.set(1970, 0, 1, 0, 0, 0);
      String actual = format.format(calendar.getTime());
      assertEquals("1970-01-01 00:00:00,000", actual);
}
    
   
  
   







 Instance 4







   
  
   
    
Class1530.createTable()#0{
    Calendar cal = Calendar.getInstance();
    cal.add(Calendar.MONTH, 1);
    String nextMonth = df.format(cal.getTime());
    metricDAO.createMetricTable(METRIC_TABLE_NAME + "_" + nextMonth);
}
    
   
  
   







 Instance 5







   
  
   
    
Class1120.getDate(String format)#0{
        Calendar cal = Calendar.getInstance();
        return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 6







   
  
   
    
Class1100.getTimestamp()#0{
    Calendar calendar = Calendar.getInstance();
    return dateFormat.format(calendar.getTime());
}
    
   
  
   







 Instance 7







   
  
   
    
Class20.getWallClockTime()#0{
  Calendar cal = Calendar.getInstance();
  return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 8







   
  
   
    
Class20.printWallClockTime()#0{
  Calendar cal = Calendar.getInstance();
  LOG.info(dateFormat.format(cal.getTime()));
}
    
   
  
   







 Instance 9







   
  
   
    
Class110.setTimeStamp(String timeStamp)#0{
            Calendar cal = Calendar.getInstance();
            this.timeStamp = dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 10







   
  
   
    
Class230.getLocalizedDate(int year,int month,int day)#0{
    Calendar calendar = new GregorianCalendar(TimeZone.getDefault(), Locale.getDefault());
    calendar.clear();
    calendar.set(Calendar.MILLISECOND, 999);
    return df.format(calendar.getTime());
}
    
   
  
   







 Instance 11







   
  
   
    
Class50.getFormattedTime(DateFormat formatter)#2{
            cal.set(Calendar.MINUTE, getMinute());
            cal.set(Calendar.MILLISECOND, 0);
            return formatter.format(cal.getTime());
}
    
   
  
   







 Instance 12







   
  
   
    
Class130.getNiceDate(String day,String month,String year,String localeString)#1{
        cal.set(Integer.parseInt(year), Integer.parseInt(month) - 1, Integer.parseInt(day));
        return df.format(cal.getTime());
}
    
   
  
   







 Instance 13







   
  
   
    
Class1130.testTimeZoneHandling()#1{
    format2.setTimeZone(calendar.getTimeZone());
    assertEquals("Jan 02, 2003 03:04:05 +0200", format2.format(calendar.getTime()));
}
    
   
  
   







 Instance 14







   
  
   
    
Class1130.format(DateFormat format,Calendar calendar)#0{
    tmpFormat.setTimeZone(calendar.getTimeZone());
    return tmpFormat.format(calendar.getTime());
}
    
   
  
   







 Instance 15







   
  
   
    
Class510.format(final Calendar date)#0{
        formatter.setTimeZone(date.getTimeZone());
        return formatter.format(date.getTime());
}
    
   
  
   







 Instance 16







   
  
   
    
Class130.getNiceDate(String dateLongString,String localeString)#1{
        cal.setTimeInMillis(Long.parseLong(dateLongString));
        return df.format(cal.getTime());
}
    
   
  
   







 Instance 17







   
  
   
    
Class700.formatTimeStamp(long timestamp)#2{
            timeStarted.setTimeInMillis(timestamp);
            timeStampStr = df.format(timeStarted.getTime());
}
    
   
  
   







 Instance 18







   
  
   
    
Class1090.setupDateStrings()#3{
      dateStrings[idx] = format.format(cal.getTime());
      cal.add(1, Calendar.DAY_OF_YEAR);
}
    
   
  
   







 Instance 19







   
  
   
    
Class270.init(PortletConfig portletConfig)#0{
    Calendar calendar = new GregorianCalendar();
    String timestamp = dateFormat.format(calendar.getTime());
    logMessage.append(" INFO  [BridgeImpl] Initializing ");
}
    
   
  
   







 Instance 20







   
  
   
    
Class430.toString(Object o)#0{
            return formatter.format(o instanceof Date ? ((Date) o) : ((Calendar) o).getTime());
}
    
   
  
   







 Instance 21







   
  
   
    
Class890.debug(final String message,final Calendar value)#0{
        debug(message, (value == null) ? "null" : df.format(value.getTime()));
}
    
   
  
   







 Instance 22







   
  
   
    
Class1240.getValue(TimePicker dp)#3{
                        return df.format(c.getTime());
}
    
   
  
   







 Instance 23







   
  
   
    
Class990.compare(final Calendar expected,final Calendar actual)#0{
                + f.format(expected.getTime()) + " Actual: " + f.format(actual.getTime());
}
    
   
  
   







 Instance 24







   
  
   
    
Class990.compare(final Calendar expected,final Calendar actual)#1{
        final String msg = "Locale: " + locale + " FirstDayOfWeek: " + actual.getFirstDayOfWeek() + " Expected: "
                + f.format(expected.getTime()) + " Actual: " + f.format(actual.getTime());
        assertEquals(msg, expected.get(Calendar.YEAR), actual.get(Calendar.YEAR));
        assertEquals(msg, expected.get(Calendar.MONTH), actual.get(Calendar.MONTH));
        assertEquals(msg, expected.get(Calendar.DAY_OF_MONTH), actual.get(Calendar.DAY_OF_MONTH));
        assertEquals(msg, expected.get(Calendar.HOUR), actual.get(Calendar.HOUR));
        assertEquals(msg, expected.get(Calendar.MINUTE), actual.get(Calendar.MINUTE));
}
    
   
  
   







 Instance 25







   
  
   
    
Class700.getAsString(Calendar c,int style,TimeZone tz)#1{
    return df.format(c.getTime());  
}
    
   
  
   







 Instance 26







   
  
   
    
Class700.getAsString(Calendar c,int style,TimeZone tz)#1{
    return df.format(c.getTime());  
}
    
   
  
   







 Instance 27







   
  
   
    
Class760.getValue(DatePicker dp)#2{
                        return df.format(c.getTime());
}
    
   
  
   







 Instance 28







   
  
   
    
Class10.getLatestTime(Calendar startTime,boolean realtime)#2{
                lTime = df.format(startTime.getTime());
}
    
   
  
   







 Instance 29







   
  
   
    
Class10.testCalendarDate()#0{
    assertEquals(df.format(gc.getTime()), df.format(Convert.toDate(jdt)));
}
    
   
  
   







 Instance 30







   
  
   
    
Class630.calendarToString(Calendar calendar)#0{
        return "Birthday: " + format.format( calendar.getTime() );
}
    
   
  
   







 Instance 31







   
  
   
    
Class660.updateTimeAndDateDisplay(Context context)#1{
            mTimeTextView.setText(DateFormat.getTimeFormat(getActivity()).format(now.getTime()));
            mDateTextView.setText(shortDateFormat.format(now.getTime()));
}
    
   
  
   







 Instance 32







   
  
   
    
Class840.setDate(final Calendar cal)#0{
    mTxtDate.setText(dateFormat.format(cal.getTime()));
    mTxtDate.setError(null);
}
    
   
  
   







 Instance 33







   
  
   
    
Class1500.getTime(Context context,Calendar c)#1{
    return tf.format(c.getTime());
}
    
   
  
   







 Instance 34







   
  
   
    
Class1500.getcurrentDate(Context context)#2{
    return df.format(date.getTime());
}
    
   
  
   







 Instance 35







   
  
   
    
Class1500.getcurrentTime(Context context)#1{
    return tf.format(date.getTime());
}
    
   
  
   







 Instance 36







   
  
   
    
Class270.format(String format,Calendar cal)#2{
        return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 37







   
  
   
    
Class1470.outputCache(final CommandSource sender,String command,int page)#0{
    sender.sendMessage(tl("balanceTop", format.format(cal.getTime())));
}
    
   
  
   







 Instance 38







   
  
   
    
Class930.getTimestamp()#2{
      currentTimestamp = dfm.format(cal.getTime());
}
    
   
  
   







 Instance 39







   
  
   
    
Class180.toString(Calendar value)#1{
                return format.format(value.getTime());
}
    
   
  
   







 Instance 40







   
  
   
    
Class180.formatTime(Calendar cal)#2{
        return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 41







   
  
   
    
Class1300.getDefaultFileName()#0{
        String datetime = dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 42







   
  
   
    
Class1300.format(Calendar cal)#1{
        return dateFormat.format(cal.getTime());
}
    
   
  
   







 Instance 43







   
  
   
    
Class1360.compare(Calendar expected,Calendar actual)#1{
        assertEquals(f.format(expected.getTime()), f.format(actual.getTime()));
}
    
   
  
   







 Instance 44







   
  
   
    
Class1360.compare(Calendar expected,Calendar actual)#2{
        assertEquals(f.format(expected.getTime()), f.format(actual.getTime()));
}
    
   
  
   







 Instance 45







   
  
   
    
Class1440.convertDateToURLFormat(final Calendar dateToBeConvert)#2{
        return dateFormat.format(dateToBeConvert.getTime());
}
    
   
  
   







 Instance 46







   
  
   
    
Class1440.testCalendarTimezones()#2{
                final String nowString = fmt.format(cal.getTime());
                assertGet(cal, nowString);
}
    
   
  
   







 Instance 47







   
  
   
    
Class220.getPullInOutTime(int offset)#1{
    return formatter.format(calendar.getTime());
}
    
   
  
   







 Instance 48







   
  
   
    
Class1320.formatTime(Context context,int hourOfDay,int minute)#1{
    return tf.format(c.getTime());
}
    
   
  
   







 Instance 49







   
  
   
    
Class1320.formatDate(Context context,int year,int month,int day)#2{
    return df.format(c.getTime());
}
    
   
  
   







 Instance 50







   
  
   
    
Class1350.testGMTAndLocalTimeZone()#0{
        String localTime = format.format(local.getTime().getTime());
}
    
   
  
   







 Instance 51







   
  
   
    
Class1350.testGMTAndLocalTimeZone()#1{
        String utcTime = format.format(utc.getTime().getTime());
        assertEquals(localTime, utcTime);
        local.setTimeZone(CompactCalendar.UTC);
        assertCalendarEquals(local, utc);
}
    
   
  
   





