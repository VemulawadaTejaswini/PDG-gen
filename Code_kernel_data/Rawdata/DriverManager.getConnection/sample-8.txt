
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class810.initTableValues()#2{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
        PreparedStatement stmt = conn.prepareStatement(
                "upsert into " + TABLE_NAME + " VALUES (?, ?)");
}
    
   
  
   







 Instance 1







   
  
   
    
Class810.initTableValues(long ts)#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
        PreparedStatement stmt = conn.prepareStatement(
                "upsert into " + STABLE_NAME + " VALUES (?, ?)");
}
    
   
  
   







 Instance 2







   
  
   
    
Class100.testDateSubtract()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
}
    
   
  
   







 Instance 3







   
  
   
    
Class100.testUnfoundMultiColumnCaseStatement()#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
}
    
   
  
   







 Instance 4







   
  
   
    
Class1240.parameter1(int a,String b,String c,java.sql.ResultSet[] rs)#0{
        Connection conn = DriverManager
                .getConnection("jdbc:default:connection");
        PreparedStatement ps = conn
                .prepareStatement("insert into PT1 values (?, ?, ?)");
        ps.setInt(1, a);
        ps.setString(3, c);
        ps.executeUpdate();
        ps.close();
        ps = conn.prepareStatement(
            "select a,b, length(b), c, length(c) from PT1 where a = ?");
        ps.setInt(1, a);
        rs[0] = ps.executeQuery();
}
    
   
  
   







 Instance 5







   
  
   
    
Class100.testDateInList()#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
}
    
   
  
   







 Instance 6







   
  
   
    
Class410.insertNumeric()#1{
        Properties from = new Properties();
        from.put("characterEncoding", "utf8");
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/erosa", from);
        PreparedStatement pst = conn.prepareStatement("insert into unsignednumeric(id,id1,id2,id3) values (?,?,?,?)");
        pst.setLong(2, Integer.MAX_VALUE);
}
    
   
  
   







 Instance 7







   
  
   
    
Class880.parameter2(int a,java.math.BigDecimal b,java.math.BigDecimal c,java.sql.ResultSet[] rs)#3{
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement ps = conn.prepareStatement("insert into PT1 values (?, ?, ?)");
    ps.setInt(1, a);
}
    
   
  
   







 Instance 8







   
  
   
    
Class320.parameter2(int a,java.math.BigDecimal b,java.math.BigDecimal c,java.sql.ResultSet[] rs)#1{
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
        PreparedStatement ps = conn.prepareStatement("insert into PT1 values (?, ?, ?)");
        ps.setInt(1, a);
}
    
   
  
   







 Instance 9







   
  
   
    
Class960.getQueryPlan(String query,List<Object> binds)#2{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PhoenixPreparedStatement statement = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);
}
    
   
  
   







 Instance 10







   
  
   
    
Class700.compileQuery(String query,List<Object> binds)#0{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PhoenixPreparedStatement statement = conn.prepareStatement(query).unwrap(PhoenixPreparedStatement.class);
}
    
   
  
   







 Instance 11







   
  
   
    
Class1000.testSelectAllRowsWithDifferentFetchSizes(boolean salted)#4{
        Connection conn = DriverManager.getConnection(getUrl());
        PreparedStatement stmt = conn.prepareStatement("SELECT K, V FROM " + tableName);
        tryWithFetchSize(new HashSet<>(expectedKeys), 1, stmt, 0);
        tryWithFetchSize(new HashSet<>(expectedKeys), 2, stmt, salted ? 2 : 5);
}
    
   
  
   







 Instance 12







   
  
   
    
Class730.destroyBundle(UUID id,String where)#0{
        Connection conn = DriverManager.getConnection("jdbc:derby:" + TEST_DIR
                + "/" + where + "/db");
        String table = where.equals("version") ? "VERSION_BUNDLE" : "DEFAULT_BUNDLE";
        PreparedStatement prep = conn.prepareStatement("delete from " + table
                + " where NODE_ID_HI=? and NODE_ID_LO=?");
}
    
   
  
   







 Instance 13







   
  
   
    
Class890.insertRowsInTable(String tableName,long numRows)#1{
        Connection conn = DriverManager.getConnection(getUrl());
        PreparedStatement stmt = conn.prepareStatement(dml);
}
    
   
  
   







 Instance 14







   
  
   
    
Class1120.test_0()#0{
        Connection conn = DriverManager.getConnection(url, "beidou", "mzbSXikh48dTrVX8kuLYtuok1");
        PreparedStatement stmt = conn.prepareStatement("select sysdate");
        stmt.executeBatch();
}
    
   
  
   







 Instance 15







   
  
   
    
Class1170.SetOfRecordTest(String selectSQL){
    Connection conn = DriverManager
        .getConnection("jdbc:default:connection");
    m_statement = conn.prepareStatement(selectSQL);
}
    
   
  
   







 Instance 16







   
  
   
    
Class410.insertEventsInTable(int numEvents)#2{
        Connection con = DriverManager.getConnection(URL);
        PreparedStatement stmt = con.prepareStatement(insert);
}
    
   
  
   







 Instance 17







   
  
   
    
Class400.createSequence(String sequenceName)#1{
        Connection  conn = DriverManager.getConnection( "jdbc:default:connection" );
        conn.prepareStatement( "create sequence " + sequenceName ).execute();
}
    
   
  
   







 Instance 18







   
  
   
    
Class1010.call()#0{
                    Connection c = DriverManager.getConnection(url, user, password);
                    PreparedStatement prep = c
                            .prepareStatement("insert into employee values(?, ?, 0)");
}
    
   
  
   







 Instance 19







   
  
   
    
Class490.runStatementAndRaiseError(String text)#1{
        Connection  conn = DriverManager.getConnection( "jdbc:default:connection" );
        conn.prepareStatement( text ).execute();
}
    
   
  
   







 Instance 20







   
  
   
    
Class1370.testReturnGeneratedKeys()#2{
        Connection con = DriverManager.getConnection("jdbc:derby:memory:derby1;create=true");
        con.prepareStatement(
                "create table note(id integer not null generated always as identity (start with 1, increment by 1),\n"
                        + "text varchar(255) not null)").execute();
}
    
   
  
   







 Instance 21







   
  
   
    
Class1070.findMessagesByTimestampRange(Timestamp start,Timestamp end,ResultSet[] results)#1{
    Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
    PreparedStatement ps = conn.prepareStatement( "select * from msg where ts between ? and ?" );
}
    
   
  
   





