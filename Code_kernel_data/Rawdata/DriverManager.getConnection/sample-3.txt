
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class1240.testTernarySubtractionExpression()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW7);
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW9);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 1







   
  
   
    
Class1240.testIsNotNull()#1{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW7);
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW8);
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW9);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 2







   
  
   
    
Class710.testNegativeAgainstUnsignedNone()#0{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 3







   
  
   
    
Class1060.testUnsignedDoubleAddExpression()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(ROW8, rs.getString(1));
            assertTrue (rs.next());
            assertEquals(ROW9, rs.getString(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 4







   
  
   
    
Class490.testRangeQuery3(){
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            assertEquals(30, rs.getInt(1));
            assertEquals(300L, rs.getLong(2));
            assertEquals("c", rs.getString(3));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 5







   
  
   
    
Class900.testIntMultiplyExpression()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(ROW8, rs.getString(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 6







   
  
   
    
Class1010.testSumDouble()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertTrue(Doubles.compare(rs.getDouble(1), 0.015)==0);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 7







   
  
   
    
Class720.testCountIsNull()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(6, rs.getLong(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 8







   
  
   
    
Class1430.testCompareLongGTDecimal()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(2, rs.getLong(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 9







   
  
   
    
Class360.testDecimalSubtraction2Expression()#1{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW8);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 10







   
  
   
    
Class1060.testSumFloat()#0{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertTrue(Floats.compare(rs.getFloat(1), 0.15f)==0);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 11







   
  
   
    
Class490.testPercentileDiscOnDescPKColumn()#0{
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            long percentile_disc = rs.getLong(1);
            assertEquals(2, percentile_disc);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 12







   
  
   
    
Class100.testCoerceIntegerToLong(){
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            assertEquals(ROW7, rs.getString(1));
            assertTrue(rs.next());
            assertEquals(ROW9, rs.getString(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 13







   
  
   
    
Class1370.main(String[] args)#0{
     Connection c = DriverManager.getConnection("jdbc:hsqldb:file:target/test-classes/hsql/test_dj_db", "sa", "");
     PreparedStatement ps = c.prepareStatement("SELECT * FROM Customer");
     ResultSet rs = ps.executeQuery();
     while (rs.next()) {
       log.info(rs.getString("firstname")+ ", " + rs.getString("lastname"));
    }
    rs.close();
}
    
   
  
   







 Instance 14







   
  
   
    
Class360.testToCharOnDate()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            assertEquals(DateUtil.DEFAULT_DATE_FORMATTER.format(D1), rs.getString(2));
}
    
   
  
   







 Instance 15







   
  
   
    
Class360.testToCharWithFormatOnDate()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            assertEquals(dateFormatter.format(D1), rs.getString(2));
}
    
   
  
   







 Instance 16







   
  
   
    
Class900.testUngroupedAggregationNoWhere()#1{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            assertEquals(9, rs.getLong(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 17







   
  
   
    
Class1290.testWhereStringConcatExpression()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs=statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(ROW2, rs.getString(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 18







   
  
   
    
Class1290.testOr()#0{
        Connection conn5 = DriverManager.getConnection(getUrl(), props);
        PreparedStatement statement = conn5.prepareStatement(query);
        ResultSet rs = statement.executeQuery();
        assertTrue(rs.next());
        assertEquals(1, rs.getInt(1));
        assertTrue(rs.next());
        assertEquals(3, rs.getInt(1));
        assertFalse(rs.next());
        conn5.close();
}
    
   
  
   







 Instance 19







   
  
   
    
Class950.testFoundIndexOnPartialEvalCaseStatement()#0{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            assertEquals(ROW9, rs.getString(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 20







   
  
   
    
Class730.testScanNoSCN()#0{
        Properties props = new Properties(); // Test with no CurrentSCN property set
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), B_VALUE);
            assertEquals(rs.getString("B_string"), C_VALUE);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 21







   
  
   
    
Class530.testSelectWithSubtractionExpression()#1{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW8);
            assertEquals(rs.getInt(2), 0);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 22







   
  
   
    
Class530.testDoubleDivideExpression()#0{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(ROW9, rs.getString(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 23







   
  
   
    
Class360.testLongSubtractionExpression()#0{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW8);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 24







   
  
   
    
Class230.testNotEquals()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ROW2);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 25







   
  
   
    
Class90.readRows(String dataSourceURL,String dataSourceName)#0{
    Connection connection = DriverManager.getConnection(dataSourceURL, USER, PASSWORD);    
    PreparedStatement stmt = connection.prepareStatement(QUERY_SELECT);
    ResultSet rs = stmt.executeQuery();
    while(rs.next()) {
      int id = rs.getInt(1);
      list.add(id);
      LOGGER.info("read {} from {}", id, dataSourceName);
    }
    rs.close();
}
    
   
  
   







 Instance 26







   
  
   
    
Class820.runOneRowQueryTest(String oneRowQuery,Integer pkValue,String projectedValue)#0{
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL);
            PreparedStatement statement = conn.prepareStatement(oneRowQuery);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
}
    
   
  
   







 Instance 27







   
  
   
    
Class820.runOneRowQueryTest(String oneRowQuery,boolean isIntegerColumn,Integer expectedIntValue,BigDecimal expectedDecimalValue)#1{
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL);
            PreparedStatement statement = conn.prepareStatement(oneRowQuery);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
}
    
   
  
   







 Instance 28







   
  
   
    
Class600.testDistinctUngroupedAggregation()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue(rs.next());
            assertEquals(9L, rs.getLong(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 29







   
  
   
    
Class350.testCastOperatorInWhere()#0{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(5, rs.getInt(1));
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 30







   
  
   
    
Class230.testAllScan()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), B_VALUE);
            assertEquals(rs.getString("B_string"), C_VALUE);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 31







   
  
   
    
Class230.testNotEqualsByFloat()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertTrue(Floats.compare(rs.getFloat(1), 0.02f) == 0);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 32







   
  
   
    
Class730.testScanByFloatValue()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            statement.setFloat(2, 0.01f);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), A_VALUE);
            assertEquals(rs.getString("B_string"), B_VALUE);
            assertTrue(Floats.compare(rs.getFloat(3), 0.01f) == 0);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 33







   
  
   
    
Class210.testDistinctLimitScan()#0{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), A_VALUE);
            assertFalse(rs.next());
            conn.close();
}
    
   
  
   







 Instance 34







   
  
   
    
Class390.getMessage(String messageId,Clob[] returnedData){
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement stmt = conn.prepareStatement("select MESSAGE_JSON from JSON_MESSAGE where MESSAGE_ID = ?");
    stmt.setString( 1, messageId);
    ResultSet results = stmt.executeQuery();
    if (results.next()) {
      returnedData[0] = results.getClob(1);
    }
}
    
   
  
   







 Instance 35







   
  
   
    
Class230.testToDateOnString()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            rs.getDate(1);
}
    
   
  
   







 Instance 36







   
  
   
    
Class1270.verifyPatchTableNotLocked(String database){
        Connection conn = DriverManager.getConnection("jdbc:hsqldb:mem:" + database, "sa", "");
        PreparedStatement stmt = conn.prepareStatement("SELECT patch_in_progress FROM patches WHERE system_name = ? AND ( patch_in_progress <> 'F' OR patch_level in ( SELECT MAX(patch_level) FROM patches WHERE system_name = ? ))");
        stmt.setString(2, database);
        ResultSet rs = stmt.executeQuery();
        rs.next();
        assertEquals("F", rs.getString("patch_in_progress"));
        SqlUtil.close(conn, stmt, rs);
}
    
   
  
   







 Instance 37







   
  
   
    
Class640.selectAuthorViaOutParams(int id,String[] username,String[] password,String[] email,String[] bio)#0{
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement ps = conn.prepareStatement("select * from author where id = ?");
    ps.setInt(1, id);
    ResultSet rs = ps.executeQuery();
    rs.next();
    bio[0] = rs.getString("bio");
}
    
   
  
   







 Instance 38







   
  
   
    
Class760.getUserById(int id){
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
        PreparedStatement prep = conn.prepareStatement("SELECT USENAME FROM PG_CATALOG.PG_USER WHERE OID=?");
        prep.setInt(1, id);
        ResultSet rs = prep.executeQuery();
        if (rs.next()) 
        {
            res = rs.getString(1);
        }
        rs.close();
}
    
   
  
   







 Instance 39







   
  
   
    
Class90.testDecimalSubtraction1Expression()#0{
        props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(ts + 2)); // Execute at timestamp 2
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 40







   
  
   
    
Class280.testPartiallyQualifiedRVCInList()#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 41







   
  
   
    
Class950.testNonNullMultiCondCaseStatement()#1{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
            ResultSetMetaData rsm = rs.getMetaData();
            assertEquals(ResultSetMetaData.columnNoNulls,rsm.isNullable(1));
            conn.close();
}
    
   
  
   







 Instance 42







   
  
   
    
Class420.testAmbiguousStaticSelect()#1{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(upsertquery);
            statement.executeQuery();
}
    
   
  
   







 Instance 43







   
  
   
    
Class1290.testCoelesceFunctionTypeMismatch()#0{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 44







   
  
   
    
Class1290.testAmbiguousColumn()#0{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 45







   
  
   
    
Class810.testFakeCFDynamicUpsert()#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(upsertquery);
            statement.executeQuery();
}
    
   
  
   







 Instance 46







   
  
   
    
Class1170.testSelectDistinctAndAll()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 47







   
  
   
    
Class1140.testOrderByAggSelectNonAgg()#0{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.executeQuery();
}
    
   
  
   







 Instance 48







   
  
   
    
Class520.testJoinWithIncomparableJoinKeyTypes()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(PHOENIX_JDBC_URL, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 49







   
  
   
    
Class640.testDynamicFamilyException()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 50







   
  
   
    
Class1380.getSplitTestRecords(ResultSet[] data1,ResultSet[] data2)#1{
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
            PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET WHERE POSITION <= 2");
            data1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 51







   
  
   
    
Class990.testIntToDecimalDivideExpression()#0{
        Connection conn = DriverManager.getConnection(getUrl(), props);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 52







   
  
   
    
Class1360.readFoos(ResultSet[] rs){
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
        PreparedStatement ps1 = conn.prepareStatement(SQL);
        rs[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 53







   
  
   
    
Class250.findUserIds(ResultSet[] results)#0{
    Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
    PreparedStatement ps = conn.prepareStatement( "select id from t_user" );
    results[0] = ps.executeQuery();
}
    
   
  
   







 Instance 54







   
  
   
    
Class170.selectRows(ResultSet[] data1)#0{
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
            PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET");
            data1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 55







   
  
   
    
Class540.findAllCoffeeBeverages(ResultSet[] coffeeBeverages){
    connection = DriverManager.getConnection("jdbc:default:connection");
    statement = connection.prepareStatement(sql);
    coffeeBeverages[0] = statement.executeQuery();
}
    
   
  
   







 Instance 56







   
  
   
    
Class1180.testDivideByBigDecimalZero()#0{
        long ts = nextTimestamp();
        String url = getUrl() + ";" + PhoenixRuntime.CURRENT_SCN_ATTRIB + "=" + (ts + 5); // Run query at timestamp 5
        Connection conn = DriverManager.getConnection(url);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 57







   
  
   
    
Class230.getAllApplicants(ResultSet[] rs1)#0{
            DriverManager.getConnection("jdbc:default:connection");
            conn.prepareStatement("select * from APPLICANT");
        rs1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 58







   
  
   
    
Class1090.testDynamicFamilyFunctionException()#0{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.executeQuery();
}
    
   
  
   







 Instance 59







   
  
   
    
Class970.testFullyQualifiedRVCInList()#1{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(3, ROW5);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 60







   
  
   
    
Class1140.testSelectStarOnGroupBy()#3{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.executeQuery();
}
    
   
  
   







 Instance 61







   
  
   
    
Class880.blobselect(ResultSet[] results)#0{
        Connection conn = DriverManager.getConnection(
      "jdbc:default:connection");
    PreparedStatement st = conn.prepareStatement("select * from lobCheckTwo");
    results[0] = st.executeQuery();
}
    
   
  
   







 Instance 62







   
  
   
    
Class700.proc_test1_UpdateBeforeTrigger_select_table(int p1)#1{
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
        PreparedStatement ps = conn.prepareStatement("select updates from " +
            "table2 where table2.id = " + p1);
        ps.executeQuery();
}
    
   
  
   







 Instance 63







   
  
   
    
Class730.selectFromSpecificSchema(int p1)#0{
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement ps = conn.prepareStatement("select * from mamta1.t12RoutineTest");
    ps.executeQuery();
    ps.close();
}
    
   
  
   







 Instance 64







   
  
   
    
Class240.hashmapReader(){
        Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
        PreparedStatement ps = conn.prepareStatement( "select intCol, hashmapCol from t_11" );
        return ps.executeQuery();
}
    
   
  
   







 Instance 65







   
  
   
    
Class210.testSimpleInListStatement()#1{
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setString(1, tenantId);
            ResultSet rs = statement.executeQuery();
}
    
   
  
   







 Instance 66







   
  
   
    
Class380.testTypeMismatchInCase()#2{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, "00D300000000XHP");
                statement.executeQuery();
}
    
   
  
   







 Instance 67







   
  
   
    
Class380.testNonBooleanWhereExpression()#2{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, "00D300000000XHP");
                statement.executeQuery();
}
    
   
  
   







 Instance 68







   
  
   
    
Class1380.testNonAggInHavingClause()#0{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, "00D300000000XHP");
                statement.executeQuery();
}
    
   
  
   







 Instance 69







   
  
   
    
Class1380.testAggInWhereClause()#1{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, "00D300000000XHP");
                statement.executeQuery();
}
    
   
  
   







 Instance 70







   
  
   
    
Class600.findOneUser(ResultSet[] results)#0{
    Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
    PreparedStatement ps = conn.prepareStatement( "select id, name from t_user where name=?" );
    ps.setString( 1, "steve" );
    results[0] = ps.executeQuery();
}
    
   
  
   







 Instance 71







   
  
   
    
Class1080.getTwoApplicants(String name1,String name2,ResultSet[] rs1)#1{
            DriverManager.getConnection("jdbc:default:connection");
            conn.prepareStatement("select * from APPLICANT where name = ? "
                + "or name = ?");
        ps1.setString(2, name2);
        rs1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 72







   
  
   
    
Class570.testInvalidGroupedAggregation()#1{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, "00D300000000XHP");
                statement.executeQuery();
}
    
   
  
   







 Instance 73







   
  
   
    
Class550.testParameterUnbound()#1{
            Connection conn = DriverManager.getConnection(getUrl(), props);
                PreparedStatement statement = conn.prepareStatement(query);
                statement.setString(1, "00D300000000XHP");
                statement.executeQuery();
}
    
   
  
   







 Instance 74







   
  
   
    
Class980.selectRows(int p1,ResultSet[] data)#0{
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement ps = conn.prepareStatement("select * from t1 where i = ?");
    ps.setInt(1, p1);
    data[0] = ps.executeQuery();
}
    
   
  
   







 Instance 75







   
  
   
    
Class1040.selectRows(int p1,int p2,int p3,int p4,ResultSet[] rs1,ResultSet[] rs2)#0{
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement ps1 = conn.prepareStatement("select * from account where acc_id in (?,?)");
    ps1.setInt(2, p2);
    rs1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 76







   
  
   
    
Class1140.testStringConcatExpression()#0{
        Properties props = new Properties(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(url, props);
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setBytes(1, x);
            statement.executeQuery();
}
    
   
  
   







 Instance 77







   
  
   
    
Class770.findMessagesByDate(java.sql.Date date,ResultSet[] results)#0{
    Connection conn = DriverManager.getConnection( "jdbc:default:connection" );
    PreparedStatement ps = conn.prepareStatement( "select * from msg where post_date=?" );
    ps.setDate( 1, date );
    results[0] = ps.executeQuery();
}
    
   
  
   







 Instance 78







   
  
   
    
Class140.readSomeFoos(int fromId,int toId,ResultSet[] rs){
        Connection conn = DriverManager.getConnection("jdbc:default:connection");
        PreparedStatement ps2 = conn.prepareStatement(SQL);
        ps2.setInt(2, toId);
        rs[0] = ps2.executeQuery();
}
    
   
  
   







 Instance 79







   
  
   
    
Class80.selectRows(int p1,ResultSet[] data)#0{
        Connection conn = DriverManager
                .getConnection("jdbc:default:connection");
        PreparedStatement ps = conn
                .prepareStatement("select * from t1 where i = ?");
        ps.setInt(1, p1);
        data[0] = ps.executeQuery();
}
    
   
  
   







 Instance 80







   
  
   
    
Class580.selectTwoSetsOfTwoAuthors(int p1,int p2,ResultSet[] rs1,ResultSet[] rs2)#0{
    Connection conn = DriverManager.getConnection("jdbc:default:connection");
    PreparedStatement ps1 = conn.prepareStatement("select * from author where id in (?,?)");
    ps1.setInt(2, p2);
    rs1[0] = ps1.executeQuery();
}
    
   
  
   







 Instance 81







   
  
   
    
Class900.testArrayConcatFunctionWithNulls1()#0{
        Connection conn = DriverManager.getConnection(getUrl());
        initTables(conn);
        PreparedStatement st = conn.prepareStatement("SELECT ARRAY_CAT(?,?) FROM regions WHERE region_name = 'SF Bay Area'");
        Array array1 = conn.createArrayOf("VARCHAR", new Object[]{"a", "b", "c", null});
        st.setArray(1, array1);
        Array array2 = conn.createArrayOf("VARCHAR", new Object[]{"a", "b", "c"});
        st.setArray(2, array2);
        rs = st.executeQuery();
        assertTrue(rs.next());
        Array expected = conn.createArrayOf("VARCHAR", new Object[]{"a", "b", "c", null, "a", "b", "c"});
}
    
   
  
   







 Instance 82







   
  
   
    
Class910.testArrayConcatFunctionWithNulls4()#0{
        Connection conn = DriverManager.getConnection(getUrl());
        initTables(conn);
        PreparedStatement st = conn.prepareStatement("SELECT ARRAY_CAT(?,?) FROM regions WHERE region_name = 'SF Bay Area'");
        Array array1 = conn.createArrayOf("VARCHAR", new Object[]{null, "a", null, "b", "c", null, null});
        st.setArray(1, array1);
        Array array2 = conn.createArrayOf("VARCHAR", new Object[]{null, null, "a", null, "b", null, "c", null});
        st.setArray(2, array2);
        rs = st.executeQuery();
        assertTrue(rs.next());
        Array expected = conn.createArrayOf("VARCHAR", new Object[]{null, "a", null, "b", "c", null, null, null, null, "a", null, "b", null, "c", null});
}
    
   
  
   





