
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class10.createConnection(Properties p)#0{
        Properties props = new java.util.Properties();
        props.put("password", pass);
        return DriverManager.getConnection(url, props);
}
    
   
  
   







 Instance 1







   
  
   
    
Class10.getConnection(String url,String user,String password)#0{
        Properties props = new Properties();
        props.put("password", pass);
        return DriverManager.getConnection(url, props);
}
    
   
  
   







 Instance 2







   
  
   
    
Class420.getConnection(){
    final Properties props = new Properties();
    props.put("password", HSQLUtil.PWD);
    return DriverManager.getConnection(HSQLUtil.URL, props);
}
    
   
  
   







 Instance 3







   
  
   
    
Class680.testExecuteStatementEmbedded(){
        final Properties props = new Properties();
        props.put("db", gdb);
        final Connection con = DriverManager.getConnection("jdbc:neo4j:instance:db", props);
        runner.executeMultiple(con);
}
    
   
  
   







 Instance 4







   
  
   
    
Class1050.testUtf8Encoding(){
    Properties props = new Properties();
    props.put("jdbcCompliantTruncation", "false");
    Connection utfConn = DriverManager.getConnection(dbUrl, props);
    testConversionForString("UTF8", utfConn, "\u043c\u0438\u0445\u0438");
}
    
   
  
   







 Instance 5







   
  
   
    
Class860.getConnection(String userName,String password,String server){
        Properties connectionProps = new Properties();
        connectionProps.put("LoginTimeout", "7");
        return DriverManager.getConnection("jdbc:mysql://" + server, connectionProps);
}
    
   
  
   







 Instance 6







   
  
   
    
Class1150.getSQLServer()#0{
        Properties props = new Properties();
        props.put("sendTimeAsDatetime", "false");
        return DriverManager.getConnection(url, props);
}
    
   
  
   







 Instance 7







   
  
   
    
Class30.testEncodingRegression(){
        Properties props = new Properties();
        props.put("useUnicode", "true");
        DriverManager.getConnection(dbUrl, props).close();
}
    
   
  
   







 Instance 8







   
  
   
    
Class980.openConnection()#0{
            Properties connectionProps = new Properties();
            connectionProps.put("password", "benjiql");
            return DriverManager.getConnection("jdbc:postgresql:benjiql", connectionProps);
}
    
   
  
   







 Instance 9







   
  
   
    
Class820.setUp()#0{
      Properties properties = new Properties( );
      properties.put( "autocommit" , "true" );
      con = DriverManager.getConnection( dbURL , properties );
      con.createStatement( ).execute( "create table TEST1 (TIMED BIGINT  , FIELD1 VARCHAR(20), FIELD2 INT, PK BIGINT NOT NULL IDENTITY   )" );
      con.createStatement( ).execute( "create table TEST2 (FIELD1 CHAR(20), TIMED BIGINT , FIELD2 INT,PK BIGINT NOT NULL IDENTITY  )" );
      con.createStatement( ).execute( "create table TEST3 (FIELD1 BINARY, FIELD2 INT,TIMED BIGINT ,PK BIGINT NOT NULL IDENTITY )" );
      con.createStatement( ).execute( "create table TEST4 (FIELD1 CHAR(20), FIELD2 INT,TIME2D BIGINT, PK BIGINT NOT NULL IDENTITY)" );
}
    
   
  
   







 Instance 10







   
  
   
    
Class940.testUtf8Encoding(){
        Properties props = new Properties();
        props.put("jdbcCompliantTruncation", "false");
        Connection utfConn = DriverManager.getConnection(dbUrl, props);
        testConversionForString("UTF8", utfConn, "\u043c\u0438\u0445\u0438");
}
    
   
  
   







 Instance 11







   
  
   
    
Class1170.getConnection()#0{
    connectionProps.put("user", CommonConfiguration.getProperty("datanucleus.ConnectionUserName","context0"));
    connectionProps.put("password", CommonConfiguration.getProperty("datanucleus.ConnectionPassword","context0"));
    conn = DriverManager.getConnection(
           CommonConfiguration.getProperty("datanucleus.ConnectionURL","context0"),
           connectionProps);
}
    
   
  
   







 Instance 12







   
  
   
    
Class250.getConnection(String url,String user,String password){
        Properties info = getJDBCConnectionProperties(user, password);
        info.put(READ_TIMEOUT_KEY, READ_TIMEOUT_VALUE);
        return DriverManager.getConnection(url, info);    
}
    
   
  
   





