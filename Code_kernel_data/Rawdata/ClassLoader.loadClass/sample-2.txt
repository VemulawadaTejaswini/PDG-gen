
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class80.createClass(String className)#0{
      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
      classService = classLoader.loadClass(className);
}
    
   
  
   







 Instance 1







   
  
   
    
Class310.getObject(){
        final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            return classLoader.loadClass(className);
            throw new NamingException("Erorr loading class: " + className);
}
    
   
  
   







 Instance 2







   
  
   
    
Class340.testBug29106()#1{
    ClassLoader cl = Thread.currentThread().getContextClassLoader();
    Class checkerClass = cl
        .loadClass("com.mysql.jdbc.integration.jboss.MysqlValidConnectionChecker");
    ((MysqlValidConnectionChecker) checkerClass.newInstance())
}
    
   
  
   







 Instance 3







   
  
   
    
Class330.main(String[] args)#0{
          ClassLoader loader = Thread.currentThread().getContextClassLoader();
          Class clazz = loader.loadClass("org.specs2.runner.ClassRunner");
          Object instance = clazz.newInstance();
          Method main = clazz.getMethod("main", String[].class);
          main.invoke(instance, new Object[] { args });
}
    
   
  
   







 Instance 4







   
  
   
    
Class390.NginxGroovyHandlerFactory()#0{
    ClassLoader parent = Thread.currentThread().getContextClassLoader();
      groovyLoader = (ClassLoader) parent.loadClass("groovy.lang.GroovyClassLoader").getConstructor(ClassLoader.class).newInstance(parent);
}
    
   
  
   







 Instance 5







   
  
   
    
Class160.isClojureLoaded(){
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            cl.loadClass("clojure.lang.RT");
}
    
   
  
   







 Instance 6







   
  
   
    
Class440.newCometSupport(final String targetClassFQN)#0{
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            return (AsyncSupport) cl.loadClass(targetClassFQN)
                    .getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(config);
}
    
   
  
   







 Instance 7







   
  
   
    
Class580.newJSONTransport()#1{
            ClassLoader loader = Thread.currentThread().getContextClassLoader();
            loader.loadClass("javax.servlet.ReadListener");
}
    
   
  
   







 Instance 8







   
  
   
    
Class180.newInstance(String clazz){
        ClassLoader cl = Thread.currentThread().getContextClassLoader ();
        Class type = cl.loadClass (clazz);
        return type.newInstance ();
}
    
   
  
   







 Instance 9







   
  
   
    
Class80.forName(final String className){
            final ClassLoader loader = Thread.currentThread().getContextClassLoader();
            return loader.loadClass(className);
            OpenEJBErrorHandler.classNotFound(systemLocation, className);
}
    
   
  
   







 Instance 10







   
  
   
    
Class180.getCommand(String className){
        final ClassLoader cl = Thread.currentThread().getContextClassLoader();
        return cl.loadClass(className).newInstance();
}
    
   
  
   







 Instance 11







   
  
   
    
Class710.execute()#0{
        final ClassLoader cl = Thread.currentThread().getContextClassLoader();
            final Class<?> type = cl.loadClass(className);
}
    
   
  
   







 Instance 12







   
  
   
    
Class670.isTomcat(){
      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         classLoader.loadClass("org.jboss.arquillian.container.tomcat.managed_7.TomcatManagedContainer");
}
    
   
  
   







 Instance 13







   
  
   
    
Class670.isJetty(){
      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
         classLoader.loadClass("org.jboss.arquillian.container.jetty.embedded_7.JettyEmbeddedContainer");
}
    
   
  
   







 Instance 14







   
  
   
    
Class320.createClass(String className){
      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
      classService = classLoader.loadClass(className);
}
    
   
  
   







 Instance 15







   
  
   
    
Class340.register(String name){
      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
      Class oClass = classLoader.loadClass(name);
      Debug.logVerbose("[JdonFramework]register: name=" + name + " class=" + oClass.getName(), module);
      register(name, oClass);
      registryDirectory.addComponentName(oClass, name);
      Debug.logWarning(" registe error: " + name + " should be a full class's name", module);
}
    
   
  
   







 Instance 16







   
  
   
    
Class340.getDAO(String jndiDAOName)#3{
      ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
      object = classLoader.loadClass(className).newInstance();
}
    
   
  
   







 Instance 17







   
  
   
    
Class270.createSnippet()#0{
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
            classLoader.loadClass("cucumber.runtime.java8.LambdaGlueBase");
}
    
   
  
   







 Instance 18







   
  
   
    
Class210.load(Class<T> baseClazz,String clazzName)#1{
            loader = Thread.currentThread().getContextClassLoader();
            return (Class<T>) loader.loadClass(clazzName);
}
    
   
  
   







 Instance 19







   
  
   
    
Class300.testClassLoadByTCCL(final String className)#0{
        final ClassLoader tccl = Thread.currentThread().getContextClassLoader();
        logger.info("Trying to load class " + className + " from TCCL " + tccl);
            tccl.loadClass(className);
}
    
   
  
   





