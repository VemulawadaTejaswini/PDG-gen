
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class520.loadCoyotePackage(ClassLoader loader){
        Class<?> clazz = loader.loadClass(basePackage + "Constants");
        clazz.newInstance();
}
    
   
  
   







 Instance 1







   
  
   
    
Class620.createWrappedInstance()#0{
      ClassLoader cl = Main.createShadowClassLoader();
        Class<?> mc = cl.loadClass("lombok.core.AnnotationProcessor");
        return (AbstractProcessor) mc.newInstance();
}
    
   
  
   







 Instance 2







   
  
   
    
Class730.UpgradeImageGallery()#0{
      _sourceHookClassName = FileSystemHook.class.getName();
    Class<?> clazz = classLoader.loadClass(_sourceHookClassName);
    _sourceHook = (Hook)clazz.newInstance();
}
    
   
  
   







 Instance 3







   
  
   
    
Class0.instantiateInternal(final Class<T> expectedType,final String defaultImpl){
        final String impl = System.getProperty(expectedType.getName(), defaultImpl);
        final ClassLoader cl = expectedType.getClassLoader();
        final Class<?> clazz = cl.loadClass(impl);
        final Object result = clazz.newInstance();
        return expectedType.cast(result);
}
    
   
  
   







 Instance 4







   
  
   
    
Class750.verify_typedefstring_idl(ClassLoader cl){
        Class<?> clazz = cl.loadClass("test.MyStruct");
        Object obj = clazz.newInstance();
        Field f2 = clazz.getDeclaredField ("id");
        assertTrue ("".equals(f1.get(obj)));
        assertTrue ("".equals(f2.get(obj)));
}
    
   
  
   







 Instance 5







   
  
   
    
Class480.testUnsafeWhenNotExists()#0{
    Class<?> testerClass = cl.loadClass(Tester.class.getName());
    testerClass.getDeclaredMethod("checkUnsafe").invoke(testerClass.newInstance());
}
    
   
  
   







 Instance 6







   
  
   
    
Class530.newInstance(final String className,final ClassLoader classLoader){
    Class<?> clazz = classLoader.loadClass(className);
    return newInstance(clazz.newInstance(), clazz);
}
    
   
  
   







 Instance 7







   
  
   
    
Class270.initUtils(){
    ClassLoader classLoader = getToolsClassLoader();
    Class<?> clazz = classLoader.loadClass(
      "com.liferay.portal.util.EntityResolver");
    EntityResolver entityResolver = (EntityResolver)clazz.newInstance();
    SAXReaderUtil.setEntityResolver(entityResolver);
}
    
   
  
   







 Instance 8







   
  
   
    
Class440.newInstance(final String className,final ClassLoader classLoader){
        Class<?> clazz = classLoader.loadClass(className);
        return newInstance(clazz.newInstance(), clazz);
}
    
   
  
   







 Instance 9







   
  
   
    
Class420.loadTomcatPackage(ClassLoader loader)#1{
        Class<?> clazz = loader.loadClass(
                basePackage + "util.http.FastHttpDateFormat");
        clazz.newInstance();
}
    
   
  
   







 Instance 10







   
  
   
    
Class680.setJspFactory()#1{
            final ClassLoader classLoader = ParentClassLoaderFinder.Helper.get();
            final Class<?> jspFactoryApi = classLoader.loadClass("javax.servlet.jsp.JspFactory");
            jspFactoryApi.getMethod("setDefaultFactory", jspFactoryApi).invoke(null, jspFactory.newInstance());
}
    
   
  
   







 Instance 11







   
  
   
    
Class220.newInstance(String className,ClassLoader classLoader)#2{
            Class<?> clazz = classLoader.loadClass(className);
            return (T) clazz.newInstance();
}
    
   
  
   







 Instance 12







   
  
   
    
Class240.testLoadEntityClass()#1{
        String className = TestEntity.class.getName();
        Class<?> entityClass = tempClassLoader.loadClass(className);
        Object entity = entityClass.newInstance();
        assertFalse(entityClass.equals(TestEntity.class));
}
    
   
  
   







 Instance 13







   
  
   
    
Class230.configureDeserializationProblemHandlers(final ObjectMapper objectMapper,final String deserializationProblemHandlers,final ClassLoader classLoader){
        final StringTokenizer st = new StringTokenizer(deserializationProblemHandlers, ", ");
        while (st.hasMoreTokens()) {
            final Class<?> c = classLoader.loadClass(st.nextToken());
            objectMapper.addHandler((DeserializationProblemHandler) c.newInstance());
        }
}
    
   
  
   







 Instance 14







   
  
   
    
Class580.loadWithCustomClassLoader(String className){
      URL thisClass = this.getClass().getResource(this.getClass().getSimpleName() + ".class");
      ClassLoader customClassLoader = new URLClassLoader(new URL[] {thisClass});
      Class<?> customInstanceFromDifferentClassLoader = customClassLoader.loadClass(className);
      return customInstanceFromDifferentClassLoader.newInstance();
}
    
   
  
   







 Instance 15







   
  
   
    
Class210.newInstance(String fqcn,ClassLoader classLoader){
        Class<?> clazz = classLoader.loadClass(fqcn);
        return prepareInstance(clazz.newInstance());
}
    
   
  
   





