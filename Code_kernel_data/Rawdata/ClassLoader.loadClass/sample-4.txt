
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class410.findClass(String name)#1{
        for (ClassLoader loader : loaders) {
            try {
                return loader.loadClass(name);
            } catch (ClassNotFoundException e) {
                // try next
            }
        }
}
    
   
  
   







 Instance 1







   
  
   
    
Class700.findClasses(ClassLoader classLoader,Set<Class<?>> classes,Iterable<String> entries)#1{
    for (String entry : entries) {
      Class<?> klass;
      try {
        klass = classLoader.loadClass(entry);
      } catch (ClassNotFoundException e) {
        continue;
      }
      classes.add(klass);
    }
}
    
   
  
   







 Instance 2







   
  
   
    
Class260.findClass(String name)#0{
      for ( ClassLoader classLoader : individualClassLoaders ) {
        try {
          return classLoader.loadClass( name );
        }
        catch (Exception ignore) {
        }
        catch (LinkageError ignore) {
        }
      }
}
    
   
  
   







 Instance 3







   
  
   
    
Class720.findClass(String name){
      for(ClassLoader lib : classpath) {
    try {
        return(lib.loadClass(name));
    } catch(ClassNotFoundException e) {}
      }
      throw(new ClassNotFoundException("Could not find " + name + " in any of " + Arrays.asList(classpath).toString()));
}
    
   
  
   







 Instance 4







   
  
   
    
Class660.load(final ClassLoader loader,final Collection<String> classes){
            final Collection<Class<?>> loaded = new ArrayList<>(classes.size());
            for (final String n : classes) {
                try {
                    loaded.add(loader.loadClass(n));
                } catch (final ClassNotFoundException e) {
                    // no-op
                }
            }
}
    
   
  
   







 Instance 5







   
  
   
    
Class480.loadClasses(ClassLoader classLoader,Set<String> classNames)#0{
    for(String className : classNames) {
      classes.add(classLoader.loadClass(className));
    }
}
    
   
  
   







 Instance 6







   
  
   
    
Class530.findClass(String name)#0{
    for ( ClassLoader classLoader : individualClassLoaders ) {
      try {
        return classLoader.loadClass( name );
      }
      catch (Exception ignore) {
      }
    }
}
    
   
  
   







 Instance 7







   
  
   
    
Class330.findMarkers(final ClassLoader contextClassLoader)#0{
        for (final String s : asList("org.junit.Test", "org.testng.annotations.Test")) {
            try {
                testMarkers.add((Class<? extends Annotation>) contextClassLoader.loadClass(s));
            } catch (final Throwable e) {
                // no-op: deployment = false
            }
        }
}
    
   
  
   







 Instance 8







   
  
   
    
Class100.loadClass(String name,boolean resolve)#1{
      for (ClassLoader cl : parents) {
         try {
           return cl.loadClass(name);
         } catch (ClassNotFoundException e) {
           // Ignore
         }
        }
}
    
   
  
   







 Instance 9







   
  
   
    
Class380.loadCompiledClasses(String... loadList)#0{
        for (int i = 0; i < loadedClasses.length; i++)
            loadedClasses[i] = cl.loadClass(loadList[i]);
}
    
   
  
   







 Instance 10







   
  
   
    
Class590.loadClasses(ClassLoader classLoader,String[] names){
    for (int i = 0; i < names.length; i++) {
      classes[i] = classLoader.loadClass(names[i]);
    }
}
    
   
  
   







 Instance 11







   
  
   
    
Class610.loadClass(String name){
        for (ClassLoader cl : delegates) {
            try {
                return cl.loadClass(name);
            } catch (ClassNotFoundException e) {
                lastEx = e;
            }
        }
}
    
   
  
   







 Instance 12







   
  
   
    
Class230.findClass(String name){
        for (ClassLoader delegate : delegates) {
            try {
                return delegate.loadClass(name);
            } catch (ClassNotFoundException e) {
                LOGGER.debug(e, "Cannot load class using delegate: " + delegate.getClass().toString());
            }
        }
}
    
   
  
   







 Instance 13







   
  
   
    
Class560.loadClass(String name,boolean resolve)#0{
        for (ClassLoader parent : parents) {
            try {
                return parent.loadClass(name);
            } catch (ClassNotFoundException e) {
                // Expected
            }
        }
}
    
   
  
   







 Instance 14







   
  
   
    
Class540.addExtensions(final ClassLoader loader,final Collection<String> classes)#0{
        for (final String clazz : classes) {
            try {
                final Object object = loader.loadClass(clazz).newInstance();
                SystemInstance.get().addObserver(object);
            } catch (final Throwable t) {
                LOGGER.error("Extension construction failed" + clazz, t);
            }
        }
}
    
   
  
   





