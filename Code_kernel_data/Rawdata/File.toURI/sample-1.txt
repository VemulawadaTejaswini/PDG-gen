
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class590.testDuplicate()#1{
        assertTrue(CatalogUtilities.getRedirect(URI.create(PIZZA_NS), catalog) == null);
        URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog);
        assertTrue(duplicateRedirect.equals(new File(TEST_DIR, PIZZA_FILE).toURI()) || duplicateRedirect.equals(new File(TEST_DIR, AMINO_ACID_FILE).toURI()));
}
    
   
  
   







 Instance 1







   
  
   
    
Class90.addRuntimeConfigPath(File runtimeFile,ServerContainer runtime)#0{
    if (this.configURItoRuntimeName.get(runtimeFile.toURI()) == null) {
      this.configURItoRuntimeName.put(runtimeFile.toURI(), new LinkedList<ServerContainer>());
    }
    this.configURItoRuntimeName.get(runtimeFile.toURI()).add(runtime);    
}
    
   
  
   







 Instance 2







   
  
   
    
Class370.addHandlerConfigPath(File taskHandlerFile,T handler)#1{
    if (this.configURItoHandlerName.get(taskHandlerFile.toURI()) == null) {
      this.configURItoHandlerName.put(taskHandlerFile.toURI(), new LinkedList<T>());
    }
    this.configURItoHandlerName.get(taskHandlerFile.toURI()).add(handler);
}
    
   
  
   







 Instance 3







   
  
   
    
Class500.getJSRelativePaths(HashSet<String> fullPaths)#1{
    for (String path : fullPaths) {
      relPath = new File(SessionManager.getInstance().getSourceFolder()).toURI().relativize(new File(path).toURI()).getPath();
      relativePaths.add(relPath);
    }
}
    
   
  
   







 Instance 4







   
  
   
    
Class640.loadFromRootUsingSubpathInFilename(){
    final String contents = PathTest.class.getName() + ": loaded from root";
    final File file = createTempFile(contents);
    final File root = findRoot(file);
    final Path path = new Path(root.getCanonicalPath());
    String relative = root.toURI().relativize(file.toURI()).getPath();
    IResourceStream rs = path.find(PathTest.class, relative);
    assertNotNull(rs);
    assertContents(contents, rs);
}
    
   
  
   







 Instance 5







   
  
   
    
Class690.generateJar(final File directory,final IOFileFilter fileFilter)#0{
        for (final File file : files) {
            final String relativeName = directory.toURI().relativize(file.toURI()).getPath();
            final byte[] content = FileUtils.readFileToByteArray(file);
            resources.put(relativeName, content);
        }
}
    
   
  
   







 Instance 6







   
  
   
    
Class180.testJarEntry()#0{
    jar.as(ZipExporter.class).exportTo(baos);
    URL url = new URL("jar:" + tmp.toURI().toURL() + "!/");
    assertFS(url);
}
    
   
  
   







 Instance 7







   
  
   
    
Class660.createLocalPath(File file){
    return new Path(file.toURI());
}
    
   
  
   







 Instance 8







   
  
   
    
Class540.createFileSplit(File file)#0{
            Path lineitemPath = new Path(file.toURI());
}
    
   
  
   







 Instance 9







   
  
   
    
Class120.apply(final File it)#1{
          URI _uRI = it.toURI();
          return _uRI.toURL();
}
    
   
  
   







 Instance 10







   
  
   
    
Class40.getFileAsUrl(File outputFile)#0{
      URI uri = outputFile.toURI();
      return uri.toURL();
}
    
   
  
   







 Instance 11







   
  
   
    
Class170.toURI(File file)#1{
        URI uri = file.toURI();
            return uri.toURL();
}
    
   
  
   







 Instance 12







   
  
   
    
Class420.create(TreeLogger logger,File webXml){
      return create(logger, webXml.toURI().toURL());
      logger.log(TreeLogger.WARN, "Unable to process '"
          + webXml.getAbsolutePath() + "' for servlet validation", e);
}
    
   
  
   







 Instance 13







   
  
   
    
Class70.createInputSplit(String content)#0{
    return new FileInputSplit(0, new Path(tempFile.toURI().toString()), 0, tempFile.length(), new String[] {"localhost"});
}
    
   
  
   







 Instance 14







   
  
   
    
Class470.getURL(File jarFile){
        return new URL("jar:" + jarFile.toURI() + "!/" + TRANSLATIONFILE);
}
    
   
  
   







 Instance 15







   
  
   
    
Class130.loadAndRegister(File driverJarFile,String driverClassName){
        loadAndRegister(new URL("jar:" + driverJarFile.toURI() + "!/"),
                        driverClassName);
}
    
   
  
   







 Instance 16







   
  
   
    
Class340.config()#1{
        return new DefaultCompositeOption(
                SlingPaxOptions.defaultLaunchpadOptions(launchpadVersion),
                CoreOptions.provision(CoreOptions.bundle(thisProjectsBundle.toURI().toString()))
                ).getOptions();
}
    
   
  
   







 Instance 17







   
  
   
    
Class40.paxConfig()#0{
        return new DefaultCompositeOption(
                SlingPaxOptions.defaultLaunchpadOptions(launchpadVersion),
                CoreOptions.provision(CoreOptions.bundle(thisProjectsBundle.toURI().toString()))
                
        ).getOptions();
}
    
   
  
   







 Instance 18







   
  
   
    
Class710.before()#1{
    File edgesFile = tempFolder.newFile();
    Files.write(GatherSumApplyITCase.EDGES, edgesFile, Charsets.UTF_8);
    edgesPath = edgesFile.toURI().toString();
}
    
   
  
   







 Instance 19







   
  
   
    
Class790.before()#1{
        File edgesFile = tempFolder.newFile();
        Files.write(SingleSourceShortestPathsData.EDGES, edgesFile, Charsets.UTF_8);
        edgesPath = edgesFile.toURI().toString();
}
    
   
  
   







 Instance 20







   
  
   
    
Class430.multiple_implementations_only_one_enabled()#1{
        assertEquals("Bar", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));
}
    
   
  
   







 Instance 21







   
  
   
    
Class650.multiple_implementations_only_one_useful()#1{
        assertEquals("X", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));
}
    
   
  
   







 Instance 22







   
  
   
    
Class430.multiple_implementations_only_one_enabled()#0{
        IOUtil.writeText("Foo", f1); IOUtil.writeText("Bar", f2);
        assertEquals("Bar", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));
}
    
   
  
   







 Instance 23







   
  
   
    
Class680.ReVerbOpenNlpConfFunction(File modelFile){
        this(modelFile.toURI().toURL());
}
    
   
  
   







 Instance 24







   
  
   
    
Class680.ReVerbIndependentConfFunction(File modelFile){
      this(modelFile.toURI().toURL());
}
    
   
  
   







 Instance 25







   
  
   
    
Class650.multiple_implementations_only_one_useful()#3{
        IOUtil.writeText("   ", f1); IOUtil.writeText("X", f2);
        assertEquals("X", finder.findPluginClass((Iterable) asList(f1.toURI().toURL(), f2.toURI().toURL())));
}
    
   
  
   







 Instance 26







   
  
   
    
Class220.addPathToClassLoader(File path,URLClassLoader classLoader)#0{
      URL u = path.toURI().toURL();
      addUrlMethod.invoke(classLoader, u);
}
    
   
  
   







 Instance 27







   
  
   
    
Class770.asClickableFileUrl(File path)#0{
      return new URI("file", "", path.toURI().getPath(), null, null).toString();
}
    
   
  
   







 Instance 28







   
  
   
    
Class60.should_throw_exception_if_url_not_found()#0{
    URLs.linesOf(missingFile.toURI().toURL(), Charset.defaultCharset());
}
    
   
  
   







 Instance 29







   
  
   
    
Class60.should_throw_exception_if_url_not_found()#1{
    URLs.contentOf(missingFile.toURI().toURL(), Charset.defaultCharset());
}
    
   
  
   







 Instance 30







   
  
   
    
Class510.FopConfParser(File fopConfFile,URI defaultBaseURI)#0{
        this(new FileInputStream(fopConfFile), fopConfFile.toURI(),
                EnvironmentalProfileFactory.createDefault(defaultBaseURI,
                        ResourceResolverFactory.createDefaultResourceResolver()));
}
    
   
  
   







 Instance 31







   
  
   
    
Class450.appendFilesTo(File directory,Writer writer,URI base)#0{
        writer.write(base.relativize(file.toURI()).getPath());
        writer.write("\n");
}
    
   
  
   







 Instance 32







   
  
   
    
Class110.testFile()#1{
    File dir = jar.as(ExplodedExporter.class).exportExploded(f);
    assertFS(dir.toURI().toURL());
}
    
   
  
   







 Instance 33







   
  
   
    
Class180.getWebXmlAsDocument(File webXml)#0{
        return builder.build( webXml.toURI().toURL() );
}
    
   
  
   







 Instance 34







   
  
   
    
Class310.StreamSource(File f){
        setSystemId(f.toURI().toASCIIString());
}
    
   
  
   







 Instance 35







   
  
   
    
Class470.toRelativeFilePath(File file,File ancestor)#0{
    URI ancestorUri = ancestor.toURI();
    URI relativeUri = ancestorUri.relativize(fileUri);
    return relativeUri.getPath();
}
    
   
  
   







 Instance 36







   
  
   
    
Class560.findAndLoadHostSpecificProperties()#1{
                CssResourceLocator.locateSiteSpecificResource(HOST_PROPERTIES_FILE_NAME);
            final URL resource = configFile.toURI().toURL();
            openStreamAndLoadProps(resource);
}
    
   
  
   







 Instance 37







   
  
   
    
Class430.relativize(File from,File to)#0{
    URI toURI = to.toURI();
    String relative = getRelativePath(fromURI.toString(), toURI.toString(), URIUtils.URI_FILE_SEPARATOR);
    relative = convertUriToPlatformSeparator(relative);
}
    
   
  
   







 Instance 38







   
  
   
    
Class330.saveTempFile(byte[] bytes,String extension)#0{
            return tempFile.toURI().toURL();
}
    
   
  
   







 Instance 39







   
  
   
    
Class130.getURL(String location)#0{
      return (new File(location)).toURI().toURL();
}
    
   
  
   







 Instance 40







   
  
   
    
Class570.getURL(String location)#0{
            return (new File(location)).toURI().toURL();
}
    
   
  
   







 Instance 41







   
  
   
    
Class260.FopConfParser(File fopConfFile,ResourceResolver resourceResolver){
        this(new FileInputStream(fopConfFile), fopConfFile.toURI(), resourceResolver);
}
    
   
  
   







 Instance 42







   
  
   
    
Class210.loadPropertiesOrFail(File configFile){
            URL configPropURL = configFile.toURI().toURL();
            return loadPropertiesFile(configPropURL, true);
            throw new RuntimeException("Error loading properties from " + configFile, e);
}
    
   
  
   







 Instance 43







   
  
   
    
Class730.testGetDocumentURL()#0{
        File tempFile = createTempWsdlFile();
        Document doc = new Stax2DOM().getDocument(tempFile.toURI().toURL());
}
    
   
  
   







 Instance 44







   
  
   
    
Class370.pathToUrl(File path)#1{
      return path.toURI().toURL();
}
    
   
  
   







 Instance 45







   
  
   
    
Class410.setUp()#1{
    m_inputSrc = new BinaryDatasetSource(inputFile.toURI());
}
    
   
  
   







 Instance 46







   
  
   
    
Class410.setUp()#2{
    m_outputSrc = new BinaryDatasetSource(outputFile.toURI());
}
    
   
  
   







 Instance 47







   
  
   
    
Class540.setSystemId(File f){
        this.systemId = f.toURI().toASCIIString();
}
    
   
  
   







 Instance 48







   
  
   
    
Class780.testFeatureStoreHints()#0{
        File shpFile = copyShapefiles(STATE_POP);
        URL url = shpFile.toURI().toURL();
        ShapefileDataStore ds = new ShapefileDataStore(url);
        ShapefileFeatureStore store = (ShapefileFeatureStore) ds.getFeatureSource("statepop");
}
    
   
  
   







 Instance 49







   
  
   
    
Class310.getListCellRendererComponent(JList list,Object value,int index,boolean isSelected,boolean cellHasFocus){
            File f = (File) value;
            Project p = FileOwnerQuery.getOwner(f.toURI());
            String message = f.getAbsolutePath();            
}
    
   
  
   







 Instance 50







   
  
   
    
Class30.getLocalMetadataRepository(MavenContext context,LocalRepositoryP2Indices localRepoIndices)#1{
            File localMavenRepoRoot = context.getLocalRepositoryRoot();
            RepositoryReader contentLocator = new LocalRepositoryReader(localMavenRepoRoot);
            localMetadataRepository = new LocalMetadataRepository(localMavenRepoRoot.toURI(),
                    localRepoIndices.getMetadataIndex(), contentLocator);
}
    
   
  
   







 Instance 51







   
  
   
    
Class370.createRepository(File location)#1{
        TychoRepositoryIndex metadataIndex = createMetadataIndex(location);
        return new LocalMetadataRepository(location.toURI(), metadataIndex);
}
    
   
  
   







 Instance 52







   
  
   
    
Class240.testAttributesWriting(){
        SimpleFeatureCollection features = createFeatureCollection();
        File tmpFile = getTempFile();
        tmpFile.createNewFile();
        ShapefileDataStore s = new ShapefileDataStore(tmpFile.toURI().toURL());
        writeFeatures(s, features);
        s.dispose();
}
    
   
  
   







 Instance 53







   
  
   
    
Class630.getUri(final File baseDir)#0{
            return URI.create( baseDir.toURI().toString() + this.location );
}
    
   
  
   







 Instance 54







   
  
   
    
Class320.getLocalFileURL(File localFile)#0{
      return localFile.toURI().toURL().toExternalForm();
}
    
   
  
   







 Instance 55







   
  
   
    
Class610.createCatalog(ResourceUtils ru,File tmpJar)#0{
        String catalog = catalogTemplate.replace("${osgi-entities-path}", tmpJar.toURI().toString());
}
    
   
  
   







 Instance 56







   
  
   
    
Class220.createLocalRepository(File localRepository){
        return createRepository( "file://" + localRepository.toURI().getRawPath(),
                                 RepositorySystem.DEFAULT_LOCAL_REPO_ID, true,
                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true,
                                 ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS,
                                 ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE );
}
    
   
  
   







 Instance 57







   
  
   
    
Class770.getSystemId()#2{
      return ((File)location.getSourceRef()).toURI().toASCIIString();
}
    
   
  
   







 Instance 58







   
  
   
    
Class770.providerUsingAnnotatedStereotype()#1{
        File out = getTemporaryFile("providerUsingAnnotatedStereotype");
        StreamUtils.copyStream(is, new FileOutputStream(out), true);
        return out.toURI().toURL().toExternalForm();
}
    
   
  
   







 Instance 59







   
  
   
    
Class770.loadMetadata(File file)#0{
        parser.setXmlInputPath(file.toPath());
        parser.setXmlInputRootPath(file.getParentFile().toPath());
        TechnologyMetadata metadata = parser.processDocument(file.toURI());
        metadataList.add(metadata);
}
    
   
  
   







 Instance 60







   
  
   
    
Class480.handle(File file,int depth,ProgressEntry parent)#1{
                        progressMonitor.startJob(file.toURI());
}
    
   
  
   







 Instance 61







   
  
   
    
Class480.testRetrieveAlreadyExists()#0{
        assertEquals(expectedFile.toURI().toURL(), url);
}
    
   
  
   







 Instance 62







   
  
   
    
Class440.addJar(String path)#1{
            URL resource = (new File(path)).toURI().toURL();
            addJar(resource, path);
}
    
   
  
   







 Instance 63







   
  
   
    
Class440.getRelativePath(final File file,final File folder)#0{
        return folder.toURI ().relativize ( file.toURI () ).getPath ();
}
    
   
  
   







 Instance 64







   
  
   
    
Class440.getRelativePath(final File file,final File folder)#1{
        return folder.toURI ().relativize ( file.toURI () ).getPath ();
}
    
   
  
   







 Instance 65







   
  
   
    
Class810.manifestClasspath(final File[] sourceDirectory,final File outputDirectory,final List<String> compileClasspathElements)#1{
    String cp = getPath(sourceDirectory);
    cp = cp + outputDirectory.toURI() + " ";
}
    
   
  
   







 Instance 66







   
  
   
    
Class810.setAbsoluteDestinationDirectory(File absoluteDestDir){
        destinationTarget = absoluteDestDir.toURI();
}
    
   
  
   







 Instance 67







   
  
   
    
Class810.setAbsoluteDestinationDirectory(File absoluteDestDir){
        destinationTarget = absoluteDestDir.toURI();
}
    
   
  
   







 Instance 68







   
  
   
    
Class0.toDifferenceSinkFactory(File path)#0{
        return getTestTools().getDifferenceSinkFactory(path.toURI());
}
    
   
  
   







 Instance 69







   
  
   
    
Class0.LocalLogResource(File file){
        super(file.toURI());
}
    
   
  
   







 Instance 70







   
  
   
    
Class200.testInternal(File bundle){
        URL bundleURL = bundle.toURI().toURL();
        Resource resource = Resource.create(bundleURL);
}
    
   
  
   







 Instance 71







   
  
   
    
Class200.relativize(File base,File file)#1{
        return new File( base.toURI().relativize( file.toURI() ).getPath() );
}
    
   
  
   







 Instance 72







   
  
   
    
Class700.extractDocument(final File file){
        return this.extractDocument(file.toURI());
}
    
   
  
   







 Instance 73







   
  
   
    
Class160.fileToPath(File file){
    return file.toURI().getPath();
}
    
   
  
   







 Instance 74







   
  
   
    
Class160.extractAll(final File file){
        return this.extractAll(file.toURI());
}
    
   
  
   







 Instance 75







   
  
   
    
Class450.addClassPathElement(File container)#1{
            classLoader.addResourceStore(new FileResourceStore(container));
            gScripting.getGroovyClassLoader().addURL(container.toURI().toURL());
}
    
   
  
   







 Instance 76







   
  
   
    
Class350.startSqoopWithSentryEnable()#2{
    sqoopServerRunner = new TomcatSqoopRunner(sqoopDir.toString(), SQOOP_SERVER_NAME,
        sentrySitePath.toURI().toURL().toString());
    sqoopServerRunner.start();
}
    
   
  
   







 Instance 77







   
  
   
    
Class350.setupClasspath()#2{
            final SystemClassPath systemCP = new SystemClassPath();
            systemCP.addJarsToPath(lib);
            systemCP.addJarToPath(lib.toURI().toURL()); // add dir too like Tomcat/TomEE
}
    
   
  
   







 Instance 78







   
  
   
    
Class70.loadXMLFile(File resource)#0{
      return loadXMLFile( resource.toURI().toURL() );
}
    
   
  
   







 Instance 79







   
  
   
    
Class500.getURLForData(String data)#1{
    result.deleteOnExit();
    return Uri.parse(result.toURI().toString());
}
    
   
  
   







 Instance 80







   
  
   
    
Class500.addAppletContents(byte[] appletJarContents)#1{
            addURL(downloadedAppletJar.toURI().toURL());
}
    
   
  
   







 Instance 81







   
  
   
    
Class500.createTempRepo(String repoContent,Object... variables)#0{
        return tmp.toURI();
}
    
   
  
   







 Instance 82







   
  
   
    
Class250.getRelativePath(File base,File childname)#0{
        childPath = childname.toURI().toString();
}
    
   
  
   







 Instance 83







   
  
   
    
Class250.configurePermutationsFile(final TestManifestServlet servlet,final String path,final File permutations)#1{
    when( servlet.getServletContext().getResource( path ) ).thenReturn( permutations.toURI().toURL() );
}
    
   
  
   







 Instance 84







   
  
   
    
Class250.getUrlsFromFiles(final File[] files)#0{
            result[i] = pluginFile.toURI().toURL();
}
    
   
  
   







 Instance 85







   
  
   
    
Class120.createXOManagerFactory(Collection<Class<?>> types)#0{
        XOUnit xoUnit = XOUnitBuilder.create(database.toURI(), Neo4jXOProvider.class, types.toArray(new Class<?>[0]))
                .property(PROPERTY_NEO4J_CACHE_TYPE, VALUE_NEO4J_CACHE_TYPE_NONE).property(PROPERTY_NEO4J_ALLOW_STORE_UPGRADE, Boolean.TRUE.toString())
                .property(PROPERTY_NEO4J_KEEP_LOGICAL_LOGS, Boolean.FALSE.toString()).property(PROPERTY_NEO4J_LOCK_MANAGER, NoOpLockFactory.KEY)
                .property(PROPERTY_NEO4J_DBMS_PAGE_CACHE_MEMORY, "100M").create();
        return XO.createXOManagerFactory(xoUnit);
}
    
   
  
   







 Instance 86







   
  
   
    
Class120.createJarUri(File jarFile,String entryName)#1{
        URI jarURI = jarFile.toURI().normalize();
            throw new CannotCreateUriError(jarURI + separator + entryName, e);
}
    
   
  
   







 Instance 87







   
  
   
    
Class120.guessedCssLocationExample2()#2{
    URI uri = (new File("src/sampleInput.less")).toURI();
    StringSource lessSource = new StringSource(".class { margin: 1 1 1 1; }", "sampleInput.less", uri);
}
    
   
  
   







 Instance 88







   
  
   
    
Class100.getWorkspaceFiles(File javaFile)#0{
        return root.findFilesForLocationURI(javaFile.toURI());
}
    
   
  
   







 Instance 89







   
  
   
    
Class710.relativize(File child)#3{
        URI uri = child.toURI();
}
    
   
  
   







 Instance 90







   
  
   
    
Class110.getFilePath()#1{
            final File dir = createTempDirectory();
            return ioService().get( dir.toURI() ).resolve( "myTempFile.txt" );
}
    
   
  
   







 Instance 91







   
  
   
    
Class110.parse(File file)#1{
      return parse(new Input(Files.toString(file, charset).toCharArray(), file.toURI()));
}
    
   
  
   







 Instance 92







   
  
   
    
Class110.getRelative(File base,File path)#0{
        return base.toURI().relativize(path.toURI()).getPath();
}
    
   
  
   







 Instance 93







   
  
   
    
Class110.getRelative(File base,File path)#1{
        return base.toURI().relativize(path.toURI()).getPath();
}
    
   
  
   







 Instance 94







   
  
   
    
Class110.audioPlay(File audioFile)#0{
      AudioClip clip = Applet.newAudioClip(audioFile.toURI().toURL());
      clip.play();
}
    
   
  
   







 Instance 95







   
  
   
    
Class290.setupImageUri(File imageFile)#1{
      return imageFile.toURI().toURL().toString();
}
    
   
  
   







 Instance 96







   
  
   
    
Class290.createRepo(File index,String name)#2{
        props.put(FixedIndexedRepo.PROP_LOCATIONS, index.toURI().toString());
}
    
   
  
   







 Instance 97







   
  
   
    
Class740.copyTemplate(File template,String target){
        return copyTemplate(template.toURI().toASCIIString(), target);
}
    
   
  
   







 Instance 98







   
  
   
    
Class310.toUrl(File store)#0{
            return store.toURI().toURL().toString();
}
    
   
  
   







 Instance 99







   
  
   
    
Class310.createFromSLD(File sld)#0{
            SLDParser stylereader = new SLDParser(styleFactory, sld.toURI().toURL());
            return stylereader.readXML();
}
    
   
  
   







 Instance 100







   
  
   
    
Class310.initSchemaLdifPartition(InstanceLayout instanceLayout,DnFactory dnFactory)#2{
        schemaLdifPartition.setPartitionPath( schemaPartitionDirectory.toURI() );
}
    
   
  
   







 Instance 101







   
  
   
    
Class360.OutputFileObject(JavacFileManager.Context context,File file,Kind kind,@Nullable String className,JavaFileObject source){
    super(file.toURI(), kind);
}
    
   
  
   







 Instance 102







   
  
   
    
Class400.initializeCatalog(File folder,XMLCatalog catalog){
        URI relativeFolderUri = CatalogUtilities.relativize(folder.toURI(), catalog);
        ge = FolderGroupManager.createGroupEntry(relativeFolderUri, true, autoUpdate, catalog);
        catalog.addEntry(ge);
        update(ge);
}
    
   
  
   







 Instance 103







   
  
   
    
Class30.deserialize(File tmpDir)#0{
        IMetadataRepository repository = manager.loadRepository(tmpDir.toURI(), null);
        IQueryResult<IInstallableUnit> queryResult = repository.query(QueryUtil.ALL_UNITS, null);
        Set<IInstallableUnit> result = queryResult.toSet();
}
    
   
  
   







 Instance 104







   
  
   
    
Class470.toRelativeFilePath(File file,File ancestor)#1{
    checkRelated(file, ancestor);
    URI fileUri = file.toURI();
}
    
   
  
   







 Instance 105







   
  
   
    
Class560.getUrlForFile(File file)#0{
      IFile[] files = ResourcesPlugin.getWorkspace().getRoot().findFilesForLocationURI(file.toURI());
}
    
   
  
   







 Instance 106







   
  
   
    
Class640.loadSession(File sessionFile,boolean zip,ProgressMonitor progressMonitor)#0{
            loadSession(josIS, sessionFile.toURI(), zip, progressMonitor);
}
    
   
  
   







 Instance 107







   
  
   
    
Class720.setConfiguration(final File newConfigFile){
        setConfiguration(newConfigFile.toURI(), Files.toByteArray(newConfigFile));
}
    
   
  
   







 Instance 108







   
  
   
    
Class720.ModuleMetadataRepository(IProvisioningAgent agent,File location)#2{
        super(agent, generateName(location), REPOSITORY_TYPE, location);
        setLocation(location.toURI());
        this.storage = getStorageFile(location);
}
    
   
  
   







 Instance 109







   
  
   
    
Class720.ModuleArtifactRepository(IProvisioningAgent agent,File location,ModuleArtifactMap artifactsMap)#1{
        super(agent, location.toURI(), ArtifactTransferPolicies.forLocalArtifacts());
}
    
   
  
   







 Instance 110







   
  
   
    
Class720.testHiddenFilesInJar()#2{
        parser.parse(emptySet, badClassesJar.toURI(),null);
}
    
   
  
   







 Instance 111







   
  
   
    
Class430.DirectoryResourceHandle(String name,File file,File codeSource,Manifest manifest)#1{
        this.codeSource = codeSource.toURI().toURL();
}
    
   
  
   







 Instance 112







   
  
   
    
Class430.relativize(File from,File to)#1{
    URI fromURI = from.toURI();
}
    
   
  
   







 Instance 113







   
  
   
    
Class760.testCopyStream()#1{
    IOUtils.copyURLToFile(subFile1.toURI().toURL(), subFile2);
}
    
   
  
   







 Instance 114







   
  
   
    
Class760.defaultToConfWhenNoConfigFound()#4{
        assertThat(ctx.getConfigLocation(), equalTo(expected.toURI()));
}
    
   
  
   







 Instance 115







   
  
   
    
Class760.createPackage(File jarFile,List<IRobotSpecItem> selectedRobots,RobotProperties robotProps){
    checkDbExists();
    List<RobotItem> robotItems = getAllRobotItems(selectedRobots);
    TeamItem teamItem = getTeamItem(selectedRobots);
    String res = JarCreator.createPackage(jarFile, robotItems, teamItem, robotProps);
    refresh(jarFile.toURI().toString());
}
    
   
  
   







 Instance 116







   
  
   
    
Class620.testEmptyZeroSizeBeansXml()#2{
        BeanArchiveInformation beanArchiveInformation = bas.getBeanArchiveInformation(emptyBeansXml.toURI().toURL());
        Assert.assertNotNull(beanArchiveInformation);
        Assert.assertEquals(BeanDiscoveryMode.ALL, beanArchiveInformation.getBeanDiscoveryMode());
}
    
   
  
   







 Instance 117







   
  
   
    
Class190.getSource()#1{
      return (new File(fileName)).toURI().toURL();
}
    
   
  
   







 Instance 118







   
  
   
    
Class190.apply(File newFile)#0{
                                setDefinition(newFile.toURI().toURL().toString());
}
    
   
  
   







 Instance 119







   
  
   
    
Class340.getBaseTestFolder(final FileSystemManager manager){
        final File baseDir = AbstractVfsTestCase.getTestDirectory();
        return manager.resolveFile(baseDir.toURI().toURL().toExternalForm());
}
    
   
  
   







 Instance 120







   
  
   
    
Class660.viewInBrowser(File f){
    viewInBrowser(f.toURI());
}
    
   
  
   







 Instance 121







   
  
   
    
Class330.convertFileToURL(File file){
        return convertURIToURL(file.toURI());
}
    
   
  
   







 Instance 122







   
  
   
    
Class140.select(File it){
          return it.toURI().toURL();
}
    
   
  
   







 Instance 123







   
  
   
    
Class140.browseDir(String packageName,File directory)#2{
        result.add(new CustomJavaFileObject(childFile.toURI(), JavaFileObject.Kind.CLASS, binaryName));
}
    
   
  
   







 Instance 124







   
  
   
    
Class40.DirectoryClassPathEntry(File dir){
    assert (dir.isAbsolute());
    this.location = dir.toURI().toString();
}
    
   
  
   







 Instance 125







   
  
   
    
Class590.testBundleWiringDTO(){
        File bf = createBundle(mf);
        Bundle bundle = framework.getBundleContext().installBundle(bf.toURI().toURL().toExternalForm());
        bundle.start();
        assertEquals("Precondition", Bundle.ACTIVE, bundle.getState());
        BundleWiringDTO dto = bundle.adapt(BundleWiringDTO.class);
        assertEquals(bundle.getBundleId(), dto.bundle);
}
    
   
  
   







 Instance 126







   
  
   
    
Class590.makeKey(File file)#0{
            return file.toURI().normalize();
}
    
   
  
   







 Instance 127







   
  
   
    
Class390.addArtifactRepository(File artifactRepositoryLocation){
        artifactRepos.add(artifactRepositoryLocation.toURI());
}
    
   
  
   







 Instance 128







   
  
   
    
Class170.inputStreamToAnyURI(InputStream inputStream,int scope,Logger logger){
        final FileItem fileItem = prepareFileItemFromInputStream(inputStream, scope, logger);
        final File storeLocation = ((DiskFileItem) fileItem).getStoreLocation();
        return storeLocation.toURI().toString().replace("+", "%2B");
}
    
   
  
   







 Instance 129







   
  
   
    
Class170.CopyExisting(File source){
            this(source.toURI().toURL());
}
    
   
  
   







 Instance 130







   
  
   
    
Class800.generateRecursive(GenerationConfig config,SchemaMapper mapper,JCodeModel codeModel,String packageName,List<File> schemaFiles)#2{
                mapper.generate(codeModel, getNodeName(child.toURI().toURL()), defaultString(packageName), child.toURI().toURL());
}
    
   
  
   







 Instance 131







   
  
   
    
Class800.create(@Nonnull File file){
        checkNotNull(file, "file cannot be null");
        return new IRI(file.toURI());
}
    
   
  
   







 Instance 132







   
  
   
    
Class570.givenPlatformNullThenPlatformisSomethingValidLooking()#1{
        String matcher = platformPath.substring( sdkPath.toURI().toString().length() -1 );
        Assert.assertTrue(String.format("Platform [%s] does not match regex: [%s]", matcher,regex), matcher.matches(regex));
}
    
   
  
   







 Instance 133







   
  
   
    
Class260.scanDirectory(ClassLoader loader,File root)#1{
      URI base = root.toURI();
}
    
   
  
   







 Instance 134







   
  
   
    
Class150.canExtract(final File file){
        return this.canExtract(file.toURI());
}
    
   
  
   







 Instance 135







   
  
   
    
Class150.browse(File file){
    browse(file.toURI());
}
    
   
  
   







 Instance 136







   
  
   
    
Class10.open(File file){
            launch(file.toURI());
            throw new IOException(file.toString());
}
    
   
  
   







 Instance 137







   
  
   
    
Class210.create(String path)#0{
    rd.url = f.toURI();
}
    
   
  
   







 Instance 138







   
  
   
    
Class210.addWagonJar(File jar)#1{
            getContainer().getContainerRealm().addURL(jar.toURI().toURL());
}
    
   
  
   







 Instance 139







   
  
   
    
Class80.crawlCatalogs(File topCatalogFile)#0{
    InvCatalogImpl topCatalog = fac.readXML( topCatalogFile.toURI() );
}
    
   
  
   







 Instance 140







   
  
   
    
Class80.getCwd()#0{
        return URIUtils.normalizeURI(cwd.toURI()).toString();
}
    
   
  
   







 Instance 141







   
  
   
    
Class270.buildURLs(final File templateDirectory)#0{
            return new URL[]{templateDirectory.toURI().toURL()};
}
    
   
  
   







 Instance 142







   
  
   
    
Class580.setUpEditor(File file){
    IEditorPart editor= EditorUtility.openInEditor(new ExternalTranslationUnit(fCProject, file.toURI(), CCorePlugin.CONTENT_TYPE_CXXSOURCE));
    assertNotNull(editor);
    assertTrue(editor instanceof CEditor);
    fEditor= (CEditor) editor;
    fTextWidget= fEditor.getViewer().getTextWidget();
    assertNotNull(fTextWidget);
    fAccessor= new Accessor(fTextWidget, StyledText.class);
    fDocument= fEditor.getDocumentProvider().getDocument(fEditor.getEditorInput());
    assertNotNull(fDocument);
}
    
   
  
   







 Instance 143







   
  
   
    
Class370.loadDescriptorsFromRepository(String repository,P2Context p2Context)#1{
        IArtifactRepository loadedRepo = repoManager.loadRepository(repoPath.toURI(), new NullProgressMonitor());
        return loadedRepo.getArtifactDescriptors(DEFAULT_KEY);
}
    
   
  
   







 Instance 144







   
  
   
    
Class370.locateClassesWithAnnotation(Class<? extends Annotation> annotation,File locationToSearch){
    return AnnotationLocator.locateClassesWithAnnotation( annotation,
                                                          locationToSearch.toURI().toURL() );
}
    
   
  
   







 Instance 145







   
  
   
    
Class600.newFile(String filename)#0{
            url = (new File(filename)).toURI().toURL().toExternalForm();
}
    
   
  
   







 Instance 146







   
  
   
    
Class20.HandlerResolverImpl(File file){
        this(file.toURI());
}
    
   
  
   







 Instance 147







   
  
   
    
Class380.PluginClassLoader(ClassLoader parent,File libDir){
        super(new URL[]{libDir.toURI().toURL()}, parent);
}
    
   
  
   







 Instance 148







   
  
   
    
Class790.createLocalRepository(File localRepository){
        return new MavenArtifactRepository( DEFAULT_LOCAL_REPO_ID, "file://" + localRepository.toURI().getPath(),
                                            new DefaultRepositoryLayout(), new ArtifactRepositoryPolicy(),
                                            new ArtifactRepositoryPolicy() );
}
    
   
  
   







 Instance 149







   
  
   
    
Class650.relativeTo(final File target,final File base)#1{
    File _absoluteFile = base.getAbsoluteFile();
    URI _uRI = _absoluteFile.toURI();
}
    
   
  
   







 Instance 150







   
  
   
    
Class520.resolveArtifactFileURI(Dependency dependency){
    Artifact artifact = resolveArtifact(dependency);
    File file = artifact.getFile();
    return file.toURI();
}
    
   
  
   







 Instance 151







   
  
   
    
Class680.SymlinkResourceLoader(ClassLoader parentLoader,String symlink,File target)#0{
      _target = target.toURI().toURL();
}
    
   
  
   







 Instance 152







   
  
   
    
Class240.addMetadataRepository(File metadataRepositoryLocation){
        metadataRepos.add(metadataRepositoryLocation.toURI());
}
    
   
  
   





