
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class230.toUrls(List<File> cp){
        URL[] urls = new URL[cp.size()];
        for (File f : cp) {
            urls[i++] = f.toURI().toURL();
        }
}
    
   
  
   







 Instance 1







   
  
   
    
Class0.addPathFiles(Collection<File> paths){
        for ( File f : paths )
        {
            urls.add( f.toURI().toURL() );
            addPathFile( f );
        }
}
    
   
  
   







 Instance 2







   
  
   
    
Class490.findPluginDirectoryUrls(List<URL> urls)#0{
    List<File> files = PluginHelper.getPluginJars();
    for (File f : files) {
      try {
        urls.add(f.toURI().toURL());
      } catch (MalformedURLException e) {
        throw new BugException(e);
      }
    }
}
    
   
  
   







 Instance 3







   
  
   
    
Class120.single_implementation()#0{
        IOUtil.writeText("  foo.Foo  ", f);
        assertEquals("foo.Foo", finder.findPluginClass((Iterable) asList(f.toURI().toURL())));
}
    
   
  
   







 Instance 4







   
  
   
    
Class120.no_valid_impl(){
        File f = tmp.newFile();
        IOUtil.writeText("  \n  ", f);
        assertNull(finder.findPluginClass((Iterable) asList(f.toURI().toURL())));
}
    
   
  
   







 Instance 5







   
  
   
    
Class700.getInputSource(File f){
            return new InputSource(f.toURI().toURL().toExternalForm());
            return new InputSource(f.getPath());
}
    
   
  
   







 Instance 6







   
  
   
    
Class700.createFile(String data,String extension)#1{
    return f.toURI().toURL().toExternalForm();
}
    
   
  
   







 Instance 7







   
  
   
    
Class10.toUrl(String src)#0{
      File f = (new FileProvider()).getFileFromClassLoader(src, HTMLCGBuilder.class.getClassLoader());
      URL url = f.toURI().toURL();
}
    
   
  
   







 Instance 8







   
  
   
    
Class10.toUrl(String src)#3{
      File f = (new FileProvider()).getFileFromClassLoader(src, this.getClass().getClassLoader());
      URL url = f.toURI().toURL();
}
    
   
  
   







 Instance 9







   
  
   
    
Class320.addPath(File f){
                URL url = f.toURI().toURL();
                return this.addPath (url);
}
    
   
  
   







 Instance 10







   
  
   
    
Class440.uploadStream(ActiveMQBlobMessage message,InputStream in)#1{
        return f.toURI().toURL();
}
    
   
  
   







 Instance 11







   
  
   
    
Class420.toURL(File f)#0{
      return f.toURI().toURL();
}
    
   
  
   







 Instance 12







   
  
   
    
Class780.testReadOutside()#2{
        ShapefileDataStore ds = (ShapefileDataStore) createDataStore(fac, f.toURI().toURL(), true);
        Query q = new Query(ds.getTypeNames()[0]);
}
    
   
  
   







 Instance 13







   
  
   
    
Class780.addJar(File f)#1{
      if (IJ.debugMode) IJ.log("PluginClassLoader.addJar: "+f);
                addURL(f.toURI().toURL());
}
    
   
  
   







 Instance 14







   
  
   
    
Class180.testJarFile()#1{
    jar.as(ZipExporter.class).exportTo(f, true);
    assertFS(f.toURI().toURL());
}
    
   
  
   







 Instance 15







   
  
   
    
Class310.addFile(File f){
    addURL(f.toURI().toURL());
}
    
   
  
   







 Instance 16







   
  
   
    
Class490.fileToURL(File f)#0{
            return f.toURI().toURL();
}
    
   
  
   







 Instance 17







   
  
   
    
Class150.toUrl(File f)#0{
      return f.toURI().toURL();
}
    
   
  
   







 Instance 18







   
  
   
    
Class730.downloadFace(File f,String directory,String name,String regex,FACE_TYPE type)#0{
            return downloadFace(f.toURI().toURL().toString(), directory, name, regex, type);
}
    
   
  
   







 Instance 19







   
  
   
    
Class650.addFile(File f){
      addURL(f.toURI().toURL(), null); // System.err.println(f.toURL());
      System.err.println("MalformedURLException for " + f.getName());
}
    
   
  
   





