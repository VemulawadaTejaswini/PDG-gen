
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class520.tearDown()#0{
        Statement stmt = con.createStatement();
        stmt.execute("drop function myif(a INOUT int, b IN int)");
        stmt.close();
}
    
   
  
   







 Instance 1







   
  
   
    
Class440.executeWhatever(String sql)#0{
                        Statement stmt = con.createStatement();
                        stmt.execute(sql);
                        stmt.close();
}
    
   
  
   







 Instance 2







   
  
   
    
Class20.delete(){
        Statement stmt = con.createStatement();
        stmt.execute("delete from tab1 where i = " + keyVal);
        stmt.close();
}
    
   
  
   







 Instance 3







   
  
   
    
Class10.after()#0{
    TestUtil.dropTable(con, "testerr");
    Statement stmt = con.createStatement();
    stmt.execute("DROP DOMAIN testdom");
    stmt.close();
}
    
   
  
   







 Instance 4







   
  
   
    
Class600.before(){
    conn = TestUtil.openDB();
    Statement stmt = conn.createStatement();
    stmt.execute("CREATE TABLE truncatetest(id uuid)");
    stmt.close();
}
    
   
  
   







 Instance 5







   
  
   
    
Class30.setUp(){
        _conn = TestUtil.openDB();
        Statement stmt = _conn.createStatement();
        stmt.execute("INSERT INTO xmltest VALUES (2, '" + _xmlFragment + "')");
        stmt.close();
}
    
   
  
   







 Instance 6







   
  
   
    
Class160.setUp(){
        _conn = TestUtil.openDB();
        Statement stmt = _conn.createStatement();
        stmt.execute("CREATE TEMP TABLE genkeys(a serial, b text, c int)");
        stmt.close();
}
    
   
  
   







 Instance 7







   
  
   
    
Class310.setUp(){
        _conn = TestUtil.openDB();
        Statement stmt = _conn.createStatement();
        stmt.execute("CREATE TEMP TABLE uuidtest(id uuid)");
        stmt.close();
}
    
   
  
   







 Instance 8







   
  
   
    
Class80.setUp()#0{
        _conn = TestUtil.openDB();
        Statement stmt = _conn.createStatement();
        stmt.execute("INSERT INTO hold VALUES (2)");
        stmt.close();
}
    
   
  
   







 Instance 9







   
  
   
    
Class310.setUp(){
        _conn = TestUtil.openDB();
        Statement stmt = _conn.createStatement();
        stmt.execute("CREATE OR REPLACE FUNCTION return_bool(boolean) RETURNS boolean AS 'BEGIN RETURN $1; END;' LANGUAGE plpgsql");
        stmt.close();
}
    
   
  
   







 Instance 10







   
  
   
    
Class10.after()#0{
    Statement stmt = _conn.createStatement();
    stmt.execute("DROP TABLE genkeys");
    stmt.close();
}
    
   
  
   







 Instance 11







   
  
   
    
Class310.testSelect(){
    Statement stmt = _conn.createStatement();
    stmt.execute("select * from hold");
    stmt.close();
}
    
   
  
   







 Instance 12







   
  
   
    
Class310.tearDown()#0{
        Statement stmt = _conn.createStatement();
        stmt.execute("DROP TABLE hold");
        stmt.close();
}
    
   
  
   







 Instance 13







   
  
   
    
Class290.executeSQL(String sql)#0{
      Statement stmt = conn.createStatement();
      stmt.execute(sql);
      stmt.close();
}
    
   
  
   







 Instance 14







   
  
   
    
Class690.tearDown(){
            st = conn.createStatement();
            st.execute("drop table if exists type");
                st.close();
}
    
   
  
   







 Instance 15







   
  
   
    
Class650.setUp()#0{
        Statement st = conn.createStatement();
        st.execute(DatabaseCreator.CREATE_TABLE_SIMPLE1);
        st.close();
}
    
   
  
   







 Instance 16







   
  
   
    
Class170.after()#0{
    Statement stmt = conn.createStatement();
    stmt.execute("DROP TABLE uuidtest");
    stmt.close();
}
    
   
  
   







 Instance 17







   
  
   
    
Class510.execute(String sql){
    final Statement statement = connection.createStatement();
    statement.execute(sql);
    statement.close();
}
    
   
  
   







 Instance 18







   
  
   
    
Class140.loadData(JdbcDataSource ds)#0{
        connection = ds.getConnection();
        Statement stmt = connection.createStatement();
        stmt.execute("CREATE TABLE ROLES AS SELECT * FROM CSVREAD('classpath:roles.csv',null,'lineComment=#')");
        stmt.close();
}
    
   
  
   







 Instance 19







   
  
   
    
Class610.executeInsert(){
            Statement statement = connection.createStatement();
                statement.execute("insert into employee (name) values ('john doe')");
                statement.close();
}
    
   
  
   







 Instance 20







   
  
   
    
Class20.execute(String sql){
    Statement statement = connection.createStatement();
      statement.execute(sql);
      statement.close();
}
    
   
  
   







 Instance 21







   
  
   
    
Class390.tearDown()#0{
        Statement st = createStatement();
        st.executeUpdate("DROP FUNCTION PADSTRING");
        st.execute("drop view tran_table");
        st.close();
}
    
   
  
   







 Instance 22







   
  
   
    
Class70.setSchema(String schema){
        Statement stm = createStatement();
        stm.execute("SET SCHEMA " + schema);
        stm.close();
}
    
   
  
   







 Instance 23







   
  
   
    
Class70.setTimeout(long t){
        Statement stm = createStatement();
        stm.execute("call syscs_util.syscs_set_database_property(" +
                    "'derby.locks.waitTimeout', '" + t + "')");
        stm.close();
}
    
   
  
   







 Instance 24







   
  
   
    
Class390.checkConnection()#1{
      Statement st = getConnection().createStatement();
         st.execute("SELECT true");
         st.close();
}
    
   
  
   







 Instance 25







   
  
   
    
Class660.updateHeartbeat(){
    Statement st = getConnection().createStatement();
    st.execute("UPDATE ttirc_system SET value = NOW() WHERE "+m_dbKeyParam+" = 'MASTER_HEARTBEAT'");
    st.close();
}
    
   
  
   







 Instance 26







   
  
   
    
Class70.grantRevokeAfterSettingSQLAuthProperty(){
    Statement stmt = createStatement();
      stmt.execute("revoke select on GR_TAB from some_user");
      stmt.close();
}
    
   
  
   







 Instance 27







   
  
   
    
Class470.shutdown(final boolean active)#1{
            final Statement statement = getConnection().createStatement();
            statement.execute("SHUTDOWN");
            statement.close();
}
    
   
  
   







 Instance 28







   
  
   
    
Class150.createTable()#1{
        for (int i = 0; i < PROCEDURES.length; i++) {
            stmt.execute(PROCEDURES[i]);
        }
        stmt.close();
}
    
   
  
   







 Instance 29







   
  
   
    
Class170.dropDb(String user,String... dbs)#1{
    for(String db : dbs) {
      statement.execute("DROP DATABASE IF EXISTS " + db + " CASCADE");
    }
    statement.close();
}
    
   
  
   







 Instance 30







   
  
   
    
Class670.createDb(String user,String... dbs)#2{
    for(String db : dbs) {
      assertTrue(db + " is not part of known test dbs which will be cleaned up after the test", allowedDBs.contains(db));
      statement.execute("CREATE DATABASE " + db);
    }
    statement.close();
}
    
   
  
   







 Instance 31







   
  
   
    
Class90.testReload()#1{
    Connection connection = context.createConnection(USER1_1);
    Statement statement = context.createStatement(connection);
    statement.execute("RELOAD");
    statement.close();
}
    
   
  
   







 Instance 32







   
  
   
    
Class210.adminCreatePartition()#0{
    Connection connection = context.createConnection(ADMIN1);
    Statement statement = context.createStatement(connection);
    statement.execute("ALTER TABLE tb1 ADD IF NOT EXISTS PARTITION (b = '1') ");
    statement.close();
}
    
   
  
   







 Instance 33







   
  
   
    
Class650.tearDown(){
        Statement stmt = createStatement();
        stmt.execute("drop table app.t1");
        stmt.close();
}
    
   
  
   







 Instance 34







   
  
   
    
Class650.setUp(){
        Statement stmt = createStatement();
        stmt.execute ("create table testblob (data blob)");
        stmt.close();
}
    
   
  
   







 Instance 35







   
  
   
    
Class510.setUp(){
        Statement st = cx.createStatement();
        st.execute("DROP TABLE IF EXISTS noindex");
        st.close();
}
    
   
  
   







 Instance 36







   
  
   
    
Class60.adminCreate(String db,String table)#2{
    if (table != null) {
      statement.execute("CREATE table " + db + "." + table + " (a string)");
    }
    statement.close();
}
    
   
  
   







 Instance 37







   
  
   
    
Class570.tearDown()#0{
        Statement st = createStatement();
        st.execute("drop table lobTable100M");
        st.close();
}
    
   
  
   







 Instance 38







   
  
   
    
Class570.setUp()#1{
        Statement st = createStatement();
        st.execute("create table lobTable100M(bl blob(100M))");
        st.close();
}
    
   
  
   







 Instance 39







   
  
   
    
Class530.tearDown(){
        Statement stmt = createStatement();
        stmt.execute("drop table GR_TAB");
        stmt.close();
}
    
   
  
   







 Instance 40







   
  
   
    
Class530.cleanup()#0{
        Statement dropStmt = this.conn.createStatement();
        dropStmt.execute("DROP TABLE actor_states");
        dropStmt.close();
}
    
   
  
   







 Instance 41







   
  
   
    
Class650.insertThreePoints(){
      Statement st = cx.createStatement();
        st.execute("INSERT INTO spatial (geom) VALUES (ST_GeomFromText('POINT(2 2)', 4326))");
        st.close();
}
    
   
  
   







 Instance 42







   
  
   
    
Class640.loadSQL(Connection connection,String resource,HypersonicPreprocessor sqlPreprocessor)#2{
        if (sqlPreprocessor != null) {
            sql = sqlPreprocessor.preprocessSQL(sql);
        }
        stmt.execute(sql);
        stmt.close();
}
    
   
  
   







 Instance 43







   
  
   
    
Class410.setUp()#0{
         stmt.execute("CREATE TABLE " + JDBC.escape(tableName) + "(id int)");
         stmt.close();
}
    
   
  
   







 Instance 44







   
  
   
    
Class590.setUp()#0{
    Statement stmt = createStatement();
    stmt.executeUpdate("create table t1 (c11 int, c12 smallint, c13 double, c14 char(3))");
    stmt.execute("insert into t2 values (-1),(-2)");
    stmt.close();
}
    
   
  
   







 Instance 45







   
  
   
    
Class20.tearDown()#0{
         stmt.execute("DROP TABLE " + JDBC.escape(tableName));
         stmt.close();
}
    
   
  
   







 Instance 46







   
  
   
    
Class160.testMetaDataGetClassicTableTypes()#0{
    stmt.execute("set " + HiveConf.ConfVars.HIVE_SERVER2_TABLE_TYPE_MAPPING.varname +
        " = " + TableTypeMappings.CLASSIC.toString());
    stmt.close();
}
    
   
  
   







 Instance 47







   
  
   
    
Class540.testMetaDataGetTablesClassic()#0{
    stmt.execute("set " + HiveConf.ConfVars.HIVE_SERVER2_TABLE_TYPE_MAPPING.varname +
        " = " + TableTypeMappings.CLASSIC.toString());
    stmt.close();
}
    
   
  
   







 Instance 48







   
  
   
    
Class240.test_0()#1{
        stmt.execute("select 1");
        stmt.close();
}
    
   
  
   







 Instance 49







   
  
   
    
Class500.setUp(){
    connDDL = openDefaultConnection();
    Statement s = connDDL.createStatement();
    s.execute(
    "CREATE TABLE PED001 (A INT NOT NULL, B DECIMAL(6,4), C VARCHAR(20))");
    s.close();
}
    
   
  
   







 Instance 50







   
  
   
    
Class450.setUp()#0{
        Statement s = createStatement();
        s.execute("delete from t1");
        s.close();
}
    
   
  
   







 Instance 51







   
  
   
    
Class150.traceMarker(){
            Statement statement = delegatingConnection.createStatement();
                statement.execute(null);
                statement.close();
}
    
   
  
   







 Instance 52







   
  
   
    
Class200.setUp(){
        Statement s = createStatement();
        s.execute("insert into EXCEPTION_TABLE1 (id, data)" +
                  "values (1, 'data1')");
        s.close();
}
    
   
  
   







 Instance 53







   
  
   
    
Class630.tearDown()#0{
        Statement stmt = createStatement();
        stmt.execute("DROP TABLE T0");
        stmt.close();
}
    
   
  
   







 Instance 54







   
  
   
    
Class230.createSQLJSchema(){
    Statement stmt = m_connection.createStatement();
    stmt.execute("GRANT USAGE ON SCHEMA sqlj TO public");
    stmt.close();
}
    
   
  
   







 Instance 55







   
  
   
    
Class230.executeStatement(String sql)#0{
      Logger.info(this, "Executing " + sql);
      boolean ret=stmt.execute(sql);
      stmt.close();
}
    
   
  
   







 Instance 56







   
  
   
    
Class230.body(Connection conn)#1{
                    s.execute("delete from t");
                s.close();
}
    
   
  
   







 Instance 57







   
  
   
    
Class290.tearDown()#0{
        Statement s = createStatement();
        s.execute("drop table EXCEPTION_TABLE1");
        s.close();
}
    
   
  
   







 Instance 58







   
  
   
    
Class600.tearDown()#0{
        Statement st = createStatement();
        st.execute("DROP TABLE TEST_TABLE");
        st.close();
}
    
   
  
   







 Instance 59







   
  
   
    
Class470.installTrigger(Connection cx,String tableName,String geomName,String triggerAction,String referencing,String triggerStmt)#2{
        LOGGER.fine("trigger SQL : " + sql);
            s.execute(sql);
            s.close();
}
    
   
  
   







 Instance 60







   
  
   
    
Class370.setUp()#2{
        stmt.execute("ALTER TABLE testerr ADD CONSTRAINT testerr_pk PRIMARY KEY (id)");
        stmt.close();
}
    
   
  
   







 Instance 61







   
  
   
    
Class370.tearDown()#1{
        Statement stmt = createStatement();
        stmt.execute ("drop table testblob");
        stmt.close();
}
    
   
  
   







 Instance 62







   
  
   
    
Class50.createDDL()#1{
        stmt.execute("CREATE PROCEDURE BASIC_CALL_0(INOUT F1 FLOAT, INOUT F2 DOUBLE, INOUT F3 REAL, INOUT F4 DATE, INOUT F5 TIME, INOUT F6 SMALLINT, INOUT F7 SMALLINT, INOUT F8 INTEGER, INOUT F9 BIGINT, INOUT F10 DECIMAL(9,2), INOUT F11 TIMESTAMP, INOUT F12 VARCHAR(128) FOR BIT DATA, INOUT F13 VARCHAR(256), INOUT F14 VARCHAR(256), INOUT F15 VARCHAR(256), INOUT F16 VARCHAR(256), INOUT F17 SMALLINT) "
                     + "LANGUAGE JAVA PARAMETER STYLE JAVA EXTERNAL NAME '"
                     + BasicTypeTest.class.getName()
                     + ".basic_process_0' " + "DYNAMIC RESULT SETS 1");
        stmt.close();
}
    
   
  
   







 Instance 63







   
  
   
    
Class690.tearDown()#0{
            Statement st = HsqlConn.createStatement();
            st.execute("SHUTDOWN");
            st.close();
}
    
   
  
   







 Instance 64







   
  
   
    
Class690.configureConnection(){
    Statement stmt = createStatement();
    stmt.execute(
        "set hive.fetch.output.serde = org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe");
    stmt.close();
}
    
   
  
   







 Instance 65







   
  
   
    
Class120.execute(ReviewDb db,String sql){
    Statement s = ((JdbcSchema) db).getConnection().createStatement();
      s.execute(sql);
      s.close();
}
    
   
  
   







 Instance 66







   
  
   
    
Class590.select(OracleConnection oracleConn){
        Statement stmt = oracleConn.createStatement();
        stmt.execute("SELECT 1 FROM DUAL");
        stmt.close();
}
    
   
  
   







 Instance 67







   
  
   
    
Class660.setUp(){
        Statement stmt = createStatement();
        stmt.execute("create table GR_TAB (id int)");
        stmt.close();
}
    
   
  
   







 Instance 68







   
  
   
    
Class660.clear()#1{
    Statement st = TestUtils.getConnection().createStatement();
    st.execute("SPARQL CLEAR GRAPH <" + TEST_GRAPH_NAME + ">");
    st.close();
}
    
   
  
   







 Instance 69







   
  
   
    
Class350.exchangeSubpartition(Connection connection,OracleTable table,String subPartitionName,OracleTable subPartitionTable)#0{
        String.format("ALTER TABLE %s EXCHANGE SUBPARTITION %s WITH TABLE %s",
            table.toString(), subPartitionName, subPartitionTable.toString());
    statement.execute(sql);
    statement.close();
}
    
   
  
   







 Instance 70







   
  
   
    
Class250.setUp(){
        Statement stmt = createStatement();
        stmt.execute("insert into app.t1 values (1, 'one'), "
            + "(2, 'two'), (4, 'four')");
        stmt.close();
}
    
   
  
   







 Instance 71







   
  
   
    
Class460.doExecute(ConcurrentTestCommandExecutor executor){
      Statement stmt = executor.getConnection().createStatement();
        stmt.execute(sql);
        stmt.close();
}
    
   
  
   







 Instance 72







   
  
   
    
Class430.tearDown()#0{
        rollback();
        Statement stmt = createStatement ();
        stmt.execute ("drop table updateClob");
        stmt.close();
}
    
   
  
   







 Instance 73







   
  
   
    
Class100.executeOnMaster(String sql){
         Statement s = getMasterConnection().createStatement();
         s.execute(sql);
         s.close();
}
    
   
  
   







 Instance 74







   
  
   
    
Class100.setSchema(String schema)#2{
    Statement stmt = createStatement();
    stmt.execute("use " + schema);
    stmt.close();
}
    
   
  
   







 Instance 75







   
  
   
    
Class100.setupTestTableWithData(String tableName,Path dataFilePath,Connection hs2Conn)#0{
    stmt.execute("load data local inpath '"
        + dataFilePath.toString() + "' into table " + tableName);
    stmt.close();
}
    
   
  
   







 Instance 76







   
  
   
    
Class550.setUp()#0{
        Statement stmt = createStatement ();
        stmt.execute ("create table updateClob " +
                "(id integer primary key, data clob)");
        stmt.close();
}
    
   
  
   







 Instance 77







   
  
   
    
Class400.testStatementCopyOut()#0{
        Statement stmt = con.createStatement();
            stmt.execute("COPY copytest TO STDOUT");
        stmt.close();
}
    
   
  
   







 Instance 78







   
  
   
    
Class450.testStatementCopyIn()#0{
        Statement stmt = con.createStatement();
            stmt.execute("COPY copytest FROM STDIN");
        stmt.close();
}
    
   
  
   







 Instance 79







   
  
   
    
Class410.testWarningsAreCleared(){
        Statement stmt = con.createStatement();
        stmt.execute("CREATE TEMP TABLE unused (a int primary key)");
        stmt.executeQuery("SELECT 1");
        assertNull(stmt.getWarnings());
        stmt.close();
}
    
   
  
   







 Instance 80







   
  
   
    
Class680.deleteSqlByID(int sqlmap_file_id)#0{
      stmt = conn.createStatement();
      stmt.execute(command);
      int rows=stmt.getUpdateCount();
      stmt.close();
      logger.info(rows+" is deleted.");
}
    
   
  
   







 Instance 81







   
  
   
    
Class390.setUp()#0{
            Statement s = createStatement();
            s.execute("CREATE FUNCTION  PADSTRING (DATA VARCHAR(32000), "
                    + "LENGTH INTEGER) RETURNS VARCHAR(32000) EXTERNAL NAME "
                    + "'org.apache.derbyTesting.functionTests.util.Formatters"
                    + ".padString' LANGUAGE JAVA PARAMETER STYLE JAVA");
            createLockTableQueryEntries(s);
            s.close();
}
    
   
  
   





