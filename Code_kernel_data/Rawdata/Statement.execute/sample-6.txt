
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class680.setUp()#2{
        for (int i = 0; i < TABLES.length; i++) {
            s.execute("DELETE FROM " + TABLES[i][0]);
        }
}
    
   
  
   







 Instance 1







   
  
   
    
Class500.decorateSQL(Statement s){
                    for (int i = 0; i < TABLES.length; i++) {
                          s.execute(TABLES[i]);
                    }
}
    
   
  
   







 Instance 2







   
  
   
    
Class90.createTabs(Statement statement,String dbName,String tableNames[]){
    for (String tabName : tableNames) {
      statement.execute("DROP TABLE IF EXISTS " + dbName + "." + tabName);
      statement.execute("create table " + dbName + "." + tabName
          + " (under_col int comment 'the under column', value string)");
    }
}
    
   
  
   







 Instance 3







   
  
   
    
Class470.dropDerby2041Triggers(Statement s){
        for (int i = 1; i <= 5; i++) {
            s.execute("drop trigger d2041_tr" + i);
        }
}
    
   
  
   







 Instance 4







   
  
   
    
Class480.enableXplainStyle(Statement s)#0{
        for (int i = 0; i < tableNames.length; i++)
            if (hasTable(s, "XPLTEST", tableNames[i]))
                s.execute("delete from XPLTEST." + tableNames[i]);
        s.execute("call syscs_util.syscs_set_xplain_mode(0)");
}
    
   
  
   







 Instance 5







   
  
   
    
Class190.fillTestTable4(Connection conn,int numberOfRecords)#0{
        for (int id = 0; id < numberOfRecords; id++) {
            String insertQuery = "INSERT INTO " + DatabaseCreator.TEST_TABLE4
                    + " (fk, field1) VALUES(" + id + ", \""
                    + DatabaseCreator.defaultString + id + "\")";
            statement.execute(insertQuery);
        }
}
    
   
  
   







 Instance 6







   
  
   
    
Class190.dontrun_testDERBY_6317()#1{
        for (int i = 0; i < SELECT_ROWS_COUNT; i++) { 
            stmt.execute(testSelect+i);
            confirmIndexScanUsage(stmt,i);
        }
}
    
   
  
   







 Instance 7







   
  
   
    
Class10.prepareDatabase(String sqlFile,DbImportConfiguration dbImportConfiguration)#0{
    for (String sql : SQLReader.statements(sqlUrl, ";")) {
      stmt.execute(sql);
    }
}
    
   
  
   







 Instance 8







   
  
   
    
Class0.executeQuery(DataSource dataSource,String... queries)#2{
        for (String query : queries) {
            stmt.execute(query);
        }
}
    
   
  
   







 Instance 9







   
  
   
    
Class100.fillTestTable1(Connection conn,int numberOfRecords)#1{
        for (int id = 0; id < numberOfRecords; id++) {
            String value = DatabaseCreator.defaultString + id;
            String insertQuery = "INSERT INTO " + DatabaseCreator.TEST_TABLE1
                    + " (id, field1, field2, field3) VALUES(" + id + ", '"
                    + value + "', " + id + ", " + id + ")";
            statement.execute(insertQuery);
        }
}
    
   
  
   





