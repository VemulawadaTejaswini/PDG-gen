
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class560.executeScript(String dataSourceName,String query)#0{
    Connection connection = DriverManager.getConnection(dataSourceName, USER, PASSWORD);
    Statement stmt = connection.createStatement();
    stmt.execute(query);
    stmt.close();
}
    
   
  
   







 Instance 1







   
  
   
    
Class110.createTable()#0{
        Connection conn = DriverManager.getConnection(create_url);
        Statement stmt = conn.createStatement();
        stmt.execute("CREATE TABLE T_USER (ID INTEGER, NAME VARCHAR(50), BIRTHDATE TIMESTAMP)");
        stmt.close();
}
    
   
  
   







 Instance 2







   
  
   
    
Class670.createTable()#0{
        Connection conn = DriverManager.getConnection(create_url);
        Statement stmt = conn.createStatement();
        stmt.execute("CREATE TABLE T_PRE_STMT_TEST (ID INTEGER GENERATED BY DEFAULT AS IDENTITY, NAME VARCHAR(50), BIRTHDATE TIMESTAMP)");
        stmt.close();
}
    
   
  
   







 Instance 3







   
  
   
    
Class560.setUp()#0{
        Connection conn = DriverManager.getConnection(url, "sa", "");
          Statement stmt = conn.createStatement();
              stmt.execute("create table test (id int)");
              stmt.close();
}
    
   
  
   







 Instance 4







   
  
   
    
Class0.createDb()#0{
    Connection conn = DriverManager.
      getConnection(miniHS2.getJdbcURL(), System.getProperty("user.name"), "bar");
    Statement stmt2 = conn.createStatement();
    stmt2.execute("CREATE DATABASE " + dbName);
    stmt2.close();
}
    
   
  
   







 Instance 5







   
  
   
    
Class570.setIsolationSQL(String sqlName){
        Connection c = DriverManager.getConnection("jdbc:default:connection");
        Statement s = c.createStatement();
        s.execute("SET ISOLATION " + sqlName);
        s.close();
}
    
   
  
   







 Instance 6







   
  
   
    
Class230.createTable()#0{
        Connection conn = DriverManager.getConnection(create_url);
        Statement stmt = conn.createStatement();
        stmt.execute("CREATE TABLE T_BLOB (ID INTEGER, DATA BLOB)");
        stmt.close();
}
    
   
  
   







 Instance 7







   
  
   
    
Class480.dropTable()#0{
        Connection conn = DriverManager.getConnection(create_url);
        Statement stmt = conn.createStatement();
        stmt.execute("DROP PROCEDURE BASIC_CALL_0");
        stmt.close();
}
    
   
  
   







 Instance 8







   
  
   
    
Class140.dropTable()#0{
        Connection conn = DriverManager.getConnection(create_url);
        Statement stmt = conn.createStatement();
        stmt.execute("DROP TABLE T_BLOB");
        stmt.close();
}
    
   
  
   







 Instance 9







   
  
   
    
Class370.createScript()#0{
        Connection conn = DriverManager.getConnection("jdbc:h2:mem:test");
        Statement stat = conn.createStatement();
        stat.execute("SCRIPT TO 'script.sql'");
        stat.close();
}
    
   
  
   







 Instance 10







   
  
   
    
Class30.createTable()#0{
        final Connection connection = DriverManager.getConnection(URL, USER, PASSWORD);
        final Statement statement = connection.createStatement();
        statement.execute("CREATE TABLE " + TABLE + "(ID INTEGER)");
        statement.close();
}
    
   
  
   







 Instance 11







   
  
   
    
Class160.createTable()#0{
        Connection conn = DriverManager.getConnection(jdbcUrl, user, password);
        Statement stmt = conn.createStatement();
        stmt.execute("CREATE TABLE T (FID INT, FNAME VARCHAR2(4000), FDESC CLOB)");
        stmt.close();
}
    
   
  
   







 Instance 12







   
  
   
    
Class570.setSchema(String schemaName){
        Connection c = DriverManager.getConnection("jdbc:default:connection");
        Statement s = c.createStatement();
        s.execute("SET SCHEMA " + schemaName);
        s.close();
}
    
   
  
   







 Instance 13







   
  
   
    
Class140.clear()#1{
      String url = "jdbc:mysql://" + address.split(":")[0] + ":50001/nn_state";
      Connection client = DriverManager.getConnection(url, "root", "root");
      Statement statement = client.createStatement();
      statement.execute(sql);
      statement.close();
}
    
   
  
   







 Instance 14







   
  
   
    
Class0.clearResult()#0{
        Connection conn = dataSource.getConnection();
        Statement stmt = conn.createStatement();
        stmt.execute("DELETE FROM db_day_sql_fulltext");
        stmt.close();
}
    
   
  
   







 Instance 15







   
  
   
    
Class430.dropTable()#0{
        Connection conn = dataSource.getConnection();
        Statement stmt = conn.createStatement();
        stmt.execute(ddl);
        stmt.close();
}
    
   
  
   







 Instance 16







   
  
   
    
Class430.perf()#0{
            Connection conn = dataSource.getConnection();
            Statement stmt = conn.createStatement();
            stmt.execute("SELECT " + i % 1000);
            stmt.close();
}
    
   
  
   







 Instance 17







   
  
   
    
Class630.doWork(Connection conn)#0{
                conn.setAutoCommit(false);
                Statement s = conn.createStatement();
                s.execute(sql);
                s.close();
}
    
   
  
   







 Instance 18







   
  
   
    
Class650.tearDown(){
        Connection con = getConnection();
        con.setAutoCommit (true);
        Statement stmt = con.createStatement();
        stmt.execute ("drop table blobtest");
        stmt.close();
}
    
   
  
   







 Instance 19







   
  
   
    
Class190.doCreateDb(String user)#0{
    Connection connection = context.createConnection(user);
    Statement statement = connection.createStatement();
    statement.execute("CREATE DATABASE " + dbName);
    statement.close();
}
    
   
  
   







 Instance 20







   
  
   
    
Class190.doDropDb(String user)#0{
    Connection connection = context.createConnection(user);
    Statement statement = connection.createStatement();
    statement.execute("DROP DATABASE IF EXISTS " + dbName + " CASCADE");
    statement.close();
}
    
   
  
   







 Instance 21







   
  
   
    
Class560.initOdeDb()#0{
        Connection conn = ((DataSource) getBean("odeDS")).getConnection();
        Statement s = conn.createStatement();
        s.execute("delete from bpel_process");
        s.close();
}
    
   
  
   







 Instance 22







   
  
   
    
Class520.tearDownClass()#0{
        Connection conn = Connections.getConnection();
        Statement stmt = conn.createStatement();
        stmt.execute("drop table companies");
        stmt.close();
}
    
   
  
   







 Instance 23







   
  
   
    
Class450.initializeConnection(Connection connection){
    Statement stmt = connection.createStatement();
      stmt.execute("SET DATABASE SQL DOUBLE NAN FALSE");
      stmt.close();
}
    
   
  
   







 Instance 24







   
  
   
    
Class400.configureConnection(Connection conn){
        final Statement statement = conn.createStatement();
        statement.execute("PRAGMA journal_mode = WAL;");
        statement.close();
}
    
   
  
   







 Instance 25







   
  
   
    
Class530.cleanup(Connection conn){
    Statement stmt = conn.createStatement ();
    stmt.execute ("COMMIT");
    stmt.close ();
}
    
   
  
   







 Instance 26







   
  
   
    
Class220.resetDatabase(String databaseName,Connection connection){
        Statement statement = connection.createStatement();
            statement.execute("USE " + databaseName);
            statement.close();
}
    
   
  
   







 Instance 27







   
  
   
    
Class490.changeDbCharset(String dbHost,String dbPort,String dbName,String dbUser,String dbPassword)#0{
    Connection conn = getConn(dbHost, dbPort, dbName, dbUser, dbPassword);
    Statement stat = conn.createStatement();
    stat.execute(sql);
    stat.close();
}
    
   
  
   







 Instance 28







   
  
   
    
Class390.createConnection()#0{
    Statement st = conn.createStatement();
      st.execute("SET TIME ZONE '"+dbTimezone+"'");
    st.close();
}
    
   
  
   







 Instance 29







   
  
   
    
Class590.select(com.mysql.jdbc.Connection oracleConn){
        Statement stmt = oracleConn.createStatement();
        stmt.execute("SELECT 'x'");
        stmt.close();
}
    
   
  
   







 Instance 30







   
  
   
    
Class580.executeDDL(Connection con,String ddl)#1{
        Statement st = con.createStatement();
            st.execute(ddl);
            st.close();
}
    
   
  
   







 Instance 31







   
  
   
    
Class250.setUp()#0{
        Connection con = getConnection();
        Statement stmt = con.createStatement();
        stmt.execute ("create table blobtest (id integer, data Blob)");
        stmt.close();
}
    
   
  
   







 Instance 32







   
  
   
    
Class360.registerDestinationTables(Connection connection){
        final Statement st = connection.createStatement();
            st.execute("CREATE TABLE dest15(destination INT);" +
                    "INSERT INTO dest15 VALUES (1), (5);" +
                    "CREATE TABLE dest234(destination INT);" +
                    "INSERT INTO dest234 VALUES (2), (3), (4);");
            st.close();
}
    
   
  
   







 Instance 33







   
  
   
    
Class100.cleanup(Connection conn){
    Statement stmt = conn.createStatement ();
    stmt.execute ("COMMIT");
    stmt.close ();
}
    
   
  
   







 Instance 34







   
  
   
    
Class240.test_merge()#0{
      Connection conn = dataSource.getConnection();
      Statement stmt = conn.createStatement();
      stmt.execute(sql);
      stmt.close();
}
    
   
  
   







 Instance 35







   
  
   
    
Class410.dropTable()#0{
        Connection conn = dataSource.getConnection();
            Statement stmt = conn.createStatement();
            stmt.execute("DROP TABLE t_big");
            stmt.close();
}
    
   
  
   







 Instance 36







   
  
   
    
Class190.createTable()#0{
        Connection conn = dataSource.getConnection();
        Statement stmt = conn.createStatement();
        stmt.execute(ddl);
        stmt.close();
}
    
   
  
   







 Instance 37







   
  
   
    
Class240.insertFoo(Connection conn,int id,String name){
        Statement stmt = conn.createStatement();
        stmt.execute("INSERT INTO foo (id, name) VALUES (" + id + ", '" + name + "')");
        stmt.close();
}
    
   
  
   







 Instance 38







   
  
   
    
Class260.drop(Connection connection){
    Statement statement = connection.createStatement();
      statement.execute(" DROP TABLE POLICY_SUMMARY");  
      statement.close();
}
    
   
  
   







 Instance 39







   
  
   
    
Class260.createNodeTable(Connection connection,TableLocation nodesName){
        final Statement st = connection.createStatement();
            st.execute("CREATE TABLE " + nodesName + "(" +
                    NODE_ID + " INTEGER PRIMARY KEY, " +
                    CONNECTED_COMPONENT + " INTEGER);");
            st.close();
}
    
   
  
   







 Instance 40







   
  
   
    
Class450.dropTable(Connection c,String name){
            Statement s = c.createStatement();
            s.execute("drop table "+name);
            s.close();
}
    
   
  
   







 Instance 41







   
  
   
    
Class90.setUpTable(final Connection connection){
        Statement statement = connection.createStatement();
            statement.execute("insert into TEST values(2, 'r2')");
            statement.close();
}
    
   
  
   







 Instance 42







   
  
   
    
Class200.tearDown(){
        Connection con = getConnection();
        Statement stmt = con.createStatement();
        stmt.execute("drop table BLOBCLOB");
        stmt.close();
}
    
   
  
   







 Instance 43







   
  
   
    
Class230.Tester(Connection conn){
    Statement stmt = conn.createStatement();
    stmt.execute("SET search_path TO javatest,public");
    stmt.close();
}
    
   
  
   







 Instance 44







   
  
   
    
Class110.tearDown()#0{
        Connection conn = getDataSourceConnection();
        Statement drop = conn.createStatement();
        drop.execute("drop table allmixedup");
        drop.close();
}
    
   
  
   







 Instance 45







   
  
   
    
Class600.populateDb()#0{
        Connection connection = connectionPool.getConnection();
        Statement statement = connection.createStatement();
        statement.execute(insertSql);
        statement.close();
}
    
   
  
   







 Instance 46







   
  
   
    
Class350.createExportTableFromTemplate(Connection connection,OracleTable newTable,String tableStorageClause,OracleTable templateTable,boolean noLogging)#1{
    Statement statement = connection.createStatement();
    statement.execute(sql);
    statement.close();
}
    
   
  
   







 Instance 47







   
  
   
    
Class170.setupAdmin(Context context)#0{
    Connection connection = context.createConnection(ADMIN1);
    Statement statement = connection.createStatement();
    statement.execute("GRANT ROLE admin_role TO GROUP " + ADMINGROUP);
    statement.close();
}
    
   
  
   







 Instance 48







   
  
   
    
Class20.performPostOpenStatements(Connection connection){
        Statement stmt = connection.createStatement();
            stmt.execute("SET TRANSACTION ISOLATION LEVEL READ COMMITTED");
            stmt.close();
}
    
   
  
   







 Instance 49







   
  
   
    
Class10.setUp(){
                    Connection con = getConnection();
                    Statement stmt = con.createStatement();
                    stmt.execute("create table UpdateTestTableResultSet (" +
                            "sno int not null unique," +
                            "dBlob BLOB," +
                            "dClob CLOB," +
                            "dLongVarchar LONG VARCHAR," +
                            "dLongBit LONG VARCHAR FOR BIT DATA)");
                    stmt.close();
}
    
   
  
   







 Instance 50







   
  
   
    
Class360.doSomeChanges(Connection conn){
    Statement otherStmt = conn.createStatement ();
    otherStmt.execute ("commit");
    otherStmt.close ();
}
    
   
  
   







 Instance 51







   
  
   
    
Class540.closeConnection(Connection connection)#0{
        Statement statement = connection.createStatement();
            statement.execute("drop table employee");
            statement.close();
}
    
   
  
   







 Instance 52







   
  
   
    
Class550.execute(@Untainted String sql,Connection connection){
        Statement statement = connection.createStatement();
            statement.execute(sql);
            statement.close();
}
    
   
  
   







 Instance 53







   
  
   
    
Class370.execute(Connection con,String sql){
      stmt = con.createStatement();
      stmt.execute(sql);
      if( stmt != null) try {stmt.close();} catch(Exception e) {}
}
    
   
  
   







 Instance 54







   
  
   
    
Class130.doSql(){
        Connection con = h2Datasource.getConnection();
            stmt = con.createStatement();
            stmt.execute("INSERT INTO TEST VALUES ('txt')");
            if (stmt != null) {
                stmt.close();
            }
            con.close();
}
    
   
  
   







 Instance 55







   
  
   
    
Class120.execute(String sql,Connection connection){
            stmt = connection.createStatement();
            stmt.execute(sql);
            if (stmt != null) {
                stmt.close();
            }
}
    
   
  
   







 Instance 56







   
  
   
    
Class320.setUp(){
            Connection con = getConnection();
            Statement stmt = con.createStatement();
            stmt.execute("create table ClobTestData (" +
                    "id int unique, dClob CLOB)");
            stmt.executeUpdate("insert into ClobTestData values (1, '')");
            stmt.close();
}
    
   
  
   







 Instance 57







   
  
   
    
Class210.testCreateSchema()#1{
        derbyHelper.start();
        derbyHelper.dropAndCreateSomething();
        final Connection conn = derbyHelper.getConnection();
        final Statement stmt = conn.createStatement();
        assertTrue(stmt.execute("select count(*) from something"));
        stmt.close();
}
    
   
  
   







 Instance 58







   
  
   
    
Class420.testCreateTestTable()#0{
        Connection con = datasource.getConnection();
        Statement st = con.createStatement();
            st.execute("create table test(id int not null, val1 varchar(255), val2 varchar(255), val3 varchar(255), val4 varchar(255))");
        st.close();
}
    
   
  
   







 Instance 59







   
  
   
    
Class500.createConnection(){
    Connection connection = DriverManager.getConnection(miniHS2.getJdbcURL(dbName),
      System.getProperty("user.name"), "bar");
    Statement statement = connection.createStatement();
    localConnection.set(connection);
    localStatement.set(statement);
    statement.execute("USE " + dbName);
}
    
   
  
   





