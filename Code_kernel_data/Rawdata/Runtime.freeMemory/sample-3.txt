
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class90.logStats(final MavenSession session)#2{
        Runtime r = Runtime.getRuntime();
        logger.info("Final Memory: " + (r.totalMemory() - r.freeMemory()) / MB + "M/" + r.totalMemory() / MB + "M"); // TODO: i18n
}
    
   
  
   







 Instance 1







   
  
   
    
Class390.logStats(MavenSession session)#2{
        Runtime r = Runtime.getRuntime();
        logger.info( "Final Memory: " + ( r.totalMemory() - r.freeMemory() ) / mb + "M/" + r.totalMemory() / mb + "M" );
}
    
   
  
   







 Instance 2







   
  
   
    
Class380.stop()#0{
    Runtime r = Runtime.getRuntime();
    Logs.info("Final Memory: " + (r.totalMemory() - r.freeMemory()) / mb + "M/" + r.totalMemory() / mb + "M");
}
    
   
  
   







 Instance 3







   
  
   
    
Class130.printInitialStats(Logger LOG,int thisTaskID,int firstRelationSize,int firstTaggedRelationSize,int secondRelationSize,int secondTaggedRelationSize){
  final Runtime runtime = Runtime.getRuntime();
  final long memory = runtime.totalMemory() - runtime.freeMemory();
  LOG.info(","
    + "INITIAL,"
    + thisTaskID
    + ",:"
    + "TimeStamp:,"
    + dateFormat.format(Calendar.getInstance().getTime())
    + ", FirstStorage:,"
    + (firstRelationSize + firstTaggedRelationSize)
    + ", SecondStorage:,"
    + (secondRelationSize + secondTaggedRelationSize)
    + ", Total:,"
    + (firstRelationSize + secondRelationSize
      + firstTaggedRelationSize + secondTaggedRelationSize)
    + ", Memory used: ," + bytesToMegabytes(memory) + ","
    + bytesToMegabytes(runtime.totalMemory()));
}
    
   
  
   







 Instance 4







   
  
   
    
Class230.printMemoryStats(int heirarchyPosition,Logger LOG,int thisTaskID,long numberOfTuplesMemory,int firstRelationSize,int firstTaggedRelationSize,int secondRelationSize,int secondTaggedRelationSize)#1{
    final Runtime runtime = Runtime.getRuntime();
    final long memory = runtime.totalMemory()
      - runtime.freeMemory();
    LOG.info(","
      + "MEMORY,"
      + thisTaskID
      + ",:"
      + "TimeStamp:,"
      + dateFormat.format(Calendar.getInstance().getTime())
      + ", FirstStorage:,"
      + (firstRelationSize + firstTaggedRelationSize)
      + ", SecondStorage:,"
      + (secondRelationSize + secondTaggedRelationSize)
      + ", Total:,"
      + (numberOfTuplesMemory)
      + ", Memory used: ,"
      + StatisticsUtilities.bytesToMegabytes(memory)
      + ","
      + StatisticsUtilities.bytesToMegabytes(runtime
        .totalMemory()));
}
    
   
  
   







 Instance 5







   
  
   
    
Class280.getMemory()#0{
        Runtime runtime = Runtime.getRuntime();
        m.put("total", runtime.totalMemory());
        m.put("free", runtime.freeMemory());
}
    
   
  
   







 Instance 6







   
  
   
    
Class110.logMemoryForTests(){
        Runtime runtime = Runtime.getRuntime();
        log.info("total memory :" + runtime.totalMemory());
        log.info("unit tests free memory :" + runtime.freeMemory());
}
    
   
  
   







 Instance 7







   
  
   
    
Class630.getJvmInfo()#1{
    Runtime runtime = Runtime.getRuntime();
    jvm.add( "processors", runtime.availableProcessors() );
    long used = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 8







   
  
   
    
Class380.getMemUsed()#3{
        long used = rt.totalMemory() - rt.freeMemory();
        if (used < minused) {
          cnt = 0;
          minused = used;
        } else {
          cnt++;
        }
}
    
   
  
   







 Instance 9







   
  
   
    
Class210.usedMemory()#1{
      final long current = runtime.totalMemory() - runtime.freeMemory();
      if (current < last) {
        // if the value are reduced then wait for more reducing
        last = current;
      }
      else {
        return last;
      }
}
    
   
  
   







 Instance 10







   
  
   
    
Class670.changeTexturePack(TexturePackBase newPack)#6{
                memDiff += runtime.totalMemory() - runtime.freeMemory();
                logger.info("done (%.3fs elapsed, mem usage %+.1fMB)\n", timeDiff / 1000.0, memDiff / 1048576.0);
}
    
   
  
   







 Instance 11







   
  
   
    
Class540.printMemory(String msg)#1{
        long mem2 = rt.totalMemory() - rt.freeMemory();
        print.f("%s %.3fMB => %.3fMB",
                msg,
                1.0 * mem1 / 1024 / 1024,
                1.0 * mem2 / 1024 / 1024);
}
    
   
  
   







 Instance 12







   
  
   
    
Class230.run()#3{
        peak = Math.max(peak, runtime.totalMemory() - runtime.freeMemory());
}
    
   
  
   







 Instance 13







   
  
   
    
Class270.timerLoop()#0{
                System.out.println("Used memory: " + asMemoryString(runtime.totalMemory() - runtime.freeMemory()) + " Free memory: " + asMemoryString(runtime.freeMemory()) + " Total memory: "
}
    
   
  
   







 Instance 14







   
  
   
    
Class380.debug(String msg,long s)#0{
    long f = new Date().getTime();
    log.trace(msg + " d:" + DurationFormatUtils.formatDurationHMS(f - s) + " m:" + 
        ((runtime.totalMemory() - runtime.freeMemory()) / MB + "mb"));
}
    
   
  
   







 Instance 15







   
  
   
    
Class430.memory(EObject type)#0{
      return ERT.box(runtime.totalMemory()-runtime.freeMemory());
}
    
   
  
   







 Instance 16







   
  
   
    
Class180.testMassiveWriteContainerHistory()#1{
    long usedMemoryAfter = (runtime.totalMemory() - runtime.freeMemory()) / mb;
    Assert.assertTrue((usedMemoryAfter - usedMemoryBefore) < 200);
}
    
   
  
   





