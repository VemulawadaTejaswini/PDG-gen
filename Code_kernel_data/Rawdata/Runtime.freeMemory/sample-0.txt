
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class380.testMemoryLimit(){
    Runtime runtime = Runtime.getRuntime(); 
    return (runtime.maxMemory() - (runtime.totalMemory() - runtime.freeMemory())) < MIN_FREE_MEMORY_BYTES;
}
    
   
  
   







 Instance 1







   
  
   
    
Class390.getAvaibleRAMMeg(){
    Runtime runtime = Runtime.getRuntime();
    long used = (runtime.totalMemory() - runtime.freeMemory()) / MB;
    return runtime.maxMemory() / MB - used;
}
    
   
  
   







 Instance 2







   
  
   
    
Class640.getAvailableMemory(){
    final Runtime r = Runtime.getRuntime();
    final long usedMem = r.totalMemory() - r.freeMemory();
    return r.maxMemory() - usedMem;
}
    
   
  
   







 Instance 3







   
  
   
    
Class390.create(){
        Runtime runtime = Runtime.getRuntime();
        return new MemoryUseMeasurement(runtime.totalMemory() - runtime.freeMemory(), runtime.maxMemory());
}
    
   
  
   







 Instance 4







   
  
   
    
Class480.initOsmAndRoutingConfig(Builder config,final RouteCalculationParams params,OsmandSettings settings,GeneralRouter generalRouter)#4{
    Runtime rt = Runtime.getRuntime();
    int memoryLimit = (int) (0.95 * ((rt.maxMemory() - rt.totalMemory()) + rt.freeMemory()) / mb);
}
    
   
  
   







 Instance 5







   
  
   
    
Class360.executeOnSlave()#6{
         Runtime runtime = Runtime.getRuntime();
         long availableMemory = runtime.freeMemory() + runtime.maxMemory() - runtime.totalMemory();
}
    
   
  
   







 Instance 6







   
  
   
    
Class580.printMemoryFootprint(){
      Runtime run = Runtime.getRuntime();
      String memoryInfo = "Memory - free: " + kbString(run.freeMemory()) + " - max:" + kbString(run.maxMemory()) + "- total:" + kbString(run.totalMemory());
}
    
   
  
   







 Instance 7







   
  
   
    
Class520.setDebugInfo()#0{
    Runtime rt = Runtime.getRuntime();
    info.appendln(
      "Memory: free " + new Size(rt.freeMemory()) + 
      " / total " + new Size(rt.totalMemory()) + 
      " / max " + new Size(rt.maxMemory()));
}
    
   
  
   







 Instance 8







   
  
   
    
Class300.availableMemory(){
    Runtime rt = Runtime.getRuntime();
    return rt.maxMemory() - rt.totalMemory() + rt.freeMemory();
}
    
   
  
   







 Instance 9







   
  
   
    
Class510.showMem(String where){
    Runtime runtime = Runtime.getRuntime();
    System.out.println(where+ " memory free = " + runtime.freeMemory() * .001 * .001 +
        " total= " + runtime.totalMemory() * .001 * .001 +
        " max= " + runtime.maxMemory() * .001 * .001 +
}
    
   
  
   







 Instance 10







   
  
   
    
Class500.generatePdepReactions(Species p_species)#1{
        Runtime runTime = Runtime.getRuntime();
        if (runTime.freeMemory() < runTime.totalMemory() / 3)
            runTime.gc();
}
    
   
  
   







 Instance 11







   
  
   
    
Class70.report(Logger log)#0{
    Runtime r = Runtime.getRuntime();
    log.log(Level.INFO, "Final Memory: {0}M/{1}M", 
            new Object[]{(r.totalMemory() - r.freeMemory()) / 
                    mb, r.totalMemory() / mb});    
}
    
   
  
   







 Instance 12







   
  
   
    
Class60.run()#0{
                        Runtime rt = Runtime.getRuntime();
                        long used = rt.totalMemory() - rt.freeMemory();
                        long total = rt.totalMemory();
                                memory.setText(text);
}
    
   
  
   







 Instance 13







   
  
   
    
Class330.printMemoryUsage(){
    final Runtime runtime = Runtime.getRuntime();
    final long usedMemory = (runtime.totalMemory() - runtime.freeMemory()) / megaUnit;
    final long totalMemory = runtime.totalMemory() / megaUnit;
    console.printf("-- Final Memory: %sM/%sM%n", usedMemory, totalMemory);
}
    
   
  
   







 Instance 14







   
  
   
    
Class340.run()#1{
                    Runtime rt = Runtime.getRuntime();
                    long used = rt.totalMemory() - rt.freeMemory();
                    long total = rt.totalMemory();
}
    
   
  
   







 Instance 15







   
  
   
    
Class40.printMem(String head){
    Runtime runtime = Runtime.getRuntime();
        + (runtime.totalMemory() - runtime.freeMemory()) / mb);
        + runtime.freeMemory() / mb);
}
    
   
  
   







 Instance 16







   
  
   
    
Class170.updatePeakMem(){
    Runtime rt = Runtime.getRuntime();
    long currentUsedMem = (rt.totalMemory() - rt.freeMemory()) / (1024 * 1024);
    if (currentUsedMem > peakMem) {
      peakMem = currentUsedMem;
    }
}
    
   
  
   







 Instance 17







   
  
   
    
Class550.getChildTest()#3{
    Runtime runtime = Runtime.getRuntime();
    LOG.info(String.format("Used Memory = %dB when number of files = %d", runtime.totalMemory()
        - runtime.freeMemory(), nFiles));
}
    
   
  
   







 Instance 18







   
  
   
    
Class610.getMemory()#1{
    Runtime runtime = Runtime.getRuntime();
    long presentMemory = (runtime.totalMemory() - runtime.freeMemory());
    while (presentMemory < memory)
    {
      memory = presentMemory;

            doGarbageCollection();

      presentMemory = (runtime.totalMemory() - runtime.freeMemory());
    }
}
    
   
  
   







 Instance 19







   
  
   
    
Class640.stopMemoryUsage(String message)#0{
        Runtime rt = Runtime.getRuntime();
        long bytes = rt.totalMemory() - rt.freeMemory() - start.longValue();
        trace(
            "{0} bytes for {1}", new Object[] { Long.valueOf(bytes), message }); //$NON-NLS-1$
}
    
   
  
   







 Instance 20







   
  
   
    
Class40.reportMemoryUsage(){
        Runtime r = Runtime.getRuntime();
        return String.valueOf((r.totalMemory() - r.freeMemory()) / (1024 * 1024)) + " MB";
}
    
   
  
   







 Instance 21







   
  
   
    
Class130.evaluate()#4{
                Runtime rt = Runtime.getRuntime();
                long usedKB = (rt.totalMemory() - rt.freeMemory()) / 1024;
                LOG.info("Memory used {}", usedKB);
}
    
   
  
   







 Instance 22







   
  
   
    
Class210.showCorruptionError(Throwable err)#1{
        Runtime runtime = Runtime.getRuntime();
                   +runtime.freeMemory()+"/"+runtime.totalMemory());
        pw.println();
        err.printStackTrace(pw);
        pw.println();
        pw.flush();
}
    
   
  
   







 Instance 23







   
  
   
    
Class180.getMemoryUsage(){
        Runtime runtime = Runtime.getRuntime();
        long freeMemory = runtime.freeMemory();
        long totalMemory = runtime.totalMemory();
        String memoryStatus = usedInMegabytes + "M / " + totalInMegabytes + "M / " + (runtime.maxMemory() / mega) + "M";
        if (usedInMegabytes <= lastUsage - MEMORY_THRESHOLD || usedInMegabytes >= lastUsage + MEMORY_THRESHOLD) {
            Log.info("Memory usage: " + memoryStatus);
            lastUsage = usedInMegabytes;
        }
}
    
   
  
   







 Instance 24







   
  
   
    
Class540.finishModification(DOWriter w,String method)#2{
            Runtime r = Runtime.getRuntime();
            logger.debug("Memory: " + r.freeMemory() + " bytes free of "
                         + r.totalMemory() + " available.");
}
    
   
  
   







 Instance 25







   
  
   
    
Class400.prepare(Map map,TopologyContext tc,OutputCollector collector)#2{
  final Runtime runtime = Runtime.getRuntime();
  final long memory = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 26







   
  
   
    
Class0.collectOperatingSystemCounters(Map scalars)#0{
            Runtime runtime= Runtime.getRuntime();
            addScalar(scalars, InternalDimensions.USED_JAVA_HEAP, runtime.totalMemory() - runtime.freeMemory());
}
    
   
  
   







 Instance 27







   
  
   
    
Class470.invoke(Varargs args)#0{
        Runtime rt = Runtime.getRuntime();
        long used = rt.totalMemory() - rt.freeMemory();
        return varargsOf(valueOf(used/1024.), valueOf(used%1024));
}
    
   
  
   







 Instance 28







   
  
   
    
Class470.updateHeapValue(StringBuilder sb)#1{
        final Runtime runtime = Runtime.getRuntime();
        final long heapMemory = runtime.totalMemory() - runtime.freeMemory();
        appendSize(sb, "Java heap size:          ", heapMemory, "\n");
}
    
   
  
   







 Instance 29







   
  
   
    
Class740.afterChange1(boolean initializing1)#6{
      Runtime runtime = Runtime.getRuntime();
      long memDiff = runtime.totalMemory() - runtime.freeMemory() - startMem;
}
    
   
  
   







 Instance 30







   
  
   
    
Class320.updateTextVeiw()#3{
    Runtime rt = Runtime.getRuntime();
    long vmAlloc =  rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 31







   
  
   
    
Class410.KDDCupDataModel(File dataFile,boolean storeDates,double samplingRate)#4{
    Runtime runtime = Runtime.getRuntime();
    log.info("Loaded data model in about {}MB heap", (runtime.totalMemory() - runtime.freeMemory()) / 1000000);
}
    
   
  
   







 Instance 32







   
  
   
    
Class530.start()#0{
      Runtime r = Runtime.getRuntime();
      startMemory = r.totalMemory() - r.freeMemory();
}
    
   
  
   







 Instance 33







   
  
   
    
Class560.debugHeapUsage()#0{
        Runtime runtime = Runtime.getRuntime();
        X.println('<' + DEBUG_DATE_FMT.format(new Date(System.currentTimeMillis())) + "><DEBUG><" +
            Thread.currentThread().getName() + "> Heap stats [free=" + runtime.freeMemory() / (1024 * 1024) +
            "M, total=" + runtime.totalMemory() / (1024 * 1024) + "M]");
}
    
   
  
   







 Instance 34







   
  
   
    
Class110.printMemoryUsage(int cacheSize)#0{
      Runtime runtime = Runtime.getRuntime();
      long usedMemory = runtime.totalMemory() - runtime.freeMemory();
      log.debugf("Used memory = %d, cache size = %d", usedMemory, cacheSize);
}
    
   
  
   







 Instance 35







   
  
   
    
Class570.updateWorkerMetricsToZK(List<MetricInfo> metricList,boolean metricPerf)#0{
          Runtime rt=Runtime.getRuntime();
          long usedMem = rt.totalMemory() - rt.freeMemory();
          workerMetricInfo.setUsedMem(usedMem);   
}
    
   
  
   







 Instance 36







   
  
   
    
Class180.testMassiveWriteContainerHistory()#2{
    Runtime runtime = Runtime.getRuntime();
    long usedMemoryBefore = (runtime.totalMemory() - runtime.freeMemory()) / mb;
}
    
   
  
   







 Instance 37







   
  
   
    
Class710.used(){
    Runtime runtime = Runtime.getRuntime ();
    return runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 38







   
  
   
    
Class200.updateMem()#1{
    Runtime rt = Runtime.getRuntime();
    long vmAlloc = rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 39







   
  
   
    
Class120.usedMemory(){
    Runtime runtime = Runtime.getRuntime();
    return runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 40







   
  
   
    
Class730.memoryUsed()#0{
    final Runtime runtime = Runtime.getRuntime();
    long mem= runtime.totalMemory()-runtime.freeMemory();
    do {
      Thread.sleep(50);
      System.gc();
      mem= newMem; 
      newMem= runtime.totalMemory()-runtime.freeMemory();
    } while (newMem < mem && ++i<5);
}
    
   
  
   







 Instance 41







   
  
   
    
Class730.formatUsedMemory(){
        final Runtime runtime = Runtime.getRuntime();
        final long usedBytes = runtime.totalMemory() - runtime.freeMemory();
        String formattedUsedMemory = formatMemory(usedBytes);
}
    
   
  
   







 Instance 42







   
  
   
    
Class670.changeTexturePack(TexturePackBase newPack)#4{
                Runtime runtime = Runtime.getRuntime();
                long memDiff = -(runtime.totalMemory() - runtime.freeMemory());
}
    
   
  
   







 Instance 43







   
  
   
    
Class670.serialize(POS pos,DictionaryFileType fileType)#2{
        Runtime rt = Runtime.getRuntime();
        System.out.println("total mem: " + rt.totalMemory() / 1024L + "K free mem: " + rt.freeMemory() / 1024L + "K");
}
    
   
  
   







 Instance 44







   
  
   
    
Class540.printMemory(String msg)#0{
        Runtime rt = Runtime.getRuntime();
        long mem1 = rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 45







   
  
   
    
Class520.usedMemory(){
    Runtime runtime = Runtime.getRuntime();
    return "Used Memory: [" + (runtime.totalMemory() - runtime.freeMemory()) / (1024 * 1024) + " MB] ";
}
    
   
  
   







 Instance 46







   
  
   
    
Class470.updateStats()#3{
    final Runtime runtime = Runtime.getRuntime();
    final long heapMemory = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 47







   
  
   
    
Class250.getUsedMemory(){
        Runtime r = Runtime.getRuntime();
        return r.totalMemory()-r.freeMemory();
}
    
   
  
   







 Instance 48







   
  
   
    
Class280.TestEvent(String token,Description description)#0{
    Runtime runtime = Runtime.getRuntime();
    myMemoryUsage = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 49







   
  
   
    
Class300.getUsedMemory(){
    Runtime r = Runtime.getRuntime();
    long mem = r.totalMemory() - r.freeMemory();
}
    
   
  
   







 Instance 50







   
  
   
    
Class300.stop()#0{
    Runtime r = Runtime.getRuntime();
    endMemory = r.totalMemory() - r.freeMemory();
}
    
   
  
   







 Instance 51







   
  
   
    
Class60.checkFullConf()#10{
        final Runtime runtime = Runtime.getRuntime();
                + (runtime.totalMemory() - runtime.freeMemory()) / mb);
}
    
   
  
   







 Instance 52







   
  
   
    
Class60.runGetFeaturesParsing()#1{
        Runtime runtime = Runtime.getRuntime();
        long initialMem = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 53







   
  
   
    
Class60.updateStatus()#0{
    Runtime rt = Runtime.getRuntime();
    messages[counter] = "Total memory: " + rt.totalMemory()
    + " free memory: " + rt.freeMemory() + " cycles: " + cycles
}
    
   
  
   







 Instance 54







   
  
   
    
Class370.getMemoryUsed()#0{
        Runtime rt = Runtime.getRuntime();
        long mem = rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 55







   
  
   
    
Class50.main(String[] args)#1{
    final Runtime rt = Runtime.getRuntime();
    before = rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 56







   
  
   
    
Class50.printSyncToken(String tokenPrefix,Description description)#5{
    Runtime runtime = Runtime.getRuntime();
    builder.append(":memory=").append(runtime.totalMemory() - runtime.freeMemory());
}
    
   
  
   







 Instance 57







   
  
   
    
Class460.getUsedMemory(){
    Runtime runtime = Runtime.getRuntime();
    return runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 58







   
  
   
    
Class510.memory(){
    final Runtime rt = Runtime.getRuntime();
    return rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 59







   
  
   
    
Class700.usedMemory(){
        Runtime r = Runtime.getRuntime();
        return r.totalMemory() - r.freeMemory();
}
    
   
  
   







 Instance 60







   
  
   
    
Class380.getUsedMemory(){
    Runtime runtime = Runtime.getRuntime();
    return runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 61







   
  
   
    
Class190.create(String token,Description description)#1{
      Runtime runtime = Runtime.getRuntime();
      long memory = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 62







   
  
   
    
Class430.memoryUsed(){
    Runtime rt = Runtime.getRuntime();
    return rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 63







   
  
   
    
Class110.memoryUsed(){
        Runtime rt = Runtime.getRuntime();
        return rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 64







   
  
   
    
Class570.updateStats()#0{
        final Runtime runtime = Runtime.getRuntime();
        final long heapMemory = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 65







   
  
   
    
Class630.memUsage()#0{
    Runtime rt = Runtime.getRuntime();
    return rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 66







   
  
   
    
Class440.runGCUsedMemory()#1{
    Runtime runtime = Runtime.getRuntime();
    long usedMem1 = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 67







   
  
   
    
Class200.memoryUsed(){
    Runtime rt = Runtime.getRuntime();
    return rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 68







   
  
   
    
Class120.memoryUsed(){
        Runtime rt = Runtime.getRuntime();
        return rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 69







   
  
   
    
Class780.detectDebugPreference()#2{
            Runtime rt = Runtime.getRuntime();
            long vmAlloc = rt.totalMemory() - rt.freeMemory();
}
    
   
  
   







 Instance 70







   
  
   
    
Class390.getUsedMemoryMBs(){
  Runtime runtime = Runtime.getRuntime();
  long memory = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 71







   
  
   
    
Class720.memoryUse(Environmental E,int number)#4{
      final Runtime rt = Runtime.getRuntime() ;
      final long m0 =rt.totalMemory() - rt.freeMemory() ;
}
    
   
  
   







 Instance 72







   
  
   
    
Class760.right(HttpServletRequest request,ModelMap model)#1{
    Runtime runtime = Runtime.getRuntime();
    long freeMemoery = runtime.freeMemory();
    long totalMemory = runtime.totalMemory();
    long maxMemory = runtime.maxMemory();
    model.addAttribute("user", user);
    model.addAttribute("flowMap", cmsStatisticSvc.getWelcomeSiteFlowData(site.getId()));
}
    
   
  
   







 Instance 73







   
  
   
    
Class60.mouseClicked(MouseEvent e)#2{
             Runtime currR = Runtime.getRuntime();
             long freeM = currR.freeMemory();
             long totalM = currR.totalMemory();
             long maxM = currR.maxMemory();
             m_logPanel.
             logMessage("[KnowledgeFlow] Memory (free/total/max.) in bytes: " 
                 + String.format("%,d", freeM) + " / " 
                 + String.format("%,d", totalM) + " / " 
                 + String.format("%,d", maxM));
             m_logPanel.statusMessage("[KnowledgeFlow]|Memory (free/total/max.) in bytes: " 
                 + String.format("%,d", freeM) + " / " 
                 + String.format("%,d", totalM) + " / " 
                 + String.format("%,d", maxM)); 
}
    
   
  
   







 Instance 74







   
  
   
    
Class590.drawJVMStatsBox(HTMLNode jvmStatsInfobox,boolean advancedModeEnabled)#0{
    Runtime rt = Runtime.getRuntime();
    long freeMemory = rt.freeMemory();
    long totalMemory = rt.totalMemory();
    long maxMemory = rt.maxMemory();
    int availableCpus = rt.availableProcessors();
}
    
   
  
   







 Instance 75







   
  
   
    
Class280.SysInfo(){
        final Runtime runtime = Runtime.getRuntime();
        freeMB = runtime.freeMemory()/MB;
        totalMB = runtime.totalMemory()/MB;
        maxMB = runtime.maxMemory()/MB;
}
    
   
  
   







 Instance 76







   
  
   
    
Class50.getMemoryState()#1{
    Runtime rt = Runtime.getRuntime();
    return new MemoryState( rt.freeMemory(), rt.totalMemory(), rt.maxMemory() );
}
    
   
  
   







 Instance 77







   
  
   
    
Class480.run()#1{
                    Runtime runtime = Runtime.getRuntime();
                    long free = runtime.freeMemory();
                    long total = runtime.totalMemory();
                    long max = runtime.maxMemory();
}
    
   
  
   







 Instance 78







   
  
   
    
Class0.actionPerformed(ActionEvent ee)#0{
      Runtime currR = Runtime.getRuntime();
      long freeM = currR.freeMemory();
      long totalM = currR.totalMemory();
      long maxM = currR.maxMemory();
      logMessage("Memory (free/total/max.) in bytes: " + printLong(freeM) + " / " + printLong(totalM) + " / " + printLong(maxM));
      statusMessage("Memory (free/total/max.) in bytes: " + printLong(freeM) + " / " + printLong(totalM) + " / " + printLong(maxM));
}
    
   
  
   







 Instance 79







   
  
   
    
Class240.test(String[] args)#0{
        Runtime rt = Runtime.getRuntime();
        long freeMin = rt.freeMemory();
        System.out.println("DEBUG: Free1: "+freeMin+", total: "+rt.totalMemory()+", max: "+rt.maxMemory());
}
    
   
  
   







 Instance 80







   
  
   
    
Class560.run()#0{
            Runtime runtime = Runtime.getRuntime();
            long free = runtime.freeMemory();
            long total = runtime.totalMemory();
            long max = runtime.maxMemory();
}
    
   
  
   







 Instance 81







   
  
   
    
Class20.notifyWriteSpillBegin(Spillable spillable,int spillSize,String spillReason)#1{
      int numFiles = spillable.spillCount();
      if( numFiles % 10 == 0 )
        {
        LOG.info( "spilling group: {}, on grouping: {}, num times: {}, with reason: {}",
          new Object[]{joinField.printVerbose(), spillable.getGrouping().print(), numFiles + 1, spillReason} );

        Runtime runtime = Runtime.getRuntime();
        long freeMem = runtime.freeMemory() / 1024 / 1024;
        long maxMem = runtime.maxMemory() / 1024 / 1024;
        long totalMem = runtime.totalMemory() / 1024 / 1024;

        LOG.info( "mem on spill (mb), free: " + freeMem + ", total: " + totalMem + ", max: " + maxMem );
        }
      LOG.info( "spilling {} tuples in list to file number {}", spillSize, numFiles + 1 );
      flowProcess.increment( Spill.Num_Tuples_Spilled, spillSize );
}
    
   
  
   







 Instance 82







   
  
   
    
Class530.uft(){
    Runtime rt = Runtime.getRuntime();
    long free = rt.freeMemory(), total = rt.totalMemory(), used = total - free;
    return "Used " + nf.format(used) + " - free " + nf.format(free) + " - total " + nf.format(total); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
}
    
   
  
   







 Instance 83







   
  
   
    
Class720.Benchmark(String name,PrintWriter o,PrintWriter l)#4{
    Runtime r = Runtime.getRuntime();
    long fmem = r.freeMemory();
    long tmem = r.totalMemory();
    out.printf("[%,18dus, %,18d b mem]\tStarting (after gc) \n", 0, umem);
}
    
   
  
   







 Instance 84







   
  
   
    
Class320.tearDown()#0{
        Runtime rt = Runtime.getRuntime();
        long free = rt.freeMemory() / 1024;
        long total = rt.totalMemory() / 1024;
}
    
   
  
   







 Instance 85







   
  
   
    
Class770.getValue(){
                      Runtime rt = Runtime.getRuntime(); 
                long freeMemory=rt.freeMemory();
                long totalMemory=rt.totalMemory();
}
    
   
  
   







 Instance 86







   
  
   
    
Class490.getMemoryStats()#0{
        final Runtime runtime = Runtime.getRuntime();
        final long free = runtime.freeMemory() / 1024;
        final long total = runtime.totalMemory() / 1024;
        return "MEMORY - Total: " + fmt.format(total) + "k " + "Used: "
                + fmt.format(used) + "k " + "Free: "
                + fmt.format(free) + "k";
}
    
   
  
   







 Instance 87







   
  
   
    
Class140.endExecution()#3{
            final Runtime runtime = Runtime.getRuntime();
            long          free = runtime.freeMemory() / MB;
            long          total = runtime.totalMemory() / MB;
}
    
   
  
   







 Instance 88







   
  
   
    
Class700.put(Key key,Value value)#0{
      Runtime runtime = Runtime.getRuntime();
      long freeMem = runtime.freeMemory() / 1024 / 1024;
      long maxMem = runtime.maxMemory() / 1024 / 1024;
      long totalMem = runtime.totalMemory() / 1024 / 1024;
      LOG.info( "mem on flush (mb), free: " + freeMem + ", total: " + totalMem + ", max: " + maxMem );
}
    
   
  
   







 Instance 89







   
  
   
    
Class300.uft(){
    Runtime rt = Runtime.getRuntime();
    long free = rt.freeMemory(), total = rt.totalMemory(), used =  total - free;
        return ", used "+nf.format(used)+", free "+nf.format(free)+", total "+nf.format(total); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
}
    
   
  
   







 Instance 90







   
  
   
    
Class340._mark(String s)#0{
    Runtime r = Runtime.getRuntime();
    long fmem = r.freeMemory();
    long tmem = r.totalMemory();
    out.printf("[%,18dns d %,18dns %,18d b mem]\t%s\n", cumulative, delta,
        umem, s);
    values.add("" + umem);
    last = System.nanoTime(); // don't count gc time.
}
    
   
  
   







 Instance 91







   
  
   
    
Class400.run()#6{
        Runtime r = Runtime.getRuntime();
        System.err.print(r.freeMemory());
        System.err.print(r.totalMemory());
}
    
   
  
   







 Instance 92







   
  
   
    
Class520.handleMemory(){
        Runtime runtime = Runtime.getRuntime();
        long freemem = runtime.freeMemory();
        long totalmem = runtime.totalMemory();
}
    
   
  
   







 Instance 93







   
  
   
    
Class100.printMemory(String msg)#1{
        final Runtime rt = Runtime.getRuntime();
        final long freeMemory = rt.freeMemory();
        final long totalMemory = rt.totalMemory();
}
    
   
  
   







 Instance 94







   
  
   
    
Class10.describeMemoryUsage(){
        Runtime runtime = Runtime.getRuntime();
        long free = runtime.freeMemory();
        return String.format(
            "%sM used, %sM free, %sM max",
            (runtime.totalMemory() - free) / 1000000,
            free / 1000000,
            runtime.maxMemory() / 1000000
        );
}
    
   
  
   







 Instance 95







   
  
   
    
Class350.main2(String[] args)#1{
    Runtime lRuntime = Runtime.getRuntime();
    System.out.println("--------------Free Momery:" + lRuntime.freeMemory() + "K");
    System.out.println("--------------Max Momery:" + lRuntime.maxMemory() + "K");
    System.out.println("--------------Total Momery:" + lRuntime.totalMemory() + "K");
    System.out.println("---------------Available Processors :" + lRuntime.availableProcessors());
}
    
   
  
   







 Instance 96







   
  
   
    
Class270.BenchmarkCreator(String label)#0{
    Runtime runtime = Runtime.getRuntime();
    properties.setProperty("java.memory.free",
        String.valueOf(runtime.freeMemory()));
    properties.setProperty("java.memory.total",
        String.valueOf(runtime.totalMemory()));
    properties.setProperty("java.memory.max",
        String.valueOf(runtime.maxMemory()));
    properties.setProperty("java.processors.available",
        String.valueOf(runtime.availableProcessors()));
}
    
   
  
   







 Instance 97







   
  
   
    
Class750.getStats()#2{
        Runtime runtime = Runtime.getRuntime();
        stats.put("jvm_free_memory", String.valueOf(runtime.freeMemory()));
        stats.put("jvm_max_memory", String.valueOf(runtime.maxMemory()));
        stats.put("jvm_total_memory", String.valueOf(runtime.totalMemory()));
}
    
   
  
   







 Instance 98







   
  
   
    
Class720.list()#2{
        Runtime runtime = Runtime.getRuntime();
        put(l, "os.memory.free",
               Long.toString(runtime.freeMemory() / mb) + "MB");
        put(l, "os.memory.max",
               Long.toString(runtime.maxMemory() / mb) + "MB");
        put(l, "os.memory.total",
               Long.toString(runtime.totalMemory() / mb) + "MB");
}
    
   
  
   







 Instance 99







   
  
   
    
Class720.doAction(DebugController.Event e){
        Runtime runt = Runtime.getRuntime();
        e.pw.println(" freeMemory= " + scale * runt.freeMemory() + " Mb");
        e.pw.println(" totalMemory= " + scale * runt.totalMemory() + " Mb");
        e.pw.println(" maxMemory= " + scale * runt.maxMemory() + " Mb");
        e.pw.println(" availableProcessors= " + runt.availableProcessors());
        e.pw.println();
        ServletUtil.showThreads(e.pw);
}
    
   
  
   







 Instance 100







   
  
   
    
Class600.SeededSecureRandom()#4{
            Runtime runtime = Runtime.getRuntime();
            setSeed(runtime.freeMemory());
            setSeed(runtime.maxMemory());
            setSeed(runtime.totalMemory());
}
    
   
  
   







 Instance 101







   
  
   
    
Class430.Report(Throwable t)#0{
  Runtime rt = Runtime.getRuntime();
  props.put("mem.free", rt.freeMemory());
  props.put("mem.total", rt.totalMemory());
  props.put("mem.max", rt.maxMemory());
}
    
   
  
   







 Instance 102







   
  
   
    
Class350.getContent(RunData rundata)#2{
      Runtime jvm = Runtime.getRuntime();
      table.addElement(new TR().addElement(new TD("Free Memory (in bytes)"))
          .addElement(new TD(Long.toString(jvm.freeMemory()))));
      table.addElement(new TR().addElement(new TD("Total Memory (in bytes)"))
          .addElement(new TD(Long.toString(jvm.totalMemory()))));
}
    
   
  
   







 Instance 103







   
  
   
    
Class660.updateStats(){
        Runtime runtime = Runtime.getRuntime();
        totalMem = runtime.totalMemory();
        long freeMem = runtime.freeMemory();
        if (convertToMeg(prevUsedMem) != convertToMeg(usedMem)) {
            prevUsedMem = usedMem;
            this.hasChanged = true;
        }
        if (prevTotalMem != totalMem) {
            prevTotalMem = totalMem;
            this.hasChanged = true;
        }
}
    
   
  
   







 Instance 104







   
  
   
    
Class380.updateState()#0{
    final Runtime runtime = Runtime.getRuntime();
    final long total = runtime.totalMemory() / MEGABYTE;
    final long used = total - runtime.freeMemory() / MEGABYTE;
    if (total != myLastTotal || used != myLastUsed) {
      myLastTotal = total;
      myLastUsed = used;
      //noinspection SSBasedInspection
      SwingUtilities.invokeLater(new Runnable() {
        public void run() {
          myBufferedImage = null;
          repaint();
        }
      });

      setToolTipText(UIBundle.message("memory.usage.panel.statistics.message", total, used));
    }
}
    
   
  
   







 Instance 105







   
  
   
    
Class660.showmem()#1{
    rt = Runtime.getRuntime();
        long    totalMemory = rt.totalMemory();
        long    freeMemory = rt.freeMemory();
}
    
   
  
   







 Instance 106







   
  
   
    
Class570.memPrint(){
    Runtime runtime = Runtime.getRuntime();
    long total = runtime.totalMemory();
    long free = runtime.freeMemory();
}
    
   
  
   







 Instance 107







   
  
   
    
Class770.getMemoryInUse()#0{
    Runtime runtime = Runtime.getRuntime();
    long total = runtime.totalMemory();
    long free = runtime.freeMemory();
}
    
   
  
   







 Instance 108







   
  
   
    
Class180.checkAvailableMemory(int neededMemory,TestResult testResult)#3{
        Runtime runtime = Runtime.getRuntime();
        long total = runtime.totalMemory();
        long free = runtime.freeMemory();
        addErrorMessage(testResult, errorMessage);
}
    
   
  
   







 Instance 109







   
  
   
    
Class660.getMemory()#0{
        Runtime runtime = Runtime.getRuntime();
        long jvmTotal = runtime.totalMemory() / 1024 / 1024;
        long jvmFree = runtime.freeMemory() / 1024 / 1024;
}
    
   
  
   







 Instance 110







   
  
   
    
Class450.analyzeMemory()#2{
    Runtime runtime = Runtime.getRuntime();  
    double allocatedMemory = runtime.totalMemory() / (double) 1024;  
    double freeMemory = runtime.freeMemory() / (double) 1024;
}
    
   
  
   







 Instance 111







   
  
   
    
Class730.printMemoryInfo()#1{
        Runtime rt = Runtime.getRuntime();
        long total = rt.totalMemory();
        long free = rt.freeMemory();
}
    
   
  
   







 Instance 112







   
  
   
    
Class330.actionPerformed(ActionEvent e)#1{
            Runtime jvm = Runtime.getRuntime();
            long totalMemory = jvm.totalMemory();
            long usedMemory = totalMemory-jvm.freeMemory();
}
    
   
  
   







 Instance 113







   
  
   
    
Class90.printMemory(Class<? extends Test> testClass)#0{
                Runtime runtime = Runtime.getRuntime();
                long total = runtime.totalMemory();
                long free = runtime.freeMemory();
                Log.d(TAG, "Free memory   : " + free);
}
    
   
  
   







 Instance 114







   
  
   
    
Class600.printMemoryUsed()#1{
        Runtime rT = Runtime.getRuntime();
        tM = rT.totalMemory() / 1.0e6;
        fM = rT.freeMemory() / 1.0e6;
}
    
   
  
   







 Instance 115







   
  
   
    
Class190.run()#3{
                    Runtime rt = Runtime.getRuntime();
                    byte[] memBytes = longToByteArray(rt.totalMemory());
                    md.update(memBytes, 0, memBytes.length);
                    memBytes = longToByteArray(rt.freeMemory());
                    md.update(memBytes, 0, memBytes.length);
}
    
   
  
   







 Instance 116







   
  
   
    
Class370.run()#2{
                    Runtime rt = Runtime.getRuntime();
                    byte[] memBytes = longToByteArray(rt.totalMemory());
                    md.update(memBytes, 0, memBytes.length);
                    memBytes = longToByteArray(rt.freeMemory());
                    md.update(memBytes, 0, memBytes.length);
}
    
   
  
   







 Instance 117







   
  
   
    
Class780.execute()#0{
            final Runtime rt = Runtime.getRuntime();
            out.format(fmt_out, str_mem_size, NumberUtils.toBinaryByte(rt.totalMemory()));
            out.format(fmt_out, str_mem_free, NumberUtils.toBinaryByte(rt.freeMemory()));
            out.println(str_start);
}
    
   
  
   







 Instance 118







   
  
   
    
Class460.retrieve()#0{
        Runtime runtime = Runtime.getRuntime();
        model.put("total", new Long(runtime.totalMemory()));
        model.put("free", new Long(runtime.freeMemory()));
}
    
   
  
   







 Instance 119







   
  
   
    
Class240.build()#1{
    final Runtime rt = Runtime.getRuntime();
    final long max = Math.min(1 << 22, rt.maxMemory() - rt.freeMemory() >> 2);
    int bs = (int) Math.min(meta.filesize, max);
    bs = Math.max(IO.BLOCKSIZE, bs - bs % IO.BLOCKSIZE);
}
    
   
  
   







 Instance 120







   
  
   
    
Class100.create(int rows,int cols,boolean isDense)#3{
        Runtime r = Runtime.getRuntime();
        long available = r.freeMemory();
        if (size < available) {
            if (isDense) {
                if (size > Integer.MAX_VALUE) {
                    LOGGER.finer("too big for ArrayMatrix; creating new " + 
                         "OnDiskMatrix");
                    return new OnDiskMatrix(rows, cols);
                } else {
                    LOGGER.finer("creating new (in memory) ArrayMatrix");
                    return new ArrayMatrix(rows, cols);
                }
            } else {
                LOGGER.finer("can fit sparse in memory; creating " + 
                         "new SparseMatrix");
                return new YaleSparseMatrix(rows, cols);
            }
        } else { 
            // won't fit into memory
            LOGGER.finer("cannot fit in memory; creating new OnDiskMatrix");
            return new OnDiskMatrix(rows, cols);
        }
}
    
   
  
   







 Instance 121







   
  
   
    
Class50.runFinalizerIfNeeded()#0{
        Runtime rt = Runtime.getRuntime();
        if (rt.freeMemory() < HALFMB){
            println("Waiting for finalizer ");
            rt.runFinalization();
            

        }
}
    
   
  
   







 Instance 122







   
  
   
    
Class310.checkMemoryUsage(){
    Runtime runtime = Runtime.getRuntime();
    runtime.gc();
    long memory = runtime.totalMemory() - runtime.freeMemory();
}
    
   
  
   







 Instance 123







   
  
   
    
Class240.run()#0{
            Runtime runtime = Runtime.getRuntime();
            int freeMemory = (int) (runtime.freeMemory() / 1000000);
}
    
   
  
   







 Instance 124







   
  
   
    
Class30.getValue(){
        Runtime runtime = Runtime.getRuntime();
        return Long.valueOf(runtime.freeMemory());
}
    
   
  
   







 Instance 125







   
  
   
    
Class400.gc()#0{
        Runtime rt = Runtime.getRuntime();
        long freeMem0 = rt.freeMemory();
        while (freeMem0 < freeMem && cnt < GC_CALL_CNT) {
            System.gc();

            U.sleep(WAIT_TIME);

            cnt++;

            freeMem = freeMem0;
            freeMem0 = rt.freeMemory();
        }
}
    
   
  
   







 Instance 126







   
  
   
    
Class620.run()#2{
        Runtime runtime = Runtime.getRuntime();
        double freeMemory = (double) runtime.freeMemory() / (1024 * 1024);
}
    
   
  
   







 Instance 127







   
  
   
    
Class550.main(String[] args)#0{
    Runtime run = Runtime.getRuntime();
    double freeMemory = (double) run.freeMemory() / (1024 * 1024);
}
    
   
  
   







 Instance 128







   
  
   
    
Class520.freeMemoryAndFinalize()#3{
        Runtime rt = Runtime.getRuntime();
        long mem = rt.freeMemory();
}
    
   
  
   







 Instance 129







   
  
   
    
Class250.getAvailableMemory(){
        Runtime r = Runtime.getRuntime();
        return r.freeMemory();
}
    
   
  
   







 Instance 130







   
  
   
    
Class230.testLifecycle()#0{
    Runtime rt = Runtime.getRuntime();
    long startFreeMem = rt.freeMemory();
}
    
   
  
   







 Instance 131







   
  
   
    
Class300.dumpMemoryStats(String s){
        Runtime rt = Runtime.getRuntime();
            rt.freeMemory() + " bytes free");
}
    
   
  
   







 Instance 132







   
  
   
    
Class560.betweenBenchmarks()#0{
      Runtime runtime = Runtime.getRuntime();
      System.out.println("freeMemory before gc: " + runtime.freeMemory());
}
    
   
  
   







 Instance 133







   
  
   
    
Class630.getFreeMemory(){
    Runtime r = Runtime.getRuntime();
      return r.freeMemory();
}
    
   
  
   







 Instance 134







   
  
   
    
Class180.showMemoryUsage(String msg)#0{
    Runtime rt = Runtime.getRuntime();
    long last = rt.freeMemory();
}
    
   
  
   







 Instance 135







   
  
   
    
Class710.getFreeMemory(){
    Runtime rt = Runtime.getRuntime();
    return rt.freeMemory() / MBFactor;
}
    
   
  
   







 Instance 136







   
  
   
    
Class710.free(){
    Runtime runtime = Runtime.getRuntime ();
    return runtime.freeMemory();
}
    
   
  
   







 Instance 137







   
  
   
    
Class200.mapFile(String id)#2{
    Runtime rt = Runtime.getRuntime();
    long maxMem = rt.freeMemory();
}
    
   
  
   







 Instance 138







   
  
   
    
Class640.canFitInMemory(long bufferSize)#0{
    Runtime r = Runtime.getRuntime();
    long mem = r.freeMemory() / 2;
}
    
   
  
   







 Instance 139







   
  
   
    
Class30.getMemInfo(){
    rt = Runtime.getRuntime();
    rt.gc();
        + rt.totalMemory()
        + rt.freeMemory();
}
    
   
  
   







 Instance 140







   
  
   
    
Class20.cache(final Parser parser)#1{
    final Runtime rt = Runtime.getRuntime();
    final long max = rt.maxMemory();
    if(fl < (max - rt.freeMemory()) / 2) return false;
}
    
   
  
   







 Instance 141







   
  
   
    
Class80.initializeMemory(){
    Runtime rt = Runtime.getRuntime();
    setMaximumHeapSize(rt.maxMemory());
    setFreeHeapSize(rt.freeMemory());
}
    
   
  
   







 Instance 142







   
  
   
    
Class30.runCommand(String arg)#0{
    Runtime run = Runtime.getRuntime();
    Process p = run.exec(arg);
    String strReturn = run(p);
    run.freeMemory();
}
    
   
  
   







 Instance 143







   
  
   
    
Class510.runCommand(String[] args)#0{
    Runtime run = Runtime.getRuntime();
    Process p = run.exec(args);
    String strReturn = run(p);
    run.freeMemory();
}
    
   
  
   





