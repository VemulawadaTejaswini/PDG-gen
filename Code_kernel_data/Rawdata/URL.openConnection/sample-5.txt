
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class830.createHttpConnection(URI uri)#1{
    URL url = uri.toURL();
    HttpsURLConnection connection = (HttpsURLConnection) url
        .openConnection();
}
    
   
  
   







 Instance 1







   
  
   
    
Class400.openConnection(String hostname,int port,String path)#0{
      final URL url = new URI("https", null, hostname, port, path, null, null)
          .toURL();
      HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
}
    
   
  
   







 Instance 2







   
  
   
    
Class1130.getSensorDetails(URL target,String url)#1{
        HttpsURLConnection c = (HttpsURLConnection) target.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(
                c.getInputStream()));
}
    
   
  
   







 Instance 3







   
  
   
    
Class1070.performOAuthValidation(URL url)#0{
        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
}
    
   
  
   







 Instance 4







   
  
   
    
Class110.openConnection(String path,String query)#0{
      final URL url = new URI("https", null, nnAddr.getHostName(),
          nnAddr.getPort(), path, query, null).toURL();
      HttpsURLConnection conn = (HttpsURLConnection)url.openConnection();
}
    
   
  
   







 Instance 5







   
  
   
    
Class470.getDefaultSubtitleData(long id)#3{
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setConnectTimeout(8000);
            return connection.getInputStream();
}
    
   
  
   







 Instance 6







   
  
   
    
Class460.getSecureConnectionWithAuth(URL url,String user,String pass)#2{
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
}
    
   
  
   







 Instance 7







   
  
   
    
Class940.getSecureConnection(URL url)#1{
        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
}
    
   
  
   







 Instance 8







   
  
   
    
Class1040.connect(URL aUrl){
        HttpsURLConnection connection = (HttpsURLConnection) aUrl.openConnection();
        connection.setSSLSocketFactory(sslSocketFactory);
}
    
   
  
   







 Instance 9







   
  
   
    
Class1260.testProxyWithConnectionClose()#4{
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection(
                server.toProxyAddress());
        connection.setRequestProperty("Connection", "close");
}
    
   
  
   







 Instance 10







   
  
   
    
Class180.doClientSide()#1{
        http = (HttpsURLConnection)url.openConnection();
        int respCode = http.getResponseCode();
        http.disconnect();
}
    
   
  
   







 Instance 11







   
  
   
    
Class1130.pushData(URL target,String data)#1{
        HttpsURLConnection c = (HttpsURLConnection) target.openConnection();
        c.setDoOutput(true);
        c.setRequestMethod("PUT");
        c.addRequestProperty("Content-type", "application/json");
        OutputStreamWriter wr = new OutputStreamWriter(c.getOutputStream());
        wr.write(data);
        wr.flush();
}
    
   
  
   







 Instance 12







   
  
   
    
Class500.testProxiesSeleniumStaticResourcesWithUpstreamProxy()#0{
        target.openConnection(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", port)));
    TrustEverythingSSLTrustManager.trustAllSSLCertificates((HttpsURLConnection) client);
    assertTrue(getResponseAsString(client).contains("<body>"));
}
    
   
  
   







 Instance 13







   
  
   
    
Class1140.createConnection(URL url){
    return (HttpsURLConnection) url.openConnection();
}
    
   
  
   







 Instance 14







   
  
   
    
Class840.createConnection(String clientName,URL url)#1{
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();  
}
    
   
  
   







 Instance 15







   
  
   
    
Class1520.postMultipartRequest(String endpoint)#1{
    mUrlConnection = (HttpsURLConnection) ( new URL(endpoint)).openConnection();
    mUrlConnection.setDoOutput(true);
    mUrlConnection.setRequestMethod("POST");
    mUrlConnection.setDoInput(true);
    mUrlConnection.setRequestProperty("Authorization", "Bearer " + mAccessToken);
    mUrlConnection.connect();
    mOutputStream = mUrlConnection.getOutputStream();
}
    
   
  
   







 Instance 16







   
  
   
    
Class450.setUp()#3{
        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
}
    
   
  
   







 Instance 17







   
  
   
    
Class620.readOut(URL url)#2{
    HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
}
    
   
  
   





