
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class90.removeServer(URI uri){
            return new URI(null, null, null, -1, uri.getPath(), uri.getQuery(), uri.getFragment());
            throw new InvalidUriException(e);
}
    
   
  
   







 Instance 1







   
  
   
    
Class40.getUriWithScheme(final URI uri,final String scheme){
        if (uri == null) {
            return null;
        }
                    uri.getUserInfo(),
                    uri.getHost(),
                    uri.getPort(),
                    uri.getPath(),
                    uri.getQuery(),
                    uri.getFragment());
            throw new RuntimeException("Could not parse URI.", e);
}
    
   
  
   







 Instance 2







   
  
   
    
Class240.decodeHarURI(URI rawURI,Configuration conf)#0{
    String tmpAuth = rawURI.getAuthority();
    if (tmpAuth == null) {
      //create a path
      return FileSystem.getDefaultUri(conf);
    }
    String host = rawURI.getHost();
    String[] str = host.split("-", 2);
    if (str[0] == null) {
      throw new IOException("URI: " + rawURI + " is an invalid Har URI.");
    }
    int underLyingPort = rawURI.getPort();
    String auth = (underLyingHost == null && underLyingPort == -1)?
                  null:(underLyingHost+":"+underLyingPort);
    if (rawURI.getQuery() != null) {
      // query component not allowed
      throw new IOException("query component in Path not supported  " + rawURI);
    }
      tmp = new URI(underLyingScheme, auth, rawURI.getPath(),
            rawURI.getQuery(), rawURI.getFragment());
}
    
   
  
   







 Instance 3







   
  
   
    
Class290.appendAccessTokenToQuery(HttpRequestBase request,OAuthBearerClientRequest oAuthClientRequest)#1{
        URI oldUri = request.getURI();
        String requestQueryString = oldUri.getQuery() != null ? oldUri.getQuery() + "&" + queryString : queryString;
            request.setURI(URIUtils.createURI(oldUri.getScheme(), oldUri.getHost(), oldUri.getPort(),
                    oldUri.getRawPath(), requestQueryString, oldUri.getFragment()));
}
    
   
  
   







 Instance 4







   
  
   
    
Class10.decodeHarURI(URI rawURI,Configuration conf)#0{
    String tmpAuth = rawURI.getAuthority();
    if (tmpAuth == null) {
      //create a path 
      return FileSystem.getDefaultUri(conf);
    }
    String host = rawURI.getHost();
    if (host == null) {
      throw new IOException("URI: " + rawURI
          + " is an invalid Har URI since host==null."
          + "  Expecting har://<scheme>-<host>/<path>.");
    }
    int i = host.indexOf('-');
    if (i < 0) {
      throw new IOException("URI: " + rawURI
          + " is an invalid Har URI since '-' not found."
          + "  Expecting har://<scheme>-<host>/<path>.");
    }
    final String underLyingScheme = host.substring(0, i);
    final String underLyingHost = i == host.length()? null: host.substring(i);
    int underLyingPort = rawURI.getPort();
    String auth = (underLyingHost == null && underLyingPort == -1)?
                  null:(underLyingHost+":"+underLyingPort);
    if (rawURI.getQuery() != null) {
      // query component not allowed
      throw new IOException("query component in Path not supported  " + rawURI);
    }
      tmp = new URI(underLyingScheme, auth, rawURI.getPath(), 
            rawURI.getQuery(), rawURI.getFragment());
}
    
   
  
   







 Instance 5







   
  
   
    
Class240.normalize(URI uri)#2{
                uri.getPath(), uri.getQuery(), uri.getFragment());
            throw new IOException("Failed to normalize URI: " + uri, e);
}
    
   
  
   







 Instance 6







   
  
   
    
Class160.reconstructAuthorityIfNeeded(URI uri,Configuration conf)#3{
              uri.getPath(), uri.getQuery(), uri.getFragment());
          throw new Error("Bad URI construction", e);
}
    
   
  
   







 Instance 7







   
  
   
    
Class340.chatLinkClicked(URI url)#0{
        String action = url.getPath();
        if (action.equals("/SHOWPREVIEW"))
        {
            currentMessageID = url.getQuery();
            currentLinkPosition = url.getFragment();

            this.setVisible(true);
            this.setLocationRelativeTo(chatPanel);
        }
}
    
   
  
   







 Instance 8







   
  
   
    
Class440.changeScheme(URI uri,String newScheme){
    return create(newScheme, getCorrectAuthority(uri), uri.getPath(), uri.getQuery(), uri.getFragment());
}
    
   
  
   







 Instance 9







   
  
   
    
Class310.parse(String tag)#5{
        URI u = URI.create(t);
        path = u.getPath();
        fragment = u.getFragment();
        query = u.getQuery();        
}
    
   
  
   







 Instance 10







   
  
   
    
Class300.normalize(final URI uri)#3{
        String resultString = createURIWithStringValues(
                uri.getScheme(), uri.getAuthority(), null, null, null, pathBuilder.toString(), uri.getQuery(),
                uri.getFragment(), EMPTY_VALUES, false, false);
        return URI.create(resultString);
}
    
   
  
   







 Instance 11







   
  
   
    
Class130.removeDotSegments(URI uri)#8{
              outputBuffer.toString(), uri.getQuery(), uri.getFragment());
      throw new IllegalArgumentException(e);
}
    
   
  
   







 Instance 12







   
  
   
    
Class120.relativize(final URI a,URI b)#5{
            return new URI(null, null, Join.join("/", path), b.getQuery(), b.getFragment());
            throw new IllegalArgumentException(e);
}
    
   
  
   







 Instance 13







   
  
   
    
Class180.removeDotSegments(URI uri)#4{
            return new URI(uri.getScheme(), uri.getAuthority(), outputBuffer.toString(), uri.getQuery(), uri
                    .getFragment());
            throw new IllegalArgumentException(e);
}
    
   
  
   







 Instance 14







   
  
   
    
Class60.normalize(URI location)#1{
                return new URI(location.getScheme(), location.getAuthority(), path.substring(0, path.length() - 1),
                        location.getQuery(), location.getFragment());
            throw new RuntimeException(e);
}
    
   
  
   







 Instance 15







   
  
   
    
Class410.changePath(URI uri,String newPath){
    return create(uri.getScheme(), getCorrectAuthority(uri), newPath, uri.getQuery(), uri.getFragment());
}
    
   
  
   







 Instance 16







   
  
   
    
Class230.resolve(String relUri,URI base)#2{
                        uri.getQuery(), uri.getFragment());
                throw new InvalidUriException(e);
}
    
   
  
   







 Instance 17







   
  
   
    
Class190.resolveURI(@NotNull URI endpointURI,@Nullable String pathInfo,@Nullable String queryString)#3{
            query = result.getQuery();
            fragment = result.getFragment();
}
    
   
  
   







 Instance 18







   
  
   
    
Class360.innerHandleMethodGET(URI uri,HTTPRequest httprequest,ToadletContext ctx,int recursion)#58{
        throw new RedirectException(new URI(null, null, null, -1, welcome.getPath(), uri.getQuery(), uri.getFragment()));
}
    
   
  
   





