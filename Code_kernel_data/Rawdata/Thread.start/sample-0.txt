
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class610.create(final boolean catchFinalizer){
            Thread t = new Thread(new Runnable() {
                public void run() {
                    new Foo(catchFinalizer);
                }});
            t.start();
            t.join();
}
    
   
  
   







 Instance 1







   
  
   
    
Class770.testSetupUncaughtExceptionHandler()#1{
        Thread t = new Thread(new Runnable() {@Override public void run() {
            throw new RuntimeException();
        }});
        t.start();
        t.join();
}
    
   
  
   







 Instance 2







   
  
   
    
Class230.isSpecificToTheCurrentThread()#1{
            Thread t = new Thread(new Runnable() {
                public void run() {
                    ThreadContext.setUp(myContext);
                }
            });
            t.start();
            t.join();
}
    
   
  
   







 Instance 3







   
  
   
    
Class0.LeaseHolder(ThreadGroup threadGroup)#0{
      leaseMonitorThread = new Thread(threadGroup, new LeaseMonitor());
      leaseMonitorThread = new Thread(new LeaseMonitor());
    leaseMonitorThread.start();
}
    
   
  
   







 Instance 4







   
  
   
    
Class140.actionPerformed(ActionEvent e){
            if (audioRunnable == null) {
                audioRunnable = (Runnable)Toolkit.getDefaultToolkit().getDesktopProperty(audioResource);
            }
            if (audioRunnable != null) {
                // Runnable appears to block until completed playing, hence
                // start up another thread to handle playing.
                new Thread(audioRunnable).start();
            }
}
    
   
  
   







 Instance 5







   
  
   
    
Class200.onFocusChange(View v,boolean hasFocus){
                if (!hasFocus && (null != dotGenerator)) {
                    dotGenerator.done();
                    dotGenerator = null;
                }
                else if (hasFocus && (null == dotGenerator)) {
                    dotGenerator
                    = new DotGenerator(dotModel, dotView, Color.BLACK);
                    new Thread(dotGenerator).start();
                }
}
    
   
  
   







 Instance 6







   
  
   
    
Class570.readBlockingToEmptyBuffer(){
        connectedChannelMock.setReadData("can't read this");
        ReadBlocking readRunnable = new ReadBlocking(connectedChannelMock, Buffers.EMPTY_BYTE_BUFFER);
        Thread readThread = new Thread(readRunnable);
        readThread.start();
        readThread.join();
        assertFalse(readThread.isAlive());
        assertEquals(0, readRunnable.getReadResult());
}
    
   
  
   







 Instance 7







   
  
   
    
Class410.onOpenEvent(OpenEvent event){
    if (event.isNew()) eventCache.add(event);
    new Thread(new OpenEventNotifier(event)).start();
}
    
   
  
   







 Instance 8







   
  
   
    
Class220.onStartCommand(Intent intent,int flags,int requestId){
        if (isSelfStartCommand(intent)) {
            mStarted = requestId;
        } else {
            new Thread(new RemoteControlButtonTask(intent, this, requestId))
                    .start();
        }
}
    
   
  
   







 Instance 9







   
  
   
    
Class120.start()#1{
    if (videoManager != null)
      new Thread(videoManager).start();
}
    
   
  
   







 Instance 10







   
  
   
    
Class230.awaitReadCloses()#0{
        final Pipe pipe = new Pipe(100);
        final Thread awaitThread = new Thread(new AwaitTask(pipe));
        awaitThread.start();
        awaitThread.join(200);
        assertTrue(awaitThread.isAlive());
        close(pipe.getIn());
}
    
   
  
   







 Instance 11







   
  
   
    
Class410.executeRunnable(Runnable runnable){
        if (runnable != null) {
            Thread thread = new Thread(runnable);
            thread.start();
        } else {
        }
}
    
   
  
   







 Instance 12







   
  
   
    
Class700.startHistoryUpdaterRunnable(String title,String url,String originalUrl){
      if ((url != null) &&
          (url.length() > 0)) {
        new Thread(new HistoryUpdater(this, title, url, originalUrl)).start();
      }
}
    
   
  
   







 Instance 13







   
  
   
    
Class120.start()#0{
    if (navdataManager != null)
      new Thread(navdataManager).start();
}
    
   
  
   







 Instance 14







   
  
   
    
Class120.start()#2{
    if (manager != null)
      new Thread(manager).start();
}
    
   
  
   







 Instance 15







   
  
   
    
Class500.main(String[] args)#0{
        Thread thread = new Thread(group, new Test6657026());
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 16







   
  
   
    
Class620.runTestScript(){
        Thread thread = new Thread(new ScriptRunner(testScript));
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 17







   
  
   
    
Class110.handleNotification(Notification n,Object h)#0{
                        Thread t = new Thread(sensitiveThing);
                        t.start();
                            t.join();
}
    
   
  
   







 Instance 18







   
  
   
    
Class20.main(String[] args)#0{
        ThreadGroup group = new ThreadGroup("$$$"); // NON-NLS: unique thread name
        Thread thread = new Thread(group, test);
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 19







   
  
   
    
Class20.main(String[] args)#1{
        Thread thread = new Thread(group, new TestGuiAvailable());
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 20







   
  
   
    
Class450.startDownload(){
    if (mRunnable != null) {
      mRunnable.abort();
    }
    mRunnable = new DownloadRunnable(this);
    new Thread(mRunnable).start();
}
    
   
  
   







 Instance 21







   
  
   
    
Class560.newCis(String cisId)#0{
        if(cpaMap.containsKey(cisId)) return;
        CPA newCPA = new CPA(collector,cisId);
        Thread t = new Thread(newCPA);
        t.start();
}
    
   
  
   







 Instance 22







   
  
   
    
Class660.scaleToWatermark(String context,int width,int height,String targetPath,String watermark)#1{
    String sourcePath = this.getFullFileSystemPath();
    if (!Shepherd.isAcceptableImageFile(sourcePath)) return false;
    ImageProcessor iproc = new ImageProcessor(context, "watermark", width, height, sourcePath, targetPath, watermark);
    Thread t = new Thread(iproc);
    t.start();
}
    
   
  
   







 Instance 23







   
  
   
    
Class10.getInstance(){
    if(singleton == null)
    {
      singleton = new PageCacheHelper();
      new Thread(singleton).start();
    }
}
    
   
  
   







 Instance 24







   
  
   
    
Class50.getInstance(){
      if(instance == null)
      {
        instance = new LiveInstanceMonitor();
        Thread thread = new Thread(instance);
      thread.start();
      }
}
    
   
  
   







 Instance 25







   
  
   
    
Class500.main(String[] args)#0{
        Thread thread = new Thread(group, new Test6657026());
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 26







   
  
   
    
Class50.open(){
        if (proxyUrl == null) {
            serverSocket = new ServerSocket(listenPort);
            proxyUrl = urlFromSocket(target, serverSocket);
        } else {
            serverSocket = new ServerSocket(proxyUrl.getPort());
        }
        acceptor = new Acceptor(serverSocket, target);
        new Thread(null, acceptor, "SocketProxy-Acceptor-" + serverSocket.getLocalPort()).start();
}
    
   
  
   







 Instance 27







   
  
   
    
Class780.beforeClass()#1{
      Thread t = new Thread() {
        public void run() {
          throw new RuntimeException("foobar");
        }
      };
      t.start();
      t.join();
}
    
   
  
   







 Instance 28







   
  
   
    
Class800.main(String[] args)#0{
        Thread thread = new Thread(group, new Test6660539());
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 29







   
  
   
    
Class110.getThing()#0{
            Thread t = new Thread(runWithinGetAttribute);
            t.start();
                t.join();
}
    
   
  
   







 Instance 30







   
  
   
    
Class70.testUncaughtException()#0{
    Thread t = new Thread() {
      @Override
      public void run() {
        throw new RuntimeException("foobar");
      }
    };
    t.start();
    t.join();
}
    
   
  
   







 Instance 31







   
  
   
    
Class750.main(String[] args)#0{
        Thread thread = new Thread(group, new TestDesignTime());
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 32







   
  
   
    
Class150.runOnSeparateThread(final Runnable runnable)#0{
        Thread thread = new Thread(runnable);
        thread.start();
            thread.join();
}
    
   
  
   







 Instance 33







   
  
   
    
Class10.execute(Runnable command)#0{
      Thread myThread = new Thread(command);
      myThread.start();
        myThread.join();
}
    
   
  
   







 Instance 34







   
  
   
    
Class530.quit()#0{
    Thread t = new Thread(new Runnable() {
      public void run() {
        Game.getInstance().quit();
      }
    });
    t.start();
}
    
   
  
   







 Instance 35







   
  
   
    
Class460.startSearching(final AuctionHouse auctionHouse,final Set<String> keywords)#1{
        Thread searchThread = new Thread(new Runnable() {
            public void run() {
                search(auctionHouse, keywords);
            }
        });
        searchThread.start();
}
    
   
  
   







 Instance 36







   
  
   
    
Class350.runInNewThread(final Runnable command,final Executor executor)#0{
        Thread t = new Thread(new Runnable() {
            public void run() {
                executor.execute(command);
            }
        });
        t.start();
}
    
   
  
   







 Instance 37







   
  
   
    
Class260.actionPerformed(final ActionEvent e)#0{
                        final Thread thread = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                addInterface(type);
                            }
                        });
                        thread.start();
}
    
   
  
   







 Instance 38







   
  
   
    
Class380.run()#0{
                        final Thread t = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                addDomainPanel();
                            }
                        });
                        t.start();
}
    
   
  
   







 Instance 39







   
  
   
    
Class770.initDialogAfterVisible()#0{
        final Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                connectHosts();
            }
        });
        t.start();
}
    
   
  
   







 Instance 40







   
  
   
    
Class770.actionPerformed(final ActionEvent e)#0{
                final Thread thread = new Thread(
                    new Runnable() {
                        @Override
                        public void run() {
                            addClusterDialogProvider.get().showDialogs();
                        }
                    });
                thread.start();
}
    
   
  
   







 Instance 41







   
  
   
    
Class630.initDialogAfterVisible()#0{
        final Thread thread = new Thread(
            new Runnable() {
                @Override
                public void run() {
                    connectHost();
                }
            });
        thread.start();
}
    
   
  
   







 Instance 42







   
  
   
    
Class510.startService()#0{
        NameRegistrar.register (getName (), task);
        if (task instanceof Runnable) {
            new Thread ((Runnable) task).start ();
        }
}
    
   
  
   







 Instance 43







   
  
   
    
Class140.run(Boolean aBoolean){
                if (System.getProperty("model.debug.port") != null) {
                    port = Integer.parseInt(System.getProperty("model.debug.port"));
                }
                Log.info("Start management port on {}", port);
                Thread server = new Thread(new JeroMQCoreWrapper(core, port));
                server.start();
}
    
   
  
   







 Instance 44







   
  
   
    
Class570.maybePerformUpdateCheck(Shell shell,int buildNumber){
    final IPreferenceStore preferences = Activator.getDefault().getPreferenceStore();
    if(preferences.getBoolean(IPreferenceConstants.P_UPDATE_CHECK_ENABLED) && (buildNumber != 0)) {
      final UpdateCheckTask task = new UpdateCheckTask(shell, buildNumber);
      final Thread thread = new Thread(task);
      thread.start();
    }
}
    
   
  
   







 Instance 45







   
  
   
    
Class600.startHideToolbarsThread(){
      if (mHideToolbarsRunnable != null) {
        mHideToolbarsRunnable.disable();
      }
      mHideToolbarsRunnable = new HideToolbarsRunnable(this, mToolbarsDisplayDuration * 1000);      
      new Thread(mHideToolbarsRunnable).start();
}
    
   
  
   







 Instance 46







   
  
   
    
Class510.startBalancer()#1{
    if(balancer == null) {
      balancer = new Balancer();
      Thread balancerThread = new Thread(threadGroup, balancer);
      balancerThread.start();
    } else {
      LOG.info("Balancer already started");
      return;
    }
}
    
   
  
   







 Instance 47







   
  
   
    
Class810.start(Handler webCoreThreadHandler){
        if (sInstance == null) {
            sInstance = new WebCoreThreadWatchdog(webCoreThreadHandler);
            new Thread(sInstance, "WebCoreThreadWatchdog").start();
        }
}
    
   
  
   







 Instance 48







   
  
   
    
Class670.main(String[] args)#0{
            Thread t = new Thread();
            t.start();
            StackTraceElement[] ste = t.getStackTrace();
            if (ste == null)
                throw new RuntimeException("Failed: Thread.getStackTrace should not return null");
}
    
   
  
   







 Instance 49







   
  
   
    
Class800.getLiveNotificationThread(){
    if(singleton == null)
    {
      singleton = new LiveNotificationThread();
      Thread thread = new Thread (singleton);
      thread.start();
    }
}
    
   
  
   







 Instance 50







   
  
   
    
Class240.getController(){
    if(singelton == null)
    {
      singelton = new PropertySetController();
      Thread thread = new Thread(singelton);
      thread.start();
    }
}
    
   
  
   







 Instance 51







   
  
   
    
Class370.startNext(){
        if(!queue.isEmpty()){
            APIRequest next = queue.poll();
            active.add(next);
            Thread task = new Thread(next);
            task.start();
        }
}
    
   
  
   







 Instance 52







   
  
   
    
Class660.addNextToQueue(StructureListener listener){
    if ( installation.hasNext()){

      StructureFetcherRunnable r = new StructureFetcherRunnable(installation);
      r.addStructureListener(listener);
      Thread t = new Thread(r);
      t.start();
    }
}
    
   
  
   







 Instance 53







   
  
   
    
Class610.evaluate()#0{
      Runnable callSystemExit = new Runnable() {
        public void run() {
          System.exit(ARBITRARY_EXIT_STATUS);
        }
      };
      Thread thread = new Thread(callSystemExit);
      thread.start();
}
    
   
  
   







 Instance 54







   
  
   
    
Class290.triggerBillingAsync(final Date runDate)#1{
      Thread t =new Thread(new Runnable(){
         IBillingProcessSessionBean processBean = Context.getBean(Context.Name.BILLING_PROCESS_SESSION);
        public void run()
        {
           processBean.trigger(runDate);
        }
      });
      t.start();
}
    
   
  
   







 Instance 55







   
  
   
    
Class260.itemStateChanged(final ItemEvent e)#1{
                        final Thread thread = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                updateConfigPanelEditable(true);
                            }
                        });
                        thread.start();
}
    
   
  
   







 Instance 56







   
  
   
    
Class740.launchTool(final String toolClassName,final IToolConfiguration configuration,final ISpace space)#0{
    final Thread launchThread = new Thread(new Runnable() {
      public void run() {
        doLaunch(toolClassName, configuration, space);
      }
      
    });
    launchThread.start();
}
    
   
  
   







 Instance 57







   
  
   
    
Class540.newMethod(final String s){
        Runnable runnable = new Runnable() {
            public void run() {
                System.out.println(s);
            }
        };
        new Thread(runnable).start();
}
    
   
  
   







 Instance 58







   
  
   
    
Class540.scheduleIndexCreation(final Book book)#0{
        Thread work = new Thread(new Runnable() {
            public void run() {
              IndexManager indexManager = IndexManagerFactory.getIndexManager();
              indexManager.setIndexPolicy(new AndroidIndexPolicy());
                indexManager.scheduleIndexCreation(book);
            }
        });
        work.start();
}
    
   
  
   







 Instance 59







   
  
   
    
Class150.removeUpdate(final DocumentEvent e)#0{
                        final Thread t = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                checkFields(field);
                            }
                        });
                        t.start();
}
    
   
  
   







 Instance 60







   
  
   
    
Class730.actionThread()#1{
        final Thread thread = new Thread(
            new Runnable() {
                @Override
                public void run() {
                    menuAction.run(getText());
                }
            }
        );
        thread.start();
}
    
   
  
   







 Instance 61







   
  
   
    
Class490.processDatanodesForShutdown(Collection<Thread> threads){
    for (int i = dataNodes.size()-1; i >= 0; i--) {    
      Thread st = new Thread(new ShutDownUtil(dataNodes.get(i)));
      st.start();
      threads.add(st);
    }
}
    
   
  
   







 Instance 62







   
  
   
    
Class580.processDatanodesForShutdown(Collection<Thread> threads){
    for (int i = 0; i < dataNodes.size(); i++) {
      LOG.info("Shutting down data node " + i);
      Thread st = new Thread(new ShutDownUtil(dataNodes.get(i)));
      st.start();
      threads.add(st);
    }
}
    
   
  
   







 Instance 63







   
  
   
    
Class640.processNamenodesForShutdown(Collection<Thread> threads)#1{
    for (NameNodeInfo nnInfo : nameNodes) {
      Thread st = new Thread(new ShutDownUtil(nnInfo));
      st.start();
      threads.add(st);
    }
}
    
   
  
   







 Instance 64







   
  
   
    
Class320.startAllDownloadTasks(){
    final List<Runnable> tasks = createDownloadTasks();
    outstandingDownloadTasks.set(tasks.size());
    for(Runnable r: tasks) {
      final Thread thread = new Thread(r);
      thread.start();
    }
}
    
   
  
   







 Instance 65







   
  
   
    
Class0.runLocked(int n,long iters)#1{
        for (int j = 0; j < n; ++j) 
            new Thread(new LockedLoop(iters, a, b)).start();
}
    
   
  
   







 Instance 66







   
  
   
    
Class370.postServiceDeliveryActions(SituationExchangeResults results,Collection<String> deletedIds){
    for (ServiceAlertSubscription subscription : getActiveServiceAlertSubscriptions()) {
      new Thread(new SubscriptionSender(subscription, deletedIds)).start();
    }
}
    
   
  
   







 Instance 67







   
  
   
    
Class750.main(String[] args){
        PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null);
        for(final PrintService service: services) {
            Thread thread = new Thread() {
                public void run() {
                    service.getSupportedAttributeValues(Media.class, null, null);
                }
            };
            thread.start();
        }
}
    
   
  
   







 Instance 68







   
  
   
    
Class300.init()#0{
        for (int i = 0; i < 12; i++) {
            Dequeuer dequeuer = new Dequeuer(i);
            Thread t = new Thread(dequeuer);
            t.start();
        }
}
    
   
  
   







 Instance 69







   
  
   
    
Class740.resumeThreads(List<AbstractRenderThread> pThreads,RenderThreadPersistentState pState[]){
    for (int i = 0; i < pThreads.size(); i++) {
      AbstractRenderThread t = pThreads.get(i);
      t.setResumeState(pState[i]);
      new Thread(t).start();
    }
}
    
   
  
   







 Instance 70







   
  
   
    
Class430.createEdits(int nEdits)#2{
      Thread t = new Thread(new ClientThread());
      t.start();
      threads.add(t);
}
    
   
  
   







 Instance 71







   
  
   
    
Class210.setOutputListener(OutputListener listener){
            PipedOutputStream processOut = new PipedOutputStream();
            PipedInputStream externalIn = new PipedInputStream(processOut);
            myOut = new PrintStream(processOut);
            new Thread(new OutputHooker(invokerName + " stdout", externalIn, listener)).start();
}
    
   
  
   







 Instance 72







   
  
   
    
Class210.setErrorListener(OutputListener listener){
            PipedOutputStream processErr = new PipedOutputStream();
            PipedInputStream externalIn = new PipedInputStream(processErr);
            myErr = new PrintStream(processErr);
            new Thread(new OutputHooker(invokerName + " stderr", externalIn, listener)).start();
}
    
   
  
   







 Instance 73







   
  
   
    
Class360.redirectOut(JTextArea displayPane){
  PipedOutputStream pos = new PipedOutputStream();
  System.setOut(new PrintStream(pos, true));
  ModConsole console = new ModConsole(displayPane, pos);
  new Thread(console).start();
}
    
   
  
   







 Instance 74







   
  
   
    
Class110.returns_all_threads_in_child_thread_groups()#0{
        Thread threadInChild = new Thread(child, new LongRunningTask());
        threadInChild.start();
        assertThat(Threads.getActiveThreads(parent), containsInAnyOrder(threadInChild));
        threadInChild.interrupt();
}
    
   
  
   







 Instance 75







   
  
   
    
Class240.returns_all_threads_in_a_thread_group()#0{
        Thread thread = new Thread(group, new LongRunningTask());
        thread.start();
        assertThat(Threads.getActiveThreads(group), containsInAnyOrder(thread));
        thread.interrupt();
}
    
   
  
   







 Instance 76







   
  
   
    
Class590.actionPerformed(ActionEvent e){
        Thread runner = new Thread() {
          @Override
          public void run() {
            app.getGuiManager().openHelp("Construction_Protocol");
          }
        };
        runner.start();
}
    
   
  
   







 Instance 77







   
  
   
    
Class590.actionPerformed(ActionEvent e){
    Thread runner = new Thread() {
      @Override
      public void run() {
        app.getGuiManager().openHelp(articleName);
      }
    };
    runner.start();
}
    
   
  
   







 Instance 78







   
  
   
    
Class550.actionPerformed(ActionEvent e){
        Thread runner = new Thread() {
          @Override
          public void run() {
            ((GuiManagerD) app.getGuiManager())
                .openHelp("Function_Inspector_Tool");
          }
        };
        runner.start();
}
    
   
  
   







 Instance 79







   
  
   
    
Class620.delayCommitsWithInterrupt()#0{
        Thread t = new Thread(commit);
        t.start();
        t.interrupt();
}
    
   
  
   







 Instance 80







   
  
   
    
Class420.awaitTermination()#0{
        final TerminationAwait terminationAwait = new TerminationAwait(serviceContainer);
        final Thread thread = new Thread(terminationAwait);
        thread.start();
        assertTrue(thread.isAlive());
        shutdownContainer();
}
    
   
  
   







 Instance 81







   
  
   
    
Class210.main(String[] args)#1{
    Thread thread1 = new Thread(volatileExample.new Worker(), "Worker-1");
    thread1.start();
}
    
   
  
   







 Instance 82







   
  
   
    
Class370.main(String[] args)#2{
  Thread thread1 = new Thread(volatileExample.new Worker(), "Worker-1");
  thread1.start();
}
    
   
  
   







 Instance 83







   
  
   
    
Class40.doOpen()#0{
    new Thread(null, acceptor, "SocketProxy-Acceptor-"
        + serverSocket.getLocalPort()).start();
}
    
   
  
   







 Instance 84







   
  
   
    
Class720.export(String[] repositories,int assetMaxSize,boolean onlyPublishedVersions,String exportFileName,ProcessBean processBean){
    OptimizedExportController exportController = new OptimizedExportController(repositories, assetMaxSize, onlyPublishedVersions, exportFileName, processBean, false, "false", "", "");
    Thread thread = new Thread(exportController);
    thread.start();
}
    
   
  
   







 Instance 85







   
  
   
    
Class790.startBackgroundJob(CropMonitoredActivity activity,String title,String message,Runnable job,Handler handler){
    ProgressDialog dialog = ProgressDialog.show(activity, title, message,
        true, false);
    new Thread(new BackgroundJob(activity, job, dialog, handler)).start();
}
    
   
  
   







 Instance 86







   
  
   
    
Class790.basicTestParallelSums(Object[] array,Sum parallelSum1,Sum parallelSum2)#0{
        Thread thread1 = new Thread(() -> this.parallelSum(array, parallelSum1));
        thread1.start();
}
    
   
  
   







 Instance 87







   
  
   
    
Class790.basicTestParallelSums(Object[] array,Sum parallelSum1,Sum parallelSum2)#2{
        Thread thread2 = new Thread(() -> this.parallelSum(array, parallelSum2));
        thread2.start();
}
    
   
  
   







 Instance 88







   
  
   
    
Class400.startBackgroundJob(MonitoredActivity activity,String title,String message,Runnable job,Handler handler){
        ProgressDialog dialog = ProgressDialog.show(
                activity, title, message, true, false);
        new Thread(new BackgroundJob(activity, job, dialog, handler)).start();
}
    
   
  
   







 Instance 89







   
  
   
    
Class630.copy(String[] repositories,int assetMaxSize,boolean onlyPublishedVersions,String exportFileName,ProcessBean processBean,String onlyLatestVersions,String standardReplacement,String replacements){
    OptimizedExportController exportController = new OptimizedExportController(repositories, assetMaxSize, onlyPublishedVersions, exportFileName, processBean, true, onlyLatestVersions, standardReplacement, replacements);
    Thread thread = new Thread(exportController);
    thread.start();
}
    
   
  
   







 Instance 90







   
  
   
    
Class120.halt(){
        Thread shutdownThread = new Thread() {
            @Override
            public void run() {
                hostLog.warn("VoltDB node shutting down as requested by @StopNode command.");
                System.exit(0);
            }
        };
        shutdownThread.start();
}
    
   
  
   







 Instance 91







   
  
   
    
Class160.onItemClick(AdapterView<?> adapterView,View view,int pos,long id)#1{
        new Thread(new SetIconRunnable(rom, m_adapter.getItem(pos))).start();
}
    
   
  
   







 Instance 92







   
  
   
    
Class160.download(boolean synchronous)#0{
      new Thread(d).start();
}
    
   
  
   







 Instance 93







   
  
   
    
Class160.displayHelpGUI()#1{
    Thread helpGUIThread = new Thread("DisplayHelpGUIThread") {
      public void run() {
        boolean ok = new HelpGUI(DatabaseImportMain.class.getResourceAsStream("help_import_main.html")).display();
        if (!ok) {
          System.out.println("Error displaying helpfile " + "help_import_main.html");
        }
      }
    };
    helpGUIThread.start();
}
    
   
  
   







 Instance 94







   
  
   
    
Class160.mouseClicked(MouseEvent ev)#0{
                        new Thread(task, new Integer(++threads).toString()).start();
}
    
   
  
   







 Instance 95







   
  
   
    
Class190.runProcessing(String runWhere)#1{
        new Thread(new ActionProcessing(runWhere)).start();
}
    
   
  
   







 Instance 96







   
  
   
    
Class190.can_update_blockingly()#1{
        Thread t = new Thread(() -> {
            SuiteMother.emptySuite(listener);
        });
        t.start();
}
    
   
  
   







 Instance 97







   
  
   
    
Class190.doStart()#0{
    new Thread(new ConnectionThread()).start();
}
    
   
  
   







 Instance 98







   
  
   
    
Class190.writeBufferArrayBlocksUntilTimeout7()#0{
        final T blockingChannel = createBlockingWritableByteChannel(channelMock, 11000000, TimeUnit.NANOSECONDS);
        final WriteBufferArray writeRunnable = new WriteBufferArray(blockingChannel, "wait almost"," nothing");
        final Thread writeThread = new Thread(writeRunnable);
        writeThread.start();
}
    
   
  
   







 Instance 99







   
  
   
    
Class710.fetchProjectFiles(VPTProject p)#1{
    new Thread(new ImportWorker()).start();
}
    
   
  
   







 Instance 100







   
  
   
    
Class710.VideoCanvas(ZXingMIDlet zXingMIDlet)#0{
    snapshotThread = new SnapshotThread(zXingMIDlet);
    new Thread(snapshotThread).start();
}
    
   
  
   







 Instance 101







   
  
   
    
Class710.sync(boolean all,Bundle data)#1{
    Thread awesomeThread = new Thread(this);
    awesomeThread.start();
}
    
   
  
   







 Instance 102







   
  
   
    
Class710.startAndStopRepo(RepoDaemonTest rdt)#2{
    Thread th = new Thread(rdt);
    th.start();
}
    
   
  
   







 Instance 103







   
  
   
    
Class710.manual()#1{
    Runner runner = new Runner(fa);
    Thread t = new Thread(runner);
    t.start();
}
    
   
  
   







 Instance 104







   
  
   
    
Class710.start()#0{
        new Thread(this).start();
}
    
   
  
   







 Instance 105







   
  
   
    
Class710.runAndAssert(StreamListener mockListener,StreamDispatcher dispatcher,int tweetEvents,int deleteEvents,int limitEvents,int warningEvents)#1{
    new Thread(dispatcher).start();
}
    
   
  
   







 Instance 106







   
  
   
    
Class780.initialize()#0{
    new Thread(new Runnable() {
      @Override
      public void run() {
        storage2UriMapperJavaImpl.initializeCache();
      }
    }).start();
}
    
   
  
   







 Instance 107







   
  
   
    
Class780.runTest(final Class<?> c)#2{
    Thread t = new Thread(new Runnable() {
      @Override public void run() {
        assertEquals(3000, c.getAnnotations().length);
      }
    }, c.toString());
    t.start();
}
    
   
  
   







 Instance 108







   
  
   
    
Class290.asyncDelete(final Uri uri,final String selection,final String[] selectionArgs)#2{
        new Thread(new Runnable() {
            public void run() {
                SqliteWrapper.delete(mContext, mContentResolver, uri, selection, selectionArgs);
            }
        }).start();
}
    
   
  
   







 Instance 109







   
  
   
    
Class290.resolve(final boolean inSeparateThread)#0{
      final Thread t = new Thread(this);
      t.start();
}
    
   
  
   







 Instance 110







   
  
   
    
Class290.main(final String[] args)#0{
        final MediaPlayerDemoForeground app = new MediaPlayerDemoForeground();
        new Thread(app).start();
}
    
   
  
   







 Instance 111







   
  
   
    
Class320.main(String[] args)#0{
        new Thread(new EvenPrinter(context)).start();
}
    
   
  
   







 Instance 112







   
  
   
    
Class320.main(String[] args)#2{
        Context context = new Context();
        new Thread(new OddPrinter(context)).start();
}
    
   
  
   







 Instance 113







   
  
   
    
Class320.main(String[] args)#0{
        new Thread(worker3).start();
}
    
   
  
   







 Instance 114







   
  
   
    
Class320.main(String[] args)#1{
        Foo foo = new Foo();
        Runnable worker1 = new FirstWorker(foo);
        Runnable worker2 = new SecondWorker(foo);
        Runnable worker3 = new ThirdWorker(foo);
        new Thread(worker1).start();
}
    
   
  
   







 Instance 115







   
  
   
    
Class320.main(String[] args)#2{
        new Thread(worker2).start();
}
    
   
  
   







 Instance 116







   
  
   
    
Class320.execute(Runnable command){
        new Thread(command).start();
}
    
   
  
   







 Instance 117







   
  
   
    
Class610.main(String... args)#0{
            new Thread(new SleepRunnable(), "engine").start();
}
    
   
  
   







 Instance 118







   
  
   
    
Class610.main(String... args)#2{
            new Thread(new SleepRunnable(), "writer").start();
}
    
   
  
   







 Instance 119







   
  
   
    
Class610.main(String... args)#4{
            new Thread(new SleepRunnable(), "reader").start();
}
    
   
  
   







 Instance 120







   
  
   
    
Class610.start(){
    String name = match.getName();
    Thread thread = new Thread(this, name);
    thread.start();
}
    
   
  
   







 Instance 121







   
  
   
    
Class610.GroovyClientConnection(Script script,boolean autoOutput,Socket socket){
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new PrintWriter(socket.getOutputStream());
            new Thread(this, "Groovy client connection - " + socket.getInetAddress().getHostAddress()).start();
}
    
   
  
   







 Instance 122







   
  
   
    
Class610.processQueue(){
    while (pending.size() < MAX_PENDING && queue.size() > 0) {
      Coordinate coord = (Coordinate)queue.remove(0);
      TileLoader tileLoader = new TileLoader(coord);
      pending.put(coord, tileLoader);
      new Thread(tileLoader).start();
    }  
}
    
   
  
   







 Instance 123







   
  
   
    
Class610.doLoadList()#0{
     Thread thread = new Thread (this);
     thread.start();
}
    
   
  
   







 Instance 124







   
  
   
    
Class40.createArchive()#2{
        archiveOutputUtil.setCompressionLevel(getCompressionLevel());
        final Thread archiveCreation = new Thread(archiveOutputUtil);
        archiveCreation.start();
}
    
   
  
   







 Instance 125







   
  
   
    
Class40.setUp(){
    hsm = new HWISessionManager();
    Thread t = new Thread(hsm);
    t.start();
}
    
   
  
   







 Instance 126







   
  
   
    
Class40.onClick(View view)#1{
    Thread all = new Thread(new BackgroundWork(mAppList));
    all.start();
}
    
   
  
   







 Instance 127







   
  
   
    
Class40.runPokenet()#0{
    Process p = Runtime.getRuntime().exec("java -Dres.path=client/"
        + " -Djava.library.path=client/lib/native " +
    "-Xmx512m -Xms512m -jar ./client/client.jar");
    StreamReader r1 = new StreamReader(p.getInputStream(), "OUTPUT");
    StreamReader r2 = new StreamReader(p.getErrorStream(), "ERROR");
    new Thread(r1).start();
}
    
   
  
   







 Instance 128







   
  
   
    
Class40.runPokenet()#1{
    new Thread(r2).start();
}
    
   
  
   







 Instance 129







   
  
   
    
Class790.EthernetHub(String host,int port)#0{
        new Thread(new Writer()).start();
}
    
   
  
   







 Instance 130







   
  
   
    
Class790.EthernetHub(String host,int port)#1{
        new Thread(new Reader()).start();
}
    
   
  
   







 Instance 131







   
  
   
    
Class720.deleteRepositories(RepositoryVO repositoryVO,InfoGluePrincipal principal,Boolean byPassTrashcan,Boolean deleteByForce,ProcessBean processBean){
    DeleteRepositoryController deleteController = new DeleteRepositoryController(repositoryVO, principal, byPassTrashcan, deleteByForce, processBean);
    Thread thread = new Thread(deleteController);
    thread.start();
}
    
   
  
   







 Instance 132







   
  
   
    
Class530.logInfo()#2{
    CountDownLatch latch = new CountDownLatch(1);
    new Thread(new MessageChecker(latch, messageListener)).start();
}
    
   
  
   







 Instance 133







   
  
   
    
Class530.copyContent(InfoGluePrincipal principal,Integer contentId,Integer newParentContentId,Integer maxAssetSize,String onlyLatestVersions,ProcessBean processBean){
    CopyContentController copyController = new CopyContentController(principal, contentId, newParentContentId, maxAssetSize, onlyLatestVersions, processBean);
    Thread thread = new Thread(copyController);
    thread.start();
}
    
   
  
   







 Instance 134







   
  
   
    
Class530.start(){
    new Thread(this).start();
}
    
   
  
   







 Instance 135







   
  
   
    
Class480.play(){
  Thread t = new Thread(this);
  t.start();
}
    
   
  
   







 Instance 136







   
  
   
    
Class480.init(Context context)#0{
        new Thread(new Runnable() {
            public void run() {
                fill();
            }
        }).start();
}
    
   
  
   







 Instance 137







   
  
   
    
Class480.SysinfoUploader(Display display,MIDPSysInfoMIDlet sysinfoMidlet){
    Thread t = new Thread(this);
    t.start();
}
    
   
  
   







 Instance 138







   
  
   
    
Class480.start(){
    Thread thread = new Thread( this );
    thread.start();
}
    
   
  
   







 Instance 139







   
  
   
    
Class480.startApp()#1{
    Thread thread = new Thread( this );
    thread.start();
}
    
   
  
   







 Instance 140







   
  
   
    
Class490.start()#1{
      new Thread(this).start();
}
    
   
  
   







 Instance 141







   
  
   
    
Class490.doStart()#2{
      new Thread(new RabbitMqProcessor.ConnectionRunnable(Integer.MAX_VALUE, configuration.getReconnectDelay())).start();
}
    
   
  
   







 Instance 142







   
  
   
    
Class140.postToFacebookWithAuthorize(final Activity activity,final Bundle params,final OnPostCompleteListener listener)#3{
        new Thread(new Runnable() {
            public void run() {
                Log.d(TAG, "postToFacebookWithAuthorize()");
                Looper.prepare();
                mFacebook.authorize(activity, new String[] {"publish_stream", "offline_access"},
                        new FacebookPostListener(activity, params, listener));
                Looper.loop();
            }
        }).start();
}
    
   
  
   







 Instance 143







   
  
   
    
Class140.connectToFacebook(final Activity activity)#1{
        new Thread(new Runnable() {
            public void run() {
                Log.d(TAG, "connectToFacebook()");
                Looper.prepare();
                mFacebook.authorize(activity, new String[] {"publish_stream", "offline_access"},
                        new FacebookConnectListener(activity));
                Looper.loop();
            }
        }).start();
}
    
   
  
   







 Instance 144







   
  
   
    
Class140.actionPerformed(ActionEvent e){
            Thread th = new Thread() {
              @Override
              public void run() {
                visualizeBayesNet(grph, selectedName);
              }
            };
            th.start();
}
    
   
  
   







 Instance 145







   
  
   
    
Class140.makeBackgroundConnection(){
            Thread connectThread = new Thread(this,"ConnectionPool-connect");
            connectThread.start();
}
    
   
  
   







 Instance 146







   
  
   
    
Class360.launchRemoteTestNG(final String portArg,final int portValue)#0{
    new Thread(new Runnable() {
      @Override
      public void run() {
        RemoteTestNG.main(new String[] {
            portArg, Integer.toString(portValue), "-dontexit",
            getPathToResource("testng-remote.xml")
          });
        }
      }).start();
}
    
   
  
   







 Instance 147







   
  
   
    
Class360.performTest()#2{
    new Thread(new Runnable() {
      @Override
      public void run() {
        waiter.assertTrue(false);
        waiter.resume();
      }
    }).start();
}
    
   
  
   







 Instance 148







   
  
   
    
Class570.runDomTests()#1{
    Thread testThread = new Thread(createDomTestRunnable());
    testThread.start();
}
    
   
  
   







 Instance 149







   
  
   
    
Class550.main(String[] args)#1{
      ParallelRead pr = new ParallelRead(list[i].getAbsolutePath());
      new Thread(pr).start();
}
    
   
  
   







 Instance 150







   
  
   
    
Class550.quit()#1{
    final Thread t = new Thread() {
      public void run() {
        locationProvider.setLocationListener(null, 0, 0, 0);
      }
    };
    t.start();
}
    
   
  
   







 Instance 151







   
  
   
    
Class600.runExit()#0{
        new Thread(new Runnable() {
            public void run() {
                if(animator!=null)
                    animator.stop();
                drawable.destroy();
            }
        }).start();
}
    
   
  
   







 Instance 152







   
  
   
    
Class600.deploy(Resolver obrResolver,AbstractWebConsolePlugin logger,boolean startBundles,boolean optionalDependencies){
        final FelixDeployer d = new FelixDeployer(obrResolver, logger, startBundles, optionalDependencies);
        final Thread t = new Thread(d, "OBR Bundle Deployer (Apache Felix API)");
        t.start();
}
    
   
  
   







 Instance 153







   
  
   
    
Class600.doDeleteFolder(long folderId)#1{
    new Thread(new DeleteFolderRunnable(folderId)).start();
}
    
   
  
   







 Instance 154







   
  
   
    
Class600.setup()#0{
      BackgroundThread bt = new BackgroundThread(_transitDataService, this);
      new Thread(bt).start();
}
    
   
  
   







 Instance 155







   
  
   
    
Class410.start(){
        new Thread(this).start();
}
    
   
  
   







 Instance 156







   
  
   
    
Class410.init()#1{
        new Thread(this, "ModelInterpreter").start();
}
    
   
  
   







 Instance 157







   
  
   
    
Class520.launchProject(final IProject project,final String runMode,final boolean forceLeinLaunchWhenPossible,final IWithREPLView runOnceREPLAvailable)#0{
      new Thread(new Runnable() {
        @Override public void run() {
          launchProjectCheckRunning(project, new IFile[] {}, getRunMode(runMode), forceLeinLaunchWhenPossible, runOnceREPLAvailable);
        }
      }).start();
}
    
   
  
   







 Instance 158







   
  
   
    
Class520.doInitializationWork()#0{
            Thread t = new Thread(new InitializerWorker());
            t.start();
            m_initThreads.add(t);
        new InitializerWorker().run();
}
    
   
  
   







 Instance 159







   
  
   
    
Class520.run()#0{
            new Thread(new Runnable() {
              public void run() {
                garbageCollect();
              }
            }).start();
}
    
   
  
   







 Instance 160







   
  
   
    
Class520.showInAnotherThread(final String approveButtonText)#0{
            new Thread(new Runnable() {
                public void run() {
                    results[0] = fileChooser.showDialog(frame, approveButtonText);
                    latch.countDown();
                }
            }).start();
}
    
   
  
   







 Instance 161







   
  
   
    
Class520.FIFODeliveryManager(PersistenceManager persistenceMgr,ServerConfiguration cfg)#0{
        new Thread(this, "DeliveryManagerThread").start();
}
    
   
  
   







 Instance 162







   
  
   
    
Class330.run()#0{
    Thread t = new Thread(mTask);
    t.start();
}
    
   
  
   







 Instance 163







   
  
   
    
Class330.changed(ObservableValue<? extends State> observableValue,State oldState,State newState)#0{
                            new Thread(new Runnable() {
                                public void run() {
                                    tryToInitialize(startCount++, currentTimeMillis());
                                }
                            }, "MapViewInitializer").start();
}
    
   
  
   







 Instance 164







   
  
   
    
Class330.ChatServerConnection()#0{
        requestThread = new LogRequest();
        new Thread(requestThread).start();
}
    
   
  
   







 Instance 165







   
  
   
    
Class510.commandAction(Command command,Displayable arg1)#2{
            new Thread(this).start();
}
    
   
  
   







 Instance 166







   
  
   
    
Class510.failover(String host,int port){
        new Thread(_failoverHandler).start();
}
    
   
  
   







 Instance 167







   
  
   
    
Class510.start(ComponentContext ctx)#2{
        new Thread( this ).start();
}
    
   
  
   







 Instance 168







   
  
   
    
Class450.start(Socket socket,int protocolVersion){
            new Thread(this, name() + "-" + session.peer).start();
}
    
   
  
   







 Instance 169







   
  
   
    
Class450.init(){
        new Thread(indexingThread).start();
}
    
   
  
   







 Instance 170







   
  
   
    
Class80.onClick(View v)#1{
        new Thread(new Runnable(){
          public void run() {
            Intent intent = new Intent(TetherService.INTENT_MANAGE);
            intent.putExtra("state", TetherService.MANAGE_START);
            Log.d(MSG_TAG, "SENDING MANAGE: " + intent);
            MainActivity.this.sendBroadcast(intent);  
          }
        }).start();
}
    
   
  
   







 Instance 171







   
  
   
    
Class80.processInitializeSettingsFile(File initializeSettingsFile){
    Thread t = new Thread(new ProcessInitialize(initializeSettingsFile));
    t.start();
}
    
   
  
   







 Instance 172







   
  
   
    
Class80.init()#0{
   new Thread (this).start();
}
    
   
  
   







 Instance 173







   
  
   
    
Class460.startSystem(final String[] environment,final File karafBase){
        Thread thread = new Thread("KarafJavaRunner") {
            @Override
            public void run() {
                CommandLineBuilder commandLine = createCommandLine(environment, karafBase);
                runner.exec(commandLine, karafBase, environment);
            }
        };
        thread.start();
}
    
   
  
   







 Instance 174







   
  
   
    
Class460.startPServers(HadoopAlignConfig hac)#0{
    pserver = new PServer(4444, FileSystem.get(hac), hac.getTTablePath());
    Thread th = new Thread(pserver);
    th.start();
}
    
   
  
   







 Instance 175







   
  
   
    
Class460.loadDirectory(String cap)#0{
            Thread thread = new Thread(this);
            thread.start();
}
    
   
  
   







 Instance 176







   
  
   
    
Class620.delayCommitsWithReset()#0{
        new Thread(commit).start();
}
    
   
  
   







 Instance 177







   
  
   
    
Class130.populate()#0{
      new Thread(new EventLoop(massIndexer)).start();
}
    
   
  
   







 Instance 178







   
  
   
    
Class130.resolve(boolean inSeparateThread)#1{
       Thread t = new Thread(this);
       t.start();
}
    
   
  
   







 Instance 179







   
  
   
    
Class130.onStart(final Intent intent,int startId)#0{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    startServiceInBackgroundThread(intent);
                }
            }).start();
}
    
   
  
   







 Instance 180







   
  
   
    
Class130.loadInNewThread(final Context context)#0{
        new Thread(new Runnable() {
            public void run() {
                loadContextMenuIntents(context);
            }
        }).start();
}
    
   
  
   







 Instance 181







   
  
   
    
Class130.onCreate(){
        new Thread(this, "AttachmentService").start();
}
    
   
  
   







 Instance 182







   
  
   
    
Class130.Player()#1{
        bufferingThread = new BufferingThread(buffer, playingThread);
        new Thread(bufferingThread, "Buffer Thread").start();
}
    
   
  
   







 Instance 183







   
  
   
    
Class130.afterPropertiesSet()#0{
            Thread thread = new Thread(this, "Thread for: " + this);
            thread.start();
}
    
   
  
   







 Instance 184







   
  
   
    
Class700.InboxSync(String to,AsmackClientService service,XmppAccount account){
        new Thread(this).start();
}
    
   
  
   







 Instance 185







   
  
   
    
Class700.scheduleCalendarAlarms(final Context context,boolean force)#1{
        new Thread(new Runnable() {
            @Override
            public void run() {
                CalendarAlarmScheduler.scheduleAllCalendarAlarms(context);
            }
        }).start();
}
    
   
  
   







 Instance 186







   
  
   
    
Class700.start()#1{
    new Thread(new Runnable() {
      @Override
      public void run() {
        startAccept();
      }
    }).start();
}
    
   
  
   







 Instance 187







   
  
   
    
Class700.asyncUpdateDraftSmsMessage(final Conversation conv,final String contents)#1{
        new Thread(new Runnable() {
            public void run() {
                long threadId = conv.ensureThreadId();
                conv.setDraftState(true);
                updateDraftSmsMessage(threadId, contents);
            }
        }).start();
}
    
   
  
   







 Instance 188







   
  
   
    
Class210.actionPerformed(ActionEvent e){
        Thread runner = new Thread() {
          @Override
          public void run() {
            setVisible(false);

            doExport(false);
          }
        };
        runner.start();
}
    
   
  
   







 Instance 189







   
  
   
    
Class350.executeJob(final BaseApplicationContext ioccontext,final String jobname)#1{
    new Thread(new Runnable() {
      public void run() {
        runjob(ioccontext, jobname);
      }
    }).start();
}
    
   
  
   







 Instance 190







   
  
   
    
Class690.onReceivedIcon(WebView view,Bitmap icon)#1{
        new Thread(new FaviconUpdaterRunnable(MainActivity.this, view.getUrl(), view.getOriginalUrl(), icon)).start();
}
    
   
  
   







 Instance 191







   
  
   
    
Class690.dotted(){
             = new java.lang.Thread() {
                 public void run() {
                     ;
                 }
             };
         th.start();
}
    
   
  
   







 Instance 192







   
  
   
    
Class690.onCreate()#0{
    new Thread(this, "MessageRetrievalService").start();
}
    
   
  
   







 Instance 193







   
  
   
    
Class690.initializeWatchServiceThread(){
        final Thread thread = new Thread(new JsonServiceRegistryConfigWatcher(this));
        thread.start();
}
    
   
  
   







 Instance 194







   
  
   
    
Class430.testThread(){
    sdb.option(SdbPersistenceManager.CONSISTENT_READ, PmOptionStickiness.STICKY);
      MyOptionRunner r = new MyOptionRunner(sdb, true);
    Thread t = new Thread(r);
    t.start();
    t.wait(1000);
}
    
   
  
   







 Instance 195







   
  
   
    
Class430.start()#1{
    Thread workerThread = new Thread() {
      public void run() {
        executorService.submit(handler);
      }
    };
    workerThread.start();
}
    
   
  
   







 Instance 196







   
  
   
    
Class430.run()#0{
    new Thread(connectionManager).start();
}
    
   
  
   







 Instance 197







   
  
   
    
Class650.testInvoke()#0{
        final NotifyDummyRequestCommand requestCommand = new NotifyDummyRequestCommand("hello");
        final NotifyDummyAckCommand response = new NotifyDummyAckCommand(requestCommand, "hello");
        new Thread(new InnerSetResultRunner(requestCommand, response)).start();
}
    
   
  
   







 Instance 198







   
  
   
    
Class650.testGet()#1{
        FutureLockImpl<Boolean> future = new FutureLockImpl<Boolean>();
        new Thread(new NotifyFutureRunner(future, 2000, null)).start();
}
    
   
  
   







 Instance 199







   
  
   
    
Class650.commitVm(@NotNull VirtualMachine vm)#0{
    new Thread(myRunnable, "Debug Events Processor Thread").start();
}
    
   
  
   







 Instance 200







   
  
   
    
Class650.onResume()#0{
    new Thread(dataService.updateShuttles).start();
}
    
   
  
   







 Instance 201







   
  
   
    
Class670.download(){
    Thread t = new Thread(this);
    t.start();
}
    
   
  
   







 Instance 202







   
  
   
    
Class670.stop(StopContext context)#0{
            context.asynchronous();
            new Thread(() -> {
                super.cleanup();
                executor = null;
                context.complete();
            }).start();
}
    
   
  
   







 Instance 203







   
  
   
    
Class670.start(final StartContext context)#1{
        final DeployTask task = new DeployTask();
        Thread thread = new Thread(new DeploymentTask(new OperationBuilder(task.getUpdate()).build()));
        thread.start();
}
    
   
  
   







 Instance 204







   
  
   
    
Class670.testEnded(String host)#2{
                Thread stopSoon = new Thread(this);
                stopSoon.start();
}
    
   
  
   







 Instance 205







   
  
   
    
Class680.BluetoothLogHandler(){
    Thread thread = new Thread( this );
    thread.start();
}
    
   
  
   







 Instance 206







   
  
   
    
Class680.AsynchronousMultipleCommandListener(){
    Thread thread = new Thread( this );
    thread.start();
}
    
   
  
   







 Instance 207







   
  
   
    
Class680.execute(Device dev,Locale locale,Environment env){
    Thread t = new Thread( this );
    t.start();
}
    
   
  
   







 Instance 208







   
  
   
    
Class680.doWakefulWork(Intent intent)#1{
      new Thread(this).start();
}
    
   
  
   







 Instance 209







   
  
   
    
Class800.uploadToGeoGebraTube(final JList toolList){
    Thread runner = new Thread() {
      @Override
      public void run() {
        model.uploadToGeoGebraTube(toolList.getSelectedValues());
      }
    };
    runner.start();
}
    
   
  
   







 Instance 210







   
  
   
    
Class800.replay()#1{
        new Thread(new Runnable() {
            @Override
            public void run() {
                if (m_callback != null) {
                    m_callback.onReplayCompletion();
                }
            }
        }).start();
}
    
   
  
   







 Instance 211







   
  
   
    
Class800.main(String[] args){
    new Thread(new OrbTracker(new OrbConfiguration(true))).start();
}
    
   
  
   







 Instance 212







   
  
   
    
Class470.execute()#0{
        Ban banControl = new Ban(plugin, BanType.UNBAN.getActionName(), target, targetUUID, "", senderName, senderUUID, "", "", "", null, false);
        Thread triggerThread = new Thread(banControl);
        triggerThread.start();
}
    
   
  
   







 Instance 213







   
  
   
    
Class470.lostTopic(final ByteString topic)#0{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    ConcurrencyUtils.put(bsQueue, Pair.of(topic, false));
                }
            }).start();
}
    
   
  
   







 Instance 214







   
  
   
    
Class470.operationFinished(Object ctx,final T resultOfOperation)#1{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    ConcurrencyUtils.put(q, Either.of(resultOfOperation, (Exception) null));
                }
            }).start();
}
    
   
  
   







 Instance 215







   
  
   
    
Class110.start(final MumbleProtocol protocol_){
    final Thread t = new Thread(this, "MumbleConnection");
    t.start();
}
    
   
  
   







 Instance 216







   
  
   
    
Class340.actionPerformed(ActionEvent e){
      Thread th = new Thread() {
        public void run() {
        visualizeBayesNet(grph, selectedName);
        }
          };
      th.start();
}
    
   
  
   







 Instance 217







   
  
   
    
Class340.starting(){
        Thread thread = new Thread(this);
        thread.start();
}
    
   
  
   







 Instance 218







   
  
   
    
Class590.setLabelText(String text){
        Thread t = new Thread(this);
        t.start();
}
    
   
  
   







 Instance 219







   
  
   
    
Class590.start()#1{
        new Thread(this).start();
}
    
   
  
   







 Instance 220







   
  
   
    
Class590.actionPerformed(ActionEvent e){
        Thread runner = new Thread() {
          @Override
          public void run() {
            app.setWaitCursor();
            app.createNewWindow();
            app.setDefaultCursor();
          }
        };
        runner.start();
}
    
   
  
   







 Instance 221







   
  
   
    
Class590.runOnFirstFix(final Runnable runnable)#1{
            new Thread(runnable).start();
}
    
   
  
   







 Instance 222







   
  
   
    
Class0.RemoteBlockDeviceImpl(InputStream in,OutputStream out,BlockDevice target)#2{
        new Thread(this).start();
}
    
   
  
   







 Instance 223







   
  
   
    
Class0.run(int type)#0{
      Thread thr = new Thread(worker);
      thr.start();
}
    
   
  
   







 Instance 224







   
  
   
    
Class0.run()#1{
                                   new Thread(mRunFaceDetection).start();
}
    
   
  
   







 Instance 225







   
  
   
    
Class260.runIt()#1{
    UdpUnicastEndToEndTests launcher = new UdpUnicastEndToEndTests();
    Thread t = new Thread(launcher);
    t.start(); // launch the receiver
}
    
   
  
   







 Instance 226







   
  
   
    
Class260.startResponder(final PollableChannel requestChannel)#2{
    new Thread(new Runnable() {
      @Override
      public void run() {
        Message<?> input = requestChannel.receive();
        GenericMessage<String> reply = new GenericMessage<String>(input.getPayload() + "bar");
        ((MessageChannel) input.getHeaders().getReplyChannel()).send(reply);
      }
    }).start();
}
    
   
  
   







 Instance 227







   
  
   
    
Class740.operationFailed(Object ctx,final PubSubException exception)#2{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    logger.error("Operation failed!", exception);
                    ConcurrencyUtils.put(queue, false);
                }
            }).start();
}
    
   
  
   







 Instance 228







   
  
   
    
Class560.start()#1{
      new Thread(this).start();
}
    
   
  
   







 Instance 229







   
  
   
    
Class560.notifyMemberJoin(final Member member){
        Thread th = new Thread(){
            public void run() {
                membershipManager.sendMemberJoinedToAll(member);
            }
        };
        th.start();
}
    
   
  
   







 Instance 230







   
  
   
    
Class560.testThreadStart()#0{
        SignallingRunnable runner = new SignallingRunnable("testThreadStart");
        Thread thread = new Thread(runner, "tThreadStartTest");
        thread.start();
}
    
   
  
   







 Instance 231







   
  
   
    
Class770.IdentServer(String login)#0{
      new Thread(this).start();
}
    
   
  
   







 Instance 232







   
  
   
    
Class230.run()#1{
        new Thread(new Runnable() {
          public void run() {
            new QuietNetworkContext().downloadToFileQuietly(getUrl(), tipsFile);
            myDownloadInProgress = false;
          }
        }).start();
}
    
   
  
   







 Instance 233







   
  
   
    
Class230.startMailServer(){
        mailServer = new SimpleSmtpServer(2525);
        Thread t = new Thread(mailServer);
        t.start();
}
    
   
  
   







 Instance 234







   
  
   
    
Class230.main(String[] args){
        Thread t = new Thread() {
                public void run() {
                    System.out.println("Hello Mars");
                }
            };
        t.start();
}
    
   
  
   







 Instance 235







   
  
   
    
Class230.doGet(HttpServletRequest req,HttpServletResponse resp)#0{
        final AsyncContext ctx = req.startAsync();
        new Thread(new AsynchronousTask(ctx)).start();
}
    
   
  
   







 Instance 236







   
  
   
    
Class200.show()#0{
        new Thread(new Runnable() {
            public void run() {
                _show();
            }
        }).start();
}
    
   
  
   







 Instance 237







   
  
   
    
Class60.setupCouchbase(final int couchbasePort){
        final CouchbaseMock couchbase = new CouchbaseMock("localhost", couchbasePort, 1, 1);
        couchbase.setRequiredHttpAuthorization(null);
        final Thread thread = new Thread(couchbase);
        thread.start();
        return Pair.of(couchbase, thread);
}
    
   
  
   







 Instance 238







   
  
   
    
Class60.main(String[] args)#1{
    Executor ex = new Executor(null);
    new Thread(ex).start();
}
    
   
  
   







 Instance 239







   
  
   
    
Class60.launch()#0{
            new Thread(new Runnable() {
                public void run() {
                   startActivity(intent);
                }
            }).start();
}
    
   
  
   







 Instance 240







   
  
   
    
Class60.launch()#0{
      new Thread(new Runnable() {
        public void run() {
          startActivity(intent);
        }
      }).start();
}
    
   
  
   







 Instance 241







   
  
   
    
Class70.main(String[] args)#3{
    try { VocabServer v = new VocabServer(4444);
    Thread t = new Thread(v);
    t.start();
}
    
   
  
   







 Instance 242







   
  
   
    
Class70.startThread()#1{
    Thread t = new Thread(this);
    t.start();
}
    
   
  
   







 Instance 243







   
  
   
    
Class420.onStart(Intent intent,int startId)#1{
                  new Thread(this).start();
}
    
   
  
   







 Instance 244







   
  
   
    
Class420.start(){
    new Thread(this).start();
}
    
   
  
   







 Instance 245







   
  
   
    
Class420.DataLoader(File f,ServerMap m){
    new Thread(this).start();
}
    
   
  
   







 Instance 246







   
  
   
    
Class420.connect()#0{
        mTimer = new Timer(mReplyTimeout);
        new Thread(mTimer, "SmsDataChannel timer").start();
}
    
   
  
   







 Instance 247







   
  
   
    
Class100.m1()#0{
    MyRunnable mr1 = new MyRunnable();
    Thread t1 = new Thread(mr1);
    t1.start();
}
    
   
  
   







 Instance 248







   
  
   
    
Class100.startGetPrimarySipPhoneThread()#0{
        new Thread(new Runnable() {
            public void run() {
                getPrimarySipPhone();
            }
        }).start();
}
    
   
  
   







 Instance 249







   
  
   
    
Class100.onPreferenceClick(Preference preference)#1{
                        new Thread(new Runnable() {
                                public void run() {
                                    handleSipReceiveCallsOption(enabled);
                                }
                        }).start();
}
    
   
  
   







 Instance 250







   
  
   
    
Class100.onWipeFailed(final Exception ex)#0{
                 new Thread(new Runnable() {
                   @Override
                   public void run() {
                     self.onWipeFailed(ex);
                   }}).start();
}
    
   
  
   







 Instance 251







   
  
   
    
Class100.onWipeSucceeded()#0{
                 new Thread(new Runnable() {
                   @Override
                   public void run() {
                     self.onWipeSucceeded();
                   }}).start();
}
    
   
  
   







 Instance 252







   
  
   
    
Class220.scanFirst()#3{
    Thread first = new Thread(new FirstFsScanRunnable(this.gui.getFsDiffFirstTree()));
    first.start();
}
    
   
  
   







 Instance 253







   
  
   
    
Class760.cleanupAndRollOver()#0{
    Thread clth = new Thread(new CleanUpThread());
    clth.start();
}
    
   
  
   







 Instance 254







   
  
   
    
Class20.startPump(String mode,ConsoleParser parser,InputStream inputStream){
        ConsoleStreamer pump = new ConsoleStreamer(mode,inputStream);
        pump.setParser(parser);
        Thread thread = new Thread(pump,"ConsoleStreamer/" + mode);
        thread.start();
}
    
   
  
   







 Instance 255







   
  
   
    
Class20.imageProgress(ImageReader source,float percentageDone)#0{
            Thread t = new Thread(action);
            t.start();
}
    
   
  
   







 Instance 256







   
  
   
    
Class20.clearFileCaches()#0{
        new Thread(new Runnable() { public void run() {try {CacheController.clearFileCachesImpl(new File(CmsPropertyHandler.getDigitalAssetPath() + File.separator + "caches_CAN_BE_REMOVED"));} catch (Exception e) {}}}).start();
}
    
   
  
   







 Instance 257







   
  
   
    
Class170.initializeRootNode(){
            new Thread(m_createRootRunnable).start();
}
    
   
  
   







 Instance 258







   
  
   
    
Class400.execute(Runnable r)#0{
      Thread t = new Thread(r);
      t.start();
}
    
   
  
   







 Instance 259







   
  
   
    
Class240.deleteEntity(String entity,Integer entityId,InfoGluePrincipal principal,ProcessBean processBean){
    TrashcanController trashcanController = new TrashcanController(entity, entityId, false, principal, processBean);
    Thread thread = new Thread(trashcanController);
    thread.start();
}
    
   
  
   







 Instance 260







   
  
   
    
Class370.setup(){
    InitThread thread = new InitThread();
    new Thread(thread).start();
}
    
   
  
   







 Instance 261







   
  
   
    
Class370.start()#0{
            Thread acceptor = new Thread(this);
            acceptor.start();
}
    
   
  
   







 Instance 262







   
  
   
    
Class370.resize(){
        new Thread(new Runnable() {
            public void run() {
                EclipseSWTMapView.super.resize();
            }
        }, "BrowserResizer").start();
}
    
   
  
   







 Instance 263







   
  
   
    
Class370.importRepositories(String[] repositoryIds,InfoGluePrincipal principal,String onlyLatestVersions,String standardReplacement,String replacements,ProcessBean processBean){
    CopyRepositoryController copyController = new CopyRepositoryController(repositoryIds, principal, onlyLatestVersions, standardReplacement, replacements, processBean);
    Thread thread = new Thread(copyController);
    thread.start();
}
    
   
  
   







 Instance 264







   
  
   
    
Class540.runThreads(final Bean bean,final Serializable mvelExpr1,final Serializable mvelExpr2)#0{
      Thread t = new Thread() {
        public void run() {
          testMvel(bean, mvelExpr1, mvelExpr2);
        }
      };
      t.start();
}
    
   
  
   







 Instance 265







   
  
   
    
Class540.startListening(){
    Thread thread = new Thread(this);
    thread.start();
}
    
   
  
   







 Instance 266







   
  
   
    
Class540.testNew1(){
    Thread thread = new Thread() {

      @Override
      public void run() {
      }
    };
    thread.start();
}
    
   
  
   







 Instance 267







   
  
   
    
Class30.onStart()#0{
        new Thread(new GetAllEntries()).start();
}
    
   
  
   







 Instance 268







   
  
   
    
Class30.forceRepairAsync(String keyspace,RepairOption options)#1{
        int cmd = nextRepairCommand.incrementAndGet();
        new Thread(createRepairTask(cmd, keyspace, options)).start();
}
    
   
  
   







 Instance 269







   
  
   
    
Class30.startTransactionWorkers(FSNamesystem namesystem,AtomicReference<Throwable> caughtErr)#0{
      Transactions trans = new Transactions(namesystem, caughtErr);
      new Thread(trans, "TransactionThread-" + i).start();
}
    
   
  
   







 Instance 270







   
  
   
    
Class750.onStart()#0{
            new Thread(new autoPlayRunnable()).start();
}
    
   
  
   







 Instance 271







   
  
   
    
Class750.operationComplete(final FutureDone<Message> future)#0{
                final Thread holePunchScheduler = new Thread(new HolePScheduler(peer.peerBean().holePNumberOfPunches(), thisInstance));
                holePunchScheduler.start();
}
    
   
  
   







 Instance 272







   
  
   
    
Class750.init(){
    final Thread s = new Thread() {
      public void run() {
        AbstractImageEntry.this.initPlatform();
      }
    };
    s.start();
}
    
   
  
   







 Instance 273







   
  
   
    
Class750.operationFailed(Object ctx,final PubSubException exception)#1{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    ConcurrencyUtils.put(q, Either.of((T) null, (Exception) exception));
                }
            }).start();
}
    
   
  
   







 Instance 274







   
  
   
    
Class90.observeInBackground(final double secs){
      Thread th = new Thread(){
         public void run(){
            observe(secs);
         }
      };
      th.start();
}
    
   
  
   







 Instance 275







   
  
   
    
Class90.invokeHotkeyPressed(final HotkeyEvent e){
      Thread hotkeyThread = new Thread(){
         public void run() {
            hotkeyPressed(e);
         }
      };
      hotkeyThread.start();
}
    
   
  
   







 Instance 276







   
  
   
    
Class90.start()#0{
          Thread reaperThread = new Thread(this);
          reaperThread.start();
}
    
   
  
   







 Instance 277







   
  
   
    
Class90.ManInTheMiddle(int clientPort,int serverPort)#0{
    new Thread(this).start();
}
    
   
  
   







 Instance 278







   
  
   
    
Class580.updateWidget(final Context context,final int widgetId)#1{
        new Thread(new Runnable() {
            @Override
            public void run() {
                updateWidget(context, AppWidgetManager.getInstance(context), widgetId, BatteryLevel.getCurrent());
            }
        }).start();
}
    
   
  
   







 Instance 279







   
  
   
    
Class580.startPattern(final VmProxy vmProxy,final VmBindings desiredBindings,final BindingsChecker bindingsChecker,Handler<VmBindings> successHandler,Handler<LopError> errorHandler,long pollingInterval){
        new Thread(this).start();
}
    
   
  
   







 Instance 280







   
  
   
    
Class580.ConstantQLayer(CoordinateSystem cs,File audioFile,int increment,int minFreqInCents,int maxFreqInCents,int binsPerOctave){
    new Thread(this, "Constant Q Initialization").start();
}
    
   
  
   







 Instance 281







   
  
   
    
Class150.erasePermissions()#1{
        new Thread(new Runnable(){
            public void run(){
                getContentResolver().delete(Database.ACCESS_URI,
                        Access.COL_ACCT + "=?",
                        new String[] { String.valueOf(keyid) });
            }
        }).start();
}
    
   
  
   







 Instance 282







   
  
   
    
Class150.replaceItem(final BibItem replacement)#0{
        new Thread(new Runnable() {
            public void run(){
                replacement.writeToDB(cr);
                mHandler.sendMessage(Message.obtain(mHandler,
                       BibItemListAdapter.REPLACED_ITEM, replacement));
            }
        }).start();
}
    
   
  
   







 Instance 283







   
  
   
    
Class150.addItem(final BibItem item)#0{
        new Thread(new Runnable() {
            public void run(){
                item.writeToDB(mContext.getContentResolver());
                mHandler.sendMessage(Message.obtain(mHandler, 
                                       BibItemListAdapter.INSERTED_ITEM, item));
            }
        }).start();
}
    
   
  
   







 Instance 284







   
  
   
    
Class150.onReceive(Context context,Intent intent)#0{
    new Thread(new SignalFlareRunner(context,event)).start();
}
    
   
  
   







 Instance 285







   
  
   
    
Class150.onReceive(Context context,Intent intent)#1{
    Event event=EventFactory.getEvent(context, intent);
    new Thread(new EventManagerRunner(context,event)).start();
}
    
   
  
   







 Instance 286







   
  
   
    
Class150.deleteEntry(int dataid){
    Thread thread = new Thread(new DeleteEntry(dataid));
    thread.start();
}
    
   
  
   







 Instance 287







   
  
   
    
Class390.test_start(){
        Thread thr = new Thread();
            thr.start();
}
    
   
  
   







 Instance 288







   
  
   
    
Class660.inputGetSet()#0{
      new Thread(_future).start();
}
    
   
  
   







 Instance 289







   
  
   
    
Class660.asyncDiscovery(Discovery.WithDevices wd)#1{
      d = new Discovery(new Socket(DevMachineIP,DiscoveryServerPort));
      d.setWithDevices(wd);
      new Thread(d).start();
}
    
   
  
   







 Instance 290







   
  
   
    
Class660.EthernetHubServer(int port)#0{
        new Thread(this).start();
}
    
   
  
   







 Instance 291







   
  
   
    
Class660.generateInThread(Container parent)#0{
        new Thread(this).start();
}
    
   
  
   







 Instance 292







   
  
   
    
Class660.init(final Context context)#1{
        new Thread(new Runnable() {
            public void run() {
                cacheAllThreads(context);
            }
        }).start();
}
    
   
  
   







 Instance 293







   
  
   
    
Class440.thread(final String name){
    Thread later = new Thread() {
      public void run() {
        method(name);
      }
    };
    later.start();
}
    
   
  
   







 Instance 294







   
  
   
    
Class440.mainloop()#3{
        new Thread(mLoop).start();
}
    
   
  
   







 Instance 295







   
  
   
    
Class640.migrateAudio(@NonNull final Context appContext)#0{
    new Thread(new Runnable() {
      @Override
      public void run() {
        migrateAudioHelper(appContext);
      }
    }).start();
}
    
   
  
   







 Instance 296







   
  
   
    
Class640.onCreate()#1{
    new Thread(threadBody).start();
}
    
   
  
   







 Instance 297







   
  
   
    
Class120.restore(){
        new Thread(m_restorePlanner, "restore-planner-host-" + m_hostId).start();
}
    
   
  
   







 Instance 298







   
  
   
    
Class120.startInternal()#2{
                Socket s = serverSocket.accept();
                new Thread(new DebuggerAuthProtocol(s)).start();
}
    
   
  
   







 Instance 299







   
  
   
    
Class120.start()#1{
        new Thread(new Runnable()
        {
            public void run() {
                startInternal();
            }
        }, "FreeMarker Debugger Server Acceptor").start();
}
    
   
  
   







 Instance 300







   
  
   
    
Class120.operationFinished(Object ctx,Void resultOfOperation)#1{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    if (logger.isDebugEnabled())
                        logger.debug("Operation finished!");
                    ConcurrencyUtils.put(queue, true);
                }
            }).start();
}
    
   
  
   







 Instance 301







   
  
   
    
Class270.showNotify()#0{
    Thread thread = new Thread( this );
    thread.start();
}
    
   
  
   







 Instance 302







   
  
   
    
Class270.ContactListManagerAdapter(ImConnectionAdapter conn)#2{
        new Thread(this).start();
}
    
   
  
   







 Instance 303







   
  
   
    
Class270.logoutAsync()#0{
        new Thread(new Runnable() {
            @Override
            public void run() {
                do_logout();
            }
        }).start();
}
    
   
  
   







 Instance 304







   
  
   
    
Class300.Suspend()#1{
        Thread thread = new Thread(group, this);
        thread.start();
}
    
   
  
   







 Instance 305







   
  
   
    
Class300.init()#2{
        t = new Thread(new Watcher());
        t.start();
}
    
   
  
   







 Instance 306







   
  
   
    
Class300.init()#3{
        Thread t = new Thread(this, "PEContainer");
        t.start();
}
    
   
  
   







 Instance 307







   
  
   
    
Class300.execute(final Command<T> command)#0{
        new Thread(new Runnable() {
            public void run() {
                executeNext(command);
            }
        }).start();
}
    
   
  
   







 Instance 308







   
  
   
    
Class300.doInfo()#1{
        Thread t = new Thread(this);
        t.start();
}
    
   
  
   







 Instance 309







   
  
   
    
Class300.ComponentAdd(AsmackClient client)#1{
        new Thread(this).start();
}
    
   
  
   







 Instance 310







   
  
   
    
Class300.run()#2{
            new Thread(new Runnable() {
                public void run() {
                    doRealRun();
                }
            }).start();
}
    
   
  
   







 Instance 311







   
  
   
    
Class10.start()#2{
      Thread t = new Thread(this);
      t.start();
}
    
   
  
   







 Instance 312







   
  
   
    
Class250.start()#2{
        Thread t = new Thread (dispatcher);
        t.start();
}
    
   
  
   







 Instance 313







   
  
   
    
Class310.launch(final IEditorPart editor,final String mode,final boolean forceLeinLaunchWhenPossible)#0{
        new Thread(new Runnable() {
        @Override public void run() {
          LoadFileAction.run((ClojureEditor) editor, mode, forceLeinLaunchWhenPossible);
        }}).start();
}
    
   
  
   







 Instance 314







   
  
   
    
Class310.init(Context context)#0{
        new Thread(new Runnable() {
            public void run() {
                fill();
            }
        }, "RecipientIdCache.init").start();
}
    
   
  
   







 Instance 315







   
  
   
    
Class310.onClick(View v)#2{
          Thread s = new Thread(r);
          s.start();
}
    
   
  
   







 Instance 316







   
  
   
    
Class310.enter()#0{
            new Thread(new Runnable() {
                public void run() {
                    writeApConfiguration(mWifiApConfig);
                    sendMessage(WifiStateMachine.CMD_SET_AP_CONFIG_COMPLETED);
                }
            }).start();
}
    
   
  
   







 Instance 317







   
  
   
    
Class310.start(final int timeout)#2{
                new Thread(new Runnable() {
                    public void run() {
                        sleep(timeout);
                        if (mRunning) timeout();
                    }
                }, "SipSessionTimerThread").start();
}
    
   
  
   







 Instance 318







   
  
   
    
Class730.search_server(){
        new Thread(this).start();
}
    
   
  
   







 Instance 319







   
  
   
    
Class730.testCollectBoundedWait()#0{
        new Thread(new Producer()).start();
}
    
   
  
   







 Instance 320







   
  
   
    
Class730.testCollectUnboundedWait()#1{
        new Thread(new Producer()).start();
}
    
   
  
   







 Instance 321







   
  
   
    
Class730.init(final ServletConfig config)#0{
        JedisPool pool = getPool(getServletContext());
        new Thread(new SyncWorkerRunnable(DBHelperFactory.createHelper(pool))).start();
}
    
   
  
   







 Instance 322







   
  
   
    
Class180.writeBlocksUntilTimeout7()#0{
        final T blockingChannel = createBlockingWritableByteChannel(channelMock, 0, TimeUnit.MILLISECONDS);
        final Write writeRunnable = new Write(blockingChannel, "wait nothing");
        final Thread writeThread = new Thread(writeRunnable);
        writeThread.start();
}
    
   
  
   







 Instance 323







   
  
   
    
Class180.sendMessage(final ServiceReference ref,final Object content)#1{
        new Thread(new Runnable() {
            public void run() {
                Exchange exchange = ref.createExchange(new MockHandler());
                exchange.send(exchange.createMessage().setContent(content));
            }
        }).start();
}
    
   
  
   







 Instance 324







   
  
   
    
Class180.onResume()#1{
        new Thread(new Runnable() {
            @Override
            public void run() {
                update();
            }
        }).start();
}
    
   
  
   







 Instance 325







   
  
   
    
Class180.CleanTmpDirProcess(int howOftenExecutedInSeconds,long maxFileAgeInHours){
    Thread t = new Thread(this);
    t.start();
}
    
   
  
   







 Instance 326







   
  
   
    
Class180.setUp()#1{
            new Thread(fixtures[i]).start();
}
    
   
  
   







 Instance 327







   
  
   
    
Class180.go()#1{
    new Thread(this).start();
}
    
   
  
   







 Instance 328







   
  
   
    
Class630.main(String[] args)#0{
      WorkProcessor processor = new WorkProcessor();
      new Thread(processor, "Work-Processor").start();
}
    
   
  
   







 Instance 329







   
  
   
    
Class630.main(String[] args)#2{
      new Thread(new NioServer(null, 9090, processor)).start();
}
    
   
  
   







 Instance 330







   
  
   
    
Class630.importRepositories(File file,String onlyLatestVersions,String standardReplacement,String replacements,ProcessBean processBean){
    OptimizedImportController importController = new OptimizedImportController(file, onlyLatestVersions, standardReplacement, replacements, processBean);
    Thread thread = new Thread(importController);
    thread.start();
}
    
   
  
   







 Instance 331







   
  
   
    
Class630.collectAll(){
     Thread thread = new Thread(){
       public void run(){
         logger.info("begin disposal");
         collectExpired();
         collectLFU();
         logger.info("disposal complete");
       }
     };
     thread.start();
}
    
   
  
   







 Instance 332







   
  
   
    
Class630.start()#0{
                Thread thread = new Thread(this);
                thread.start();
}
    
   
  
   







 Instance 333







   
  
   
    
Class50.operationFailed(Object ctx,PubSubException exception)#1{
            new Thread(new Runnable() {
                public void run() {
                    ConcurrencyUtils.put(queue, false);
                }
            }).start();
}
    
   
  
   







 Instance 334







   
  
   
    
Class50.operationFinished(Object ctx,Void result)#0{
            new Thread(new Runnable() {
                public void run() {
                    ConcurrencyUtils.put(queue, true);
                }
            }).start();
}
    
   
  
   







 Instance 335







   
  
   
    
Class50.onStartCommand(Intent i,int flags,int id)#3{
    new Thread(this).start();
}
    
   
  
   







 Instance 336







   
  
   
    
Class190.LoadLocaleProviderTestHelper(URL[] classpathes)#0{
        Thread thread = new Thread(this);
        thread.setContextClassLoader(loader);
        thread.start();
        thread.join();
}
    
   
  
   







 Instance 337







   
  
   
    
Class720.test_ConstructorLjava_lang_String(){
        Thread t = new Thread("Testing");
        assertEquals("Created tread with incorrect name",
                "Testing", t.getName());
        t.start();
}
    
   
  
   







 Instance 338







   
  
   
    
Class800.prepareThreads(int threadCount,Runnable runnable)#2{
            Thread thread = new Thread(runnable);
            thread.setUncaughtExceptionHandler(this);
            thread.start();
            threads.add(thread);
}
    
   
  
   







 Instance 339







   
  
   
    
Class420.test_ConstructorLjava_lang_RunnableLjava_lang_String(){
        Thread st1 = new Thread(new SimpleThread(1), "SimpleThread1");
        assertEquals("Constructed thread with incorrect thread name", "SimpleThread1", st1
                .getName());
        st1.start();
}
    
   
  
   







 Instance 340







   
  
   
    
Class190.test_parkFor_3()#0{
        CyclicBarrier barrier = new CyclicBarrier(1);
        Parker parker = new Parker(barrier, false, 1000);
        Thread parkerThread = new Thread(parker);
        UNSAFE.unpark(parkerThread);
        parkerThread.start();
}
    
   
  
   







 Instance 341







   
  
   
    
Class720.startServerThread(Socket s){
    Thread serverThread = new Thread(new ServerRunner(s));
      threads.add(serverThread);
    serverThread.start();
}
    
   
  
   







 Instance 342







   
  
   
    
Class10.addTaskTracker(TaskTrackerRunner taskTracker){
    Thread taskTrackerThread = new Thread(taskTracker);
    taskTrackerList.add(taskTracker);
    taskTrackerThreadList.add(taskTrackerThread);
    taskTrackerThread.start();
}
    
   
  
   





