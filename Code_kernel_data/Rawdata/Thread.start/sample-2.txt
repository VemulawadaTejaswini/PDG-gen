
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class780.connect()#1{
      (new Thread(this)).start();
}
    
   
  
   







 Instance 1







   
  
   
    
Class320.start()#1{
        outgoing.start();
}
    
   
  
   







 Instance 2







   
  
   
    
Class160.run()#2{
        Thread t = new BinFaTest();
        t.start();
}
    
   
  
   







 Instance 3







   
  
   
    
Class540.startTransmission(Socket socket2)#0{
        Thread t = new Thread(reader, "pydevd.reader");
        t.start();
        t = new Thread(writer, "pydevd.writer");
        t.start();
}
    
   
  
   







 Instance 4







   
  
   
    
Class780.updateUnwatchedCounts(){
        Thread t = new UpdateUnwatchThread(String.valueOf(getShowId()));
        t.start();
}
    
   
  
   







 Instance 5







   
  
   
    
Class320.start()#2{
        incoming.start();
}
    
   
  
   







 Instance 6







   
  
   
    
Class530.onCliPortConnectionEstablished()#0{
        Thread listeningThread = new ListeningThread(socketRef.get(),
                                                     currentConnectionGeneration.incrementAndGet());
        listeningThread.start();
}
    
   
  
   







 Instance 7







   
  
   
    
Class480.animateReloadButton(boolean animate)#1{
      (new Thread(new MyThread())).start();
}
    
   
  
   







 Instance 8







   
  
   
    
Class480.addThread(){
        Thread t = new WorkerThread(workQueue);
        threads.add(t);
        t.start();            
}
    
   
  
   







 Instance 9







   
  
   
    
Class570.onClick(View arg0)#0{
      Thread thread = new dropCacheThread(dropCacheHandler);
      thread.start();
}
    
   
  
   







 Instance 10







   
  
   
    
Class550.start()#0{
    (new Thread(this)).start();
}
    
   
  
   







 Instance 11







   
  
   
    
Class550.addAccelerationListenerImpl(AccelerationListener listener)#0{
      (new Thread(this)).start();
}
    
   
  
   







 Instance 12







   
  
   
    
Class450.onCreate()#0{
        notifyingThread.start();
}
    
   
  
   







 Instance 13







   
  
   
    
Class80.launchStreamConsumers(List<Thread> join,Process p)#0{
        err.start();
}
    
   
  
   







 Instance 14







   
  
   
    
Class80.launchStreamConsumers(List<Thread> join,Process p)#2{
        out.start();
}
    
   
  
   







 Instance 15







   
  
   
    
Class210.ssij(Thread t)#1{
        t.start();
}
    
   
  
   







 Instance 16







   
  
   
    
Class210.main(String[] args)#2{
    thread1.start();
}
    
   
  
   







 Instance 17







   
  
   
    
Class210.main(String[] args)#6{
    thread2.start();
}
    
   
  
   







 Instance 18







   
  
   
    
Class650.testServerPrepStmtDeadlock()#0{
    testThread1.start();
}
    
   
  
   







 Instance 19







   
  
   
    
Class650.testServerPrepStmtDeadlock()#2{
    testThread2.start();
}
    
   
  
   







 Instance 20







   
  
   
    
Class670.launchManualOperation()#0{
    final Desktop desktop = Executions.getCurrent().getDesktop();
    desktop.enableServerPush(true);
    Thread manualOperation = manualOperation(desktop);
    manualOperation.start();
}
    
   
  
   







 Instance 21







   
  
   
    
Class670.loopRegister(int expire_time,int renew_time)#2{
      if (!is_running) (new Thread(this)).start();
}
    
   
  
   







 Instance 22







   
  
   
    
Class680.startApp()#2{
    (new Thread( this )).start();
}
    
   
  
   







 Instance 23







   
  
   
    
Class800.TestAuthorizationModule()#3{
      thread.start();
}
    
   
  
   







 Instance 24







   
  
   
    
Class800.testLocking()#2{
    Thread t2 = createAddToListThread(prevayler1, "2");
    t1.start();
}
    
   
  
   







 Instance 25







   
  
   
    
Class800.testLocking()#6{
    t2.start();
}
    
   
  
   







 Instance 26







   
  
   
    
Class470.HttpContinueStackOverflow()#2{
        (new Thread(s)).start();
}
    
   
  
   







 Instance 27







   
  
   
    
Class470.startSimpleWriter(String threadName,final OutputStream os,final int start)#2{
        (new Thread(new Runnable() {
            public void run() {
                try { simpleWrite(os, start); }
                catch (Exception e) {unexpected(e); }
            }}, threadName)).start();
}
    
   
  
   







 Instance 28







   
  
   
    
Class470.execute()#1{
    (new Thread(new PreviousNames(plugin, new PreviousCallback(plugin, sender), target, targetUUID, senderName))).start();
}
    
   
  
   







 Instance 29







   
  
   
    
Class470.execute()#6{
      (new Thread(new MCBansSettings(plugin, new MCBansSettingsCallback(plugin, sender), sender.getName(), this.args.toString()))).start();
}
    
   
  
   







 Instance 30







   
  
   
    
Class470.onPlayerQuit(final PlayerQuitEvent event)#2{
        (new Thread(new DisconnectRequest(plugin, event.getPlayer().getName()))).start();
}
    
   
  
   







 Instance 31







   
  
   
    
Class470.newListener()#1{
        (new Thread(this)).start();
}
    
   
  
   







 Instance 32







   
  
   
    
Class0.runAfterConnect(int port,int connectTimeout,String threadName,final ConnectNotifyingTask task)#2{
        taskThread.start();
}
    
   
  
   







 Instance 33







   
  
   
    
Class560.testServerPrepStmtDeadlock()#3{
        testThread1.start();
}
    
   
  
   







 Instance 34







   
  
   
    
Class560.testServerPrepStmtDeadlock()#4{
        testThread2.start();
}
    
   
  
   







 Instance 35







   
  
   
    
Class200.startNewAcceptor(){
        Thread t = AccessController.doPrivileged(
            new NewThreadAction(ConnectionAcceptor.this,
                                "Multiplex Accept-" + ++ threadNum,
                                true));
        t.start();
}
    
   
  
   







 Instance 36







   
  
   
    
Class200.shutdown()#0{
        (new Thread(this,"InactiveGroup")).start();
}
    
   
  
   







 Instance 37







   
  
   
    
Class20.shutdown()#1{
        (new Thread(this,"DownloadActivationGroup")).start();
}
    
   
  
   







 Instance 38







   
  
   
    
Class170.runDiscovery()#6{
    (new Thread(this.pt)).start();
}
    
   
  
   







 Instance 39







   
  
   
    
Class400.onShutdown(ApplicationEvent event)#1{
      Thread selfDestructThread = new ShutdownBackstopThread(timeout);
      selfDestructThread.start();
}
    
   
  
   







 Instance 40







   
  
   
    
Class400.handshake(){
        WrapperFuture<Void,Void> wFuture = new WrapperFuture<>();
        Thread t = new WebSocketSslHandshakeThread(wFuture);
        t.start();
}
    
   
  
   







 Instance 41







   
  
   
    
Class400.main(String[] args)#1{
  thread2.start();
}
    
   
  
   







 Instance 42







   
  
   
    
Class400.main(String[] args)#5{
  thread1.start();
}
    
   
  
   







 Instance 43







   
  
   
    
Class400.main(String[] args)#1{
    thread1.start();
}
    
   
  
   







 Instance 44







   
  
   
    
Class400.main(String[] args)#3{
    thread2.start();
}
    
   
  
   







 Instance 45







   
  
   
    
Class400.BluetoothRemoteScreen()#0{
    (new Thread( this )).start();
}
    
   
  
   







 Instance 46







   
  
   
    
Class370.readStream(InputStream source,CompactCalendar startDate,ParserContext<GpxRoute> context)#0{
        Process process = startBabel(source, getFormatName(), BABEL_INTERFACE_FORMAT_NAME, ROUTE_WAYPOINTS_TRACKS);
        Thread observer = observeProcess(process, getReadCommandExecutionTimeoutPreference());
        observer.start();
}
    
   
  
   







 Instance 47







   
  
   
    
Class30.testConcurrentEncodeDecode()#3{
    thread1.start();
}
    
   
  
   







 Instance 48







   
  
   
    
Class90.testXCommandLifecycleNotLocking()#1{
        Thread t = new LockGetter();
        t.start();
}
    
   
  
   







 Instance 49







   
  
   
    
Class580.shutdown()#0{
        (new Thread(this,"RestartLatecomer")).start();
}
    
   
  
   







 Instance 50







   
  
   
    
Class580.testSuccessfulTryLockTimeout()#2{
        final CyclicBarrier barrier=new CyclicBarrier(2);
        Thread locker=new Locker(barrier);
        locker.start();
}
    
   
  
   







 Instance 51







   
  
   
    
Class390.shutdown()#1{
        (new Thread(this,"NestedActivate")).start();
}
    
   
  
   







 Instance 52







   
  
   
    
Class640.testDuringFailover()#0{
    Thread t = new BalancerThread();
    t.start();
}
    
   
  
   







 Instance 53







   
  
   
    
Class270.createAcceptor()#1{
        Thread t=getThreadFactory().newThread(retval, "STATE server socket acceptor");
        t.start();
}
    
   
  
   







 Instance 54







   
  
   
    
Class300.create()#3{
            (new Thread(svr)).start();
}
    
   
  
   







 Instance 55







   
  
   
    
Class300.init()#2{
        (new Thread(this)).start();
}
    
   
  
   







 Instance 56







   
  
   
    
Class300.updateTimezoneDependentFields(){
        Thread thread = new TimezoneCheckerThread();
        thread.start();
}
    
   
  
   







 Instance 57







   
  
   
    
Class10.onClick(View arg0)#0{
      Thread thread = new storeCacheThread(storeCacheHandler);
      thread.start();
}
    
   
  
   







 Instance 58







   
  
   
    
Class730.start()#2{
    (new Thread(this, "HTTP post thread")).start();
}
    
   
  
   







 Instance 59







   
  
   
    
Class630.main(String[] args)#4{
            (new Thread(new Downloader(in, out, rootDir))).start();
}
    
   
  
   







 Instance 60







   
  
   
    
Class50.MonitorServiceImpl()#0{
    (new Thread(new AlarmManager(conf, this))).start();
}
    
   
  
   





