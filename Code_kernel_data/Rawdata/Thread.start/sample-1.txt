
  
CodeKernel
  
     h3{color:#800; font-family: "Courier New", Courier, monospace; font-size: 20pt}
  



 Instance 0







   
  
   
    
Class790.HttpClient()#1{
        Thread t = new Thread(this, name);
        t.setDaemon(true);
        t.start();
}
    
   
  
   







 Instance 1







   
  
   
    
Class50.AsyncInMemoryIndexingService()#0{
    Thread delete = new Thread(new DeleteThread());
    delete.setDaemon(true);
    delete.start();
}
    
   
  
   







 Instance 2







   
  
   
    
Class310.execute(Runnable command){
                String name = metadata.get(Metadata.RESOURCE_NAME_KEY);
                if (name != null) {
                    name = "Apache Tika: " + name;
                } else {
                    name = "Apache Tika";
                }
                Thread thread = new Thread(command, name);
                thread.setDaemon(true);
                thread.start();
}
    
   
  
   







 Instance 3







   
  
   
    
Class170.start()#0{
    updateHeartbeatTimestamp();
    Thread t = new Thread(new ReceiverRunnable(getSourceIdentifier()), "" + getSourceIdentifier() + "-Receiver");
    t.setDaemon(false);
    t.start();
}
    
   
  
   







 Instance 4







   
  
   
    
Class620.start()#1{
        process = builder.start();
        shutdownHook = new Thread(new DestroyProcessRunner(process));
        InputStreamReader output = new InputStreamReader(new BufferedInputStream(process.getInputStream()));
        Thread t = new Thread(new ReaderToWriterCopier(output, outputMulticast));
        t.setDaemon(true);
        t.start();
}
    
   
  
   







 Instance 5







   
  
   
    
Class480.activate()#0{
        final Thread thread = new Thread(this, "Apache Sling Job Topology Listener Thread");
        thread.setDaemon(true);
        thread.start();
}
    
   
  
   







 Instance 6







   
  
   
    
Class570.ProcessManager(){
        Thread reaperThread = new Thread(ProcessManager.class.getName()) {
            @Override public void run() {
                watchChildren();
            }
        };
        reaperThread.setDaemon(true);
        reaperThread.start();
}
    
   
  
   







 Instance 7







   
  
   
    
Class570.createWorker(String nodeId){
         Worker worker = new Worker(this, port, nodeId);
         workers.add(worker);
         Thread t = new Thread(worker);
         t.setDaemon(true);
         t.start();
}
    
   
  
   







 Instance 8







   
  
   
    
Class600.startListening(){
    final Thread thread = new Thread(this);
    thread.setDaemon(true);
    thread.start();
}
    
   
  
   







 Instance 9







   
  
   
    
Class410.backgroundTask(Runnable task){
        Thread th = new Thread(task, task.getClass().getName());
        th.setDaemon(true);
        th.start();
}
    
   
  
   







 Instance 10







   
  
   
    
Class350.StreamMonitor(InputStream istr,String prefixString,boolean printContents)#0{
    Thread thr = new Thread(this);
    thr.setDaemon(true);
    thr.start();
}
    
   
  
   







 Instance 11







   
  
   
    
Class740.InternalEventHandler(VirtualMachineImpl vm,EventQueueImpl queue){
        Thread thread = new Thread(vm.threadGroupForJDI(), this,
                                   "JDI Internal Event Handler");
        thread.setDaemon(true);
        thread.start();
}
    
   
  
   







 Instance 12







   
  
   
    
Class740.startListener(Listener l)#1{
    Thread t = new Thread(l, "Listener-" + getKey(l.getListenerSpec()));
    t.setDaemon(true);
    t.start();
}
    
   
  
   







 Instance 13







   
  
   
    
Class60.newStartedThread(Runnable runnable){
        Thread t = new Thread(runnable);
        t.setDaemon(true);
        t.start();
}
    
   
  
   







 Instance 14







   
  
   
    
Class70.forCaches(final Logger logger,final Cache... caches){
    logger.error("DebugStatistics object created - do not use in production code");
    final DebugStatistics stats = new DebugStatistics(logger, caches);
    final Thread statsThread = new Thread(stats);
    statsThread.setDaemon(true);
    statsThread.start();
}
    
   
  
   







 Instance 15







   
  
   
    
Class170.activate(){
        final Thread thread = new Thread(this, "Apache Sling Timed Job Topology Listener Thread");
        thread.setDaemon(true);
        thread.start();
}
    
   
  
   







 Instance 16







   
  
   
    
Class90.StopWatchTimer()#0{
      Thread timerThread = new Thread(this);
      timerThread.setDaemon(true);
      timerThread.start();
}
    
   
  
   







 Instance 17







   
  
   
    
Class150.evaluate()#0{
                Thread t = new Thread("JavaFX Init Thread") {
                    public void run() {
                        Application.launch(JavaFXRule.class, new String[0]);
                    }
                };
                t.setDaemon(true);
                t.start();
}
    
   
  
   







 Instance 18







   
  
   
    
Class640.serviceAdded(ServiceEvent serviceEvent)#0{
      GetServiceInfoRunnable r = new GetServiceInfoRunnable(serviceEvent);
      Thread t = new Thread(r);
      t.setDaemon(true);
      t.start();
}
    
   
  
   







 Instance 19







   
  
   
    
Class120.startJob(Runnable target){
        final Thread thread = new Thread(target);
        thread.setDaemon(true);
        thread.start();
}
    
   
  
   







 Instance 20







   
  
   
    
Class270.createTBI(TeamBroadcastListener list){
    TeamBroadcastInstance ret = new TeamBroadcastInstance();
    Thread t = new Thread(ret, String.format("nbtool-%s", ret.name()));
    t.setDaemon(true);
    t.start();
}
    
   
  
   







 Instance 21







   
  
   
    
Class250.run(){
                Thread thr = new Thread(thisRunnable);
                thr.setDaemon(true);
                thr.start();
}
    
   
  
   







 Instance 22







   
  
   
    
Class170.start()#2{
    t = new Thread(new HeartbeatObserverRunnable(), "" + getSourceIdentifier() + "-HeartbeatObserver");
    t.setDaemon(false);
    t.start();
}
    
   
  
   







 Instance 23







   
  
   
    
Class290.HTTPSession(Socket s){
      Thread t = new Thread( this );
      t.setDaemon( true );
      t.start();
}
    
   
  
   







 Instance 24







   
  
   
    
Class790.HTTPSession(Socket s){
            Thread t = new Thread( this );
            t.setDaemon( true );
            t.start();
}
    
   
  
   







 Instance 25







   
  
   
    
Class490.start(){
    networkWatchdogRunnable = new NetworkWatchdogRunnable();
    Thread t = new Thread(networkWatchdogRunnable, "NetworkWatchdogRunnable");
    t.setDaemon(true);
    t.start();
}
    
   
  
   







 Instance 26







   
  
   
    
Class330.DiffingObserver(boolean startInBackground)#0{
                Thread th = new Thread(this);
                th.setDaemon(true);
                th.start();
}
    
   
  
   







 Instance 27







   
  
   
    
Class510.run()#2{
                Thread taskThread = new Thread(task);
                taskThread.setDaemon (true);
                taskThread.start();
}
    
   
  
   







 Instance 28







   
  
   
    
Class130.registerServices(JmDNS jmDns,List<ServiceInfo> serviceInfos)#0{
    if(logger.isInfoEnabled()) logger.info("Registering services for {}.", jmDns.getHostName());
    ServiceRegistrationRunnable r = new ServiceRegistrationRunnable(jmDns, serviceInfos);
    Thread t = new Thread(r);
    t.setDaemon(true);
    t.start();
}
    
   
  
   







 Instance 29







   
  
   
    
Class350.init()#0{
    Thread connectorThread = new Thread(this.connector, "IM-Reconnector-Thread");
    connectorThread.setDaemon(true);
    connectorThread.start();
}
    
   
  
   







 Instance 30







   
  
   
    
Class690.start()#0{
            Thread t = new Thread(new CpuStatRunnable(), "ThreadCpuStatsCollector");
            t.setDaemon(true);
            t.start();
}
    
   
  
   







 Instance 31







   
  
   
    
Class380.init()#0{
            new Thread(messageSender, "MessageSender[" + getServletContext().getContextPath() + "]");
        messageSenderThread.setDaemon(true);
        messageSenderThread.start();
}
    
   
  
   







 Instance 32







   
  
   
    
Class200.handle(InputStream in){
            IOHandler handler = new IOHandler(in);
            Thread thr = new Thread(handler);
            thr.setDaemon(true);
            thr.start();
}
    
   
  
   







 Instance 33







   
  
   
    
Class70.start()#0{
    final Thread dispatchThread = new Thread(getCollectionJob(), getName());
    dispatchThread.setDaemon(false);
    dispatchThread.start();
}
    
   
  
   







 Instance 34







   
  
   
    
Class220.setUp()#1{
    int port = MetaStoreUtils.findFreePort();
    Thread t = new Thread(new RunMS(port));
    t.setDaemon(true);
    t.start();
}
    
   
  
   







 Instance 35







   
  
   
    
Class220.TorrentFetcherDownload(TransferManager manager,TorrentDownloadInfo info)#0{
        Thread t = new Thread(new FetcherRunnable(), "Torrent-Fetcher - " + info.getTorrentUrl());
        t.setDaemon(true);
        t.start();
}
    
   
  
   







 Instance 36







   
  
   
    
Class20.startPump(String mode,InputStream inputStream){
        ConsoleStreamer pump = new ConsoleStreamer(mode,inputStream);
        Thread thread = new Thread(pump,"ConsoleStreamer/" + mode);
        thread.setDaemon(true);
        thread.start();
}
    
   
  
   







 Instance 37







   
  
   
    
Class90.main(String[] args){
        Thread clientThread = new Thread(new BinaryLightClient());
        clientThread.setDaemon(false);
        clientThread.start();
}
    
   
  
   







 Instance 38







   
  
   
    
Class390.MyInputStream(String name,InputStream in)#2{
        Thread thr = new Thread(this);
        thr.setDaemon(true);
        thr.start();
}
    
   
  
   







 Instance 39







   
  
   
    
Class730.Tee(Socket s)#0{
      Thread t = new Thread(this);
      t.setDaemon(true);
      t.start();
}
    
   
  
   







 Instance 40







   
  
   
    
Class50.start(boolean daemon)#0{
      Thread serverThread = new Thread(this, "WOLips Server");
      serverThread.setDaemon(daemon);
      serverThread.start();
}
    
   
  
   







 Instance 41







   
  
   
    
Class50.AsyncInMemoryIndexingService()#1{
    Thread audit = new Thread(new AuditThread());
    audit.setDaemon(true);
    audit.start();
}
    
   
  
   







 Instance 42







   
  
   
    
Class80.startFailureEmulator(){
    FailureEmulator failureEmulator = new FailureEmulator();
    Thread failureEmulatorThread = new Thread(failureEmulator);
    failureEmulatorThread.setDaemon(true);
    failureEmulatorThread.setName("Failure Emulator");
    failureEmulatorThread.start();
}
    
   
  
   







 Instance 43







   
  
   
    
Class390.startLJTHealthMonitor(){
       new LocalJobTrackerHealthMonitor();
   Thread ljtHealthMonitorThread = new Thread(ljtHealthMonitor);
   ljtHealthMonitorThread.setDaemon(true);
   ljtHealthMonitorThread.setName("Local JobTracker Health Monitor");
   ljtHealthMonitorThread.start();
}
    
   
  
   







 Instance 44







   
  
   
    
Class330.start(){
      Thread statusUpdateThread = new Thread(this);
      statusUpdateThread.setDaemon(true);
      statusUpdateThread.setName("Instrumentation Status Updates");
      statusUpdateThread.start();
}
    
   
  
   







 Instance 45







   
  
   
    
Class420.start(){
    Thread t = new Thread(this);
    t.setDaemon(true);
    t.setName("Network Data Receiver");
    t.start();
}
    
   
  
   







 Instance 46







   
  
   
    
Class640.ControlListener(final int p){
        final Thread listener = new Thread(this);
        listener.setDaemon(true);
        listener.setName("Launchapd startup listener");
        listener.start();
}
    
   
  
   







 Instance 47







   
  
   
    
Class270.installNatCheckMatcher()#0{
                Thread t = new Thread(new NatCheckRunnable());
                t.setDaemon(true);
                t.setName("OSF2F protocol matcher loader");
                t.start();
}
    
   
  
   







 Instance 48







   
  
   
    
Class250.init(TreeLogger initialLogger){
    Thread thread = new Thread(this);
    thread.setDaemon(true);
    thread.setName("Code server (initializing)");
    thread.start();
}
    
   
  
   







 Instance 49







   
  
   
    
Class400.start(){
        Thread t = new Thread(this);
        t.setDaemon(true);
        t.setName("attribute-event-bus");
        if (this.thread.compareAndSet(null, t)) {
            t.start();
        }
}
    
   
  
   







 Instance 50







   
  
   
    
Class490.start(int clientNum){
    Thread clientThread = new Thread(this);
    clientThread.setDaemon(true);
    clientThread.setName("AgentServer-Client" + clientNum);
    clientThread.start();
}
    
   
  
   







 Instance 51







   
  
   
    
Class70.start(){
    Thread callbackConnectionThread = new Thread(this);
    callbackConnectionThread.setDaemon(true);
    callbackConnectionThread.setName("InTrace-Launch-CallbackHandler");
    callbackConnectionThread.start();
}
    
   
  
   







 Instance 52







   
  
   
    
Class760.exec(Runnable code){
            Thread t = new Thread(code);
            t.setDaemon(true);
            t.setName("NanoHttpd Request Processor (#" + requestCount + ")");
            t.start();
}
    
   
  
   







 Instance 53







   
  
   
    
Class10.DelayedSearchQueue(long delay){
            Thread t = new Thread(new DelayedSearchQueueThread());
            t.setDaemon(true);
            t.setName(SEARCH_QUEUE_THREAD_NAME);
            t.start();
}
    
   
  
   







 Instance 54







   
  
   
    
Class570.DownloadBufferManager(InputStream source,DiskManagerFileInfo fileInfo)#0{
            Thread t = new Thread(this);
            t.setName("DownloadBuffer");
            t.setDaemon(true);
            t.start();
}
    
   
  
   







 Instance 55







   
  
   
    
Class760.start(){
    Thread traceServer = new Thread(this);
    traceServer.setName("TraceServer");
    traceServer.setDaemon(true);
    traceServer.start();
}
    
   
  
   







 Instance 56







   
  
   
    
Class590.run(Runnable runnable,String threadName,boolean daemon){
    Thread thread = new Thread(runnable, threadName);
    thread.setName(threadName);
    thread.setDaemon(daemon);
    thread.start();
}
    
   
  
   







 Instance 57







   
  
   
    
Class230.StreamDumper(InputStream source,int bytesToStore,boolean print){
            Thread t = new Thread(this);
            t.setName("BufferDumper");
            t.setDaemon(true);
            t.start();
}
    
   
  
   







 Instance 58







   
  
   
    
Class320.init(M queue)#0{
    Thread daemon = new Thread(new RetryConsumer(this));
    daemon.setName("RetryHandler");
    daemon.setDaemon(true);
    daemon.start();
}
    
   
  
   







 Instance 59







   
  
   
    
Class70.startDeamonThread(boolean blockUntilStarted)#0{
        Thread t = new Thread(this);
        t.setName("Socks server");
        t.setDaemon(true);
        t.start();
}
    
   
  
   







 Instance 60







   
  
   
    
Class70.startDeamonThread(boolean blockUntilStarted)#0{
        Thread echoServerThread = new Thread(this);
        echoServerThread.setName("Echo server");
        echoServerThread.setDaemon(true);
        echoServerThread.start();
}
    
   
  
   







 Instance 61







   
  
   
    
Class10.startDaemonThread(boolean blockUntilStarted)#0{
        Thread serverThread = new Thread(this);
        serverThread.setName("Listen server");
        serverThread.setDaemon(true);
        serverThread.start();
}
    
   
  
   







 Instance 62







   
  
   
    
Class320.init(M delayQueue)#0{
    Thread daemon = new Thread(new LateRerunConsumer(this));
    daemon.setName("LaterunHandler");
    daemon.setDaemon(true);
    daemon.start();
}
    
   
  
   







 Instance 63







   
  
   
    
Class210.run(){
                ThreadGroup tg = Thread.currentThread().getThreadGroup();
                for (ThreadGroup tg2 = tg; tg2 != null; tg2 = tg.getParent())
                    tg = tg2;
                Thread t = new Thread(tg, disposerInstance, "Java2D Disposer");
                t.setDaemon(true);
                t.setPriority(Thread.MAX_PRIORITY);
                t.start();
}
    
   
  
   







 Instance 64







   
  
   
    
Class450.doExecuteNewThread(Runnable runnable,String name){
        String threadName = name + "-" + id.incrementAndGet();
        Thread thread = new Thread(runnable, threadName);
        thread.setDaemon(daemon);
        LOG.trace("Created and running thread[{}]: {}", threadName, thread);
        thread.start();
}
    
   
  
   







 Instance 65







   
  
   
    
Class380.run(){
                    final Thread thr = new Thread(new Cleaner(), "XNIO cleaner thread");
                    thr.setDaemon(true);
                    thr.setContextClassLoader(null);
                    thr.start();
}
    
   
  
   







 Instance 66







   
  
   
    
Class110.run(){
                    Thread timerThread = new Thread(threadGroup, TimerQueue.this,
                                                    "TimerQueue");
                    timerThread.setDaemon(true);
                    timerThread.setPriority(Thread.NORM_PRIORITY);
                    timerThread.start();
}
    
   
  
   







 Instance 67







   
  
   
    
Class370.launch(){
    myRunnable = new MyRunnable(getCaretBlinkingRateTimeMillis());
    Thread t = new Thread(myRunnable, "caret blinker daemon");
    t.setDaemon(true);
    t.setPriority(3);
    t.start();
}
    
   
  
   







 Instance 68







   
  
   
    
Class200.createPoller()#0{
        Thread t = new Thread(poller, "Poller " + getName());
        t.setDaemon(true);
        t.setPriority(Thread.MIN_PRIORITY);
        t.start();
}
    
   
  
   





