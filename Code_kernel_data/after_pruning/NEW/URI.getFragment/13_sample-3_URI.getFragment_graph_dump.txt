Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath) --> Line_3 $$ for (int i = 0; i < uris.length; ++i) [CD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_4 $$ URI u = uris[i] [CD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_5 $$ Path p = new Path(u) [CD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_6 $$ FileSystem fs = p.getFileSystem(conf) [CD]
Line_5 $$ Path p = new Path(u) --> Line_6 $$ FileSystem fs = p.getFileSystem(conf) [FD]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath) --> Line_6 $$ FileSystem fs = p.getFileSystem(conf) [FD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_7 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory())) [CD]
Line_5 $$ Path p = new Path(u) --> Line_7 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory())) [FD]
Line_6 $$ FileSystem fs = p.getFileSystem(conf) --> Line_7 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory())) [FD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_9 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment()) [CD]
Line_4 $$ URI u = uris[i] --> Line_9 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment()) [FD]
Line_5 $$ Path p = new Path(u) --> Line_9 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment()) [FD]
Line_7 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory())) --> Line_9 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment()) [FD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_12 $$ if (name.isAbsolute()) [CD]
Line_9 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment()) --> Line_12 $$ if (name.isAbsolute()) [FD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_15 $$ String linkName = name.toUri().getPath() [CD]
Line_9 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment()) --> Line_15 $$ String linkName = name.toUri().getPath() [FD]
Line_3 $$ for (int i = 0; i < uris.length; ++i) --> Line_16 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i])) [CD]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath) --> Line_16 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i])) [FD]
Line_15 $$ String linkName = name.toUri().getPath() --> Line_16 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i])) [FD]
Line_5 $$ Path p = new Path(u) --> Line_16 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i])) [FD]
Line_7 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory())) --> Line_16 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i])) [FD]
Line_15 $$ String linkName = name.toUri().getPath() --> Line_27 $$ MRApps.addToClassPath(environment, linkName) [FD]
Line_7 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory())) --> Line_6 $$ FileSystem fs = p.getFileSystem(conf) [FD]
