Line_2 $$ public void OopTable(String baseDir) --> Line_3 $$ ByteBuffer bb = ByteBuffer.allocateDirect(64 * 1024).order(ByteOrder.nativeOrder()) [CD]
Line_2 $$ public void OopTable(String baseDir) --> Line_4 $$ while (fc.read(bb) > 0) [CD]
Line_3 $$ ByteBuffer bb = ByteBuffer.allocateDirect(64 * 1024).order(ByteOrder.nativeOrder()) --> Line_4 $$ while (fc.read(bb) > 0) [FD]
Line_4 $$ while (fc.read(bb) > 0) --> Line_5 $$ bb.flip() [CD]
Line_3 $$ ByteBuffer bb = ByteBuffer.allocateDirect(64 * 1024).order(ByteOrder.nativeOrder()) --> Line_5 $$ bb.flip() [FD]
Line_4 $$ while (fc.read(bb) > 0) --> Line_6 $$ while (bb.remaining() >= RowEntry.SIZE) list.add(new RowEntry(bb)); [CD]
Line_3 $$ ByteBuffer bb = ByteBuffer.allocateDirect(64 * 1024).order(ByteOrder.nativeOrder()) --> Line_6 $$ while (bb.remaining() >= RowEntry.SIZE) list.add(new RowEntry(bb)); [FD]
Line_4 $$ while (fc.read(bb) > 0) --> Line_8 $$ bb.compact() [CD]
Line_3 $$ ByteBuffer bb = ByteBuffer.allocateDirect(64 * 1024).order(ByteOrder.nativeOrder()) --> Line_8 $$ bb.compact() [FD]
