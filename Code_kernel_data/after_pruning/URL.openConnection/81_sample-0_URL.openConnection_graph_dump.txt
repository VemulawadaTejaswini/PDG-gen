Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_5 $$ URL url = server.getUrl("/") [CD]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_6 $$ assertEquals("A", readAscii(url.openConnection())) [CD]
Line_5 $$ URL url = server.getUrl("/") --> Line_6 $$ assertEquals("A", readAscii(url.openConnection())) [FD]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [CD]
Line_5 $$ URL url = server.getUrl("/") --> Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_8 $$ connection.addRequestProperty(conditionName, conditionValue) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_8 $$ connection.addRequestProperty(conditionName, conditionValue) [FD]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_9 $$ assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode()) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_9 $$ assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode()) [FD]
Line_2 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_10 $$ assertEquals("", readAscii(connection)) [CD]
Line_7 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_10 $$ assertEquals("", readAscii(connection)) [FD]
