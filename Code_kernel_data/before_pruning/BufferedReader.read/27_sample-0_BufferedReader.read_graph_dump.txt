Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) [ CD ]
Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) -->Line_3 $$ pb.redirectErrorStream(true)[ CD ]
Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) -->Line_4 $$ final Process process = pb.start()[ CD ]
Line_4 $$ final Process process = pb.start()-->Line_4 $$ pb.start()[ CD ]
Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) -->Line_5 $$ BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()))[ CD ]
Line_4 $$ final Process process = pb.start()-->Line_5 $$ process.getInputStream()[ FD ]
Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) -->Line_6 $$ while ((c = input.read()) != -1) [ CD ]
Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) -->Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) [ CD ]
Line_5 $$ BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()))-->Line_6 $$ input.read()[ FD ]
Line_6 $$ while ((c = input.read()) != -1) -->Line_7 $$ System.out.print((char) c)[ CD ]
Line_2 $$ public void runAppFromCMD(PackageApp packageApp, String[] additionalArgs) -->Line_9 $$ input.close()[ CD ]
Line_5 $$ BufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()))-->Line_9 $$ input.close()[ FD ]
