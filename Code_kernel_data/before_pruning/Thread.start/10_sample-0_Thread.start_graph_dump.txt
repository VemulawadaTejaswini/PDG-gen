Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void awaitReadCloses() [ CD ]
Line_2 $$ public void awaitReadCloses() -->Line_3 $$ final Pipe pipe = new Pipe(100)[ CD ]
Line_2 $$ public void awaitReadCloses() -->Line_4 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))[ CD ]
Line_2 $$ public void awaitReadCloses() -->Line_5 $$ awaitThread.start()[ CD ]
Line_4 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))-->Line_5 $$ awaitThread.start()[ FD ]
Line_2 $$ public void awaitReadCloses() -->Line_6 $$ awaitThread.join(200)[ CD ]
Line_4 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))-->Line_6 $$ awaitThread.join(200)[ FD ]
Line_2 $$ public void awaitReadCloses() -->Line_7 $$ assertTrue(awaitThread.isAlive())[ CD ]
Line_4 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))-->Line_7 $$ awaitThread.isAlive()[ FD ]
Line_2 $$ public void awaitReadCloses() -->Line_8 $$ close(pipe.getIn())[ CD ]
Line_3 $$ final Pipe pipe = new Pipe(100)-->Line_8 $$ pipe.getIn()[ FD ]
