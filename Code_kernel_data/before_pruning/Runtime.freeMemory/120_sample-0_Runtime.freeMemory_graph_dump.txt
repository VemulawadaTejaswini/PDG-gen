Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void create(int rows, int cols, boolean isDense) [ CD ]
Line_2 $$ public void create(int rows, int cols, boolean isDense) -->Line_3 $$ Runtime r = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime r = Runtime.getRuntime()-->Line_3 $$ Runtime.getRuntime()[ CD ]
Line_2 $$ public void create(int rows, int cols, boolean isDense) -->Line_4 $$ long available = r.freeMemory()[ CD ]
Line_4 $$ long available = r.freeMemory()-->Line_4 $$ r.freeMemory()[ CD ]
Line_3 $$ Runtime r = Runtime.getRuntime()-->Line_4 $$ r.freeMemory()[ FD ]
Line_2 $$ public void create(int rows, int cols, boolean isDense) -->Line_5 $$ if (size < available) [ CD ]
Line_4 $$ long available = r.freeMemory()-->Line_5 $$ if (size < available) [ FD ]
Line_5 $$ if (size < available) -->Line_6 $$ if (isDense) [ CD ]
Line_6 $$ if (isDense) -->Line_7 $$ if (size > Integer.MAX_VALUE) [ CD ]
Line_7 $$ if (size > Integer.MAX_VALUE) -->Line_8 $$ LOGGER.finer("too big for ArrayMatrix; creating new " + "OnDiskMatrix")[ CD ]
Line_7 $$ if (size > Integer.MAX_VALUE) -->Line_10 $$ return new OnDiskMatrix(rows, cols);[ CD ]
Line_7 $$ if (size > Integer.MAX_VALUE) -->Line_12 $$ LOGGER.finer("creating new (in memory) ArrayMatrix")[ CD ]
Line_7 $$ if (size > Integer.MAX_VALUE) -->Line_13 $$ return new ArrayMatrix(rows, cols);[ CD ]
Line_6 $$ if (isDense) -->Line_16 $$ LOGGER.finer("can fit sparse in memory; creating " + "new SparseMatrix")[ CD ]
Line_6 $$ if (isDense) -->Line_18 $$ return new YaleSparseMatrix(rows, cols);[ CD ]
Line_5 $$ if (size < available) -->Line_21 $$ LOGGER.finer("cannot fit in memory; creating new OnDiskMatrix")[ CD ]
Line_5 $$ if (size < available) -->Line_22 $$ return new OnDiskMatrix(rows, cols);[ CD ]
