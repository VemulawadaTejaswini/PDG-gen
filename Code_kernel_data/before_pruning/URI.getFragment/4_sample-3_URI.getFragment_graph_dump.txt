Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void configureSentinel(URI uri) [ CD ]
Line_2 $$ public void configureSentinel(URI uri) -->Line_3 $$ checkArgument(isNotEmpty(uri.getFragment()), "URI Fragment must contain the sentinelMasterId")[ CD ]
Line_2 $$ public void configureSentinel(URI uri) -->Line_4 $$ String masterId = uri.getFragment()[ CD ]
Line_4 $$ String masterId = uri.getFragment()-->Line_4 $$ uri.getFragment()[ CD ]
Line_2 $$ public void configureSentinel(URI uri) -->Line_5 $$ if (isNotEmpty(uri.getHost())) [ CD ]
Line_5 $$ if (isNotEmpty(uri.getHost())) -->Line_5 $$ isNotEmpty(uri.getHost())[ CD ]
Line_5 $$ if (isNotEmpty(uri.getHost())) -->Line_6 $$ if (uri.getPort() != -1) [ CD ]
Line_6 $$ if (uri.getPort() != -1) -->Line_7 $$ RedisURI.Builder.sentinel(uri.getHost(), uri.getPort(), masterId)[ CD ]
Line_4 $$ String masterId = uri.getFragment()-->Line_7 $$ RedisURI.Builder.sentinel(uri.getHost(), uri.getPort(), masterId)[ FD ]
Line_6 $$ if (uri.getPort() != -1) -->Line_9 $$ RedisURI.Builder.sentinel(uri.getHost(), masterId)[ CD ]
Line_4 $$ String masterId = uri.getFragment()-->Line_9 $$ RedisURI.Builder.sentinel(uri.getHost(), masterId)[ FD ]
Line_2 $$ public void configureSentinel(URI uri) -->Line_12 $$ if (builder == null && isNotEmpty(uri.getAuthority())) [ CD ]
Line_12 $$ if (builder == null && isNotEmpty(uri.getAuthority())) -->Line_13 $$ String authority = uri.getAuthority()[ CD ]
Line_13 $$ String authority = uri.getAuthority()-->Line_13 $$ uri.getAuthority()[ CD ]
Line_12 $$ if (builder == null && isNotEmpty(uri.getAuthority())) -->Line_14 $$ if (authority.indexOf('@') > -1) [ CD ]
Line_13 $$ String authority = uri.getAuthority()-->Line_14 $$ authority.indexOf('@')[ FD ]
Line_14 $$ if (authority.indexOf('@') > -1) -->Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)[ CD ]
Line_13 $$ String authority = uri.getAuthority()-->Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_15 $$ authority.substring(authority.indexOf('@') + 1)[ CD ]
Line_13 $$ String authority = uri.getAuthority()-->Line_15 $$ authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_15 $$ authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_13 $$ String authority = uri.getAuthority()-->Line_15 $$ authority.indexOf('@')[ FD ]
Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_15 $$ authority.indexOf('@')[ FD ]
Line_12 $$ if (builder == null && isNotEmpty(uri.getAuthority())) -->Line_17 $$ String[] hosts = authority.split("\\,")[ CD ]
Line_17 $$ String[] hosts = authority.split("\\,")-->Line_17 $$ authority.split("\\,")[ CD ]
Line_13 $$ String authority = uri.getAuthority()-->Line_17 $$ authority.split("\\,")[ FD ]
Line_15 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_17 $$ authority.split("\\,")[ FD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_19 $$ HostAndPort.fromString(host)[ CD ]
Line_18 $$ String host-->Line_19 $$ HostAndPort.fromString(host)[ FD ]
Line_20 $$ if (builder == null) -->Line_21 $$ if (hostAndPort.hasPort()) [ CD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_21 $$ if (hostAndPort.hasPort()) [ FD ]
Line_21 $$ if (hostAndPort.hasPort()) -->Line_21 $$ hostAndPort.hasPort()[ CD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_21 $$ hostAndPort.hasPort()[ FD ]
Line_21 $$ if (hostAndPort.hasPort()) -->Line_22 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), hostAndPort.getPort(), masterId)[ CD ]
Line_4 $$ String masterId = uri.getFragment()-->Line_22 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), hostAndPort.getPort(), masterId)[ FD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_22 $$ hostAndPort.getHostText()[ FD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_22 $$ hostAndPort.getPort()[ FD ]
Line_21 $$ if (hostAndPort.hasPort()) -->Line_24 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), masterId)[ CD ]
Line_4 $$ String masterId = uri.getFragment()-->Line_24 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), masterId)[ FD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_24 $$ hostAndPort.getHostText()[ FD ]
Line_20 $$ if (builder == null) -->Line_27 $$ if (hostAndPort.hasPort()) [ CD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_27 $$ if (hostAndPort.hasPort()) [ FD ]
Line_27 $$ if (hostAndPort.hasPort()) -->Line_27 $$ hostAndPort.hasPort()[ CD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_27 $$ hostAndPort.hasPort()[ FD ]
Line_27 $$ if (hostAndPort.hasPort()) -->Line_28 $$ builder.withSentinel(hostAndPort.getHostText(), hostAndPort.getPort())[ CD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_28 $$ hostAndPort.getHostText()[ FD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_28 $$ hostAndPort.getPort()[ FD ]
Line_27 $$ if (hostAndPort.hasPort()) -->Line_30 $$ builder.withSentinel(hostAndPort.getHostText())[ CD ]
Line_19 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_30 $$ hostAndPort.getHostText()[ FD ]
Line_2 $$ public void configureSentinel(URI uri) -->Line_35 $$ checkArgument(builder != null, "Invalid URI, cannot get host part")[ CD ]
