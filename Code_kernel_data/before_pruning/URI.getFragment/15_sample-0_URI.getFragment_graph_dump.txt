Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void parseURI(String original, boolean mustBePath) [ CD ]
Line_2 $$ public void parseURI(String original, boolean mustBePath) -->Line_3 $$ original.indexOf(':')[ CD ]
Line_2 $$ public void parseURI(String original, boolean mustBePath) -->Line_4 $$ if (idxColon != -1) [ CD ]
Line_4 $$ if (idxColon != -1) -->Line_4 $$ -1[ CD ]
Line_4 $$ if (idxColon != -1) -->Line_5 $$ if ((idxSlash != -1) && idxSlash < idxColon)[ CD ]
Line_5 $$ if ((idxSlash != -1) && idxSlash < idxColon)-->Line_8 $$ original = "./" + original[ CD ]
Line_8 $$ original = "./" + original-->Line_8 $$ original = "./" + original[ FD ]
Line_8 $$ original = "./" + original-->Line_8 $$ original = "./" + original[ FD ]
Line_2 $$ public void parseURI(String original, boolean mustBePath) -->Line_10 $$ String repaired = original.replaceAll(" ", "%20").replaceAll("\\[ CD ]
Line_10 $$ String repaired = original.replaceAll(" ", "%20").replaceAll("\\-->Line_10 $$ original.replaceAll(" ", "%20").replaceAll("\\[ CD ]
Line_8 $$ original = "./" + original-->Line_10 $$ original.replaceAll(" ", "%20")[ FD ]
Line_2 $$ public void parseURI(String original, boolean mustBePath) -->Line_14 $$ if (!repaired.equals(original))[ CD ]
Line_14 $$ if (!repaired.equals(original))-->Line_14 $$ !repaired.equals(original)[ CD ]
Line_14 $$ !repaired.equals(original)-->Line_14 $$ repaired.equals(original)[ CD ]
Line_10 $$ String repaired = original.replaceAll(" ", "%20").replaceAll("\\-->Line_14 $$ repaired.equals(original)[ FD ]
Line_8 $$ original = "./" + original-->Line_14 $$ repaired.equals(original)[ FD ]
Line_14 $$ if (!repaired.equals(original))-->Line_15 $$ Log.w(TAG, "Repaired invalid URL: " + original + " -> " + repaired)[ CD ]
Line_2 $$ public void parseURI(String original, boolean mustBePath) -->Line_16 $$ URI uri = new URI(repaired)[ CD ]
Line_2 $$ public void parseURI(String original, boolean mustBePath) -->Line_17 $$ URI normalized = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ CD ]
Line_16 $$ URI uri = new URI(repaired)-->Line_17 $$ uri.getScheme()[ FD ]
Line_16 $$ URI uri = new URI(repaired)-->Line_17 $$ uri.getAuthority()[ FD ]
Line_16 $$ URI uri = new URI(repaired)-->Line_17 $$ uri.getPath()[ FD ]
Line_16 $$ URI uri = new URI(repaired)-->Line_17 $$ uri.getQuery()[ FD ]
Line_16 $$ URI uri = new URI(repaired)-->Line_17 $$ uri.getFragment()[ FD ]
Line_2 $$ public void parseURI(String original, boolean mustBePath) -->Line_18 $$ Log.v(TAG, "Normalized URI " + original + " -> " + normalized.toASCIIString() + " assuming that it was " + (mustBePath ? "a path name" : "an URI or path name"))[ CD ]
Line_17 $$ URI normalized = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_18 $$ normalized.toASCIIString()[ FD ]
