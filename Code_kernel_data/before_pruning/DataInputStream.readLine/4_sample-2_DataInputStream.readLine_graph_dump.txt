Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) [ CD ]
Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_3 $$ String line = input.readLine()[ CD ]
Line_3 $$ String line = input.readLine()-->Line_3 $$ input.readLine()[ CD ]
Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_4 $$ if (line == null) [ CD ]
Line_3 $$ String line = input.readLine()-->Line_4 $$ if (line == null) [ FD ]
Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_7 $$ while (line != null && line.length() != 0) [ CD ]
Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) [ CD ]
Line_3 $$ String line = input.readLine()-->Line_7 $$ line.length()[ FD ]
Line_7 $$ while (line != null && line.length() != 0) -->Line_8 $$ int dot = line.indexOf(':')[ CD ]
Line_8 $$ int dot = line.indexOf(':')-->Line_8 $$ line.indexOf(':')[ CD ]
Line_3 $$ String line = input.readLine()-->Line_8 $$ line.indexOf(':')[ FD ]
Line_7 $$ while (line != null && line.length() != 0) -->Line_9 $$ if (dot != -1) [ CD ]
Line_8 $$ int dot = line.indexOf(':')-->Line_9 $$ if (dot != -1) [ FD ]
Line_9 $$ if (dot != -1) -->Line_10 $$ String key = line.substring(0, dot).trim()[ CD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_10 $$ line.substring(0, dot).trim()[ CD ]
Line_3 $$ String line = input.readLine()-->Line_10 $$ line.substring(0, dot)[ FD ]
Line_8 $$ int dot = line.indexOf(':')-->Line_10 $$ line.substring(0, dot)[ FD ]
Line_9 $$ if (dot != -1) -->Line_11 $$ String value = line.substring(dot + 1).trim()[ CD ]
Line_11 $$ String value = line.substring(dot + 1).trim()-->Line_11 $$ line.substring(dot + 1).trim()[ CD ]
Line_3 $$ String line = input.readLine()-->Line_11 $$ line.substring(dot + 1)[ FD ]
Line_9 $$ if (dot != -1) -->Line_12 $$ if ("Content-Length".equalsIgnoreCase(key)) [ CD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_12 $$ if ("Content-Length".equalsIgnoreCase(key)) [ FD ]
Line_12 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_12 $$ "Content-Length".equalsIgnoreCase(key)[ CD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_12 $$ "Content-Length".equalsIgnoreCase(key)[ FD ]
Line_12 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_13 $$ Integer.valueOf(value)[ CD ]
Line_11 $$ String value = line.substring(dot + 1).trim()-->Line_13 $$ Integer.valueOf(value)[ FD ]
Line_12 $$ if ("Content-Length".equalsIgnoreCase(key)) -->Line_14 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ CD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_14 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ FD ]
Line_14 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) -->Line_14 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ CD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_14 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ FD ]
Line_14 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) -->Line_15 $$ "Chunked".equalsIgnoreCase(value)[ CD ]
Line_11 $$ String value = line.substring(dot + 1).trim()-->Line_15 $$ "Chunked".equalsIgnoreCase(value)[ FD ]
Line_7 $$ while (line != null && line.length() != 0) -->Line_18 $$ line = input.readLine()[ CD ]
Line_18 $$ line = input.readLine()-->Line_18 $$ line = input.readLine()[ FD ]
Line_3 $$ String line = input.readLine()-->Line_18 $$ line = input.readLine()[ FD ]
Line_18 $$ line = input.readLine()-->Line_18 $$ input.readLine()[ CD ]
Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_20 $$ assertTrue("Need either content length or chunked encoding", length != -1 || chunked)[ CD ]
Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_22 $$ if (chunked) [ CD ]
Line_22 $$ if (chunked) -->Line_23 $$ Integer.parseInt(input.readLine(), 16)[ CD ]
Line_22 $$ if (chunked) -->Line_24 $$ while (length != 0) [ CD ]
Line_22 $$ if (chunked) -->Line_22 $$ if (chunked) [ CD ]
Line_24 $$ while (length != 0) -->Line_25 $$ byte[] buffer = new byte[length][ CD ]
Line_24 $$ while (length != 0) -->Line_26 $$ input.readFully(buffer)[ CD ]
Line_25 $$ byte[] buffer = new byte[length]-->Line_26 $$ input.readFully(buffer)[ FD ]
Line_24 $$ while (length != 0) -->Line_27 $$ input.readLine()[ CD ]
Line_24 $$ while (length != 0) -->Line_28 $$ Integer.parseInt(input.readLine(), 16)[ CD ]
Line_22 $$ if (chunked) -->Line_30 $$ input.readLine()[ CD ]
Line_22 $$ if (chunked) -->Line_32 $$ byte[] buffer = new byte[length][ CD ]
Line_22 $$ if (chunked) -->Line_33 $$ input.readFully(buffer)[ CD ]
Line_25 $$ byte[] buffer = new byte[length]-->Line_33 $$ input.readFully(buffer)[ FD ]
Line_32 $$ byte[] buffer = new byte[length]-->Line_33 $$ input.readFully(buffer)[ FD ]
Line_2 $$ public void fetch(SSLSocketFactory socketFactory, String host, int port, boolean secure, String path, int outerLoop, int innerLoop, int delay, int timeout) -->Line_35 $$ input.close()[ CD ]
Line_18 $$ line = input.readLine()-->Line_7 $$ line.length()[ FD ]
Line_18 $$ line = input.readLine()-->Line_8 $$ line.indexOf(':')[ FD ]
Line_8 $$ int dot = line.indexOf(':')-->Line_9 $$ if (dot != -1) [ FD ]
Line_18 $$ line = input.readLine()-->Line_10 $$ line.substring(0, dot)[ FD ]
Line_8 $$ int dot = line.indexOf(':')-->Line_10 $$ line.substring(0, dot)[ FD ]
Line_18 $$ line = input.readLine()-->Line_11 $$ line.substring(dot + 1)[ FD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_12 $$ if ("Content-Length".equalsIgnoreCase(key)) [ FD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_12 $$ "Content-Length".equalsIgnoreCase(key)[ FD ]
Line_11 $$ String value = line.substring(dot + 1).trim()-->Line_13 $$ Integer.valueOf(value)[ FD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_14 $$ if ("Transfer-Encoding".equalsIgnoreCase(key)) [ FD ]
Line_10 $$ String key = line.substring(0, dot).trim()-->Line_14 $$ "Transfer-Encoding".equalsIgnoreCase(key)[ FD ]
Line_11 $$ String value = line.substring(dot + 1).trim()-->Line_15 $$ "Chunked".equalsIgnoreCase(value)[ FD ]
Line_25 $$ byte[] buffer = new byte[length]-->Line_26 $$ input.readFully(buffer)[ FD ]
