Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void actionPerformed(ActionEvent ee) [ CD ]
Line_2 $$ public void actionPerformed(ActionEvent ee) -->Line_3 $$ Runtime currR = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_3 $$ Runtime.getRuntime()[ CD ]
Line_2 $$ public void actionPerformed(ActionEvent ee) -->Line_4 $$ long freeM = currR.freeMemory()[ CD ]
Line_4 $$ long freeM = currR.freeMemory()-->Line_4 $$ currR.freeMemory()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_4 $$ currR.freeMemory()[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent ee) -->Line_5 $$ long totalM = currR.totalMemory()[ CD ]
Line_5 $$ long totalM = currR.totalMemory()-->Line_5 $$ currR.totalMemory()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_5 $$ currR.totalMemory()[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent ee) -->Line_6 $$ long maxM = currR.maxMemory()[ CD ]
Line_6 $$ long maxM = currR.maxMemory()-->Line_6 $$ currR.maxMemory()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_6 $$ currR.maxMemory()[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent ee) -->Line_7 $$ logMessage("Memory (free/total/max.) in bytes: " + printLong(freeM) + " / " + printLong(totalM) + " / " + printLong(maxM))[ CD ]
Line_4 $$ long freeM = currR.freeMemory()-->Line_7 $$ printLong(freeM)[ FD ]
Line_5 $$ long totalM = currR.totalMemory()-->Line_7 $$ printLong(totalM)[ FD ]
Line_6 $$ long maxM = currR.maxMemory()-->Line_7 $$ printLong(maxM)[ FD ]
Line_2 $$ public void actionPerformed(ActionEvent ee) -->Line_8 $$ statusMessage("Memory (free/total/max.) in bytes: " + printLong(freeM) + " / " + printLong(totalM) + " / " + printLong(maxM))[ CD ]
Line_4 $$ long freeM = currR.freeMemory()-->Line_8 $$ printLong(freeM)[ FD ]
Line_5 $$ long totalM = currR.totalMemory()-->Line_8 $$ printLong(totalM)[ FD ]
Line_6 $$ long maxM = currR.maxMemory()-->Line_8 $$ printLong(maxM)[ FD ]
