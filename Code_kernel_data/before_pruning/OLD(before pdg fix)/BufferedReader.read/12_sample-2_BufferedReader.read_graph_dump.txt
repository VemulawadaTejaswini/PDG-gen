Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) [ CD ]
Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_3 $$ StreamQualifier.readName(buffered_reader)[ CD ]
Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_4 $$ if (name == null) [ CD ]
Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_7 $$ buffered_reader.mark(1)[ CD ]
Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_8 $$ final int next_char = buffered_reader.read()[ CD ]
Line_8 $$ final int next_char = buffered_reader.read()-->Line_8 $$ buffered_reader.read()[ CD ]
Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_9 $$ if (next_char == -1) [ CD ]
Line_8 $$ final int next_char = buffered_reader.read()-->Line_9 $$ if (next_char == -1) [ FD ]
Line_9 $$ if (next_char == -1) -->Line_12 $$ if (next_char == '=') [ CD ]
Line_8 $$ final int next_char = buffered_reader.read()-->Line_12 $$ if (next_char == '=') [ FD ]
Line_12 $$ if (next_char == '=') -->Line_13 $$ StreamQualifier.readValue(buffered_reader)[ CD ]
Line_12 $$ if (next_char == '=') -->Line_16 $$ buffered_reader.reset()[ CD ]
Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_19 $$ if (value == null) [ CD ]
Line_19 $$ if (value == null) -->Line_23 $$ StreamQualifier.makeStreamQualifier(name, value, entry_information)[ CD ]
Line_2 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_26 $$ return_vector.addQualifierValues(new_qualifier)[ CD ]
