Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() [ CD ]
Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))[ CD ]
Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_4 $$ SimpleHttpResponse response = parser.readResponse(reader)[ CD ]
Line_4 $$ SimpleHttpResponse response = parser.readResponse(reader)-->Line_4 $$ parser.readResponse(reader)[ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))-->Line_4 $$ parser.readResponse(reader)[ FD ]
Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_5 $$ Assert.assertTrue(Integer.parseInt(response.getCode()) >= 500)[ CD ]
Line_4 $$ SimpleHttpResponse response = parser.readResponse(reader)-->Line_5 $$ response.getCode()[ FD ]
Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_6 $$ String connectionHeader = response.getHeaders().get("connection")[ CD ]
Line_6 $$ String connectionHeader = response.getHeaders().get("connection")-->Line_6 $$ response.getHeaders().get("connection")[ CD ]
Line_4 $$ SimpleHttpResponse response = parser.readResponse(reader)-->Line_6 $$ response.getHeaders()[ FD ]
Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_7 $$ Assert.assertNotNull(connectionHeader)[ CD ]
Line_6 $$ String connectionHeader = response.getHeaders().get("connection")-->Line_7 $$ Assert.assertNotNull(connectionHeader)[ FD ]
Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_8 $$ Assert.assertTrue(connectionHeader.contains("close"))[ CD ]
Line_6 $$ String connectionHeader = response.getHeaders().get("connection")-->Line_8 $$ connectionHeader.contains("close")[ FD ]
Line_2 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_9 $$ Assert.assertEquals(-1, reader.read())[ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))-->Line_9 $$ reader.read()[ FD ]
