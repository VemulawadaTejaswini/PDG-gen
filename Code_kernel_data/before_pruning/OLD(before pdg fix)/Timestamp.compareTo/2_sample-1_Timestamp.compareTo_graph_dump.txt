Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_2 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) -->Line_3 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_2 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) -->Line_2 $$ public void timeSheetChecker(HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_3 $$ int i = 0[ CD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_3 $$ i++[ CD ]
Line_3 $$ int i = 0-->Line_3 $$ i++[ FD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ CD ]
Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_4 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ CD ]
Line_3 $$ int i = 0-->Line_4 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ FD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_5 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)[ CD ]
Line_5 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_5 $$ UtilDateTime.getDayStart(now)[ CD ]
Line_3 $$ for (int i = 0; i < 5; i++) -->Line_6 $$ if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) [ CD ]
Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_6 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_5 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_6 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_6 $$ if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_7 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)[ CD ]
Line_7 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_7 $$ timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)[ CD ]
Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_7 $$ UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate)[ FD ]
Line_6 $$ if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_8 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()[ CD ]
Line_8 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_8 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()[ CD ]
Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_8 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate)[ FD ]
Line_6 $$ if ((timesheetDate.compareTo(weekStart) <= 0) && (realTimeDate.compareTo(nowStartDate) < 0)) -->Line_9 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) [ CD ]
Line_7 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_9 $$ UtilValidate.isEmpty(timeEntryList)[ FD ]
Line_8 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_9 $$ UtilValidate.isEmpty(emplLeaveList)[ FD ]
Line_9 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_10 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()[ CD ]
Line_9 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_11 $$ noEntryMap.put("timesheetId", timesheetId)[ CD ]
Line_10 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_11 $$ noEntryMap.put("timesheetId", timesheetId)[ FD ]
Line_9 $$ if (UtilValidate.isEmpty(timeEntryList) && UtilValidate.isEmpty(emplLeaveList)) -->Line_12 $$ noTimeEntryList.add(noEntryMap)[ CD ]
Line_10 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_12 $$ noTimeEntryList.add(noEntryMap)[ FD ]
Line_3 $$ int i = 0-->Line_3 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_3 $$ int i = 0-->Line_3 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_3 $$ int i = 0-->Line_3 $$ i++[ FD ]
Line_3 $$ int i = 0-->Line_4 $$ UtilDateTime.addDaysToTimestamp(timesheetDate, i)[ FD ]
Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_6 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_5 $$ Timestamp nowStartDate = UtilDateTime.getDayStart(now)-->Line_6 $$ realTimeDate.compareTo(nowStartDate)[ FD ]
Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_7 $$ UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate)[ FD ]
Line_4 $$ Timestamp realTimeDate = UtilDateTime.addDaysToTimestamp(timesheetDate, i)-->Line_8 $$ EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate)[ FD ]
Line_7 $$ List<GenericValue> timeEntryList = timesheetMap.getRelated("TimeEntry", UtilMisc.toMap("partyId", partyId, "timesheetId", timesheetId, "fromDate", realTimeDate), null, false)-->Line_9 $$ UtilValidate.isEmpty(timeEntryList)[ FD ]
Line_8 $$ List<GenericValue> emplLeaveList = EntityQuery.use(delegator).from("EmplLeave").where("partyId", partyId, "fromDate", realTimeDate).cache(true).queryList()-->Line_9 $$ UtilValidate.isEmpty(emplLeaveList)[ FD ]
Line_10 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_11 $$ noEntryMap.put("timesheetId", timesheetId)[ FD ]
Line_10 $$ Map<String, Object> noEntryMap = new HashMap<String, Object>()-->Line_12 $$ noTimeEntryList.add(noEntryMap)[ FD ]
