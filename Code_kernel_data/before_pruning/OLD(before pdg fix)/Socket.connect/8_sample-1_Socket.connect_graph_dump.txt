Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void streamBlockInAscii(InetSocketAddress addr, String poolId, long blockId, Token<BlockTokenIdentifier> blockToken, long genStamp, long blockSize, long offsetIntoBlock, long chunkSizeToView, JspWriter out, Configuration conf) [ CD ]
Line_2 $$ public void streamBlockInAscii(InetSocketAddress addr, String poolId, long blockId, Token<BlockTokenIdentifier> blockToken, long genStamp, long blockSize, long offsetIntoBlock, long chunkSizeToView, JspWriter out, Configuration conf) -->Line_3 $$ Socket s = new Socket()[ CD ]
Line_2 $$ public void streamBlockInAscii(InetSocketAddress addr, String poolId, long blockId, Token<BlockTokenIdentifier> blockToken, long genStamp, long blockSize, long offsetIntoBlock, long chunkSizeToView, JspWriter out, Configuration conf) -->Line_4 $$ s.connect(addr, HdfsServerConstants.READ_TIMEOUT)[ CD ]
Line_3 $$ Socket s = new Socket()-->Line_4 $$ s.connect(addr, HdfsServerConstants.READ_TIMEOUT)[ FD ]
Line_2 $$ public void streamBlockInAscii(InetSocketAddress addr, String poolId, long blockId, Token<BlockTokenIdentifier> blockToken, long genStamp, long blockSize, long offsetIntoBlock, long chunkSizeToView, JspWriter out, Configuration conf) -->Line_5 $$ s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT)[ CD ]
Line_3 $$ Socket s = new Socket()-->Line_5 $$ s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT)[ FD ]
