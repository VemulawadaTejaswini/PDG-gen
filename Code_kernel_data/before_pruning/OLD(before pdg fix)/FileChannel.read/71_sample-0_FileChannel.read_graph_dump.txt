Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readFailure(File failureFile) [ CD ]
Line_2 $$ public void readFailure(File failureFile) -->Line_3 $$ FileChannel channel = rwFile.getChannel()[ CD ]
Line_3 $$ FileChannel channel = rwFile.getChannel()-->Line_3 $$ rwFile.getChannel()[ CD ]
Line_2 $$ public void readFailure(File failureFile) -->Line_4 $$ byte[] data = new byte[(int) channel.size()][ CD ]
Line_3 $$ FileChannel channel = rwFile.getChannel()-->Line_4 $$ channel.size()[ FD ]
Line_2 $$ public void readFailure(File failureFile) -->Line_5 $$ int readData = channel.read(ByteBuffer.wrap(data))[ CD ]
Line_5 $$ int readData = channel.read(ByteBuffer.wrap(data))-->Line_5 $$ channel.read(ByteBuffer.wrap(data))[ CD ]
Line_3 $$ FileChannel channel = rwFile.getChannel()-->Line_5 $$ channel.read(ByteBuffer.wrap(data))[ FD ]
Line_4 $$ byte[] data = new byte[(int) channel.size()]-->Line_5 $$ ByteBuffer.wrap(data)[ FD ]
Line_2 $$ public void readFailure(File failureFile) -->Line_6 $$ channel.close()[ CD ]
Line_3 $$ FileChannel channel = rwFile.getChannel()-->Line_6 $$ channel.close()[ FD ]
Line_2 $$ public void readFailure(File failureFile) -->Line_7 $$ return readData <= 0 ? "" : new String(withoutZeros(data), "utf-8");[ CD ]
Line_4 $$ byte[] data = new byte[(int) channel.size()]-->Line_7 $$ withoutZeros(data)[ FD ]
