Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) [ CD ]
Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_3 $$ fc.read(in)[ CD ]
Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_4 $$ byte[] columnBytes = in.array()[ CD ]
Line_4 $$ byte[] columnBytes = in.array()-->Line_4 $$ in.array()[ CD ]
Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_5 $$ while (bytecount < bytesRead) [ CD ]
Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) [ CD ]
Line_5 $$ while (bytecount < bytesRead) -->Line_6 $$ if (columnBytes[bytecount] == '\n') [ CD ]
Line_6 $$ if (columnBytes[bytecount] == '\n') -->Line_27 $$ String token = null[ CD ]
Line_6 $$ if (columnBytes[bytecount] == '\n') -->Line_28 $$ if (leftover == null) [ CD ]
Line_28 $$ if (leftover == null) -->Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")[ CD ]
Line_27 $$ String token = null-->Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")[ FD ]
Line_28 $$ if (leftover == null) -->Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset][ CD ]
Line_28 $$ if (leftover == null) -->Line_32 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ CD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_32 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_28 $$ if (leftover == null) -->Line_33 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ CD ]
Line_4 $$ byte[] columnBytes = in.array()-->Line_33 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_33 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_28 $$ if (leftover == null) -->Line_34 $$ token = new String(merged, "UTF8")[ CD ]
Line_27 $$ String token = null-->Line_34 $$ token = new String(merged, "UTF8")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_34 $$ token = new String(merged, "UTF8")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_34 $$ token = new String(merged, "UTF8")[ FD ]
Line_28 $$ if (leftover == null) -->Line_36 $$ merged = null[ CD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_36 $$ merged = null[ FD ]
Line_36 $$ merged = null-->Line_36 $$ merged = null[ FD ]
Line_6 $$ if (columnBytes[bytecount] == '\n') -->Line_38 $$ if (isString) [ CD ]
Line_38 $$ if (isString) -->Line_39 $$ if ("".equals(token)) [ CD ]
Line_27 $$ String token = null-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_39 $$ if ("".equals(token)) -->Line_39 $$ "".equals(token)[ CD ]
Line_27 $$ String token = null-->Line_39 $$ "".equals(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_39 $$ "".equals(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_39 $$ "".equals(token)[ FD ]
Line_39 $$ if ("".equals(token)) -->Line_40 $$ retVector[caseindex] = null[ CD ]
Line_39 $$ if ("".equals(token)) -->Line_42 $$ token = token.replaceFirst("^\\\"", "")[ CD ]
Line_27 $$ String token = null-->Line_42 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_42 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_42 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_42 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ CD ]
Line_27 $$ String token = null-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_39 $$ if ("".equals(token)) -->Line_43 $$ token = token.replaceFirst("\\\"$", "")[ CD ]
Line_27 $$ String token = null-->Line_43 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_43 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_43 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_43 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_43 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ CD ]
Line_27 $$ String token = null-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_39 $$ if ("".equals(token)) -->Line_44 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)[ CD ]
Line_44 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ CD ]
Line_27 $$ String token = null-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_39 $$ if ("".equals(token)) -->Line_45 $$ for (int i = 0; i < splitTokens.length; i++) [ CD ]
Line_39 $$ if ("".equals(token)) -->Line_39 $$ if ("".equals(token)) [ CD ]
Line_45 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_45 $$ int i = 0[ CD ]
Line_45 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_45 $$ i++[ CD ]
Line_45 $$ int i = 0-->Line_45 $$ i++[ FD ]
Line_45 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_46 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\\""), "\"")[ CD ]
Line_46 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\\""), "\"")-->Line_46 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\\""), "\"")[ CD ]
Line_45 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_47 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\t"), "\t")[ CD ]
Line_47 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\t"), "\t")-->Line_47 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\t"), "\t")[ CD ]
Line_45 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_48 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\n"), "\n")[ CD ]
Line_48 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\n"), "\n")-->Line_48 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\n"), "\n")[ CD ]
Line_45 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_49 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\r"), "\r")[ CD ]
Line_49 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\r"), "\r")-->Line_49 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\r"), "\r")[ CD ]
Line_39 $$ if ("".equals(token)) -->Line_51 $$ token = StringUtils.join(splitTokens, '\\')[ CD ]
Line_27 $$ String token = null-->Line_51 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_51 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_51 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_51 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_51 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_51 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_51 $$ StringUtils.join(splitTokens, '\\')[ CD ]
Line_44 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)-->Line_51 $$ StringUtils.join(splitTokens, '\\')[ FD ]
Line_39 $$ if ("".equals(token)) -->Line_52 $$ if (compatmode && !"".equals(token)) [ CD ]
Line_52 $$ !"".equals(token)-->Line_52 $$ "".equals(token)[ CD ]
Line_27 $$ String token = null-->Line_52 $$ "".equals(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_52 $$ "".equals(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_52 $$ "".equals(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_52 $$ "".equals(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_52 $$ "".equals(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_52 $$ "".equals(token)[ FD ]
Line_52 $$ if (compatmode && !"".equals(token)) -->Line_53 $$ if (token.length() > 128) [ CD ]
Line_27 $$ String token = null-->Line_53 $$ token.length()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_53 $$ token.length()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_53 $$ token.length()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_53 $$ token.length()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_53 $$ token.length()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_53 $$ token.length()[ FD ]
Line_53 $$ if (token.length() > 128) -->Line_54 $$ if ("".equals(token.trim())) [ CD ]
Line_54 $$ if ("".equals(token.trim())) -->Line_54 $$ "".equals(token.trim())[ CD ]
Line_27 $$ String token = null-->Line_54 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_54 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_54 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_54 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_54 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_54 $$ token.trim()[ FD ]
Line_54 $$ if ("".equals(token.trim())) -->Line_55 $$ token = token.substring(0, 129)[ CD ]
Line_27 $$ String token = null-->Line_55 $$ token = token.substring(0, 129)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_55 $$ token = token.substring(0, 129)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_55 $$ token = token.substring(0, 129)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_55 $$ token = token.substring(0, 129)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_55 $$ token = token.substring(0, 129)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_55 $$ token = token.substring(0, 129)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_55 $$ token = token.substring(0, 129)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_55 $$ token.substring(0, 129)[ CD ]
Line_27 $$ String token = null-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_54 $$ if ("".equals(token.trim())) -->Line_57 $$ token = token.substring(0, 128)[ CD ]
Line_27 $$ String token = null-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_57 $$ token = token.substring(0, 128)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_57 $$ token.substring(0, 128)[ CD ]
Line_27 $$ String token = null-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_54 $$ if ("".equals(token.trim())) -->Line_58 $$ token = token.trim()[ CD ]
Line_27 $$ String token = null-->Line_58 $$ token = token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_58 $$ token = token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_58 $$ token = token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_58 $$ token = token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_58 $$ token = token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_58 $$ token = token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_58 $$ token = token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_58 $$ token = token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_58 $$ token = token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_58 $$ token.trim()[ CD ]
Line_27 $$ String token = null-->Line_58 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_58 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_58 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_58 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_58 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_58 $$ token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_58 $$ token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_58 $$ token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_58 $$ token.trim()[ FD ]
Line_53 $$ if (token.length() > 128) -->Line_61 $$ if ("".equals(token.trim())) [ CD ]
Line_61 $$ if ("".equals(token.trim())) -->Line_61 $$ "".equals(token.trim())[ CD ]
Line_27 $$ String token = null-->Line_61 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_61 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_61 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_61 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_61 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_61 $$ token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_61 $$ token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_61 $$ token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_61 $$ token.trim()[ FD ]
Line_61 $$ if ("".equals(token.trim())) -->Line_62 $$ token = "null"[ CD ]
Line_27 $$ String token = null-->Line_62 $$ token = "null"[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_62 $$ token = "null"[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_62 $$ token = "null"[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_62 $$ token = "null"[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_62 $$ token = "null"[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_62 $$ token = "null"[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_62 $$ token = "null"[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_62 $$ token = "null"[ FD ]
Line_58 $$ token = token.trim()-->Line_62 $$ token = "null"[ FD ]
Line_62 $$ token = "null"-->Line_62 $$ token = "null"[ FD ]
Line_61 $$ if ("".equals(token.trim())) -->Line_64 $$ token = token.trim()[ CD ]
Line_27 $$ String token = null-->Line_64 $$ token = token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_64 $$ token = token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_64 $$ token = token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_64 $$ token = token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_64 $$ token = token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_64 $$ token = token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_64 $$ token = token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_64 $$ token = token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_64 $$ token = token.trim()[ FD ]
Line_62 $$ token = "null"-->Line_64 $$ token = token.trim()[ FD ]
Line_64 $$ token = token.trim()-->Line_64 $$ token = token.trim()[ FD ]
Line_64 $$ token = token.trim()-->Line_64 $$ token.trim()[ CD ]
Line_27 $$ String token = null-->Line_64 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_64 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_64 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_64 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_64 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_64 $$ token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_64 $$ token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_64 $$ token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_64 $$ token.trim()[ FD ]
Line_62 $$ token = "null"-->Line_64 $$ token.trim()[ FD ]
Line_64 $$ token = token.trim()-->Line_64 $$ token.trim()[ FD ]
Line_39 $$ if ("".equals(token)) -->Line_68 $$ retVector[caseindex] = token[ CD ]
Line_27 $$ String token = null-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_58 $$ token = token.trim()-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_62 $$ token = "null"-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_64 $$ token = token.trim()-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_38 $$ if (isString) -->Line_70 $$ if (isDouble) [ CD ]
Line_27 $$ String token = null-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_72 $$ if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_73 $$ retVector[caseindex] = java.lang.Double.POSITIVE_INFINITY[ CD ]
Line_72 $$ if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ CD ]
Line_27 $$ String token = null-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_58 $$ token = token.trim()-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_62 $$ token = "null"-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_64 $$ token = token.trim()-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_74 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_74 $$ "-inf".equalsIgnoreCase(token)[ CD ]
Line_27 $$ String token = null-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_74 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_75 $$ retVector[caseindex] = java.lang.Double.NEGATIVE_INFINITY[ CD ]
Line_74 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_76 $$ if (token == null || token.equals("")) [ CD ]
Line_27 $$ String token = null-->Line_76 $$ token.equals("")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_76 $$ token.equals("")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_76 $$ token.equals("")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_76 $$ token.equals("")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_76 $$ token.equals("")[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_76 $$ token.equals("")[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_76 $$ token.equals("")[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_76 $$ token.equals("")[ FD ]
Line_58 $$ token = token.trim()-->Line_76 $$ token.equals("")[ FD ]
Line_62 $$ token = "null"-->Line_76 $$ token.equals("")[ FD ]
Line_64 $$ token = token.trim()-->Line_76 $$ token.equals("")[ FD ]
Line_76 $$ if (token == null || token.equals("")) -->Line_77 $$ retVector[caseindex] = null[ CD ]
Line_76 $$ if (token == null || token.equals("")) -->Line_79 $$ retVector[caseindex] = new Double(token)[ CD ]
Line_70 $$ if (isDouble) -->Line_85 $$ if (isLong) [ CD ]
Line_85 $$ if (isLong) -->Line_91 $$ if (isFloat) [ CD ]
Line_27 $$ String token = null-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_93 $$ if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_94 $$ retVector[caseindex] = java.lang.Float.POSITIVE_INFINITY[ CD ]
Line_93 $$ if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ CD ]
Line_27 $$ String token = null-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_58 $$ token = token.trim()-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_62 $$ token = "null"-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_64 $$ token = token.trim()-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_95 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_95 $$ "-inf".equalsIgnoreCase(token)[ CD ]
Line_27 $$ String token = null-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_95 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_96 $$ retVector[caseindex] = java.lang.Float.NEGATIVE_INFINITY[ CD ]
Line_95 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_97 $$ if (token == null || token.equals("")) [ CD ]
Line_27 $$ String token = null-->Line_97 $$ token.equals("")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_97 $$ token.equals("")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_97 $$ token.equals("")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_97 $$ token.equals("")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_97 $$ token.equals("")[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_97 $$ token.equals("")[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_97 $$ token.equals("")[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_97 $$ token.equals("")[ FD ]
Line_58 $$ token = token.trim()-->Line_97 $$ token.equals("")[ FD ]
Line_62 $$ token = "null"-->Line_97 $$ token.equals("")[ FD ]
Line_64 $$ token = token.trim()-->Line_97 $$ token.equals("")[ FD ]
Line_97 $$ if (token == null || token.equals("")) -->Line_98 $$ retVector[caseindex] = null[ CD ]
Line_97 $$ if (token == null || token.equals("")) -->Line_100 $$ retVector[caseindex] = new Float(token)[ CD ]
Line_6 $$ if (columnBytes[bytecount] == '\n') -->Line_108 $$ if (bytecount == bytesRead - 1) [ CD ]
Line_6 $$ if (columnBytes[bytecount] == '\n') -->Line_114 $$ if (bytecount == bytesRead - 1) [ CD ]
Line_114 $$ if (bytecount == bytesRead - 1) -->Line_115 $$ if (leftover == null) [ CD ]
Line_115 $$ if (leftover == null) -->Line_117 $$ System.arraycopy(columnBytes, byteoffset, leftover, 0, (int) bytesRead - byteoffset)[ CD ]
Line_4 $$ byte[] columnBytes = in.array()-->Line_117 $$ System.arraycopy(columnBytes, byteoffset, leftover, 0, (int) bytesRead - byteoffset)[ FD ]
Line_115 $$ if (leftover == null) -->Line_119 $$ if (byteoffset != 0) [ CD ]
Line_115 $$ if (leftover == null) -->Line_123 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ CD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_123 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_36 $$ merged = null-->Line_123 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_115 $$ if (leftover == null) -->Line_124 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ CD ]
Line_4 $$ byte[] columnBytes = in.array()-->Line_124 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_124 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_36 $$ merged = null-->Line_124 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_115 $$ if (leftover == null) -->Line_126 $$ merged = null[ CD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_126 $$ merged = null[ FD ]
Line_36 $$ merged = null-->Line_126 $$ merged = null[ FD ]
Line_126 $$ merged = null-->Line_126 $$ merged = null[ FD ]
Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_133 $$ in.clear()[ CD ]
Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_134 $$ if (columnLength - bytesReadTotal < MAX_COLUMN_BUFFER) [ CD ]
Line_134 $$ if (columnLength - bytesReadTotal < MAX_COLUMN_BUFFER) -->Line_135 $$ in.limit((int) (columnLength - bytesReadTotal))[ CD ]
Line_2 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_137 $$ fc.close()[ CD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_32 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_36 $$ merged = null-->Line_32 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_126 $$ merged = null-->Line_32 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_33 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_36 $$ merged = null-->Line_33 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_126 $$ merged = null-->Line_33 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_27 $$ String token = null-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_58 $$ token = token.trim()-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_62 $$ token = "null"-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_64 $$ token = token.trim()-->Line_39 $$ if ("".equals(token)) [ FD ]
Line_27 $$ String token = null-->Line_39 $$ "".equals(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_39 $$ "".equals(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_39 $$ "".equals(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_39 $$ "".equals(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_39 $$ "".equals(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_39 $$ "".equals(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_39 $$ "".equals(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_39 $$ "".equals(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_39 $$ "".equals(token)[ FD ]
Line_62 $$ token = "null"-->Line_39 $$ "".equals(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_39 $$ "".equals(token)[ FD ]
Line_27 $$ String token = null-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_58 $$ token = token.trim()-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_62 $$ token = "null"-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_64 $$ token = token.trim()-->Line_42 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_27 $$ String token = null-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_58 $$ token = token.trim()-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_62 $$ token = "null"-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_64 $$ token = token.trim()-->Line_43 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_27 $$ String token = null-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_58 $$ token = token.trim()-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_62 $$ token = "null"-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_64 $$ token = token.trim()-->Line_44 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_44 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)-->Line_51 $$ StringUtils.join(splitTokens, '\\')[ FD ]
Line_27 $$ String token = null-->Line_52 $$ "".equals(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_52 $$ "".equals(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_52 $$ "".equals(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_52 $$ "".equals(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_52 $$ "".equals(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_52 $$ "".equals(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_52 $$ "".equals(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_52 $$ "".equals(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_52 $$ "".equals(token)[ FD ]
Line_62 $$ token = "null"-->Line_52 $$ "".equals(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_52 $$ "".equals(token)[ FD ]
Line_27 $$ String token = null-->Line_53 $$ token.length()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_53 $$ token.length()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_53 $$ token.length()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_53 $$ token.length()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_53 $$ token.length()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_53 $$ token.length()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_53 $$ token.length()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_53 $$ token.length()[ FD ]
Line_58 $$ token = token.trim()-->Line_53 $$ token.length()[ FD ]
Line_62 $$ token = "null"-->Line_53 $$ token.length()[ FD ]
Line_64 $$ token = token.trim()-->Line_53 $$ token.length()[ FD ]
Line_27 $$ String token = null-->Line_54 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_54 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_54 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_54 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_54 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_54 $$ token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_54 $$ token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_54 $$ token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_54 $$ token.trim()[ FD ]
Line_62 $$ token = "null"-->Line_54 $$ token.trim()[ FD ]
Line_64 $$ token = token.trim()-->Line_54 $$ token.trim()[ FD ]
Line_27 $$ String token = null-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_58 $$ token = token.trim()-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_62 $$ token = "null"-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_64 $$ token = token.trim()-->Line_55 $$ token.substring(0, 129)[ FD ]
Line_27 $$ String token = null-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_58 $$ token = token.trim()-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_62 $$ token = "null"-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_64 $$ token = token.trim()-->Line_57 $$ token.substring(0, 128)[ FD ]
Line_27 $$ String token = null-->Line_58 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_58 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_58 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_58 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_58 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_58 $$ token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_58 $$ token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_58 $$ token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_58 $$ token.trim()[ FD ]
Line_62 $$ token = "null"-->Line_58 $$ token.trim()[ FD ]
Line_64 $$ token = token.trim()-->Line_58 $$ token.trim()[ FD ]
Line_27 $$ String token = null-->Line_61 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_61 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_61 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_61 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_61 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_61 $$ token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_61 $$ token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_61 $$ token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_61 $$ token.trim()[ FD ]
Line_62 $$ token = "null"-->Line_61 $$ token.trim()[ FD ]
Line_64 $$ token = token.trim()-->Line_61 $$ token.trim()[ FD ]
Line_27 $$ String token = null-->Line_64 $$ token.trim()[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_64 $$ token.trim()[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_64 $$ token.trim()[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_64 $$ token.trim()[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_64 $$ token.trim()[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_64 $$ token.trim()[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_64 $$ token.trim()[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_64 $$ token.trim()[ FD ]
Line_58 $$ token = token.trim()-->Line_64 $$ token.trim()[ FD ]
Line_62 $$ token = "null"-->Line_64 $$ token.trim()[ FD ]
Line_64 $$ token = token.trim()-->Line_64 $$ token.trim()[ FD ]
Line_27 $$ String token = null-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_58 $$ token = token.trim()-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_62 $$ token = "null"-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_64 $$ token = token.trim()-->Line_68 $$ retVector[caseindex] = token[ FD ]
Line_27 $$ String token = null-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_72 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_72 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_58 $$ token = token.trim()-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_62 $$ token = "null"-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_64 $$ token = token.trim()-->Line_74 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_27 $$ String token = null-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_74 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_76 $$ token.equals("")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_76 $$ token.equals("")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_76 $$ token.equals("")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_76 $$ token.equals("")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_76 $$ token.equals("")[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_76 $$ token.equals("")[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_76 $$ token.equals("")[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_76 $$ token.equals("")[ FD ]
Line_58 $$ token = token.trim()-->Line_76 $$ token.equals("")[ FD ]
Line_62 $$ token = "null"-->Line_76 $$ token.equals("")[ FD ]
Line_64 $$ token = token.trim()-->Line_76 $$ token.equals("")[ FD ]
Line_27 $$ String token = null-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_93 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_93 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_58 $$ token = token.trim()-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_62 $$ token = "null"-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_64 $$ token = token.trim()-->Line_95 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_27 $$ String token = null-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_58 $$ token = token.trim()-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_62 $$ token = "null"-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_64 $$ token = token.trim()-->Line_95 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_27 $$ String token = null-->Line_97 $$ token.equals("")[ FD ]
Line_29 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_97 $$ token.equals("")[ FD ]
Line_34 $$ token = new String(merged, "UTF8")-->Line_97 $$ token.equals("")[ FD ]
Line_42 $$ token = token.replaceFirst("^\\\"", "")-->Line_97 $$ token.equals("")[ FD ]
Line_43 $$ token = token.replaceFirst("\\\"$", "")-->Line_97 $$ token.equals("")[ FD ]
Line_51 $$ token = StringUtils.join(splitTokens, '\\')-->Line_97 $$ token.equals("")[ FD ]
Line_55 $$ token = token.substring(0, 129)-->Line_97 $$ token.equals("")[ FD ]
Line_57 $$ token = token.substring(0, 128)-->Line_97 $$ token.equals("")[ FD ]
Line_58 $$ token = token.trim()-->Line_97 $$ token.equals("")[ FD ]
Line_62 $$ token = "null"-->Line_97 $$ token.equals("")[ FD ]
Line_64 $$ token = token.trim()-->Line_97 $$ token.equals("")[ FD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_123 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_36 $$ merged = null-->Line_123 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_126 $$ merged = null-->Line_123 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_31 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_124 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_36 $$ merged = null-->Line_124 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_126 $$ merged = null-->Line_124 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_45 $$ int i = 0-->Line_45 $$ for (int i = 0; i < splitTokens.length; i++) [ FD ]
Line_45 $$ int i = 0-->Line_45 $$ for (int i = 0; i < splitTokens.length; i++) [ FD ]
Line_45 $$ int i = 0-->Line_45 $$ i++[ FD ]
