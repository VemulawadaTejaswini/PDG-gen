Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) [ CD ]
Line_2 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) -->Line_3 $$ while (buf.hasRemaining()) [ CD ]
Line_2 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) -->Line_2 $$ public void read(FileChannel ch, ByteBuffer[] bb, final long start_position) [ CD ]
Line_3 $$ while (buf.hasRemaining()) -->Line_3 $$ buf.hasRemaining()[ CD ]
Line_3 $$ while (buf.hasRemaining()) -->Line_4 $$ int read = ch.read(buf, position)[ CD ]
Line_4 $$ int read = ch.read(buf, position)-->Line_4 $$ ch.read(buf, position)[ CD ]
Line_3 $$ while (buf.hasRemaining()) -->Line_5 $$ if (read >= 0) [ CD ]
Line_4 $$ int read = ch.read(buf, position)-->Line_5 $$ if (read >= 0) [ FD ]
Line_5 $$ if (read >= 0) -->Line_7 $$ if (read == 0) [ CD ]
Line_4 $$ int read = ch.read(buf, position)-->Line_7 $$ if (read == 0) [ FD ]
Line_7 $$ if (read == 0) -->Line_8 $$ Thread.yield()[ CD ]
Line_5 $$ if (read >= 0) -->Line_11 $$ return 0;[ CD ]
Line_4 $$ int read = ch.read(buf, position)-->Line_5 $$ if (read >= 0) [ FD ]
Line_4 $$ int read = ch.read(buf, position)-->Line_7 $$ if (read == 0) [ FD ]
