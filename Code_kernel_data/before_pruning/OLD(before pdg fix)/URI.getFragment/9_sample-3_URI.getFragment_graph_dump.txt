Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void main(String[] args) [ CD ]
Line_2 $$ public void main(String[] args) -->Line_3 $$ for (i = 0; i < args.length - REQUIRED_ARGS; i++) [ CD ]
Line_2 $$ public void main(String[] args) -->Line_2 $$ public void main(String[] args) [ CD ]
Line_2 $$ public void main(String[] args) -->Line_21 $$ while (i < args.length) [ CD ]
Line_2 $$ public void main(String[] args) -->Line_2 $$ public void main(String[] args) [ CD ]
Line_21 $$ while (i < args.length) -->Line_22 $$ Path partitionDirPath = null[ CD ]
Line_21 $$ while (i < args.length) -->Line_23 $$ UUID partitionUUID = null[ CD ]
Line_25 $$ URI location = new URI(args[i])-->Line_27 $$ location.getFragment()[ FD ]
Line_27 $$ if (location.getFragment() == null) -->Line_28 $$ PrintUsageAndQuit("uri must have fragment for partition slice")[ CD ]
Line_23 $$ UUID partitionUUID = null-->Line_30 $$ partitionUUID = UUID.fromString(location.getFragment())[ FD ]
Line_30 $$ partitionUUID = UUID.fromString(location.getFragment())-->Line_30 $$ partitionUUID = UUID.fromString(location.getFragment())[ FD ]
Line_30 $$ partitionUUID = UUID.fromString(location.getFragment())-->Line_30 $$ UUID.fromString(location.getFragment())[ CD ]
Line_25 $$ URI location = new URI(args[i])-->Line_30 $$ location.getFragment()[ FD ]
Line_22 $$ Path partitionDirPath = null-->Line_35 $$ partitionDirPath = Paths.get(new URI(location.getScheme(), location.getSchemeSpecificPart(), null))[ FD ]
Line_35 $$ partitionDirPath = Paths.get(new URI(location.getScheme(), location.getSchemeSpecificPart(), null))-->Line_35 $$ partitionDirPath = Paths.get(new URI(location.getScheme(), location.getSchemeSpecificPart(), null))[ FD ]
Line_35 $$ partitionDirPath = Paths.get(new URI(location.getScheme(), location.getSchemeSpecificPart(), null))-->Line_35 $$ Paths.get(new URI(location.getScheme(), location.getSchemeSpecificPart(), null))[ CD ]
Line_25 $$ URI location = new URI(args[i])-->Line_35 $$ location.getScheme()[ FD ]
Line_25 $$ URI location = new URI(args[i])-->Line_35 $$ location.getSchemeSpecificPart()[ FD ]
Line_21 $$ while (i < args.length) -->Line_44 $$ SliceManager sliceManager = new SliceManager(partitionUUID, serializer, new FileStorageManager(partitionDirPath))[ CD ]
Line_21 $$ while (i < args.length) -->Line_45 $$ System.out.println("-----------------")[ CD ]
Line_21 $$ while (i < args.length) -->Line_46 $$ System.out.print("Reading template... ")[ CD ]
Line_21 $$ while (i < args.length) -->Line_47 $$ long time = System.currentTimeMillis()[ CD ]
Line_47 $$ long time = System.currentTimeMillis()-->Line_47 $$ System.currentTimeMillis()[ CD ]
Line_21 $$ while (i < args.length) -->Line_48 $$ IPartition partition = sliceManager.readPartition()[ CD ]
Line_48 $$ IPartition partition = sliceManager.readPartition()-->Line_48 $$ sliceManager.readPartition()[ CD ]
Line_44 $$ SliceManager sliceManager = new SliceManager(partitionUUID, serializer, new FileStorageManager(partitionDirPath))-->Line_48 $$ sliceManager.readPartition()[ FD ]
Line_21 $$ while (i < args.length) -->Line_49 $$ System.out.println("[" + (System.currentTimeMillis() - time) + "ms]")[ CD ]
Line_21 $$ while (i < args.length) -->Line_50 $$ int numInstances = 0[ CD ]
Line_21 $$ while (i < args.length) -->Line_51 $$ System.out.println("Reading instances... ")[ CD ]
Line_21 $$ while (i < args.length) -->Line_52 $$ time = System.currentTimeMillis()[ CD ]
Line_47 $$ long time = System.currentTimeMillis()-->Line_52 $$ time = System.currentTimeMillis()[ FD ]
Line_52 $$ time = System.currentTimeMillis()-->Line_52 $$ time = System.currentTimeMillis()[ FD ]
Line_52 $$ time = System.currentTimeMillis()-->Line_52 $$ System.currentTimeMillis()[ CD ]
Line_53 $$ ISubgraph subgraph-->Line_54 $$ subgraph.getId()[ FD ]
Line_55 $$ Iterable<? extends ISubgraphInstance> instances = subgraph.getInstances(Long.MIN_VALUE, Long.MAX_VALUE, subgraph.getVertexProperties(), subgraph.getEdgeProperties(), false)-->Line_55 $$ subgraph.getInstances(Long.MIN_VALUE, Long.MAX_VALUE, subgraph.getVertexProperties(), subgraph.getEdgeProperties(), false)[ CD ]
Line_53 $$ ISubgraph subgraph-->Line_55 $$ subgraph.getInstances(Long.MIN_VALUE, Long.MAX_VALUE, subgraph.getVertexProperties(), subgraph.getEdgeProperties(), false)[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_55 $$ subgraph.getVertexProperties()[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_55 $$ subgraph.getEdgeProperties()[ FD ]
Line_50 $$ int numInstances = 0-->Line_56 $$ numInstances += IterableHelper.iterableCount(instances)[ FD ]
Line_56 $$ numInstances += IterableHelper.iterableCount(instances)-->Line_56 $$ numInstances += IterableHelper.iterableCount(instances)[ FD ]
Line_56 $$ numInstances += IterableHelper.iterableCount(instances)-->Line_56 $$ IterableHelper.iterableCount(instances)[ CD ]
Line_55 $$ Iterable<? extends ISubgraphInstance> instances = subgraph.getInstances(Long.MIN_VALUE, Long.MAX_VALUE, subgraph.getVertexProperties(), subgraph.getEdgeProperties(), false)-->Line_56 $$ IterableHelper.iterableCount(instances)[ FD ]
Line_21 $$ while (i < args.length) -->Line_58 $$ System.out.println("Finished reading instances [" + (System.currentTimeMillis() - time) + "ms]")[ CD ]
Line_21 $$ while (i < args.length) -->Line_59 $$ System.out.println("-----------------")[ CD ]
Line_21 $$ while (i < args.length) -->Line_60 $$ System.out.println("Partition ID: " + partition.getId())[ CD ]
Line_48 $$ IPartition partition = sliceManager.readPartition()-->Line_60 $$ partition.getId()[ FD ]
Line_21 $$ while (i < args.length) -->Line_61 $$ System.out.println("Partition IsDirected: " + partition.isDirected())[ CD ]
Line_48 $$ IPartition partition = sliceManager.readPartition()-->Line_61 $$ partition.isDirected()[ FD ]
Line_21 $$ while (i < args.length) -->Line_62 $$ System.out.println("Partition Subgraphs: " + partition.size())[ CD ]
Line_48 $$ IPartition partition = sliceManager.readPartition()-->Line_62 $$ partition.size()[ FD ]
Line_21 $$ while (i < args.length) -->Line_63 $$ System.out.println("Partition Instances: " + numInstances)[ CD ]
Line_21 $$ while (i < args.length) -->Line_64 $$ int v = 0[ CD ]
Line_21 $$ while (i < args.length) -->Line_65 $$ long e = 0[ CD ]
Line_21 $$ while (i < args.length) -->Line_66 $$ int r = 0[ CD ]
Line_64 $$ int v = 0-->Line_68 $$ v += subgraph.getTemplate().numVertices()[ FD ]
Line_68 $$ v += subgraph.getTemplate().numVertices()-->Line_68 $$ v += subgraph.getTemplate().numVertices()[ FD ]
Line_68 $$ v += subgraph.getTemplate().numVertices()-->Line_68 $$ subgraph.getTemplate().numVertices()[ CD ]
Line_53 $$ ISubgraph subgraph-->Line_68 $$ subgraph.getTemplate()[ FD ]
Line_65 $$ long e = 0-->Line_69 $$ e += subgraph.getTemplate().numEdges()[ FD ]
Line_69 $$ e += subgraph.getTemplate().numEdges()-->Line_69 $$ e += subgraph.getTemplate().numEdges()[ FD ]
Line_69 $$ e += subgraph.getTemplate().numEdges()-->Line_69 $$ subgraph.getTemplate().numEdges()[ CD ]
Line_53 $$ ISubgraph subgraph-->Line_69 $$ subgraph.getTemplate()[ FD ]
Line_66 $$ int r = 0-->Line_70 $$ r += subgraph.getRemoteVertexMappings().size()[ FD ]
Line_70 $$ r += subgraph.getRemoteVertexMappings().size()-->Line_70 $$ r += subgraph.getRemoteVertexMappings().size()[ FD ]
Line_70 $$ r += subgraph.getRemoteVertexMappings().size()-->Line_70 $$ subgraph.getRemoteVertexMappings().size()[ CD ]
Line_53 $$ ISubgraph subgraph-->Line_70 $$ subgraph.getRemoteVertexMappings()[ FD ]
Line_21 $$ while (i < args.length) -->Line_72 $$ System.out.println("Partition Vertices: " + v)[ CD ]
Line_21 $$ while (i < args.length) -->Line_73 $$ System.out.println("Partition Edges: " + e)[ CD ]
Line_21 $$ while (i < args.length) -->Line_74 $$ System.out.println("Partition Remote Vertices: " + r)[ CD ]
Line_25 $$ URI location = new URI(args[i])-->Line_27 $$ location.getFragment()[ FD ]
Line_25 $$ URI location = new URI(args[i])-->Line_30 $$ location.getFragment()[ FD ]
Line_65 $$ long e = 0-->Line_32 $$ e.getMessage()[ FD ]
Line_69 $$ e += subgraph.getTemplate().numEdges()-->Line_32 $$ e.getMessage()[ FD ]
Line_25 $$ URI location = new URI(args[i])-->Line_35 $$ location.getScheme()[ FD ]
Line_25 $$ URI location = new URI(args[i])-->Line_35 $$ location.getSchemeSpecificPart()[ FD ]
Line_65 $$ long e = 0-->Line_37 $$ e.getMessage()[ FD ]
Line_69 $$ e += subgraph.getTemplate().numEdges()-->Line_37 $$ e.getMessage()[ FD ]
Line_65 $$ long e = 0-->Line_39 $$ e.getMessage()[ FD ]
Line_69 $$ e += subgraph.getTemplate().numEdges()-->Line_39 $$ e.getMessage()[ FD ]
Line_65 $$ long e = 0-->Line_42 $$ e.getMessage()[ FD ]
Line_69 $$ e += subgraph.getTemplate().numEdges()-->Line_42 $$ e.getMessage()[ FD ]
Line_44 $$ SliceManager sliceManager = new SliceManager(partitionUUID, serializer, new FileStorageManager(partitionDirPath))-->Line_48 $$ sliceManager.readPartition()[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_54 $$ subgraph.getId()[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_55 $$ subgraph.getInstances(Long.MIN_VALUE, Long.MAX_VALUE, subgraph.getVertexProperties(), subgraph.getEdgeProperties(), false)[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_55 $$ subgraph.getVertexProperties()[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_55 $$ subgraph.getEdgeProperties()[ FD ]
Line_55 $$ Iterable<? extends ISubgraphInstance> instances = subgraph.getInstances(Long.MIN_VALUE, Long.MAX_VALUE, subgraph.getVertexProperties(), subgraph.getEdgeProperties(), false)-->Line_56 $$ IterableHelper.iterableCount(instances)[ FD ]
Line_48 $$ IPartition partition = sliceManager.readPartition()-->Line_60 $$ partition.getId()[ FD ]
Line_48 $$ IPartition partition = sliceManager.readPartition()-->Line_61 $$ partition.isDirected()[ FD ]
Line_48 $$ IPartition partition = sliceManager.readPartition()-->Line_62 $$ partition.size()[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_68 $$ subgraph.getTemplate()[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_69 $$ subgraph.getTemplate()[ FD ]
Line_53 $$ ISubgraph subgraph-->Line_70 $$ subgraph.getRemoteVertexMappings()[ FD ]
