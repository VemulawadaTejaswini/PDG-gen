Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void updatePortAndSchemeInAuthority(final URI uri) [ CD ]
Line_2 $$ public void updatePortAndSchemeInAuthority(final URI uri) -->Line_3 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())[ CD ]
Line_3 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_3 $$ HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())[ CD ]
Line_2 $$ public void updatePortAndSchemeInAuthority(final URI uri) -->Line_4 $$ if (matcher.matches()) [ CD ]
Line_3 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_4 $$ if (matcher.matches()) [ FD ]
Line_4 $$ if (matcher.matches()) -->Line_4 $$ matcher.matches()[ CD ]
Line_3 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_4 $$ matcher.matches()[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_5 $$ int port = Integer.parseInt(matcher.group(2))[ CD ]
Line_5 $$ int port = Integer.parseInt(matcher.group(2))-->Line_5 $$ Integer.parseInt(matcher.group(2))[ CD ]
Line_3 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_5 $$ matcher.group(2)[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_6 $$ authority.substring(0, matcher.start(2))[ CD ]
Line_3 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_6 $$ matcher.start(2)[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_7 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) [ CD ]
Line_5 $$ int port = Integer.parseInt(matcher.group(2))-->Line_7 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) [ FD ]
Line_7 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) -->Line_7 $$ UseHttpForHttpsProcessor.this.portMapping.containsKey(port)[ CD ]
Line_5 $$ int port = Integer.parseInt(matcher.group(2))-->Line_7 $$ UseHttpForHttpsProcessor.this.portMapping.containsKey(port)[ FD ]
Line_7 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) -->Line_8 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)[ CD ]
Line_5 $$ int port = Integer.parseInt(matcher.group(2))-->Line_8 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
Line_8 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)-->Line_8 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
Line_8 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)-->Line_8 $$ UseHttpForHttpsProcessor.this.portMapping.get(port)[ CD ]
Line_5 $$ int port = Integer.parseInt(matcher.group(2))-->Line_8 $$ UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
Line_8 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)-->Line_8 $$ UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
