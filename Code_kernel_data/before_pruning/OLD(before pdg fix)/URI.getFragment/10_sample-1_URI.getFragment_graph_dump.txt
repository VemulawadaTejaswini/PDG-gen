Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) [ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_4 $$ entry.getValue()[ CD ]
Line_3 $$ Map.Entry<Integer, URI> entry-->Line_4 $$ entry.getValue()[ FD ]
Line_5 $$ !scheme.equalsIgnoreCase(test.getScheme())-->Line_5 $$ scheme.equalsIgnoreCase(test.getScheme())[ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_5 $$ test.getScheme()[ FD ]
Line_8 $$ !userinfo.equals(test.getUserInfo())-->Line_8 $$ userinfo.equals(test.getUserInfo())[ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_8 $$ test.getUserInfo()[ FD ]
Line_11 $$ !host.equals(test.getHost())-->Line_11 $$ host.equals(test.getHost())[ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_11 $$ test.getHost()[ FD ]
Line_4 $$ URI test = entry.getValue()-->Line_14 $$ test.getPort()[ FD ]
Line_17 $$ !query.equals(test.getQuery())-->Line_17 $$ query.equals(test.getQuery())[ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_17 $$ test.getQuery()[ FD ]
Line_20 $$ !fragment.equals(test.getFragment())-->Line_20 $$ fragment.equals(test.getFragment())[ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_20 $$ test.getFragment()[ FD ]
Line_23 $$ if (path != null) -->Line_24 $$ if (test.getPath() == null) [ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_24 $$ test.getPath()[ FD ]
Line_23 $$ if (path != null) -->Line_27 $$ URI testPath = URI.create(test.getPath())[ CD ]
Line_27 $$ URI testPath = URI.create(test.getPath())-->Line_27 $$ URI.create(test.getPath())[ CD ]
Line_4 $$ URI test = entry.getValue()-->Line_27 $$ test.getPath()[ FD ]
Line_23 $$ if (path != null) -->Line_28 $$ if (path.relativize(testPath) == testPath) [ CD ]
Line_27 $$ URI testPath = URI.create(test.getPath())-->Line_28 $$ if (path.relativize(testPath) == testPath) [ FD ]
Line_27 $$ URI testPath = URI.create(test.getPath())-->Line_28 $$ path.relativize(testPath)[ FD ]
Line_3 $$ Map.Entry<Integer, URI> entry-->Line_32 $$ entry.getKey()[ FD ]
