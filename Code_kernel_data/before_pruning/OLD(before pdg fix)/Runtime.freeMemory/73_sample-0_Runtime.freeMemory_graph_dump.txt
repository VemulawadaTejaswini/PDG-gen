Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void mouseClicked(MouseEvent e) [ CD ]
Line_2 $$ public void mouseClicked(MouseEvent e) -->Line_3 $$ Runtime currR = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_3 $$ Runtime.getRuntime()[ CD ]
Line_2 $$ public void mouseClicked(MouseEvent e) -->Line_4 $$ long freeM = currR.freeMemory()[ CD ]
Line_4 $$ long freeM = currR.freeMemory()-->Line_4 $$ currR.freeMemory()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_4 $$ currR.freeMemory()[ FD ]
Line_2 $$ public void mouseClicked(MouseEvent e) -->Line_5 $$ long totalM = currR.totalMemory()[ CD ]
Line_5 $$ long totalM = currR.totalMemory()-->Line_5 $$ currR.totalMemory()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_5 $$ currR.totalMemory()[ FD ]
Line_2 $$ public void mouseClicked(MouseEvent e) -->Line_6 $$ long maxM = currR.maxMemory()[ CD ]
Line_6 $$ long maxM = currR.maxMemory()-->Line_6 $$ currR.maxMemory()[ CD ]
Line_3 $$ Runtime currR = Runtime.getRuntime()-->Line_6 $$ currR.maxMemory()[ FD ]
Line_2 $$ public void mouseClicked(MouseEvent e) -->Line_7 $$ m_logPanel.logMessage("[KnowledgeFlow] Memory (free/total/max.) in bytes: " + String.format("%,d", freeM) + " / " + String.format("%,d", totalM) + " / " + String.format("%,d", maxM))[ CD ]
Line_4 $$ long freeM = currR.freeMemory()-->Line_9 $$ String.format("%,d", freeM)[ FD ]
Line_5 $$ long totalM = currR.totalMemory()-->Line_10 $$ String.format("%,d", totalM)[ FD ]
Line_6 $$ long maxM = currR.maxMemory()-->Line_11 $$ String.format("%,d", maxM)[ FD ]
Line_2 $$ public void mouseClicked(MouseEvent e) -->Line_12 $$ m_logPanel.statusMessage("[KnowledgeFlow]|Memory (free/total/max.) in bytes: " + String.format("%,d", freeM) + " / " + String.format("%,d", totalM) + " / " + String.format("%,d", maxM))[ CD ]
Line_4 $$ long freeM = currR.freeMemory()-->Line_13 $$ String.format("%,d", freeM)[ FD ]
Line_5 $$ long totalM = currR.totalMemory()-->Line_14 $$ String.format("%,d", totalM)[ FD ]
Line_6 $$ long maxM = currR.maxMemory()-->Line_15 $$ String.format("%,d", maxM)[ FD ]
