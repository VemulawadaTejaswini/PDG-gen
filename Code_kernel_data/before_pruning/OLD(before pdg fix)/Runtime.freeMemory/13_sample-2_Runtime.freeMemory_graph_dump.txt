Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void jvm() [ CD ]
Line_2 $$ public void jvm() -->Line_3 $$ return SystemJVMResponse.create(bytesToValueMap(runtime.freeMemory()), bytesToValueMap(runtime.maxMemory()), bytesToValueMap(runtime.totalMemory()), bytesToValueMap(runtime.totalMemory() - runtime.freeMemory()), serverStatus.getNodeId().toString(), Tools.getPID(), Tools.getSystemInformation());[ CD ]
Line_3 $$ return SystemJVMResponse.create(bytesToValueMap(runtime.freeMemory()), bytesToValueMap(runtime.maxMemory()), bytesToValueMap(runtime.totalMemory()), bytesToValueMap(runtime.totalMemory() - runtime.freeMemory()), serverStatus.getNodeId().toString(), Tools.getPID(), Tools.getSystemInformation());-->Line_3 $$ SystemJVMResponse.create(bytesToValueMap(runtime.freeMemory()), bytesToValueMap(runtime.maxMemory()), bytesToValueMap(runtime.totalMemory()), bytesToValueMap(runtime.totalMemory() - runtime.freeMemory()), serverStatus.getNodeId().toString(), Tools.getPID(), Tools.getSystemInformation())[ CD ]
