Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) [ CD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_3 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)[ CD ]
Line_3 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)-->Line_3 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)[ CD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_3 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)[ FD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_4 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) [ CD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) [ CD ]
Line_3 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)-->Line_4 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) [ FD ]
Line_4 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) -->Line_5 $$ if (layer == maxLayer / 3) [ CD ]
Line_5 $$ if (layer == maxLayer / 3) -->Line_7 $$ iglooOffsety = -(layer - 1) * brickHeight[ CD ]
Line_4 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) -->Line_9 $$ if (layer >= maxLayer / 3) [ CD ]
Line_4 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) -->Line_13 $$ g2.fill(new Rectangle2D.Double(iglooOffsetx + 3 * FrostbiteDomain.gameWidth / 4, iglooOffsety + FrostbiteDomain.gameHeight / 5 - brickHeight * layer, iglooWidth, brickHeight))[ CD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_13 $$ g2.fill(new Rectangle2D.Double(iglooOffsetx + 3 * FrostbiteDomain.gameWidth / 4, iglooOffsety + FrostbiteDomain.gameHeight / 5 - brickHeight * layer, iglooWidth, brickHeight))[ FD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_17 $$ if (building >= maxLayer) [ CD ]
Line_3 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)-->Line_17 $$ if (building >= maxLayer) [ FD ]
Line_17 $$ if (building >= maxLayer) -->Line_18 $$ g2.setColor(Color.black)[ CD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_18 $$ g2.setColor(Color.black)[ FD ]
Line_17 $$ if (building >= maxLayer) -->Line_19 $$ int doorWidth = FrostbiteDomain.gameWidth / 28[ CD ]
Line_17 $$ if (building >= maxLayer) -->Line_20 $$ int doorHeight = FrostbiteDomain.gameHeight / 20[ CD ]
Line_17 $$ if (building >= maxLayer) -->Line_21 $$ g2.fill(new Rectangle2D.Double(3 * FrostbiteDomain.gameWidth / 4 + FrostbiteDomain.gameWidth / 12 - doorWidth / 2, FrostbiteDomain.gameHeight / 5 - doorHeight / 2, doorWidth, doorHeight))[ CD ]
Line_2 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_21 $$ g2.fill(new Rectangle2D.Double(3 * FrostbiteDomain.gameWidth / 4 + FrostbiteDomain.gameWidth / 12 - doorWidth / 2, FrostbiteDomain.gameHeight / 5 - doorHeight / 2, doorWidth, doorHeight))[ FD ]
