Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) [ CD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_3 $$ if (colorSet.isEmpty()) [ CD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_3 $$ if (colorSet.isEmpty()) [ FD ]
Line_3 $$ if (colorSet.isEmpty()) -->Line_3 $$ if (colorSet.isEmpty()) [ CD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_3 $$ if (colorSet.isEmpty()) [ FD ]
Line_3 $$ if (colorSet.isEmpty()) -->Line_4 $$ return TasksIcons.Trello[ CD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_6 $$ Image image = CACHE.get(colorSet)[ CD ]
Line_6 $$ Image image = CACHE.get(colorSet)-->Line_6 $$ Image image = CACHE.get(colorSet)[ CD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_6 $$ Image image = CACHE.get(colorSet)[ FD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_7 $$ if (image == null) [ CD ]
Line_6 $$ Image image = CACHE.get(colorSet)-->Line_7 $$ if (image == null) [ FD ]
Line_7 $$ if (image == null) -->Line_8 $$ BufferedImage bufferedImage = UIUtil.createImage(size, size, BufferedImage.TYPE_INT_ARGB)[ CD ]
Line_8 $$ BufferedImage bufferedImage = UIUtil.createImage(size, size, BufferedImage.TYPE_INT_ARGB)-->Line_8 $$ BufferedImage bufferedImage = UIUtil.createImage(size, size, BufferedImage.TYPE_INT_ARGB)[ CD ]
Line_7 $$ if (image == null) -->Line_9 $$ int adjustedSize = size - 1[ CD ]
Line_7 $$ if (image == null) -->Line_10 $$ int nStripes = colorSet.size()[ CD ]
Line_10 $$ int nStripes = colorSet.size()-->Line_10 $$ int nStripes = colorSet.size()[ CD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_10 $$ int nStripes = colorSet.size()[ FD ]
Line_7 $$ if (image == null) -->Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()[ CD ]
Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()-->Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()[ CD ]
Line_8 $$ BufferedImage bufferedImage = UIUtil.createImage(size, size, BufferedImage.TYPE_INT_ARGB)-->Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()[ FD ]
Line_7 $$ if (image == null) -->Line_12 $$ double diag = adjustedSize * SQRT_2[ CD ]
Line_7 $$ if (image == null) -->Line_13 $$ double stripeWidth = diag / nStripes[ CD ]
Line_7 $$ if (image == null) -->Line_14 $$ RoundRectangle2D baseRectangle = new RoundRectangle2D.Double(0, 0, adjustedSize, adjustedSize, 2, 2)[ CD ]
Line_7 $$ if (image == null) -->Line_15 $$ ArrayList<TrelloLabel.LabelColor> colorsList = new ArrayList<TrelloLabel.LabelColor>(colorSet)[ CD ]
Line_7 $$ if (image == null) -->Line_16 $$ for (int i = 0; i < nStripes; i++) [ CD ]
Line_7 $$ if (image == null) -->Line_7 $$ if (image == null) [ CD ]
Line_10 $$ int nStripes = colorSet.size()-->Line_16 $$ for (int i = 0; i < nStripes; i++) [ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_16 $$ for (int i = 0; i < nStripes; i++) [ CD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_16 $$ for (int i = 0; i < nStripes; i++) [ CD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_16 $$ for (int i = 0; i < nStripes; i++) [ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_17 $$ Color color = colorsList.get(i).getColor()[ CD ]
Line_17 $$ Color color = colorsList.get(i).getColor()-->Line_17 $$ Color color = colorsList.get(i).getColor()[ CD ]
Line_15 $$ ArrayList<TrelloLabel.LabelColor> colorsList = new ArrayList<TrelloLabel.LabelColor>(colorSet)-->Line_17 $$ Color color = colorsList.get(i).getColor()[ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_17 $$ Color color = colorsList.get(i).getColor()[ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))[ CD ]
Line_12 $$ double diag = adjustedSize * SQRT_2-->Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))[ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_19 $$ stripe.transform(AffineTransform.getRotateInstance(-Math.PI / 4, 0, 0))[ CD ]
Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))-->Line_19 $$ stripe.transform(AffineTransform.getRotateInstance(-Math.PI / 4, 0, 0))[ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_20 $$ stripe.intersect(new Area(baseRectangle))[ CD ]
Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))-->Line_20 $$ stripe.intersect(new Area(baseRectangle))[ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_21 $$ g2d.setPaint(color)[ CD ]
Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()-->Line_21 $$ g2d.setPaint(color)[ FD ]
Line_17 $$ Color color = colorsList.get(i).getColor()-->Line_21 $$ g2d.setPaint(color)[ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_22 $$ g2d.fill(stripe)[ CD ]
Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()-->Line_22 $$ g2d.fill(stripe)[ FD ]
Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))-->Line_22 $$ g2d.fill(stripe)[ FD ]
Line_7 $$ if (image == null) -->Line_24 $$ g2d.setPaint(Color.BLACK)[ CD ]
Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()-->Line_24 $$ g2d.setPaint(Color.BLACK)[ FD ]
Line_7 $$ if (image == null) -->Line_25 $$ g2d.draw(baseRectangle)[ CD ]
Line_11 $$ Graphics2D g2d = bufferedImage.createGraphics()-->Line_25 $$ g2d.draw(baseRectangle)[ FD ]
Line_14 $$ RoundRectangle2D baseRectangle = new RoundRectangle2D.Double(0, 0, adjustedSize, adjustedSize, 2, 2)-->Line_25 $$ g2d.draw(baseRectangle)[ FD ]
Line_7 $$ if (image == null) -->Line_26 $$ image = bufferedImage[ CD ]
Line_6 $$ Image image = CACHE.get(colorSet)-->Line_26 $$ image = bufferedImage[ FD ]
Line_26 $$ image = bufferedImage-->Line_26 $$ image = bufferedImage[ FD ]
Line_8 $$ BufferedImage bufferedImage = UIUtil.createImage(size, size, BufferedImage.TYPE_INT_ARGB)-->Line_26 $$ image = bufferedImage[ FD ]
Line_7 $$ if (image == null) -->Line_27 $$ CACHE.put(colorSet, image)[ CD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_27 $$ CACHE.put(colorSet, image)[ FD ]
Line_6 $$ Image image = CACHE.get(colorSet)-->Line_27 $$ CACHE.put(colorSet, image)[ FD ]
Line_26 $$ image = bufferedImage-->Line_27 $$ CACHE.put(colorSet, image)[ FD ]
Line_2 $$ public void buildIcon(Set<TrelloLabel.LabelColor> colorSet) -->Line_29 $$ return new ImageIcon(image)[ CD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_16 $$ for (int i = 0; i < nStripes; i++) [ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_16 $$ for (int i = 0; i < nStripes; i++) [ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_16 $$ for (int i = 0; i < nStripes; i++) [ FD ]
Line_16 $$ for (int i = 0; i < nStripes; i++) -->Line_17 $$ Color color = colorsList.get(i).getColor()[ FD ]
Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))-->Line_19 $$ stripe.transform(AffineTransform.getRotateInstance(-Math.PI / 4, 0, 0))[ FD ]
Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))-->Line_20 $$ stripe.intersect(new Area(baseRectangle))[ FD ]
Line_17 $$ Color color = colorsList.get(i).getColor()-->Line_21 $$ g2d.setPaint(color)[ FD ]
Line_18 $$ Area stripe = new Area(new Rectangle2D.Double(-diag / 2, (i * stripeWidth), diag, stripeWidth))-->Line_22 $$ g2d.fill(stripe)[ FD ]
