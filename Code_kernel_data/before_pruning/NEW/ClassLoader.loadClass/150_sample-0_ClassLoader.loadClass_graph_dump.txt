Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void buildAndTest(InjectionNode delegateInjectionNode) [ CD ]
Line_2 $$ public void buildAndTest(InjectionNode delegateInjectionNode) -->Line_3 $$ Class<Provider<MockDelegate>> generatedFactoryClass = (Class<Provider<MockDelegate>>) classLoader.loadClass(TEST_PACKAGE_FILENAME.getCanonicalName())[ CD ]
Line_2 $$ public void buildAndTest(InjectionNode delegateInjectionNode) -->Line_4 $$ assertNotNull(generatedFactoryClass)[ CD ]
Line_3 $$ Class<Provider<MockDelegate>> generatedFactoryClass = (Class<Provider<MockDelegate>>) classLoader.loadClass(TEST_PACKAGE_FILENAME.getCanonicalName())-->Line_4 $$ assertNotNull(generatedFactoryClass)[ FD ]
Line_2 $$ public void buildAndTest(InjectionNode delegateInjectionNode) -->Line_5 $$ Provider<MockDelegate> provider = generatedFactoryClass.newInstance()[ CD ]
Line_5 $$ Provider<MockDelegate> provider = generatedFactoryClass.newInstance()-->Line_5 $$ Provider<MockDelegate> provider = generatedFactoryClass.newInstance()[ CD ]
Line_3 $$ Class<Provider<MockDelegate>> generatedFactoryClass = (Class<Provider<MockDelegate>>) classLoader.loadClass(TEST_PACKAGE_FILENAME.getCanonicalName())-->Line_5 $$ Provider<MockDelegate> provider = generatedFactoryClass.newInstance()[ FD ]
Line_2 $$ public void buildAndTest(InjectionNode delegateInjectionNode) -->Line_6 $$ runMockDelegateTests(provider.get())[ CD ]
Line_5 $$ Provider<MockDelegate> provider = generatedFactoryClass.newInstance()-->Line_6 $$ runMockDelegateTests(provider.get())[ FD ]
