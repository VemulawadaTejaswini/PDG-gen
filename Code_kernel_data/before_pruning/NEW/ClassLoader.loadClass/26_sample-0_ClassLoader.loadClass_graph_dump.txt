Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() [ CD ]
Line_2 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_3 $$ Class[] interfacesA = [ CD ]
Line_2 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_4 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)[ CD ]
Line_4 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_4 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)[ CD ]
Line_3 $$ Class[] interfacesA = -->Line_4 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)[ FD ]
Line_2 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_5 $$ assertEquals(loaderA, proxy.getClass().getClassLoader())[ CD ]
Line_4 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_5 $$ assertEquals(loaderA, proxy.getClass().getClassLoader())[ FD ]
Line_2 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_6 $$ assertEquals("foo", proxy.getClass().getMethod("echo", String.class).invoke(proxy, "foo"))[ CD ]
Line_4 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_6 $$ assertEquals("foo", proxy.getClass().getMethod("echo", String.class).invoke(proxy, "foo"))[ FD ]
Line_4 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_6 $$ assertEquals("foo", proxy.getClass().getMethod("echo", String.class).invoke(proxy, "foo"))[ FD ]
