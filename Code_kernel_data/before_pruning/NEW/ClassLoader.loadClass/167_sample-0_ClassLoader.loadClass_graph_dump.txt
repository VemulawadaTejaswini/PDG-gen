Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) [ CD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_3 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())[ CD ]
Line_3 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())-->Line_3 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())[ CD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_3 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())[ FD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_3 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())[ FD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_4 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ CD ]
Line_4 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)-->Line_4 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ CD ]
Line_3 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())-->Line_4 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ FD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_4 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ FD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_4 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ FD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_5 $$ return CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance)[ CD ]
Line_5 $$ return CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance)-->Line_5 $$ return CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance)[ CD ]
Line_2 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_5 $$ return CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance)[ FD ]
Line_4 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)-->Line_5 $$ return CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance)[ FD ]
