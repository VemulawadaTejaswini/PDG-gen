Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testConversion() [ CD ]
Line_2 $$ public void testConversion() -->Line_3 $$ Calendar calendar = Calendar.getInstance()[ CD ]
Line_3 $$ Calendar calendar = Calendar.getInstance()-->Line_3 $$ Calendar calendar = Calendar.getInstance()[ CD ]
Line_2 $$ public void testConversion() -->Line_4 $$ calendar.set(2009, 6, 3, 12, 20, 10)[ CD ]
Line_3 $$ Calendar calendar = Calendar.getInstance()-->Line_4 $$ calendar.set(2009, 6, 3, 12, 20, 10)[ FD ]
Line_2 $$ public void testConversion() -->Line_5 $$ DateContainer result = mapper.map(calendar.getTime(), DateContainer.class)[ CD ]
Line_5 $$ DateContainer result = mapper.map(calendar.getTime(), DateContainer.class)-->Line_5 $$ DateContainer result = mapper.map(calendar.getTime(), DateContainer.class)[ CD ]
Line_3 $$ Calendar calendar = Calendar.getInstance()-->Line_5 $$ DateContainer result = mapper.map(calendar.getTime(), DateContainer.class)[ FD ]
Line_2 $$ public void testConversion() -->Line_6 $$ assertNotNull(result)[ CD ]
Line_5 $$ DateContainer result = mapper.map(calendar.getTime(), DateContainer.class)-->Line_6 $$ assertNotNull(result)[ FD ]
Line_2 $$ public void testConversion() -->Line_7 $$ assertEquals("2009-07-03 12:20:10", result.getDate())[ CD ]
Line_5 $$ DateContainer result = mapper.map(calendar.getTime(), DateContainer.class)-->Line_7 $$ assertEquals("2009-07-03 12:20:10", result.getDate())[ FD ]
Line_2 $$ public void testConversion() -->Line_8 $$ assertEquals("2009-07-03 12:20:10", result.getSet().iterator().next())[ CD ]
Line_5 $$ DateContainer result = mapper.map(calendar.getTime(), DateContainer.class)-->Line_8 $$ assertEquals("2009-07-03 12:20:10", result.getSet().iterator().next())[ FD ]
