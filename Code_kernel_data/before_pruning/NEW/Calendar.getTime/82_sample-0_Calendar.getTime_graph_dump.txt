Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() [ CD ]
Line_2 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() -->Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))[ CD ]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))-->Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))[ CD ]
Line_2 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() -->Line_4 $$ cal.add(Calendar.DAY_OF_YEAR, 1)[ CD ]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))-->Line_4 $$ cal.add(Calendar.DAY_OF_YEAR, 1)[ FD ]
Line_2 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() -->Line_5 $$ cal.set(Calendar.MINUTE, 0)[ CD ]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))-->Line_5 $$ cal.set(Calendar.MINUTE, 0)[ FD ]
Line_2 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() -->Line_6 $$ assertEquals("Tomorrow", df.formatAsDateWithoutTime(cal.getTime()))[ CD ]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))-->Line_6 $$ assertEquals("Tomorrow", df.formatAsDateWithoutTime(cal.getTime()))[ FD ]
