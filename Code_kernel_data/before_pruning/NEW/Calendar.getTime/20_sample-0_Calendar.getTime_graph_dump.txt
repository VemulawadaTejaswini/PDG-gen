Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testFriendlyFormatWithTime_ReturnsTodayAndTime_WhenDateIsToday() [ CD ]
Line_2 $$ public void testFriendlyFormatWithTime_ReturnsTodayAndTime_WhenDateIsToday() -->Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))[ CD ]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))-->Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))[ CD ]
Line_2 $$ public void testFriendlyFormatWithTime_ReturnsTodayAndTime_WhenDateIsToday() -->Line_4 $$ cal.set(Calendar.MINUTE, 30)[ CD ]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))-->Line_4 $$ cal.set(Calendar.MINUTE, 30)[ FD ]
Line_2 $$ public void testFriendlyFormatWithTime_ReturnsTodayAndTime_WhenDateIsToday() -->Line_5 $$ assertEquals("Today at 14:30", df.formatAsDateWithTime(cal.getTime()))[ CD ]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))-->Line_5 $$ assertEquals("Today at 14:30", df.formatAsDateWithTime(cal.getTime()))[ FD ]
