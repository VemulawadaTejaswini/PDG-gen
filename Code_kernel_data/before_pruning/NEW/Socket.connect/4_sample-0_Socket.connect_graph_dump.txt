Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void newClient(Connection connection) [ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_3 $$ if (connection.isProxy()) [ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_3 $$ if (connection.isProxy()) [ FD ]
Line_3 $$ if (connection.isProxy()) -->Line_3 $$ if (connection.isProxy()) [ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_3 $$ if (connection.isProxy()) [ FD ]
Line_3 $$ if (connection.isProxy()) -->Line_4 $$ Proxy proxy = new Proxy(Type.SOCKS, new InetSocketAddress(connection.getProxyHost(), connection.getProxyPort()))[ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_4 $$ Proxy proxy = new Proxy(Type.SOCKS, new InetSocketAddress(connection.getProxyHost(), connection.getProxyPort()))[ FD ]
Line_2 $$ public void newClient(Connection connection) -->Line_4 $$ Proxy proxy = new Proxy(Type.SOCKS, new InetSocketAddress(connection.getProxyHost(), connection.getProxyPort()))[ FD ]
Line_2 $$ public void newClient(Connection connection) -->Line_9 $$ socket.setTcpNoDelay(true)[ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_10 $$ socket.setSoTimeout(timeout)[ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_11 $$ socket.connect(new InetSocketAddress(host, port), timeout)[ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_12 $$ TSocket trans = new TSocket(socket)[ CD ]
Line_2 $$ public void newClient(Connection connection) -->Line_14 $$ return new WeightedClient(proto, getIdentifer(socket))[ CD ]
