Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void apply(HostAndPort socketA) [ CD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_3 $$ InetSocketAddress socketAddress = new InetSocketAddress(socketA.getHostText(), socketA.getPort())[ CD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_3 $$ InetSocketAddress socketAddress = new InetSocketAddress(socketA.getHostText(), socketA.getPort())[ FD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_3 $$ InetSocketAddress socketAddress = new InetSocketAddress(socketA.getHostText(), socketA.getPort())[ FD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_5 $$ logger.trace("testing socket %s", socketAddress)[ CD ]
Line_3 $$ InetSocketAddress socketAddress = new InetSocketAddress(socketA.getHostText(), socketA.getPort())-->Line_5 $$ logger.trace("testing socket %s", socketAddress)[ FD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_6 $$ socket = new Socket(proxyForURI.apply(URI.create("socket://" + socketA.getHostText() + ":" + socketA.getPort())))[ FD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_6 $$ socket = new Socket(proxyForURI.apply(URI.create("socket://" + socketA.getHostText() + ":" + socketA.getPort())))[ FD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_8 $$ socket.setReuseAddress(false)[ CD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_9 $$ socket.setSoLinger(false, 1)[ CD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_10 $$ socket.setSoTimeout(timeout)[ CD ]
Line_2 $$ public void apply(HostAndPort socketA) -->Line_11 $$ socket.connect(socketAddress, timeout)[ CD ]
Line_3 $$ InetSocketAddress socketAddress = new InetSocketAddress(socketA.getHostText(), socketA.getPort())-->Line_11 $$ socket.connect(socketAddress, timeout)[ FD ]
