Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testPreparedSetSchemaFunctionLarge() [ CD ]
Line_2 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_3 $$ PreparedStatement ps = prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")[ CD ]
Line_3 $$ PreparedStatement ps = prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")-->Line_3 $$ PreparedStatement ps = prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")[ CD ]
Line_2 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_6 $$ ResultSet rs = ps.executeQuery()[ CD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_6 $$ ResultSet rs = ps.executeQuery()[ CD ]
Line_3 $$ PreparedStatement ps = prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")-->Line_6 $$ ResultSet rs = ps.executeQuery()[ FD ]
Line_2 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_7 $$ while (rs.next()) [ CD ]
Line_2 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_2 $$ public void testPreparedSetSchemaFunctionLarge() [ CD ]
Line_7 $$ while (rs.next()) -->Line_7 $$ while (rs.next()) [ CD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_7 $$ while (rs.next()) [ FD ]
Line_7 $$ while (rs.next()) -->Line_8 $$ assertTrue(rs.getString(2).length() > 2)[ CD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_8 $$ assertTrue(rs.getString(2).length() > 2)[ FD ]
Line_7 $$ while (rs.next()) -->Line_9 $$ verifyCachedSchema(getConnection())[ CD ]
