Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testReceiveBinary() [ CD ]
Line_2 $$ public void testReceiveBinary() -->Line_3 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ public void testReceiveBinary() -->Line_2 $$ public void testReceiveBinary() [ CD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_3 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_3 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_3 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_5 $$ ps.setInt(1, 42 + i)[ CD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_6 $$ ResultSet rs = ps.executeQuery()[ CD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_6 $$ ResultSet rs = ps.executeQuery()[ CD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_7 $$ assertEquals("One row should be returned", true, rs.next())[ CD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_7 $$ assertEquals("One row should be returned", true, rs.next())[ FD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_8 $$ assertEquals(42 + i, rs.getInt(1))[ CD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_8 $$ assertEquals(42 + i, rs.getInt(1))[ FD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_9 $$ rs.close()[ CD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_9 $$ rs.close()[ FD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_3 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_3 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_3 $$ for (int i = 0; i < 10; i++) -->Line_3 $$ for (int i = 0; i < 10; i++) [ FD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_7 $$ assertEquals("One row should be returned", true, rs.next())[ FD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_8 $$ assertEquals(42 + i, rs.getInt(1))[ FD ]
Line_6 $$ ResultSet rs = ps.executeQuery()-->Line_9 $$ rs.close()[ FD ]
