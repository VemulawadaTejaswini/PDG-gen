Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) [ CD ]
Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ CD ]
Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) -->Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) [ CD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ CD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ CD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ CD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_4 $$ String s = p.segment(i)[ CD ]
Line_4 $$ String s = p.segment(i)-->Line_4 $$ String s = p.segment(i)[ CD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_4 $$ String s = p.segment(i)[ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_5 $$ if (i == 2) [ CD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_5 $$ if (i == 2) [ FD ]
Line_5 $$ if (i == 2) -->Line_6 $$ s += ".." + GitUtils.encode(newCommit)[ CD ]
Line_4 $$ String s = p.segment(i)-->Line_6 $$ s += ".." + GitUtils.encode(newCommit)[ FD ]
Line_6 $$ s += ".." + GitUtils.encode(newCommit)-->Line_6 $$ s += ".." + GitUtils.encode(newCommit)[ FD ]
Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) -->Line_6 $$ s += ".." + GitUtils.encode(newCommit)[ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_8 $$ np = np.append(s)[ CD ]
Line_4 $$ String s = p.segment(i)-->Line_8 $$ np = np.append(s)[ FD ]
Line_6 $$ s += ".." + GitUtils.encode(newCommit)-->Line_8 $$ np = np.append(s)[ FD ]
Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) -->Line_10 $$ if (p.hasTrailingSeparator())[ CD ]
Line_10 $$ if (p.hasTrailingSeparator())-->Line_10 $$ if (p.hasTrailingSeparator())[ CD ]
Line_10 $$ if (p.hasTrailingSeparator())-->Line_11 $$ np = np.addTrailingSeparator()[ CD ]
Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) -->Line_12 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), np.toString(), request.getQueryString(), u.getFragment())[ CD ]
Line_2 $$ public void identifyNewCommitResource(HttpServletRequest request, HttpServletResponse response, Repository db, String newCommit) -->Line_12 $$ URI nu = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), np.toString(), request.getQueryString(), u.getFragment())[ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) [ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_4 $$ String s = p.segment(i)[ FD ]
Line_3 $$ for (int i = 0; i < p.segmentCount(); i++) -->Line_5 $$ if (i == 2) [ FD ]
Line_4 $$ String s = p.segment(i)-->Line_8 $$ np = np.append(s)[ FD ]
Line_6 $$ s += ".." + GitUtils.encode(newCommit)-->Line_8 $$ np = np.append(s)[ FD ]
