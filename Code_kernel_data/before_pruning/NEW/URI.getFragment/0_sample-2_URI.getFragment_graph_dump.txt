Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void uriSubpath(URI uri, String subpath) [ CD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_3 $$ String path = uri.getPath()[ CD ]
Line_3 $$ String path = uri.getPath()-->Line_3 $$ String path = uri.getPath()[ CD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_3 $$ String path = uri.getPath()[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_4 $$ if (path != null && path.length() > 0) [ CD ]
Line_3 $$ String path = uri.getPath()-->Line_4 $$ if (path != null && path.length() > 0) [ FD ]
Line_4 $$ if (path != null && path.length() > 0) -->Line_6 $$ subpath = path + "/" + subpath[ CD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_6 $$ subpath = path + "/" + subpath[ FD ]
Line_6 $$ subpath = path + "/" + subpath-->Line_6 $$ subpath = path + "/" + subpath[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_6 $$ subpath = path + "/" + subpath[ FD ]
Line_6 $$ subpath = path + "/" + subpath-->Line_6 $$ subpath = path + "/" + subpath[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_8 $$ if (uri.getScheme() != null && subpath.charAt(0) != '/') [ CD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_8 $$ if (uri.getScheme() != null && subpath.charAt(0) != '/') [ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_8 $$ if (uri.getScheme() != null && subpath.charAt(0) != '/') [ FD ]
Line_6 $$ subpath = path + "/" + subpath-->Line_8 $$ if (uri.getScheme() != null && subpath.charAt(0) != '/') [ FD ]
Line_8 $$ if (uri.getScheme() != null && subpath.charAt(0) != '/') -->Line_10 $$ subpath = "/" + subpath[ CD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_10 $$ subpath = "/" + subpath[ FD ]
Line_6 $$ subpath = path + "/" + subpath-->Line_10 $$ subpath = "/" + subpath[ FD ]
Line_10 $$ subpath = "/" + subpath-->Line_10 $$ subpath = "/" + subpath[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_10 $$ subpath = "/" + subpath[ FD ]
Line_6 $$ subpath = path + "/" + subpath-->Line_10 $$ subpath = "/" + subpath[ FD ]
Line_10 $$ subpath = "/" + subpath-->Line_10 $$ subpath = "/" + subpath[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_12 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), subpath, uri.getQuery(), uri.getFragment())[ CD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_12 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), subpath, uri.getQuery(), uri.getFragment())[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_12 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), subpath, uri.getQuery(), uri.getFragment())[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_12 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), subpath, uri.getQuery(), uri.getFragment())[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_12 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), subpath, uri.getQuery(), uri.getFragment())[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_12 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), subpath, uri.getQuery(), uri.getFragment())[ FD ]
Line_2 $$ public void uriSubpath(URI uri, String subpath) -->Line_12 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), subpath, uri.getQuery(), uri.getFragment())[ FD ]
