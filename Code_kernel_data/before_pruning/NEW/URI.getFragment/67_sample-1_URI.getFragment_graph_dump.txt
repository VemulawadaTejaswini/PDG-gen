Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) [ CD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_3 $$ URI context = new URI(annotations[i].getContext())[ CD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_4 $$ String expression = URLDecoder.decode(context.getFragment())[ CD ]
Line_4 $$ String expression = URLDecoder.decode(context.getFragment())-->Line_4 $$ String expression = URLDecoder.decode(context.getFragment())[ CD ]
Line_3 $$ URI context = new URI(annotations[i].getContext())-->Line_4 $$ String expression = URLDecoder.decode(context.getFragment())[ FD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_5 $$ LocationList list = XPointerAPI.evalFullptr(document, expression)[ CD ]
Line_5 $$ LocationList list = XPointerAPI.evalFullptr(document, expression)-->Line_5 $$ LocationList list = XPointerAPI.evalFullptr(document, expression)[ CD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_5 $$ LocationList list = XPointerAPI.evalFullptr(document, expression)[ FD ]
Line_4 $$ String expression = URLDecoder.decode(context.getFragment())-->Line_5 $$ LocationList list = XPointerAPI.evalFullptr(document, expression)[ FD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_6 $$ int length = list.getLength()[ CD ]
Line_6 $$ int length = list.getLength()-->Line_6 $$ int length = list.getLength()[ CD ]
Line_5 $$ LocationList list = XPointerAPI.evalFullptr(document, expression)-->Line_6 $$ int length = list.getLength()[ FD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_7 $$ for (int j = 0; j < length; j++) [ CD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) [ CD ]
Line_6 $$ int length = list.getLength()-->Line_7 $$ for (int j = 0; j < length; j++) [ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_7 $$ for (int j = 0; j < length; j++) [ CD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_7 $$ for (int j = 0; j < length; j++) [ CD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_7 $$ for (int j = 0; j < length; j++) [ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_8 $$ Location location = list.item(j)[ CD ]
Line_8 $$ Location location = list.item(j)-->Line_8 $$ Location location = list.item(j)[ CD ]
Line_5 $$ LocationList list = XPointerAPI.evalFullptr(document, expression)-->Line_8 $$ Location location = list.item(j)[ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_8 $$ Location location = list.item(j)[ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_9 $$ Range range[ CD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_10 $$ if (location.getType() == Location.RANGE)[ CD ]
Line_8 $$ Location location = list.item(j)-->Line_10 $$ if (location.getType() == Location.RANGE)[ FD ]
Line_10 $$ if (location.getType() == Location.RANGE)-->Line_11 $$ range = (Range) location.getLocation()[ CD ]
Line_9 $$ Range range-->Line_11 $$ range = (Range) location.getLocation()[ FD ]
Line_11 $$ range = (Range) location.getLocation()-->Line_11 $$ range = (Range) location.getLocation()[ FD ]
Line_8 $$ Location location = list.item(j)-->Line_11 $$ range = (Range) location.getLocation()[ FD ]
Line_10 $$ if (location.getType() == Location.RANGE)-->Line_13 $$ range = ((DocumentRange) document).createRange()[ CD ]
Line_9 $$ Range range-->Line_13 $$ range = ((DocumentRange) document).createRange()[ FD ]
Line_11 $$ range = (Range) location.getLocation()-->Line_13 $$ range = ((DocumentRange) document).createRange()[ FD ]
Line_13 $$ range = ((DocumentRange) document).createRange()-->Line_13 $$ range = ((DocumentRange) document).createRange()[ FD ]
Line_13 $$ range = ((DocumentRange) document).createRange()-->Line_13 $$ range = ((DocumentRange) document).createRange()[ CD ]
Line_10 $$ if (location.getType() == Location.RANGE)-->Line_14 $$ range.selectNode((Node) location.getLocation())[ CD ]
Line_9 $$ Range range-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_11 $$ range = (Range) location.getLocation()-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_13 $$ range = ((DocumentRange) document).createRange()-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_8 $$ Location location = list.item(j)-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_16 $$ if (!range.getCollapsed())[ CD ]
Line_16 $$ if (!range.getCollapsed())-->Line_16 $$ if (!range.getCollapsed())[ CD ]
Line_16 $$ if (!range.getCollapsed())-->Line_16 $$ if (!range.getCollapsed())[ CD ]
Line_9 $$ Range range-->Line_16 $$ if (!range.getCollapsed())[ FD ]
Line_11 $$ range = (Range) location.getLocation()-->Line_16 $$ if (!range.getCollapsed())[ FD ]
Line_13 $$ range = ((DocumentRange) document).createRange()-->Line_16 $$ if (!range.getCollapsed())[ FD ]
Line_16 $$ if (!range.getCollapsed())-->Line_17 $$ srl.insert(new SelectionRange(range, annotations[i]))[ CD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_19 $$ srl.surroundContents(NS, "aml:annotated", "aml:id", "aml:first")[ CD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_20 $$ Element index = document.createElementNS(NS, "aml:regions")[ CD ]
Line_20 $$ Element index = document.createElementNS(NS, "aml:regions")-->Line_20 $$ Element index = document.createElementNS(NS, "aml:regions")[ CD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_20 $$ Element index = document.createElementNS(NS, "aml:regions")[ FD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_21 $$ document.getDocumentElement().appendChild(index)[ CD ]
Line_20 $$ Element index = document.createElementNS(NS, "aml:regions")-->Line_21 $$ document.getDocumentElement().appendChild(index)[ FD ]
Line_2 $$ public void annotate(Document document, AnnotationInfo[] annotations) -->Line_21 $$ document.getDocumentElement().appendChild(index)[ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_7 $$ for (int j = 0; j < length; j++) [ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_7 $$ for (int j = 0; j < length; j++) [ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_7 $$ for (int j = 0; j < length; j++) [ FD ]
Line_7 $$ for (int j = 0; j < length; j++) -->Line_8 $$ Location location = list.item(j)[ FD ]
Line_8 $$ Location location = list.item(j)-->Line_10 $$ if (location.getType() == Location.RANGE)[ FD ]
Line_8 $$ Location location = list.item(j)-->Line_11 $$ range = (Range) location.getLocation()[ FD ]
Line_9 $$ Range range-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_11 $$ range = (Range) location.getLocation()-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_13 $$ range = ((DocumentRange) document).createRange()-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_8 $$ Location location = list.item(j)-->Line_14 $$ range.selectNode((Node) location.getLocation())[ FD ]
Line_9 $$ Range range-->Line_16 $$ if (!range.getCollapsed())[ FD ]
Line_11 $$ range = (Range) location.getLocation()-->Line_16 $$ if (!range.getCollapsed())[ FD ]
Line_13 $$ range = ((DocumentRange) document).createRange()-->Line_16 $$ if (!range.getCollapsed())[ FD ]
