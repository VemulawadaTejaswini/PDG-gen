Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testSetQueryParams() [ CD ]
Line_2 $$ public void testSetQueryParams() -->Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)[ CD ]
Line_2 $$ public void testSetQueryParams() -->Line_5 $$ assertFalse(updatedUri.toString().contains("a #"))[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_5 $$ assertFalse(updatedUri.toString().contains("a #"))[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_6 $$ assertFalse(updatedUri.toString().contains("1#t"))[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_6 $$ assertFalse(updatedUri.toString().contains("1#t"))[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_7 $$ assertFalse(updatedUri.toString().contains(" &time"))[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_7 $$ assertFalse(updatedUri.toString().contains(" &time"))[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_8 $$ assertFalse(updatedUri.toString().contains("#trick"))[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_8 $$ assertFalse(updatedUri.toString().contains("#trick"))[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_9 $$ assertEquals("http", updatedUri.getScheme())[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_9 $$ assertEquals("http", updatedUri.getScheme())[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_10 $$ assertEquals("fragment", updatedUri.getFragment())[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_10 $$ assertEquals("fragment", updatedUri.getFragment())[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_11 $$ assertEquals("server.com", updatedUri.getHost())[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_11 $$ assertEquals("server.com", updatedUri.getHost())[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_12 $$ assertEquals("/p1/p2", updatedUri.getPath())[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_12 $$ assertEquals("/p1/p2", updatedUri.getPath())[ FD ]
Line_2 $$ public void testSetQueryParams() -->Line_13 $$ assertEquals(9876, updatedUri.getPort())[ CD ]
Line_4 $$ final URI updatedUri = URIUtils.setQueryParams(initialUri, params)-->Line_13 $$ assertEquals(9876, updatedUri.getPort())[ FD ]
