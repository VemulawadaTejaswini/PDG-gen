Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void connect(final Context context, String path, int maxLength, final WebSocketHandler<T> handler) [ CD ]
Line_2 $$ public void connect(final Context context, String path, int maxLength, final WebSocketHandler<T> handler) -->Line_3 $$ PublicAddress publicAddress = context.get(PublicAddress.class)[ CD ]
Line_3 $$ PublicAddress publicAddress = context.get(PublicAddress.class)-->Line_3 $$ PublicAddress publicAddress = context.get(PublicAddress.class)[ CD ]
Line_2 $$ public void connect(final Context context, String path, int maxLength, final WebSocketHandler<T> handler) -->Line_3 $$ PublicAddress publicAddress = context.get(PublicAddress.class)[ FD ]
Line_2 $$ public void connect(final Context context, String path, int maxLength, final WebSocketHandler<T> handler) -->Line_4 $$ URI address = publicAddress.getAddress(context)[ CD ]
Line_4 $$ URI address = publicAddress.getAddress(context)-->Line_4 $$ URI address = publicAddress.getAddress(context)[ CD ]
Line_3 $$ PublicAddress publicAddress = context.get(PublicAddress.class)-->Line_4 $$ URI address = publicAddress.getAddress(context)[ FD ]
Line_2 $$ public void connect(final Context context, String path, int maxLength, final WebSocketHandler<T> handler) -->Line_4 $$ URI address = publicAddress.getAddress(context)[ FD ]
Line_2 $$ public void connect(final Context context, String path, int maxLength, final WebSocketHandler<T> handler) -->Line_5 $$ URI httpPath = address.resolve(path)[ CD ]
Line_5 $$ URI httpPath = address.resolve(path)-->Line_5 $$ URI httpPath = address.resolve(path)[ CD ]
Line_4 $$ URI address = publicAddress.getAddress(context)-->Line_5 $$ URI httpPath = address.resolve(path)[ FD ]
Line_2 $$ public void connect(final Context context, String path, int maxLength, final WebSocketHandler<T> handler) -->Line_5 $$ URI httpPath = address.resolve(path)[ FD ]
Line_5 $$ URI httpPath = address.resolve(path)-->Line_6 $$ wsPath = new URI("ws", httpPath.getUserInfo(), httpPath.getHost(), httpPath.getPort(), httpPath.getPath(), httpPath.getQuery(), httpPath.getFragment())[ FD ]
Line_5 $$ URI httpPath = address.resolve(path)-->Line_6 $$ wsPath = new URI("ws", httpPath.getUserInfo(), httpPath.getHost(), httpPath.getPort(), httpPath.getPath(), httpPath.getQuery(), httpPath.getFragment())[ FD ]
Line_5 $$ URI httpPath = address.resolve(path)-->Line_6 $$ wsPath = new URI("ws", httpPath.getUserInfo(), httpPath.getHost(), httpPath.getPort(), httpPath.getPath(), httpPath.getQuery(), httpPath.getFragment())[ FD ]
Line_5 $$ URI httpPath = address.resolve(path)-->Line_6 $$ wsPath = new URI("ws", httpPath.getUserInfo(), httpPath.getHost(), httpPath.getPort(), httpPath.getPath(), httpPath.getQuery(), httpPath.getFragment())[ FD ]
Line_5 $$ URI httpPath = address.resolve(path)-->Line_6 $$ wsPath = new URI("ws", httpPath.getUserInfo(), httpPath.getHost(), httpPath.getPort(), httpPath.getPath(), httpPath.getQuery(), httpPath.getFragment())[ FD ]
Line_5 $$ URI httpPath = address.resolve(path)-->Line_6 $$ wsPath = new URI("ws", httpPath.getUserInfo(), httpPath.getHost(), httpPath.getPort(), httpPath.getPath(), httpPath.getQuery(), httpPath.getFragment())[ FD ]
