Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void rewrite(JsonNode plan, Set<String> namesUsed, boolean debugMode, boolean revisit) [ CD ]
Line_5 $$ String filename = file.getTextValue()-->Line_5 $$ String filename = file.getTextValue()[ CD ]
Line_3 $$ for (JsonNode file : job.path("cachedFiles")) -->Line_5 $$ String filename = file.getTextValue()[ FD ]
Line_5 $$ String filename = file.getTextValue()-->Line_6 $$ filename = cleanLatestTag(filename)[ FD ]
Line_6 $$ filename = cleanLatestTag(filename)-->Line_6 $$ filename = cleanLatestTag(filename)[ FD ]
Line_6 $$ filename = cleanLatestTag(filename)-->Line_6 $$ filename = cleanLatestTag(filename)[ CD ]
Line_5 $$ String filename = file.getTextValue()-->Line_6 $$ filename = cleanLatestTag(filename)[ FD ]
Line_6 $$ filename = cleanLatestTag(filename)-->Line_6 $$ filename = cleanLatestTag(filename)[ FD ]
Line_7 $$ URI uri = null-->Line_11 $$ uri = new URI(filename)[ FD ]
Line_11 $$ uri = new URI(filename)-->Line_11 $$ uri = new URI(filename)[ FD ]
Line_8 $$ String path, fragment-->Line_12 $$ path = uri.getPath()[ FD ]
Line_12 $$ path = uri.getPath()-->Line_12 $$ path = uri.getPath()[ FD ]
Line_12 $$ path = uri.getPath()-->Line_12 $$ path = uri.getPath()[ CD ]
Line_7 $$ URI uri = null-->Line_12 $$ path = uri.getPath()[ FD ]
Line_11 $$ uri = new URI(filename)-->Line_12 $$ path = uri.getPath()[ FD ]
Line_8 $$ String path, fragment-->Line_13 $$ path = restoreLatestTag(path)[ FD ]
Line_12 $$ path = uri.getPath()-->Line_13 $$ path = restoreLatestTag(path)[ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_13 $$ path = restoreLatestTag(path)[ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_13 $$ path = restoreLatestTag(path)[ CD ]
Line_8 $$ String path, fragment-->Line_13 $$ path = restoreLatestTag(path)[ FD ]
Line_12 $$ path = uri.getPath()-->Line_13 $$ path = restoreLatestTag(path)[ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_13 $$ path = restoreLatestTag(path)[ FD ]
Line_8 $$ String path, fragment-->Line_14 $$ fragment = uri.getFragment()[ FD ]
Line_14 $$ fragment = uri.getFragment()-->Line_14 $$ fragment = uri.getFragment()[ FD ]
Line_14 $$ fragment = uri.getFragment()-->Line_14 $$ fragment = uri.getFragment()[ CD ]
Line_7 $$ URI uri = null-->Line_14 $$ fragment = uri.getFragment()[ FD ]
Line_11 $$ uri = new URI(filename)-->Line_14 $$ fragment = uri.getFragment()[ FD ]
Line_8 $$ String path, fragment-->Line_15 $$ if (path.contains("#LATEST")) [ FD ]
Line_12 $$ path = uri.getPath()-->Line_15 $$ if (path.contains("#LATEST")) [ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_15 $$ if (path.contains("#LATEST")) [ FD ]
Line_15 $$ if (path.contains("#LATEST")) -->Line_15 $$ if (path.contains("#LATEST")) [ CD ]
Line_8 $$ String path, fragment-->Line_15 $$ if (path.contains("#LATEST")) [ FD ]
Line_12 $$ path = uri.getPath()-->Line_15 $$ if (path.contains("#LATEST")) [ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_15 $$ if (path.contains("#LATEST")) [ FD ]
Line_15 $$ if (path.contains("#LATEST")) -->Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()[ CD ]
Line_8 $$ String path, fragment-->Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()[ FD ]
Line_12 $$ path = uri.getPath()-->Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()[ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()[ FD ]
Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()-->Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()[ FD ]
Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()-->Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()[ CD ]
Line_15 $$ if (path.contains("#LATEST")) -->Line_20 $$ path = new URI(path).getPath()[ CD ]
Line_8 $$ String path, fragment-->Line_20 $$ path = new URI(path).getPath()[ FD ]
Line_12 $$ path = uri.getPath()-->Line_20 $$ path = new URI(path).getPath()[ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_20 $$ path = new URI(path).getPath()[ FD ]
Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()-->Line_20 $$ path = new URI(path).getPath()[ FD ]
Line_20 $$ path = new URI(path).getPath()-->Line_20 $$ path = new URI(path).getPath()[ FD ]
Line_20 $$ path = new URI(path).getPath()-->Line_20 $$ path = new URI(path).getPath()[ CD ]
Line_8 $$ String path, fragment-->Line_27 $$ if (fragment == null)[ FD ]
Line_14 $$ fragment = uri.getFragment()-->Line_27 $$ if (fragment == null)[ FD ]
Line_27 $$ if (fragment == null)-->Line_28 $$ fragment = symlinkMap.get(path)[ CD ]
Line_8 $$ String path, fragment-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_14 $$ fragment = uri.getFragment()-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_28 $$ fragment = symlinkMap.get(path)-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_28 $$ fragment = symlinkMap.get(path)-->Line_28 $$ fragment = symlinkMap.get(path)[ CD ]
Line_8 $$ String path, fragment-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_12 $$ path = uri.getPath()-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_20 $$ path = new URI(path).getPath()-->Line_28 $$ fragment = symlinkMap.get(path)[ FD ]
Line_8 $$ String path, fragment-->Line_29 $$ if (fragment == null)[ FD ]
Line_14 $$ fragment = uri.getFragment()-->Line_29 $$ if (fragment == null)[ FD ]
Line_28 $$ fragment = symlinkMap.get(path)-->Line_29 $$ if (fragment == null)[ FD ]
Line_29 $$ if (fragment == null)-->Line_30 $$ fragment = "cached_" + (symlinkCounter++)[ CD ]
Line_8 $$ String path, fragment-->Line_30 $$ fragment = "cached_" + (symlinkCounter++)[ FD ]
Line_14 $$ fragment = uri.getFragment()-->Line_30 $$ fragment = "cached_" + (symlinkCounter++)[ FD ]
Line_28 $$ fragment = symlinkMap.get(path)-->Line_30 $$ fragment = "cached_" + (symlinkCounter++)[ FD ]
Line_30 $$ fragment = "cached_" + (symlinkCounter++)-->Line_30 $$ fragment = "cached_" + (symlinkCounter++)[ FD ]
Line_8 $$ String path, fragment-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_12 $$ path = uri.getPath()-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_13 $$ path = restoreLatestTag(path)-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_17 $$ path = FileSystemUtils.getLatestPath(fs, new Path(path)).toString()-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_20 $$ path = new URI(path).getPath()-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_8 $$ String path, fragment-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_14 $$ fragment = uri.getFragment()-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_28 $$ fragment = symlinkMap.get(path)-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_30 $$ fragment = "cached_" + (symlinkCounter++)-->Line_31 $$ symlinkMap.put(path, fragment)[ FD ]
Line_2 $$ public void rewrite(JsonNode plan, Set<String> namesUsed, boolean debugMode, boolean revisit) -->Line_34 $$ ((ObjectNode) job).put("cachedFiles", cachedFiles)[ CD ]
