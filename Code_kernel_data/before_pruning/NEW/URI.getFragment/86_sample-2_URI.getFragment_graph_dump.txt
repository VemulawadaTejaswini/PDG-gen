Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testRelativeFragmentOnQuery() [ CD ]
Line_2 $$ public void testRelativeFragmentOnQuery() -->Line_3 $$ URI base = new URI("http://host/file?query/x#fragment")[ CD ]
Line_2 $$ public void testRelativeFragmentOnQuery() -->Line_4 $$ URI uri = base.resolve("#another")[ CD ]
Line_4 $$ URI uri = base.resolve("#another")-->Line_4 $$ URI uri = base.resolve("#another")[ CD ]
Line_3 $$ URI base = new URI("http://host/file?query/x#fragment")-->Line_4 $$ URI uri = base.resolve("#another")[ FD ]
Line_2 $$ public void testRelativeFragmentOnQuery() -->Line_5 $$ assertEquals("http://host/file?query/x#another", uri.toString())[ CD ]
Line_4 $$ URI uri = base.resolve("#another")-->Line_5 $$ assertEquals("http://host/file?query/x#another", uri.toString())[ FD ]
Line_2 $$ public void testRelativeFragmentOnQuery() -->Line_6 $$ assertEquals("/file", uri.getPath())[ CD ]
Line_4 $$ URI uri = base.resolve("#another")-->Line_6 $$ assertEquals("/file", uri.getPath())[ FD ]
Line_2 $$ public void testRelativeFragmentOnQuery() -->Line_7 $$ assertEquals("query/x", uri.getQuery())[ CD ]
Line_4 $$ URI uri = base.resolve("#another")-->Line_7 $$ assertEquals("query/x", uri.getQuery())[ FD ]
Line_2 $$ public void testRelativeFragmentOnQuery() -->Line_8 $$ assertEquals("another", uri.getFragment())[ CD ]
Line_4 $$ URI uri = base.resolve("#another")-->Line_8 $$ assertEquals("another", uri.getFragment())[ FD ]
