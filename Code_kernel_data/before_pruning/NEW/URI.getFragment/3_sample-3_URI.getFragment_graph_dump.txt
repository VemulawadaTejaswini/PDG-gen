Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void openDB() [ CD ]
Line_2 $$ public void openDB() -->Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)[ CD ]
Line_2 $$ public void openDB() -->Line_4 $$ if (mDb.getVersion() == 1) [ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_4 $$ if (mDb.getVersion() == 1) [ FD ]
Line_4 $$ if (mDb.getVersion() == 1) -->Line_5 $$ Log.i(K9.LOG_TAG, "Updating preferences to urlencoded username/password")[ CD ]
Line_4 $$ if (mDb.getVersion() == 1) -->Line_6 $$ String accountUuids = readValue(mDb, "accountUuids")[ CD ]
Line_6 $$ String accountUuids = readValue(mDb, "accountUuids")-->Line_6 $$ String accountUuids = readValue(mDb, "accountUuids")[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_6 $$ String accountUuids = readValue(mDb, "accountUuids")[ FD ]
Line_4 $$ if (mDb.getVersion() == 1) -->Line_7 $$ if (accountUuids != null && accountUuids.length() != 0) [ CD ]
Line_6 $$ String accountUuids = readValue(mDb, "accountUuids")-->Line_7 $$ if (accountUuids != null && accountUuids.length() != 0) [ FD ]
Line_7 $$ if (accountUuids != null && accountUuids.length() != 0) -->Line_8 $$ String[] uuids = accountUuids.split(",")[ CD ]
Line_8 $$ String[] uuids = accountUuids.split(",")-->Line_8 $$ String[] uuids = accountUuids.split(",")[ CD ]
Line_6 $$ String accountUuids = readValue(mDb, "accountUuids")-->Line_8 $$ String[] uuids = accountUuids.split(",")[ FD ]
Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))-->Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))[ FD ]
Line_12 $$ String transportUriStr = Base64.decode(readValue(mDb, uuid + ".transportUri"))-->Line_12 $$ String transportUriStr = Base64.decode(readValue(mDb, uuid + ".transportUri"))[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_12 $$ String transportUriStr = Base64.decode(readValue(mDb, uuid + ".transportUri"))[ FD ]
Line_12 $$ String transportUriStr = Base64.decode(readValue(mDb, uuid + ".transportUri"))-->Line_15 $$ if (transportUriStr != null) [ FD ]
Line_15 $$ if (transportUriStr != null) -->Line_16 $$ String[] userInfoParts = uri.getUserInfo().split(":")[ CD ]
Line_16 $$ String[] userInfoParts = uri.getUserInfo().split(":")-->Line_16 $$ String[] userInfoParts = uri.getUserInfo().split(":")[ CD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_16 $$ String[] userInfoParts = uri.getUserInfo().split(":")[ FD ]
Line_15 $$ if (transportUriStr != null) -->Line_17 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])[ CD ]
Line_17 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])-->Line_17 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])[ CD ]
Line_15 $$ if (transportUriStr != null) -->Line_18 $$ String passwordEnc = ""[ CD ]
Line_15 $$ if (transportUriStr != null) -->Line_19 $$ String authType = ""[ CD ]
Line_15 $$ if (transportUriStr != null) -->Line_20 $$ if (userInfoParts.length > 1) [ CD ]
Line_20 $$ if (userInfoParts.length > 1) -->Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ CD ]
Line_18 $$ String passwordEnc = ""-->Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_15 $$ if (transportUriStr != null) -->Line_23 $$ if (userInfoParts.length > 2) [ CD ]
Line_23 $$ if (userInfoParts.length > 2) -->Line_24 $$ authType = ":" + userInfoParts[2][ CD ]
Line_19 $$ String authType = ""-->Line_24 $$ authType = ":" + userInfoParts[2][ FD ]
Line_24 $$ authType = ":" + userInfoParts[2]-->Line_24 $$ authType = ":" + userInfoParts[2][ FD ]
Line_15 $$ if (transportUriStr != null) -->Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType[ CD ]
Line_14 $$ String newUserInfo = null-->Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType[ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType[ FD ]
Line_19 $$ String authType = ""-->Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType[ FD ]
Line_24 $$ authType = ":" + userInfoParts[2]-->Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType[ FD ]
Line_14 $$ String newUserInfo = null-->Line_28 $$ if (newUserInfo != null) [ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_28 $$ if (newUserInfo != null) [ FD ]
Line_28 $$ if (newUserInfo != null) -->Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ CD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_28 $$ if (newUserInfo != null) -->Line_30 $$ String newTransportUriStr = Base64.encode(newUri.toString())[ CD ]
Line_30 $$ String newTransportUriStr = Base64.encode(newUri.toString())-->Line_30 $$ String newTransportUriStr = Base64.encode(newUri.toString())[ CD ]
Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_30 $$ String newTransportUriStr = Base64.encode(newUri.toString())[ FD ]
Line_28 $$ if (newUserInfo != null) -->Line_31 $$ writeValue(mDb, uuid + ".transportUri", newTransportUriStr)[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_31 $$ writeValue(mDb, uuid + ".transportUri", newTransportUriStr)[ FD ]
Line_30 $$ String newTransportUriStr = Base64.encode(newUri.toString())-->Line_31 $$ writeValue(mDb, uuid + ".transportUri", newTransportUriStr)[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_33 $$ uri = new URI(storeUriStr)[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_33 $$ uri = new URI(storeUriStr)[ FD ]
Line_14 $$ String newUserInfo = null-->Line_34 $$ newUserInfo = null[ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_34 $$ newUserInfo = null[ FD ]
Line_34 $$ newUserInfo = null-->Line_34 $$ newUserInfo = null[ FD ]
Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))-->Line_35 $$ if (storeUriStr.startsWith("imap")) [ FD ]
Line_35 $$ if (storeUriStr.startsWith("imap")) -->Line_35 $$ if (storeUriStr.startsWith("imap")) [ CD ]
Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))-->Line_35 $$ if (storeUriStr.startsWith("imap")) [ FD ]
Line_35 $$ if (storeUriStr.startsWith("imap")) -->Line_36 $$ String[] userInfoParts = uri.getUserInfo().split(":")[ CD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_36 $$ String[] userInfoParts = uri.getUserInfo().split(":")[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_36 $$ String[] userInfoParts = uri.getUserInfo().split(":")[ FD ]
Line_35 $$ if (storeUriStr.startsWith("imap")) -->Line_37 $$ if (userInfoParts.length == 2) [ CD ]
Line_37 $$ if (userInfoParts.length == 2) -->Line_38 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])[ CD ]
Line_37 $$ if (userInfoParts.length == 2) -->Line_39 $$ String passwordEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ CD ]
Line_37 $$ if (userInfoParts.length == 2) -->Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc[ CD ]
Line_14 $$ String newUserInfo = null-->Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc[ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc[ FD ]
Line_34 $$ newUserInfo = null-->Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc[ FD ]
Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc-->Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc[ FD ]
Line_18 $$ String passwordEnc = ""-->Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc[ FD ]
Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc[ FD ]
Line_37 $$ if (userInfoParts.length == 2) -->Line_43 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ CD ]
Line_37 $$ if (userInfoParts.length == 2) -->Line_44 $$ String passwordEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[2])[ CD ]
Line_37 $$ if (userInfoParts.length == 2) -->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ CD ]
Line_14 $$ String newUserInfo = null-->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ FD ]
Line_34 $$ newUserInfo = null-->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ FD ]
Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc-->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ FD ]
Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc-->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ FD ]
Line_18 $$ String passwordEnc = ""-->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ FD ]
Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc[ FD ]
Line_35 $$ if (storeUriStr.startsWith("imap")) -->Line_47 $$ if (storeUriStr.startsWith("pop3")) [ CD ]
Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))-->Line_47 $$ if (storeUriStr.startsWith("pop3")) [ FD ]
Line_47 $$ if (storeUriStr.startsWith("pop3")) -->Line_47 $$ if (storeUriStr.startsWith("pop3")) [ CD ]
Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))-->Line_47 $$ if (storeUriStr.startsWith("pop3")) [ FD ]
Line_47 $$ if (storeUriStr.startsWith("pop3")) -->Line_48 $$ String[] userInfoParts = uri.getUserInfo().split(":", 2)[ CD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_48 $$ String[] userInfoParts = uri.getUserInfo().split(":", 2)[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_48 $$ String[] userInfoParts = uri.getUserInfo().split(":", 2)[ FD ]
Line_47 $$ if (storeUriStr.startsWith("pop3")) -->Line_49 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])[ CD ]
Line_47 $$ if (storeUriStr.startsWith("pop3")) -->Line_51 $$ if (userInfoParts.length > 1) [ CD ]
Line_51 $$ if (userInfoParts.length > 1) -->Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ CD ]
Line_18 $$ String passwordEnc = ""-->Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_47 $$ if (storeUriStr.startsWith("pop3")) -->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ CD ]
Line_14 $$ String newUserInfo = null-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_34 $$ newUserInfo = null-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_54 $$ newUserInfo = usernameEnc + passwordEnc-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_17 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_18 $$ String passwordEnc = ""-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_54 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_47 $$ if (storeUriStr.startsWith("pop3")) -->Line_55 $$ if (storeUriStr.startsWith("webdav")) [ CD ]
Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))-->Line_55 $$ if (storeUriStr.startsWith("webdav")) [ FD ]
Line_55 $$ if (storeUriStr.startsWith("webdav")) -->Line_55 $$ if (storeUriStr.startsWith("webdav")) [ CD ]
Line_11 $$ String storeUriStr = Base64.decode(readValue(mDb, uuid + ".storeUri"))-->Line_55 $$ if (storeUriStr.startsWith("webdav")) [ FD ]
Line_55 $$ if (storeUriStr.startsWith("webdav")) -->Line_56 $$ String[] userInfoParts = uri.getUserInfo().split(":", 2)[ CD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_56 $$ String[] userInfoParts = uri.getUserInfo().split(":", 2)[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_56 $$ String[] userInfoParts = uri.getUserInfo().split(":", 2)[ FD ]
Line_55 $$ if (storeUriStr.startsWith("webdav")) -->Line_57 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])[ CD ]
Line_55 $$ if (storeUriStr.startsWith("webdav")) -->Line_59 $$ if (userInfoParts.length > 1) [ CD ]
Line_59 $$ if (userInfoParts.length > 1) -->Line_60 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ CD ]
Line_18 $$ String passwordEnc = ""-->Line_60 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_60 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_60 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_60 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_60 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])[ FD ]
Line_55 $$ if (storeUriStr.startsWith("webdav")) -->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ CD ]
Line_14 $$ String newUserInfo = null-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_34 $$ newUserInfo = null-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_54 $$ newUserInfo = usernameEnc + passwordEnc-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_62 $$ newUserInfo = usernameEnc + passwordEnc-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_17 $$ String usernameEnc = UrlEncodingHelper.encodeUtf8(userInfoParts[0])-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_18 $$ String passwordEnc = ""-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_21 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_52 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_60 $$ passwordEnc = ":" + UrlEncodingHelper.encodeUtf8(userInfoParts[1])-->Line_62 $$ newUserInfo = usernameEnc + passwordEnc[ FD ]
Line_14 $$ String newUserInfo = null-->Line_64 $$ if (newUserInfo != null) [ FD ]
Line_26 $$ newUserInfo = usernameEnc + passwordEnc + authType-->Line_64 $$ if (newUserInfo != null) [ FD ]
Line_34 $$ newUserInfo = null-->Line_64 $$ if (newUserInfo != null) [ FD ]
Line_40 $$ newUserInfo = usernameEnc + ":" + passwordEnc-->Line_64 $$ if (newUserInfo != null) [ FD ]
Line_45 $$ newUserInfo = authType + ":" + usernameEnc + ":" + passwordEnc-->Line_64 $$ if (newUserInfo != null) [ FD ]
Line_54 $$ newUserInfo = usernameEnc + passwordEnc-->Line_64 $$ if (newUserInfo != null) [ FD ]
Line_62 $$ newUserInfo = usernameEnc + passwordEnc-->Line_64 $$ if (newUserInfo != null) [ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_13 $$ URI uri = new URI(transportUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_33 $$ uri = new URI(storeUriStr)-->Line_65 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ FD ]
Line_64 $$ if (newUserInfo != null) -->Line_66 $$ String newStoreUriStr = Base64.encode(newUri.toString())[ CD ]
Line_66 $$ String newStoreUriStr = Base64.encode(newUri.toString())-->Line_66 $$ String newStoreUriStr = Base64.encode(newUri.toString())[ CD ]
Line_29 $$ URI newUri = new URI(uri.getScheme(), newUserInfo, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_66 $$ String newStoreUriStr = Base64.encode(newUri.toString())[ FD ]
Line_64 $$ if (newUserInfo != null) -->Line_67 $$ writeValue(mDb, uuid + ".storeUri", newStoreUriStr)[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_67 $$ writeValue(mDb, uuid + ".storeUri", newStoreUriStr)[ FD ]
Line_66 $$ String newStoreUriStr = Base64.encode(newUri.toString())-->Line_67 $$ writeValue(mDb, uuid + ".storeUri", newStoreUriStr)[ FD ]
Line_4 $$ if (mDb.getVersion() == 1) -->Line_74 $$ mDb.setVersion(DB_VERSION)[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_74 $$ mDb.setVersion(DB_VERSION)[ FD ]
Line_2 $$ public void openDB() -->Line_76 $$ if (mDb.getVersion() != DB_VERSION) [ CD ]
Line_76 $$ if (mDb.getVersion() != DB_VERSION) -->Line_76 $$ if (mDb.getVersion() != DB_VERSION) [ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_76 $$ if (mDb.getVersion() != DB_VERSION) [ FD ]
Line_76 $$ if (mDb.getVersion() != DB_VERSION) -->Line_77 $$ Log.i(K9.LOG_TAG, "Creating Storage database")[ CD ]
Line_76 $$ if (mDb.getVersion() != DB_VERSION) -->Line_78 $$ mDb.execSQL("DROP TABLE IF EXISTS preferences_storage")[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_78 $$ mDb.execSQL("DROP TABLE IF EXISTS preferences_storage")[ FD ]
Line_76 $$ if (mDb.getVersion() != DB_VERSION) -->Line_79 $$ mDb.execSQL("CREATE TABLE preferences_storage " + "(primkey TEXT PRIMARY KEY ON CONFLICT REPLACE, value TEXT)")[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_79 $$ mDb.execSQL("CREATE TABLE preferences_storage " + "(primkey TEXT PRIMARY KEY ON CONFLICT REPLACE, value TEXT)")[ FD ]
Line_76 $$ if (mDb.getVersion() != DB_VERSION) -->Line_81 $$ mDb.setVersion(DB_VERSION)[ CD ]
Line_3 $$ SQLiteDatabase mDb = context.openOrCreateDatabase(DB_NAME, Context.MODE_PRIVATE, null)-->Line_81 $$ mDb.setVersion(DB_VERSION)[ FD ]
