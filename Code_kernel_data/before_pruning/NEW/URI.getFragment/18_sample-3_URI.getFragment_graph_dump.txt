Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void resolve(String uri, URIResolver resolver) [ CD ]
Line_2 $$ public void resolve(String uri, URIResolver resolver) -->Line_3 $$ if (parsed.getPath() != null)[ CD ]
Line_3 $$ if (parsed.getPath() != null)-->Line_4 $$ path += parsed.getPath()[ CD ]
Line_2 $$ public void resolve(String uri, URIResolver resolver) -->Line_5 $$ if (parsed.getQuery() != null)[ CD ]
Line_5 $$ if (parsed.getQuery() != null)-->Line_6 $$ path += parsed.getQuery()[ CD ]
Line_2 $$ public void resolve(String uri, URIResolver resolver) -->Line_7 $$ if (parsed.getFragment() != null)[ CD ]
Line_2 $$ public void resolve(String uri, URIResolver resolver) -->Line_9 $$ int port = parsed.getPort() < 0 ? Address.NULL_PORT : parsed.getPort()[ CD ]
Line_2 $$ public void resolve(String uri, URIResolver resolver) -->Line_10 $$ Address address = new Address(parsed.getScheme(), parsed.getHost(), port)[ CD ]
Line_2 $$ public void resolve(String uri, URIResolver resolver) -->Line_11 $$ return resolver.resolve(address, path)[ CD ]
Line_11 $$ return resolver.resolve(address, path)-->Line_11 $$ return resolver.resolve(address, path)[ CD ]
Line_2 $$ public void resolve(String uri, URIResolver resolver) -->Line_11 $$ return resolver.resolve(address, path)[ FD ]
Line_10 $$ Address address = new Address(parsed.getScheme(), parsed.getHost(), port)-->Line_11 $$ return resolver.resolve(address, path)[ FD ]
