Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) [ CD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_3 $$ String localWorkDir = (job.get(MRFrameworkConfigs.TASK_LOCAL_RESOURCE_DIR))[ CD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_3 $$ String localWorkDir = (job.get(MRFrameworkConfigs.TASK_LOCAL_RESOURCE_DIR))[ FD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_4 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)[ CD ]
Line_4 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)-->Line_4 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)[ CD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_4 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)[ FD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_5 $$ if (cacheArchives != null) [ CD ]
Line_4 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)-->Line_5 $$ if (cacheArchives != null) [ FD ]
Line_5 $$ if (cacheArchives != null) -->Line_6 $$ List<String> localArchives = new ArrayList<String>()[ CD ]
Line_5 $$ if (cacheArchives != null) -->Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) [ CD ]
Line_5 $$ if (cacheArchives != null) -->Line_5 $$ if (cacheArchives != null) [ CD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) [ CD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) [ CD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) [ FD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_8 $$ URI u = cacheArchives[i][ CD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_9 $$ Path p = new Path(u)[ CD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ CD ]
Line_8 $$ URI u = cacheArchives[i]-->Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_9 $$ Path p = new Path(u)-->Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_8 $$ URI u = cacheArchives[i]-->Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_12 $$ String linkName = name.toUri().getPath()[ CD ]
Line_12 $$ String linkName = name.toUri().getPath()-->Line_12 $$ String linkName = name.toUri().getPath()[ CD ]
Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_12 $$ String linkName = name.toUri().getPath()[ FD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_13 $$ localArchives.add(new Path(localWorkDir, linkName).toUri().getPath())[ CD ]
Line_6 $$ List<String> localArchives = new ArrayList<String>()-->Line_13 $$ localArchives.add(new Path(localWorkDir, linkName).toUri().getPath())[ FD ]
Line_5 $$ if (cacheArchives != null) -->Line_15 $$ if (!localArchives.isEmpty()) [ CD ]
Line_15 $$ if (!localArchives.isEmpty()) -->Line_15 $$ if (!localArchives.isEmpty()) [ CD ]
Line_15 $$ if (!localArchives.isEmpty()) -->Line_15 $$ if (!localArchives.isEmpty()) [ CD ]
Line_6 $$ List<String> localArchives = new ArrayList<String>()-->Line_15 $$ if (!localArchives.isEmpty()) [ FD ]
Line_15 $$ if (!localArchives.isEmpty()) -->Line_16 $$ job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils.join(localArchives, ','))[ CD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_16 $$ job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils.join(localArchives, ','))[ FD ]
Line_6 $$ List<String> localArchives = new ArrayList<String>()-->Line_16 $$ job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils.join(localArchives, ','))[ FD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_20 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)[ CD ]
Line_20 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)-->Line_20 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)[ CD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_20 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)[ FD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_21 $$ if (cacheFiles != null) [ CD ]
Line_20 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)-->Line_21 $$ if (cacheFiles != null) [ FD ]
Line_21 $$ if (cacheFiles != null) -->Line_22 $$ List<String> localFiles = new ArrayList<String>()[ CD ]
Line_21 $$ if (cacheFiles != null) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ CD ]
Line_21 $$ if (cacheFiles != null) -->Line_21 $$ if (cacheFiles != null) [ CD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ CD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ CD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_24 $$ URI u = cacheFiles[i][ CD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_25 $$ Path p = new Path(u)[ CD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ CD ]
Line_24 $$ URI u = cacheFiles[i]-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_8 $$ URI u = cacheArchives[i]-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_25 $$ Path p = new Path(u)-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_9 $$ Path p = new Path(u)-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_24 $$ URI u = cacheFiles[i]-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_8 $$ URI u = cacheArchives[i]-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_28 $$ String linkName = name.toUri().getPath()[ CD ]
Line_28 $$ String linkName = name.toUri().getPath()-->Line_28 $$ String linkName = name.toUri().getPath()[ CD ]
Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_28 $$ String linkName = name.toUri().getPath()[ FD ]
Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_28 $$ String linkName = name.toUri().getPath()[ FD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_29 $$ localFiles.add(new Path(localWorkDir, linkName).toUri().getPath())[ CD ]
Line_22 $$ List<String> localFiles = new ArrayList<String>()-->Line_29 $$ localFiles.add(new Path(localWorkDir, linkName).toUri().getPath())[ FD ]
Line_21 $$ if (cacheFiles != null) -->Line_31 $$ if (!localFiles.isEmpty()) [ CD ]
Line_31 $$ if (!localFiles.isEmpty()) -->Line_31 $$ if (!localFiles.isEmpty()) [ CD ]
Line_31 $$ if (!localFiles.isEmpty()) -->Line_31 $$ if (!localFiles.isEmpty()) [ CD ]
Line_22 $$ List<String> localFiles = new ArrayList<String>()-->Line_31 $$ if (!localFiles.isEmpty()) [ FD ]
Line_31 $$ if (!localFiles.isEmpty()) -->Line_32 $$ job.set(MRJobConfig.CACHE_LOCALFILES, StringUtils.join(localFiles, ','))[ CD ]
Line_2 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_32 $$ job.set(MRJobConfig.CACHE_LOCALFILES, StringUtils.join(localFiles, ','))[ FD ]
Line_22 $$ List<String> localFiles = new ArrayList<String>()-->Line_32 $$ job.set(MRJobConfig.CACHE_LOCALFILES, StringUtils.join(localFiles, ','))[ FD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) [ FD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) [ FD ]
Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_7 $$ for (int i = 0; i < cacheArchives.length; ++i) [ FD ]
Line_8 $$ URI u = cacheArchives[i]-->Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_9 $$ Path p = new Path(u)-->Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_8 $$ URI u = cacheArchives[i]-->Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_10 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_12 $$ String linkName = name.toUri().getPath()[ FD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_23 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_24 $$ URI u = cacheFiles[i]-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_25 $$ Path p = new Path(u)-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_24 $$ URI u = cacheFiles[i]-->Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_26 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_28 $$ String linkName = name.toUri().getPath()[ FD ]
