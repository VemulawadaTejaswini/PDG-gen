Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testRelativePathOnQuery() [ CD ]
Line_2 $$ public void testRelativePathOnQuery() -->Line_3 $$ URI base = new URI("http://host/file?query/x")[ CD ]
Line_2 $$ public void testRelativePathOnQuery() -->Line_4 $$ URI uri = base.resolve("another")[ CD ]
Line_4 $$ URI uri = base.resolve("another")-->Line_4 $$ URI uri = base.resolve("another")[ CD ]
Line_3 $$ URI base = new URI("http://host/file?query/x")-->Line_4 $$ URI uri = base.resolve("another")[ FD ]
Line_2 $$ public void testRelativePathOnQuery() -->Line_5 $$ assertEquals("http://host/another", uri.toString())[ CD ]
Line_4 $$ URI uri = base.resolve("another")-->Line_5 $$ assertEquals("http://host/another", uri.toString())[ FD ]
Line_2 $$ public void testRelativePathOnQuery() -->Line_6 $$ assertEquals("/another", uri.getPath())[ CD ]
Line_4 $$ URI uri = base.resolve("another")-->Line_6 $$ assertEquals("/another", uri.getPath())[ FD ]
Line_2 $$ public void testRelativePathOnQuery() -->Line_7 $$ assertEquals(null, uri.getQuery())[ CD ]
Line_4 $$ URI uri = base.resolve("another")-->Line_7 $$ assertEquals(null, uri.getQuery())[ FD ]
Line_2 $$ public void testRelativePathOnQuery() -->Line_8 $$ assertEquals(null, uri.getFragment())[ CD ]
Line_4 $$ URI uri = base.resolve("another")-->Line_8 $$ assertEquals(null, uri.getFragment())[ FD ]
