Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void doGetScriptSource(URI scriptUri) [ CD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)[ CD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)[ CD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_4 $$ String replacementScheme = SecurityUtil.isTransportSecure(remoteUri.getScheme()) ? "https" : "http"[ CD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_4 $$ String replacementScheme = SecurityUtil.isTransportSecure(remoteUri.getScheme()) ? "https" : "http"[ FD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ CD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_6 $$ LOG.error("Failed to copy the RHQ server download URI: " + remoteUri + " to the " + replacementScheme + " scheme.")[ CD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_7 $$ URL downloadUrl = remoteUri.toURL()[ CD ]
Line_7 $$ URL downloadUrl = remoteUri.toURL()-->Line_7 $$ URL downloadUrl = remoteUri.toURL()[ CD ]
Line_3 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_7 $$ URL downloadUrl = remoteUri.toURL()[ FD ]
Line_5 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_7 $$ URL downloadUrl = remoteUri.toURL()[ FD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_8 $$ return new InputStreamReader(downloadUrl.openStream())[ CD ]
Line_7 $$ URL downloadUrl = remoteUri.toURL()-->Line_8 $$ return new InputStreamReader(downloadUrl.openStream())[ FD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_9 $$ LOG.debug("Failed to download the script from the RHQ server using URL: " + remoteUri, e)[ CD ]
Line_2 $$ public void doGetScriptSource(URI scriptUri) -->Line_10 $$ LOG.debug("Failed to download the script from the RHQ server using URL: " + remoteUri, e)[ CD ]
