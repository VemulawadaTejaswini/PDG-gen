Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void stripLastComponent(String input) [ CD ]
Line_2 $$ public void stripLastComponent(String input) -->Line_3 $$ URI uri = new URI(input)[ CD ]
Line_2 $$ public void stripLastComponent(String input) -->Line_4 $$ if (uri.getFragment() != null) [ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_4 $$ if (uri.getFragment() != null) [ FD ]
Line_4 $$ if (uri.getFragment() != null) -->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ CD ]
Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()-->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_5 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ FD ]
Line_4 $$ if (uri.getFragment() != null) -->Line_7 $$ if (uri.getQuery() != null) [ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_7 $$ if (uri.getQuery() != null) [ FD ]
Line_7 $$ if (uri.getQuery() != null) -->Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ CD ]
Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()-->Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_8 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ FD ]
Line_7 $$ if (uri.getQuery() != null) -->Line_10 $$ if (uri.getPath() != null) [ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_10 $$ if (uri.getPath() != null) [ FD ]
Line_10 $$ if (uri.getPath() != null) -->Line_11 $$ String currPath = uri.getPath()[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_11 $$ String currPath = uri.getPath()[ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_11 $$ String currPath = uri.getPath()[ FD ]
Line_10 $$ if (uri.getPath() != null) -->Line_12 $$ if (currPath.endsWith("/")) [ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_12 $$ if (currPath.endsWith("/")) [ FD ]
Line_12 $$ if (currPath.endsWith("/")) -->Line_12 $$ if (currPath.endsWith("/")) [ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_12 $$ if (currPath.endsWith("/")) [ FD ]
Line_12 $$ if (currPath.endsWith("/")) -->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_11 $$ String currPath = uri.getPath()-->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_12 $$ if (currPath.endsWith("/")) -->Line_14 $$ if (currPath.length() == 0)[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_14 $$ if (currPath.length() == 0)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_14 $$ if (currPath.length() == 0)[ FD ]
Line_14 $$ if (currPath.length() == 0)-->Line_15 $$ currPath = null[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_15 $$ currPath = null[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_15 $$ currPath = null[ FD ]
Line_15 $$ currPath = null-->Line_15 $$ currPath = null[ FD ]
Line_12 $$ if (currPath.endsWith("/")) -->Line_16 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ CD ]
Line_16 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()-->Line_16 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_16 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_16 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_16 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_16 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_12 $$ if (currPath.endsWith("/")) -->Line_18 $$ if (currPath.contains("/")) [ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_18 $$ if (currPath.contains("/")) [ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_18 $$ if (currPath.contains("/")) [ FD ]
Line_15 $$ currPath = null-->Line_18 $$ if (currPath.contains("/")) [ FD ]
Line_18 $$ if (currPath.contains("/")) -->Line_18 $$ if (currPath.contains("/")) [ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_18 $$ if (currPath.contains("/")) [ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_18 $$ if (currPath.contains("/")) [ FD ]
Line_15 $$ currPath = null-->Line_18 $$ if (currPath.contains("/")) [ FD ]
Line_18 $$ if (currPath.contains("/")) -->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_15 $$ currPath = null-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_15 $$ currPath = null-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_11 $$ String currPath = uri.getPath()-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_15 $$ currPath = null-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_18 $$ if (currPath.contains("/")) -->Line_20 $$ if (currPath.length() == 0)[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_20 $$ if (currPath.length() == 0)[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_20 $$ if (currPath.length() == 0)[ FD ]
Line_15 $$ currPath = null-->Line_20 $$ if (currPath.length() == 0)[ FD ]
Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_20 $$ if (currPath.length() == 0)[ FD ]
Line_20 $$ if (currPath.length() == 0)-->Line_21 $$ currPath = null[ CD ]
Line_11 $$ String currPath = uri.getPath()-->Line_21 $$ currPath = null[ FD ]
Line_13 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_21 $$ currPath = null[ FD ]
Line_15 $$ currPath = null-->Line_21 $$ currPath = null[ FD ]
Line_19 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_21 $$ currPath = null[ FD ]
Line_21 $$ currPath = null-->Line_21 $$ currPath = null[ FD ]
Line_18 $$ if (currPath.contains("/")) -->Line_22 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ CD ]
Line_22 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()-->Line_22 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ CD ]
Line_3 $$ URI uri = new URI(input)-->Line_22 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_22 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_22 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_3 $$ URI uri = new URI(input)-->Line_22 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ FD ]
Line_18 $$ if (currPath.contains("/")) -->Line_25 $$ return null[ CD ]
Line_10 $$ if (uri.getPath() != null) -->Line_28 $$ return null[ CD ]
