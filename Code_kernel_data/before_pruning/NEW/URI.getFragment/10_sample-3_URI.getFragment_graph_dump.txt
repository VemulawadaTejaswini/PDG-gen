Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) [ CD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_3 $$ if ((uris.length != timestamps.length) || (uris.length != sizes.length) || (uris.length != visibilities.length)) [ CD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_12 $$ for (int i = 0; i < uris.length; ++i) [ CD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) [ CD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_12 $$ for (int i = 0; i < uris.length; ++i) [ CD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_12 $$ for (int i = 0; i < uris.length; ++i) [ CD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_12 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_13 $$ URI u = uris[i][ CD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_14 $$ Path p = new Path(u)[ CD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)[ CD ]
Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)[ CD ]
Line_14 $$ Path p = new Path(u)-->Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)[ FD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)[ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ CD ]
Line_14 $$ Path p = new Path(u)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ CD ]
Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_14 $$ Path p = new Path(u)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ CD ]
Line_13 $$ URI u = uris[i]-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_14 $$ Path p = new Path(u)-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_13 $$ URI u = uris[i]-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_21 $$ if (name.isAbsolute()) [ CD ]
Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_21 $$ if (name.isAbsolute()) [ FD ]
Line_21 $$ if (name.isAbsolute()) -->Line_21 $$ if (name.isAbsolute()) [ CD ]
Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_21 $$ if (name.isAbsolute()) [ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_24 $$ String linkName = name.toUri().getPath()[ CD ]
Line_24 $$ String linkName = name.toUri().getPath()-->Line_24 $$ String linkName = name.toUri().getPath()[ CD ]
Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_24 $$ String linkName = name.toUri().getPath()[ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_25 $$ LocalResource orig = localResources.get(linkName)[ CD ]
Line_25 $$ LocalResource orig = localResources.get(linkName)-->Line_25 $$ LocalResource orig = localResources.get(linkName)[ CD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_25 $$ LocalResource orig = localResources.get(linkName)[ FD ]
Line_24 $$ String linkName = name.toUri().getPath()-->Line_25 $$ LocalResource orig = localResources.get(linkName)[ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ CD ]
Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) -->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ CD ]
Line_25 $$ LocalResource orig = localResources.get(linkName)-->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ FD ]
Line_14 $$ Path p = new Path(u)-->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ FD ]
Line_25 $$ LocalResource orig = localResources.get(linkName)-->Line_28 $$ throw new InvalidJobConfException(getResourceDescription(orig.getType()) + orig.getResource() + " conflicts with " + getResourceDescription(type) + u)[ FD ]
Line_25 $$ LocalResource orig = localResources.get(linkName)-->Line_28 $$ throw new InvalidJobConfException(getResourceDescription(orig.getType()) + orig.getResource() + " conflicts with " + getResourceDescription(type) + u)[ FD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_28 $$ throw new InvalidJobConfException(getResourceDescription(orig.getType()) + orig.getResource() + " conflicts with " + getResourceDescription(type) + u)[ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ CD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_24 $$ String linkName = name.toUri().getPath()-->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_2 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_14 $$ Path p = new Path(u)-->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_12 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_12 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_12 $$ for (int i = 0; i < uris.length; ++i) -->Line_12 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_14 $$ Path p = new Path(u)-->Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)[ FD ]
Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_14 $$ Path p = new Path(u)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_15 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_13 $$ URI u = uris[i]-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_14 $$ Path p = new Path(u)-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_13 $$ URI u = uris[i]-->Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ FD ]
Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_21 $$ if (name.isAbsolute()) [ FD ]
Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_21 $$ if (name.isAbsolute()) [ FD ]
Line_18 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_24 $$ String linkName = name.toUri().getPath()[ FD ]
Line_24 $$ String linkName = name.toUri().getPath()-->Line_25 $$ LocalResource orig = localResources.get(linkName)[ FD ]
Line_25 $$ LocalResource orig = localResources.get(linkName)-->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ FD ]
Line_14 $$ Path p = new Path(u)-->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_26 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ FD ]
Line_25 $$ LocalResource orig = localResources.get(linkName)-->Line_28 $$ throw new InvalidJobConfException(getResourceDescription(orig.getType()) + orig.getResource() + " conflicts with " + getResourceDescription(type) + u)[ FD ]
Line_25 $$ LocalResource orig = localResources.get(linkName)-->Line_28 $$ throw new InvalidJobConfException(getResourceDescription(orig.getType()) + orig.getResource() + " conflicts with " + getResourceDescription(type) + u)[ FD ]
Line_24 $$ String linkName = name.toUri().getPath()-->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_14 $$ Path p = new Path(u)-->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_16 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_32 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
