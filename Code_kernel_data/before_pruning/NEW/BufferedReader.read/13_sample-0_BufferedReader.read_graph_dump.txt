Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getOutput(int limitBytes) [ CD ]
Line_2 $$ public void getOutput(int limitBytes) -->Line_3 $$ BufferedReader stdout = new BufferedReader(new InputStreamReader(objdump.getInputStream()))[ CD ]
Line_2 $$ public void getOutput(int limitBytes) -->Line_5 $$ while ((len = stdout.read(buf, 0, buf.length)) != -1) [ CD ]
Line_2 $$ public void getOutput(int limitBytes) -->Line_2 $$ public void getOutput(int limitBytes) [ CD ]
Line_3 $$ BufferedReader stdout = new BufferedReader(new InputStreamReader(objdump.getInputStream()))-->Line_5 $$ while ((len = stdout.read(buf, 0, buf.length)) != -1) [ FD ]
Line_5 $$ while ((len = stdout.read(buf, 0, buf.length)) != -1) -->Line_6 $$ if (limitBytes > 0 && buffer.length() + len >= limitBytes) [ CD ]
Line_6 $$ if (limitBytes > 0 && buffer.length() + len >= limitBytes) -->Line_7 $$ buffer.append(buf, 0, Math.min(len, limitBytes - buffer.length()))[ CD ]
Line_5 $$ while ((len = stdout.read(buf, 0, buf.length)) != -1) -->Line_10 $$ buffer.append(buf, 0, len)[ CD ]
Line_2 $$ public void getOutput(int limitBytes) -->Line_12 $$ stdout.close()[ CD ]
Line_3 $$ BufferedReader stdout = new BufferedReader(new InputStreamReader(objdump.getInputStream()))-->Line_12 $$ stdout.close()[ FD ]
Line_2 $$ public void getOutput(int limitBytes) -->Line_13 $$ return buffer.toString().getBytes()[ CD ]
Line_13 $$ return buffer.toString().getBytes()-->Line_13 $$ return buffer.toString().getBytes()[ CD ]
