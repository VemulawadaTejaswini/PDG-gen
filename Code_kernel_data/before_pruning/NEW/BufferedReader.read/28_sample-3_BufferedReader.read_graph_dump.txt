Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) [ CD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_3 $$ while (reader.read(tmp) > 0) [ CD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) [ CD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_3 $$ while (reader.read(tmp) > 0) [ FD ]
Line_3 $$ while (reader.read(tmp) > 0) -->Line_4 $$ temp = Character.toString(tmp[0])[ CD ]
Line_3 $$ while (reader.read(tmp) > 0) -->Line_5 $$ if (temp.equals("/")) [ CD ]
Line_5 $$ if (temp.equals("/")) -->Line_5 $$ if (temp.equals("/")) [ CD ]
Line_5 $$ if (temp.equals("/")) -->Line_8 $$ sb.append(temp)[ CD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_11 $$ String rawNumberOfVariables = sb.toString()[ CD ]
Line_11 $$ String rawNumberOfVariables = sb.toString()-->Line_11 $$ String rawNumberOfVariables = sb.toString()[ CD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_12 $$ int rawLength = rawNumberOfVariables.length()[ CD ]
Line_12 $$ int rawLength = rawNumberOfVariables.length()-->Line_12 $$ int rawLength = rawNumberOfVariables.length()[ CD ]
Line_11 $$ String rawNumberOfVariables = sb.toString()-->Line_12 $$ int rawLength = rawNumberOfVariables.length()[ FD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")[ CD ]
Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")[ CD ]
Line_11 $$ String rawNumberOfVariables = sb.toString()-->Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")[ FD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_14 $$ if ((numberOfVariables.equals("")) && (numberOfVariables.length() == rawLength)) [ CD ]
Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_14 $$ if ((numberOfVariables.equals("")) && (numberOfVariables.length() == rawLength)) [ FD ]
Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_14 $$ if ((numberOfVariables.equals("")) && (numberOfVariables.length() == rawLength)) [ FD ]
Line_14 $$ if ((numberOfVariables.equals("")) && (numberOfVariables.length() == rawLength)) -->Line_15 $$ numberOfVariables = "0"[ CD ]
Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_15 $$ numberOfVariables = "0"[ FD ]
Line_15 $$ numberOfVariables = "0"-->Line_15 $$ numberOfVariables = "0"[ FD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_17 $$ varQnty = Integer.valueOf(numberOfVariables, 30)[ CD ]
Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_17 $$ varQnty = Integer.valueOf(numberOfVariables, 30)[ FD ]
Line_15 $$ numberOfVariables = "0"-->Line_17 $$ varQnty = Integer.valueOf(numberOfVariables, 30)[ FD ]
Line_2 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_18 $$ dataTable.setVarQuantity(Long.valueOf(numberOfVariables, 30))[ CD ]
Line_13 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_18 $$ dataTable.setVarQuantity(Long.valueOf(numberOfVariables, 30))[ FD ]
Line_15 $$ numberOfVariables = "0"-->Line_18 $$ dataTable.setVarQuantity(Long.valueOf(numberOfVariables, 30))[ FD ]
