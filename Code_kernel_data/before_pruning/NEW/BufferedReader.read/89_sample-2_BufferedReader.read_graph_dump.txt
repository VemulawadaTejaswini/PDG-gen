Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void successTest(String className, String expectedOutput) [ CD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_3 $$ Runtime rt = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime rt = Runtime.getRuntime()-->Line_3 $$ Runtime rt = Runtime.getRuntime()[ CD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_4 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)[ CD ]
Line_4 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_4 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)[ CD ]
Line_3 $$ Runtime rt = Runtime.getRuntime()-->Line_4 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)[ FD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_5 $$ InputStreamReader esr = new InputStreamReader(p.getErrorStream())[ CD ]
Line_4 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_5 $$ InputStreamReader esr = new InputStreamReader(p.getErrorStream())[ FD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_6 $$ BufferedReader ebr = new BufferedReader(esr)[ CD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_7 $$ String line = ebr.readLine()[ CD ]
Line_7 $$ String line = ebr.readLine()-->Line_7 $$ String line = ebr.readLine()[ CD ]
Line_6 $$ BufferedReader ebr = new BufferedReader(esr)-->Line_7 $$ String line = ebr.readLine()[ FD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_8 $$ if (line != null) [ CD ]
Line_7 $$ String line = ebr.readLine()-->Line_8 $$ if (line != null) [ FD ]
Line_8 $$ if (line != null) -->Line_9 $$ fail(line)[ CD ]
Line_7 $$ String line = ebr.readLine()-->Line_9 $$ fail(line)[ FD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_11 $$ InputStreamReader isr = new InputStreamReader(p.getInputStream())[ CD ]
Line_4 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_11 $$ InputStreamReader isr = new InputStreamReader(p.getInputStream())[ FD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_12 $$ BufferedReader br = new BufferedReader(isr)[ CD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_13 $$ assertEquals(expectedOutput, br.readLine())[ CD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_13 $$ assertEquals(expectedOutput, br.readLine())[ FD ]
Line_12 $$ BufferedReader br = new BufferedReader(isr)-->Line_13 $$ assertEquals(expectedOutput, br.readLine())[ FD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_14 $$ assertEquals(-1, br.read())[ CD ]
Line_12 $$ BufferedReader br = new BufferedReader(isr)-->Line_14 $$ assertEquals(-1, br.read())[ FD ]
Line_2 $$ public void successTest(String className, String expectedOutput) -->Line_15 $$ assertEquals(0, p.waitFor())[ CD ]
Line_4 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_15 $$ assertEquals(0, p.waitFor())[ FD ]
