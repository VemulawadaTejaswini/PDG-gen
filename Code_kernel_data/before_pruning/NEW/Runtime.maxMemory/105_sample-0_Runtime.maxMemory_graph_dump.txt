Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void reportMemory() [ CD ]
Line_2 $$ public void reportMemory() -->Line_3 $$ long maxMemory = runtime.maxMemory()[ CD ]
Line_3 $$ long maxMemory = runtime.maxMemory()-->Line_3 $$ long maxMemory = runtime.maxMemory()[ CD ]
Line_2 $$ public void reportMemory() -->Line_4 $$ long allocatedMemory = runtime.totalMemory()[ CD ]
Line_4 $$ long allocatedMemory = runtime.totalMemory()-->Line_4 $$ long allocatedMemory = runtime.totalMemory()[ CD ]
Line_2 $$ public void reportMemory() -->Line_5 $$ long freeMemory = runtime.freeMemory()[ CD ]
Line_5 $$ long freeMemory = runtime.freeMemory()-->Line_5 $$ long freeMemory = runtime.freeMemory()[ CD ]
Line_2 $$ public void reportMemory() -->Line_6 $$ sb.append("allocated memory: " + format.format(allocatedMemory / (1024 * 1024)) + "M\n")[ CD ]
Line_2 $$ public void reportMemory() -->Line_7 $$ sb.append("--------------\n")[ CD ]
Line_2 $$ public void reportMemory() -->Line_8 $$ sb.append("[ Xmx: " + format.format(maxMemory / (1024 * 1024)) + "M ]\n")[ CD ]
Line_2 $$ public void reportMemory() -->Line_9 $$ return sb.toString()[ CD ]
Line_9 $$ return sb.toString()-->Line_9 $$ return sb.toString()[ CD ]
