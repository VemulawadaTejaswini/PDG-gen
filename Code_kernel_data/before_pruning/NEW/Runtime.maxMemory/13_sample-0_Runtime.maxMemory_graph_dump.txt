Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void initialize(Configuration config) [ CD ]
Line_2 $$ public void initialize(Configuration config) -->Line_3 $$ long expirationTime = configuration.get(DB_CACHE_TIME)[ CD ]
Line_3 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_3 $$ long expirationTime = configuration.get(DB_CACHE_TIME)[ CD ]
Line_2 $$ public void initialize(Configuration config) -->Line_4 $$ Preconditions.checkArgument(expirationTime >= 0, "Invalid cache expiration time: %s", expirationTime)[ CD ]
Line_3 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_4 $$ Preconditions.checkArgument(expirationTime >= 0, "Invalid cache expiration time: %s", expirationTime)[ FD ]
Line_2 $$ public void initialize(Configuration config) -->Line_5 $$ if (expirationTime == 0)[ CD ]
Line_3 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_5 $$ if (expirationTime == 0)[ FD ]
Line_5 $$ if (expirationTime == 0)-->Line_5 $$ expirationTime = ETERNAL_CACHE_EXPIRATION[ CD ]
Line_3 $$ long expirationTime = configuration.get(DB_CACHE_TIME)-->Line_5 $$ expirationTime = ETERNAL_CACHE_EXPIRATION[ FD ]
Line_5 $$ expirationTime = ETERNAL_CACHE_EXPIRATION-->Line_5 $$ expirationTime = ETERNAL_CACHE_EXPIRATION[ FD ]
Line_2 $$ public void initialize(Configuration config) -->Line_6 $$ double cachesize = configuration.get(DB_CACHE_SIZE)[ CD ]
Line_6 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_6 $$ double cachesize = configuration.get(DB_CACHE_SIZE)[ CD ]
Line_2 $$ public void initialize(Configuration config) -->Line_7 $$ Preconditions.checkArgument(cachesize > 0.0, "Invalid cache size specified: %s", cachesize)[ CD ]
Line_6 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_7 $$ Preconditions.checkArgument(cachesize > 0.0, "Invalid cache size specified: %s", cachesize)[ FD ]
Line_2 $$ public void initialize(Configuration config) -->Line_8 $$ if (cachesize < 1.0) [ CD ]
Line_6 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_8 $$ if (cachesize < 1.0) [ FD ]
Line_8 $$ if (cachesize < 1.0) -->Line_9 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_9 $$ Runtime runtime = Runtime.getRuntime()-->Line_9 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_9 $$ Runtime runtime = Runtime.getRuntime()-->Line_10 $$ cacheSizeBytes = (long) ((runtime.maxMemory() - (runtime.totalMemory() - runtime.freeMemory())) * cachesize)[ FD ]
Line_9 $$ Runtime runtime = Runtime.getRuntime()-->Line_10 $$ cacheSizeBytes = (long) ((runtime.maxMemory() - (runtime.totalMemory() - runtime.freeMemory())) * cachesize)[ FD ]
Line_9 $$ Runtime runtime = Runtime.getRuntime()-->Line_10 $$ cacheSizeBytes = (long) ((runtime.maxMemory() - (runtime.totalMemory() - runtime.freeMemory())) * cachesize)[ FD ]
Line_8 $$ if (cachesize < 1.0) -->Line_12 $$ Preconditions.checkArgument(cachesize > 1000, "Cache size is too small: %s", cachesize)[ CD ]
Line_6 $$ double cachesize = configuration.get(DB_CACHE_SIZE)-->Line_12 $$ Preconditions.checkArgument(cachesize > 1000, "Cache size is too small: %s", cachesize)[ FD ]
Line_2 $$ public void initialize(Configuration config) -->Line_15 $$ log.info("Configuring total store cache size: [ CD ]
Line_2 $$ public void initialize(Configuration config) -->Line_16 $$ long cleanWaitTime = configuration.get(DB_CACHE_CLEAN_WAIT)[ CD ]
Line_16 $$ long cleanWaitTime = configuration.get(DB_CACHE_CLEAN_WAIT)-->Line_16 $$ long cleanWaitTime = configuration.get(DB_CACHE_CLEAN_WAIT)[ CD ]
