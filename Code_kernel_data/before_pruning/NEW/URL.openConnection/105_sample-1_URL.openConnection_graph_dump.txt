Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void downloadProfile(TaskCompletionEvent e) [ CD ]
Line_2 $$ public void downloadProfile(TaskCompletionEvent e) -->Line_3 $$ URLConnection connection = new URL(getTaskLogURL(e.getTaskAttemptId(), e.getTaskTrackerHttp()) + "&filter=profile").openConnection()[ CD ]
Line_3 $$ URLConnection connection = new URL(getTaskLogURL(e.getTaskAttemptId(), e.getTaskTrackerHttp()) + "&filter=profile").openConnection()-->Line_3 $$ URLConnection connection = new URL(getTaskLogURL(e.getTaskAttemptId(), e.getTaskTrackerHttp()) + "&filter=profile").openConnection()[ CD ]
Line_2 $$ public void downloadProfile(TaskCompletionEvent e) -->Line_3 $$ URLConnection connection = new URL(getTaskLogURL(e.getTaskAttemptId(), e.getTaskTrackerHttp()) + "&filter=profile").openConnection()[ FD ]
Line_2 $$ public void downloadProfile(TaskCompletionEvent e) -->Line_3 $$ URLConnection connection = new URL(getTaskLogURL(e.getTaskAttemptId(), e.getTaskTrackerHttp()) + "&filter=profile").openConnection()[ FD ]
Line_2 $$ public void downloadProfile(TaskCompletionEvent e) -->Line_6 $$ InputStream in = connection.getInputStream()[ CD ]
Line_6 $$ InputStream in = connection.getInputStream()-->Line_6 $$ InputStream in = connection.getInputStream()[ CD ]
Line_3 $$ URLConnection connection = new URL(getTaskLogURL(e.getTaskAttemptId(), e.getTaskTrackerHttp()) + "&filter=profile").openConnection()-->Line_6 $$ InputStream in = connection.getInputStream()[ FD ]
