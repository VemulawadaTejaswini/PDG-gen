Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testGzipCompression() [ CD ]
Line_2 $$ public void testGzipCompression() -->Line_3 $$ final URL url = new URL("http://localhost:" + port + "/default")[ CD ]
Line_2 $$ public void testGzipCompression() -->Line_4 $$ final HttpURLConnection get = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ final URL url = new URL("http://localhost:" + port + "/default")-->Line_4 $$ final HttpURLConnection get = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_5 $$ get.setRequestProperty("Accept-Encoding", "gzip")[ CD ]
Line_4 $$ final HttpURLConnection get = (HttpURLConnection) url.openConnection()-->Line_5 $$ get.setRequestProperty("Accept-Encoding", "gzip")[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_6 $$ Assert.assertEquals("gzip", get.getContentEncoding())[ CD ]
Line_4 $$ final HttpURLConnection get = (HttpURLConnection) url.openConnection()-->Line_6 $$ Assert.assertEquals("gzip", get.getContentEncoding())[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_7 $$ final HttpURLConnection post = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ final URL url = new URL("http://localhost:" + port + "/default")-->Line_7 $$ final HttpURLConnection post = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_8 $$ post.setRequestProperty("Accept-Encoding", "gzip")[ CD ]
Line_7 $$ final HttpURLConnection post = (HttpURLConnection) url.openConnection()-->Line_8 $$ post.setRequestProperty("Accept-Encoding", "gzip")[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_9 $$ post.setRequestMethod("POST")[ CD ]
Line_7 $$ final HttpURLConnection post = (HttpURLConnection) url.openConnection()-->Line_9 $$ post.setRequestMethod("POST")[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_10 $$ Assert.assertEquals("gzip", post.getContentEncoding())[ CD ]
Line_7 $$ final HttpURLConnection post = (HttpURLConnection) url.openConnection()-->Line_10 $$ Assert.assertEquals("gzip", post.getContentEncoding())[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_11 $$ final HttpURLConnection getNoGzip = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ final URL url = new URL("http://localhost:" + port + "/default")-->Line_11 $$ final HttpURLConnection getNoGzip = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_12 $$ Assert.assertNotEquals("gzip", getNoGzip.getContentEncoding())[ CD ]
Line_11 $$ final HttpURLConnection getNoGzip = (HttpURLConnection) url.openConnection()-->Line_12 $$ Assert.assertNotEquals("gzip", getNoGzip.getContentEncoding())[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_13 $$ final HttpURLConnection postNoGzip = (HttpURLConnection) url.openConnection()[ CD ]
Line_3 $$ final URL url = new URL("http://localhost:" + port + "/default")-->Line_13 $$ final HttpURLConnection postNoGzip = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_14 $$ postNoGzip.setRequestMethod("POST")[ CD ]
Line_13 $$ final HttpURLConnection postNoGzip = (HttpURLConnection) url.openConnection()-->Line_14 $$ postNoGzip.setRequestMethod("POST")[ FD ]
Line_2 $$ public void testGzipCompression() -->Line_15 $$ Assert.assertNotEquals("gzip", postNoGzip.getContentEncoding())[ CD ]
Line_13 $$ final HttpURLConnection postNoGzip = (HttpURLConnection) url.openConnection()-->Line_15 $$ Assert.assertNotEquals("gzip", postNoGzip.getContentEncoding())[ FD ]
