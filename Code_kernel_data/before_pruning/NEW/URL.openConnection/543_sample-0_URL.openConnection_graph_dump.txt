Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void slurp(final URL url) [ CD ]
Line_2 $$ public void slurp(final URL url) -->Line_3 $$ final HttpURLConnection urlConnection = HttpURLConnection.class.cast(url.openConnection())[ CD ]
Line_3 $$ final HttpURLConnection urlConnection = HttpURLConnection.class.cast(url.openConnection())-->Line_3 $$ final HttpURLConnection urlConnection = HttpURLConnection.class.cast(url.openConnection())[ CD ]
Line_2 $$ public void slurp(final URL url) -->Line_3 $$ final HttpURLConnection urlConnection = HttpURLConnection.class.cast(url.openConnection())[ FD ]
Line_2 $$ public void slurp(final URL url) -->Line_4 $$ urlConnection.setRequestProperty("Accept", "text/plain")[ CD ]
Line_3 $$ final HttpURLConnection urlConnection = HttpURLConnection.class.cast(url.openConnection())-->Line_4 $$ urlConnection.setRequestProperty("Accept", "text/plain")[ FD ]
Line_2 $$ public void slurp(final URL url) -->Line_5 $$ return IO.slurp(urlConnection.getInputStream())[ CD ]
Line_5 $$ return IO.slurp(urlConnection.getInputStream())-->Line_5 $$ return IO.slurp(urlConnection.getInputStream())[ CD ]
Line_3 $$ final HttpURLConnection urlConnection = HttpURLConnection.class.cast(url.openConnection())-->Line_5 $$ return IO.slurp(urlConnection.getInputStream())[ FD ]
Line_2 $$ public void slurp(final URL url) -->Line_6 $$ urlConnection.disconnect()[ CD ]
Line_3 $$ final HttpURLConnection urlConnection = HttpURLConnection.class.cast(url.openConnection())-->Line_6 $$ urlConnection.disconnect()[ FD ]
