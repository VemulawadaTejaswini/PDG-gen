Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() [ CD ]
Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() -->Line_3 $$ server.enqueue(new MockResponse().addHeader("Last-Modified: " + formatDate(-105, TimeUnit.SECONDS)).addHeader("Date: " + formatDate(-5, TimeUnit.SECONDS)).setBody("A"))[ CD ]
Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() -->Line_7 $$ server.play()[ CD ]
Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() -->Line_8 $$ URL url = server.getUrl("/")[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_8 $$ URL url = server.getUrl("/")[ CD ]
Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() -->Line_9 $$ assertEquals("A", readAscii(url.openConnection()))[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_9 $$ assertEquals("A", readAscii(url.openConnection()))[ FD ]
Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() -->Line_10 $$ URLConnection connection = url.openConnection()[ CD ]
Line_10 $$ URLConnection connection = url.openConnection()-->Line_10 $$ URLConnection connection = url.openConnection()[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_10 $$ URLConnection connection = url.openConnection()[ FD ]
Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() -->Line_11 $$ assertEquals("A", readAscii(connection))[ CD ]
Line_10 $$ URLConnection connection = url.openConnection()-->Line_11 $$ assertEquals("A", readAscii(connection))[ FD ]
Line_2 $$ public void testDefaultExpirationDateFullyCachedForLessThan24Hours() -->Line_12 $$ assertNull(connection.getHeaderField("Warning"))[ CD ]
Line_10 $$ URLConnection connection = url.openConnection()-->Line_12 $$ assertNull(connection.getHeaderField("Warning"))[ FD ]
