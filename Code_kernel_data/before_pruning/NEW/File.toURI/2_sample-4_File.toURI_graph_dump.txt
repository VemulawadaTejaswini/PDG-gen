Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) [ CD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_3 $$ Collections.sort(schemaFiles)[ CD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_3 $$ Collections.sort(schemaFiles)[ FD ]
Line_4 $$ for (File child : schemaFiles) -->Line_5 $$ if (child.isFile()) [ FD ]
Line_5 $$ if (child.isFile()) -->Line_5 $$ if (child.isFile()) [ CD ]
Line_4 $$ for (File child : schemaFiles) -->Line_5 $$ if (child.isFile()) [ FD ]
Line_5 $$ if (child.isFile()) -->Line_6 $$ mapper.generate(codeModel, getNodeName(child.toURI().toURL()), defaultString(packageName), child.toURI().toURL())[ CD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_6 $$ mapper.generate(codeModel, getNodeName(child.toURI().toURL()), defaultString(packageName), child.toURI().toURL())[ FD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_6 $$ mapper.generate(codeModel, getNodeName(child.toURI().toURL()), defaultString(packageName), child.toURI().toURL())[ FD ]
Line_4 $$ for (File child : schemaFiles) -->Line_6 $$ mapper.generate(codeModel, getNodeName(child.toURI().toURL()), defaultString(packageName), child.toURI().toURL())[ FD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_6 $$ mapper.generate(codeModel, getNodeName(child.toURI().toURL()), defaultString(packageName), child.toURI().toURL())[ FD ]
Line_4 $$ for (File child : schemaFiles) -->Line_6 $$ mapper.generate(codeModel, getNodeName(child.toURI().toURL()), defaultString(packageName), child.toURI().toURL())[ FD ]
Line_5 $$ if (child.isFile()) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ CD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ FD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ FD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ FD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ FD ]
Line_4 $$ for (File child : schemaFiles) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ FD ]
Line_4 $$ for (File child : schemaFiles) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ FD ]
Line_2 $$ public void generateRecursive(GenerationConfig config, SchemaMapper mapper, JCodeModel codeModel, String packageName, List<File> schemaFiles) -->Line_8 $$ generateRecursive(config, mapper, codeModel, childQualifiedName(packageName, child.getName()), Arrays.asList(child.listFiles(config.getFileFilter())))[ FD ]
