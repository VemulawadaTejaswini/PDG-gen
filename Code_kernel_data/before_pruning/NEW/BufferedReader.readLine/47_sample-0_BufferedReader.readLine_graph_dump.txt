Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void verifyGzipFile(String filename, String msg) [ CD ]
Line_2 $$ public void verifyGzipFile(String filename, String msg) -->Line_3 $$ BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(filename))))[ CD ]
Line_2 $$ public void verifyGzipFile(String filename, String msg) -->Line_5 $$ String line = r.readLine()[ CD ]
Line_5 $$ String line = r.readLine()-->Line_5 $$ String line = r.readLine()[ CD ]
Line_3 $$ BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(filename))))-->Line_5 $$ String line = r.readLine()[ FD ]
Line_2 $$ public void verifyGzipFile(String filename, String msg) -->Line_6 $$ assertEquals("Got invalid line back from " + filename, msg, line)[ CD ]
Line_2 $$ public void verifyGzipFile(String filename, String msg) -->Line_6 $$ assertEquals("Got invalid line back from " + filename, msg, line)[ FD ]
Line_5 $$ String line = r.readLine()-->Line_6 $$ assertEquals("Got invalid line back from " + filename, msg, line)[ FD ]
Line_2 $$ public void verifyGzipFile(String filename, String msg) -->Line_7 $$ r.close()[ CD ]
Line_3 $$ BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(filename))))-->Line_7 $$ r.close()[ FD ]
