Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testRead(int port) [ CD ]
Line_2 $$ public void testRead(int port) -->Line_3 $$ String url = new URL("http", "localhost", port, "/").toString()[ CD ]
Line_3 $$ String url = new URL("http", "localhost", port, "/").toString()-->Line_3 $$ String url = new URL("http", "localhost", port, "/").toString()[ CD ]
Line_2 $$ public void testRead(int port) -->Line_4 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))[ CD ]
Line_4 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))-->Line_4 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))[ CD ]
Line_2 $$ public void testRead(int port) -->Line_5 $$ assertEquals(200, response.getStatusLine().getStatusCode())[ CD ]
Line_4 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))-->Line_5 $$ assertEquals(200, response.getStatusLine().getStatusCode())[ FD ]
Line_2 $$ public void testRead(int port) -->Line_6 $$ InputStream is = response.getEntity().getContent()[ CD ]
Line_6 $$ InputStream is = response.getEntity().getContent()-->Line_6 $$ InputStream is = response.getEntity().getContent()[ CD ]
Line_4 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))-->Line_6 $$ InputStream is = response.getEntity().getContent()[ FD ]
Line_2 $$ public void testRead(int port) -->Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_2 $$ public void testRead(int port) -->Line_8 $$ String data = br.readLine()[ CD ]
Line_8 $$ String data = br.readLine()-->Line_8 $$ String data = br.readLine()[ CD ]
Line_7 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_8 $$ String data = br.readLine()[ FD ]
