Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) [ CD ]
Line_2 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_3 $$ final String actualLine = actual.readLine()[ CD ]
Line_3 $$ final String actualLine = actual.readLine()-->Line_3 $$ final String actualLine = actual.readLine()[ CD ]
Line_2 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_3 $$ final String actualLine = actual.readLine()[ FD ]
Line_2 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_4 $$ Assert.assertNotNull("Expected had more lines than the actual.", actualLine)[ CD ]
Line_3 $$ final String actualLine = actual.readLine()-->Line_4 $$ Assert.assertNotNull("Expected had more lines than the actual.", actualLine)[ FD ]
Line_2 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_5 $$ Assert.assertEquals(expectedLine, actualLine)[ CD ]
Line_3 $$ final String actualLine = actual.readLine()-->Line_5 $$ Assert.assertEquals(expectedLine, actualLine)[ FD ]
Line_2 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_6 $$ Assert.assertNull("Actual had more lines than the expected.", actual.readLine())[ CD ]
Line_2 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_6 $$ Assert.assertNull("Actual had more lines than the expected.", actual.readLine())[ FD ]
