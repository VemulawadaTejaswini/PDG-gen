Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testSetEncoding() [ CD ]
Line_2 $$ public void testSetEncoding() -->Line_3 $$ formatter.setOutputEncoding("UTF-16")[ CD ]
Line_2 $$ public void testSetEncoding() -->Line_4 $$ driver.sendBundle(formatter.createVisitor(output))[ CD ]
Line_2 $$ public void testSetEncoding() -->Line_5 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(output.getFileAsStream("index.html"), "UTF-16"))[ CD ]
Line_2 $$ public void testSetEncoding() -->Line_7 $$ final String line = reader.readLine()[ CD ]
Line_7 $$ final String line = reader.readLine()-->Line_7 $$ final String line = reader.readLine()[ CD ]
Line_5 $$ final BufferedReader reader = new BufferedReader(new InputStreamReader(output.getFileAsStream("index.html"), "UTF-16"))-->Line_7 $$ final String line = reader.readLine()[ FD ]
Line_2 $$ public void testSetEncoding() -->Line_8 $$ assertTrue(line, line.startsWith("<?xml version=\"1.0\" encoding=\"UTF-16\""))[ CD ]
Line_7 $$ final String line = reader.readLine()-->Line_8 $$ assertTrue(line, line.startsWith("<?xml version=\"1.0\" encoding=\"UTF-16\""))[ FD ]
Line_7 $$ final String line = reader.readLine()-->Line_8 $$ assertTrue(line, line.startsWith("<?xml version=\"1.0\" encoding=\"UTF-16\""))[ FD ]
