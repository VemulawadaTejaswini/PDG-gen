Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) [ CD ]
Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_3 $$ for (int i = 0; i < bbs.length; i++) [ CD ]
Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) [ CD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_3 $$ for (int i = 0; i < bbs.length; i++) [ CD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_3 $$ for (int i = 0; i < bbs.length; i++) [ CD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_3 $$ for (int i = 0; i < bbs.length; i++) [ FD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)[ CD ]
Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)[ CD ]
Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)[ CD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_5 $$ int pos = original_positions[i] = bb.position()[ CD ]
Line_5 $$ int pos = original_positions[i] = bb.position()-->Line_5 $$ int pos = original_positions[i] = bb.position()[ CD ]
Line_5 $$ int pos = original_positions[i] = bb.position()-->Line_5 $$ int pos = original_positions[i] = bb.position()[ CD ]
Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_5 $$ int pos = original_positions[i] = bb.position()[ FD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_6 $$ if (pos != bb.limit()) [ CD ]
Line_5 $$ int pos = original_positions[i] = bb.position()-->Line_6 $$ if (pos != bb.limit()) [ FD ]
Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_6 $$ if (pos != bb.limit()) [ FD ]
Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_10 $$ if (last_bb != null) [ CD ]
Line_10 $$ if (last_bb != null) -->Line_11 $$ int loop = 0[ CD ]
Line_10 $$ if (last_bb != null) -->Line_12 $$ while (fc.position() < fc.size() && last_bb.hasRemaining()) [ CD ]
Line_10 $$ if (last_bb != null) -->Line_10 $$ if (last_bb != null) [ CD ]
Line_12 $$ while (fc.position() < fc.size() && last_bb.hasRemaining()) -->Line_13 $$ long read = fc.read(bbs)[ CD ]
Line_13 $$ long read = fc.read(bbs)-->Line_13 $$ long read = fc.read(bbs)[ CD ]
Line_12 $$ while (fc.position() < fc.size() && last_bb.hasRemaining()) -->Line_14 $$ if (read > 0) [ CD ]
Line_13 $$ long read = fc.read(bbs)-->Line_14 $$ if (read > 0) [ FD ]
Line_14 $$ if (read > 0) -->Line_15 $$ loop = 0[ CD ]
Line_15 $$ loop = 0-->Line_15 $$ loop = 0[ FD ]
Line_11 $$ int loop = 0-->Line_15 $$ loop = 0[ FD ]
Line_14 $$ if (read > 0) -->Line_17 $$ loop++[ CD ]
Line_15 $$ loop = 0-->Line_17 $$ loop++[ FD ]
Line_11 $$ int loop = 0-->Line_17 $$ loop++[ FD ]
Line_14 $$ if (read > 0) -->Line_18 $$ if (loop == READ_RETRY_LIMIT) [ CD ]
Line_15 $$ loop = 0-->Line_18 $$ if (loop == READ_RETRY_LIMIT) [ FD ]
Line_11 $$ int loop = 0-->Line_18 $$ if (loop == READ_RETRY_LIMIT) [ FD ]
Line_18 $$ if (loop == READ_RETRY_LIMIT) -->Line_19 $$ Debug.out("FMFile::read: zero length read - abandoning")[ CD ]
Line_18 $$ if (loop == READ_RETRY_LIMIT) -->Line_22 $$ if (DEBUG_VERBOSE) [ CD ]
Line_22 $$ if (DEBUG_VERBOSE) -->Line_23 $$ Debug.out("FMFile::read: zero length read - retrying")[ CD ]
Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_34 $$ Debug.out("Read failed: " + owner.getString() + ": raf open=" + raf.getChannel().isOpen() + ", len=" + raf.length() + ",off=" + offset)[ CD ]
Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_34 $$ Debug.out("Read failed: " + owner.getString() + ": raf open=" + raf.getChannel().isOpen() + ", len=" + raf.length() + ",off=" + offset)[ FD ]
Line_2 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_34 $$ Debug.out("Read failed: " + owner.getString() + ": raf open=" + raf.getChannel().isOpen() + ", len=" + raf.length() + ",off=" + offset)[ FD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_3 $$ for (int i = 0; i < bbs.length; i++) [ FD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_3 $$ for (int i = 0; i < bbs.length; i++) [ FD ]
Line_3 $$ for (int i = 0; i < bbs.length; i++) -->Line_3 $$ for (int i = 0; i < bbs.length; i++) [ FD ]
Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_5 $$ int pos = original_positions[i] = bb.position()[ FD ]
Line_5 $$ int pos = original_positions[i] = bb.position()-->Line_6 $$ if (pos != bb.limit()) [ FD ]
Line_4 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_6 $$ if (pos != bb.limit()) [ FD ]
Line_13 $$ long read = fc.read(bbs)-->Line_14 $$ if (read > 0) [ FD ]
Line_15 $$ loop = 0-->Line_17 $$ loop++[ FD ]
Line_15 $$ loop = 0-->Line_18 $$ if (loop == READ_RETRY_LIMIT) [ FD ]
