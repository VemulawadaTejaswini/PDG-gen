Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) [ CD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)[ CD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_4 $$ dataFile.read(sizeBuffer, valueLocation)[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_4 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_4 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_5 $$ short numKeyValues = sizeBuffer.getShort(0)[ CD ]
Line_5 $$ short numKeyValues = sizeBuffer.getShort(0)-->Line_5 $$ short numKeyValues = sizeBuffer.getShort(0)[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_5 $$ short numKeyValues = sizeBuffer.getShort(0)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_6 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)[ CD ]
Line_6 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)-->Line_6 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_6 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_8 $$ do [ CD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) [ CD ]
Line_8 $$ do -->Line_9 $$ if (keySize == -1 && valueSize == -1) [ CD ]
Line_9 $$ if (keySize == -1 && valueSize == -1) -->Line_10 $$ sizeBuffer.clear()[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_10 $$ sizeBuffer.clear()[ FD ]
Line_9 $$ if (keySize == -1 && valueSize == -1) -->Line_11 $$ dataFile.read(sizeBuffer, valueLocation)[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_11 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_11 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_9 $$ if (keySize == -1 && valueSize == -1) -->Line_12 $$ keySize = sizeBuffer.getInt(0)[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_12 $$ keySize = sizeBuffer.getInt(0)[ FD ]
Line_9 $$ if (keySize == -1 && valueSize == -1) -->Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ CD ]
Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)-->Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ FD ]
Line_6 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)-->Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ FD ]
Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)-->Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ CD ]
Line_3 $$ ByteBuffer sizeBuffer = ByteBuffer.allocate(headerSize)-->Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)[ FD ]
Line_9 $$ if (keySize == -1 && valueSize == -1) -->Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)[ CD ]
Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)[ FD ]
Line_8 $$ do -->Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)[ CD ]
Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)[ CD ]
Line_8 $$ do -->Line_17 $$ dataFile.read(buffer, valueLocation)[ CD ]
Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_17 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_17 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_17 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_8 $$ do -->Line_18 $$ if (ByteUtils.compare(key, buffer.array(), 0, keySize) == 0) [ CD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_18 $$ if (ByteUtils.compare(key, buffer.array(), 0, keySize) == 0) [ FD ]
Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_18 $$ if (ByteUtils.compare(key, buffer.array(), 0, keySize) == 0) [ FD ]
Line_18 $$ if (ByteUtils.compare(key, buffer.array(), 0, keySize) == 0) -->Line_19 $$ return ByteUtils.copy(buffer.array(), keySize, keySize + valueSize)[ CD ]
Line_19 $$ return ByteUtils.copy(buffer.array(), keySize, keySize + valueSize)-->Line_19 $$ return ByteUtils.copy(buffer.array(), keySize, keySize + valueSize)[ CD ]
Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_19 $$ return ByteUtils.copy(buffer.array(), keySize, keySize + valueSize)[ FD ]
Line_8 $$ do -->Line_21 $$ valueLocation += (keySize + valueSize)[ CD ]
Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_21 $$ valueLocation += (keySize + valueSize)[ FD ]
Line_21 $$ valueLocation += (keySize + valueSize)-->Line_21 $$ valueLocation += (keySize + valueSize)[ FD ]
Line_2 $$ public void readValue(byte[] key, int chunk, int valueLocation) -->Line_21 $$ valueLocation += (keySize + valueSize)[ FD ]
Line_8 $$ do -->Line_22 $$ keySize = valueSize = -1[ CD ]
Line_13 $$ valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_INT)-->Line_22 $$ keySize = valueSize = -1[ FD ]
Line_22 $$ keySize = valueSize = -1-->Line_22 $$ keySize = valueSize = -1[ FD ]
Line_6 $$ int valueSize = sizeBuffer.getInt(ByteUtils.SIZE_OF_SHORT + ByteUtils.SIZE_OF_INT)-->Line_22 $$ keySize = valueSize = -1[ FD ]
Line_22 $$ keySize = valueSize = -1-->Line_22 $$ keySize = valueSize = -1[ CD ]
Line_5 $$ short numKeyValues = sizeBuffer.getShort(0)-->Line_8 $$ do [ FD ]
Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_11 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_21 $$ valueLocation += (keySize + valueSize)-->Line_11 $$ dataFile.read(sizeBuffer, valueLocation)[ FD ]
Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_17 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_14 $$ valueLocation += (2 * ByteUtils.SIZE_OF_INT)-->Line_17 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_21 $$ valueLocation += (keySize + valueSize)-->Line_17 $$ dataFile.read(buffer, valueLocation)[ FD ]
Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_18 $$ if (ByteUtils.compare(key, buffer.array(), 0, keySize) == 0) [ FD ]
Line_16 $$ ByteBuffer buffer = ByteBuffer.allocate(keySize + valueSize)-->Line_19 $$ return ByteUtils.copy(buffer.array(), keySize, keySize + valueSize)[ FD ]
