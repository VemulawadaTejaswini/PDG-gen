Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void rebuildIdGenerator() [ CD ]
Line_2 $$ public void rebuildIdGenerator() -->Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])[ CD ]
Line_2 $$ public void rebuildIdGenerator() -->Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) [ CD ]
Line_2 $$ public void rebuildIdGenerator() -->Line_2 $$ public void rebuildIdGenerator() [ CD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) [ CD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) [ CD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) [ FD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_6 $$ fileChannel.read(byteBuffer, i * recordSize)[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_6 $$ fileChannel.read(byteBuffer, i * recordSize)[ FD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_7 $$ byteBuffer.flip()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_7 $$ byteBuffer.flip()[ FD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_8 $$ byte inUse = byteBuffer.get()[ CD ]
Line_8 $$ byte inUse = byteBuffer.get()-->Line_8 $$ byte inUse = byteBuffer.get()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_8 $$ byte inUse = byteBuffer.get()[ FD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_9 $$ byteBuffer.flip()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_9 $$ byteBuffer.flip()[ FD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_10 $$ if (inUse != Record.IN_USE.byteValue()) [ CD ]
Line_8 $$ byte inUse = byteBuffer.get()-->Line_10 $$ if (inUse != Record.IN_USE.byteValue()) [ FD ]
Line_10 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_12 $$ byteBuffer.clear()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_12 $$ byteBuffer.clear()[ FD ]
Line_10 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_13 $$ byteBuffer.put(Record.IN_USE.byteValue()).putInt(Record.RESERVED.intValue())[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_13 $$ byteBuffer.put(Record.IN_USE.byteValue()).putInt(Record.RESERVED.intValue())[ FD ]
Line_10 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_15 $$ byteBuffer.flip()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_15 $$ byteBuffer.flip()[ FD ]
Line_10 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_16 $$ fileChannel.write(byteBuffer, i * recordSize)[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_16 $$ fileChannel.write(byteBuffer, i * recordSize)[ FD ]
Line_10 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_17 $$ byteBuffer.clear()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_17 $$ byteBuffer.clear()[ FD ]
Line_2 $$ public void rebuildIdGenerator() -->Line_24 $$ fileChannel.truncate(highId * recordSize)[ CD ]
Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_4 $$ for (int i = 0; i * recordSize < fileSize; i++) [ FD ]
Line_8 $$ byte inUse = byteBuffer.get()-->Line_10 $$ if (inUse != Record.IN_USE.byteValue()) [ FD ]
