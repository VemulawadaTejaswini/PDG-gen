Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readHgtFile(String file) [ CD ]
Line_2 $$ public void readHgtFile(String file) -->Line_3 $$ CheckParameterUtil.ensureParameterNotNull(file)[ CD ]
Line_2 $$ public void readHgtFile(String file) -->Line_3 $$ CheckParameterUtil.ensureParameterNotNull(file)[ FD ]
Line_2 $$ public void readHgtFile(String file) -->Line_4 $$ fc = new FileInputStream(file).getChannel()[ CD ]
Line_2 $$ public void readHgtFile(String file) -->Line_5 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_5 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())[ CD ]
Line_2 $$ public void readHgtFile(String file) -->Line_6 $$ while (bb.remaining() > 0) fc.read(bb)[ CD ]
Line_2 $$ public void readHgtFile(String file) -->Line_2 $$ public void readHgtFile(String file) [ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_6 $$ while (bb.remaining() > 0) fc.read(bb)[ FD ]
Line_6 $$ while (bb.remaining() > 0) fc.read(bb)-->Line_6 $$ fc.read(bb)[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_6 $$ fc.read(bb)[ FD ]
Line_2 $$ public void readHgtFile(String file) -->Line_7 $$ bb.flip()[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_7 $$ bb.flip()[ FD ]
Line_2 $$ public void readHgtFile(String file) -->Line_8 $$ sb = bb.order(ByteOrder.BIG_ENDIAN).asShortBuffer()[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_8 $$ sb = bb.order(ByteOrder.BIG_ENDIAN).asShortBuffer()[ FD ]
