Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void hashFiles(List<File> files) [ CD ]
Line_3 $$ for (File file : files) -->Line_4 $$ length += file.length()[ FD ]
Line_6 $$ FileChannel channel = fis.getChannel()-->Line_6 $$ FileChannel channel = fis.getChannel()[ CD ]
Line_5 $$ FileInputStream fis = new FileInputStream(file)-->Line_6 $$ FileChannel channel = fis.getChannel()[ FD ]
Line_6 $$ FileChannel channel = fis.getChannel()-->Line_9 $$ while (channel.read(buffer) > 0) [ FD ]
Line_9 $$ while (channel.read(buffer) > 0) -->Line_10 $$ if (buffer.remaining() == 0) [ CD ]
Line_10 $$ if (buffer.remaining() == 0) -->Line_11 $$ buffer.clear()[ CD ]
Line_10 $$ if (buffer.remaining() == 0) -->Line_12 $$ results.add(executor.submit(new CallableChunkHasher(buffer)))[ CD ]
Line_9 $$ while (channel.read(buffer) > 0) -->Line_14 $$ if (results.size() >= threads) [ CD ]
Line_14 $$ if (results.size() >= threads) -->Line_14 $$ if (results.size() >= threads) [ CD ]
Line_14 $$ if (results.size() >= threads) -->Line_15 $$ pieces += accumulateHashes(hashes, results)[ CD ]
Line_9 $$ while (channel.read(buffer) > 0) -->Line_17 $$ if (channel.position() / (double) channel.size() * 100f > step) [ CD ]
Line_7 $$ int step = 10-->Line_17 $$ if (channel.position() / (double) channel.size() * 100f > step) [ FD ]
Line_6 $$ FileChannel channel = fis.getChannel()-->Line_17 $$ if (channel.position() / (double) channel.size() * 100f > step) [ FD ]
Line_6 $$ FileChannel channel = fis.getChannel()-->Line_17 $$ if (channel.position() / (double) channel.size() * 100f > step) [ FD ]
Line_17 $$ if (channel.position() / (double) channel.size() * 100f > step) -->Line_18 $$ step += 10[ CD ]
Line_18 $$ step += 10-->Line_18 $$ step += 10[ FD ]
Line_7 $$ int step = 10-->Line_18 $$ step += 10[ FD ]
Line_6 $$ FileChannel channel = fis.getChannel()-->Line_22 $$ channel.close()[ FD ]
Line_5 $$ FileInputStream fis = new FileInputStream(file)-->Line_23 $$ fis.close()[ FD ]
Line_18 $$ step += 10-->Line_17 $$ if (channel.position() / (double) channel.size() * 100f > step) [ FD ]
