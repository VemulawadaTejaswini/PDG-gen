Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) [ CD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_3 $$ HttpAlfrescoStore store = new HttpAlfrescoStore()[ CD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_4 $$ store.setTransactionService(transactionService)[ CD ]
Line_3 $$ HttpAlfrescoStore store = new HttpAlfrescoStore()-->Line_4 $$ store.setTransactionService(transactionService)[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_5 $$ store.setAuthenticationService(authenticationService)[ CD ]
Line_3 $$ HttpAlfrescoStore store = new HttpAlfrescoStore()-->Line_5 $$ store.setAuthenticationService(authenticationService)[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_6 $$ store.setBaseHttpUrl(baseUrl)[ CD ]
Line_3 $$ HttpAlfrescoStore store = new HttpAlfrescoStore()-->Line_6 $$ store.setBaseHttpUrl(baseUrl)[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_6 $$ store.setBaseHttpUrl(baseUrl)[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_7 $$ ContentReader reader = store.getReader(contentUrl)[ CD ]
Line_7 $$ ContentReader reader = store.getReader(contentUrl)-->Line_7 $$ ContentReader reader = store.getReader(contentUrl)[ CD ]
Line_3 $$ HttpAlfrescoStore store = new HttpAlfrescoStore()-->Line_7 $$ ContentReader reader = store.getReader(contentUrl)[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_7 $$ ContentReader reader = store.getReader(contentUrl)[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_8 $$ boolean exists = reader.exists()[ CD ]
Line_8 $$ boolean exists = reader.exists()-->Line_8 $$ boolean exists = reader.exists()[ CD ]
Line_7 $$ ContentReader reader = store.getReader(contentUrl)-->Line_8 $$ boolean exists = reader.exists()[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_9 $$ if (!exists) [ CD ]
Line_8 $$ boolean exists = reader.exists()-->Line_9 $$ if (!exists) [ FD ]
Line_9 $$ if (!exists) -->Line_9 $$ if (!exists) [ CD ]
Line_8 $$ boolean exists = reader.exists()-->Line_9 $$ if (!exists) [ FD ]
Line_9 $$ if (!exists) -->Line_11 $$ System.out.println("   Content doesn't exist: " + contentUrl)[ CD ]
Line_9 $$ if (!exists) -->Line_13 $$ return[ CD ]
Line_9 $$ if (!exists) -->Line_17 $$ System.out.println("   Content exists: " + contentUrl)[ CD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_20 $$ ContentData contentData = reader.getContentData()[ CD ]
Line_20 $$ ContentData contentData = reader.getContentData()-->Line_20 $$ ContentData contentData = reader.getContentData()[ CD ]
Line_7 $$ ContentReader reader = store.getReader(contentUrl)-->Line_20 $$ ContentData contentData = reader.getContentData()[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) reader.getSize())[ CD ]
Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) reader.getSize())-->Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) reader.getSize())[ CD ]
Line_7 $$ ContentReader reader = store.getReader(contentUrl)-->Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) reader.getSize())[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_22 $$ FileChannel channel = reader.getFileChannel()[ CD ]
Line_22 $$ FileChannel channel = reader.getFileChannel()-->Line_22 $$ FileChannel channel = reader.getFileChannel()[ CD ]
Line_7 $$ ContentReader reader = store.getReader(contentUrl)-->Line_22 $$ FileChannel channel = reader.getFileChannel()[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_23 $$ int count = channel.read(buffer)[ CD ]
Line_23 $$ int count = channel.read(buffer)-->Line_23 $$ int count = channel.read(buffer)[ CD ]
Line_22 $$ FileChannel channel = reader.getFileChannel()-->Line_23 $$ int count = channel.read(buffer)[ FD ]
Line_21 $$ ByteBuffer buffer = ByteBuffer.allocate((int) reader.getSize())-->Line_23 $$ int count = channel.read(buffer)[ FD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_24 $$ if (count != reader.getSize()) [ CD ]
Line_23 $$ int count = channel.read(buffer)-->Line_24 $$ if (count != reader.getSize()) [ FD ]
Line_7 $$ ContentReader reader = store.getReader(contentUrl)-->Line_24 $$ if (count != reader.getSize()) [ FD ]
Line_24 $$ if (count != reader.getSize()) -->Line_26 $$ System.err.println("The number of bytes read was " + count + " but expected " + reader.getSize())[ CD ]
Line_7 $$ ContentReader reader = store.getReader(contentUrl)-->Line_26 $$ System.err.println("The number of bytes read was " + count + " but expected " + reader.getSize())[ FD ]
Line_24 $$ if (count != reader.getSize()) -->Line_27 $$ return[ CD ]
Line_2 $$ public void doTest(ApplicationContext ctx, String baseUrl, String contentUrl) -->Line_29 $$ channel.close()[ CD ]
Line_22 $$ FileChannel channel = reader.getFileChannel()-->Line_29 $$ channel.close()[ FD ]
