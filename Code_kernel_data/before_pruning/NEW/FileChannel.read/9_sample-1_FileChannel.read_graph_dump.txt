Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readBackendInfo(File file) [ CD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_3 $$ if (!file.exists() || (file.length() == 0)) [ CD ]
Line_3 $$ if (!file.exists() || (file.length() == 0)) -->Line_3 $$ if (!file.exists() || (file.length() == 0)) [ CD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_3 $$ if (!file.exists() || (file.length() == 0)) [ FD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_3 $$ if (!file.exists() || (file.length() == 0)) [ FD ]
Line_3 $$ if (!file.exists() || (file.length() == 0)) -->Line_4 $$ return new ModelBackendInfo()[ CD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_6 $$ RandomAccessFile raf = new RandomAccessFile(file, "r")[ CD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_7 $$ FileChannel channel = raf.getChannel()[ CD ]
Line_7 $$ FileChannel channel = raf.getChannel()-->Line_7 $$ FileChannel channel = raf.getChannel()[ CD ]
Line_6 $$ RandomAccessFile raf = new RandomAccessFile(file, "r")-->Line_7 $$ FileChannel channel = raf.getChannel()[ FD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_8 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())[ CD ]
Line_8 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())-->Line_8 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())[ CD ]
Line_6 $$ RandomAccessFile raf = new RandomAccessFile(file, "r")-->Line_8 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())[ FD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_9 $$ channel.read(bb)[ CD ]
Line_7 $$ FileChannel channel = raf.getChannel()-->Line_9 $$ channel.read(bb)[ FD ]
Line_8 $$ ByteBuffer bb = ByteBuffer.allocate((int) raf.length())-->Line_9 $$ channel.read(bb)[ FD ]
Line_2 $$ public void readBackendInfo(File file) -->Line_10 $$ channel.close()[ CD ]
Line_7 $$ FileChannel channel = raf.getChannel()-->Line_10 $$ channel.close()[ FD ]
