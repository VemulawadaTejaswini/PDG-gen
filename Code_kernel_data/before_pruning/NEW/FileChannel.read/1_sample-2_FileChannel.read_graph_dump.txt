Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testReadsInWriteOnlyMode() [ CD ]
Line_2 $$ public void testReadsInWriteOnlyMode() -->Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)[ CD ]
Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)-->Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)[ CD ]
Line_2 $$ public void testReadsInWriteOnlyMode() -->Line_4 $$ channel.read(buffer("111"))[ CD ]
Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)-->Line_4 $$ channel.read(buffer("111"))[ FD ]
Line_2 $$ public void testReadsInWriteOnlyMode() -->Line_5 $$ channel.read(buffer("111"), 10)[ CD ]
Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)-->Line_5 $$ channel.read(buffer("111"), 10)[ FD ]
Line_2 $$ public void testReadsInWriteOnlyMode() -->Line_6 $$ channel.read(new ByteBuffer[] [ CD ]
Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)-->Line_6 $$ channel.read(new ByteBuffer[] [ FD ]
Line_2 $$ public void testReadsInWriteOnlyMode() -->Line_7 $$ channel.read(new ByteBuffer[] [ CD ]
Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)-->Line_7 $$ channel.read(new ByteBuffer[] [ FD ]
Line_2 $$ public void testReadsInWriteOnlyMode() -->Line_8 $$ channel.transferTo(0, 10, new ByteBufferChannel(buffer("111")))[ CD ]
Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)-->Line_8 $$ channel.transferTo(0, 10, new ByteBufferChannel(buffer("111")))[ FD ]
Line_2 $$ public void testReadsInWriteOnlyMode() -->Line_9 $$ channel.lock(0, 10, true)[ CD ]
Line_3 $$ FileChannel channel = channel(regularFile(0), WRITE)-->Line_9 $$ channel.lock(0, 10, true)[ FD ]
