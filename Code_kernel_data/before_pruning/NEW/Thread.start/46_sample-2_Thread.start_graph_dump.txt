Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readStream(InputStream source, CompactCalendar startDate, ParserContext<GpxRoute> context) [ CD ]
Line_2 $$ public void readStream(InputStream source, CompactCalendar startDate, ParserContext<GpxRoute> context) -->Line_3 $$ Process process = startBabel(source, getFormatName(), BABEL_INTERFACE_FORMAT_NAME, ROUTE_WAYPOINTS_TRACKS)[ CD ]
Line_3 $$ Process process = startBabel(source, getFormatName(), BABEL_INTERFACE_FORMAT_NAME, ROUTE_WAYPOINTS_TRACKS)-->Line_3 $$ Process process = startBabel(source, getFormatName(), BABEL_INTERFACE_FORMAT_NAME, ROUTE_WAYPOINTS_TRACKS)[ CD ]
Line_2 $$ public void readStream(InputStream source, CompactCalendar startDate, ParserContext<GpxRoute> context) -->Line_3 $$ Process process = startBabel(source, getFormatName(), BABEL_INTERFACE_FORMAT_NAME, ROUTE_WAYPOINTS_TRACKS)[ FD ]
Line_2 $$ public void readStream(InputStream source, CompactCalendar startDate, ParserContext<GpxRoute> context) -->Line_4 $$ Thread observer = observeProcess(process, getReadCommandExecutionTimeoutPreference())[ CD ]
Line_4 $$ Thread observer = observeProcess(process, getReadCommandExecutionTimeoutPreference())-->Line_4 $$ Thread observer = observeProcess(process, getReadCommandExecutionTimeoutPreference())[ CD ]
Line_3 $$ Process process = startBabel(source, getFormatName(), BABEL_INTERFACE_FORMAT_NAME, ROUTE_WAYPOINTS_TRACKS)-->Line_4 $$ Thread observer = observeProcess(process, getReadCommandExecutionTimeoutPreference())[ FD ]
Line_2 $$ public void readStream(InputStream source, CompactCalendar startDate, ParserContext<GpxRoute> context) -->Line_5 $$ observer.start()[ CD ]
Line_4 $$ Thread observer = observeProcess(process, getReadCommandExecutionTimeoutPreference())-->Line_5 $$ observer.start()[ FD ]
