Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testNegativeBoundLimit() [ CD ]
Line_2 $$ public void testNegativeBoundLimit() -->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_2 $$ public void testNegativeBoundLimit() -->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ CD ]
Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)-->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ FD ]
Line_2 $$ public void testNegativeBoundLimit() -->Line_5 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)[ CD ]
Line_2 $$ public void testNegativeBoundLimit() -->Line_6 $$ assertNull(LimitCompiler.compile(context, statement))[ CD ]
Line_5 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)-->Line_6 $$ assertNull(LimitCompiler.compile(context, statement))[ FD ]
