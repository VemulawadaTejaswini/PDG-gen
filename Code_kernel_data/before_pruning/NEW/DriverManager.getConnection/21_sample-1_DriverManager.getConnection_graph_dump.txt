Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testOrderByOptimizedOut() [ CD ]
Line_2 $$ public void testOrderByOptimizedOut() -->Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())[ CD ]
Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())[ CD ]
Line_2 $$ public void testOrderByOptimizedOut() -->Line_4 $$ conn.createStatement().execute("CREATE TABLE foo (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR) IMMUTABLE_ROWS=true")[ CD ]
Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_4 $$ conn.createStatement().execute("CREATE TABLE foo (k VARCHAR NOT NULL PRIMARY KEY, v VARCHAR) IMMUTABLE_ROWS=true")[ FD ]
Line_2 $$ public void testOrderByOptimizedOut() -->Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)[ CD ]
Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)-->Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)[ CD ]
Line_3 $$ Connection conn = DriverManager.getConnection(getUrl())-->Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)[ FD ]
Line_2 $$ public void testOrderByOptimizedOut() -->Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY k")[ CD ]
Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY k")-->Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY k")[ CD ]
Line_5 $$ PhoenixStatement stmt = conn.createStatement().unwrap(PhoenixStatement.class)-->Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY k")[ FD ]
Line_2 $$ public void testOrderByOptimizedOut() -->Line_7 $$ assertEquals(OrderBy.FWD_ROW_KEY_ORDER_BY, plan.getOrderBy())[ CD ]
Line_6 $$ QueryPlan plan = stmt.optimizeQuery("SELECT * FROM foo ORDER BY k")-->Line_7 $$ assertEquals(OrderBy.FWD_ROW_KEY_ORDER_BY, plan.getOrderBy())[ FD ]
