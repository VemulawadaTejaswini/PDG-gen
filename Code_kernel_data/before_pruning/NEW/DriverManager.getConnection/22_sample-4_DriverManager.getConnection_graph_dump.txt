Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void getConnection() [ CD ]
Line_2 $$ public void getConnection() -->Line_3 $$ if (conn == null) [ CD ]
Line_3 $$ if (conn == null) -->Line_4 $$ final Connection originalConn = DriverManager.getConnection("jdbc:log4jdbc:hsqldb:mem:test", "sa", "")[ CD ]
Line_4 $$ final Connection originalConn = DriverManager.getConnection("jdbc:log4jdbc:hsqldb:mem:test", "sa", "")-->Line_4 $$ final Connection originalConn = DriverManager.getConnection("jdbc:log4jdbc:hsqldb:mem:test", "sa", "")[ CD ]
Line_3 $$ if (conn == null) -->Line_5 $$ conn = Mockito.spy(originalConn)[ CD ]
Line_4 $$ final Connection originalConn = DriverManager.getConnection("jdbc:log4jdbc:hsqldb:mem:test", "sa", "")-->Line_5 $$ conn = Mockito.spy(originalConn)[ FD ]
Line_3 $$ if (conn == null) -->Line_6 $$ Mockito.doAnswer(new Answer<PreparedStatement>() [ CD ]
Line_6 $$ Mockito.doAnswer(new Answer<PreparedStatement>() -->Line_10 $$ String originalSQL = (String) invocation.getArguments()[0][ CD ]
Line_6 $$ Mockito.doAnswer(new Answer<PreparedStatement>() -->Line_10 $$ String originalSQL = (String) invocation.getArguments()[0][ FD ]
Line_6 $$ Mockito.doAnswer(new Answer<PreparedStatement>() -->Line_11 $$ String replacedSQL = originalSQL.replaceAll("(\\S+) ~ \\?", "regexp_matches($1, ?)")[ CD ]
Line_11 $$ String replacedSQL = originalSQL.replaceAll("(\\S+) ~ \\?", "regexp_matches($1, ?)")-->Line_11 $$ String replacedSQL = originalSQL.replaceAll("(\\S+) ~ \\?", "regexp_matches($1, ?)")[ CD ]
Line_10 $$ String originalSQL = (String) invocation.getArguments()[0]-->Line_11 $$ String replacedSQL = originalSQL.replaceAll("(\\S+) ~ \\?", "regexp_matches($1, ?)")[ FD ]
Line_6 $$ Mockito.doAnswer(new Answer<PreparedStatement>() -->Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")[ CD ]
Line_11 $$ String replacedSQL = originalSQL.replaceAll("(\\S+) ~ \\?", "regexp_matches($1, ?)")-->Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")[ FD ]
Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")-->Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")[ FD ]
Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")-->Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")[ CD ]
Line_11 $$ String replacedSQL = originalSQL.replaceAll("(\\S+) ~ \\?", "regexp_matches($1, ?)")-->Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")[ FD ]
Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")-->Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")[ FD ]
Line_6 $$ Mockito.doAnswer(new Answer<PreparedStatement>() -->Line_13 $$ return originalConn.prepareStatement(replacedSQL)[ CD ]
Line_13 $$ return originalConn.prepareStatement(replacedSQL)-->Line_13 $$ return originalConn.prepareStatement(replacedSQL)[ CD ]
Line_4 $$ final Connection originalConn = DriverManager.getConnection("jdbc:log4jdbc:hsqldb:mem:test", "sa", "")-->Line_13 $$ return originalConn.prepareStatement(replacedSQL)[ FD ]
Line_11 $$ String replacedSQL = originalSQL.replaceAll("(\\S+) ~ \\?", "regexp_matches($1, ?)")-->Line_13 $$ return originalConn.prepareStatement(replacedSQL)[ FD ]
Line_12 $$ replacedSQL = replacedSQL.replaceAll("(\\S+) !~ \\?", "regexp_matches($1, ?) = FALSE")-->Line_13 $$ return originalConn.prepareStatement(replacedSQL)[ FD ]
Line_3 $$ if (conn == null) -->Line_16 $$ executeDDL(conn, "drop schema public cascade;")[ CD ]
