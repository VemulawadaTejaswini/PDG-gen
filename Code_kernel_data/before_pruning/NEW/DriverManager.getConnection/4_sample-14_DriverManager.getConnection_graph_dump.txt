Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void compileStatement(String query, List<Object> binds) [ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES)).unwrap(PhoenixConnection.class)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES)).unwrap(PhoenixConnection.class)-->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), PropertiesUtil.deepCopy(TEST_PROPERTIES)).unwrap(PhoenixConnection.class)[ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_4 $$ PhoenixPreparedStatement pstmt = new PhoenixPreparedStatement(pconn, query)[ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_5 $$ TestUtil.bindParams(pstmt, binds)[ CD ]
Line_4 $$ PhoenixPreparedStatement pstmt = new PhoenixPreparedStatement(pconn, query)-->Line_5 $$ TestUtil.bindParams(pstmt, binds)[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_5 $$ TestUtil.bindParams(pstmt, binds)[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_6 $$ QueryPlan plan = pstmt.compileQuery()[ CD ]
Line_6 $$ QueryPlan plan = pstmt.compileQuery()-->Line_6 $$ QueryPlan plan = pstmt.compileQuery()[ CD ]
Line_4 $$ PhoenixPreparedStatement pstmt = new PhoenixPreparedStatement(pconn, query)-->Line_6 $$ QueryPlan plan = pstmt.compileQuery()[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_7 $$ assertTrue(plan instanceof AggregatePlan)[ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_8 $$ Filter filter = plan.getContext().getScan().getFilter()[ CD ]
Line_8 $$ Filter filter = plan.getContext().getScan().getFilter()-->Line_8 $$ Filter filter = plan.getContext().getScan().getFilter()[ CD ]
Line_6 $$ QueryPlan plan = pstmt.compileQuery()-->Line_8 $$ Filter filter = plan.getContext().getScan().getFilter()[ FD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_9 $$ assertTrue(filter == null || filter instanceof BooleanExpressionFilter)[ CD ]
Line_2 $$ public void compileStatement(String query, List<Object> binds) -->Line_10 $$ BooleanExpressionFilter boolFilter = (BooleanExpressionFilter) filter[ CD ]
