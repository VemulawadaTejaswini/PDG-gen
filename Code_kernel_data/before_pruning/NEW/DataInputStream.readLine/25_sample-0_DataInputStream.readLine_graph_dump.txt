Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readMaze(String inputFileName) [ CD ]
Line_2 $$ public void readMaze(String inputFileName) -->Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) [ CD ]
Line_2 $$ public void readMaze(String inputFileName) -->Line_2 $$ public void readMaze(String inputFileName) [ CD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_4 $$ String code[ CD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_5 $$ int[] xy = new int[6][ CD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_6 $$ int numToken = 0[ CD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_7 $$ StringTokenizer tok = new StringTokenizer(line)[ CD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_8 $$ if ((numToken = tok.countTokens()) < 1) [ CD ]
Line_6 $$ int numToken = 0-->Line_8 $$ if ((numToken = tok.countTokens()) < 1) [ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_8 $$ if ((numToken = tok.countTokens()) < 1) [ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_8 $$ if ((numToken = tok.countTokens()) < 1) [ CD ]
Line_7 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_8 $$ if ((numToken = tok.countTokens()) < 1) [ FD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_11 $$ code = tok.nextToken()[ CD ]
Line_4 $$ String code-->Line_11 $$ code = tok.nextToken()[ FD ]
Line_11 $$ code = tok.nextToken()-->Line_11 $$ code = tok.nextToken()[ FD ]
Line_11 $$ code = tok.nextToken()-->Line_11 $$ code = tok.nextToken()[ CD ]
Line_7 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_11 $$ code = tok.nextToken()[ FD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_12 $$ if (code.equals("#")) [ CD ]
Line_4 $$ String code-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_12 $$ if (code.equals("#")) -->Line_12 $$ if (code.equals("#")) [ CD ]
Line_4 $$ String code-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_16 $$ for (int i = 0; i < numToken - 1; i++) [ CD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) [ CD ]
Line_16 $$ for (int i = 0; i < numToken - 1; i++) -->Line_16 $$ for (int i = 0; i < numToken - 1; i++) [ CD ]
Line_16 $$ for (int i = 0; i < numToken - 1; i++) -->Line_16 $$ for (int i = 0; i < numToken - 1; i++) [ CD ]
Line_16 $$ for (int i = 0; i < numToken - 1; i++) -->Line_16 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_16 $$ for (int i = 0; i < numToken - 1; i++) -->Line_17 $$ xy[i] = Integer.parseInt(tok.nextToken())[ CD ]
Line_17 $$ xy[i] = Integer.parseInt(tok.nextToken())-->Line_17 $$ xy[i] = Integer.parseInt(tok.nextToken())[ CD ]
Line_7 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_17 $$ xy[i] = Integer.parseInt(tok.nextToken())[ FD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_19 $$ if (code.equals("d")) [ CD ]
Line_4 $$ String code-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_19 $$ if (code.equals("d")) -->Line_19 $$ if (code.equals("d")) [ CD ]
Line_4 $$ String code-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_19 $$ if (code.equals("d")) -->Line_21 $$ /* dimensions (format: d x y z) */[ CD ]
Line_6 $$ int numToken = 0-->Line_21 $$ /* dimensions (format: d x y z) */[ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_21 $$ /* dimensions (format: d x y z) */[ FD ]
Line_21 $$ /* dimensions (format: d x y z) */-->Line_28 $$ if (width < 1 || height < 1 || depth < 1)[ CD ]
Line_19 $$ if (code.equals("d")) -->Line_31 $$ if (code.equals("p")) [ CD ]
Line_4 $$ String code-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_31 $$ if (code.equals("p")) -->Line_31 $$ if (code.equals("p")) [ CD ]
Line_4 $$ String code-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_31 $$ if (code.equals("p")) -->Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */[ CD ]
Line_6 $$ int numToken = 0-->Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */[ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */[ FD ]
Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */-->Line_36 $$ Coordinate srcPtr = Coordinate.alloc(xy[0], xy[1], xy[2])[ CD ]
Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */-->Line_37 $$ Coordinate dstPtr = Coordinate.alloc(xy[3], xy[4], xy[5])[ CD ]
Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */-->Line_38 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) [ CD ]
Line_38 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_38 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) [ CD ]
Line_38 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_42 $$ Pair coordinatePairPtr = Pair.alloc(srcPtr, dstPtr)[ CD ]
Line_38 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_43 $$ boolean status = workListPtr.insert(coordinatePairPtr)[ CD ]
Line_38 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_44 $$ srcVectorPtr.vector_pushBack(srcPtr)[ CD ]
Line_38 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_45 $$ dstVectorPtr.vector_pushBack(dstPtr)[ CD ]
Line_31 $$ if (code.equals("p")) -->Line_48 $$ if (code.equals("w")) [ CD ]
Line_4 $$ String code-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_48 $$ if (code.equals("w")) -->Line_48 $$ if (code.equals("w")) [ CD ]
Line_4 $$ String code-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_48 $$ if (code.equals("w")) -->Line_50 $$ /* walls (format: w x y z) */[ CD ]
Line_6 $$ int numToken = 0-->Line_50 $$ /* walls (format: w x y z) */[ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_50 $$ /* walls (format: w x y z) */[ FD ]
Line_50 $$ /* walls (format: w x y z) */-->Line_53 $$ Coordinate wallPtr = Coordinate.alloc(xy[0], xy[1], xy[2])[ CD ]
Line_50 $$ /* walls (format: w x y z) */-->Line_54 $$ wallVectorPtr.vector_pushBack(wallPtr)[ CD ]
Line_3 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_59 $$ if (isParseError) [ CD ]
Line_59 $$ if (isParseError) -->Line_60 $$ /* Error */[ CD ]
Line_59 $$ if (isParseError) -->Line_61 $$ System.exit(1)[ CD ]
Line_2 $$ public void readMaze(String inputFileName) -->Line_64 $$ in.close()[ CD ]
Line_7 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_8 $$ if ((numToken = tok.countTokens()) < 1) [ FD ]
Line_7 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_11 $$ code = tok.nextToken()[ FD ]
Line_4 $$ String code-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_4 $$ String code-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_12 $$ if (code.equals("#")) [ FD ]
Line_4 $$ String code-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_4 $$ String code-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_19 $$ if (code.equals("d")) [ FD ]
Line_6 $$ int numToken = 0-->Line_21 $$ /* dimensions (format: d x y z) */[ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_21 $$ /* dimensions (format: d x y z) */[ FD ]
Line_4 $$ String code-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_4 $$ String code-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_31 $$ if (code.equals("p")) [ FD ]
Line_6 $$ int numToken = 0-->Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */[ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_32 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */[ FD ]
Line_4 $$ String code-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_4 $$ String code-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_11 $$ code = tok.nextToken()-->Line_48 $$ if (code.equals("w")) [ FD ]
Line_6 $$ int numToken = 0-->Line_50 $$ /* walls (format: w x y z) */[ FD ]
Line_8 $$ if ((numToken = tok.countTokens()) < 1) -->Line_50 $$ /* walls (format: w x y z) */[ FD ]
Line_16 $$ for (int i = 0; i < numToken - 1; i++) -->Line_16 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_16 $$ for (int i = 0; i < numToken - 1; i++) -->Line_16 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_16 $$ for (int i = 0; i < numToken - 1; i++) -->Line_16 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
