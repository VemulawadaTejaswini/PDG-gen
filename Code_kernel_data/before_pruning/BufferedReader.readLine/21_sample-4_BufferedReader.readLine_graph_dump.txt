Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testReaderOnClientAsResponseEntity() [ CD ]
Line_2 $$ public void testReaderOnClientAsResponseEntity() -->Line_3 $$ Response response = target().path("test/getReader").request().get()[ CD ]
Line_3 $$ Response response = target().path("test/getReader").request().get()-->Line_3 $$ target().path("test/getReader").request().get()[ CD ]
Line_2 $$ public void testReaderOnClientAsResponseEntity() -->Line_4 $$ assertEquals(200, response.getStatus())[ CD ]
Line_3 $$ Response response = target().path("test/getReader").request().get()-->Line_4 $$ response.getStatus()[ FD ]
Line_2 $$ public void testReaderOnClientAsResponseEntity() -->Line_5 $$ final Reader reader = response.readEntity(Reader.class)[ CD ]
Line_5 $$ final Reader reader = response.readEntity(Reader.class)-->Line_5 $$ response.readEntity(Reader.class)[ CD ]
Line_3 $$ Response response = target().path("test/getReader").request().get()-->Line_5 $$ response.readEntity(Reader.class)[ FD ]
Line_2 $$ public void testReaderOnClientAsResponseEntity() -->Line_6 $$ assertNotNull(reader)[ CD ]
Line_5 $$ final Reader reader = response.readEntity(Reader.class)-->Line_6 $$ assertNotNull(reader)[ FD ]
Line_2 $$ public void testReaderOnClientAsResponseEntity() -->Line_7 $$ BufferedReader br = new BufferedReader(reader)[ CD ]
Line_2 $$ public void testReaderOnClientAsResponseEntity() -->Line_8 $$ assertEquals(GET_READER_RESPONSE, br.readLine())[ CD ]
Line_7 $$ BufferedReader br = new BufferedReader(reader)-->Line_8 $$ br.readLine()[ FD ]
