Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void testDuplicate() [ CD ]
Line_2 $$ public void testDuplicate() -->Line_3 $$ assertTrue(CatalogUtilities.getRedirect(URI.create(PIZZA_NS), catalog) == null)[ CD ]
Line_2 $$ public void testDuplicate() -->Line_4 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)[ CD ]
Line_4 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)-->Line_4 $$ CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)[ CD ]
Line_2 $$ public void testDuplicate() -->Line_5 $$ assertTrue(duplicateRedirect.equals(new File(TEST_DIR, PIZZA_FILE).toURI()) || duplicateRedirect.equals(new File(TEST_DIR, AMINO_ACID_FILE).toURI()))[ CD ]
Line_4 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)-->Line_5 $$ duplicateRedirect.equals(new File(TEST_DIR, PIZZA_FILE).toURI())[ FD ]
Line_4 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)-->Line_5 $$ duplicateRedirect.equals(new File(TEST_DIR, AMINO_ACID_FILE).toURI())[ FD ]
