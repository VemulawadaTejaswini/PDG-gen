Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void update(File inputFile, MetaFileReader mfr, RangeLoader rangeLoader, MakeContext mc, File newFile) [ CD ]
Line_2 $$ public void update(File inputFile, MetaFileReader mfr, RangeLoader rangeLoader, MakeContext mc, File newFile) -->Line_3 $$ log.trace("number of map entries: " + mc.fileMap.length)[ CD ]
Line_2 $$ public void update(File inputFile, MetaFileReader mfr, RangeLoader rangeLoader, MakeContext mc, File newFile) -->Line_4 $$ for (int i = 0; i < mc.fileMap.length; i++) [ CD ]
Line_2 $$ public void update(File inputFile, MetaFileReader mfr, RangeLoader rangeLoader, MakeContext mc, File newFile) -->Line_2 $$ public void update(File inputFile, MetaFileReader mfr, RangeLoader rangeLoader, MakeContext mc, File newFile) [ CD ]
Line_4 $$ for (int i = 0; i < mc.fileMap.length; i++) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < mc.fileMap.length; i++) -->Line_4 $$ i++[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ for (int i = 0; i < mc.fileMap.length; i++) -->Line_5 $$ mc.fileOffset = mc.fileMap[i][ CD ]
Line_4 $$ for (int i = 0; i < mc.fileMap.length; i++) -->Line_6 $$ if (mc.fileOffset != -1) [ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_7 $$ log.trace("  read block from local file: " + mc.fileOffset)[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_8 $$ rChannel.read(buffer, mc.fileOffset)[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_9 $$ buffer.flip()[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_10 $$ wChannel.write(buffer)[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_11 $$ buffer.clear()[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_13 $$ log.trace("   read block from remote file")[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_14 $$ if (!mc.rangeQueue) [ CD ]
Line_14 $$ if (!mc.rangeQueue) -->Line_14 $$ !mc.rangeQueue[ CD ]
Line_14 $$ if (!mc.rangeQueue) -->Line_15 $$ rangeLookUp(i, mfr.getBlocksize(), mc)[ CD ]
Line_4 $$ int i = 0-->Line_15 $$ rangeLookUp(i, mfr.getBlocksize(), mc)[ FD ]
Line_14 $$ if (!mc.rangeQueue) -->Line_16 $$ rangeList.size()[ CD ]
Line_14 $$ if (!mc.rangeQueue) -->Line_17 $$ rangeLoader.get(rangeList)[ CD ]
Line_14 $$ if (!mc.rangeQueue) -->Line_19 $$ log.trace("     already have queued ranges: " + rangeList.size())[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_21 $$ calcBlockLength(i, mfr.getBlocksize(), (int) mfr.getLength())[ CD ]
Line_4 $$ int i = 0-->Line_21 $$ calcBlockLength(i, mfr.getBlocksize(), (int) mfr.getLength())[ FD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_22 $$ int offset = (range - rangeList.size()) * mfr.getBlocksize()[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_23 $$ buffer.put(data, offset, blockLength)[ CD ]
Line_22 $$ int offset = (range - rangeList.size()) * mfr.getBlocksize()-->Line_23 $$ buffer.put(data, offset, blockLength)[ FD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_24 $$ buffer.flip()[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_25 $$ wChannel.write(buffer)[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_26 $$ buffer.clear()[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_27 $$ rangeList.remove(0)[ CD ]
Line_6 $$ if (mc.fileOffset != -1) -->Line_28 $$ if (rangeList.isEmpty()) [ CD ]
Line_28 $$ if (rangeList.isEmpty()) -->Line_28 $$ rangeList.isEmpty()[ CD ]
Line_28 $$ if (rangeList.isEmpty()) -->Line_29 $$ mc.rangeQueue = false[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < mc.fileMap.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < mc.fileMap.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ int i = 0-->Line_15 $$ rangeLookUp(i, mfr.getBlocksize(), mc)[ FD ]
Line_4 $$ int i = 0-->Line_21 $$ calcBlockLength(i, mfr.getBlocksize(), (int) mfr.getLength())[ FD ]
Line_22 $$ int offset = (range - rangeList.size()) * mfr.getBlocksize()-->Line_23 $$ buffer.put(data, offset, blockLength)[ FD ]
