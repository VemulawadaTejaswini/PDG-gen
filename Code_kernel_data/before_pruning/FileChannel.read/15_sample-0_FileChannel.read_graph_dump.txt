Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) [ CD ]
Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) -->Line_4 $$ FileChannel fc = fis.getChannel()[ CD ]
Line_4 $$ FileChannel fc = fis.getChannel()-->Line_4 $$ fis.getChannel()[ CD ]
Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) -->Line_5 $$ if (fc.size() >= buffer.capacity() + rearOffset) [ CD ]
Line_4 $$ FileChannel fc = fis.getChannel()-->Line_5 $$ fc.size()[ FD ]
Line_5 $$ if (fc.size() >= buffer.capacity() + rearOffset) -->Line_6 $$ fc.position(fc.size() - buffer.capacity() - rearOffset)[ CD ]
Line_4 $$ FileChannel fc = fis.getChannel()-->Line_6 $$ fc.position(fc.size() - buffer.capacity() - rearOffset)[ FD ]
Line_4 $$ FileChannel fc = fis.getChannel()-->Line_6 $$ fc.size()[ FD ]
Line_5 $$ if (fc.size() >= buffer.capacity() + rearOffset) -->Line_8 $$ fc.position(0)[ CD ]
Line_4 $$ FileChannel fc = fis.getChannel()-->Line_8 $$ fc.position(0)[ FD ]
Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) -->Line_10 $$ while (totalRead < buffer.capacity() && totalRead < fc.size()) [ CD ]
Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) -->Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) [ CD ]
Line_4 $$ FileChannel fc = fis.getChannel()-->Line_10 $$ fc.size()[ FD ]
Line_10 $$ while (totalRead < buffer.capacity() && totalRead < fc.size()) -->Line_11 $$ fc.read(buffer)[ CD ]
Line_4 $$ FileChannel fc = fis.getChannel()-->Line_11 $$ fc.read(buffer)[ FD ]
Line_10 $$ while (totalRead < buffer.capacity() && totalRead < fc.size()) -->Line_13 $$ if (read == 0 || read == -1)[ CD ]
Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) -->Line_16 $$ buffer.limit(totalRead)[ CD ]
Line_2 $$ public void fillBuffer(ByteBuffer buffer, File file, int rearOffset) -->Line_17 $$ IOUtils.close(fis)[ CD ]
