Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) [ CD ]
Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_3 $$ final Charset charset = Charset.forName(encoding)[ CD ]
Line_3 $$ final Charset charset = Charset.forName(encoding)-->Line_3 $$ Charset.forName(encoding)[ CD ]
Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_4 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)[ CD ]
Line_4 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_4 $$ charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)[ CD ]
Line_3 $$ final Charset charset = Charset.forName(encoding)-->Line_4 $$ charset.newDecoder()[ FD ]
Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_6 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())[ CD ]
Line_4 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_6 $$ decoder.averageCharsPerByte()[ FD ]
Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_7 $$ CharBuffer out = CharBuffer.allocate(n)[ CD ]
Line_7 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_7 $$ CharBuffer.allocate(n)[ CD ]
Line_6 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())-->Line_7 $$ CharBuffer.allocate(n)[ FD ]
Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_8 $$ while (offset < isize) [ CD ]
Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_2 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) [ CD ]
Line_8 $$ while (offset < isize) -->Line_9 $$ channel.read(in)[ CD ]
Line_8 $$ while (offset < isize) -->Line_10 $$ in.flip()[ CD ]
Line_8 $$ while (offset < isize) -->Line_11 $$ in.limit()[ CD ]
Line_8 $$ while (offset < isize) -->Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)[ CD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_12 $$ decoder.decode(in, out, offset >= isize)[ CD ]
Line_4 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_12 $$ decoder.decode(in, out, offset >= isize)[ FD ]
Line_7 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_12 $$ decoder.decode(in, out, offset >= isize)[ FD ]
Line_8 $$ while (offset < isize) -->Line_13 $$ final int remainingBytes = in.remaining()[ CD ]
Line_13 $$ final int remainingBytes = in.remaining()-->Line_13 $$ in.remaining()[ CD ]
Line_8 $$ while (offset < isize) -->Line_14 $$ if (cr.isOverflow()) [ CD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_14 $$ if (cr.isOverflow()) [ FD ]
Line_14 $$ if (cr.isOverflow()) -->Line_14 $$ cr.isOverflow()[ CD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_14 $$ cr.isOverflow()[ FD ]
Line_14 $$ if (cr.isOverflow()) -->Line_15 $$ int totalRemainingBytes = isize - offset + remainingBytes[ CD ]
Line_14 $$ if (cr.isOverflow()) -->Line_16 $$ if (totalRemainingBytes > 0) [ CD ]
Line_15 $$ int totalRemainingBytes = isize - offset + remainingBytes-->Line_16 $$ if (totalRemainingBytes > 0) [ FD ]
Line_16 $$ if (totalRemainingBytes > 0) -->Line_17 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())[ CD ]
Line_17 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())-->Line_17 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())[ FD ]
Line_6 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())-->Line_17 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())[ FD ]
Line_4 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_17 $$ decoder.maxCharsPerByte()[ FD ]
Line_16 $$ if (totalRemainingBytes > 0) -->Line_18 $$ CharBuffer o = CharBuffer.allocate(n)[ CD ]
Line_18 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_18 $$ CharBuffer.allocate(n)[ CD ]
Line_17 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())-->Line_18 $$ CharBuffer.allocate(n)[ FD ]
Line_6 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())-->Line_18 $$ CharBuffer.allocate(n)[ FD ]
Line_16 $$ if (totalRemainingBytes > 0) -->Line_19 $$ out.flip()[ CD ]
Line_7 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_19 $$ out.flip()[ FD ]
Line_16 $$ if (totalRemainingBytes > 0) -->Line_20 $$ o.put(out)[ CD ]
Line_18 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_20 $$ o.put(out)[ FD ]
Line_7 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_20 $$ o.put(out)[ FD ]
Line_16 $$ if (totalRemainingBytes > 0) -->Line_21 $$ out = o[ CD ]
Line_21 $$ out = o-->Line_21 $$ out = o[ FD ]
Line_7 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_21 $$ out = o[ FD ]
Line_18 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_21 $$ out = o[ FD ]
Line_14 $$ if (cr.isOverflow()) -->Line_23 $$ if (!cr.isUnderflow()) [ CD ]
Line_23 $$ if (!cr.isUnderflow()) -->Line_23 $$ !cr.isUnderflow()[ CD ]
Line_23 $$ !cr.isUnderflow()-->Line_23 $$ cr.isUnderflow()[ CD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_23 $$ cr.isUnderflow()[ FD ]
Line_23 $$ if (!cr.isUnderflow()) -->Line_24 $$ cr.throwException()[ CD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_24 $$ cr.throwException()[ FD ]
Line_8 $$ while (offset < isize) -->Line_26 $$ if (remainingBytes == 0) [ CD ]
Line_13 $$ final int remainingBytes = in.remaining()-->Line_26 $$ if (remainingBytes == 0) [ FD ]
Line_26 $$ if (remainingBytes == 0) -->Line_27 $$ in.clear()[ CD ]
Line_26 $$ if (remainingBytes == 0) -->Line_29 $$ byte[] rest = new byte[remainingBytes][ CD ]
Line_26 $$ if (remainingBytes == 0) -->Line_30 $$ in.get(rest)[ CD ]
Line_29 $$ byte[] rest = new byte[remainingBytes]-->Line_30 $$ in.get(rest)[ FD ]
Line_26 $$ if (remainingBytes == 0) -->Line_31 $$ in.clear()[ CD ]
Line_26 $$ if (remainingBytes == 0) -->Line_32 $$ in.put(rest)[ CD ]
Line_29 $$ byte[] rest = new byte[remainingBytes]-->Line_32 $$ in.put(rest)[ FD ]
Line_21 $$ out = o-->Line_12 $$ decoder.decode(in, out, offset >= isize)[ FD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_14 $$ if (cr.isOverflow()) [ FD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_14 $$ cr.isOverflow()[ FD ]
Line_15 $$ int totalRemainingBytes = isize - offset + remainingBytes-->Line_16 $$ if (totalRemainingBytes > 0) [ FD ]
Line_17 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())-->Line_18 $$ CharBuffer.allocate(n)[ FD ]
Line_21 $$ out = o-->Line_19 $$ out.flip()[ FD ]
Line_18 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_20 $$ o.put(out)[ FD ]
Line_21 $$ out = o-->Line_20 $$ o.put(out)[ FD ]
Line_18 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_21 $$ out = o[ FD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_23 $$ cr.isUnderflow()[ FD ]
Line_12 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_24 $$ cr.throwException()[ FD ]
Line_13 $$ final int remainingBytes = in.remaining()-->Line_26 $$ if (remainingBytes == 0) [ FD ]
Line_29 $$ byte[] rest = new byte[remainingBytes]-->Line_30 $$ in.get(rest)[ FD ]
Line_29 $$ byte[] rest = new byte[remainingBytes]-->Line_32 $$ in.put(rest)[ FD ]
