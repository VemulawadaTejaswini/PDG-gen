Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) [ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_3 $$ inputBuffer.clear()[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_4 $$ inputBuffer.limit(BlockCompressedStreamConstants.BLOCK_HEADER_LENGTH)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_5 $$ channel.read(inputBuffer)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_6 $$ inputBuffer.flip()[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_7 $$ if (inputBuffer.remaining() != BlockCompressedStreamConstants.BLOCK_HEADER_LENGTH)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_9 $$ if (unpackUByte8(inputBuffer, 0) != BlockCompressedStreamConstants.GZIP_ID1 || unpackUByte8(inputBuffer, 1) != BlockCompressedStreamConstants.GZIP_ID2 || unpackUByte8(inputBuffer, 3) != BlockCompressedStreamConstants.GZIP_FLG || unpackUInt16(inputBuffer, 10) != BlockCompressedStreamConstants.GZIP_XLEN || unpackUByte8(inputBuffer, 12) != BlockCompressedStreamConstants.BGZF_ID1 || unpackUByte8(inputBuffer, 13) != BlockCompressedStreamConstants.BGZF_ID2) [ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_17 $$ inputBuffer.position(BlockCompressedStreamConstants.BLOCK_LENGTH_OFFSET)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_19 $$ inputBuffer.limit(bufferSize)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_20 $$ inputBuffer.position(BlockCompressedStreamConstants.BLOCK_HEADER_LENGTH)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_21 $$ channel.read(inputBuffer)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_22 $$ inputBuffer.getInt(inputBuffer.limit() - 4)[ CD ]
Line_2 $$ public void readBGZFBlock(final FileInputStream inputStream, final long blockAddress) -->Line_23 $$ inputBuffer.flip()[ CD ]
