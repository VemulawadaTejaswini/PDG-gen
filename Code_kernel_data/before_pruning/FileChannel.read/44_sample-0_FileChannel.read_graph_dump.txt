Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void storeFilesUpgradeable(File neoStoreFile) [ CD ]
Line_5 $$ String expectedVersion = fileNamesToExpectedVersions.get(fileName)-->Line_5 $$ fileNamesToExpectedVersions.get(fileName)[ CD ]
Line_3 $$ String fileName-->Line_5 $$ fileNamesToExpectedVersions.get(fileName)[ FD ]
Line_7 $$ byte[] expectedVersionBytes = UTF8.encode(expectedVersion)-->Line_7 $$ UTF8.encode(expectedVersion)[ CD ]
Line_5 $$ String expectedVersion = fileNamesToExpectedVersions.get(fileName)-->Line_7 $$ UTF8.encode(expectedVersion)[ FD ]
Line_11 $$ if (!storeFile.exists()) -->Line_11 $$ !storeFile.exists()[ CD ]
Line_11 $$ !storeFile.exists()-->Line_11 $$ storeFile.exists()[ CD ]
Line_10 $$ File storeFile = new File(storeDirectory, fileName)-->Line_11 $$ storeFile.exists()[ FD ]
Line_11 $$ if (!storeFile.exists()) -->Line_12 $$ return false;[ CD ]
Line_6 $$ FileChannel fileChannel = null-->Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()[ FD ]
Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()[ FD ]
Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_14 $$ new RandomAccessFile(storeFile, "r").getChannel()[ CD ]
Line_6 $$ FileChannel fileChannel = null-->Line_15 $$ fileChannel.position(fileChannel.size() - expectedVersionBytes.length)[ FD ]
Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_15 $$ fileChannel.position(fileChannel.size() - expectedVersionBytes.length)[ FD ]
Line_6 $$ FileChannel fileChannel = null-->Line_15 $$ fileChannel.size()[ FD ]
Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_15 $$ fileChannel.size()[ FD ]
Line_6 $$ FileChannel fileChannel = null-->Line_17 $$ fileChannel.read(ByteBuffer.wrap(foundVersionBytes))[ FD ]
Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_17 $$ fileChannel.read(ByteBuffer.wrap(foundVersionBytes))[ FD ]
Line_16 $$ byte[] foundVersionBytes = new byte[expectedVersionBytes.length]-->Line_17 $$ ByteBuffer.wrap(foundVersionBytes)[ FD ]
Line_18 $$ if (!expectedVersion.equals(UTF8.decode(foundVersionBytes))) -->Line_18 $$ !expectedVersion.equals(UTF8.decode(foundVersionBytes))[ CD ]
Line_18 $$ !expectedVersion.equals(UTF8.decode(foundVersionBytes))-->Line_18 $$ expectedVersion.equals(UTF8.decode(foundVersionBytes))[ CD ]
Line_5 $$ String expectedVersion = fileNamesToExpectedVersions.get(fileName)-->Line_18 $$ expectedVersion.equals(UTF8.decode(foundVersionBytes))[ FD ]
Line_16 $$ byte[] foundVersionBytes = new byte[expectedVersionBytes.length]-->Line_18 $$ UTF8.decode(foundVersionBytes)[ FD ]
Line_18 $$ if (!expectedVersion.equals(UTF8.decode(foundVersionBytes))) -->Line_20 $$ return false;[ CD ]
Line_6 $$ FileChannel fileChannel = null-->Line_27 $$ if (fileChannel != null) [ FD ]
Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_27 $$ if (fileChannel != null) [ FD ]
Line_6 $$ FileChannel fileChannel = null-->Line_31 $$ fileChannel.close()[ FD ]
Line_14 $$ fileChannel = new RandomAccessFile(storeFile, "r").getChannel()-->Line_31 $$ fileChannel.close()[ FD ]
