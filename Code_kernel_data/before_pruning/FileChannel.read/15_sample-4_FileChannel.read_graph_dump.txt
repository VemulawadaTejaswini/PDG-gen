Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void readFile(final File file) [ CD ]
Line_2 $$ public void readFile(final File file) -->Line_3 $$ final FileChannel channel = new FileInputStream(file).getChannel()[ CD ]
Line_3 $$ final FileChannel channel = new FileInputStream(file).getChannel()-->Line_3 $$ new FileInputStream(file).getChannel()[ CD ]
Line_2 $$ public void readFile(final File file) -->Line_4 $$ final long bytesTotal = channel.size()[ CD ]
Line_4 $$ final long bytesTotal = channel.size()-->Line_4 $$ channel.size()[ CD ]
Line_3 $$ final FileChannel channel = new FileInputStream(file).getChannel()-->Line_4 $$ channel.size()[ FD ]
Line_2 $$ public void readFile(final File file) -->Line_5 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)[ CD ]
Line_5 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)-->Line_5 $$ ByteBuffer.allocateDirect((int) bytesTotal)[ CD ]
Line_2 $$ public void readFile(final File file) -->Line_6 $$ do [ CD ]
Line_2 $$ public void readFile(final File file) -->Line_2 $$ public void readFile(final File file) [ CD ]
Line_4 $$ final long bytesTotal = channel.size()-->Line_6 $$ do [ FD ]
Line_6 $$ do -->Line_7 $$ channel.read(buffer)[ CD ]
Line_3 $$ final FileChannel channel = new FileInputStream(file).getChannel()-->Line_7 $$ channel.read(buffer)[ FD ]
Line_5 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)-->Line_7 $$ channel.read(buffer)[ FD ]
Line_2 $$ public void readFile(final File file) -->Line_9 $$ buffer.flip()[ CD ]
Line_5 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)-->Line_9 $$ buffer.flip()[ FD ]
