Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void isSameContent(File file, byte[] bytes, int length) [ CD ]
Line_2 $$ public void isSameContent(File file, byte[] bytes, int length) -->Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(buffer)[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(buffer)-->Line_3 $$ ByteBuffer.wrap(buffer)[ CD ]
Line_2 $$ public void isSameContent(File file, byte[] bytes, int length) -->Line_4 $$ while (((bufferLength = fileChannel.read(byteBuffer)) > 0) && (bufferIndex < length)) [ CD ]
Line_2 $$ public void isSameContent(File file, byte[] bytes, int length) -->Line_2 $$ public void isSameContent(File file, byte[] bytes, int length) [ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(buffer)-->Line_4 $$ fileChannel.read(byteBuffer)[ FD ]
Line_4 $$ while (((bufferLength = fileChannel.read(byteBuffer)) > 0) && (bufferIndex < length)) -->Line_6 $$ for (int i = 0; i < bufferLength; i++) [ CD ]
Line_4 $$ while (((bufferLength = fileChannel.read(byteBuffer)) > 0) && (bufferIndex < length)) -->Line_4 $$ while (((bufferLength = fileChannel.read(byteBuffer)) > 0) && (bufferIndex < length)) [ CD ]
Line_6 $$ for (int i = 0; i < bufferLength; i++) -->Line_6 $$ int i = 0[ CD ]
Line_6 $$ for (int i = 0; i < bufferLength; i++) -->Line_6 $$ i++[ CD ]
Line_6 $$ int i = 0-->Line_6 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < bufferLength; i++) -->Line_7 $$ if (buffer[i] != bytes[bufferIndex++]) [ CD ]
Line_7 $$ if (buffer[i] != bytes[bufferIndex++]) -->Line_8 $$ return false;[ CD ]
Line_4 $$ while (((bufferLength = fileChannel.read(byteBuffer)) > 0) && (bufferIndex < length)) -->Line_11 $$ byteBuffer.clear()[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(buffer)-->Line_11 $$ byteBuffer.clear()[ FD ]
Line_2 $$ public void isSameContent(File file, byte[] bytes, int length) -->Line_13 $$ if ((bufferIndex != length) || (bufferLength != -1)) [ CD ]
Line_13 $$ if ((bufferIndex != length) || (bufferLength != -1)) -->Line_14 $$ return false;[ CD ]
Line_13 $$ if ((bufferIndex != length) || (bufferLength != -1)) -->Line_17 $$ return true;[ CD ]
Line_6 $$ int i = 0-->Line_6 $$ for (int i = 0; i < bufferLength; i++) [ FD ]
Line_6 $$ int i = 0-->Line_6 $$ for (int i = 0; i < bufferLength; i++) [ FD ]
Line_6 $$ int i = 0-->Line_6 $$ i++[ FD ]
