Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_9 $$ connection.addRequestProperty(conditionName, conditionValue)  [FD]
Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_10 $$ assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode())  [FD]
Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_11 $$ assertEquals("", readAscii(connection))  [FD]
Line_3 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_7 $$ assertEquals("A", readAscii(url.openConnection()))  [CD]
Line_6 $$ URL url = server.getUrl("/") --> Line_7 $$ assertEquals("A", readAscii(url.openConnection()))  [FD]
Line_3 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()  [CD]
Line_6 $$ URL url = server.getUrl("/") --> Line_8 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()  [FD]
Line_3 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_6 $$ URL url = server.getUrl("/")  [CD]
Line_3 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_9 $$ connection.addRequestProperty(conditionName, conditionValue)  [CD]
Line_3 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_10 $$ assertEquals(HttpURLConnection.HTTP_NOT_MODIFIED, connection.getResponseCode())  [CD]
Line_3 $$ public void assertClientSuppliedCondition(MockResponse seed, String conditionName, String conditionValue) --> Line_11 $$ assertEquals("", readAscii(connection))  [CD]
