Line_2 $$ public void hashFiles(List<File> files, int pieceLenght) --> Line_11 $$ FileInputStream fis = new FileInputStream(file) [CD]
Line_2 $$ public void hashFiles(List<File> files, int pieceLenght) --> Line_12 $$ FileChannel channel = fis.getChannel() [CD]
Line_11 $$ FileInputStream fis = new FileInputStream(file) --> Line_12 $$ FileChannel channel = fis.getChannel() [FD]
Line_2 $$ public void hashFiles(List<File> files, int pieceLenght) --> Line_13 $$ while (channel.read(buffer) > 0) [CD]
Line_12 $$ FileChannel channel = fis.getChannel() --> Line_13 $$ while (channel.read(buffer) > 0) [FD]
Line_13 $$ while (channel.read(buffer) > 0) --> Line_14 $$ if (buffer.remaining() == 0) [CD]
Line_14 $$ if (buffer.remaining() == 0) --> Line_15 $$ buffer.clear() [CD]
Line_14 $$ if (buffer.remaining() == 0) --> Line_16 $$ results.add(executor.submit(new CallableChunkHasher(buffer))) [CD]
Line_13 $$ while (channel.read(buffer) > 0) --> Line_18 $$ if (results.size() >= threads) [CD]
Line_18 $$ if (results.size() >= threads) --> Line_19 $$ accumulateHashes(hashes, results) [CD]
Line_13 $$ while (channel.read(buffer) > 0) --> Line_21 $$ if (channel.position() / (double) channel.size() * 100f > step) [CD]
Line_12 $$ FileChannel channel = fis.getChannel() --> Line_21 $$ if (channel.position() / (double) channel.size() * 100f > step) [FD]
Line_21 $$ if (channel.position() / (double) channel.size() * 100f > step) --> Line_22 $$ logger.info("  ... [CD]
