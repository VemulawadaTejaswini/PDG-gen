Line_2 $$ public void testFriendlyFormatWithTime_ReturnsYesterdayAndTime_WhenDateIsYesterday() --> Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE)) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE)) --> Line_4 $$ cal.add(Calendar.DAY_OF_YEAR, -1) [FD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE)) --> Line_5 $$ cal.set(Calendar.MINUTE, 30) [FD]
Line_2 $$ public void testFriendlyFormatWithTime_ReturnsYesterdayAndTime_WhenDateIsYesterday() --> Line_6 $$ assertEquals("Yesterday at 14:30", df.formatAsDateWithTime(cal.getTime())) [CD]
Line_3 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE)) --> Line_6 $$ assertEquals("Yesterday at 14:30", df.formatAsDateWithTime(cal.getTime())) [FD]
Line_2 $$ public void testFriendlyFormatWithTime_ReturnsYesterdayAndTime_WhenDateIsYesterday() --> Line_4 $$ cal.add(Calendar.DAY_OF_YEAR, -1) [CD]
Line_2 $$ public void testFriendlyFormatWithTime_ReturnsYesterdayAndTime_WhenDateIsYesterday() --> Line_5 $$ cal.set(Calendar.MINUTE, 30) [CD]
