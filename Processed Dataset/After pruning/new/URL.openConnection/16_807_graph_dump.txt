Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_6 $$ connection.setRequestMethod("GET")  [FD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_7 $$ connection.connect()  [FD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_8 $$ assertEquals(200, connection.getResponseCode())  [FD]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection() --> Line_9 $$ String contents = slurpContents(connection)  [FD]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) --> Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()  [CD]
Line_4 $$ URL url = new URL(jtURL + "/taskgraph?jobid=" + job.toString() + "&type=map") --> Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()  [FD]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) --> Line_4 $$ URL url = new URL(jtURL + "/taskgraph?jobid=" + job.toString() + "&type=map")  [CD]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) --> Line_6 $$ connection.setRequestMethod("GET")  [CD]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) --> Line_7 $$ connection.connect()  [CD]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) --> Line_8 $$ assertEquals(200, connection.getResponseCode())  [CD]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) --> Line_9 $$ String contents = slurpContents(connection)  [CD]
