Line_2 $$ public void call() --> Line_3 $$ Map<String, String> params = new HashMap<String, String>() [CD]
Line_2 $$ public void call() --> Line_5 $$ URL url = createURL(MockCoordinatorEngineService.JOB_ID + 1, params) [CD]
Line_3 $$ Map<String, String> params = new HashMap<String, String>() --> Line_5 $$ URL url = createURL(MockCoordinatorEngineService.JOB_ID + 1, params) [FD]
Line_2 $$ public void call() --> Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() [CD]
Line_5 $$ URL url = createURL(MockCoordinatorEngineService.JOB_ID + 1, params) --> Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() [FD]
Line_2 $$ public void call() --> Line_7 $$ conn.setRequestMethod("PUT") [CD]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_7 $$ conn.setRequestMethod("PUT") [FD]
Line_2 $$ public void call() --> Line_8 $$ conn.setRequestProperty("content-type", RestConstants.XML_CONTENT_TYPE) [CD]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_8 $$ conn.setRequestProperty("content-type", RestConstants.XML_CONTENT_TYPE) [FD]
Line_2 $$ public void call() --> Line_9 $$ conn.setDoOutput(true) [CD]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_9 $$ conn.setDoOutput(true) [FD]
Line_2 $$ public void call() --> Line_10 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode()) [CD]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection() --> Line_10 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode()) [FD]
