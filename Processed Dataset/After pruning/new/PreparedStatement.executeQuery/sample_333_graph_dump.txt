Line_3 $$ public void testAmbiguousColumn() --> Line_7 $$ statement.executeQuery()  [CD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_7 $$ statement.executeQuery()  [FD]
Line_12 $$ public void testAmbiguousStaticSelect() --> Line_16 $$ statement.executeQuery()  [CD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_16 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_16 $$ statement.executeQuery()  [FD]
Line_21 $$ public void testJoinWithIncomparableJoinKeyTypes() --> Line_25 $$ statement.executeQuery()  [CD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_25 $$ statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_25 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_25 $$ statement.executeQuery()  [FD]
Line_30 $$ public void testFakeCFDynamicUpsert() --> Line_34 $$ statement.executeQuery()  [CD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_34 $$ statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_34 $$ statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_34 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_34 $$ statement.executeQuery()  [FD]
Line_39 $$ public void testDynamicFamilyException() --> Line_43 $$ statement.executeQuery()  [CD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_43 $$ statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_43 $$ statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_43 $$ statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_43 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_43 $$ statement.executeQuery()  [FD]
Line_48 $$ public void testOrderByNotInSelectDistinct() --> Line_52 $$ statement.executeQuery()  [CD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_52 $$ statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_52 $$ statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_52 $$ statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_52 $$ statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_52 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_52 $$ statement.executeQuery()  [FD]
Line_57 $$ public void testDecimalSubtraction1Expression() --> Line_61 $$ ResultSet rs = statement.executeQuery()  [CD]
Line_60 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_61 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_61 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_61 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_61 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_61 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_61 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_61 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_66 $$ public void testIntToDecimalDivideExpression() --> Line_70 $$ ResultSet rs = statement.executeQuery()  [CD]
Line_69 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_60 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_70 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_75 $$ public void testDivideByIntegerZero() --> Line_80 $$ statement.executeQuery()  [CD]
Line_79 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_80 $$ statement.executeQuery()  [FD]
Line_69 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_80 $$ statement.executeQuery()  [FD]
Line_60 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_80 $$ statement.executeQuery()  [FD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_80 $$ statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_80 $$ statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_80 $$ statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_80 $$ statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_80 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_80 $$ statement.executeQuery()  [FD]
Line_85 $$ public void testDynamicFamilyFunctionException() --> Line_89 $$ statement.executeQuery()  [CD]
Line_88 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_79 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_69 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_60 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_89 $$ statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_89 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_89 $$ statement.executeQuery()  [FD]
Line_94 $$ public void findUserIds(ResultSet[] results) --> Line_97 $$ results[0] = ps.executeQuery()  [CD]
Line_96 $$ PreparedStatement ps = conn.prepareStatement("select id from t_user") --> Line_97 $$ results[0] = ps.executeQuery()  [FD]
Line_102 $$ public void proc_test1_DeleteBeforeTrigger_select_table(int p1) --> Line_106 $$ ps.executeQuery()  [CD]
Line_104 $$ PreparedStatement ps = conn.prepareStatement("select updates from " + "table2 where table2.id = " + p1) --> Line_106 $$ ps.executeQuery()  [FD]
Line_96 $$ PreparedStatement ps = conn.prepareStatement("select id from t_user") --> Line_106 $$ ps.executeQuery()  [FD]
Line_111 $$ public void selectRows(ResultSet[] data1) --> Line_114 $$ data1[0] = ps1.executeQuery()  [CD]
Line_113 $$ PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET") --> Line_114 $$ data1[0] = ps1.executeQuery()  [FD]
Line_119 $$ public void findAllCoffeeBeverages(ResultSet[] coffeeBeverages) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [CD]
Line_88 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_79 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_69 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_60 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_122 $$ coffeeBeverages[0] = statement.executeQuery()  [FD]
Line_127 $$ public void hashmapReader() --> Line_130 $$ return ps.executeQuery();  [CD]
Line_129 $$ PreparedStatement ps = conn.prepareStatement("select intCol, hashmapCol from t_11") --> Line_130 $$ return ps.executeQuery();  [FD]
Line_104 $$ PreparedStatement ps = conn.prepareStatement("select updates from " + "table2 where table2.id = " + p1) --> Line_130 $$ return ps.executeQuery();  [FD]
Line_96 $$ PreparedStatement ps = conn.prepareStatement("select id from t_user") --> Line_130 $$ return ps.executeQuery();  [FD]
Line_135 $$ public void readFoos(ResultSet[] rs) --> Line_138 $$ rs[0] = ps1.executeQuery()  [CD]
Line_137 $$ PreparedStatement ps1 = conn.prepareStatement(SQL) --> Line_138 $$ rs[0] = ps1.executeQuery()  [FD]
Line_113 $$ PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET") --> Line_138 $$ rs[0] = ps1.executeQuery()  [FD]
Line_143 $$ public void selectFromSpecificSchema(int p1) --> Line_146 $$ ps.executeQuery()  [CD]
Line_145 $$ PreparedStatement ps = conn.prepareStatement("select * from mamta1.t12RoutineTest") --> Line_146 $$ ps.executeQuery()  [FD]
Line_129 $$ PreparedStatement ps = conn.prepareStatement("select intCol, hashmapCol from t_11") --> Line_146 $$ ps.executeQuery()  [FD]
Line_104 $$ PreparedStatement ps = conn.prepareStatement("select updates from " + "table2 where table2.id = " + p1) --> Line_146 $$ ps.executeQuery()  [FD]
Line_96 $$ PreparedStatement ps = conn.prepareStatement("select id from t_user") --> Line_146 $$ ps.executeQuery()  [FD]
Line_152 $$ public void testPartiallyQualifiedRVCInList() --> Line_156 $$ ResultSet rs = statement.executeQuery()  [CD]
Line_155 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_88 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_79 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_69 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_60 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_156 $$ ResultSet rs = statement.executeQuery()  [FD]
Line_161 $$ public void testCoelesceFunctionTypeMismatch() --> Line_165 $$ statement.executeQuery()  [CD]
Line_164 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_155 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_88 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_79 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_69 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_60 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_51 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_42 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_165 $$ statement.executeQuery()  [FD]
Line_24 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery) --> Line_165 $$ statement.executeQuery()  [FD]
Line_6 $$ PreparedStatement statement = conn.prepareStatement(query) --> Line_165 $$ statement.executeQuery()  [FD]
Line_170 $$ public void blobselect(ResultSet[] results) --> Line_174 $$ results[0] = st.executeQuery()  [CD]
Line_173 $$ PreparedStatement st = conn.prepareStatement("select * from lobCheckTwo") --> Line_174 $$ results[0] = st.executeQuery()  [FD]
Line_179 $$ public void testMutationUsingExecuteQueryShouldFail() --> Line_182 $$ stmt.executeQuery()  [CD]
Line_181 $$ PreparedStatement stmt = connection.prepareStatement("DELETE FROM " + ATABLE) --> Line_182 $$ stmt.executeQuery()  [FD]
Line_187 $$ public void getAllApplicants(ResultSet[] rs1) --> Line_190 $$ rs1[0] = ps1.executeQuery()  [CD]
Line_137 $$ PreparedStatement ps1 = conn.prepareStatement(SQL) --> Line_190 $$ rs1[0] = ps1.executeQuery()  [FD]
Line_113 $$ PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET") --> Line_190 $$ rs1[0] = ps1.executeQuery()  [FD]
Line_195 $$ public void getSplitTestRecords(ResultSet[] data1, ResultSet[] data2) --> Line_198 $$ data1[0] = ps1.executeQuery()  [CD]
Line_197 $$ PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET WHERE POSITION <= 2") --> Line_198 $$ data1[0] = ps1.executeQuery()  [FD]
Line_137 $$ PreparedStatement ps1 = conn.prepareStatement(SQL) --> Line_198 $$ data1[0] = ps1.executeQuery()  [FD]
Line_113 $$ PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET") --> Line_198 $$ data1[0] = ps1.executeQuery()  [FD]
Line_3 $$ public void testAmbiguousColumn() --> Line_6 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_12 $$ public void testAmbiguousStaticSelect() --> Line_15 $$ PreparedStatement statement = conn.prepareStatement(upsertquery)  [CD]
Line_21 $$ public void testJoinWithIncomparableJoinKeyTypes() --> Line_24 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_30 $$ public void testFakeCFDynamicUpsert() --> Line_33 $$ PreparedStatement statement = conn.prepareStatement(upsertquery)  [CD]
Line_39 $$ public void testDynamicFamilyException() --> Line_42 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_48 $$ public void testOrderByNotInSelectDistinct() --> Line_51 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_57 $$ public void testDecimalSubtraction1Expression() --> Line_60 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_66 $$ public void testIntToDecimalDivideExpression() --> Line_69 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_75 $$ public void testDivideByIntegerZero() --> Line_79 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_85 $$ public void testDynamicFamilyFunctionException() --> Line_88 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_94 $$ public void findUserIds(ResultSet[] results) --> Line_96 $$ PreparedStatement ps = conn.prepareStatement("select id from t_user")  [CD]
Line_102 $$ public void proc_test1_DeleteBeforeTrigger_select_table(int p1) --> Line_104 $$ PreparedStatement ps = conn.prepareStatement("select updates from " + "table2 where table2.id = " + p1)  [CD]
Line_111 $$ public void selectRows(ResultSet[] data1) --> Line_113 $$ PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET")  [CD]
Line_127 $$ public void hashmapReader() --> Line_129 $$ PreparedStatement ps = conn.prepareStatement("select intCol, hashmapCol from t_11")  [CD]
Line_135 $$ public void readFoos(ResultSet[] rs) --> Line_137 $$ PreparedStatement ps1 = conn.prepareStatement(SQL)  [CD]
Line_143 $$ public void selectFromSpecificSchema(int p1) --> Line_145 $$ PreparedStatement ps = conn.prepareStatement("select * from mamta1.t12RoutineTest")  [CD]
Line_152 $$ public void testPartiallyQualifiedRVCInList() --> Line_155 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_161 $$ public void testCoelesceFunctionTypeMismatch() --> Line_164 $$ PreparedStatement statement = conn.prepareStatement(query)  [CD]
Line_170 $$ public void blobselect(ResultSet[] results) --> Line_173 $$ PreparedStatement st = conn.prepareStatement("select * from lobCheckTwo")  [CD]
Line_179 $$ public void testMutationUsingExecuteQueryShouldFail() --> Line_181 $$ PreparedStatement stmt = connection.prepareStatement("DELETE FROM " + ATABLE)  [CD]
Line_195 $$ public void getSplitTestRecords(ResultSet[] data1, ResultSet[] data2) --> Line_197 $$ PreparedStatement ps1 = conn.prepareStatement("SELECT * FROM PLANET WHERE POSITION <= 2")  [CD]
