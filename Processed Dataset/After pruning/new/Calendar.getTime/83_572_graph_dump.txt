Line_4 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE)) --> Line_5 $$ cal.add(Calendar.DAY_OF_YEAR, 1)  [FD]
Line_4 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE)) --> Line_6 $$ cal.set(Calendar.MINUTE, 0)  [FD]
Line_4 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE)) --> Line_7 $$ assertEquals("Tomorrow", df.formatAsDateWithoutTime(cal.getTime()))  [FD]
Line_3 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() --> Line_4 $$ Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(DateUtils.APPLICATION_TIME_ZONE))  [CD]
Line_3 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() --> Line_7 $$ assertEquals("Tomorrow", df.formatAsDateWithoutTime(cal.getTime()))  [CD]
Line_3 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() --> Line_5 $$ cal.add(Calendar.DAY_OF_YEAR, 1)  [CD]
Line_3 $$ public void testFriendlyFormatWithoutTime_ReturnsTomorrow_WhenDateIsTomorrow() --> Line_6 $$ cal.set(Calendar.MINUTE, 0)  [CD]
