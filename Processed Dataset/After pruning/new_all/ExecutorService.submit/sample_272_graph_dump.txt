Line_3 $$ public void shutdown_waitingOver_abruptShutdown() --> Line_5 $$ backgroundExecutor.submit(new SleepingRunnable(1, 1000, pool))  [CD]
Line_3 $$ public void shutdown_waitingOver_abruptShutdown() --> Line_6 $$ backgroundExecutor.submit(new SleepingRunnable(2, 1000, pool))  [CD]
Line_3 $$ public void shutdown_waitingOver_abruptShutdown() --> Line_7 $$ backgroundExecutor.submit(new SleepingRunnable(3, 1000, pool))  [CD]
Line_3 $$ public void shutdown_waitingOver_abruptShutdown() --> Line_8 $$ backgroundExecutor.submit(new SleepingRunnable(4, 1000, pool))  [CD]
Line_3 $$ public void shutdown_waitingOver_abruptShutdown() --> Line_9 $$ backgroundExecutor.submit(new SleepingRunnable(5, 5000, pool))  [CD]
Line_15 $$ public void testNewCachedThreadPoolWithThreadFactory() --> Line_16 $$ executorService.submit(new NoopRunnable())  [CD]
Line_15 $$ public void testNewCachedThreadPoolWithThreadFactory() --> Line_17 $$ executorService.submit(new NoopRunnable())  [CD]
Line_22 $$ public void testNewCachedThreadPool() --> Line_23 $$ executorService.submit(new NoopRunnable())  [CD]
Line_22 $$ public void testNewCachedThreadPool() --> Line_24 $$ executorService.submit(new NoopRunnable())  [CD]
Line_40 $$ public void if_two_threads_wait_concurrently_then_both_of_them_will_read_the_same_output() --> Line_41 $$ Future<Boolean> t1 = executor.submit(new WaitForOutput("Runtime", process.subscribeToOutput()))  [CD]
Line_40 $$ public void if_two_threads_wait_concurrently_then_both_of_them_will_read_the_same_output() --> Line_42 $$ Future<Boolean> t2 = executor.submit(new WaitForOutput("Runtime", process.subscribeToOutput()))  [CD]
Line_48 $$ public void testSubmitNullCallable() --> Line_49 $$ e.submit((Callable) null)  [CD]
Line_54 $$ public void submit(ExecutorService execService, Callable<T> proc, int numTasks, String label) --> Line_55 $$ execService.submit(proc)  [CD]
Line_60 $$ public void testExecuteNullRunnable() --> Line_61 $$ e.submit((Runnable) null)  [CD]
