Line_3 $$ public void future(final Callable<T> task) --> Line_5 $$ Future<T> future = executor.submit(task)  [CD]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor() --> Line_5 $$ Future<T> future = executor.submit(task)  [FD]
Line_12 $$ Runnable runnable --> Line_13 $$ exec.submit(runnable)  [FD]
Line_20 $$ public void testConcurrentGroups() --> Line_21 $$ executorService.submit(new TestProducer())  [CD]
Line_29 $$ for (int i = 0; i < 100; i++) --> Line_30 $$ pool.submit(new TestRunnable(stripe, actual, i))  [CD]
Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size()) --> Line_40 $$ service.submit(new TaskRunner(source))  [FD]
Line_47 $$ public void AckProcessor(Map<String, PeerHandler> quorumMap, ClusterConfiguration cnf) --> Line_49 $$ es.submit(this)  [CD]
Line_55 $$ public void internalNonBlockingStart() --> Line_57 $$ executors.submit(stackRunner)  [CD]
Line_56 $$ ExecutorService executors = Executors.newFixedThreadPool(1) --> Line_57 $$ executors.submit(stackRunner)  [FD]
Line_63 $$ public void createAsciidoctor() --> Line_64 $$ es.submit(new Callable<Asciidoctor>()  [CD]
Line_75 $$ public void doConversion() --> Line_76 $$ final Future<VideoFile> future = service.submit(new ConverterProcess(securityContext, inputVideo, outputFileName, outputSize))  [CD]
Line_38 $$ ExecutorService service = Executors.newFixedThreadPool(sources.size()) --> Line_76 $$ final Future<VideoFile> future = service.submit(new ConverterProcess(securityContext, inputVideo, outputFileName, outputSize))  [FD]
Line_82 $$ public void descendants(final Optional<NodeReadTrx> pRtx) --> Line_83 $$ executor.submit(new GetDescendants())  [CD]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor() --> Line_83 $$ executor.submit(new GetDescendants())  [FD]
Line_89 $$ public void start() --> Line_90 $$ return executor.submit(createCoordinator());  [CD]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor() --> Line_90 $$ return executor.submit(createCoordinator());  [FD]
Line_96 $$ public void runAsyncInternal() --> Line_100 $$ executor.submit(callable)  [CD]
Line_99 $$ ExecutorService executor = crate.getPayload1() --> Line_100 $$ executor.submit(callable)  [FD]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor() --> Line_100 $$ executor.submit(callable)  [FD]
Line_99 $$ ExecutorService executor = crate.getPayload1() --> Line_107 $$ executor.submit(new CompressionRunnable(compressor, nameOfFile2Compress, nameOfCompressedFile, innerEntryName))  [FD]
Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor() --> Line_107 $$ executor.submit(new CompressionRunnable(compressor, nameOfFile2Compress, nameOfCompressedFile, innerEntryName))  [FD]
Line_3 $$ public void future(final Callable<T> task) --> Line_4 $$ ExecutorService executor = Executors.newSingleThreadExecutor()  [CD]
Line_55 $$ public void internalNonBlockingStart() --> Line_56 $$ ExecutorService executors = Executors.newFixedThreadPool(1)  [CD]
Line_96 $$ public void runAsyncInternal() --> Line_99 $$ ExecutorService executor = crate.getPayload1()  [CD]
