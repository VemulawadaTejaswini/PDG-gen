Line_7 $$ URI nextLocation = new URI(diffLocation.getScheme(), diffLocation.getUserInfo(), diffLocation.getHost(), diffLocation.getPort(), diffLocation.getPath(), "pageSize=" + pageSize + "&page=" + (page + 1), diffLocation.getFragment()) --> Line_9 $$ result.put(ProtocolConstants.KEY_NEXT_LOCATION, nextLocation)  [FD]
Line_5 $$ if (i < l.size()) --> Line_7 $$ URI nextLocation = new URI(diffLocation.getScheme(), diffLocation.getUserInfo(), diffLocation.getHost(), diffLocation.getPort(), diffLocation.getPath(), "pageSize=" + pageSize + "&page=" + (page + 1), diffLocation.getFragment())  [CD]
Line_6 $$ URI diffLocation = createDiffLocation(revCommit.getName(), fromName, "") --> Line_7 $$ URI nextLocation = new URI(diffLocation.getScheme(), diffLocation.getUserInfo(), diffLocation.getHost(), diffLocation.getPort(), diffLocation.getPath(), "pageSize=" + pageSize + "&page=" + (page + 1), diffLocation.getFragment())  [FD]
Line_6 $$ URI diffLocation = createDiffLocation(revCommit.getName(), fromName, "") --> Line_8 $$ diffLocation.getFragment()  [FD]
Line_5 $$ if (i < l.size()) --> Line_6 $$ URI diffLocation = createDiffLocation(revCommit.getName(), fromName, "")  [CD]
Line_5 $$ if (i < l.size()) --> Line_9 $$ result.put(ProtocolConstants.KEY_NEXT_LOCATION, nextLocation)  [CD]
