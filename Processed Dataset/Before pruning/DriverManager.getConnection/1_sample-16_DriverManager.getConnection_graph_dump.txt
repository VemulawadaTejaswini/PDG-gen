Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) [ CD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_3 $$ DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)[ CD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)[ CD ]
Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)-->Line_4 $$ FromCompiler.getResolver(statement, pconn)[ CD ]
Line_3 $$ PhoenixConnection pconn = DriverManager.getConnection(getUrl(), TEST_PROPERTIES).unwrap(PhoenixConnection.class)-->Line_4 $$ FromCompiler.getResolver(statement, pconn)[ FD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_5 $$ StatementNormalizer.normalize(statement, resolver)[ CD ]
Line_4 $$ ColumnResolver resolver = FromCompiler.getResolver(statement, pconn)-->Line_5 $$ StatementNormalizer.normalize(statement, resolver)[ FD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)[ CD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_7 $$ Integer actualLimit = LimitCompiler.compile(context, statement)[ CD ]
Line_7 $$ Integer actualLimit = LimitCompiler.compile(context, statement)-->Line_7 $$ LimitCompiler.compile(context, statement)[ CD ]
Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)-->Line_7 $$ LimitCompiler.compile(context, statement)[ FD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_8 $$ assertEquals(limit, actualLimit)[ CD ]
Line_7 $$ Integer actualLimit = LimitCompiler.compile(context, statement)-->Line_8 $$ assertEquals(limit, actualLimit)[ FD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_9 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)[ CD ]
Line_9 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)-->Line_9 $$ GroupByCompiler.compile(context, statement)[ CD ]
Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)-->Line_9 $$ GroupByCompiler.compile(context, statement)[ FD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_10 $$ HavingCompiler.rewrite(context, statement, groupBy)[ CD ]
Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)-->Line_10 $$ HavingCompiler.rewrite(context, statement, groupBy)[ FD ]
Line_9 $$ GroupBy groupBy = GroupByCompiler.compile(context, statement)-->Line_10 $$ HavingCompiler.rewrite(context, statement, groupBy)[ FD ]
Line_2 $$ public void compileStatement(String query, Scan scan, List<Object> binds, Integer limit, Set<Expression> extractedNodes) -->Line_11 $$ WhereCompiler.compileWhereClause(context, statement, extractedNodes)[ CD ]
Line_6 $$ StatementContext context = new StatementContext(new PhoenixStatement(pconn), resolver, binds, scan)-->Line_11 $$ WhereCompiler.compileWhereClause(context, statement, extractedNodes)[ FD ]
