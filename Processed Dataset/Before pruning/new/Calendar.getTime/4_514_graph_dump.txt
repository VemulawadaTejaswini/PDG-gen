Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void testMidnightCalendars() [ CD ]
Line_3 $$ public void testMidnightCalendars() -->Line_4 $$ final Calendar utcCal = CalendarUtils.getUTCMidnightCalendar(CalendarTestUtils.createDate("2012-12-23 08:33:24.123", timeZone), timeZone)[ CD ]
Line_4 $$ final Calendar utcCal = CalendarUtils.getUTCMidnightCalendar(CalendarTestUtils.createDate("2012-12-23 08:33:24.123", timeZone), timeZone)-->Line_4 $$ CalendarUtils.getUTCMidnightCalendar(CalendarTestUtils.createDate("2012-12-23 08:33:24.123", timeZone), timeZone)[ CD ]
Line_3 $$ public void testMidnightCalendars() -->Line_5 $$ Assert.assertEquals("2012-12-23 00:00:00.000", CalendarTestUtils.formatUTCIsoDate(utcCal.getTime()))[ CD ]
Line_4 $$ final Calendar utcCal = CalendarUtils.getUTCMidnightCalendar(CalendarTestUtils.createDate("2012-12-23 08:33:24.123", timeZone), timeZone)-->Line_5 $$ utcCal.getTime()[ FD ]
Line_3 $$ public void testMidnightCalendars() -->Line_6 $$ final Calendar userCal = CalendarUtils.getMidnightCalendarFromUTC(utcCal.getTime(), timeZone)[ CD ]
Line_6 $$ final Calendar userCal = CalendarUtils.getMidnightCalendarFromUTC(utcCal.getTime(), timeZone)-->Line_6 $$ CalendarUtils.getMidnightCalendarFromUTC(utcCal.getTime(), timeZone)[ CD ]
Line_4 $$ final Calendar utcCal = CalendarUtils.getUTCMidnightCalendar(CalendarTestUtils.createDate("2012-12-23 08:33:24.123", timeZone), timeZone)-->Line_6 $$ utcCal.getTime()[ FD ]
Line_3 $$ public void testMidnightCalendars() -->Line_7 $$ Assert.assertEquals("2012-12-22 23:00:00.000", CalendarTestUtils.formatUTCIsoDate(userCal.getTime()))[ CD ]
Line_6 $$ final Calendar userCal = CalendarUtils.getMidnightCalendarFromUTC(utcCal.getTime(), timeZone)-->Line_7 $$ userCal.getTime()[ FD ]
