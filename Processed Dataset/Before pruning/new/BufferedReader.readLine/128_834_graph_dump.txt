Line_0 $$ Entry-->Line_2 $$ //127
public class func [ CD ]
Line_2 $$ //127
public class func -->Line_3 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) [ CD ]
Line_3 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_4 $$ while ((expectedLine = expected.readLine()) != null) [ CD ]
Line_3 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) -->Line_3 $$ public void assertReaders(final BufferedReader expected, final BufferedReader actual) [ CD ]
Line_4 $$ while ((expectedLine = expected.readLine()) != null) -->Line_5 $$ final String actualLine = actual.readLine()[ CD ]
Line_5 $$ final String actualLine = actual.readLine()-->Line_5 $$ actual.readLine()[ CD ]
Line_4 $$ while ((expectedLine = expected.readLine()) != null) -->Line_6 $$ Assert.assertNotNull("Expected had more lines than the actual.", actualLine)[ CD ]
Line_5 $$ final String actualLine = actual.readLine()-->Line_6 $$ Assert.assertNotNull("Expected had more lines than the actual.", actualLine)[ FD ]
Line_4 $$ while ((expectedLine = expected.readLine()) != null) -->Line_7 $$ Assert.assertEquals(expectedLine, actualLine)[ CD ]
Line_5 $$ final String actualLine = actual.readLine()-->Line_7 $$ Assert.assertEquals(expectedLine, actualLine)[ FD ]
Line_5 $$ final String actualLine = actual.readLine()-->Line_6 $$ Assert.assertNotNull("Expected had more lines than the actual.", actualLine)[ FD ]
Line_5 $$ final String actualLine = actual.readLine()-->Line_7 $$ Assert.assertEquals(expectedLine, actualLine)[ FD ]
