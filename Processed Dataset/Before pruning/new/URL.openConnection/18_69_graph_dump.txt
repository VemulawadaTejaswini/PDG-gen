Line_0 $$ Entry-->Line_2 $$ //17
public class func [ CD ]
Line_2 $$ //17
public class func -->Line_3 $$ public void testCachePlusCookies() [ CD ]
Line_3 $$ public void testCachePlusCookies() -->Line_4 $$ server.enqueue(new MockResponse().addHeader("Set-Cookie: a=SECOND; domain=" + server.getCookieDomain() + ";").setResponseCode(HttpURLConnection.HTTP_NOT_MODIFIED))[ CD ]
Line_3 $$ public void testCachePlusCookies() -->Line_7 $$ server.play()[ CD ]
Line_3 $$ public void testCachePlusCookies() -->Line_8 $$ URL url = server.getUrl("/")[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_8 $$ server.getUrl("/")[ CD ]
Line_3 $$ public void testCachePlusCookies() -->Line_9 $$ assertEquals("A", readAscii(url.openConnection()))[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_9 $$ url.openConnection()[ FD ]
Line_3 $$ public void testCachePlusCookies() -->Line_10 $$ assertCookies(url, "a=FIRST")[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_10 $$ assertCookies(url, "a=FIRST")[ FD ]
Line_3 $$ public void testCachePlusCookies() -->Line_11 $$ assertEquals("A", readAscii(url.openConnection()))[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_11 $$ url.openConnection()[ FD ]
Line_3 $$ public void testCachePlusCookies() -->Line_12 $$ assertCookies(url, "a=SECOND")[ CD ]
Line_8 $$ URL url = server.getUrl("/")-->Line_12 $$ assertCookies(url, "a=SECOND")[ FD ]
