Line_0 $$ Entry-->Line_2 $$ //48
public class func [ CD ]
Line_2 $$ //48
public class func -->Line_3 $$ public void deploy(URL resource, boolean xhrCompatible) [ CD ]
Line_3 $$ public void deploy(URL resource, boolean xhrCompatible) -->Line_4 $$ String fileName = ResourceGeneratorUtil.baseName(resource)[ CD ]
Line_4 $$ String fileName = ResourceGeneratorUtil.baseName(resource)-->Line_4 $$ ResourceGeneratorUtil.baseName(resource)[ CD ]
Line_3 $$ public void deploy(URL resource, boolean xhrCompatible) -->Line_5 $$ byte[] bytes = Util.readURLAsBytes(resource)[ CD ]
Line_5 $$ byte[] bytes = Util.readURLAsBytes(resource)-->Line_5 $$ Util.readURLAsBytes(resource)[ CD ]
Line_3 $$ public void deploy(URL resource, boolean xhrCompatible) -->Line_6 $$ return deploy(fileName, resource.openConnection().getContentType(), bytes, xhrCompatible);[ CD ]
Line_6 $$ return deploy(fileName, resource.openConnection().getContentType(), bytes, xhrCompatible);-->Line_6 $$ deploy(fileName, resource.openConnection().getContentType(), bytes, xhrCompatible)[ CD ]
Line_4 $$ String fileName = ResourceGeneratorUtil.baseName(resource)-->Line_6 $$ deploy(fileName, resource.openConnection().getContentType(), bytes, xhrCompatible)[ FD ]
Line_5 $$ byte[] bytes = Util.readURLAsBytes(resource)-->Line_6 $$ deploy(fileName, resource.openConnection().getContentType(), bytes, xhrCompatible)[ FD ]
Line_6 $$ return deploy(fileName, resource.openConnection().getContentType(), bytes, xhrCompatible);-->Line_6 $$ resource.openConnection().getContentType()[ CD ]
Line_3 $$ public void deploy(URL resource, boolean xhrCompatible) -->Line_8 $$ getLogger().log(TreeLogger.ERROR, "Unable to determine mime type of resource", e)[ CD ]
