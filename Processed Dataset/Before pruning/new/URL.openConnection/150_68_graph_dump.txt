Line_0 $$ Entry-->Line_2 $$ //149
public class func [ CD ]
Line_2 $$ //149
public class func -->Line_3 $$ public void test_ConstructorLjava_io_InputStream() [ CD ]
Line_3 $$ public void test_ConstructorLjava_io_InputStream() -->Line_4 $$ InputStream is = new URL(jarName).openConnection().getInputStream()[ CD ]
Line_4 $$ InputStream is = new URL(jarName).openConnection().getInputStream()-->Line_4 $$ new URL(jarName).openConnection().getInputStream()[ CD ]
Line_3 $$ public void test_ConstructorLjava_io_InputStream() -->Line_5 $$ JarInputStream jis = new JarInputStream(is)[ CD ]
Line_3 $$ public void test_ConstructorLjava_io_InputStream() -->Line_6 $$ assertNotNull("The jar input stream should have a manifest", jis.getManifest())[ CD ]
Line_5 $$ JarInputStream jis = new JarInputStream(is)-->Line_6 $$ jis.getManifest()[ FD ]
Line_3 $$ public void test_ConstructorLjava_io_InputStream() -->Line_7 $$ JarEntry je = jis.getNextJarEntry()[ CD ]
Line_7 $$ JarEntry je = jis.getNextJarEntry()-->Line_7 $$ jis.getNextJarEntry()[ CD ]
Line_5 $$ JarInputStream jis = new JarInputStream(is)-->Line_7 $$ jis.getNextJarEntry()[ FD ]
Line_3 $$ public void test_ConstructorLjava_io_InputStream() -->Line_8 $$ while (je != null) [ CD ]
Line_3 $$ public void test_ConstructorLjava_io_InputStream() -->Line_3 $$ public void test_ConstructorLjava_io_InputStream() [ CD ]
Line_7 $$ JarEntry je = jis.getNextJarEntry()-->Line_8 $$ while (je != null) [ FD ]
Line_8 $$ while (je != null) -->Line_9 $$ if (je.getName().equals(A_CLASS)) [ CD ]
Line_9 $$ if (je.getName().equals(A_CLASS)) -->Line_9 $$ je.getName().equals(A_CLASS)[ CD ]
Line_7 $$ JarEntry je = jis.getNextJarEntry()-->Line_9 $$ je.getName()[ FD ]
Line_8 $$ while (je != null) -->Line_12 $$ je = jis.getNextJarEntry()[ CD ]
Line_12 $$ je = jis.getNextJarEntry()-->Line_12 $$ je = jis.getNextJarEntry()[ FD ]
Line_7 $$ JarEntry je = jis.getNextJarEntry()-->Line_12 $$ je = jis.getNextJarEntry()[ FD ]
Line_12 $$ je = jis.getNextJarEntry()-->Line_12 $$ jis.getNextJarEntry()[ CD ]
Line_5 $$ JarInputStream jis = new JarInputStream(is)-->Line_12 $$ jis.getNextJarEntry()[ FD ]
Line_12 $$ je = jis.getNextJarEntry()-->Line_8 $$ while (je != null) [ FD ]
Line_12 $$ je = jis.getNextJarEntry()-->Line_8 $$ while (je != null) [ FD ]
Line_12 $$ je = jis.getNextJarEntry()-->Line_9 $$ je.getName()[ FD ]
