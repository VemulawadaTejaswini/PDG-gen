Line_0 $$ Entry-->Line_2 $$ //8
public class func [ CD ]
Line_2 $$ //8
public class func -->Line_3 $$ public void testHttpCookie() [ CD ]
Line_3 $$ public void testHttpCookie() -->Line_4 $$ URL base = new URL("http://" + NetUtils.getHostPortString(server.getConnectorAddress(0)))[ CD ]
Line_3 $$ public void testHttpCookie() -->Line_6 $$ HttpURLConnection conn = (HttpURLConnection) new URL(base, "/echo").openConnection()[ CD ]
Line_3 $$ public void testHttpCookie() -->Line_8 $$ String header = conn.getHeaderField("Set-Cookie")[ CD ]
Line_8 $$ String header = conn.getHeaderField("Set-Cookie")-->Line_8 $$ conn.getHeaderField("Set-Cookie")[ CD ]
Line_6 $$ HttpURLConnection conn = (HttpURLConnection) new URL(base, "/echo").openConnection()-->Line_8 $$ conn.getHeaderField("Set-Cookie")[ FD ]
Line_3 $$ public void testHttpCookie() -->Line_9 $$ List<HttpCookie> cookies = HttpCookie.parse(header)[ CD ]
Line_9 $$ List<HttpCookie> cookies = HttpCookie.parse(header)-->Line_9 $$ HttpCookie.parse(header)[ CD ]
Line_8 $$ String header = conn.getHeaderField("Set-Cookie")-->Line_9 $$ HttpCookie.parse(header)[ FD ]
Line_3 $$ public void testHttpCookie() -->Line_10 $$ Assert.assertTrue(!cookies.isEmpty())[ CD ]
Line_10 $$ !cookies.isEmpty()-->Line_10 $$ cookies.isEmpty()[ CD ]
Line_9 $$ List<HttpCookie> cookies = HttpCookie.parse(header)-->Line_10 $$ cookies.isEmpty()[ FD ]
Line_3 $$ public void testHttpCookie() -->Line_11 $$ Assert.assertTrue(header.contains("; HttpOnly"))[ CD ]
Line_8 $$ String header = conn.getHeaderField("Set-Cookie")-->Line_11 $$ header.contains("; HttpOnly")[ FD ]
