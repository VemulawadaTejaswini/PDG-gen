Line_0 $$ Entry-->Line_2 $$ //156
public class func [ CD ]
Line_2 $$ //156
public class func -->Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) [ CD ]
Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) -->Line_4 $$ URLConnection conn = new URL(url).openConnection()[ CD ]
Line_4 $$ URLConnection conn = new URL(url).openConnection()-->Line_4 $$ new URL(url).openConnection()[ CD ]
Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) -->Line_5 $$ Assert.assertTrue("URLConenction is not HttpURLConnection: " + conn, conn instanceof HttpURLConnection)[ CD ]
Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) -->Line_6 $$ HttpURLConnection connection = (HttpURLConnection) conn[ CD ]
Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) -->Line_7 $$ connection.connect()[ CD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) conn-->Line_7 $$ connection.connect()[ FD ]
Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) -->Line_8 $$ int responseCode = connection.getResponseCode()[ CD ]
Line_8 $$ int responseCode = connection.getResponseCode()-->Line_8 $$ connection.getResponseCode()[ CD ]
Line_6 $$ HttpURLConnection connection = (HttpURLConnection) conn-->Line_8 $$ connection.getResponseCode()[ FD ]
Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) -->Line_9 $$ assertEquals(url, expectedResponseCode, responseCode)[ CD ]
Line_8 $$ int responseCode = connection.getResponseCode()-->Line_9 $$ assertEquals(url, expectedResponseCode, responseCode)[ FD ]
Line_3 $$ public void fetchUrl(String url, int expectedResponseCode) -->Line_10 $$ return (responseCode == OK) ? getContent(conn) : null;[ CD ]
Line_4 $$ URLConnection conn = new URL(url).openConnection()-->Line_10 $$ getContent(conn)[ FD ]
