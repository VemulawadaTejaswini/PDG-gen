Line_0 $$ Entry-->Line_2 $$ //15
public class func [ CD ]
Line_2 $$ //15
public class func -->Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) [ CD ]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) -->Line_4 $$ URL url = new URL(jtURL + "/taskgraph?jobid=" + job.toString() + "&type=map")[ CD ]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) -->Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()[ CD ]
Line_4 $$ URL url = new URL(jtURL + "/taskgraph?jobid=" + job.toString() + "&type=map")-->Line_5 $$ url.openConnection()[ FD ]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) -->Line_6 $$ connection.setRequestMethod("GET")[ CD ]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_6 $$ connection.setRequestMethod("GET")[ FD ]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) -->Line_7 $$ connection.connect()[ CD ]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_7 $$ connection.connect()[ FD ]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) -->Line_8 $$ assertEquals(200, connection.getResponseCode())[ CD ]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_8 $$ connection.getResponseCode()[ FD ]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) -->Line_9 $$ String contents = slurpContents(connection)[ CD ]
Line_9 $$ String contents = slurpContents(connection)-->Line_9 $$ slurpContents(connection)[ CD ]
Line_5 $$ HttpURLConnection connection = (HttpURLConnection) url.openConnection()-->Line_9 $$ slurpContents(connection)[ FD ]
Line_3 $$ public void checkTaskGraphServlet(JobID job, int jobTrackerInfoPort) -->Line_10 $$ if (contents.trim().length() > 0) [ CD ]
Line_9 $$ String contents = slurpContents(connection)-->Line_10 $$ contents.trim()[ FD ]
Line_10 $$ if (contents.trim().length() > 0) -->Line_11 $$ assertTrue("Bad contents for job " + job + ":\n" + contents, contents.contains("</svg>"))[ CD ]
Line_9 $$ String contents = slurpContents(connection)-->Line_12 $$ contents.contains("</svg>")[ FD ]
