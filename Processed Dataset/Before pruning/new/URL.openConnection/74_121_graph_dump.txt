Line_0 $$ Entry-->Line_2 $$ //73
public class func [ CD ]
Line_2 $$ //73
public class func -->Line_3 $$ public void testReqResp() [ CD ]
Line_3 $$ public void testReqResp() -->Line_4 $$ URL url = new URL("http://localhost:" + port + path)[ CD ]
Line_3 $$ public void testReqResp() -->Line_5 $$ URLConnection conn = url.openConnection()[ CD ]
Line_5 $$ URLConnection conn = url.openConnection()-->Line_5 $$ url.openConnection()[ CD ]
Line_4 $$ URL url = new URL("http://localhost:" + port + path)-->Line_5 $$ url.openConnection()[ FD ]
Line_3 $$ public void testReqResp() -->Line_6 $$ conn.setDefaultUseCaches(false)[ CD ]
Line_5 $$ URLConnection conn = url.openConnection()-->Line_6 $$ conn.setDefaultUseCaches(false)[ FD ]
Line_3 $$ public void testReqResp() -->Line_7 $$ BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))[ CD ]
Line_5 $$ URLConnection conn = url.openConnection()-->Line_9 $$ conn.getInputStream()[ FD ]
Line_3 $$ public void testReqResp() -->Line_10 $$ String s = in.readLine()[ CD ]
Line_10 $$ String s = in.readLine()-->Line_10 $$ in.readLine()[ CD ]
Line_7 $$ BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_10 $$ in.readLine()[ FD ]
Line_3 $$ public void testReqResp() -->Line_11 $$ assertTrue(s.contains(path))[ CD ]
Line_10 $$ String s = in.readLine()-->Line_11 $$ s.contains(path)[ FD ]
Line_3 $$ public void testReqResp() -->Line_12 $$ in.close()[ CD ]
Line_7 $$ BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))-->Line_12 $$ in.close()[ FD ]
