Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void getIdSet(PreparedStatement s) [ CD ]
Line_3 $$ public void getIdSet(PreparedStatement s) -->Line_4 $$ ResultSet results = s.executeQuery()[ CD ]
Line_4 $$ ResultSet results = s.executeQuery()-->Line_4 $$ s.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_8 $$ //1
public class func [ CD ]
Line_8 $$ //1
public class func -->Line_9 $$ public void testSetMaxRowsValues() [ CD ]
Line_9 $$ public void testSetMaxRowsValues() -->Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)[ CD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_10 $$ prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)[ CD ]
Line_9 $$ public void testSetMaxRowsValues() -->Line_13 $$ ps.setMaxRows(10)[ CD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_13 $$ ps.setMaxRows(10)[ FD ]
Line_9 $$ public void testSetMaxRowsValues() -->Line_14 $$ JDBC.assertDrainResults(ps.executeQuery(), 10)[ CD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_14 $$ ps.executeQuery()[ FD ]
Line_9 $$ public void testSetMaxRowsValues() -->Line_15 $$ ps.setMaxRows(2)[ CD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_15 $$ ps.setMaxRows(2)[ FD ]
Line_9 $$ public void testSetMaxRowsValues() -->Line_16 $$ JDBC.assertDrainResults(ps.executeQuery(), 2)[ CD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_16 $$ ps.executeQuery()[ FD ]
Line_0 $$ Entry-->Line_20 $$ //2
public class func [ CD ]
Line_20 $$ //2
public class func -->Line_21 $$ public void testEscapeSyntax3() [ CD ]
Line_21 $$ public void testEscapeSyntax3() -->Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_22 $$ prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")[ CD ]
Line_21 $$ public void testEscapeSyntax3() -->Line_24 $$ ps.setString(1, "x%foobar")[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_24 $$ ps.setString(1, "x%foobar")[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_24 $$ ps.setString(1, "x%foobar")[ FD ]
Line_21 $$ public void testEscapeSyntax3() -->Line_25 $$ JDBC.assertEmpty(ps.executeQuery())[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_25 $$ ps.executeQuery()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_25 $$ ps.executeQuery()[ FD ]
Line_21 $$ public void testEscapeSyntax3() -->Line_26 $$ ps.setString(1, "Z%foobar")[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_26 $$ ps.setString(1, "Z%foobar")[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_26 $$ ps.setString(1, "Z%foobar")[ FD ]
Line_21 $$ public void testEscapeSyntax3() -->Line_27 $$ JDBC.assertSingleValueResultSet(ps.executeQuery(), "1")[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_27 $$ ps.executeQuery()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_27 $$ ps.executeQuery()[ FD ]
Line_21 $$ public void testEscapeSyntax3() -->Line_28 $$ ps.close()[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_28 $$ ps.close()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_28 $$ ps.close()[ FD ]
Line_0 $$ Entry-->Line_32 $$ //3
public class func [ CD ]
Line_32 $$ //3
public class func -->Line_33 $$ public void testLikeWithHighestValidCharacter() [ CD ]
Line_33 $$ public void testLikeWithHighestValidCharacter() -->Line_34 $$ for (int i = 0; i < match.length; i++) [ CD ]
Line_33 $$ public void testLikeWithHighestValidCharacter() -->Line_33 $$ public void testLikeWithHighestValidCharacter() [ CD ]
Line_34 $$ for (int i = 0; i < match.length; i++) -->Line_34 $$ int i = 0[ CD ]
Line_34 $$ for (int i = 0; i < match.length; i++) -->Line_34 $$ i++[ CD ]
Line_34 $$ int i = 0-->Line_34 $$ i++[ FD ]
Line_34 $$ for (int i = 0; i < match.length; i++) -->Line_35 $$ ps.setString(1, match[i])[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_35 $$ ps.setString(1, match[i])[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_35 $$ ps.setString(1, match[i])[ FD ]
Line_34 $$ for (int i = 0; i < match.length; i++) -->Line_36 $$ JDBC.assertSingleValueResultSet(ps.executeQuery(), "1")[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_36 $$ ps.executeQuery()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_36 $$ ps.executeQuery()[ FD ]
Line_33 $$ public void testLikeWithHighestValidCharacter() -->Line_38 $$ ps.setString(1, "")[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_38 $$ ps.setString(1, "")[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_38 $$ ps.setString(1, "")[ FD ]
Line_33 $$ public void testLikeWithHighestValidCharacter() -->Line_39 $$ JDBC.assertEmpty(ps.executeQuery())[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_39 $$ ps.executeQuery()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_39 $$ ps.executeQuery()[ FD ]
Line_33 $$ public void testLikeWithHighestValidCharacter() -->Line_40 $$ ps.close()[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_40 $$ ps.close()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_40 $$ ps.close()[ FD ]
Line_0 $$ Entry-->Line_44 $$ //4
public class func [ CD ]
Line_44 $$ //4
public class func -->Line_45 $$ public void testChangeType(Connection conn) [ CD ]
Line_45 $$ public void testChangeType(Connection conn) -->Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")[ CD ]
Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")-->Line_46 $$ conn.prepareStatement("select (? || ? || ?) from dual")[ CD ]
Line_45 $$ public void testChangeType(Connection conn) -->Line_48 $$ prep.setString(3, "c")[ CD ]
Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")-->Line_48 $$ prep.setString(3, "c")[ FD ]
Line_45 $$ public void testChangeType(Connection conn) -->Line_49 $$ prep.executeQuery()[ CD ]
Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")-->Line_49 $$ prep.executeQuery()[ FD ]
Line_45 $$ public void testChangeType(Connection conn) -->Line_50 $$ prep.setInt(1, 1)[ CD ]
Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")-->Line_50 $$ prep.setInt(1, 1)[ FD ]
Line_45 $$ public void testChangeType(Connection conn) -->Line_51 $$ prep.setString(2, "ab")[ CD ]
Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")-->Line_51 $$ prep.setString(2, "ab")[ FD ]
Line_45 $$ public void testChangeType(Connection conn) -->Line_52 $$ prep.setInt(3, 45)[ CD ]
Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")-->Line_52 $$ prep.setInt(3, 45)[ FD ]
Line_45 $$ public void testChangeType(Connection conn) -->Line_53 $$ prep.executeQuery()[ CD ]
Line_46 $$ PreparedStatement prep = conn.prepareStatement("select (? || ? || ?) from dual")-->Line_53 $$ prep.executeQuery()[ FD ]
Line_0 $$ Entry-->Line_57 $$ //5
public class func [ CD ]
Line_57 $$ //5
public class func -->Line_58 $$ public void fetch(final PreparedStatement stmt) [ CD ]
Line_58 $$ public void fetch(final PreparedStatement stmt) -->Line_59 $$ return stmt.executeQuery();[ CD ]
Line_59 $$ return stmt.executeQuery();-->Line_59 $$ stmt.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_63 $$ //6
public class func [ CD ]
Line_63 $$ //6
public class func -->Line_64 $$ public void ResultSetIterator(PreparedStatement stmt) [ CD ]
Line_64 $$ public void ResultSetIterator(PreparedStatement stmt) -->Line_65 $$ this.rs = stmt.executeQuery()[ CD ]
Line_65 $$ this.rs = stmt.executeQuery()-->Line_65 $$ stmt.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_69 $$ //7
public class func [ CD ]
Line_69 $$ //7
public class func -->Line_70 $$ public void getSummaries(PreparedStatement statement) [ CD ]
Line_70 $$ public void getSummaries(PreparedStatement statement) -->Line_71 $$ ResultSet rs = statement.executeQuery()[ CD ]
Line_71 $$ ResultSet rs = statement.executeQuery()-->Line_71 $$ statement.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_75 $$ //8
public class func [ CD ]
Line_75 $$ //8
public class func -->Line_76 $$ public void executeStatement(Statement statement, QueryLimit queryLimit, int splitIndex) [ CD ]
Line_76 $$ public void executeStatement(Statement statement, QueryLimit queryLimit, int splitIndex) -->Line_77 $$ return ((PreparedStatement) statement).executeQuery();[ CD ]
Line_77 $$ return ((PreparedStatement) statement).executeQuery();-->Line_77 $$ ((PreparedStatement) statement).executeQuery()[ CD ]
Line_0 $$ Entry-->Line_81 $$ //9
public class func [ CD ]
Line_81 $$ //9
public class func -->Line_82 $$ public void executeQuery(PreparedStatement ps, SessionEventListenerManager statsCollector) [ CD ]
Line_82 $$ public void executeQuery(PreparedStatement ps, SessionEventListenerManager statsCollector) -->Line_83 $$ return ps.executeQuery();[ CD ]
Line_83 $$ return ps.executeQuery();-->Line_83 $$ ps.executeQuery()[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_83 $$ ps.executeQuery()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_83 $$ ps.executeQuery()[ FD ]
Line_0 $$ Entry-->Line_87 $$ //10
public class func [ CD ]
Line_87 $$ //10
public class func -->Line_88 $$ public void RecordIterator(Transaction transaction, PreparedStatement preparedStatement) [ CD ]
Line_88 $$ public void RecordIterator(Transaction transaction, PreparedStatement preparedStatement) -->Line_89 $$ this.resultSet = preparedStatement.executeQuery()[ CD ]
Line_89 $$ this.resultSet = preparedStatement.executeQuery()-->Line_89 $$ preparedStatement.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_93 $$ //11
public class func [ CD ]
Line_93 $$ //11
public class func -->Line_94 $$ public void getResourceMetaSet(PreparedStatement statement) [ CD ]
Line_94 $$ public void getResourceMetaSet(PreparedStatement statement) -->Line_95 $$ ResultSet results = statement.executeQuery()[ CD ]
Line_95 $$ ResultSet results = statement.executeQuery()-->Line_95 $$ statement.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_99 $$ //12
public class func [ CD ]
Line_99 $$ //12
public class func -->Line_100 $$ public void tryExecuteQuery(PreparedStatement stmt) [ CD ]
Line_100 $$ public void tryExecuteQuery(PreparedStatement stmt) -->Line_101 $$ ResultSet rset = stmt.executeQuery()[ CD ]
Line_101 $$ ResultSet rset = stmt.executeQuery()-->Line_101 $$ stmt.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_105 $$ //13
public class func [ CD ]
Line_105 $$ //13
public class func -->Line_106 $$ public void execute(PreparedStatement ps) [ CD ]
Line_106 $$ public void execute(PreparedStatement ps) -->Line_107 $$ return ps.executeQuery();[ CD ]
Line_107 $$ return ps.executeQuery();-->Line_107 $$ ps.executeQuery()[ CD ]
Line_22 $$ PreparedStatement ps = prepareStatement("select 1 from t1 where '%foobar' like ? escape 'Z'")-->Line_107 $$ ps.executeQuery()[ FD ]
Line_10 $$ PreparedStatement ps = prepareStatement("values 0,1,2,3,4,5,6,7,8,9", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)-->Line_107 $$ ps.executeQuery()[ FD ]
Line_0 $$ Entry-->Line_111 $$ //14
public class func [ CD ]
Line_111 $$ //14
public class func -->Line_112 $$ public void doExecuteQuery(PreparedStatement statement) [ CD ]
Line_112 $$ public void doExecuteQuery(PreparedStatement statement) -->Line_113 $$ return statement.executeQuery();[ CD ]
Line_113 $$ return statement.executeQuery();-->Line_113 $$ statement.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_117 $$ //15
public class func [ CD ]
Line_117 $$ //15
public class func -->Line_118 $$ public void executeQuery(Connection conn, PreparedStatement stmnt, SQLBuffer sql, boolean isLRS, JDBCStore store) [ CD ]
Line_118 $$ public void executeQuery(Connection conn, PreparedStatement stmnt, SQLBuffer sql, boolean isLRS, JDBCStore store) -->Line_119 $$ return stmnt.executeQuery();[ CD ]
Line_119 $$ return stmnt.executeQuery();-->Line_119 $$ stmnt.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_123 $$ //16
public class func [ CD ]
Line_123 $$ //16
public class func -->Line_124 $$ public void runQuery(Connection connection) [ CD ]
Line_124 $$ public void runQuery(Connection connection) -->Line_125 $$ return s.executeQuery();[ CD ]
Line_125 $$ return s.executeQuery();-->Line_125 $$ s.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_129 $$ //17
public class func [ CD ]
Line_129 $$ //17
public class func -->Line_130 $$ public void executeQuery(JDBCConfiguration conf, Connection conn, PreparedStatement stmnt, SQLBuffer buf) [ CD ]
Line_130 $$ public void executeQuery(JDBCConfiguration conf, Connection conn, PreparedStatement stmnt, SQLBuffer buf) -->Line_131 $$ return stmnt.executeQuery();[ CD ]
Line_131 $$ return stmnt.executeQuery();-->Line_131 $$ stmnt.executeQuery()[ CD ]
Line_0 $$ Entry-->Line_135 $$ //18
public class func [ CD ]
Line_135 $$ //18
public class func -->Line_136 $$ public void executeQuery(PageContext pc, PreparedStatement stat, String sql) [ CD ]
Line_136 $$ public void executeQuery(PageContext pc, PreparedStatement stat, String sql) -->Line_137 $$ if (pc == null)
    return stat.executeQuery();[ CD ]
Line_137 $$ if (pc == null)
    return stat.executeQuery();-->Line_137 $$ return stat.executeQuery();[ CD ]
Line_137 $$ return stat.executeQuery();-->Line_137 $$ stat.executeQuery()[ CD ]
Line_34 $$ int i = 0-->Line_34 $$ for (int i = 0; i < match.length; i++) [ FD ]
Line_34 $$ int i = 0-->Line_34 $$ for (int i = 0; i < match.length; i++) [ FD ]
Line_34 $$ int i = 0-->Line_34 $$ i++[ FD ]
