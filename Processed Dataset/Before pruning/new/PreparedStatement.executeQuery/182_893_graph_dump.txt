Line_0 $$ Entry-->Line_2 $$ //181
public class func [ CD ]
Line_2 $$ //181
public class func -->Line_3 $$ public void testPreparedSetSchemaFunctionLarge() [ CD ]
Line_3 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_4 $$ PreparedStatement ps = prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")[ CD ]
Line_4 $$ PreparedStatement ps = prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")-->Line_4 $$ prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")[ CD ]
Line_3 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_7 $$ ResultSet rs = ps.executeQuery()[ CD ]
Line_7 $$ ResultSet rs = ps.executeQuery()-->Line_7 $$ ps.executeQuery()[ CD ]
Line_4 $$ PreparedStatement ps = prepareStatement("SELECT X, " + "APP.GET_SCHEMA_TRANSITION(SCHEMANAME), " + "Y FROM APP.LARGE")-->Line_7 $$ ps.executeQuery()[ FD ]
Line_3 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_8 $$ while (rs.next()) [ CD ]
Line_3 $$ public void testPreparedSetSchemaFunctionLarge() -->Line_3 $$ public void testPreparedSetSchemaFunctionLarge() [ CD ]
Line_8 $$ while (rs.next()) -->Line_8 $$ rs.next()[ CD ]
Line_7 $$ ResultSet rs = ps.executeQuery()-->Line_8 $$ rs.next()[ FD ]
Line_8 $$ while (rs.next()) -->Line_9 $$ assertTrue(rs.getString(2).length() > 2)[ CD ]
Line_7 $$ ResultSet rs = ps.executeQuery()-->Line_9 $$ rs.getString(2)[ FD ]
Line_8 $$ while (rs.next()) -->Line_10 $$ verifyCachedSchema(getConnection())[ CD ]
