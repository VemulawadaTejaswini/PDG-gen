Line_3 $$ public void getExecutionDate(long repeatIntervalInSeconds) -->Line_4 $$ calendar.add(Calendar.SECOND, (int) repeatIntervalInSeconds)[ CD ]
Line_10 $$ public void computeExpiry() -->Line_11 $$ if (approvalExpirySeconds == -1) [ CD ]
Line_11 $$ if (approvalExpirySeconds == -1) -->Line_12 $$ expiresAt.add(Calendar.MONTH, 1)[ CD ]
Line_11 $$ if (approvalExpirySeconds == -1) -->Line_15 $$ expiresAt.add(Calendar.SECOND, approvalExpirySeconds)[ CD ]
Line_22 $$ public void computeExpiry() -->Line_23 $$ if (approvalExpiryInMillis == -1) [ CD ]
Line_23 $$ if (approvalExpiryInMillis == -1) -->Line_24 $$ expiresAt.add(Calendar.MONTH, 1)[ CD ]
Line_23 $$ if (approvalExpiryInMillis == -1) -->Line_27 $$ expiresAt.add(Calendar.MILLISECOND, approvalExpiryInMillis)[ CD ]
Line_34 $$ public void handleEvent(Event event) -->Line_35 $$ tmpcal.add(Calendar.YEAR, 10)[ CD ]
Line_34 $$ public void handleEvent(Event event) -->Line_36 $$ tmpcal.add(Calendar.MONTH, 1)[ CD ]
Line_34 $$ public void handleEvent(Event event) -->Line_37 $$ setCDTSelection(tmpcal.getTime())[ CD ]
Line_42 $$ public void getNextCheckinTime() -->Line_43 $$ nextCheckinTime.add(Calendar.SECOND, (int) getCheckinInterval())[ CD ]
Line_49 $$ public void dateToGDateTime(Date date) -->Line_50 $$ Calendar cal = new GregorianCalendar()[ CD ]
Line_49 $$ public void dateToGDateTime(Date date) -->Line_51 $$ cal.setTime(date)[ CD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_51 $$ cal.setTime(date)[ FD ]
Line_49 $$ public void dateToGDateTime(Date date) -->Line_52 $$ cal.add(Calendar.MILLISECOND, cal.getTimeZone().getOffset(cal.getTimeInMillis()))[ CD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_52 $$ cal.add(Calendar.MILLISECOND, cal.getTimeZone().getOffset(cal.getTimeInMillis()))[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_53 $$ cal.getTimeZone()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_53 $$ cal.getTimeInMillis()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_54 $$ cal.getTime()[ FD ]
Line_59 $$ public void updateStartTime() -->Line_60 $$ now.add(Calendar.SECOND, (int) intervalSec)[ CD ]
Line_66 $$ public void getArrivalTime(Date departureTime, int mileage) -->Line_67 $$ c.add(Calendar.HOUR, (int) hours)[ CD ]
Line_66 $$ public void getArrivalTime(Date departureTime, int mileage) -->Line_68 $$ c.add(Calendar.MINUTE, minutes)[ CD ]
Line_74 $$ public void add(Date d) -->Line_75 $$ cal.add(Calendar.SECOND, (int) getValueInSeconds())[ CD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_75 $$ cal.add(Calendar.SECOND, (int) getValueInSeconds())[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_76 $$ cal.getTime()[ FD ]
Line_81 $$ public void getMinDate() -->Line_82 $$ Calendar calendar = new GregorianCalendar()[ CD ]
Line_81 $$ public void getMinDate() -->Line_83 $$ calendar.add(Calendar.MONTH, -2)[ CD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_83 $$ calendar.add(Calendar.MONTH, -2)[ FD ]
Line_81 $$ public void getMinDate() -->Line_84 $$ calendar.getTime()[ CD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_84 $$ calendar.getTime()[ FD ]
Line_89 $$ public void getMaxDate() -->Line_90 $$ Calendar calendar = new GregorianCalendar()[ CD ]
Line_89 $$ public void getMaxDate() -->Line_91 $$ calendar.add(Calendar.MONTH, 2)[ CD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_91 $$ calendar.add(Calendar.MONTH, 2)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_91 $$ calendar.add(Calendar.MONTH, 2)[ FD ]
Line_89 $$ public void getMaxDate() -->Line_92 $$ calendar.getTime()[ CD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_92 $$ calendar.getTime()[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_92 $$ calendar.getTime()[ FD ]
Line_97 $$ public void decodeBirthDate(String ws) -->Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)[ CD ]
Line_97 $$ public void decodeBirthDate(String ws) -->Line_99 $$ c.add(Calendar.DAY_OF_YEAR, weeks * 7)[ CD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_99 $$ c.add(Calendar.DAY_OF_YEAR, weeks * 7)[ FD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_100 $$ c.getTime()[ FD ]
Line_105 $$ public void twentyYearsTime() -->Line_106 $$ Calendar earliestExpiry = new GregorianCalendar()[ CD ]
Line_105 $$ public void twentyYearsTime() -->Line_107 $$ earliestExpiry.add(Calendar.SECOND, 631138519)[ CD ]
Line_106 $$ Calendar earliestExpiry = new GregorianCalendar()-->Line_107 $$ earliestExpiry.add(Calendar.SECOND, 631138519)[ FD ]
Line_106 $$ Calendar earliestExpiry = new GregorianCalendar()-->Line_108 $$ earliestExpiry.getTime()[ FD ]
Line_113 $$ public void gDateTimeToDate(DateTime dateTime) -->Line_114 $$ cal.add(Calendar.MILLISECOND, -cal.getTimeZone().getOffset(cal.getTimeInMillis()))[ CD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_114 $$ cal.add(Calendar.MILLISECOND, -cal.getTimeZone().getOffset(cal.getTimeInMillis()))[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_115 $$ cal.getTimeZone()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_115 $$ cal.getTimeInMillis()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_116 $$ cal.getTime()[ FD ]
Line_121 $$ public void widgetSelected(SelectionEvent e) -->Line_122 $$ tmpcal.add(Calendar.YEAR, //$NON-NLS-1$
((Integer) item.getData("Year")).intValue() - 5)[ CD ]
Line_121 $$ public void widgetSelected(SelectionEvent e) -->Line_125 $$ setCDTSelection(tmpcal.getTime())[ CD ]
Line_130 $$ public void handleEvent(Event event) -->Line_131 $$ tmpcal.add(Calendar.YEAR, (event.count > 0) ? 1 : -1)[ CD ]
Line_130 $$ public void handleEvent(Event event) -->Line_133 $$ setCDTSelection(tmpcal.getTime())[ CD ]
Line_138 $$ public void getDueDate(Media media) -->Line_139 $$ c.add(Calendar.DAY_OF_YEAR, media.howManyDaysThisCanBeBorrowed())[ CD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_139 $$ c.add(Calendar.DAY_OF_YEAR, media.howManyDaysThisCanBeBorrowed())[ FD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_140 $$ c.getTime()[ FD ]
Line_145 $$ public void getDueDate(Media media) -->Line_146 $$ c.add(Calendar.DAY_OF_YEAR, media.howManyDaysThisCanBeBorrowed())[ CD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_146 $$ c.add(Calendar.DAY_OF_YEAR, media.howManyDaysThisCanBeBorrowed())[ FD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_147 $$ c.getTime()[ FD ]
Line_152 $$ public void getRecentChangesCount(long groupId, long nodeId) -->Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()[ CD ]
Line_152 $$ public void getRecentChangesCount(long groupId, long nodeId) -->Line_154 $$ cal.add(Calendar.WEEK_OF_YEAR, -1)[ CD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_154 $$ cal.add(Calendar.WEEK_OF_YEAR, -1)[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_154 $$ cal.add(Calendar.WEEK_OF_YEAR, -1)[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_156 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_156 $$ cal.getTime()[ FD ]
Line_161 $$ public void getHTTPTime(int days) -->Line_162 $$ calendar.add(Calendar.DAY_OF_MONTH, days)[ CD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_162 $$ calendar.add(Calendar.DAY_OF_MONTH, days)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_162 $$ calendar.add(Calendar.DAY_OF_MONTH, days)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_163 $$ calendar.getTime()[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_163 $$ calendar.getTime()[ FD ]
Line_168 $$ public void run() -->Line_169 $$ Calendar c = (Calendar) (startTimestamp.clone())[ CD ]
Line_168 $$ public void run() -->Line_170 $$ c.add(Calendar.MINUTE, i)[ CD ]
Line_169 $$ Calendar c = (Calendar) (startTimestamp.clone())-->Line_170 $$ c.add(Calendar.MINUTE, i)[ FD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_170 $$ c.add(Calendar.MINUTE, i)[ FD ]
Line_168 $$ public void run() -->Line_171 $$ cappedTestCollection.insert(BasicDBObjectBuilder.start("increasing", c.getTime()).add("string", "value" + i).get(), WriteConcern.SAFE)[ CD ]
Line_169 $$ Calendar c = (Calendar) (startTimestamp.clone())-->Line_171 $$ c.getTime()[ FD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_171 $$ c.getTime()[ FD ]
Line_176 $$ public void checkUbTime() -->Line_177 $$ Calendar realTime = getRealTime()[ CD ]
Line_176 $$ public void checkUbTime() -->Line_178 $$ realTime.add(Calendar.MINUTE, BEFORE_MINUTE)[ CD ]
Line_177 $$ Calendar realTime = getRealTime()-->Line_178 $$ realTime.add(Calendar.MINUTE, BEFORE_MINUTE)[ FD ]
Line_176 $$ public void checkUbTime() -->Line_179 $$ int nowTime = Integer.valueOf(sdf.format(realTime.getTime()))[ CD ]
Line_177 $$ Calendar realTime = getRealTime()-->Line_179 $$ realTime.getTime()[ FD ]
Line_179 $$ int nowTime = Integer.valueOf(sdf.format(realTime.getTime()))-->Line_180 $$ _ubTimes.contains(nowTime)[ FD ]
Line_185 $$ public void getRecentChanges(long groupId, long nodeId, int start, int end) -->Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()[ CD ]
Line_185 $$ public void getRecentChanges(long groupId, long nodeId, int start, int end) -->Line_187 $$ cal.add(Calendar.WEEK_OF_YEAR, -1)[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_187 $$ cal.add(Calendar.WEEK_OF_YEAR, -1)[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_187 $$ cal.add(Calendar.WEEK_OF_YEAR, -1)[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_187 $$ cal.add(Calendar.WEEK_OF_YEAR, -1)[ FD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_189 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_189 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_189 $$ cal.getTime()[ FD ]
Line_194 $$ public void title(final int cell) -->Line_195 $$ final Calendar d = (Calendar) date.clone()[ CD ]
Line_194 $$ public void title(final int cell) -->Line_196 $$ d.add(Calendar.MONTH, cell)[ CD ]
Line_195 $$ final Calendar d = (Calendar) date.clone()-->Line_196 $$ d.add(Calendar.MONTH, cell)[ FD ]
Line_194 $$ public void title(final int cell) -->Line_197 $$ final String displayName = monthFormat.format(d.getTime()) + " " + d.get(Calendar.YEAR)[ CD ]
Line_195 $$ final Calendar d = (Calendar) date.clone()-->Line_197 $$ d.getTime()[ FD ]
Line_195 $$ final Calendar d = (Calendar) date.clone()-->Line_197 $$ d.get(Calendar.YEAR)[ FD ]
Line_202 $$ public void getNextWorkingDay(Date day) -->Line_203 $$ Calendar calendarDay = DateUtils.getCalendar(day)[ CD ]
Line_203 $$ Calendar calendarDay = DateUtils.getCalendar(day)-->Line_205 $$ calendarDay.add(Calendar.DATE, 1)[ FD ]
Line_203 $$ Calendar calendarDay = DateUtils.getCalendar(day)-->Line_206 $$ isWorkingDay(calendarDay)[ FD ]
Line_203 $$ Calendar calendarDay = DateUtils.getCalendar(day)-->Line_207 $$ calendarDay.getTime()[ FD ]
Line_212 $$ public void getLiferayDate(Date jiraDate) -->Line_213 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset() * -1)[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_213 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset() * -1)[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_213 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset() * -1)[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_213 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset() * -1)[ FD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_214 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_214 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_214 $$ cal.getTime()[ FD ]
Line_219 $$ public void getReadingDateHeader(final int dayNumber) -->Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()[ CD ]
Line_219 $$ public void getReadingDateHeader(final int dayNumber) -->Line_221 $$ calendar.setTimeInMillis(readingPlan.info.startTime)[ CD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_221 $$ calendar.setTimeInMillis(readingPlan.info.startTime)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_221 $$ calendar.setTimeInMillis(readingPlan.info.startTime)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_221 $$ calendar.setTimeInMillis(readingPlan.info.startTime)[ FD ]
Line_219 $$ public void getReadingDateHeader(final int dayNumber) -->Line_222 $$ calendar.add(Calendar.DATE, dayNumber)[ CD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_222 $$ calendar.add(Calendar.DATE, dayNumber)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_222 $$ calendar.add(Calendar.DATE, dayNumber)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_222 $$ calendar.add(Calendar.DATE, dayNumber)[ FD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_223 $$ calendar.getTime()[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_223 $$ calendar.getTime()[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_223 $$ calendar.getTime()[ FD ]
Line_228 $$ public void generateOccurrencesFrom(Date date, List<EventDetail> events) -->Line_229 $$ endDate.add(java.util.Calendar.YEAR, 100)[ CD ]
Line_235 $$ public void doJob() -->Line_236 $$ cal.add(Calendar.MINUTE, RandomUtils.nextInt(10000))[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_236 $$ cal.add(Calendar.MINUTE, RandomUtils.nextInt(10000))[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_236 $$ cal.add(Calendar.MINUTE, RandomUtils.nextInt(10000))[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_236 $$ cal.add(Calendar.MINUTE, RandomUtils.nextInt(10000))[ FD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_237 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_237 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_237 $$ cal.getTime()[ FD ]
Line_242 $$ public void dateRangeChanged(ScheduleDateRangeChangeEvent event) -->Line_243 $$ calendar.add(Calendar.DATE, 15)[ CD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_243 $$ calendar.add(Calendar.DATE, 15)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_243 $$ calendar.add(Calendar.DATE, 15)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_243 $$ calendar.add(Calendar.DATE, 15)[ FD ]
Line_242 $$ public void dateRangeChanged(ScheduleDateRangeChangeEvent event) -->Line_244 $$ setInitialDate(calendar.getTime())[ CD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_244 $$ calendar.getTime()[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_244 $$ calendar.getTime()[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_244 $$ calendar.getTime()[ FD ]
Line_249 $$ public void calculateNextTime(Date time) -->Line_250 $$ calendar.add(periodUnit.calendarField, period)[ CD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_250 $$ calendar.add(periodUnit.calendarField, period)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_250 $$ calendar.add(periodUnit.calendarField, period)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_250 $$ calendar.add(periodUnit.calendarField, period)[ FD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_251 $$ calendar.getTime()[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_251 $$ calendar.getTime()[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_251 $$ calendar.getTime()[ FD ]
Line_256 $$ public void getJIRADate(Date liferayDate) -->Line_257 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_257 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_257 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_257 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ FD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_258 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_258 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_258 $$ cal.getTime()[ FD ]
Line_263 $$ public void getJIRADate(int weeksFromNow) -->Line_264 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_264 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_264 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_264 $$ cal.add(Calendar.MILLISECOND, _getUTCOffset())[ FD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_265 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_265 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_265 $$ cal.getTime()[ FD ]
Line_270 $$ public void getMaxAge(Group group) -->Line_271 $$ int maxAge = TrashUtil.getMaxAge(group)[ CD ]
Line_270 $$ public void getMaxAge(Group group) -->Line_272 $$ calendar.add(Calendar.MINUTE, -maxAge)[ CD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_272 $$ calendar.add(Calendar.MINUTE, -maxAge)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_272 $$ calendar.add(Calendar.MINUTE, -maxAge)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_272 $$ calendar.add(Calendar.MINUTE, -maxAge)[ FD ]
Line_271 $$ int maxAge = TrashUtil.getMaxAge(group)-->Line_272 $$ -maxAge[ FD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_273 $$ calendar.getTime()[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_273 $$ calendar.getTime()[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_273 $$ calendar.getTime()[ FD ]
Line_278 $$ public void setWorkerId(final String workerId) -->Line_279 $$ cal.add(Calendar.MINUTE, Integer.parseInt(ImportTaskProperties.IMPORT_TASK_TIMEOUT_MINUTES))[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_279 $$ cal.add(Calendar.MINUTE, Integer.parseInt(ImportTaskProperties.IMPORT_TASK_TIMEOUT_MINUTES))[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_279 $$ cal.add(Calendar.MINUTE, Integer.parseInt(ImportTaskProperties.IMPORT_TASK_TIMEOUT_MINUTES))[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_279 $$ cal.add(Calendar.MINUTE, Integer.parseInt(ImportTaskProperties.IMPORT_TASK_TIMEOUT_MINUTES))[ FD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_280 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_280 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_280 $$ cal.getTime()[ FD ]
Line_285 $$ public void add(Date date, int iMultiple) -->Line_286 $$ dateTime.add(getUnit().getCalendarConst(), getStep() * iMultiple)[ CD ]
Line_292 $$ public void createUTCDate(final int year, final int dayOfYear, final int millisInDay) -->Line_293 $$ final Calendar calendar = ProductData.UTC.createCalendar()[ CD ]
Line_292 $$ public void createUTCDate(final int year, final int dayOfYear, final int millisInDay) -->Line_294 $$ calendar.set(Calendar.DAY_OF_YEAR, dayOfYear)[ CD ]
Line_293 $$ final Calendar calendar = ProductData.UTC.createCalendar()-->Line_294 $$ calendar.set(Calendar.DAY_OF_YEAR, dayOfYear)[ FD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_294 $$ calendar.set(Calendar.DAY_OF_YEAR, dayOfYear)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_294 $$ calendar.set(Calendar.DAY_OF_YEAR, dayOfYear)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_294 $$ calendar.set(Calendar.DAY_OF_YEAR, dayOfYear)[ FD ]
Line_292 $$ public void createUTCDate(final int year, final int dayOfYear, final int millisInDay) -->Line_295 $$ calendar.add(Calendar.MILLISECOND, millisInDay)[ CD ]
Line_293 $$ final Calendar calendar = ProductData.UTC.createCalendar()-->Line_295 $$ calendar.add(Calendar.MILLISECOND, millisInDay)[ FD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_295 $$ calendar.add(Calendar.MILLISECOND, millisInDay)[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_295 $$ calendar.add(Calendar.MILLISECOND, millisInDay)[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_295 $$ calendar.add(Calendar.MILLISECOND, millisInDay)[ FD ]
Line_293 $$ final Calendar calendar = ProductData.UTC.createCalendar()-->Line_296 $$ calendar.getTime()[ FD ]
Line_220 $$ Calendar calendar = GregorianCalendar.getInstance()-->Line_296 $$ calendar.getTime()[ FD ]
Line_90 $$ Calendar calendar = new GregorianCalendar()-->Line_296 $$ calendar.getTime()[ FD ]
Line_82 $$ Calendar calendar = new GregorianCalendar()-->Line_296 $$ calendar.getTime()[ FD ]
Line_301 $$ public void queryMore(final AbstractTsiProvider provider, final boolean later) -->Line_302 $$ c.add(Calendar.MINUTE, later ? 1 : -1)[ CD ]
Line_169 $$ Calendar c = (Calendar) (startTimestamp.clone())-->Line_302 $$ c.add(Calendar.MINUTE, later ? 1 : -1)[ FD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_302 $$ c.add(Calendar.MINUTE, later ? 1 : -1)[ FD ]
Line_169 $$ Calendar c = (Calendar) (startTimestamp.clone())-->Line_303 $$ c.getTime()[ FD ]
Line_98 $$ Calendar c = new GregorianCalendar(2013, Calendar.JANUARY, 1)-->Line_303 $$ c.getTime()[ FD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_309 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_309 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_309 $$ cal.getTime()[ FD ]
Line_308 $$ public void setupDateStrings() -->Line_310 $$ cal.add(1, Calendar.DAY_OF_YEAR)[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_310 $$ cal.add(1, Calendar.DAY_OF_YEAR)[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_310 $$ cal.add(1, Calendar.DAY_OF_YEAR)[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_310 $$ cal.add(1, Calendar.DAY_OF_YEAR)[ FD ]
Line_315 $$ public void createTestBeanItemContainer() -->Line_316 $$ eventContainer.addBean(new BasicEvent("Test " + i, "Description " + i, cal.getTime()))[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_317 $$ cal.getTime()[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_317 $$ cal.getTime()[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_317 $$ cal.getTime()[ FD ]
Line_315 $$ public void createTestBeanItemContainer() -->Line_318 $$ cal.add(java.util.Calendar.DAY_OF_MONTH, 2)[ CD ]
Line_186 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_318 $$ cal.add(java.util.Calendar.DAY_OF_MONTH, 2)[ FD ]
Line_153 $$ Calendar cal = CalendarFactoryUtil.getCalendar()-->Line_318 $$ cal.add(java.util.Calendar.DAY_OF_MONTH, 2)[ FD ]
Line_50 $$ Calendar cal = new GregorianCalendar()-->Line_318 $$ cal.add(java.util.Calendar.DAY_OF_MONTH, 2)[ FD ]
Line_323 $$ public void updateYears() -->Line_324 $$ yearButtons[i].setText(getFormattedDate("yyyy", //$NON-NLS-1$
tmpcal.getTime()))[ CD ]
Line_323 $$ public void updateYears() -->Line_326 $$ tmpcal.add(Calendar.YEAR, 1)[ CD ]
