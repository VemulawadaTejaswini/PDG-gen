Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void loadFromRootUsingSubpathInFilename() [ CD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_3 $$ final String contents = PathTest.class.getName() + ": loaded from root"[ CD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_4 $$ final File file = createTempFile(contents)[ CD ]
Line_4 $$ final File file = createTempFile(contents)-->Line_4 $$ createTempFile(contents)[ CD ]
Line_3 $$ final String contents = PathTest.class.getName() + ": loaded from root"-->Line_4 $$ createTempFile(contents)[ FD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_5 $$ final File root = findRoot(file)[ CD ]
Line_5 $$ final File root = findRoot(file)-->Line_5 $$ findRoot(file)[ CD ]
Line_4 $$ final File file = createTempFile(contents)-->Line_5 $$ findRoot(file)[ FD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_6 $$ final Path path = new Path(root.getCanonicalPath())[ CD ]
Line_5 $$ final File root = findRoot(file)-->Line_6 $$ root.getCanonicalPath()[ FD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_7 $$ String relative = root.toURI().relativize(file.toURI()).getPath()[ CD ]
Line_7 $$ String relative = root.toURI().relativize(file.toURI()).getPath()-->Line_7 $$ root.toURI().relativize(file.toURI()).getPath()[ CD ]
Line_5 $$ final File root = findRoot(file)-->Line_7 $$ root.toURI()[ FD ]
Line_4 $$ final File file = createTempFile(contents)-->Line_7 $$ file.toURI()[ FD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_8 $$ IResourceStream rs = path.find(PathTest.class, relative)[ CD ]
Line_8 $$ IResourceStream rs = path.find(PathTest.class, relative)-->Line_8 $$ path.find(PathTest.class, relative)[ CD ]
Line_6 $$ final Path path = new Path(root.getCanonicalPath())-->Line_8 $$ path.find(PathTest.class, relative)[ FD ]
Line_7 $$ String relative = root.toURI().relativize(file.toURI()).getPath()-->Line_8 $$ path.find(PathTest.class, relative)[ FD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_9 $$ assertNotNull(rs)[ CD ]
Line_8 $$ IResourceStream rs = path.find(PathTest.class, relative)-->Line_9 $$ assertNotNull(rs)[ FD ]
Line_2 $$ public void loadFromRootUsingSubpathInFilename() -->Line_10 $$ assertContents(contents, rs)[ CD ]
Line_3 $$ final String contents = PathTest.class.getName() + ": loaded from root"-->Line_10 $$ assertContents(contents, rs)[ FD ]
Line_8 $$ IResourceStream rs = path.find(PathTest.class, relative)-->Line_10 $$ assertContents(contents, rs)[ FD ]
