Line_0 $$ Entry-->Line_2 $$ //10
public class func [ CD ]
Line_2 $$ //10
public class func -->Line_3 $$ public void testVersionAgreesWithVERSIONFile() [ CD ]
Line_3 $$ public void testVersionAgreesWithVERSIONFile() -->Line_4 $$ File versionFile = new File("VERSION").getAbsoluteFile()[ CD ]
Line_4 $$ File versionFile = new File("VERSION").getAbsoluteFile()-->Line_4 $$ new File("VERSION").getAbsoluteFile()[ CD ]
Line_3 $$ public void testVersionAgreesWithVERSIONFile() -->Line_5 $$ Assert.assertTrue(String.format("Expected VERSION file to exist, but it doesn't. (path is %s).", versionFile.getAbsolutePath()), versionFile.exists())[ CD ]
Line_4 $$ File versionFile = new File("VERSION").getAbsoluteFile()-->Line_5 $$ versionFile.getAbsolutePath()[ FD ]
Line_4 $$ File versionFile = new File("VERSION").getAbsoluteFile()-->Line_5 $$ versionFile.exists()[ FD ]
Line_3 $$ public void testVersionAgreesWithVERSIONFile() -->Line_6 $$ Assert.assertTrue(String.format("Expected VERSION to be a file, but it doesn't. (path is %s).", versionFile.getAbsolutePath()), versionFile.isFile())[ CD ]
Line_4 $$ File versionFile = new File("VERSION").getAbsoluteFile()-->Line_6 $$ versionFile.getAbsolutePath()[ FD ]
Line_4 $$ File versionFile = new File("VERSION").getAbsoluteFile()-->Line_6 $$ versionFile.isFile()[ FD ]
Line_3 $$ public void testVersionAgreesWithVERSIONFile() -->Line_7 $$ BufferedReader reader = new BufferedReader(new FileReader(versionFile))[ CD ]
Line_3 $$ public void testVersionAgreesWithVERSIONFile() -->Line_8 $$ String firstLine = reader.readLine()[ CD ]
Line_8 $$ String firstLine = reader.readLine()-->Line_8 $$ reader.readLine()[ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new FileReader(versionFile))-->Line_8 $$ reader.readLine()[ FD ]
Line_3 $$ public void testVersionAgreesWithVERSIONFile() -->Line_9 $$ Assert.assertEquals(firstLine, Stripe.VERSION)[ CD ]
Line_8 $$ String firstLine = reader.readLine()-->Line_9 $$ Assert.assertEquals(firstLine, Stripe.VERSION)[ FD ]
