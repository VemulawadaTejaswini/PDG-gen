Line_0 $$ Entry-->Line_2 $$ //21
public class func [ CD ]
Line_2 $$ //21
public class func -->Line_3 $$ public void testReaderOnClientAsResponseEntity() [ CD ]
Line_3 $$ public void testReaderOnClientAsResponseEntity() -->Line_4 $$ Response response = target().path("test/getReader").request().get()[ CD ]
Line_4 $$ Response response = target().path("test/getReader").request().get()-->Line_4 $$ target().path("test/getReader").request().get()[ CD ]
Line_3 $$ public void testReaderOnClientAsResponseEntity() -->Line_5 $$ assertEquals(200, response.getStatus())[ CD ]
Line_4 $$ Response response = target().path("test/getReader").request().get()-->Line_5 $$ response.getStatus()[ FD ]
Line_3 $$ public void testReaderOnClientAsResponseEntity() -->Line_6 $$ final Reader reader = response.readEntity(Reader.class)[ CD ]
Line_6 $$ final Reader reader = response.readEntity(Reader.class)-->Line_6 $$ response.readEntity(Reader.class)[ CD ]
Line_4 $$ Response response = target().path("test/getReader").request().get()-->Line_6 $$ response.readEntity(Reader.class)[ FD ]
Line_3 $$ public void testReaderOnClientAsResponseEntity() -->Line_7 $$ assertNotNull(reader)[ CD ]
Line_6 $$ final Reader reader = response.readEntity(Reader.class)-->Line_7 $$ assertNotNull(reader)[ FD ]
Line_3 $$ public void testReaderOnClientAsResponseEntity() -->Line_8 $$ BufferedReader br = new BufferedReader(reader)[ CD ]
Line_3 $$ public void testReaderOnClientAsResponseEntity() -->Line_9 $$ assertEquals(GET_READER_RESPONSE, br.readLine())[ CD ]
Line_8 $$ BufferedReader br = new BufferedReader(reader)-->Line_9 $$ br.readLine()[ FD ]
