Line_0 $$ Entry-->Line_2 $$ //29
public class func [ CD ]
Line_2 $$ //29
public class func -->Line_3 $$ public void toUri(final String s) [ CD ]
Line_3 $$ public void toUri(final String s) -->Line_4 $$ URI uri = createURI(s)[ CD ]
Line_4 $$ URI uri = createURI(s)-->Line_4 $$ createURI(s)[ CD ]
Line_3 $$ public void toUri(final String s) -->Line_5 $$ if (uri.getScheme() != null) [ CD ]
Line_4 $$ URI uri = createURI(s)-->Line_5 $$ uri.getScheme()[ FD ]
Line_5 $$ if (uri.getScheme() != null) -->Line_6 $$ final Matcher matcher = supportedUriSchemeRe.matcher(uri.getScheme())[ CD ]
Line_6 $$ final Matcher matcher = supportedUriSchemeRe.matcher(uri.getScheme())-->Line_6 $$ supportedUriSchemeRe.matcher(uri.getScheme())[ CD ]
Line_4 $$ URI uri = createURI(s)-->Line_6 $$ uri.getScheme()[ FD ]
Line_5 $$ if (uri.getScheme() != null) -->Line_7 $$ Preconditions.checkArgument(matcher.find(), "Supported URI schemes are: http, https and file")[ CD ]
Line_6 $$ final Matcher matcher = supportedUriSchemeRe.matcher(uri.getScheme())-->Line_7 $$ matcher.find()[ FD ]
Line_5 $$ if (uri.getScheme() != null) -->Line_8 $$ return uri;[ CD ]
Line_3 $$ public void toUri(final String s) -->Line_10 $$ return new File(s).toURI().normalize();[ CD ]
Line_10 $$ return new File(s).toURI().normalize();-->Line_10 $$ new File(s).toURI().normalize()[ CD ]
