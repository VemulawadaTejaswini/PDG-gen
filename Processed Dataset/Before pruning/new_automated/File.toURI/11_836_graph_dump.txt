Line_0 $$ Entry-->Line_2 $$ //11
public class func [ CD ]
Line_2 $$ //11
public class func -->Line_3 $$ public void toBaseDir(File toDir) [ CD ]
Line_3 $$ public void toBaseDir(File toDir) -->Line_4 $$ String path = toDir.toURI().getPath()[ CD ]
Line_4 $$ String path = toDir.toURI().getPath()-->Line_4 $$ toDir.toURI().getPath()[ CD ]
Line_3 $$ public void toBaseDir(File toDir) -->Line_5 $$ if (!path.endsWith(myRoot)) [ CD ]
Line_5 $$ if (!path.endsWith(myRoot)) -->Line_5 $$ !path.endsWith(myRoot)[ CD ]
Line_5 $$ !path.endsWith(myRoot)-->Line_5 $$ path.endsWith(myRoot)[ CD ]
Line_4 $$ String path = toDir.toURI().getPath()-->Line_5 $$ path.endsWith(myRoot)[ FD ]
Line_3 $$ public void toBaseDir(File toDir) -->Line_8 $$ return new File(path.substring(0, path.length() - myRoot.length()));[ CD ]
Line_4 $$ String path = toDir.toURI().getPath()-->Line_8 $$ path.substring(0, path.length() - myRoot.length())[ FD ]
Line_4 $$ String path = toDir.toURI().getPath()-->Line_8 $$ path.length()[ FD ]
