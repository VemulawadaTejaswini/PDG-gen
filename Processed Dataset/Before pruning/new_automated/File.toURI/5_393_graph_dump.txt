Line_0 $$ Entry-->Line_2 $$ //5
public class func [ CD ]
Line_2 $$ //5
public class func -->Line_3 $$ public void loadExistingDataMap(File dataMapFile) [ CD ]
Line_3 $$ public void loadExistingDataMap(File dataMapFile) -->Line_4 $$ if (dataMapFile != null && dataMapFile.exists() && dataMapFile.canRead()) [ CD ]
Line_4 $$ if (dataMapFile != null && dataMapFile.exists() && dataMapFile.canRead()) -->Line_5 $$ DataMap dataMap = mapLoader.loadDataMap(new InputSource(dataMapFile.getCanonicalPath()))[ CD ]
Line_5 $$ DataMap dataMap = mapLoader.loadDataMap(new InputSource(dataMapFile.getCanonicalPath()))-->Line_5 $$ mapLoader.loadDataMap(new InputSource(dataMapFile.getCanonicalPath()))[ CD ]
Line_4 $$ if (dataMapFile != null && dataMapFile.exists() && dataMapFile.canRead()) -->Line_6 $$ dataMap.setNamespace(new EntityResolver(Collections.singleton(dataMap)))[ CD ]
Line_5 $$ DataMap dataMap = mapLoader.loadDataMap(new InputSource(dataMapFile.getCanonicalPath()))-->Line_6 $$ dataMap.setNamespace(new EntityResolver(Collections.singleton(dataMap)))[ FD ]
Line_5 $$ DataMap dataMap = mapLoader.loadDataMap(new InputSource(dataMapFile.getCanonicalPath()))-->Line_6 $$ Collections.singleton(dataMap)[ FD ]
Line_4 $$ if (dataMapFile != null && dataMapFile.exists() && dataMapFile.canRead()) -->Line_7 $$ dataMap.setConfigurationSource(new URLResource(dataMapFile.toURI().toURL()))[ CD ]
Line_5 $$ DataMap dataMap = mapLoader.loadDataMap(new InputSource(dataMapFile.getCanonicalPath()))-->Line_7 $$ dataMap.setConfigurationSource(new URLResource(dataMapFile.toURI().toURL()))[ FD ]
Line_4 $$ if (dataMapFile != null && dataMapFile.exists() && dataMapFile.canRead()) -->Line_9 $$ return dataMap;[ CD ]
