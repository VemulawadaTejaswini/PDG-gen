Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void testDuplicate() [ CD ]
Line_3 $$ public void testDuplicate() -->Line_4 $$ assertTrue(CatalogUtilities.getRedirect(URI.create(PIZZA_NS), catalog) == null)[ CD ]
Line_3 $$ public void testDuplicate() -->Line_5 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)[ CD ]
Line_5 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)-->Line_5 $$ CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)[ CD ]
Line_3 $$ public void testDuplicate() -->Line_6 $$ assertTrue(duplicateRedirect.equals(new File(TEST_DIR, PIZZA_FILE).toURI()) || duplicateRedirect.equals(new File(TEST_DIR, AMINO_ACID_FILE).toURI()))[ CD ]
Line_5 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)-->Line_6 $$ duplicateRedirect.equals(new File(TEST_DIR, PIZZA_FILE).toURI())[ FD ]
Line_5 $$ URI duplicateRedirect = CatalogUtilities.getRedirect(URI.create(CatalogEntryManager.DUPLICATE_SCHEME + PIZZA_NS), catalog)-->Line_6 $$ duplicateRedirect.equals(new File(TEST_DIR, AMINO_ACID_FILE).toURI())[ FD ]
