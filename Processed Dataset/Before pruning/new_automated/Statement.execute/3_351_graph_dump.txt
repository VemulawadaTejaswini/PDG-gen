Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void testCountDistinctNotNull() [ CD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_4 $$ deleteDb("cases")[ CD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_5 $$ Connection conn = getConnection("cases")[ CD ]
Line_5 $$ Connection conn = getConnection("cases")-->Line_5 $$ getConnection("cases")[ CD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_6 $$ Statement stat = conn.createStatement()[ CD ]
Line_6 $$ Statement stat = conn.createStatement()-->Line_6 $$ conn.createStatement()[ CD ]
Line_5 $$ Connection conn = getConnection("cases")-->Line_6 $$ conn.createStatement()[ FD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_7 $$ stat.execute("create table test(id int not null) as " + "select 1 from system_range(1, 10)")[ CD ]
Line_6 $$ Statement stat = conn.createStatement()-->Line_7 $$ stat.execute("create table test(id int not null) as " + "select 1 from system_range(1, 10)")[ FD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_9 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")[ CD ]
Line_9 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_9 $$ stat.executeQuery("select count(distinct id) from test")[ CD ]
Line_6 $$ Statement stat = conn.createStatement()-->Line_9 $$ stat.executeQuery("select count(distinct id) from test")[ FD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_10 $$ rs.next()[ CD ]
Line_9 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_10 $$ rs.next()[ FD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_11 $$ assertEquals(1, rs.getInt(1))[ CD ]
Line_9 $$ ResultSet rs = stat.executeQuery("select count(distinct id) from test")-->Line_11 $$ rs.getInt(1)[ FD ]
Line_3 $$ public void testCountDistinctNotNull() -->Line_12 $$ conn.close()[ CD ]
Line_5 $$ Connection conn = getConnection("cases")-->Line_12 $$ conn.close()[ FD ]
