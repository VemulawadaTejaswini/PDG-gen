Line_0 $$ Entry-->Line_2 $$ //7
public class func [ CD ]
Line_2 $$ //7
public class func -->Line_3 $$ public void testPrepareExecute(Connection conn) [ CD ]
Line_3 $$ public void testPrepareExecute(Connection conn) -->Line_4 $$ Statement stat = conn.createStatement()[ CD ]
Line_4 $$ Statement stat = conn.createStatement()-->Line_4 $$ conn.createStatement()[ CD ]
Line_3 $$ public void testPrepareExecute(Connection conn) -->Line_5 $$ stat.execute("prepare test(int, int) as select ?1*?2")[ CD ]
Line_4 $$ Statement stat = conn.createStatement()-->Line_5 $$ stat.execute("prepare test(int, int) as select ?1*?2")[ FD ]
Line_3 $$ public void testPrepareExecute(Connection conn) -->Line_6 $$ ResultSet rs = stat.executeQuery("execute test(3, 2)")[ CD ]
Line_6 $$ ResultSet rs = stat.executeQuery("execute test(3, 2)")-->Line_6 $$ stat.executeQuery("execute test(3, 2)")[ CD ]
Line_4 $$ Statement stat = conn.createStatement()-->Line_6 $$ stat.executeQuery("execute test(3, 2)")[ FD ]
Line_3 $$ public void testPrepareExecute(Connection conn) -->Line_7 $$ rs.next()[ CD ]
Line_6 $$ ResultSet rs = stat.executeQuery("execute test(3, 2)")-->Line_7 $$ rs.next()[ FD ]
Line_3 $$ public void testPrepareExecute(Connection conn) -->Line_8 $$ assertEquals(6, rs.getInt(1))[ CD ]
Line_6 $$ ResultSet rs = stat.executeQuery("execute test(3, 2)")-->Line_8 $$ rs.getInt(1)[ FD ]
Line_3 $$ public void testPrepareExecute(Connection conn) -->Line_9 $$ stat.execute("deallocate test")[ CD ]
Line_4 $$ Statement stat = conn.createStatement()-->Line_9 $$ stat.execute("deallocate test")[ FD ]
