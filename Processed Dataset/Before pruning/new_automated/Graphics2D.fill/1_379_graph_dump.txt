Line_0 $$ Entry-->Line_2 $$ //1
public class func [ CD ]
Line_2 $$ //1
public class func -->Line_3 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) [ CD ]
Line_3 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_4 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)[ CD ]
Line_4 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)-->Line_4 $$ ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)[ CD ]
Line_3 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_5 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) [ CD ]
Line_3 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_3 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) [ CD ]
Line_4 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)-->Line_5 $$ Math.min(maxLayer, building)[ FD ]
Line_5 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) -->Line_6 $$ if (layer == maxLayer / 3) [ CD ]
Line_6 $$ if (layer == maxLayer / 3) -->Line_8 $$ -(layer - 1)[ CD ]
Line_5 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) -->Line_10 $$ if (layer >= maxLayer / 3) [ CD ]
Line_5 $$ for (; layer < Math.min(maxLayer, building) - 1; layer++) -->Line_14 $$ g2.fill(new Rectangle2D.Double(iglooOffsetx + 3 * FrostbiteDomain.gameWidth / 4, iglooOffsety + FrostbiteDomain.gameHeight / 5 - brickHeight * layer, iglooWidth, brickHeight))[ CD ]
Line_3 $$ public void paintObject(Graphics2D g2, State s, ObjectInstance ob, float cWidth, float cHeight) -->Line_18 $$ if (building >= maxLayer) [ CD ]
Line_4 $$ int building = ob.getIntValForAttribute(FrostbiteDomain.BUILDINGATTNAME)-->Line_18 $$ if (building >= maxLayer) [ FD ]
Line_18 $$ if (building >= maxLayer) -->Line_19 $$ g2.setColor(Color.black)[ CD ]
Line_18 $$ if (building >= maxLayer) -->Line_20 $$ int doorWidth = FrostbiteDomain.gameWidth / 28[ CD ]
Line_18 $$ if (building >= maxLayer) -->Line_21 $$ int doorHeight = FrostbiteDomain.gameHeight / 20[ CD ]
Line_18 $$ if (building >= maxLayer) -->Line_22 $$ g2.fill(new Rectangle2D.Double(3 * FrostbiteDomain.gameWidth / 4 + FrostbiteDomain.gameWidth / 12 - doorWidth / 2, FrostbiteDomain.gameHeight / 5 - doorHeight / 2, doorWidth, doorHeight))[ CD ]
