Line_0 $$ Entry-->Line_2 $$ //274
public class func [ CD ]
Line_2 $$ //274
public class func -->Line_3 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) [ CD ]
Line_3 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_4 $$ socket.connect(new InetSocketAddress(dest.getHost(), dest.getPort()), soTimeoutMs)[ CD ]
Line_3 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_5 $$ recordSocketCreation(dest, socket)[ CD ]
Line_3 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_6 $$ SocketAndStreams sands = new SocketAndStreams(socket, dest.getRequestFormatType())[ CD ]
Line_3 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_7 $$ negotiateProtocol(sands, dest.getRequestFormatType())[ CD ]
Line_6 $$ SocketAndStreams sands = new SocketAndStreams(socket, dest.getRequestFormatType())-->Line_7 $$ negotiateProtocol(sands, dest.getRequestFormatType())[ FD ]
Line_3 $$ public void createAsync(SocketDestination dest, KeyedResourcePool<SocketDestination, SocketAndStreams> pool) -->Line_8 $$ pool.checkin(dest, sands)[ CD ]
Line_6 $$ SocketAndStreams sands = new SocketAndStreams(socket, dest.getRequestFormatType())-->Line_8 $$ pool.checkin(dest, sands)[ FD ]
