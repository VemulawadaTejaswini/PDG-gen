Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) [ CD ]
Line_3 $$ public void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) -->Line_4 $$ Class remoteClass = endpoint.getClass()[ CD ]
Line_4 $$ Class remoteClass = endpoint.getClass()-->Line_4 $$ endpoint.getClass()[ CD ]
Line_3 $$ public void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) -->Line_5 $$ Preconditions.checkArgument(localClass.equals(remoteClass), "Local address %s must be of same family as remote address %s.", localAddr, endpoint)[ CD ]
Line_4 $$ Class remoteClass = endpoint.getClass()-->Line_5 $$ localClass.equals(remoteClass)[ FD ]
Line_3 $$ public void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) -->Line_8 $$ socket.bind(localAddr)[ CD ]
Line_3 $$ public void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) -->Line_9 $$ if (ch == null) [ CD ]
Line_9 $$ if (ch == null) -->Line_11 $$ socket.connect(endpoint, timeout)[ CD ]
Line_9 $$ if (ch == null) -->Line_13 $$ SocketIOWithTimeout.connect(ch, endpoint, timeout)[ CD ]
