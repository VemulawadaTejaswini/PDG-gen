Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void retrieveParts(int contentId, int[] start, int[] end) [ CD ]
Line_3 $$ public void retrieveParts(int contentId, int[] start, int[] end) -->Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) [ CD ]
Line_3 $$ public void retrieveParts(int contentId, int[] start, int[] end) -->Line_3 $$ public void retrieveParts(int contentId, int[] start, int[] end) [ CD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_4 $$ int j = firstBlock[ CD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_4 $$ j++[ CD ]
Line_4 $$ int j = firstBlock-->Line_4 $$ j++[ FD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_5 $$ long readStartOffset = e.getBlockStartOffset(j)[ CD ]
Line_5 $$ long readStartOffset = e.getBlockStartOffset(j)-->Line_5 $$ e.getBlockStartOffset(j)[ CD ]
Line_4 $$ int j = firstBlock-->Line_5 $$ e.getBlockStartOffset(j)[ FD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_6 $$ int bytesToRead = (int) (e.getBlockEndOffset(j) - readStartOffset)[ CD ]
Line_4 $$ int j = firstBlock-->Line_6 $$ e.getBlockEndOffset(j)[ FD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_7 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)[ CD ]
Line_7 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_7 $$ ByteBuffer.allocate(bytesToRead)[ CD ]
Line_6 $$ int bytesToRead = (int) (e.getBlockEndOffset(j) - readStartOffset)-->Line_7 $$ ByteBuffer.allocate(bytesToRead)[ FD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_8 $$ int bytesRead = fileChannel.read(buffer, readStartOffset)[ CD ]
Line_8 $$ int bytesRead = fileChannel.read(buffer, readStartOffset)-->Line_8 $$ fileChannel.read(buffer, readStartOffset)[ CD ]
Line_7 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_8 $$ fileChannel.read(buffer, readStartOffset)[ FD ]
Line_5 $$ long readStartOffset = e.getBlockStartOffset(j)-->Line_8 $$ fileChannel.read(buffer, readStartOffset)[ FD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_9 $$ if (bytesRead < bytesToRead) [ CD ]
Line_8 $$ int bytesRead = fileChannel.read(buffer, readStartOffset)-->Line_9 $$ if (bytesRead < bytesToRead) [ FD ]
Line_6 $$ int bytesToRead = (int) (e.getBlockEndOffset(j) - readStartOffset)-->Line_9 $$ if (bytesRead < bytesToRead) [ FD ]
Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) -->Line_14 $$ decoded.append(decodeBlock(buffer.array(), 0, bytesRead))[ CD ]
Line_8 $$ int bytesRead = fileChannel.read(buffer, readStartOffset)-->Line_14 $$ decodeBlock(buffer.array(), 0, bytesRead)[ FD ]
Line_7 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_14 $$ buffer.array()[ FD ]
Line_3 $$ public void retrieveParts(int contentId, int[] start, int[] end) -->Line_16 $$ result[i] = decoded.toString().substring(firstChar, firstChar + b - a)[ CD ]
Line_16 $$ result[i] = decoded.toString().substring(firstChar, firstChar + b - a)-->Line_16 $$ decoded.toString().substring(firstChar, firstChar + b - a)[ CD ]
Line_4 $$ int j = firstBlock-->Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) [ FD ]
Line_4 $$ int j = firstBlock-->Line_4 $$ for (int j = firstBlock; j <= lastBlock; j++) [ FD ]
Line_4 $$ int j = firstBlock-->Line_4 $$ j++[ FD ]
Line_4 $$ int j = firstBlock-->Line_5 $$ e.getBlockStartOffset(j)[ FD ]
Line_4 $$ int j = firstBlock-->Line_6 $$ e.getBlockEndOffset(j)[ FD ]
Line_6 $$ int bytesToRead = (int) (e.getBlockEndOffset(j) - readStartOffset)-->Line_7 $$ ByteBuffer.allocate(bytesToRead)[ FD ]
Line_7 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_8 $$ fileChannel.read(buffer, readStartOffset)[ FD ]
Line_5 $$ long readStartOffset = e.getBlockStartOffset(j)-->Line_8 $$ fileChannel.read(buffer, readStartOffset)[ FD ]
Line_8 $$ int bytesRead = fileChannel.read(buffer, readStartOffset)-->Line_9 $$ if (bytesRead < bytesToRead) [ FD ]
Line_6 $$ int bytesToRead = (int) (e.getBlockEndOffset(j) - readStartOffset)-->Line_9 $$ if (bytesRead < bytesToRead) [ FD ]
Line_8 $$ int bytesRead = fileChannel.read(buffer, readStartOffset)-->Line_14 $$ decodeBlock(buffer.array(), 0, bytesRead)[ FD ]
Line_7 $$ ByteBuffer buffer = ByteBuffer.allocate(bytesToRead)-->Line_14 $$ buffer.array()[ FD ]
