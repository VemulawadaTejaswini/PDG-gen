Line_0 $$ Entry-->Line_2 $$ //18
public class func [ CD ]
Line_2 $$ //18
public class func -->Line_3 $$ public void findHighIdBackwards() [ CD ]
Line_3 $$ public void findHighIdBackwards() -->Line_4 $$ for (long i = highId; i > 0; i--) [ CD ]
Line_3 $$ public void findHighIdBackwards() -->Line_3 $$ public void findHighIdBackwards() [ CD ]
Line_4 $$ for (long i = highId; i > 0; i--) -->Line_4 $$ long i = highId[ CD ]
Line_4 $$ for (long i = highId; i > 0; i--) -->Line_4 $$ i--[ CD ]
Line_4 $$ long i = highId-->Line_4 $$ i--[ FD ]
Line_4 $$ for (long i = highId; i > 0; i--) -->Line_6 $$ fileChannel.position(i * recordSize)[ CD ]
Line_4 $$ for (long i = highId; i > 0; i--) -->Line_7 $$ if (fileChannel.read(byteBuffer) > 0) [ CD ]
Line_7 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_9 $$ byteBuffer.flip()[ CD ]
Line_7 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_10 $$ byte inUse = byteBuffer.get()[ CD ]
Line_10 $$ byte inUse = byteBuffer.get()-->Line_10 $$ byteBuffer.get()[ CD ]
Line_7 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_11 $$ byteBuffer.clear()[ CD ]
Line_7 $$ if (fileChannel.read(byteBuffer) > 0) -->Line_12 $$ if (inUse != 0) [ CD ]
Line_10 $$ byte inUse = byteBuffer.get()-->Line_12 $$ if (inUse != 0) [ FD ]
Line_12 $$ if (inUse != 0) -->Line_14 $$ return i;[ CD ]
Line_4 $$ long i = highId-->Line_4 $$ for (long i = highId; i > 0; i--) [ FD ]
Line_4 $$ long i = highId-->Line_4 $$ for (long i = highId; i > 0; i--) [ FD ]
Line_4 $$ long i = highId-->Line_4 $$ i--[ FD ]
Line_10 $$ byte inUse = byteBuffer.get()-->Line_12 $$ if (inUse != 0) [ FD ]
