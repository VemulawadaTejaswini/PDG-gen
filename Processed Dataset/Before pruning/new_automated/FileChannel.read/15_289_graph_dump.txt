Line_0 $$ Entry-->Line_2 $$ //15
public class func [ CD ]
Line_2 $$ //15
public class func -->Line_3 $$ public void readFile(final File file) [ CD ]
Line_3 $$ public void readFile(final File file) -->Line_4 $$ final FileChannel channel = new FileInputStream(file).getChannel()[ CD ]
Line_4 $$ final FileChannel channel = new FileInputStream(file).getChannel()-->Line_4 $$ new FileInputStream(file).getChannel()[ CD ]
Line_3 $$ public void readFile(final File file) -->Line_5 $$ final long bytesTotal = channel.size()[ CD ]
Line_5 $$ final long bytesTotal = channel.size()-->Line_5 $$ channel.size()[ CD ]
Line_4 $$ final FileChannel channel = new FileInputStream(file).getChannel()-->Line_5 $$ channel.size()[ FD ]
Line_3 $$ public void readFile(final File file) -->Line_6 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)[ CD ]
Line_6 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)-->Line_6 $$ ByteBuffer.allocateDirect((int) bytesTotal)[ CD ]
Line_3 $$ public void readFile(final File file) -->Line_7 $$ do [ CD ]
Line_3 $$ public void readFile(final File file) -->Line_3 $$ public void readFile(final File file) [ CD ]
Line_5 $$ final long bytesTotal = channel.size()-->Line_7 $$ do [ FD ]
Line_7 $$ do -->Line_8 $$ channel.read(buffer)[ CD ]
Line_4 $$ final FileChannel channel = new FileInputStream(file).getChannel()-->Line_8 $$ channel.read(buffer)[ FD ]
Line_6 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)-->Line_8 $$ channel.read(buffer)[ FD ]
Line_3 $$ public void readFile(final File file) -->Line_10 $$ buffer.flip()[ CD ]
Line_6 $$ final ByteBuffer buffer = ByteBuffer.allocateDirect((int) bytesTotal)-->Line_10 $$ buffer.flip()[ FD ]
