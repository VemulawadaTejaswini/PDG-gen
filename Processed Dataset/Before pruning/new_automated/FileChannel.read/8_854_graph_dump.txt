Line_0 $$ Entry-->Line_2 $$ //8
public class func [ CD ]
Line_2 $$ //8
public class func -->Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) [ CD ]
Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) -->Line_4 $$ logger.info("Hashing data from [ CD ]
Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) -->Line_11 $$ file.length()[ CD ]
Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) -->Line_12 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) -->Line_13 $$ FileChannel channel = fis.getChannel()[ CD ]
Line_13 $$ FileChannel channel = fis.getChannel()-->Line_13 $$ fis.getChannel()[ CD ]
Line_12 $$ FileInputStream fis = new FileInputStream(file)-->Line_13 $$ fis.getChannel()[ FD ]
Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) -->Line_14 $$ while (channel.read(buffer) > 0) [ CD ]
Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) -->Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) [ CD ]
Line_13 $$ FileChannel channel = fis.getChannel()-->Line_14 $$ channel.read(buffer)[ FD ]
Line_14 $$ while (channel.read(buffer) > 0) -->Line_15 $$ if (buffer.remaining() == 0) [ CD ]
Line_15 $$ if (buffer.remaining() == 0) -->Line_16 $$ buffer.clear()[ CD ]
Line_15 $$ if (buffer.remaining() == 0) -->Line_17 $$ results.add(executor.submit(new CallableChunkHasher(buffer)))[ CD ]
Line_14 $$ while (channel.read(buffer) > 0) -->Line_20 $$ if (results.size() >= threads) [ CD ]
Line_20 $$ if (results.size() >= threads) -->Line_20 $$ results.size()[ CD ]
Line_20 $$ if (results.size() >= threads) -->Line_21 $$ accumulateHashes(hashes, results)[ CD ]
Line_14 $$ while (channel.read(buffer) > 0) -->Line_24 $$ if (channel.position() / (double) channel.size() * 100f > step) [ CD ]
Line_13 $$ FileChannel channel = fis.getChannel()-->Line_24 $$ channel.position()[ FD ]
Line_13 $$ FileChannel channel = fis.getChannel()-->Line_24 $$ channel.size()[ FD ]
Line_24 $$ if (channel.position() / (double) channel.size() * 100f > step) -->Line_25 $$ logger.info("  ... [ CD ]
Line_3 $$ public void hashFiles(List<File> files, int pieceLenght) -->Line_29 $$ channel.close()[ CD ]
Line_13 $$ FileChannel channel = fis.getChannel()-->Line_29 $$ channel.close()[ FD ]
