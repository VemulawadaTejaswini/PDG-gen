Line_0 $$ Entry-->Line_2 $$ //20
public class func [ CD ]
Line_2 $$ //20
public class func -->Line_3 $$ public void runTests() [ CD ]
Line_3 $$ public void runTests() -->Line_4 $$ while (fc.position() < fc.size()) [ CD ]
Line_3 $$ public void runTests() -->Line_3 $$ public void runTests() [ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_5 $$ fc.read(buffer)[ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_6 $$ buffer.flip()[ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_8 $$ byte[] raw = new byte[buffer.limit()][ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_9 $$ System.arraycopy(buffer.array(), 0, raw, 0, raw.length)[ CD ]
Line_8 $$ byte[] raw = new byte[buffer.limit()]-->Line_9 $$ System.arraycopy(buffer.array(), 0, raw, 0, raw.length)[ FD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_11 $$ sha1Gudy.update(buffer)[ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_12 $$ sha1Gudy.saveState()[ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_13 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[56081])[ CD ]
Line_13 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[56081])-->Line_13 $$ ByteBuffer.wrap(new byte[56081])[ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_14 $$ sha1Gudy.digest(bb)[ CD ]
Line_13 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[56081])-->Line_14 $$ sha1Gudy.digest(bb)[ FD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_15 $$ sha1Gudy.restoreState()[ CD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_17 $$ sha1Sun.update(raw)[ CD ]
Line_8 $$ byte[] raw = new byte[buffer.limit()]-->Line_17 $$ sha1Sun.update(raw)[ FD ]
Line_4 $$ while (fc.position() < fc.size()) -->Line_19 $$ buffer.clear()[ CD ]
Line_8 $$ byte[] raw = new byte[buffer.limit()]-->Line_9 $$ System.arraycopy(buffer.array(), 0, raw, 0, raw.length)[ FD ]
Line_13 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[56081])-->Line_14 $$ sha1Gudy.digest(bb)[ FD ]
Line_8 $$ byte[] raw = new byte[buffer.limit()]-->Line_17 $$ sha1Sun.update(raw)[ FD ]
