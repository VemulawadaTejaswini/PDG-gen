Line_0 $$ Entry-->Line_2 $$ //10
public class func [ CD ]
Line_2 $$ //10
public class func -->Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) [ CD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)[ CD ]
Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)-->Line_4 $$ ByteBuffer.wrap(header)[ CD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_5 $$ long read = ch.read(h)[ CD ]
Line_5 $$ long read = ch.read(h)-->Line_5 $$ ch.read(h)[ CD ]
Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)-->Line_5 $$ ch.read(h)[ FD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_6 $$ if (read != HINT_HEADER_SIZE) [ CD ]
Line_5 $$ long read = ch.read(h)-->Line_6 $$ if (read != HINT_HEADER_SIZE) [ FD ]
Line_6 $$ if (read != HINT_HEADER_SIZE) -->Line_8 $$ return acc;[ CD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_10 $$ h.rewind()[ CD ]
Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)-->Line_10 $$ h.rewind()[ FD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_11 $$ int tstamp = h.getInt()[ CD ]
Line_11 $$ int tstamp = h.getInt()-->Line_11 $$ h.getInt()[ CD ]
Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)-->Line_11 $$ h.getInt()[ FD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_12 $$ int key_len = h.getChar()[ CD ]
Line_12 $$ int key_len = h.getChar()-->Line_12 $$ h.getChar()[ CD ]
Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)-->Line_12 $$ h.getChar()[ FD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_13 $$ int entry_len = h.getInt()[ CD ]
Line_13 $$ int entry_len = h.getInt()-->Line_13 $$ h.getInt()[ CD ]
Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)-->Line_13 $$ h.getInt()[ FD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_14 $$ long entry_off = h.getLong()[ CD ]
Line_14 $$ long entry_off = h.getLong()-->Line_14 $$ h.getLong()[ CD ]
Line_4 $$ ByteBuffer h = ByteBuffer.wrap(header)-->Line_14 $$ h.getLong()[ FD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_15 $$ ByteBuffer key = ByteBuffer.wrap(k)[ CD ]
Line_15 $$ ByteBuffer key = ByteBuffer.wrap(k)-->Line_15 $$ ByteBuffer.wrap(k)[ CD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_16 $$ read = ch.read(key)[ CD ]
Line_5 $$ long read = ch.read(h)-->Line_16 $$ read = ch.read(key)[ FD ]
Line_16 $$ read = ch.read(key)-->Line_16 $$ read = ch.read(key)[ FD ]
Line_16 $$ read = ch.read(key)-->Line_16 $$ ch.read(key)[ CD ]
Line_15 $$ ByteBuffer key = ByteBuffer.wrap(k)-->Line_16 $$ ch.read(key)[ FD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_17 $$ if (read != key_len) [ CD ]
Line_5 $$ long read = ch.read(h)-->Line_17 $$ if (read != key_len) [ FD ]
Line_16 $$ read = ch.read(key)-->Line_17 $$ if (read != key_len) [ FD ]
Line_12 $$ int key_len = h.getChar()-->Line_17 $$ if (read != key_len) [ FD ]
Line_17 $$ if (read != key_len) -->Line_19 $$ return acc;[ CD ]
Line_3 $$ public void fold_keys_hintfile(KeyIter<T> iter, T acc) -->Line_21 $$ acc = iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)[ CD ]
Line_21 $$ acc = iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)-->Line_21 $$ acc = iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)[ FD ]
Line_21 $$ acc = iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)-->Line_21 $$ iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)[ CD ]
Line_11 $$ int tstamp = h.getInt()-->Line_21 $$ iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)[ FD ]
Line_14 $$ long entry_off = h.getLong()-->Line_21 $$ iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)[ FD ]
Line_13 $$ int entry_len = h.getInt()-->Line_21 $$ iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)[ FD ]
Line_21 $$ acc = iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)-->Line_21 $$ iter.each(ByteString.copyFrom(k), tstamp, entry_off, entry_len, acc)[ FD ]
