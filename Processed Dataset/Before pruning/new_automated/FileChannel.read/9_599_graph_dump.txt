Line_0 $$ Entry-->Line_2 $$ //9
public class func [ CD ]
Line_2 $$ //9
public class func -->Line_3 $$ public void loadBuffer(FileChannel indexFile, long offset, int occupiedSpace) [ CD ]
Line_3 $$ public void loadBuffer(FileChannel indexFile, long offset, int occupiedSpace) -->Line_4 $$ ByteBuffer buffer = ByteBuffer.allocate(occupiedSpace)[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocate(occupiedSpace)-->Line_4 $$ ByteBuffer.allocate(occupiedSpace)[ CD ]
Line_3 $$ public void loadBuffer(FileChannel indexFile, long offset, int occupiedSpace) -->Line_5 $$ do [ CD ]
Line_3 $$ public void loadBuffer(FileChannel indexFile, long offset, int occupiedSpace) -->Line_3 $$ public void loadBuffer(FileChannel indexFile, long offset, int occupiedSpace) [ CD ]
Line_5 $$ do -->Line_6 $$ int nowRead = indexFile.read(buffer, offset + read)[ CD ]
Line_6 $$ int nowRead = indexFile.read(buffer, offset + read)-->Line_6 $$ indexFile.read(buffer, offset + read)[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocate(occupiedSpace)-->Line_6 $$ indexFile.read(buffer, offset + read)[ FD ]
Line_5 $$ do -->Line_7 $$ if (nowRead < 0) [ CD ]
Line_6 $$ int nowRead = indexFile.read(buffer, offset + read)-->Line_7 $$ if (nowRead < 0) [ FD ]
Line_3 $$ public void loadBuffer(FileChannel indexFile, long offset, int occupiedSpace) -->Line_13 $$ buffer.rewind()[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocate(occupiedSpace)-->Line_13 $$ buffer.rewind()[ FD ]
Line_6 $$ int nowRead = indexFile.read(buffer, offset + read)-->Line_7 $$ if (nowRead < 0) [ FD ]
