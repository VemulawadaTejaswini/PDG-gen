Line_0 $$ Entry-->Line_2 $$ //16
public class func [ CD ]
Line_2 $$ //16
public class func -->Line_3 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) [ CD ]
Line_3 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_4 $$ for (int i = 0; i < bbs.length; i++) [ CD ]
Line_3 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_3 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) [ CD ]
Line_4 $$ for (int i = 0; i < bbs.length; i++) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < bbs.length; i++) -->Line_4 $$ i++[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ for (int i = 0; i < bbs.length; i++) -->Line_6 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)[ CD ]
Line_6 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_6 $$ bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)[ CD ]
Line_6 $$ bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_6 $$ buffers[i].getBuffer(DirectByteBuffer.SS_FILE)[ CD ]
Line_4 $$ for (int i = 0; i < bbs.length; i++) -->Line_8 $$ int pos = original_positions[i] = bb.position()[ CD ]
Line_8 $$ int pos = original_positions[i] = bb.position()-->Line_8 $$ original_positions[i] = bb.position()[ CD ]
Line_8 $$ original_positions[i] = bb.position()-->Line_8 $$ bb.position()[ CD ]
Line_6 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_8 $$ bb.position()[ FD ]
Line_4 $$ for (int i = 0; i < bbs.length; i++) -->Line_10 $$ if (pos != bb.limit()) [ CD ]
Line_8 $$ int pos = original_positions[i] = bb.position()-->Line_10 $$ if (pos != bb.limit()) [ FD ]
Line_6 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_10 $$ bb.limit()[ FD ]
Line_3 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_15 $$ if (last_bb != null) [ CD ]
Line_15 $$ if (last_bb != null) -->Line_17 $$ int loop = 0[ CD ]
Line_15 $$ if (last_bb != null) -->Line_25 $$ while (fc.position() < fc.size() && last_bb.hasRemaining()) [ CD ]
Line_15 $$ if (last_bb != null) -->Line_15 $$ if (last_bb != null) [ CD ]
Line_25 $$ while (fc.position() < fc.size() && last_bb.hasRemaining()) -->Line_27 $$ long read = fc.read(bbs)[ CD ]
Line_27 $$ long read = fc.read(bbs)-->Line_27 $$ fc.read(bbs)[ CD ]
Line_25 $$ while (fc.position() < fc.size() && last_bb.hasRemaining()) -->Line_29 $$ if (read > 0) [ CD ]
Line_27 $$ long read = fc.read(bbs)-->Line_29 $$ if (read > 0) [ FD ]
Line_29 $$ if (read > 0) -->Line_31 $$ loop = 0[ CD ]
Line_31 $$ loop = 0-->Line_31 $$ loop = 0[ FD ]
Line_17 $$ int loop = 0-->Line_31 $$ loop = 0[ FD ]
Line_29 $$ if (read > 0) -->Line_35 $$ loop++[ CD ]
Line_31 $$ loop = 0-->Line_35 $$ loop++[ FD ]
Line_17 $$ int loop = 0-->Line_35 $$ loop++[ FD ]
Line_29 $$ if (read > 0) -->Line_37 $$ if (loop == READ_RETRY_LIMIT) [ CD ]
Line_31 $$ loop = 0-->Line_37 $$ if (loop == READ_RETRY_LIMIT) [ FD ]
Line_17 $$ int loop = 0-->Line_37 $$ if (loop == READ_RETRY_LIMIT) [ FD ]
Line_37 $$ if (loop == READ_RETRY_LIMIT) -->Line_39 $$ Debug.out("FMFile::read: zero length read - abandoning")[ CD ]
Line_37 $$ if (loop == READ_RETRY_LIMIT) -->Line_45 $$ if (DEBUG_VERBOSE) [ CD ]
Line_45 $$ if (DEBUG_VERBOSE) -->Line_47 $$ Debug.out("FMFile::read: zero length read - retrying")[ CD ]
Line_3 $$ public void read(RandomAccessFile raf, DirectByteBuffer[] buffers, long offset) -->Line_61 $$ Debug.out("Read failed: " + owner.getString() + ": raf open=" + raf.getChannel().isOpen() + ", len=" + raf.length() + ",off=" + offset)[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < bbs.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < bbs.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_6 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_8 $$ bb.position()[ FD ]
Line_8 $$ int pos = original_positions[i] = bb.position()-->Line_10 $$ if (pos != bb.limit()) [ FD ]
Line_6 $$ ByteBuffer bb = bbs[i] = buffers[i].getBuffer(DirectByteBuffer.SS_FILE)-->Line_10 $$ bb.limit()[ FD ]
Line_27 $$ long read = fc.read(bbs)-->Line_29 $$ if (read > 0) [ FD ]
Line_31 $$ loop = 0-->Line_35 $$ loop++[ FD ]
Line_31 $$ loop = 0-->Line_37 $$ if (loop == READ_RETRY_LIMIT) [ FD ]
