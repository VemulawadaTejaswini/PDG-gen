Line_0 $$ Entry-->Line_2 $$ //75
public class func [ CD ]
Line_2 $$ //75
public class func -->Line_3 $$ public void testRead_ReadableByteChannel() [ CD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_4 $$ final FileInputStream fileInputStream = new FileInputStream(m_testFile)[ CD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_5 $$ final FileChannel input = fileInputStream.getChannel()[ CD ]
Line_5 $$ final FileChannel input = fileInputStream.getChannel()-->Line_5 $$ fileInputStream.getChannel()[ CD ]
Line_4 $$ final FileInputStream fileInputStream = new FileInputStream(m_testFile)-->Line_5 $$ fileInputStream.getChannel()[ FD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_6 $$ assertEquals(FILE_SIZE, IOUtils.read(input, buffer))[ CD ]
Line_5 $$ final FileChannel input = fileInputStream.getChannel()-->Line_6 $$ IOUtils.read(input, buffer)[ FD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_7 $$ assertEquals(0, IOUtils.read(input, buffer))[ CD ]
Line_5 $$ final FileChannel input = fileInputStream.getChannel()-->Line_7 $$ IOUtils.read(input, buffer)[ FD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_8 $$ assertEquals(0, buffer.remaining())[ CD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_9 $$ assertEquals(0, input.read(buffer))[ CD ]
Line_5 $$ final FileChannel input = fileInputStream.getChannel()-->Line_9 $$ input.read(buffer)[ FD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_10 $$ buffer.clear()[ CD ]
Line_3 $$ public void testRead_ReadableByteChannel() -->Line_11 $$ IOUtils.readFully(input, buffer)[ CD ]
Line_5 $$ final FileChannel input = fileInputStream.getChannel()-->Line_11 $$ IOUtils.readFully(input, buffer)[ FD ]
