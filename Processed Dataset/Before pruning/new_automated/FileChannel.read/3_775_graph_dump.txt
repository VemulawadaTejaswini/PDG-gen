Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void rebuildIdGenerator() [ CD ]
Line_3 $$ public void rebuildIdGenerator() -->Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_4 $$ ByteBuffer.wrap(new byte[recordSize])[ CD ]
Line_3 $$ public void rebuildIdGenerator() -->Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) [ CD ]
Line_3 $$ public void rebuildIdGenerator() -->Line_3 $$ public void rebuildIdGenerator() [ CD ]
Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_5 $$ int i = 0[ CD ]
Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_5 $$ i++[ CD ]
Line_5 $$ int i = 0-->Line_5 $$ i++[ FD ]
Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_7 $$ fileChannel.read(byteBuffer, i * recordSize)[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_7 $$ fileChannel.read(byteBuffer, i * recordSize)[ FD ]
Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_8 $$ byteBuffer.flip()[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_8 $$ byteBuffer.flip()[ FD ]
Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_9 $$ byte inUse = byteBuffer.get()[ CD ]
Line_9 $$ byte inUse = byteBuffer.get()-->Line_9 $$ byteBuffer.get()[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_9 $$ byteBuffer.get()[ FD ]
Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_10 $$ byteBuffer.flip()[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_10 $$ byteBuffer.flip()[ FD ]
Line_5 $$ for (int i = 0; i * recordSize < fileSize; i++) -->Line_11 $$ if (inUse != Record.IN_USE.byteValue()) [ CD ]
Line_9 $$ byte inUse = byteBuffer.get()-->Line_11 $$ if (inUse != Record.IN_USE.byteValue()) [ FD ]
Line_11 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_14 $$ byteBuffer.clear()[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_14 $$ byteBuffer.clear()[ FD ]
Line_11 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_15 $$ byteBuffer.put(Record.IN_USE.byteValue()).putInt(Record.RESERVED.intValue())[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_15 $$ byteBuffer.put(Record.IN_USE.byteValue())[ FD ]
Line_11 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_17 $$ byteBuffer.flip()[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_17 $$ byteBuffer.flip()[ FD ]
Line_11 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_18 $$ fileChannel.write(byteBuffer, i * recordSize)[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_18 $$ fileChannel.write(byteBuffer, i * recordSize)[ FD ]
Line_11 $$ if (inUse != Record.IN_USE.byteValue()) -->Line_19 $$ byteBuffer.clear()[ CD ]
Line_4 $$ ByteBuffer byteBuffer = ByteBuffer.wrap(new byte[recordSize])-->Line_19 $$ byteBuffer.clear()[ FD ]
Line_3 $$ public void rebuildIdGenerator() -->Line_27 $$ fileChannel.truncate(highId * recordSize)[ CD ]
Line_5 $$ int i = 0-->Line_5 $$ i++[ FD ]
Line_9 $$ byte inUse = byteBuffer.get()-->Line_11 $$ if (inUse != Record.IN_USE.byteValue()) [ FD ]
