Line_0 $$ Entry-->Line_2 $$ //10
public class func [ CD ]
Line_2 $$ //10
public class func -->Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) [ CD ]
Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_4 $$ final Charset charset = Charset.forName(encoding)[ CD ]
Line_4 $$ final Charset charset = Charset.forName(encoding)-->Line_4 $$ Charset.forName(encoding)[ CD ]
Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_5 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)[ CD ]
Line_5 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_5 $$ charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)[ CD ]
Line_4 $$ final Charset charset = Charset.forName(encoding)-->Line_5 $$ charset.newDecoder()[ FD ]
Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_7 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())[ CD ]
Line_5 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_7 $$ decoder.averageCharsPerByte()[ FD ]
Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_8 $$ CharBuffer out = CharBuffer.allocate(n)[ CD ]
Line_8 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_8 $$ CharBuffer.allocate(n)[ CD ]
Line_7 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())-->Line_8 $$ CharBuffer.allocate(n)[ FD ]
Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_9 $$ while (offset < isize) [ CD ]
Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) -->Line_3 $$ public void decodeLargeFile(FileChannel channel, final int isize, String encoding) [ CD ]
Line_9 $$ while (offset < isize) -->Line_10 $$ channel.read(in)[ CD ]
Line_9 $$ while (offset < isize) -->Line_11 $$ in.flip()[ CD ]
Line_9 $$ while (offset < isize) -->Line_12 $$ in.limit()[ CD ]
Line_9 $$ while (offset < isize) -->Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)[ CD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_14 $$ decoder.decode(in, out, offset >= isize)[ CD ]
Line_5 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_14 $$ decoder.decode(in, out, offset >= isize)[ FD ]
Line_8 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_14 $$ decoder.decode(in, out, offset >= isize)[ FD ]
Line_9 $$ while (offset < isize) -->Line_15 $$ final int remainingBytes = in.remaining()[ CD ]
Line_15 $$ final int remainingBytes = in.remaining()-->Line_15 $$ in.remaining()[ CD ]
Line_9 $$ while (offset < isize) -->Line_16 $$ if (cr.isOverflow()) [ CD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_16 $$ if (cr.isOverflow()) [ FD ]
Line_16 $$ if (cr.isOverflow()) -->Line_16 $$ cr.isOverflow()[ CD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_16 $$ cr.isOverflow()[ FD ]
Line_16 $$ if (cr.isOverflow()) -->Line_17 $$ int totalRemainingBytes = isize - offset + remainingBytes[ CD ]
Line_16 $$ if (cr.isOverflow()) -->Line_18 $$ if (totalRemainingBytes > 0) [ CD ]
Line_17 $$ int totalRemainingBytes = isize - offset + remainingBytes-->Line_18 $$ if (totalRemainingBytes > 0) [ FD ]
Line_18 $$ if (totalRemainingBytes > 0) -->Line_19 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())[ CD ]
Line_19 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())-->Line_19 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())[ FD ]
Line_7 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())-->Line_19 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())[ FD ]
Line_5 $$ final CharsetDecoder decoder = charset.newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE)-->Line_19 $$ decoder.maxCharsPerByte()[ FD ]
Line_18 $$ if (totalRemainingBytes > 0) -->Line_20 $$ CharBuffer o = CharBuffer.allocate(n)[ CD ]
Line_20 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_20 $$ CharBuffer.allocate(n)[ CD ]
Line_19 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())-->Line_20 $$ CharBuffer.allocate(n)[ FD ]
Line_7 $$ int n = (int) (isize * (double) decoder.averageCharsPerByte())-->Line_20 $$ CharBuffer.allocate(n)[ FD ]
Line_18 $$ if (totalRemainingBytes > 0) -->Line_21 $$ out.flip()[ CD ]
Line_8 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_21 $$ out.flip()[ FD ]
Line_18 $$ if (totalRemainingBytes > 0) -->Line_22 $$ o.put(out)[ CD ]
Line_20 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_22 $$ o.put(out)[ FD ]
Line_8 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_22 $$ o.put(out)[ FD ]
Line_18 $$ if (totalRemainingBytes > 0) -->Line_23 $$ out = o[ CD ]
Line_23 $$ out = o-->Line_23 $$ out = o[ FD ]
Line_8 $$ CharBuffer out = CharBuffer.allocate(n)-->Line_23 $$ out = o[ FD ]
Line_20 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_23 $$ out = o[ FD ]
Line_16 $$ if (cr.isOverflow()) -->Line_25 $$ if (!cr.isUnderflow()) [ CD ]
Line_25 $$ if (!cr.isUnderflow()) -->Line_25 $$ !cr.isUnderflow()[ CD ]
Line_25 $$ !cr.isUnderflow()-->Line_25 $$ cr.isUnderflow()[ CD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_25 $$ cr.isUnderflow()[ FD ]
Line_25 $$ if (!cr.isUnderflow()) -->Line_26 $$ cr.throwException()[ CD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_26 $$ cr.throwException()[ FD ]
Line_9 $$ while (offset < isize) -->Line_29 $$ if (remainingBytes == 0) [ CD ]
Line_15 $$ final int remainingBytes = in.remaining()-->Line_29 $$ if (remainingBytes == 0) [ FD ]
Line_29 $$ if (remainingBytes == 0) -->Line_30 $$ in.clear()[ CD ]
Line_29 $$ if (remainingBytes == 0) -->Line_32 $$ byte[] rest = new byte[remainingBytes][ CD ]
Line_29 $$ if (remainingBytes == 0) -->Line_33 $$ in.get(rest)[ CD ]
Line_32 $$ byte[] rest = new byte[remainingBytes]-->Line_33 $$ in.get(rest)[ FD ]
Line_29 $$ if (remainingBytes == 0) -->Line_34 $$ in.clear()[ CD ]
Line_29 $$ if (remainingBytes == 0) -->Line_35 $$ in.put(rest)[ CD ]
Line_32 $$ byte[] rest = new byte[remainingBytes]-->Line_35 $$ in.put(rest)[ FD ]
Line_23 $$ out = o-->Line_14 $$ decoder.decode(in, out, offset >= isize)[ FD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_16 $$ if (cr.isOverflow()) [ FD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_16 $$ cr.isOverflow()[ FD ]
Line_17 $$ int totalRemainingBytes = isize - offset + remainingBytes-->Line_18 $$ if (totalRemainingBytes > 0) [ FD ]
Line_19 $$ n += (int) (totalRemainingBytes * (double) decoder.maxCharsPerByte())-->Line_20 $$ CharBuffer.allocate(n)[ FD ]
Line_23 $$ out = o-->Line_21 $$ out.flip()[ FD ]
Line_20 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_22 $$ o.put(out)[ FD ]
Line_23 $$ out = o-->Line_22 $$ o.put(out)[ FD ]
Line_20 $$ CharBuffer o = CharBuffer.allocate(n)-->Line_23 $$ out = o[ FD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_25 $$ cr.isUnderflow()[ FD ]
Line_14 $$ CoderResult cr = decoder.decode(in, out, offset >= isize)-->Line_26 $$ cr.throwException()[ FD ]
Line_15 $$ final int remainingBytes = in.remaining()-->Line_29 $$ if (remainingBytes == 0) [ FD ]
Line_32 $$ byte[] rest = new byte[remainingBytes]-->Line_33 $$ in.get(rest)[ FD ]
Line_32 $$ byte[] rest = new byte[remainingBytes]-->Line_35 $$ in.put(rest)[ FD ]
