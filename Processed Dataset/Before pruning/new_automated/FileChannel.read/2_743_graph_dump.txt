Line_0 $$ Entry-->Line_2 $$ //2
public class func [ CD ]
Line_2 $$ //2
public class func -->Line_3 $$ public void rebuildIdGenerator() [ CD ]
Line_3 $$ public void rebuildIdGenerator() -->Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) [ CD ]
Line_3 $$ public void rebuildIdGenerator() -->Line_3 $$ public void rebuildIdGenerator() [ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_4 $$ long i = 0[ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_5 $$ i++[ CD ]
Line_4 $$ long i = 0-->Line_5 $$ i++[ FD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_7 $$ fileChannel.position(i * recordSize)[ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_8 $$ fileChannel.read(byteBuffer)[ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_9 $$ byteBuffer.flip()[ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_10 $$ byte inUse = byteBuffer.get()[ CD ]
Line_10 $$ byte inUse = byteBuffer.get()-->Line_10 $$ byteBuffer.get()[ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_11 $$ byteBuffer.flip()[ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_12 $$ nextId()[ CD ]
Line_4 $$ for (long i = 0; i * recordSize < fileSize && recordSize > 0; i++) -->Line_13 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) [ CD ]
Line_13 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) -->Line_15 $$ freeIdList.add(i)[ CD ]
Line_4 $$ long i = 0-->Line_15 $$ freeIdList.add(i)[ FD ]
Line_13 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) -->Line_20 $$ while (!freeIdList.isEmpty()) [ CD ]
Line_13 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) -->Line_13 $$ if ((inUse & 0x1) == Record.NOT_IN_USE.byteValue()) [ CD ]
Line_20 $$ while (!freeIdList.isEmpty()) -->Line_20 $$ !freeIdList.isEmpty()[ CD ]
Line_20 $$ !freeIdList.isEmpty()-->Line_20 $$ freeIdList.isEmpty()[ CD ]
Line_20 $$ while (!freeIdList.isEmpty()) -->Line_22 $$ freeId(freeIdList.removeFirst())[ CD ]
Line_4 $$ long i = 0-->Line_5 $$ i++[ FD ]
Line_4 $$ long i = 0-->Line_15 $$ freeIdList.add(i)[ FD ]
