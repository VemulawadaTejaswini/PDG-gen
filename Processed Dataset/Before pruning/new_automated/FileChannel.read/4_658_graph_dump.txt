Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void read(File file, MatFileFilter filter, int policy) [ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_4 $$ ByteBuffer.allocateDirect((int) roChannel.size())[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_5 $$ roChannel.read(buf, 0)[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_6 $$ buf.rewind()[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_7 $$ int filesize = (int) roChannel.size()[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_8 $$ ByteBuffer.allocate(filesize)[ CD ]
Line_7 $$ int filesize = (int) roChannel.size()-->Line_8 $$ ByteBuffer.allocate(filesize)[ FD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_9 $$ if (numberOfBlocks > 1) [ CD ]
Line_9 $$ if (numberOfBlocks > 1) -->Line_10 $$ ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)[ CD ]
Line_10 $$ ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)-->Line_10 $$ ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)[ CD ]
Line_9 $$ if (numberOfBlocks > 1) -->Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) [ CD ]
Line_9 $$ if (numberOfBlocks > 1) -->Line_9 $$ if (numberOfBlocks > 1) [ CD ]
Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) -->Line_11 $$ int block = 0[ CD ]
Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) -->Line_11 $$ block++[ CD ]
Line_11 $$ int block = 0-->Line_11 $$ block++[ FD ]
Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) -->Line_12 $$ tempByteBuffer.clear()[ CD ]
Line_10 $$ ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)-->Line_12 $$ tempByteBuffer.clear()[ FD ]
Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) -->Line_13 $$ roChannel.read(tempByteBuffer, ((long) block) * DIRECT_BUFFER_LIMIT)[ CD ]
Line_10 $$ ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)-->Line_13 $$ roChannel.read(tempByteBuffer, ((long) block) * DIRECT_BUFFER_LIMIT)[ FD ]
Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) -->Line_14 $$ tempByteBuffer.flip()[ CD ]
Line_10 $$ ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)-->Line_14 $$ tempByteBuffer.flip()[ FD ]
Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) -->Line_15 $$ buf.put(tempByteBuffer)[ CD ]
Line_10 $$ ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)-->Line_15 $$ buf.put(tempByteBuffer)[ FD ]
Line_9 $$ if (numberOfBlocks > 1) -->Line_17 $$ tempByteBuffer = null[ CD ]
Line_10 $$ ByteBuffer tempByteBuffer = ByteBuffer.allocateDirect(DIRECT_BUFFER_LIMIT)-->Line_17 $$ tempByteBuffer = null[ FD ]
Line_17 $$ tempByteBuffer = null-->Line_17 $$ tempByteBuffer = null[ FD ]
Line_9 $$ if (numberOfBlocks > 1) -->Line_19 $$ roChannel.read(buf, 0)[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_20 $$ buf.rewind()[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_21 $$ roChannel.map(FileChannel.MapMode.READ_ONLY, 0, (int) roChannel.size())[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_23 $$ readHeader(buf)[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_24 $$ while (buf.remaining() > 0) [ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_3 $$ public void read(File file, MatFileFilter filter, int policy) [ CD ]
Line_24 $$ while (buf.remaining() > 0) -->Line_26 $$ readData(buf)[ CD ]
Line_3 $$ public void read(File file, MatFileFilter filter, int policy) -->Line_28 $$ return getContent();[ CD ]
Line_28 $$ return getContent();-->Line_28 $$ getContent()[ CD ]
Line_11 $$ int block = 0-->Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) [ FD ]
Line_11 $$ int block = 0-->Line_11 $$ for (int block = 0; block < numberOfBlocks; block++) [ FD ]
Line_11 $$ int block = 0-->Line_11 $$ block++[ FD ]
