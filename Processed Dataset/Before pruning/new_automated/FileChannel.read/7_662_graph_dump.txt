Line_0 $$ Entry-->Line_2 $$ //7
public class func [ CD ]
Line_2 $$ //7
public class func -->Line_3 $$ public void hashFiles(List<File> files) [ CD ]
Line_4 $$ File file-->Line_6 $$ file.length()[ FD ]
Line_9 $$ FileChannel channel = fis.getChannel()-->Line_9 $$ fis.getChannel()[ CD ]
Line_8 $$ FileInputStream fis = new FileInputStream(file)-->Line_9 $$ fis.getChannel()[ FD ]
Line_9 $$ FileChannel channel = fis.getChannel()-->Line_13 $$ channel.read(buffer)[ FD ]
Line_13 $$ while (channel.read(buffer) > 0) -->Line_14 $$ if (buffer.remaining() == 0) [ CD ]
Line_14 $$ if (buffer.remaining() == 0) -->Line_15 $$ buffer.clear()[ CD ]
Line_14 $$ if (buffer.remaining() == 0) -->Line_16 $$ results.add(executor.submit(new CallableChunkHasher(buffer)))[ CD ]
Line_13 $$ while (channel.read(buffer) > 0) -->Line_19 $$ if (results.size() >= threads) [ CD ]
Line_19 $$ if (results.size() >= threads) -->Line_19 $$ results.size()[ CD ]
Line_19 $$ if (results.size() >= threads) -->Line_20 $$ accumulateHashes(hashes, results)[ CD ]
Line_13 $$ while (channel.read(buffer) > 0) -->Line_23 $$ if (channel.position() / (double) channel.size() * 100f > step) [ CD ]
Line_10 $$ int step = 10-->Line_23 $$ if (channel.position() / (double) channel.size() * 100f > step) [ FD ]
Line_9 $$ FileChannel channel = fis.getChannel()-->Line_23 $$ channel.position()[ FD ]
Line_9 $$ FileChannel channel = fis.getChannel()-->Line_23 $$ channel.size()[ FD ]
Line_23 $$ if (channel.position() / (double) channel.size() * 100f > step) -->Line_24 $$ step += 10[ CD ]
Line_24 $$ step += 10-->Line_24 $$ step += 10[ FD ]
Line_10 $$ int step = 10-->Line_24 $$ step += 10[ FD ]
Line_9 $$ FileChannel channel = fis.getChannel()-->Line_28 $$ channel.close()[ FD ]
Line_8 $$ FileInputStream fis = new FileInputStream(file)-->Line_29 $$ fis.close()[ FD ]
Line_24 $$ step += 10-->Line_23 $$ if (channel.position() / (double) channel.size() * 100f > step) [ FD ]
