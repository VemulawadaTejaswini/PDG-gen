Line_0 $$ Entry-->Line_2 $$ //2
public class func [ CD ]
Line_2 $$ //2
public class func -->Line_3 $$ public void testAddRecord() [ CD ]
Line_3 $$ public void testAddRecord() -->Line_4 $$ long offset = Long.parseLong(parts[0])[ CD ]
Line_4 $$ long offset = Long.parseLong(parts[0])-->Line_4 $$ Long.parseLong(parts[0])[ CD ]
Line_3 $$ public void testAddRecord() -->Line_5 $$ int len = Integer.parseInt(parts[1])[ CD ]
Line_5 $$ int len = Integer.parseInt(parts[1])-->Line_5 $$ Integer.parseInt(parts[1])[ CD ]
Line_3 $$ public void testAddRecord() -->Line_6 $$ ByteBuffer bb = ByteBuffer.wrap(gz)[ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.wrap(gz)-->Line_6 $$ ByteBuffer.wrap(gz)[ CD ]
Line_3 $$ public void testAddRecord() -->Line_7 $$ int amt = fc.read(bb, offset)[ CD ]
Line_7 $$ int amt = fc.read(bb, offset)-->Line_7 $$ fc.read(bb, offset)[ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.wrap(gz)-->Line_7 $$ fc.read(bb, offset)[ FD ]
Line_4 $$ long offset = Long.parseLong(parts[0])-->Line_7 $$ fc.read(bb, offset)[ FD ]
Line_3 $$ public void testAddRecord() -->Line_8 $$ assertEquals(amt, len)[ CD ]
Line_7 $$ int amt = fc.read(bb, offset)-->Line_8 $$ assertEquals(amt, len)[ FD ]
Line_5 $$ int len = Integer.parseInt(parts[1])-->Line_8 $$ assertEquals(amt, len)[ FD ]
Line_3 $$ public void testAddRecord() -->Line_9 $$ ByteArrayInputStream bais = new ByteArrayInputStream(gz)[ CD ]
Line_3 $$ public void testAddRecord() -->Line_10 $$ GZIPMemberSeries gzms = new GZIPMemberSeries(new SimpleStream(bais))[ CD ]
Line_3 $$ public void testAddRecord() -->Line_11 $$ GZIPSeriesMember m = gzms.getNextMember()[ CD ]
Line_11 $$ GZIPSeriesMember m = gzms.getNextMember()-->Line_11 $$ gzms.getNextMember()[ CD ]
Line_10 $$ GZIPMemberSeries gzms = new GZIPMemberSeries(new SimpleStream(bais))-->Line_11 $$ gzms.getNextMember()[ FD ]
Line_3 $$ public void testAddRecord() -->Line_12 $$ m.skipMember()[ CD ]
Line_11 $$ GZIPSeriesMember m = gzms.getNextMember()-->Line_12 $$ m.skipMember()[ FD ]
