Line_0 $$ Entry-->Line_2 $$ //5
public class func [ CD ]
Line_2 $$ //5
public class func -->Line_3 $$ public void dump(FileChannel fc) [ CD ]
Line_3 $$ public void dump(FileChannel fc) -->Line_4 $$ int sz = (int) fc.size()[ CD ]
Line_3 $$ public void dump(FileChannel fc) -->Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(sz)[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_5 $$ ByteBuffer.allocate(sz)[ CD ]
Line_4 $$ int sz = (int) fc.size()-->Line_5 $$ ByteBuffer.allocate(sz)[ FD ]
Line_3 $$ public void dump(FileChannel fc) -->Line_6 $$ fc.position(0)[ CD ]
Line_3 $$ public void dump(FileChannel fc) -->Line_7 $$ if (fc.read(bb) != sz)
    throw new IOException("Incomplete read");[ CD ]
Line_4 $$ int sz = (int) fc.size()-->Line_7 $$ if (fc.read(bb) != sz)
    throw new IOException("Incomplete read");[ FD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_7 $$ fc.read(bb)[ FD ]
Line_3 $$ public void dump(FileChannel fc) -->Line_9 $$ bb.flip()[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_9 $$ bb.flip()[ FD ]
Line_3 $$ public void dump(FileChannel fc) -->Line_10 $$ while (bb.hasRemaining() && (n < 32)) [ CD ]
Line_3 $$ public void dump(FileChannel fc) -->Line_3 $$ public void dump(FileChannel fc) [ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_10 $$ bb.hasRemaining()[ FD ]
Line_10 $$ while (bb.hasRemaining() && (n < 32)) -->Line_11 $$ byte b = bb.get()[ CD ]
Line_11 $$ byte b = bb.get()-->Line_11 $$ bb.get()[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(sz)-->Line_11 $$ bb.get()[ FD ]
Line_10 $$ while (bb.hasRemaining() && (n < 32)) -->Line_12 $$ if (b == prev) [ CD ]
Line_11 $$ byte b = bb.get()-->Line_12 $$ if (b == prev) [ FD ]
Line_10 $$ while (bb.hasRemaining() && (n < 32)) -->Line_16 $$ if (r > 0) [ CD ]
Line_16 $$ if (r > 0) -->Line_17 $$ int c = prev & 0xff[ CD ]
Line_16 $$ if (r > 0) -->Line_18 $$ if (c < 0x10)
    out.print('0');[ CD ]
Line_17 $$ int c = prev & 0xff-->Line_18 $$ if (c < 0x10)
    out.print('0');[ FD ]
Line_18 $$ if (c < 0x10)
    out.print('0');-->Line_19 $$ out.print('0')[ CD ]
Line_16 $$ if (r > 0) -->Line_20 $$ out.print(Integer.toHexString(c))[ CD ]
Line_17 $$ int c = prev & 0xff-->Line_20 $$ Integer.toHexString(c)[ FD ]
Line_16 $$ if (r > 0) -->Line_21 $$ if (r > 1) [ CD ]
Line_21 $$ if (r > 1) -->Line_22 $$ out.print("[")[ CD ]
Line_21 $$ if (r > 1) -->Line_23 $$ out.print(r)[ CD ]
Line_21 $$ if (r > 1) -->Line_24 $$ out.print("]")[ CD ]
Line_11 $$ byte b = bb.get()-->Line_12 $$ if (b == prev) [ FD ]
Line_17 $$ int c = prev & 0xff-->Line_18 $$ if (c < 0x10)
    out.print('0');[ FD ]
Line_17 $$ int c = prev & 0xff-->Line_20 $$ Integer.toHexString(c)[ FD ]
