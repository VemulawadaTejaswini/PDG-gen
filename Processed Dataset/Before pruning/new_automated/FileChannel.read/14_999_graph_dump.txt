Line_0 $$ Entry-->Line_2 $$ //14
public class func [ CD ]
Line_2 $$ //14
public class func -->Line_3 $$ public void compress(String sourceDir) [ CD ]
Line_3 $$ public void compress(String sourceDir) -->Line_4 $$ while (!eof && buff.remaining() < 512 * 1024) [ CD ]
Line_3 $$ public void compress(String sourceDir) -->Line_3 $$ public void compress(String sourceDir) [ CD ]
Line_4 $$ while (!eof && buff.remaining() < 512 * 1024) -->Line_5 $$ int remaining = buff.remaining()[ CD ]
Line_5 $$ int remaining = buff.remaining()-->Line_5 $$ buff.remaining()[ CD ]
Line_4 $$ while (!eof && buff.remaining() < 512 * 1024) -->Line_6 $$ buff.compact()[ CD ]
Line_4 $$ while (!eof && buff.remaining() < 512 * 1024) -->Line_7 $$ buff.position(remaining)[ CD ]
Line_5 $$ int remaining = buff.remaining()-->Line_7 $$ buff.position(remaining)[ FD ]
Line_4 $$ while (!eof && buff.remaining() < 512 * 1024) -->Line_8 $$ int l = fc.read(buff)[ CD ]
Line_8 $$ int l = fc.read(buff)-->Line_8 $$ fc.read(buff)[ CD ]
Line_4 $$ while (!eof && buff.remaining() < 512 * 1024) -->Line_9 $$ if (l < 0) [ CD ]
Line_8 $$ int l = fc.read(buff)-->Line_9 $$ if (l < 0) [ FD ]
Line_4 $$ while (!eof && buff.remaining() < 512 * 1024) -->Line_12 $$ buff.flip()[ CD ]
Line_3 $$ public void compress(String sourceDir) -->Line_14 $$ if (buff.remaining() == 0) [ CD ]
Line_3 $$ public void compress(String sourceDir) -->Line_17 $$ int c = getChunkLength(buff.array(), buff.position(), buff.limit()) - buff.position()[ CD ]
Line_3 $$ public void compress(String sourceDir) -->Line_19 $$ System.arraycopy(buff.array(), buff.position(), bytes, 0, c)[ CD ]
Line_17 $$ int c = getChunkLength(buff.array(), buff.position(), buff.limit()) - buff.position()-->Line_19 $$ System.arraycopy(buff.array(), buff.position(), bytes, 0, c)[ FD ]
Line_3 $$ public void compress(String sourceDir) -->Line_20 $$ buff.position(buff.position() + c)[ CD ]
Line_3 $$ public void compress(String sourceDir) -->Line_21 $$ int[] key = getKey(bucket, bytes)[ CD ]
Line_21 $$ int[] key = getKey(bucket, bytes)-->Line_21 $$ getKey(bucket, bytes)[ CD ]
Line_5 $$ int remaining = buff.remaining()-->Line_7 $$ buff.position(remaining)[ FD ]
Line_8 $$ int l = fc.read(buff)-->Line_9 $$ if (l < 0) [ FD ]
