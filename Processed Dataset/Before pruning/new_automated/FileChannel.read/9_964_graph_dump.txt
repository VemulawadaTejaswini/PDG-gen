Line_0 $$ Entry-->Line_2 $$ //9
public class func [ CD ]
Line_2 $$ //9
public class func -->Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) [ CD ]
Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_4 $$ fc.read(in)[ CD ]
Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_5 $$ byte[] columnBytes = in.array()[ CD ]
Line_5 $$ byte[] columnBytes = in.array()-->Line_5 $$ in.array()[ CD ]
Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_6 $$ while (bytecount < bytesRead) [ CD ]
Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) [ CD ]
Line_6 $$ while (bytecount < bytesRead) -->Line_7 $$ if (columnBytes[bytecount] == '\n') [ CD ]
Line_7 $$ if (columnBytes[bytecount] == '\n') -->Line_29 $$ String token = null[ CD ]
Line_7 $$ if (columnBytes[bytecount] == '\n') -->Line_31 $$ if (leftover == null) [ CD ]
Line_31 $$ if (leftover == null) -->Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")[ CD ]
Line_29 $$ String token = null-->Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")[ FD ]
Line_31 $$ if (leftover == null) -->Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset][ CD ]
Line_31 $$ if (leftover == null) -->Line_36 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ CD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_36 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_31 $$ if (leftover == null) -->Line_37 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ CD ]
Line_5 $$ byte[] columnBytes = in.array()-->Line_37 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_37 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_31 $$ if (leftover == null) -->Line_38 $$ token = new String(merged, "UTF8")[ CD ]
Line_29 $$ String token = null-->Line_38 $$ token = new String(merged, "UTF8")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_38 $$ token = new String(merged, "UTF8")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_38 $$ token = new String(merged, "UTF8")[ FD ]
Line_31 $$ if (leftover == null) -->Line_40 $$ merged = null[ CD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_40 $$ merged = null[ FD ]
Line_40 $$ merged = null-->Line_40 $$ merged = null[ FD ]
Line_7 $$ if (columnBytes[bytecount] == '\n') -->Line_43 $$ if (isString) [ CD ]
Line_43 $$ if (isString) -->Line_44 $$ if ("".equals(token)) [ CD ]
Line_29 $$ String token = null-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_44 $$ if ("".equals(token)) -->Line_44 $$ "".equals(token)[ CD ]
Line_29 $$ String token = null-->Line_44 $$ "".equals(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_44 $$ "".equals(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_44 $$ "".equals(token)[ FD ]
Line_44 $$ if ("".equals(token)) -->Line_47 $$ retVector[caseindex] = null[ CD ]
Line_44 $$ if ("".equals(token)) -->Line_50 $$ token = token.replaceFirst("^\\\"", "")[ CD ]
Line_29 $$ String token = null-->Line_50 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_50 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_50 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_50 $$ token = token.replaceFirst("^\\\"", "")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ CD ]
Line_29 $$ String token = null-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_44 $$ if ("".equals(token)) -->Line_51 $$ token = token.replaceFirst("\\\"$", "")[ CD ]
Line_29 $$ String token = null-->Line_51 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_51 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_51 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_51 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_51 $$ token = token.replaceFirst("\\\"$", "")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ CD ]
Line_29 $$ String token = null-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_44 $$ if ("".equals(token)) -->Line_64 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)[ CD ]
Line_64 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ CD ]
Line_29 $$ String token = null-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_44 $$ if ("".equals(token)) -->Line_71 $$ for (int i = 0; i < splitTokens.length; i++) [ CD ]
Line_44 $$ if ("".equals(token)) -->Line_44 $$ if ("".equals(token)) [ CD ]
Line_71 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_71 $$ int i = 0[ CD ]
Line_71 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_71 $$ i++[ CD ]
Line_71 $$ int i = 0-->Line_71 $$ i++[ FD ]
Line_71 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_72 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\\""), "\"")[ CD ]
Line_72 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\\""), "\"")-->Line_72 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\\""), "\"")[ CD ]
Line_71 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_73 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\t"), "\t")[ CD ]
Line_73 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\t"), "\t")-->Line_73 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\t"), "\t")[ CD ]
Line_71 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_74 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\n"), "\n")[ CD ]
Line_74 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\n"), "\n")-->Line_74 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\n"), "\n")[ CD ]
Line_71 $$ for (int i = 0; i < splitTokens.length; i++) -->Line_75 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\r"), "\r")[ CD ]
Line_75 $$ splitTokens[i] = splitTokens[i].replaceAll(Matcher.quoteReplacement("\\r"), "\r")-->Line_75 $$ splitTokens[i].replaceAll(Matcher.quoteReplacement("\\r"), "\r")[ CD ]
Line_44 $$ if ("".equals(token)) -->Line_84 $$ token = StringUtils.join(splitTokens, '\\')[ CD ]
Line_29 $$ String token = null-->Line_84 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_84 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_84 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_84 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_84 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_84 $$ token = StringUtils.join(splitTokens, '\\')[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_84 $$ StringUtils.join(splitTokens, '\\')[ CD ]
Line_64 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)-->Line_84 $$ StringUtils.join(splitTokens, '\\')[ FD ]
Line_44 $$ if ("".equals(token)) -->Line_90 $$ if (compatmode && !"".equals(token)) [ CD ]
Line_90 $$ !"".equals(token)-->Line_90 $$ "".equals(token)[ CD ]
Line_29 $$ String token = null-->Line_90 $$ "".equals(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_90 $$ "".equals(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_90 $$ "".equals(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_90 $$ "".equals(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_90 $$ "".equals(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_90 $$ "".equals(token)[ FD ]
Line_90 $$ if (compatmode && !"".equals(token)) -->Line_91 $$ if (token.length() > 128) [ CD ]
Line_29 $$ String token = null-->Line_91 $$ token.length()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_91 $$ token.length()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_91 $$ token.length()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_91 $$ token.length()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_91 $$ token.length()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_91 $$ token.length()[ FD ]
Line_91 $$ if (token.length() > 128) -->Line_92 $$ if ("".equals(token.trim())) [ CD ]
Line_92 $$ if ("".equals(token.trim())) -->Line_92 $$ "".equals(token.trim())[ CD ]
Line_29 $$ String token = null-->Line_92 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_92 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_92 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_92 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_92 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_92 $$ token.trim()[ FD ]
Line_92 $$ if ("".equals(token.trim())) -->Line_94 $$ token = token.substring(0, 129)[ CD ]
Line_29 $$ String token = null-->Line_94 $$ token = token.substring(0, 129)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_94 $$ token = token.substring(0, 129)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_94 $$ token = token.substring(0, 129)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_94 $$ token = token.substring(0, 129)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_94 $$ token = token.substring(0, 129)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_94 $$ token = token.substring(0, 129)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_94 $$ token = token.substring(0, 129)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_94 $$ token.substring(0, 129)[ CD ]
Line_29 $$ String token = null-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_92 $$ if ("".equals(token.trim())) -->Line_96 $$ token = token.substring(0, 128)[ CD ]
Line_29 $$ String token = null-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_96 $$ token = token.substring(0, 128)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_96 $$ token.substring(0, 128)[ CD ]
Line_29 $$ String token = null-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_92 $$ if ("".equals(token.trim())) -->Line_98 $$ token = token.trim()[ CD ]
Line_29 $$ String token = null-->Line_98 $$ token = token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_98 $$ token = token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_98 $$ token = token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_98 $$ token = token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_98 $$ token = token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_98 $$ token = token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_98 $$ token = token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_98 $$ token = token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_98 $$ token = token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_98 $$ token.trim()[ CD ]
Line_29 $$ String token = null-->Line_98 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_98 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_98 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_98 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_98 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_98 $$ token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_98 $$ token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_98 $$ token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_98 $$ token.trim()[ FD ]
Line_91 $$ if (token.length() > 128) -->Line_102 $$ if ("".equals(token.trim())) [ CD ]
Line_102 $$ if ("".equals(token.trim())) -->Line_102 $$ "".equals(token.trim())[ CD ]
Line_29 $$ String token = null-->Line_102 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_102 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_102 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_102 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_102 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_102 $$ token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_102 $$ token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_102 $$ token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_102 $$ token.trim()[ FD ]
Line_102 $$ if ("".equals(token.trim())) -->Line_106 $$ token = "null"[ CD ]
Line_29 $$ String token = null-->Line_106 $$ token = "null"[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_106 $$ token = "null"[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_106 $$ token = "null"[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_106 $$ token = "null"[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_106 $$ token = "null"[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_106 $$ token = "null"[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_106 $$ token = "null"[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_106 $$ token = "null"[ FD ]
Line_98 $$ token = token.trim()-->Line_106 $$ token = "null"[ FD ]
Line_106 $$ token = "null"-->Line_106 $$ token = "null"[ FD ]
Line_102 $$ if ("".equals(token.trim())) -->Line_108 $$ token = token.trim()[ CD ]
Line_29 $$ String token = null-->Line_108 $$ token = token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_108 $$ token = token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_108 $$ token = token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_108 $$ token = token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_108 $$ token = token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_108 $$ token = token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_108 $$ token = token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_108 $$ token = token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_108 $$ token = token.trim()[ FD ]
Line_106 $$ token = "null"-->Line_108 $$ token = token.trim()[ FD ]
Line_108 $$ token = token.trim()-->Line_108 $$ token = token.trim()[ FD ]
Line_108 $$ token = token.trim()-->Line_108 $$ token.trim()[ CD ]
Line_29 $$ String token = null-->Line_108 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_108 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_108 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_108 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_108 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_108 $$ token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_108 $$ token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_108 $$ token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_108 $$ token.trim()[ FD ]
Line_106 $$ token = "null"-->Line_108 $$ token.trim()[ FD ]
Line_108 $$ token = token.trim()-->Line_108 $$ token.trim()[ FD ]
Line_44 $$ if ("".equals(token)) -->Line_113 $$ retVector[caseindex] = token[ CD ]
Line_29 $$ String token = null-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_98 $$ token = token.trim()-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_106 $$ token = "null"-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_108 $$ token = token.trim()-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_43 $$ if (isString) -->Line_115 $$ if (isDouble) [ CD ]
Line_29 $$ String token = null-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_124 $$ // to be spelled as "Infinity", "-Infinity", etc. 
if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_125 $$ retVector[caseindex] = java.lang.Double.POSITIVE_INFINITY[ CD ]
Line_124 $$ // to be spelled as "Infinity", "-Infinity", etc. 
if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ CD ]
Line_29 $$ String token = null-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_98 $$ token = token.trim()-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_106 $$ token = "null"-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_108 $$ token = token.trim()-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_126 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_126 $$ "-inf".equalsIgnoreCase(token)[ CD ]
Line_29 $$ String token = null-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_126 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_127 $$ retVector[caseindex] = java.lang.Double.NEGATIVE_INFINITY[ CD ]
Line_126 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_128 $$ if (token == null || token.equals("")) [ CD ]
Line_29 $$ String token = null-->Line_128 $$ token.equals("")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_128 $$ token.equals("")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_128 $$ token.equals("")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_128 $$ token.equals("")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_128 $$ token.equals("")[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_128 $$ token.equals("")[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_128 $$ token.equals("")[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_128 $$ token.equals("")[ FD ]
Line_98 $$ token = token.trim()-->Line_128 $$ token.equals("")[ FD ]
Line_106 $$ token = "null"-->Line_128 $$ token.equals("")[ FD ]
Line_108 $$ token = token.trim()-->Line_128 $$ token.equals("")[ FD ]
Line_128 $$ if (token == null || token.equals("")) -->Line_130 $$ retVector[caseindex] = null[ CD ]
Line_128 $$ if (token == null || token.equals("")) -->Line_132 $$ retVector[caseindex] = new Double(token)[ CD ]
Line_115 $$ if (isDouble) -->Line_140 $$ if (isLong) [ CD ]
Line_140 $$ if (isLong) -->Line_146 $$ if (isFloat) [ CD ]
Line_29 $$ String token = null-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_148 $$ if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_149 $$ retVector[caseindex] = java.lang.Float.POSITIVE_INFINITY[ CD ]
Line_148 $$ if ("inf".equalsIgnoreCase(token) || "+inf".equalsIgnoreCase(token)) -->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ CD ]
Line_29 $$ String token = null-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_98 $$ token = token.trim()-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_106 $$ token = "null"-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_108 $$ token = token.trim()-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_150 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_150 $$ "-inf".equalsIgnoreCase(token)[ CD ]
Line_29 $$ String token = null-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_150 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_151 $$ retVector[caseindex] = java.lang.Float.NEGATIVE_INFINITY[ CD ]
Line_150 $$ if ("-inf".equalsIgnoreCase(token)) -->Line_152 $$ if (token == null || token.equals("")) [ CD ]
Line_29 $$ String token = null-->Line_152 $$ token.equals("")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_152 $$ token.equals("")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_152 $$ token.equals("")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_152 $$ token.equals("")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_152 $$ token.equals("")[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_152 $$ token.equals("")[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_152 $$ token.equals("")[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_152 $$ token.equals("")[ FD ]
Line_98 $$ token = token.trim()-->Line_152 $$ token.equals("")[ FD ]
Line_106 $$ token = "null"-->Line_152 $$ token.equals("")[ FD ]
Line_108 $$ token = token.trim()-->Line_152 $$ token.equals("")[ FD ]
Line_152 $$ if (token == null || token.equals("")) -->Line_154 $$ retVector[caseindex] = null[ CD ]
Line_152 $$ if (token == null || token.equals("")) -->Line_156 $$ retVector[caseindex] = new Float(token)[ CD ]
Line_7 $$ if (columnBytes[bytecount] == '\n') -->Line_165 $$ if (bytecount == bytesRead - 1) [ CD ]
Line_7 $$ if (columnBytes[bytecount] == '\n') -->Line_171 $$ if (bytecount == bytesRead - 1) [ CD ]
Line_171 $$ if (bytecount == bytesRead - 1) -->Line_184 $$ // buffer!
if (leftover == null) [ CD ]
Line_184 $$ // buffer!
if (leftover == null) -->Line_186 $$ System.arraycopy(columnBytes, byteoffset, leftover, 0, (int) bytesRead - byteoffset)[ CD ]
Line_5 $$ byte[] columnBytes = in.array()-->Line_186 $$ System.arraycopy(columnBytes, byteoffset, leftover, 0, (int) bytesRead - byteoffset)[ FD ]
Line_184 $$ // buffer!
if (leftover == null) -->Line_188 $$ if (byteoffset != 0) [ CD ]
Line_184 $$ // buffer!
if (leftover == null) -->Line_193 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ CD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_193 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_40 $$ merged = null-->Line_193 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_184 $$ // buffer!
if (leftover == null) -->Line_194 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ CD ]
Line_5 $$ byte[] columnBytes = in.array()-->Line_194 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_194 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_40 $$ merged = null-->Line_194 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_184 $$ // buffer!
if (leftover == null) -->Line_197 $$ merged = null[ CD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_197 $$ merged = null[ FD ]
Line_40 $$ merged = null-->Line_197 $$ merged = null[ FD ]
Line_197 $$ merged = null-->Line_197 $$ merged = null[ FD ]
Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_205 $$ in.clear()[ CD ]
Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_206 $$ if (columnLength - bytesReadTotal < MAX_COLUMN_BUFFER) [ CD ]
Line_206 $$ if (columnLength - bytesReadTotal < MAX_COLUMN_BUFFER) -->Line_207 $$ in.limit((int) (columnLength - bytesReadTotal))[ CD ]
Line_3 $$ public void subsetObjectVector(File tabfile, int column, int varcount, int casecount, int columntype, boolean compatmode) -->Line_209 $$ fc.close()[ CD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_36 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_40 $$ merged = null-->Line_36 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_197 $$ merged = null-->Line_36 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_37 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_40 $$ merged = null-->Line_37 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_197 $$ merged = null-->Line_37 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, bytecount - byteoffset)[ FD ]
Line_29 $$ String token = null-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_98 $$ token = token.trim()-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_106 $$ token = "null"-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_108 $$ token = token.trim()-->Line_44 $$ if ("".equals(token)) [ FD ]
Line_29 $$ String token = null-->Line_44 $$ "".equals(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_44 $$ "".equals(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_44 $$ "".equals(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_44 $$ "".equals(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_44 $$ "".equals(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_44 $$ "".equals(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_44 $$ "".equals(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_44 $$ "".equals(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_44 $$ "".equals(token)[ FD ]
Line_106 $$ token = "null"-->Line_44 $$ "".equals(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_44 $$ "".equals(token)[ FD ]
Line_29 $$ String token = null-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_98 $$ token = token.trim()-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_106 $$ token = "null"-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_108 $$ token = token.trim()-->Line_50 $$ token.replaceFirst("^\\\"", "")[ FD ]
Line_29 $$ String token = null-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_98 $$ token = token.trim()-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_106 $$ token = "null"-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_108 $$ token = token.trim()-->Line_51 $$ token.replaceFirst("\\\"$", "")[ FD ]
Line_29 $$ String token = null-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_98 $$ token = token.trim()-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_106 $$ token = "null"-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_108 $$ token = token.trim()-->Line_64 $$ token.split(Matcher.quoteReplacement("\\\\"), -2)[ FD ]
Line_64 $$ String[] splitTokens = token.split(Matcher.quoteReplacement("\\\\"), -2)-->Line_84 $$ StringUtils.join(splitTokens, '\\')[ FD ]
Line_29 $$ String token = null-->Line_90 $$ "".equals(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_90 $$ "".equals(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_90 $$ "".equals(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_90 $$ "".equals(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_90 $$ "".equals(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_90 $$ "".equals(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_90 $$ "".equals(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_90 $$ "".equals(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_90 $$ "".equals(token)[ FD ]
Line_106 $$ token = "null"-->Line_90 $$ "".equals(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_90 $$ "".equals(token)[ FD ]
Line_29 $$ String token = null-->Line_91 $$ token.length()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_91 $$ token.length()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_91 $$ token.length()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_91 $$ token.length()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_91 $$ token.length()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_91 $$ token.length()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_91 $$ token.length()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_91 $$ token.length()[ FD ]
Line_98 $$ token = token.trim()-->Line_91 $$ token.length()[ FD ]
Line_106 $$ token = "null"-->Line_91 $$ token.length()[ FD ]
Line_108 $$ token = token.trim()-->Line_91 $$ token.length()[ FD ]
Line_29 $$ String token = null-->Line_92 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_92 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_92 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_92 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_92 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_92 $$ token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_92 $$ token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_92 $$ token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_92 $$ token.trim()[ FD ]
Line_106 $$ token = "null"-->Line_92 $$ token.trim()[ FD ]
Line_108 $$ token = token.trim()-->Line_92 $$ token.trim()[ FD ]
Line_29 $$ String token = null-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_98 $$ token = token.trim()-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_106 $$ token = "null"-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_108 $$ token = token.trim()-->Line_94 $$ token.substring(0, 129)[ FD ]
Line_29 $$ String token = null-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_98 $$ token = token.trim()-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_106 $$ token = "null"-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_108 $$ token = token.trim()-->Line_96 $$ token.substring(0, 128)[ FD ]
Line_29 $$ String token = null-->Line_98 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_98 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_98 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_98 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_98 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_98 $$ token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_98 $$ token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_98 $$ token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_98 $$ token.trim()[ FD ]
Line_106 $$ token = "null"-->Line_98 $$ token.trim()[ FD ]
Line_108 $$ token = token.trim()-->Line_98 $$ token.trim()[ FD ]
Line_29 $$ String token = null-->Line_102 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_102 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_102 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_102 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_102 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_102 $$ token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_102 $$ token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_102 $$ token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_102 $$ token.trim()[ FD ]
Line_106 $$ token = "null"-->Line_102 $$ token.trim()[ FD ]
Line_108 $$ token = token.trim()-->Line_102 $$ token.trim()[ FD ]
Line_29 $$ String token = null-->Line_108 $$ token.trim()[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_108 $$ token.trim()[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_108 $$ token.trim()[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_108 $$ token.trim()[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_108 $$ token.trim()[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_108 $$ token.trim()[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_108 $$ token.trim()[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_108 $$ token.trim()[ FD ]
Line_98 $$ token = token.trim()-->Line_108 $$ token.trim()[ FD ]
Line_106 $$ token = "null"-->Line_108 $$ token.trim()[ FD ]
Line_108 $$ token = token.trim()-->Line_108 $$ token.trim()[ FD ]
Line_29 $$ String token = null-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_98 $$ token = token.trim()-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_106 $$ token = "null"-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_108 $$ token = token.trim()-->Line_113 $$ retVector[caseindex] = token[ FD ]
Line_29 $$ String token = null-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_124 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_124 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_98 $$ token = token.trim()-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_106 $$ token = "null"-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_108 $$ token = token.trim()-->Line_126 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_29 $$ String token = null-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_126 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_128 $$ token.equals("")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_128 $$ token.equals("")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_128 $$ token.equals("")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_128 $$ token.equals("")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_128 $$ token.equals("")[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_128 $$ token.equals("")[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_128 $$ token.equals("")[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_128 $$ token.equals("")[ FD ]
Line_98 $$ token = token.trim()-->Line_128 $$ token.equals("")[ FD ]
Line_106 $$ token = "null"-->Line_128 $$ token.equals("")[ FD ]
Line_108 $$ token = token.trim()-->Line_128 $$ token.equals("")[ FD ]
Line_29 $$ String token = null-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_148 $$ "inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_148 $$ "+inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_98 $$ token = token.trim()-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_106 $$ token = "null"-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_108 $$ token = token.trim()-->Line_150 $$ if ("-inf".equalsIgnoreCase(token)) [ FD ]
Line_29 $$ String token = null-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_98 $$ token = token.trim()-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_106 $$ token = "null"-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_108 $$ token = token.trim()-->Line_150 $$ "-inf".equalsIgnoreCase(token)[ FD ]
Line_29 $$ String token = null-->Line_152 $$ token.equals("")[ FD ]
Line_32 $$ token = new String(columnBytes, byteoffset, bytecount - byteoffset, "UTF8")-->Line_152 $$ token.equals("")[ FD ]
Line_38 $$ token = new String(merged, "UTF8")-->Line_152 $$ token.equals("")[ FD ]
Line_50 $$ token = token.replaceFirst("^\\\"", "")-->Line_152 $$ token.equals("")[ FD ]
Line_51 $$ token = token.replaceFirst("\\\"$", "")-->Line_152 $$ token.equals("")[ FD ]
Line_84 $$ token = StringUtils.join(splitTokens, '\\')-->Line_152 $$ token.equals("")[ FD ]
Line_94 $$ token = token.substring(0, 129)-->Line_152 $$ token.equals("")[ FD ]
Line_96 $$ token = token.substring(0, 128)-->Line_152 $$ token.equals("")[ FD ]
Line_98 $$ token = token.trim()-->Line_152 $$ token.equals("")[ FD ]
Line_106 $$ token = "null"-->Line_152 $$ token.equals("")[ FD ]
Line_108 $$ token = token.trim()-->Line_152 $$ token.equals("")[ FD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_193 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_40 $$ merged = null-->Line_193 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_197 $$ merged = null-->Line_193 $$ System.arraycopy(leftover, 0, merged, 0, leftover.length)[ FD ]
Line_34 $$ byte[] merged = new byte[leftover.length + bytecount - byteoffset]-->Line_194 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_40 $$ merged = null-->Line_194 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_197 $$ merged = null-->Line_194 $$ System.arraycopy(columnBytes, byteoffset, merged, leftover.length, (int) bytesRead)[ FD ]
Line_71 $$ int i = 0-->Line_71 $$ for (int i = 0; i < splitTokens.length; i++) [ FD ]
Line_71 $$ int i = 0-->Line_71 $$ for (int i = 0; i < splitTokens.length; i++) [ FD ]
Line_71 $$ int i = 0-->Line_71 $$ i++[ FD ]
