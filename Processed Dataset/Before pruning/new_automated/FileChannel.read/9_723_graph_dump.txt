Line_0 $$ Entry-->Line_2 $$ //9
public class func [ CD ]
Line_2 $$ //9
public class func -->Line_3 $$ public void readFileToBuffer(File file, boolean allocateDirect) [ CD ]
Line_3 $$ public void readFileToBuffer(File file, boolean allocateDirect) -->Line_4 $$ ByteBuffer buffer = allocateDirect ? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size)[ CD ]
Line_3 $$ public void readFileToBuffer(File file, boolean allocateDirect) -->Line_5 $$ for (int count = 0; count >= 0 && buffer.hasRemaining(); ) [ CD ]
Line_3 $$ public void readFileToBuffer(File file, boolean allocateDirect) -->Line_3 $$ public void readFileToBuffer(File file, boolean allocateDirect) [ CD ]
Line_4 $$ ByteBuffer buffer = allocateDirect ? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size)-->Line_5 $$ buffer.hasRemaining()[ FD ]
Line_5 $$ for (int count = 0; count >= 0 && buffer.hasRemaining(); ) -->Line_5 $$ int count = 0[ CD ]
Line_5 $$ for (int count = 0; count >= 0 && buffer.hasRemaining(); ) -->Line_7 $$ count = fc.read(buffer)[ CD ]
Line_5 $$ int count = 0-->Line_7 $$ count = fc.read(buffer)[ FD ]
Line_7 $$ count = fc.read(buffer)-->Line_7 $$ count = fc.read(buffer)[ FD ]
Line_7 $$ count = fc.read(buffer)-->Line_7 $$ fc.read(buffer)[ CD ]
Line_4 $$ ByteBuffer buffer = allocateDirect ? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size)-->Line_7 $$ fc.read(buffer)[ FD ]
Line_3 $$ public void readFileToBuffer(File file, boolean allocateDirect) -->Line_9 $$ buffer.flip()[ CD ]
Line_4 $$ ByteBuffer buffer = allocateDirect ? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size)-->Line_9 $$ buffer.flip()[ FD ]
