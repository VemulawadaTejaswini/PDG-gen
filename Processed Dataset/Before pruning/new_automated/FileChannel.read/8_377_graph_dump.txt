Line_0 $$ Entry-->Line_2 $$ //8
public class func [ CD ]
Line_2 $$ //8
public class func -->Line_3 $$ public void main(String... args) [ CD ]
Line_3 $$ public void main(String... args) -->Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())-->Line_4 $$ ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())[ CD ]
Line_3 $$ public void main(String... args) -->Line_5 $$ while (fc.read(buffer) > 0) [ CD ]
Line_3 $$ public void main(String... args) -->Line_3 $$ public void main(String... args) [ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())-->Line_5 $$ fc.read(buffer)[ FD ]
Line_5 $$ while (fc.read(buffer) > 0) -->Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) [ CD ]
Line_5 $$ while (fc.read(buffer) > 0) -->Line_5 $$ while (fc.read(buffer) > 0) [ CD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_6 $$ buffer.capacity()[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())-->Line_6 $$ buffer.capacity()[ FD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_6 $$ int i = 0[ CD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_6 $$ i += 4 * 16[ CD ]
Line_6 $$ int i = 0-->Line_6 $$ i += 4 * 16[ FD ]
Line_6 $$ i += 4 * 16-->Line_6 $$ i += 4 * 16[ FD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_7 $$ long indexStart = buffer.getLong(i)[ CD ]
Line_7 $$ long indexStart = buffer.getLong(i)-->Line_7 $$ buffer.getLong(i)[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())-->Line_7 $$ buffer.getLong(i)[ FD ]
Line_6 $$ int i = 0-->Line_7 $$ buffer.getLong(i)[ FD ]
Line_6 $$ i += 4 * 16-->Line_7 $$ buffer.getLong(i)[ FD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_8 $$ if (indexStart == 0 && zeros++ > 2) [ CD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_11 $$ System.out.print(count + ": ")[ CD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_13 $$ System.out.print(HEX ? Long.toHexString(indexStart) : String.valueOf(indexStart))[ CD ]
Line_7 $$ long indexStart = buffer.getLong(i)-->Line_13 $$ Long.toHexString(indexStart)[ FD ]
Line_7 $$ long indexStart = buffer.getLong(i)-->Line_13 $$ String.valueOf(indexStart)[ FD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) [ CD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) [ CD ]
Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) -->Line_14 $$ int j = i + 8[ CD ]
Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) -->Line_14 $$ j += 4[ CD ]
Line_14 $$ int j = i + 8-->Line_14 $$ j += 4[ FD ]
Line_14 $$ j += 4-->Line_14 $$ j += 4[ FD ]
Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) -->Line_15 $$ System.out.print(' ')[ CD ]
Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) -->Line_16 $$ int offset = buffer.getInt(j)[ CD ]
Line_16 $$ int offset = buffer.getInt(j)-->Line_16 $$ buffer.getInt(j)[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())-->Line_16 $$ buffer.getInt(j)[ FD ]
Line_14 $$ int j = i + 8-->Line_16 $$ buffer.getInt(j)[ FD ]
Line_14 $$ j += 4-->Line_16 $$ buffer.getInt(j)[ FD ]
Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) -->Line_17 $$ System.out.print(HEX ? Integer.toHexString(offset) : String.valueOf(offset))[ CD ]
Line_16 $$ int offset = buffer.getInt(j)-->Line_17 $$ Integer.toHexString(offset)[ FD ]
Line_16 $$ int offset = buffer.getInt(j)-->Line_17 $$ String.valueOf(offset)[ FD ]
Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) -->Line_19 $$ System.out.println()[ CD ]
Line_5 $$ while (fc.read(buffer) > 0) -->Line_21 $$ buffer.clear()[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect(4096).order(ByteOrder.nativeOrder())-->Line_21 $$ buffer.clear()[ FD ]
Line_3 $$ public void main(String... args) -->Line_23 $$ fc.close()[ CD ]
Line_6 $$ int i = 0-->Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) [ FD ]
Line_6 $$ i += 4 * 16-->Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) [ FD ]
Line_6 $$ int i = 0-->Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) [ FD ]
Line_6 $$ i += 4 * 16-->Line_6 $$ for (int i = 0; i < buffer.capacity(); i += 4 * 16) [ FD ]
Line_6 $$ int i = 0-->Line_7 $$ buffer.getLong(i)[ FD ]
Line_6 $$ i += 4 * 16-->Line_7 $$ buffer.getLong(i)[ FD ]
Line_7 $$ long indexStart = buffer.getLong(i)-->Line_13 $$ Long.toHexString(indexStart)[ FD ]
Line_7 $$ long indexStart = buffer.getLong(i)-->Line_13 $$ String.valueOf(indexStart)[ FD ]
Line_14 $$ int j = i + 8-->Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) [ FD ]
Line_14 $$ j += 4-->Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) [ FD ]
Line_14 $$ int j = i + 8-->Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) [ FD ]
Line_14 $$ j += 4-->Line_14 $$ for (int j = i + 8; j < i + 64; j += 4) [ FD ]
Line_14 $$ int j = i + 8-->Line_16 $$ buffer.getInt(j)[ FD ]
Line_14 $$ j += 4-->Line_16 $$ buffer.getInt(j)[ FD ]
Line_16 $$ int offset = buffer.getInt(j)-->Line_17 $$ Integer.toHexString(offset)[ FD ]
Line_16 $$ int offset = buffer.getInt(j)-->Line_17 $$ String.valueOf(offset)[ FD ]
