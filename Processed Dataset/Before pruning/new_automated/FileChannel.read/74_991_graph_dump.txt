Line_0 $$ Entry-->Line_2 $$ //74
public class func [ CD ]
Line_2 $$ //74
public class func -->Line_3 $$ public void setStatusFromFile(FileChannel channel) [ CD ]
Line_3 $$ public void setStatusFromFile(FileChannel channel) -->Line_4 $$ ByteBuffer.wrap(new byte[(int) channel.size()])[ CD ]
Line_3 $$ public void setStatusFromFile(FileChannel channel) -->Line_5 $$ channel.read(buffer)[ CD ]
Line_3 $$ public void setStatusFromFile(FileChannel channel) -->Line_6 $$ buffer.position(0)[ CD ]
Line_3 $$ public void setStatusFromFile(FileChannel channel) -->Line_7 $$ long onDiskVersion = buffer.getLong()[ CD ]
Line_7 $$ long onDiskVersion = buffer.getLong()-->Line_7 $$ buffer.getLong()[ CD ]
Line_3 $$ public void setStatusFromFile(FileChannel channel) -->Line_8 $$ if (version != onDiskVersion) [ CD ]
Line_7 $$ long onDiskVersion = buffer.getLong()-->Line_8 $$ if (version != onDiskVersion) [ FD ]
Line_8 $$ if (version != onDiskVersion) -->Line_10 $$ CRC32 crc32 = new CRC32()[ CD ]
Line_8 $$ if (version != onDiskVersion) -->Line_11 $$ crc32.update((int) (onDiskVersion >>> 32) & 0xFFFFFFFF)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_11 $$ crc32.update((int) (onDiskVersion >>> 32) & 0xFFFFFFFF)[ FD ]
Line_8 $$ if (version != onDiskVersion) -->Line_12 $$ crc32.update((int) (onDiskVersion >>> 0) & 0xFFFFFFFF)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_12 $$ crc32.update((int) (onDiskVersion >>> 0) & 0xFFFFFFFF)[ FD ]
Line_8 $$ if (version != onDiskVersion) -->Line_13 $$ int size = buffer.getInt()[ CD ]
Line_13 $$ int size = buffer.getInt()-->Line_13 $$ buffer.getInt()[ CD ]
Line_8 $$ if (version != onDiskVersion) -->Line_14 $$ crc32.update(size)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_14 $$ crc32.update(size)[ FD ]
Line_13 $$ int size = buffer.getInt()-->Line_14 $$ crc32.update(size)[ FD ]
Line_8 $$ if (version != onDiskVersion) -->Line_15 $$ LinkedHashMap<String, IndexEntry> newIndexEntries = new LinkedHashMap<String, IndexEntry>()[ CD ]
Line_8 $$ if (version != onDiskVersion) -->Line_20 $$ // prepared
for (int i = 0; i < size; i++) [ CD ]
Line_8 $$ if (version != onDiskVersion) -->Line_8 $$ if (version != onDiskVersion) [ CD ]
Line_13 $$ int size = buffer.getInt()-->Line_20 $$ // prepared
for (int i = 0; i < size; i++) [ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_20 $$ int i = 0[ CD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_20 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_20 $$ i++[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_22 $$ String indexTypeString = readString(buffer, crc32)[ CD ]
Line_22 $$ String indexTypeString = readString(buffer, crc32)-->Line_22 $$ readString(buffer, crc32)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_22 $$ readString(buffer, crc32)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_23 $$ IndexType indexType[ CD ]
Line_23 $$ IndexType indexType-->Line_26 $$ indexType = IndexType.valueOf(indexTypeString)[ FD ]
Line_26 $$ indexType = IndexType.valueOf(indexTypeString)-->Line_26 $$ indexType = IndexType.valueOf(indexTypeString)[ FD ]
Line_26 $$ indexType = IndexType.valueOf(indexTypeString)-->Line_26 $$ IndexType.valueOf(indexTypeString)[ CD ]
Line_22 $$ String indexTypeString = readString(buffer, crc32)-->Line_26 $$ IndexType.valueOf(indexTypeString)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_33 $$ String name = readString(buffer, crc32)[ CD ]
Line_33 $$ String name = readString(buffer, crc32)-->Line_33 $$ readString(buffer, crc32)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_33 $$ readString(buffer, crc32)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_35 $$ String parentName = readString(buffer, crc32)[ CD ]
Line_35 $$ String parentName = readString(buffer, crc32)-->Line_35 $$ readString(buffer, crc32)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_35 $$ readString(buffer, crc32)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_37 $$ String txStatus = readString(buffer, crc32)[ CD ]
Line_37 $$ String txStatus = readString(buffer, crc32)-->Line_37 $$ readString(buffer, crc32)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_37 $$ readString(buffer, crc32)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_38 $$ TransactionStatus status[ CD ]
Line_38 $$ TransactionStatus status-->Line_41 $$ status = TransactionStatus.valueOf(txStatus)[ FD ]
Line_41 $$ status = TransactionStatus.valueOf(txStatus)-->Line_41 $$ status = TransactionStatus.valueOf(txStatus)[ FD ]
Line_41 $$ status = TransactionStatus.valueOf(txStatus)-->Line_41 $$ TransactionStatus.valueOf(txStatus)[ CD ]
Line_37 $$ String txStatus = readString(buffer, crc32)-->Line_41 $$ TransactionStatus.valueOf(txStatus)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_48 $$ String mergeId = readString(buffer, crc32)[ CD ]
Line_48 $$ String mergeId = readString(buffer, crc32)-->Line_48 $$ readString(buffer, crc32)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_48 $$ readString(buffer, crc32)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_50 $$ long documentCount = buffer.getLong()[ CD ]
Line_50 $$ long documentCount = buffer.getLong()-->Line_50 $$ buffer.getLong()[ CD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_51 $$ crc32.update((int) (documentCount >>> 32) & 0xFFFFFFFF)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_51 $$ crc32.update((int) (documentCount >>> 32) & 0xFFFFFFFF)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_52 $$ crc32.update((int) (documentCount >>> 0) & 0xFFFFFFFF)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_52 $$ crc32.update((int) (documentCount >>> 0) & 0xFFFFFFFF)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_54 $$ long deletions = buffer.getLong()[ CD ]
Line_54 $$ long deletions = buffer.getLong()-->Line_54 $$ buffer.getLong()[ CD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_55 $$ crc32.update((int) (deletions >>> 32) & 0xFFFFFFFF)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_55 $$ crc32.update((int) (deletions >>> 32) & 0xFFFFFFFF)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_56 $$ crc32.update((int) (deletions >>> 0) & 0xFFFFFFFF)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_56 $$ crc32.update((int) (deletions >>> 0) & 0xFFFFFFFF)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_58 $$ byte deleteOnlyNodesFlag = buffer.get()[ CD ]
Line_58 $$ byte deleteOnlyNodesFlag = buffer.get()-->Line_58 $$ buffer.get()[ CD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_59 $$ crc32.update(deleteOnlyNodesFlag)[ CD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_59 $$ crc32.update(deleteOnlyNodesFlag)[ FD ]
Line_58 $$ byte deleteOnlyNodesFlag = buffer.get()-->Line_59 $$ crc32.update(deleteOnlyNodesFlag)[ FD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_60 $$ boolean isDeletOnlyNodes = deleteOnlyNodesFlag == 1[ CD ]
Line_20 $$ // prepared
for (int i = 0; i < size; i++) -->Line_62 $$ if (!status.isTransient()) [ CD ]
Line_62 $$ if (!status.isTransient()) -->Line_62 $$ !status.isTransient()[ CD ]
Line_62 $$ !status.isTransient()-->Line_62 $$ status.isTransient()[ CD ]
Line_38 $$ TransactionStatus status-->Line_62 $$ status.isTransient()[ FD ]
Line_41 $$ status = TransactionStatus.valueOf(txStatus)-->Line_62 $$ status.isTransient()[ FD ]
Line_62 $$ if (!status.isTransient()) -->Line_64 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ CD ]
Line_15 $$ LinkedHashMap<String, IndexEntry> newIndexEntries = new LinkedHashMap<String, IndexEntry>()-->Line_64 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ FD ]
Line_33 $$ String name = readString(buffer, crc32)-->Line_64 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ FD ]
Line_8 $$ if (version != onDiskVersion) -->Line_67 $$ long onDiskCRC32 = buffer.getLong()[ CD ]
Line_67 $$ long onDiskCRC32 = buffer.getLong()-->Line_67 $$ buffer.getLong()[ CD ]
Line_8 $$ if (version != onDiskVersion) -->Line_68 $$ if (crc32.getValue() == onDiskCRC32) [ CD ]
Line_67 $$ long onDiskCRC32 = buffer.getLong()-->Line_68 $$ if (crc32.getValue() == onDiskCRC32) [ FD ]
Line_10 $$ CRC32 crc32 = new CRC32()-->Line_68 $$ crc32.getValue()[ FD ]
Line_72 $$ if (entry.getStatus().isTransient()) -->Line_72 $$ entry.getStatus().isTransient()[ CD ]
Line_70 $$ IndexEntry entry-->Line_72 $$ entry.getStatus()[ FD ]
Line_72 $$ if (entry.getStatus().isTransient()) -->Line_74 $$ newIndexEntries.put(entry.getName(), entry)[ CD ]
Line_15 $$ LinkedHashMap<String, IndexEntry> newIndexEntries = new LinkedHashMap<String, IndexEntry>()-->Line_74 $$ newIndexEntries.put(entry.getName(), entry)[ FD ]
Line_70 $$ IndexEntry entry-->Line_74 $$ newIndexEntries.put(entry.getName(), entry)[ FD ]
Line_70 $$ IndexEntry entry-->Line_74 $$ entry.getName()[ FD ]
Line_20 $$ int i = 0-->Line_20 $$ // prepared
for (int i = 0; i < size; i++) [ FD ]
Line_20 $$ int i = 0-->Line_20 $$ // prepared
for (int i = 0; i < size; i++) [ FD ]
Line_20 $$ int i = 0-->Line_20 $$ i++[ FD ]
Line_22 $$ String indexTypeString = readString(buffer, crc32)-->Line_26 $$ IndexType.valueOf(indexTypeString)[ FD ]
Line_37 $$ String txStatus = readString(buffer, crc32)-->Line_41 $$ TransactionStatus.valueOf(txStatus)[ FD ]
Line_58 $$ byte deleteOnlyNodesFlag = buffer.get()-->Line_59 $$ crc32.update(deleteOnlyNodesFlag)[ FD ]
Line_38 $$ TransactionStatus status-->Line_62 $$ status.isTransient()[ FD ]
Line_41 $$ status = TransactionStatus.valueOf(txStatus)-->Line_62 $$ status.isTransient()[ FD ]
Line_33 $$ String name = readString(buffer, crc32)-->Line_64 $$ newIndexEntries.put(name, new IndexEntry(indexType, name, parentName, status, mergeId, documentCount, deletions, isDeletOnlyNodes))[ FD ]
