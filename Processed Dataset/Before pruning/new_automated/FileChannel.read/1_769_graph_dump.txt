Line_0 $$ Entry-->Line_2 $$ //1
public class func [ CD ]
Line_2 $$ //1
public class func -->Line_3 $$ public void testRead10Frames() [ CD ]
Line_3 $$ public void testRead10Frames() -->Line_4 $$ for (int i = 5; i < 10; i++) [ CD ]
Line_3 $$ public void testRead10Frames() -->Line_3 $$ public void testRead10Frames() [ CD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_4 $$ int i = 5[ CD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_4 $$ i++[ CD ]
Line_4 $$ int i = 5-->Line_4 $$ i++[ FD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(bs.get(i - 5).dataLen)[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(bs.get(i - 5).dataLen)-->Line_5 $$ ByteBuffer.allocate(bs.get(i - 5).dataLen)[ CD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_6 $$ frameReadingChannel.position(bs.get(i - 5).dataOffset)[ CD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_7 $$ frameReadingChannel.read(bb)[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(bs.get(i - 5).dataLen)-->Line_7 $$ frameReadingChannel.read(bb)[ FD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_8 $$ ByteBuffer[] frames = bs.get(i - 5).getFrames(bb)[ CD ]
Line_8 $$ ByteBuffer[] frames = bs.get(i - 5).getFrames(bb)-->Line_8 $$ bs.get(i - 5).getFrames(bb)[ CD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(bs.get(i - 5).dataLen)-->Line_8 $$ bs.get(i - 5).getFrames(bb)[ FD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_9 $$ Assert.assertNotNull(frames)[ CD ]
Line_8 $$ ByteBuffer[] frames = bs.get(i - 5).getFrames(bb)-->Line_9 $$ Assert.assertNotNull(frames)[ FD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_10 $$ Assert.assertEquals(1, frames.length)[ CD ]
Line_4 $$ for (int i = 5; i < 10; i++) -->Line_11 $$ Assert.assertArrayEquals(rawFrames[i], MKVMuxerTest.bufferToArray(frames[0]))[ CD ]
Line_4 $$ int i = 5-->Line_4 $$ for (int i = 5; i < 10; i++) [ FD ]
Line_4 $$ int i = 5-->Line_4 $$ for (int i = 5; i < 10; i++) [ FD ]
Line_4 $$ int i = 5-->Line_4 $$ i++[ FD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(bs.get(i - 5).dataLen)-->Line_7 $$ frameReadingChannel.read(bb)[ FD ]
Line_5 $$ ByteBuffer bb = ByteBuffer.allocate(bs.get(i - 5).dataLen)-->Line_8 $$ bs.get(i - 5).getFrames(bb)[ FD ]
Line_8 $$ ByteBuffer[] frames = bs.get(i - 5).getFrames(bb)-->Line_9 $$ Assert.assertNotNull(frames)[ FD ]
