Line_0 $$ Entry-->Line_2 $$ //70
public class func [ CD ]
Line_2 $$ //70
public class func -->Line_3 $$ public void read() [ CD ]
Line_3 $$ public void read() -->Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_4 $$ ByteBuffer.allocateDirect((int) cacheFile.length())[ CD ]
Line_3 $$ public void read() -->Line_5 $$ buffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_5 $$ buffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_3 $$ public void read() -->Line_6 $$ int j = channel.read(buffer)[ CD ]
Line_6 $$ int j = channel.read(buffer)-->Line_6 $$ channel.read(buffer)[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_6 $$ channel.read(buffer)[ FD ]
Line_3 $$ public void read() -->Line_7 $$ if (j != buffer.capacity())
    throw new IOException("Could not read index in one go, only " + j + " out of " + buffer.capacity() + " read");[ CD ]
Line_6 $$ int j = channel.read(buffer)-->Line_7 $$ if (j != buffer.capacity())
    throw new IOException("Could not read index in one go, only " + j + " out of " + buffer.capacity() + " read");[ FD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_7 $$ buffer.capacity()[ FD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_8 $$ buffer.capacity()[ FD ]
Line_3 $$ public void read() -->Line_9 $$ buffer.flip()[ CD ]
Line_4 $$ ByteBuffer buffer = ByteBuffer.allocateDirect((int) cacheFile.length())-->Line_9 $$ buffer.flip()[ FD ]
