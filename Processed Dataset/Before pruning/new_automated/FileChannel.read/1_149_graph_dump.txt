Line_0 $$ Entry-->Line_2 $$ //1
public class func [ CD ]
Line_2 $$ //1
public class func -->Line_3 $$ public void loadDataFromFile(File file) [ CD ]
Line_3 $$ public void loadDataFromFile(File file) -->Line_4 $$ FileInputStream fis = new FileInputStream(file)[ CD ]
Line_3 $$ public void loadDataFromFile(File file) -->Line_5 $$ FileChannel fc = fis.getChannel()[ CD ]
Line_5 $$ FileChannel fc = fis.getChannel()-->Line_5 $$ fis.getChannel()[ CD ]
Line_4 $$ FileInputStream fis = new FileInputStream(file)-->Line_5 $$ fis.getChannel()[ FD ]
Line_3 $$ public void loadDataFromFile(File file) -->Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())[ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_6 $$ ByteBuffer.allocateDirect((int) fc.size())[ CD ]
Line_5 $$ FileChannel fc = fis.getChannel()-->Line_6 $$ fc.size()[ FD ]
Line_3 $$ public void loadDataFromFile(File file) -->Line_7 $$ while (bb.remaining() > 0) fc.read(bb);[ CD ]
Line_3 $$ public void loadDataFromFile(File file) -->Line_3 $$ public void loadDataFromFile(File file) [ CD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_7 $$ bb.remaining()[ FD ]
Line_7 $$ while (bb.remaining() > 0) fc.read(bb);-->Line_7 $$ fc.read(bb)[ CD ]
Line_5 $$ FileChannel fc = fis.getChannel()-->Line_7 $$ fc.read(bb)[ FD ]
Line_6 $$ ByteBuffer bb = ByteBuffer.allocateDirect((int) fc.size())-->Line_7 $$ fc.read(bb)[ FD ]
Line_3 $$ public void loadDataFromFile(File file) -->Line_8 $$ fc.close()[ CD ]
Line_5 $$ FileChannel fc = fis.getChannel()-->Line_8 $$ fc.close()[ FD ]
