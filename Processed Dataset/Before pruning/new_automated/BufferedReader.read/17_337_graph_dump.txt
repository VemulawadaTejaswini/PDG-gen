Line_0 $$ Entry-->Line_2 $$ //17
public class func [ CD ]
Line_2 $$ //17
public class func -->Line_3 $$ public void fromRangeReader(BufferedReader rangeFile) [ CD ]
Line_3 $$ public void fromRangeReader(BufferedReader rangeFile) -->Line_4 $$ if (rangeFile.read() == 'x') [ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_5 $$ rangeFile.readLine()[ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_6 $$ String line = rangeFile.readLine()[ CD ]
Line_6 $$ String line = rangeFile.readLine()-->Line_6 $$ rangeFile.readLine()[ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_7 $$ if (line == null) [ CD ]
Line_6 $$ String line = rangeFile.readLine()-->Line_7 $$ if (line == null) [ FD ]
Line_7 $$ if (line == null) -->Line_8 $$ line = ""[ CD ]
Line_6 $$ String line = rangeFile.readLine()-->Line_8 $$ line = ""[ FD ]
Line_8 $$ line = ""-->Line_8 $$ line = ""[ FD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_10 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_11 $$ double scaledLowerBound = Double.parseDouble(st.nextToken())[ CD ]
Line_11 $$ double scaledLowerBound = Double.parseDouble(st.nextToken())-->Line_11 $$ Double.parseDouble(st.nextToken())[ CD ]
Line_10 $$ StringTokenizer st = new StringTokenizer(line)-->Line_11 $$ st.nextToken()[ FD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_12 $$ double scaledUpperBound = Double.parseDouble(st.nextToken())[ CD ]
Line_12 $$ double scaledUpperBound = Double.parseDouble(st.nextToken())-->Line_12 $$ Double.parseDouble(st.nextToken())[ CD ]
Line_10 $$ StringTokenizer st = new StringTokenizer(line)-->Line_12 $$ st.nextToken()[ FD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_13 $$ if (scaledLowerBound != 0 || scaledUpperBound != 1) [ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_17 $$ String restore_line = null[ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_18 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()[ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_19 $$ while ((restore_line = rangeFile.readLine()) != null) [ CD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_4 $$ if (rangeFile.read() == 'x') [ CD ]
Line_19 $$ restore_line = rangeFile.readLine()-->Line_19 $$ restore_line = rangeFile.readLine()[ FD ]
Line_17 $$ String restore_line = null-->Line_19 $$ restore_line = rangeFile.readLine()[ FD ]
Line_19 $$ restore_line = rangeFile.readLine()-->Line_19 $$ rangeFile.readLine()[ CD ]
Line_19 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_21 $$ StringTokenizer st2 = new StringTokenizer(restore_line)[ CD ]
Line_19 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_22 $$ st2.nextToken()[ CD ]
Line_21 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_22 $$ st2.nextToken()[ FD ]
Line_19 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_23 $$ Double.parseDouble(st2.nextToken())[ CD ]
Line_21 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_23 $$ st2.nextToken()[ FD ]
Line_19 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_24 $$ Double.parseDouble(st2.nextToken())[ CD ]
Line_21 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_24 $$ st2.nextToken()[ FD ]
Line_19 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_25 $$ FeatureLimits newLimit = new FeatureLimits(feature_min, feature_max)[ CD ]
Line_19 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_26 $$ limits.add(newLimit)[ CD ]
Line_18 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()-->Line_26 $$ limits.add(newLimit)[ FD ]
Line_25 $$ FeatureLimits newLimit = new FeatureLimits(feature_min, feature_max)-->Line_26 $$ limits.add(newLimit)[ FD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_29 $$ FeatureVectorScalerImpl scaler = new FeatureVectorScalerImpl(limits.size(), scaledLowerBound, scaledUpperBound)[ CD ]
Line_18 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()-->Line_29 $$ limits.size()[ FD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_30 $$ scaler.setStrategy(new LinearScaling())[ CD ]
Line_29 $$ FeatureVectorScalerImpl scaler = new FeatureVectorScalerImpl(limits.size(), scaledLowerBound, scaledUpperBound)-->Line_30 $$ scaler.setStrategy(new LinearScaling())[ FD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_31 $$ scaler.setFeatureLimits(limits)[ CD ]
Line_29 $$ FeatureVectorScalerImpl scaler = new FeatureVectorScalerImpl(limits.size(), scaledLowerBound, scaledUpperBound)-->Line_31 $$ scaler.setFeatureLimits(limits)[ FD ]
Line_18 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()-->Line_31 $$ scaler.setFeatureLimits(limits)[ FD ]
Line_4 $$ if (rangeFile.read() == 'x') -->Line_33 $$ return scaler;[ CD ]
Line_21 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_22 $$ st2.nextToken()[ FD ]
Line_21 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_23 $$ st2.nextToken()[ FD ]
Line_21 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_24 $$ st2.nextToken()[ FD ]
Line_25 $$ FeatureLimits newLimit = new FeatureLimits(feature_min, feature_max)-->Line_26 $$ limits.add(newLimit)[ FD ]
