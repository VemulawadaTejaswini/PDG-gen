Line_0 $$ Entry-->Line_2 $$ //12
public class func [ CD ]
Line_2 $$ //12
public class func -->Line_3 $$ public void getSqlStatements(InputStream stream) [ CD ]
Line_3 $$ public void getSqlStatements(InputStream stream) -->Line_4 $$ while ((r = reader.read()) != END_OF_STREAM) [ CD ]
Line_3 $$ public void getSqlStatements(InputStream stream) -->Line_3 $$ public void getSqlStatements(InputStream stream) [ CD ]
Line_4 $$ while ((r = reader.read()) != END_OF_STREAM) -->Line_5 $$ char character = (char) r[ CD ]
Line_4 $$ while ((r = reader.read()) != END_OF_STREAM) -->Line_6 $$ sb.append(character)[ CD ]
Line_5 $$ char character = (char) r-->Line_6 $$ sb.append(character)[ FD ]
Line_3 $$ public void getSqlStatements(InputStream stream) -->Line_8 $$ return COMMENT_PATTERN.matcher(sb).replaceAll(Strings.EMPTY).split(STATEMENT_DELIMITER);[ CD ]
Line_8 $$ return COMMENT_PATTERN.matcher(sb).replaceAll(Strings.EMPTY).split(STATEMENT_DELIMITER);-->Line_8 $$ COMMENT_PATTERN.matcher(sb).replaceAll(Strings.EMPTY).split(STATEMENT_DELIMITER)[ CD ]
Line_5 $$ char character = (char) r-->Line_6 $$ sb.append(character)[ FD ]
