Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void fileMatchesPercentage(File file) [ CD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_4 $$ while ((count = reader.read(buffer, 0, buffer.length)) != -1) [ CD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_3 $$ public void fileMatchesPercentage(File file) [ CD ]
Line_4 $$ while ((count = reader.read(buffer, 0, buffer.length)) != -1) -->Line_5 $$ builder.append(buffer, 0, count)[ CD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_7 $$ String output = builder.toString()[ CD ]
Line_7 $$ String output = builder.toString()-->Line_7 $$ builder.toString()[ CD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_8 $$ if (output.startsWith("0")) [ CD ]
Line_7 $$ String output = builder.toString()-->Line_8 $$ if (output.startsWith("0")) [ FD ]
Line_8 $$ if (output.startsWith("0")) -->Line_8 $$ output.startsWith("0")[ CD ]
Line_7 $$ String output = builder.toString()-->Line_8 $$ output.startsWith("0")[ FD ]
Line_8 $$ if (output.startsWith("0")) -->Line_9 $$ if (getProject() != null) [ CD ]
Line_9 $$ if (getProject() != null) -->Line_10 $$ log(MessageFormat.format("[ CD ]
Line_8 $$ if (output.startsWith("0")) -->Line_12 $$ return evaluatePercentage(0);[ CD ]
Line_12 $$ return evaluatePercentage(0);-->Line_12 $$ evaluatePercentage(0)[ CD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_14 $$ StringTokenizer st = new StringTokenizer(output)[ CD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_15 $$ int translated = Integer.parseInt(st.nextToken())[ CD ]
Line_15 $$ int translated = Integer.parseInt(st.nextToken())-->Line_15 $$ Integer.parseInt(st.nextToken())[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(output)-->Line_15 $$ st.nextToken()[ FD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_16 $$ while (st.hasMoreTokens()) [ CD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_3 $$ public void fileMatchesPercentage(File file) [ CD ]
Line_16 $$ while (st.hasMoreTokens()) -->Line_16 $$ st.hasMoreTokens()[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(output)-->Line_16 $$ st.hasMoreTokens()[ FD ]
Line_16 $$ while (st.hasMoreTokens()) -->Line_17 $$ st.nextToken()[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(output)-->Line_17 $$ st.nextToken()[ FD ]
Line_16 $$ while (st.hasMoreTokens()) -->Line_18 $$ if (!st.hasMoreTokens()) [ CD ]
Line_18 $$ if (!st.hasMoreTokens()) -->Line_18 $$ !st.hasMoreTokens()[ CD ]
Line_18 $$ !st.hasMoreTokens()-->Line_18 $$ st.hasMoreTokens()[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(output)-->Line_18 $$ st.hasMoreTokens()[ FD ]
Line_16 $$ while (st.hasMoreTokens()) -->Line_21 $$ st.nextToken()[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(output)-->Line_21 $$ st.nextToken()[ FD ]
Line_16 $$ while (st.hasMoreTokens()) -->Line_22 $$ if (!st.hasMoreTokens()) [ CD ]
Line_22 $$ if (!st.hasMoreTokens()) -->Line_22 $$ !st.hasMoreTokens()[ CD ]
Line_22 $$ !st.hasMoreTokens()-->Line_22 $$ st.hasMoreTokens()[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(output)-->Line_22 $$ st.hasMoreTokens()[ FD ]
Line_16 $$ while (st.hasMoreTokens()) -->Line_25 $$ Integer.parseInt(st.nextToken())[ CD ]
Line_14 $$ StringTokenizer st = new StringTokenizer(output)-->Line_25 $$ st.nextToken()[ FD ]
Line_3 $$ public void fileMatchesPercentage(File file) -->Line_27 $$ int translatedPercentage = (int) (100.0 * (double) translated / (double) total)[ CD ]
