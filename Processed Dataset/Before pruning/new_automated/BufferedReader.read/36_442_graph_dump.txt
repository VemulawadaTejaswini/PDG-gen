Line_0 $$ Entry-->Line_2 $$ //36
public class func [ CD ]
Line_2 $$ //36
public class func -->Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) [ CD ]
Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) -->Line_4 $$ final URL url = url(fullPath)[ CD ]
Line_4 $$ final URL url = url(fullPath)-->Line_4 $$ url(fullPath)[ CD ]
Line_4 $$ final URL url = url(fullPath)-->Line_5 $$ url.openConnection()[ FD ]
Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) -->Line_6 $$ connection.setRequestMethod(requestMethod)[ CD ]
Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) -->Line_8 $$ while ((bytesRead = reader.read(chars)) != -1) [ CD ]
Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) -->Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) [ CD ]
Line_8 $$ while ((bytesRead = reader.read(chars)) != -1) -->Line_9 $$ builder.append(chars, 0, bytesRead)[ CD ]
Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) -->Line_11 $$ if (reader != null) [ CD ]
Line_11 $$ if (reader != null) -->Line_12 $$ reader.close()[ CD ]
Line_3 $$ public void readFromPath(final String path, final String clientId, final String requestMethod) -->Line_14 $$ if (connection != null) [ CD ]
Line_14 $$ if (connection != null) -->Line_15 $$ connection.disconnect()[ CD ]
