Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void expandToTemplate(Properties props, InputStream is, OutputStream os, char marker, File file) [ CD ]
Line_3 $$ public void expandToTemplate(Properties props, InputStream is, OutputStream os, char marker, File file) -->Line_4 $$ while ((ch = r.read()) != -1) [ CD ]
Line_3 $$ public void expandToTemplate(Properties props, InputStream is, OutputStream os, char marker, File file) -->Line_3 $$ public void expandToTemplate(Properties props, InputStream is, OutputStream os, char marker, File file) [ CD ]
Line_4 $$ while ((ch = r.read()) != -1) -->Line_5 $$ if (ch == marker) [ CD ]
Line_5 $$ if (ch == marker) -->Line_6 $$ StringBuffer sb = new StringBuffer(20)[ CD ]
Line_5 $$ if (ch == marker) -->Line_7 $$ while ((ch = r.read()) != marker) [ CD ]
Line_5 $$ if (ch == marker) -->Line_5 $$ if (ch == marker) [ CD ]
Line_6 $$ StringBuffer sb = new StringBuffer(20)-->Line_19 $$ sb.append((char) ch)[ FD ]
Line_5 $$ if (ch == marker) -->Line_22 $$ if (sb.length() == 0) [ CD ]
Line_6 $$ StringBuffer sb = new StringBuffer(20)-->Line_22 $$ sb.length()[ FD ]
Line_22 $$ if (sb.length() == 0) -->Line_23 $$ w.write(marker)[ CD ]
Line_22 $$ if (sb.length() == 0) -->Line_25 $$ AT_AT_CONTENTS_PATTERN.matcher(sb)[ CD ]
Line_6 $$ StringBuffer sb = new StringBuffer(20)-->Line_25 $$ AT_AT_CONTENTS_PATTERN.matcher(sb)[ FD ]
Line_22 $$ if (sb.length() == 0) -->Line_26 $$ if (!matcher.matches()) [ CD ]
Line_26 $$ if (!matcher.matches()) -->Line_26 $$ !matcher.matches()[ CD ]
Line_26 $$ !matcher.matches()-->Line_26 $$ matcher.matches()[ CD ]
Line_22 $$ if (sb.length() == 0) -->Line_30 $$ matcher.group(1)[ CD ]
Line_22 $$ if (sb.length() == 0) -->Line_31 $$ matcher.group(2)[ CD ]
Line_22 $$ if (sb.length() == 0) -->Line_33 $$ props.getProperty(name)[ CD ]
Line_22 $$ if (sb.length() == 0) -->Line_34 $$ w.write(codec.encodeProperty(name, propValue, modifiers))[ CD ]
Line_5 $$ if (ch == marker) -->Line_39 $$ // sequence.
if (ch == '\n') [ CD ]
Line_5 $$ if (ch == marker) -->Line_42 $$ w.write((char) ch)[ CD ]
Line_3 $$ public void expandToTemplate(Properties props, InputStream is, OutputStream os, char marker, File file) -->Line_45 $$ w.flush()[ CD ]
Line_6 $$ StringBuffer sb = new StringBuffer(20)-->Line_22 $$ sb.length()[ FD ]
Line_6 $$ StringBuffer sb = new StringBuffer(20)-->Line_25 $$ AT_AT_CONTENTS_PATTERN.matcher(sb)[ FD ]
