Line_0 $$ Entry-->Line_2 $$ //2
public class func [ CD ]
Line_2 $$ //2
public class func -->Line_3 $$ public void detectLineSeparator(File f) [ CD ]
Line_3 $$ public void detectLineSeparator(File f) -->Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis))[ CD ]
Line_3 $$ public void detectLineSeparator(File f) -->Line_6 $$ while ((c = (char) br.read()) != null) [ CD ]
Line_3 $$ public void detectLineSeparator(File f) -->Line_3 $$ public void detectLineSeparator(File f) [ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis))-->Line_6 $$ br.read()[ FD ]
Line_6 $$ while ((c = (char) br.read()) != null) -->Line_8 $$ if (c == '\n')
    return LineSeparator.UNIX;[ CD ]
Line_8 $$ if (c == '\n')
    return LineSeparator.UNIX;-->Line_9 $$ return LineSeparator.UNIX;[ CD ]
Line_6 $$ while ((c = (char) br.read()) != null) -->Line_10 $$ if (c == '\r') [ CD ]
Line_10 $$ if (c == '\r') -->Line_12 $$ if (br.read() == '\n')
    return LineSeparator.WINDOWS;
else
    //This seems very unlikely
    return LineSeparator.OLDMAC;[ CD ]
Line_5 $$ BufferedReader br = new BufferedReader(new InputStreamReader(fis))-->Line_12 $$ br.read()[ FD ]
Line_12 $$ if (br.read() == '\n')
    return LineSeparator.WINDOWS;
else
    //This seems very unlikely
    return LineSeparator.OLDMAC;-->Line_13 $$ return LineSeparator.WINDOWS;[ CD ]
Line_12 $$ if (br.read() == '\n')
    return LineSeparator.WINDOWS;
else
    //This seems very unlikely
    return LineSeparator.OLDMAC;-->Line_15 $$ //This seems very unlikely
return LineSeparator.OLDMAC;[ CD ]
