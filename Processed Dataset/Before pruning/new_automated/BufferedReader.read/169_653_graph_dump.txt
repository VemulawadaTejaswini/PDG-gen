Line_0 $$ Entry-->Line_2 $$ //169
public class func [ CD ]
Line_2 $$ //169
public class func -->Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() [ CD ]
Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_4 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))[ CD ]
Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_5 $$ SimpleHttpResponse response = parser.readResponse(reader)[ CD ]
Line_5 $$ SimpleHttpResponse response = parser.readResponse(reader)-->Line_5 $$ parser.readResponse(reader)[ CD ]
Line_4 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))-->Line_5 $$ parser.readResponse(reader)[ FD ]
Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_6 $$ Assert.assertTrue(Integer.parseInt(response.getCode()) >= 500)[ CD ]
Line_5 $$ SimpleHttpResponse response = parser.readResponse(reader)-->Line_6 $$ response.getCode()[ FD ]
Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_7 $$ String connectionHeader = response.getHeaders().get("connection")[ CD ]
Line_7 $$ String connectionHeader = response.getHeaders().get("connection")-->Line_7 $$ response.getHeaders().get("connection")[ CD ]
Line_5 $$ SimpleHttpResponse response = parser.readResponse(reader)-->Line_7 $$ response.getHeaders()[ FD ]
Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_8 $$ Assert.assertNotNull(connectionHeader)[ CD ]
Line_7 $$ String connectionHeader = response.getHeaders().get("connection")-->Line_8 $$ Assert.assertNotNull(connectionHeader)[ FD ]
Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_9 $$ Assert.assertTrue(connectionHeader.contains("close"))[ CD ]
Line_7 $$ String connectionHeader = response.getHeaders().get("connection")-->Line_9 $$ connectionHeader.contains("close")[ FD ]
Line_3 $$ public void testClientRequestStallsContentProxyIdlesTimeout() -->Line_10 $$ Assert.assertEquals(-1, reader.read())[ CD ]
Line_4 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"))-->Line_10 $$ reader.read()[ FD ]
