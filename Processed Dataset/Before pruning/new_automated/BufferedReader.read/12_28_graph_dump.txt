Line_0 $$ Entry-->Line_2 $$ //12
public class func [ CD ]
Line_2 $$ //12
public class func -->Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) [ CD ]
Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_4 $$ StreamQualifier.readName(buffered_reader)[ CD ]
Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_5 $$ if (name == null) [ CD ]
Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_9 $$ buffered_reader.mark(1)[ CD ]
Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_10 $$ final int next_char = buffered_reader.read()[ CD ]
Line_10 $$ final int next_char = buffered_reader.read()-->Line_10 $$ buffered_reader.read()[ CD ]
Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_11 $$ if (next_char == -1) [ CD ]
Line_10 $$ final int next_char = buffered_reader.read()-->Line_11 $$ if (next_char == -1) [ FD ]
Line_11 $$ if (next_char == -1) -->Line_14 $$ if (next_char == '=') [ CD ]
Line_10 $$ final int next_char = buffered_reader.read()-->Line_14 $$ if (next_char == '=') [ FD ]
Line_14 $$ if (next_char == '=') -->Line_15 $$ StreamQualifier.readValue(buffered_reader)[ CD ]
Line_14 $$ if (next_char == '=') -->Line_19 $$ buffered_reader.reset()[ CD ]
Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_22 $$ if (value == null) [ CD ]
Line_22 $$ if (value == null) -->Line_26 $$ StreamQualifier.makeStreamQualifier(name, value, entry_information)[ CD ]
Line_3 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_29 $$ return_vector.addQualifierValues(new_qualifier)[ CD ]
