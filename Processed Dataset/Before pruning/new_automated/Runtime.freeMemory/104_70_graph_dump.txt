Line_0 $$ Entry-->Line_2 $$ //104
public class func [ CD ]
Line_2 $$ //104
public class func -->Line_3 $$ public void updateState() [ CD ]
Line_3 $$ public void updateState() -->Line_4 $$ final Runtime runtime = Runtime.getRuntime()[ CD ]
Line_4 $$ final Runtime runtime = Runtime.getRuntime()-->Line_4 $$ Runtime.getRuntime()[ CD ]
Line_3 $$ public void updateState() -->Line_5 $$ final long total = runtime.totalMemory() / MEGABYTE[ CD ]
Line_5 $$ final long total = runtime.totalMemory() / MEGABYTE-->Line_5 $$ runtime.totalMemory()[ CD ]
Line_4 $$ final Runtime runtime = Runtime.getRuntime()-->Line_5 $$ runtime.totalMemory()[ FD ]
Line_3 $$ public void updateState() -->Line_6 $$ final long used = total - runtime.freeMemory() / MEGABYTE[ CD ]
Line_4 $$ final Runtime runtime = Runtime.getRuntime()-->Line_6 $$ runtime.freeMemory()[ FD ]
Line_3 $$ public void updateState() -->Line_7 $$ if (total != myLastTotal || used != myLastUsed) [ CD ]
Line_7 $$ if (total != myLastTotal || used != myLastUsed) -->Line_11 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_12 $$ public void run() -->Line_14 $$ repaint()[ CD ]
Line_7 $$ if (total != myLastTotal || used != myLastUsed) -->Line_18 $$ setToolTipText(UIBundle.message("memory.usage.panel.statistics.message", total, used))[ CD ]
Line_5 $$ final long total = runtime.totalMemory() / MEGABYTE-->Line_18 $$ UIBundle.message("memory.usage.panel.statistics.message", total, used)[ FD ]
Line_6 $$ final long used = total - runtime.freeMemory() / MEGABYTE-->Line_18 $$ UIBundle.message("memory.usage.panel.statistics.message", total, used)[ FD ]
