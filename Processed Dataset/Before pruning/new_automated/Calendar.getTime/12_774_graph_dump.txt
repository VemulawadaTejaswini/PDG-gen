Line_0 $$ Entry-->Line_2 $$ //12
public class func [ CD ]
Line_2 $$ //12
public class func -->Line_3 $$ public void shouldThrowExceptionIfStartDateEqualToCurrentDateWhenDeletingPeriod() [ CD ]
Line_3 $$ public void shouldThrowExceptionIfStartDateEqualToCurrentDateWhenDeletingPeriod() -->Line_4 $$ Calendar periodStartDate = Calendar.getInstance()[ CD ]
Line_4 $$ Calendar periodStartDate = Calendar.getInstance()-->Line_4 $$ Calendar.getInstance()[ CD ]
Line_3 $$ public void shouldThrowExceptionIfStartDateEqualToCurrentDateWhenDeletingPeriod() -->Line_5 $$ ProcessingPeriod processingPeriod = make(a(defaultProcessingPeriod, with(startDate, periodStartDate.getTime())))[ CD ]
Line_5 $$ ProcessingPeriod processingPeriod = make(a(defaultProcessingPeriod, with(startDate, periodStartDate.getTime())))-->Line_5 $$ make(a(defaultProcessingPeriod, with(startDate, periodStartDate.getTime())))[ CD ]
Line_4 $$ Calendar periodStartDate = Calendar.getInstance()-->Line_5 $$ periodStartDate.getTime()[ FD ]
Line_3 $$ public void shouldThrowExceptionIfStartDateEqualToCurrentDateWhenDeletingPeriod() -->Line_6 $$ when(mapper.getById(processingPeriod.getId())).thenReturn(processingPeriod)[ CD ]
Line_5 $$ ProcessingPeriod processingPeriod = make(a(defaultProcessingPeriod, with(startDate, periodStartDate.getTime())))-->Line_6 $$ when(mapper.getById(processingPeriod.getId())).thenReturn(processingPeriod)[ FD ]
Line_5 $$ ProcessingPeriod processingPeriod = make(a(defaultProcessingPeriod, with(startDate, periodStartDate.getTime())))-->Line_6 $$ processingPeriod.getId()[ FD ]
