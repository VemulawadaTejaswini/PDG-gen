Line_0 $$ Entry-->Line_2 $$ //228
public class func [ CD ]
Line_2 $$ //228
public class func -->Line_3 $$ public void doRun(Connection cx) [ CD ]
Line_3 $$ public void doRun(Connection cx) -->Line_4 $$ String sql = format("SELECT nid FROM %s WHERE alias = ?", MAPPINGS)[ CD ]
Line_4 $$ String sql = format("SELECT nid FROM %s WHERE alias = ?", MAPPINGS)-->Line_4 $$ format("SELECT nid FROM %s WHERE alias = ?", MAPPINGS)[ CD ]
Line_3 $$ public void doRun(Connection cx) -->Line_5 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, node)))[ CD ]
Line_5 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, node)))-->Line_5 $$ open(cx.prepareStatement(log(sql, LOG, node)))[ CD ]
Line_4 $$ String sql = format("SELECT nid FROM %s WHERE alias = ?", MAPPINGS)-->Line_5 $$ log(sql, LOG, node)[ FD ]
Line_3 $$ public void doRun(Connection cx) -->Line_6 $$ ps.setString(1, node)[ CD ]
Line_5 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, node)))-->Line_6 $$ ps.setString(1, node)[ FD ]
Line_3 $$ public void doRun(Connection cx) -->Line_7 $$ ResultSet rs = open(ps.executeQuery())[ CD ]
Line_7 $$ ResultSet rs = open(ps.executeQuery())-->Line_7 $$ open(ps.executeQuery())[ CD ]
Line_5 $$ PreparedStatement ps = open(cx.prepareStatement(log(sql, LOG, node)))-->Line_7 $$ ps.executeQuery()[ FD ]
Line_3 $$ public void doRun(Connection cx) -->Line_8 $$ return rs.next() ? rs.getString(1) : null;[ CD ]
Line_7 $$ ResultSet rs = open(ps.executeQuery())-->Line_8 $$ rs.next()[ FD ]
Line_7 $$ ResultSet rs = open(ps.executeQuery())-->Line_8 $$ rs.getString(1)[ FD ]
