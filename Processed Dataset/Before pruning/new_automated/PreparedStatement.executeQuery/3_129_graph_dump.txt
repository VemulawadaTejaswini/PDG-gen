Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void testLikeWithHighestValidCharacter() [ CD ]
Line_3 $$ public void testLikeWithHighestValidCharacter() -->Line_4 $$ for (int i = 0; i < match.length; i++) [ CD ]
Line_3 $$ public void testLikeWithHighestValidCharacter() -->Line_3 $$ public void testLikeWithHighestValidCharacter() [ CD ]
Line_4 $$ for (int i = 0; i < match.length; i++) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < match.length; i++) -->Line_4 $$ i++[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ for (int i = 0; i < match.length; i++) -->Line_5 $$ ps.setString(1, match[i])[ CD ]
Line_4 $$ for (int i = 0; i < match.length; i++) -->Line_6 $$ JDBC.assertSingleValueResultSet(ps.executeQuery(), "1")[ CD ]
Line_3 $$ public void testLikeWithHighestValidCharacter() -->Line_8 $$ ps.setString(1, "")[ CD ]
Line_3 $$ public void testLikeWithHighestValidCharacter() -->Line_9 $$ JDBC.assertEmpty(ps.executeQuery())[ CD ]
Line_3 $$ public void testLikeWithHighestValidCharacter() -->Line_10 $$ ps.close()[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < match.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < match.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
