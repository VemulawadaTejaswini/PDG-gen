Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void DownloadHistory(Context context) [ CD ]
Line_3 $$ public void DownloadHistory(Context context) -->Line_4 $$ Config config = new Config(context)[ CD ]
Line_3 $$ public void DownloadHistory(Context context) -->Line_5 $$ File historyFile = config.getPodcastRootPath("history.prop")[ CD ]
Line_5 $$ File historyFile = config.getPodcastRootPath("history.prop")-->Line_5 $$ config.getPodcastRootPath("history.prop")[ CD ]
Line_4 $$ Config config = new Config(context)-->Line_5 $$ config.getPodcastRootPath("history.prop")[ FD ]
Line_3 $$ public void DownloadHistory(Context context) -->Line_6 $$ DataInputStream dis = new DataInputStream(new FileInputStream(historyFile))[ CD ]
Line_3 $$ public void DownloadHistory(Context context) -->Line_7 $$ String line = dis.readLine()[ CD ]
Line_7 $$ String line = dis.readLine()-->Line_7 $$ dis.readLine()[ CD ]
Line_6 $$ DataInputStream dis = new DataInputStream(new FileInputStream(historyFile))-->Line_7 $$ dis.readLine()[ FD ]
Line_3 $$ public void DownloadHistory(Context context) -->Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) [ CD ]
Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) -->Line_8 $$ !line.startsWith(HISTORY_TWO_HEADER)[ CD ]
Line_8 $$ !line.startsWith(HISTORY_TWO_HEADER)-->Line_8 $$ line.startsWith(HISTORY_TWO_HEADER)[ CD ]
Line_7 $$ String line = dis.readLine()-->Line_8 $$ line.startsWith(HISTORY_TWO_HEADER)[ FD ]
Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) -->Line_10 $$ historyEntries.add(new HistoryEntry(UNKNOWN_SUBSCRIPTION, line))[ CD ]
Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) -->Line_11 $$ while ((line = dis.readLine()) != null) [ CD ]
Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) -->Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) [ CD ]
Line_11 $$ line = dis.readLine()-->Line_11 $$ line = dis.readLine()[ FD ]
Line_7 $$ String line = dis.readLine()-->Line_11 $$ line = dis.readLine()[ FD ]
Line_11 $$ line = dis.readLine()-->Line_11 $$ dis.readLine()[ CD ]
Line_6 $$ DataInputStream dis = new DataInputStream(new FileInputStream(historyFile))-->Line_11 $$ dis.readLine()[ FD ]
Line_11 $$ while ((line = dis.readLine()) != null) -->Line_12 $$ historyEntries.add(new HistoryEntry(UNKNOWN_SUBSCRIPTION, line))[ CD ]
Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) -->Line_15 $$ ObjectInputStream ois = new ObjectInputStream(dis)[ CD ]
Line_15 $$ ObjectInputStream ois = new ObjectInputStream(dis)-->Line_16 $$ ois.readObject()[ FD ]
Line_8 $$ if (!line.startsWith(HISTORY_TWO_HEADER)) -->Line_17 $$ ois.close()[ CD ]
Line_15 $$ ObjectInputStream ois = new ObjectInputStream(dis)-->Line_17 $$ ois.close()[ FD ]
Line_3 $$ public void DownloadHistory(Context context) -->Line_19 $$ Log.e(DownloadHelper.class.getName(), "error reading history file " + historyFile.toString(), e)[ CD ]
Line_5 $$ File historyFile = config.getPodcastRootPath("history.prop")-->Line_19 $$ historyFile.toString()[ FD ]
