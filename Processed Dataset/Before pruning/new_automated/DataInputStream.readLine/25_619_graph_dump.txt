Line_0 $$ Entry-->Line_2 $$ //25
public class func [ CD ]
Line_2 $$ //25
public class func -->Line_3 $$ public void readMaze(String inputFileName) [ CD ]
Line_3 $$ public void readMaze(String inputFileName) -->Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) [ CD ]
Line_3 $$ public void readMaze(String inputFileName) -->Line_3 $$ public void readMaze(String inputFileName) [ CD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_6 $$ String code[ CD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_7 $$ int[] xy = new int[6][ CD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_8 $$ int numToken = 0[ CD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_10 $$ StringTokenizer tok = new StringTokenizer(line)[ CD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_12 $$ if ((numToken = tok.countTokens()) < 1) [ CD ]
Line_8 $$ int numToken = 0-->Line_12 $$ numToken = tok.countTokens()[ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_12 $$ numToken = tok.countTokens()[ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_12 $$ tok.countTokens()[ CD ]
Line_10 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_12 $$ tok.countTokens()[ FD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_16 $$ code = tok.nextToken()[ CD ]
Line_6 $$ String code-->Line_16 $$ code = tok.nextToken()[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_16 $$ code = tok.nextToken()[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_16 $$ tok.nextToken()[ CD ]
Line_10 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_16 $$ tok.nextToken()[ FD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_18 $$ if (code.equals("#")) [ CD ]
Line_6 $$ String code-->Line_18 $$ if (code.equals("#")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_18 $$ if (code.equals("#")) [ FD ]
Line_18 $$ if (code.equals("#")) -->Line_18 $$ code.equals("#")[ CD ]
Line_6 $$ String code-->Line_18 $$ code.equals("#")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_18 $$ code.equals("#")[ FD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_22 $$ for (int i = 0; i < numToken - 1; i++) [ CD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) [ CD ]
Line_22 $$ for (int i = 0; i < numToken - 1; i++) -->Line_22 $$ int i = 0[ CD ]
Line_22 $$ for (int i = 0; i < numToken - 1; i++) -->Line_22 $$ i++[ CD ]
Line_22 $$ int i = 0-->Line_22 $$ i++[ FD ]
Line_22 $$ for (int i = 0; i < numToken - 1; i++) -->Line_23 $$ xy[i] = Integer.parseInt(tok.nextToken())[ CD ]
Line_23 $$ xy[i] = Integer.parseInt(tok.nextToken())-->Line_23 $$ Integer.parseInt(tok.nextToken())[ CD ]
Line_10 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_23 $$ tok.nextToken()[ FD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_26 $$ if (code.equals("d")) [ CD ]
Line_6 $$ String code-->Line_26 $$ if (code.equals("d")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_26 $$ if (code.equals("d")) [ FD ]
Line_26 $$ if (code.equals("d")) -->Line_26 $$ code.equals("d")[ CD ]
Line_6 $$ String code-->Line_26 $$ code.equals("d")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_26 $$ code.equals("d")[ FD ]
Line_26 $$ if (code.equals("d")) -->Line_28 $$ /* dimensions (format: d x y z) */
if (numToken != 4) [ CD ]
Line_8 $$ int numToken = 0-->Line_28 $$ /* dimensions (format: d x y z) */
if (numToken != 4) [ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_28 $$ /* dimensions (format: d x y z) */
if (numToken != 4) [ FD ]
Line_28 $$ /* dimensions (format: d x y z) */
if (numToken != 4) -->Line_35 $$ if (width < 1 || height < 1 || depth < 1)
    isParseError = true;[ CD ]
Line_26 $$ if (code.equals("d")) -->Line_38 $$ if (code.equals("p")) [ CD ]
Line_6 $$ String code-->Line_38 $$ if (code.equals("p")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_38 $$ if (code.equals("p")) [ FD ]
Line_38 $$ if (code.equals("p")) -->Line_38 $$ code.equals("p")[ CD ]
Line_6 $$ String code-->Line_38 $$ code.equals("p")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_38 $$ code.equals("p")[ FD ]
Line_38 $$ if (code.equals("p")) -->Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) [ CD ]
Line_8 $$ int numToken = 0-->Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) [ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) [ FD ]
Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) -->Line_43 $$ Coordinate.alloc(xy[0], xy[1], xy[2])[ CD ]
Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) -->Line_44 $$ Coordinate.alloc(xy[3], xy[4], xy[5])[ CD ]
Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) -->Line_46 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) [ CD ]
Line_46 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_46 $$ Coordinate.isEqual(srcPtr, dstPtr)[ CD ]
Line_46 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_50 $$ Pair.alloc(srcPtr, dstPtr)[ CD ]
Line_46 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_51 $$ workListPtr.insert(coordinatePairPtr)[ CD ]
Line_46 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_52 $$ srcVectorPtr.vector_pushBack(srcPtr)[ CD ]
Line_46 $$ if (Coordinate.isEqual(srcPtr, dstPtr)) -->Line_53 $$ dstVectorPtr.vector_pushBack(dstPtr)[ CD ]
Line_38 $$ if (code.equals("p")) -->Line_57 $$ if (code.equals("w")) [ CD ]
Line_6 $$ String code-->Line_57 $$ if (code.equals("w")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_57 $$ if (code.equals("w")) [ FD ]
Line_57 $$ if (code.equals("w")) -->Line_57 $$ code.equals("w")[ CD ]
Line_6 $$ String code-->Line_57 $$ code.equals("w")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_57 $$ code.equals("w")[ FD ]
Line_57 $$ if (code.equals("w")) -->Line_59 $$ /* walls (format: w x y z) */
if (numToken != 4) [ CD ]
Line_8 $$ int numToken = 0-->Line_59 $$ /* walls (format: w x y z) */
if (numToken != 4) [ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_59 $$ /* walls (format: w x y z) */
if (numToken != 4) [ FD ]
Line_59 $$ /* walls (format: w x y z) */
if (numToken != 4) -->Line_62 $$ Coordinate.alloc(xy[0], xy[1], xy[2])[ CD ]
Line_59 $$ /* walls (format: w x y z) */
if (numToken != 4) -->Line_63 $$ wallVectorPtr.vector_pushBack(wallPtr)[ CD ]
Line_4 $$ while ((line = new DataInputStream(in).readLine()) != null) -->Line_69 $$ if (isParseError) [ CD ]
Line_69 $$ if (isParseError) -->Line_70 $$ System.out.println("Error: line " + lineNumber + " of " + inputFileName + "invalid")[ CD ]
Line_69 $$ if (isParseError) -->Line_71 $$ System.exit(1)[ CD ]
Line_3 $$ public void readMaze(String inputFileName) -->Line_74 $$ in.close()[ CD ]
Line_10 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_12 $$ tok.countTokens()[ FD ]
Line_10 $$ StringTokenizer tok = new StringTokenizer(line)-->Line_16 $$ tok.nextToken()[ FD ]
Line_6 $$ String code-->Line_18 $$ if (code.equals("#")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_18 $$ if (code.equals("#")) [ FD ]
Line_6 $$ String code-->Line_18 $$ code.equals("#")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_18 $$ code.equals("#")[ FD ]
Line_6 $$ String code-->Line_26 $$ if (code.equals("d")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_26 $$ if (code.equals("d")) [ FD ]
Line_6 $$ String code-->Line_26 $$ code.equals("d")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_26 $$ code.equals("d")[ FD ]
Line_8 $$ int numToken = 0-->Line_28 $$ /* dimensions (format: d x y z) */
if (numToken != 4) [ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_28 $$ /* dimensions (format: d x y z) */
if (numToken != 4) [ FD ]
Line_6 $$ String code-->Line_38 $$ if (code.equals("p")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_38 $$ if (code.equals("p")) [ FD ]
Line_6 $$ String code-->Line_38 $$ code.equals("p")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_38 $$ code.equals("p")[ FD ]
Line_8 $$ int numToken = 0-->Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) [ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_39 $$ /* paths (format: p x1 y1 z1 x2 y2 z2) */
if (numToken != 7) [ FD ]
Line_6 $$ String code-->Line_57 $$ if (code.equals("w")) [ FD ]
Line_16 $$ code = tok.nextToken()-->Line_57 $$ if (code.equals("w")) [ FD ]
Line_6 $$ String code-->Line_57 $$ code.equals("w")[ FD ]
Line_16 $$ code = tok.nextToken()-->Line_57 $$ code.equals("w")[ FD ]
Line_8 $$ int numToken = 0-->Line_59 $$ /* walls (format: w x y z) */
if (numToken != 4) [ FD ]
Line_12 $$ numToken = tok.countTokens()-->Line_59 $$ /* walls (format: w x y z) */
if (numToken != 4) [ FD ]
Line_22 $$ int i = 0-->Line_22 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_22 $$ int i = 0-->Line_22 $$ for (int i = 0; i < numToken - 1; i++) [ FD ]
Line_22 $$ int i = 0-->Line_22 $$ i++[ FD ]
