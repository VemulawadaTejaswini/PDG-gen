Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void load(InputStream inStream) [ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_4 $$ while (pos < line.length() && !Character.isWhitespace(c = line.charAt(pos++)) && c != '=' && c != ':') [ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_3 $$ public void load(InputStream inStream) [ CD ]
Line_5 $$ !Character.isWhitespace(c = line.charAt(pos++))-->Line_5 $$ Character.isWhitespace(c = line.charAt(pos++))[ CD ]
Line_4 $$ while (pos < line.length() && !Character.isWhitespace(c = line.charAt(pos++)) && c != '=' && c != ':') -->Line_8 $$ if (needsEscape && c == '\\') [ CD ]
Line_8 $$ if (needsEscape && c == '\\') -->Line_10 $$ if (pos == line.length()) [ CD ]
Line_10 $$ if (pos == line.length()) -->Line_10 $$ line.length()[ CD ]
Line_10 $$ if (pos == line.length()) -->Line_15 $$ reader.readLine()[ CD ]
Line_10 $$ if (pos == line.length()) -->Line_16 $$ if (line == null)
    line = "";[ CD ]
Line_10 $$ if (pos == line.length()) -->Line_19 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_10 $$ if (pos == line.length()) -->Line_10 $$ if (pos == line.length()) [ CD ]
Line_10 $$ if (pos == line.length()) -->Line_25 $$ line.charAt(pos++)[ CD ]
Line_38 $$ if (pos + 4 <= line.length()) -->Line_42 $$ key.append(uni)[ CD ]
Line_8 $$ if (needsEscape && c == '\\') -->Line_52 $$ if (needsEscape)
    key.append(c);[ CD ]
Line_52 $$ if (needsEscape)
    key.append(c);-->Line_53 $$ key.append(c)[ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_55 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);[ CD ]
Line_55 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_56 $$ key.toString()[ CD ]
Line_55 $$ if (needsEscape)
    keyString = key.toString();
else if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_57 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);[ CD ]
Line_57 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_57 $$ Character.isWhitespace(c)[ CD ]
Line_57 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_58 $$ line.substring(start, pos - 1)[ CD ]
Line_57 $$ if (isDelim || Character.isWhitespace(c))
    keyString = line.substring(start, pos - 1);
else
    keyString = line.substring(start, pos);-->Line_60 $$ line.substring(start, pos)[ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_61 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_3 $$ public void load(InputStream inStream) [ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_64 $$ if (!isDelim && (c == ':' || c == '=')) [ CD ]
Line_64 $$ if (!isDelim && (c == ':' || c == '=')) -->Line_67 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_64 $$ if (!isDelim && (c == ':' || c == '=')) -->Line_64 $$ if (!isDelim && (c == ':' || c == '=')) [ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_71 $$ if (!needsEscape) [ CD ]
Line_71 $$ if (!needsEscape) -->Line_73 $$ put(keyString, line.substring(pos))[ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)[ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_77 $$ while (pos < line.length()) [ CD ]
Line_3 $$ public void load(InputStream inStream) -->Line_3 $$ public void load(InputStream inStream) [ CD ]
Line_77 $$ while (pos < line.length()) -->Line_77 $$ line.length()[ CD ]
Line_77 $$ while (pos < line.length()) -->Line_79 $$ line.charAt(pos++)[ CD ]
Line_77 $$ while (pos < line.length()) -->Line_80 $$ if (c == '\\') [ CD ]
Line_80 $$ if (c == '\\') -->Line_82 $$ if (pos == line.length()) [ CD ]
Line_82 $$ if (pos == line.length()) -->Line_82 $$ line.length()[ CD ]
Line_82 $$ if (pos == line.length()) -->Line_85 $$ reader.readLine()[ CD ]
Line_82 $$ if (pos == line.length()) -->Line_90 $$ if (line == null)
    break;[ CD ]
Line_82 $$ if (pos == line.length()) -->Line_94 $$ while (pos < line.length() && Character.isWhitespace(c = line.charAt(pos))) pos++;[ CD ]
Line_82 $$ if (pos == line.length()) -->Line_82 $$ if (pos == line.length()) [ CD ]
Line_82 $$ if (pos == line.length()) -->Line_97 $$ element.ensureCapacity(line.length() - pos + element.length())[ CD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_97 $$ element.ensureCapacity(line.length() - pos + element.length())[ FD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_98 $$ element.length()[ FD ]
Line_82 $$ if (pos == line.length()) -->Line_102 $$ line.charAt(pos++)[ CD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_106 $$ element.append('\n')[ FD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_109 $$ element.append('\t')[ FD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_112 $$ element.append('\r')[ FD ]
Line_115 $$ if (pos + 4 <= line.length()) -->Line_119 $$ element.append(uni)[ CD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_119 $$ element.append(uni)[ FD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_124 $$ element.append(c)[ FD ]
Line_80 $$ if (c == '\\') -->Line_130 $$ element.append(c)[ CD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_130 $$ element.append(c)[ FD ]
Line_3 $$ public void load(InputStream inStream) -->Line_132 $$ put(keyString, element.toString())[ CD ]
Line_76 $$ StringBuilder element = new StringBuilder(line.length() - pos)-->Line_132 $$ element.toString()[ FD ]
