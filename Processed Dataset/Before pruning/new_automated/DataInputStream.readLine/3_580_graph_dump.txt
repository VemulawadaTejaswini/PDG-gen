Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void configure(JobConf jconf) [ CD ]
Line_3 $$ public void configure(JobConf jconf) -->Line_4 $$ for (int i = 0; i < localArchives.length; i++) [ CD ]
Line_3 $$ public void configure(JobConf jconf) -->Line_3 $$ public void configure(JobConf jconf) [ CD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_4 $$ i++[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_6 $$ File f = new File(localArchives[i].toString())[ CD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_7 $$ File txt = new File(f, "test.txt")[ CD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_8 $$ FileInputStream fin = new FileInputStream(txt)[ CD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_9 $$ DataInputStream din = new DataInputStream(fin)[ CD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_10 $$ String str = din.readLine()[ CD ]
Line_10 $$ String str = din.readLine()-->Line_10 $$ din.readLine()[ CD ]
Line_9 $$ DataInputStream din = new DataInputStream(fin)-->Line_10 $$ din.readLine()[ FD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_11 $$ din.close()[ CD ]
Line_9 $$ DataInputStream din = new DataInputStream(fin)-->Line_11 $$ din.close()[ FD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_12 $$ out.writeBytes(str)[ CD ]
Line_10 $$ String str = din.readLine()-->Line_12 $$ out.writeBytes(str)[ FD ]
Line_4 $$ for (int i = 0; i < localArchives.length; i++) -->Line_13 $$ out.writeBytes("\n")[ CD ]
Line_3 $$ public void configure(JobConf jconf) -->Line_15 $$ for (int i = 0; i < localFiles.length; i++) [ CD ]
Line_3 $$ public void configure(JobConf jconf) -->Line_3 $$ public void configure(JobConf jconf) [ CD ]
Line_4 $$ int i = 0-->Line_15 $$ for (int i = 0; i < localFiles.length; i++) [ FD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_15 $$ int i = 0[ CD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_15 $$ i++[ CD ]
Line_15 $$ int i = 0-->Line_15 $$ i++[ FD ]
Line_4 $$ int i = 0-->Line_15 $$ i++[ FD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_17 $$ File txt = new File(localFiles[i].toString())[ CD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_18 $$ FileInputStream fin = new FileInputStream(txt)[ CD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_19 $$ DataInputStream din = new DataInputStream(fin)[ CD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_20 $$ String str = din.readLine()[ CD ]
Line_20 $$ String str = din.readLine()-->Line_20 $$ din.readLine()[ CD ]
Line_19 $$ DataInputStream din = new DataInputStream(fin)-->Line_20 $$ din.readLine()[ FD ]
Line_9 $$ DataInputStream din = new DataInputStream(fin)-->Line_20 $$ din.readLine()[ FD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_21 $$ out.writeBytes(str)[ CD ]
Line_20 $$ String str = din.readLine()-->Line_21 $$ out.writeBytes(str)[ FD ]
Line_10 $$ String str = din.readLine()-->Line_21 $$ out.writeBytes(str)[ FD ]
Line_15 $$ for (int i = 0; i < localFiles.length; i++) -->Line_22 $$ out.writeBytes("\n")[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < localArchives.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < localArchives.length; i++) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ i++[ FD ]
Line_9 $$ DataInputStream din = new DataInputStream(fin)-->Line_10 $$ din.readLine()[ FD ]
Line_9 $$ DataInputStream din = new DataInputStream(fin)-->Line_11 $$ din.close()[ FD ]
Line_10 $$ String str = din.readLine()-->Line_12 $$ out.writeBytes(str)[ FD ]
Line_15 $$ int i = 0-->Line_15 $$ for (int i = 0; i < localFiles.length; i++) [ FD ]
Line_15 $$ int i = 0-->Line_15 $$ for (int i = 0; i < localFiles.length; i++) [ FD ]
Line_15 $$ int i = 0-->Line_15 $$ i++[ FD ]
Line_19 $$ DataInputStream din = new DataInputStream(fin)-->Line_20 $$ din.readLine()[ FD ]
Line_20 $$ String str = din.readLine()-->Line_21 $$ out.writeBytes(str)[ FD ]
