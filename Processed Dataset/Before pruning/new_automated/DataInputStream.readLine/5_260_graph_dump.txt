Line_0 $$ Entry-->Line_2 $$ //5
public class func [ CD ]
Line_2 $$ //5
public class func -->Line_3 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) [ CD ]
Line_3 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_4 $$ String line = in.readLine()[ CD ]
Line_4 $$ String line = in.readLine()-->Line_4 $$ in.readLine()[ CD ]
Line_3 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_5 $$ if (line.equals("exit"))
    break;[ CD ]
Line_4 $$ String line = in.readLine()-->Line_5 $$ if (line.equals("exit"))
    break;[ FD ]
Line_5 $$ if (line.equals("exit"))
    break;-->Line_5 $$ line.equals("exit")[ CD ]
Line_4 $$ String line = in.readLine()-->Line_5 $$ line.equals("exit")[ FD ]
Line_3 $$ public void start(DataInputStream in, OutputStream out, String[] parameters) -->Line_6 $$ if (line.startsWith("\"")) [ CD ]
Line_4 $$ String line = in.readLine()-->Line_6 $$ if (line.startsWith("\"")) [ FD ]
Line_6 $$ if (line.startsWith("\"")) -->Line_6 $$ line.startsWith("\"")[ CD ]
Line_4 $$ String line = in.readLine()-->Line_6 $$ line.startsWith("\"")[ FD ]
Line_6 $$ if (line.startsWith("\"")) -->Line_7 $$ values[++maxUsed] = line.substring(1)[ CD ]
Line_7 $$ values[++maxUsed] = line.substring(1)-->Line_7 $$ line.substring(1)[ CD ]
Line_4 $$ String line = in.readLine()-->Line_7 $$ line.substring(1)[ FD ]
Line_6 $$ if (line.startsWith("\"")) -->Line_9 $$ if (line.indexOf(' ') == -1 && line.indexOf('[') == -1 && line.indexOf('/') == -1)
    line += "/";[ CD ]
Line_4 $$ String line = in.readLine()-->Line_9 $$ line.indexOf(' ')[ FD ]
Line_4 $$ String line = in.readLine()-->Line_9 $$ line.indexOf('[')[ FD ]
Line_4 $$ String line = in.readLine()-->Line_9 $$ line.indexOf('/')[ FD ]
Line_9 $$ if (line.indexOf(' ') == -1 && line.indexOf('[') == -1 && line.indexOf('/') == -1)
    line += "/";-->Line_10 $$ line += "/"[ CD ]
Line_4 $$ String line = in.readLine()-->Line_10 $$ line += "/"[ FD ]
Line_10 $$ line += "/"-->Line_10 $$ line += "/"[ FD ]
Line_6 $$ if (line.startsWith("\"")) -->Line_11 $$ int pos = line.indexOf('/')[ CD ]
Line_11 $$ int pos = line.indexOf('/')-->Line_11 $$ line.indexOf('/')[ CD ]
Line_4 $$ String line = in.readLine()-->Line_11 $$ line.indexOf('/')[ FD ]
Line_10 $$ line += "/"-->Line_11 $$ line.indexOf('/')[ FD ]
Line_6 $$ if (line.startsWith("\"")) -->Line_12 $$ if (pos != -1) [ CD ]
Line_11 $$ int pos = line.indexOf('/')-->Line_12 $$ if (pos != -1) [ FD ]
Line_12 $$ if (pos != -1) -->Line_13 $$ Object obj = values[Integer.parseInt(line.substring(0, pos).trim())][ CD ]
Line_4 $$ String line = in.readLine()-->Line_13 $$ line.substring(0, pos)[ FD ]
Line_10 $$ line += "/"-->Line_13 $$ line.substring(0, pos)[ FD ]
Line_11 $$ int pos = line.indexOf('/')-->Line_13 $$ line.substring(0, pos)[ FD ]
Line_12 $$ if (pos != -1) -->Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) [ CD ]
Line_4 $$ String line = in.readLine()-->Line_14 $$ line.length()[ FD ]
Line_10 $$ line += "/"-->Line_14 $$ line.length()[ FD ]
Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_15 $$ Object[] arr = (Object[]) obj[ CD ]
Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_16 $$ for (int i = 0; i < arr.length; i++) [ CD ]
Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) [ CD ]
Line_16 $$ for (int i = 0; i < arr.length; i++) -->Line_16 $$ int i = 0[ CD ]
Line_16 $$ for (int i = 0; i < arr.length; i++) -->Line_16 $$ i++[ CD ]
Line_16 $$ int i = 0-->Line_16 $$ i++[ FD ]
Line_16 $$ for (int i = 0; i < arr.length; i++) -->Line_17 $$ values[++maxUsed] = arr[i][ CD ]
Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_20 $$ Class clazz = obj instanceof Class ? (Class) obj : obj.getClass()[ CD ]
Line_13 $$ Object obj = values[Integer.parseInt(line.substring(0, pos).trim())]-->Line_20 $$ obj.getClass()[ FD ]
Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_21 $$ Method[] mthds = clazz.getMethods()[ CD ]
Line_21 $$ Method[] mthds = clazz.getMethods()-->Line_21 $$ clazz.getMethods()[ CD ]
Line_20 $$ Class clazz = obj instanceof Class ? (Class) obj : obj.getClass()-->Line_21 $$ clazz.getMethods()[ FD ]
Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_22 $$ for (int i = 0; i < mthds.length; i++) [ CD ]
Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) -->Line_14 $$ if (obj instanceof Object[] && pos == line.length() - 1) [ CD ]
Line_16 $$ int i = 0-->Line_22 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_22 $$ for (int i = 0; i < mthds.length; i++) -->Line_22 $$ int i = 0[ CD ]
Line_22 $$ for (int i = 0; i < mthds.length; i++) -->Line_22 $$ i++[ CD ]
Line_22 $$ int i = 0-->Line_22 $$ i++[ FD ]
Line_16 $$ int i = 0-->Line_22 $$ i++[ FD ]
Line_22 $$ for (int i = 0; i < mthds.length; i++) -->Line_23 $$ if (mthds[i].getName().startsWith(line.substring(pos + 1))) [ CD ]
Line_23 $$ if (mthds[i].getName().startsWith(line.substring(pos + 1))) -->Line_23 $$ mthds[i].getName().startsWith(line.substring(pos + 1))[ CD ]
Line_4 $$ String line = in.readLine()-->Line_23 $$ line.substring(pos + 1)[ FD ]
Line_10 $$ line += "/"-->Line_23 $$ line.substring(pos + 1)[ FD ]
Line_23 $$ if (mthds[i].getName().startsWith(line.substring(pos + 1))) -->Line_24 $$ values[++maxUsed] = mthds[i][ CD ]
Line_12 $$ if (pos != -1) -->Line_29 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_29 $$ StringTokenizer st = new StringTokenizer(line)-->Line_30 $$ st.nextToken()[ FD ]
Line_12 $$ if (pos != -1) -->Line_31 $$ String mthIdx = st.nextToken()[ CD ]
Line_31 $$ String mthIdx = st.nextToken()-->Line_31 $$ st.nextToken()[ CD ]
Line_29 $$ StringTokenizer st = new StringTokenizer(line)-->Line_31 $$ st.nextToken()[ FD ]
Line_12 $$ if (pos != -1) -->Line_32 $$ Object[] args = new Object[st.countTokens()][ CD ]
Line_29 $$ StringTokenizer st = new StringTokenizer(line)-->Line_32 $$ st.countTokens()[ FD ]
Line_12 $$ if (pos != -1) -->Line_33 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_12 $$ if (pos != -1) -->Line_12 $$ if (pos != -1) [ CD ]
Line_22 $$ int i = 0-->Line_33 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_16 $$ int i = 0-->Line_33 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_33 $$ for (int i = 0; i < args.length; i++) -->Line_33 $$ int i = 0[ CD ]
Line_33 $$ for (int i = 0; i < args.length; i++) -->Line_33 $$ i++[ CD ]
Line_33 $$ int i = 0-->Line_33 $$ i++[ FD ]
Line_22 $$ int i = 0-->Line_33 $$ i++[ FD ]
Line_16 $$ int i = 0-->Line_33 $$ i++[ FD ]
Line_33 $$ for (int i = 0; i < args.length; i++) -->Line_34 $$ args[i] = values[Integer.parseInt(st.nextToken())][ CD ]
Line_29 $$ StringTokenizer st = new StringTokenizer(line)-->Line_34 $$ st.nextToken()[ FD ]
Line_12 $$ if (pos != -1) -->Line_36 $$ if (mthIdx.equals("[")) [ CD ]
Line_31 $$ String mthIdx = st.nextToken()-->Line_36 $$ if (mthIdx.equals("[")) [ FD ]
Line_36 $$ if (mthIdx.equals("[")) -->Line_36 $$ mthIdx.equals("[")[ CD ]
Line_31 $$ String mthIdx = st.nextToken()-->Line_36 $$ mthIdx.equals("[")[ FD ]
Line_36 $$ if (mthIdx.equals("[")) -->Line_37 $$ Object[] result = (Object[]) Array.newInstance((Class) obj, args.length)[ CD ]
Line_36 $$ if (mthIdx.equals("[")) -->Line_38 $$ System.arraycopy(args, 0, result, 0, args.length)[ CD ]
Line_32 $$ Object[] args = new Object[st.countTokens()]-->Line_38 $$ System.arraycopy(args, 0, result, 0, args.length)[ FD ]
Line_37 $$ Object[] result = (Object[]) Array.newInstance((Class) obj, args.length)-->Line_38 $$ System.arraycopy(args, 0, result, 0, args.length)[ FD ]
Line_36 $$ if (mthIdx.equals("[")) -->Line_39 $$ values[++maxUsed] = result[ CD ]
Line_37 $$ Object[] result = (Object[]) Array.newInstance((Class) obj, args.length)-->Line_39 $$ values[++maxUsed] = result[ FD ]
Line_36 $$ if (mthIdx.equals("[")) -->Line_41 $$ Method mth = (Method) values[Integer.parseInt(mthIdx)][ CD ]
Line_31 $$ String mthIdx = st.nextToken()-->Line_41 $$ Integer.parseInt(mthIdx)[ FD ]
Line_36 $$ if (mthIdx.equals("[")) -->Line_42 $$ values[++maxUsed] = mth.invoke(obj, args)[ CD ]
Line_42 $$ values[++maxUsed] = mth.invoke(obj, args)-->Line_42 $$ mth.invoke(obj, args)[ CD ]
Line_41 $$ Method mth = (Method) values[Integer.parseInt(mthIdx)]-->Line_42 $$ mth.invoke(obj, args)[ FD ]
Line_13 $$ Object obj = values[Integer.parseInt(line.substring(0, pos).trim())]-->Line_42 $$ mth.invoke(obj, args)[ FD ]
Line_32 $$ Object[] args = new Object[st.countTokens()]-->Line_42 $$ mth.invoke(obj, args)[ FD ]
Line_16 $$ int i = 0-->Line_16 $$ for (int i = 0; i < arr.length; i++) [ FD ]
Line_16 $$ int i = 0-->Line_16 $$ for (int i = 0; i < arr.length; i++) [ FD ]
Line_16 $$ int i = 0-->Line_16 $$ i++[ FD ]
Line_22 $$ int i = 0-->Line_22 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_22 $$ int i = 0-->Line_22 $$ for (int i = 0; i < mthds.length; i++) [ FD ]
Line_22 $$ int i = 0-->Line_22 $$ i++[ FD ]
Line_33 $$ int i = 0-->Line_33 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_33 $$ int i = 0-->Line_33 $$ for (int i = 0; i < args.length; i++) [ FD ]
Line_33 $$ int i = 0-->Line_33 $$ i++[ FD ]
