Line_0 $$ Entry-->Line_2 $$ //9
public class func [ CD ]
Line_2 $$ //9
public class func -->Line_3 $$ public void decode() [ CD ]
Line_3 $$ public void decode() -->Line_4 $$ String rawCommitter = n.substring("committer ".length())[ CD ]
Line_4 $$ String rawCommitter = n.substring("committer ".length())-->Line_4 $$ n.substring("committer ".length())[ CD ]
Line_3 $$ public void decode() -->Line_5 $$ br.readLine()[ CD ]
Line_3 $$ public void decode() -->Line_6 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) [ CD ]
Line_6 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) -->Line_7 $$ Charset.forName(n.substring("encoding ".length()))[ CD ]
Line_6 $$ if (n != null && n.startsWith("encoding"))
    encoding = Charset.forName(n.substring("encoding ".length()));
else if (n == null || !n.equals("")) -->Line_9 $$ if (n == null || !n.equals("")) [ CD ]
Line_9 $$ !n.equals("")-->Line_9 $$ n.equals("")[ CD ]
Line_3 $$ public void decode() -->Line_13 $$ byte[] readBuf = new byte[br.available()][ CD ]
Line_3 $$ public void decode() -->Line_14 $$ br.read(readBuf)[ CD ]
Line_13 $$ byte[] readBuf = new byte[br.available()]-->Line_14 $$ br.read(readBuf)[ FD ]
Line_3 $$ public void decode() -->Line_15 $$ if (encoding != null) [ CD ]
Line_4 $$ String rawCommitter = n.substring("committer ".length())-->Line_18 $$ rawCommitter.getBytes()[ FD ]
Line_4 $$ String rawCommitter = n.substring("committer ".length())-->Line_23 $$ rawCommitter.getBytes()[ FD ]
