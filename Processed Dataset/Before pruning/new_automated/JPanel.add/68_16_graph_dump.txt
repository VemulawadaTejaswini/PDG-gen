Line_0 $$ Entry-->Line_2 $$ //68
public class func [ CD ]
Line_2 $$ //68
public class func -->Line_3 $$ public void createKeySigPanel(PGPPublicKey key) [ CD ]
Line_3 $$ public void createKeySigPanel(PGPPublicKey key) -->Line_4 $$ Iterator<?> iter = key.getSignatures()[ CD ]
Line_4 $$ Iterator<?> iter = key.getSignatures()-->Line_4 $$ key.getSignatures()[ CD ]
Line_3 $$ public void createKeySigPanel(PGPPublicKey key) -->Line_5 $$ while (iter.hasNext()) [ CD ]
Line_3 $$ public void createKeySigPanel(PGPPublicKey key) -->Line_3 $$ public void createKeySigPanel(PGPPublicKey key) [ CD ]
Line_5 $$ while (iter.hasNext()) -->Line_5 $$ iter.hasNext()[ CD ]
Line_4 $$ Iterator<?> iter = key.getSignatures()-->Line_5 $$ iter.hasNext()[ FD ]
Line_5 $$ while (iter.hasNext()) -->Line_6 $$ PGPSignature sig = (PGPSignature) iter.next()[ CD ]
Line_4 $$ Iterator<?> iter = key.getSignatures()-->Line_6 $$ iter.next()[ FD ]
Line_5 $$ while (iter.hasNext()) -->Line_7 $$ String uid = "0x" + Long.toHexString(sig.getKeyID()).substring(8).toUpperCase()[ CD ]
Line_6 $$ PGPSignature sig = (PGPSignature) iter.next()-->Line_7 $$ sig.getKeyID()[ FD ]
Line_5 $$ while (iter.hasNext()) -->Line_8 $$ p.add(new JLabel(uid))[ CD ]
Line_6 $$ PGPSignature sig = (PGPSignature) iter.next()-->Line_7 $$ sig.getKeyID()[ FD ]
