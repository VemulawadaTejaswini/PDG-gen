Line_0 $$ Entry-->Line_2 $$ //10
public class func [ CD ]
Line_2 $$ //10
public class func -->Line_3 $$ public void awaitReadCloses() [ CD ]
Line_3 $$ public void awaitReadCloses() -->Line_4 $$ final Pipe pipe = new Pipe(100)[ CD ]
Line_3 $$ public void awaitReadCloses() -->Line_5 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))[ CD ]
Line_3 $$ public void awaitReadCloses() -->Line_6 $$ awaitThread.start()[ CD ]
Line_5 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))-->Line_6 $$ awaitThread.start()[ FD ]
Line_3 $$ public void awaitReadCloses() -->Line_7 $$ awaitThread.join(200)[ CD ]
Line_5 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))-->Line_7 $$ awaitThread.join(200)[ FD ]
Line_3 $$ public void awaitReadCloses() -->Line_8 $$ assertTrue(awaitThread.isAlive())[ CD ]
Line_5 $$ final Thread awaitThread = new Thread(new AwaitTask(pipe))-->Line_8 $$ awaitThread.isAlive()[ FD ]
Line_3 $$ public void awaitReadCloses() -->Line_9 $$ close(pipe.getIn())[ CD ]
Line_4 $$ final Pipe pipe = new Pipe(100)-->Line_9 $$ pipe.getIn()[ FD ]
