Line_0 $$ Entry-->Line_2 $$ //6
public class func [ CD ]
Line_2 $$ //6
public class func -->Line_3 $$ public void readBlockingToEmptyBuffer() [ CD ]
Line_3 $$ public void readBlockingToEmptyBuffer() -->Line_4 $$ connectedChannelMock.setReadData("can't read this")[ CD ]
Line_3 $$ public void readBlockingToEmptyBuffer() -->Line_5 $$ ReadBlocking readRunnable = new ReadBlocking(connectedChannelMock, Buffers.EMPTY_BYTE_BUFFER)[ CD ]
Line_3 $$ public void readBlockingToEmptyBuffer() -->Line_6 $$ Thread readThread = new Thread(readRunnable)[ CD ]
Line_3 $$ public void readBlockingToEmptyBuffer() -->Line_7 $$ readThread.start()[ CD ]
Line_6 $$ Thread readThread = new Thread(readRunnable)-->Line_7 $$ readThread.start()[ FD ]
Line_3 $$ public void readBlockingToEmptyBuffer() -->Line_8 $$ readThread.join()[ CD ]
Line_6 $$ Thread readThread = new Thread(readRunnable)-->Line_8 $$ readThread.join()[ FD ]
Line_3 $$ public void readBlockingToEmptyBuffer() -->Line_9 $$ assertFalse(readThread.isAlive())[ CD ]
Line_6 $$ Thread readThread = new Thread(readRunnable)-->Line_9 $$ readThread.isAlive()[ FD ]
Line_3 $$ public void readBlockingToEmptyBuffer() -->Line_10 $$ assertEquals(0, readRunnable.getReadResult())[ CD ]
Line_5 $$ ReadBlocking readRunnable = new ReadBlocking(connectedChannelMock, Buffers.EMPTY_BYTE_BUFFER)-->Line_10 $$ readRunnable.getReadResult()[ FD ]
