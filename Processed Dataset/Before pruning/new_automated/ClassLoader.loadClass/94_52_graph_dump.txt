Line_0 $$ Entry-->Line_2 $$ //94
public class func [ CD ]
Line_2 $$ //94
public class func -->Line_3 $$ public void test_find_file_in_jar() [ CD ]
Line_3 $$ public void test_find_file_in_jar() -->Line_4 $$ URL url = getClass().getResource("/org/nutz/lang/one.jar")[ CD ]
Line_4 $$ URL url = getClass().getResource("/org/nutz/lang/one.jar")-->Line_4 $$ getClass().getResource("/org/nutz/lang/one.jar")[ CD ]
Line_3 $$ public void test_find_file_in_jar() -->Line_5 $$ assertNotNull(url)[ CD ]
Line_4 $$ URL url = getClass().getResource("/org/nutz/lang/one.jar")-->Line_5 $$ assertNotNull(url)[ FD ]
Line_3 $$ public void test_find_file_in_jar() -->Line_6 $$ ClassLoader classLoader = URLClassLoader.newInstance(new URL[] [ CD ]
Line_6 $$ ClassLoader classLoader = URLClassLoader.newInstance(new URL[] -->Line_6 $$ URLClassLoader.newInstance(new URL[] [ CD ]
Line_3 $$ public void test_find_file_in_jar() -->Line_7 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))[ CD ]
Line_7 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))-->Line_7 $$ Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))[ CD ]
Line_6 $$ ClassLoader classLoader = URLClassLoader.newInstance(new URL[] -->Line_8 $$ classLoader.loadClass("org.nutz.lang.XXXX")[ FD ]
Line_3 $$ public void test_find_file_in_jar() -->Line_9 $$ assertNotNull(is)[ CD ]
Line_7 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))-->Line_9 $$ assertNotNull(is)[ FD ]
Line_3 $$ public void test_find_file_in_jar() -->Line_10 $$ assertEquals(is.available(), 133)[ CD ]
Line_7 $$ InputStream is = Files.findFileAsStream("org/nutz/plugin/Plugin.w", classLoader.loadClass("org.nutz.lang.XXXX"))-->Line_10 $$ is.available()[ FD ]
