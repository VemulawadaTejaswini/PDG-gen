Line_0 $$ Entry-->Line_2 $$ //167
public class func [ CD ]
Line_2 $$ //167
public class func -->Line_3 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) [ CD ]
Line_3 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_4 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())[ CD ]
Line_4 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())-->Line_4 $$ classLoader.loadClass(classToGetInstanceOf.getName())[ CD ]
Line_3 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_5 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ CD ]
Line_5 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)-->Line_5 $$ Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ CD ]
Line_4 $$ Class<?> class1 = classLoader.loadClass(classToGetInstanceOf.getName())-->Line_5 $$ Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)[ FD ]
Line_3 $$ public void newInstanceInClassLoader(Class<E> classToReturn, ClassLoader classLoader, Class<? extends E> classToGetInstanceOf, Class<?>[] constructorArgTypes, Object... constructorArgs) -->Line_6 $$ return CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance);[ CD ]
Line_6 $$ return CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance);-->Line_6 $$ CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance)[ CD ]
Line_5 $$ Object newInstance = Whitebox.invokeConstructor(class1, constructorArgTypes, constructorArgs)-->Line_6 $$ CrossClassLoaderTestUtils.moveToCurrentClassLoader(classToReturn, newInstance)[ FD ]
