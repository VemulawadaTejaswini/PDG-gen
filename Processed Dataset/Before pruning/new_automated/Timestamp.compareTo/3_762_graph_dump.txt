Line_0 $$ Entry-->Line_2 $$ //3
public class func [ CD ]
Line_2 $$ //3
public class func -->Line_3 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) [ CD ]
Line_3 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_4 $$ if (maxEndDate == null) [ CD ]
Line_3 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_7 $$ if (childEndDate != null && maxEndDate.compareTo(childEndDate) < 0) [ CD ]
Line_3 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_10 $$ if (childProductionRunId != null) [ CD ]
Line_10 $$ if (childProductionRunId != null) -->Line_11 $$ childProductionRuns.add(childProductionRunId)[ CD ]
Line_3 $$ public void createManufacturingOrder(String facilityId, Date date, String workEffortName, String description, String routingId, String orderId, String orderItemSeqId, String shipGroupSeqId, String shipmentId, boolean useSubstitute, boolean ignoreSupplierProducts) -->Line_13 $$ Timestamp startDate = UtilDateTime.toTimestamp(UtilDateTime.toDateTimeString(date))[ CD ]
Line_13 $$ Timestamp startDate = UtilDateTime.toTimestamp(UtilDateTime.toDateTimeString(date))-->Line_13 $$ UtilDateTime.toTimestamp(UtilDateTime.toDateTimeString(date))[ CD ]
