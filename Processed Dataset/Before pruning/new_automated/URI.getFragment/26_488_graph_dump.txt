Line_0 $$ Entry-->Line_2 $$ //26
public class func [ CD ]
Line_2 $$ //26
public class func -->Line_3 $$ public void doGetScriptSource(URI scriptUri) [ CD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)[ CD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_4 $$ remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)[ CD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_5 $$ String replacementScheme = SecurityUtil.isTransportSecure(remoteUri.getScheme()) ? "https" : "http"[ CD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_5 $$ remoteUri.getScheme()[ FD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ CD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())[ FD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_6 $$ remoteUri.getAuthority()[ FD ]
Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_6 $$ remoteUri.getAuthority()[ FD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_6 $$ remoteUri.getPath()[ FD ]
Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_6 $$ remoteUri.getPath()[ FD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_6 $$ remoteUri.getQuery()[ FD ]
Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_6 $$ remoteUri.getQuery()[ FD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_6 $$ remoteUri.getFragment()[ FD ]
Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_6 $$ remoteUri.getFragment()[ FD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_7 $$ LOG.error("Failed to copy the RHQ server download URI: " + remoteUri + " to the " + replacementScheme + " scheme.")[ CD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_8 $$ URL downloadUrl = remoteUri.toURL()[ CD ]
Line_8 $$ URL downloadUrl = remoteUri.toURL()-->Line_8 $$ remoteUri.toURL()[ CD ]
Line_4 $$ URI remoteUri = remoteClient.getRemoteURI().resolve(URL_PATH_PREFIX + path)-->Line_8 $$ remoteUri.toURL()[ FD ]
Line_6 $$ remoteUri = new URI(replacementScheme, remoteUri.getAuthority(), remoteUri.getPath(), remoteUri.getQuery(), remoteUri.getFragment())-->Line_8 $$ remoteUri.toURL()[ FD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_9 $$ return new InputStreamReader(downloadUrl.openStream());[ CD ]
Line_8 $$ URL downloadUrl = remoteUri.toURL()-->Line_9 $$ downloadUrl.openStream()[ FD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_10 $$ LOG.debug("Failed to download the script from the RHQ server using URL: " + remoteUri, e)[ CD ]
Line_3 $$ public void doGetScriptSource(URI scriptUri) -->Line_11 $$ LOG.debug("Failed to download the script from the RHQ server using URL: " + remoteUri, e)[ CD ]
