Line_0 $$ Entry-->Line_2 $$ //5
public class func [ CD ]
Line_2 $$ //5
public class func -->Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) [ CD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_4 $$ listener.onError(new RedirectException(upgradeResponse.getStatus(), LocalizationMessages.HANDSHAKE_HTTP_REDIRECTION_NOT_ENABLED(upgradeResponse.getStatus())))[ CD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_6 $$ final List<String> locationHeader = upgradeResponse.getHeaders().get(UpgradeResponse.LOCATION)[ CD ]
Line_6 $$ final List<String> locationHeader = upgradeResponse.getHeaders().get(UpgradeResponse.LOCATION)-->Line_6 $$ upgradeResponse.getHeaders().get(UpgradeResponse.LOCATION)[ CD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_7 $$ if (locationHeader != null) [ CD ]
Line_6 $$ final List<String> locationHeader = upgradeResponse.getHeaders().get(UpgradeResponse.LOCATION)-->Line_7 $$ if (locationHeader != null) [ FD ]
Line_7 $$ if (locationHeader != null) -->Line_8 $$ Utils.getHeaderFromList(locationHeader)[ CD ]
Line_6 $$ final List<String> locationHeader = upgradeResponse.getHeaders().get(UpgradeResponse.LOCATION)-->Line_8 $$ Utils.getHeaderFromList(locationHeader)[ FD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_10 $$ if (locationString == null || locationString.equals("")) [ CD ]
Line_10 $$ if (locationString == null || locationString.equals("")) -->Line_11 $$ listener.onError(new RedirectException(upgradeResponse.getStatus(), LocalizationMessages.HANDSHAKE_HTTP_REDIRECTION_NEW_LOCATION_MISSING()))[ CD ]
Line_10 $$ if (locationString == null || locationString.equals("")) -->Line_14 $$ return UPGRADE_INFO_FAILED;[ CD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_17 $$ String scheme = location.getScheme()[ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_17 $$ location.getScheme()[ CD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_18 $$ if ("http".equalsIgnoreCase(scheme)) [ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_18 $$ if ("http".equalsIgnoreCase(scheme)) [ FD ]
Line_18 $$ if ("http".equalsIgnoreCase(scheme)) -->Line_18 $$ "http".equalsIgnoreCase(scheme)[ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_18 $$ "http".equalsIgnoreCase(scheme)[ FD ]
Line_18 $$ if ("http".equalsIgnoreCase(scheme)) -->Line_19 $$ scheme = "ws"[ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_19 $$ scheme = "ws"[ FD ]
Line_19 $$ scheme = "ws"-->Line_19 $$ scheme = "ws"[ FD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_21 $$ if ("https".equalsIgnoreCase(scheme)) [ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_21 $$ if ("https".equalsIgnoreCase(scheme)) [ FD ]
Line_19 $$ scheme = "ws"-->Line_21 $$ if ("https".equalsIgnoreCase(scheme)) [ FD ]
Line_21 $$ if ("https".equalsIgnoreCase(scheme)) -->Line_21 $$ "https".equalsIgnoreCase(scheme)[ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_21 $$ "https".equalsIgnoreCase(scheme)[ FD ]
Line_19 $$ scheme = "ws"-->Line_21 $$ "https".equalsIgnoreCase(scheme)[ FD ]
Line_21 $$ if ("https".equalsIgnoreCase(scheme)) -->Line_22 $$ scheme = "wss"[ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_22 $$ scheme = "wss"[ FD ]
Line_19 $$ scheme = "ws"-->Line_22 $$ scheme = "wss"[ FD ]
Line_22 $$ scheme = "wss"-->Line_22 $$ scheme = "wss"[ FD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_24 $$ int port = Utils.getWsPort(location, scheme)[ CD ]
Line_24 $$ int port = Utils.getWsPort(location, scheme)-->Line_24 $$ Utils.getWsPort(location, scheme)[ CD ]
Line_17 $$ String scheme = location.getScheme()-->Line_24 $$ Utils.getWsPort(location, scheme)[ FD ]
Line_19 $$ scheme = "ws"-->Line_24 $$ Utils.getWsPort(location, scheme)[ FD ]
Line_22 $$ scheme = "wss"-->Line_24 $$ Utils.getWsPort(location, scheme)[ FD ]
Line_3 $$ public void handleRedirect(UpgradeResponse upgradeResponse) -->Line_27 $$ if (!location.isAbsolute()) [ CD ]
Line_27 $$ if (!location.isAbsolute()) -->Line_27 $$ !location.isAbsolute()[ CD ]
Line_27 $$ !location.isAbsolute()-->Line_27 $$ location.isAbsolute()[ CD ]
Line_27 $$ if (!location.isAbsolute()) -->Line_29 $$ URI baseUri = redirectLocation == null ? connectToServerUriParam : redirectLocation[ CD ]
Line_27 $$ if (!location.isAbsolute()) -->Line_30 $$ baseUri.resolve(location.normalize())[ CD ]
Line_29 $$ URI baseUri = redirectLocation == null ? connectToServerUriParam : redirectLocation-->Line_30 $$ baseUri.resolve(location.normalize())[ FD ]
Line_27 $$ if (!location.isAbsolute()) -->Line_32 $$ if (LOGGER.isLoggable(Level.FINEST)) [ CD ]
Line_32 $$ if (LOGGER.isLoggable(Level.FINEST)) -->Line_32 $$ LOGGER.isLoggable(Level.FINEST)[ CD ]
Line_32 $$ if (LOGGER.isLoggable(Level.FINEST)) -->Line_33 $$ LOGGER.finest("HTTP Redirect - Base URI for resolving target location: " + baseUri)[ CD ]
Line_32 $$ if (LOGGER.isLoggable(Level.FINEST)) -->Line_34 $$ LOGGER.finest("HTTP Redirect - Location URI header: " + locationString)[ CD ]
Line_32 $$ if (LOGGER.isLoggable(Level.FINEST)) -->Line_35 $$ LOGGER.finest("HTTP Redirect - Normalized and resolved Location URI header " + "against base URI: " + location)[ CD ]
