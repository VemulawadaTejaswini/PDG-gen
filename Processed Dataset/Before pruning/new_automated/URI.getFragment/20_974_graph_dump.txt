Line_0 $$ Entry-->Line_2 $$ //20
public class func [ CD ]
Line_2 $$ //20
public class func -->Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) [ CD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_4 $$ if (locationToMatch == null || locationToMatch.isOpaque()) [ CD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_7 $$ locationToMatch = locationToMatch.normalize()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_7 $$ locationToMatch = locationToMatch.normalize()[ FD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_7 $$ locationToMatch.normalize()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_7 $$ locationToMatch.normalize()[ FD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_8 $$ final String scheme = locationToMatch.getScheme()[ CD ]
Line_8 $$ final String scheme = locationToMatch.getScheme()-->Line_8 $$ locationToMatch.getScheme()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_8 $$ locationToMatch.getScheme()[ FD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_9 $$ final String userinfo = locationToMatch.getUserInfo()[ CD ]
Line_9 $$ final String userinfo = locationToMatch.getUserInfo()-->Line_9 $$ locationToMatch.getUserInfo()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_9 $$ locationToMatch.getUserInfo()[ FD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_10 $$ final String host = locationToMatch.getHost()[ CD ]
Line_10 $$ final String host = locationToMatch.getHost()-->Line_10 $$ locationToMatch.getHost()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_10 $$ locationToMatch.getHost()[ FD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_11 $$ final int port = locationToMatch.getPort()[ CD ]
Line_11 $$ final int port = locationToMatch.getPort()-->Line_11 $$ locationToMatch.getPort()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_11 $$ locationToMatch.getPort()[ FD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_12 $$ final URI path = URI.create(locationToMatch.getPath())[ CD ]
Line_12 $$ final URI path = URI.create(locationToMatch.getPath())-->Line_12 $$ URI.create(locationToMatch.getPath())[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_12 $$ locationToMatch.getPath()[ FD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_13 $$ final String query = locationToMatch.getQuery()[ CD ]
Line_13 $$ final String query = locationToMatch.getQuery()-->Line_13 $$ locationToMatch.getQuery()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_13 $$ locationToMatch.getQuery()[ FD ]
Line_3 $$ public void getMatchingPartitions(String graphId, URI locationToMatch) -->Line_14 $$ final String fragment = locationToMatch.getFragment()[ CD ]
Line_14 $$ final String fragment = locationToMatch.getFragment()-->Line_14 $$ locationToMatch.getFragment()[ CD ]
Line_7 $$ locationToMatch = locationToMatch.normalize()-->Line_14 $$ locationToMatch.getFragment()[ FD ]
