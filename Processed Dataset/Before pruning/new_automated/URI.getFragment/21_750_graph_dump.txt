Line_0 $$ Entry-->Line_2 $$ //21
public class func [ CD ]
Line_2 $$ //21
public class func -->Line_3 $$ public void loadFromUri(URI uri, URI base, Object validator) [ CD ]
Line_3 $$ public void loadFromUri(URI uri, URI base, Object validator) -->Line_4 $$ if (base != null) [ CD ]
Line_4 $$ if (base != null) -->Line_5 $$ base.resolve(uri)[ CD ]
Line_3 $$ public void loadFromUri(URI uri, URI base, Object validator) -->Line_7 $$ if (!fullUri.getSchemeSpecificPart().endsWith(SUFFIX)) [ CD ]
Line_7 $$ if (!fullUri.getSchemeSpecificPart().endsWith(SUFFIX)) -->Line_7 $$ !fullUri.getSchemeSpecificPart().endsWith(SUFFIX)[ CD ]
Line_7 $$ !fullUri.getSchemeSpecificPart().endsWith(SUFFIX)-->Line_7 $$ fullUri.getSchemeSpecificPart().endsWith(SUFFIX)[ CD ]
Line_3 $$ public void loadFromUri(URI uri, URI base, Object validator) -->Line_12 $$ Reader sourceReader = scriptSourceProvider.getScriptSource(fullUri)[ CD ]
Line_12 $$ Reader sourceReader = scriptSourceProvider.getScriptSource(fullUri)-->Line_12 $$ scriptSourceProvider.getScriptSource(fullUri)[ CD ]
Line_3 $$ public void loadFromUri(URI uri, URI base, Object validator) -->Line_13 $$ if (sourceReader == null) [ CD ]
Line_12 $$ Reader sourceReader = scriptSourceProvider.getScriptSource(fullUri)-->Line_13 $$ if (sourceReader == null) [ FD ]
Line_13 $$ if (sourceReader == null) -->Line_14 $$ return null;[ CD ]
Line_13 $$ if (sourceReader == null) -->Line_16 $$ return new ModuleSource(sourceReader, null, uri, base, validator);[ CD ]
