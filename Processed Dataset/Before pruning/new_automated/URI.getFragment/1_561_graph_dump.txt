Line_0 $$ Entry-->Line_2 $$ //1
public class func [ CD ]
Line_2 $$ //1
public class func -->Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) [ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_4 $$ if (!uri.isAbsolute())
    throw new IllegalArgumentException("URI is not absolute");[ CD ]
Line_4 $$ if (!uri.isAbsolute())
    throw new IllegalArgumentException("URI is not absolute");-->Line_4 $$ !uri.isAbsolute()[ CD ]
Line_4 $$ !uri.isAbsolute()-->Line_4 $$ uri.isAbsolute()[ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_6 $$ if (uri.isOpaque())
    throw new IllegalArgumentException("URI is not hierarchical");[ CD ]
Line_6 $$ if (uri.isOpaque())
    throw new IllegalArgumentException("URI is not hierarchical");-->Line_6 $$ uri.isOpaque()[ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_8 $$ String scheme = uri.getScheme()[ CD ]
Line_8 $$ String scheme = uri.getScheme()-->Line_8 $$ uri.getScheme()[ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_9 $$ if ((scheme == null) || !scheme.equalsIgnoreCase("file"))
    throw new IllegalArgumentException("URI scheme is not \"file\"");[ CD ]
Line_9 $$ !scheme.equalsIgnoreCase("file")-->Line_9 $$ scheme.equalsIgnoreCase("file")[ CD ]
Line_8 $$ String scheme = uri.getScheme()-->Line_9 $$ scheme.equalsIgnoreCase("file")[ FD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_11 $$ if (uri.getFragment() != null)
    throw new IllegalArgumentException("URI has a fragment component");[ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_13 $$ if (uri.getQuery() != null)
    throw new IllegalArgumentException("URI has a query component");[ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_15 $$ String path = uri.getPath()[ CD ]
Line_15 $$ String path = uri.getPath()-->Line_15 $$ uri.getPath()[ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_16 $$ if (path.equals(""))
    throw new IllegalArgumentException("URI path component is empty");[ CD ]
Line_15 $$ String path = uri.getPath()-->Line_16 $$ if (path.equals(""))
    throw new IllegalArgumentException("URI path component is empty");[ FD ]
Line_16 $$ if (path.equals(""))
    throw new IllegalArgumentException("URI path component is empty");-->Line_16 $$ path.equals("")[ CD ]
Line_15 $$ String path = uri.getPath()-->Line_16 $$ path.equals("")[ FD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_18 $$ String auth = uri.getAuthority()[ CD ]
Line_18 $$ String auth = uri.getAuthority()-->Line_18 $$ uri.getAuthority()[ CD ]
Line_3 $$ public void fromUri(WindowsFileSystem fs, URI uri) -->Line_19 $$ if (auth != null && !auth.equals("")) [ CD ]
Line_19 $$ !auth.equals("")-->Line_19 $$ auth.equals("")[ CD ]
Line_18 $$ String auth = uri.getAuthority()-->Line_19 $$ auth.equals("")[ FD ]
Line_19 $$ if (auth != null && !auth.equals("")) -->Line_20 $$ String host = uri.getHost()[ CD ]
Line_20 $$ String host = uri.getHost()-->Line_20 $$ uri.getHost()[ CD ]
Line_19 $$ if (auth != null && !auth.equals("")) -->Line_21 $$ if (host == null)
    throw new IllegalArgumentException("URI authority component has undefined host");[ CD ]
Line_20 $$ String host = uri.getHost()-->Line_21 $$ if (host == null)
    throw new IllegalArgumentException("URI authority component has undefined host");[ FD ]
Line_19 $$ if (auth != null && !auth.equals("")) -->Line_23 $$ if (uri.getUserInfo() != null)
    throw new IllegalArgumentException("URI authority component has user-info");[ CD ]
Line_19 $$ if (auth != null && !auth.equals("")) -->Line_25 $$ if (uri.getPort() != -1)
    throw new IllegalArgumentException("URI authority component has port number");[ CD ]
Line_19 $$ if (auth != null && !auth.equals("")) -->Line_33 $$ // 4. Append .ivp6-literal.net
if (host.startsWith("[")) [ CD ]
Line_20 $$ String host = uri.getHost()-->Line_33 $$ // 4. Append .ivp6-literal.net
if (host.startsWith("[")) [ FD ]
Line_33 $$ // 4. Append .ivp6-literal.net
if (host.startsWith("[")) -->Line_33 $$ host.startsWith("[")[ CD ]
Line_20 $$ String host = uri.getHost()-->Line_33 $$ host.startsWith("[")[ FD ]
Line_33 $$ // 4. Append .ivp6-literal.net
if (host.startsWith("[")) -->Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')[ CD ]
Line_20 $$ String host = uri.getHost()-->Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')[ FD ]
Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')-->Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')[ FD ]
Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')-->Line_34 $$ host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')[ CD ]
Line_20 $$ String host = uri.getHost()-->Line_34 $$ host.substring(1, host.length() - 1)[ FD ]
Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')-->Line_34 $$ host.substring(1, host.length() - 1)[ FD ]
Line_20 $$ String host = uri.getHost()-->Line_34 $$ host.length()[ FD ]
Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')-->Line_34 $$ host.length()[ FD ]
Line_33 $$ // 4. Append .ivp6-literal.net
if (host.startsWith("[")) -->Line_37 $$ host += IPV6_LITERAL_SUFFIX[ CD ]
Line_20 $$ String host = uri.getHost()-->Line_37 $$ host += IPV6_LITERAL_SUFFIX[ FD ]
Line_34 $$ host = host.substring(1, host.length() - 1).replace(':', '-').replace('%', 's')-->Line_37 $$ host += IPV6_LITERAL_SUFFIX[ FD ]
Line_37 $$ host += IPV6_LITERAL_SUFFIX-->Line_37 $$ host += IPV6_LITERAL_SUFFIX[ FD ]
Line_19 $$ if (auth != null && !auth.equals("")) -->Line_41 $$ path = "\\\\" + host + path[ CD ]
Line_15 $$ String path = uri.getPath()-->Line_41 $$ path = "\\\\" + host + path[ FD ]
Line_41 $$ path = "\\\\" + host + path-->Line_41 $$ path = "\\\\" + host + path[ FD ]
Line_15 $$ String path = uri.getPath()-->Line_41 $$ path = "\\\\" + host + path[ FD ]
Line_41 $$ path = "\\\\" + host + path-->Line_41 $$ path = "\\\\" + host + path[ FD ]
Line_19 $$ if (auth != null && !auth.equals("")) -->Line_43 $$ if ((path.length() > 2) && (path.charAt(2) == ':')) [ CD ]
Line_15 $$ String path = uri.getPath()-->Line_43 $$ path.length()[ FD ]
Line_41 $$ path = "\\\\" + host + path-->Line_43 $$ path.length()[ FD ]
Line_15 $$ String path = uri.getPath()-->Line_43 $$ path.charAt(2)[ FD ]
Line_41 $$ path = "\\\\" + host + path-->Line_43 $$ path.charAt(2)[ FD ]
Line_43 $$ if ((path.length() > 2) && (path.charAt(2) == ':')) -->Line_45 $$ path = path.substring(1)[ CD ]
Line_15 $$ String path = uri.getPath()-->Line_45 $$ path = path.substring(1)[ FD ]
Line_41 $$ path = "\\\\" + host + path-->Line_45 $$ path = path.substring(1)[ FD ]
Line_45 $$ path = path.substring(1)-->Line_45 $$ path = path.substring(1)[ FD ]
Line_45 $$ path = path.substring(1)-->Line_45 $$ path.substring(1)[ CD ]
Line_15 $$ String path = uri.getPath()-->Line_45 $$ path.substring(1)[ FD ]
Line_41 $$ path = "\\\\" + host + path-->Line_45 $$ path.substring(1)[ FD ]
Line_45 $$ path = path.substring(1)-->Line_45 $$ path.substring(1)[ FD ]
