Line_0 $$ Entry-->Line_2 $$ //14
public class func [ CD ]
Line_2 $$ //14
public class func -->Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() [ CD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")[ CD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_6 $$ assertEquals("wrong scheme", "ht12-3+tp", uri.getScheme())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_6 $$ uri.getScheme()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_7 $$ assertNull("wrong authority", uri.getUserInfo())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_7 $$ uri.getUserInfo()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_8 $$ assertNull("wrong userinfo", uri.getUserInfo())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_8 $$ uri.getUserInfo()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_9 $$ assertNull("wrong hostname", uri.getHost())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_9 $$ uri.getHost()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_10 $$ assertEquals("wrong port number", -1, uri.getPort())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_10 $$ uri.getPort()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_11 $$ assertEquals("wrong path", "/p#a%E2%82%ACth", uri.getPath())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_11 $$ uri.getPath()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_12 $$ assertEquals("wrong query", "q^u%25ery", uri.getQuery())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_12 $$ uri.getQuery()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_13 $$ assertEquals("wrong fragment", "f/rßag", uri.getFragment())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_13 $$ uri.getFragment()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_14 $$ assertEquals("wrong SchemeSpecificPart", "///p#a%E2%82%ACth?q^u%25ery", uri.getSchemeSpecificPart())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_15 $$ uri.getSchemeSpecificPart()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_16 $$ assertEquals("wrong RawSchemeSpecificPart", "///p%23a%25E2%2582%25ACth?q%5Eu%2525ery", uri.getRawSchemeSpecificPart())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_17 $$ uri.getRawSchemeSpecificPart()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_19 $$ assertEquals("incorrect toString()", "ht12-3+tp:///p%23a%25E2%2582%25ACth?q%5Eu%2525ery#f/rßag", uri.toString())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_22 $$ uri.toString()[ FD ]
Line_3 $$ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_StringLjava_lang_String() -->Line_23 $$ assertEquals("incorrect toASCIIString()", "ht12-3+tp:///p%23a%25E2%2582%25ACth?q%5Eu%2525ery#f/r%C3%9Fag", uri.toASCIIString())[ CD ]
Line_4 $$ URI uri = new URI("ht12-3+tp", "", "/p#a%E2%82%ACth", "q^u%25ery", "f/rßag")-->Line_25 $$ uri.toASCIIString()[ FD ]
