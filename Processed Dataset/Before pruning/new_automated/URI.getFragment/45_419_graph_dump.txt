Line_0 $$ Entry-->Line_2 $$ //45
public class func [ CD ]
Line_2 $$ //45
public class func -->Line_3 $$ public void getSegment(final URI uri, final int index) [ CD ]
Line_3 $$ public void getSegment(final URI uri, final int index) -->Line_4 $$ final Iterable<String> parts = Splitter.on('/').omitEmptyStrings().trimResults().split(path)[ CD ]
Line_4 $$ final Iterable<String> parts = Splitter.on('/').omitEmptyStrings().trimResults().split(path)-->Line_4 $$ Splitter.on('/').omitEmptyStrings().trimResults().split(path)[ CD ]
Line_3 $$ public void getSegment(final URI uri, final int index) -->Line_5 $$ final int size = Iterables.size(parts)[ CD ]
Line_5 $$ final int size = Iterables.size(parts)-->Line_5 $$ Iterables.size(parts)[ CD ]
Line_4 $$ final Iterable<String> parts = Splitter.on('/').omitEmptyStrings().trimResults().split(path)-->Line_5 $$ Iterables.size(parts)[ FD ]
Line_3 $$ public void getSegment(final URI uri, final int index) -->Line_6 $$ if (actualIndex < 0 || actualIndex > size - 1) [ CD ]
Line_6 $$ if (actualIndex < 0 || actualIndex > size - 1) -->Line_7 $$ return Optional.absent();[ CD ]
Line_7 $$ return Optional.absent();-->Line_7 $$ Optional.absent()[ CD ]
Line_3 $$ public void getSegment(final URI uri, final int index) -->Line_9 $$ return Optional.of(Iterables.get(parts, actualIndex) + (uri.getFragment() == null ? "" : "#" + uri.getRawFragment()));[ CD ]
Line_9 $$ return Optional.of(Iterables.get(parts, actualIndex) + (uri.getFragment() == null ? "" : "#" + uri.getRawFragment()));-->Line_9 $$ Optional.of(Iterables.get(parts, actualIndex) + (uri.getFragment() == null ? "" : "#" + uri.getRawFragment()))[ CD ]
Line_4 $$ final Iterable<String> parts = Splitter.on('/').omitEmptyStrings().trimResults().split(path)-->Line_9 $$ Iterables.get(parts, actualIndex)[ FD ]
