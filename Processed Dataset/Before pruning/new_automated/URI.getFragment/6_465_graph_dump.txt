Line_0 $$ Entry-->Line_2 $$ //6
public class func [ CD ]
Line_2 $$ //6
public class func -->Line_3 $$ public void setupDistributedCacheConfig(final JobConf job) [ CD ]
Line_3 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_4 $$ String localWorkDir = (job.get(MRFrameworkConfigs.TASK_LOCAL_RESOURCE_DIR))[ CD ]
Line_3 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_5 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)[ CD ]
Line_5 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)-->Line_5 $$ DistributedCache.getCacheArchives(job)[ CD ]
Line_3 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_6 $$ if (cacheArchives != null) [ CD ]
Line_5 $$ URI[] cacheArchives = DistributedCache.getCacheArchives(job)-->Line_6 $$ if (cacheArchives != null) [ FD ]
Line_6 $$ if (cacheArchives != null) -->Line_7 $$ List<String> localArchives = new ArrayList<String>()[ CD ]
Line_6 $$ if (cacheArchives != null) -->Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) [ CD ]
Line_6 $$ if (cacheArchives != null) -->Line_6 $$ if (cacheArchives != null) [ CD ]
Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_8 $$ int i = 0[ CD ]
Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_8 $$ ++i[ CD ]
Line_8 $$ int i = 0-->Line_8 $$ ++i[ FD ]
Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_9 $$ URI u = cacheArchives[i][ CD ]
Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_10 $$ Path p = new Path(u)[ CD ]
Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ CD ]
Line_9 $$ URI u = cacheArchives[i]-->Line_11 $$ u.getFragment()[ FD ]
Line_10 $$ Path p = new Path(u)-->Line_11 $$ p.getName()[ FD ]
Line_9 $$ URI u = cacheArchives[i]-->Line_12 $$ u.getFragment()[ FD ]
Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_13 $$ String linkName = name.toUri().getPath()[ CD ]
Line_13 $$ String linkName = name.toUri().getPath()-->Line_13 $$ name.toUri().getPath()[ CD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_13 $$ name.toUri()[ FD ]
Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) -->Line_14 $$ localArchives.add(new Path(localWorkDir, linkName).toUri().getPath())[ CD ]
Line_7 $$ List<String> localArchives = new ArrayList<String>()-->Line_14 $$ localArchives.add(new Path(localWorkDir, linkName).toUri().getPath())[ FD ]
Line_6 $$ if (cacheArchives != null) -->Line_16 $$ if (!localArchives.isEmpty()) [ CD ]
Line_16 $$ if (!localArchives.isEmpty()) -->Line_16 $$ !localArchives.isEmpty()[ CD ]
Line_16 $$ !localArchives.isEmpty()-->Line_16 $$ localArchives.isEmpty()[ CD ]
Line_7 $$ List<String> localArchives = new ArrayList<String>()-->Line_16 $$ localArchives.isEmpty()[ FD ]
Line_16 $$ if (!localArchives.isEmpty()) -->Line_17 $$ job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils.join(localArchives, ','))[ CD ]
Line_7 $$ List<String> localArchives = new ArrayList<String>()-->Line_17 $$ StringUtils.join(localArchives, ',')[ FD ]
Line_3 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_21 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)[ CD ]
Line_21 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)-->Line_21 $$ DistributedCache.getCacheFiles(job)[ CD ]
Line_3 $$ public void setupDistributedCacheConfig(final JobConf job) -->Line_22 $$ if (cacheFiles != null) [ CD ]
Line_21 $$ URI[] cacheFiles = DistributedCache.getCacheFiles(job)-->Line_22 $$ if (cacheFiles != null) [ FD ]
Line_22 $$ if (cacheFiles != null) -->Line_23 $$ List<String> localFiles = new ArrayList<String>()[ CD ]
Line_22 $$ if (cacheFiles != null) -->Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) [ CD ]
Line_22 $$ if (cacheFiles != null) -->Line_22 $$ if (cacheFiles != null) [ CD ]
Line_8 $$ int i = 0-->Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_24 $$ int i = 0[ CD ]
Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_24 $$ ++i[ CD ]
Line_24 $$ int i = 0-->Line_24 $$ ++i[ FD ]
Line_8 $$ int i = 0-->Line_24 $$ ++i[ FD ]
Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_25 $$ URI u = cacheFiles[i][ CD ]
Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_26 $$ Path p = new Path(u)[ CD ]
Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_27 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ CD ]
Line_25 $$ URI u = cacheFiles[i]-->Line_27 $$ u.getFragment()[ FD ]
Line_9 $$ URI u = cacheArchives[i]-->Line_27 $$ u.getFragment()[ FD ]
Line_26 $$ Path p = new Path(u)-->Line_27 $$ p.getName()[ FD ]
Line_10 $$ Path p = new Path(u)-->Line_27 $$ p.getName()[ FD ]
Line_25 $$ URI u = cacheFiles[i]-->Line_28 $$ u.getFragment()[ FD ]
Line_9 $$ URI u = cacheArchives[i]-->Line_28 $$ u.getFragment()[ FD ]
Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_29 $$ String linkName = name.toUri().getPath()[ CD ]
Line_29 $$ String linkName = name.toUri().getPath()-->Line_29 $$ name.toUri().getPath()[ CD ]
Line_27 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_29 $$ name.toUri()[ FD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_29 $$ name.toUri()[ FD ]
Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) -->Line_30 $$ localFiles.add(new Path(localWorkDir, linkName).toUri().getPath())[ CD ]
Line_23 $$ List<String> localFiles = new ArrayList<String>()-->Line_30 $$ localFiles.add(new Path(localWorkDir, linkName).toUri().getPath())[ FD ]
Line_22 $$ if (cacheFiles != null) -->Line_32 $$ if (!localFiles.isEmpty()) [ CD ]
Line_32 $$ if (!localFiles.isEmpty()) -->Line_32 $$ !localFiles.isEmpty()[ CD ]
Line_32 $$ !localFiles.isEmpty()-->Line_32 $$ localFiles.isEmpty()[ CD ]
Line_23 $$ List<String> localFiles = new ArrayList<String>()-->Line_32 $$ localFiles.isEmpty()[ FD ]
Line_32 $$ if (!localFiles.isEmpty()) -->Line_33 $$ job.set(MRJobConfig.CACHE_LOCALFILES, StringUtils.join(localFiles, ','))[ CD ]
Line_23 $$ List<String> localFiles = new ArrayList<String>()-->Line_33 $$ StringUtils.join(localFiles, ',')[ FD ]
Line_8 $$ int i = 0-->Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) [ FD ]
Line_8 $$ int i = 0-->Line_8 $$ for (int i = 0; i < cacheArchives.length; ++i) [ FD ]
Line_8 $$ int i = 0-->Line_8 $$ ++i[ FD ]
Line_9 $$ URI u = cacheArchives[i]-->Line_11 $$ u.getFragment()[ FD ]
Line_10 $$ Path p = new Path(u)-->Line_11 $$ p.getName()[ FD ]
Line_9 $$ URI u = cacheArchives[i]-->Line_12 $$ u.getFragment()[ FD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_13 $$ name.toUri()[ FD ]
Line_24 $$ int i = 0-->Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_24 $$ int i = 0-->Line_24 $$ for (int i = 0; i < cacheFiles.length; ++i) [ FD ]
Line_24 $$ int i = 0-->Line_24 $$ ++i[ FD ]
Line_25 $$ URI u = cacheFiles[i]-->Line_27 $$ u.getFragment()[ FD ]
Line_26 $$ Path p = new Path(u)-->Line_27 $$ p.getName()[ FD ]
Line_25 $$ URI u = cacheFiles[i]-->Line_28 $$ u.getFragment()[ FD ]
Line_27 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_29 $$ name.toUri()[ FD ]
