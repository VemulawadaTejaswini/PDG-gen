Line_0 $$ Entry-->Line_2 $$ //25
public class func [ CD ]
Line_2 $$ //25
public class func -->Line_3 $$ public void canonicalize(String uriString) [ CD ]
Line_3 $$ public void canonicalize(String uriString) -->Line_4 $$ if ((uriString == null) || (uriString.compareTo("localhost") == 0)) [ CD ]
Line_4 $$ if ((uriString == null) || (uriString.compareTo("localhost") == 0)) -->Line_5 $$ uriString = "//localhost"[ CD ]
Line_5 $$ uriString = "//localhost"-->Line_5 $$ uriString = "//localhost"[ FD ]
Line_4 $$ if ((uriString == null) || (uriString.compareTo("localhost") == 0)) -->Line_6 $$ return new URI(uriString);[ CD ]
Line_3 $$ public void canonicalize(String uriString) -->Line_8 $$ URI u = new URI(uriString)[ CD ]
Line_3 $$ public void canonicalize(String uriString) -->Line_9 $$ if (u.isAbsolute()) [ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_9 $$ if (u.isAbsolute()) [ FD ]
Line_9 $$ if (u.isAbsolute()) -->Line_9 $$ u.isAbsolute()[ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_9 $$ u.isAbsolute()[ FD ]
Line_9 $$ if (u.isAbsolute()) -->Line_10 $$ if (u.isOpaque()) [ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_10 $$ if (u.isOpaque()) [ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_10 $$ u.isOpaque()[ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_10 $$ u.isOpaque()[ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_28 $$ String scheme = u.getScheme()[ CD ]
Line_28 $$ String scheme = u.getScheme()-->Line_28 $$ u.getScheme()[ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_28 $$ u.getScheme()[ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_29 $$ String ssp = u.getSchemeSpecificPart()[ CD ]
Line_29 $$ String ssp = u.getSchemeSpecificPart()-->Line_29 $$ u.getSchemeSpecificPart()[ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_29 $$ u.getSchemeSpecificPart()[ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_30 $$ String frag = u.getFragment()[ CD ]
Line_30 $$ String frag = u.getFragment()-->Line_30 $$ u.getFragment()[ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_30 $$ u.getFragment()[ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_31 $$ URI u2 = null[ CD ]
Line_10 $$ if (u.isOpaque()) -->Line_33 $$ int c1index = uriString.indexOf(":")[ CD ]
Line_33 $$ int c1index = uriString.indexOf(":")-->Line_33 $$ uriString.indexOf(":")[ CD ]
Line_5 $$ uriString = "//localhost"-->Line_33 $$ uriString.indexOf(":")[ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_34 $$ int c2index = uriString.lastIndexOf(":")[ CD ]
Line_34 $$ int c2index = uriString.lastIndexOf(":")-->Line_34 $$ uriString.lastIndexOf(":")[ CD ]
Line_5 $$ uriString = "//localhost"-->Line_34 $$ uriString.lastIndexOf(":")[ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_35 $$ if (c2index != c1index) [ CD ]
Line_34 $$ int c2index = uriString.lastIndexOf(":")-->Line_35 $$ if (c2index != c1index) [ FD ]
Line_33 $$ int c1index = uriString.indexOf(":")-->Line_35 $$ if (c2index != c1index) [ FD ]
Line_35 $$ if (c2index != c1index) -->Line_43 $$ /*
                     * this is the scheme:hostname:port case. Attempt to
                     * transform this to scheme://hostname:port. If a path
                     * part is part of the original strings, it will be
                     * included in the SchemeSpecificPart. however, the
                     * fragment part must be handled separately.
                     */
if (frag == null) [ CD ]
Line_30 $$ String frag = u.getFragment()-->Line_43 $$ /*
                     * this is the scheme:hostname:port case. Attempt to
                     * transform this to scheme://hostname:port. If a path
                     * part is part of the original strings, it will be
                     * included in the SchemeSpecificPart. however, the
                     * fragment part must be handled separately.
                     */
if (frag == null) [ FD ]
Line_43 $$ /*
                     * this is the scheme:hostname:port case. Attempt to
                     * transform this to scheme://hostname:port. If a path
                     * part is part of the original strings, it will be
                     * included in the SchemeSpecificPart. however, the
                     * fragment part must be handled separately.
                     */
if (frag == null) -->Line_44 $$ u2 = new URI(scheme + "://" + ssp)[ CD ]
Line_31 $$ URI u2 = null-->Line_44 $$ u2 = new URI(scheme + "://" + ssp)[ FD ]
Line_44 $$ u2 = new URI(scheme + "://" + ssp)-->Line_44 $$ u2 = new URI(scheme + "://" + ssp)[ FD ]
Line_43 $$ /*
                     * this is the scheme:hostname:port case. Attempt to
                     * transform this to scheme://hostname:port. If a path
                     * part is part of the original strings, it will be
                     * included in the SchemeSpecificPart. however, the
                     * fragment part must be handled separately.
                     */
if (frag == null) -->Line_46 $$ u2 = new URI(scheme + "://" + ssp + "#" + frag)[ CD ]
Line_31 $$ URI u2 = null-->Line_46 $$ u2 = new URI(scheme + "://" + ssp + "#" + frag)[ FD ]
Line_44 $$ u2 = new URI(scheme + "://" + ssp)-->Line_46 $$ u2 = new URI(scheme + "://" + ssp + "#" + frag)[ FD ]
Line_46 $$ u2 = new URI(scheme + "://" + ssp + "#" + frag)-->Line_46 $$ u2 = new URI(scheme + "://" + ssp + "#" + frag)[ FD ]
Line_35 $$ if (c2index != c1index) -->Line_48 $$ return u2;[ CD ]
Line_10 $$ if (u.isOpaque()) -->Line_56 $$ u2 = new URI("//" + uriString)[ CD ]
Line_31 $$ URI u2 = null-->Line_56 $$ u2 = new URI("//" + uriString)[ FD ]
Line_44 $$ u2 = new URI(scheme + "://" + ssp)-->Line_56 $$ u2 = new URI("//" + uriString)[ FD ]
Line_46 $$ u2 = new URI(scheme + "://" + ssp + "#" + frag)-->Line_56 $$ u2 = new URI("//" + uriString)[ FD ]
Line_56 $$ u2 = new URI("//" + uriString)-->Line_56 $$ u2 = new URI("//" + uriString)[ FD ]
Line_10 $$ if (u.isOpaque()) -->Line_57 $$ return u2;[ CD ]
Line_10 $$ if (u.isOpaque()) -->Line_59 $$ return u;[ CD ]
Line_9 $$ if (u.isAbsolute()) -->Line_70 $$ u.getSchemeSpecificPart()[ CD ]
Line_8 $$ URI u = new URI(uriString)-->Line_70 $$ u.getSchemeSpecificPart()[ FD ]
Line_9 $$ if (u.isAbsolute()) -->Line_71 $$ if (ssp.startsWith("//")) [ CD ]
Line_29 $$ String ssp = u.getSchemeSpecificPart()-->Line_71 $$ if (ssp.startsWith("//")) [ FD ]
Line_71 $$ if (ssp.startsWith("//")) -->Line_71 $$ ssp.startsWith("//")[ CD ]
Line_29 $$ String ssp = u.getSchemeSpecificPart()-->Line_71 $$ ssp.startsWith("//")[ FD ]
Line_71 $$ if (ssp.startsWith("//")) -->Line_72 $$ return u;[ CD ]
Line_71 $$ if (ssp.startsWith("//")) -->Line_74 $$ return new URI("//" + uriString);[ CD ]
