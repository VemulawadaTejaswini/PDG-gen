Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void requestAuthorization(String scope, String responseType, String clientId, String redirectUri, String state, String respMode, String nonce, String display, String prompt, Integer maxAge, String uiLocalesStr, String idTokenHint, String loginHint, String acrValuesStr, String amrValuesStr, String request, String requestUri, String requestSessionId, String sessionId, String accessToken, String method, String originHeaders, HttpServletRequest httpRequest, HttpServletResponse httpResponse, SecurityContext securityContext) [ CD ]
Line_3 $$ public void requestAuthorization(String scope, String responseType, String clientId, String redirectUri, String state, String respMode, String nonce, String display, String prompt, Integer maxAge, String uiLocalesStr, String idTokenHint, String loginHint, String acrValuesStr, String amrValuesStr, String request, String requestUri, String requestSessionId, String sessionId, String accessToken, String method, String originHeaders, HttpServletRequest httpRequest, HttpServletResponse httpResponse, SecurityContext securityContext) -->Line_4 $$ if (StringUtils.isNotBlank(accessToken)) [ CD ]
Line_4 $$ if (StringUtils.isNotBlank(accessToken)) -->Line_4 $$ StringUtils.isNotBlank(accessToken)[ CD ]
Line_4 $$ if (StringUtils.isNotBlank(accessToken)) -->Line_5 $$ AuthorizationGrant authorizationGrant = authorizationGrantList.getAuthorizationGrantByAccessToken(accessToken)[ CD ]
Line_5 $$ AuthorizationGrant authorizationGrant = authorizationGrantList.getAuthorizationGrantByAccessToken(accessToken)-->Line_5 $$ authorizationGrantList.getAuthorizationGrantByAccessToken(accessToken)[ CD ]
Line_4 $$ if (StringUtils.isNotBlank(accessToken)) -->Line_7 $$ if (authorizationGrant == null) [ CD ]
Line_5 $$ AuthorizationGrant authorizationGrant = authorizationGrantList.getAuthorizationGrantByAccessToken(accessToken)-->Line_7 $$ if (authorizationGrant == null) [ FD ]
Line_7 $$ if (authorizationGrant == null) -->Line_8 $$ RedirectUri redirectUriResponse = new RedirectUri(redirectUri, responseTypes, responseMode)[ CD ]
Line_7 $$ if (authorizationGrant == null) -->Line_9 $$ redirectUriResponse.parseQueryString(errorResponseFactory.getErrorAsQueryString(AuthorizeErrorResponseType.ACCESS_DENIED, state))[ CD ]
Line_8 $$ RedirectUri redirectUriResponse = new RedirectUri(redirectUri, responseTypes, responseMode)-->Line_9 $$ redirectUriResponse.parseQueryString(errorResponseFactory.getErrorAsQueryString(AuthorizeErrorResponseType.ACCESS_DENIED, state))[ FD ]
Line_7 $$ if (authorizationGrant == null) -->Line_12 $$ RedirectUtil.getRedirectResponseBuilder(redirectUriResponse.toString(), httpRequest)[ CD ]
Line_8 $$ RedirectUri redirectUriResponse = new RedirectUri(redirectUri, responseTypes, responseMode)-->Line_12 $$ redirectUriResponse.toString()[ FD ]
Line_7 $$ if (authorizationGrant == null) -->Line_13 $$ return builder.build();[ CD ]
Line_13 $$ return builder.build();-->Line_13 $$ builder.build()[ CD ]
Line_7 $$ if (authorizationGrant == null) -->Line_15 $$ userService.getUser(authorizationGrant.getUserId())[ CD ]
Line_5 $$ AuthorizationGrant authorizationGrant = authorizationGrantList.getAuthorizationGrantByAccessToken(accessToken)-->Line_15 $$ authorizationGrant.getUserId()[ FD ]
Line_7 $$ if (authorizationGrant == null) -->Line_16 $$ sessionIdService.generateAuthenticatedSessionId(user.getDn(), prompt)[ CD ]
Line_3 $$ public void requestAuthorization(String scope, String responseType, String clientId, String redirectUri, String state, String respMode, String nonce, String display, String prompt, Integer maxAge, String uiLocalesStr, String idTokenHint, String loginHint, String acrValuesStr, String amrValuesStr, String request, String requestUri, String requestSessionId, String sessionId, String accessToken, String method, String originHeaders, HttpServletRequest httpRequest, HttpServletResponse httpResponse, SecurityContext securityContext) -->Line_19 $$ if (StringUtils.isNotBlank(requestUri)) [ CD ]
Line_19 $$ if (StringUtils.isNotBlank(requestUri)) -->Line_19 $$ StringUtils.isNotBlank(requestUri)[ CD ]
Line_19 $$ if (StringUtils.isNotBlank(requestUri)) -->Line_20 $$ boolean validRequestUri = false[ CD ]
Line_23 $$ String reqUriHash = reqUri.getFragment()-->Line_23 $$ reqUri.getFragment()[ CD ]
Line_22 $$ URI reqUri = new URI(requestUri)-->Line_23 $$ reqUri.getFragment()[ FD ]
Line_22 $$ URI reqUri = new URI(requestUri)-->Line_24 $$ reqUri.getScheme()[ FD ]
Line_22 $$ URI reqUri = new URI(requestUri)-->Line_24 $$ reqUri.getSchemeSpecificPart()[ FD ]
Line_26 $$ ClientRequest clientRequest = new ClientRequest(reqUriWithoutFragment)-->Line_27 $$ clientRequest.setHttpMethod(HttpMethod.GET)[ FD ]
Line_29 $$ ClientResponse<String> clientResponse = clientRequest.get(String.class)-->Line_29 $$ clientRequest.get(String.class)[ CD ]
Line_26 $$ ClientRequest clientRequest = new ClientRequest(reqUriWithoutFragment)-->Line_29 $$ clientRequest.get(String.class)[ FD ]
Line_30 $$ int status = clientResponse.getStatus()-->Line_30 $$ clientResponse.getStatus()[ CD ]
Line_29 $$ ClientResponse<String> clientResponse = clientRequest.get(String.class)-->Line_30 $$ clientResponse.getStatus()[ FD ]
Line_30 $$ int status = clientResponse.getStatus()-->Line_32 $$ if (status == 200) [ FD ]
Line_32 $$ if (status == 200) -->Line_33 $$ request = clientResponse.getEntity(String.class)[ CD ]
Line_33 $$ request = clientResponse.getEntity(String.class)-->Line_33 $$ request = clientResponse.getEntity(String.class)[ FD ]
Line_33 $$ request = clientResponse.getEntity(String.class)-->Line_33 $$ clientResponse.getEntity(String.class)[ CD ]
Line_29 $$ ClientResponse<String> clientResponse = clientRequest.get(String.class)-->Line_33 $$ clientResponse.getEntity(String.class)[ FD ]
Line_32 $$ if (status == 200) -->Line_35 $$ if (StringUtils.isBlank(reqUriHash)) [ CD ]
Line_23 $$ String reqUriHash = reqUri.getFragment()-->Line_35 $$ if (StringUtils.isBlank(reqUriHash)) [ FD ]
Line_35 $$ if (StringUtils.isBlank(reqUriHash)) -->Line_35 $$ StringUtils.isBlank(reqUriHash)[ CD ]
Line_23 $$ String reqUriHash = reqUri.getFragment()-->Line_35 $$ StringUtils.isBlank(reqUriHash)[ FD ]
Line_35 $$ if (StringUtils.isBlank(reqUriHash)) -->Line_36 $$ validRequestUri = true[ CD ]
Line_20 $$ boolean validRequestUri = false-->Line_36 $$ validRequestUri = true[ FD ]
Line_36 $$ validRequestUri = true-->Line_36 $$ validRequestUri = true[ FD ]
Line_35 $$ if (StringUtils.isBlank(reqUriHash)) -->Line_38 $$ String hash = JwtUtil.base64urlencode(JwtUtil.getMessageDigestSHA256(request))[ CD ]
Line_38 $$ String hash = JwtUtil.base64urlencode(JwtUtil.getMessageDigestSHA256(request))-->Line_38 $$ JwtUtil.base64urlencode(JwtUtil.getMessageDigestSHA256(request))[ CD ]
Line_33 $$ request = clientResponse.getEntity(String.class)-->Line_38 $$ JwtUtil.getMessageDigestSHA256(request)[ FD ]
Line_35 $$ if (StringUtils.isBlank(reqUriHash)) -->Line_39 $$ validRequestUri = StringUtils.equals(reqUriHash, hash)[ CD ]
Line_20 $$ boolean validRequestUri = false-->Line_39 $$ validRequestUri = StringUtils.equals(reqUriHash, hash)[ FD ]
Line_36 $$ validRequestUri = true-->Line_39 $$ validRequestUri = StringUtils.equals(reqUriHash, hash)[ FD ]
Line_39 $$ validRequestUri = StringUtils.equals(reqUriHash, hash)-->Line_39 $$ validRequestUri = StringUtils.equals(reqUriHash, hash)[ FD ]
Line_39 $$ validRequestUri = StringUtils.equals(reqUriHash, hash)-->Line_39 $$ StringUtils.equals(reqUriHash, hash)[ CD ]
Line_23 $$ String reqUriHash = reqUri.getFragment()-->Line_39 $$ StringUtils.equals(reqUriHash, hash)[ FD ]
Line_38 $$ String hash = JwtUtil.base64urlencode(JwtUtil.getMessageDigestSHA256(request))-->Line_39 $$ StringUtils.equals(reqUriHash, hash)[ FD ]
Line_43 $$ if (validRequestUri) -->Line_44 $$ requestUri = null[ CD ]
Line_44 $$ requestUri = null-->Line_44 $$ requestUri = null[ FD ]
Line_43 $$ if (validRequestUri) -->Line_47 $$ redirectUriResponse.parseQueryString(errorResponseFactory.getErrorAsQueryString(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state))[ CD ]
Line_8 $$ RedirectUri redirectUriResponse = new RedirectUri(redirectUri, responseTypes, responseMode)-->Line_47 $$ redirectUriResponse.parseQueryString(errorResponseFactory.getErrorAsQueryString(AuthorizeErrorResponseType.INVALID_REQUEST_URI, state))[ FD ]
Line_43 $$ if (validRequestUri) -->Line_50 $$ RedirectUtil.getRedirectResponseBuilder(redirectUriResponse.toString(), httpRequest)[ CD ]
Line_8 $$ RedirectUri redirectUriResponse = new RedirectUri(redirectUri, responseTypes, responseMode)-->Line_50 $$ redirectUriResponse.toString()[ FD ]
Line_43 $$ if (validRequestUri) -->Line_51 $$ return builder.build();[ CD ]
Line_51 $$ return builder.build();-->Line_51 $$ builder.build()[ CD ]
Line_3 $$ public void requestAuthorization(String scope, String responseType, String clientId, String redirectUri, String state, String respMode, String nonce, String display, String prompt, Integer maxAge, String uiLocalesStr, String idTokenHint, String loginHint, String acrValuesStr, String amrValuesStr, String request, String requestUri, String requestSessionId, String sessionId, String accessToken, String method, String originHeaders, HttpServletRequest httpRequest, HttpServletResponse httpResponse, SecurityContext securityContext) -->Line_63 $$ if (StringUtils.isNotBlank(request)) [ CD ]
Line_33 $$ request = clientResponse.getEntity(String.class)-->Line_63 $$ if (StringUtils.isNotBlank(request)) [ FD ]
Line_63 $$ if (StringUtils.isNotBlank(request)) -->Line_63 $$ StringUtils.isNotBlank(request)[ CD ]
Line_33 $$ request = clientResponse.getEntity(String.class)-->Line_63 $$ StringUtils.isNotBlank(request)[ FD ]
Line_67 $$ !jwtAuthorizationRequest.getResponseTypes().containsAll(responseTypes)-->Line_67 $$ jwtAuthorizationRequest.getResponseTypes().containsAll(responseTypes)[ CD ]
Line_68 $$ !responseTypes.containsAll(jwtAuthorizationRequest.getResponseTypes())-->Line_68 $$ responseTypes.containsAll(jwtAuthorizationRequest.getResponseTypes())[ CD ]
Line_67 $$ if (!jwtAuthorizationRequest.getResponseTypes().containsAll(responseTypes) || !responseTypes.containsAll(jwtAuthorizationRequest.getResponseTypes())) -->Line_70 $$ if (jwtAuthorizationRequest.getClientId() != null && !jwtAuthorizationRequest.getClientId().equals(clientId)) [ CD ]
Line_71 $$ !jwtAuthorizationRequest.getClientId().equals(clientId)-->Line_71 $$ jwtAuthorizationRequest.getClientId().equals(clientId)[ CD ]
Line_70 $$ if (jwtAuthorizationRequest.getClientId() != null && !jwtAuthorizationRequest.getClientId().equals(clientId)) -->Line_73 $$ if (!jwtAuthorizationRequest.getScopes().containsAll(scopes) || !scopes.containsAll(jwtAuthorizationRequest.getScopes())) [ CD ]
Line_73 $$ !jwtAuthorizationRequest.getScopes().containsAll(scopes)-->Line_73 $$ jwtAuthorizationRequest.getScopes().containsAll(scopes)[ CD ]
Line_74 $$ !scopes.containsAll(jwtAuthorizationRequest.getScopes())-->Line_74 $$ scopes.containsAll(jwtAuthorizationRequest.getScopes())[ CD ]
Line_73 $$ if (!jwtAuthorizationRequest.getScopes().containsAll(scopes) || !scopes.containsAll(jwtAuthorizationRequest.getScopes())) -->Line_76 $$ if (jwtAuthorizationRequest.getRedirectUri() != null && !jwtAuthorizationRequest.getRedirectUri().equals(redirectUri)) [ CD ]
Line_77 $$ !jwtAuthorizationRequest.getRedirectUri().equals(redirectUri)-->Line_77 $$ jwtAuthorizationRequest.getRedirectUri().equals(redirectUri)[ CD ]
Line_76 $$ if (jwtAuthorizationRequest.getRedirectUri() != null && !jwtAuthorizationRequest.getRedirectUri().equals(redirectUri)) -->Line_79 $$ if (jwtAuthorizationRequest.getState() != null && StringUtils.isNotBlank(state) && !jwtAuthorizationRequest.getState().equals(state)) [ CD ]
Line_80 $$ !jwtAuthorizationRequest.getState().equals(state)-->Line_80 $$ jwtAuthorizationRequest.getState().equals(state)[ CD ]
Line_79 $$ if (jwtAuthorizationRequest.getState() != null && StringUtils.isNotBlank(state) && !jwtAuthorizationRequest.getState().equals(state)) -->Line_82 $$ if (jwtAuthorizationRequest.getNonce() != null && StringUtils.isNotBlank(nonce) && !jwtAuthorizationRequest.getNonce().equals(nonce)) [ CD ]
Line_83 $$ !jwtAuthorizationRequest.getNonce().equals(nonce)-->Line_83 $$ jwtAuthorizationRequest.getNonce().equals(nonce)[ CD ]
Line_82 $$ if (jwtAuthorizationRequest.getNonce() != null && StringUtils.isNotBlank(nonce) && !jwtAuthorizationRequest.getNonce().equals(nonce)) -->Line_85 $$ if (jwtAuthorizationRequest.getDisplay() != null && StringUtils.isNotBlank(display) && !jwtAuthorizationRequest.getDisplay().getParamName().equals(display)) [ CD ]
Line_86 $$ !jwtAuthorizationRequest.getDisplay().getParamName().equals(display)-->Line_86 $$ jwtAuthorizationRequest.getDisplay().getParamName().equals(display)[ CD ]
Line_85 $$ if (jwtAuthorizationRequest.getDisplay() != null && StringUtils.isNotBlank(display) && !jwtAuthorizationRequest.getDisplay().getParamName().equals(display)) -->Line_88 $$ if (!jwtAuthorizationRequest.getPrompts().isEmpty() && !prompts.isEmpty() && !jwtAuthorizationRequest.getPrompts().containsAll(prompts)) [ CD ]
Line_88 $$ !jwtAuthorizationRequest.getPrompts().isEmpty()-->Line_88 $$ jwtAuthorizationRequest.getPrompts().isEmpty()[ CD ]
Line_88 $$ !prompts.isEmpty()-->Line_88 $$ prompts.isEmpty()[ CD ]
Line_89 $$ !jwtAuthorizationRequest.getPrompts().containsAll(prompts)-->Line_89 $$ jwtAuthorizationRequest.getPrompts().containsAll(prompts)[ CD ]
Line_88 $$ if (!jwtAuthorizationRequest.getPrompts().isEmpty() && !prompts.isEmpty() && !jwtAuthorizationRequest.getPrompts().containsAll(prompts)) -->Line_91 $$ if (jwtAuthorizationRequest.getIdTokenMember() != null && jwtAuthorizationRequest.getIdTokenMember().getMaxAge() != null && maxAge != null && !jwtAuthorizationRequest.getIdTokenMember().getMaxAge().equals(maxAge)) [ CD ]
Line_93 $$ !jwtAuthorizationRequest.getIdTokenMember().getMaxAge().equals(maxAge)-->Line_93 $$ jwtAuthorizationRequest.getIdTokenMember().getMaxAge().equals(maxAge)[ CD ]
