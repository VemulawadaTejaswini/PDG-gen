Line_0 $$ Entry-->Line_2 $$ //78
public class func [ CD ]
Line_2 $$ //78
public class func -->Line_3 $$ public void testBuildFullValidFromEmpty() [ CD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_4 $$ URI result = classUnderTest.build()[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_4 $$ classUnderTest.build()[ CD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_5 $$ assertNotNull(result)[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_5 $$ assertNotNull(result)[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_6 $$ assertEquals("scheme", result.getScheme())[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_6 $$ result.getScheme()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_7 $$ assertEquals("user:pass", result.getUserInfo())[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_7 $$ result.getUserInfo()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_8 $$ assertEquals("host.com", result.getHost())[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_8 $$ result.getHost()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_9 $$ assertEquals(1000, result.getPort())[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_9 $$ result.getPort()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_10 $$ assertEquals("/test/path/item.foo", result.getPath())[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_10 $$ result.getPath()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_11 $$ assertTrue(result.getRawQuery().split("&").length == 2)[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_11 $$ result.getRawQuery()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_12 $$ assertTrue(result.getRawQuery().contains("param1=value1"))[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_12 $$ result.getRawQuery()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_13 $$ assertTrue(result.getRawQuery().contains("param2"))[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_13 $$ result.getRawQuery()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_14 $$ assertEquals("fragment", result.getFragment())[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_14 $$ result.getFragment()[ FD ]
Line_3 $$ public void testBuildFullValidFromEmpty() -->Line_15 $$ assertEquals("scheme://user:pass@host.com:1000/test/path/item.foo?param1=value1&param2#fragment", result.toString())[ CD ]
Line_4 $$ URI result = classUnderTest.build()-->Line_16 $$ result.toString()[ FD ]
