Line_0 $$ Entry-->Line_2 $$ //32
public class func [ CD ]
Line_2 $$ //32
public class func -->Line_3 $$ public void expand(List<URI> inputs) [ CD ]
Line_4 $$ URI input-->Line_5 $$ if (isFileOrDir(input)) [ FD ]
Line_5 $$ if (isFileOrDir(input)) -->Line_5 $$ isFileOrDir(input)[ CD ]
Line_4 $$ URI input-->Line_5 $$ isFileOrDir(input)[ FD ]
Line_5 $$ if (isFileOrDir(input)) -->Line_6 $$ Path inputPath = Paths.get(input)[ CD ]
Line_6 $$ Path inputPath = Paths.get(input)-->Line_6 $$ Paths.get(input)[ CD ]
Line_4 $$ URI input-->Line_6 $$ Paths.get(input)[ FD ]
Line_5 $$ if (isFileOrDir(input)) -->Line_7 $$ if (Files.isDirectory(inputPath)) [ CD ]
Line_6 $$ Path inputPath = Paths.get(input)-->Line_7 $$ if (Files.isDirectory(inputPath)) [ FD ]
Line_7 $$ if (Files.isDirectory(inputPath)) -->Line_7 $$ Files.isDirectory(inputPath)[ CD ]
Line_6 $$ Path inputPath = Paths.get(input)-->Line_7 $$ Files.isDirectory(inputPath)[ FD ]
Line_8 $$ DirectoryStream<Path> childPaths = Files.newDirectoryStream(inputPath)-->Line_8 $$ Files.newDirectoryStream(inputPath)[ CD ]
Line_6 $$ Path inputPath = Paths.get(input)-->Line_8 $$ Files.newDirectoryStream(inputPath)[ FD ]
Line_9 $$ Path childPath-->Line_10 $$ childPath.toUri()[ FD ]
Line_7 $$ if (Files.isDirectory(inputPath)) -->Line_14 $$ expanded.add(input)[ CD ]
Line_4 $$ URI input-->Line_14 $$ expanded.add(input)[ FD ]
Line_5 $$ if (isFileOrDir(input)) -->Line_17 $$ expanded.add(input)[ CD ]
Line_4 $$ URI input-->Line_17 $$ expanded.add(input)[ FD ]
Line_3 $$ public void expand(List<URI> inputs) -->Line_20 $$ for (int i = 0; i < expanded.size(); i++) [ CD ]
Line_3 $$ public void expand(List<URI> inputs) -->Line_3 $$ public void expand(List<URI> inputs) [ CD ]
Line_20 $$ for (int i = 0; i < expanded.size(); i++) -->Line_20 $$ expanded.size()[ CD ]
Line_20 $$ for (int i = 0; i < expanded.size(); i++) -->Line_20 $$ int i = 0[ CD ]
Line_20 $$ for (int i = 0; i < expanded.size(); i++) -->Line_20 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_20 $$ i++[ FD ]
Line_20 $$ for (int i = 0; i < expanded.size(); i++) -->Line_21 $$ URI input = expanded.get(i)[ CD ]
Line_21 $$ URI input = expanded.get(i)-->Line_21 $$ expanded.get(i)[ CD ]
Line_20 $$ int i = 0-->Line_21 $$ expanded.get(i)[ FD ]
Line_20 $$ for (int i = 0; i < expanded.size(); i++) -->Line_22 $$ if (input.getScheme() == null) [ CD ]
Line_21 $$ URI input = expanded.get(i)-->Line_22 $$ input.getScheme()[ FD ]
Line_4 $$ URI input-->Line_22 $$ input.getScheme()[ FD ]
Line_22 $$ if (input.getScheme() == null) -->Line_23 $$ expanded.set(i, new URI("file", input.getSchemeSpecificPart(), input.getFragment()))[ CD ]
Line_20 $$ int i = 0-->Line_23 $$ expanded.set(i, new URI("file", input.getSchemeSpecificPart(), input.getFragment()))[ FD ]
Line_21 $$ URI input = expanded.get(i)-->Line_23 $$ input.getSchemeSpecificPart()[ FD ]
Line_4 $$ URI input-->Line_23 $$ input.getSchemeSpecificPart()[ FD ]
Line_21 $$ URI input = expanded.get(i)-->Line_23 $$ input.getFragment()[ FD ]
Line_4 $$ URI input-->Line_23 $$ input.getFragment()[ FD ]
Line_20 $$ int i = 0-->Line_20 $$ for (int i = 0; i < expanded.size(); i++) [ FD ]
Line_20 $$ int i = 0-->Line_20 $$ for (int i = 0; i < expanded.size(); i++) [ FD ]
Line_20 $$ int i = 0-->Line_20 $$ i++[ FD ]
Line_20 $$ int i = 0-->Line_21 $$ expanded.get(i)[ FD ]
Line_21 $$ URI input = expanded.get(i)-->Line_22 $$ input.getScheme()[ FD ]
Line_20 $$ int i = 0-->Line_23 $$ expanded.set(i, new URI("file", input.getSchemeSpecificPart(), input.getFragment()))[ FD ]
Line_21 $$ URI input = expanded.get(i)-->Line_23 $$ input.getSchemeSpecificPart()[ FD ]
Line_21 $$ URI input = expanded.get(i)-->Line_23 $$ input.getFragment()[ FD ]
