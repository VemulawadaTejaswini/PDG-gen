Line_0 $$ Entry-->Line_2 $$ //66
public class func [ CD ]
Line_2 $$ //66
public class func -->Line_3 $$ public void testUrl() [ CD ]
Line_3 $$ public void testUrl() -->Line_4 $$ URI uri = new URI("sword://StrongsRealGreek/01909")[ CD ]
Line_3 $$ public void testUrl() -->Line_5 $$ assertEquals("sword", uri.getScheme())[ CD ]
Line_4 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_5 $$ uri.getScheme()[ FD ]
Line_3 $$ public void testUrl() -->Line_6 $$ assertEquals("StrongsRealGreek", uri.getHost())[ CD ]
Line_4 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_6 $$ uri.getHost()[ FD ]
Line_3 $$ public void testUrl() -->Line_7 $$ assertEquals("/01909", uri.getPath())[ CD ]
Line_4 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_7 $$ uri.getPath()[ FD ]
Line_3 $$ public void testUrl() -->Line_8 $$ assertEquals("/01909", uri.getRawPath())[ CD ]
Line_4 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_8 $$ uri.getRawPath()[ FD ]
Line_3 $$ public void testUrl() -->Line_9 $$ assertEquals(null, uri.getQuery())[ CD ]
Line_4 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_9 $$ uri.getQuery()[ FD ]
Line_3 $$ public void testUrl() -->Line_10 $$ assertEquals(null, uri.getFragment())[ CD ]
Line_4 $$ URI uri = new URI("sword://StrongsRealGreek/01909")-->Line_10 $$ uri.getFragment()[ FD ]
