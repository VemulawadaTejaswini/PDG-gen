Line_0 $$ Entry-->Line_2 $$ //9
public class func [ CD ]
Line_2 $$ //9
public class func -->Line_3 $$ public void testUriParts() [ CD ]
Line_3 $$ public void testUriParts() -->Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")[ CD ]
Line_3 $$ public void testUriParts() -->Line_5 $$ assertEquals("http", uri.getScheme())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_5 $$ uri.getScheme()[ FD ]
Line_3 $$ public void testUriParts() -->Line_6 $$ assertEquals("username:password@host:8080", uri.getAuthority())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_6 $$ uri.getAuthority()[ FD ]
Line_3 $$ public void testUriParts() -->Line_7 $$ assertEquals("username:password@host:8080", uri.getRawAuthority())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_7 $$ uri.getRawAuthority()[ FD ]
Line_3 $$ public void testUriParts() -->Line_8 $$ assertEquals("username:password", uri.getUserInfo())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_8 $$ uri.getUserInfo()[ FD ]
Line_3 $$ public void testUriParts() -->Line_9 $$ assertEquals("username:password", uri.getRawUserInfo())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_9 $$ uri.getRawUserInfo()[ FD ]
Line_3 $$ public void testUriParts() -->Line_10 $$ assertEquals("host", uri.getHost())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_10 $$ uri.getHost()[ FD ]
Line_3 $$ public void testUriParts() -->Line_11 $$ assertEquals(8080, uri.getPort())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_11 $$ uri.getPort()[ FD ]
Line_3 $$ public void testUriParts() -->Line_12 $$ assertEquals("/directory/file", uri.getPath())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_12 $$ uri.getPath()[ FD ]
Line_3 $$ public void testUriParts() -->Line_13 $$ assertEquals("/directory/file", uri.getRawPath())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_13 $$ uri.getRawPath()[ FD ]
Line_3 $$ public void testUriParts() -->Line_14 $$ assertEquals("query", uri.getQuery())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_14 $$ uri.getQuery()[ FD ]
Line_3 $$ public void testUriParts() -->Line_15 $$ assertEquals("query", uri.getRawQuery())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_15 $$ uri.getRawQuery()[ FD ]
Line_3 $$ public void testUriParts() -->Line_16 $$ assertEquals("ref", uri.getFragment())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_16 $$ uri.getFragment()[ FD ]
Line_3 $$ public void testUriParts() -->Line_17 $$ assertEquals("ref", uri.getRawFragment())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_17 $$ uri.getRawFragment()[ FD ]
Line_3 $$ public void testUriParts() -->Line_18 $$ assertEquals("//username:password@host:8080/directory/file?query", uri.getSchemeSpecificPart())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_19 $$ uri.getSchemeSpecificPart()[ FD ]
Line_3 $$ public void testUriParts() -->Line_20 $$ assertEquals("//username:password@host:8080/directory/file?query", uri.getRawSchemeSpecificPart())[ CD ]
Line_4 $$ URI uri = new URI("http://username:password@host:8080/directory/file?query#ref")-->Line_21 $$ uri.getRawSchemeSpecificPart()[ FD ]
