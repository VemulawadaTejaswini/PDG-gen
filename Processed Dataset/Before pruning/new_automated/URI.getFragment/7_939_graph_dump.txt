Line_0 $$ Entry-->Line_2 $$ //7
public class func [ CD ]
Line_2 $$ //7
public class func -->Line_3 $$ public void stripLastComponent(String input) [ CD ]
Line_3 $$ public void stripLastComponent(String input) -->Line_4 $$ URI uri = new URI(input)[ CD ]
Line_3 $$ public void stripLastComponent(String input) -->Line_5 $$ if (uri.getFragment() != null) [ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_5 $$ uri.getFragment()[ FD ]
Line_5 $$ if (uri.getFragment() != null) -->Line_6 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString();[ CD ]
Line_6 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString();-->Line_6 $$ new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), null).toString()[ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_6 $$ uri.getScheme()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_6 $$ uri.getUserInfo()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_6 $$ uri.getHost()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_6 $$ uri.getPort()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_6 $$ uri.getPath()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_6 $$ uri.getQuery()[ FD ]
Line_5 $$ if (uri.getFragment() != null) -->Line_8 $$ if (uri.getQuery() != null) [ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_8 $$ uri.getQuery()[ FD ]
Line_8 $$ if (uri.getQuery() != null) -->Line_9 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString();[ CD ]
Line_9 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString();-->Line_9 $$ new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), null, null).toString()[ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_9 $$ uri.getScheme()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_9 $$ uri.getUserInfo()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_9 $$ uri.getHost()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_9 $$ uri.getPort()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_9 $$ uri.getPath()[ FD ]
Line_8 $$ if (uri.getQuery() != null) -->Line_11 $$ if (uri.getPath() != null) [ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_11 $$ uri.getPath()[ FD ]
Line_11 $$ if (uri.getPath() != null) -->Line_13 $$ String currPath = uri.getPath()[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_13 $$ uri.getPath()[ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_13 $$ uri.getPath()[ FD ]
Line_11 $$ if (uri.getPath() != null) -->Line_14 $$ if (currPath.endsWith("/")) [ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_14 $$ if (currPath.endsWith("/")) [ FD ]
Line_14 $$ if (currPath.endsWith("/")) -->Line_14 $$ currPath.endsWith("/")[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_14 $$ currPath.endsWith("/")[ FD ]
Line_14 $$ if (currPath.endsWith("/")) -->Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_15 $$ currPath.substring(0, currPath.length() - 1)[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_15 $$ currPath.substring(0, currPath.length() - 1)[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_15 $$ currPath.substring(0, currPath.length() - 1)[ FD ]
Line_13 $$ String currPath = uri.getPath()-->Line_15 $$ currPath.length()[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_15 $$ currPath.length()[ FD ]
Line_14 $$ if (currPath.endsWith("/")) -->Line_16 $$ if (currPath.length() == 0)
    currPath = null;[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_16 $$ currPath.length()[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_16 $$ currPath.length()[ FD ]
Line_16 $$ if (currPath.length() == 0)
    currPath = null;-->Line_17 $$ currPath = null[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_17 $$ currPath = null[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_17 $$ currPath = null[ FD ]
Line_17 $$ currPath = null-->Line_17 $$ currPath = null[ FD ]
Line_14 $$ if (currPath.endsWith("/")) -->Line_18 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString();[ CD ]
Line_18 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString();-->Line_18 $$ new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_18 $$ uri.getScheme()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_18 $$ uri.getUserInfo()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_18 $$ uri.getHost()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_18 $$ uri.getPort()[ FD ]
Line_14 $$ if (currPath.endsWith("/")) -->Line_20 $$ if (currPath.contains("/")) [ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_20 $$ if (currPath.contains("/")) [ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_20 $$ if (currPath.contains("/")) [ FD ]
Line_17 $$ currPath = null-->Line_20 $$ if (currPath.contains("/")) [ FD ]
Line_20 $$ if (currPath.contains("/")) -->Line_20 $$ currPath.contains("/")[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_20 $$ currPath.contains("/")[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_20 $$ currPath.contains("/")[ FD ]
Line_17 $$ currPath = null-->Line_20 $$ currPath.contains("/")[ FD ]
Line_20 $$ if (currPath.contains("/")) -->Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_17 $$ currPath = null-->Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_21 $$ currPath.substring(0, currPath.lastIndexOf('/') + 1)[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_21 $$ currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_21 $$ currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_17 $$ currPath = null-->Line_21 $$ currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_21 $$ currPath.substring(0, currPath.lastIndexOf('/') + 1)[ FD ]
Line_13 $$ String currPath = uri.getPath()-->Line_21 $$ currPath.lastIndexOf('/')[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_21 $$ currPath.lastIndexOf('/')[ FD ]
Line_17 $$ currPath = null-->Line_21 $$ currPath.lastIndexOf('/')[ FD ]
Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_21 $$ currPath.lastIndexOf('/')[ FD ]
Line_20 $$ if (currPath.contains("/")) -->Line_22 $$ if (currPath.length() == 0)
    currPath = null;[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_22 $$ currPath.length()[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_22 $$ currPath.length()[ FD ]
Line_17 $$ currPath = null-->Line_22 $$ currPath.length()[ FD ]
Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_22 $$ currPath.length()[ FD ]
Line_22 $$ if (currPath.length() == 0)
    currPath = null;-->Line_23 $$ currPath = null[ CD ]
Line_13 $$ String currPath = uri.getPath()-->Line_23 $$ currPath = null[ FD ]
Line_15 $$ currPath = currPath.substring(0, currPath.length() - 1)-->Line_23 $$ currPath = null[ FD ]
Line_17 $$ currPath = null-->Line_23 $$ currPath = null[ FD ]
Line_21 $$ currPath = currPath.substring(0, currPath.lastIndexOf('/') + 1)-->Line_23 $$ currPath = null[ FD ]
Line_23 $$ currPath = null-->Line_23 $$ currPath = null[ FD ]
Line_20 $$ if (currPath.contains("/")) -->Line_24 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString();[ CD ]
Line_24 $$ return new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString();-->Line_24 $$ new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), currPath, null, null).toString()[ CD ]
Line_4 $$ URI uri = new URI(input)-->Line_24 $$ uri.getScheme()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_24 $$ uri.getUserInfo()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_24 $$ uri.getHost()[ FD ]
Line_4 $$ URI uri = new URI(input)-->Line_24 $$ uri.getPort()[ FD ]
Line_20 $$ if (currPath.contains("/")) -->Line_30 $$ // In this case there are no further components to strip
return null;[ CD ]
Line_11 $$ if (uri.getPath() != null) -->Line_34 $$ // No further components to strip
return null;[ CD ]
