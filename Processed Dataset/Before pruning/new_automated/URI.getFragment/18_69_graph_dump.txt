Line_0 $$ Entry-->Line_2 $$ //18
public class func [ CD ]
Line_2 $$ //18
public class func -->Line_3 $$ public void resolve(String uri, URIResolver resolver) [ CD ]
Line_3 $$ public void resolve(String uri, URIResolver resolver) -->Line_4 $$ if (parsed.getPath() != null)
    path += parsed.getPath();[ CD ]
Line_4 $$ if (parsed.getPath() != null)
    path += parsed.getPath();-->Line_5 $$ parsed.getPath()[ CD ]
Line_3 $$ public void resolve(String uri, URIResolver resolver) -->Line_6 $$ if (parsed.getQuery() != null)
    path += parsed.getQuery();[ CD ]
Line_6 $$ if (parsed.getQuery() != null)
    path += parsed.getQuery();-->Line_7 $$ parsed.getQuery()[ CD ]
Line_3 $$ public void resolve(String uri, URIResolver resolver) -->Line_8 $$ if (parsed.getFragment() != null)
    path += "#" + parsed.getFragment();[ CD ]
Line_3 $$ public void resolve(String uri, URIResolver resolver) -->Line_10 $$ int port = parsed.getPort() < 0 ? Address.NULL_PORT : parsed.getPort()[ CD ]
Line_3 $$ public void resolve(String uri, URIResolver resolver) -->Line_11 $$ Address address = new Address(parsed.getScheme(), parsed.getHost(), port)[ CD ]
Line_3 $$ public void resolve(String uri, URIResolver resolver) -->Line_12 $$ return resolver.resolve(address, path);[ CD ]
Line_12 $$ return resolver.resolve(address, path);-->Line_12 $$ resolver.resolve(address, path)[ CD ]
Line_11 $$ Address address = new Address(parsed.getScheme(), parsed.getHost(), port)-->Line_12 $$ resolver.resolve(address, path)[ FD ]
