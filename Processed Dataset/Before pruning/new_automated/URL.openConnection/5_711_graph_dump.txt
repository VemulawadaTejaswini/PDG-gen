Line_0 $$ Entry-->Line_2 $$ //5
public class func [ CD ]
Line_2 $$ //5
public class func -->Line_3 $$ public void createHttpReader(@NotNull URL url) [ CD ]
Line_3 $$ public void createHttpReader(@NotNull URL url) -->Line_4 $$ httpConfigurable.prepareURL(url.toString())[ CD ]
Line_3 $$ public void createHttpReader(@NotNull URL url) -->Line_5 $$ URLConnection urlConnection = url.openConnection()[ CD ]
Line_5 $$ URLConnection urlConnection = url.openConnection()-->Line_5 $$ url.openConnection()[ CD ]
Line_3 $$ public void createHttpReader(@NotNull URL url) -->Line_6 $$ String contentEncoding = urlConnection.getContentEncoding()[ CD ]
Line_6 $$ String contentEncoding = urlConnection.getContentEncoding()-->Line_6 $$ urlConnection.getContentEncoding()[ CD ]
Line_5 $$ URLConnection urlConnection = url.openConnection()-->Line_6 $$ urlConnection.getContentEncoding()[ FD ]
Line_3 $$ public void createHttpReader(@NotNull URL url) -->Line_7 $$ InputStream inputStream = urlConnection.getInputStream()[ CD ]
Line_7 $$ InputStream inputStream = urlConnection.getInputStream()-->Line_7 $$ urlConnection.getInputStream()[ CD ]
Line_5 $$ URLConnection urlConnection = url.openConnection()-->Line_7 $$ urlConnection.getInputStream()[ FD ]
Line_3 $$ public void createHttpReader(@NotNull URL url) -->Line_8 $$ InputStreamReader inputStreamReader = contentEncoding != null ? new InputStreamReader(inputStream, contentEncoding) : new InputStreamReader(inputStream)[ CD ]
Line_3 $$ public void createHttpReader(@NotNull URL url) -->Line_11 $$ return new BufferedReader(inputStreamReader);[ CD ]
