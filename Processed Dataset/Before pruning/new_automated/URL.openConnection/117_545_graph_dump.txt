Line_0 $$ Entry-->Line_2 $$ //117
public class func [ CD ]
Line_2 $$ //117
public class func -->Line_3 $$ public void main(String[] args) [ CD ]
Line_3 $$ public void main(String[] args) -->Line_4 $$ File f = File.createTempFile("test", null)[ CD ]
Line_4 $$ File f = File.createTempFile("test", null)-->Line_4 $$ File.createTempFile("test", null)[ CD ]
Line_3 $$ public void main(String[] args) -->Line_5 $$ f.deleteOnExit()[ CD ]
Line_4 $$ File f = File.createTempFile("test", null)-->Line_5 $$ f.deleteOnExit()[ FD ]
Line_3 $$ public void main(String[] args) -->Line_6 $$ String s = f.getAbsolutePath()[ CD ]
Line_6 $$ String s = f.getAbsolutePath()-->Line_6 $$ f.getAbsolutePath()[ CD ]
Line_4 $$ File f = File.createTempFile("test", null)-->Line_6 $$ f.getAbsolutePath()[ FD ]
Line_3 $$ public void main(String[] args) -->Line_7 $$ s = s.startsWith("/") ? s : "/" + s[ CD ]
Line_6 $$ String s = f.getAbsolutePath()-->Line_7 $$ s = s.startsWith("/") ? s : "/" + s[ FD ]
Line_7 $$ s = s.startsWith("/") ? s : "/" + s-->Line_7 $$ s = s.startsWith("/") ? s : "/" + s[ FD ]
Line_6 $$ String s = f.getAbsolutePath()-->Line_7 $$ s.startsWith("/")[ FD ]
Line_7 $$ s = s.startsWith("/") ? s : "/" + s-->Line_7 $$ s.startsWith("/")[ FD ]
Line_3 $$ public void main(String[] args) -->Line_8 $$ URL url = new URL("file://localhost" + s)[ CD ]
Line_3 $$ public void main(String[] args) -->Line_9 $$ url.openConnection()[ CD ]
Line_8 $$ URL url = new URL("file://localhost" + s)-->Line_9 $$ url.openConnection()[ FD ]
Line_3 $$ public void main(String[] args) -->Line_10 $$ conn.connect()[ CD ]
Line_3 $$ public void main(String[] args) -->Line_11 $$ if (f.lastModified() != conn.getLastModified())
    throw new RuntimeException("file.lastModified() & FileURLConnection.getLastModified() should be equal");[ CD ]
Line_4 $$ File f = File.createTempFile("test", null)-->Line_11 $$ f.lastModified()[ FD ]
Line_3 $$ public void main(String[] args) -->Line_13 $$ f.delete()[ CD ]
Line_4 $$ File f = File.createTempFile("test", null)-->Line_13 $$ f.delete()[ FD ]
