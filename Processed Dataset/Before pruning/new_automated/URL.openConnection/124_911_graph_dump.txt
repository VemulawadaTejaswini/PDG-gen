Line_0 $$ Entry-->Line_2 $$ //124
public class func [ CD ]
Line_2 $$ //124
public class func -->Line_3 $$ public void testGetAuthorizationUrl() [ CD ]
Line_3 $$ public void testGetAuthorizationUrl() -->Line_4 $$ assertNotNullOrEmpty(String.format(RESOURCE_MISSING_MESSAGE, "Test callback URL."), TestConstants.TEST_CALLBACK_URL)[ CD ]
Line_3 $$ public void testGetAuthorizationUrl() -->Line_5 $$ String authorizationUrl = service.getAuthorizationUrl(TestConstants.TEST_CALLBACK_URL)[ CD ]
Line_5 $$ String authorizationUrl = service.getAuthorizationUrl(TestConstants.TEST_CALLBACK_URL)-->Line_5 $$ service.getAuthorizationUrl(TestConstants.TEST_CALLBACK_URL)[ CD ]
Line_3 $$ public void testGetAuthorizationUrl() -->Line_6 $$ assertNotNullOrEmpty("Authorization URL should not be null.", authorizationUrl)[ CD ]
Line_5 $$ String authorizationUrl = service.getAuthorizationUrl(TestConstants.TEST_CALLBACK_URL)-->Line_6 $$ assertNotNullOrEmpty("Authorization URL should not be null.", authorizationUrl)[ FD ]
Line_3 $$ public void testGetAuthorizationUrl() -->Line_7 $$ URL url = new URL(authorizationUrl)[ CD ]
Line_3 $$ public void testGetAuthorizationUrl() -->Line_8 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()[ CD ]
Line_7 $$ URL url = new URL(authorizationUrl)-->Line_8 $$ url.openConnection()[ FD ]
Line_3 $$ public void testGetAuthorizationUrl() -->Line_9 $$ if (request.getResponseCode() != HttpURLConnection.HTTP_OK) [ CD ]
Line_8 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_9 $$ request.getResponseCode()[ FD ]
Line_9 $$ if (request.getResponseCode() != HttpURLConnection.HTTP_OK) -->Line_10 $$ fail(convertStreamToString(request.getErrorStream()))[ CD ]
Line_8 $$ HttpURLConnection request = (HttpURLConnection) url.openConnection()-->Line_10 $$ request.getErrorStream()[ FD ]
