Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void getBufferedReader(URL source) [ CD ]
Line_3 $$ public void getBufferedReader(URL source) -->Line_4 $$ URLConnection conn = source.openConnection()[ CD ]
Line_4 $$ URLConnection conn = source.openConnection()-->Line_4 $$ source.openConnection()[ CD ]
Line_3 $$ public void getBufferedReader(URL source) -->Line_5 $$ boolean isGzipped = conn.getContentType() != null && conn.getContentType().equalsIgnoreCase("application/x-gzip") || conn.getContentEncoding() != null && conn.getContentEncoding().equalsIgnoreCase("gzip")[ CD ]
Line_4 $$ URLConnection conn = source.openConnection()-->Line_5 $$ conn.getContentType()[ FD ]
Line_4 $$ URLConnection conn = source.openConnection()-->Line_5 $$ conn.getContentType()[ FD ]
Line_4 $$ URLConnection conn = source.openConnection()-->Line_6 $$ conn.getContentEncoding()[ FD ]
Line_4 $$ URLConnection conn = source.openConnection()-->Line_6 $$ conn.getContentEncoding()[ FD ]
Line_3 $$ public void getBufferedReader(URL source) -->Line_7 $$ InputStream uis = conn.getInputStream()[ CD ]
Line_7 $$ InputStream uis = conn.getInputStream()-->Line_7 $$ conn.getInputStream()[ CD ]
Line_4 $$ URLConnection conn = source.openConnection()-->Line_7 $$ conn.getInputStream()[ FD ]
Line_3 $$ public void getBufferedReader(URL source) -->Line_8 $$ return new BufferedReader(isGzipped ? new InputStreamReader(new GZIPInputStream(uis)) : new InputStreamReader(uis));[ CD ]
