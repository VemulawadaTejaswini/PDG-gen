Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void urlToInputStream(URL url) [ CD ]
Line_3 $$ public void urlToInputStream(URL url) -->Line_4 $$ URLConnection conn = url.openConnection()[ CD ]
Line_4 $$ URLConnection conn = url.openConnection()-->Line_4 $$ url.openConnection()[ CD ]
Line_3 $$ public void urlToInputStream(URL url) -->Line_5 $$ conn.setRequestProperty("Accept-Encoding", "gzip, deflate")[ CD ]
Line_4 $$ URLConnection conn = url.openConnection()-->Line_5 $$ conn.setRequestProperty("Accept-Encoding", "gzip, deflate")[ FD ]
Line_3 $$ public void urlToInputStream(URL url) -->Line_6 $$ conn.connect()[ CD ]
Line_4 $$ URLConnection conn = url.openConnection()-->Line_6 $$ conn.connect()[ FD ]
Line_3 $$ public void urlToInputStream(URL url) -->Line_7 $$ String encoding = conn.getContentEncoding()[ CD ]
Line_7 $$ String encoding = conn.getContentEncoding()-->Line_7 $$ conn.getContentEncoding()[ CD ]
Line_4 $$ URLConnection conn = url.openConnection()-->Line_7 $$ conn.getContentEncoding()[ FD ]
Line_3 $$ public void urlToInputStream(URL url) -->Line_8 $$ if ((encoding != null) && encoding.equalsIgnoreCase("gzip"))
    return new GZIPInputStream(conn.getInputStream());
else if ((encoding != null) && encoding.equalsIgnoreCase("deflate"))
    return new InflaterInputStream(conn.getInputStream(), new Inflater(true));
else
    return conn.getInputStream();[ CD ]
Line_7 $$ String encoding = conn.getContentEncoding()-->Line_8 $$ encoding.equalsIgnoreCase("gzip")[ FD ]
Line_8 $$ if ((encoding != null) && encoding.equalsIgnoreCase("gzip"))
    return new GZIPInputStream(conn.getInputStream());
else if ((encoding != null) && encoding.equalsIgnoreCase("deflate"))
    return new InflaterInputStream(conn.getInputStream(), new Inflater(true));
else
    return conn.getInputStream();-->Line_9 $$ return new GZIPInputStream(conn.getInputStream());[ CD ]
Line_4 $$ URLConnection conn = url.openConnection()-->Line_9 $$ conn.getInputStream()[ FD ]
Line_8 $$ if ((encoding != null) && encoding.equalsIgnoreCase("gzip"))
    return new GZIPInputStream(conn.getInputStream());
else if ((encoding != null) && encoding.equalsIgnoreCase("deflate"))
    return new InflaterInputStream(conn.getInputStream(), new Inflater(true));
else
    return conn.getInputStream();-->Line_10 $$ if ((encoding != null) && encoding.equalsIgnoreCase("deflate"))
    return new InflaterInputStream(conn.getInputStream(), new Inflater(true));
else
    return conn.getInputStream();[ CD ]
Line_7 $$ String encoding = conn.getContentEncoding()-->Line_10 $$ encoding.equalsIgnoreCase("deflate")[ FD ]
Line_10 $$ if ((encoding != null) && encoding.equalsIgnoreCase("deflate"))
    return new InflaterInputStream(conn.getInputStream(), new Inflater(true));
else
    return conn.getInputStream();-->Line_11 $$ return new InflaterInputStream(conn.getInputStream(), new Inflater(true));[ CD ]
Line_4 $$ URLConnection conn = url.openConnection()-->Line_11 $$ conn.getInputStream()[ FD ]
Line_10 $$ if ((encoding != null) && encoding.equalsIgnoreCase("deflate"))
    return new InflaterInputStream(conn.getInputStream(), new Inflater(true));
else
    return conn.getInputStream();-->Line_14 $$ return conn.getInputStream();[ CD ]
Line_14 $$ return conn.getInputStream();-->Line_14 $$ conn.getInputStream()[ CD ]
Line_4 $$ URLConnection conn = url.openConnection()-->Line_14 $$ conn.getInputStream()[ FD ]
