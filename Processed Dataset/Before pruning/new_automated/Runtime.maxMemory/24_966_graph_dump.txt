Line_0 $$ Entry-->Line_2 $$ //24
public class func [ CD ]
Line_2 $$ //24
public class func -->Line_3 $$ public void run() [ CD ]
Line_3 $$ public void run() -->Line_4 $$ Runtime r = Runtime.getRuntime()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_4 $$ Runtime.getRuntime()[ CD ]
Line_3 $$ public void run() -->Line_5 $$ long totalMemory = r.totalMemory()[ CD ]
Line_5 $$ long totalMemory = r.totalMemory()-->Line_5 $$ r.totalMemory()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_5 $$ r.totalMemory()[ FD ]
Line_3 $$ public void run() -->Line_6 $$ long freeMemory = r.freeMemory()[ CD ]
Line_6 $$ long freeMemory = r.freeMemory()-->Line_6 $$ r.freeMemory()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_6 $$ r.freeMemory()[ FD ]
Line_3 $$ public void run() -->Line_7 $$ long maxMemory = r.maxMemory()[ CD ]
Line_7 $$ long maxMemory = r.maxMemory()-->Line_7 $$ r.maxMemory()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_7 $$ r.maxMemory()[ FD ]
Line_3 $$ public void run() -->Line_8 $$ Logger.normal(this, "Memory in use: " + SizeUtil.formatSize((totalMemory - freeMemory)))[ CD ]
Line_3 $$ public void run() -->Line_9 $$ if (totalMemory == maxMemory || maxMemory == Long.MAX_VALUE) [ CD ]
Line_9 $$ if (totalMemory == maxMemory || maxMemory == Long.MAX_VALUE) -->Line_12 $$ // totalMemory never decrease, so check it only for once
if (avgFreeMemory == null)
    avgFreeMemory = new SimpleRunningAverage(3, freeMemory);
else
    avgFreeMemory.report(freeMemory);[ CD ]
Line_12 $$ // totalMemory never decrease, so check it only for once
if (avgFreeMemory == null)
    avgFreeMemory = new SimpleRunningAverage(3, freeMemory);
else
    avgFreeMemory.report(freeMemory);-->Line_15 $$ avgFreeMemory.report(freeMemory)[ CD ]
Line_6 $$ long freeMemory = r.freeMemory()-->Line_15 $$ avgFreeMemory.report(freeMemory)[ FD ]
Line_9 $$ if (totalMemory == maxMemory || maxMemory == Long.MAX_VALUE) -->Line_17 $$ if (avgFreeMemory.countReports() >= 3 && avgFreeMemory.currentValue() < 4 * 1024 * 1024) [ CD ]
Line_17 $$ if (avgFreeMemory.countReports() >= 3 && avgFreeMemory.currentValue() < 4 * 1024 * 1024) -->Line_18 $$ Logger.normal(this, "Reached threshold, checking for low memory ...")[ CD ]
Line_17 $$ if (avgFreeMemory.countReports() >= 3 && avgFreeMemory.currentValue() < 4 * 1024 * 1024) -->Line_19 $$ System.gc()[ CD ]
Line_17 $$ if (avgFreeMemory.countReports() >= 3 && avgFreeMemory.currentValue() < 4 * 1024 * 1024) -->Line_20 $$ System.runFinalization()[ CD ]
Line_17 $$ if (avgFreeMemory.countReports() >= 3 && avgFreeMemory.currentValue() < 4 * 1024 * 1024) -->Line_27 $$ freeMemory = r.freeMemory()[ CD ]
Line_6 $$ long freeMemory = r.freeMemory()-->Line_27 $$ freeMemory = r.freeMemory()[ FD ]
Line_27 $$ freeMemory = r.freeMemory()-->Line_27 $$ freeMemory = r.freeMemory()[ FD ]
Line_27 $$ freeMemory = r.freeMemory()-->Line_27 $$ r.freeMemory()[ CD ]
Line_4 $$ Runtime r = Runtime.getRuntime()-->Line_27 $$ r.freeMemory()[ FD ]
Line_17 $$ if (avgFreeMemory.countReports() >= 3 && avgFreeMemory.currentValue() < 4 * 1024 * 1024) -->Line_28 $$ avgFreeMemory.report(freeMemory)[ CD ]
Line_6 $$ long freeMemory = r.freeMemory()-->Line_28 $$ avgFreeMemory.report(freeMemory)[ FD ]
Line_27 $$ freeMemory = r.freeMemory()-->Line_28 $$ avgFreeMemory.report(freeMemory)[ FD ]
