Line_0 $$ Entry-->Line_2 $$ //14
public class func [ CD ]
Line_2 $$ //14
public class func -->Line_3 $$ public void monitor15() [ CD ]
Line_3 $$ public void monitor15() -->Line_4 $$ Runtime rt = Runtime.getRuntime()[ CD ]
Line_4 $$ Runtime rt = Runtime.getRuntime()-->Line_4 $$ Runtime.getRuntime()[ CD ]
Line_3 $$ public void monitor15() -->Line_5 $$ log.log("Thread state: elapsed=" + elapsed + ",cpu=" + total_diffs + ",max=" + thread_name + "(" + biggest_diff + "/" + percent + "%),mem:max=" + (rt.maxMemory() / 1024) + ",tot=" + (rt.totalMemory() / 1024) + ",free=" + (rt.freeMemory() / 1024))[ CD ]
Line_4 $$ Runtime rt = Runtime.getRuntime()-->Line_5 $$ rt.maxMemory()[ FD ]
Line_4 $$ Runtime rt = Runtime.getRuntime()-->Line_5 $$ rt.totalMemory()[ FD ]
Line_4 $$ Runtime rt = Runtime.getRuntime()-->Line_5 $$ rt.freeMemory()[ FD ]
Line_3 $$ public void monitor15() -->Line_6 $$ if (biggest_diff > time_available / 4) [ CD ]
Line_6 $$ if (biggest_diff > time_available / 4) -->Line_8 $$ bean.getThreadInfo(ids[biggest_index], 255)[ CD ]
Line_6 $$ if (biggest_diff > time_available / 4) -->Line_10 $$ if (info == null) [ CD ]
Line_10 $$ if (info == null) -->Line_12 $$ log.log("    no info for max thread")[ CD ]
Line_10 $$ if (info == null) -->Line_16 $$ StackTraceElement[] elts = info.getStackTrace()[ CD ]
Line_16 $$ StackTraceElement[] elts = info.getStackTrace()-->Line_16 $$ info.getStackTrace()[ CD ]
Line_10 $$ if (info == null) -->Line_17 $$ StringBuilder str = new StringBuilder(elts.length * 20)[ CD ]
Line_10 $$ if (info == null) -->Line_19 $$ str.append("    ")[ CD ]
Line_17 $$ StringBuilder str = new StringBuilder(elts.length * 20)-->Line_19 $$ str.append("    ")[ FD ]
Line_10 $$ if (info == null) -->Line_20 $$ for (int i = 0; i < elts.length; i++) [ CD ]
Line_10 $$ if (info == null) -->Line_10 $$ if (info == null) [ CD ]
Line_20 $$ for (int i = 0; i < elts.length; i++) -->Line_20 $$ int i = 0[ CD ]
Line_20 $$ for (int i = 0; i < elts.length; i++) -->Line_20 $$ i++[ CD ]
Line_20 $$ int i = 0-->Line_20 $$ i++[ FD ]
Line_20 $$ for (int i = 0; i < elts.length; i++) -->Line_21 $$ if (i != 0)
    str.append(", ");[ CD ]
Line_20 $$ int i = 0-->Line_21 $$ if (i != 0)
    str.append(", ");[ FD ]
Line_21 $$ if (i != 0)
    str.append(", ");-->Line_22 $$ str.append(", ")[ CD ]
Line_17 $$ StringBuilder str = new StringBuilder(elts.length * 20)-->Line_22 $$ str.append(", ")[ FD ]
Line_20 $$ for (int i = 0; i < elts.length; i++) -->Line_23 $$ str.append(elts[i])[ CD ]
Line_17 $$ StringBuilder str = new StringBuilder(elts.length * 20)-->Line_23 $$ str.append(elts[i])[ FD ]
Line_10 $$ if (info == null) -->Line_26 $$ log.log(str.toString())[ CD ]
Line_17 $$ StringBuilder str = new StringBuilder(elts.length * 20)-->Line_26 $$ str.toString()[ FD ]
Line_20 $$ int i = 0-->Line_20 $$ for (int i = 0; i < elts.length; i++) [ FD ]
Line_20 $$ int i = 0-->Line_20 $$ for (int i = 0; i < elts.length; i++) [ FD ]
Line_20 $$ int i = 0-->Line_20 $$ i++[ FD ]
Line_20 $$ int i = 0-->Line_21 $$ if (i != 0)
    str.append(", ");[ FD ]
