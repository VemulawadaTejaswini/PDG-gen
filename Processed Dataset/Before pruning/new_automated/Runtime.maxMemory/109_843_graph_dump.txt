Line_0 $$ Entry-->Line_2 $$ //109
public class func [ CD ]
Line_2 $$ //109
public class func -->Line_3 $$ public void cleanMemory(String message, int count) [ CD ]
Line_3 $$ public void cleanMemory(String message, int count) -->Line_4 $$ runtime.runFinalization()[ CD ]
Line_3 $$ public void cleanMemory(String message, int count) -->Line_5 $$ runtime.gc()[ CD ]
Line_3 $$ public void cleanMemory(String message, int count) -->Line_6 $$ runtime.totalMemory()[ CD ]
Line_3 $$ public void cleanMemory(String message, int count) -->Line_7 $$ runtime.freeMemory()[ CD ]
Line_3 $$ public void cleanMemory(String message, int count) -->Line_8 $$ if (after == allocatedMemory - freeMemory)
    break;[ CD ]
Line_3 $$ public void cleanMemory(String message, int count) -->Line_9 $$ long maxMemory = runtime.maxMemory()[ CD ]
Line_9 $$ long maxMemory = runtime.maxMemory()-->Line_9 $$ runtime.maxMemory()[ CD ]
Line_3 $$ public void cleanMemory(String message, int count) -->Line_10 $$ if ((after - before) > (1024 * 1024))
    logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) (1024 * 1024)) + " MB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second");
else
    logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) 1024) + " KB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second");[ CD ]
Line_10 $$ if ((after - before) > (1024 * 1024))
    logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) (1024 * 1024)) + " MB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second");
else
    logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) 1024) + " KB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second");-->Line_10 $$ logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) (1024 * 1024)) + " MB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second")[ CD ]
Line_10 $$ if ((after - before) > (1024 * 1024))
    logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) (1024 * 1024)) + " MB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second");
else
    logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) 1024) + " KB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second");-->Line_17 $$ logger.debug(message + ": used " + dFormat.format((double) (after - before) / (double) 1024) + " KB for " + dFormat.format(count) + " objects, " + Math.round((double) (after - before) / (double) count) + " Bytes per object, " + (timestampAfter - timestampBefore) + " milliseconds, " + dFormat.format(Math.round((double) count * 1000 / (double) (timestampAfter - timestampBefore + 1))) + " objects per second")[ CD ]
