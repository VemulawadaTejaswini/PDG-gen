Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) [ CD ]
Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) -->Line_3 $$ Runtime runtime = Runtime.getRuntime()[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_3 $$ Runtime.getRuntime()[ CD ]
Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) -->Line_4 $$ long freeMem = runtime.freeMemory() / 1024 / 1024[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_4 $$ runtime.freeMemory()[ FD ]
Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) -->Line_5 $$ long maxMem = runtime.maxMemory() / 1024 / 1024[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_5 $$ runtime.maxMemory()[ FD ]
Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) -->Line_6 $$ long totalMem = runtime.totalMemory() / 1024 / 1024[ CD ]
Line_3 $$ Runtime runtime = Runtime.getRuntime()-->Line_6 $$ runtime.totalMemory()[ FD ]
Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) -->Line_7 $$ LOG.info("mem on flush (mb), free: " + freeMem + ", total: " + totalMem + ", max: " + maxMem)[ CD ]
Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) -->Line_8 $$ float percent = (float) totalMem / (float) maxMem[ CD ]
Line_2 $$ public void removeEldestEntry(Map.Entry<Key, Value> eldest) -->Line_9 $$ if (percent < 0.80F)[ CD ]
Line_8 $$ float percent = (float) totalMem / (float) maxMem-->Line_9 $$ if (percent < 0.80F)[ FD ]
Line_9 $$ if (percent < 0.80F)-->Line_10 $$ LOG.info("total mem is [ CD ]
