Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void seek(final File seekFile, long startByte) [ CD ]
Line_2 $$ public void seek(final File seekFile, long startByte) -->Line_3 $$ if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) [ CD ]
Line_3 $$ if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_3 $$ bb.remaining()[ CD ]
Line_3 $$ if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_4 $$ bb.clear()[ CD ]
Line_3 $$ if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_5 $$ fc.position(filePointerCount)[ CD ]
Line_3 $$ if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_6 $$ fc.read(bb, fc.position())[ CD ]
Line_3 $$ if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_7 $$ bb.flip()[ CD ]
Line_3 $$ if (bb.remaining() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_8 $$ if (bb.limit() <= MIN_BUFFER_REMAINING_REQUIRED) [ CD ]
Line_8 $$ if (bb.limit() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_8 $$ bb.limit()[ CD ]
Line_8 $$ if (bb.limit() <= MIN_BUFFER_REMAINING_REQUIRED) -->Line_9 $$ return false;[ CD ]
Line_2 $$ public void seek(final File seekFile, long startByte) -->Line_12 $$ if (MPEGFrameHeader.isMPEGFrame(bb)) [ CD ]
Line_12 $$ if (MPEGFrameHeader.isMPEGFrame(bb)) -->Line_12 $$ MPEGFrameHeader.isMPEGFrame(bb)[ CD ]
Line_16 $$ if (XingFrame.isXingFrame(bb, mp3FrameHeader)) -->Line_16 $$ XingFrame.isXingFrame(bb, mp3FrameHeader)[ CD ]
Line_16 $$ if (XingFrame.isXingFrame(bb, mp3FrameHeader)) -->Line_22 $$ if (VbriFrame.isVbriFrame(bb, mp3FrameHeader)) [ CD ]
Line_22 $$ if (VbriFrame.isVbriFrame(bb, mp3FrameHeader)) -->Line_22 $$ VbriFrame.isVbriFrame(bb, mp3FrameHeader)[ CD ]
Line_22 $$ if (VbriFrame.isVbriFrame(bb, mp3FrameHeader)) -->Line_30 $$ isNextFrameValid(seekFile, filePointerCount, bb, fc)[ CD ]
Line_22 $$ if (VbriFrame.isVbriFrame(bb, mp3FrameHeader)) -->Line_31 $$ if (syncFound) [ CD ]
Line_2 $$ public void seek(final File seekFile, long startByte) -->Line_38 $$ bb.position(bb.position() + 1)[ CD ]
