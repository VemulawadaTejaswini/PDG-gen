Line_0 $$ Entry-->Line_1 $$ public class func [ CD ]
Line_1 $$ public class func -->Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) [ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_3 $$ buffer.rewind()[ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_4 $$ int read = channel.read(buffer, start)[ CD ]
Line_4 $$ int read = channel.read(buffer, start)-->Line_4 $$ channel.read(buffer, start)[ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_5 $$ if (read < 4)[ CD ]
Line_4 $$ int read = channel.read(buffer, start)-->Line_5 $$ if (read < 4)[ FD ]
Line_5 $$ if (read < 4)-->Line_5 $$ return -1;[ CD ]
Line_5 $$ return -1;-->Line_5 $$ -1[ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_6 $$ int size = buffer.getInt(0)[ CD ]
Line_6 $$ int size = buffer.getInt(0)-->Line_6 $$ buffer.getInt(0)[ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_7 $$ if (size < Message.MinHeaderSize)[ CD ]
Line_6 $$ int size = buffer.getInt(0)-->Line_7 $$ if (size < Message.MinHeaderSize)[ FD ]
Line_7 $$ if (size < Message.MinHeaderSize)-->Line_7 $$ return -1;[ CD ]
Line_7 $$ return -1;-->Line_7 $$ -1[ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_8 $$ if (next > len)[ CD ]
Line_8 $$ if (next > len)-->Line_8 $$ return -1;[ CD ]
Line_8 $$ return -1;-->Line_8 $$ -1[ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_9 $$ ByteBuffer messageBuffer = ByteBuffer.allocate(size)[ CD ]
Line_9 $$ ByteBuffer messageBuffer = ByteBuffer.allocate(size)-->Line_9 $$ ByteBuffer.allocate(size)[ CD ]
Line_6 $$ int size = buffer.getInt(0)-->Line_9 $$ ByteBuffer.allocate(size)[ FD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_10 $$ while (messageBuffer.hasRemaining()) [ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) [ CD ]
Line_10 $$ while (messageBuffer.hasRemaining()) -->Line_10 $$ messageBuffer.hasRemaining()[ CD ]
Line_9 $$ ByteBuffer messageBuffer = ByteBuffer.allocate(size)-->Line_10 $$ messageBuffer.hasRemaining()[ FD ]
Line_10 $$ while (messageBuffer.hasRemaining()) -->Line_11 $$ read = channel.read(messageBuffer, curr)[ CD ]
Line_11 $$ read = channel.read(messageBuffer, curr)-->Line_11 $$ read = channel.read(messageBuffer, curr)[ FD ]
Line_4 $$ int read = channel.read(buffer, start)-->Line_11 $$ read = channel.read(messageBuffer, curr)[ FD ]
Line_11 $$ read = channel.read(messageBuffer, curr)-->Line_11 $$ channel.read(messageBuffer, curr)[ CD ]
Line_9 $$ ByteBuffer messageBuffer = ByteBuffer.allocate(size)-->Line_11 $$ channel.read(messageBuffer, curr)[ FD ]
Line_10 $$ while (messageBuffer.hasRemaining()) -->Line_12 $$ if (read < 0)[ CD ]
Line_11 $$ read = channel.read(messageBuffer, curr)-->Line_12 $$ if (read < 0)[ FD ]
Line_4 $$ int read = channel.read(buffer, start)-->Line_12 $$ if (read < 0)[ FD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_15 $$ messageBuffer.rewind()[ CD ]
Line_9 $$ ByteBuffer messageBuffer = ByteBuffer.allocate(size)-->Line_15 $$ messageBuffer.rewind()[ FD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_16 $$ Message message = new Message(messageBuffer)[ CD ]
Line_2 $$ public void validateMessage(FileChannel channel, long start, long len, ByteBuffer buffer) -->Line_17 $$ if (!message.isValid())[ CD ]
Line_17 $$ if (!message.isValid())-->Line_17 $$ !message.isValid()[ CD ]
Line_17 $$ !message.isValid()-->Line_17 $$ message.isValid()[ CD ]
Line_16 $$ Message message = new Message(messageBuffer)-->Line_17 $$ message.isValid()[ FD ]
Line_17 $$ if (!message.isValid())-->Line_17 $$ return -1;[ CD ]
Line_17 $$ return -1;-->Line_17 $$ -1[ CD ]
Line_17 $$ if (!message.isValid())-->Line_18 $$ return next;[ CD ]
Line_11 $$ read = channel.read(messageBuffer, curr)-->Line_12 $$ if (read < 0)[ FD ]
