Line_0 $$ Entry-->Line_2 $$ //26
public class func [ CD ]
Line_2 $$ //26
public class func -->Line_3 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() [ CD ]
Line_3 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_4 $$ Class[] interfacesA = [ CD ]
Line_3 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_5 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)[ CD ]
Line_5 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_5 $$ Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)[ CD ]
Line_4 $$ Class[] interfacesA = -->Line_5 $$ Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)[ FD ]
Line_3 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_6 $$ assertEquals(loaderA, proxy.getClass().getClassLoader())[ CD ]
Line_5 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_6 $$ proxy.getClass()[ FD ]
Line_3 $$ public void testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() -->Line_7 $$ assertEquals("foo", proxy.getClass().getMethod("echo", String.class).invoke(proxy, "foo"))[ CD ]
Line_5 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_7 $$ proxy.getClass().getMethod("echo", String.class).invoke(proxy, "foo")[ FD ]
Line_5 $$ Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB)-->Line_7 $$ proxy.getClass()[ FD ]
