Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void testTryCatchFinally() [ CD ]
Line_3 $$ public void testTryCatchFinally() -->Line_4 $$ ClassLoader loader = mergeAndLoad("/testdata/Basic.dex", "/testdata/TryCatchFinally.dex")[ CD ]
Line_4 $$ ClassLoader loader = mergeAndLoad("/testdata/Basic.dex", "/testdata/TryCatchFinally.dex")-->Line_4 $$ mergeAndLoad("/testdata/Basic.dex", "/testdata/TryCatchFinally.dex")[ CD ]
Line_3 $$ public void testTryCatchFinally() -->Line_7 $$ Class<?> basic = loader.loadClass("testdata.Basic")[ CD ]
Line_7 $$ Class<?> basic = loader.loadClass("testdata.Basic")-->Line_7 $$ loader.loadClass("testdata.Basic")[ CD ]
Line_4 $$ ClassLoader loader = mergeAndLoad("/testdata/Basic.dex", "/testdata/TryCatchFinally.dex")-->Line_7 $$ loader.loadClass("testdata.Basic")[ FD ]
Line_3 $$ public void testTryCatchFinally() -->Line_8 $$ assertEquals(1, basic.getDeclaredMethods().length)[ CD ]
Line_7 $$ Class<?> basic = loader.loadClass("testdata.Basic")-->Line_8 $$ basic.getDeclaredMethods()[ FD ]
Line_3 $$ public void testTryCatchFinally() -->Line_9 $$ Class<?> tryCatchFinally = loader.loadClass("testdata.TryCatchFinally")[ CD ]
Line_9 $$ Class<?> tryCatchFinally = loader.loadClass("testdata.TryCatchFinally")-->Line_9 $$ loader.loadClass("testdata.TryCatchFinally")[ CD ]
Line_4 $$ ClassLoader loader = mergeAndLoad("/testdata/Basic.dex", "/testdata/TryCatchFinally.dex")-->Line_9 $$ loader.loadClass("testdata.TryCatchFinally")[ FD ]
Line_3 $$ public void testTryCatchFinally() -->Line_10 $$ tryCatchFinally.getDeclaredMethod("method").invoke(null)[ CD ]
Line_9 $$ Class<?> tryCatchFinally = loader.loadClass("testdata.TryCatchFinally")-->Line_10 $$ tryCatchFinally.getDeclaredMethod("method")[ FD ]
