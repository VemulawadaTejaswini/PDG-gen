Line_0 $$ Entry-->Line_2 $$ //32
public class func [ CD ]
Line_2 $$ //32
public class func -->Line_3 $$ public void getMessage() [ CD ]
Line_3 $$ public void getMessage() -->Line_4 $$ sb.append(request.getMethod())[ CD ]
Line_3 $$ public void getMessage() -->Line_5 $$ sb.append(' ')[ CD ]
Line_3 $$ public void getMessage() -->Line_6 $$ final URI uri = request.getUri().toJavaNetURI()[ CD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_6 $$ request.getUri().toJavaNetURI()[ CD ]
Line_3 $$ public void getMessage() -->Line_7 $$ final String userInfo = uri.getUserInfo()[ CD ]
Line_7 $$ final String userInfo = uri.getUserInfo()-->Line_7 $$ uri.getUserInfo()[ CD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_7 $$ uri.getUserInfo()[ FD ]
Line_3 $$ public void getMessage() -->Line_8 $$ if (userInfo != null) [ CD ]
Line_7 $$ final String userInfo = uri.getUserInfo()-->Line_8 $$ if (userInfo != null) [ FD ]
Line_8 $$ if (userInfo != null) -->Line_9 $$ final Iterable<String> userSplitter = Splitter.on(':').trimResults().omitEmptyStrings().split(userInfo)[ CD ]
Line_9 $$ final Iterable<String> userSplitter = Splitter.on(':').trimResults().omitEmptyStrings().split(userInfo)-->Line_9 $$ Splitter.on(':').trimResults().omitEmptyStrings().split(userInfo)[ CD ]
Line_7 $$ final String userInfo = uri.getUserInfo()-->Line_9 $$ Splitter.on(':').trimResults().omitEmptyStrings().split(userInfo)[ FD ]
Line_8 $$ if (userInfo != null) -->Line_10 $$ final Iterator<String> it = userSplitter.iterator()[ CD ]
Line_10 $$ final Iterator<String> it = userSplitter.iterator()-->Line_10 $$ userSplitter.iterator()[ CD ]
Line_9 $$ final Iterable<String> userSplitter = Splitter.on(':').trimResults().omitEmptyStrings().split(userInfo)-->Line_10 $$ userSplitter.iterator()[ FD ]
Line_8 $$ if (userInfo != null) -->Line_11 $$ if (it.hasNext()) [ CD ]
Line_10 $$ final Iterator<String> it = userSplitter.iterator()-->Line_11 $$ if (it.hasNext()) [ FD ]
Line_11 $$ if (it.hasNext()) -->Line_11 $$ it.hasNext()[ CD ]
Line_10 $$ final Iterator<String> it = userSplitter.iterator()-->Line_11 $$ it.hasNext()[ FD ]
Line_11 $$ if (it.hasNext()) -->Line_12 $$ it.next()[ CD ]
Line_10 $$ final Iterator<String> it = userSplitter.iterator()-->Line_12 $$ it.next()[ FD ]
Line_3 $$ public void getMessage() -->Line_15 $$ final URI cleanUri = new URI(uri.getScheme(), username, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())[ CD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_15 $$ uri.getScheme()[ FD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_15 $$ uri.getHost()[ FD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_15 $$ uri.getPort()[ FD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_15 $$ uri.getPath()[ FD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_15 $$ uri.getQuery()[ FD ]
Line_6 $$ final URI uri = request.getUri().toJavaNetURI()-->Line_15 $$ uri.getFragment()[ FD ]
Line_3 $$ public void getMessage() -->Line_16 $$ sb.append(cleanUri.toASCIIString())[ CD ]
Line_15 $$ final URI cleanUri = new URI(uri.getScheme(), username, uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_16 $$ cleanUri.toASCIIString()[ FD ]
Line_3 $$ public void getMessage() -->Line_17 $$ sb.append("invalid URL")[ CD ]
