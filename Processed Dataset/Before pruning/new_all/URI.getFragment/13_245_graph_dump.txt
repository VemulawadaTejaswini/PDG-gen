Line_0 $$ Entry-->Line_2 $$ //12
public class func [ CD ]
Line_2 $$ //12
public class func -->Line_3 $$ public void checkUri(URI uri) [ CD ]
Line_3 $$ public void checkUri(URI uri) -->Line_4 $$ if (!uri.getScheme().equalsIgnoreCase(getScheme()))
    throw new IllegalArgumentException("URI does not match this provider");[ CD ]
Line_4 $$ if (!uri.getScheme().equalsIgnoreCase(getScheme()))
    throw new IllegalArgumentException("URI does not match this provider");-->Line_4 $$ !uri.getScheme().equalsIgnoreCase(getScheme())[ CD ]
Line_4 $$ !uri.getScheme().equalsIgnoreCase(getScheme())-->Line_4 $$ uri.getScheme().equalsIgnoreCase(getScheme())[ CD ]
Line_3 $$ public void checkUri(URI uri) -->Line_6 $$ if (uri.getAuthority() != null)
    throw new IllegalArgumentException("Authority component present");[ CD ]
Line_3 $$ public void checkUri(URI uri) -->Line_8 $$ if (uri.getPath() == null)
    throw new IllegalArgumentException("Path component is undefined");[ CD ]
Line_3 $$ public void checkUri(URI uri) -->Line_10 $$ if (!uri.getPath().equals("/"))
    throw new IllegalArgumentException("Path component should be '/'");[ CD ]
Line_10 $$ if (!uri.getPath().equals("/"))
    throw new IllegalArgumentException("Path component should be '/'");-->Line_10 $$ !uri.getPath().equals("/")[ CD ]
Line_10 $$ !uri.getPath().equals("/")-->Line_10 $$ uri.getPath().equals("/")[ CD ]
Line_3 $$ public void checkUri(URI uri) -->Line_12 $$ if (uri.getQuery() != null)
    throw new IllegalArgumentException("Query component present");[ CD ]
Line_3 $$ public void checkUri(URI uri) -->Line_14 $$ if (uri.getFragment() != null)
    throw new IllegalArgumentException("Fragment component present");[ CD ]
