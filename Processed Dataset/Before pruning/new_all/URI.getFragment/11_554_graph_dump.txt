Line_0 $$ Entry-->Line_2 $$ //10
public class func [ CD ]
Line_2 $$ //10
public class func -->Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) [ CD ]
Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_4 $$ if ((uris.length != timestamps.length) || (uris.length != sizes.length) || (uris.length != visibilities.length)) [ CD ]
Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_13 $$ for (int i = 0; i < uris.length; ++i) [ CD ]
Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) -->Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, Map<String, LocalResource> localResources, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[]) [ CD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_13 $$ int i = 0[ CD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_13 $$ ++i[ CD ]
Line_13 $$ int i = 0-->Line_13 $$ ++i[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_14 $$ URI u = uris[i][ CD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_15 $$ Path p = new Path(u)[ CD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)[ CD ]
Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_16 $$ p.getFileSystem(conf)[ CD ]
Line_15 $$ Path p = new Path(u)-->Line_16 $$ p.getFileSystem(conf)[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ CD ]
Line_15 $$ Path p = new Path(u)-->Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_17 $$ remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ CD ]
Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_17 $$ remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_17 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_17 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_17 $$ remoteFS.getUri()[ FD ]
Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_18 $$ remoteFS.getWorkingDirectory()[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_20 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ CD ]
Line_14 $$ URI u = uris[i]-->Line_20 $$ u.getFragment()[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_21 $$ p.getName()[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_21 $$ p.getName()[ FD ]
Line_14 $$ URI u = uris[i]-->Line_22 $$ u.getFragment()[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_23 $$ if (name.isAbsolute()) [ CD ]
Line_20 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_23 $$ if (name.isAbsolute()) [ FD ]
Line_23 $$ if (name.isAbsolute()) -->Line_23 $$ name.isAbsolute()[ CD ]
Line_20 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_23 $$ name.isAbsolute()[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_26 $$ String linkName = name.toUri().getPath()[ CD ]
Line_26 $$ String linkName = name.toUri().getPath()-->Line_26 $$ name.toUri().getPath()[ CD ]
Line_20 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_26 $$ name.toUri()[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_27 $$ LocalResource orig = localResources.get(linkName)[ CD ]
Line_27 $$ LocalResource orig = localResources.get(linkName)-->Line_27 $$ localResources.get(linkName)[ CD ]
Line_26 $$ String linkName = name.toUri().getPath()-->Line_27 $$ localResources.get(linkName)[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_28 $$ if (orig != null && !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))) [ CD ]
Line_28 $$ !orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))-->Line_28 $$ orig.getResource().equals(ConverterUtils.getYarnUrlFromURI(p.toUri()))[ CD ]
Line_27 $$ LocalResource orig = localResources.get(linkName)-->Line_28 $$ orig.getResource()[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_29 $$ p.toUri()[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_29 $$ p.toUri()[ FD ]
Line_27 $$ LocalResource orig = localResources.get(linkName)-->Line_31 $$ orig.getType()[ FD ]
Line_27 $$ LocalResource orig = localResources.get(linkName)-->Line_31 $$ orig.getResource()[ FD ]
Line_13 $$ for (int i = 0; i < uris.length; ++i) -->Line_34 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ CD ]
Line_26 $$ String linkName = name.toUri().getPath()-->Line_34 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_35 $$ p.toUri()[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_35 $$ p.toUri()[ FD ]
Line_13 $$ int i = 0-->Line_13 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_13 $$ int i = 0-->Line_13 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_13 $$ int i = 0-->Line_13 $$ ++i[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_16 $$ p.getFileSystem(conf)[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_16 $$ p.getFileSystem(conf)[ FD ]
Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_17 $$ remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_17 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_17 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_17 $$ remoteFS.getUri()[ FD ]
Line_16 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_18 $$ remoteFS.getWorkingDirectory()[ FD ]
Line_14 $$ URI u = uris[i]-->Line_20 $$ u.getFragment()[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_21 $$ p.getName()[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_21 $$ p.getName()[ FD ]
Line_14 $$ URI u = uris[i]-->Line_22 $$ u.getFragment()[ FD ]
Line_20 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_23 $$ if (name.isAbsolute()) [ FD ]
Line_20 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_23 $$ name.isAbsolute()[ FD ]
Line_20 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_26 $$ name.toUri()[ FD ]
Line_26 $$ String linkName = name.toUri().getPath()-->Line_27 $$ localResources.get(linkName)[ FD ]
Line_27 $$ LocalResource orig = localResources.get(linkName)-->Line_28 $$ orig.getResource()[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_29 $$ p.toUri()[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_29 $$ p.toUri()[ FD ]
Line_27 $$ LocalResource orig = localResources.get(linkName)-->Line_31 $$ orig.getType()[ FD ]
Line_27 $$ LocalResource orig = localResources.get(linkName)-->Line_31 $$ orig.getResource()[ FD ]
Line_26 $$ String linkName = name.toUri().getPath()-->Line_34 $$ localResources.put(linkName, LocalResource.newInstance(ConverterUtils.getYarnUrlFromURI(p.toUri()), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_15 $$ Path p = new Path(u)-->Line_35 $$ p.toUri()[ FD ]
Line_17 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_35 $$ p.toUri()[ FD ]
