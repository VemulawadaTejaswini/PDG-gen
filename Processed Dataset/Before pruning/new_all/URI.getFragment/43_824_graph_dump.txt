Line_0 $$ Entry-->Line_2 $$ //42
public class func [ CD ]
Line_2 $$ //42
public class func -->Line_3 $$ public void updatePortAndSchemeInAuthority(final URI uri) [ CD ]
Line_3 $$ public void updatePortAndSchemeInAuthority(final URI uri) -->Line_4 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())[ CD ]
Line_4 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_4 $$ HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())[ CD ]
Line_3 $$ public void updatePortAndSchemeInAuthority(final URI uri) -->Line_5 $$ if (matcher.matches()) [ CD ]
Line_4 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_5 $$ if (matcher.matches()) [ FD ]
Line_5 $$ if (matcher.matches()) -->Line_5 $$ matcher.matches()[ CD ]
Line_4 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_5 $$ matcher.matches()[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_6 $$ int port = Integer.parseInt(matcher.group(2))[ CD ]
Line_6 $$ int port = Integer.parseInt(matcher.group(2))-->Line_6 $$ Integer.parseInt(matcher.group(2))[ CD ]
Line_4 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_6 $$ matcher.group(2)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_7 $$ authority.substring(0, matcher.start(2))[ CD ]
Line_4 $$ Matcher matcher = HTTP_AUTHORITY_PORT_EXTRACTOR.matcher(uri.getAuthority())-->Line_7 $$ matcher.start(2)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_9 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) [ CD ]
Line_6 $$ int port = Integer.parseInt(matcher.group(2))-->Line_9 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) [ FD ]
Line_9 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) -->Line_9 $$ UseHttpForHttpsProcessor.this.portMapping.containsKey(port)[ CD ]
Line_6 $$ int port = Integer.parseInt(matcher.group(2))-->Line_9 $$ UseHttpForHttpsProcessor.this.portMapping.containsKey(port)[ FD ]
Line_9 $$ if (UseHttpForHttpsProcessor.this.portMapping.containsKey(port)) -->Line_10 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)[ CD ]
Line_6 $$ int port = Integer.parseInt(matcher.group(2))-->Line_10 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
Line_10 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)-->Line_10 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
Line_10 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)-->Line_10 $$ UseHttpForHttpsProcessor.this.portMapping.get(port)[ CD ]
Line_6 $$ int port = Integer.parseInt(matcher.group(2))-->Line_10 $$ UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
Line_10 $$ port = UseHttpForHttpsProcessor.this.portMapping.get(port)-->Line_10 $$ UseHttpForHttpsProcessor.this.portMapping.get(port)[ FD ]
