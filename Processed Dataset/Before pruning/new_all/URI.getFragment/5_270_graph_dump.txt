Line_0 $$ Entry-->Line_2 $$ //4
public class func [ CD ]
Line_2 $$ //4
public class func -->Line_3 $$ public void configureSentinel(URI uri) [ CD ]
Line_3 $$ public void configureSentinel(URI uri) -->Line_4 $$ checkArgument(isNotEmpty(uri.getFragment()), "URI Fragment must contain the sentinelMasterId")[ CD ]
Line_3 $$ public void configureSentinel(URI uri) -->Line_5 $$ String masterId = uri.getFragment()[ CD ]
Line_5 $$ String masterId = uri.getFragment()-->Line_5 $$ uri.getFragment()[ CD ]
Line_3 $$ public void configureSentinel(URI uri) -->Line_6 $$ if (isNotEmpty(uri.getHost())) [ CD ]
Line_6 $$ if (isNotEmpty(uri.getHost())) -->Line_6 $$ isNotEmpty(uri.getHost())[ CD ]
Line_6 $$ if (isNotEmpty(uri.getHost())) -->Line_7 $$ if (uri.getPort() != -1) [ CD ]
Line_7 $$ if (uri.getPort() != -1) -->Line_8 $$ RedisURI.Builder.sentinel(uri.getHost(), uri.getPort(), masterId)[ CD ]
Line_5 $$ String masterId = uri.getFragment()-->Line_8 $$ RedisURI.Builder.sentinel(uri.getHost(), uri.getPort(), masterId)[ FD ]
Line_7 $$ if (uri.getPort() != -1) -->Line_10 $$ RedisURI.Builder.sentinel(uri.getHost(), masterId)[ CD ]
Line_5 $$ String masterId = uri.getFragment()-->Line_10 $$ RedisURI.Builder.sentinel(uri.getHost(), masterId)[ FD ]
Line_3 $$ public void configureSentinel(URI uri) -->Line_13 $$ if (builder == null && isNotEmpty(uri.getAuthority())) [ CD ]
Line_13 $$ if (builder == null && isNotEmpty(uri.getAuthority())) -->Line_14 $$ String authority = uri.getAuthority()[ CD ]
Line_14 $$ String authority = uri.getAuthority()-->Line_14 $$ uri.getAuthority()[ CD ]
Line_13 $$ if (builder == null && isNotEmpty(uri.getAuthority())) -->Line_15 $$ if (authority.indexOf('@') > -1) [ CD ]
Line_14 $$ String authority = uri.getAuthority()-->Line_15 $$ authority.indexOf('@')[ FD ]
Line_15 $$ if (authority.indexOf('@') > -1) -->Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)[ CD ]
Line_14 $$ String authority = uri.getAuthority()-->Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_16 $$ authority.substring(authority.indexOf('@') + 1)[ CD ]
Line_14 $$ String authority = uri.getAuthority()-->Line_16 $$ authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_16 $$ authority.substring(authority.indexOf('@') + 1)[ FD ]
Line_14 $$ String authority = uri.getAuthority()-->Line_16 $$ authority.indexOf('@')[ FD ]
Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_16 $$ authority.indexOf('@')[ FD ]
Line_13 $$ if (builder == null && isNotEmpty(uri.getAuthority())) -->Line_19 $$ String[] hosts = authority.split("\\,")[ CD ]
Line_19 $$ String[] hosts = authority.split("\\,")-->Line_19 $$ authority.split("\\,")[ CD ]
Line_14 $$ String authority = uri.getAuthority()-->Line_19 $$ authority.split("\\,")[ FD ]
Line_16 $$ authority = authority.substring(authority.indexOf('@') + 1)-->Line_19 $$ authority.split("\\,")[ FD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_21 $$ HostAndPort.fromString(host)[ CD ]
Line_20 $$ String host-->Line_21 $$ HostAndPort.fromString(host)[ FD ]
Line_22 $$ if (builder == null) -->Line_23 $$ if (hostAndPort.hasPort()) [ CD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_23 $$ if (hostAndPort.hasPort()) [ FD ]
Line_23 $$ if (hostAndPort.hasPort()) -->Line_23 $$ hostAndPort.hasPort()[ CD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_23 $$ hostAndPort.hasPort()[ FD ]
Line_23 $$ if (hostAndPort.hasPort()) -->Line_24 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), hostAndPort.getPort(), masterId)[ CD ]
Line_5 $$ String masterId = uri.getFragment()-->Line_24 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), hostAndPort.getPort(), masterId)[ FD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_24 $$ hostAndPort.getHostText()[ FD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_24 $$ hostAndPort.getPort()[ FD ]
Line_23 $$ if (hostAndPort.hasPort()) -->Line_26 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), masterId)[ CD ]
Line_5 $$ String masterId = uri.getFragment()-->Line_26 $$ RedisURI.Builder.sentinel(hostAndPort.getHostText(), masterId)[ FD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_26 $$ hostAndPort.getHostText()[ FD ]
Line_22 $$ if (builder == null) -->Line_29 $$ if (hostAndPort.hasPort()) [ CD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_29 $$ if (hostAndPort.hasPort()) [ FD ]
Line_29 $$ if (hostAndPort.hasPort()) -->Line_29 $$ hostAndPort.hasPort()[ CD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_29 $$ hostAndPort.hasPort()[ FD ]
Line_29 $$ if (hostAndPort.hasPort()) -->Line_30 $$ builder.withSentinel(hostAndPort.getHostText(), hostAndPort.getPort())[ CD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_30 $$ hostAndPort.getHostText()[ FD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_30 $$ hostAndPort.getPort()[ FD ]
Line_29 $$ if (hostAndPort.hasPort()) -->Line_32 $$ builder.withSentinel(hostAndPort.getHostText())[ CD ]
Line_21 $$ HostAndPort hostAndPort = HostAndPort.fromString(host)-->Line_32 $$ hostAndPort.getHostText()[ FD ]
Line_3 $$ public void configureSentinel(URI uri) -->Line_38 $$ checkArgument(builder != null, "Invalid URI, cannot get host part")[ CD ]
