Line_0 $$ Entry-->Line_2 $$ //15
public class func [ CD ]
Line_2 $$ //15
public class func -->Line_3 $$ public void parseURI(String original, boolean mustBePath) [ CD ]
Line_3 $$ public void parseURI(String original, boolean mustBePath) -->Line_4 $$ original.indexOf(':')[ CD ]
Line_3 $$ public void parseURI(String original, boolean mustBePath) -->Line_5 $$ if (idxColon != -1) [ CD ]
Line_5 $$ if (idxColon != -1) -->Line_5 $$ -1[ CD ]
Line_5 $$ if (idxColon != -1) -->Line_7 $$ // colon present
if (// There's a slash, and it's before the colon â�� everything OK
(idxSlash != -1) && idxSlash < idxColon)
    ;
else
    // No slash before the colon; we have to put it there
    original = "./" + original;[ CD ]
Line_7 $$ // colon present
if (// There's a slash, and it's before the colon â�� everything OK
(idxSlash != -1) && idxSlash < idxColon)
    ;
else
    // No slash before the colon; we have to put it there
    original = "./" + original;-->Line_10 $$ original = "./" + original[ CD ]
Line_10 $$ original = "./" + original-->Line_10 $$ original = "./" + original[ FD ]
Line_10 $$ original = "./" + original-->Line_10 $$ original = "./" + original[ FD ]
Line_3 $$ public void parseURI(String original, boolean mustBePath) -->Line_12 $$ String repaired = original.replaceAll(" ", "%20").replaceAll("\\[ CD ]
Line_12 $$ String repaired = original.replaceAll(" ", "%20").replaceAll("\\-->Line_12 $$ original.replaceAll(" ", "%20").replaceAll("\\[ CD ]
Line_10 $$ original = "./" + original-->Line_12 $$ original.replaceAll(" ", "%20")[ FD ]
Line_3 $$ public void parseURI(String original, boolean mustBePath) -->Line_16 $$ if (!repaired.equals(original))
    Log.w(TAG, "Repaired invalid URL: " + original + " -> " + repaired);[ CD ]
Line_16 $$ if (!repaired.equals(original))
    Log.w(TAG, "Repaired invalid URL: " + original + " -> " + repaired);-->Line_16 $$ !repaired.equals(original)[ CD ]
Line_16 $$ !repaired.equals(original)-->Line_16 $$ repaired.equals(original)[ CD ]
Line_12 $$ String repaired = original.replaceAll(" ", "%20").replaceAll("\\-->Line_16 $$ repaired.equals(original)[ FD ]
Line_10 $$ original = "./" + original-->Line_16 $$ repaired.equals(original)[ FD ]
Line_16 $$ if (!repaired.equals(original))
    Log.w(TAG, "Repaired invalid URL: " + original + " -> " + repaired);-->Line_17 $$ Log.w(TAG, "Repaired invalid URL: " + original + " -> " + repaired)[ CD ]
Line_3 $$ public void parseURI(String original, boolean mustBePath) -->Line_18 $$ URI uri = new URI(repaired)[ CD ]
Line_3 $$ public void parseURI(String original, boolean mustBePath) -->Line_19 $$ URI normalized = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())[ CD ]
Line_18 $$ URI uri = new URI(repaired)-->Line_19 $$ uri.getScheme()[ FD ]
Line_18 $$ URI uri = new URI(repaired)-->Line_19 $$ uri.getAuthority()[ FD ]
Line_18 $$ URI uri = new URI(repaired)-->Line_19 $$ uri.getPath()[ FD ]
Line_18 $$ URI uri = new URI(repaired)-->Line_19 $$ uri.getQuery()[ FD ]
Line_18 $$ URI uri = new URI(repaired)-->Line_19 $$ uri.getFragment()[ FD ]
Line_3 $$ public void parseURI(String original, boolean mustBePath) -->Line_20 $$ Log.v(TAG, "Normalized URI " + original + " -> " + normalized.toASCIIString() + " assuming that it was " + (mustBePath ? "a path name" : "an URI or path name"))[ CD ]
Line_19 $$ URI normalized = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), uri.getFragment())-->Line_20 $$ normalized.toASCIIString()[ FD ]
