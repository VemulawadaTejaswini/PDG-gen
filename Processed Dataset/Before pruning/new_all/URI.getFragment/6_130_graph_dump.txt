Line_0 $$ Entry-->Line_2 $$ //5
public class func [ CD ]
Line_2 $$ //5
public class func -->Line_3 $$ public void addToClasspathIfNotJar(Path[] paths, URI[] withLinks, Configuration conf, Map<String, String> environment, String classpathEnvVar) [ CD ]
Line_3 $$ public void addToClasspathIfNotJar(Path[] paths, URI[] withLinks, Configuration conf, Map<String, String> environment, String classpathEnvVar) -->Line_4 $$ if (withLinks != null) [ CD ]
Line_7 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_7 $$ p.getFileSystem(conf)[ CD ]
Line_6 $$ Path p = new Path(u)-->Line_7 $$ p.getFileSystem(conf)[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_8 $$ remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ CD ]
Line_7 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_8 $$ remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_8 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_8 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_7 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_8 $$ remoteFS.getUri()[ FD ]
Line_7 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_9 $$ remoteFS.getWorkingDirectory()[ FD ]
Line_5 $$ URI u-->Line_10 $$ u.getFragment()[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_11 $$ p.getName()[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_11 $$ p.getName()[ FD ]
Line_5 $$ URI u-->Line_11 $$ u.getFragment()[ FD ]
Line_12 $$ if (!StringUtils.toLowerCase(name).endsWith(".jar")) -->Line_12 $$ !StringUtils.toLowerCase(name).endsWith(".jar")[ CD ]
Line_12 $$ !StringUtils.toLowerCase(name).endsWith(".jar")-->Line_12 $$ StringUtils.toLowerCase(name).endsWith(".jar")[ CD ]
Line_10 $$ String name = (null == u.getFragment()) ? p.getName() : u.getFragment()-->Line_12 $$ StringUtils.toLowerCase(name)[ FD ]
Line_12 $$ if (!StringUtils.toLowerCase(name).endsWith(".jar")) -->Line_13 $$ linkLookup.put(p, name)[ CD ]
Line_6 $$ Path p = new Path(u)-->Line_13 $$ linkLookup.put(p, name)[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_13 $$ linkLookup.put(p, name)[ FD ]
Line_10 $$ String name = (null == u.getFragment()) ? p.getName() : u.getFragment()-->Line_13 $$ linkLookup.put(p, name)[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_18 $$ p.getFileSystem(conf)[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_18 $$ p.getFileSystem(conf)[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_19 $$ remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ CD ]
Line_7 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_19 $$ remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_19 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_19 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_19 $$ p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory())[ FD ]
Line_7 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_19 $$ remoteFS.getUri()[ FD ]
Line_7 $$ FileSystem remoteFS = p.getFileSystem(conf)-->Line_20 $$ remoteFS.getWorkingDirectory()[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_21 $$ linkLookup.get(p)[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_21 $$ linkLookup.get(p)[ FD ]
Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_21 $$ linkLookup.get(p)[ FD ]
Line_10 $$ String name = (null == u.getFragment()) ? p.getName() : u.getFragment()-->Line_22 $$ if (name == null) [ FD ]
Line_22 $$ if (name == null) -->Line_23 $$ name = p.getName()[ CD ]
Line_10 $$ String name = (null == u.getFragment()) ? p.getName() : u.getFragment()-->Line_23 $$ name = p.getName()[ FD ]
Line_23 $$ name = p.getName()-->Line_23 $$ name = p.getName()[ FD ]
Line_23 $$ name = p.getName()-->Line_23 $$ p.getName()[ CD ]
Line_6 $$ Path p = new Path(u)-->Line_23 $$ p.getName()[ FD ]
Line_8 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_23 $$ p.getName()[ FD ]
Line_19 $$ p = remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory()))-->Line_23 $$ p.getName()[ FD ]
Line_25 $$ if (!StringUtils.toLowerCase(name).endsWith(".jar")) -->Line_25 $$ !StringUtils.toLowerCase(name).endsWith(".jar")[ CD ]
Line_25 $$ !StringUtils.toLowerCase(name).endsWith(".jar")-->Line_25 $$ StringUtils.toLowerCase(name).endsWith(".jar")[ CD ]
Line_10 $$ String name = (null == u.getFragment()) ? p.getName() : u.getFragment()-->Line_25 $$ StringUtils.toLowerCase(name)[ FD ]
Line_23 $$ name = p.getName()-->Line_25 $$ StringUtils.toLowerCase(name)[ FD ]
Line_25 $$ if (!StringUtils.toLowerCase(name).endsWith(".jar")) -->Line_26 $$ MRApps.addToEnvironment(environment, classpathEnvVar, crossPlatformifyMREnv(conf, Environment.PWD) + Path.SEPARATOR + name, conf)[ CD ]
