Line_0 $$ Entry-->Line_2 $$ //13
public class func [ CD ]
Line_2 $$ //13
public class func -->Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath) [ CD ]
Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath) -->Line_4 $$ for (int i = 0; i < uris.length; ++i) [ CD ]
Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath) -->Line_3 $$ public void parseDistributedCacheArtifacts(Configuration conf, ApplicationSubmissionContext container, LocalResourceType type, URI[] uris, long[] timestamps, long[] sizes, boolean visibilities[], Path[] pathsToPutOnClasspath) [ CD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_4 $$ ++i[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ ++i[ FD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_5 $$ URI u = uris[i][ CD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_6 $$ Path p = new Path(u)[ CD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_7 $$ FileSystem fs = p.getFileSystem(conf)[ CD ]
Line_7 $$ FileSystem fs = p.getFileSystem(conf)-->Line_7 $$ p.getFileSystem(conf)[ CD ]
Line_6 $$ Path p = new Path(u)-->Line_7 $$ p.getFileSystem(conf)[ FD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))[ CD ]
Line_6 $$ Path p = new Path(u)-->Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_8 $$ fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))[ CD ]
Line_7 $$ FileSystem fs = p.getFileSystem(conf)-->Line_8 $$ fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_9 $$ p.makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_9 $$ p.makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_7 $$ FileSystem fs = p.getFileSystem(conf)-->Line_9 $$ fs.getUri()[ FD ]
Line_7 $$ FileSystem fs = p.getFileSystem(conf)-->Line_9 $$ fs.getWorkingDirectory()[ FD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())[ CD ]
Line_5 $$ URI u = uris[i]-->Line_11 $$ u.getFragment()[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_12 $$ p.getName()[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_12 $$ p.getName()[ FD ]
Line_5 $$ URI u = uris[i]-->Line_13 $$ u.getFragment()[ FD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_14 $$ if (name.isAbsolute()) [ CD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_14 $$ if (name.isAbsolute()) [ FD ]
Line_14 $$ if (name.isAbsolute()) -->Line_14 $$ name.isAbsolute()[ CD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_14 $$ name.isAbsolute()[ FD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_17 $$ String linkName = name.toUri().getPath()[ CD ]
Line_17 $$ String linkName = name.toUri().getPath()-->Line_17 $$ name.toUri().getPath()[ CD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_17 $$ name.toUri()[ FD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_18 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ CD ]
Line_17 $$ String linkName = name.toUri().getPath()-->Line_18 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_21 $$ p.toUri()[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_21 $$ p.toUri()[ FD ]
Line_4 $$ for (int i = 0; i < uris.length; ++i) -->Line_27 $$ if (classPaths.containsKey(u.getPath())) [ CD ]
Line_27 $$ if (classPaths.containsKey(u.getPath())) -->Line_27 $$ classPaths.containsKey(u.getPath())[ CD ]
Line_5 $$ URI u = uris[i]-->Line_27 $$ u.getPath()[ FD ]
Line_27 $$ if (classPaths.containsKey(u.getPath())) -->Line_28 $$ Map<String, String> environment = container.getAllEnvironment()[ CD ]
Line_28 $$ Map<String, String> environment = container.getAllEnvironment()-->Line_28 $$ container.getAllEnvironment()[ CD ]
Line_27 $$ if (classPaths.containsKey(u.getPath())) -->Line_29 $$ MRApps.addToClassPath(environment, linkName)[ CD ]
Line_28 $$ Map<String, String> environment = container.getAllEnvironment()-->Line_29 $$ MRApps.addToClassPath(environment, linkName)[ FD ]
Line_17 $$ String linkName = name.toUri().getPath()-->Line_29 $$ MRApps.addToClassPath(environment, linkName)[ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < uris.length; ++i) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ ++i[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_7 $$ p.getFileSystem(conf)[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_7 $$ p.getFileSystem(conf)[ FD ]
Line_7 $$ FileSystem fs = p.getFileSystem(conf)-->Line_8 $$ fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_9 $$ p.makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_9 $$ p.makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_7 $$ FileSystem fs = p.getFileSystem(conf)-->Line_9 $$ fs.getUri()[ FD ]
Line_7 $$ FileSystem fs = p.getFileSystem(conf)-->Line_9 $$ fs.getWorkingDirectory()[ FD ]
Line_5 $$ URI u = uris[i]-->Line_11 $$ u.getFragment()[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_12 $$ p.getName()[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_12 $$ p.getName()[ FD ]
Line_5 $$ URI u = uris[i]-->Line_13 $$ u.getFragment()[ FD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_14 $$ if (name.isAbsolute()) [ FD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_14 $$ name.isAbsolute()[ FD ]
Line_11 $$ Path name = new Path((null == u.getFragment()) ? p.getName() : u.getFragment())-->Line_17 $$ name.toUri()[ FD ]
Line_17 $$ String linkName = name.toUri().getPath()-->Line_18 $$ container.setResourceTodo(linkName, createLocalResource(p.toUri(), type, visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE, sizes[i], timestamps[i]))[ FD ]
Line_6 $$ Path p = new Path(u)-->Line_21 $$ p.toUri()[ FD ]
Line_8 $$ p = fs.resolvePath(p.makeQualified(fs.getUri(), fs.getWorkingDirectory()))-->Line_21 $$ p.toUri()[ FD ]
Line_5 $$ URI u = uris[i]-->Line_27 $$ u.getPath()[ FD ]
Line_28 $$ Map<String, String> environment = container.getAllEnvironment()-->Line_29 $$ MRApps.addToClassPath(environment, linkName)[ FD ]
Line_17 $$ String linkName = name.toUri().getPath()-->Line_29 $$ MRApps.addToClassPath(environment, linkName)[ FD ]
