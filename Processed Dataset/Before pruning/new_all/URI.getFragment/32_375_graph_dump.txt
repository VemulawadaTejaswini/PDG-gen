Line_0 $$ Entry-->Line_2 $$ //31
public class func [ CD ]
Line_2 $$ //31
public class func -->Line_3 $$ public void Path(Path parent, Path child) [ CD ]
Line_3 $$ public void Path(Path parent, Path child) -->Line_4 $$ String parentPath = parentUri.getPath()[ CD ]
Line_4 $$ String parentPath = parentUri.getPath()-->Line_4 $$ parentUri.getPath()[ CD ]
Line_3 $$ public void Path(Path parent, Path child) -->Line_5 $$ if (!(parentPath.equals("/") || parentPath.equals("")))
    try [ CD ]
Line_5 $$ if (!(parentPath.equals("/") || parentPath.equals("")))
    try -->Line_5 $$ !(parentPath.equals("/") || parentPath.equals(""))[ CD ]
Line_4 $$ String parentPath = parentUri.getPath()-->Line_5 $$ parentPath.equals("/")[ FD ]
Line_4 $$ String parentPath = parentUri.getPath()-->Line_5 $$ parentPath.equals("")[ FD ]
Line_3 $$ public void Path(Path parent, Path child) -->Line_12 $$ URI resolved = parentUri.resolve(child.uri)[ CD ]
Line_12 $$ URI resolved = parentUri.resolve(child.uri)-->Line_12 $$ parentUri.resolve(child.uri)[ CD ]
Line_3 $$ public void Path(Path parent, Path child) -->Line_13 $$ initialize(resolved.getScheme(), resolved.getAuthority(), normalizePath(resolved.getPath()), resolved.getFragment())[ CD ]
Line_12 $$ URI resolved = parentUri.resolve(child.uri)-->Line_13 $$ resolved.getScheme()[ FD ]
Line_12 $$ URI resolved = parentUri.resolve(child.uri)-->Line_13 $$ resolved.getAuthority()[ FD ]
Line_12 $$ URI resolved = parentUri.resolve(child.uri)-->Line_14 $$ resolved.getPath()[ FD ]
Line_12 $$ URI resolved = parentUri.resolve(child.uri)-->Line_14 $$ resolved.getFragment()[ FD ]
