Line_0 $$ Entry-->Line_2 $$ //18
public class func [ CD ]
Line_2 $$ //18
public class func -->Line_3 $$ public void updateHeaders(RequestContext context, Multimap<String, String> headers) [ CD ]
Line_3 $$ public void updateHeaders(RequestContext context, Multimap<String, String> headers) -->Line_4 $$ String initial = context.request().uri()[ CD ]
Line_4 $$ String initial = context.request().uri()-->Line_4 $$ context.request().uri()[ CD ]
Line_3 $$ public void updateHeaders(RequestContext context, Multimap<String, String> headers) -->Line_5 $$ URI uri = URI.create(initial)[ CD ]
Line_5 $$ URI uri = URI.create(initial)-->Line_5 $$ URI.create(initial)[ CD ]
Line_4 $$ String initial = context.request().uri()-->Line_5 $$ URI.create(initial)[ FD ]
Line_3 $$ public void updateHeaders(RequestContext context, Multimap<String, String> headers) -->Line_6 $$ URI newURI = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), location.getPath(), location.getQuery(), location.getFragment())[ CD ]
Line_5 $$ URI uri = URI.create(initial)-->Line_6 $$ uri.getScheme()[ FD ]
Line_5 $$ URI uri = URI.create(initial)-->Line_6 $$ uri.getUserInfo()[ FD ]
Line_5 $$ URI uri = URI.create(initial)-->Line_6 $$ uri.getHost()[ FD ]
Line_5 $$ URI uri = URI.create(initial)-->Line_6 $$ uri.getPort()[ FD ]
Line_3 $$ public void updateHeaders(RequestContext context, Multimap<String, String> headers) -->Line_8 $$ headers.remove(h.getKey(), h.getValue())[ CD ]
