Line_0 $$ Entry-->Line_2 $$ //123
public class func [ CD ]
Line_2 $$ //123
public class func -->Line_3 $$ public void testRead(int port) [ CD ]
Line_3 $$ public void testRead(int port) -->Line_4 $$ String url = new URL("http", "localhost", port, "/").toString()[ CD ]
Line_4 $$ String url = new URL("http", "localhost", port, "/").toString()-->Line_4 $$ new URL("http", "localhost", port, "/").toString()[ CD ]
Line_3 $$ public void testRead(int port) -->Line_5 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))[ CD ]
Line_5 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))-->Line_5 $$ new DefaultHttpClient().execute(new HttpGet(url))[ CD ]
Line_3 $$ public void testRead(int port) -->Line_6 $$ assertEquals(200, response.getStatusLine().getStatusCode())[ CD ]
Line_5 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))-->Line_6 $$ response.getStatusLine()[ FD ]
Line_3 $$ public void testRead(int port) -->Line_7 $$ InputStream is = response.getEntity().getContent()[ CD ]
Line_7 $$ InputStream is = response.getEntity().getContent()-->Line_7 $$ response.getEntity().getContent()[ CD ]
Line_5 $$ HttpResponse response = new DefaultHttpClient().execute(new HttpGet(url))-->Line_7 $$ response.getEntity()[ FD ]
Line_3 $$ public void testRead(int port) -->Line_8 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))[ CD ]
Line_3 $$ public void testRead(int port) -->Line_9 $$ String data = br.readLine()[ CD ]
Line_9 $$ String data = br.readLine()-->Line_9 $$ br.readLine()[ CD ]
Line_8 $$ BufferedReader br = new BufferedReader(new InputStreamReader(is))-->Line_9 $$ br.readLine()[ FD ]
