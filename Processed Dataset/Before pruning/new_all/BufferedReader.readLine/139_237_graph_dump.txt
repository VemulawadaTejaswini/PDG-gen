Line_0 $$ Entry-->Line_2 $$ //138
public class func [ CD ]
Line_2 $$ //138
public class func -->Line_3 $$ public void harvestSqlCommands(BufferedReader reader) [ CD ]
Line_3 $$ public void harvestSqlCommands(BufferedReader reader) -->Line_4 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_3 $$ public void harvestSqlCommands(BufferedReader reader) -->Line_3 $$ public void harvestSqlCommands(BufferedReader reader) [ CD ]
Line_4 $$ while ((line = reader.readLine()) != null) -->Line_5 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)[ CD ]
Line_5 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)-->Line_5 $$ SingleLogLineAnalyser.isItStartOfNewCommand(line)[ CD ]
Line_4 $$ while ((line = reader.readLine()) != null) -->Line_6 $$ harvester.processCommandFragment(line, newCommand)[ CD ]
Line_5 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)-->Line_6 $$ harvester.processCommandFragment(line, newCommand)[ FD ]
Line_3 $$ public void harvestSqlCommands(BufferedReader reader) -->Line_8 $$ return harvester.getCommandsInTime();[ CD ]
Line_8 $$ return harvester.getCommandsInTime();-->Line_8 $$ harvester.getCommandsInTime()[ CD ]
Line_5 $$ boolean newCommand = SingleLogLineAnalyser.isItStartOfNewCommand(line)-->Line_6 $$ harvester.processCommandFragment(line, newCommand)[ FD ]
