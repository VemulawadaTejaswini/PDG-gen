Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) [ CD ]
Line_3 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) -->Line_4 $$ if (ch == '\"') [ CD ]
Line_4 $$ if (ch == '\"') -->Line_7 $$ if (ch == '\r' || ch == '\n') [ CD ]
Line_7 $$ if (ch == '\r' || ch == '\n') -->Line_8 $$ if (ch == '\r') [ CD ]
Line_8 $$ if (ch == '\r') -->Line_10 $$ reader.mark(1)[ CD ]
Line_8 $$ if (ch == '\r') -->Line_11 $$ if (reader.read() != '\n') [ CD ]
Line_11 $$ if (reader.read() != '\n') -->Line_12 $$ reader.reset()[ CD ]
Line_7 $$ if (ch == '\r' || ch == '\n') -->Line_15 $$ setString(row, col, new String(c, 0, count))[ CD ]
Line_7 $$ if (ch == '\r' || ch == '\n') -->Line_17 $$ if (row == 0 && header) [ CD ]
Line_17 $$ if (row == 0 && header) -->Line_19 $$ removeTitleRow()[ CD ]
Line_17 $$ if (row == 0 && header) -->Line_22 $$ header = false[ CD ]
Line_22 $$ header = false-->Line_22 $$ header = false[ FD ]
Line_7 $$ if (ch == '\r' || ch == '\n') -->Line_27 $$ if (ch == ',') [ CD ]
Line_27 $$ if (ch == ',') -->Line_28 $$ setString(row, col, new String(c, 0, count))[ CD ]
Line_27 $$ if (ch == ',') -->Line_32 $$ ensureColumn(col)[ CD ]
Line_27 $$ if (ch == ',') -->Line_35 $$ // just a regular character, add it
if (count == c.length) [ CD ]
Line_35 $$ // just a regular character, add it
if (count == c.length) -->Line_36 $$ PApplet.expand(c)[ CD ]
Line_27 $$ if (ch == ',') -->Line_38 $$ c[count++] = (char) ch[ CD ]
Line_0 $$ Entry-->Line_43 $$ //1
public class func [ CD ]
Line_43 $$ //1
public class func -->Line_44 $$ public void readLines(InputStream is2, String encoding) [ CD ]
Line_44 $$ public void readLines(InputStream is2, String encoding) -->Line_45 $$ int c = reader.read()[ CD ]
Line_45 $$ int c = reader.read()-->Line_45 $$ reader.read()[ CD ]
Line_44 $$ public void readLines(InputStream is2, String encoding) -->Line_46 $$ if (c == -1)
    break;[ CD ]
Line_45 $$ int c = reader.read()-->Line_46 $$ if (c == -1)
    break;[ FD ]
Line_44 $$ public void readLines(InputStream is2, String encoding) -->Line_48 $$ sb.append((char) c)[ CD ]
Line_44 $$ public void readLines(InputStream is2, String encoding) -->Line_49 $$ if (c == '\r') [ CD ]
Line_45 $$ int c = reader.read()-->Line_49 $$ if (c == '\r') [ FD ]
Line_49 $$ if (c == '\r') -->Line_50 $$ c = reader.read()[ CD ]
Line_45 $$ int c = reader.read()-->Line_50 $$ c = reader.read()[ FD ]
Line_50 $$ c = reader.read()-->Line_50 $$ c = reader.read()[ FD ]
Line_50 $$ c = reader.read()-->Line_50 $$ reader.read()[ CD ]
Line_49 $$ if (c == '\r') -->Line_51 $$ if (c == -1)
    break;[ CD ]
Line_45 $$ int c = reader.read()-->Line_51 $$ if (c == -1)
    break;[ FD ]
Line_50 $$ c = reader.read()-->Line_51 $$ if (c == -1)
    break;[ FD ]
Line_49 $$ if (c == '\r') -->Line_53 $$ sb.append((char) c)[ CD ]
Line_49 $$ if (c == '\r') -->Line_54 $$ if (c == '\n') [ CD ]
Line_45 $$ int c = reader.read()-->Line_54 $$ if (c == '\n') [ FD ]
Line_50 $$ c = reader.read()-->Line_54 $$ if (c == '\n') [ FD ]
Line_54 $$ if (c == '\n') -->Line_55 $$ list.add(sb.toString())[ CD ]
Line_49 $$ if (c == '\r') -->Line_58 $$ if (c == '\n') [ CD ]
Line_45 $$ int c = reader.read()-->Line_58 $$ if (c == '\n') [ FD ]
Line_50 $$ c = reader.read()-->Line_58 $$ if (c == '\n') [ FD ]
Line_58 $$ if (c == '\n') -->Line_59 $$ list.add(sb.toString())[ CD ]
Line_0 $$ Entry-->Line_65 $$ //2
public class func [ CD ]
Line_65 $$ //2
public class func -->Line_66 $$ public void readLines(final InputStream is2, final String encoding) [ CD ]
Line_66 $$ public void readLines(final InputStream is2, final String encoding) -->Line_67 $$ int c = reader.read()[ CD ]
Line_67 $$ int c = reader.read()-->Line_67 $$ reader.read()[ CD ]
Line_66 $$ public void readLines(final InputStream is2, final String encoding) -->Line_68 $$ if (c == -1) [ CD ]
Line_67 $$ int c = reader.read()-->Line_68 $$ if (c == -1) [ FD ]
Line_45 $$ int c = reader.read()-->Line_68 $$ if (c == -1) [ FD ]
Line_50 $$ c = reader.read()-->Line_68 $$ if (c == -1) [ FD ]
Line_66 $$ public void readLines(final InputStream is2, final String encoding) -->Line_71 $$ sb.append((char) c)[ CD ]
Line_66 $$ public void readLines(final InputStream is2, final String encoding) -->Line_72 $$ if (c == '\r') [ CD ]
Line_67 $$ int c = reader.read()-->Line_72 $$ if (c == '\r') [ FD ]
Line_45 $$ int c = reader.read()-->Line_72 $$ if (c == '\r') [ FD ]
Line_50 $$ c = reader.read()-->Line_72 $$ if (c == '\r') [ FD ]
Line_72 $$ if (c == '\r') -->Line_73 $$ c = reader.read()[ CD ]
Line_67 $$ int c = reader.read()-->Line_73 $$ c = reader.read()[ FD ]
Line_73 $$ c = reader.read()-->Line_73 $$ c = reader.read()[ FD ]
Line_45 $$ int c = reader.read()-->Line_73 $$ c = reader.read()[ FD ]
Line_50 $$ c = reader.read()-->Line_73 $$ c = reader.read()[ FD ]
Line_73 $$ c = reader.read()-->Line_73 $$ reader.read()[ CD ]
Line_72 $$ if (c == '\r') -->Line_74 $$ if (c == -1) [ CD ]
Line_67 $$ int c = reader.read()-->Line_74 $$ if (c == -1) [ FD ]
Line_73 $$ c = reader.read()-->Line_74 $$ if (c == -1) [ FD ]
Line_45 $$ int c = reader.read()-->Line_74 $$ if (c == -1) [ FD ]
Line_50 $$ c = reader.read()-->Line_74 $$ if (c == -1) [ FD ]
Line_72 $$ if (c == '\r') -->Line_77 $$ sb.append((char) c)[ CD ]
Line_72 $$ if (c == '\r') -->Line_78 $$ if (c == '\n') [ CD ]
Line_67 $$ int c = reader.read()-->Line_78 $$ if (c == '\n') [ FD ]
Line_73 $$ c = reader.read()-->Line_78 $$ if (c == '\n') [ FD ]
Line_45 $$ int c = reader.read()-->Line_78 $$ if (c == '\n') [ FD ]
Line_50 $$ c = reader.read()-->Line_78 $$ if (c == '\n') [ FD ]
Line_78 $$ if (c == '\n') -->Line_79 $$ list.add(sb.toString())[ CD ]
Line_72 $$ if (c == '\r') -->Line_82 $$ if (c == '\n') [ CD ]
Line_67 $$ int c = reader.read()-->Line_82 $$ if (c == '\n') [ FD ]
Line_73 $$ c = reader.read()-->Line_82 $$ if (c == '\n') [ FD ]
Line_45 $$ int c = reader.read()-->Line_82 $$ if (c == '\n') [ FD ]
Line_50 $$ c = reader.read()-->Line_82 $$ if (c == '\n') [ FD ]
Line_82 $$ if (c == '\n') -->Line_83 $$ list.add(sb.toString())[ CD ]
Line_0 $$ Entry-->Line_89 $$ //3
public class func [ CD ]
Line_89 $$ //3
public class func -->Line_90 $$ public void readName(final BufferedReader r) [ CD ]
Line_90 $$ public void readName(final BufferedReader r) -->Line_91 $$ r.mark(1)[ CD ]
Line_90 $$ public void readName(final BufferedReader r) -->Line_92 $$ int c = r.read()[ CD ]
Line_92 $$ int c = r.read()-->Line_92 $$ r.read()[ CD ]
Line_90 $$ public void readName(final BufferedReader r) -->Line_93 $$ if (c < 0) [ CD ]
Line_92 $$ int c = r.read()-->Line_93 $$ if (c < 0) [ FD ]
Line_67 $$ int c = reader.read()-->Line_93 $$ if (c < 0) [ FD ]
Line_73 $$ c = reader.read()-->Line_93 $$ if (c < 0) [ FD ]
Line_45 $$ int c = reader.read()-->Line_93 $$ if (c < 0) [ FD ]
Line_50 $$ c = reader.read()-->Line_93 $$ if (c < 0) [ FD ]
Line_93 $$ if (c < 0) -->Line_95 $$ if ('=' == c) [ CD ]
Line_92 $$ int c = r.read()-->Line_95 $$ if ('=' == c) [ FD ]
Line_67 $$ int c = reader.read()-->Line_95 $$ if ('=' == c) [ FD ]
Line_73 $$ c = reader.read()-->Line_95 $$ if ('=' == c) [ FD ]
Line_45 $$ int c = reader.read()-->Line_95 $$ if ('=' == c) [ FD ]
Line_50 $$ c = reader.read()-->Line_95 $$ if ('=' == c) [ FD ]
Line_95 $$ if ('=' == c) -->Line_97 $$ if (' ' == c || '\t' == c) [ CD ]
Line_97 $$ if (' ' == c || '\t' == c) -->Line_98 $$ for (; ; ) [ CD ]
Line_97 $$ if (' ' == c || '\t' == c) -->Line_97 $$ if (' ' == c || '\t' == c) [ CD ]
Line_98 $$ for (; ; ) -->Line_99 $$ r.mark(1)[ CD ]
Line_98 $$ for (; ; ) -->Line_100 $$ c = r.read()[ CD ]
Line_100 $$ c = r.read()-->Line_100 $$ c = r.read()[ FD ]
Line_92 $$ int c = r.read()-->Line_100 $$ c = r.read()[ FD ]
Line_67 $$ int c = reader.read()-->Line_100 $$ c = r.read()[ FD ]
Line_73 $$ c = reader.read()-->Line_100 $$ c = r.read()[ FD ]
Line_45 $$ int c = reader.read()-->Line_100 $$ c = r.read()[ FD ]
Line_50 $$ c = reader.read()-->Line_100 $$ c = r.read()[ FD ]
Line_100 $$ c = r.read()-->Line_100 $$ r.read()[ CD ]
Line_98 $$ for (; ; ) -->Line_101 $$ if (c < 0) [ CD ]
Line_100 $$ c = r.read()-->Line_101 $$ if (c < 0) [ FD ]
Line_92 $$ int c = r.read()-->Line_101 $$ if (c < 0) [ FD ]
Line_67 $$ int c = reader.read()-->Line_101 $$ if (c < 0) [ FD ]
Line_73 $$ c = reader.read()-->Line_101 $$ if (c < 0) [ FD ]
Line_45 $$ int c = reader.read()-->Line_101 $$ if (c < 0) [ FD ]
Line_50 $$ c = reader.read()-->Line_101 $$ if (c < 0) [ FD ]
Line_101 $$ if (c < 0) -->Line_103 $$ if ('=' == c) [ CD ]
Line_100 $$ c = r.read()-->Line_103 $$ if ('=' == c) [ FD ]
Line_92 $$ int c = r.read()-->Line_103 $$ if ('=' == c) [ FD ]
Line_67 $$ int c = reader.read()-->Line_103 $$ if ('=' == c) [ FD ]
Line_73 $$ c = reader.read()-->Line_103 $$ if ('=' == c) [ FD ]
Line_45 $$ int c = reader.read()-->Line_103 $$ if ('=' == c) [ FD ]
Line_50 $$ c = reader.read()-->Line_103 $$ if ('=' == c) [ FD ]
Line_103 $$ if ('=' == c) -->Line_105 $$ if (';' == c || '#' == c || '\n' == c) [ CD ]
Line_105 $$ if (';' == c || '#' == c || '\n' == c) -->Line_106 $$ r.reset()[ CD ]
Line_105 $$ if (';' == c || '#' == c || '\n' == c) -->Line_108 $$ if (' ' == c || '\t' == c) [ CD ]
Line_97 $$ if (' ' == c || '\t' == c) -->Line_115 $$ if (Character.isLetterOrDigit((char) c) || c == '-') [ CD ]
Line_115 $$ if (Character.isLetterOrDigit((char) c) || c == '-') -->Line_119 $$ name.append((char) c)[ CD ]
Line_115 $$ if (Character.isLetterOrDigit((char) c) || c == '-') -->Line_120 $$ if ('\n' == c) [ CD ]
Line_100 $$ c = r.read()-->Line_120 $$ if ('\n' == c) [ FD ]
Line_92 $$ int c = r.read()-->Line_120 $$ if ('\n' == c) [ FD ]
Line_67 $$ int c = reader.read()-->Line_120 $$ if ('\n' == c) [ FD ]
Line_73 $$ c = reader.read()-->Line_120 $$ if ('\n' == c) [ FD ]
Line_45 $$ int c = reader.read()-->Line_120 $$ if ('\n' == c) [ FD ]
Line_50 $$ c = reader.read()-->Line_120 $$ if ('\n' == c) [ FD ]
Line_120 $$ if ('\n' == c) -->Line_121 $$ r.reset()[ CD ]
Line_120 $$ if ('\n' == c) -->Line_122 $$ name.append((char) c)[ CD ]
Line_90 $$ public void readName(final BufferedReader r) -->Line_127 $$ return name.toString();[ CD ]
Line_127 $$ return name.toString();-->Line_127 $$ name.toString()[ CD ]
Line_0 $$ Entry-->Line_131 $$ //4
public class func [ CD ]
Line_131 $$ //4
public class func -->Line_132 $$ public void getFromMetaData(Reader xml) [ CD ]
Line_132 $$ public void getFromMetaData(Reader xml) -->Line_133 $$ if (ch == '<') [ CD ]
Line_133 $$ if (ch == '<') -->Line_134 $$ in.read()[ CD ]
Line_133 $$ if (ch == '<') -->Line_135 $$ if (ch == -1)
    break read;[ CD ]
Line_135 $$ if (ch == -1)
    break read;-->Line_135 $$ -1[ CD ]
Line_132 $$ public void getFromMetaData(Reader xml) -->Line_138 $$ if (last2 == '<' && last == '!' && ch == '-') [ CD ]
Line_132 $$ public void getFromMetaData(Reader xml) -->Line_142 $$ if (ch != '<')
    continue;[ CD ]
Line_132 $$ public void getFromMetaData(Reader xml) -->Line_144 $$ readThroughWhitespace(in)[ CD ]
Line_132 $$ public void getFromMetaData(Reader xml) -->Line_145 $$ if (ch == '/' || ch == '!' || ch == '?')
    continue;[ CD ]
Line_132 $$ public void getFromMetaData(Reader xml) -->Line_147 $$ readElementToken(ch, in)[ CD ]
Line_166 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_167 $$ names.add(pkg + "." + name)[ CD ]
Line_166 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_169 $$ names.add(name)[ CD ]
Line_176 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_177 $$ names.add(pkg + "." + name)[ CD ]
Line_176 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_179 $$ names.add(name)[ CD ]
Line_0 $$ Entry-->Line_185 $$ //5
public class func [ CD ]
Line_185 $$ //5
public class func -->Line_186 $$ public void run() [ CD ]
Line_186 $$ public void run() -->Line_187 $$ br.read()[ CD ]
Line_186 $$ public void run() -->Line_188 $$ if (truc != -1) [ CD ]
Line_188 $$ if (truc != -1) -->Line_188 $$ -1[ CD ]
Line_188 $$ if (truc != -1) -->Line_189 $$ if (((char) truc) != '\n') [ CD ]
Line_189 $$ if (((char) truc) != '\n') -->Line_192 $$ System.out.println(str)[ CD ]
Line_186 $$ public void run() -->Line_196 $$ while ((truc = br.read()) != -1) [ CD ]
Line_186 $$ public void run() -->Line_186 $$ public void run() [ CD ]
Line_196 $$ while ((truc = br.read()) != -1) -->Line_197 $$ if (truc != 10) [ CD ]
Line_197 $$ if (truc != 10) -->Line_200 $$ System.out.println(str)[ CD ]
Line_186 $$ public void run() -->Line_204 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_208 $$ //6
public class func [ CD ]
Line_208 $$ //6
public class func -->Line_209 $$ public void readUntilDelimiter(final BufferedReader inputStream) [ CD ]
Line_209 $$ public void readUntilDelimiter(final BufferedReader inputStream) -->Line_210 $$ inputStream.read()[ CD ]
Line_209 $$ public void readUntilDelimiter(final BufferedReader inputStream) -->Line_211 $$ if (ci == -1) [ CD ]
Line_211 $$ if (ci == -1) -->Line_211 $$ -1[ CD ]
Line_211 $$ if (ci == -1) -->Line_212 $$ System.err.println("Socket already closed by server \n")[ CD ]
Line_211 $$ if (ci == -1) -->Line_213 $$ inputStream.close()[ CD ]
Line_211 $$ if (ci == -1) -->Line_217 $$ if (c == '#' && canc == false) [ CD ]
Line_217 $$ if (c == '#' && canc == false) -->Line_218 $$ response.append(c)[ CD ]
Line_100 $$ c = r.read()-->Line_218 $$ response.append(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_218 $$ response.append(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_218 $$ response.append(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_218 $$ response.append(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_218 $$ response.append(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_218 $$ response.append(c)[ FD ]
Line_217 $$ if (c == '#' && canc == false) -->Line_220 $$ if (c == '#') [ CD ]
Line_100 $$ c = r.read()-->Line_220 $$ if (c == '#') [ FD ]
Line_92 $$ int c = r.read()-->Line_220 $$ if (c == '#') [ FD ]
Line_67 $$ int c = reader.read()-->Line_220 $$ if (c == '#') [ FD ]
Line_73 $$ c = reader.read()-->Line_220 $$ if (c == '#') [ FD ]
Line_45 $$ int c = reader.read()-->Line_220 $$ if (c == '#') [ FD ]
Line_50 $$ c = reader.read()-->Line_220 $$ if (c == '#') [ FD ]
Line_220 $$ if (c == '#') -->Line_222 $$ response.append(c)[ CD ]
Line_100 $$ c = r.read()-->Line_222 $$ response.append(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_222 $$ response.append(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_222 $$ response.append(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_222 $$ response.append(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_222 $$ response.append(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_222 $$ response.append(c)[ FD ]
Line_220 $$ if (c == '#') -->Line_224 $$ if (c != '#') [ CD ]
Line_100 $$ c = r.read()-->Line_224 $$ if (c != '#') [ FD ]
Line_92 $$ int c = r.read()-->Line_224 $$ if (c != '#') [ FD ]
Line_67 $$ int c = reader.read()-->Line_224 $$ if (c != '#') [ FD ]
Line_73 $$ c = reader.read()-->Line_224 $$ if (c != '#') [ FD ]
Line_45 $$ int c = reader.read()-->Line_224 $$ if (c != '#') [ FD ]
Line_50 $$ c = reader.read()-->Line_224 $$ if (c != '#') [ FD ]
Line_224 $$ if (c != '#') -->Line_226 $$ response.append(c)[ CD ]
Line_100 $$ c = r.read()-->Line_226 $$ response.append(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_226 $$ response.append(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_226 $$ response.append(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_226 $$ response.append(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_226 $$ response.append(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_226 $$ response.append(c)[ FD ]
Line_209 $$ public void readUntilDelimiter(final BufferedReader inputStream) -->Line_230 $$ return response.toString();[ CD ]
Line_230 $$ return response.toString();-->Line_230 $$ response.toString()[ CD ]
Line_0 $$ Entry-->Line_234 $$ //7
public class func [ CD ]
Line_234 $$ //7
public class func -->Line_235 $$ public void parseMessage(BufferedReader reader) [ CD ]
Line_235 $$ public void parseMessage(BufferedReader reader) -->Line_236 $$ int ch = skipWhitespace(reader)[ CD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_236 $$ skipWhitespace(reader)[ CD ]
Line_235 $$ public void parseMessage(BufferedReader reader) -->Line_237 $$ while (ch != ']') [ CD ]
Line_235 $$ public void parseMessage(BufferedReader reader) -->Line_235 $$ public void parseMessage(BufferedReader reader) [ CD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_237 $$ while (ch != ']') [ FD ]
Line_237 $$ while (ch != ']') -->Line_238 $$ if (ch < 0) [ CD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_238 $$ if (ch < 0) [ FD ]
Line_237 $$ while (ch != ']') -->Line_242 $$ if (ch == '[') [ CD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_242 $$ if (ch == '[') [ FD ]
Line_242 $$ if (ch == '[') -->Line_243 $$ ArrayList<TalkMessageEntry> childEntries = parseMessage(reader)[ CD ]
Line_243 $$ ArrayList<TalkMessageEntry> childEntries = parseMessage(reader)-->Line_243 $$ parseMessage(reader)[ CD ]
Line_242 $$ if (ch == '[') -->Line_244 $$ entries.add(new TalkMessageEntry(MessageEntryKind.ME_TALKMESSAGE, new TalkMessage(childEntries)))[ CD ]
Line_242 $$ if (ch == '[') -->Line_246 $$ if (ch == '\"' || ch == '\'') [ CD ]
Line_246 $$ if (ch == '\"' || ch == '\'') -->Line_247 $$ String stringValue = parseStringValue(reader, (char) ch)[ CD ]
Line_247 $$ String stringValue = parseStringValue(reader, (char) ch)-->Line_247 $$ parseStringValue(reader, (char) ch)[ CD ]
Line_246 $$ if (ch == '\"' || ch == '\'') -->Line_248 $$ entries.add(new TalkMessageEntry(MessageEntryKind.ME_STRING, stringValue))[ CD ]
Line_246 $$ if (ch == '\"' || ch == '\'') -->Line_249 $$ if (ch == ',') [ CD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_249 $$ if (ch == ',') [ FD ]
Line_249 $$ if (ch == ',') -->Line_251 $$ entries.add(new TalkMessageEntry(MessageEntryKind.ME_EMPTY, null))[ CD ]
Line_249 $$ if (ch == ',') -->Line_252 $$ if (ch == 'n' || ch == 'N') [ CD ]
Line_252 $$ if (ch == 'n' || ch == 'N') -->Line_254 $$ ch = reader.read()[ CD ]
Line_254 $$ ch = reader.read()-->Line_254 $$ ch = reader.read()[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_254 $$ ch = reader.read()[ FD ]
Line_254 $$ ch = reader.read()-->Line_254 $$ reader.read()[ CD ]
Line_252 $$ if (ch == 'n' || ch == 'N') -->Line_255 $$ ch = reader.read()[ CD ]
Line_254 $$ ch = reader.read()-->Line_255 $$ ch = reader.read()[ FD ]
Line_255 $$ ch = reader.read()-->Line_255 $$ ch = reader.read()[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_255 $$ ch = reader.read()[ FD ]
Line_255 $$ ch = reader.read()-->Line_255 $$ reader.read()[ CD ]
Line_252 $$ if (ch == 'n' || ch == 'N') -->Line_256 $$ ch = reader.read()[ CD ]
Line_254 $$ ch = reader.read()-->Line_256 $$ ch = reader.read()[ FD ]
Line_255 $$ ch = reader.read()-->Line_256 $$ ch = reader.read()[ FD ]
Line_256 $$ ch = reader.read()-->Line_256 $$ ch = reader.read()[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_256 $$ ch = reader.read()[ FD ]
Line_256 $$ ch = reader.read()-->Line_256 $$ reader.read()[ CD ]
Line_252 $$ if (ch == 'n' || ch == 'N') -->Line_257 $$ entries.add(new TalkMessageEntry(MessageEntryKind.ME_EMPTY, null))[ CD ]
Line_252 $$ if (ch == 'n' || ch == 'N') -->Line_260 $$ long numValue = parseNumberValue(reader, (char) ch)[ CD ]
Line_260 $$ long numValue = parseNumberValue(reader, (char) ch)-->Line_260 $$ parseNumberValue(reader, (char) ch)[ CD ]
Line_252 $$ if (ch == 'n' || ch == 'N') -->Line_261 $$ entries.add(new TalkMessageEntry(MessageEntryKind.ME_NUMBER, numValue))[ CD ]
Line_237 $$ while (ch != ']') -->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ CD ]
Line_254 $$ ch = reader.read()-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_255 $$ ch = reader.read()-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_256 $$ ch = reader.read()-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') -->Line_266 $$ ch = skipWhitespace(reader)[ CD ]
Line_254 $$ ch = reader.read()-->Line_266 $$ ch = skipWhitespace(reader)[ FD ]
Line_255 $$ ch = reader.read()-->Line_266 $$ ch = skipWhitespace(reader)[ FD ]
Line_256 $$ ch = reader.read()-->Line_266 $$ ch = skipWhitespace(reader)[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_266 $$ ch = skipWhitespace(reader)[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_266 $$ ch = skipWhitespace(reader)[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_266 $$ skipWhitespace(reader)[ CD ]
Line_237 $$ while (ch != ']') -->Line_269 $$ if (ch != ',' && ch != ']') [ CD ]
Line_269 $$ if (ch != ',' && ch != ']') -->Line_271 $$ if (ch == ',') [ CD ]
Line_254 $$ ch = reader.read()-->Line_271 $$ if (ch == ',') [ FD ]
Line_255 $$ ch = reader.read()-->Line_271 $$ if (ch == ',') [ FD ]
Line_256 $$ ch = reader.read()-->Line_271 $$ if (ch == ',') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_271 $$ if (ch == ',') [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_271 $$ if (ch == ',') [ FD ]
Line_271 $$ if (ch == ',') -->Line_272 $$ ch = skipWhitespace(reader)[ CD ]
Line_254 $$ ch = reader.read()-->Line_272 $$ ch = skipWhitespace(reader)[ FD ]
Line_255 $$ ch = reader.read()-->Line_272 $$ ch = skipWhitespace(reader)[ FD ]
Line_256 $$ ch = reader.read()-->Line_272 $$ ch = skipWhitespace(reader)[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_272 $$ ch = skipWhitespace(reader)[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_272 $$ ch = skipWhitespace(reader)[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_272 $$ ch = skipWhitespace(reader)[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_272 $$ skipWhitespace(reader)[ CD ]
Line_0 $$ Entry-->Line_278 $$ //8
public class func [ CD ]
Line_278 $$ //8
public class func -->Line_279 $$ public void getWordCounts(InputStream inputStream) [ CD ]
Line_279 $$ public void getWordCounts(InputStream inputStream) -->Line_281 $$ while ((current = bufferedReader.read()) != -1) [ CD ]
Line_279 $$ public void getWordCounts(InputStream inputStream) -->Line_279 $$ public void getWordCounts(InputStream inputStream) [ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_282 $$ wordCounts.byteCount++[ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_283 $$ wordCounts.charCount++[ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_287 $$ boolean isSkipNewlineFeed = skipNextLineFeed && current == '\n'[ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_289 $$ if (isSkipNewlineFeed) [ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_293 $$ boolean eol = (current == '\n' || current == '\r')[ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_294 $$ if (eol) [ CD ]
Line_294 $$ if (eol) -->Line_295 $$ wordCounts.lineCount++[ CD ]
Line_294 $$ if (eol) -->Line_297 $$ // store the state to skip the next newline feed if required
if (current == '\r') [ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_303 $$ boolean isCurrentWhitespace = Character.isWhitespace(current)[ CD ]
Line_303 $$ boolean isCurrentWhitespace = Character.isWhitespace(current)-->Line_303 $$ Character.isWhitespace(current)[ CD ]
Line_281 $$ while ((current = bufferedReader.read()) != -1) -->Line_304 $$ if (!isCurrentWhitespace && previouslyWhitespace) [ CD ]
Line_304 $$ if (!isCurrentWhitespace && previouslyWhitespace) -->Line_304 $$ !isCurrentWhitespace[ CD ]
Line_303 $$ boolean isCurrentWhitespace = Character.isWhitespace(current)-->Line_304 $$ !isCurrentWhitespace[ FD ]
Line_304 $$ if (!isCurrentWhitespace && previouslyWhitespace) -->Line_305 $$ wordCounts.wordCount++[ CD ]
Line_279 $$ public void getWordCounts(InputStream inputStream) -->Line_309 $$ if (bufferedReader != null) [ CD ]
Line_309 $$ if (bufferedReader != null) -->Line_310 $$ bufferedReader.close()[ CD ]
Line_0 $$ Entry-->Line_315 $$ //9
public class func [ CD ]
Line_315 $$ //9
public class func -->Line_316 $$ public void readFileToString(String fileName) [ CD ]
Line_316 $$ public void readFileToString(String fileName) -->Line_317 $$ if (fileName.equals(ERROR_OUTPUT)) [ CD ]
Line_317 $$ if (fileName.equals(ERROR_OUTPUT)) -->Line_317 $$ fileName.equals(ERROR_OUTPUT)[ CD ]
Line_317 $$ if (fileName.equals(ERROR_OUTPUT)) -->Line_318 $$ return getErrorOutput();[ CD ]
Line_318 $$ return getErrorOutput();-->Line_318 $$ getErrorOutput()[ CD ]
Line_317 $$ if (fileName.equals(ERROR_OUTPUT)) -->Line_319 $$ if (fileName.equals(NOTICE_OUTPUT)) [ CD ]
Line_319 $$ if (fileName.equals(NOTICE_OUTPUT)) -->Line_319 $$ fileName.equals(NOTICE_OUTPUT)[ CD ]
Line_319 $$ if (fileName.equals(NOTICE_OUTPUT)) -->Line_320 $$ return getNoticeOutput();[ CD ]
Line_320 $$ return getNoticeOutput();-->Line_320 $$ getNoticeOutput()[ CD ]
Line_319 $$ if (fileName.equals(NOTICE_OUTPUT)) -->Line_321 $$ if (fileName.equals(WARNING_OUTPUT)) [ CD ]
Line_321 $$ if (fileName.equals(WARNING_OUTPUT)) -->Line_321 $$ fileName.equals(WARNING_OUTPUT)[ CD ]
Line_321 $$ if (fileName.equals(WARNING_OUTPUT)) -->Line_322 $$ return getWarningOutput();[ CD ]
Line_322 $$ return getWarningOutput();-->Line_322 $$ getWarningOutput()[ CD ]
Line_321 $$ if (fileName.equals(WARNING_OUTPUT)) -->Line_323 $$ if (fileName.equals(STANDARD_OUTPUT)) [ CD ]
Line_323 $$ if (fileName.equals(STANDARD_OUTPUT)) -->Line_323 $$ fileName.equals(STANDARD_OUTPUT)[ CD ]
Line_323 $$ if (fileName.equals(STANDARD_OUTPUT)) -->Line_324 $$ return getStandardOutput();[ CD ]
Line_324 $$ return getStandardOutput();-->Line_324 $$ getStandardOutput()[ CD ]
Line_316 $$ public void readFileToString(String fileName) -->Line_326 $$ File file = new File(fileName)[ CD ]
Line_316 $$ public void readFileToString(String fileName) -->Line_327 $$ if (!file.exists()) [ CD ]
Line_327 $$ if (!file.exists()) -->Line_327 $$ !file.exists()[ CD ]
Line_327 $$ !file.exists()-->Line_327 $$ file.exists()[ CD ]
Line_326 $$ File file = new File(fileName)-->Line_327 $$ file.exists()[ FD ]
Line_327 $$ if (!file.exists()) -->Line_328 $$ System.out.println("\n" + "FILE DOES NOT EXIST: " + fileName)[ CD ]
Line_316 $$ public void readFileToString(String fileName) -->Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))[ CD ]
Line_316 $$ public void readFileToString(String fileName) -->Line_331 $$ char[] allChars = new char[(int) file.length()][ CD ]
Line_326 $$ File file = new File(fileName)-->Line_331 $$ file.length()[ FD ]
Line_316 $$ public void readFileToString(String fileName) -->Line_332 $$ in.read(allChars, 0, (int) file.length())[ CD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_332 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_331 $$ char[] allChars = new char[(int) file.length()]-->Line_332 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_326 $$ File file = new File(fileName)-->Line_332 $$ file.length()[ FD ]
Line_316 $$ public void readFileToString(String fileName) -->Line_333 $$ in.close()[ CD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_333 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_337 $$ //10
public class func [ CD ]
Line_337 $$ //10
public class func -->Line_338 $$ public void readSourceValues(BufferedReader reader, OpenIntIntHashMap sourceIndices) [ CD ]
Line_338 $$ public void readSourceValues(BufferedReader reader, OpenIntIntHashMap sourceIndices) -->Line_339 $$ while ((ch = reader.read()) != -1) [ CD ]
Line_338 $$ public void readSourceValues(BufferedReader reader, OpenIntIntHashMap sourceIndices) -->Line_338 $$ public void readSourceValues(BufferedReader reader, OpenIntIntHashMap sourceIndices) [ CD ]
Line_339 $$ while ((ch = reader.read()) != -1) -->Line_341 $$ if (Character.isWhitespace(ch)) [ CD ]
Line_254 $$ ch = reader.read()-->Line_341 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_255 $$ ch = reader.read()-->Line_341 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_256 $$ ch = reader.read()-->Line_341 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_341 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_341 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_341 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_341 $$ if (Character.isWhitespace(ch)) -->Line_341 $$ Character.isWhitespace(ch)[ CD ]
Line_254 $$ ch = reader.read()-->Line_341 $$ Character.isWhitespace(ch)[ FD ]
Line_255 $$ ch = reader.read()-->Line_341 $$ Character.isWhitespace(ch)[ FD ]
Line_256 $$ ch = reader.read()-->Line_341 $$ Character.isWhitespace(ch)[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_341 $$ Character.isWhitespace(ch)[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_341 $$ Character.isWhitespace(ch)[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_341 $$ Character.isWhitespace(ch)[ FD ]
Line_341 $$ if (Character.isWhitespace(ch)) -->Line_343 $$ if (r != 0) [ CD ]
Line_343 $$ if (r != 0) -->Line_345 $$ originalVarNames.put(r, r)[ CD ]
Line_343 $$ if (r != 0) -->Line_347 $$ sourceValues.add(r)[ CD ]
Line_339 $$ while ((ch = reader.read()) != -1) -->Line_354 $$ if (ch == '0' && r == 0) [ CD ]
Line_354 $$ if (ch == '0' && r == 0) -->Line_356 $$ sourceValues.add(0)[ CD ]
Line_339 $$ while ((ch = reader.read()) != -1) -->Line_359 $$ if (ch == '-') [ CD ]
Line_254 $$ ch = reader.read()-->Line_359 $$ if (ch == '-') [ FD ]
Line_255 $$ ch = reader.read()-->Line_359 $$ if (ch == '-') [ FD ]
Line_256 $$ ch = reader.read()-->Line_359 $$ if (ch == '-') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_359 $$ if (ch == '-') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_359 $$ if (ch == '-') [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_359 $$ if (ch == '-') [ FD ]
Line_359 $$ if (ch == '-') -->Line_361 $$ -1[ CD ]
Line_339 $$ while ((ch = reader.read()) != -1) -->Line_364 $$ if ('0' <= ch && ch < '0' + 10) [ CD ]
Line_0 $$ Entry-->Line_372 $$ //11
public class func [ CD ]
Line_372 $$ //11
public class func -->Line_373 $$ public void readName(final BufferedReader r) [ CD ]
Line_373 $$ public void readName(final BufferedReader r) -->Line_374 $$ r.mark(1)[ CD ]
Line_373 $$ public void readName(final BufferedReader r) -->Line_375 $$ r.read()[ CD ]
Line_373 $$ public void readName(final BufferedReader r) -->Line_376 $$ if (c < 0) [ CD ]
Line_100 $$ c = r.read()-->Line_376 $$ if (c < 0) [ FD ]
Line_92 $$ int c = r.read()-->Line_376 $$ if (c < 0) [ FD ]
Line_67 $$ int c = reader.read()-->Line_376 $$ if (c < 0) [ FD ]
Line_73 $$ c = reader.read()-->Line_376 $$ if (c < 0) [ FD ]
Line_45 $$ int c = reader.read()-->Line_376 $$ if (c < 0) [ FD ]
Line_50 $$ c = reader.read()-->Line_376 $$ if (c < 0) [ FD ]
Line_376 $$ if (c < 0) -->Line_378 $$ if ('=' == c) [ CD ]
Line_100 $$ c = r.read()-->Line_378 $$ if ('=' == c) [ FD ]
Line_92 $$ int c = r.read()-->Line_378 $$ if ('=' == c) [ FD ]
Line_67 $$ int c = reader.read()-->Line_378 $$ if ('=' == c) [ FD ]
Line_73 $$ c = reader.read()-->Line_378 $$ if ('=' == c) [ FD ]
Line_45 $$ int c = reader.read()-->Line_378 $$ if ('=' == c) [ FD ]
Line_50 $$ c = reader.read()-->Line_378 $$ if ('=' == c) [ FD ]
Line_378 $$ if ('=' == c) -->Line_380 $$ if (';' == c || '#' == c || '\n' == c) [ CD ]
Line_380 $$ if (';' == c || '#' == c || '\n' == c) -->Line_381 $$ r.reset()[ CD ]
Line_380 $$ if (';' == c || '#' == c || '\n' == c) -->Line_383 $$ if (' ' == c || '\t' == c) [ CD ]
Line_0 $$ Entry-->Line_391 $$ //12
public class func [ CD ]
Line_391 $$ //12
public class func -->Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) [ CD ]
Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_393 $$ StreamQualifier.readName(buffered_reader)[ CD ]
Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_394 $$ if (name == null) [ CD ]
Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_398 $$ buffered_reader.mark(1)[ CD ]
Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_399 $$ final int next_char = buffered_reader.read()[ CD ]
Line_399 $$ final int next_char = buffered_reader.read()-->Line_399 $$ buffered_reader.read()[ CD ]
Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_400 $$ if (next_char == -1) [ CD ]
Line_399 $$ final int next_char = buffered_reader.read()-->Line_400 $$ if (next_char == -1) [ FD ]
Line_400 $$ if (next_char == -1) -->Line_403 $$ if (next_char == '=') [ CD ]
Line_399 $$ final int next_char = buffered_reader.read()-->Line_403 $$ if (next_char == '=') [ FD ]
Line_403 $$ if (next_char == '=') -->Line_404 $$ StreamQualifier.readValue(buffered_reader)[ CD ]
Line_403 $$ if (next_char == '=') -->Line_408 $$ buffered_reader.reset()[ CD ]
Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_411 $$ if (value == null) [ CD ]
Line_411 $$ if (value == null) -->Line_415 $$ StreamQualifier.makeStreamQualifier(name, value, entry_information)[ CD ]
Line_392 $$ public void readQualifiers(final Reader in_stream, final EntryInformation entry_information) -->Line_418 $$ return_vector.addQualifierValues(new_qualifier)[ CD ]
Line_0 $$ Entry-->Line_422 $$ //13
public class func [ CD ]
Line_422 $$ //13
public class func -->Line_423 $$ public void readFromStream(InputStream is) [ CD ]
Line_423 $$ public void readFromStream(InputStream is) -->Line_424 $$ int c = br.read()[ CD ]
Line_424 $$ int c = br.read()-->Line_424 $$ br.read()[ CD ]
Line_423 $$ public void readFromStream(InputStream is) -->Line_425 $$ if (c < 0)
    break;[ CD ]
Line_424 $$ int c = br.read()-->Line_425 $$ if (c < 0)
    break;[ FD ]
Line_100 $$ c = r.read()-->Line_425 $$ if (c < 0)
    break;[ FD ]
Line_92 $$ int c = r.read()-->Line_425 $$ if (c < 0)
    break;[ FD ]
Line_67 $$ int c = reader.read()-->Line_425 $$ if (c < 0)
    break;[ FD ]
Line_73 $$ c = reader.read()-->Line_425 $$ if (c < 0)
    break;[ FD ]
Line_45 $$ int c = reader.read()-->Line_425 $$ if (c < 0)
    break;[ FD ]
Line_50 $$ c = reader.read()-->Line_425 $$ if (c < 0)
    break;[ FD ]
Line_423 $$ public void readFromStream(InputStream is) -->Line_426 $$ if (c == ' ') [ CD ]
Line_424 $$ int c = br.read()-->Line_426 $$ if (c == ' ') [ FD ]
Line_100 $$ c = r.read()-->Line_426 $$ if (c == ' ') [ FD ]
Line_92 $$ int c = r.read()-->Line_426 $$ if (c == ' ') [ FD ]
Line_67 $$ int c = reader.read()-->Line_426 $$ if (c == ' ') [ FD ]
Line_73 $$ c = reader.read()-->Line_426 $$ if (c == ' ') [ FD ]
Line_45 $$ int c = reader.read()-->Line_426 $$ if (c == ' ') [ FD ]
Line_50 $$ c = reader.read()-->Line_426 $$ if (c == ' ') [ FD ]
Line_426 $$ if (c == ' ') -->Line_428 $$ if (negative)
    n = -n;[ CD ]
Line_426 $$ if (c == ' ') -->Line_429 $$ short val = n < -250 ? Short.MIN_VALUE : (short) (n * 4)[ CD ]
Line_426 $$ if (c == ' ') -->Line_431 $$ eval_array[(nrows - 1 - row) * ncols + col] = val[ CD ]
Line_429 $$ short val = n < -250 ? Short.MIN_VALUE : (short) (n * 4)-->Line_431 $$ eval_array[(nrows - 1 - row) * ncols + col] = val[ FD ]
Line_426 $$ if (c == ' ') -->Line_432 $$ if (++col == ncols) [ CD ]
Line_426 $$ if (c == ' ') -->Line_440 $$ if (c >= '0' && c <= '9') [ CD ]
Line_440 $$ if (c >= '0' && c <= '9') -->Line_444 $$ if (c == '-') [ CD ]
Line_424 $$ int c = br.read()-->Line_444 $$ if (c == '-') [ FD ]
Line_100 $$ c = r.read()-->Line_444 $$ if (c == '-') [ FD ]
Line_92 $$ int c = r.read()-->Line_444 $$ if (c == '-') [ FD ]
Line_67 $$ int c = reader.read()-->Line_444 $$ if (c == '-') [ FD ]
Line_73 $$ c = reader.read()-->Line_444 $$ if (c == '-') [ FD ]
Line_45 $$ int c = reader.read()-->Line_444 $$ if (c == '-') [ FD ]
Line_50 $$ c = reader.read()-->Line_444 $$ if (c == '-') [ FD ]
Line_0 $$ Entry-->Line_451 $$ //14
public class func [ CD ]
Line_451 $$ //14
public class func -->Line_452 $$ public void maltSVMFormat2OriginalSVMFormat(InputStreamReader isr, OutputStreamWriter osw, int[] cardinalities) [ CD ]
Line_452 $$ public void maltSVMFormat2OriginalSVMFormat(InputStreamReader isr, OutputStreamWriter osw, int[] cardinalities) -->Line_453 $$ in.read()[ CD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_453 $$ in.read()[ FD ]
Line_452 $$ public void maltSVMFormat2OriginalSVMFormat(InputStreamReader isr, OutputStreamWriter osw, int[] cardinalities) -->Line_454 $$ if (c == -1) [ CD ]
Line_424 $$ int c = br.read()-->Line_454 $$ if (c == -1) [ FD ]
Line_100 $$ c = r.read()-->Line_454 $$ if (c == -1) [ FD ]
Line_92 $$ int c = r.read()-->Line_454 $$ if (c == -1) [ FD ]
Line_67 $$ int c = reader.read()-->Line_454 $$ if (c == -1) [ FD ]
Line_73 $$ c = reader.read()-->Line_454 $$ if (c == -1) [ FD ]
Line_45 $$ int c = reader.read()-->Line_454 $$ if (c == -1) [ FD ]
Line_50 $$ c = reader.read()-->Line_454 $$ if (c == -1) [ FD ]
Line_454 $$ if (c == -1) -->Line_454 $$ -1[ CD ]
Line_452 $$ public void maltSVMFormat2OriginalSVMFormat(InputStreamReader isr, OutputStreamWriter osw, int[] cardinalities) -->Line_457 $$ if (c == '\t' || c == '|') [ CD ]
Line_457 $$ if (c == '\t' || c == '|') -->Line_458 $$ if (j == 0) [ CD ]
Line_458 $$ if (j == 0) -->Line_459 $$ out.write(Integer.toString(code))[ CD ]
Line_458 $$ if (j == 0) -->Line_462 $$ if (code != -1) [ CD ]
Line_462 $$ if (code != -1) -->Line_462 $$ -1[ CD ]
Line_462 $$ if (code != -1) -->Line_463 $$ out.write(' ')[ CD ]
Line_462 $$ if (code != -1) -->Line_464 $$ out.write(Integer.toString(code + offset))[ CD ]
Line_462 $$ if (code != -1) -->Line_465 $$ out.write(":1")[ CD ]
Line_458 $$ if (j == 0) -->Line_467 $$ if (c == '\t') [ CD ]
Line_424 $$ int c = br.read()-->Line_467 $$ if (c == '\t') [ FD ]
Line_100 $$ c = r.read()-->Line_467 $$ if (c == '\t') [ FD ]
Line_92 $$ int c = r.read()-->Line_467 $$ if (c == '\t') [ FD ]
Line_67 $$ int c = reader.read()-->Line_467 $$ if (c == '\t') [ FD ]
Line_73 $$ c = reader.read()-->Line_467 $$ if (c == '\t') [ FD ]
Line_45 $$ int c = reader.read()-->Line_467 $$ if (c == '\t') [ FD ]
Line_50 $$ c = reader.read()-->Line_467 $$ if (c == '\t') [ FD ]
Line_457 $$ if (c == '\t' || c == '|') -->Line_473 $$ if (c == '\n') [ CD ]
Line_424 $$ int c = br.read()-->Line_473 $$ if (c == '\n') [ FD ]
Line_100 $$ c = r.read()-->Line_473 $$ if (c == '\n') [ FD ]
Line_92 $$ int c = r.read()-->Line_473 $$ if (c == '\n') [ FD ]
Line_67 $$ int c = reader.read()-->Line_473 $$ if (c == '\n') [ FD ]
Line_73 $$ c = reader.read()-->Line_473 $$ if (c == '\n') [ FD ]
Line_45 $$ int c = reader.read()-->Line_473 $$ if (c == '\n') [ FD ]
Line_50 $$ c = reader.read()-->Line_473 $$ if (c == '\n') [ FD ]
Line_473 $$ if (c == '\n') -->Line_476 $$ out.write('\n')[ CD ]
Line_473 $$ if (c == '\n') -->Line_478 $$ if (c == '-') [ CD ]
Line_424 $$ int c = br.read()-->Line_478 $$ if (c == '-') [ FD ]
Line_100 $$ c = r.read()-->Line_478 $$ if (c == '-') [ FD ]
Line_92 $$ int c = r.read()-->Line_478 $$ if (c == '-') [ FD ]
Line_67 $$ int c = reader.read()-->Line_478 $$ if (c == '-') [ FD ]
Line_73 $$ c = reader.read()-->Line_478 $$ if (c == '-') [ FD ]
Line_45 $$ int c = reader.read()-->Line_478 $$ if (c == '-') [ FD ]
Line_50 $$ c = reader.read()-->Line_478 $$ if (c == '-') [ FD ]
Line_478 $$ if (c == '-') -->Line_479 $$ -1[ CD ]
Line_478 $$ if (c == '-') -->Line_480 $$ if (code != -1) [ CD ]
Line_480 $$ if (code != -1) -->Line_480 $$ -1[ CD ]
Line_480 $$ if (code != -1) -->Line_481 $$ if (c > 47 && c < 58) [ CD ]
Line_0 $$ Entry-->Line_490 $$ //15
public class func [ CD ]
Line_490 $$ //15
public class func -->Line_491 $$ public void readPostData(BufferedReader ir, BufferedWriter bw, String id) [ CD ]
Line_491 $$ public void readPostData(BufferedReader ir, BufferedWriter bw, String id) -->Line_492 $$ if (!ir.ready()) [ CD ]
Line_492 $$ if (!ir.ready()) -->Line_492 $$ !ir.ready()[ CD ]
Line_492 $$ !ir.ready()-->Line_492 $$ ir.ready()[ CD ]
Line_492 $$ if (!ir.ready()) -->Line_494 $$ if (!ir.ready())
    break;[ CD ]
Line_494 $$ if (!ir.ready())
    break;-->Line_494 $$ !ir.ready()[ CD ]
Line_494 $$ !ir.ready()-->Line_494 $$ ir.ready()[ CD ]
Line_491 $$ public void readPostData(BufferedReader ir, BufferedWriter bw, String id) -->Line_496 $$ int c = ir.read()[ CD ]
Line_496 $$ int c = ir.read()-->Line_496 $$ ir.read()[ CD ]
Line_491 $$ public void readPostData(BufferedReader ir, BufferedWriter bw, String id) -->Line_497 $$ if (c == -1)
    break;[ CD ]
Line_496 $$ int c = ir.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_424 $$ int c = br.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_100 $$ c = r.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_92 $$ int c = r.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_67 $$ int c = reader.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_73 $$ c = reader.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_45 $$ int c = reader.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_50 $$ c = reader.read()-->Line_497 $$ if (c == -1)
    break;[ FD ]
Line_491 $$ public void readPostData(BufferedReader ir, BufferedWriter bw, String id) -->Line_498 $$ bw.write(c)[ CD ]
Line_496 $$ int c = ir.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_424 $$ int c = br.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_100 $$ c = r.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_498 $$ bw.write(c)[ FD ]
Line_0 $$ Entry-->Line_502 $$ //16
public class func [ CD ]
Line_502 $$ //16
public class func -->Line_503 $$ public void readLine(BufferedReader inReader2) [ CD ]
Line_503 $$ public void readLine(BufferedReader inReader2) -->Line_504 $$ if (inReader2.ready()) [ CD ]
Line_504 $$ if (inReader2.ready()) -->Line_504 $$ inReader2.ready()[ CD ]
Line_504 $$ if (inReader2.ready()) -->Line_505 $$ int c = inReader2.read()[ CD ]
Line_505 $$ int c = inReader2.read()-->Line_505 $$ inReader2.read()[ CD ]
Line_504 $$ if (inReader2.ready()) -->Line_506 $$ if (c == '\n') [ CD ]
Line_505 $$ int c = inReader2.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_496 $$ int c = ir.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_424 $$ int c = br.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_100 $$ c = r.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_92 $$ int c = r.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_67 $$ int c = reader.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_73 $$ c = reader.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_45 $$ int c = reader.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_50 $$ c = reader.read()-->Line_506 $$ if (c == '\n') [ FD ]
Line_506 $$ if (c == '\n') -->Line_507 $$ return str.toString();[ CD ]
Line_507 $$ return str.toString();-->Line_507 $$ str.toString()[ CD ]
Line_504 $$ if (inReader2.ready()) -->Line_509 $$ if (c != '\r') [ CD ]
Line_505 $$ int c = inReader2.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_496 $$ int c = ir.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_424 $$ int c = br.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_100 $$ c = r.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_92 $$ int c = r.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_67 $$ int c = reader.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_73 $$ c = reader.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_45 $$ int c = reader.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_50 $$ c = reader.read()-->Line_509 $$ if (c != '\r') [ FD ]
Line_509 $$ if (c != '\r') -->Line_510 $$ str.append((char) c)[ CD ]
Line_0 $$ Entry-->Line_522 $$ //17
public class func [ CD ]
Line_522 $$ //17
public class func -->Line_523 $$ public void fromRangeReader(BufferedReader rangeFile) [ CD ]
Line_523 $$ public void fromRangeReader(BufferedReader rangeFile) -->Line_524 $$ if (rangeFile.read() == 'x') [ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_525 $$ rangeFile.readLine()[ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_526 $$ String line = rangeFile.readLine()[ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_526 $$ rangeFile.readLine()[ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_527 $$ if (line == null) [ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_527 $$ if (line == null) [ FD ]
Line_527 $$ if (line == null) -->Line_528 $$ line = ""[ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_528 $$ line = ""[ FD ]
Line_528 $$ line = ""-->Line_528 $$ line = ""[ FD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_530 $$ StringTokenizer st = new StringTokenizer(line)[ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_531 $$ double scaledLowerBound = Double.parseDouble(st.nextToken())[ CD ]
Line_531 $$ double scaledLowerBound = Double.parseDouble(st.nextToken())-->Line_531 $$ Double.parseDouble(st.nextToken())[ CD ]
Line_530 $$ StringTokenizer st = new StringTokenizer(line)-->Line_531 $$ st.nextToken()[ FD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_532 $$ double scaledUpperBound = Double.parseDouble(st.nextToken())[ CD ]
Line_532 $$ double scaledUpperBound = Double.parseDouble(st.nextToken())-->Line_532 $$ Double.parseDouble(st.nextToken())[ CD ]
Line_530 $$ StringTokenizer st = new StringTokenizer(line)-->Line_532 $$ st.nextToken()[ FD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_533 $$ if (scaledLowerBound != 0 || scaledUpperBound != 1) [ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_537 $$ String restore_line = null[ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_538 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()[ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_539 $$ while ((restore_line = rangeFile.readLine()) != null) [ CD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_524 $$ if (rangeFile.read() == 'x') [ CD ]
Line_539 $$ restore_line = rangeFile.readLine()-->Line_539 $$ restore_line = rangeFile.readLine()[ FD ]
Line_537 $$ String restore_line = null-->Line_539 $$ restore_line = rangeFile.readLine()[ FD ]
Line_539 $$ restore_line = rangeFile.readLine()-->Line_539 $$ rangeFile.readLine()[ CD ]
Line_539 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_541 $$ StringTokenizer st2 = new StringTokenizer(restore_line)[ CD ]
Line_539 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_542 $$ st2.nextToken()[ CD ]
Line_541 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_542 $$ st2.nextToken()[ FD ]
Line_539 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_543 $$ Double.parseDouble(st2.nextToken())[ CD ]
Line_541 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_543 $$ st2.nextToken()[ FD ]
Line_539 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_544 $$ Double.parseDouble(st2.nextToken())[ CD ]
Line_541 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_544 $$ st2.nextToken()[ FD ]
Line_539 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_545 $$ FeatureLimits newLimit = new FeatureLimits(feature_min, feature_max)[ CD ]
Line_539 $$ while ((restore_line = rangeFile.readLine()) != null) -->Line_546 $$ limits.add(newLimit)[ CD ]
Line_538 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()-->Line_546 $$ limits.add(newLimit)[ FD ]
Line_545 $$ FeatureLimits newLimit = new FeatureLimits(feature_min, feature_max)-->Line_546 $$ limits.add(newLimit)[ FD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_549 $$ FeatureVectorScalerImpl scaler = new FeatureVectorScalerImpl(limits.size(), scaledLowerBound, scaledUpperBound)[ CD ]
Line_538 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()-->Line_549 $$ limits.size()[ FD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_550 $$ scaler.setStrategy(new LinearScaling())[ CD ]
Line_549 $$ FeatureVectorScalerImpl scaler = new FeatureVectorScalerImpl(limits.size(), scaledLowerBound, scaledUpperBound)-->Line_550 $$ scaler.setStrategy(new LinearScaling())[ FD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_551 $$ scaler.setFeatureLimits(limits)[ CD ]
Line_549 $$ FeatureVectorScalerImpl scaler = new FeatureVectorScalerImpl(limits.size(), scaledLowerBound, scaledUpperBound)-->Line_551 $$ scaler.setFeatureLimits(limits)[ FD ]
Line_538 $$ List<FeatureLimits> limits = new ArrayList<FeatureLimits>()-->Line_551 $$ scaler.setFeatureLimits(limits)[ FD ]
Line_524 $$ if (rangeFile.read() == 'x') -->Line_553 $$ return scaler;[ CD ]
Line_0 $$ Entry-->Line_560 $$ //18
public class func [ CD ]
Line_560 $$ //18
public class func -->Line_561 $$ public void checkFor(String str, BufferedReader b, BufferedWriter o) [ CD ]
Line_561 $$ public void checkFor(String str, BufferedReader b, BufferedWriter o) -->Line_562 $$ b.mark(str.length() + 1)[ CD ]
Line_561 $$ public void checkFor(String str, BufferedReader b, BufferedWriter o) -->Line_563 $$ char[] buffer = new char[str.length()][ CD ]
Line_561 $$ public void checkFor(String str, BufferedReader b, BufferedWriter o) -->Line_564 $$ int read = b.read(buffer)[ CD ]
Line_564 $$ int read = b.read(buffer)-->Line_564 $$ b.read(buffer)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_564 $$ b.read(buffer)[ FD ]
Line_561 $$ public void checkFor(String str, BufferedReader b, BufferedWriter o) -->Line_565 $$ if (read == -1) [ CD ]
Line_564 $$ int read = b.read(buffer)-->Line_565 $$ if (read == -1) [ FD ]
Line_565 $$ if (read == -1) -->Line_566 $$ b.reset()[ CD ]
Line_565 $$ if (read == -1) -->Line_567 $$ return false;[ CD ]
Line_561 $$ public void checkFor(String str, BufferedReader b, BufferedWriter o) -->Line_569 $$ if (new String(buffer, 0, read).toLowerCase().equals(str.toLowerCase())) [ CD ]
Line_569 $$ if (new String(buffer, 0, read).toLowerCase().equals(str.toLowerCase())) -->Line_569 $$ new String(buffer, 0, read).toLowerCase().equals(str.toLowerCase())[ CD ]
Line_569 $$ if (new String(buffer, 0, read).toLowerCase().equals(str.toLowerCase())) -->Line_570 $$ if (o != null)
    o.write(buffer, 0, read);[ CD ]
Line_570 $$ if (o != null)
    o.write(buffer, 0, read);-->Line_570 $$ o.write(buffer, 0, read)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_570 $$ o.write(buffer, 0, read)[ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_570 $$ o.write(buffer, 0, read)[ FD ]
Line_569 $$ if (new String(buffer, 0, read).toLowerCase().equals(str.toLowerCase())) -->Line_571 $$ return true;[ CD ]
Line_569 $$ if (new String(buffer, 0, read).toLowerCase().equals(str.toLowerCase())) -->Line_573 $$ b.reset()[ CD ]
Line_569 $$ if (new String(buffer, 0, read).toLowerCase().equals(str.toLowerCase())) -->Line_574 $$ return false;[ CD ]
Line_561 $$ public void checkFor(String str, BufferedReader b, BufferedWriter o) -->Line_576 $$ b.reset()[ CD ]
Line_0 $$ Entry-->Line_580 $$ //19
public class func [ CD ]
Line_580 $$ //19
public class func -->Line_581 $$ public void getAnswer(BufferedReader in, PrintWriter out, String command) [ CD ]
Line_581 $$ public void getAnswer(BufferedReader in, PrintWriter out, String command) -->Line_582 $$ log(Level.TRACE, "status code: %d", statuscode)[ CD ]
Line_581 $$ public void getAnswer(BufferedReader in, PrintWriter out, String command) -->Line_583 $$ if ((statuscode != 200 && statuscode != 500) || size < 1) [ CD ]
Line_583 $$ if ((statuscode != 200 && statuscode != 500) || size < 1) -->Line_584 $$ log(Level.ERROR, "communication error, code: %d, byte expected: %d", statuscode, size)[ CD ]
Line_583 $$ if ((statuscode != 200 && statuscode != 500) || size < 1) -->Line_585 $$ return new BufferedReader(new CharArrayReader(new char[0]));[ CD ]
Line_581 $$ public void getAnswer(BufferedReader in, PrintWriter out, String command) -->Line_587 $$ int readchar = in.read(cbuf)[ CD ]
Line_587 $$ int readchar = in.read(cbuf)-->Line_587 $$ in.read(cbuf)[ CD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_587 $$ in.read(cbuf)[ FD ]
Line_581 $$ public void getAnswer(BufferedReader in, PrintWriter out, String command) -->Line_588 $$ if (readchar != size) [ CD ]
Line_587 $$ int readchar = in.read(cbuf)-->Line_588 $$ if (readchar != size) [ FD ]
Line_588 $$ if (readchar != size) -->Line_589 $$ log(Level.ERROR, "read failed, not enough byte, got %d expected %d", readchar, size)[ CD ]
Line_587 $$ int readchar = in.read(cbuf)-->Line_589 $$ log(Level.ERROR, "read failed, not enough byte, got %d expected %d", readchar, size)[ FD ]
Line_588 $$ if (readchar != size) -->Line_590 $$ return new BufferedReader(new CharArrayReader(new char[0]));[ CD ]
Line_581 $$ public void getAnswer(BufferedReader in, PrintWriter out, String command) -->Line_592 $$ in.readLine()[ CD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_592 $$ in.readLine()[ FD ]
Line_581 $$ public void getAnswer(BufferedReader in, PrintWriter out, String command) -->Line_593 $$ return new BufferedReader(new CharArrayReader(cbuf));[ CD ]
Line_0 $$ Entry-->Line_597 $$ //20
public class func [ CD ]
Line_597 $$ //20
public class func -->Line_598 $$ public void compare(String file1, String file2, BufferedReader in1, BufferedReader in2) [ CD ]
Line_598 $$ public void compare(String file1, String file2, BufferedReader in1, BufferedReader in2) -->Line_599 $$ String s2 = in2.readLine()[ CD ]
Line_599 $$ String s2 = in2.readLine()-->Line_599 $$ in2.readLine()[ CD ]
Line_598 $$ public void compare(String file1, String file2, BufferedReader in1, BufferedReader in2) -->Line_600 $$ if (!s1.equals(s2)) [ CD ]
Line_600 $$ if (!s1.equals(s2)) -->Line_600 $$ !s1.equals(s2)[ CD ]
Line_600 $$ !s1.equals(s2)-->Line_600 $$ s1.equals(s2)[ CD ]
Line_599 $$ String s2 = in2.readLine()-->Line_600 $$ s1.equals(s2)[ FD ]
Line_600 $$ if (!s1.equals(s2)) -->Line_601 $$ System.out.println("Files [" + file1 + "] and [" + file2 + "] differ on line " + lineCounter)[ CD ]
Line_600 $$ if (!s1.equals(s2)) -->Line_604 $$ System.out.println("One reads:  [" + s1 + "].")[ CD ]
Line_600 $$ if (!s1.equals(s2)) -->Line_605 $$ System.out.println("Other reads:[" + s2 + "].")[ CD ]
Line_600 $$ if (!s1.equals(s2)) -->Line_606 $$ outputFile(file1)[ CD ]
Line_600 $$ if (!s1.equals(s2)) -->Line_607 $$ outputFile(file2)[ CD ]
Line_600 $$ if (!s1.equals(s2)) -->Line_609 $$ return false;[ CD ]
Line_598 $$ public void compare(String file1, String file2, BufferedReader in1, BufferedReader in2) -->Line_611 $$ if (in2.read() != -1) [ CD ]
Line_611 $$ if (in2.read() != -1) -->Line_612 $$ System.out.println("File [" + file2 + "] longer than file [" + file1 + "].")[ CD ]
Line_611 $$ if (in2.read() != -1) -->Line_614 $$ outputFile(file1)[ CD ]
Line_611 $$ if (in2.read() != -1) -->Line_615 $$ outputFile(file2)[ CD ]
Line_611 $$ if (in2.read() != -1) -->Line_617 $$ return false;[ CD ]
Line_0 $$ Entry-->Line_622 $$ //21
public class func [ CD ]
Line_622 $$ //21
public class func -->Line_623 $$ public void findLineColumnOfOffset(String filepath, int offset) [ CD ]
Line_623 $$ public void findLineColumnOfOffset(String filepath, int offset) -->Line_624 $$ if (!bfr.ready())
    break;[ CD ]
Line_624 $$ if (!bfr.ready())
    break;-->Line_624 $$ !bfr.ready()[ CD ]
Line_624 $$ !bfr.ready()-->Line_624 $$ bfr.ready()[ CD ]
Line_623 $$ public void findLineColumnOfOffset(String filepath, int offset) -->Line_626 $$ int ch = bfr.read()[ CD ]
Line_626 $$ int ch = bfr.read()-->Line_626 $$ bfr.read()[ CD ]
Line_623 $$ public void findLineColumnOfOffset(String filepath, int offset) -->Line_627 $$ if (ch == 10) [ CD ]
Line_626 $$ int ch = bfr.read()-->Line_627 $$ if (ch == 10) [ FD ]
Line_254 $$ ch = reader.read()-->Line_627 $$ if (ch == 10) [ FD ]
Line_255 $$ ch = reader.read()-->Line_627 $$ if (ch == 10) [ FD ]
Line_256 $$ ch = reader.read()-->Line_627 $$ if (ch == 10) [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_627 $$ if (ch == 10) [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_627 $$ if (ch == 10) [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_627 $$ if (ch == 10) [ FD ]
Line_623 $$ public void findLineColumnOfOffset(String filepath, int offset) -->Line_631 $$ bfr.close()[ CD ]
Line_0 $$ Entry-->Line_635 $$ //22
public class func [ CD ]
Line_635 $$ //22
public class func -->Line_636 $$ public void readInputStreamToString(Socket socket) [ CD ]
Line_636 $$ public void readInputStreamToString(Socket socket) -->Line_637 $$ while ((line = bufferedReader.readLine()) != null) [ CD ]
Line_636 $$ public void readInputStreamToString(Socket socket) -->Line_636 $$ public void readInputStreamToString(Socket socket) [ CD ]
Line_637 $$ while ((line = bufferedReader.readLine()) != null) -->Line_638 $$ if (line.startsWith("Content-Length")) [ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_638 $$ if (line.startsWith("Content-Length")) [ FD ]
Line_528 $$ line = ""-->Line_638 $$ if (line.startsWith("Content-Length")) [ FD ]
Line_638 $$ if (line.startsWith("Content-Length")) -->Line_638 $$ line.startsWith("Content-Length")[ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_638 $$ line.startsWith("Content-Length")[ FD ]
Line_528 $$ line = ""-->Line_638 $$ line.startsWith("Content-Length")[ FD ]
Line_638 $$ if (line.startsWith("Content-Length")) -->Line_639 $$ Integer.parseInt(line.split(":")[1].trim())[ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_639 $$ line.split(":")[ FD ]
Line_528 $$ line = ""-->Line_639 $$ line.split(":")[ FD ]
Line_637 $$ while ((line = bufferedReader.readLine()) != null) -->Line_641 $$ if (line.length() == 0) [ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_641 $$ line.length()[ FD ]
Line_528 $$ line = ""-->Line_641 $$ line.length()[ FD ]
Line_641 $$ if (line.length() == 0) -->Line_643 $$ if (contentLength != null) [ CD ]
Line_643 $$ if (contentLength != null) -->Line_644 $$ result.append('\n')[ CD ]
Line_643 $$ if (contentLength != null) -->Line_645 $$ for (int position = 0; position < contentLength; position++) [ CD ]
Line_643 $$ if (contentLength != null) -->Line_643 $$ if (contentLength != null) [ CD ]
Line_645 $$ for (int position = 0; position < contentLength; position++) -->Line_645 $$ int position = 0[ CD ]
Line_645 $$ for (int position = 0; position < contentLength; position++) -->Line_645 $$ position++[ CD ]
Line_645 $$ int position = 0-->Line_645 $$ position++[ FD ]
Line_645 $$ for (int position = 0; position < contentLength; position++) -->Line_646 $$ result.append((char) bufferedReader.read())[ CD ]
Line_637 $$ while ((line = bufferedReader.readLine()) != null) -->Line_651 $$ result.append(line).append('\n')[ CD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_651 $$ result.append(line)[ FD ]
Line_528 $$ line = ""-->Line_651 $$ result.append(line)[ FD ]
Line_0 $$ Entry-->Line_656 $$ //23
public class func [ CD ]
Line_656 $$ //23
public class func -->Line_657 $$ public void load(InputStreamReader isr) [ CD ]
Line_657 $$ public void load(InputStreamReader isr) -->Line_658 $$ BufferedReader bin = new BufferedReader(isr)[ CD ]
Line_657 $$ public void load(InputStreamReader isr) -->Line_659 $$ bin.mark(2)[ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_659 $$ bin.mark(2)[ FD ]
Line_657 $$ public void load(InputStreamReader isr) -->Line_660 $$ if (bin.read() == '\t') [ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_660 $$ bin.read()[ FD ]
Line_660 $$ if (bin.read() == '\t') -->Line_661 $$ bin.reset()[ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_661 $$ bin.reset()[ FD ]
Line_660 $$ if (bin.read() == '\t') -->Line_662 $$ loadHeader(bin)[ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_662 $$ loadHeader(bin)[ FD ]
Line_660 $$ if (bin.read() == '\t') -->Line_664 $$ bin.reset()[ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_664 $$ bin.reset()[ FD ]
Line_657 $$ public void load(InputStreamReader isr) -->Line_666 $$ while ((fileLine = bin.readLine()) != null) [ CD ]
Line_657 $$ public void load(InputStreamReader isr) -->Line_657 $$ public void load(InputStreamReader isr) [ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_666 $$ bin.readLine()[ FD ]
Line_666 $$ while ((fileLine = bin.readLine()) != null) -->Line_667 $$ if (fileLine.length() > 0) [ CD ]
Line_667 $$ if (fileLine.length() > 0) -->Line_668 $$ addSymbolTable(fileLine)[ CD ]
Line_667 $$ if (fileLine.length() > 0) -->Line_669 $$ table.load(bin)[ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_669 $$ table.load(bin)[ FD ]
Line_657 $$ public void load(InputStreamReader isr) -->Line_672 $$ bin.close()[ CD ]
Line_658 $$ BufferedReader bin = new BufferedReader(isr)-->Line_672 $$ bin.close()[ FD ]
Line_0 $$ Entry-->Line_676 $$ //24
public class func [ CD ]
Line_676 $$ //24
public class func -->Line_677 $$ public void updateConsoleLog(File dest, InputStream in, LineListener lineListener) [ CD ]
Line_677 $$ public void updateConsoleLog(File dest, InputStream in, LineListener lineListener) -->Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))[ CD ]
Line_677 $$ public void updateConsoleLog(File dest, InputStream in, LineListener lineListener) -->Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) [ CD ]
Line_677 $$ public void updateConsoleLog(File dest, InputStream in, LineListener lineListener) -->Line_677 $$ public void updateConsoleLog(File dest, InputStream in, LineListener lineListener) [ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_679 $$ reader.read(data, offset, data.length - offset)[ FD ]
Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) -->Line_682 $$ for (int i = end; i > 0; i--) [ CD ]
Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) -->Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) [ CD ]
Line_682 $$ for (int i = end; i > 0; i--) -->Line_682 $$ int i = end[ CD ]
Line_682 $$ for (int i = end; i > 0; i--) -->Line_682 $$ i--[ CD ]
Line_682 $$ int i = end-->Line_682 $$ i--[ FD ]
Line_682 $$ for (int i = end; i > 0; i--) -->Line_683 $$ int index = i - 1[ CD ]
Line_682 $$ for (int i = end; i > 0; i--) -->Line_684 $$ char c = data[index][ CD ]
Line_682 $$ for (int i = end; i > 0; i--) -->Line_685 $$ if ('\n' == c) [ CD ]
Line_684 $$ char c = data[index]-->Line_685 $$ if ('\n' == c) [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_496 $$ int c = ir.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_424 $$ int c = br.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_100 $$ c = r.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_92 $$ int c = r.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_67 $$ int c = reader.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_73 $$ c = reader.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_45 $$ int c = reader.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_50 $$ c = reader.read()-->Line_685 $$ if ('\n' == c) [ FD ]
Line_682 $$ for (int i = end; i > 0; i--) -->Line_688 $$ overflow[index] = data[index][ CD ]
Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) -->Line_691 $$ if (overflowIndex == 0) [ CD ]
Line_691 $$ if (overflowIndex == 0) -->Line_692 $$ if (end == data.length) [ CD ]
Line_692 $$ if (end == data.length) -->Line_693 $$ realloc(data)[ CD ]
Line_692 $$ if (end == data.length) -->Line_694 $$ realloc(overflow)[ CD ]
Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) -->Line_702 $$ lineListener.copyLine(new CharArraySequence(data, 0, overflowIndex))[ CD ]
Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) -->Line_703 $$ writer.write(data, 0, overflowIndex)[ CD ]
Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) -->Line_705 $$ //place overflow back in data
for (int i = overflowIndex; i < end; i++) [ CD ]
Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) -->Line_679 $$ while ((hasRead = reader.read(data, offset, data.length - offset)) != -1) [ CD ]
Line_682 $$ int i = end-->Line_705 $$ //place overflow back in data
for (int i = overflowIndex; i < end; i++) [ FD ]
Line_705 $$ //place overflow back in data
for (int i = overflowIndex; i < end; i++) -->Line_705 $$ int i = overflowIndex[ CD ]
Line_705 $$ //place overflow back in data
for (int i = overflowIndex; i < end; i++) -->Line_705 $$ i++[ CD ]
Line_705 $$ int i = overflowIndex-->Line_705 $$ i++[ FD ]
Line_682 $$ int i = end-->Line_705 $$ i++[ FD ]
Line_705 $$ //place overflow back in data
for (int i = overflowIndex; i < end; i++) -->Line_706 $$ data[i - overflowIndex] = overflow[i][ CD ]
Line_0 $$ Entry-->Line_713 $$ //25
public class func [ CD ]
Line_713 $$ //25
public class func -->Line_714 $$ public void readName(final BufferedReader buffered_reader) [ CD ]
Line_714 $$ public void readName(final BufferedReader buffered_reader) -->Line_715 $$ while ((current_char = buffered_reader.read()) != -1 && // Kaffe 1.00 returns 0 at end of string
0 != current_char) [ CD ]
Line_714 $$ public void readName(final BufferedReader buffered_reader) -->Line_714 $$ public void readName(final BufferedReader buffered_reader) [ CD ]
Line_715 $$ while ((current_char = buffered_reader.read()) != -1 && // Kaffe 1.00 returns 0 at end of string
0 != current_char) -->Line_718 $$ if (' ' == current_char || '\n' == current_char || '\r' == current_char || '\t' == current_char) [ CD ]
Line_718 $$ if (' ' == current_char || '\n' == current_char || '\r' == current_char || '\t' == current_char) -->Line_725 $$ if ('/' == current_char) [ CD ]
Line_714 $$ public void readName(final BufferedReader buffered_reader) -->Line_737 $$ if (-1 == current_char || // Kaffe 1.00 returns 0 at end of string
0 == current_char) [ CD ]
Line_737 $$ if (-1 == current_char || // Kaffe 1.00 returns 0 at end of string
0 == current_char) -->Line_741 $$ // end of file
return null;[ CD ]
Line_714 $$ public void readName(final BufferedReader buffered_reader) -->Line_743 $$ buffered_reader.mark(1)[ CD ]
Line_0 $$ Entry-->Line_747 $$ //26
public class func [ CD ]
Line_747 $$ //26
public class func -->Line_748 $$ public void accept(final File parentDir, final String fileName) [ CD ]
Line_748 $$ public void accept(final File parentDir, final String fileName) -->Line_749 $$ final File descriptionFile = new File(parentDir, fileName)[ CD ]
Line_748 $$ public void accept(final File parentDir, final String fileName) -->Line_750 $$ if (PCGFile.isPCGenListFile(descriptionFile)) [ CD ]
Line_749 $$ final File descriptionFile = new File(parentDir, fileName)-->Line_750 $$ if (PCGFile.isPCGenListFile(descriptionFile)) [ FD ]
Line_750 $$ if (PCGFile.isPCGenListFile(descriptionFile)) -->Line_750 $$ PCGFile.isPCGenListFile(descriptionFile)[ CD ]
Line_749 $$ final File descriptionFile = new File(parentDir, fileName)-->Line_750 $$ PCGFile.isPCGenListFile(descriptionFile)[ FD ]
Line_750 $$ if (PCGFile.isPCGenListFile(descriptionFile)) -->Line_752 $$ BufferedReader descriptionReader = null[ CD ]
Line_749 $$ final File descriptionFile = new File(parentDir, fileName)-->Line_756 $$ if (descriptionFile.exists()) [ FD ]
Line_756 $$ if (descriptionFile.exists()) -->Line_756 $$ descriptionFile.exists()[ CD ]
Line_749 $$ final File descriptionFile = new File(parentDir, fileName)-->Line_756 $$ descriptionFile.exists()[ FD ]
Line_756 $$ if (descriptionFile.exists()) -->Line_758 $$ final char[] inputLine[ CD ]
Line_756 $$ if (descriptionFile.exists()) -->Line_762 $$ descriptionReader = new BufferedReader(new InputStreamReader(new FileInputStream(descriptionFile), "UTF-8"))[ CD ]
Line_752 $$ BufferedReader descriptionReader = null-->Line_762 $$ descriptionReader = new BufferedReader(new InputStreamReader(new FileInputStream(descriptionFile), "UTF-8"))[ FD ]
Line_762 $$ descriptionReader = new BufferedReader(new InputStreamReader(new FileInputStream(descriptionFile), "UTF-8"))-->Line_762 $$ descriptionReader = new BufferedReader(new InputStreamReader(new FileInputStream(descriptionFile), "UTF-8"))[ FD ]
Line_756 $$ if (descriptionFile.exists()) -->Line_765 $$ final int length = (int) descriptionFile.length()[ CD ]
Line_749 $$ final File descriptionFile = new File(parentDir, fileName)-->Line_765 $$ descriptionFile.length()[ FD ]
Line_756 $$ if (descriptionFile.exists()) -->Line_766 $$ inputLine = new char[length][ CD ]
Line_758 $$ final char[] inputLine-->Line_766 $$ inputLine = new char[length][ FD ]
Line_766 $$ inputLine = new char[length]-->Line_766 $$ inputLine = new char[length][ FD ]
Line_756 $$ if (descriptionFile.exists()) -->Line_767 $$ descriptionReader.read(inputLine, 0, length)[ CD ]
Line_752 $$ BufferedReader descriptionReader = null-->Line_767 $$ descriptionReader.read(inputLine, 0, length)[ FD ]
Line_762 $$ descriptionReader = new BufferedReader(new InputStreamReader(new FileInputStream(descriptionFile), "UTF-8"))-->Line_767 $$ descriptionReader.read(inputLine, 0, length)[ FD ]
Line_758 $$ final char[] inputLine-->Line_767 $$ descriptionReader.read(inputLine, 0, length)[ FD ]
Line_766 $$ inputLine = new char[length]-->Line_767 $$ descriptionReader.read(inputLine, 0, length)[ FD ]
Line_765 $$ final int length = (int) descriptionFile.length()-->Line_767 $$ descriptionReader.read(inputLine, 0, length)[ FD ]
Line_756 $$ if (descriptionFile.exists()) -->Line_768 $$ setDescriptionLst(getDescriptionLst() + new String(inputLine))[ CD ]
Line_752 $$ BufferedReader descriptionReader = null-->Line_775 $$ if (descriptionReader != null) [ FD ]
Line_762 $$ descriptionReader = new BufferedReader(new InputStreamReader(new FileInputStream(descriptionFile), "UTF-8"))-->Line_775 $$ if (descriptionReader != null) [ FD ]
Line_752 $$ BufferedReader descriptionReader = null-->Line_779 $$ descriptionReader.close()[ FD ]
Line_762 $$ descriptionReader = new BufferedReader(new InputStreamReader(new FileInputStream(descriptionFile), "UTF-8"))-->Line_779 $$ descriptionReader.close()[ FD ]
Line_750 $$ if (PCGFile.isPCGenListFile(descriptionFile)) -->Line_790 $$ if (parentDir.isDirectory()) [ CD ]
Line_790 $$ if (parentDir.isDirectory()) -->Line_790 $$ parentDir.isDirectory()[ CD ]
Line_790 $$ if (parentDir.isDirectory()) -->Line_792 $$ loadDescriptionFilesInDirectory(parentDir.getPath() + File.separator + fileName)[ CD ]
Line_0 $$ Entry-->Line_797 $$ //27
public class func [ CD ]
Line_797 $$ //27
public class func -->Line_798 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) [ CD ]
Line_798 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) -->Line_799 $$ if (tmp == (char) 0 || tmp >= 256) [ CD ]
Line_799 $$ if (tmp == (char) 0 || tmp >= 256) -->Line_800 $$ out.close()[ CD ]
Line_798 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) -->Line_803 $$ br.read()[ CD ]
Line_798 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) -->Line_804 $$ if (tmp == -1) [ CD ]
Line_804 $$ if (tmp == -1) -->Line_804 $$ -1[ CD ]
Line_804 $$ if (tmp == -1) -->Line_805 $$ charStats[0]++[ CD ]
Line_804 $$ if (tmp == -1) -->Line_806 $$ file.add(0)[ CD ]
Line_326 $$ File file = new File(fileName)-->Line_806 $$ file.add(0)[ FD ]
Line_804 $$ if (tmp == -1) -->Line_808 $$ file.add(tmp)[ CD ]
Line_326 $$ File file = new File(fileName)-->Line_808 $$ file.add(tmp)[ FD ]
Line_0 $$ Entry-->Line_812 $$ //28
public class func [ CD ]
Line_812 $$ //28
public class func -->Line_813 $$ public void tokenize(final Reader reader) [ CD ]
Line_813 $$ public void tokenize(final Reader reader) -->Line_814 $$ while (br.read(buffer) == 1) [ CD ]
Line_813 $$ public void tokenize(final Reader reader) -->Line_813 $$ public void tokenize(final Reader reader) [ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_814 $$ br.read(buffer)[ FD ]
Line_814 $$ while (br.read(buffer) == 1) -->Line_816 $$ final char c = buffer[0][ CD ]
Line_814 $$ while (br.read(buffer) == 1) -->Line_819 $$ //
if (!this.isTokenMember(c)) [ CD ]
Line_819 $$ //
if (!this.isTokenMember(c)) -->Line_819 $$ !this.isTokenMember(c)[ CD ]
Line_819 $$ !this.isTokenMember(c)-->Line_819 $$ this.isTokenMember(c)[ CD ]
Line_816 $$ final char c = buffer[0]-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_684 $$ char c = data[index]-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_496 $$ int c = ir.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_424 $$ int c = br.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_100 $$ c = r.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_819 $$ //
if (!this.isTokenMember(c)) -->Line_821 $$ if (text.length() > 0) [ CD ]
Line_821 $$ if (text.length() > 0) -->Line_823 $$ result.add(new DefaultToken(text.toString(), start))[ CD ]
Line_819 $$ //
if (!this.isTokenMember(c)) -->Line_832 $$ text.append(c)[ CD ]
Line_816 $$ final char c = buffer[0]-->Line_832 $$ text.append(c)[ FD ]
Line_684 $$ char c = data[index]-->Line_832 $$ text.append(c)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_832 $$ text.append(c)[ FD ]
Line_496 $$ int c = ir.read()-->Line_832 $$ text.append(c)[ FD ]
Line_424 $$ int c = br.read()-->Line_832 $$ text.append(c)[ FD ]
Line_100 $$ c = r.read()-->Line_832 $$ text.append(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_832 $$ text.append(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_832 $$ text.append(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_832 $$ text.append(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_832 $$ text.append(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_832 $$ text.append(c)[ FD ]
Line_813 $$ public void tokenize(final Reader reader) -->Line_837 $$ if (text.length() > 0) [ CD ]
Line_837 $$ if (text.length() > 0) -->Line_839 $$ result.add(new DefaultToken(text.toString(), start))[ CD ]
Line_0 $$ Entry-->Line_844 $$ //29
public class func [ CD ]
Line_844 $$ //29
public class func -->Line_845 $$ public void CalculatePercent(String inputFile, PrintWriter pw) [ CD ]
Line_845 $$ public void CalculatePercent(String inputFile, PrintWriter pw) -->Line_846 $$ while ((inRead = bfr.read()) != -1) [ CD ]
Line_845 $$ public void CalculatePercent(String inputFile, PrintWriter pw) -->Line_845 $$ public void CalculatePercent(String inputFile, PrintWriter pw) [ CD ]
Line_846 $$ while ((inRead = bfr.read()) != -1) -->Line_848 $$ if ((!(fRead == 'A' || fRead == 'T' || fRead == 'C' || fRead == 'G' || fRead == 'N')) && (!(fRead == 'a' || fRead == 't' || fRead == 'c' || fRead == 'g' || fRead == 'n')))
    continue;[ CD ]
Line_846 $$ while ((inRead = bfr.read()) != -1) -->Line_851 $$ sequenceWindow.add(fRead)[ CD ]
Line_846 $$ while ((inRead = bfr.read()) != -1) -->Line_852 $$ if (sequenceWindow.size() == windowSize) [ CD ]
Line_852 $$ if (sequenceWindow.size() == windowSize) -->Line_852 $$ sequenceWindow.size()[ CD ]
Line_852 $$ if (sequenceWindow.size() == windowSize) -->Line_857 $$ if (inWindow == 0) [ CD ]
Line_857 $$ if (inWindow == 0) -->Line_858 $$ pw.println("0.0")[ CD ]
Line_857 $$ if (inWindow == 0) -->Line_861 $$ pw.println(String.format("%.2f", result))[ CD ]
Line_852 $$ if (sequenceWindow.size() == windowSize) -->Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();[ CD ]
Line_852 $$ if (sequenceWindow.size() == windowSize) -->Line_852 $$ if (sequenceWindow.size() == windowSize) [ CD ]
Line_705 $$ int i = overflowIndex-->Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();[ FD ]
Line_682 $$ int i = end-->Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();[ FD ]
Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();-->Line_863 $$ int i = 0[ CD ]
Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();-->Line_863 $$ i++[ CD ]
Line_863 $$ int i = 0-->Line_863 $$ i++[ FD ]
Line_705 $$ int i = overflowIndex-->Line_863 $$ i++[ FD ]
Line_682 $$ int i = end-->Line_863 $$ i++[ FD ]
Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();-->Line_864 $$ sequenceWindow.remove()[ CD ]
Line_0 $$ Entry-->Line_870 $$ //30
public class func [ CD ]
Line_870 $$ //30
public class func -->Line_871 $$ public void getContent(HttpURLConnection connection, StringBuilder builder) [ CD ]
Line_871 $$ public void getContent(HttpURLConnection connection, StringBuilder builder) -->Line_872 $$ do [ CD ]
Line_871 $$ public void getContent(HttpURLConnection connection, StringBuilder builder) -->Line_871 $$ public void getContent(HttpURLConnection connection, StringBuilder builder) [ CD ]
Line_872 $$ do -->Line_874 $$ reader.read(buffer, 0, 1024)[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_874 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_874 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_872 $$ do -->Line_875 $$ if (wasRead > 0)
    builder.append(buffer, 0, wasRead);[ CD ]
Line_875 $$ if (wasRead > 0)
    builder.append(buffer, 0, wasRead);-->Line_876 $$ builder.append(buffer, 0, wasRead)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_876 $$ builder.append(buffer, 0, wasRead)[ FD ]
Line_872 $$ do -->Line_878 $$ -1[ CD ]
Line_871 $$ public void getContent(HttpURLConnection connection, StringBuilder builder) -->Line_879 $$ if (reader != null) [ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_879 $$ if (reader != null) [ FD ]
Line_879 $$ if (reader != null) -->Line_880 $$ reader.close()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_880 $$ reader.close()[ FD ]
Line_0 $$ Entry-->Line_885 $$ //31
public class func [ CD ]
Line_885 $$ //31
public class func -->Line_886 $$ public void determineEncoding(String filename) [ CD ]
Line_886 $$ public void determineEncoding(String filename) -->Line_887 $$ int c = br.read()[ CD ]
Line_887 $$ int c = br.read()-->Line_887 $$ br.read()[ CD ]
Line_886 $$ public void determineEncoding(String filename) -->Line_888 $$ if (c == -1) [ CD ]
Line_887 $$ int c = br.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_888 $$ if (c == -1) [ FD ]
Line_684 $$ char c = data[index]-->Line_888 $$ if (c == -1) [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_496 $$ int c = ir.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_424 $$ int c = br.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_100 $$ c = r.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_92 $$ int c = r.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_67 $$ int c = reader.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_73 $$ c = reader.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_45 $$ int c = reader.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_50 $$ c = reader.read()-->Line_888 $$ if (c == -1) [ FD ]
Line_886 $$ public void determineEncoding(String filename) -->Line_891 $$ sb.append((char) c)[ CD ]
Line_886 $$ public void determineEncoding(String filename) -->Line_892 $$ if (c == '>') [ CD ]
Line_887 $$ int c = br.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_892 $$ if (c == '>') [ FD ]
Line_684 $$ char c = data[index]-->Line_892 $$ if (c == '>') [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_496 $$ int c = ir.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_424 $$ int c = br.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_100 $$ c = r.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_92 $$ int c = r.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_67 $$ int c = reader.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_73 $$ c = reader.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_45 $$ int c = reader.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_50 $$ c = reader.read()-->Line_892 $$ if (c == '>') [ FD ]
Line_886 $$ public void determineEncoding(String filename) -->Line_895 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_899 $$ //32
public class func [ CD ]
Line_899 $$ //32
public class func -->Line_900 $$ public void init() [ CD ]
Line_900 $$ public void init() -->Line_901 $$ int ch = reader.read()[ CD ]
Line_901 $$ int ch = reader.read()-->Line_901 $$ reader.read()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_901 $$ reader.read()[ FD ]
Line_900 $$ public void init() -->Line_902 $$ if ((ch < 0) || (ch == '\n'))
    break;[ CD ]
Line_900 $$ public void init() -->Line_904 $$ buffer.append((char) ch)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_904 $$ buffer.append((char) ch)[ FD ]
Line_900 $$ public void init() -->Line_905 $$ String line = buffer.toString()[ CD ]
Line_905 $$ String line = buffer.toString()-->Line_905 $$ buffer.toString()[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_905 $$ buffer.toString()[ FD ]
Line_900 $$ public void init() -->Line_906 $$ if (line.length() < 1)
    break;[ CD ]
Line_905 $$ String line = buffer.toString()-->Line_906 $$ line.length()[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_906 $$ line.length()[ FD ]
Line_528 $$ line = ""-->Line_906 $$ line.length()[ FD ]
Line_900 $$ public void init() -->Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;[ CD ]
Line_900 $$ public void init() -->Line_900 $$ public void init() [ CD ]
Line_863 $$ int i = 0-->Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;[ FD ]
Line_705 $$ int i = overflowIndex-->Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;[ FD ]
Line_682 $$ int i = end-->Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;[ FD ]
Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;-->Line_908 $$ int i = 0[ CD ]
Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;-->Line_908 $$ i++[ CD ]
Line_908 $$ int i = 0-->Line_908 $$ i++[ FD ]
Line_863 $$ int i = 0-->Line_908 $$ i++[ FD ]
Line_705 $$ int i = overflowIndex-->Line_908 $$ i++[ FD ]
Line_682 $$ int i = end-->Line_908 $$ i++[ FD ]
Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;-->Line_909 $$ tokens[i] = null[ CD ]
Line_900 $$ public void init() -->Line_910 $$ while (n < tokens.length) [ CD ]
Line_900 $$ public void init() -->Line_900 $$ public void init() [ CD ]
Line_910 $$ while (n < tokens.length) -->Line_911 $$ String token = null[ CD ]
Line_910 $$ while (n < tokens.length) -->Line_912 $$ int colon = line.indexOf(':')[ CD ]
Line_912 $$ int colon = line.indexOf(':')-->Line_912 $$ line.indexOf(':')[ CD ]
Line_905 $$ String line = buffer.toString()-->Line_912 $$ line.indexOf(':')[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_912 $$ line.indexOf(':')[ FD ]
Line_528 $$ line = ""-->Line_912 $$ line.indexOf(':')[ FD ]
Line_910 $$ while (n < tokens.length) -->Line_913 $$ if (colon >= 0) [ CD ]
Line_912 $$ int colon = line.indexOf(':')-->Line_913 $$ if (colon >= 0) [ FD ]
Line_913 $$ if (colon >= 0) -->Line_914 $$ token = line.substring(0, colon)[ CD ]
Line_911 $$ String token = null-->Line_914 $$ token = line.substring(0, colon)[ FD ]
Line_914 $$ token = line.substring(0, colon)-->Line_914 $$ token = line.substring(0, colon)[ FD ]
Line_914 $$ token = line.substring(0, colon)-->Line_914 $$ line.substring(0, colon)[ CD ]
Line_905 $$ String line = buffer.toString()-->Line_914 $$ line.substring(0, colon)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_914 $$ line.substring(0, colon)[ FD ]
Line_528 $$ line = ""-->Line_914 $$ line.substring(0, colon)[ FD ]
Line_912 $$ int colon = line.indexOf(':')-->Line_914 $$ line.substring(0, colon)[ FD ]
Line_913 $$ if (colon >= 0) -->Line_915 $$ line = line.substring(colon + 1)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_915 $$ line = line.substring(colon + 1)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_915 $$ line = line.substring(colon + 1)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_915 $$ line = line.substring(colon + 1)[ FD ]
Line_528 $$ line = ""-->Line_915 $$ line = line.substring(colon + 1)[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_915 $$ line.substring(colon + 1)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_915 $$ line.substring(colon + 1)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_915 $$ line.substring(colon + 1)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_915 $$ line.substring(colon + 1)[ FD ]
Line_528 $$ line = ""-->Line_915 $$ line.substring(colon + 1)[ FD ]
Line_913 $$ if (colon >= 0) -->Line_917 $$ token = line[ CD ]
Line_911 $$ String token = null-->Line_917 $$ token = line[ FD ]
Line_914 $$ token = line.substring(0, colon)-->Line_917 $$ token = line[ FD ]
Line_917 $$ token = line-->Line_917 $$ token = line[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_917 $$ token = line[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_917 $$ token = line[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_917 $$ token = line[ FD ]
Line_528 $$ line = ""-->Line_917 $$ token = line[ FD ]
Line_913 $$ if (colon >= 0) -->Line_918 $$ line = ""[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_918 $$ line = ""[ FD ]
Line_918 $$ line = ""-->Line_918 $$ line = ""[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_918 $$ line = ""[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_918 $$ line = ""[ FD ]
Line_528 $$ line = ""-->Line_918 $$ line = ""[ FD ]
Line_910 $$ while (n < tokens.length) -->Line_920 $$ tokens[n++] = token[ CD ]
Line_911 $$ String token = null-->Line_920 $$ tokens[n++] = token[ FD ]
Line_914 $$ token = line.substring(0, colon)-->Line_920 $$ tokens[n++] = token[ FD ]
Line_917 $$ token = line-->Line_920 $$ tokens[n++] = token[ FD ]
Line_0 $$ Entry-->Line_925 $$ //33
public class func [ CD ]
Line_925 $$ //33
public class func -->Line_926 $$ public void readDocumentsRaw(String fn) [ CD ]
Line_926 $$ public void readDocumentsRaw(String fn) -->Line_927 $$ br.read()[ CD ]
Line_926 $$ public void readDocumentsRaw(String fn) -->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ CD ]
Line_901 $$ int ch = reader.read()-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_254 $$ ch = reader.read()-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_255 $$ ch = reader.read()-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_256 $$ ch = reader.read()-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_928 $$ if (ch > -1)
    text.append((char) ch);[ FD ]
Line_928 $$ if (ch > -1)
    text.append((char) ch);-->Line_928 $$ -1[ CD ]
Line_928 $$ if (ch > -1)
    text.append((char) ch);-->Line_928 $$ text.append((char) ch)[ CD ]
Line_926 $$ public void readDocumentsRaw(String fn) -->Line_929 $$ if (ch > -1 && ch != '\n')
    continue;[ CD ]
Line_0 $$ Entry-->Line_933 $$ //34
public class func [ CD ]
Line_933 $$ //34
public class func -->Line_934 $$ public void readErrorPage(HttpURLConnection connection) [ CD ]
Line_934 $$ public void readErrorPage(HttpURLConnection connection) -->Line_935 $$ int chars = reader.read(cbuf)[ CD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_935 $$ reader.read(cbuf)[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_935 $$ reader.read(cbuf)[ FD ]
Line_934 $$ public void readErrorPage(HttpURLConnection connection) -->Line_936 $$ if (chars == -1) [ CD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_936 $$ if (chars == -1) [ FD ]
Line_934 $$ public void readErrorPage(HttpURLConnection connection) -->Line_939 $$ sb.append(cbuf, 0, chars)[ CD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_939 $$ sb.append(cbuf, 0, chars)[ FD ]
Line_934 $$ public void readErrorPage(HttpURLConnection connection) -->Line_940 $$ if (sb.length() == 0) [ CD ]
Line_940 $$ if (sb.length() == 0) -->Line_941 $$ return null;[ CD ]
Line_934 $$ public void readErrorPage(HttpURLConnection connection) -->Line_943 $$ return sb.toString();[ CD ]
Line_943 $$ return sb.toString();-->Line_943 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_947 $$ //35
public class func [ CD ]
Line_947 $$ //35
public class func -->Line_948 $$ public void readEmbedding(BufferedReader reader, int size) [ CD ]
Line_948 $$ public void readEmbedding(BufferedReader reader, int size) -->Line_949 $$ reader.read()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_949 $$ reader.read()[ FD ]
Line_948 $$ public void readEmbedding(BufferedReader reader, int size) -->Line_950 $$ if (ch == -1)
    return null;[ CD ]
Line_901 $$ int ch = reader.read()-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_254 $$ ch = reader.read()-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_255 $$ ch = reader.read()-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_256 $$ ch = reader.read()-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_950 $$ if (ch == -1)
    return null;[ FD ]
Line_950 $$ if (ch == -1)
    return null;-->Line_950 $$ -1[ CD ]
Line_950 $$ if (ch == -1)
    return null;-->Line_950 $$ return null;[ CD ]
Line_948 $$ public void readEmbedding(BufferedReader reader, int size) -->Line_951 $$ if (CharUtils.isWhiteSpace((char) ch))
    break;
else
    buffer[b++] = ch;[ CD ]
Line_951 $$ if (CharUtils.isWhiteSpace((char) ch))
    break;
else
    buffer[b++] = ch;-->Line_951 $$ CharUtils.isWhiteSpace((char) ch)[ CD ]
Line_0 $$ Entry-->Line_956 $$ //36
public class func [ CD ]
Line_956 $$ //36
public class func -->Line_957 $$ public void readWholeFile(String file) [ CD ]
Line_957 $$ public void readWholeFile(String file) -->Line_958 $$ br.read(buf, 0, 65535)[ CD ]
Line_957 $$ public void readWholeFile(String file) -->Line_959 $$ if (cnt == -1)
    break;[ CD ]
Line_959 $$ if (cnt == -1)
    break;-->Line_959 $$ -1[ CD ]
Line_957 $$ public void readWholeFile(String file) -->Line_961 $$ if (cnt > 0) [ CD ]
Line_961 $$ if (cnt > 0) -->Line_962 $$ strBuf.append(buf, 0, cnt)[ CD ]
Line_0 $$ Entry-->Line_967 $$ //37
public class func [ CD ]
Line_967 $$ //37
public class func -->Line_968 $$ public void consumeHeader(final BufferedReader reader) [ CD ]
Line_968 $$ public void consumeHeader(final BufferedReader reader) -->Line_969 $$ reader.mark(READ_AHEAD_LIMIT)[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_969 $$ reader.mark(READ_AHEAD_LIMIT)[ FD ]
Line_968 $$ public void consumeHeader(final BufferedReader reader) -->Line_970 $$ int character = reader.read()[ CD ]
Line_970 $$ int character = reader.read()-->Line_970 $$ reader.read()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_970 $$ reader.read()[ FD ]
Line_968 $$ public void consumeHeader(final BufferedReader reader) -->Line_971 $$ if (character >= 0) [ CD ]
Line_970 $$ int character = reader.read()-->Line_971 $$ if (character >= 0) [ FD ]
Line_971 $$ if (character >= 0) -->Line_972 $$ if (character == '<') [ CD ]
Line_970 $$ int character = reader.read()-->Line_972 $$ if (character == '<') [ FD ]
Line_972 $$ if (character == '<') -->Line_973 $$ reader.reset()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_973 $$ reader.reset()[ FD ]
Line_972 $$ if (character == '<') -->Line_974 $$ logger.info("readHeader() Complete")[ CD ]
Line_0 $$ Entry-->Line_983 $$ //38
public class func [ CD ]
Line_983 $$ //38
public class func -->Line_984 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) [ CD ]
Line_984 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) -->Line_985 $$ if (ch == '\"') [ CD ]
Line_901 $$ int ch = reader.read()-->Line_985 $$ if (ch == '\"') [ FD ]
Line_626 $$ int ch = bfr.read()-->Line_985 $$ if (ch == '\"') [ FD ]
Line_254 $$ ch = reader.read()-->Line_985 $$ if (ch == '\"') [ FD ]
Line_255 $$ ch = reader.read()-->Line_985 $$ if (ch == '\"') [ FD ]
Line_256 $$ ch = reader.read()-->Line_985 $$ if (ch == '\"') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_985 $$ if (ch == '\"') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_985 $$ if (ch == '\"') [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_985 $$ if (ch == '\"') [ FD ]
Line_985 $$ if (ch == '\"') -->Line_987 $$ reader.mark(1)[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_987 $$ reader.mark(1)[ FD ]
Line_985 $$ if (ch == '\"') -->Line_988 $$ if (reader.read() == '\"') [ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_988 $$ reader.read()[ FD ]
Line_988 $$ if (reader.read() == '\"') -->Line_990 $$ // it's "", which means a quote character
if (count == c.length) [ CD ]
Line_990 $$ // it's "", which means a quote character
if (count == c.length) -->Line_991 $$ PApplet.expand(c)[ CD ]
Line_887 $$ int c = br.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_684 $$ char c = data[index]-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_496 $$ int c = ir.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_424 $$ int c = br.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_100 $$ c = r.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_991 $$ PApplet.expand(c)[ FD ]
Line_988 $$ if (reader.read() == '\"') -->Line_993 $$ c[count++] = '\"'[ CD ]
Line_988 $$ if (reader.read() == '\"') -->Line_996 $$ reader.reset()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_996 $$ reader.reset()[ FD ]
Line_985 $$ if (ch == '\"') -->Line_1006 $$ // inside a quote, but the character isn't a quote
if (count == c.length) [ CD ]
Line_1006 $$ // inside a quote, but the character isn't a quote
if (count == c.length) -->Line_1007 $$ PApplet.expand(c)[ CD ]
Line_887 $$ int c = br.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_684 $$ char c = data[index]-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_496 $$ int c = ir.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_424 $$ int c = br.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_100 $$ c = r.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_1007 $$ PApplet.expand(c)[ FD ]
Line_985 $$ if (ch == '\"') -->Line_1009 $$ c[count++] = (char) ch[ CD ]
Line_0 $$ Entry-->Line_1014 $$ //39
public class func [ CD ]
Line_1014 $$ //39
public class func -->Line_1015 $$ public void read(String path) [ CD ]
Line_1015 $$ public void read(String path) -->Line_1016 $$ int length = reader.read(data, offset, size - offset)[ CD ]
Line_1016 $$ int length = reader.read(data, offset, size - offset)-->Line_1016 $$ reader.read(data, offset, size - offset)[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1016 $$ reader.read(data, offset, size - offset)[ FD ]
Line_1015 $$ public void read(String path) -->Line_1017 $$ if (length == -1) [ CD ]
Line_1016 $$ int length = reader.read(data, offset, size - offset)-->Line_1017 $$ if (length == -1) [ FD ]
Line_765 $$ final int length = (int) descriptionFile.length()-->Line_1017 $$ if (length == -1) [ FD ]
Line_1015 $$ public void read(String path) -->Line_1020 $$ if (length == 0) [ CD ]
Line_1016 $$ int length = reader.read(data, offset, size - offset)-->Line_1020 $$ if (length == 0) [ FD ]
Line_765 $$ final int length = (int) descriptionFile.length()-->Line_1020 $$ if (length == 0) [ FD ]
Line_1020 $$ if (length == 0) -->Line_1021 $$ char[] newData = new char[size * 2][ CD ]
Line_1020 $$ if (length == 0) -->Line_1022 $$ System.arraycopy(data, 0, newData, 0, size)[ CD ]
Line_1021 $$ char[] newData = new char[size * 2]-->Line_1022 $$ System.arraycopy(data, 0, newData, 0, size)[ FD ]
Line_0 $$ Entry-->Line_1030 $$ //40
public class func [ CD ]
Line_1030 $$ //40
public class func -->Line_1031 $$ public void loadModel(Reader inputReader) [ CD ]
Line_1031 $$ public void loadModel(Reader inputReader) -->Line_1032 $$ int ch = reader.read()[ CD ]
Line_1032 $$ int ch = reader.read()-->Line_1032 $$ reader.read()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1032 $$ reader.read()[ FD ]
Line_1031 $$ public void loadModel(Reader inputReader) -->Line_1033 $$ if (ch == -1) [ CD ]
Line_1032 $$ int ch = reader.read()-->Line_1033 $$ if (ch == -1) [ FD ]
Line_901 $$ int ch = reader.read()-->Line_1033 $$ if (ch == -1) [ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1033 $$ if (ch == -1) [ FD ]
Line_254 $$ ch = reader.read()-->Line_1033 $$ if (ch == -1) [ FD ]
Line_255 $$ ch = reader.read()-->Line_1033 $$ if (ch == -1) [ FD ]
Line_256 $$ ch = reader.read()-->Line_1033 $$ if (ch == -1) [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1033 $$ if (ch == -1) [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1033 $$ if (ch == -1) [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1033 $$ if (ch == -1) [ FD ]
Line_1031 $$ public void loadModel(Reader inputReader) -->Line_1036 $$ if (ch == ' ') [ CD ]
Line_1032 $$ int ch = reader.read()-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_901 $$ int ch = reader.read()-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_254 $$ ch = reader.read()-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_255 $$ ch = reader.read()-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_256 $$ ch = reader.read()-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1036 $$ if (ch == ' ') [ FD ]
Line_1036 $$ if (ch == ' ') -->Line_1037 $$ model.w[i * nr_w + j] = atof(new String(buffer, 0, b))[ CD ]
Line_1037 $$ model.w[i * nr_w + j] = atof(new String(buffer, 0, b))-->Line_1037 $$ atof(new String(buffer, 0, b))[ CD ]
Line_1036 $$ if (ch == ' ') -->Line_1040 $$ buffer[b++] = ch[ CD ]
Line_1032 $$ int ch = reader.read()-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_254 $$ ch = reader.read()-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_255 $$ ch = reader.read()-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_256 $$ ch = reader.read()-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1040 $$ buffer[b++] = ch[ FD ]
Line_0 $$ Entry-->Line_1045 $$ //41
public class func [ CD ]
Line_1045 $$ //41
public class func -->Line_1046 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) [ CD ]
Line_1046 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_1047 $$ int current = reader.read()[ CD ]
Line_1047 $$ int current = reader.read()-->Line_1047 $$ reader.read()[ CD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1047 $$ reader.read()[ FD ]
Line_1046 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_1048 $$ if (current < 0)
    break;[ CD ]
Line_1047 $$ int current = reader.read()-->Line_1048 $$ if (current < 0)
    break;[ FD ]
Line_1046 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_1049 $$ Math.max(stream.available(), DEFAULT_READING_SIZE)[ CD ]
Line_1046 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_1050 $$ if (totalRead + 1 + amountRequested > contents.length)
    System.arraycopy(contents, 0, contents = new char[totalRead + 1 + amountRequested], 0, totalRead);[ CD ]
Line_1050 $$ if (totalRead + 1 + amountRequested > contents.length)
    System.arraycopy(contents, 0, contents = new char[totalRead + 1 + amountRequested], 0, totalRead);-->Line_1051 $$ System.arraycopy(contents, 0, contents = new char[totalRead + 1 + amountRequested], 0, totalRead)[ CD ]
Line_0 $$ Entry-->Line_1055 $$ //42
public class func [ CD ]
Line_1055 $$ //42
public class func -->Line_1056 $$ public void getWordsFromInput(String inputFile) [ CD ]
Line_1056 $$ public void getWordsFromInput(String inputFile) -->Line_1057 $$ BufferedReader input = new BufferedReader(new FileReader(inputFile))[ CD ]
Line_1056 $$ public void getWordsFromInput(String inputFile) -->Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) [ CD ]
Line_1056 $$ public void getWordsFromInput(String inputFile) -->Line_1056 $$ public void getWordsFromInput(String inputFile) [ CD ]
Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) -->Line_1058 $$ int charByte = input.read()[ CD ]
Line_1058 $$ int charByte = input.read()-->Line_1058 $$ input.read()[ CD ]
Line_1057 $$ BufferedReader input = new BufferedReader(new FileReader(inputFile))-->Line_1058 $$ input.read()[ FD ]
Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) -->Line_1058 $$ charByte = input.read()[ CD ]
Line_1058 $$ int charByte = input.read()-->Line_1058 $$ charByte = input.read()[ FD ]
Line_1058 $$ charByte = input.read()-->Line_1058 $$ charByte = input.read()[ FD ]
Line_1058 $$ charByte = input.read()-->Line_1058 $$ input.read()[ CD ]
Line_1057 $$ BufferedReader input = new BufferedReader(new FileReader(inputFile))-->Line_1058 $$ input.read()[ FD ]
Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) -->Line_1059 $$ char readChar = (char) charByte[ CD ]
Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) -->Line_1061 $$ if (readChar == '\r') [ CD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1061 $$ if (readChar == '\r') [ FD ]
Line_1061 $$ if (readChar == '\r') -->Line_1062 $$ if (readFirstLine) [ CD ]
Line_1062 $$ if (readFirstLine) -->Line_1063 $$ lines.append(readChar)[ CD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1063 $$ lines.append(readChar)[ FD ]
Line_1062 $$ if (readFirstLine) -->Line_1065 $$ if (readChar == '\n') [ CD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1065 $$ if (readChar == '\n') [ FD ]
Line_1062 $$ if (readFirstLine) -->Line_1070 $$ firstLine.append(readChar)[ CD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1070 $$ firstLine.append(readChar)[ FD ]
Line_1056 $$ public void getWordsFromInput(String inputFile) -->Line_1073 $$ input.close()[ CD ]
Line_1057 $$ BufferedReader input = new BufferedReader(new FileReader(inputFile))-->Line_1073 $$ input.close()[ FD ]
Line_0 $$ Entry-->Line_1077 $$ //43
public class func [ CD ]
Line_1077 $$ //43
public class func -->Line_1078 $$ public void getMediaType(BufferedReader br) [ CD ]
Line_1078 $$ public void getMediaType(BufferedReader br) -->Line_1079 $$ br.mark(READ_AHEAD_LIMIT)[ CD ]
Line_1078 $$ public void getMediaType(BufferedReader br) -->Line_1080 $$ for (int i = 0; c != -1 && i < READ_AHEAD_LIMIT; i++) [ CD ]
Line_1078 $$ public void getMediaType(BufferedReader br) -->Line_1078 $$ public void getMediaType(BufferedReader br) [ CD ]
Line_1080 $$ for (int i = 0; c != -1 && i < READ_AHEAD_LIMIT; i++) -->Line_1080 $$ int i = 0[ CD ]
Line_1080 $$ for (int i = 0; c != -1 && i < READ_AHEAD_LIMIT; i++) -->Line_1080 $$ i++[ CD ]
Line_1080 $$ int i = 0-->Line_1080 $$ i++[ FD ]
Line_908 $$ int i = 0-->Line_1080 $$ i++[ FD ]
Line_863 $$ int i = 0-->Line_1080 $$ i++[ FD ]
Line_705 $$ int i = overflowIndex-->Line_1080 $$ i++[ FD ]
Line_682 $$ int i = end-->Line_1080 $$ i++[ FD ]
Line_1080 $$ for (int i = 0; c != -1 && i < READ_AHEAD_LIMIT; i++) -->Line_1082 $$ if (c == '[' || c == '[ CD ]
Line_1082 $$ if (c == '[' || c == '-->Line_1083 $$ return Constants.APPLICATION_JSON;[ CD ]
Line_1082 $$ if (c == '[' || c == '-->Line_1084 $$ if (c == '<') [ CD ]
Line_887 $$ int c = br.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1084 $$ if (c == '<') [ FD ]
Line_684 $$ char c = data[index]-->Line_1084 $$ if (c == '<') [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_496 $$ int c = ir.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_424 $$ int c = br.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_100 $$ c = r.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_92 $$ int c = r.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_67 $$ int c = reader.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_73 $$ c = reader.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_45 $$ int c = reader.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_50 $$ c = reader.read()-->Line_1084 $$ if (c == '<') [ FD ]
Line_1084 $$ if (c == '<') -->Line_1085 $$ return Constants.APPLICATION_XML;[ CD ]
Line_1078 $$ public void getMediaType(BufferedReader br) -->Line_1089 $$ br.reset()[ CD ]
Line_0 $$ Entry-->Line_1093 $$ //44
public class func [ CD ]
Line_1093 $$ //44
public class func -->Line_1094 $$ public void getFromMetaData(Reader xml) [ CD ]
Line_1094 $$ public void getFromMetaData(Reader xml) -->Line_1095 $$ BufferedReader in = new BufferedReader(xml)[ CD ]
Line_1094 $$ public void getFromMetaData(Reader xml) -->Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) [ CD ]
Line_1094 $$ public void getFromMetaData(Reader xml) -->Line_1094 $$ public void getFromMetaData(Reader xml) [ CD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1096 $$ int ch = 0, last = 0, last2 = 0[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1097 $$ ch = in.read()[ FD ]
Line_1097 $$ ch = in.read()-->Line_1097 $$ ch = in.read()[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1097 $$ ch = in.read()[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1097 $$ ch = in.read()[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1097 $$ ch = in.read()[ FD ]
Line_254 $$ ch = reader.read()-->Line_1097 $$ ch = in.read()[ FD ]
Line_255 $$ ch = reader.read()-->Line_1097 $$ ch = in.read()[ FD ]
Line_256 $$ ch = reader.read()-->Line_1097 $$ ch = in.read()[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1097 $$ ch = in.read()[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1097 $$ ch = in.read()[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1097 $$ ch = in.read()[ FD ]
Line_1097 $$ ch = in.read()-->Line_1097 $$ in.read()[ CD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1097 $$ in.read()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1097 $$ in.read()[ FD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1097 $$ last2 = last[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1097 $$ last2 = last[ FD ]
Line_1097 $$ last2 = last-->Line_1097 $$ last2 = last[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1097 $$ last2 = last[ FD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1097 $$ last = ch[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1097 $$ last = ch[ FD ]
Line_1097 $$ last = ch-->Line_1097 $$ last = ch[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1097 $$ last = ch[ FD ]
Line_1097 $$ ch = in.read()-->Line_1097 $$ last = ch[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1097 $$ last = ch[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1097 $$ last = ch[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1097 $$ last = ch[ FD ]
Line_254 $$ ch = reader.read()-->Line_1097 $$ last = ch[ FD ]
Line_255 $$ ch = reader.read()-->Line_1097 $$ last = ch[ FD ]
Line_256 $$ ch = reader.read()-->Line_1097 $$ last = ch[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1097 $$ last = ch[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1097 $$ last = ch[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1097 $$ last = ch[ FD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1099 $$ // handle comments
if (comment && last2 == '-' && last == '-' && ch == '>') [ CD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1103 $$ if (comment) [ CD ]
Line_1103 $$ if (comment) -->Line_1104 $$ if (ch == '<') [ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1097 $$ ch = in.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_901 $$ int ch = reader.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_254 $$ ch = reader.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_255 $$ ch = reader.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_256 $$ ch = reader.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1104 $$ if (ch == '<') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1104 $$ if (ch == '<') [ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1104 $$ if (ch == '<') -->Line_1105 $$ ch = in.read()[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1105 $$ ch = in.read()[ FD ]
Line_1097 $$ ch = in.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_1105 $$ ch = in.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_254 $$ ch = reader.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_255 $$ ch = reader.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_256 $$ ch = reader.read()-->Line_1105 $$ ch = in.read()[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1105 $$ ch = in.read()[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1105 $$ ch = in.read()[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1105 $$ ch = in.read()[ FD ]
Line_1105 $$ ch = in.read()-->Line_1105 $$ in.read()[ CD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1105 $$ in.read()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1105 $$ in.read()[ FD ]
Line_1104 $$ if (ch == '<') -->Line_1106 $$ if (ch == -1)
    break read;[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1097 $$ ch = in.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1105 $$ ch = in.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_254 $$ ch = reader.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_255 $$ ch = reader.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_256 $$ ch = reader.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1111 $$ if (last2 == '<' && last == '!' && ch == '-') [ CD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1097 $$ ch = in.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1105 $$ ch = in.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_254 $$ ch = reader.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_255 $$ ch = reader.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_256 $$ ch = reader.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1120 $$ last = ch[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1120 $$ last = ch[ FD ]
Line_1097 $$ last = ch-->Line_1120 $$ last = ch[ FD ]
Line_1120 $$ last = ch-->Line_1120 $$ last = ch[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1120 $$ last = ch[ FD ]
Line_1097 $$ ch = in.read()-->Line_1120 $$ last = ch[ FD ]
Line_1105 $$ ch = in.read()-->Line_1120 $$ last = ch[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1120 $$ last = ch[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1120 $$ last = ch[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1120 $$ last = ch[ FD ]
Line_254 $$ ch = reader.read()-->Line_1120 $$ last = ch[ FD ]
Line_255 $$ ch = reader.read()-->Line_1120 $$ last = ch[ FD ]
Line_256 $$ ch = reader.read()-->Line_1120 $$ last = ch[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1120 $$ last = ch[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1120 $$ last = ch[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1120 $$ last = ch[ FD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1121 $$ ch = readThroughWhitespace(in)[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_1097 $$ ch = in.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_1105 $$ ch = in.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_254 $$ ch = reader.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_255 $$ ch = reader.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_256 $$ ch = reader.read()-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1121 $$ ch = readThroughWhitespace(in)[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1121 $$ readThroughWhitespace(in)[ CD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1121 $$ readThroughWhitespace(in)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1121 $$ readThroughWhitespace(in)[ FD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1122 $$ if (ch == '/' || ch == '!' || ch == '?')
    continue;[ CD ]
Line_1096 $$ for (int ch = 0, last = 0, last2 = 0; ch == '<' || (ch = in.read()) != -1; last2 = last, last = ch) -->Line_1126 $$ readElementToken(ch, in)[ CD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1097 $$ ch = in.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1105 $$ ch = in.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_254 $$ ch = reader.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_255 $$ ch = reader.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_256 $$ ch = reader.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1131 $$ readAttribute(in, _packageAttr)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1131 $$ readAttribute(in, _packageAttr)[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1136 $$ readElementText(in)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1136 $$ readElementText(in)[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1139 $$ ch = '<'[ FD ]
Line_1097 $$ ch = in.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_1105 $$ ch = in.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1139 $$ ch = '<'[ FD ]
Line_1139 $$ ch = '<'-->Line_1139 $$ ch = '<'[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_254 $$ ch = reader.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_255 $$ ch = reader.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_256 $$ ch = reader.read()-->Line_1139 $$ ch = '<'[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1139 $$ ch = '<'[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1139 $$ ch = '<'[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1139 $$ ch = '<'[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1142 $$ readAttribute(in, _classAttr)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1142 $$ readAttribute(in, _classAttr)[ FD ]
Line_1145 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_1146 $$ names.add(pkg + "." + name)[ CD ]
Line_1145 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_1148 $$ names.add(name)[ CD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1151 $$ readElementText(in)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1151 $$ readElementText(in)[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1154 $$ ch = '<'[ FD ]
Line_1097 $$ ch = in.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_1105 $$ ch = in.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1154 $$ ch = '<'[ FD ]
Line_1139 $$ ch = '<'-->Line_1154 $$ ch = '<'[ FD ]
Line_1154 $$ ch = '<'-->Line_1154 $$ ch = '<'[ FD ]
Line_1032 $$ int ch = reader.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_901 $$ int ch = reader.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_626 $$ int ch = bfr.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_254 $$ ch = reader.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_255 $$ ch = reader.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_256 $$ ch = reader.read()-->Line_1154 $$ ch = '<'[ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_1154 $$ ch = '<'[ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_1154 $$ ch = '<'[ FD ]
Line_236 $$ int ch = skipWhitespace(reader)-->Line_1154 $$ ch = '<'[ FD ]
Line_1155 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_1156 $$ names.add(pkg + "." + name)[ CD ]
Line_1155 $$ if (pkg.length() > 0 && name.indexOf('.') == -1)
    names.add(pkg + "." + name);
else
    names.add(name);-->Line_1158 $$ names.add(name)[ CD ]
Line_0 $$ Entry-->Line_1165 $$ //45
public class func [ CD ]
Line_1165 $$ //45
public class func -->Line_1166 $$ public void readTextFile(File file) [ CD ]
Line_1166 $$ public void readTextFile(File file) -->Line_1167 $$ do [ CD ]
Line_1166 $$ public void readTextFile(File file) -->Line_1166 $$ public void readTextFile(File file) [ CD ]
Line_887 $$ int c = br.read()-->Line_1167 $$ do [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1167 $$ do [ FD ]
Line_684 $$ char c = data[index]-->Line_1167 $$ do [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1167 $$ do [ FD ]
Line_496 $$ int c = ir.read()-->Line_1167 $$ do [ FD ]
Line_424 $$ int c = br.read()-->Line_1167 $$ do [ FD ]
Line_100 $$ c = r.read()-->Line_1167 $$ do [ FD ]
Line_92 $$ int c = r.read()-->Line_1167 $$ do [ FD ]
Line_67 $$ int c = reader.read()-->Line_1167 $$ do [ FD ]
Line_73 $$ c = reader.read()-->Line_1167 $$ do [ FD ]
Line_45 $$ int c = reader.read()-->Line_1167 $$ do [ FD ]
Line_50 $$ c = reader.read()-->Line_1167 $$ do [ FD ]
Line_1167 $$ do -->Line_1168 $$ in.read()[ CD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1168 $$ in.read()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1168 $$ in.read()[ FD ]
Line_1167 $$ do -->Line_1169 $$ if (c != -1) [ CD ]
Line_887 $$ int c = br.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1169 $$ if (c != -1) [ FD ]
Line_684 $$ char c = data[index]-->Line_1169 $$ if (c != -1) [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_496 $$ int c = ir.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_424 $$ int c = br.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_100 $$ c = r.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_92 $$ int c = r.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_67 $$ int c = reader.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_73 $$ c = reader.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_45 $$ int c = reader.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_50 $$ c = reader.read()-->Line_1169 $$ if (c != -1) [ FD ]
Line_1169 $$ if (c != -1) -->Line_1169 $$ -1[ CD ]
Line_1169 $$ if (c != -1) -->Line_1170 $$ text.append((char) c)[ CD ]
Line_1167 $$ do -->Line_1172 $$ -1[ CD ]
Line_1166 $$ public void readTextFile(File file) -->Line_1173 $$ in.close()[ CD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1173 $$ in.close()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1173 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_1177 $$ //46
public class func [ CD ]
Line_1177 $$ //46
public class func -->Line_1178 $$ public void update() [ CD ]
Line_1178 $$ public void update() -->Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))[ CD ]
Line_1178 $$ public void update() -->Line_1180 $$ reader.mark(1)[ CD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1180 $$ reader.mark(1)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1180 $$ reader.mark(1)[ FD ]
Line_1178 $$ public void update() -->Line_1181 $$ if (reader.read() != UTF8_BOM) [ CD ]
Line_1181 $$ if (reader.read() != UTF8_BOM) -->Line_1181 $$ reader.read()[ CD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1181 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1181 $$ reader.read()[ FD ]
Line_1181 $$ if (reader.read() != UTF8_BOM) -->Line_1182 $$ reader.reset()[ CD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1182 $$ reader.reset()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1182 $$ reader.reset()[ FD ]
Line_1178 $$ public void update() -->Line_1184 $$ ScriptReader r = new ScriptReader(reader)[ CD ]
Line_0 $$ Entry-->Line_1188 $$ //47
public class func [ CD ]
Line_1188 $$ //47
public class func -->Line_1189 $$ public void isWindowsScript(File file) [ CD ]
Line_1189 $$ public void isWindowsScript(File file) -->Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))[ CD ]
Line_1189 $$ public void isWindowsScript(File file) -->Line_1191 $$ int readLength = reader.read(buffer)[ CD ]
Line_1191 $$ int readLength = reader.read(buffer)-->Line_1191 $$ reader.read(buffer)[ CD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1191 $$ reader.read(buffer)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1191 $$ reader.read(buffer)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1191 $$ reader.read(buffer)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1191 $$ reader.read(buffer)[ FD ]
Line_1189 $$ public void isWindowsScript(File file) -->Line_1192 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') [ CD ]
Line_1192 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') -->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ CD ]
Line_1192 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') -->Line_1192 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') [ CD ]
Line_1080 $$ int i = 0-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_908 $$ int i = 0-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_863 $$ int i = 0-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_705 $$ int i = overflowIndex-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_682 $$ int i = end-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1191 $$ int readLength = reader.read(buffer)-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1193 $$ for (int i = 2; i < readLength; ++i) -->Line_1193 $$ int i = 2[ CD ]
Line_1193 $$ for (int i = 2; i < readLength; ++i) -->Line_1193 $$ ++i[ CD ]
Line_1193 $$ int i = 2-->Line_1193 $$ ++i[ FD ]
Line_1080 $$ int i = 0-->Line_1193 $$ ++i[ FD ]
Line_908 $$ int i = 0-->Line_1193 $$ ++i[ FD ]
Line_863 $$ int i = 0-->Line_1193 $$ ++i[ FD ]
Line_705 $$ int i = overflowIndex-->Line_1193 $$ ++i[ FD ]
Line_682 $$ int i = end-->Line_1193 $$ ++i[ FD ]
Line_0 $$ Entry-->Line_1205 $$ //48
public class func [ CD ]
Line_1205 $$ //48
public class func -->Line_1206 $$ public void isWindowsScript(File file) [ CD ]
Line_1206 $$ public void isWindowsScript(File file) -->Line_1208 $$ int readLength = reader.read(buffer)[ CD ]
Line_1208 $$ int readLength = reader.read(buffer)-->Line_1208 $$ reader.read(buffer)[ CD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1208 $$ reader.read(buffer)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1208 $$ reader.read(buffer)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1208 $$ reader.read(buffer)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1208 $$ reader.read(buffer)[ FD ]
Line_1206 $$ public void isWindowsScript(File file) -->Line_1209 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') [ CD ]
Line_1209 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') -->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ CD ]
Line_1209 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') -->Line_1209 $$ if (readLength >= 2 && buffer[0] == '#' && buffer[1] == '!') [ CD ]
Line_1193 $$ int i = 2-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1080 $$ int i = 0-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_908 $$ int i = 0-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_863 $$ int i = 0-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_705 $$ int i = overflowIndex-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_682 $$ int i = end-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1208 $$ int readLength = reader.read(buffer)-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1191 $$ int readLength = reader.read(buffer)-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1210 $$ for (int i = 2; i < readLength; ++i) -->Line_1210 $$ int i = 2[ CD ]
Line_1210 $$ for (int i = 2; i < readLength; ++i) -->Line_1210 $$ ++i[ CD ]
Line_1210 $$ int i = 2-->Line_1210 $$ ++i[ FD ]
Line_1193 $$ int i = 2-->Line_1210 $$ ++i[ FD ]
Line_1080 $$ int i = 0-->Line_1210 $$ ++i[ FD ]
Line_908 $$ int i = 0-->Line_1210 $$ ++i[ FD ]
Line_863 $$ int i = 0-->Line_1210 $$ ++i[ FD ]
Line_705 $$ int i = overflowIndex-->Line_1210 $$ ++i[ FD ]
Line_682 $$ int i = end-->Line_1210 $$ ++i[ FD ]
Line_0 $$ Entry-->Line_1222 $$ //49
public class func [ CD ]
Line_1222 $$ //49
public class func -->Line_1223 $$ public void main(String[] args) [ CD ]
Line_1223 $$ public void main(String[] args) -->Line_1226 $$ reader.readLine()[ CD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1226 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1226 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1226 $$ reader.readLine()[ FD ]
Line_1223 $$ public void main(String[] args) -->Line_1227 $$ if (reader.read() != 'M')
    throw new RuntimeException("Read() failed");[ CD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1227 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1227 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1227 $$ reader.read()[ FD ]
Line_0 $$ Entry-->Line_1234 $$ //50
public class func [ CD ]
Line_1234 $$ //50
public class func -->Line_1235 $$ public void doPost(HttpServletRequest req, HttpServletResponse rsp) [ CD ]
Line_1235 $$ public void doPost(HttpServletRequest req, HttpServletResponse rsp) -->Line_1236 $$ String query = req.getQueryString()[ CD ]
Line_1236 $$ String query = req.getQueryString()-->Line_1236 $$ req.getQueryString()[ CD ]
Line_1235 $$ public void doPost(HttpServletRequest req, HttpServletResponse rsp) -->Line_1237 $$ if (query != null) [ CD ]
Line_1236 $$ String query = req.getQueryString()-->Line_1237 $$ if (query != null) [ FD ]
Line_1237 $$ if (query != null) -->Line_1238 $$ if (query.equals("sendHappyHtml")) [ CD ]
Line_1236 $$ String query = req.getQueryString()-->Line_1238 $$ if (query.equals("sendHappyHtml")) [ FD ]
Line_1238 $$ if (query.equals("sendHappyHtml")) -->Line_1238 $$ query.equals("sendHappyHtml")[ CD ]
Line_1236 $$ String query = req.getQueryString()-->Line_1238 $$ query.equals("sendHappyHtml")[ FD ]
Line_1238 $$ if (query.equals("sendHappyHtml")) -->Line_1239 $$ rsp.getWriter().write("<html><body><div id=':)'></div></body></html>")[ CD ]
Line_1238 $$ if (query.equals("sendHappyHtml")) -->Line_1240 $$ return;[ CD ]
Line_1235 $$ public void doPost(HttpServletRequest req, HttpServletResponse rsp) -->Line_1243 $$ BufferedReader reader = req.getReader()[ CD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1243 $$ req.getReader()[ CD ]
Line_1235 $$ public void doPost(HttpServletRequest req, HttpServletResponse rsp) -->Line_1244 $$ reader.read(buf, 0, req.getContentLength())[ CD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1244 $$ reader.read(buf, 0, req.getContentLength())[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1244 $$ reader.read(buf, 0, req.getContentLength())[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1244 $$ reader.read(buf, 0, req.getContentLength())[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1244 $$ reader.read(buf, 0, req.getContentLength())[ FD ]
Line_0 $$ Entry-->Line_1248 $$ //51
public class func [ CD ]
Line_1248 $$ //51
public class func -->Line_1249 $$ public void getGMetric(String metricName) [ CD ]
Line_1249 $$ public void getGMetric(String metricName) -->Line_1250 $$ Socket gangliaXMLSocket = new Socket("localhost", 8649)[ CD ]
Line_1249 $$ public void getGMetric(String metricName) -->Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))[ CD ]
Line_1250 $$ Socket gangliaXMLSocket = new Socket("localhost", 8649)-->Line_1252 $$ gangliaXMLSocket.getInputStream()[ FD ]
Line_1249 $$ public void getGMetric(String metricName) -->Line_1253 $$ int in_buff = in.read(charBuff, 0, buffSize)[ CD ]
Line_1253 $$ int in_buff = in.read(charBuff, 0, buffSize)-->Line_1253 $$ in.read(charBuff, 0, buffSize)[ CD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1253 $$ in.read(charBuff, 0, buffSize)[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1253 $$ in.read(charBuff, 0, buffSize)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1253 $$ in.read(charBuff, 0, buffSize)[ FD ]
Line_1249 $$ public void getGMetric(String metricName) -->Line_1254 $$ if (in_buff != -1) [ CD ]
Line_1253 $$ int in_buff = in.read(charBuff, 0, buffSize)-->Line_1254 $$ if (in_buff != -1) [ FD ]
Line_1254 $$ if (in_buff != -1) -->Line_1255 $$ System.out.println("End of file")[ CD ]
Line_1249 $$ public void getGMetric(String metricName) -->Line_1257 $$ CharArrayReader car = new CharArrayReader(charBuff, 0, in_buff)[ CD ]
Line_1249 $$ public void getGMetric(String metricName) -->Line_1258 $$ BufferedReader br_car = new BufferedReader(car)[ CD ]
Line_0 $$ Entry-->Line_1262 $$ //52
public class func [ CD ]
Line_1262 $$ //52
public class func -->Line_1263 $$ public void readString(FSDataInputStream inputStream) [ CD ]
Line_1263 $$ public void readString(FSDataInputStream inputStream) -->Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))[ CD ]
Line_1263 $$ public void readString(FSDataInputStream inputStream) -->Line_1266 $$ int count = reader.read(buffer, 0, BUFFER_SIZE)[ CD ]
Line_1266 $$ int count = reader.read(buffer, 0, BUFFER_SIZE)-->Line_1266 $$ reader.read(buffer, 0, BUFFER_SIZE)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1266 $$ reader.read(buffer, 0, BUFFER_SIZE)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1266 $$ reader.read(buffer, 0, BUFFER_SIZE)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1266 $$ reader.read(buffer, 0, BUFFER_SIZE)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1266 $$ reader.read(buffer, 0, BUFFER_SIZE)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1266 $$ reader.read(buffer, 0, BUFFER_SIZE)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1266 $$ reader.read(buffer, 0, BUFFER_SIZE)[ FD ]
Line_1263 $$ public void readString(FSDataInputStream inputStream) -->Line_1267 $$ if (count > BUFFER_SIZE) [ CD ]
Line_1266 $$ int count = reader.read(buffer, 0, BUFFER_SIZE)-->Line_1267 $$ if (count > BUFFER_SIZE) [ FD ]
Line_1263 $$ public void readString(FSDataInputStream inputStream) -->Line_1270 $$ inputStream.close()[ CD ]
Line_1263 $$ public void readString(FSDataInputStream inputStream) -->Line_1271 $$ return new String(buffer, 0, count);[ CD ]
Line_0 $$ Entry-->Line_1275 $$ //53
public class func [ CD ]
Line_1275 $$ //53
public class func -->Line_1276 $$ public void run() [ CD ]
Line_1276 $$ public void run() -->Line_1277 $$ PrintWriter out = new PrintWriter(socket.getOutputStream(), true)[ CD ]
Line_1276 $$ public void run() -->Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))[ CD ]
Line_1276 $$ public void run() -->Line_1279 $$ int read = in.read(buffer)[ CD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1279 $$ in.read(buffer)[ CD ]
Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))-->Line_1279 $$ in.read(buffer)[ FD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1279 $$ in.read(buffer)[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1279 $$ in.read(buffer)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1279 $$ in.read(buffer)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1279 $$ in.read(buffer)[ FD ]
Line_1276 $$ public void run() -->Line_1280 $$ if (read == TOKEN_SIZE) [ CD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1280 $$ if (read == TOKEN_SIZE) [ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1280 $$ if (read == TOKEN_SIZE) [ FD ]
Line_1280 $$ if (read == TOKEN_SIZE) -->Line_1282 $$ if (inputLine.equals(getAccessToken())) [ CD ]
Line_758 $$ final char[] inputLine-->Line_1282 $$ if (inputLine.equals(getAccessToken())) [ FD ]
Line_766 $$ inputLine = new char[length]-->Line_1282 $$ if (inputLine.equals(getAccessToken())) [ FD ]
Line_1282 $$ if (inputLine.equals(getAccessToken())) -->Line_1282 $$ inputLine.equals(getAccessToken())[ CD ]
Line_758 $$ final char[] inputLine-->Line_1282 $$ inputLine.equals(getAccessToken())[ FD ]
Line_766 $$ inputLine = new char[length]-->Line_1282 $$ inputLine.equals(getAccessToken())[ FD ]
Line_1282 $$ if (inputLine.equals(getAccessToken())) -->Line_1283 $$ log.debug("Client authorized")[ CD ]
Line_1282 $$ if (inputLine.equals(getAccessToken())) -->Line_1284 $$ out.println(getSystemInfo())[ CD ]
Line_1277 $$ PrintWriter out = new PrintWriter(socket.getOutputStream(), true)-->Line_1284 $$ out.println(getSystemInfo())[ FD ]
Line_1282 $$ if (inputLine.equals(getAccessToken())) -->Line_1285 $$ log.debug("SystemInfo returned")[ CD ]
Line_1282 $$ if (inputLine.equals(getAccessToken())) -->Line_1286 $$ setAccessToken()[ CD ]
Line_1282 $$ if (inputLine.equals(getAccessToken())) -->Line_1289 $$ log.debug("Invalid token recieved")[ CD ]
Line_1282 $$ if (inputLine.equals(getAccessToken())) -->Line_1290 $$ out.println("Bye!")[ CD ]
Line_1277 $$ PrintWriter out = new PrintWriter(socket.getOutputStream(), true)-->Line_1290 $$ out.println("Bye!")[ FD ]
Line_1280 $$ if (read == TOKEN_SIZE) -->Line_1294 $$ log.debug("Invalid token recieved")[ CD ]
Line_1280 $$ if (read == TOKEN_SIZE) -->Line_1295 $$ out.println("Bye!")[ CD ]
Line_1277 $$ PrintWriter out = new PrintWriter(socket.getOutputStream(), true)-->Line_1295 $$ out.println("Bye!")[ FD ]
Line_0 $$ Entry-->Line_1300 $$ //54
public class func [ CD ]
Line_1300 $$ //54
public class func -->Line_1301 $$ public void pressKeyToContinue() [ CD ]
Line_1301 $$ public void pressKeyToContinue() -->Line_1302 $$ BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in))[ CD ]
Line_1301 $$ public void pressKeyToContinue() -->Line_1303 $$ int ch = stdin.read()[ CD ]
Line_1303 $$ int ch = stdin.read()-->Line_1303 $$ stdin.read()[ CD ]
Line_1302 $$ BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in))-->Line_1303 $$ stdin.read()[ FD ]
Line_1301 $$ public void pressKeyToContinue() -->Line_1304 $$ if (ch == 'y' || ch == 'Y') [ CD ]
Line_1304 $$ if (ch == 'y' || ch == 'Y') -->Line_1306 $$ return true;[ CD ]
Line_0 $$ Entry-->Line_1311 $$ //55
public class func [ CD ]
Line_1311 $$ //55
public class func -->Line_1312 $$ public void query(boolean longOutput, String username) [ CD ]
Line_1312 $$ public void query(boolean longOutput, String username) -->Line_1313 $$ input.read(__buffer, 0, __buffer.length)[ CD ]
Line_1057 $$ BufferedReader input = new BufferedReader(new FileReader(inputFile))-->Line_1313 $$ input.read(__buffer, 0, __buffer.length)[ FD ]
Line_1312 $$ public void query(boolean longOutput, String username) -->Line_1314 $$ if (read <= 0) [ CD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1314 $$ if (read <= 0) [ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1314 $$ if (read <= 0) [ FD ]
Line_1312 $$ public void query(boolean longOutput, String username) -->Line_1317 $$ result.append(__buffer, 0, read)[ CD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1317 $$ result.append(__buffer, 0, read)[ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1317 $$ result.append(__buffer, 0, read)[ FD ]
Line_1312 $$ public void query(boolean longOutput, String username) -->Line_1318 $$ input.close()[ CD ]
Line_1057 $$ BufferedReader input = new BufferedReader(new FileReader(inputFile))-->Line_1318 $$ input.close()[ FD ]
Line_0 $$ Entry-->Line_1322 $$ //56
public class func [ CD ]
Line_1322 $$ //56
public class func -->Line_1323 $$ public void slurpReader(Reader reader) [ CD ]
Line_1323 $$ public void slurpReader(Reader reader) -->Line_1324 $$ int amountRead = r.read(chars, 0, SLURP_BUFFER_SIZE)[ CD ]
Line_1324 $$ int amountRead = r.read(chars, 0, SLURP_BUFFER_SIZE)-->Line_1324 $$ r.read(chars, 0, SLURP_BUFFER_SIZE)[ CD ]
Line_1184 $$ ScriptReader r = new ScriptReader(reader)-->Line_1324 $$ r.read(chars, 0, SLURP_BUFFER_SIZE)[ FD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1324 $$ r.read(chars, 0, SLURP_BUFFER_SIZE)[ FD ]
Line_1323 $$ public void slurpReader(Reader reader) -->Line_1325 $$ if (amountRead < 0) [ CD ]
Line_1324 $$ int amountRead = r.read(chars, 0, SLURP_BUFFER_SIZE)-->Line_1325 $$ if (amountRead < 0) [ FD ]
Line_1323 $$ public void slurpReader(Reader reader) -->Line_1328 $$ buff.append(chars, 0, amountRead)[ CD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1328 $$ buff.append(chars, 0, amountRead)[ FD ]
Line_1324 $$ int amountRead = r.read(chars, 0, SLURP_BUFFER_SIZE)-->Line_1328 $$ buff.append(chars, 0, amountRead)[ FD ]
Line_1323 $$ public void slurpReader(Reader reader) -->Line_1329 $$ r.close()[ CD ]
Line_1184 $$ ScriptReader r = new ScriptReader(reader)-->Line_1329 $$ r.close()[ FD ]
Line_0 $$ Entry-->Line_1333 $$ //57
public class func [ CD ]
Line_1333 $$ //57
public class func -->Line_1334 $$ public void readString(InputStream in) [ CD ]
Line_1334 $$ public void readString(InputStream in) -->Line_1335 $$ do [ CD ]
Line_1334 $$ public void readString(InputStream in) -->Line_1334 $$ public void readString(InputStream in) [ CD ]
Line_1335 $$ do -->Line_1337 $$ reader.read(buffer, 0, 1024)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1337 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1337 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1337 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1337 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1337 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1337 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1335 $$ do -->Line_1338 $$ if (wasRead > 0) [ CD ]
Line_1338 $$ if (wasRead > 0) -->Line_1340 $$ builder.append(buffer, 0, wasRead)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1340 $$ builder.append(buffer, 0, wasRead)[ FD ]
Line_1335 $$ do -->Line_1343 $$ -1[ CD ]
Line_1334 $$ public void readString(InputStream in) -->Line_1344 $$ return builder.toString();[ CD ]
Line_1344 $$ return builder.toString();-->Line_1344 $$ builder.toString()[ CD ]
Line_0 $$ Entry-->Line_1348 $$ //58
public class func [ CD ]
Line_1348 $$ //58
public class func -->Line_1349 $$ public void readString(InputStream in) [ CD ]
Line_1349 $$ public void readString(InputStream in) -->Line_1350 $$ do [ CD ]
Line_1349 $$ public void readString(InputStream in) -->Line_1349 $$ public void readString(InputStream in) [ CD ]
Line_1350 $$ do -->Line_1352 $$ reader.read(buffer, 0, 1024)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1352 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1352 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1352 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1352 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1352 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1352 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_1350 $$ do -->Line_1353 $$ if (wasRead > 0) [ CD ]
Line_1353 $$ if (wasRead > 0) -->Line_1355 $$ builder.append(buffer, 0, wasRead)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1355 $$ builder.append(buffer, 0, wasRead)[ FD ]
Line_1350 $$ do -->Line_1358 $$ -1[ CD ]
Line_1349 $$ public void readString(InputStream in) -->Line_1359 $$ return builder.toString();[ CD ]
Line_1359 $$ return builder.toString();-->Line_1359 $$ builder.toString()[ CD ]
Line_0 $$ Entry-->Line_1363 $$ //59
public class func [ CD ]
Line_1363 $$ //59
public class func -->Line_1364 $$ public void readHeaderValue(String s, BufferedReader br) [ CD ]
Line_1364 $$ public void readHeaderValue(String s, BufferedReader br) -->Line_1365 $$ br.mark(1)[ CD ]
Line_1364 $$ public void readHeaderValue(String s, BufferedReader br) -->Line_1366 $$ if (br.read() == ' ')
    s += br.readLine();
else [ CD ]
Line_1366 $$ if (br.read() == ' ')
    s += br.readLine();
else -->Line_1367 $$ s += br.readLine()[ CD ]
Line_1367 $$ s += br.readLine()-->Line_1367 $$ s += br.readLine()[ FD ]
Line_1367 $$ s += br.readLine()-->Line_1367 $$ br.readLine()[ CD ]
Line_1366 $$ if (br.read() == ' ')
    s += br.readLine();
else -->Line_1370 $$ br.reset()[ CD ]
Line_0 $$ Entry-->Line_1376 $$ //60
public class func [ CD ]
Line_1376 $$ //60
public class func -->Line_1377 $$ public void TagComparator(BufferedReader in) [ CD ]
Line_1377 $$ public void TagComparator(BufferedReader in) -->Line_1378 $$ int result = in.read()[ CD ]
Line_1378 $$ int result = in.read()-->Line_1378 $$ in.read()[ CD ]
Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))-->Line_1378 $$ in.read()[ FD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1378 $$ in.read()[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1378 $$ in.read()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1378 $$ in.read()[ FD ]
Line_1377 $$ public void TagComparator(BufferedReader in) -->Line_1379 $$ if (result >= 0) [ CD ]
Line_1378 $$ int result = in.read()-->Line_1379 $$ if (result >= 0) [ FD ]
Line_1379 $$ if (result >= 0) -->Line_1380 $$ sb.append((char) result)[ CD ]
Line_1379 $$ if (result >= 0) -->Line_1382 $$ generateAtoms(sb.toString())[ CD ]
Line_0 $$ Entry-->Line_1388 $$ //61
public class func [ CD ]
Line_1388 $$ //61
public class func -->Line_1389 $$ public void getReader(String alias, boolean recycle, boolean firstLineIsNames) [ CD ]
Line_1389 $$ public void getReader(String alias, boolean recycle, boolean firstLineIsNames) -->Line_1390 $$ reader.mark(1)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1390 $$ reader.mark(1)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1390 $$ reader.mark(1)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1390 $$ reader.mark(1)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1390 $$ reader.mark(1)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1390 $$ reader.mark(1)[ FD ]
Line_1389 $$ public void getReader(String alias, boolean recycle, boolean firstLineIsNames) -->Line_1391 $$ int peek = reader.read()[ CD ]
Line_1391 $$ int peek = reader.read()-->Line_1391 $$ reader.read()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1391 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1391 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1391 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1391 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1391 $$ reader.read()[ FD ]
Line_1389 $$ public void getReader(String alias, boolean recycle, boolean firstLineIsNames) -->Line_1392 $$ if (peek == -1) [ CD ]
Line_1391 $$ int peek = reader.read()-->Line_1392 $$ if (peek == -1) [ FD ]
Line_1392 $$ if (peek == -1) -->Line_1393 $$ reader.close()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1393 $$ reader.close()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1393 $$ reader.close()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1393 $$ reader.close()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1393 $$ reader.close()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1393 $$ reader.close()[ FD ]
Line_1392 $$ if (peek == -1) -->Line_1394 $$ createBufferedReader(fileEntry)[ CD ]
Line_1392 $$ if (peek == -1) -->Line_1396 $$ if (firstLineIsNames) [ CD ]
Line_1396 $$ if (firstLineIsNames) -->Line_1398 $$ reader.readLine()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1398 $$ reader.readLine()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1398 $$ reader.readLine()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1398 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1398 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1398 $$ reader.readLine()[ FD ]
Line_1392 $$ if (peek == -1) -->Line_1401 $$ reader.reset()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1401 $$ reader.reset()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1401 $$ reader.reset()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1401 $$ reader.reset()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1401 $$ reader.reset()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1401 $$ reader.reset()[ FD ]
Line_0 $$ Entry-->Line_1406 $$ //62
public class func [ CD ]
Line_1406 $$ //62
public class func -->Line_1407 $$ public void read(InputStream stream) [ CD ]
Line_1407 $$ public void read(InputStream stream) -->Line_1408 $$ int chars = reader.read(cbuf)[ CD ]
Line_1408 $$ int chars = reader.read(cbuf)-->Line_1408 $$ reader.read(cbuf)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1408 $$ reader.read(cbuf)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1408 $$ reader.read(cbuf)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1408 $$ reader.read(cbuf)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1408 $$ reader.read(cbuf)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1408 $$ reader.read(cbuf)[ FD ]
Line_1407 $$ public void read(InputStream stream) -->Line_1409 $$ if (chars == -1) [ CD ]
Line_1408 $$ int chars = reader.read(cbuf)-->Line_1409 $$ if (chars == -1) [ FD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1409 $$ if (chars == -1) [ FD ]
Line_1407 $$ public void read(InputStream stream) -->Line_1412 $$ sb.append(cbuf, 0, chars)[ CD ]
Line_1408 $$ int chars = reader.read(cbuf)-->Line_1412 $$ sb.append(cbuf, 0, chars)[ FD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1412 $$ sb.append(cbuf, 0, chars)[ FD ]
Line_1407 $$ public void read(InputStream stream) -->Line_1413 $$ return sb.toString();[ CD ]
Line_1413 $$ return sb.toString();-->Line_1413 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_1417 $$ //63
public class func [ CD ]
Line_1417 $$ //63
public class func -->Line_1418 $$ public void slurpReader(Reader reader) [ CD ]
Line_1418 $$ public void slurpReader(Reader reader) -->Line_1419 $$ int amountRead = r.read(chars, 0, SLURPBUFFSIZE)[ CD ]
Line_1419 $$ int amountRead = r.read(chars, 0, SLURPBUFFSIZE)-->Line_1419 $$ r.read(chars, 0, SLURPBUFFSIZE)[ CD ]
Line_1184 $$ ScriptReader r = new ScriptReader(reader)-->Line_1419 $$ r.read(chars, 0, SLURPBUFFSIZE)[ FD ]
Line_1408 $$ int chars = reader.read(cbuf)-->Line_1419 $$ r.read(chars, 0, SLURPBUFFSIZE)[ FD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1419 $$ r.read(chars, 0, SLURPBUFFSIZE)[ FD ]
Line_1418 $$ public void slurpReader(Reader reader) -->Line_1420 $$ if (amountRead < 0) [ CD ]
Line_1419 $$ int amountRead = r.read(chars, 0, SLURPBUFFSIZE)-->Line_1420 $$ if (amountRead < 0) [ FD ]
Line_1324 $$ int amountRead = r.read(chars, 0, SLURP_BUFFER_SIZE)-->Line_1420 $$ if (amountRead < 0) [ FD ]
Line_1418 $$ public void slurpReader(Reader reader) -->Line_1423 $$ buff.append(chars, 0, amountRead)[ CD ]
Line_1408 $$ int chars = reader.read(cbuf)-->Line_1423 $$ buff.append(chars, 0, amountRead)[ FD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1423 $$ buff.append(chars, 0, amountRead)[ FD ]
Line_1419 $$ int amountRead = r.read(chars, 0, SLURPBUFFSIZE)-->Line_1423 $$ buff.append(chars, 0, amountRead)[ FD ]
Line_1324 $$ int amountRead = r.read(chars, 0, SLURP_BUFFER_SIZE)-->Line_1423 $$ buff.append(chars, 0, amountRead)[ FD ]
Line_1418 $$ public void slurpReader(Reader reader) -->Line_1424 $$ r.close()[ CD ]
Line_1184 $$ ScriptReader r = new ScriptReader(reader)-->Line_1424 $$ r.close()[ FD ]
Line_0 $$ Entry-->Line_1428 $$ //64
public class func [ CD ]
Line_1428 $$ //64
public class func -->Line_1429 $$ public void convertStreamToString(InputStream is) [ CD ]
Line_1429 $$ public void convertStreamToString(InputStream is) -->Line_1430 $$ int count = reader.read(buf)[ CD ]
Line_1430 $$ int count = reader.read(buf)-->Line_1430 $$ reader.read(buf)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1430 $$ reader.read(buf)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1430 $$ reader.read(buf)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1430 $$ reader.read(buf)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1430 $$ reader.read(buf)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1430 $$ reader.read(buf)[ FD ]
Line_1429 $$ public void convertStreamToString(InputStream is) -->Line_1431 $$ if (count < 0)
    break;[ CD ]
Line_1430 $$ int count = reader.read(buf)-->Line_1431 $$ if (count < 0)
    break;[ FD ]
Line_1266 $$ int count = reader.read(buffer, 0, BUFFER_SIZE)-->Line_1431 $$ if (count < 0)
    break;[ FD ]
Line_1429 $$ public void convertStreamToString(InputStream is) -->Line_1432 $$ sb.append(buf, 0, count)[ CD ]
Line_1430 $$ int count = reader.read(buf)-->Line_1432 $$ sb.append(buf, 0, count)[ FD ]
Line_1266 $$ int count = reader.read(buffer, 0, BUFFER_SIZE)-->Line_1432 $$ sb.append(buf, 0, count)[ FD ]
Line_1429 $$ public void convertStreamToString(InputStream is) -->Line_1433 $$ is.close()[ CD ]
Line_0 $$ Entry-->Line_1437 $$ //65
public class func [ CD ]
Line_1437 $$ //65
public class func -->Line_1438 $$ public void parse(String head, BufferedReader reader) [ CD ]
Line_1438 $$ public void parse(String head, BufferedReader reader) -->Line_1439 $$ int length = Integer.parseInt(head.substring(1, head.length()))[ CD ]
Line_1439 $$ int length = Integer.parseInt(head.substring(1, head.length()))-->Line_1439 $$ Integer.parseInt(head.substring(1, head.length()))[ CD ]
Line_1438 $$ public void parse(String head, BufferedReader reader) -->Line_1440 $$ if (length == -1)
    throw new NullReplyException("NULL Bulk Reply");[ CD ]
Line_1439 $$ int length = Integer.parseInt(head.substring(1, head.length()))-->Line_1440 $$ if (length == -1)
    throw new NullReplyException("NULL Bulk Reply");[ FD ]
Line_1016 $$ int length = reader.read(data, offset, size - offset)-->Line_1440 $$ if (length == -1)
    throw new NullReplyException("NULL Bulk Reply");[ FD ]
Line_765 $$ final int length = (int) descriptionFile.length()-->Line_1440 $$ if (length == -1)
    throw new NullReplyException("NULL Bulk Reply");[ FD ]
Line_1438 $$ public void parse(String head, BufferedReader reader) -->Line_1442 $$ reader.read(value)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1442 $$ reader.read(value)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1442 $$ reader.read(value)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1442 $$ reader.read(value)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1442 $$ reader.read(value)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1442 $$ reader.read(value)[ FD ]
Line_1438 $$ public void parse(String head, BufferedReader reader) -->Line_1443 $$ reader.readLine()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1443 $$ reader.readLine()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1443 $$ reader.readLine()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1443 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1443 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1443 $$ reader.readLine()[ FD ]
Line_0 $$ Entry-->Line_1447 $$ //66
public class func [ CD ]
Line_1447 $$ //66
public class func -->Line_1448 $$ public void getBadgerFishReader(Reader reader) [ CD ]
Line_1448 $$ public void getBadgerFishReader(Reader reader) -->Line_1449 $$ do [ CD ]
Line_1448 $$ public void getBadgerFishReader(Reader reader) -->Line_1448 $$ public void getBadgerFishReader(Reader reader) [ CD ]
Line_1449 $$ do -->Line_1451 $$ bufferedReader.read(buffer, 0, 100)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1451 $$ bufferedReader.read(buffer, 0, 100)[ FD ]
Line_1449 $$ do -->Line_1452 $$ if (wasRead > 0)
    buf.append(buffer, 0, wasRead);[ CD ]
Line_1452 $$ if (wasRead > 0)
    buf.append(buffer, 0, wasRead);-->Line_1452 $$ buf.append(buffer, 0, wasRead)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1452 $$ buf.append(buffer, 0, wasRead)[ FD ]
Line_1449 $$ do -->Line_1453 $$ -1[ CD ]
Line_0 $$ Entry-->Line_1458 $$ //67
public class func [ CD ]
Line_1458 $$ //67
public class func -->Line_1459 $$ public void getLines(File file, boolean keepDuplicates) [ CD ]
Line_1459 $$ public void getLines(File file, boolean keepDuplicates) -->Line_1460 $$ int current = InputReader.read()[ CD ]
Line_1460 $$ int current = InputReader.read()-->Line_1460 $$ InputReader.read()[ CD ]
Line_1459 $$ public void getLines(File file, boolean keepDuplicates) -->Line_1461 $$ if (current == -1 || current == '\n') [ CD ]
Line_1461 $$ if (current == -1 || current == '\n') -->Line_1462 $$ if (keepDuplicates || !list.contains(line))
    list.add(line);[ CD ]
Line_1462 $$ !list.contains(line)-->Line_1462 $$ list.contains(line)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1462 $$ list.contains(line)[ FD ]
Line_918 $$ line = ""-->Line_1462 $$ list.contains(line)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1462 $$ list.contains(line)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1462 $$ list.contains(line)[ FD ]
Line_528 $$ line = ""-->Line_1462 $$ list.contains(line)[ FD ]
Line_1462 $$ if (keepDuplicates || !list.contains(line))
    list.add(line);-->Line_1463 $$ list.add(line)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1463 $$ list.add(line)[ FD ]
Line_918 $$ line = ""-->Line_1463 $$ list.add(line)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1463 $$ list.add(line)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1463 $$ list.add(line)[ FD ]
Line_528 $$ line = ""-->Line_1463 $$ list.add(line)[ FD ]
Line_1461 $$ if (current == -1 || current == '\n') -->Line_1465 $$ if (current == -1)
    // EOF
    break;[ CD ]
Line_1460 $$ int current = InputReader.read()-->Line_1465 $$ if (current == -1)
    // EOF
    break;[ FD ]
Line_1047 $$ int current = reader.read()-->Line_1465 $$ if (current == -1)
    // EOF
    break;[ FD ]
Line_0 $$ Entry-->Line_1472 $$ //68
public class func [ CD ]
Line_1472 $$ //68
public class func -->Line_1473 $$ public void compress(InputStream input) [ CD ]
Line_1473 $$ public void compress(InputStream input) -->Line_1474 $$ int i = reader.read()[ CD ]
Line_1474 $$ int i = reader.read()-->Line_1474 $$ reader.read()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1474 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1474 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1474 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1474 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1474 $$ reader.read()[ FD ]
Line_1473 $$ public void compress(InputStream input) -->Line_1475 $$ if (i == -1)
    break;[ CD ]
Line_1474 $$ int i = reader.read()-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_1210 $$ int i = 2-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_1193 $$ int i = 2-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_1080 $$ int i = 0-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_908 $$ int i = 0-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_863 $$ int i = 0-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_705 $$ int i = overflowIndex-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_682 $$ int i = end-->Line_1475 $$ if (i == -1)
    break;[ FD ]
Line_0 $$ Entry-->Line_1480 $$ //69
public class func [ CD ]
Line_1480 $$ //69
public class func -->Line_1481 $$ public void parseForm(InputStream entityStream) [ CD ]
Line_1481 $$ public void parseForm(InputStream entityStream) -->Line_1482 $$ do [ CD ]
Line_1481 $$ public void parseForm(InputStream entityStream) -->Line_1481 $$ public void parseForm(InputStream entityStream) [ CD ]
Line_1482 $$ do -->Line_1484 $$ reader.read(buffer, 0, 100)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1484 $$ reader.read(buffer, 0, 100)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1484 $$ reader.read(buffer, 0, 100)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1484 $$ reader.read(buffer, 0, 100)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1484 $$ reader.read(buffer, 0, 100)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1484 $$ reader.read(buffer, 0, 100)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1484 $$ reader.read(buffer, 0, 100)[ FD ]
Line_1482 $$ do -->Line_1485 $$ if (wasRead > 0)
    buf.append(buffer, 0, wasRead);[ CD ]
Line_1485 $$ if (wasRead > 0)
    buf.append(buffer, 0, wasRead);-->Line_1485 $$ buf.append(buffer, 0, wasRead)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1485 $$ buf.append(buffer, 0, wasRead)[ FD ]
Line_1482 $$ do -->Line_1486 $$ -1[ CD ]
Line_1481 $$ public void parseForm(InputStream entityStream) -->Line_1487 $$ String form = buf.toString()[ CD ]
Line_1487 $$ String form = buf.toString()-->Line_1487 $$ buf.toString()[ CD ]
Line_0 $$ Entry-->Line_1491 $$ //70
public class func [ CD ]
Line_1491 $$ //70
public class func -->Line_1492 $$ public void Request(StringBuffer urlFormat) [ CD ]
Line_1492 $$ public void Request(StringBuffer urlFormat) -->Line_1493 $$ in.read(buffer, 0, bufferlen)[ CD ]
Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))-->Line_1493 $$ in.read(buffer, 0, bufferlen)[ FD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1493 $$ in.read(buffer, 0, bufferlen)[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1493 $$ in.read(buffer, 0, bufferlen)[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1493 $$ in.read(buffer, 0, bufferlen)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1493 $$ in.read(buffer, 0, bufferlen)[ FD ]
Line_1492 $$ public void Request(StringBuffer urlFormat) -->Line_1494 $$ if (readBytes < 0) [ CD ]
Line_1492 $$ public void Request(StringBuffer urlFormat) -->Line_1497 $$ in.close()[ CD ]
Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))-->Line_1497 $$ in.close()[ FD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1497 $$ in.close()[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1497 $$ in.close()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1497 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_1501 $$ //71
public class func [ CD ]
Line_1501 $$ //71
public class func -->Line_1502 $$ public void updateLanguage(LanguageInfo info) [ CD ]
Line_1502 $$ public void updateLanguage(LanguageInfo info) -->Line_1503 $$ reader.mark(1)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1503 $$ reader.mark(1)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1503 $$ reader.mark(1)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1503 $$ reader.mark(1)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1503 $$ reader.mark(1)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1503 $$ reader.mark(1)[ FD ]
Line_1502 $$ public void updateLanguage(LanguageInfo info) -->Line_1504 $$ if (reader.read() != '?')
    reader.reset();[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1504 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1504 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1504 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1504 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1504 $$ reader.read()[ FD ]
Line_1504 $$ if (reader.read() != '?')
    reader.reset();-->Line_1505 $$ reader.reset()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1505 $$ reader.reset()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1505 $$ reader.reset()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1505 $$ reader.reset()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1505 $$ reader.reset()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1505 $$ reader.reset()[ FD ]
Line_0 $$ Entry-->Line_1509 $$ //72
public class func [ CD ]
Line_1509 $$ //72
public class func -->Line_1510 $$ public void getTime() [ CD ]
Line_1510 $$ public void getTime() -->Line_1511 $$ reader.read(__buffer, 0, __buffer.length)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1511 $$ reader.read(__buffer, 0, __buffer.length)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1511 $$ reader.read(__buffer, 0, __buffer.length)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1511 $$ reader.read(__buffer, 0, __buffer.length)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1511 $$ reader.read(__buffer, 0, __buffer.length)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1511 $$ reader.read(__buffer, 0, __buffer.length)[ FD ]
Line_1510 $$ public void getTime() -->Line_1512 $$ if (read <= 0)
    break;[ CD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1512 $$ if (read <= 0)
    break;[ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1512 $$ if (read <= 0)
    break;[ FD ]
Line_1510 $$ public void getTime() -->Line_1514 $$ result.append(__buffer, 0, read)[ CD ]
Line_1378 $$ int result = in.read()-->Line_1514 $$ result.append(__buffer, 0, read)[ FD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1514 $$ result.append(__buffer, 0, read)[ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1514 $$ result.append(__buffer, 0, read)[ FD ]
Line_1510 $$ public void getTime() -->Line_1515 $$ return result.toString();[ CD ]
Line_1515 $$ return result.toString();-->Line_1515 $$ result.toString()[ CD ]
Line_1378 $$ int result = in.read()-->Line_1515 $$ result.toString()[ FD ]
Line_0 $$ Entry-->Line_1519 $$ //73
public class func [ CD ]
Line_1519 $$ //73
public class func -->Line_1520 $$ public void readAll(Reader reader) [ CD ]
Line_1520 $$ public void readAll(Reader reader) -->Line_1521 $$ int charsRead = br.read(buffer)[ CD ]
Line_1521 $$ int charsRead = br.read(buffer)-->Line_1521 $$ br.read(buffer)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1521 $$ br.read(buffer)[ FD ]
Line_1520 $$ public void readAll(Reader reader) -->Line_1522 $$ if (charsRead == -1)
    break;[ CD ]
Line_1521 $$ int charsRead = br.read(buffer)-->Line_1522 $$ if (charsRead == -1)
    break;[ FD ]
Line_1520 $$ public void readAll(Reader reader) -->Line_1523 $$ buf.append(buffer, 0, charsRead)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1523 $$ buf.append(buffer, 0, charsRead)[ FD ]
Line_1521 $$ int charsRead = br.read(buffer)-->Line_1523 $$ buf.append(buffer, 0, charsRead)[ FD ]
Line_1520 $$ public void readAll(Reader reader) -->Line_1524 $$ return buf.toString();[ CD ]
Line_1524 $$ return buf.toString();-->Line_1524 $$ buf.toString()[ CD ]
Line_0 $$ Entry-->Line_1528 $$ //74
public class func [ CD ]
Line_1528 $$ //74
public class func -->Line_1529 $$ public void run() [ CD ]
Line_1529 $$ public void run() -->Line_1530 $$ if (reader.ready()) [ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1530 $$ if (reader.ready()) [ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1530 $$ if (reader.ready()) [ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1530 $$ if (reader.ready()) [ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1530 $$ if (reader.ready()) [ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1530 $$ if (reader.ready()) [ FD ]
Line_1530 $$ if (reader.ready()) -->Line_1530 $$ reader.ready()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1530 $$ reader.ready()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1530 $$ reader.ready()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1530 $$ reader.ready()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1530 $$ reader.ready()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1530 $$ reader.ready()[ FD ]
Line_1530 $$ if (reader.ready()) -->Line_1531 $$ reader.read(buffer, 0, mMaxNMEABuffer)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1531 $$ reader.read(buffer, 0, mMaxNMEABuffer)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1531 $$ reader.read(buffer, 0, mMaxNMEABuffer)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1531 $$ reader.read(buffer, 0, mMaxNMEABuffer)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1531 $$ reader.read(buffer, 0, mMaxNMEABuffer)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1531 $$ reader.read(buffer, 0, mMaxNMEABuffer)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1531 $$ reader.read(buffer, 0, mMaxNMEABuffer)[ FD ]
Line_1530 $$ if (reader.ready()) -->Line_1532 $$ Message msg = mHandler.obtainMessage(BTGpsLocationProvider.GPS_DATA_AVAILABLE, buffer)[ CD ]
Line_1532 $$ Message msg = mHandler.obtainMessage(BTGpsLocationProvider.GPS_DATA_AVAILABLE, buffer)-->Line_1532 $$ mHandler.obtainMessage(BTGpsLocationProvider.GPS_DATA_AVAILABLE, buffer)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1532 $$ mHandler.obtainMessage(BTGpsLocationProvider.GPS_DATA_AVAILABLE, buffer)[ FD ]
Line_1530 $$ if (reader.ready()) -->Line_1534 $$ System.currentTimeMillis()[ CD ]
Line_1530 $$ if (reader.ready()) -->Line_1536 $$ mHandler.sendMessage(msg)[ CD ]
Line_1532 $$ Message msg = mHandler.obtainMessage(BTGpsLocationProvider.GPS_DATA_AVAILABLE, buffer)-->Line_1536 $$ mHandler.sendMessage(msg)[ FD ]
Line_0 $$ Entry-->Line_1541 $$ //75
public class func [ CD ]
Line_1541 $$ //75
public class func -->Line_1542 $$ public void readCharNonBlocking(BufferedReader reader) [ CD ]
Line_1542 $$ public void readCharNonBlocking(BufferedReader reader) -->Line_1543 $$ if (reader.ready()) [ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1543 $$ if (reader.ready()) [ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1543 $$ if (reader.ready()) [ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1543 $$ if (reader.ready()) [ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1543 $$ if (reader.ready()) [ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1543 $$ if (reader.ready()) [ FD ]
Line_1543 $$ if (reader.ready()) -->Line_1543 $$ reader.ready()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1543 $$ reader.ready()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1543 $$ reader.ready()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1543 $$ reader.ready()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1543 $$ reader.ready()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1543 $$ reader.ready()[ FD ]
Line_1543 $$ if (reader.ready()) -->Line_1544 $$ return reader.read();[ CD ]
Line_1544 $$ return reader.read();-->Line_1544 $$ reader.read()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1544 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1544 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1544 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1544 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1544 $$ reader.read()[ FD ]
Line_1543 $$ if (reader.ready()) -->Line_1546 $$ return -1;[ CD ]
Line_1546 $$ return -1;-->Line_1546 $$ -1[ CD ]
Line_0 $$ Entry-->Line_1551 $$ //76
public class func [ CD ]
Line_1551 $$ //76
public class func -->Line_1552 $$ public void readCharNonBlocking(BufferedReader reader) [ CD ]
Line_1552 $$ public void readCharNonBlocking(BufferedReader reader) -->Line_1553 $$ if (reader.ready()) [ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1553 $$ if (reader.ready()) [ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1553 $$ if (reader.ready()) [ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1553 $$ if (reader.ready()) [ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1553 $$ if (reader.ready()) [ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1553 $$ if (reader.ready()) [ FD ]
Line_1553 $$ if (reader.ready()) -->Line_1553 $$ reader.ready()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1553 $$ reader.ready()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1553 $$ reader.ready()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1553 $$ reader.ready()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1553 $$ reader.ready()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1553 $$ reader.ready()[ FD ]
Line_1553 $$ if (reader.ready()) -->Line_1554 $$ return reader.read();[ CD ]
Line_1554 $$ return reader.read();-->Line_1554 $$ reader.read()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1554 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1554 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1554 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1554 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1554 $$ reader.read()[ FD ]
Line_1553 $$ if (reader.ready()) -->Line_1556 $$ return -1;[ CD ]
Line_1556 $$ return -1;-->Line_1556 $$ -1[ CD ]
Line_0 $$ Entry-->Line_1561 $$ //77
public class func [ CD ]
Line_1561 $$ //77
public class func -->Line_1562 $$ public void testPrefix(BufferedReader b, String pfx) [ CD ]
Line_1562 $$ public void testPrefix(BufferedReader b, String pfx) -->Line_1563 $$ int c = b.read()[ CD ]
Line_1563 $$ int c = b.read()-->Line_1563 $$ b.read()[ CD ]
Line_1562 $$ public void testPrefix(BufferedReader b, String pfx) -->Line_1564 $$ if (c < 0) [ CD ]
Line_1563 $$ int c = b.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_887 $$ int c = br.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1564 $$ if (c < 0) [ FD ]
Line_684 $$ char c = data[index]-->Line_1564 $$ if (c < 0) [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_496 $$ int c = ir.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_424 $$ int c = br.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_100 $$ c = r.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_92 $$ int c = r.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_67 $$ int c = reader.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_73 $$ c = reader.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_45 $$ int c = reader.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_50 $$ c = reader.read()-->Line_1564 $$ if (c < 0) [ FD ]
Line_1564 $$ if (c < 0) -->Line_1565 $$ -1[ CD ]
Line_1564 $$ if (c < 0) -->Line_1567 $$ if (c != pfx.charAt(i)) [ CD ]
Line_1563 $$ int c = b.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_887 $$ int c = br.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_684 $$ char c = data[index]-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_496 $$ int c = ir.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_424 $$ int c = br.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_100 $$ c = r.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_92 $$ int c = r.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_67 $$ int c = reader.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_73 $$ c = reader.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_45 $$ int c = reader.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_50 $$ c = reader.read()-->Line_1567 $$ if (c != pfx.charAt(i)) [ FD ]
Line_1474 $$ int i = reader.read()-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_1210 $$ int i = 2-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_1193 $$ int i = 2-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_1080 $$ int i = 0-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_908 $$ int i = 0-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_863 $$ int i = 0-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_705 $$ int i = overflowIndex-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_682 $$ int i = end-->Line_1567 $$ pfx.charAt(i)[ FD ]
Line_1562 $$ public void testPrefix(BufferedReader b, String pfx) -->Line_1573 $$ b.reset()[ CD ]
Line_0 $$ Entry-->Line_1577 $$ //78
public class func [ CD ]
Line_1577 $$ //78
public class func -->Line_1578 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) [ CD ]
Line_1578 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) -->Line_1579 $$ br.read()[ CD ]
Line_1578 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) -->Line_1580 $$ if (tmp == -1) [ CD ]
Line_1580 $$ if (tmp == -1) -->Line_1580 $$ -1[ CD ]
Line_1580 $$ if (tmp == -1) -->Line_1581 $$ charStats[0]++[ CD ]
Line_1580 $$ if (tmp == -1) -->Line_1582 $$ file.add(0)[ CD ]
Line_326 $$ File file = new File(fileName)-->Line_1582 $$ file.add(0)[ FD ]
Line_1580 $$ if (tmp == -1) -->Line_1584 $$ file.add(tmp)[ CD ]
Line_326 $$ File file = new File(fileName)-->Line_1584 $$ file.add(tmp)[ FD ]
Line_1578 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) -->Line_1585 $$ while (tmp != -1) [ CD ]
Line_1578 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) -->Line_1578 $$ public void createStatistics(BufferedReader br, ArrayList<Integer> file) [ CD ]
Line_1585 $$ while (tmp != -1) -->Line_1585 $$ -1[ CD ]
Line_1585 $$ while (tmp != -1) -->Line_1586 $$ if (tmp == (char) 0 || tmp >= 256) [ CD ]
Line_1586 $$ if (tmp == (char) 0 || tmp >= 256) -->Line_1587 $$ out.close()[ CD ]
Line_1277 $$ PrintWriter out = new PrintWriter(socket.getOutputStream(), true)-->Line_1587 $$ out.close()[ FD ]
Line_1585 $$ while (tmp != -1) -->Line_1590 $$ charStats[tmp]++[ CD ]
Line_1585 $$ while (tmp != -1) -->Line_1591 $$ br.read()[ CD ]
Line_1585 $$ while (tmp != -1) -->Line_1593 $$ if (tmp == -1) [ CD ]
Line_1593 $$ if (tmp == -1) -->Line_1593 $$ -1[ CD ]
Line_1593 $$ if (tmp == -1) -->Line_1594 $$ charStats[0]++[ CD ]
Line_1593 $$ if (tmp == -1) -->Line_1595 $$ file.add(0)[ CD ]
Line_326 $$ File file = new File(fileName)-->Line_1595 $$ file.add(0)[ FD ]
Line_1593 $$ if (tmp == -1) -->Line_1597 $$ file.add(tmp)[ CD ]
Line_326 $$ File file = new File(fileName)-->Line_1597 $$ file.add(tmp)[ FD ]
Line_0 $$ Entry-->Line_1602 $$ //79
public class func [ CD ]
Line_1602 $$ //79
public class func -->Line_1603 $$ public void handle(String path, final Request request, HttpServletRequest httpRequest, final HttpServletResponse httpResponse) [ CD ]
Line_1603 $$ public void handle(String path, final Request request, HttpServletRequest httpRequest, final HttpServletResponse httpResponse) -->Line_1604 $$ int c = in.read()[ CD ]
Line_1604 $$ int c = in.read()-->Line_1604 $$ in.read()[ CD ]
Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))-->Line_1604 $$ in.read()[ FD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1604 $$ in.read()[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1604 $$ in.read()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1604 $$ in.read()[ FD ]
Line_1603 $$ public void handle(String path, final Request request, HttpServletRequest httpRequest, final HttpServletResponse httpResponse) -->Line_1605 $$ if (c < 0)
    break;[ CD ]
Line_1604 $$ int c = in.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_1563 $$ int c = b.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_887 $$ int c = br.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_684 $$ char c = data[index]-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_496 $$ int c = ir.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_424 $$ int c = br.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_100 $$ c = r.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_92 $$ int c = r.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_67 $$ int c = reader.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_73 $$ c = reader.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_45 $$ int c = reader.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_50 $$ c = reader.read()-->Line_1605 $$ if (c < 0)
    break;[ FD ]
Line_1603 $$ public void handle(String path, final Request request, HttpServletRequest httpRequest, final HttpServletResponse httpResponse) -->Line_1607 $$ out.write(c)[ CD ]
Line_1277 $$ PrintWriter out = new PrintWriter(socket.getOutputStream(), true)-->Line_1607 $$ out.write(c)[ FD ]
Line_1604 $$ int c = in.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_1563 $$ int c = b.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_887 $$ int c = br.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1607 $$ out.write(c)[ FD ]
Line_684 $$ char c = data[index]-->Line_1607 $$ out.write(c)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_496 $$ int c = ir.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_424 $$ int c = br.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_100 $$ c = r.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_1607 $$ out.write(c)[ FD ]
Line_1603 $$ public void handle(String path, final Request request, HttpServletRequest httpRequest, final HttpServletResponse httpResponse) -->Line_1608 $$ out.println()[ CD ]
Line_1277 $$ PrintWriter out = new PrintWriter(socket.getOutputStream(), true)-->Line_1608 $$ out.println()[ FD ]
Line_0 $$ Entry-->Line_1612 $$ //80
public class func [ CD ]
Line_1612 $$ //80
public class func -->Line_1613 $$ public void appendUserPreferences(PrintWriter writer) [ CD ]
Line_1613 $$ public void appendUserPreferences(PrintWriter writer) -->Line_1614 $$ int read = reader.read(chars)[ CD ]
Line_1614 $$ int read = reader.read(chars)-->Line_1614 $$ reader.read(chars)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1614 $$ reader.read(chars)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1614 $$ reader.read(chars)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1614 $$ reader.read(chars)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1614 $$ reader.read(chars)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1614 $$ reader.read(chars)[ FD ]
Line_1408 $$ int chars = reader.read(cbuf)-->Line_1614 $$ reader.read(chars)[ FD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1614 $$ reader.read(chars)[ FD ]
Line_1613 $$ public void appendUserPreferences(PrintWriter writer) -->Line_1615 $$ if (read <= 0) [ CD ]
Line_1614 $$ int read = reader.read(chars)-->Line_1615 $$ if (read <= 0) [ FD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1615 $$ if (read <= 0) [ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1615 $$ if (read <= 0) [ FD ]
Line_1613 $$ public void appendUserPreferences(PrintWriter writer) -->Line_1618 $$ writer.write(chars, 0, read)[ CD ]
Line_1408 $$ int chars = reader.read(cbuf)-->Line_1618 $$ writer.write(chars, 0, read)[ FD ]
Line_935 $$ int chars = reader.read(cbuf)-->Line_1618 $$ writer.write(chars, 0, read)[ FD ]
Line_1614 $$ int read = reader.read(chars)-->Line_1618 $$ writer.write(chars, 0, read)[ FD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1618 $$ writer.write(chars, 0, read)[ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1618 $$ writer.write(chars, 0, read)[ FD ]
Line_0 $$ Entry-->Line_1622 $$ //81
public class func [ CD ]
Line_1622 $$ //81
public class func -->Line_1623 $$ public void sample(Entry arg0) [ CD ]
Line_1623 $$ public void sample(Entry arg0) -->Line_1624 $$ int c = reader.read(buffer)[ CD ]
Line_1624 $$ int c = reader.read(buffer)-->Line_1624 $$ reader.read(buffer)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1624 $$ reader.read(buffer)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1624 $$ reader.read(buffer)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1624 $$ reader.read(buffer)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1624 $$ reader.read(buffer)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1624 $$ reader.read(buffer)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1624 $$ reader.read(buffer)[ FD ]
Line_1623 $$ public void sample(Entry arg0) -->Line_1625 $$ if (c == -1) [ CD ]
Line_1624 $$ int c = reader.read(buffer)-->Line_1625 $$ if (c == -1) [ FD ]
Line_1604 $$ int c = in.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_1563 $$ int c = b.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_887 $$ int c = br.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1625 $$ if (c == -1) [ FD ]
Line_684 $$ char c = data[index]-->Line_1625 $$ if (c == -1) [ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_496 $$ int c = ir.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_424 $$ int c = br.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_100 $$ c = r.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_92 $$ int c = r.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_67 $$ int c = reader.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_73 $$ c = reader.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_45 $$ int c = reader.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_50 $$ c = reader.read()-->Line_1625 $$ if (c == -1) [ FD ]
Line_1623 $$ public void sample(Entry arg0) -->Line_1628 $$ bufferedWriter.write(buffer)[ CD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1628 $$ bufferedWriter.write(buffer)[ FD ]
Line_0 $$ Entry-->Line_1632 $$ //82
public class func [ CD ]
Line_1632 $$ //82
public class func -->Line_1633 $$ public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_1633 $$ public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) -->Line_1634 $$ if (reader.read() >= 0)
    throw new IllegalStateException("Not closed");[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1634 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1634 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1634 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1634 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1634 $$ reader.read()[ FD ]
Line_0 $$ Entry-->Line_1639 $$ //83
public class func [ CD ]
Line_1639 $$ //83
public class func -->Line_1640 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) [ CD ]
Line_1640 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_1641 $$ int amountRead = reader.read(contents, totalRead, amountRequested)[ CD ]
Line_1641 $$ int amountRead = reader.read(contents, totalRead, amountRequested)-->Line_1641 $$ reader.read(contents, totalRead, amountRequested)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1641 $$ reader.read(contents, totalRead, amountRequested)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1641 $$ reader.read(contents, totalRead, amountRequested)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1641 $$ reader.read(contents, totalRead, amountRequested)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1641 $$ reader.read(contents, totalRead, amountRequested)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1641 $$ reader.read(contents, totalRead, amountRequested)[ FD ]
Line_1640 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_1642 $$ if (amountRead < 0)
    break;[ CD ]
Line_1641 $$ int amountRead = reader.read(contents, totalRead, amountRequested)-->Line_1642 $$ if (amountRead < 0)
    break;[ FD ]
Line_1419 $$ int amountRead = r.read(chars, 0, SLURPBUFFSIZE)-->Line_1642 $$ if (amountRead < 0)
    break;[ FD ]
Line_1324 $$ int amountRead = r.read(chars, 0, SLURP_BUFFER_SIZE)-->Line_1642 $$ if (amountRead < 0)
    break;[ FD ]
Line_0 $$ Entry-->Line_1646 $$ //84
public class func [ CD ]
Line_1646 $$ //84
public class func -->Line_1647 $$ public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) [ CD ]
Line_1647 $$ public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) -->Line_1648 $$ if (reader.read() >= 0)
    throw new IllegalStateException("Not closed");[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1648 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1648 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1648 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1648 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1648 $$ reader.read()[ FD ]
Line_0 $$ Entry-->Line_1653 $$ //85
public class func [ CD ]
Line_1653 $$ //85
public class func -->Line_1654 $$ public void inputStreamToString(InputStream is) [ CD ]
Line_1654 $$ public void inputStreamToString(InputStream is) -->Line_1655 $$ int n = br.read(c, 0, c.length)[ CD ]
Line_1655 $$ int n = br.read(c, 0, c.length)-->Line_1655 $$ br.read(c, 0, c.length)[ CD ]
Line_1624 $$ int c = reader.read(buffer)-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_1604 $$ int c = in.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_1563 $$ int c = b.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_887 $$ int c = br.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_684 $$ char c = data[index]-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_496 $$ int c = ir.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_424 $$ int c = br.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_100 $$ c = r.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_92 $$ int c = r.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_67 $$ int c = reader.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_73 $$ c = reader.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_45 $$ int c = reader.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_50 $$ c = reader.read()-->Line_1655 $$ br.read(c, 0, c.length)[ FD ]
Line_1654 $$ public void inputStreamToString(InputStream is) -->Line_1656 $$ if (n < 0)
    break;[ CD ]
Line_1655 $$ int n = br.read(c, 0, c.length)-->Line_1656 $$ if (n < 0)
    break;[ FD ]
Line_1654 $$ public void inputStreamToString(InputStream is) -->Line_1657 $$ sw.write(c, 0, n)[ CD ]
Line_1624 $$ int c = reader.read(buffer)-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_1604 $$ int c = in.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_1563 $$ int c = b.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_887 $$ int c = br.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_684 $$ char c = data[index]-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_496 $$ int c = ir.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_424 $$ int c = br.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_100 $$ c = r.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_92 $$ int c = r.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_67 $$ int c = reader.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_73 $$ c = reader.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_45 $$ int c = reader.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_50 $$ c = reader.read()-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_1655 $$ int n = br.read(c, 0, c.length)-->Line_1657 $$ sw.write(c, 0, n)[ FD ]
Line_1654 $$ public void inputStreamToString(InputStream is) -->Line_1658 $$ isr.close()[ CD ]
Line_0 $$ Entry-->Line_1662 $$ //86
public class func [ CD ]
Line_1662 $$ //86
public class func -->Line_1663 $$ public void checkForLineBreak() [ CD ]
Line_1663 $$ public void checkForLineBreak() -->Line_1664 $$ int read = reader.read()[ CD ]
Line_1664 $$ int read = reader.read()-->Line_1664 $$ reader.read()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1664 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1664 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1664 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1664 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1664 $$ reader.read()[ FD ]
Line_1663 $$ public void checkForLineBreak() -->Line_1665 $$ if (read != 'q') [ CD ]
Line_1664 $$ int read = reader.read()-->Line_1665 $$ if (read != 'q') [ FD ]
Line_1614 $$ int read = reader.read(chars)-->Line_1665 $$ if (read != 'q') [ FD ]
Line_1279 $$ int read = in.read(buffer)-->Line_1665 $$ if (read != 'q') [ FD ]
Line_564 $$ int read = b.read(buffer)-->Line_1665 $$ if (read != 'q') [ FD ]
Line_0 $$ Entry-->Line_1674 $$ //87
public class func [ CD ]
Line_1674 $$ //87
public class func -->Line_1675 $$ public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch) [ CD ]
Line_1675 $$ public void handle(String target, HttpServletRequest request, HttpServletResponse response, int dispatch) -->Line_1676 $$ if (reader.read() >= 0)
    throw new IllegalStateException("Not closed");[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1676 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1676 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1676 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1676 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1676 $$ reader.read()[ FD ]
Line_0 $$ Entry-->Line_1681 $$ //88
public class func [ CD ]
Line_1681 $$ //88
public class func -->Line_1682 $$ public void readResponse(BufferedReader reader) [ CD ]
Line_1682 $$ public void readResponse(BufferedReader reader) -->Line_1683 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_1682 $$ public void readResponse(BufferedReader reader) -->Line_1682 $$ public void readResponse(BufferedReader reader) [ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1683 $$ reader.readLine()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1683 $$ reader.readLine()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1683 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1683 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1683 $$ reader.readLine()[ FD ]
Line_1683 $$ while ((line = reader.readLine()) != null) -->Line_1685 $$ if ("0".equals(line)) [ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1685 $$ if ("0".equals(line)) [ FD ]
Line_918 $$ line = ""-->Line_1685 $$ if ("0".equals(line)) [ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1685 $$ if ("0".equals(line)) [ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1685 $$ if ("0".equals(line)) [ FD ]
Line_528 $$ line = ""-->Line_1685 $$ if ("0".equals(line)) [ FD ]
Line_1685 $$ if ("0".equals(line)) -->Line_1685 $$ "0".equals(line)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1685 $$ "0".equals(line)[ FD ]
Line_918 $$ line = ""-->Line_1685 $$ "0".equals(line)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1685 $$ "0".equals(line)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1685 $$ "0".equals(line)[ FD ]
Line_528 $$ line = ""-->Line_1685 $$ "0".equals(line)[ FD ]
Line_1685 $$ if ("0".equals(line)) -->Line_1687 $$ reader.readLine()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1687 $$ reader.readLine()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1687 $$ reader.readLine()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1687 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1687 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1687 $$ reader.readLine()[ FD ]
Line_1685 $$ if ("0".equals(line)) -->Line_1688 $$ assertEquals("", line)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1688 $$ assertEquals("", line)[ FD ]
Line_918 $$ line = ""-->Line_1688 $$ assertEquals("", line)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1688 $$ assertEquals("", line)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1688 $$ assertEquals("", line)[ FD ]
Line_528 $$ line = ""-->Line_1688 $$ assertEquals("", line)[ FD ]
Line_1683 $$ while ((line = reader.readLine()) != null) -->Line_1692 $$ int length = Integer.parseInt(line, 16)[ CD ]
Line_1692 $$ int length = Integer.parseInt(line, 16)-->Line_1692 $$ Integer.parseInt(line, 16)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1692 $$ Integer.parseInt(line, 16)[ FD ]
Line_918 $$ line = ""-->Line_1692 $$ Integer.parseInt(line, 16)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1692 $$ Integer.parseInt(line, 16)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1692 $$ Integer.parseInt(line, 16)[ FD ]
Line_528 $$ line = ""-->Line_1692 $$ Integer.parseInt(line, 16)[ FD ]
Line_1683 $$ while ((line = reader.readLine()) != null) -->Line_1693 $$ for (int i = 0; i < length; ++i) [ CD ]
Line_1683 $$ while ((line = reader.readLine()) != null) -->Line_1683 $$ while ((line = reader.readLine()) != null) [ CD ]
Line_1474 $$ int i = reader.read()-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1210 $$ int i = 2-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1193 $$ int i = 2-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1080 $$ int i = 0-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_908 $$ int i = 0-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_863 $$ int i = 0-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_705 $$ int i = overflowIndex-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_682 $$ int i = end-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1692 $$ int length = Integer.parseInt(line, 16)-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1439 $$ int length = Integer.parseInt(head.substring(1, head.length()))-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1016 $$ int length = reader.read(data, offset, size - offset)-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_765 $$ final int length = (int) descriptionFile.length()-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1693 $$ for (int i = 0; i < length; ++i) -->Line_1693 $$ int i = 0[ CD ]
Line_1693 $$ for (int i = 0; i < length; ++i) -->Line_1693 $$ ++i[ CD ]
Line_1693 $$ int i = 0-->Line_1693 $$ ++i[ FD ]
Line_1474 $$ int i = reader.read()-->Line_1693 $$ ++i[ FD ]
Line_1210 $$ int i = 2-->Line_1693 $$ ++i[ FD ]
Line_1193 $$ int i = 2-->Line_1693 $$ ++i[ FD ]
Line_1080 $$ int i = 0-->Line_1693 $$ ++i[ FD ]
Line_908 $$ int i = 0-->Line_1693 $$ ++i[ FD ]
Line_863 $$ int i = 0-->Line_1693 $$ ++i[ FD ]
Line_705 $$ int i = overflowIndex-->Line_1693 $$ ++i[ FD ]
Line_682 $$ int i = end-->Line_1693 $$ ++i[ FD ]
Line_1693 $$ for (int i = 0; i < length; ++i) -->Line_1695 $$ char c = (char) reader.read()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1695 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1695 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1695 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1695 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1695 $$ reader.read()[ FD ]
Line_1693 $$ for (int i = 0; i < length; ++i) -->Line_1696 $$ body.append(c)[ CD ]
Line_1695 $$ char c = (char) reader.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_1624 $$ int c = reader.read(buffer)-->Line_1696 $$ body.append(c)[ FD ]
Line_1604 $$ int c = in.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_1563 $$ int c = b.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_887 $$ int c = br.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_1696 $$ body.append(c)[ FD ]
Line_684 $$ char c = data[index]-->Line_1696 $$ body.append(c)[ FD ]
Line_505 $$ int c = inReader2.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_496 $$ int c = ir.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_424 $$ int c = br.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_100 $$ c = r.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_92 $$ int c = r.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_67 $$ int c = reader.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_73 $$ c = reader.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_45 $$ int c = reader.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_50 $$ c = reader.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_1683 $$ while ((line = reader.readLine()) != null) -->Line_1698 $$ reader.readLine()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1698 $$ reader.readLine()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1698 $$ reader.readLine()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1698 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1698 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1698 $$ reader.readLine()[ FD ]
Line_1683 $$ while ((line = reader.readLine()) != null) -->Line_1699 $$ assertEquals("", line)[ CD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1699 $$ assertEquals("", line)[ FD ]
Line_918 $$ line = ""-->Line_1699 $$ assertEquals("", line)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1699 $$ assertEquals("", line)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1699 $$ assertEquals("", line)[ FD ]
Line_528 $$ line = ""-->Line_1699 $$ assertEquals("", line)[ FD ]
Line_0 $$ Entry-->Line_1704 $$ //89
public class func [ CD ]
Line_1704 $$ //89
public class func -->Line_1705 $$ public void successTest(String className, String expectedOutput) [ CD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1706 $$ Runtime rt = Runtime.getRuntime()[ CD ]
Line_1706 $$ Runtime rt = Runtime.getRuntime()-->Line_1706 $$ Runtime.getRuntime()[ CD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1707 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)[ CD ]
Line_1707 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_1707 $$ rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)[ CD ]
Line_1706 $$ Runtime rt = Runtime.getRuntime()-->Line_1707 $$ rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)[ FD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1708 $$ InputStreamReader esr = new InputStreamReader(p.getErrorStream())[ CD ]
Line_1707 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_1708 $$ p.getErrorStream()[ FD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1709 $$ BufferedReader ebr = new BufferedReader(esr)[ CD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1710 $$ String line = ebr.readLine()[ CD ]
Line_1710 $$ String line = ebr.readLine()-->Line_1710 $$ ebr.readLine()[ CD ]
Line_1709 $$ BufferedReader ebr = new BufferedReader(esr)-->Line_1710 $$ ebr.readLine()[ FD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1711 $$ if (line != null) [ CD ]
Line_1710 $$ String line = ebr.readLine()-->Line_1711 $$ if (line != null) [ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1711 $$ if (line != null) [ FD ]
Line_918 $$ line = ""-->Line_1711 $$ if (line != null) [ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1711 $$ if (line != null) [ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1711 $$ if (line != null) [ FD ]
Line_528 $$ line = ""-->Line_1711 $$ if (line != null) [ FD ]
Line_1711 $$ if (line != null) -->Line_1712 $$ fail(line)[ CD ]
Line_1710 $$ String line = ebr.readLine()-->Line_1712 $$ fail(line)[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1712 $$ fail(line)[ FD ]
Line_918 $$ line = ""-->Line_1712 $$ fail(line)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1712 $$ fail(line)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1712 $$ fail(line)[ FD ]
Line_528 $$ line = ""-->Line_1712 $$ fail(line)[ FD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1714 $$ InputStreamReader isr = new InputStreamReader(p.getInputStream())[ CD ]
Line_1707 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_1714 $$ p.getInputStream()[ FD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1715 $$ BufferedReader br = new BufferedReader(isr)[ CD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1716 $$ assertEquals(expectedOutput, br.readLine())[ CD ]
Line_1715 $$ BufferedReader br = new BufferedReader(isr)-->Line_1716 $$ br.readLine()[ FD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1717 $$ assertEquals(-1, br.read())[ CD ]
Line_1715 $$ BufferedReader br = new BufferedReader(isr)-->Line_1717 $$ br.read()[ FD ]
Line_1705 $$ public void successTest(String className, String expectedOutput) -->Line_1718 $$ assertEquals(0, p.waitFor())[ CD ]
Line_1707 $$ Process p = rt.exec("java -Xmx128m -cp testbin " + rewriterPackage + "." + className)-->Line_1718 $$ p.waitFor()[ FD ]
Line_0 $$ Entry-->Line_1722 $$ //90
public class func [ CD ]
Line_1722 $$ //90
public class func -->Line_1723 $$ public void readURLToString(URL url) [ CD ]
Line_1723 $$ public void readURLToString(URL url) -->Line_1724 $$ String line = reader.readLine()[ CD ]
Line_1724 $$ String line = reader.readLine()-->Line_1724 $$ reader.readLine()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1724 $$ reader.readLine()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1724 $$ reader.readLine()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1724 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1724 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1724 $$ reader.readLine()[ FD ]
Line_1723 $$ public void readURLToString(URL url) -->Line_1725 $$ if (line == null)
    break;[ CD ]
Line_1724 $$ String line = reader.readLine()-->Line_1725 $$ if (line == null)
    break;[ FD ]
Line_1710 $$ String line = ebr.readLine()-->Line_1725 $$ if (line == null)
    break;[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1725 $$ if (line == null)
    break;[ FD ]
Line_918 $$ line = ""-->Line_1725 $$ if (line == null)
    break;[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1725 $$ if (line == null)
    break;[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1725 $$ if (line == null)
    break;[ FD ]
Line_528 $$ line = ""-->Line_1725 $$ if (line == null)
    break;[ FD ]
Line_1723 $$ public void readURLToString(URL url) -->Line_1726 $$ sb.append(line)[ CD ]
Line_1724 $$ String line = reader.readLine()-->Line_1726 $$ sb.append(line)[ FD ]
Line_1710 $$ String line = ebr.readLine()-->Line_1726 $$ sb.append(line)[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_1726 $$ sb.append(line)[ FD ]
Line_918 $$ line = ""-->Line_1726 $$ sb.append(line)[ FD ]
Line_905 $$ String line = buffer.toString()-->Line_1726 $$ sb.append(line)[ FD ]
Line_526 $$ String line = rangeFile.readLine()-->Line_1726 $$ sb.append(line)[ FD ]
Line_528 $$ line = ""-->Line_1726 $$ sb.append(line)[ FD ]
Line_1723 $$ public void readURLToString(URL url) -->Line_1727 $$ sb.append((char) reader.read())[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1727 $$ reader.read()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1727 $$ reader.read()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1727 $$ reader.read()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1727 $$ reader.read()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1727 $$ reader.read()[ FD ]
Line_1723 $$ public void readURLToString(URL url) -->Line_1728 $$ return sb.toString();[ CD ]
Line_1728 $$ return sb.toString();-->Line_1728 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_1732 $$ //91
public class func [ CD ]
Line_1732 $$ //91
public class func -->Line_1733 $$ public void readTextFromFile(String fileName) [ CD ]
Line_1733 $$ public void readTextFromFile(String fileName) -->Line_1734 $$ final File aFile = new File(fileName)[ CD ]
Line_1733 $$ public void readTextFromFile(String fileName) -->Line_1735 $$ if (!aFile.exists()) [ CD ]
Line_1735 $$ if (!aFile.exists()) -->Line_1735 $$ !aFile.exists()[ CD ]
Line_1735 $$ !aFile.exists()-->Line_1735 $$ aFile.exists()[ CD ]
Line_1734 $$ final File aFile = new File(fileName)-->Line_1735 $$ aFile.exists()[ FD ]
Line_1735 $$ if (!aFile.exists()) -->Line_1737 $$ Logging.errorPrint("Could not find license at " + fileName)[ CD ]
Line_1735 $$ if (!aFile.exists()) -->Line_1738 $$ LanguageBundle.getString("in_licNoInfo")[ CD ]
Line_1735 $$ if (!aFile.exists()) -->Line_1740 $$ return aString;[ CD ]
Line_1733 $$ public void readTextFromFile(String fileName) -->Line_1742 $$ BufferedReader theReader = new BufferedReader(new InputStreamReader(new FileInputStream(aFile), "UTF-8"))[ CD ]
Line_1733 $$ public void readTextFromFile(String fileName) -->Line_1743 $$ final int length = (int) aFile.length()[ CD ]
Line_1734 $$ final File aFile = new File(fileName)-->Line_1743 $$ aFile.length()[ FD ]
Line_1733 $$ public void readTextFromFile(String fileName) -->Line_1744 $$ theReader.read(inputLine, 0, length)[ CD ]
Line_1742 $$ BufferedReader theReader = new BufferedReader(new InputStreamReader(new FileInputStream(aFile), "UTF-8"))-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_758 $$ final char[] inputLine-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_766 $$ inputLine = new char[length]-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_1743 $$ final int length = (int) aFile.length()-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_1692 $$ int length = Integer.parseInt(line, 16)-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_1439 $$ int length = Integer.parseInt(head.substring(1, head.length()))-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_1016 $$ int length = reader.read(data, offset, size - offset)-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_765 $$ final int length = (int) descriptionFile.length()-->Line_1744 $$ theReader.read(inputLine, 0, length)[ FD ]
Line_1733 $$ public void readTextFromFile(String fileName) -->Line_1745 $$ theReader.close()[ CD ]
Line_1742 $$ BufferedReader theReader = new BufferedReader(new InputStreamReader(new FileInputStream(aFile), "UTF-8"))-->Line_1745 $$ theReader.close()[ FD ]
Line_0 $$ Entry-->Line_1749 $$ //92
public class func [ CD ]
Line_1749 $$ //92
public class func -->Line_1750 $$ public void readFileToString(String filename) [ CD ]
Line_1750 $$ public void readFileToString(String filename) -->Line_1751 $$ File file = new File(filename)[ CD ]
Line_1750 $$ public void readFileToString(String filename) -->Line_1752 $$ if (!file.exists()) [ CD ]
Line_1752 $$ if (!file.exists()) -->Line_1752 $$ !file.exists()[ CD ]
Line_1752 $$ !file.exists()-->Line_1752 $$ file.exists()[ CD ]
Line_1751 $$ File file = new File(filename)-->Line_1752 $$ file.exists()[ FD ]
Line_326 $$ File file = new File(fileName)-->Line_1752 $$ file.exists()[ FD ]
Line_1752 $$ if (!file.exists()) -->Line_1753 $$ System.out.println("\nFILE DOES NOT EXIST: " + filename)[ CD ]
Line_1750 $$ public void readFileToString(String filename) -->Line_1755 $$ BufferedReader in = new BufferedReader(new FileReader(file))[ CD ]
Line_1750 $$ public void readFileToString(String filename) -->Line_1756 $$ char[] allChars = new char[(int) file.length()][ CD ]
Line_1751 $$ File file = new File(filename)-->Line_1756 $$ file.length()[ FD ]
Line_326 $$ File file = new File(fileName)-->Line_1756 $$ file.length()[ FD ]
Line_1750 $$ public void readFileToString(String filename) -->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ CD ]
Line_1755 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))-->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_1756 $$ char[] allChars = new char[(int) file.length()]-->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_331 $$ char[] allChars = new char[(int) file.length()]-->Line_1757 $$ in.read(allChars, 0, (int) file.length())[ FD ]
Line_1751 $$ File file = new File(filename)-->Line_1757 $$ file.length()[ FD ]
Line_326 $$ File file = new File(fileName)-->Line_1757 $$ file.length()[ FD ]
Line_1750 $$ public void readFileToString(String filename) -->Line_1758 $$ in.close()[ CD ]
Line_1755 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1758 $$ in.close()[ FD ]
Line_1278 $$ BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))-->Line_1758 $$ in.close()[ FD ]
Line_1251 $$ BufferedReader in = new BufferedReader(new InputStreamReader(gangliaXMLSocket.getInputStream()))-->Line_1758 $$ in.close()[ FD ]
Line_1095 $$ BufferedReader in = new BufferedReader(xml)-->Line_1758 $$ in.close()[ FD ]
Line_330 $$ BufferedReader in = new BufferedReader(new FileReader(file))-->Line_1758 $$ in.close()[ FD ]
Line_0 $$ Entry-->Line_1762 $$ //93
public class func [ CD ]
Line_1762 $$ //93
public class func -->Line_1763 $$ public void main(String[] args) [ CD ]
Line_1763 $$ public void main(String[] args) -->Line_1766 $$ reader.readLine()[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1766 $$ reader.readLine()[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1766 $$ reader.readLine()[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1766 $$ reader.readLine()[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1766 $$ reader.readLine()[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1766 $$ reader.readLine()[ FD ]
Line_1763 $$ public void main(String[] args) -->Line_1767 $$ reader.read(buf, 0, 9)[ CD ]
Line_1264 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))-->Line_1767 $$ reader.read(buf, 0, 9)[ FD ]
Line_1243 $$ BufferedReader reader = req.getReader()-->Line_1767 $$ reader.read(buf, 0, 9)[ FD ]
Line_1190 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file)))-->Line_1767 $$ reader.read(buf, 0, 9)[ FD ]
Line_1179 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset))-->Line_1767 $$ reader.read(buf, 0, 9)[ FD ]
Line_678 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(in))-->Line_1767 $$ reader.read(buf, 0, 9)[ FD ]
Line_1763 $$ public void main(String[] args) -->Line_1768 $$ String newStr = new String(buf)[ CD ]
Line_1763 $$ public void main(String[] args) -->Line_1769 $$ if (!newStr.equals(strings[3][1]))
    throw new RuntimeException("Read(char[],int,int) failed");[ CD ]
Line_1769 $$ if (!newStr.equals(strings[3][1]))
    throw new RuntimeException("Read(char[],int,int) failed");-->Line_1769 $$ !newStr.equals(strings[3][1])[ CD ]
Line_1769 $$ !newStr.equals(strings[3][1])-->Line_1769 $$ newStr.equals(strings[3][1])[ CD ]
Line_1768 $$ String newStr = new String(buf)-->Line_1769 $$ newStr.equals(strings[3][1])[ FD ]
Line_0 $$ Entry-->Line_1774 $$ //94
public class func [ CD ]
Line_1774 $$ //94
public class func -->Line_1775 $$ public void Sync(EmaActivityHelper helper, DropboxWrapper api) [ CD ]
Line_1775 $$ public void Sync(EmaActivityHelper helper, DropboxWrapper api) -->Line_1776 $$ mHelper.getDal().Dir()[ CD ]
Line_1775 $$ public void Sync(EmaActivityHelper helper, DropboxWrapper api) -->Line_1777 $$ File syncMetadataFile = new File(mLocalDir, METADATA_FILE)[ CD ]
Line_1775 $$ public void Sync(EmaActivityHelper helper, DropboxWrapper api) -->Line_1778 $$ if (!syncMetadataFile.exists()) [ CD ]
Line_1778 $$ if (!syncMetadataFile.exists()) -->Line_1778 $$ !syncMetadataFile.exists()[ CD ]
Line_1778 $$ !syncMetadataFile.exists()-->Line_1778 $$ syncMetadataFile.exists()[ CD ]
Line_1777 $$ File syncMetadataFile = new File(mLocalDir, METADATA_FILE)-->Line_1778 $$ syncMetadataFile.exists()[ FD ]
Line_1778 $$ if (!syncMetadataFile.exists()) -->Line_1780 $$ return;[ CD ]
Line_1775 $$ public void Sync(EmaActivityHelper helper, DropboxWrapper api) -->Line_1783 $$ char[] buffer = new char[(int) syncMetadataFile.length()][ CD ]
Line_1777 $$ File syncMetadataFile = new File(mLocalDir, METADATA_FILE)-->Line_1783 $$ syncMetadataFile.length()[ FD ]
Line_1775 $$ public void Sync(EmaActivityHelper helper, DropboxWrapper api) -->Line_1784 $$ br.read(buffer)[ CD ]
Line_1715 $$ BufferedReader br = new BufferedReader(isr)-->Line_1784 $$ br.read(buffer)[ FD ]
Line_1783 $$ char[] buffer = new char[(int) syncMetadataFile.length()]-->Line_1784 $$ br.read(buffer)[ FD ]
Line_563 $$ char[] buffer = new char[str.length()]-->Line_1784 $$ br.read(buffer)[ FD ]
Line_0 $$ Entry-->Line_1789 $$ //95
public class func [ CD ]
Line_1789 $$ //95
public class func -->Line_1790 $$ public void drainBuffer(BufferedReader br, StringBuffer storageBuf, int maxLength, int bytesRead, boolean readAll) [ CD ]
Line_1790 $$ public void drainBuffer(BufferedReader br, StringBuffer storageBuf, int maxLength, int bytesRead, boolean readAll) -->Line_1791 $$ if (br.ready()) [ CD ]
Line_1715 $$ BufferedReader br = new BufferedReader(isr)-->Line_1791 $$ if (br.ready()) [ FD ]
Line_1791 $$ if (br.ready()) -->Line_1791 $$ br.ready()[ CD ]
Line_1715 $$ BufferedReader br = new BufferedReader(isr)-->Line_1791 $$ br.ready()[ FD ]
Line_1791 $$ if (br.ready()) -->Line_1792 $$ char[] buf = new char[1024][ CD ]
Line_1791 $$ if (br.ready()) -->Line_1793 $$ do [ CD ]
Line_1791 $$ if (br.ready()) -->Line_1791 $$ if (br.ready()) [ CD ]
Line_1793 $$ do -->Line_1794 $$ int bReadCurrent = br.read(buf, 0, 1024)[ CD ]
Line_1794 $$ int bReadCurrent = br.read(buf, 0, 1024)-->Line_1794 $$ br.read(buf, 0, 1024)[ CD ]
Line_1715 $$ BufferedReader br = new BufferedReader(isr)-->Line_1794 $$ br.read(buf, 0, 1024)[ FD ]
Line_1792 $$ char[] buf = new char[1024]-->Line_1794 $$ br.read(buf, 0, 1024)[ FD ]
Line_1793 $$ do -->Line_1795 $$ if (storageBuf != null && bytesRead < maxLength) [ CD ]
Line_1795 $$ if (storageBuf != null && bytesRead < maxLength) -->Line_1796 $$ storageBuf.append(buf, 0, bReadCurrent)[ CD ]
Line_1792 $$ char[] buf = new char[1024]-->Line_1796 $$ storageBuf.append(buf, 0, bReadCurrent)[ FD ]
Line_1794 $$ int bReadCurrent = br.read(buf, 0, 1024)-->Line_1796 $$ storageBuf.append(buf, 0, bReadCurrent)[ FD ]
Line_1715 $$ BufferedReader br = new BufferedReader(isr)-->Line_1799 $$ br.ready()[ FD ]
Line_100 $$ c = r.read()-->Line_101 $$ if (c < 0) [ FD ]
Line_100 $$ c = r.read()-->Line_103 $$ if ('=' == c) [ FD ]
Line_254 $$ ch = reader.read()-->Line_237 $$ while (ch != ']') [ FD ]
Line_255 $$ ch = reader.read()-->Line_237 $$ while (ch != ']') [ FD ]
Line_256 $$ ch = reader.read()-->Line_237 $$ while (ch != ']') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_237 $$ while (ch != ']') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_237 $$ while (ch != ']') [ FD ]
Line_254 $$ ch = reader.read()-->Line_237 $$ while (ch != ']') [ FD ]
Line_255 $$ ch = reader.read()-->Line_237 $$ while (ch != ']') [ FD ]
Line_256 $$ ch = reader.read()-->Line_237 $$ while (ch != ']') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_237 $$ while (ch != ']') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_237 $$ while (ch != ']') [ FD ]
Line_254 $$ ch = reader.read()-->Line_238 $$ if (ch < 0) [ FD ]
Line_255 $$ ch = reader.read()-->Line_238 $$ if (ch < 0) [ FD ]
Line_256 $$ ch = reader.read()-->Line_238 $$ if (ch < 0) [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_238 $$ if (ch < 0) [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_238 $$ if (ch < 0) [ FD ]
Line_254 $$ ch = reader.read()-->Line_242 $$ if (ch == '[') [ FD ]
Line_255 $$ ch = reader.read()-->Line_242 $$ if (ch == '[') [ FD ]
Line_256 $$ ch = reader.read()-->Line_242 $$ if (ch == '[') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_242 $$ if (ch == '[') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_242 $$ if (ch == '[') [ FD ]
Line_254 $$ ch = reader.read()-->Line_249 $$ if (ch == ',') [ FD ]
Line_255 $$ ch = reader.read()-->Line_249 $$ if (ch == ',') [ FD ]
Line_256 $$ ch = reader.read()-->Line_249 $$ if (ch == ',') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_249 $$ if (ch == ',') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_249 $$ if (ch == ',') [ FD ]
Line_254 $$ ch = reader.read()-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_255 $$ ch = reader.read()-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_256 $$ ch = reader.read()-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_265 $$ //We expect a comma next, or the end of the message
if (ch != ',') [ FD ]
Line_254 $$ ch = reader.read()-->Line_271 $$ if (ch == ',') [ FD ]
Line_255 $$ ch = reader.read()-->Line_271 $$ if (ch == ',') [ FD ]
Line_256 $$ ch = reader.read()-->Line_271 $$ if (ch == ',') [ FD ]
Line_266 $$ ch = skipWhitespace(reader)-->Line_271 $$ if (ch == ',') [ FD ]
Line_272 $$ ch = skipWhitespace(reader)-->Line_271 $$ if (ch == ',') [ FD ]
Line_303 $$ boolean isCurrentWhitespace = Character.isWhitespace(current)-->Line_304 $$ !isCurrentWhitespace[ FD ]
Line_541 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_542 $$ st2.nextToken()[ FD ]
Line_541 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_543 $$ st2.nextToken()[ FD ]
Line_541 $$ StringTokenizer st2 = new StringTokenizer(restore_line)-->Line_544 $$ st2.nextToken()[ FD ]
Line_545 $$ FeatureLimits newLimit = new FeatureLimits(feature_min, feature_max)-->Line_546 $$ limits.add(newLimit)[ FD ]
Line_645 $$ int position = 0-->Line_645 $$ for (int position = 0; position < contentLength; position++) [ FD ]
Line_645 $$ int position = 0-->Line_645 $$ for (int position = 0; position < contentLength; position++) [ FD ]
Line_645 $$ int position = 0-->Line_645 $$ position++[ FD ]
Line_682 $$ int i = end-->Line_682 $$ for (int i = end; i > 0; i--) [ FD ]
Line_682 $$ int i = end-->Line_682 $$ for (int i = end; i > 0; i--) [ FD ]
Line_682 $$ int i = end-->Line_682 $$ i--[ FD ]
Line_684 $$ char c = data[index]-->Line_685 $$ if ('\n' == c) [ FD ]
Line_705 $$ int i = overflowIndex-->Line_705 $$ //place overflow back in data
for (int i = overflowIndex; i < end; i++) [ FD ]
Line_705 $$ int i = overflowIndex-->Line_705 $$ //place overflow back in data
for (int i = overflowIndex; i < end; i++) [ FD ]
Line_705 $$ int i = overflowIndex-->Line_705 $$ i++[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_819 $$ this.isTokenMember(c)[ FD ]
Line_816 $$ final char c = buffer[0]-->Line_832 $$ text.append(c)[ FD ]
Line_863 $$ int i = 0-->Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();[ FD ]
Line_863 $$ int i = 0-->Line_863 $$ for (int i = 0; i < windowStep; i++) sequenceWindow.remove();[ FD ]
Line_863 $$ int i = 0-->Line_863 $$ i++[ FD ]
Line_908 $$ int i = 0-->Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;[ FD ]
Line_908 $$ int i = 0-->Line_908 $$ for (int i = 0; i < tokens.length; i++) tokens[i] = null;[ FD ]
Line_908 $$ int i = 0-->Line_908 $$ i++[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_912 $$ line.indexOf(':')[ FD ]
Line_918 $$ line = ""-->Line_912 $$ line.indexOf(':')[ FD ]
Line_912 $$ int colon = line.indexOf(':')-->Line_913 $$ if (colon >= 0) [ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_914 $$ line.substring(0, colon)[ FD ]
Line_918 $$ line = ""-->Line_914 $$ line.substring(0, colon)[ FD ]
Line_912 $$ int colon = line.indexOf(':')-->Line_914 $$ line.substring(0, colon)[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_915 $$ line.substring(colon + 1)[ FD ]
Line_918 $$ line = ""-->Line_915 $$ line.substring(colon + 1)[ FD ]
Line_915 $$ line = line.substring(colon + 1)-->Line_917 $$ token = line[ FD ]
Line_918 $$ line = ""-->Line_917 $$ token = line[ FD ]
Line_911 $$ String token = null-->Line_920 $$ tokens[n++] = token[ FD ]
Line_914 $$ token = line.substring(0, colon)-->Line_920 $$ tokens[n++] = token[ FD ]
Line_917 $$ token = line-->Line_920 $$ tokens[n++] = token[ FD ]
Line_1058 $$ int charByte = input.read()-->Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) [ FD ]
Line_1058 $$ charByte = input.read()-->Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) [ FD ]
Line_1058 $$ int charByte = input.read()-->Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) [ FD ]
Line_1058 $$ charByte = input.read()-->Line_1058 $$ for (int charByte = input.read(); charByte >= 0; charByte = input.read()) [ FD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1061 $$ if (readChar == '\r') [ FD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1063 $$ lines.append(readChar)[ FD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1065 $$ if (readChar == '\n') [ FD ]
Line_1059 $$ char readChar = (char) charByte-->Line_1070 $$ firstLine.append(readChar)[ FD ]
Line_1080 $$ int i = 0-->Line_1080 $$ i++[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1097 $$ last2 = last[ FD ]
Line_1097 $$ last = ch-->Line_1097 $$ last2 = last[ FD ]
Line_1120 $$ last = ch-->Line_1097 $$ last2 = last[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1097 $$ last = ch[ FD ]
Line_1097 $$ ch = in.read()-->Line_1097 $$ last = ch[ FD ]
Line_1105 $$ ch = in.read()-->Line_1097 $$ last = ch[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1097 $$ last = ch[ FD ]
Line_1139 $$ ch = '<'-->Line_1097 $$ last = ch[ FD ]
Line_1154 $$ ch = '<'-->Line_1097 $$ last = ch[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1097 $$ ch = in.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1105 $$ ch = in.read()-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1139 $$ ch = '<'-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1154 $$ ch = '<'-->Line_1104 $$ if (ch == '<') [ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1097 $$ ch = in.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1105 $$ ch = in.read()-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1139 $$ ch = '<'-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1154 $$ ch = '<'-->Line_1106 $$ if (ch == -1)
    break read;[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1097 $$ ch = in.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1105 $$ ch = in.read()-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1139 $$ ch = '<'-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1154 $$ ch = '<'-->Line_1117 $$ // if not an element start, skip it
if (ch != '<')
    continue;[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1120 $$ last = ch[ FD ]
Line_1097 $$ ch = in.read()-->Line_1120 $$ last = ch[ FD ]
Line_1105 $$ ch = in.read()-->Line_1120 $$ last = ch[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1120 $$ last = ch[ FD ]
Line_1139 $$ ch = '<'-->Line_1120 $$ last = ch[ FD ]
Line_1154 $$ ch = '<'-->Line_1120 $$ last = ch[ FD ]
Line_1096 $$ int ch = 0, last = 0, last2 = 0-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1097 $$ ch = in.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1105 $$ ch = in.read()-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1121 $$ ch = readThroughWhitespace(in)-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1139 $$ ch = '<'-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1154 $$ ch = '<'-->Line_1126 $$ readElementToken(ch, in)[ FD ]
Line_1193 $$ int i = 2-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1193 $$ int i = 2-->Line_1193 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1193 $$ int i = 2-->Line_1193 $$ ++i[ FD ]
Line_1210 $$ int i = 2-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1210 $$ int i = 2-->Line_1210 $$ for (int i = 2; i < readLength; ++i) [ FD ]
Line_1210 $$ int i = 2-->Line_1210 $$ ++i[ FD ]
Line_1693 $$ int i = 0-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1693 $$ int i = 0-->Line_1693 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_1693 $$ int i = 0-->Line_1693 $$ ++i[ FD ]
Line_1695 $$ char c = (char) reader.read()-->Line_1696 $$ body.append(c)[ FD ]
Line_1794 $$ int bReadCurrent = br.read(buf, 0, 1024)-->Line_1796 $$ storageBuf.append(buf, 0, bReadCurrent)[ FD ]
