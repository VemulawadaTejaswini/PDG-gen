Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void readContent(InputStream stream, String charset) [ CD ]
Line_3 $$ public void readContent(InputStream stream, String charset) -->Line_4 $$ int n = reader.read(readBuffer)[ CD ]
Line_4 $$ int n = reader.read(readBuffer)-->Line_4 $$ reader.read(readBuffer)[ CD ]
Line_3 $$ public void readContent(InputStream stream, String charset) -->Line_5 $$ while (n > 0) [ CD ]
Line_3 $$ public void readContent(InputStream stream, String charset) -->Line_3 $$ public void readContent(InputStream stream, String charset) [ CD ]
Line_4 $$ int n = reader.read(readBuffer)-->Line_5 $$ while (n > 0) [ FD ]
Line_5 $$ while (n > 0) -->Line_7 $$ buffer.append(readBuffer, 0, n)[ CD ]
Line_4 $$ int n = reader.read(readBuffer)-->Line_7 $$ buffer.append(readBuffer, 0, n)[ FD ]
Line_5 $$ while (n > 0) -->Line_8 $$ n = reader.read(readBuffer)[ CD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_8 $$ n = reader.read(readBuffer)[ FD ]
Line_4 $$ int n = reader.read(readBuffer)-->Line_8 $$ n = reader.read(readBuffer)[ FD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_8 $$ reader.read(readBuffer)[ CD ]
Line_0 $$ Entry-->Line_13 $$ //1
public class func [ CD ]
Line_13 $$ //1
public class func -->Line_14 $$ public void extractReaderContents(BufferedReader bufferedReader) [ CD ]
Line_14 $$ public void extractReaderContents(BufferedReader bufferedReader) -->Line_15 $$ int readCharacterCount = bufferedReader.read(readInCharacters)[ CD ]
Line_15 $$ int readCharacterCount = bufferedReader.read(readInCharacters)-->Line_15 $$ bufferedReader.read(readInCharacters)[ CD ]
Line_14 $$ public void extractReaderContents(BufferedReader bufferedReader) -->Line_16 $$ while (readCharacterCount > -1) [ CD ]
Line_14 $$ public void extractReaderContents(BufferedReader bufferedReader) -->Line_14 $$ public void extractReaderContents(BufferedReader bufferedReader) [ CD ]
Line_15 $$ int readCharacterCount = bufferedReader.read(readInCharacters)-->Line_16 $$ while (readCharacterCount > -1) [ FD ]
Line_16 $$ while (readCharacterCount > -1) -->Line_17 $$ contents.append(String.valueOf(readInCharacters))[ CD ]
Line_16 $$ while (readCharacterCount > -1) -->Line_18 $$ readCharacterCount = bufferedReader.read(readInCharacters)[ CD ]
Line_18 $$ readCharacterCount = bufferedReader.read(readInCharacters)-->Line_18 $$ readCharacterCount = bufferedReader.read(readInCharacters)[ FD ]
Line_15 $$ int readCharacterCount = bufferedReader.read(readInCharacters)-->Line_18 $$ readCharacterCount = bufferedReader.read(readInCharacters)[ FD ]
Line_18 $$ readCharacterCount = bufferedReader.read(readInCharacters)-->Line_18 $$ bufferedReader.read(readInCharacters)[ CD ]
Line_14 $$ public void extractReaderContents(BufferedReader bufferedReader) -->Line_20 $$ bufferedReader.close()[ CD ]
Line_0 $$ Entry-->Line_24 $$ //2
public class func [ CD ]
Line_24 $$ //2
public class func -->Line_25 $$ public void getText(InputStream stream, String charset) [ CD ]
Line_25 $$ public void getText(InputStream stream, String charset) -->Line_26 $$ int numRead = reader.read(chars)[ CD ]
Line_26 $$ int numRead = reader.read(chars)-->Line_26 $$ reader.read(chars)[ CD ]
Line_25 $$ public void getText(InputStream stream, String charset) -->Line_27 $$ while (numRead != -1) [ CD ]
Line_25 $$ public void getText(InputStream stream, String charset) -->Line_25 $$ public void getText(InputStream stream, String charset) [ CD ]
Line_26 $$ int numRead = reader.read(chars)-->Line_27 $$ while (numRead != -1) [ FD ]
Line_27 $$ while (numRead != -1) -->Line_29 $$ sw.write(chars, 0, numRead)[ CD ]
Line_26 $$ int numRead = reader.read(chars)-->Line_29 $$ sw.write(chars, 0, numRead)[ FD ]
Line_27 $$ while (numRead != -1) -->Line_30 $$ numRead = reader.read(chars)[ CD ]
Line_30 $$ numRead = reader.read(chars)-->Line_30 $$ numRead = reader.read(chars)[ FD ]
Line_26 $$ int numRead = reader.read(chars)-->Line_30 $$ numRead = reader.read(chars)[ FD ]
Line_30 $$ numRead = reader.read(chars)-->Line_30 $$ reader.read(chars)[ CD ]
Line_25 $$ public void getText(InputStream stream, String charset) -->Line_32 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_36 $$ //3
public class func [ CD ]
Line_36 $$ //3
public class func -->Line_37 $$ public void loadPlotData(TownBlock townBlock) [ CD ]
Line_37 $$ public void loadPlotData(TownBlock townBlock) -->Line_38 $$ plotBlockData.setVersion(version)[ CD ]
Line_37 $$ public void loadPlotData(TownBlock townBlock) -->Line_39 $$ plotBlockData.setHeight(fin.read())[ CD ]
Line_37 $$ public void loadPlotData(TownBlock townBlock) -->Line_40 $$ while ((value = fin.read()) >= 0) [ CD ]
Line_37 $$ public void loadPlotData(TownBlock townBlock) -->Line_37 $$ public void loadPlotData(TownBlock townBlock) [ CD ]
Line_40 $$ while ((value = fin.read()) >= 0) -->Line_41 $$ IntArr.add(value)[ CD ]
Line_0 $$ Entry-->Line_46 $$ //4
public class func [ CD ]
Line_46 $$ //4
public class func -->Line_47 $$ public void rewriteHeader() [ CD ]
Line_47 $$ public void rewriteHeader() -->Line_48 $$ while ((line = br.readLine()) != null) [ CD ]
Line_47 $$ public void rewriteHeader() -->Line_47 $$ public void rewriteHeader() [ CD ]
Line_48 $$ while ((line = br.readLine()) != null) -->Line_49 $$ if (descriptionLinePattern.matcher(line).matches()) [ CD ]
Line_49 $$ if (descriptionLinePattern.matcher(line).matches()) -->Line_49 $$ descriptionLinePattern.matcher(line).matches()[ CD ]
Line_49 $$ if (descriptionLinePattern.matcher(line).matches()) -->Line_50 $$ wr.write("DESCRIPTION \"")[ CD ]
Line_49 $$ if (descriptionLinePattern.matcher(line).matches()) -->Line_51 $$ wr.write(description)[ CD ]
Line_49 $$ if (descriptionLinePattern.matcher(line).matches()) -->Line_52 $$ wr.write("\"\n")[ CD ]
Line_49 $$ if (descriptionLinePattern.matcher(line).matches()) -->Line_54 $$ if (platformLinePattern.matcher(line).matches()) [ CD ]
Line_54 $$ if (platformLinePattern.matcher(line).matches()) -->Line_54 $$ platformLinePattern.matcher(line).matches()[ CD ]
Line_54 $$ if (platformLinePattern.matcher(line).matches()) -->Line_55 $$ wr.write("PLATFORM ")[ CD ]
Line_54 $$ if (platformLinePattern.matcher(line).matches()) -->Line_56 $$ wr.write(platform)[ CD ]
Line_54 $$ if (platformLinePattern.matcher(line).matches()) -->Line_57 $$ wr.write("\n")[ CD ]
Line_54 $$ if (platformLinePattern.matcher(line).matches()) -->Line_59 $$ if (line.startsWith("(")) [ CD ]
Line_59 $$ if (line.startsWith("(")) -->Line_59 $$ line.startsWith("(")[ CD ]
Line_59 $$ if (line.startsWith("(")) -->Line_60 $$ if (!descriptionWritten) [ CD ]
Line_60 $$ if (!descriptionWritten) -->Line_61 $$ wr.write("DESCRIPTION \"")[ CD ]
Line_60 $$ if (!descriptionWritten) -->Line_62 $$ wr.write(description)[ CD ]
Line_60 $$ if (!descriptionWritten) -->Line_63 $$ wr.write("\"\n")[ CD ]
Line_59 $$ if (line.startsWith("(")) -->Line_66 $$ if (!platformWritten) [ CD ]
Line_66 $$ if (!platformWritten) -->Line_67 $$ wr.write("PLATFORM ")[ CD ]
Line_66 $$ if (!platformWritten) -->Line_68 $$ wr.write(platform)[ CD ]
Line_66 $$ if (!platformWritten) -->Line_69 $$ wr.write("\n")[ CD ]
Line_59 $$ if (line.startsWith("(")) -->Line_72 $$ wr.write(line)[ CD ]
Line_59 $$ if (line.startsWith("(")) -->Line_73 $$ wr.append('\n')[ CD ]
Line_59 $$ if (line.startsWith("(")) -->Line_77 $$ wr.write(line)[ CD ]
Line_59 $$ if (line.startsWith("(")) -->Line_78 $$ wr.append('\n')[ CD ]
Line_47 $$ public void rewriteHeader() -->Line_81 $$ while ((len = br.read(buff, 0, 4096)) > 0) [ CD ]
Line_47 $$ public void rewriteHeader() -->Line_47 $$ public void rewriteHeader() [ CD ]
Line_81 $$ while ((len = br.read(buff, 0, 4096)) > 0) -->Line_82 $$ wr.write(buff, 0, len)[ CD ]
Line_47 $$ public void rewriteHeader() -->Line_84 $$ wr.close()[ CD ]
Line_0 $$ Entry-->Line_88 $$ //5
public class func [ CD ]
Line_88 $$ //5
public class func -->Line_89 $$ public void readFile(String fileName, boolean showExceptions) [ CD ]
Line_89 $$ public void readFile(String fileName, boolean showExceptions) -->Line_90 $$ reader(fileName, false, showExceptions)[ CD ]
Line_89 $$ public void readFile(String fileName, boolean showExceptions) -->Line_91 $$ if (inFile == null)
    return "";[ CD ]
Line_91 $$ if (inFile == null)
    return "";-->Line_91 $$ return "";[ CD ]
Line_89 $$ public void readFile(String fileName, boolean showExceptions) -->Line_92 $$ while ((len = inFile.read(buff)) >= 0) strb.append(buff, 0, len);[ CD ]
Line_89 $$ public void readFile(String fileName, boolean showExceptions) -->Line_89 $$ public void readFile(String fileName, boolean showExceptions) [ CD ]
Line_92 $$ while ((len = inFile.read(buff)) >= 0) strb.append(buff, 0, len);-->Line_93 $$ strb.append(buff, 0, len)[ CD ]
Line_89 $$ public void readFile(String fileName, boolean showExceptions) -->Line_94 $$ inFile.close()[ CD ]
Line_0 $$ Entry-->Line_98 $$ //6
public class func [ CD ]
Line_98 $$ //6
public class func -->Line_99 $$ public void read(BufferedReader requestReader, HttpServletRequest req) [ CD ]
Line_99 $$ public void read(BufferedReader requestReader, HttpServletRequest req) -->Line_100 $$ while (-1 != (c = requestReader.read())) [ CD ]
Line_99 $$ public void read(BufferedReader requestReader, HttpServletRequest req) -->Line_99 $$ public void read(BufferedReader requestReader, HttpServletRequest req) [ CD ]
Line_100 $$ while (-1 != (c = requestReader.read())) -->Line_101 $$ output.append((char) c)[ CD ]
Line_99 $$ public void read(BufferedReader requestReader, HttpServletRequest req) -->Line_103 $$ requestReader.close()[ CD ]
Line_0 $$ Entry-->Line_107 $$ //7
public class func [ CD ]
Line_107 $$ //7
public class func -->Line_108 $$ public void readFrom(Class arg0, Type arg1, Annotation[] arg2, MediaType arg3, MultivaluedMap arg4, InputStream is) [ CD ]
Line_108 $$ public void readFrom(Class arg0, Type arg1, Annotation[] arg2, MediaType arg3, MultivaluedMap arg4, InputStream is) -->Line_109 $$ while ((ch = br.read()) > -1) [ CD ]
Line_108 $$ public void readFrom(Class arg0, Type arg1, Annotation[] arg2, MediaType arg3, MultivaluedMap arg4, InputStream is) -->Line_108 $$ public void readFrom(Class arg0, Type arg1, Annotation[] arg2, MediaType arg3, MultivaluedMap arg4, InputStream is) [ CD ]
Line_109 $$ while ((ch = br.read()) > -1) -->Line_110 $$ sb.append((char) ch)[ CD ]
Line_108 $$ public void readFrom(Class arg0, Type arg1, Annotation[] arg2, MediaType arg3, MultivaluedMap arg4, InputStream is) -->Line_112 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_116 $$ //8
public class func [ CD ]
Line_116 $$ //8
public class func -->Line_117 $$ public void getFileContents(InputStream in) [ CD ]
Line_117 $$ public void getFileContents(InputStream in) -->Line_118 $$ while ((read = br.read()) != -1) sb.append((char) read);[ CD ]
Line_117 $$ public void getFileContents(InputStream in) -->Line_117 $$ public void getFileContents(InputStream in) [ CD ]
Line_118 $$ while ((read = br.read()) != -1) sb.append((char) read);-->Line_119 $$ sb.append((char) read)[ CD ]
Line_117 $$ public void getFileContents(InputStream in) -->Line_120 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_124 $$ //9
public class func [ CD ]
Line_124 $$ //9
public class func -->Line_125 $$ public void runConsole(String sCmd) [ CD ]
Line_125 $$ public void runConsole(String sCmd) -->Line_126 $$ while ((read = reader.read(buffer)) > 0) [ CD ]
Line_125 $$ public void runConsole(String sCmd) -->Line_125 $$ public void runConsole(String sCmd) [ CD ]
Line_126 $$ while ((read = reader.read(buffer)) > 0) -->Line_127 $$ output.append(buffer, 0, read)[ CD ]
Line_125 $$ public void runConsole(String sCmd) -->Line_129 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_133 $$ //10
public class func [ CD ]
Line_133 $$ //10
public class func -->Line_134 $$ public void getContents(InputStream in) [ CD ]
Line_134 $$ public void getContents(InputStream in) -->Line_135 $$ while ((read = br.read()) != -1) sb.append((char) read);[ CD ]
Line_134 $$ public void getContents(InputStream in) -->Line_134 $$ public void getContents(InputStream in) [ CD ]
Line_135 $$ while ((read = br.read()) != -1) sb.append((char) read);-->Line_136 $$ sb.append((char) read)[ CD ]
Line_134 $$ public void getContents(InputStream in) -->Line_137 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_141 $$ //11
public class func [ CD ]
Line_141 $$ //11
public class func -->Line_142 $$ public void exec(String command) [ CD ]
Line_142 $$ public void exec(String command) -->Line_143 $$ while ((read = reader.read(buffer)) > 0) [ CD ]
Line_142 $$ public void exec(String command) -->Line_142 $$ public void exec(String command) [ CD ]
Line_143 $$ while ((read = reader.read(buffer)) > 0) -->Line_144 $$ output.append(buffer, 0, read)[ CD ]
Line_142 $$ public void exec(String command) -->Line_146 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_150 $$ //12
public class func [ CD ]
Line_150 $$ //12
public class func -->Line_151 $$ public void doHttpCall(String methodName, String marshaledData) [ CD ]
Line_151 $$ public void doHttpCall(String methodName, String marshaledData) -->Line_152 $$ while ((ch = br.read()) > -1) [ CD ]
Line_151 $$ public void doHttpCall(String methodName, String marshaledData) -->Line_151 $$ public void doHttpCall(String methodName, String marshaledData) [ CD ]
Line_152 $$ while ((ch = br.read()) > -1) -->Line_153 $$ sb.append((char) ch)[ CD ]
Line_151 $$ public void doHttpCall(String methodName, String marshaledData) -->Line_155 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_159 $$ //13
public class func [ CD ]
Line_159 $$ //13
public class func -->Line_160 $$ public void parse(String rulename, File file, boolean trace) [ CD ]
Line_160 $$ public void parse(String rulename, File file, boolean trace) -->Line_161 $$ while ((ch = in.read()) != -1) out.append((char) ch);[ CD ]
Line_160 $$ public void parse(String rulename, File file, boolean trace) -->Line_160 $$ public void parse(String rulename, File file, boolean trace) [ CD ]
Line_161 $$ while ((ch = in.read()) != -1) out.append((char) ch);-->Line_162 $$ out.append((char) ch)[ CD ]
Line_160 $$ public void parse(String rulename, File file, boolean trace) -->Line_163 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_167 $$ //14
public class func [ CD ]
Line_167 $$ //14
public class func -->Line_168 $$ public void getContents(IStorage file) [ CD ]
Line_168 $$ public void getContents(IStorage file) -->Line_169 $$ while ((read = br.read()) != -1) sb.append((char) read);[ CD ]
Line_168 $$ public void getContents(IStorage file) -->Line_168 $$ public void getContents(IStorage file) [ CD ]
Line_169 $$ while ((read = br.read()) != -1) sb.append((char) read);-->Line_170 $$ sb.append((char) read)[ CD ]
Line_168 $$ public void getContents(IStorage file) -->Line_171 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_175 $$ //15
public class func [ CD ]
Line_175 $$ //15
public class func -->Line_176 $$ public void getFileAsString(File file, String charEncoding) [ CD ]
Line_176 $$ public void getFileAsString(File file, String charEncoding) -->Line_177 $$ while ((ch = in.read()) > -1) [ CD ]
Line_176 $$ public void getFileAsString(File file, String charEncoding) -->Line_176 $$ public void getFileAsString(File file, String charEncoding) [ CD ]
Line_177 $$ while ((ch = in.read()) > -1) -->Line_178 $$ sb.append((char) ch)[ CD ]
Line_176 $$ public void getFileAsString(File file, String charEncoding) -->Line_180 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_184 $$ //16
public class func [ CD ]
Line_184 $$ //16
public class func -->Line_185 $$ public void readUTF8FromFile(File file) [ CD ]
Line_185 $$ public void readUTF8FromFile(File file) -->Line_186 $$ while ((ch = in.read()) > -1) [ CD ]
Line_185 $$ public void readUTF8FromFile(File file) -->Line_185 $$ public void readUTF8FromFile(File file) [ CD ]
Line_186 $$ while ((ch = in.read()) > -1) -->Line_187 $$ sb.append((char) ch)[ CD ]
Line_185 $$ public void readUTF8FromFile(File file) -->Line_189 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_193 $$ //17
public class func [ CD ]
Line_193 $$ //17
public class func -->Line_194 $$ public void executeCommand(String command) [ CD ]
Line_194 $$ public void executeCommand(String command) -->Line_195 $$ while ((read = reader.read(buffer)) > 0) [ CD ]
Line_194 $$ public void executeCommand(String command) -->Line_194 $$ public void executeCommand(String command) [ CD ]
Line_195 $$ while ((read = reader.read(buffer)) > 0) -->Line_196 $$ output.append(buffer, 0, read)[ CD ]
Line_194 $$ public void executeCommand(String command) -->Line_198 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_202 $$ //18
public class func [ CD ]
Line_202 $$ //18
public class func -->Line_203 $$ public void executeCommand(String command) [ CD ]
Line_203 $$ public void executeCommand(String command) -->Line_204 $$ while ((read = reader2.read(buffer)) > 0) [ CD ]
Line_203 $$ public void executeCommand(String command) -->Line_203 $$ public void executeCommand(String command) [ CD ]
Line_204 $$ while ((read = reader2.read(buffer)) > 0) -->Line_205 $$ output2.append(buffer, 0, read)[ CD ]
Line_203 $$ public void executeCommand(String command) -->Line_207 $$ reader2.close()[ CD ]
Line_0 $$ Entry-->Line_211 $$ //19
public class func [ CD ]
Line_211 $$ //19
public class func -->Line_212 $$ public void read(BufferedReader inFile) [ CD ]
Line_212 $$ public void read(BufferedReader inFile) -->Line_213 $$ while ((len = inFile.read(buff)) >= 0) strb.append(buff, 0, len);[ CD ]
Line_212 $$ public void read(BufferedReader inFile) -->Line_212 $$ public void read(BufferedReader inFile) [ CD ]
Line_213 $$ while ((len = inFile.read(buff)) >= 0) strb.append(buff, 0, len);-->Line_214 $$ strb.append(buff, 0, len)[ CD ]
Line_212 $$ public void read(BufferedReader inFile) -->Line_215 $$ inFile.close()[ CD ]
Line_0 $$ Entry-->Line_219 $$ //20
public class func [ CD ]
Line_219 $$ //20
public class func -->Line_220 $$ public void getStringFromFile(String path) [ CD ]
Line_220 $$ public void getStringFromFile(String path) -->Line_221 $$ while ((numRead = reader.read(buf)) != -1) [ CD ]
Line_220 $$ public void getStringFromFile(String path) -->Line_220 $$ public void getStringFromFile(String path) [ CD ]
Line_221 $$ while ((numRead = reader.read(buf)) != -1) -->Line_222 $$ String readData = String.valueOf(buf, 0, numRead)[ CD ]
Line_222 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_222 $$ String.valueOf(buf, 0, numRead)[ CD ]
Line_30 $$ numRead = reader.read(chars)-->Line_222 $$ String.valueOf(buf, 0, numRead)[ FD ]
Line_26 $$ int numRead = reader.read(chars)-->Line_222 $$ String.valueOf(buf, 0, numRead)[ FD ]
Line_221 $$ while ((numRead = reader.read(buf)) != -1) -->Line_223 $$ fileData.append(readData)[ CD ]
Line_222 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_223 $$ fileData.append(readData)[ FD ]
Line_220 $$ public void getStringFromFile(String path) -->Line_226 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_230 $$ //21
public class func [ CD ]
Line_230 $$ //21
public class func -->Line_231 $$ public void processFile(String src, String dst) [ CD ]
Line_231 $$ public void processFile(String src, String dst) -->Line_232 $$ while ((ch = in.read()) != -1) out.append((char) ch);[ CD ]
Line_231 $$ public void processFile(String src, String dst) -->Line_231 $$ public void processFile(String src, String dst) [ CD ]
Line_232 $$ while ((ch = in.read()) != -1) out.append((char) ch);-->Line_233 $$ out.append((char) ch)[ CD ]
Line_231 $$ public void processFile(String src, String dst) -->Line_234 $$ out.append("\n")[ CD ]
Line_231 $$ public void processFile(String src, String dst) -->Line_235 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_239 $$ //22
public class func [ CD ]
Line_239 $$ //22
public class func -->Line_240 $$ public void showFileInfo(String filename) [ CD ]
Line_240 $$ public void showFileInfo(String filename) -->Line_241 $$ while ((read = br.read(buffer)) > 0) [ CD ]
Line_240 $$ public void showFileInfo(String filename) -->Line_240 $$ public void showFileInfo(String filename) [ CD ]
Line_241 $$ while ((read = br.read(buffer)) > 0) -->Line_242 $$ output.append(buffer, 0, read)[ CD ]
Line_240 $$ public void showFileInfo(String filename) -->Line_244 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_248 $$ //23
public class func [ CD ]
Line_248 $$ //23
public class func -->Line_249 $$ public void deleteCacheDirectory(Context context) [ CD ]
Line_249 $$ public void deleteCacheDirectory(Context context) -->Line_250 $$ while ((read = reader.read(buffer)) > 0) [ CD ]
Line_249 $$ public void deleteCacheDirectory(Context context) -->Line_249 $$ public void deleteCacheDirectory(Context context) [ CD ]
Line_250 $$ while ((read = reader.read(buffer)) > 0) -->Line_251 $$ output.append(buffer, 0, read)[ CD ]
Line_249 $$ public void deleteCacheDirectory(Context context) -->Line_253 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_257 $$ //24
public class func [ CD ]
Line_257 $$ //24
public class func -->Line_258 $$ public void getSchemaAsString(BufferedReader reader, int available) [ CD ]
Line_258 $$ public void getSchemaAsString(BufferedReader reader, int available) -->Line_259 $$ StringBuffer sb = new StringBuffer(available)[ CD ]
Line_258 $$ public void getSchemaAsString(BufferedReader reader, int available) -->Line_260 $$ while ((numRead = reader.read(chars)) > -1) [ CD ]
Line_258 $$ public void getSchemaAsString(BufferedReader reader, int available) -->Line_258 $$ public void getSchemaAsString(BufferedReader reader, int available) [ CD ]
Line_260 $$ while ((numRead = reader.read(chars)) > -1) -->Line_261 $$ sb.append(String.valueOf(chars))[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_261 $$ sb.append(String.valueOf(chars))[ FD ]
Line_258 $$ public void getSchemaAsString(BufferedReader reader, int available) -->Line_263 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_267 $$ //25
public class func [ CD ]
Line_267 $$ //25
public class func -->Line_268 $$ public void getFile(String url) [ CD ]
Line_268 $$ public void getFile(String url) -->Line_269 $$ while ((read = in.read(str)) >= 0) [ CD ]
Line_268 $$ public void getFile(String url) -->Line_268 $$ public void getFile(String url) [ CD ]
Line_269 $$ while ((read = in.read(str)) >= 0) -->Line_270 $$ sw.write(str, 0, read)[ CD ]
Line_269 $$ while ((read = in.read(str)) >= 0) -->Line_271 $$ if (fw != null) [ CD ]
Line_271 $$ if (fw != null) -->Line_272 $$ fw.write(str, 0, read)[ CD ]
Line_268 $$ public void getFile(String url) -->Line_275 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_279 $$ //26
public class func [ CD ]
Line_279 $$ //26
public class func -->Line_280 $$ public void gzips(String zipFileName, String mDestFile) [ CD ]
Line_280 $$ public void gzips(String zipFileName, String mDestFile) -->Line_281 $$ while ((c = in.read()) != -1) [ CD ]
Line_280 $$ public void gzips(String zipFileName, String mDestFile) -->Line_280 $$ public void gzips(String zipFileName, String mDestFile) [ CD ]
Line_281 $$ while ((c = in.read()) != -1) -->Line_283 $$ out.write(String.valueOf((char) c).getBytes("UTF-8"))[ CD ]
Line_280 $$ public void gzips(String zipFileName, String mDestFile) -->Line_285 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_289 $$ //27
public class func [ CD ]
Line_289 $$ //27
public class func -->Line_290 $$ public void readIntoBuffer(BufferedReader br, StringBuffer buffer) [ CD ]
Line_290 $$ public void readIntoBuffer(BufferedReader br, StringBuffer buffer) -->Line_291 $$ while ((bytesRead = br.read(bytes)) > 0) [ CD ]
Line_290 $$ public void readIntoBuffer(BufferedReader br, StringBuffer buffer) -->Line_290 $$ public void readIntoBuffer(BufferedReader br, StringBuffer buffer) [ CD ]
Line_291 $$ while ((bytesRead = br.read(bytes)) > 0) -->Line_292 $$ if (bytesRead == bufferSize) [ CD ]
Line_292 $$ if (bytesRead == bufferSize) -->Line_293 $$ buffer.append(bytes)[ CD ]
Line_292 $$ if (bytesRead == bufferSize) -->Line_296 $$ buffer.append(bytes, 0, bytesRead)[ CD ]
Line_0 $$ Entry-->Line_302 $$ //28
public class func [ CD ]
Line_302 $$ //28
public class func -->Line_303 $$ public void readJson() [ CD ]
Line_303 $$ public void readJson() -->Line_304 $$ while ((num = input.read(buffer)) > 0) [ CD ]
Line_303 $$ public void readJson() -->Line_303 $$ public void readJson() [ CD ]
Line_304 $$ while ((num = input.read(buffer)) > 0) -->Line_305 $$ content.append(buffer, 0, num)[ CD ]
Line_303 $$ public void readJson() -->Line_307 $$ MyObject myobj = JsonHelper.parseGson(content.toString())[ CD ]
Line_307 $$ MyObject myobj = JsonHelper.parseGson(content.toString())-->Line_307 $$ JsonHelper.parseGson(content.toString())[ CD ]
Line_303 $$ public void readJson() -->Line_308 $$ if (myobj != null) [ CD ]
Line_307 $$ MyObject myobj = JsonHelper.parseGson(content.toString())-->Line_308 $$ if (myobj != null) [ FD ]
Line_308 $$ if (myobj != null) -->Line_310 $$ // Update ui
if (jsonView != null)
    jsonView.setText(myobj.toString());[ CD ]
Line_310 $$ // Update ui
if (jsonView != null)
    jsonView.setText(myobj.toString());-->Line_311 $$ jsonView.setText(myobj.toString())[ CD ]
Line_307 $$ MyObject myobj = JsonHelper.parseGson(content.toString())-->Line_311 $$ myobj.toString()[ FD ]
Line_308 $$ if (myobj != null) -->Line_312 $$ Log.i(TAG, myobj.toString())[ CD ]
Line_307 $$ MyObject myobj = JsonHelper.parseGson(content.toString())-->Line_312 $$ myobj.toString()[ FD ]
Line_0 $$ Entry-->Line_317 $$ //29
public class func [ CD ]
Line_317 $$ //29
public class func -->Line_318 $$ public void getUrlContent(String urlAddress, Map requestProperties, Map requestParameters, String encoding, int timeout) [ CD ]
Line_318 $$ public void getUrlContent(String urlAddress, Map requestProperties, Map requestParameters, String encoding, int timeout) -->Line_319 $$ while ((i = buffer.read()) != -1) strbuf.append((char) i);[ CD ]
Line_318 $$ public void getUrlContent(String urlAddress, Map requestProperties, Map requestParameters, String encoding, int timeout) -->Line_318 $$ public void getUrlContent(String urlAddress, Map requestProperties, Map requestParameters, String encoding, int timeout) [ CD ]
Line_319 $$ while ((i = buffer.read()) != -1) strbuf.append((char) i);-->Line_320 $$ strbuf.append((char) i)[ CD ]
Line_318 $$ public void getUrlContent(String urlAddress, Map requestProperties, Map requestParameters, String encoding, int timeout) -->Line_321 $$ String readData = strbuf.toString()[ CD ]
Line_321 $$ String readData = strbuf.toString()-->Line_321 $$ strbuf.toString()[ CD ]
Line_0 $$ Entry-->Line_325 $$ //30
public class func [ CD ]
Line_325 $$ //30
public class func -->Line_326 $$ public void decode() [ CD ]
Line_326 $$ public void decode() -->Line_327 $$ while ((readLen = br.read(readBuf)) > 0) [ CD ]
Line_326 $$ public void decode() -->Line_326 $$ public void decode() [ CD ]
Line_327 $$ while ((readLen = br.read(readBuf)) > 0) -->Line_328 $$ tempMessage.append(readBuf, 0, readLen)[ CD ]
Line_326 $$ public void decode() -->Line_330 $$ tempMessage.toString()[ CD ]
Line_326 $$ public void decode() -->Line_331 $$ if (message.startsWith("\n"))
    message = message.substring(1);[ CD ]
Line_331 $$ if (message.startsWith("\n"))
    message = message.substring(1);-->Line_331 $$ message.startsWith("\n")[ CD ]
Line_331 $$ if (message.startsWith("\n"))
    message = message.substring(1);-->Line_332 $$ message.substring(1)[ CD ]
Line_0 $$ Entry-->Line_336 $$ //31
public class func [ CD ]
Line_336 $$ //31
public class func -->Line_337 $$ public void getLogContents(String logfile) [ CD ]
Line_337 $$ public void getLogContents(String logfile) -->Line_338 $$ while ((numRead = reader.read(buf)) != -1) [ CD ]
Line_337 $$ public void getLogContents(String logfile) -->Line_337 $$ public void getLogContents(String logfile) [ CD ]
Line_338 $$ while ((numRead = reader.read(buf)) != -1) -->Line_339 $$ String readData = String.valueOf(buf, 0, numRead)[ CD ]
Line_339 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_339 $$ String.valueOf(buf, 0, numRead)[ CD ]
Line_30 $$ numRead = reader.read(chars)-->Line_339 $$ String.valueOf(buf, 0, numRead)[ FD ]
Line_26 $$ int numRead = reader.read(chars)-->Line_339 $$ String.valueOf(buf, 0, numRead)[ FD ]
Line_338 $$ while ((numRead = reader.read(buf)) != -1) -->Line_340 $$ fileData.append(readData)[ CD ]
Line_339 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_340 $$ fileData.append(readData)[ FD ]
Line_321 $$ String readData = strbuf.toString()-->Line_340 $$ fileData.append(readData)[ FD ]
Line_222 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_340 $$ fileData.append(readData)[ FD ]
Line_337 $$ public void getLogContents(String logfile) -->Line_343 $$ return fileData.toString();[ CD ]
Line_343 $$ return fileData.toString();-->Line_343 $$ fileData.toString()[ CD ]
Line_0 $$ Entry-->Line_347 $$ //32
public class func [ CD ]
Line_347 $$ //32
public class func -->Line_348 $$ public void getResource(String name) [ CD ]
Line_348 $$ public void getResource(String name) -->Line_349 $$ while ((i = br.read()) != -1) [ CD ]
Line_348 $$ public void getResource(String name) -->Line_348 $$ public void getResource(String name) [ CD ]
Line_349 $$ while ((i = br.read()) != -1) -->Line_350 $$ sb.append((char) i)[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_350 $$ sb.append((char) i)[ FD ]
Line_348 $$ public void getResource(String name) -->Line_352 $$ return sb.toString();[ CD ]
Line_352 $$ return sb.toString();-->Line_352 $$ sb.toString()[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_352 $$ sb.toString()[ FD ]
Line_0 $$ Entry-->Line_356 $$ //33
public class func [ CD ]
Line_356 $$ //33
public class func -->Line_357 $$ public void readRawBytes(String fileName) [ CD ]
Line_357 $$ public void readRawBytes(String fileName) -->Line_358 $$ while ((c = in.read()) >= 0) buf.append((char) c);[ CD ]
Line_357 $$ public void readRawBytes(String fileName) -->Line_357 $$ public void readRawBytes(String fileName) [ CD ]
Line_358 $$ while ((c = in.read()) >= 0) buf.append((char) c);-->Line_359 $$ buf.append((char) c)[ CD ]
Line_357 $$ public void readRawBytes(String fileName) -->Line_360 $$ buf.toString()[ CD ]
Line_0 $$ Entry-->Line_364 $$ //34
public class func [ CD ]
Line_364 $$ //34
public class func -->Line_365 $$ public void loadTemplate() [ CD ]
Line_365 $$ public void loadTemplate() -->Line_366 $$ while ((c = reader.read()) != -1) [ CD ]
Line_365 $$ public void loadTemplate() -->Line_365 $$ public void loadTemplate() [ CD ]
Line_366 $$ while ((c = reader.read()) != -1) -->Line_367 $$ buffer.append((char) c)[ CD ]
Line_365 $$ public void loadTemplate() -->Line_369 $$ buffer.toString()[ CD ]
Line_0 $$ Entry-->Line_373 $$ //35
public class func [ CD ]
Line_373 $$ //35
public class func -->Line_374 $$ public void readPackageList(InputStream input, String path, boolean relative) [ CD ]
Line_374 $$ public void readPackageList(InputStream input, String path, boolean relative) -->Line_375 $$ while ((c = in.read()) >= 0) [ CD ]
Line_374 $$ public void readPackageList(InputStream input, String path, boolean relative) -->Line_374 $$ public void readPackageList(InputStream input, String path, boolean relative) [ CD ]
Line_375 $$ while ((c = in.read()) >= 0) -->Line_376 $$ char ch = (char) c[ CD ]
Line_375 $$ while ((c = in.read()) >= 0) -->Line_377 $$ if (ch == '\n' || ch == '\r') [ CD ]
Line_377 $$ if (ch == '\n' || ch == '\r') -->Line_378 $$ if (strbuf.length() > 0) [ CD ]
Line_378 $$ if (strbuf.length() > 0) -->Line_379 $$ String packname = strbuf.toString()[ CD ]
Line_379 $$ String packname = strbuf.toString()-->Line_379 $$ strbuf.toString()[ CD ]
Line_378 $$ if (strbuf.length() > 0) -->Line_380 $$ String packpath = path + packname.replace('.', '/') + '/'[ CD ]
Line_379 $$ String packname = strbuf.toString()-->Line_381 $$ packname.replace('.', '/')[ FD ]
Line_378 $$ if (strbuf.length() > 0) -->Line_383 $$ strbuf.setLength(0)[ CD ]
Line_377 $$ if (ch == '\n' || ch == '\r') -->Line_386 $$ strbuf.append(ch)[ CD ]
Line_376 $$ char ch = (char) c-->Line_386 $$ strbuf.append(ch)[ FD ]
Line_374 $$ public void readPackageList(InputStream input, String path, boolean relative) -->Line_389 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_393 $$ //36
public class func [ CD ]
Line_393 $$ //36
public class func -->Line_394 $$ public void testHappyPath() [ CD ]
Line_394 $$ public void testHappyPath() -->Line_395 $$ while ((c = in.read()) != -1) [ CD ]
Line_394 $$ public void testHappyPath() -->Line_394 $$ public void testHappyPath() [ CD ]
Line_395 $$ while ((c = in.read()) != -1) -->Line_396 $$ str.append((char) c)[ CD ]
Line_394 $$ public void testHappyPath() -->Line_398 $$ String response = str.toString()[ CD ]
Line_398 $$ String response = str.toString()-->Line_398 $$ str.toString()[ CD ]
Line_394 $$ public void testHappyPath() -->Line_399 $$ assertEquals(sourceMessage, response)[ CD ]
Line_398 $$ String response = str.toString()-->Line_399 $$ assertEquals(sourceMessage, response)[ FD ]
Line_0 $$ Entry-->Line_403 $$ //37
public class func [ CD ]
Line_403 $$ //37
public class func -->Line_404 $$ public void getContent(DataSource ds) [ CD ]
Line_404 $$ public void getContent(DataSource ds) -->Line_405 $$ while ((ch = is.read()) != -1) sb.append((char) ch);[ CD ]
Line_404 $$ public void getContent(DataSource ds) -->Line_404 $$ public void getContent(DataSource ds) [ CD ]
Line_405 $$ while ((ch = is.read()) != -1) sb.append((char) ch);-->Line_406 $$ sb.append((char) ch)[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_406 $$ sb.append((char) ch)[ FD ]
Line_404 $$ public void getContent(DataSource ds) -->Line_407 $$ return sb.toString();[ CD ]
Line_407 $$ return sb.toString();-->Line_407 $$ sb.toString()[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_407 $$ sb.toString()[ FD ]
Line_0 $$ Entry-->Line_411 $$ //38
public class func [ CD ]
Line_411 $$ //38
public class func -->Line_412 $$ public void doGetReaderTest(String testString) [ CD ]
Line_412 $$ public void doGetReaderTest(String testString) -->Line_413 $$ wrapper.getReader()[ CD ]
Line_412 $$ public void doGetReaderTest(String testString) -->Line_414 $$ while ((c = br.read()) != -1) [ CD ]
Line_412 $$ public void doGetReaderTest(String testString) -->Line_412 $$ public void doGetReaderTest(String testString) [ CD ]
Line_414 $$ while ((c = br.read()) != -1) -->Line_415 $$ buff.append((char) c)[ CD ]
Line_412 $$ public void doGetReaderTest(String testString) -->Line_417 $$ assertEquals(buff.toString(), testString)[ CD ]
Line_0 $$ Entry-->Line_421 $$ //39
public class func [ CD ]
Line_421 $$ //39
public class func -->Line_422 $$ public void getDataSet() [ CD ]
Line_422 $$ public void getDataSet() -->Line_423 $$ while ((c = is.read()) != -1) [ CD ]
Line_422 $$ public void getDataSet() -->Line_422 $$ public void getDataSet() [ CD ]
Line_423 $$ while ((c = is.read()) != -1) -->Line_424 $$ txtStr.append((char) c)[ CD ]
Line_422 $$ public void getDataSet() -->Line_426 $$ newInst[0] = (double) data.attribute(0).addStringValue(txtStr.toString())[ CD ]
Line_0 $$ Entry-->Line_430 $$ //40
public class func [ CD ]
Line_430 $$ //40
public class func -->Line_431 $$ public void readBody(final BufferedReader r) [ CD ]
Line_431 $$ public void readBody(final BufferedReader r) -->Line_432 $$ while (r.ready()) [ CD ]
Line_431 $$ public void readBody(final BufferedReader r) -->Line_431 $$ public void readBody(final BufferedReader r) [ CD ]
Line_432 $$ while (r.ready()) -->Line_432 $$ r.ready()[ CD ]
Line_432 $$ while (r.ready()) -->Line_434 $$ int charsRead = r.read(buffer)[ CD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_434 $$ r.read(buffer)[ CD ]
Line_432 $$ while (r.ready()) -->Line_435 $$ if (charsRead == -1) [ CD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_435 $$ if (charsRead == -1) [ FD ]
Line_432 $$ while (r.ready()) -->Line_439 $$ b.append(buffer, 0, charsRead)[ CD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_439 $$ b.append(buffer, 0, charsRead)[ FD ]
Line_431 $$ public void readBody(final BufferedReader r) -->Line_441 $$ return b.toString();[ CD ]
Line_441 $$ return b.toString();-->Line_441 $$ b.toString()[ CD ]
Line_0 $$ Entry-->Line_445 $$ //41
public class func [ CD ]
Line_445 $$ //41
public class func -->Line_446 $$ public void testOpenBufferedStream() [ CD ]
Line_446 $$ public void testOpenBufferedStream() -->Line_447 $$ while ((read = reader.read(buf)) != -1) [ CD ]
Line_446 $$ public void testOpenBufferedStream() -->Line_446 $$ public void testOpenBufferedStream() [ CD ]
Line_447 $$ while ((read = reader.read(buf)) != -1) -->Line_448 $$ writer.write(buf, 0, read)[ CD ]
Line_446 $$ public void testOpenBufferedStream() -->Line_450 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_454 $$ //42
public class func [ CD ]
Line_454 $$ //42
public class func -->Line_455 $$ public void readFrom(IInteger socketId) [ CD ]
Line_455 $$ public void readFrom(IInteger socketId) -->Line_456 $$ while (in.ready()) [ CD ]
Line_455 $$ public void readFrom(IInteger socketId) -->Line_455 $$ public void readFrom(IInteger socketId) [ CD ]
Line_456 $$ while (in.ready()) -->Line_456 $$ in.ready()[ CD ]
Line_456 $$ while (in.ready()) -->Line_457 $$ line.append((char) in.read())[ CD ]
Line_455 $$ public void readFrom(IInteger socketId) -->Line_459 $$ return vf.string(line.toString());[ CD ]
Line_459 $$ return vf.string(line.toString());-->Line_459 $$ vf.string(line.toString())[ CD ]
Line_0 $$ Entry-->Line_463 $$ //43
public class func [ CD ]
Line_463 $$ //43
public class func -->Line_464 $$ public void transferData(Reader source, Writer dest, int tz) [ CD ]
Line_464 $$ public void transferData(Reader source, Writer dest, int tz) -->Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)[ CD ]
Line_464 $$ public void transferData(Reader source, Writer dest, int tz) -->Line_466 $$ while ((read = in.read(bridge, 0, tz)) != -1) [ CD ]
Line_464 $$ public void transferData(Reader source, Writer dest, int tz) -->Line_464 $$ public void transferData(Reader source, Writer dest, int tz) [ CD ]
Line_466 $$ while ((read = in.read(bridge, 0, tz)) != -1) -->Line_467 $$ out.write(bridge, 0, read)[ CD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_467 $$ out.write(bridge, 0, read)[ FD ]
Line_464 $$ public void transferData(Reader source, Writer dest, int tz) -->Line_470 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_474 $$ //44
public class func [ CD ]
Line_474 $$ //44
public class func -->Line_475 $$ public void readUrl(String urlString) [ CD ]
Line_475 $$ public void readUrl(String urlString) -->Line_476 $$ while ((read = reader.read(chars)) != -1) buffer.append(chars, 0, read);[ CD ]
Line_475 $$ public void readUrl(String urlString) -->Line_475 $$ public void readUrl(String urlString) [ CD ]
Line_476 $$ while ((read = reader.read(chars)) != -1) buffer.append(chars, 0, read);-->Line_477 $$ buffer.append(chars, 0, read)[ CD ]
Line_475 $$ public void readUrl(String urlString) -->Line_478 $$ return buffer.toString();[ CD ]
Line_478 $$ return buffer.toString();-->Line_478 $$ buffer.toString()[ CD ]
Line_0 $$ Entry-->Line_482 $$ //45
public class func [ CD ]
Line_482 $$ //45
public class func -->Line_483 $$ public void ReadProcessOutput(BufferedReader stdInput) [ CD ]
Line_483 $$ public void ReadProcessOutput(BufferedReader stdInput) -->Line_484 $$ while ((bytesRead = stdInput.read(readBuf)) > 0) [ CD ]
Line_483 $$ public void ReadProcessOutput(BufferedReader stdInput) -->Line_483 $$ public void ReadProcessOutput(BufferedReader stdInput) [ CD ]
Line_484 $$ while ((bytesRead = stdInput.read(readBuf)) > 0) -->Line_485 $$ r.append(readBuf, 0, bytesRead)[ CD ]
Line_483 $$ public void ReadProcessOutput(BufferedReader stdInput) -->Line_487 $$ return r.toString();[ CD ]
Line_487 $$ return r.toString();-->Line_487 $$ r.toString()[ CD ]
Line_0 $$ Entry-->Line_491 $$ //46
public class func [ CD ]
Line_491 $$ //46
public class func -->Line_492 $$ public void inputStreamToString(final InputStream in) [ CD ]
Line_492 $$ public void inputStreamToString(final InputStream in) -->Line_493 $$ while ((reader.read(buffer)) != -1) [ CD ]
Line_492 $$ public void inputStreamToString(final InputStream in) -->Line_492 $$ public void inputStreamToString(final InputStream in) [ CD ]
Line_493 $$ while ((reader.read(buffer)) != -1) -->Line_494 $$ buf.append(buffer)[ CD ]
Line_492 $$ public void inputStreamToString(final InputStream in) -->Line_496 $$ return buf.toString();[ CD ]
Line_496 $$ return buf.toString();-->Line_496 $$ buf.toString()[ CD ]
Line_0 $$ Entry-->Line_500 $$ //47
public class func [ CD ]
Line_500 $$ //47
public class func -->Line_501 $$ public void readUrl(String urlString, String userAgent, String accept, String cookies) [ CD ]
Line_501 $$ public void readUrl(String urlString, String userAgent, String accept, String cookies) -->Line_502 $$ while ((read = reader.read(chars)) != -1) buffer.append(chars, 0, read);[ CD ]
Line_501 $$ public void readUrl(String urlString, String userAgent, String accept, String cookies) -->Line_501 $$ public void readUrl(String urlString, String userAgent, String accept, String cookies) [ CD ]
Line_502 $$ while ((read = reader.read(chars)) != -1) buffer.append(chars, 0, read);-->Line_503 $$ buffer.append(chars, 0, read)[ CD ]
Line_501 $$ public void readUrl(String urlString, String userAgent, String accept, String cookies) -->Line_504 $$ return buffer.toString();[ CD ]
Line_504 $$ return buffer.toString();-->Line_504 $$ buffer.toString()[ CD ]
Line_0 $$ Entry-->Line_508 $$ //48
public class func [ CD ]
Line_508 $$ //48
public class func -->Line_509 $$ public void testOpenBufferedStream() [ CD ]
Line_509 $$ public void testOpenBufferedStream() -->Line_510 $$ while ((read = reader.read(buf)) != -1) [ CD ]
Line_509 $$ public void testOpenBufferedStream() -->Line_509 $$ public void testOpenBufferedStream() [ CD ]
Line_510 $$ while ((read = reader.read(buf)) != -1) -->Line_511 $$ writer.write(buf, 0, read)[ CD ]
Line_509 $$ public void testOpenBufferedStream() -->Line_513 $$ reader.close()[ CD ]
Line_0 $$ Entry-->Line_517 $$ //49
public class func [ CD ]
Line_517 $$ //49
public class func -->Line_518 $$ public void InputStreamToString(InputStream in) [ CD ]
Line_518 $$ public void InputStreamToString(InputStream in) -->Line_519 $$ while ((charOut = reader.read()) != -1) [ CD ]
Line_518 $$ public void InputStreamToString(InputStream in) -->Line_518 $$ public void InputStreamToString(InputStream in) [ CD ]
Line_519 $$ while ((charOut = reader.read()) != -1) -->Line_520 $$ myStrBuf.append(String.valueOf((char) charOut))[ CD ]
Line_0 $$ Entry-->Line_525 $$ //50
public class func [ CD ]
Line_525 $$ //50
public class func -->Line_526 $$ public void doInBackground(Void... arg0) [ CD ]
Line_526 $$ public void doInBackground(Void... arg0) -->Line_527 $$ File file = new File(path.toString())[ CD ]
Line_526 $$ public void doInBackground(Void... arg0) -->Line_528 $$ if (!file.canRead()) [ CD ]
Line_528 $$ if (!file.canRead()) -->Line_528 $$ !file.canRead()[ CD ]
Line_528 $$ !file.canRead()-->Line_528 $$ file.canRead()[ CD ]
Line_527 $$ File file = new File(path.toString())-->Line_528 $$ file.canRead()[ FD ]
Line_528 $$ if (!file.canRead()) -->Line_532 $$ BufferedReader re = LinuxShell.execute("cat " + file.getPath())[ CD ]
Line_532 $$ BufferedReader re = LinuxShell.execute("cat " + file.getPath())-->Line_532 $$ LinuxShell.execute("cat " + file.getPath())[ CD ]
Line_527 $$ File file = new File(path.toString())-->Line_532 $$ file.getPath()[ FD ]
Line_528 $$ if (!file.canRead()) -->Line_533 $$ while ((read = re.read(buffer, 0, 1000)) != -1) rea.append(buffer, 0, read);[ CD ]
Line_528 $$ if (!file.canRead()) -->Line_528 $$ if (!file.canRead()) [ CD ]
Line_532 $$ BufferedReader re = LinuxShell.execute("cat " + file.getPath())-->Line_533 $$ re.read(buffer, 0, 1000)[ FD ]
Line_533 $$ while ((read = re.read(buffer, 0, 1000)) != -1) rea.append(buffer, 0, read);-->Line_534 $$ rea.append(buffer, 0, read)[ CD ]
Line_528 $$ if (!file.canRead()) -->Line_535 $$ re.close()[ CD ]
Line_532 $$ BufferedReader re = LinuxShell.execute("cat " + file.getPath())-->Line_535 $$ re.close()[ FD ]
Line_528 $$ if (!file.canRead()) -->Line_536 $$ openFile(path, rea)[ CD ]
Line_528 $$ if (!file.canRead()) -->Line_537 $$ return null;[ CD ]
Line_526 $$ public void doInBackground(Void... arg0) -->Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))[ CD ]
Line_0 $$ Entry-->Line_543 $$ //51
public class func [ CD ]
Line_543 $$ //51
public class func -->Line_544 $$ public void InputStreamToString(InputStream in) [ CD ]
Line_544 $$ public void InputStreamToString(InputStream in) -->Line_545 $$ while ((charOut = reader.read()) != -1) [ CD ]
Line_544 $$ public void InputStreamToString(InputStream in) -->Line_544 $$ public void InputStreamToString(InputStream in) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_545 $$ reader.read()[ FD ]
Line_545 $$ while ((charOut = reader.read()) != -1) -->Line_546 $$ myStrBuf.append(String.valueOf((char) charOut))[ CD ]
Line_0 $$ Entry-->Line_551 $$ //52
public class func [ CD ]
Line_551 $$ //52
public class func -->Line_552 $$ public void getPayloadAsString(final HttpServletRequest request) [ CD ]
Line_552 $$ public void getPayloadAsString(final HttpServletRequest request) -->Line_553 $$ int b = reader.read(buffer)[ CD ]
Line_553 $$ int b = reader.read(buffer)-->Line_553 $$ reader.read(buffer)[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_553 $$ reader.read(buffer)[ FD ]
Line_552 $$ public void getPayloadAsString(final HttpServletRequest request) -->Line_554 $$ while (b > 0) [ CD ]
Line_552 $$ public void getPayloadAsString(final HttpServletRequest request) -->Line_552 $$ public void getPayloadAsString(final HttpServletRequest request) [ CD ]
Line_553 $$ int b = reader.read(buffer)-->Line_554 $$ while (b > 0) [ FD ]
Line_554 $$ while (b > 0) -->Line_555 $$ stringBuffer.append(buffer, 0, b)[ CD ]
Line_553 $$ int b = reader.read(buffer)-->Line_555 $$ stringBuffer.append(buffer, 0, b)[ FD ]
Line_552 $$ public void getPayloadAsString(final HttpServletRequest request) -->Line_557 $$ return stringBuffer.toString();[ CD ]
Line_557 $$ return stringBuffer.toString();-->Line_557 $$ stringBuffer.toString()[ CD ]
Line_0 $$ Entry-->Line_561 $$ //53
public class func [ CD ]
Line_561 $$ //53
public class func -->Line_562 $$ public void getText(String filename, Class source) [ CD ]
Line_562 $$ public void getText(String filename, Class source) -->Line_563 $$ while ((nb = reader.read(buffer, 0, 1024)) >= 0) [ CD ]
Line_562 $$ public void getText(String filename, Class source) -->Line_562 $$ public void getText(String filename, Class source) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_563 $$ reader.read(buffer, 0, 1024)[ FD ]
Line_563 $$ while ((nb = reader.read(buffer, 0, 1024)) >= 0) -->Line_564 $$ res.append(buffer, 0, nb)[ CD ]
Line_562 $$ public void getText(String filename, Class source) -->Line_566 $$ return res.toString();[ CD ]
Line_566 $$ return res.toString();-->Line_566 $$ res.toString()[ CD ]
Line_0 $$ Entry-->Line_570 $$ //54
public class func [ CD ]
Line_570 $$ //54
public class func -->Line_571 $$ public void extractMessageContents(Message m) [ CD ]
Line_571 $$ public void extractMessageContents(Message m) -->Line_572 $$ while ((c = reader.read(ch)) != -1) [ CD ]
Line_571 $$ public void extractMessageContents(Message m) -->Line_571 $$ public void extractMessageContents(Message m) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_572 $$ reader.read(ch)[ FD ]
Line_376 $$ char ch = (char) c-->Line_572 $$ reader.read(ch)[ FD ]
Line_572 $$ while ((c = reader.read(ch)) != -1) -->Line_573 $$ sb.append(ch, 0, c)[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_573 $$ sb.append(ch, 0, c)[ FD ]
Line_376 $$ char ch = (char) c-->Line_573 $$ sb.append(ch, 0, c)[ FD ]
Line_571 $$ public void extractMessageContents(Message m) -->Line_575 $$ this.messageContents = sb.toString()[ CD ]
Line_575 $$ this.messageContents = sb.toString()-->Line_575 $$ sb.toString()[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_575 $$ sb.toString()[ FD ]
Line_0 $$ Entry-->Line_579 $$ //55
public class func [ CD ]
Line_579 $$ //55
public class func -->Line_580 $$ public void getJSONObject(URL jsonURL) [ CD ]
Line_580 $$ public void getJSONObject(URL jsonURL) -->Line_581 $$ while ((read = reader.read(buff)) > 0) [ CD ]
Line_580 $$ public void getJSONObject(URL jsonURL) -->Line_580 $$ public void getJSONObject(URL jsonURL) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_581 $$ reader.read(buff)[ FD ]
Line_581 $$ while ((read = reader.read(buff)) > 0) -->Line_582 $$ buffer.append(buff, 0, read)[ CD ]
Line_580 $$ public void getJSONObject(URL jsonURL) -->Line_584 $$ DynamicCloudsDaemon.LOG.info("Read " + buffer.length() + " bytes")[ CD ]
Line_580 $$ public void getJSONObject(URL jsonURL) -->Line_585 $$ Object res = JSON.parse(buffer.toString())[ CD ]
Line_585 $$ Object res = JSON.parse(buffer.toString())-->Line_585 $$ JSON.parse(buffer.toString())[ CD ]
Line_0 $$ Entry-->Line_589 $$ //56
public class func [ CD ]
Line_589 $$ //56
public class func -->Line_590 $$ public void transferData(Reader src, Writer dest, long charsToCopy) [ CD ]
Line_590 $$ public void transferData(Reader src, Writer dest, long charsToCopy) -->Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)[ CD ]
Line_590 $$ public void transferData(Reader src, Writer dest, long charsToCopy) -->Line_592 $$ while ((read = in.read(bridge, 0, (int) Math.min(charsLeft, BUFFER_SIZE))) > 0) [ CD ]
Line_590 $$ public void transferData(Reader src, Writer dest, long charsToCopy) -->Line_590 $$ public void transferData(Reader src, Writer dest, long charsToCopy) [ CD ]
Line_592 $$ while ((read = in.read(bridge, 0, (int) Math.min(charsLeft, BUFFER_SIZE))) > 0) -->Line_593 $$ out.write(bridge, 0, read)[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_593 $$ out.write(bridge, 0, read)[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_593 $$ out.write(bridge, 0, read)[ FD ]
Line_590 $$ public void transferData(Reader src, Writer dest, long charsToCopy) -->Line_596 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_600 $$ //57
public class func [ CD ]
Line_600 $$ //57
public class func -->Line_601 $$ public void readXMLFile(String filePath) [ CD ]
Line_601 $$ public void readXMLFile(String filePath) -->Line_602 $$ while ((n = bufferReader.read(buf)) > 0) [ CD ]
Line_601 $$ public void readXMLFile(String filePath) -->Line_601 $$ public void readXMLFile(String filePath) [ CD ]
Line_602 $$ while ((n = bufferReader.read(buf)) > 0) -->Line_603 $$ w.write(buf, 0, n)[ CD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_603 $$ w.write(buf, 0, n)[ FD ]
Line_4 $$ int n = reader.read(readBuffer)-->Line_603 $$ w.write(buf, 0, n)[ FD ]
Line_601 $$ public void readXMLFile(String filePath) -->Line_605 $$ bufferReader.close()[ CD ]
Line_0 $$ Entry-->Line_609 $$ //58
public class func [ CD ]
Line_609 $$ //58
public class func -->Line_610 $$ public void streamToString(InputStream in) [ CD ]
Line_610 $$ public void streamToString(InputStream in) -->Line_611 $$ while ((len = reader.read(buffer)) > 0) [ CD ]
Line_610 $$ public void streamToString(InputStream in) -->Line_610 $$ public void streamToString(InputStream in) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_611 $$ reader.read(buffer)[ FD ]
Line_611 $$ while ((len = reader.read(buffer)) > 0) -->Line_612 $$ sb.append(buffer, 0, len)[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_612 $$ sb.append(buffer, 0, len)[ FD ]
Line_0 $$ Entry-->Line_617 $$ //59
public class func [ CD ]
Line_617 $$ //59
public class func -->Line_618 $$ public void main(String[] args) [ CD ]
Line_618 $$ public void main(String[] args) -->Line_619 $$ while ((charsRead = r.read(cbuf, 0, 10240)) != -1) sb.append(cbuf, 0, charsRead);[ CD ]
Line_618 $$ public void main(String[] args) -->Line_618 $$ public void main(String[] args) [ CD ]
Line_619 $$ while ((charsRead = r.read(cbuf, 0, 10240)) != -1) sb.append(cbuf, 0, charsRead);-->Line_620 $$ sb.append(cbuf, 0, charsRead)[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_620 $$ sb.append(cbuf, 0, charsRead)[ FD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_620 $$ sb.append(cbuf, 0, charsRead)[ FD ]
Line_0 $$ Entry-->Line_624 $$ //60
public class func [ CD ]
Line_624 $$ //60
public class func -->Line_625 $$ public void loadFile(File file) [ CD ]
Line_625 $$ public void loadFile(File file) -->Line_626 $$ while ((read = br.read(buffer)) != -1) [ CD ]
Line_625 $$ public void loadFile(File file) -->Line_625 $$ public void loadFile(File file) [ CD ]
Line_626 $$ while ((read = br.read(buffer)) != -1) -->Line_627 $$ str.append(buffer, 0, read)[ CD ]
Line_625 $$ public void loadFile(File file) -->Line_629 $$ fr.close()[ CD ]
Line_0 $$ Entry-->Line_633 $$ //61
public class func [ CD ]
Line_633 $$ //61
public class func -->Line_634 $$ public void getFileContents(IFile file) [ CD ]
Line_634 $$ public void getFileContents(IFile file) -->Line_635 $$ while ((read = reader.read(part)) != -1) buffer.append(part, 0, read);[ CD ]
Line_634 $$ public void getFileContents(IFile file) -->Line_634 $$ public void getFileContents(IFile file) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_635 $$ reader.read(part)[ FD ]
Line_635 $$ while ((read = reader.read(part)) != -1) buffer.append(part, 0, read);-->Line_636 $$ buffer.append(part, 0, read)[ CD ]
Line_634 $$ public void getFileContents(IFile file) -->Line_637 $$ reader.close()[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_637 $$ reader.close()[ FD ]
Line_0 $$ Entry-->Line_641 $$ //62
public class func [ CD ]
Line_641 $$ //62
public class func -->Line_642 $$ public void readContent(InputStream input) [ CD ]
Line_642 $$ public void readContent(InputStream input) -->Line_643 $$ while ((charsRead = reader.read(charBuff)) > -1) [ CD ]
Line_642 $$ public void readContent(InputStream input) -->Line_642 $$ public void readContent(InputStream input) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_643 $$ reader.read(charBuff)[ FD ]
Line_643 $$ while ((charsRead = reader.read(charBuff)) > -1) -->Line_644 $$ strBuff.append(charBuff, 0, charsRead)[ CD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_644 $$ strBuff.append(charBuff, 0, charsRead)[ FD ]
Line_642 $$ public void readContent(InputStream input) -->Line_646 $$ reader.close()[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_646 $$ reader.close()[ FD ]
Line_0 $$ Entry-->Line_650 $$ //63
public class func [ CD ]
Line_650 $$ //63
public class func -->Line_651 $$ public void fileToString(FileSystem fs, Path path) [ CD ]
Line_651 $$ public void fileToString(FileSystem fs, Path path) -->Line_652 $$ while ((read = br.read(buff)) != -1) [ CD ]
Line_651 $$ public void fileToString(FileSystem fs, Path path) -->Line_651 $$ public void fileToString(FileSystem fs, Path path) [ CD ]
Line_652 $$ while ((read = br.read(buff)) != -1) -->Line_653 $$ sb.append(buff, 0, read)[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_653 $$ sb.append(buff, 0, read)[ FD ]
Line_651 $$ public void fileToString(FileSystem fs, Path path) -->Line_655 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_659 $$ //64
public class func [ CD ]
Line_659 $$ //64
public class func -->Line_660 $$ public void runDiff() [ CD ]
Line_660 $$ public void runDiff() -->Line_661 $$ while (reader.read(part) != -1) [ CD ]
Line_660 $$ public void runDiff() -->Line_660 $$ public void runDiff() [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_661 $$ reader.read(part)[ FD ]
Line_661 $$ while (reader.read(part) != -1) -->Line_662 $$ sbExpDiff.append(part)[ CD ]
Line_660 $$ public void runDiff() -->Line_664 $$ reader.close()[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_664 $$ reader.close()[ FD ]
Line_0 $$ Entry-->Line_668 $$ //65
public class func [ CD ]
Line_668 $$ //65
public class func -->Line_669 $$ public void compressFileToGzip(String inFilename) [ CD ]
Line_669 $$ public void compressFileToGzip(String inFilename) -->Line_670 $$ while ((c = in.read()) != -1) [ CD ]
Line_669 $$ public void compressFileToGzip(String inFilename) -->Line_669 $$ public void compressFileToGzip(String inFilename) [ CD ]
Line_670 $$ while ((c = in.read()) != -1) -->Line_671 $$ out.write(c)[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_671 $$ out.write(c)[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_671 $$ out.write(c)[ FD ]
Line_669 $$ public void compressFileToGzip(String inFilename) -->Line_673 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_677 $$ //66
public class func [ CD ]
Line_677 $$ //66
public class func -->Line_678 $$ public void unGZipBytes(byte[] bytes) [ CD ]
Line_678 $$ public void unGZipBytes(byte[] bytes) -->Line_679 $$ while ((c = br.read()) != -1) [ CD ]
Line_678 $$ public void unGZipBytes(byte[] bytes) -->Line_678 $$ public void unGZipBytes(byte[] bytes) [ CD ]
Line_679 $$ while ((c = br.read()) != -1) -->Line_680 $$ baos.write(c)[ CD ]
Line_678 $$ public void unGZipBytes(byte[] bytes) -->Line_682 $$ br.close()[ CD ]
Line_0 $$ Entry-->Line_686 $$ //67
public class func [ CD ]
Line_686 $$ //67
public class func -->Line_687 $$ public void getEntireResponse(final BufferedReader in) [ CD ]
Line_687 $$ public void getEntireResponse(final BufferedReader in) -->Line_688 $$ while ((chars = in.read(cbuf, 0, 1024)) != -1) [ CD ]
Line_687 $$ public void getEntireResponse(final BufferedReader in) -->Line_687 $$ public void getEntireResponse(final BufferedReader in) [ CD ]
Line_688 $$ while ((chars = in.read(cbuf, 0, 1024)) != -1) -->Line_689 $$ response.append(cbuf, 0, chars)[ CD ]
Line_398 $$ String response = str.toString()-->Line_689 $$ response.append(cbuf, 0, chars)[ FD ]
Line_0 $$ Entry-->Line_694 $$ //68
public class func [ CD ]
Line_694 $$ //68
public class func -->Line_695 $$ public void getValue() [ CD ]
Line_695 $$ public void getValue() -->Line_696 $$ while ((len = r.read(buf)) != -1) [ CD ]
Line_695 $$ public void getValue() -->Line_695 $$ public void getValue() [ CD ]
Line_696 $$ while ((len = r.read(buf)) != -1) -->Line_697 $$ b.append(buf, 0, len)[ CD ]
Line_553 $$ int b = reader.read(buffer)-->Line_697 $$ b.append(buf, 0, len)[ FD ]
Line_695 $$ public void getValue() -->Line_699 $$ r.close()[ CD ]
Line_0 $$ Entry-->Line_703 $$ //69
public class func [ CD ]
Line_703 $$ //69
public class func -->Line_704 $$ public void initTemplateContentsFromInputStream(InputStream templateStream) [ CD ]
Line_704 $$ public void initTemplateContentsFromInputStream(InputStream templateStream) -->Line_705 $$ StringBuilder builder = new StringBuilder(BUFFER_SIZE)[ CD ]
Line_704 $$ public void initTemplateContentsFromInputStream(InputStream templateStream) -->Line_706 $$ while ((nRead = reader.read(cbuf, 0, BUFFER_SIZE)) > 0) [ CD ]
Line_704 $$ public void initTemplateContentsFromInputStream(InputStream templateStream) -->Line_704 $$ public void initTemplateContentsFromInputStream(InputStream templateStream) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_706 $$ reader.read(cbuf, 0, BUFFER_SIZE)[ FD ]
Line_706 $$ while ((nRead = reader.read(cbuf, 0, BUFFER_SIZE)) > 0) -->Line_707 $$ builder.append(cbuf, 0, nRead)[ CD ]
Line_705 $$ StringBuilder builder = new StringBuilder(BUFFER_SIZE)-->Line_707 $$ builder.append(cbuf, 0, nRead)[ FD ]
Line_704 $$ public void initTemplateContentsFromInputStream(InputStream templateStream) -->Line_709 $$ reader.close()[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_709 $$ reader.close()[ FD ]
Line_0 $$ Entry-->Line_713 $$ //70
public class func [ CD ]
Line_713 $$ //70
public class func -->Line_714 $$ public void getFileContent(String fileName) [ CD ]
Line_714 $$ public void getFileContent(String fileName) -->Line_715 $$ while ((read = in.read(buffer)) >= 0) [ CD ]
Line_714 $$ public void getFileContent(String fileName) -->Line_714 $$ public void getFileContent(String fileName) [ CD ]
Line_715 $$ while ((read = in.read(buffer)) >= 0) -->Line_716 $$ sb.append(buffer, 0, read)[ CD ]
Line_259 $$ StringBuffer sb = new StringBuffer(available)-->Line_716 $$ sb.append(buffer, 0, read)[ FD ]
Line_714 $$ public void getFileContent(String fileName) -->Line_718 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_722 $$ //71
public class func [ CD ]
Line_722 $$ //71
public class func -->Line_723 $$ public void readFileAsString(File file) [ CD ]
Line_723 $$ public void readFileAsString(File file) -->Line_724 $$ while ((numRead = reader.read(buf)) != -1) [ CD ]
Line_723 $$ public void readFileAsString(File file) -->Line_723 $$ public void readFileAsString(File file) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_724 $$ reader.read(buf)[ FD ]
Line_724 $$ while ((numRead = reader.read(buf)) != -1) -->Line_725 $$ fileData.append(buf, 0, numRead)[ CD ]
Line_30 $$ numRead = reader.read(chars)-->Line_725 $$ fileData.append(buf, 0, numRead)[ FD ]
Line_26 $$ int numRead = reader.read(chars)-->Line_725 $$ fileData.append(buf, 0, numRead)[ FD ]
Line_723 $$ public void readFileAsString(File file) -->Line_727 $$ reader.close()[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_727 $$ reader.close()[ FD ]
Line_0 $$ Entry-->Line_731 $$ //72
public class func [ CD ]
Line_731 $$ //72
public class func -->Line_732 $$ public void zipCompress(String filename) [ CD ]
Line_732 $$ public void zipCompress(String filename) -->Line_733 $$ while ((c = in.read()) != -1) out.write(c);[ CD ]
Line_732 $$ public void zipCompress(String filename) -->Line_732 $$ public void zipCompress(String filename) [ CD ]
Line_733 $$ while ((c = in.read()) != -1) out.write(c);-->Line_734 $$ out.write(c)[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_734 $$ out.write(c)[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_734 $$ out.write(c)[ FD ]
Line_732 $$ public void zipCompress(String filename) -->Line_735 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_739 $$ //73
public class func [ CD ]
Line_739 $$ //73
public class func -->Line_740 $$ public void createCharSequence(Reader reader0) [ CD ]
Line_740 $$ public void createCharSequence(Reader reader0) -->Line_741 $$ while ((chars = reader.read(buff)) != -1) [ CD ]
Line_740 $$ public void createCharSequence(Reader reader0) -->Line_740 $$ public void createCharSequence(Reader reader0) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_741 $$ reader.read(buff)[ FD ]
Line_741 $$ while ((chars = reader.read(buff)) != -1) -->Line_742 $$ result.write(buff, 0, chars)[ CD ]
Line_740 $$ public void createCharSequence(Reader reader0) -->Line_744 $$ reader.close()[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_744 $$ reader.close()[ FD ]
Line_0 $$ Entry-->Line_748 $$ //74
public class func [ CD ]
Line_748 $$ //74
public class func -->Line_749 $$ public void main(String[] args) [ CD ]
Line_749 $$ public void main(String[] args) -->Line_750 $$ while ((n = in.read(buf)) != -1) [ CD ]
Line_749 $$ public void main(String[] args) -->Line_749 $$ public void main(String[] args) [ CD ]
Line_750 $$ while ((n = in.read(buf)) != -1) -->Line_751 $$ out.write(buf, 0, n)[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_751 $$ out.write(buf, 0, n)[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_751 $$ out.write(buf, 0, n)[ FD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_751 $$ out.write(buf, 0, n)[ FD ]
Line_4 $$ int n = reader.read(readBuffer)-->Line_751 $$ out.write(buf, 0, n)[ FD ]
Line_750 $$ while ((n = in.read(buf)) != -1) -->Line_752 $$ System.err.print(" " + n)[ CD ]
Line_749 $$ public void main(String[] args) -->Line_754 $$ in.close()[ CD ]
Line_0 $$ Entry-->Line_758 $$ //75
public class func [ CD ]
Line_758 $$ //75
public class func -->Line_759 $$ public void copyStreamToString(InputStream input, int approxStringLength) [ CD ]
Line_759 $$ public void copyStreamToString(InputStream input, int approxStringLength) -->Line_760 $$ while ((charsRead = reader.read(buffer)) != -1) [ CD ]
Line_759 $$ public void copyStreamToString(InputStream input, int approxStringLength) -->Line_759 $$ public void copyStreamToString(InputStream input, int approxStringLength) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_760 $$ reader.read(buffer)[ FD ]
Line_760 $$ while ((charsRead = reader.read(buffer)) != -1) -->Line_761 $$ w.write(buffer, 0, charsRead)[ CD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_761 $$ w.write(buffer, 0, charsRead)[ FD ]
Line_759 $$ public void copyStreamToString(InputStream input, int approxStringLength) -->Line_763 $$ return w.toString();[ CD ]
Line_763 $$ return w.toString();-->Line_763 $$ w.toString()[ CD ]
Line_0 $$ Entry-->Line_767 $$ //76
public class func [ CD ]
Line_767 $$ //76
public class func -->Line_768 $$ public void getFileFromPackage(String filename) [ CD ]
Line_768 $$ public void getFileFromPackage(String filename) -->Line_769 $$ while ((c = in.read()) > -1) [ CD ]
Line_768 $$ public void getFileFromPackage(String filename) -->Line_768 $$ public void getFileFromPackage(String filename) [ CD ]
Line_769 $$ while ((c = in.read()) > -1) -->Line_770 $$ s.write(c)[ CD ]
Line_768 $$ public void getFileFromPackage(String filename) -->Line_772 $$ return s.toString();[ CD ]
Line_772 $$ return s.toString();-->Line_772 $$ s.toString()[ CD ]
Line_0 $$ Entry-->Line_776 $$ //77
public class func [ CD ]
Line_776 $$ //77
public class func -->Line_777 $$ public void loadContents(@Nonnull File file, @Nonnull Charset charset) [ CD ]
Line_777 $$ public void loadContents(@Nonnull File file, @Nonnull Charset charset) -->Line_778 $$ while ((c = reader.read()) != -1) [ CD ]
Line_777 $$ public void loadContents(@Nonnull File file, @Nonnull Charset charset) -->Line_777 $$ public void loadContents(@Nonnull File file, @Nonnull Charset charset) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_778 $$ reader.read()[ FD ]
Line_778 $$ while ((c = reader.read()) != -1) -->Line_779 $$ writer.write(c)[ CD ]
Line_777 $$ public void loadContents(@Nonnull File file, @Nonnull Charset charset) -->Line_781 $$ return checkNotNull(writer.toString());[ CD ]
Line_781 $$ return checkNotNull(writer.toString());-->Line_781 $$ checkNotNull(writer.toString())[ CD ]
Line_777 $$ public void loadContents(@Nonnull File file, @Nonnull Charset charset) -->Line_782 $$ closeQuietly(reader)[ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_782 $$ closeQuietly(reader)[ FD ]
Line_0 $$ Entry-->Line_786 $$ //78
public class func [ CD ]
Line_786 $$ //78
public class func -->Line_787 $$ public void getContents(File root, String file) [ CD ]
Line_787 $$ public void getContents(File root, String file) -->Line_788 $$ while ((read = br.read(buffer)) != -1) [ CD ]
Line_787 $$ public void getContents(File root, String file) -->Line_787 $$ public void getContents(File root, String file) [ CD ]
Line_788 $$ while ((read = br.read(buffer)) != -1) -->Line_789 $$ capture.write(buffer, 0, read)[ CD ]
Line_787 $$ public void getContents(File root, String file) -->Line_791 $$ return capture.toString();[ CD ]
Line_791 $$ return capture.toString();-->Line_791 $$ capture.toString()[ CD ]
Line_0 $$ Entry-->Line_795 $$ //79
public class func [ CD ]
Line_795 $$ //79
public class func -->Line_796 $$ public void readResource(URL resourceUrl) [ CD ]
Line_796 $$ public void readResource(URL resourceUrl) -->Line_797 $$ while ((iRead = resourceBr.read(buffer)) != -1) [ CD ]
Line_796 $$ public void readResource(URL resourceUrl) -->Line_796 $$ public void readResource(URL resourceUrl) [ CD ]
Line_797 $$ while ((iRead = resourceBr.read(buffer)) != -1) -->Line_798 $$ sw.write(buffer, 0, iRead)[ CD ]
Line_796 $$ public void readResource(URL resourceUrl) -->Line_800 $$ sw.toString()[ CD ]
Line_0 $$ Entry-->Line_804 $$ //80
public class func [ CD ]
Line_804 $$ //80
public class func -->Line_805 $$ public void loadContents(File file, Charset charset) [ CD ]
Line_805 $$ public void loadContents(File file, Charset charset) -->Line_806 $$ while ((c = reader.read()) != -1) [ CD ]
Line_805 $$ public void loadContents(File file, Charset charset) -->Line_805 $$ public void loadContents(File file, Charset charset) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_806 $$ reader.read()[ FD ]
Line_806 $$ while ((c = reader.read()) != -1) -->Line_807 $$ writer.write(c)[ CD ]
Line_805 $$ public void loadContents(File file, Charset charset) -->Line_809 $$ return writer.toString();[ CD ]
Line_809 $$ return writer.toString();-->Line_809 $$ writer.toString()[ CD ]
Line_0 $$ Entry-->Line_813 $$ //81
public class func [ CD ]
Line_813 $$ //81
public class func -->Line_814 $$ public void loadContents(InputStream stream, Charset charset) [ CD ]
Line_814 $$ public void loadContents(InputStream stream, Charset charset) -->Line_815 $$ while ((c = reader.read()) != -1) [ CD ]
Line_814 $$ public void loadContents(InputStream stream, Charset charset) -->Line_814 $$ public void loadContents(InputStream stream, Charset charset) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_815 $$ reader.read()[ FD ]
Line_815 $$ while ((c = reader.read()) != -1) -->Line_816 $$ writer.write(c)[ CD ]
Line_814 $$ public void loadContents(InputStream stream, Charset charset) -->Line_818 $$ return writer.toString();[ CD ]
Line_818 $$ return writer.toString();-->Line_818 $$ writer.toString()[ CD ]
Line_0 $$ Entry-->Line_822 $$ //82
public class func [ CD ]
Line_822 $$ //82
public class func -->Line_823 $$ public void convertFileFromUtf16ToUtf8(File inputFile, File outputFile) [ CD ]
Line_823 $$ public void convertFileFromUtf16ToUtf8(File inputFile, File outputFile) -->Line_824 $$ while ((c = reader.read()) != -1) [ CD ]
Line_823 $$ public void convertFileFromUtf16ToUtf8(File inputFile, File outputFile) -->Line_823 $$ public void convertFileFromUtf16ToUtf8(File inputFile, File outputFile) [ CD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_824 $$ reader.read()[ FD ]
Line_824 $$ while ((c = reader.read()) != -1) -->Line_825 $$ writer.write(c)[ CD ]
Line_823 $$ public void convertFileFromUtf16ToUtf8(File inputFile, File outputFile) -->Line_827 $$ writer.close()[ CD ]
Line_0 $$ Entry-->Line_831 $$ //83
public class func [ CD ]
Line_831 $$ //83
public class func -->Line_832 $$ public void generateUTF8OutFile(File FinalOutFile) [ CD ]
Line_832 $$ public void generateUTF8OutFile(File FinalOutFile) -->Line_833 $$ while ((c = inFile.read()) != -1) bw.write(c);[ CD ]
Line_832 $$ public void generateUTF8OutFile(File FinalOutFile) -->Line_832 $$ public void generateUTF8OutFile(File FinalOutFile) [ CD ]
Line_833 $$ while ((c = inFile.read()) != -1) bw.write(c);-->Line_834 $$ bw.write(c)[ CD ]
Line_832 $$ public void generateUTF8OutFile(File FinalOutFile) -->Line_835 $$ bw.flush()[ CD ]
Line_832 $$ public void generateUTF8OutFile(File FinalOutFile) -->Line_836 $$ bw.close()[ CD ]
Line_0 $$ Entry-->Line_840 $$ //84
public class func [ CD ]
Line_840 $$ //84
public class func -->Line_841 $$ public void writeInputStreamToFile(String fileName, BufferedReader bufferedReader) [ CD ]
Line_841 $$ public void writeInputStreamToFile(String fileName, BufferedReader bufferedReader) -->Line_842 $$ while ((len = bufferedReader.read(buf)) > 0) out.write(buf, 0, len);[ CD ]
Line_841 $$ public void writeInputStreamToFile(String fileName, BufferedReader bufferedReader) -->Line_841 $$ public void writeInputStreamToFile(String fileName, BufferedReader bufferedReader) [ CD ]
Line_842 $$ while ((len = bufferedReader.read(buf)) > 0) out.write(buf, 0, len);-->Line_843 $$ out.write(buf, 0, len)[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_843 $$ out.write(buf, 0, len)[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_843 $$ out.write(buf, 0, len)[ FD ]
Line_841 $$ public void writeInputStreamToFile(String fileName, BufferedReader bufferedReader) -->Line_844 $$ out.close()[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_844 $$ out.close()[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_844 $$ out.close()[ FD ]
Line_0 $$ Entry-->Line_848 $$ //85
public class func [ CD ]
Line_848 $$ //85
public class func -->Line_849 $$ public void visitFile(AstNode astNode) [ CD ]
Line_849 $$ public void visitFile(AstNode astNode) -->Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)[ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_850 $$ Files.newReader(getContext().getFile(), charset)[ CD ]
Line_849 $$ public void visitFile(AstNode astNode) -->Line_851 $$ while ((c = reader.read()) != -1) [ CD ]
Line_849 $$ public void visitFile(AstNode astNode) -->Line_849 $$ public void visitFile(AstNode astNode) [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_851 $$ reader.read()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_851 $$ reader.read()[ FD ]
Line_851 $$ while ((c = reader.read()) != -1) -->Line_853 $$ if (c == '\r' || c == '?' || c == '?') [ CD ]
Line_853 $$ if (c == '\r' || c == '?' || c == '?') -->Line_854 $$ getContext().createFileViolation(this, "Replace all non line feed end of line characters in this file \"[ CD ]
Line_849 $$ public void visitFile(AstNode astNode) -->Line_859 $$ LOG.error("Unable to process check S1779 on file: [ CD ]
Line_0 $$ Entry-->Line_863 $$ //86
public class func [ CD ]
Line_863 $$ //86
public class func -->Line_864 $$ public void getLineNumber(File file, String encoding) [ CD ]
Line_864 $$ public void getLineNumber(File file, String encoding) -->Line_865 $$ while ((ch = bis.read()) != -1) [ CD ]
Line_864 $$ public void getLineNumber(File file, String encoding) -->Line_864 $$ public void getLineNumber(File file, String encoding) [ CD ]
Line_865 $$ while ((ch = bis.read()) != -1) -->Line_866 $$ if (ch == '\r' || ch == '\n') [ CD ]
Line_866 $$ if (ch == '\r' || ch == '\n') -->Line_867 $$ if (!isline) [ CD ]
Line_0 $$ Entry-->Line_878 $$ //87
public class func [ CD ]
Line_878 $$ //87
public class func -->Line_879 $$ public void process(Reader unbufferedReader) [ CD ]
Line_879 $$ public void process(Reader unbufferedReader) -->Line_880 $$ while ((length = bufferedReader.read(content)) > -1) [ CD ]
Line_879 $$ public void process(Reader unbufferedReader) -->Line_879 $$ public void process(Reader unbufferedReader) [ CD ]
Line_880 $$ while ((length = bufferedReader.read(content)) > -1) -->Line_881 $$ processEvents(decoderInstance.decodeEvents(String.valueOf(content, 0, length)))[ CD ]
Line_0 $$ Entry-->Line_887 $$ //88
public class func [ CD ]
Line_887 $$ //88
public class func -->Line_888 $$ public void process(Reader unbufferedReader) [ CD ]
Line_888 $$ public void process(Reader unbufferedReader) -->Line_889 $$ while ((length = bufferedReader.read(content)) > -1) [ CD ]
Line_888 $$ public void process(Reader unbufferedReader) -->Line_888 $$ public void process(Reader unbufferedReader) [ CD ]
Line_889 $$ while ((length = bufferedReader.read(content)) > -1) -->Line_890 $$ processEvents(decoderInstance.decodeEvents(String.valueOf(content, 0, length)))[ CD ]
Line_0 $$ Entry-->Line_895 $$ //89
public class func [ CD ]
Line_895 $$ //89
public class func -->Line_896 $$ public void execute() [ CD ]
Line_896 $$ public void execute() -->Line_897 $$ while ((n = reader.read(buf)) > 0) [ CD ]
Line_896 $$ public void execute() -->Line_896 $$ public void execute() [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_897 $$ reader.read(buf)[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_897 $$ reader.read(buf)[ FD ]
Line_897 $$ while ((n = reader.read(buf)) > 0) -->Line_898 $$ w.write(buf, 0, n)[ CD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_898 $$ w.write(buf, 0, n)[ FD ]
Line_4 $$ int n = reader.read(readBuffer)-->Line_898 $$ w.write(buf, 0, n)[ FD ]
Line_0 $$ Entry-->Line_903 $$ //90
public class func [ CD ]
Line_903 $$ //90
public class func -->Line_904 $$ public void main(String[] args) [ CD ]
Line_904 $$ public void main(String[] args) -->Line_905 $$ while (bufInputReader.read(array) != -1) [ CD ]
Line_904 $$ public void main(String[] args) -->Line_904 $$ public void main(String[] args) [ CD ]
Line_905 $$ while (bufInputReader.read(array) != -1) -->Line_906 $$ charArrayWriter.write(array)[ CD ]
Line_0 $$ Entry-->Line_912 $$ //91
public class func [ CD ]
Line_912 $$ //91
public class func -->Line_913 $$ public void addStringToZip(String text, String entryName, ZipOutputStream zOut) [ CD ]
Line_913 $$ public void addStringToZip(String text, String entryName, ZipOutputStream zOut) -->Line_914 $$ while ((i = reader.read()) != -1) [ CD ]
Line_913 $$ public void addStringToZip(String text, String entryName, ZipOutputStream zOut) -->Line_913 $$ public void addStringToZip(String text, String entryName, ZipOutputStream zOut) [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_914 $$ reader.read()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_914 $$ reader.read()[ FD ]
Line_914 $$ while ((i = reader.read()) != -1) -->Line_915 $$ zOut.write(i)[ CD ]
Line_913 $$ public void addStringToZip(String text, String entryName, ZipOutputStream zOut) -->Line_917 $$ zOut.closeEntry()[ CD ]
Line_0 $$ Entry-->Line_921 $$ //92
public class func [ CD ]
Line_921 $$ //92
public class func -->Line_922 $$ public void copyFiles(File outDir, String suppFiles) [ CD ]
Line_922 $$ public void copyFiles(File outDir, String suppFiles) -->Line_923 $$ while ((c = inFile.read()) != -1) pw.write(c);[ CD ]
Line_922 $$ public void copyFiles(File outDir, String suppFiles) -->Line_922 $$ public void copyFiles(File outDir, String suppFiles) [ CD ]
Line_923 $$ while ((c = inFile.read()) != -1) pw.write(c);-->Line_924 $$ pw.write(c)[ CD ]
Line_922 $$ public void copyFiles(File outDir, String suppFiles) -->Line_925 $$ pw.flush()[ CD ]
Line_922 $$ public void copyFiles(File outDir, String suppFiles) -->Line_926 $$ pw.close()[ CD ]
Line_0 $$ Entry-->Line_930 $$ //93
public class func [ CD ]
Line_930 $$ //93
public class func -->Line_931 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) [ CD ]
Line_931 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) -->Line_932 $$ while ((ch = reader.read()) != -1) [ CD ]
Line_931 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) -->Line_931 $$ public void parseAwfulCSV(BufferedReader reader, boolean header) [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_932 $$ reader.read()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_932 $$ reader.read()[ FD ]
Line_932 $$ while ((ch = reader.read()) != -1) -->Line_933 $$ if (insideQuote) [ CD ]
Line_933 $$ if (insideQuote) -->Line_934 $$ if (ch == '\"') [ CD ]
Line_376 $$ char ch = (char) c-->Line_934 $$ if (ch == '\"') [ FD ]
Line_934 $$ if (ch == '\"') -->Line_936 $$ reader.mark(1)[ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_936 $$ reader.mark(1)[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_936 $$ reader.mark(1)[ FD ]
Line_934 $$ if (ch == '\"') -->Line_937 $$ if (reader.read() == '\"') [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_937 $$ reader.read()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_937 $$ reader.read()[ FD ]
Line_937 $$ if (reader.read() == '\"') -->Line_939 $$ // it's "", which means a quote character
if (count == c.length) [ CD ]
Line_939 $$ // it's "", which means a quote character
if (count == c.length) -->Line_940 $$ PApplet.expand(c)[ CD ]
Line_937 $$ if (reader.read() == '\"') -->Line_942 $$ c[count++] = '\"'[ CD ]
Line_937 $$ if (reader.read() == '\"') -->Line_945 $$ reader.reset()[ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_945 $$ reader.reset()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_945 $$ reader.reset()[ FD ]
Line_934 $$ if (ch == '\"') -->Line_955 $$ // inside a quote, but the character isn't a quote
if (count == c.length) [ CD ]
Line_955 $$ // inside a quote, but the character isn't a quote
if (count == c.length) -->Line_956 $$ PApplet.expand(c)[ CD ]
Line_934 $$ if (ch == '\"') -->Line_958 $$ c[count++] = (char) ch[ CD ]
Line_933 $$ if (insideQuote) -->Line_961 $$ // not inside a quote
if (ch == '\"') [ CD ]
Line_376 $$ char ch = (char) c-->Line_961 $$ // not inside a quote
if (ch == '\"') [ FD ]
Line_961 $$ // not inside a quote
if (ch == '\"') -->Line_964 $$ if (ch == '\r' || ch == '\n') [ CD ]
Line_964 $$ if (ch == '\r' || ch == '\n') -->Line_965 $$ if (ch == '\r') [ CD ]
Line_376 $$ char ch = (char) c-->Line_965 $$ if (ch == '\r') [ FD ]
Line_965 $$ if (ch == '\r') -->Line_967 $$ reader.mark(1)[ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_967 $$ reader.mark(1)[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_967 $$ reader.mark(1)[ FD ]
Line_965 $$ if (ch == '\r') -->Line_968 $$ if (reader.read() != '\n') [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_968 $$ reader.read()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_968 $$ reader.read()[ FD ]
Line_968 $$ if (reader.read() != '\n') -->Line_969 $$ reader.reset()[ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_969 $$ reader.reset()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_969 $$ reader.reset()[ FD ]
Line_964 $$ if (ch == '\r' || ch == '\n') -->Line_972 $$ setString(row, col, new String(c, 0, count))[ CD ]
Line_964 $$ if (ch == '\r' || ch == '\n') -->Line_974 $$ if (row == 0 && header) [ CD ]
Line_974 $$ if (row == 0 && header) -->Line_976 $$ removeTitleRow()[ CD ]
Line_974 $$ if (row == 0 && header) -->Line_979 $$ header = false[ CD ]
Line_979 $$ header = false-->Line_979 $$ header = false[ FD ]
Line_964 $$ if (ch == '\r' || ch == '\n') -->Line_984 $$ if (ch == ',') [ CD ]
Line_376 $$ char ch = (char) c-->Line_984 $$ if (ch == ',') [ FD ]
Line_984 $$ if (ch == ',') -->Line_985 $$ setString(row, col, new String(c, 0, count))[ CD ]
Line_984 $$ if (ch == ',') -->Line_989 $$ ensureColumn(col)[ CD ]
Line_984 $$ if (ch == ',') -->Line_992 $$ // just a regular character, add it
if (count == c.length) [ CD ]
Line_992 $$ // just a regular character, add it
if (count == c.length) -->Line_993 $$ PApplet.expand(c)[ CD ]
Line_984 $$ if (ch == ',') -->Line_995 $$ c[count++] = (char) ch[ CD ]
Line_0 $$ Entry-->Line_1002 $$ //94
public class func [ CD ]
Line_1002 $$ //94
public class func -->Line_1003 $$ public void run() [ CD ]
Line_1003 $$ public void run() -->Line_1004 $$ while ((read = br.read(buff)) != -1) [ CD ]
Line_1003 $$ public void run() -->Line_1003 $$ public void run() [ CD ]
Line_1004 $$ while ((read = br.read(buff)) != -1) -->Line_1006 $$ SessionOutputUtil.addToOutput(sessionOutput.getSessionId(), sessionOutput.getInstanceId(), buff, 0, read)[ CD ]
Line_1004 $$ while ((read = br.read(buff)) != -1) -->Line_1007 $$ Thread.sleep(50)[ CD ]
Line_0 $$ Entry-->Line_1012 $$ //95
public class func [ CD ]
Line_1012 $$ //95
public class func -->Line_1013 $$ public void parseExecResult(BufferedReader lines) [ CD ]
Line_1013 $$ public void parseExecResult(BufferedReader lines) -->Line_1014 $$ while ((nRead = lines.read(buf, 0, buf.length)) > 0) [ CD ]
Line_1013 $$ public void parseExecResult(BufferedReader lines) -->Line_1013 $$ public void parseExecResult(BufferedReader lines) [ CD ]
Line_1014 $$ while ((nRead = lines.read(buf, 0, buf.length)) > 0) -->Line_1015 $$ output.append(buf, 0, nRead)[ CD ]
Line_0 $$ Entry-->Line_1020 $$ //96
public class func [ CD ]
Line_1020 $$ //96
public class func -->Line_1021 $$ public void loadData(Cache<String, String> cache) [ CD ]
Line_1021 $$ public void loadData(Cache<String, String> cache) -->Line_1022 $$ CharBuffer cbuf = CharBuffer.allocate(1024 * chunkSize)[ CD ]
Line_1022 $$ CharBuffer cbuf = CharBuffer.allocate(1024 * chunkSize)-->Line_1022 $$ CharBuffer.allocate(1024 * chunkSize)[ CD ]
Line_1021 $$ public void loadData(Cache<String, String> cache) -->Line_1023 $$ while (bufferedReader.read(cbuf) >= 0) [ CD ]
Line_1021 $$ public void loadData(Cache<String, String> cache) -->Line_1021 $$ public void loadData(Cache<String, String> cache) [ CD ]
Line_1022 $$ CharBuffer cbuf = CharBuffer.allocate(1024 * chunkSize)-->Line_1023 $$ bufferedReader.read(cbuf)[ FD ]
Line_1023 $$ while (bufferedReader.read(cbuf) >= 0) -->Line_1024 $$ Buffer buffer = cbuf.flip()[ CD ]
Line_1024 $$ Buffer buffer = cbuf.flip()-->Line_1024 $$ cbuf.flip()[ CD ]
Line_1022 $$ CharBuffer cbuf = CharBuffer.allocate(1024 * chunkSize)-->Line_1024 $$ cbuf.flip()[ FD ]
Line_1023 $$ while (bufferedReader.read(cbuf) >= 0) -->Line_1025 $$ String textChunk = buffer.toString()[ CD ]
Line_1025 $$ String textChunk = buffer.toString()-->Line_1025 $$ buffer.toString()[ CD ]
Line_1024 $$ Buffer buffer = cbuf.flip()-->Line_1025 $$ buffer.toString()[ FD ]
Line_1023 $$ while (bufferedReader.read(cbuf) >= 0) -->Line_1026 $$ cache.put(textFileName + (chunkId++), textChunk)[ CD ]
Line_1025 $$ String textChunk = buffer.toString()-->Line_1026 $$ cache.put(textFileName + (chunkId++), textChunk)[ FD ]
Line_1023 $$ while (bufferedReader.read(cbuf) >= 0) -->Line_1027 $$ cbuf.clear()[ CD ]
Line_1022 $$ CharBuffer cbuf = CharBuffer.allocate(1024 * chunkSize)-->Line_1027 $$ cbuf.clear()[ FD ]
Line_1023 $$ while (bufferedReader.read(cbuf) >= 0) -->Line_1028 $$ if (chunkId % 100 == 0)
    System.out.printf("  Inserted %s chunks from %s into grid%n", chunkId, textFileName);[ CD ]
Line_1028 $$ if (chunkId % 100 == 0)
    System.out.printf("  Inserted %s chunks from %s into grid%n", chunkId, textFileName);-->Line_1029 $$ System.out.printf("  Inserted %s chunks from %s into grid%n", chunkId, textFileName)[ CD ]
Line_0 $$ Entry-->Line_1034 $$ //97
public class func [ CD ]
Line_1034 $$ //97
public class func -->Line_1035 $$ public void GetPage(URL url, RequestSettings settings) [ CD ]
Line_1035 $$ public void GetPage(URL url, RequestSettings settings) -->Line_1036 $$ while ((r = in.read()) != -1) [ CD ]
Line_1035 $$ public void GetPage(URL url, RequestSettings settings) -->Line_1035 $$ public void GetPage(URL url, RequestSettings settings) [ CD ]
Line_1036 $$ while ((r = in.read()) != -1) -->Line_1037 $$ out.write(r)[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_1037 $$ out.write(r)[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_1037 $$ out.write(r)[ FD ]
Line_1035 $$ public void GetPage(URL url, RequestSettings settings) -->Line_1039 $$ out.close()[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_1039 $$ out.close()[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_1039 $$ out.close()[ FD ]
Line_0 $$ Entry-->Line_1043 $$ //98
public class func [ CD ]
Line_1043 $$ //98
public class func -->Line_1044 $$ public void SqlFileBuilder(BufferedReader reader) [ CD ]
Line_1044 $$ public void SqlFileBuilder(BufferedReader reader) -->Line_1045 $$ while (-1 != (c = reader.read())) [ CD ]
Line_1044 $$ public void SqlFileBuilder(BufferedReader reader) -->Line_1044 $$ public void SqlFileBuilder(BufferedReader reader) [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_1045 $$ reader.read()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_1045 $$ reader.read()[ FD ]
Line_1045 $$ while (-1 != (c = reader.read())) -->Line_1046 $$ stack.eat(c)[ CD ]
Line_0 $$ Entry-->Line_1051 $$ //99
public class func [ CD ]
Line_1051 $$ //99
public class func -->Line_1052 $$ public void testFetchLargeClobOneByOneCharBaseline() [ CD ]
Line_1052 $$ public void testFetchLargeClobOneByOneCharBaseline() -->Line_1053 $$ while (bufferedContent.read() != -1) [ CD ]
Line_1052 $$ public void testFetchLargeClobOneByOneCharBaseline() -->Line_1052 $$ public void testFetchLargeClobOneByOneCharBaseline() [ CD ]
Line_1052 $$ public void testFetchLargeClobOneByOneCharBaseline() -->Line_1056 $$ content.close()[ CD ]
Line_0 $$ Entry-->Line_1060 $$ //100
public class func [ CD ]
Line_1060 $$ //100
public class func -->Line_1061 $$ public void handlePut(final HttpServletRequest request, final ServletResponse response) [ CD ]
Line_1061 $$ public void handlePut(final HttpServletRequest request, final ServletResponse response) -->Line_1062 $$ while ((i = reader.read()) != -1) [ CD ]
Line_1061 $$ public void handlePut(final HttpServletRequest request, final ServletResponse response) -->Line_1061 $$ public void handlePut(final HttpServletRequest request, final ServletResponse response) [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_1062 $$ reader.read()[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_1062 $$ reader.read()[ FD ]
Line_1062 $$ while ((i = reader.read()) != -1) -->Line_1063 $$ out.write(i)[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_1063 $$ out.write(i)[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_1063 $$ out.write(i)[ FD ]
Line_1061 $$ public void handlePut(final HttpServletRequest request, final ServletResponse response) -->Line_1065 $$ out.close()[ CD ]
Line_591 $$ BufferedWriter out = new BufferedWriter(dest, BUFFER_SIZE)-->Line_1065 $$ out.close()[ FD ]
Line_465 $$ BufferedWriter out = new BufferedWriter(dest, tz)-->Line_1065 $$ out.close()[ FD ]
Line_0 $$ Entry-->Line_1069 $$ //101
public class func [ CD ]
Line_1069 $$ //101
public class func -->Line_1070 $$ public void readerLoop() [ CD ]
Line_1070 $$ public void readerLoop() -->Line_1071 $$ while (!this.isStopping && read != -1) [ CD ]
Line_1070 $$ public void readerLoop() -->Line_1070 $$ public void readerLoop() [ CD ]
Line_1071 $$ while (!this.isStopping && read != -1) -->Line_1072 $$ bufferedInput.read()[ CD ]
Line_0 $$ Entry-->Line_1077 $$ //102
public class func [ CD ]
Line_1077 $$ //102
public class func -->Line_1078 $$ public void parse(InputStream in) [ CD ]
Line_1078 $$ public void parse(InputStream in) -->Line_1079 $$ while ((len = reader.read(mReadBuf)) != -1) [ CD ]
Line_1078 $$ public void parse(InputStream in) -->Line_1078 $$ public void parse(InputStream in) [ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_1079 $$ reader.read(mReadBuf)[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_1079 $$ reader.read(mReadBuf)[ FD ]
Line_1079 $$ while ((len = reader.read(mReadBuf)) != -1) -->Line_1080 $$ mStringBuf.append(mReadBuf, 0, len)[ CD ]
Line_0 $$ Entry-->Line_1085 $$ //103
public class func [ CD ]
Line_1085 $$ //103
public class func -->Line_1086 $$ public void getLineOffset(int lineNumber, IFile file) [ CD ]
Line_1086 $$ public void getLineOffset(int lineNumber, IFile file) -->Line_1087 $$ while ((lineCount < lineNumber - 1) && (ch != -1)) [ CD ]
Line_1086 $$ public void getLineOffset(int lineNumber, IFile file) -->Line_1086 $$ public void getLineOffset(int lineNumber, IFile file) [ CD ]
Line_1087 $$ while ((lineCount < lineNumber - 1) && (ch != -1)) -->Line_1093 $$ if (ch != -1) [ CD ]
Line_376 $$ char ch = (char) c-->Line_1093 $$ if (ch != -1) [ FD ]
Line_1093 $$ if (ch != -1) -->Line_1093 $$ -1[ CD ]
Line_1093 $$ if (ch != -1) -->Line_1095 $$ if (ch == '\n') [ CD ]
Line_376 $$ char ch = (char) c-->Line_1095 $$ if (ch == '\n') [ FD ]
Line_0 $$ Entry-->Line_1103 $$ //104
public class func [ CD ]
Line_1103 $$ //104
public class func -->Line_1104 $$ public void fetch(BufferedReader reader) [ CD ]
Line_1104 $$ public void fetch(BufferedReader reader) -->Line_1105 $$ while (actual != -1) [ CD ]
Line_1104 $$ public void fetch(BufferedReader reader) -->Line_1104 $$ public void fetch(BufferedReader reader) [ CD ]
Line_1105 $$ while (actual != -1) -->Line_1105 $$ -1[ CD ]
Line_1105 $$ while (actual != -1) -->Line_1106 $$ writer.write(baf, 0, actual)[ CD ]
Line_1105 $$ while (actual != -1) -->Line_1107 $$ reader.read(baf, 0, BUFFER_SIZE)[ CD ]
Line_850 $$ BufferedReader reader = Files.newReader(getContext().getFile(), charset)-->Line_1107 $$ reader.read(baf, 0, BUFFER_SIZE)[ FD ]
Line_539 $$ FileReader reader = new FileReader(new File(path.toString()))-->Line_1107 $$ reader.read(baf, 0, BUFFER_SIZE)[ FD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_5 $$ while (n > 0) [ FD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_5 $$ while (n > 0) [ FD ]
Line_8 $$ n = reader.read(readBuffer)-->Line_7 $$ buffer.append(readBuffer, 0, n)[ FD ]
Line_18 $$ readCharacterCount = bufferedReader.read(readInCharacters)-->Line_16 $$ while (readCharacterCount > -1) [ FD ]
Line_18 $$ readCharacterCount = bufferedReader.read(readInCharacters)-->Line_16 $$ while (readCharacterCount > -1) [ FD ]
Line_30 $$ numRead = reader.read(chars)-->Line_27 $$ while (numRead != -1) [ FD ]
Line_30 $$ numRead = reader.read(chars)-->Line_27 $$ while (numRead != -1) [ FD ]
Line_30 $$ numRead = reader.read(chars)-->Line_29 $$ sw.write(chars, 0, numRead)[ FD ]
Line_222 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_223 $$ fileData.append(readData)[ FD ]
Line_339 $$ String readData = String.valueOf(buf, 0, numRead)-->Line_340 $$ fileData.append(readData)[ FD ]
Line_379 $$ String packname = strbuf.toString()-->Line_381 $$ packname.replace('.', '/')[ FD ]
Line_376 $$ char ch = (char) c-->Line_386 $$ strbuf.append(ch)[ FD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_435 $$ if (charsRead == -1) [ FD ]
Line_434 $$ int charsRead = r.read(buffer)-->Line_439 $$ b.append(buffer, 0, charsRead)[ FD ]
Line_979 $$ header = false-->Line_974 $$ if (row == 0 && header) [ FD ]
Line_1024 $$ Buffer buffer = cbuf.flip()-->Line_1025 $$ buffer.toString()[ FD ]
Line_1025 $$ String textChunk = buffer.toString()-->Line_1026 $$ cache.put(textFileName + (chunkId++), textChunk)[ FD ]
