Line_0 $$ Entry-->Line_2 $$ //13
public class func [ CD ]
Line_2 $$ //13
public class func -->Line_3 $$ public void getOutput(int limitBytes) [ CD ]
Line_3 $$ public void getOutput(int limitBytes) -->Line_4 $$ BufferedReader stdout = new BufferedReader(new InputStreamReader(objdump.getInputStream()))[ CD ]
Line_3 $$ public void getOutput(int limitBytes) -->Line_6 $$ while ((len = stdout.read(buf, 0, buf.length)) != -1) [ CD ]
Line_3 $$ public void getOutput(int limitBytes) -->Line_3 $$ public void getOutput(int limitBytes) [ CD ]
Line_4 $$ BufferedReader stdout = new BufferedReader(new InputStreamReader(objdump.getInputStream()))-->Line_6 $$ stdout.read(buf, 0, buf.length)[ FD ]
Line_6 $$ while ((len = stdout.read(buf, 0, buf.length)) != -1) -->Line_7 $$ if (limitBytes > 0 && buffer.length() + len >= limitBytes) [ CD ]
Line_7 $$ if (limitBytes > 0 && buffer.length() + len >= limitBytes) -->Line_8 $$ buffer.append(buf, 0, Math.min(len, limitBytes - buffer.length()))[ CD ]
Line_6 $$ while ((len = stdout.read(buf, 0, buf.length)) != -1) -->Line_11 $$ buffer.append(buf, 0, len)[ CD ]
Line_3 $$ public void getOutput(int limitBytes) -->Line_13 $$ stdout.close()[ CD ]
Line_4 $$ BufferedReader stdout = new BufferedReader(new InputStreamReader(objdump.getInputStream()))-->Line_13 $$ stdout.close()[ FD ]
Line_3 $$ public void getOutput(int limitBytes) -->Line_14 $$ return buffer.toString().getBytes();[ CD ]
Line_14 $$ return buffer.toString().getBytes();-->Line_14 $$ buffer.toString().getBytes()[ CD ]
