Line_0 $$ Entry-->Line_2 $$ //0
public class func [ CD ]
Line_2 $$ //0
public class func -->Line_3 $$ public void readFully(Reader reader) [ CD ]
Line_3 $$ public void readFully(Reader reader) -->Line_4 $$ while ((bytes_read = in.read(cbuf, 0, 1024)) != -1) [ CD ]
Line_3 $$ public void readFully(Reader reader) -->Line_3 $$ public void readFully(Reader reader) [ CD ]
Line_4 $$ while ((bytes_read = in.read(cbuf, 0, 1024)) != -1) -->Line_5 $$ sb.append(cbuf, 0, bytes_read)[ CD ]
Line_3 $$ public void readFully(Reader reader) -->Line_7 $$ return sb.toString();[ CD ]
Line_7 $$ return sb.toString();-->Line_7 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_11 $$ //1
public class func [ CD ]
Line_11 $$ //1
public class func -->Line_12 $$ public void getObject() [ CD ]
Line_12 $$ public void getObject() -->Line_13 $$ while ((len = reader.read(line, 0, 4096)) >= 0) builder.append(line, 0, len);[ CD ]
Line_12 $$ public void getObject() -->Line_12 $$ public void getObject() [ CD ]
Line_13 $$ while ((len = reader.read(line, 0, 4096)) >= 0) builder.append(line, 0, len);-->Line_14 $$ builder.append(line, 0, len)[ CD ]
Line_12 $$ public void getObject() -->Line_15 $$ return builder.toString();[ CD ]
Line_15 $$ return builder.toString();-->Line_15 $$ builder.toString()[ CD ]
Line_0 $$ Entry-->Line_19 $$ //2
public class func [ CD ]
Line_19 $$ //2
public class func -->Line_20 $$ public void readFromInputStreamReaderToString(InputStreamReader is) [ CD ]
Line_20 $$ public void readFromInputStreamReaderToString(InputStreamReader is) -->Line_21 $$ while ((len = reader.read(buffer)) >= 0) [ CD ]
Line_20 $$ public void readFromInputStreamReaderToString(InputStreamReader is) -->Line_20 $$ public void readFromInputStreamReaderToString(InputStreamReader is) [ CD ]
Line_21 $$ while ((len = reader.read(buffer)) >= 0) -->Line_22 $$ sb.append(buffer, 0, len)[ CD ]
Line_20 $$ public void readFromInputStreamReaderToString(InputStreamReader is) -->Line_24 $$ return sb.toString();[ CD ]
Line_24 $$ return sb.toString();-->Line_24 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_28 $$ //3
public class func [ CD ]
Line_28 $$ //3
public class func -->Line_29 $$ public void getSourceText(Status status, CompilerMessageLogger messageLogger) [ CD ]
Line_29 $$ public void getSourceText(Status status, CompilerMessageLogger messageLogger) -->Line_30 $$ int charsRead = sourceReader.read(inputBuffer)[ CD ]
Line_30 $$ int charsRead = sourceReader.read(inputBuffer)-->Line_30 $$ sourceReader.read(inputBuffer)[ CD ]
Line_29 $$ public void getSourceText(Status status, CompilerMessageLogger messageLogger) -->Line_31 $$ while (charsRead != -1) [ CD ]
Line_29 $$ public void getSourceText(Status status, CompilerMessageLogger messageLogger) -->Line_29 $$ public void getSourceText(Status status, CompilerMessageLogger messageLogger) [ CD ]
Line_30 $$ int charsRead = sourceReader.read(inputBuffer)-->Line_31 $$ while (charsRead != -1) [ FD ]
Line_31 $$ while (charsRead != -1) -->Line_32 $$ stringBuilder.append(inputBuffer, 0, charsRead)[ CD ]
Line_30 $$ int charsRead = sourceReader.read(inputBuffer)-->Line_32 $$ stringBuilder.append(inputBuffer, 0, charsRead)[ FD ]
Line_31 $$ while (charsRead != -1) -->Line_33 $$ charsRead = sourceReader.read(inputBuffer)[ CD ]
Line_33 $$ charsRead = sourceReader.read(inputBuffer)-->Line_33 $$ charsRead = sourceReader.read(inputBuffer)[ FD ]
Line_30 $$ int charsRead = sourceReader.read(inputBuffer)-->Line_33 $$ charsRead = sourceReader.read(inputBuffer)[ FD ]
Line_33 $$ charsRead = sourceReader.read(inputBuffer)-->Line_33 $$ sourceReader.read(inputBuffer)[ CD ]
Line_0 $$ Entry-->Line_38 $$ //4
public class func [ CD ]
Line_38 $$ //4
public class func -->Line_39 $$ public void fileMatchesPercentage(File file) [ CD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_40 $$ while ((count = reader.read(buffer, 0, buffer.length)) != -1) [ CD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_39 $$ public void fileMatchesPercentage(File file) [ CD ]
Line_40 $$ while ((count = reader.read(buffer, 0, buffer.length)) != -1) -->Line_41 $$ builder.append(buffer, 0, count)[ CD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_43 $$ String output = builder.toString()[ CD ]
Line_43 $$ String output = builder.toString()-->Line_43 $$ builder.toString()[ CD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_44 $$ if (output.startsWith("0")) [ CD ]
Line_43 $$ String output = builder.toString()-->Line_44 $$ if (output.startsWith("0")) [ FD ]
Line_44 $$ if (output.startsWith("0")) -->Line_44 $$ output.startsWith("0")[ CD ]
Line_43 $$ String output = builder.toString()-->Line_44 $$ output.startsWith("0")[ FD ]
Line_44 $$ if (output.startsWith("0")) -->Line_45 $$ if (getProject() != null) [ CD ]
Line_45 $$ if (getProject() != null) -->Line_46 $$ log(MessageFormat.format("[ CD ]
Line_44 $$ if (output.startsWith("0")) -->Line_48 $$ return evaluatePercentage(0);[ CD ]
Line_48 $$ return evaluatePercentage(0);-->Line_48 $$ evaluatePercentage(0)[ CD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_50 $$ StringTokenizer st = new StringTokenizer(output)[ CD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_51 $$ int translated = Integer.parseInt(st.nextToken())[ CD ]
Line_51 $$ int translated = Integer.parseInt(st.nextToken())-->Line_51 $$ Integer.parseInt(st.nextToken())[ CD ]
Line_50 $$ StringTokenizer st = new StringTokenizer(output)-->Line_51 $$ st.nextToken()[ FD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_52 $$ while (st.hasMoreTokens()) [ CD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_39 $$ public void fileMatchesPercentage(File file) [ CD ]
Line_52 $$ while (st.hasMoreTokens()) -->Line_52 $$ st.hasMoreTokens()[ CD ]
Line_50 $$ StringTokenizer st = new StringTokenizer(output)-->Line_52 $$ st.hasMoreTokens()[ FD ]
Line_52 $$ while (st.hasMoreTokens()) -->Line_53 $$ st.nextToken()[ CD ]
Line_50 $$ StringTokenizer st = new StringTokenizer(output)-->Line_53 $$ st.nextToken()[ FD ]
Line_52 $$ while (st.hasMoreTokens()) -->Line_54 $$ if (!st.hasMoreTokens()) [ CD ]
Line_54 $$ if (!st.hasMoreTokens()) -->Line_54 $$ !st.hasMoreTokens()[ CD ]
Line_54 $$ !st.hasMoreTokens()-->Line_54 $$ st.hasMoreTokens()[ CD ]
Line_50 $$ StringTokenizer st = new StringTokenizer(output)-->Line_54 $$ st.hasMoreTokens()[ FD ]
Line_52 $$ while (st.hasMoreTokens()) -->Line_57 $$ st.nextToken()[ CD ]
Line_50 $$ StringTokenizer st = new StringTokenizer(output)-->Line_57 $$ st.nextToken()[ FD ]
Line_52 $$ while (st.hasMoreTokens()) -->Line_58 $$ if (!st.hasMoreTokens()) [ CD ]
Line_58 $$ if (!st.hasMoreTokens()) -->Line_58 $$ !st.hasMoreTokens()[ CD ]
Line_58 $$ !st.hasMoreTokens()-->Line_58 $$ st.hasMoreTokens()[ CD ]
Line_50 $$ StringTokenizer st = new StringTokenizer(output)-->Line_58 $$ st.hasMoreTokens()[ FD ]
Line_52 $$ while (st.hasMoreTokens()) -->Line_61 $$ Integer.parseInt(st.nextToken())[ CD ]
Line_50 $$ StringTokenizer st = new StringTokenizer(output)-->Line_61 $$ st.nextToken()[ FD ]
Line_39 $$ public void fileMatchesPercentage(File file) -->Line_63 $$ int translatedPercentage = (int) (100.0 * (double) translated / (double) total)[ CD ]
Line_0 $$ Entry-->Line_67 $$ //5
public class func [ CD ]
Line_67 $$ //5
public class func -->Line_68 $$ public void run() [ CD ]
Line_68 $$ public void run() -->Line_69 $$ while ((len = reader.read(buf)) != -1) [ CD ]
Line_68 $$ public void run() -->Line_68 $$ public void run() [ CD ]
Line_69 $$ while ((len = reader.read(buf)) != -1) -->Line_70 $$ s.append(buf, 0, len)[ CD ]
Line_68 $$ public void run() -->Line_72 $$ String result = s.toString()[ CD ]
Line_72 $$ String result = s.toString()-->Line_72 $$ s.toString()[ CD ]
Line_0 $$ Entry-->Line_76 $$ //6
public class func [ CD ]
Line_76 $$ //6
public class func -->Line_77 $$ public void decompress(String str) [ CD ]
Line_77 $$ public void decompress(String str) -->Line_78 $$ while ((read = bf.read(buff)) != -1) [ CD ]
Line_77 $$ public void decompress(String str) -->Line_77 $$ public void decompress(String str) [ CD ]
Line_78 $$ while ((read = bf.read(buff)) != -1) -->Line_79 $$ response.append(buff, 0, read)[ CD ]
Line_77 $$ public void decompress(String str) -->Line_81 $$ return response.toString();[ CD ]
Line_81 $$ return response.toString();-->Line_81 $$ response.toString()[ CD ]
Line_0 $$ Entry-->Line_85 $$ //7
public class func [ CD ]
Line_85 $$ //7
public class func -->Line_86 $$ public void readFully(Reader reader) [ CD ]
Line_86 $$ public void readFully(Reader reader) -->Line_87 $$ while ((bytes_read = in.read(cbuf, 0, 1024)) != -1) [ CD ]
Line_86 $$ public void readFully(Reader reader) -->Line_86 $$ public void readFully(Reader reader) [ CD ]
Line_87 $$ while ((bytes_read = in.read(cbuf, 0, 1024)) != -1) -->Line_88 $$ sb.append(cbuf, 0, bytes_read)[ CD ]
Line_86 $$ public void readFully(Reader reader) -->Line_90 $$ return sb.toString();[ CD ]
Line_90 $$ return sb.toString();-->Line_90 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_94 $$ //8
public class func [ CD ]
Line_94 $$ //8
public class func -->Line_95 $$ public void getContent(BufferedReader reader) [ CD ]
Line_95 $$ public void getContent(BufferedReader reader) -->Line_96 $$ while ((ch = reader.read()) != -1) [ CD ]
Line_95 $$ public void getContent(BufferedReader reader) -->Line_95 $$ public void getContent(BufferedReader reader) [ CD ]
Line_96 $$ while ((ch = reader.read()) != -1) -->Line_97 $$ if (ch == '\r' || ch == '\n') [ CD ]
Line_97 $$ if (ch == '\r' || ch == '\n') -->Line_98 $$ if (line.length() > 0) [ CD ]
Line_98 $$ if (line.length() > 0) -->Line_100 $$ fullLog.append(ConsoleNote.removeNotes(line.toString()))[ CD ]
Line_98 $$ if (line.length() > 0) -->Line_101 $$ line.setLength(0)[ CD ]
Line_97 $$ if (ch == '\r' || ch == '\n') -->Line_103 $$ fullLog.append((char) ch)[ CD ]
Line_97 $$ if (ch == '\r' || ch == '\n') -->Line_105 $$ line.append((char) ch)[ CD ]
Line_95 $$ public void getContent(BufferedReader reader) -->Line_108 $$ if (line.length() > 0) [ CD ]
Line_108 $$ if (line.length() > 0) -->Line_110 $$ fullLog.append(ConsoleNote.removeNotes(line.toString()))[ CD ]
Line_95 $$ public void getContent(BufferedReader reader) -->Line_112 $$ StringBuilder content = new StringBuilder()[ CD ]
Line_95 $$ public void getContent(BufferedReader reader) -->Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)[ CD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_113 $$ pattern.matcher(fullLog)[ CD ]
Line_95 $$ public void getContent(BufferedReader reader) -->Line_114 $$ while (matcher.find()) [ CD ]
Line_95 $$ public void getContent(BufferedReader reader) -->Line_95 $$ public void getContent(BufferedReader reader) [ CD ]
Line_114 $$ while (matcher.find()) -->Line_114 $$ matcher.find()[ CD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_114 $$ matcher.find()[ FD ]
Line_114 $$ while (matcher.find()) -->Line_115 $$ if (maxMatches != 0 && ++numMatches > maxMatches) [ CD ]
Line_114 $$ while (matcher.find()) -->Line_118 $$ if (showTruncatedLines) [ CD ]
Line_118 $$ if (showTruncatedLines) -->Line_119 $$ if (matcher.start() > lastMatchEnd) [ CD ]
Line_119 $$ if (matcher.start() > lastMatchEnd) -->Line_119 $$ matcher.start()[ CD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_119 $$ matcher.start()[ FD ]
Line_119 $$ if (matcher.start() > lastMatchEnd) -->Line_121 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))[ CD ]
Line_121 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_121 $$ countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))[ CD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_121 $$ matcher.start()[ FD ]
Line_119 $$ if (matcher.start() > lastMatchEnd) -->Line_122 $$ if (numLinesTruncated > 0) [ CD ]
Line_121 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_122 $$ if (numLinesTruncated > 0) [ FD ]
Line_122 $$ if (numLinesTruncated > 0) -->Line_123 $$ stopPre(content, insidePre)[ CD ]
Line_112 $$ StringBuilder content = new StringBuilder()-->Line_123 $$ stopPre(content, insidePre)[ FD ]
Line_122 $$ if (numLinesTruncated > 0) -->Line_124 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ CD ]
Line_112 $$ StringBuilder content = new StringBuilder()-->Line_124 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ FD ]
Line_121 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_124 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ FD ]
Line_114 $$ while (matcher.find()) -->Line_128 $$ if (asHtml) [ CD ]
Line_128 $$ if (asHtml) -->Line_129 $$ startPre(content, insidePre)[ CD ]
Line_112 $$ StringBuilder content = new StringBuilder()-->Line_129 $$ startPre(content, insidePre)[ FD ]
Line_114 $$ while (matcher.find()) -->Line_131 $$ if (substText != null) [ CD ]
Line_131 $$ if (substText != null) -->Line_132 $$ final StringBuffer substBuf = new StringBuffer()[ CD ]
Line_131 $$ if (substText != null) -->Line_133 $$ matcher.appendReplacement(substBuf, substText)[ CD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_133 $$ matcher.appendReplacement(substBuf, substText)[ FD ]
Line_132 $$ final StringBuffer substBuf = new StringBuffer()-->Line_133 $$ matcher.appendReplacement(substBuf, substText)[ FD ]
Line_131 $$ if (substText != null) -->Line_135 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)[ CD ]
Line_135 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)-->Line_135 $$ substBuf.substring(matcher.start() - lastMatchEnd)[ CD ]
Line_132 $$ final StringBuffer substBuf = new StringBuffer()-->Line_135 $$ substBuf.substring(matcher.start() - lastMatchEnd)[ FD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_135 $$ matcher.start()[ FD ]
Line_131 $$ if (substText != null) -->Line_136 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ CD ]
Line_112 $$ StringBuilder content = new StringBuilder()-->Line_136 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ FD ]
Line_135 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)-->Line_136 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ FD ]
Line_131 $$ if (substText != null) -->Line_138 $$ appendMatchedSegment(content, matcher.group(), escapeHtml, matchedSegmentHtmlStyle)[ CD ]
Line_112 $$ StringBuilder content = new StringBuilder()-->Line_138 $$ appendMatchedSegment(content, matcher.group(), escapeHtml, matchedSegmentHtmlStyle)[ FD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_138 $$ matcher.group()[ FD ]
Line_114 $$ while (matcher.find()) -->Line_140 $$ matcher.end()[ CD ]
Line_113 $$ final Matcher matcher = pattern.matcher(fullLog)-->Line_140 $$ matcher.end()[ FD ]
Line_0 $$ Entry-->Line_145 $$ //9
public class func [ CD ]
Line_145 $$ //9
public class func -->Line_146 $$ public void parseStringField(BufferedReader reader) [ CD ]
Line_146 $$ public void parseStringField(BufferedReader reader) -->Line_147 $$ while (reader.read(tmp) > 0) [ CD ]
Line_146 $$ public void parseStringField(BufferedReader reader) -->Line_146 $$ public void parseStringField(BufferedReader reader) [ CD ]
Line_147 $$ while (reader.read(tmp) > 0) -->Line_148 $$ Character.toString(tmp[0])[ CD ]
Line_147 $$ while (reader.read(tmp) > 0) -->Line_149 $$ if (temp.equals("/")) [ CD ]
Line_149 $$ if (temp.equals("/")) -->Line_149 $$ temp.equals("/")[ CD ]
Line_149 $$ if (temp.equals("/")) -->Line_152 $$ sb.append(temp)[ CD ]
Line_146 $$ public void parseStringField(BufferedReader reader) -->Line_156 $$ String base30numberString = sb.toString()[ CD ]
Line_156 $$ String base30numberString = sb.toString()-->Line_156 $$ sb.toString()[ CD ]
Line_146 $$ public void parseStringField(BufferedReader reader) -->Line_157 $$ int base10equivalent = Integer.valueOf(base30numberString, 30)[ CD ]
Line_157 $$ int base10equivalent = Integer.valueOf(base30numberString, 30)-->Line_157 $$ Integer.valueOf(base30numberString, 30)[ CD ]
Line_156 $$ String base30numberString = sb.toString()-->Line_157 $$ Integer.valueOf(base30numberString, 30)[ FD ]
Line_146 $$ public void parseStringField(BufferedReader reader) -->Line_158 $$ reader.read(stringBody)[ CD ]
Line_146 $$ public void parseStringField(BufferedReader reader) -->Line_159 $$ String stringData = new String(stringBody)[ CD ]
Line_146 $$ public void parseStringField(BufferedReader reader) -->Line_160 $$ dbgLog.finer("stringData=" + stringData)[ CD ]
Line_0 $$ Entry-->Line_164 $$ //10
public class func [ CD ]
Line_164 $$ //10
public class func -->Line_165 $$ public void getContentAsString(URI uri, Charset charset) [ CD ]
Line_165 $$ public void getContentAsString(URI uri, Charset charset) -->Line_166 $$ while ((count = reader.read(chars)) != -1) sb.append(chars, 0, count);[ CD ]
Line_165 $$ public void getContentAsString(URI uri, Charset charset) -->Line_165 $$ public void getContentAsString(URI uri, Charset charset) [ CD ]
Line_166 $$ while ((count = reader.read(chars)) != -1) sb.append(chars, 0, count);-->Line_167 $$ sb.append(chars, 0, count)[ CD ]
Line_165 $$ public void getContentAsString(URI uri, Charset charset) -->Line_168 $$ return sb.toString();[ CD ]
Line_168 $$ return sb.toString();-->Line_168 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_172 $$ //11
public class func [ CD ]
Line_172 $$ //11
public class func -->Line_173 $$ public void main(String[] args) [ CD ]
Line_173 $$ public void main(String[] args) -->Line_174 $$ while ((nr = inputReader.read(buf)) != -1) [ CD ]
Line_173 $$ public void main(String[] args) -->Line_173 $$ public void main(String[] args) [ CD ]
Line_174 $$ while ((nr = inputReader.read(buf)) != -1) -->Line_175 $$ sb.append(buf, 0, nr)[ CD ]
Line_173 $$ public void main(String[] args) -->Line_177 $$ mc.process(sb.toString(), inputType, outputType, locale, audioType, defaultVoiceName, defaultStyle, defaultEffects, outputTypeParams, System.out)[ CD ]
Line_0 $$ Entry-->Line_182 $$ //12
public class func [ CD ]
Line_182 $$ //12
public class func -->Line_183 $$ public void toString(InputStream is, String encoding) [ CD ]
Line_183 $$ public void toString(InputStream is, String encoding) -->Line_184 $$ while ((len = reader.read(buf)) != -1) [ CD ]
Line_183 $$ public void toString(InputStream is, String encoding) -->Line_183 $$ public void toString(InputStream is, String encoding) [ CD ]
Line_184 $$ while ((len = reader.read(buf)) != -1) -->Line_185 $$ s.append(buf, 0, len)[ CD ]
Line_183 $$ public void toString(InputStream is, String encoding) -->Line_187 $$ return s.toString();[ CD ]
Line_187 $$ return s.toString();-->Line_187 $$ s.toString()[ CD ]
Line_0 $$ Entry-->Line_191 $$ //13
public class func [ CD ]
Line_191 $$ //13
public class func -->Line_192 $$ public void call() [ CD ]
Line_192 $$ public void call() -->Line_194 $$ while ((len = br.read(buf)) != -1 && sb.length() < OUTPUT_MAX_LEN) [ CD ]
Line_192 $$ public void call() -->Line_192 $$ public void call() [ CD ]
Line_194 $$ while ((len = br.read(buf)) != -1 && sb.length() < OUTPUT_MAX_LEN) -->Line_195 $$ sb.append(buf, 0, len)[ CD ]
Line_192 $$ public void call() -->Line_197 $$ if (sb.length() >= OUTPUT_MAX_LEN) [ CD ]
Line_197 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_197 $$ sb.length()[ CD ]
Line_197 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_198 $$ executionResult.setResult(ExecutionResultCode.RUNTIME)[ CD ]
Line_197 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_199 $$ executionResult.setMsg("Output limit exceeded")[ CD ]
Line_197 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_200 $$ killTest()[ CD ]
Line_192 $$ public void call() -->Line_203 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_207 $$ //14
public class func [ CD ]
Line_207 $$ //14
public class func -->Line_208 $$ public void deserializeXml(String argument, boolean isPath) [ CD ]
Line_208 $$ public void deserializeXml(String argument, boolean isPath) -->Line_209 $$ while ((lengthRead = br.read(buffer)) != -1) [ CD ]
Line_208 $$ public void deserializeXml(String argument, boolean isPath) -->Line_208 $$ public void deserializeXml(String argument, boolean isPath) [ CD ]
Line_209 $$ while ((lengthRead = br.read(buffer)) != -1) -->Line_210 $$ xmlSb.append(buffer, 0, lengthRead)[ CD ]
Line_208 $$ public void deserializeXml(String argument, boolean isPath) -->Line_212 $$ return deserializeXmlString(xmlSb.toString());[ CD ]
Line_212 $$ return deserializeXmlString(xmlSb.toString());-->Line_212 $$ deserializeXmlString(xmlSb.toString())[ CD ]
Line_0 $$ Entry-->Line_216 $$ //15
public class func [ CD ]
Line_216 $$ //15
public class func -->Line_217 $$ public void getStringFromIS(InputStream is) [ CD ]
Line_217 $$ public void getStringFromIS(InputStream is) -->Line_218 $$ while (br.read(buffer, 0, buffer.length) != -1) sb.append(buffer);[ CD ]
Line_217 $$ public void getStringFromIS(InputStream is) -->Line_217 $$ public void getStringFromIS(InputStream is) [ CD ]
Line_218 $$ while (br.read(buffer, 0, buffer.length) != -1) sb.append(buffer);-->Line_218 $$ sb.append(buffer)[ CD ]
Line_217 $$ public void getStringFromIS(InputStream is) -->Line_219 $$ return sb.toString();[ CD ]
Line_219 $$ return sb.toString();-->Line_219 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_223 $$ //16
public class func [ CD ]
Line_223 $$ //16
public class func -->Line_224 $$ public void httpRequest(@NotNull String url, @NotNull String method) [ CD ]
Line_224 $$ public void httpRequest(@NotNull String url, @NotNull String method) -->Line_225 $$ while ((n = reader.read(buffer)) != -1) [ CD ]
Line_224 $$ public void httpRequest(@NotNull String url, @NotNull String method) -->Line_224 $$ public void httpRequest(@NotNull String url, @NotNull String method) [ CD ]
Line_225 $$ while ((n = reader.read(buffer)) != -1) -->Line_226 $$ builder.append(buffer, 0, n)[ CD ]
Line_224 $$ public void httpRequest(@NotNull String url, @NotNull String method) -->Line_228 $$ return builder.toString();[ CD ]
Line_228 $$ return builder.toString();-->Line_228 $$ builder.toString()[ CD ]
Line_0 $$ Entry-->Line_232 $$ //17
public class func [ CD ]
Line_232 $$ //17
public class func -->Line_233 $$ public void setup() [ CD ]
Line_233 $$ public void setup() -->Line_234 $$ while ((length = reader.read(buffer)) != -1) [ CD ]
Line_233 $$ public void setup() -->Line_233 $$ public void setup() [ CD ]
Line_234 $$ while ((length = reader.read(buffer)) != -1) -->Line_235 $$ sb.append(buffer, 0, length)[ CD ]
Line_233 $$ public void setup() -->Line_237 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_241 $$ //18
public class func [ CD ]
Line_241 $$ //18
public class func -->Line_242 $$ public void readerToString(BufferedReader r) [ CD ]
Line_242 $$ public void readerToString(BufferedReader r) -->Line_243 $$ while ((read = r.read(buf)) > 0) [ CD ]
Line_242 $$ public void readerToString(BufferedReader r) -->Line_242 $$ public void readerToString(BufferedReader r) [ CD ]
Line_243 $$ while ((read = r.read(buf)) > 0) -->Line_244 $$ data.append(buf, 0, read)[ CD ]
Line_242 $$ public void readerToString(BufferedReader r) -->Line_246 $$ return data.toString();[ CD ]
Line_246 $$ return data.toString();-->Line_246 $$ data.toString()[ CD ]
Line_0 $$ Entry-->Line_250 $$ //19
public class func [ CD ]
Line_250 $$ //19
public class func -->Line_251 $$ public void read(File file) [ CD ]
Line_251 $$ public void read(File file) -->Line_252 $$ while ((len = reader.read(buffer, 0, BUFFER_SIZE)) != -1) [ CD ]
Line_251 $$ public void read(File file) -->Line_251 $$ public void read(File file) [ CD ]
Line_252 $$ while ((len = reader.read(buffer, 0, BUFFER_SIZE)) != -1) -->Line_253 $$ builder.append(buffer, 0, len)[ CD ]
Line_251 $$ public void read(File file) -->Line_255 $$ return builder.toString();[ CD ]
Line_255 $$ return builder.toString();-->Line_255 $$ builder.toString()[ CD ]
Line_0 $$ Entry-->Line_259 $$ //20
public class func [ CD ]
Line_259 $$ //20
public class func -->Line_260 $$ public void loadMarks(final InputStream inputStream) [ CD ]
Line_260 $$ public void loadMarks(final InputStream inputStream) -->Line_261 $$ while ((i = reader.read(buffer)) != -1) [ CD ]
Line_260 $$ public void loadMarks(final InputStream inputStream) -->Line_260 $$ public void loadMarks(final InputStream inputStream) [ CD ]
Line_261 $$ while ((i = reader.read(buffer)) != -1) -->Line_262 $$ fileContents.append(buffer, 0, i)[ CD ]
Line_260 $$ public void loadMarks(final InputStream inputStream) -->Line_264 $$ final StringTokenizer stringTokenizer = new StringTokenizer(fileContents.toString())[ CD ]
Line_0 $$ Entry-->Line_268 $$ //21
public class func [ CD ]
Line_268 $$ //21
public class func -->Line_269 $$ public void filter(String schemaUrl, Util.PropertyList connectInfo, InputStream stream) [ CD ]
Line_269 $$ public void filter(String schemaUrl, Util.PropertyList connectInfo, InputStream stream) -->Line_270 $$ while ((readCount = in.read(buf, 0, buf.length)) >= 0) [ CD ]
Line_269 $$ public void filter(String schemaUrl, Util.PropertyList connectInfo, InputStream stream) -->Line_269 $$ public void filter(String schemaUrl, Util.PropertyList connectInfo, InputStream stream) [ CD ]
Line_270 $$ while ((readCount = in.read(buf, 0, buf.length)) >= 0) -->Line_271 $$ builder.append(buf, 0, readCount)[ CD ]
Line_269 $$ public void filter(String schemaUrl, Util.PropertyList connectInfo, InputStream stream) -->Line_273 $$ return builder.toString();[ CD ]
Line_273 $$ return builder.toString();-->Line_273 $$ builder.toString()[ CD ]
Line_0 $$ Entry-->Line_277 $$ //22
public class func [ CD ]
Line_277 $$ //22
public class func -->Line_278 $$ public void readStream(final InputStream stream) [ CD ]
Line_278 $$ public void readStream(final InputStream stream) -->Line_279 $$ while ((read = reader.read(buffer)) != -1) output.append(buffer, 0, read);[ CD ]
Line_278 $$ public void readStream(final InputStream stream) -->Line_278 $$ public void readStream(final InputStream stream) [ CD ]
Line_279 $$ while ((read = reader.read(buffer)) != -1) output.append(buffer, 0, read);-->Line_280 $$ output.append(buffer, 0, read)[ CD ]
Line_43 $$ String output = builder.toString()-->Line_280 $$ output.append(buffer, 0, read)[ FD ]
Line_278 $$ public void readStream(final InputStream stream) -->Line_281 $$ return output.toString();[ CD ]
Line_281 $$ return output.toString();-->Line_281 $$ output.toString()[ CD ]
Line_43 $$ String output = builder.toString()-->Line_281 $$ output.toString()[ FD ]
Line_0 $$ Entry-->Line_285 $$ //23
public class func [ CD ]
Line_285 $$ //23
public class func -->Line_286 $$ public void getContentFile(File file) [ CD ]
Line_286 $$ public void getContentFile(File file) -->Line_287 $$ while ((num = reader.read(buffer)) > 0) [ CD ]
Line_286 $$ public void getContentFile(File file) -->Line_286 $$ public void getContentFile(File file) [ CD ]
Line_287 $$ while ((num = reader.read(buffer)) > 0) -->Line_288 $$ content.append(buffer, 0, num)[ CD ]
Line_112 $$ StringBuilder content = new StringBuilder()-->Line_288 $$ content.append(buffer, 0, num)[ FD ]
Line_286 $$ public void getContentFile(File file) -->Line_290 $$ content.toString()[ CD ]
Line_112 $$ StringBuilder content = new StringBuilder()-->Line_290 $$ content.toString()[ FD ]
Line_0 $$ Entry-->Line_294 $$ //24
public class func [ CD ]
Line_294 $$ //24
public class func -->Line_295 $$ public void testAddReferenceTypeInput() [ CD ]
Line_295 $$ public void testAddReferenceTypeInput() -->Line_296 $$ while ((charsRead = reader.read(cbuf)) != -1) [ CD ]
Line_295 $$ public void testAddReferenceTypeInput() -->Line_295 $$ public void testAddReferenceTypeInput() [ CD ]
Line_296 $$ while ((charsRead = reader.read(cbuf)) != -1) -->Line_297 $$ postText.append(cbuf, 0, charsRead)[ CD ]
Line_33 $$ charsRead = sourceReader.read(inputBuffer)-->Line_297 $$ postText.append(cbuf, 0, charsRead)[ FD ]
Line_30 $$ int charsRead = sourceReader.read(inputBuffer)-->Line_297 $$ postText.append(cbuf, 0, charsRead)[ FD ]
Line_295 $$ public void testAddReferenceTypeInput() -->Line_299 $$ assertTrue(postText.toString().contains("wps:Reference"))[ CD ]
Line_295 $$ public void testAddReferenceTypeInput() -->Line_300 $$ assertFalse(true)[ CD ]
Line_0 $$ Entry-->Line_304 $$ //25
public class func [ CD ]
Line_304 $$ //25
public class func -->Line_305 $$ public void call() [ CD ]
Line_305 $$ public void call() -->Line_307 $$ while ((len = br.read(buf)) != -1 && sb.length() < OUTPUT_MAX_LEN) [ CD ]
Line_305 $$ public void call() -->Line_305 $$ public void call() [ CD ]
Line_307 $$ while ((len = br.read(buf)) != -1 && sb.length() < OUTPUT_MAX_LEN) -->Line_308 $$ sb.append(buf, 0, len)[ CD ]
Line_305 $$ public void call() -->Line_310 $$ if (sb.length() >= OUTPUT_MAX_LEN) [ CD ]
Line_310 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_310 $$ sb.length()[ CD ]
Line_310 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_311 $$ executionResult.setResult(ExecutionResultCode.RUNTIME)[ CD ]
Line_310 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_312 $$ executionResult.setMsg("Output limit exceeded")[ CD ]
Line_310 $$ if (sb.length() >= OUTPUT_MAX_LEN) -->Line_313 $$ killTest()[ CD ]
Line_305 $$ public void call() -->Line_316 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_320 $$ //26
public class func [ CD ]
Line_320 $$ //26
public class func -->Line_321 $$ public void readEntirelyAsString(AtmosphereResource r) [ CD ]
Line_321 $$ public void readEntirelyAsString(AtmosphereResource r) -->Line_322 $$ Reader reader = request.getReader()[ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_322 $$ request.getReader()[ CD ]
Line_321 $$ public void readEntirelyAsString(AtmosphereResource r) -->Line_323 $$ if (reader != null) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_323 $$ if (reader != null) [ FD ]
Line_321 $$ public void readEntirelyAsString(AtmosphereResource r) -->Line_326 $$ if (bufferedReader != null) [ CD ]
Line_326 $$ if (bufferedReader != null) -->Line_327 $$ char[] charBuffer = new char[8192][ CD ]
Line_326 $$ if (bufferedReader != null) -->Line_328 $$ int bytesRead = -1[ CD ]
Line_328 $$ int bytesRead = -1-->Line_328 $$ -1[ CD ]
Line_330 $$ bytesRead = bufferedReader.read(charBuffer)-->Line_330 $$ bytesRead = bufferedReader.read(charBuffer)[ FD ]
Line_328 $$ int bytesRead = -1-->Line_330 $$ bytesRead = bufferedReader.read(charBuffer)[ FD ]
Line_330 $$ bytesRead = bufferedReader.read(charBuffer)-->Line_330 $$ bufferedReader.read(charBuffer)[ CD ]
Line_327 $$ char[] charBuffer = new char[8192]-->Line_330 $$ bufferedReader.read(charBuffer)[ FD ]
Line_330 $$ while ((bytesRead = bufferedReader.read(charBuffer)) > 0) -->Line_331 $$ stringBuilder.append(charBuffer, 0, bytesRead)[ CD ]
Line_327 $$ char[] charBuffer = new char[8192]-->Line_331 $$ stringBuilder.append(charBuffer, 0, bytesRead)[ FD ]
Line_330 $$ bytesRead = bufferedReader.read(charBuffer)-->Line_331 $$ stringBuilder.append(charBuffer, 0, bytesRead)[ FD ]
Line_328 $$ int bytesRead = -1-->Line_331 $$ stringBuilder.append(charBuffer, 0, bytesRead)[ FD ]
Line_326 $$ if (bufferedReader != null) -->Line_337 $$ stringBuilder.append("")[ CD ]
Line_0 $$ Entry-->Line_342 $$ //27
public class func [ CD ]
Line_342 $$ //27
public class func -->Line_343 $$ public void getCodeLines(final IFile file) [ CD ]
Line_343 $$ public void getCodeLines(final IFile file) -->Line_344 $$ while ((n = reader.read(readBuffer)) > 0) [ CD ]
Line_343 $$ public void getCodeLines(final IFile file) -->Line_343 $$ public void getCodeLines(final IFile file) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_344 $$ reader.read(readBuffer)[ FD ]
Line_344 $$ while ((n = reader.read(readBuffer)) > 0) -->Line_345 $$ buffer.append(readBuffer, 0, n)[ CD ]
Line_343 $$ public void getCodeLines(final IFile file) -->Line_347 $$ final IContentType contentType = IDE.getContentType(file)[ CD ]
Line_347 $$ final IContentType contentType = IDE.getContentType(file)-->Line_347 $$ IDE.getContentType(file)[ CD ]
Line_343 $$ public void getCodeLines(final IFile file) -->Line_348 $$ final ICodeSubmitContentHandler handler = RCodeLaunching.getCodeSubmitContentHandler((contentType != null) ? contentType.getId() : null)[ CD ]
Line_348 $$ final ICodeSubmitContentHandler handler = RCodeLaunching.getCodeSubmitContentHandler((contentType != null) ? contentType.getId() : null)-->Line_348 $$ RCodeLaunching.getCodeSubmitContentHandler((contentType != null) ? contentType.getId() : null)[ CD ]
Line_347 $$ final IContentType contentType = IDE.getContentType(file)-->Line_349 $$ contentType.getId()[ FD ]
Line_0 $$ Entry-->Line_353 $$ //28
public class func [ CD ]
Line_353 $$ //28
public class func -->Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) [ CD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_355 $$ while (reader.read(tmp) > 0) [ CD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_355 $$ reader.read(tmp)[ FD ]
Line_355 $$ while (reader.read(tmp) > 0) -->Line_356 $$ Character.toString(tmp[0])[ CD ]
Line_355 $$ while (reader.read(tmp) > 0) -->Line_357 $$ if (temp.equals("/")) [ CD ]
Line_357 $$ if (temp.equals("/")) -->Line_357 $$ temp.equals("/")[ CD ]
Line_357 $$ if (temp.equals("/")) -->Line_360 $$ sb.append(temp)[ CD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_363 $$ String rawNumberOfVariables = sb.toString()[ CD ]
Line_363 $$ String rawNumberOfVariables = sb.toString()-->Line_363 $$ sb.toString()[ CD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_364 $$ int rawLength = rawNumberOfVariables.length()[ CD ]
Line_364 $$ int rawLength = rawNumberOfVariables.length()-->Line_364 $$ rawNumberOfVariables.length()[ CD ]
Line_363 $$ String rawNumberOfVariables = sb.toString()-->Line_364 $$ rawNumberOfVariables.length()[ FD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_365 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")[ CD ]
Line_365 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_365 $$ StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")[ CD ]
Line_363 $$ String rawNumberOfVariables = sb.toString()-->Line_365 $$ StringUtils.strip(rawNumberOfVariables)[ FD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_366 $$ if ((numberOfVariables.equals("")) && (numberOfVariables.length() == rawLength)) [ CD ]
Line_365 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_366 $$ numberOfVariables.equals("")[ FD ]
Line_365 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_366 $$ numberOfVariables.length()[ FD ]
Line_366 $$ if ((numberOfVariables.equals("")) && (numberOfVariables.length() == rawLength)) -->Line_367 $$ numberOfVariables = "0"[ CD ]
Line_365 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_367 $$ numberOfVariables = "0"[ FD ]
Line_367 $$ numberOfVariables = "0"-->Line_367 $$ numberOfVariables = "0"[ FD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_369 $$ Integer.valueOf(numberOfVariables, 30)[ CD ]
Line_365 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_369 $$ Integer.valueOf(numberOfVariables, 30)[ FD ]
Line_367 $$ numberOfVariables = "0"-->Line_369 $$ Integer.valueOf(numberOfVariables, 30)[ FD ]
Line_354 $$ public void decodeNumberOfVariables(BufferedReader reader) -->Line_370 $$ dataTable.setVarQuantity(Long.valueOf(numberOfVariables, 30))[ CD ]
Line_365 $$ String numberOfVariables = StringUtils.stripStart((StringUtils.strip(rawNumberOfVariables)), "0")-->Line_370 $$ Long.valueOf(numberOfVariables, 30)[ FD ]
Line_367 $$ numberOfVariables = "0"-->Line_370 $$ Long.valueOf(numberOfVariables, 30)[ FD ]
Line_0 $$ Entry-->Line_374 $$ //29
public class func [ CD ]
Line_374 $$ //29
public class func -->Line_375 $$ public void inputStreamToString(InputStream in) [ CD ]
Line_375 $$ public void inputStreamToString(InputStream in) -->Line_376 $$ StringBuilder stringBuilder = new StringBuilder(BUFFER_SIZE)[ CD ]
Line_375 $$ public void inputStreamToString(InputStream in) -->Line_377 $$ while ((bytesRead = bufferedReader.read(buffer, 0, BUFFER_SIZE)) > 0) [ CD ]
Line_375 $$ public void inputStreamToString(InputStream in) -->Line_375 $$ public void inputStreamToString(InputStream in) [ CD ]
Line_377 $$ while ((bytesRead = bufferedReader.read(buffer, 0, BUFFER_SIZE)) > 0) -->Line_378 $$ stringBuilder.append(buffer, 0, bytesRead)[ CD ]
Line_376 $$ StringBuilder stringBuilder = new StringBuilder(BUFFER_SIZE)-->Line_378 $$ stringBuilder.append(buffer, 0, bytesRead)[ FD ]
Line_330 $$ bytesRead = bufferedReader.read(charBuffer)-->Line_378 $$ stringBuilder.append(buffer, 0, bytesRead)[ FD ]
Line_328 $$ int bytesRead = -1-->Line_378 $$ stringBuilder.append(buffer, 0, bytesRead)[ FD ]
Line_0 $$ Entry-->Line_383 $$ //30
public class func [ CD ]
Line_383 $$ //30
public class func -->Line_384 $$ public void retrieveJsonString(String url, String username, char[] password) [ CD ]
Line_384 $$ public void retrieveJsonString(String url, String username, char[] password) -->Line_385 $$ while ((len = reader.read(buffer)) > -1) [ CD ]
Line_384 $$ public void retrieveJsonString(String url, String username, char[] password) -->Line_384 $$ public void retrieveJsonString(String url, String username, char[] password) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_385 $$ reader.read(buffer)[ FD ]
Line_385 $$ while ((len = reader.read(buffer)) > -1) -->Line_386 $$ json.append(buffer, 0, len)[ CD ]
Line_384 $$ public void retrieveJsonString(String url, String username, char[] password) -->Line_388 $$ is.close()[ CD ]
Line_0 $$ Entry-->Line_392 $$ //31
public class func [ CD ]
Line_392 $$ //31
public class func -->Line_393 $$ public void getNumericFieldAsRawString(BufferedReader reader) [ CD ]
Line_393 $$ public void getNumericFieldAsRawString(BufferedReader reader) -->Line_394 $$ while (reader.read(tmp) > 0) [ CD ]
Line_393 $$ public void getNumericFieldAsRawString(BufferedReader reader) -->Line_393 $$ public void getNumericFieldAsRawString(BufferedReader reader) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_394 $$ reader.read(tmp)[ FD ]
Line_394 $$ while (reader.read(tmp) > 0) -->Line_395 $$ Character.toString(tmp[0])[ CD ]
Line_394 $$ while (reader.read(tmp) > 0) -->Line_396 $$ if (temp.equals("/")) [ CD ]
Line_396 $$ if (temp.equals("/")) -->Line_396 $$ temp.equals("/")[ CD ]
Line_396 $$ if (temp.equals("/")) -->Line_399 $$ sb.append(temp)[ CD ]
Line_393 $$ public void getNumericFieldAsRawString(BufferedReader reader) -->Line_403 $$ String base30numberString = sb.toString()[ CD ]
Line_403 $$ String base30numberString = sb.toString()-->Line_403 $$ sb.toString()[ CD ]
Line_393 $$ public void getNumericFieldAsRawString(BufferedReader reader) -->Line_404 $$ dbgLog.finer("base30numberString=" + base30numberString)[ CD ]
Line_0 $$ Entry-->Line_408 $$ //32
public class func [ CD ]
Line_408 $$ //32
public class func -->Line_409 $$ public void parseNumericField(BufferedReader reader) [ CD ]
Line_409 $$ public void parseNumericField(BufferedReader reader) -->Line_410 $$ while (reader.read(tmp) > 0) [ CD ]
Line_409 $$ public void parseNumericField(BufferedReader reader) -->Line_409 $$ public void parseNumericField(BufferedReader reader) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_410 $$ reader.read(tmp)[ FD ]
Line_410 $$ while (reader.read(tmp) > 0) -->Line_411 $$ Character.toString(tmp[0])[ CD ]
Line_410 $$ while (reader.read(tmp) > 0) -->Line_412 $$ if (temp.equals("/")) [ CD ]
Line_412 $$ if (temp.equals("/")) -->Line_412 $$ temp.equals("/")[ CD ]
Line_412 $$ if (temp.equals("/")) -->Line_415 $$ sb.append(temp)[ CD ]
Line_409 $$ public void parseNumericField(BufferedReader reader) -->Line_419 $$ String base30numberString = sb.toString()[ CD ]
Line_419 $$ String base30numberString = sb.toString()-->Line_419 $$ sb.toString()[ CD ]
Line_409 $$ public void parseNumericField(BufferedReader reader) -->Line_420 $$ dbgLog.finer("base30numberString=" + base30numberString)[ CD ]
Line_409 $$ public void parseNumericField(BufferedReader reader) -->Line_421 $$ int base10equivalent = Integer.valueOf(base30numberString, 30)[ CD ]
Line_421 $$ int base10equivalent = Integer.valueOf(base30numberString, 30)-->Line_421 $$ Integer.valueOf(base30numberString, 30)[ CD ]
Line_419 $$ String base30numberString = sb.toString()-->Line_421 $$ Integer.valueOf(base30numberString, 30)[ FD ]
Line_403 $$ String base30numberString = sb.toString()-->Line_421 $$ Integer.valueOf(base30numberString, 30)[ FD ]
Line_156 $$ String base30numberString = sb.toString()-->Line_421 $$ Integer.valueOf(base30numberString, 30)[ FD ]
Line_409 $$ public void parseNumericField(BufferedReader reader) -->Line_422 $$ dbgLog.finer("base10equivalent=" + base10equivalent)[ CD ]
Line_0 $$ Entry-->Line_426 $$ //33
public class func [ CD ]
Line_426 $$ //33
public class func -->Line_427 $$ public void readFile(IFile file) [ CD ]
Line_427 $$ public void readFile(IFile file) -->Line_428 $$ while ((numRead = reader.read(buf)) != -1) [ CD ]
Line_427 $$ public void readFile(IFile file) -->Line_427 $$ public void readFile(IFile file) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_428 $$ reader.read(buf)[ FD ]
Line_428 $$ while ((numRead = reader.read(buf)) != -1) -->Line_429 $$ sb.append(buf, 0, numRead)[ CD ]
Line_0 $$ Entry-->Line_434 $$ //34
public class func [ CD ]
Line_434 $$ //34
public class func -->Line_435 $$ public void getText(BufferedReader reader) [ CD ]
Line_435 $$ public void getText(BufferedReader reader) -->Line_436 $$ while ((nbCharRead = reader.read(charBuffer)) != -1) [ CD ]
Line_435 $$ public void getText(BufferedReader reader) -->Line_435 $$ public void getText(BufferedReader reader) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_436 $$ reader.read(charBuffer)[ FD ]
Line_327 $$ char[] charBuffer = new char[8192]-->Line_436 $$ reader.read(charBuffer)[ FD ]
Line_436 $$ while ((nbCharRead = reader.read(charBuffer)) != -1) -->Line_438 $$ answer.append(charBuffer, 0, nbCharRead)[ CD ]
Line_327 $$ char[] charBuffer = new char[8192]-->Line_438 $$ answer.append(charBuffer, 0, nbCharRead)[ FD ]
Line_0 $$ Entry-->Line_443 $$ //35
public class func [ CD ]
Line_443 $$ //35
public class func -->Line_444 $$ public void toString(BufferedReader reader) [ CD ]
Line_444 $$ public void toString(BufferedReader reader) -->Line_445 $$ while ((len = reader.read(buf)) != -1) [ CD ]
Line_444 $$ public void toString(BufferedReader reader) -->Line_444 $$ public void toString(BufferedReader reader) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_445 $$ reader.read(buf)[ FD ]
Line_445 $$ while ((len = reader.read(buf)) != -1) -->Line_446 $$ sb.append(buf, 0, len)[ CD ]
Line_444 $$ public void toString(BufferedReader reader) -->Line_448 $$ IOHelper.close(reader, "reader", LOG)[ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_448 $$ IOHelper.close(reader, "reader", LOG)[ FD ]
Line_0 $$ Entry-->Line_452 $$ //36
public class func [ CD ]
Line_452 $$ //36
public class func -->Line_453 $$ public void readFully(Reader reader) [ CD ]
Line_453 $$ public void readFully(Reader reader) -->Line_454 $$ BufferedReader bufferedReader = (BufferedReader) ((reader instanceof BufferedReader) ? reader : new BufferedReader(reader))[ CD ]
Line_453 $$ public void readFully(Reader reader) -->Line_456 $$ while ((charsRead = bufferedReader.read(chars)) >= 0) [ CD ]
Line_453 $$ public void readFully(Reader reader) -->Line_453 $$ public void readFully(Reader reader) [ CD ]
Line_454 $$ BufferedReader bufferedReader = (BufferedReader) ((reader instanceof BufferedReader) ? reader : new BufferedReader(reader))-->Line_456 $$ bufferedReader.read(chars)[ FD ]
Line_456 $$ while ((charsRead = bufferedReader.read(chars)) >= 0) -->Line_457 $$ sb.append(chars, 0, charsRead)[ CD ]
Line_33 $$ charsRead = sourceReader.read(inputBuffer)-->Line_457 $$ sb.append(chars, 0, charsRead)[ FD ]
Line_30 $$ int charsRead = sourceReader.read(inputBuffer)-->Line_457 $$ sb.append(chars, 0, charsRead)[ FD ]
Line_453 $$ public void readFully(Reader reader) -->Line_459 $$ safeClose(bufferedReader)[ CD ]
Line_454 $$ BufferedReader bufferedReader = (BufferedReader) ((reader instanceof BufferedReader) ? reader : new BufferedReader(reader))-->Line_459 $$ safeClose(bufferedReader)[ FD ]
Line_0 $$ Entry-->Line_463 $$ //37
public class func [ CD ]
Line_463 $$ //37
public class func -->Line_464 $$ public void convertToString(InputStream is) [ CD ]
Line_464 $$ public void convertToString(InputStream is) -->Line_465 $$ while ((cacheSize = reader.read(cache)) != STREAM_EOF) [ CD ]
Line_464 $$ public void convertToString(InputStream is) -->Line_464 $$ public void convertToString(InputStream is) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_465 $$ reader.read(cache)[ FD ]
Line_465 $$ while ((cacheSize = reader.read(cache)) != STREAM_EOF) -->Line_466 $$ String data = new String(cache, 0, cacheSize)[ CD ]
Line_465 $$ while ((cacheSize = reader.read(cache)) != STREAM_EOF) -->Line_467 $$ sb.append(data)[ CD ]
Line_466 $$ String data = new String(cache, 0, cacheSize)-->Line_467 $$ sb.append(data)[ FD ]
Line_464 $$ public void convertToString(InputStream is) -->Line_469 $$ return sb.toString();[ CD ]
Line_469 $$ return sb.toString();-->Line_469 $$ sb.toString()[ CD ]
Line_0 $$ Entry-->Line_473 $$ //38
public class func [ CD ]
Line_473 $$ //38
public class func -->Line_474 $$ public void readFile(final IFile file) [ CD ]
Line_474 $$ public void readFile(final IFile file) -->Line_475 $$ while ((n = reader.read(readBuffer)) > 0) [ CD ]
Line_474 $$ public void readFile(final IFile file) -->Line_474 $$ public void readFile(final IFile file) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_475 $$ reader.read(readBuffer)[ FD ]
Line_475 $$ while ((n = reader.read(readBuffer)) > 0) -->Line_476 $$ text.append(readBuffer, 0, n)[ CD ]
Line_474 $$ public void readFile(final IFile file) -->Line_478 $$ final char[] chars = new char[text.length()][ CD ]
Line_474 $$ public void readFile(final IFile file) -->Line_479 $$ text.getChars(0, chars.length, chars, 0)[ CD ]
Line_478 $$ final char[] chars = new char[text.length()]-->Line_479 $$ text.getChars(0, chars.length, chars, 0)[ FD ]
Line_0 $$ Entry-->Line_483 $$ //39
public class func [ CD ]
Line_483 $$ //39
public class func -->Line_484 $$ public void getDaytimeReply(String address, int port, int timeout) [ CD ]
Line_484 $$ public void getDaytimeReply(String address, int port, int timeout) -->Line_485 $$ while ((len = br.read(chars)) != -1) [ CD ]
Line_484 $$ public void getDaytimeReply(String address, int port, int timeout) -->Line_484 $$ public void getDaytimeReply(String address, int port, int timeout) [ CD ]
Line_478 $$ final char[] chars = new char[text.length()]-->Line_485 $$ br.read(chars)[ FD ]
Line_485 $$ while ((len = br.read(chars)) != -1) -->Line_486 $$ sb.append(chars, 0, len)[ CD ]
Line_478 $$ final char[] chars = new char[text.length()]-->Line_486 $$ sb.append(chars, 0, len)[ FD ]
Line_484 $$ public void getDaytimeReply(String address, int port, int timeout) -->Line_488 $$ is.close()[ CD ]
Line_0 $$ Entry-->Line_492 $$ //40
public class func [ CD ]
Line_492 $$ //40
public class func -->Line_493 $$ public void WyalFileLexer(String filename, Reader reader) [ CD ]
Line_493 $$ public void WyalFileLexer(String filename, Reader reader) -->Line_494 $$ while ((len = in.read(buf)) != -1) [ CD ]
Line_493 $$ public void WyalFileLexer(String filename, Reader reader) -->Line_493 $$ public void WyalFileLexer(String filename, Reader reader) [ CD ]
Line_494 $$ while ((len = in.read(buf)) != -1) -->Line_495 $$ text.append(buf, 0, len)[ CD ]
Line_0 $$ Entry-->Line_500 $$ //41
public class func [ CD ]
Line_500 $$ //41
public class func -->Line_501 $$ public void readAsString(InputStream inputStream) [ CD ]
Line_501 $$ public void readAsString(InputStream inputStream) -->Line_502 $$ CharBuffer c = CharBuffer.allocate(BUF_SIZE)[ CD ]
Line_502 $$ CharBuffer c = CharBuffer.allocate(BUF_SIZE)-->Line_502 $$ CharBuffer.allocate(BUF_SIZE)[ CD ]
Line_501 $$ public void readAsString(InputStream inputStream) -->Line_503 $$ while (reader.read(c) > -1) [ CD ]
Line_501 $$ public void readAsString(InputStream inputStream) -->Line_501 $$ public void readAsString(InputStream inputStream) [ CD ]
Line_322 $$ Reader reader = request.getReader()-->Line_503 $$ reader.read(c)[ FD ]
Line_502 $$ CharBuffer c = CharBuffer.allocate(BUF_SIZE)-->Line_503 $$ reader.read(c)[ FD ]
Line_503 $$ while (reader.read(c) > -1) -->Line_504 $$ c.flip()[ CD ]
Line_502 $$ CharBuffer c = CharBuffer.allocate(BUF_SIZE)-->Line_504 $$ c.flip()[ FD ]
Line_503 $$ while (reader.read(c) > -1) -->Line_505 $$ buf.append(c)[ CD ]
Line_502 $$ CharBuffer c = CharBuffer.allocate(BUF_SIZE)-->Line_505 $$ buf.append(c)[ FD ]
Line_503 $$ while (reader.read(c) > -1) -->Line_506 $$ c.clear()[ CD ]
Line_502 $$ CharBuffer c = CharBuffer.allocate(BUF_SIZE)-->Line_506 $$ c.clear()[ FD ]
Line_0 $$ Entry-->Line_511 $$ //42
public class func [ CD ]
Line_511 $$ //42
public class func -->Line_512 $$ public void fileContents(String filename) [ CD ]
Line_512 $$ public void fileContents(String filename) -->Line_513 $$ final CharBuffer buf = CharBuffer.allocate(1024)[ CD ]
Line_513 $$ final CharBuffer buf = CharBuffer.allocate(1024)-->Line_513 $$ CharBuffer.allocate(1024)[ CD ]
Line_512 $$ public void fileContents(String filename) -->Line_514 $$ while (bufferedReader.read(buf) != -1) [ CD ]
Line_512 $$ public void fileContents(String filename) -->Line_512 $$ public void fileContents(String filename) [ CD ]
Line_454 $$ BufferedReader bufferedReader = (BufferedReader) ((reader instanceof BufferedReader) ? reader : new BufferedReader(reader))-->Line_514 $$ bufferedReader.read(buf)[ FD ]
Line_513 $$ final CharBuffer buf = CharBuffer.allocate(1024)-->Line_514 $$ bufferedReader.read(buf)[ FD ]
Line_514 $$ while (bufferedReader.read(buf) != -1) -->Line_515 $$ buf.flip()[ CD ]
Line_513 $$ final CharBuffer buf = CharBuffer.allocate(1024)-->Line_515 $$ buf.flip()[ FD ]
Line_514 $$ while (bufferedReader.read(buf) != -1) -->Line_516 $$ builder.append(buf)[ CD ]
Line_513 $$ final CharBuffer buf = CharBuffer.allocate(1024)-->Line_516 $$ builder.append(buf)[ FD ]
Line_514 $$ while (bufferedReader.read(buf) != -1) -->Line_517 $$ buf.clear()[ CD ]
Line_513 $$ final CharBuffer buf = CharBuffer.allocate(1024)-->Line_517 $$ buf.clear()[ FD ]
Line_512 $$ public void fileContents(String filename) -->Line_519 $$ input.close()[ CD ]
Line_0 $$ Entry-->Line_523 $$ //43
public class func [ CD ]
Line_523 $$ //43
public class func -->Line_524 $$ public void executePost(String targetURL, String payload) [ CD ]
Line_524 $$ public void executePost(String targetURL, String payload) -->Line_525 $$ while (br.read() != -1) [ CD ]
Line_524 $$ public void executePost(String targetURL, String payload) -->Line_524 $$ public void executePost(String targetURL, String payload) [ CD ]
Line_525 $$ while (br.read() != -1) -->Line_526 $$ output.append(br.readLine()).append('\n')[ CD ]
Line_43 $$ String output = builder.toString()-->Line_526 $$ output.append(br.readLine())[ FD ]
Line_524 $$ public void executePost(String targetURL, String payload) -->Line_528 $$ httpClient.getConnectionManager().shutdown()[ CD ]
Line_33 $$ charsRead = sourceReader.read(inputBuffer)-->Line_31 $$ while (charsRead != -1) [ FD ]
Line_33 $$ charsRead = sourceReader.read(inputBuffer)-->Line_31 $$ while (charsRead != -1) [ FD ]
Line_33 $$ charsRead = sourceReader.read(inputBuffer)-->Line_32 $$ stringBuilder.append(inputBuffer, 0, charsRead)[ FD ]
Line_121 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_122 $$ if (numLinesTruncated > 0) [ FD ]
Line_121 $$ int numLinesTruncated = countLineTerminators(fullLog.subSequence(lastMatchEnd, matcher.start()))-->Line_124 $$ appendLinesTruncated(content, numLinesTruncated, asHtml)[ FD ]
Line_132 $$ final StringBuffer substBuf = new StringBuffer()-->Line_133 $$ matcher.appendReplacement(substBuf, substText)[ FD ]
Line_132 $$ final StringBuffer substBuf = new StringBuffer()-->Line_135 $$ substBuf.substring(matcher.start() - lastMatchEnd)[ FD ]
Line_135 $$ final String segment = substBuf.substring(matcher.start() - lastMatchEnd)-->Line_136 $$ appendMatchedSegment(content, segment, escapeHtml, matchedSegmentHtmlStyle)[ FD ]
Line_330 $$ bytesRead = bufferedReader.read(charBuffer)-->Line_331 $$ stringBuilder.append(charBuffer, 0, bytesRead)[ FD ]
Line_466 $$ String data = new String(cache, 0, cacheSize)-->Line_467 $$ sb.append(data)[ FD ]
