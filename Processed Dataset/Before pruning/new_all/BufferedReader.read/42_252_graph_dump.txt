Line_0 $$ Entry-->Line_2 $$ //41
public class func [ CD ]
Line_2 $$ //41
public class func -->Line_3 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) [ CD ]
Line_3 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_4 $$ int current = reader.read()[ CD ]
Line_4 $$ int current = reader.read()-->Line_4 $$ reader.read()[ CD ]
Line_3 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_5 $$ if (current < 0)
    break;[ CD ]
Line_4 $$ int current = reader.read()-->Line_5 $$ if (current < 0)
    break;[ FD ]
Line_3 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_6 $$ Math.max(stream.available(), DEFAULT_READING_SIZE)[ CD ]
Line_3 $$ public void getInputStreamAsCharArray(InputStream stream, int length, String encoding) -->Line_7 $$ if (totalRead + 1 + amountRequested > contents.length)
    System.arraycopy(contents, 0, contents = new char[totalRead + 1 + amountRequested], 0, totalRead);[ CD ]
Line_7 $$ if (totalRead + 1 + amountRequested > contents.length)
    System.arraycopy(contents, 0, contents = new char[totalRead + 1 + amountRequested], 0, totalRead);-->Line_8 $$ System.arraycopy(contents, 0, contents = new char[totalRead + 1 + amountRequested], 0, totalRead)[ CD ]
