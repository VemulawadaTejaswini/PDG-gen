Line_0 $$ Entry-->Line_2 $$ //170
public class func [ CD ]
Line_2 $$ //170
public class func -->Line_3 $$ public void leavesMark() [ CD ]
Line_3 $$ public void leavesMark() -->Line_4 $$ for (int i = 0; i < 1000; ++i) [ CD ]
Line_3 $$ public void leavesMark() -->Line_3 $$ public void leavesMark() [ CD ]
Line_4 $$ for (int i = 0; i < 1000; ++i) -->Line_4 $$ int i = 0[ CD ]
Line_4 $$ for (int i = 0; i < 1000; ++i) -->Line_4 $$ ++i[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ ++i[ FD ]
Line_4 $$ for (int i = 0; i < 1000; ++i) -->Line_5 $$ sb.append((char) i)[ CD ]
Line_3 $$ public void leavesMark() -->Line_7 $$ BufferedReader reader = new BufferedReader(new StringReader(sb.toString()), 100)[ CD ]
Line_3 $$ public void leavesMark() -->Line_8 $$ reader.skip(50)[ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new StringReader(sb.toString()), 100)-->Line_8 $$ reader.skip(50)[ FD ]
Line_3 $$ public void leavesMark() -->Line_9 $$ reader.mark(70)[ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new StringReader(sb.toString()), 100)-->Line_9 $$ reader.mark(70)[ FD ]
Line_3 $$ public void leavesMark() -->Line_10 $$ reader.skip(60)[ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new StringReader(sb.toString()), 100)-->Line_10 $$ reader.skip(60)[ FD ]
Line_3 $$ public void leavesMark() -->Line_11 $$ reader.reset()[ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new StringReader(sb.toString()), 100)-->Line_11 $$ reader.reset()[ FD ]
Line_3 $$ public void leavesMark() -->Line_12 $$ int charsRead = reader.read(buffer)[ CD ]
Line_12 $$ int charsRead = reader.read(buffer)-->Line_12 $$ reader.read(buffer)[ CD ]
Line_7 $$ BufferedReader reader = new BufferedReader(new StringReader(sb.toString()), 100)-->Line_12 $$ reader.read(buffer)[ FD ]
Line_3 $$ public void leavesMark() -->Line_13 $$ assertEquals(199, buffer[149])[ CD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < 1000; ++i) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ for (int i = 0; i < 1000; ++i) [ FD ]
Line_4 $$ int i = 0-->Line_4 $$ ++i[ FD ]
