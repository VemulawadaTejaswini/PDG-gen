Line_0 $$ Entry-->Line_2 $$ //131
public class func [ CD ]
Line_2 $$ //131
public class func -->Line_3 $$ public void findString(String filePath, String stringToFind) [ CD ]
Line_3 $$ public void findString(String filePath, String stringToFind) -->Line_4 $$ BufferedReader in = new BufferedReader(new FileReader(filePath))[ CD ]
Line_3 $$ public void findString(String filePath, String stringToFind) -->Line_5 $$ while ((numread = in.read(data, 0, 8096)) != -1) [ CD ]
Line_3 $$ public void findString(String filePath, String stringToFind) -->Line_3 $$ public void findString(String filePath, String stringToFind) [ CD ]
Line_4 $$ BufferedReader in = new BufferedReader(new FileReader(filePath))-->Line_5 $$ in.read(data, 0, 8096)[ FD ]
Line_5 $$ while ((numread = in.read(data, 0, 8096)) != -1) -->Line_6 $$ for (int i = 0; i < numread; i++) [ CD ]
Line_5 $$ while ((numread = in.read(data, 0, 8096)) != -1) -->Line_5 $$ while ((numread = in.read(data, 0, 8096)) != -1) [ CD ]
Line_6 $$ for (int i = 0; i < numread; i++) -->Line_6 $$ int i = 0[ CD ]
Line_6 $$ for (int i = 0; i < numread; i++) -->Line_6 $$ i++[ CD ]
Line_6 $$ int i = 0-->Line_6 $$ i++[ FD ]
Line_6 $$ for (int i = 0; i < numread; i++) -->Line_12 $$ /* If we have found the string already or if we our current
                     * character matches the current char in the target string
                     * then we just add the current character to our result
                     * string and move on.
                     */
if (toFindIndex >= stringToFind.length() || data[i] == stringToFind.charAt(toFindIndex)) [ CD ]
Line_12 $$ /* If we have found the string already or if we our current
                     * character matches the current char in the target string
                     * then we just add the current character to our result
                     * string and move on.
                     */
if (toFindIndex >= stringToFind.length() || data[i] == stringToFind.charAt(toFindIndex)) -->Line_13 $$ if (result == null) [ CD ]
Line_12 $$ /* If we have found the string already or if we our current
                     * character matches the current char in the target string
                     * then we just add the current character to our result
                     * string and move on.
                     */
if (toFindIndex >= stringToFind.length() || data[i] == stringToFind.charAt(toFindIndex)) -->Line_16 $$ if (Character.isISOControl(data[i])) [ CD ]
Line_16 $$ if (Character.isISOControl(data[i])) -->Line_16 $$ Character.isISOControl(data[i])[ CD ]
Line_16 $$ if (Character.isISOControl(data[i])) -->Line_17 $$ return result.toString();[ CD ]
Line_17 $$ return result.toString();-->Line_17 $$ result.toString()[ CD ]
Line_12 $$ /* If we have found the string already or if we our current
                     * character matches the current char in the target string
                     * then we just add the current character to our result
                     * string and move on.
                     */
if (toFindIndex >= stringToFind.length() || data[i] == stringToFind.charAt(toFindIndex)) -->Line_19 $$ result.append(data[i])[ CD ]
Line_12 $$ /* If we have found the string already or if we our current
                     * character matches the current char in the target string
                     * then we just add the current character to our result
                     * string and move on.
                     */
if (toFindIndex >= stringToFind.length() || data[i] == stringToFind.charAt(toFindIndex)) -->Line_33 $$ /* Otherwise things can get complex.  If we haven't
                         * started to match, then just keep going.  If we have
                         * started to match, then we need to move backwards
                         * to make sure we don't miss a match.  For example:
                         * looking for HI in HHI.  If the current character
                         * isn't the same as the last character, then we aren't
                         * going to match, so null everything out and keep
                         * going.  Otherwise, decrment everything by one,
                         * because we didn't match the first character, and
                         * go through the loop on this character again.
                         */
if (toFindIndex > 0) [ CD ]
Line_33 $$ /* Otherwise things can get complex.  If we haven't
                         * started to match, then just keep going.  If we have
                         * started to match, then we need to move backwards
                         * to make sure we don't miss a match.  For example:
                         * looking for HI in HHI.  If the current character
                         * isn't the same as the last character, then we aren't
                         * going to match, so null everything out and keep
                         * going.  Otherwise, decrment everything by one,
                         * because we didn't match the first character, and
                         * go through the loop on this character again.
                         */
if (toFindIndex > 0) -->Line_34 $$ if (data[i] != lastchar) [ CD ]
Line_33 $$ /* Otherwise things can get complex.  If we haven't
                         * started to match, then just keep going.  If we have
                         * started to match, then we need to move backwards
                         * to make sure we don't miss a match.  For example:
                         * looking for HI in HHI.  If the current character
                         * isn't the same as the last character, then we aren't
                         * going to match, so null everything out and keep
                         * going.  Otherwise, decrment everything by one,
                         * because we didn't match the first character, and
                         * go through the loop on this character again.
                         */
if (toFindIndex > 0) -->Line_40 $$ i--[ CD ]
Line_6 $$ int i = 0-->Line_40 $$ i--[ FD ]
Line_33 $$ /* Otherwise things can get complex.  If we haven't
                         * started to match, then just keep going.  If we have
                         * started to match, then we need to move backwards
                         * to make sure we don't miss a match.  For example:
                         * looking for HI in HHI.  If the current character
                         * isn't the same as the last character, then we aren't
                         * going to match, so null everything out and keep
                         * going.  Otherwise, decrment everything by one,
                         * because we didn't match the first character, and
                         * go through the loop on this character again.
                         */
if (toFindIndex > 0) -->Line_41 $$ result.deleteCharAt(result.length() - 1)[ CD ]
Line_6 $$ int i = 0-->Line_6 $$ for (int i = 0; i < numread; i++) [ FD ]
Line_6 $$ int i = 0-->Line_6 $$ for (int i = 0; i < numread; i++) [ FD ]
Line_6 $$ int i = 0-->Line_6 $$ i++[ FD ]
Line_6 $$ int i = 0-->Line_40 $$ i--[ FD ]
